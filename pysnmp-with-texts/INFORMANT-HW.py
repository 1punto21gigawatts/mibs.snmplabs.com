#
# PySNMP MIB module INFORMANT-HW (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INFORMANT-HW
# Produced by pysmi-0.3.4 at Wed May  1 13:53:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Integer32, Unsigned32, iso, Bits, TimeTicks, IpAddress, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Integer32", "Unsigned32", "iso", "Bits", "TimeTicks", "IpAddress", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "MibIdentifier", "Gauge32")
TextualConvention, DateAndTime, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "DisplayString", "TruthValue")
informant, WtcsDisplayString = mibBuilder.importSymbols("WTCS", "informant", "WtcsDisplayString")
wmiHardware = ModuleIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21))
wmiHardware.setRevisions(('2007-05-24 23:24', '2004-11-03 21:35',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wmiHardware.setRevisionsDescriptions(('Added Win32_Processor entries for L3CacheSize, L3CacheSpeed, NumberOfCores, and NumberOfLogicalProcessors which are new for Windows Vista.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: wmiHardware.setLastUpdated('200705242324Z')
if mibBuilder.loadTexts: wmiHardware.setOrganization('Informant Systems, Inc.')
if mibBuilder.loadTexts: wmiHardware.setContactInfo('Garth Williams 11135-23A Ave Edmonton, AB T6J4W5 Canada Tel: +1 780 434 4113 E-mail: garth.williams@wtcs.org')
if mibBuilder.loadTexts: wmiHardware.setDescription('The MIB module for informant hardware WMI entities.')
wmiCoolingDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1))
if mibBuilder.loadTexts: wmiCoolingDevice.setStatus('current')
if mibBuilder.loadTexts: wmiCoolingDevice.setDescription('The Cooling Devices subcategory groups classes that represent instrumentable fans, temperature probes, and refrigeration devices.')
win32FanTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1), )
if mibBuilder.loadTexts: win32FanTable.setStatus('current')
if mibBuilder.loadTexts: win32FanTable.setDescription('The Win32_Fan WMI class represents the properties of a fan device in the computer system. For example, the CPU cooling fan.')
win32FanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwfanIndex"))
if mibBuilder.loadTexts: win32FanEntry.setStatus('current')
if mibBuilder.loadTexts: win32FanEntry.setDescription('None')
hwfanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanIndex.setStatus('current')
if mibBuilder.loadTexts: hwfanIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwfanActiveCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanActiveCooling.setStatus('current')
if mibBuilder.loadTexts: hwfanActiveCooling.setDescription('If TRUE, the cooling device provides active (as opposed to passive) cooling. This property is inherited from CIM_CoolingDevice.')
hwfanAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanAvailability.setStatus('current')
if mibBuilder.loadTexts: hwfanAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwfanCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanCaption.setStatus('current')
if mibBuilder.loadTexts: hwfanCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwfanConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwfanConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwfanConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwfanConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwfanCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwfanCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwfanDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanDescription.setStatus('current')
if mibBuilder.loadTexts: hwfanDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwfanDesiredSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanDesiredSpeed.setStatus('current')
if mibBuilder.loadTexts: hwfanDesiredSpeed.setDescription('Currently requested fan speed, defined in revolutions per minute, when a variable speed fan is supported (VariableSpeed is TRUE). The current speed is determined by a sensor (CIM_Tachometer) that is associated with the fan using the CIM_AssociatedSensor relationship. This property is inherited from CIM_Fan.')
hwfanDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwfanDeviceID.setDescription('Identifies the fan device. This property is inherited from CIM_LogicalDevice.')
hwfanErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwfanErrorCleared.setDescription('If TRUE, the error reported in the LastErrorCode property is now cleared. This property is inherited from CIM_LogicalDevice.')
hwfanErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwfanErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode property, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwfanInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwfanInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwfanLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwfanLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwfanName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanName.setStatus('current')
if mibBuilder.loadTexts: hwfanName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwfanPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwfanPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwfanPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwfanPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwfanPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwfanPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwfanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanStatus.setStatus('current')
if mibBuilder.loadTexts: hwfanStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwfanStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwfanStatusInfo.setDescription('State of the logical device. If the property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwfanSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwfanSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwfanSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanSystemName.setStatus('current')
if mibBuilder.loadTexts: hwfanSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwfanVariableSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfanVariableSpeed.setStatus('current')
if mibBuilder.loadTexts: hwfanVariableSpeed.setDescription('If TRUE, the fan supports variable speeds. This property is inherited from CIM_Fan.')
win32HeatPipeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2), )
if mibBuilder.loadTexts: win32HeatPipeTable.setStatus('current')
if mibBuilder.loadTexts: win32HeatPipeTable.setDescription('The Win32_HeatPipe WMI class represents the properties of a heat pipe cooling device.')
win32HeatPipeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwhpIndex"))
if mibBuilder.loadTexts: win32HeatPipeEntry.setStatus('current')
if mibBuilder.loadTexts: win32HeatPipeEntry.setDescription('None')
hwhpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpIndex.setStatus('current')
if mibBuilder.loadTexts: hwhpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwhpActiveCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpActiveCooling.setStatus('current')
if mibBuilder.loadTexts: hwhpActiveCooling.setDescription('If TRUE, the cooling device provides active cooling not passive. This property is inherited from CIM_CoolingDevice.')
hwhpAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpAvailability.setStatus('current')
if mibBuilder.loadTexts: hwhpAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwhpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpCaption.setStatus('current')
if mibBuilder.loadTexts: hwhpCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwhpConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwhpConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwhpConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwhpConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwhpCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwhpCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwhpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpDescription.setStatus('current')
if mibBuilder.loadTexts: hwhpDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwhpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwhpDeviceID.setDescription('Unique identifier of the heat pipe. This property is inherited from CIM_LogicalDevice.')
hwhpErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwhpErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwhpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwhpErrorDescription.setDescription('More information about the error that is recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwhpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwhpInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwhpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwhpLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwhpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpName.setStatus('current')
if mibBuilder.loadTexts: hwhpName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwhpPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwhpPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwhpPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwhpPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwhpPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwhpPowerManagementSupported.setDescription('If TRUE, the device can be power-managed put into suspend mode, and so on. The property does not indicate that power management features are enabled currently, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwhpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpStatus.setStatus('current')
if mibBuilder.loadTexts: hwhpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwhpStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwhpStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwhpSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwhpSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwhpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 2, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwhpSystemName.setStatus('current')
if mibBuilder.loadTexts: hwhpSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32RefrigerationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3), )
if mibBuilder.loadTexts: win32RefrigerationTable.setStatus('current')
if mibBuilder.loadTexts: win32RefrigerationTable.setDescription('The Win32_Refrigeration WMI class represents the properties of a refrigeration device.')
win32RefrigerationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1), ).setIndexNames((0, "INFORMANT-HW", "hwrfgIndex"))
if mibBuilder.loadTexts: win32RefrigerationEntry.setStatus('current')
if mibBuilder.loadTexts: win32RefrigerationEntry.setDescription('None')
hwrfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgIndex.setStatus('current')
if mibBuilder.loadTexts: hwrfgIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwrfgActiveCooling = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgActiveCooling.setStatus('current')
if mibBuilder.loadTexts: hwrfgActiveCooling.setDescription('If TRUE, the cooling device provides active cooling not passive cooling. This property is inherited from CIM_CoolingDevice.')
hwrfgAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgAvailability.setStatus('current')
if mibBuilder.loadTexts: hwrfgAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwrfgCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgCaption.setStatus('current')
if mibBuilder.loadTexts: hwrfgCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwrfgConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwrfgConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwrfgConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwrfgConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwrfgCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwrfgCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwrfgDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgDescription.setStatus('current')
if mibBuilder.loadTexts: hwrfgDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwrfgDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwrfgDeviceID.setDescription('Unique identifier of the refrigeration device. This property is inherited from CIM_LogicalDevice.')
hwrfgErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwrfgErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwrfgErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwrfgErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwrfgInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwrfgInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwrfgLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwrfgLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwrfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgName.setStatus('current')
if mibBuilder.loadTexts: hwrfgName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwrfgPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwrfgPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwrfgPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwrfgPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwrfgPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwrfgPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwrfgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgStatus.setStatus('current')
if mibBuilder.loadTexts: hwrfgStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwrfgStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwrfgStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwrfgSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwrfgSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwrfgSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 3, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwrfgSystemName.setStatus('current')
if mibBuilder.loadTexts: hwrfgSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32TemperatureProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4), )
if mibBuilder.loadTexts: win32TemperatureProbeTable.setStatus('current')
if mibBuilder.loadTexts: win32TemperatureProbeTable.setDescription('The Win32_TemperatureProbe WMI class represents the properties of a temperature sensor (electronic thermometer).')
win32TemperatureProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1), ).setIndexNames((0, "INFORMANT-HW", "hwtmpIndex"))
if mibBuilder.loadTexts: win32TemperatureProbeEntry.setStatus('current')
if mibBuilder.loadTexts: win32TemperatureProbeEntry.setDescription('None')
hwtmpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpIndex.setStatus('current')
if mibBuilder.loadTexts: hwtmpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwtmpAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 2), Integer32()).setUnits('Hundredths of Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpAccuracy.setStatus('current')
if mibBuilder.loadTexts: hwtmpAccuracy.setDescription('Accuracy of the sensor for the measured property. Its value is recorded as plus or minus hundredths of a percent. Accuracy, and resolution and tolerance are used to calculate the actual value of the measured physical property. Accuracy may vary and depends on whether or not the device is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwtmpAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpAvailability.setStatus('current')
if mibBuilder.loadTexts: hwtmpAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwtmpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpCaption.setStatus('current')
if mibBuilder.loadTexts: hwtmpCaption.setDescription('Short description of an object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwtmpConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwtmpConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwtmpConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwtmpConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwtmpCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwtmpCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of a class, the property allows all instances of the class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwtmpCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 8), Integer32()).setUnits('Tenths of degrees centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpCurrentReading.setStatus('current')
if mibBuilder.loadTexts: hwtmpCurrentReading.setDescription('Current value indicated by the sensor. This property is inherited from CIM_NumericSensor.')
hwtmpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpDescription.setStatus('current')
if mibBuilder.loadTexts: hwtmpDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwtmpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwtmpDeviceID.setDescription('Unique identifier of the current probe. This property is inherited from CIM_LogicalDevice.')
hwtmpErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwtmpErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwtmpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwtmpErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that you can take. This property is inherited from CIM_LogicalDevice.')
hwtmpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwtmpInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwtmpIsLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpIsLinear.setStatus('current')
if mibBuilder.loadTexts: hwtmpIsLinear.setDescription('If TRUE, the sensor is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwtmpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwtmpLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwtmpLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 16), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpLowerThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: hwtmpLowerThresholdCritical.setDescription('Sensor threshold value to specify the ranges (minimum and maximum values) that identify the sensor operating conditions, which can be normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdCritical and LowerThresholdFatal, the current state is critical. This property is inherited from CIM_NumericSensor.')
hwtmpLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 17), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpLowerThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: hwtmpLowerThresholdFatal.setDescription('Sensor threshold value to specify the ranges (minimum and maximum values) that identify the sensor operating conditions, which can be normal, non-critical, critical, or fatal conditions. If CurrentReading is below LowerThresholdFatal, the current state is fatal. This property is inherited from CIM_NumericSensor.')
hwtmpLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 18), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpLowerThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: hwtmpLowerThresholdNonCritical.setDescription('Sensor threshold value to specify the ranges (minimum and maximum values) that identify the sensor operating conditions, which can be normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdNonCritical and UpperThresholdNonCritical, the sensor is reporting a normal value. If CurrentReading is between LowerThresholdNonCritical and LowerThresholdCritical, the current state is non-critical. This property is inherited from CIM_NumericSensor.')
hwtmpMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 19), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpMaxReadable.setStatus('current')
if mibBuilder.loadTexts: hwtmpMaxReadable.setDescription('Largest value of the measured property that can be read by the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwtmpMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 20), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpMinReadable.setStatus('current')
if mibBuilder.loadTexts: hwtmpMinReadable.setDescription('Smallest value of the measured property that can be read by the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwtmpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpName.setStatus('current')
if mibBuilder.loadTexts: hwtmpName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwtmpNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 22), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpNominalReading.setStatus('current')
if mibBuilder.loadTexts: hwtmpNominalReading.setDescription('Normal or expected value for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwtmpNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 23), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpNormalMax.setStatus('current')
if mibBuilder.loadTexts: hwtmpNormalMax.setDescription('Normal or expected value for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwtmpNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 24), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpNormalMin.setStatus('current')
if mibBuilder.loadTexts: hwtmpNormalMin.setDescription('Guidance for the user as to the normal minimum range for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwtmpPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwtmpPNPDeviceID.setDescription("Windows plug and play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwtmpPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwtmpPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwtmpPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwtmpPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwtmpResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 28), Gauge32()).setUnits('Hundredths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpResolution.setStatus('current')
if mibBuilder.loadTexts: hwtmpResolution.setDescription('Ability of the sensor to resolve differences in the measured property. This value may vary depending on whether the device is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwtmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpStatus.setStatus('current')
if mibBuilder.loadTexts: hwtmpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwtmpStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwtmpStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwtmpSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwtmpSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwtmpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpSystemName.setStatus('current')
if mibBuilder.loadTexts: hwtmpSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwtmpTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 33), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpTolerance.setStatus('current')
if mibBuilder.loadTexts: hwtmpTolerance.setDescription('Tolerance of the sensor for the measured property. Tolerance, along with resolution and accuracy, is used to calculate the actual value of the measured physical property. Tolerance may vary depending on whether the device is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwtmpUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 34), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpUpperThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: hwtmpUpperThresholdCritical.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) that identify the sensor operating conditions, which can be normal, non-critical, critical, or fatal conditions. If CurrentReading is between UpperThresholdCritical and UpperThresholdFatal, the current state is critical. This property is inherited from CIM_NumericSensor.")
hwtmpUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 35), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpUpperThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: hwtmpUpperThresholdFatal.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) that identify the sensor operating conditions, which can be normal, non-critical, critical, or fatal conditions. If CurrentReading is above UpperThresholdFatal, the current state is fatal. This property is inherited from CIM_NumericSensor.")
hwtmpUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 1, 4, 1, 36), Integer32()).setUnits('Tenths of degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtmpUpperThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: hwtmpUpperThresholdNonCritical.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) that identify the sensor operating conditions, which can be normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdNonCritical and UpperThresholdNonCritical, the sensor is reporting a normal value. If CurrentReading is between UpperThresholdNonCritical and UpperThresholdCritical, the current state is non-critical. This property is inherited from CIM_NumericSensor.")
wmiInputDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2))
if mibBuilder.loadTexts: wmiInputDevice.setStatus('current')
if mibBuilder.loadTexts: wmiInputDevice.setDescription('The Input Devices subcategory groups classes that represent keyboards and pointing devices.')
win32KeyboardTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1), )
if mibBuilder.loadTexts: win32KeyboardTable.setStatus('current')
if mibBuilder.loadTexts: win32KeyboardTable.setDescription('The Win32_Keyboard WMI class represents a keyboard installed on a Windows system.')
win32KeyboardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwkbIndex"))
if mibBuilder.loadTexts: win32KeyboardEntry.setStatus('current')
if mibBuilder.loadTexts: win32KeyboardEntry.setDescription('None')
hwkbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbIndex.setStatus('current')
if mibBuilder.loadTexts: hwkbIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwkbAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbAvailability.setStatus('current')
if mibBuilder.loadTexts: hwkbAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwkbCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbCaption.setStatus('current')
if mibBuilder.loadTexts: hwkbCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwkbConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwkbConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwkbConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwkbConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwkbCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwkbCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwkbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbDescription.setStatus('current')
if mibBuilder.loadTexts: hwkbDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwkbDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwkbDeviceID.setDescription('Address or other identifying information to uniquely name the logical device. This property is inherited from CIM_LogicalDevice.')
hwkbErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwkbErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwkbErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwkbErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwkbInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwkbInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwkbIsLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbIsLocked.setStatus('current')
if mibBuilder.loadTexts: hwkbIsLocked.setDescription('If TRUE, the device is locked, preventing user input or output. This property is inherited from CIM_UserDevice.')
hwkbLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwkbLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwkbLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbLayout.setStatus('current')
if mibBuilder.loadTexts: hwkbLayout.setDescription('Free-form string indicating the layout of the keyboard. This property is inherited from CIM_Keyboard.')
hwkbName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbName.setStatus('current')
if mibBuilder.loadTexts: hwkbName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwkbNumberOfFunctionKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbNumberOfFunctionKeys.setStatus('current')
if mibBuilder.loadTexts: hwkbNumberOfFunctionKeys.setDescription('Number of function keys on the keyboard. This property is inherited from CIM_Keyboard.')
hwkbPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("disabled", 3), ("enabled", 4), ("notImplemented", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbPassword.setStatus('current')
if mibBuilder.loadTexts: hwkbPassword.setDescription('Status of hardware-level password enabled at the keyboard (value=4), preventing local input. This property is inherited from CIM_Keyboard.')
hwkbPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwkbPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwkbPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwkbPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwkbPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwkbPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwkbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbStatus.setStatus('current')
if mibBuilder.loadTexts: hwkbStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwkbStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwkbStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwkbSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwkbSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwkbSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 1, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwkbSystemName.setStatus('current')
if mibBuilder.loadTexts: hwkbSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32PointingDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2), )
if mibBuilder.loadTexts: win32PointingDeviceTable.setStatus('current')
if mibBuilder.loadTexts: win32PointingDeviceTable.setDescription('The Win32_PointingDevice WMI class represents an input device used to point to and select regions on the display of a Windows computer system. Any device used to manipulate a pointer, or point to the display on a Windows computer system is a member of this class.')
win32PointingDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwptIndex"))
if mibBuilder.loadTexts: win32PointingDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: win32PointingDeviceEntry.setDescription('None')
hwptIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptIndex.setStatus('current')
if mibBuilder.loadTexts: hwptIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwptAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptAvailability.setStatus('current')
if mibBuilder.loadTexts: hwptAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwptCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptCaption.setStatus('current')
if mibBuilder.loadTexts: hwptCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwptConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwptConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. . This property is inherited from CIM_LogicalDevice.')
hwptConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwptConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwptCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwptCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwptDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptDescription.setStatus('current')
if mibBuilder.loadTexts: hwptDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwptDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwptDeviceID.setDescription('Unique identifier of the pointing device with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwptDeviceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 160, 161, 162))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("serial", 3), ("ps2", 4), ("infrared", 5), ("hpHIL", 6), ("busMouse", 7), ("appleDesktopBus", 8), ("busMouseDB9", 160), ("busMouseMicroDIN", 161), ("usb", 162)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptDeviceInterface.setStatus('current')
if mibBuilder.loadTexts: hwptDeviceInterface.setDescription('Type of interface used for the pointing device.')
hwptDoubleSpeedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 10), Gauge32()).setUnits('Mickeys').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptDoubleSpeedThreshold.setStatus('current')
if mibBuilder.loadTexts: hwptDoubleSpeedThreshold.setDescription('One of two acceleration values. The sensitivity of the pointing device doubles (toggles from the first to the second value) when the pointing device moves a distance greater than this threshold value.')
hwptErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwptErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwptErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwptErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwptHandedness = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("notApplicable", 1), ("rightHandedOperation", 2), ("leftHandedOperation", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptHandedness.setStatus('current')
if mibBuilder.loadTexts: hwptHandedness.setDescription('Configuration of the pointing device for left or right-hand operation. This property is inherited from CIM_PointingDevice.')
hwptHardwareType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptHardwareType.setStatus('current')
if mibBuilder.loadTexts: hwptHardwareType.setDescription("Type of hardware used for the Windows pointing device. Example: 'MICROSOFT PS2 MOUSE'")
hwptInfFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptInfFileName.setStatus('current')
if mibBuilder.loadTexts: hwptInfFileName.setDescription("Name of the .inf file for the Windows pointing device. Example: 'ab.inf'")
hwptInfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptInfSection.setStatus('current')
if mibBuilder.loadTexts: hwptInfSection.setDescription('Section of the .inf file that holds configuration information for the Windows pointing device.')
hwptInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwptInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwptIsLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptIsLocked.setStatus('current')
if mibBuilder.loadTexts: hwptIsLocked.setDescription('If TRUE, the device is locked, preventing user input or output. This property is inherited from CIM_UserDevice.')
hwptLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwptLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwptManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwptManufacturer.setDescription("Name of the processor's manufacturer. Example: 'GenuineSilicon'")
hwptName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptName.setStatus('current')
if mibBuilder.loadTexts: hwptName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwptNumberOfButtons = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptNumberOfButtons.setStatus('current')
if mibBuilder.loadTexts: hwptNumberOfButtons.setDescription('Number of buttons on the pointing device. This property is inherited from CIM_PointingDevice. Example: 2')
hwptPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwptPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwptPointingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("mouse", 3), ("trackBall", 4), ("trackPoint", 5), ("glidePoint", 6), ("touchPad", 7), ("touchScreen", 8), ("mouseOpticalSensor", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptPointingType.setStatus('current')
if mibBuilder.loadTexts: hwptPointingType.setDescription('Type of pointing device. This property is inherited from CIM_PointingDevice.')
hwptPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwptPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwptPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwptPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwptQuadSpeedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 27), Gauge32()).setUnits('Mickeys').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptQuadSpeedThreshold.setStatus('current')
if mibBuilder.loadTexts: hwptQuadSpeedThreshold.setDescription('One of two acceleration threshold values. The system doubles the speed of the pointer movement when the pointer device moves a distance greater than this value. Because this speed increase occurs after the DoubleSpeedThreshold value has been met, the pointer effectively moves at four times its original speed.')
hwptResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptResolution.setStatus('current')
if mibBuilder.loadTexts: hwptResolution.setDescription('Tracking resolution. This property is inherited from CIM_PointingDevice. Example: 0')
hwptSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 29), Gauge32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptSampleRate.setStatus('current')
if mibBuilder.loadTexts: hwptSampleRate.setDescription('Rate at which the pointing device is polled for input information.')
hwptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptStatus.setStatus('current')
if mibBuilder.loadTexts: hwptStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwptStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwptStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwptSynch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 32), Gauge32()).setUnits('100 Nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptSynch.setStatus('current')
if mibBuilder.loadTexts: hwptSynch.setDescription('Length of time after which the next interrupt is assumed to indicate the start of a new device packet (partial packets are discarded). In the event that an interrupt is lost, this allows the pointing device driver to synchronize its internalrepresentation of the packet state with the hardware state.')
hwptSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwptSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwptSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 2, 2, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwptSystemName.setStatus('current')
if mibBuilder.loadTexts: hwptSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
wmiMassStorage = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3))
if mibBuilder.loadTexts: wmiMassStorage.setStatus('current')
if mibBuilder.loadTexts: wmiMassStorage.setDescription('Classes in the Mass Storage subcategory represent storage devices such as hard disk drives, CD-ROM drives, and tape drives.')
win32AutochkSettingTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2), )
if mibBuilder.loadTexts: win32AutochkSettingTable.setStatus('current')
if mibBuilder.loadTexts: win32AutochkSettingTable.setDescription('The Win32_AutochkSetting WMI class represents the settings for the autocheck operation of a disk.')
win32AutochkSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwasIndex"))
if mibBuilder.loadTexts: win32AutochkSettingEntry.setStatus('current')
if mibBuilder.loadTexts: win32AutochkSettingEntry.setDescription('None')
hwasIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwasIndex.setStatus('current')
if mibBuilder.loadTexts: hwasIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwasCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwasCaption.setStatus('current')
if mibBuilder.loadTexts: hwasCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_Setting.')
hwasDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwasDescription.setStatus('current')
if mibBuilder.loadTexts: hwasDescription.setDescription('Description of the autocheck setting. This property is inherited from CIM_Setting.')
hwasSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwasSettingID.setStatus('current')
if mibBuilder.loadTexts: hwasSettingID.setDescription('Date and time when the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_Setting.')
hwasUserInputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 2, 1, 5), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwasUserInputDelay.setStatus('current')
if mibBuilder.loadTexts: hwasUserInputDelay.setDescription('User input delay for autocheck.')
win32CDROMDriveTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8), )
if mibBuilder.loadTexts: win32CDROMDriveTable.setStatus('current')
if mibBuilder.loadTexts: win32CDROMDriveTable.setDescription('The Win32_CDROMDrive WMI class represents a CD-ROM drive on a Windows computer system. Note that the name of the drive does not correspond to the logical drive letter assigned to the device.')
win32CDROMDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1), ).setIndexNames((0, "INFORMANT-HW", "hwcdIndex"))
if mibBuilder.loadTexts: win32CDROMDriveEntry.setStatus('current')
if mibBuilder.loadTexts: win32CDROMDriveEntry.setDescription('None')
hwcdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdIndex.setStatus('current')
if mibBuilder.loadTexts: hwcdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwcdAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdAvailability.setStatus('current')
if mibBuilder.loadTexts: hwcdAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwcdCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwcdCapabilities.setDescription('Array of capabilities of the media access device. For example, the device may support random access (3), removable media (7), and automatic cleaning (9). This property is inherited from CIM_MediaAccessDevice. Value Meaning 0 Unknown 1 Other 2 Sequential Access 3 Random Access 4 Supports Writing 5 Encryption 6 Compression 7 Supports Removable Media 8 Manual Cleaning 9 Automatic Cleaning 10 SMART Notification 11 Supports Dual-sided Media 12 Predismount Eject Not Required ')
hwcdCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwcdCapabilityDescriptions.setDescription('Array of more detailed explanations for any of the access device features indicated in the Capabilities array. Each entry of this array is related to the entry in the Capabilities array that is located at the same index. This property is inherited from CIM_MediaAccessDevice.')
hwcdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdCaption.setStatus('current')
if mibBuilder.loadTexts: hwcdCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwcdCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: hwcdCompressionMethod.setDescription("Algorithm or tool used by the device to support compression. If it is not possible or not desired to describe the compression scheme (perhaps because it is not known), use the following words: 'Unknown' to represent that it is not known whether the device supports compression capabilities; 'Compressed' to represent that the device supports compression capabilities but either its compression scheme is not known or not disclosed; and 'Not Compressed' to represent that the device does not support compression capabilities. This property is inherited from CIM_MediaAccessDevice.")
hwcdConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcdConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwcdConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwcdConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwcdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcdCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwcdDefaultBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdDefaultBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwcdDefaultBlockSize.setDescription('Default block size, in bytes, for this device. This property is inherited from CIM_MediaAccessDevice.')
hwcdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdDescription.setStatus('current')
if mibBuilder.loadTexts: hwcdDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwcdDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcdDeviceID.setDescription('Unique identifier for a CD-ROM drive. This property is inherited from CIM_LogicalDevice.')
hwcdDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdDrive.setStatus('current')
if mibBuilder.loadTexts: hwcdDrive.setDescription("Drive letter of the CD-ROM drive. Example: 'd:\\'")
hwcdDriveIntegrity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdDriveIntegrity.setStatus('current')
if mibBuilder.loadTexts: hwcdDriveIntegrity.setDescription('If TRUE, files can be accurately read from the CD device. This is achieved by reading a block of data twice and comparing the data against itself.')
hwcdErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwcdErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared.')
hwcdErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwcdErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about corrective actions that can be taken.')
hwcdErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwcdErrorMethodology.setDescription('Type of error detection and correction supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwcdFileSystemFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdFileSystemFlags.setStatus('current')
if mibBuilder.loadTexts: hwcdFileSystemFlags.setDescription('This property is obsolete. In place of this property, use FileSystemFlagsEx.')
hwcdFileSystemFlagsEx = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 16384, 32768, 65536, 131072, 262144))).clone(namedValues=NamedValues(("caseSENSITIVESEARCH", 1), ("casePRESERVEDNAMES", 2), ("unicodeONDISK", 4), ("persistentACLS", 8), ("fileCOMPRESSION", 16), ("volumeQUOTAS", 32), ("supportsSPARSEFILES", 64), ("supportsREPARSEPOINTS", 128), ("supportsREMOTESTORAGE", 256), ("supportsLONGNAMES", 16384), ("volumeISCOMPRESSED", 32768), ("supportsOBJECTIDS", 65536), ("supportsENCRYPTION", 131072), ("supportsNAMEDSTREAMS", 262144)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdFileSystemFlagsEx.setStatus('current')
if mibBuilder.loadTexts: hwcdFileSystemFlagsEx.setDescription('File system flags associated with the Windows CD-ROM drive. This parameter can be any combination of flags, but FS_FILE_COMPRESSION and FS_VOL_IS_COMPRESSED are mutually exclusive.')
hwcdId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdId.setStatus('current')
if mibBuilder.loadTexts: hwcdId.setDescription("Drive letter uniquely identifying this CD-ROM drive. Example: 'd:\\'")
hwcdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwcdInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwcdLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcdLastErrorCode.setDescription('Last error code reported by the logical device.')
hwcdManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwcdManufacturer.setDescription("Manufacturer of the Windows CD-ROM drive. Example: 'PLEXTOR'")
hwcdMaxBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMaxBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwcdMaxBlockSize.setDescription('Maximum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwcdMaximumComponentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMaximumComponentLength.setStatus('current')
if mibBuilder.loadTexts: hwcdMaximumComponentLength.setDescription('Maximum length of a filename component supported by the Windows CD-ROM drive. A file name component the portion of a file name between backslashes. The value can be used to indicate that long names are supported by the specified file system. For example, for a FAT file system supporting long names, the function stores the value 255, rather than the previous 8.3 indicator. Long names can also be supported on systems that use the NTFS file system. Example: 255')
hwcdMaxMediaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMaxMediaSize.setStatus('current')
if mibBuilder.loadTexts: hwcdMaxMediaSize.setDescription('Maximum size, in kilobytes, of media supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwcdMediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMediaLoaded.setStatus('current')
if mibBuilder.loadTexts: hwcdMediaLoaded.setDescription('If TRUE, a CD-ROM is in the drive.')
hwcdMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("randomAccess", 1), ("supportsWriting", 2), ("removableMedia", 3), ("cdrom", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMediaType.setStatus('current')
if mibBuilder.loadTexts: hwcdMediaType.setDescription("Type of media used or accessed by this device. In this class, the value is always 'CD-ROM'.")
hwcdMfrAssignedRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMfrAssignedRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: hwcdMfrAssignedRevisionLevel.setDescription('Windows XP and Windows Server 2003: Manufacturer assigned firmware revision level of the CD-ROM drive. ')
hwcdMinBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdMinBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwcdMinBlockSize.setDescription('Minimum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwcdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdName.setStatus('current')
if mibBuilder.loadTexts: hwcdName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwcdNeedsCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdNeedsCleaning.setStatus('current')
if mibBuilder.loadTexts: hwcdNeedsCleaning.setDescription('If TRUE, the media access device needs cleaning. Whether manual or automatic cleaning is possible is indicated in the Capabilities property. This property is inherited from CIM_MediaAccessDevice.')
hwcdNumberOfMediaSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdNumberOfMediaSupported.setStatus('current')
if mibBuilder.loadTexts: hwcdNumberOfMediaSupported.setDescription('Maximum number of media that can be supported or inserted, when the media access device supports multiple individual media. This property is inherited from CIM_MediaAccessDevice.')
hwcdPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcdPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwcdPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwcdPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwcdPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwcdPowerManagementSupported.setDescription('If TRUE, the device can be power-managed, which means that it can be put into suspend mode, and so on. The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwcdRevisionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdRevisionLevel.setStatus('current')
if mibBuilder.loadTexts: hwcdRevisionLevel.setDescription('Firmware revision level of the Windows CD-ROM drive.')
hwcdSCSIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSCSIBus.setStatus('current')
if mibBuilder.loadTexts: hwcdSCSIBus.setDescription('SCSI bus number for the disk drive. Example: 0')
hwcdSCSILogicalUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSCSILogicalUnit.setStatus('current')
if mibBuilder.loadTexts: hwcdSCSILogicalUnit.setDescription('SCSI logical unit number (LUN) of the disk drive. The LUN is used to designate which SCSI controller is being accessed in a system with more than one controller being used. The SCSI device identifier is similar, but is the designation for multiple devices on one controller. Example: 0')
hwcdSCSIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSCSIPort.setStatus('current')
if mibBuilder.loadTexts: hwcdSCSIPort.setDescription('SCSI port number of the disk drive. Example: 1')
hwcdSCSITargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSCSITargetId.setStatus('current')
if mibBuilder.loadTexts: hwcdSCSITargetId.setDescription('SCSI identifier number of the Windows CD-ROM drive. Example: 0')
hwcdSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 42), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSize.setStatus('current')
if mibBuilder.loadTexts: hwcdSize.setDescription('Size of the disk drive.')
hwcdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdStatus.setStatus('current')
if mibBuilder.loadTexts: hwcdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwcdStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwcdStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used.')
hwcdSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcdSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property.")
hwcdSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 46), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdSystemName.setStatus('current')
if mibBuilder.loadTexts: hwcdSystemName.setDescription('Name of the scoping system.')
hwcdTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 47), Integer32()).setUnits('KiloBytes per Second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdTransferRate.setStatus('current')
if mibBuilder.loadTexts: hwcdTransferRate.setDescription('Transfer rate of the CD-ROM drive. A value of -1 indicates that the rate cannot be determined. This might happen if the CD is not in the drive.')
hwcdVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 48), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdVolumeName.setStatus('current')
if mibBuilder.loadTexts: hwcdVolumeName.setDescription('Volume name of the Windows CD-ROM drive.')
hwcdVolumeSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 8, 1, 49), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcdVolumeSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwcdVolumeSerialNumber.setDescription('Volume serial number of the media in the CD-ROM drive. Example: A8C3-D032')
win32DiskDriveTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12), )
if mibBuilder.loadTexts: win32DiskDriveTable.setStatus('current')
if mibBuilder.loadTexts: win32DiskDriveTable.setDescription('The Win32_DiskDrive WMI class represents a physical disk drive as seen by a computer running the Windows operating system. Any interface to a Windows physical disk drive is a descendent (or member) of this class. The features of the disk drive seen through this object correspond to the logical and management characteristics of the drive. In some cases, this may not reflect the actual physical characteristics of the device. Any object based on another logical device would not be a member of this class.')
win32DiskDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1), ).setIndexNames((0, "INFORMANT-HW", "hwddIndex"))
if mibBuilder.loadTexts: win32DiskDriveEntry.setStatus('current')
if mibBuilder.loadTexts: win32DiskDriveEntry.setDescription('None')
hwddIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddIndex.setStatus('current')
if mibBuilder.loadTexts: hwddIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwddAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddAvailability.setStatus('current')
if mibBuilder.loadTexts: hwddAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwddBytesPerSector = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 3), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddBytesPerSector.setStatus('current')
if mibBuilder.loadTexts: hwddBytesPerSector.setDescription('Number of bytes in each sector for the physical disk drive. Example: 512')
hwddCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwddCapabilities.setDescription('Array of capabilities of the media access device. For example, the device may support random access (3), removable media (7) and automatic cleaning (9). This property is inherited from CIM_MediaAccessDevice. Value Meaning 0 Unknown 1 Other 2 Sequential Access 3 Random Access 4 Supports Writing 5 Encryption 6 Compression 7 Supports Removable Media 8 Manual Cleaning 9 Automatic Cleaning 10 SMART Notification 11 Supports Dual Sided Media 12 Ejection Prior to Drive Dismount Not Required ')
hwddCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwddCapabilityDescriptions.setDescription('List of more detailed explanations for any of the access device features indicated in the Capabilities array. Note, each entry of this array is related to the entry in the Capabilities array that is located at the same index. This property is inherited from CIM_MediaAccessDevice.')
hwddCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddCaption.setStatus('current')
if mibBuilder.loadTexts: hwddCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwddCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: hwddCompressionMethod.setDescription("Algorithm or tool used by the device to support compression. If it is not possible or not desired to describe the compression scheme (perhaps because it is not known), use the following words: 'Unknown' to represent that it is not known whether the device supports compression capabilities or not; 'Compressed' to represent that the device supports compression capabilities but either its compression scheme is not known or not disclosed; and 'Not Compressed' to represent that the device does not support compression capabilities. This property is inherited from CIM_MediaAccessDevice.")
hwddConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwddConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwddConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwddConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwddCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwddCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwddDefaultBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddDefaultBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwddDefaultBlockSize.setDescription('Default block size, in bytes, for this device. This property is inherited from CIM_MediaAccessDevice.')
hwddDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddDescription.setStatus('current')
if mibBuilder.loadTexts: hwddDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwddDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwddDeviceID.setDescription('Unique identifier of the disk drive with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwddErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwddErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwddErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwddErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwddErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwddErrorMethodology.setDescription('Type of error detection and correction supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwddPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hwddPhysicalIndex.setDescription('Physical drive number of the given drive. This property is filled by the GetDriveMapInfo method. A value of 0xFF indicates that the given drive does not map to a physical drive. Example: 1')
hwddInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwddInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwddInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddInterfaceType.setStatus('current')
if mibBuilder.loadTexts: hwddInterfaceType.setDescription("Interface type of physical disk drive. Example: 'SCSI'")
hwddLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwddLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwddManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwddManufacturer.setDescription("Name of the disk drive manufacturer. Example: 'Seagate'")
hwddMaxBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddMaxBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwddMaxBlockSize.setDescription('Maximum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwddMaxMediaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddMaxMediaSize.setStatus('current')
if mibBuilder.loadTexts: hwddMaxMediaSize.setDescription('Maximum media size, in kilobytes, of media supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwddMediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddMediaLoaded.setStatus('current')
if mibBuilder.loadTexts: hwddMediaLoaded.setDescription('If TRUE, the media for a disk drive is loaded. For fixed disk drives, this property will always be TRUE')
hwddMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddMediaType.setStatus('current')
if mibBuilder.loadTexts: hwddMediaType.setDescription('Type of media used or accessed by this device.')
hwddMinBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddMinBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwddMinBlockSize.setDescription('Minimum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwddModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddModel.setStatus('current')
if mibBuilder.loadTexts: hwddModel.setDescription("Manufacturer's model number of the disk drive. Example: 'ST32171W'")
hwddName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddName.setStatus('current')
if mibBuilder.loadTexts: hwddName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwddNeedsCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddNeedsCleaning.setStatus('current')
if mibBuilder.loadTexts: hwddNeedsCleaning.setDescription('If TRUE, the media access device needs cleaning. Whether manual or automatic cleaning is possible is indicated in the Capabilities property. This property is inherited from CIM_MediaAccessDevice.')
hwddNumberOfMediaSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddNumberOfMediaSupported.setStatus('current')
if mibBuilder.loadTexts: hwddNumberOfMediaSupported.setDescription('Maximum number of media which can be supported or inserted (when the media access device supports multiple individual media). This property is inherited from CIM_MediaAccessDevice.')
hwddPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddPartitions.setStatus('current')
if mibBuilder.loadTexts: hwddPartitions.setDescription('Number of partitions on this physical disk drive that are recognized by the operating system. Example: 2')
hwddPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwddPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwddPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwddPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwddPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwddPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwddSCSIBus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSCSIBus.setStatus('current')
if mibBuilder.loadTexts: hwddSCSIBus.setDescription('SCSI bus number of the disk drive. Example: 0')
hwddSCSILogicalUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSCSILogicalUnit.setStatus('current')
if mibBuilder.loadTexts: hwddSCSILogicalUnit.setDescription('SCSI logical unit number (LUN) of the disk drive. Example: 0')
hwddSCSIPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSCSIPort.setStatus('current')
if mibBuilder.loadTexts: hwddSCSIPort.setDescription('SCSI port number of the disk drive. Example: 0')
hwddSCSITargetId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSCSITargetId.setStatus('current')
if mibBuilder.loadTexts: hwddSCSITargetId.setDescription('SCSI identifier number of the disk drive. Example: 0')
hwddSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSectorsPerTrack.setStatus('current')
if mibBuilder.loadTexts: hwddSectorsPerTrack.setDescription('Number of sectors in each track for this physical disk drive. Example: 63')
hwddSignature = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSignature.setStatus('current')
if mibBuilder.loadTexts: hwddSignature.setDescription('Disk identification. This property can be used to identify a shared resource. This property has been added for Windows XP.')
hwddSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 41), WtcsDisplayString()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSize.setStatus('current')
if mibBuilder.loadTexts: hwddSize.setDescription('Size of the disk drive. It is calculated by multiplying the total number of cylinders, tracks in each cylinder, sectors in each track, and bytes in each sector.')
hwddStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddStatus.setStatus('current')
if mibBuilder.loadTexts: hwddStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwddStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwddStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwddSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 44), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwddSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwddSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddSystemName.setStatus('current')
if mibBuilder.loadTexts: hwddSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwddTotalCylinders = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddTotalCylinders.setStatus('current')
if mibBuilder.loadTexts: hwddTotalCylinders.setDescription('Total number of cylinders on the physical disk drive. Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. The value may be inaccurate if the drive uses a translation scheme to support high capacity disk sizes. Consult the manufacturer for accurate drive specifications. Example: 657')
hwddTotalHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddTotalHeads.setStatus('current')
if mibBuilder.loadTexts: hwddTotalHeads.setDescription('Total number of heads on the disk drive. Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. The value may be inaccurate if the drive uses a translation scheme to support high capacity disk sizes. Consult the manufacturer for accurate drive specifications.')
hwddTotalSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddTotalSectors.setStatus('current')
if mibBuilder.loadTexts: hwddTotalSectors.setDescription('Total number of sectors on the physical disk drive. Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. The value may be inaccurate if the drive uses a translation scheme to support high capacity disk sizes. Consult the manufacturer for accurate drive specifications. Example: 2649024')
hwddTotalTracks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddTotalTracks.setStatus('current')
if mibBuilder.loadTexts: hwddTotalTracks.setDescription('Total number of tracks on the physical disk drive. Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. The value may be inaccurate if the drive uses a translation scheme to support high capacity disk sizes. Consult the manufacturer for accurate drive specifications. Example: 42048')
hwddTracksPerCylinder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 12, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwddTracksPerCylinder.setStatus('current')
if mibBuilder.loadTexts: hwddTracksPerCylinder.setDescription('Number of tracks in each cylinder on the physical disk drive. Note: the value for this property is obtained through extended functions of BIOS interrupt 13h. The value may be inaccurate if the drive uses a translation scheme to support high capacity disk sizes. Consult the manufacturer for accurate drive specifications. Example: 64')
win32FloppyDriveTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18), )
if mibBuilder.loadTexts: win32FloppyDriveTable.setStatus('current')
if mibBuilder.loadTexts: win32FloppyDriveTable.setDescription('The Win32_FloppyDrive WMI class manages the capabilities of a floppy disk drive.')
win32FloppyDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1), ).setIndexNames((0, "INFORMANT-HW", "hwfdIndex"))
if mibBuilder.loadTexts: win32FloppyDriveEntry.setStatus('current')
if mibBuilder.loadTexts: win32FloppyDriveEntry.setDescription('None')
hwfdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdIndex.setStatus('current')
if mibBuilder.loadTexts: hwfdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwfdAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdAvailability.setStatus('current')
if mibBuilder.loadTexts: hwfdAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwfdCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwfdCapabilities.setDescription('Array of capabilities of the media access device. For example, the device may support Random Access, removable media and Automatic Cleaning. In this case, the values 3, 7 and 9 would be written to the array. This property is inherited from CIM_MediaAccessDevice. Value Meaning 0 Unknown 1 Other 2 Sequential Access 3 Random Access 4 Supports Writing 5 Encryption 6 Compression 7 Supports Removable Media 8 Manual Cleaning 9 Automatic Cleaning 10 SMART Notification 11 Supports Dual Sided Media 12 Predismount Eject Not Required ')
hwfdCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwfdCapabilityDescriptions.setDescription('Array of free-form strings providing more detailed explanations for any of the serial controller features indicated in the Capabilities array. Note, each entry of this array is related to the entry in the Capabilities array that is located at the same index. This property is inherited from CIM_MediaAccessDevice.')
hwfdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdCaption.setStatus('current')
if mibBuilder.loadTexts: hwfdCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwfdCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: hwfdCompressionMethod.setDescription("Free form string indicating the algorithm or tool used by the device to support compression. If it is not possible or not desired to describe the compression scheme (perhaps because it is not known), we recommend using the following words: 'Unknown' to represent that it is not known whether the device supports compression capabilities or not; 'Compressed' to represent that the device supports compression capabilities but either its compression scheme is not known or not disclosed; and 'Not Compressed' to represent that the device does not support compression capabilities. This property is inherited from CIM_MediaAccessDevice.")
hwfdConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwfdConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwfdConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwfdConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwfdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwfdCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwfdDefaultBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdDefaultBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwfdDefaultBlockSize.setDescription('Default block size, in bytes, for this device. This property is inherited from CIM_MediaAccessDevice.')
hwfdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdDescription.setStatus('current')
if mibBuilder.loadTexts: hwfdDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwfdDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwfdDeviceID.setDescription('Unique identifier of the floppy disk drive with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwfdErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwfdErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwfdErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwfdErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwfdErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwfdErrorMethodology.setDescription('Free-form string describing the type of error detection and correction supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwfdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwfdInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwfdLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwfdLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwfdManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwfdManufacturer.setDescription("Name of the manufacturer of the floppy disk drive. Example: 'Acme'")
hwfdMaxBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdMaxBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwfdMaxBlockSize.setDescription('Maximum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwfdMaxMediaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdMaxMediaSize.setStatus('current')
if mibBuilder.loadTexts: hwfdMaxMediaSize.setDescription('Maximum size, in kilobytes, of media supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwfdMinBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdMinBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwfdMinBlockSize.setDescription('Minimum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwfdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdName.setStatus('current')
if mibBuilder.loadTexts: hwfdName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwfdNeedsCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdNeedsCleaning.setStatus('current')
if mibBuilder.loadTexts: hwfdNeedsCleaning.setDescription('If TRUE, the media access device needs cleaning. Whether manual or automatic cleaning is possible is indicated in the Capabilities property. This property is inherited from CIM_MediaAccessDevice.')
hwfdNumberOfMediaSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdNumberOfMediaSupported.setStatus('current')
if mibBuilder.loadTexts: hwfdNumberOfMediaSupported.setDescription('Maximum number of individual media which can be supported or inserted in the media access device (when supported). This property is inherited from CIM_MediaAccessDevice.')
hwfdPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwfdPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwfdPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwfdPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwfdPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwfdPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwfdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdStatus.setStatus('current')
if mibBuilder.loadTexts: hwfdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwfdStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwfdStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwfdSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwfdSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwfdSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 18, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfdSystemName.setStatus('current')
if mibBuilder.loadTexts: hwfdSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32PhysicalMediaTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32), )
if mibBuilder.loadTexts: win32PhysicalMediaTable.setStatus('current')
if mibBuilder.loadTexts: win32PhysicalMediaTable.setDescription('The Win32_PhysicalMedia class represents any type of documentation or storage medium, such as tapes, CD ROMs and so on. To obtain the characteristics of the media in a CD drive, such as whether it is writeable, use Win32_CDROMDrive and the Capabilities property')
win32PhysicalMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpmdIndex"))
if mibBuilder.loadTexts: win32PhysicalMediaEntry.setStatus('current')
if mibBuilder.loadTexts: win32PhysicalMediaEntry.setDescription('None')
hwpmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdIndex.setStatus('current')
if mibBuilder.loadTexts: hwpmdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpmdCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdCapacity.setStatus('current')
if mibBuilder.loadTexts: hwpmdCapacity.setDescription("Number of bytes that can be read from or written to this physical media component. This property does not apply to 'Hard Copy' or cleaner media. Data compression should not be assumed as it would increase the value of this property. For tapes, it should be assumed that no filemarks or blank space areas are recorded on the media.")
hwpmdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdCaption.setStatus('current')
if mibBuilder.loadTexts: hwpmdCaption.setDescription('Short, one line textual description of the object.')
hwpmdCleanerMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdCleanerMedia.setStatus('current')
if mibBuilder.loadTexts: hwpmdCleanerMedia.setDescription('If true the physical media is used for cleaning purposes and not data storage.')
hwpmdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpmdCreationClassName.setDescription('Name of the class or subclass used in the creation of an instance. When used with other key properties of this class, CreationClassName allows all instances of this class and its subclasses to be uniquely identified.')
hwpmdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdDescription.setStatus('current')
if mibBuilder.loadTexts: hwpmdDescription.setDescription('Textual description of the object.')
hwpmdHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdHotSwappable.setStatus('current')
if mibBuilder.loadTexts: hwpmdHotSwappable.setDescription('If true this physical media component can be replaced with a physically different but equivalent one while the containing package has the power applied. For example, a fan component may be designed to be hot swapped. All components that can be hot swapped are inherently removable and replaceable.')
hwpmdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpmdInstallDate.setDescription('When the object was installed. This property does not need a value to indicate that the object is installed.')
hwpmdManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpmdManufacturer.setDescription('Name of the organization responsible for producing the physical element. This may be the entity from whom the element is purchased, but this is not necessarily the case as this information is contained in the Vendor property.')
hwpmdMediaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdMediaDescription.setStatus('current')
if mibBuilder.loadTexts: hwpmdMediaDescription.setDescription('Additional detail related to the MediaType property. For example, if MediaType has the value 3 (QIC Cartridge) the MediaDescription property could indicate whether the tape is wide or quarter inch.')
hwpmdMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("tapeCartridge", 2), ("qicCartridge", 3), ("aitCartridge", 4), ("dtfCartridge", 5), ("datCartridge", 6), ("n8mmTapeCartridge", 7), ("n19mmTapeCartridge", 8), ("dltCartridge", 9), ("halfInchMagneticTapeCartridge", 10), ("cartridgeDisk", 11), ("jazDisk", 12), ("zipDisk", 13), ("syQuestDisk", 14), ("winchesterRemovableDisk", 15), ("cdROM", 16), ("cdROMXA", 17), ("cdI", 18), ("cdRecordable", 19), ("worm", 20), ("magnetoOptical", 21), ("dvd", 22), ("dvdRWplus", 23), ("dvdRAM", 24), ("dvdROM", 25), ("dvdVideo", 26), ("divx", 27), ("floppyDiskette", 28), ("hardDisk", 29), ("memoryCard", 30), ("hardCopy", 31), ("clikDisk", 32), ("cdRW", 33), ("cdDA", 34), ("cd", 35), ("dvdRecordable", 36), ("dvdRWminus", 37), ("dvdAudio", 38), ("dvd5", 39), ("dvd9", 40), ("dvd10", 41), ("dvd18", 42), ("magnetoOpticalRewriteable", 43), ("magnetoOpticalWriteOnce", 44), ("magnetoOpticalRewriteableLIMDOW", 45), ("phaseChangeWriteOnce", 46), ("phaseChangeRewriteable", 47), ("phaseChangeDualRewriteable", 48), ("ablativeWriteOnce", 49), ("nearFieldRecording", 50), ("miniQic", 51), ("travan", 52), ("n8mmMetalParticle", 53), ("n8mmAdvancedMetalEvaporate", 54), ("nctp", 55), ("ltoUltrium", 56), ("ltoAccelis", 57), ("n9TrackeTape", 58), ("n18TrackTape", 59), ("n36TrackTape", 60), ("magstar3590", 61), ("magstarMP", 62), ("d2Tape", 63), ("tapeDSTSmall", 64), ("tapeDSTMedium", 65), ("tapeDSTLarge", 66)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdMediaType.setStatus('current')
if mibBuilder.loadTexts: hwpmdMediaType.setDescription('The type of the media, as an enumerated integer. The MediaDescription property provides a more explicit definition of the media type.')
hwpmdModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdModel.setStatus('current')
if mibBuilder.loadTexts: hwpmdModel.setDescription('Name by which the physical element is generally known.')
hwpmdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdName.setStatus('current')
if mibBuilder.loadTexts: hwpmdName.setDescription('Label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.')
hwpmdOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmdOtherIdentifyingInfo.setDescription('Additional data, beyond asset tag information, that could be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. Note that if only bar code data is available and is unique and it can be used as an element key, this property is NULL and the bar code data used is the class key in the Tag property.')
hwpmdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwpmdPartNumber.setDescription('Part number assigned by the manufacturer of the physical element.')
hwpmdPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwpmdPoweredOn.setDescription('If true the physical element is powered on.')
hwpmdRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdRemovable.setStatus('current')
if mibBuilder.loadTexts: hwpmdRemovable.setDescription("If true the physical component is designed to be taken in and out of the physical container in which it is normally found, without impairing the function of the overall packaging. A component can still be removable if the power must be 'off' in order to perform the removal. If power can be 'on' and the component removed, the element is removable and can be hot swapped. ")
hwpmdReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdReplaceable.setStatus('current')
if mibBuilder.loadTexts: hwpmdReplaceable.setDescription('If true this physical media component can be replaced with a physically different one. For example, some computer systems allow the main processor chip to be upgraded to one of a higher clock rating. In this case, the processor is said to be replaceable. All removable components are inherently replaceable.')
hwpmdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwpmdSerialNumber.setDescription('Manufacturer-allocated number used to identify the physical media. Example: WD-WM3493798728')
hwpmdSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdSKU.setStatus('current')
if mibBuilder.loadTexts: hwpmdSKU.setDescription('Stock keeping unit number for this physical element.')
hwpmdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdStatus.setStatus('current')
if mibBuilder.loadTexts: hwpmdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses are 'OK', 'Degraded', and 'Pred Fail'. 'Pred Fail' indicates that an element may function properly at the present, but predicts a failure in the near future. For example, a SMART-enabled hard drive. Non-operational statuses can also be specified. These are, 'Error', 'Starting', 'Stopping' and 'Service'. The 'Service' status applies to administrative work, such as mirror-resilvering of a disk or reload of a user permissions list. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states.")
hwpmdTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 22), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdTag.setStatus('current')
if mibBuilder.loadTexts: hwpmdTag.setDescription('Uniquely identifies the physical media in the system. Example: PHYSICALDRIVE0')
hwpmdVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdVersion.setStatus('current')
if mibBuilder.loadTexts: hwpmdVersion.setDescription('Version of the physical element.')
hwpmdWriteProtectOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 32, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmdWriteProtectOn.setStatus('current')
if mibBuilder.loadTexts: hwpmdWriteProtectOn.setDescription('If true the media is currently write protected by some kind of physical mechanism, such as a protect tab on a floppy diskette.')
win32TapeDriveTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56), )
if mibBuilder.loadTexts: win32TapeDriveTable.setStatus('current')
if mibBuilder.loadTexts: win32TapeDriveTable.setDescription('The Win32_TapeDrive WMI class represents a tape drive on a Windows computer. Tape drives are primarily distinguished by the fact that they can be accessed only sequentially.')
win32TapeDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1), ).setIndexNames((0, "INFORMANT-HW", "hwtdIndex"))
if mibBuilder.loadTexts: win32TapeDriveEntry.setStatus('current')
if mibBuilder.loadTexts: win32TapeDriveEntry.setDescription('None')
hwtdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdIndex.setStatus('current')
if mibBuilder.loadTexts: hwtdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwtdAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdAvailability.setStatus('current')
if mibBuilder.loadTexts: hwtdAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwtdCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwtdCapabilities.setDescription('Array of capabilities of the media access device. For example, the device may support Random Access, removable media and Automatic Cleaning. In this case, the values 3, 7, and 9 would be written to the array. This property is inherited from CIM_MediaAccessDevice. Value Meaning 0 Unknown 1 Other 2 Sequential Access 3 Random Access 4 Supports Writing 5 Encryption 6 Compression 7 Supports Removable Media 8 Manual Cleaning 9 Automatic Cleaning 10 SMART Notification 11 Supports Dual Sided Media 12 Predismount Eject Not Required ')
hwtdCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwtdCapabilityDescriptions.setDescription('Array of free-form strings providing more detailed explanations for any of the access device features indicated in the Capabilities array. Note that each entry of this array is related to the entry in the Capabilities array that is located at the same index. This property is inherited from CIM_MediaAccessDevice.')
hwtdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdCaption.setStatus('current')
if mibBuilder.loadTexts: hwtdCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwtdCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdCompression.setStatus('current')
if mibBuilder.loadTexts: hwtdCompression.setDescription('If TRUE, hardware data compression is enabled.')
hwtdCompressionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdCompressionMethod.setStatus('current')
if mibBuilder.loadTexts: hwtdCompressionMethod.setDescription("Free form string indicating the algorithm or tool used by the device to support compression. If it is not possible or not desired to describe the compression scheme (perhaps because it is not known), we recommend using the following words: 'Unknown' to represent that it is not known whether the device supports compression capabilities or not; 'Compressed' to represent that the device supports compression capabilities but either its compression scheme is not known or not disclosed; and 'Not Compressed' to represent that the device does not support compression capabilities. This property is inherited from CIM_MediaAccessDevice.")
hwtdConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwtdConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwtdConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwtdConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwtdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwtdCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwtdDefaultBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdDefaultBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwtdDefaultBlockSize.setDescription('Default block size, in bytes, for this device. This property is inherited from CIM_MediaAccessDevice.')
hwtdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdDescription.setStatus('current')
if mibBuilder.loadTexts: hwtdDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwtdDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwtdDeviceID.setDescription('Unique identifier of the tape drive with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwtdECC = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdECC.setStatus('current')
if mibBuilder.loadTexts: hwtdECC.setDescription('If TRUE, the device supports hardware error correction.')
hwtdEOTWarningZoneSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdEOTWarningZoneSize.setStatus('current')
if mibBuilder.loadTexts: hwtdEOTWarningZoneSize.setDescription('Zone size for the End Of Tape (EOT) warning. This property is inherited from CIM_TapeDrive.')
hwtdErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwtdErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwtdErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwtdErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwtdErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwtdErrorMethodology.setDescription('Free-form string describing the type of error detection and correction supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwtdFeaturesHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdFeaturesHigh.setStatus('current')
if mibBuilder.loadTexts: hwtdFeaturesHigh.setDescription('High-order 32 bits of the device features flag.')
hwtdFeaturesLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdFeaturesLow.setStatus('current')
if mibBuilder.loadTexts: hwtdFeaturesLow.setDescription('Low-order 32 bits of the device features flag.')
hwtdId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdId.setStatus('current')
if mibBuilder.loadTexts: hwtdId.setDescription("Manufacturer's identifying name of the Windows CD ROM drive. Example: 'PLEXTOR CD-ROM PX-12CS 1.01'")
hwtdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwtdInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwtdLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwtdLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwtdManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwtdManufacturer.setDescription("Manufacturer of the Windows CD-ROM drive. Example: 'PLEXTOR'")
hwtdMaxBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdMaxBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwtdMaxBlockSize.setDescription('Maximum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwtdMaxMediaSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdMaxMediaSize.setStatus('current')
if mibBuilder.loadTexts: hwtdMaxMediaSize.setDescription('Maximum size, in kilobytes, of media supported by this device. This property is inherited from CIM_MediaAccessDevice.')
hwtdMaxPartitionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdMaxPartitionCount.setStatus('current')
if mibBuilder.loadTexts: hwtdMaxPartitionCount.setDescription('Maximum partition count for the tape drive. This property is inherited from CIM_TapeDrive.')
hwtdMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdMediaType.setStatus('current')
if mibBuilder.loadTexts: hwtdMediaType.setDescription("Media type used by (or accessed by) this device. In this case, it is set to 'Tape Drive'.")
hwtdMinBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdMinBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwtdMinBlockSize.setDescription('Minimum block size, in bytes, for media accessed by this device. This property is inherited from CIM_MediaAccessDevice.')
hwtdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdName.setStatus('current')
if mibBuilder.loadTexts: hwtdName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwtdNeedsCleaning = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdNeedsCleaning.setStatus('current')
if mibBuilder.loadTexts: hwtdNeedsCleaning.setDescription('If TRUE, the media access device needs cleaning. Whether manual or automatic cleaning is possible is indicated in the Capabilities property. This property is inherited from CIM_MediaAccessDevice.')
hwtdNumberOfMediaSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdNumberOfMediaSupported.setStatus('current')
if mibBuilder.loadTexts: hwtdNumberOfMediaSupported.setDescription('Maximum number of individual media which can be supported or inserted in the media access device (when supported). This property is inherited from CIM_MediaAccessDevice.')
hwtdPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 33), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdPadding.setStatus('current')
if mibBuilder.loadTexts: hwtdPadding.setDescription('Number of bytes inserted between blocks on a tape media. This property is inherited from CIM_TapeDrive.')
hwtdPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwtdPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwtdPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwtdPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwtdPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwtdPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwtdReportSetMarks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdReportSetMarks.setStatus('current')
if mibBuilder.loadTexts: hwtdReportSetMarks.setDescription('If TRUE, setmark reporting is enabled. Setmark reporting makes use of a specialized recorded element that does not contain user data. This recorded element is used to provide a segmentation scheme that is hierarchically superior to filemarks. Setmarks provide faster positioning on high-capacity tapes.')
hwtdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdStatus.setStatus('current')
if mibBuilder.loadTexts: hwtdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwtdStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwtdStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwtdSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwtdSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwtdSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 3, 56, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtdSystemName.setStatus('current')
if mibBuilder.loadTexts: hwtdSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
wmiMotherboardControllerPort = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4))
if mibBuilder.loadTexts: wmiMotherboardControllerPort.setStatus('current')
if mibBuilder.loadTexts: wmiMotherboardControllerPort.setDescription('The Motherboard, Controllers, and Ports subcategory groups classes that represent system devices. Examples include system memory, cache memory, and controllers.')
win321394ControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1), )
if mibBuilder.loadTexts: win321394ControllerTable.setStatus('current')
if mibBuilder.loadTexts: win321394ControllerTable.setDescription('The Win32_1394Controller WMI class represents the capabilities and management of a 1394 controller. IEEE 1394 is a specification for a high speed serial bus.')
win321394ControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hw1394Index"))
if mibBuilder.loadTexts: win321394ControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win321394ControllerEntry.setDescription('None')
hw1394Index = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Index.setStatus('current')
if mibBuilder.loadTexts: hw1394Index.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hw1394Availability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Availability.setStatus('current')
if mibBuilder.loadTexts: hw1394Availability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. Inherited from CIM_LogicalDevice.')
hw1394Caption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Caption.setStatus('current')
if mibBuilder.loadTexts: hw1394Caption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hw1394ConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394ConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hw1394ConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hw1394ConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394ConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hw1394ConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hw1394CreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394CreationClassName.setStatus('current')
if mibBuilder.loadTexts: hw1394CreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hw1394Description = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Description.setStatus('current')
if mibBuilder.loadTexts: hw1394Description.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hw1394DeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394DeviceID.setStatus('current')
if mibBuilder.loadTexts: hw1394DeviceID.setDescription('Unique identifier of this controller. This property is inherited from CIM_LogicalDevice.')
hw1394ErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394ErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hw1394ErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hw1394ErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394ErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hw1394ErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hw1394InstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394InstallDate.setStatus('current')
if mibBuilder.loadTexts: hw1394InstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hw1394LastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394LastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hw1394LastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hw1394Manufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Manufacturer.setStatus('current')
if mibBuilder.loadTexts: hw1394Manufacturer.setDescription('Manufacturer of the controller.')
hw1394MaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394MaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hw1394MaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 should be used if the number is unknown. This property is inherited from CIM_Controller.')
hw1394Name = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Name.setStatus('current')
if mibBuilder.loadTexts: hw1394Name.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hw1394PNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394PNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hw1394PNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hw1394PowerManagementCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394PowerManagementCapability.setStatus('current')
if mibBuilder.loadTexts: hw1394PowerManagementCapability.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. This method is found on the parent CIM_LogicalDevice class and can be implemented. For more information, see Extending Your Management Capabilities. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hw1394PowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394PowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hw1394PowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hw1394ProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ataATAPI", 6), ("flexibleDiskette", 7), ("n1496", 8), ("scsiParallelInterface", 9), ("scsiFibreChannelProtocol", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol2", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelProtocol", 17), ("escon", 18), ("diagnostic", 19), ("i2C", 20), ("power", 21), ("hippi", 22), ("multiBus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802310BASE5", 28), ("ieee802310BASE2", 29), ("ieee80231BASE5", 30), ("ieee802310BROAD36", 31), ("ieee8023100BASEVG", 32), ("ieee8025TokenRing", 33), ("ansiX3T95FDDI", 34), ("mca", 35), ("esdi", 36), ("ide", 37), ("cmd", 38), ("st506", 39), ("dssi", 40), ("qic2", 41), ("enhancedATAIDE", 42), ("agp", 43), ("twoWayInfrared", 44), ("fastInfrared", 45), ("serialInfrared", 46), ("irBus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394ProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hw1394ProtocolSupported.setDescription("Protocol used by the controller to access 'controlled' devices. This property is inherited from CIM_Controller.")
hw1394Status = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394Status.setStatus('current')
if mibBuilder.loadTexts: hw1394Status.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hw1394StatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394StatusInfo.setStatus('current')
if mibBuilder.loadTexts: hw1394StatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hw1394SystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394SystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hw1394SystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hw1394SystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394SystemName.setStatus('current')
if mibBuilder.loadTexts: hw1394SystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hw1394TimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hw1394TimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hw1394TimeOfLastReset.setDescription('Date and time controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32BaseBoardTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2), )
if mibBuilder.loadTexts: win32BaseBoardTable.setStatus('current')
if mibBuilder.loadTexts: win32BaseBoardTable.setDescription('The Win32_BaseBoard WMI class represents a baseboard, which is also known as a motherboard or system board.')
win32BaseBoardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwbbIndex"))
if mibBuilder.loadTexts: win32BaseBoardEntry.setStatus('current')
if mibBuilder.loadTexts: win32BaseBoardEntry.setDescription('None')
hwbbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbIndex.setStatus('current')
if mibBuilder.loadTexts: hwbbIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwbbCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbCaption.setStatus('current')
if mibBuilder.loadTexts: hwbbCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwbbConfigOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbConfigOptions.setStatus('current')
if mibBuilder.loadTexts: hwbbConfigOptions.setDescription("Array that represents the configuration of the jumpers and switches located on the base board. Example: 'JP2: 1-2 Cache Size is 256K, 2-3 Cache Size is 512K, SW1-1: Close to Disable On Board Video'")
hwbbCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwbbCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_PhysicalElement.')
hwbbDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbDepth.setStatus('current')
if mibBuilder.loadTexts: hwbbDepth.setDescription('Depth of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
hwbbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbDescription.setStatus('current')
if mibBuilder.loadTexts: hwbbDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwbbHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbHeight.setStatus('current')
if mibBuilder.loadTexts: hwbbHeight.setDescription('Height of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
hwbbHostingBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbHostingBoard.setStatus('current')
if mibBuilder.loadTexts: hwbbHostingBoard.setDescription('If TRUE, the card is a motherboard, or a baseboard in a chassis. This property is inherited from CIM_Card.')
hwbbHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbHotSwappable.setStatus('current')
if mibBuilder.loadTexts: hwbbHotSwappable.setDescription('If TRUE, the package can be hot-swapped. A physical package can be hot-swapped if it is possible to replace the element with a physically different but equivalent oelement while the containing package has power applied to it that is, while it is ON. For example, a disk drive package inserted using SCA connectors is removable and can be hot-swapped. All packages that can be hot-swapped are inherently removable and replaceable. This property is inherited from CIM_PhysicalPackage.')
hwbbInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwbbInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwbbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwbbManufacturer.setDescription('Name of the organization responsible for producing the physical element. This property is inherited from CIM_PhysicalElement.')
hwbbModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbModel.setStatus('current')
if mibBuilder.loadTexts: hwbbModel.setDescription('Name by which the physical element is known. This property is inherited from CIM_PhysicalElement.')
hwbbName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbName.setStatus('current')
if mibBuilder.loadTexts: hwbbName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwbbOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwbbOtherIdentifyingInfo.setDescription('Captures additional data, beyond asset tag information, that can be used to identify a physical element. One example is bar code data that is associated with an element that also has an asset tag. Note that if only bar code data is available and unique or able to be used as an element key, the property value would be NULL and the bar code data used as the class key, in the tag property. This property is inherited from CIM_PhysicalElement.')
hwbbPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwbbPartNumber.setDescription('Part number assigned by the organization responsible for producing or manufacturing the physical element. This property is inherited from CIM_PhysicalElement.')
hwbbPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwbbPoweredOn.setDescription('If TRUE, the physical element is powered ON. This property is inherited from CIM_PhysicalElement.')
hwbbProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbProduct.setStatus('current')
if mibBuilder.loadTexts: hwbbProduct.setDescription('Baseboard part number defined by the manufacturer.')
hwbbRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbRemovable.setStatus('current')
if mibBuilder.loadTexts: hwbbRemovable.setDescription("If TRUE, a package is removable. A physical package is removable if it is designed to be taken in and out of the physical container in which it is normally found without impairing the function of the overall packaging. A package can still be removable if power must be OFF in order to perform the removal. If power can be ON and the package removed, then the element is removable and can be hot-swapped. For example, an extra battery in a laptop is removable, as is a disk drive package inserted using SCA connectors. However, the latter can also be hot-swapped. A laptop's display is not removable, nor is a non-redundant power supply. Removing these components would impact the function of the overall packaging, or is impossible due to the tight integration of the package. This property is inherited from CIM_PhysicalPackage.")
hwbbReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbReplaceable.setStatus('current')
if mibBuilder.loadTexts: hwbbReplaceable.setDescription('If TRUE, a package is replaceable. A physical package is replaceable if it is possible to replace (FRU or upgrade) the element with a physically different one. For example, some computer systems allow the main processor chip to be upgraded to one of a higher clock rating. In this case, the processor is said to be replaceable. Another example is a power supply package mounted on sliding rails. All removable packages are inherently replaceable. This property is inherited from CIM_PhysicalPackage.')
hwbbRequirementsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbRequirementsDescription.setStatus('current')
if mibBuilder.loadTexts: hwbbRequirementsDescription.setDescription('Free-form string that describes the way in which this card is physically unique from other cards. The property only has meaning when the corresponding Boolean property SpecialRequirements is set to TRUE. This property is inherited from CIM_Card.')
hwbbRequiresDaughterBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbRequiresDaughterBoard.setStatus('current')
if mibBuilder.loadTexts: hwbbRequiresDaughterBoard.setDescription('If TRUE, at least one daughterboard or auxiliary card is required to function properly. This property is inherited from CIM_Card.')
hwbbSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwbbSerialNumber.setDescription('Manufacturer-allocated number used to identify the physical element. This property is inherited from CIM_PhysicalElement.')
hwbbSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbSKU.setStatus('current')
if mibBuilder.loadTexts: hwbbSKU.setDescription('Stock-keeping unit number for the physical element. This property is inherited from CIM_PhysicalElement.')
hwbbSlotLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbSlotLayout.setStatus('current')
if mibBuilder.loadTexts: hwbbSlotLayout.setDescription('Free-form string that describes the slot position, typical usage, restrictions, individual slot spacing or any other pertinent information for the slots on a card. This property is inherited from CIM_Card.')
hwbbSpecialRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbSpecialRequirements.setStatus('current')
if mibBuilder.loadTexts: hwbbSpecialRequirements.setDescription('If TRUE, this card is physically unique from other cards of the same type and therefore requires a special slot. For example, a double-wide card requires two slots. Another example is where a certain card may be used for the same general function as other cards but requires a special slot (for example, extra long), whereas the other cards can be placed in any available slot. If set to TRUE, then the corresponding property, RequirementsDescription, should specify the nature of the uniqueness or purpose of the card. This property is inherited from CIM_Card.')
hwbbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbStatus.setStatus('current')
if mibBuilder.loadTexts: hwbbStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwbbTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 27), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbTag.setStatus('current')
if mibBuilder.loadTexts: hwbbTag.setDescription("Unique identifier of the baseboard of the system. This property is inherited from CIM_PhysicalElement. Example: 'Base Board'")
hwbbVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbVersion.setStatus('current')
if mibBuilder.loadTexts: hwbbVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
hwbbWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbWeight.setStatus('current')
if mibBuilder.loadTexts: hwbbWeight.setDescription('Weight of the physical package in pounds. This property is inherited from CIM_PhysicalPackage.')
hwbbWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 2, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbbWidth.setStatus('current')
if mibBuilder.loadTexts: hwbbWidth.setDescription('Width of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
win32BIOSTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3), )
if mibBuilder.loadTexts: win32BIOSTable.setStatus('current')
if mibBuilder.loadTexts: win32BIOSTable.setDescription("The Win32_BIOS WMI class represents the attributes of the computer system's basic input/output services (BIOS) that are installed on a computer.")
win32BIOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1), ).setIndexNames((0, "INFORMANT-HW", "hwbiIndex"))
if mibBuilder.loadTexts: win32BIOSEntry.setStatus('current')
if mibBuilder.loadTexts: win32BIOSEntry.setDescription('None')
hwbiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiIndex.setStatus('current')
if mibBuilder.loadTexts: hwbiIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwbiBiosCharacteristics = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiBiosCharacteristics.setStatus('current')
if mibBuilder.loadTexts: hwbiBiosCharacteristics.setDescription('Array of BIOS characteristics supported by the system as defined by the System Management BIOS Reference Specification. Value Meaning 0 Reserved 1 Reserved 2 Unknown 3 BIOS Characteristics Not Supported 4 ISA is supported 5 MCA is supported 6 EISA is supported 7 PCI is supported 8 PC Card (PCMCIA) is supported 9 Plug and Play is supported 10 APM is supported 11 BIOS is Upgradable (Flash) 12 BIOS shadowing is allowed 13 VL-VESA is supported 14 ESCD support is available 15 Boot from CD is supported 16 Selectable Boot is supported 17 BIOS ROM is socketed 18 Boot From PC Card (PCMCIA) is supported 19 EDD (Enhanced Disk Drive) Specification is supported 20 Int 13h - Japanese Floppy for NEC 9800 1.2mb (3.5, 1k Bytes/Sector, 360 RPM) is supported 21 Int 13h - Japanese Floppy for Toshiba 1.2mb (3.5, 360 RPM) is supported 22 Int 13h - 5.25 / 360 KB Floppy Services are supported 23 Int 13h - 5.25 /1.2MB Floppy Services are supported 24 Int 13h - 3.5 / 720 KB Floppy Services are supported 25 Int 13h - 3.5 / 2.88 MB Floppy Services are supported 26 Int 5h, Print Screen Service is supported 27 Int 9h, 8042 Keyboard services are supported 28 Int 14h, Serial Services are supported 29 Int 17h, printer services are supported 30 Int 10h, CGA/Mono Video Services are supported 31 NEC PC-98 32 ACPI supported 33 USB Legacy is supported 34 AGP is supported 35 I2O boot is supported 36 LS-120 boot is supported 37 ATAPI ZIP Drive boot is supported 38 1394 boot is supported 39 Smart Battery supported ')
hwbiBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiBIOSVersion.setStatus('current')
if mibBuilder.loadTexts: hwbiBIOSVersion.setDescription('Windows Server 2003 and Windows XP: Array of the complete system BIOS information. In many computers there can be several version strings that are stored in the registry, and represent the system BIOS information. ')
hwbiBuildNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiBuildNumber.setStatus('current')
if mibBuilder.loadTexts: hwbiBuildNumber.setDescription('Internal identifier for this compilation of this software element. This property is inherited from CIM_SoftwareElement. ')
hwbiCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiCaption.setStatus('current')
if mibBuilder.loadTexts: hwbiCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwbiCodeSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiCodeSet.setStatus('current')
if mibBuilder.loadTexts: hwbiCodeSet.setDescription('Code set used by this software element. This property is inherited from CIM_SoftwareElement.')
hwbiCurrentLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiCurrentLanguage.setStatus('current')
if mibBuilder.loadTexts: hwbiCurrentLanguage.setDescription('Name of the current BIOS language.')
hwbiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiDescription.setStatus('current')
if mibBuilder.loadTexts: hwbiDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwbiIdentificationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiIdentificationCode.setStatus('current')
if mibBuilder.loadTexts: hwbiIdentificationCode.setDescription("Manufacturer's identifier for this software element. Often this will be a stock keeping unit (SKU) or a part number. This property is inherited from CIM_SoftwareElement.")
hwbiInstallableLanguages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiInstallableLanguages.setStatus('current')
if mibBuilder.loadTexts: hwbiInstallableLanguages.setDescription('Number of languages available for installation on this system. Language may determine properties such as the need for Unicode and bi-directional text.')
hwbiInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwbiInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwbiLanguageEdition = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 12), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiLanguageEdition.setStatus('current')
if mibBuilder.loadTexts: hwbiLanguageEdition.setDescription("Language edition of this software element. The language codes defined in ISO 639 should be used. Where the software element represents multilingual or international version of a product, the string 'multilingual' should be used. This property is inherited from CIM_SoftwareElement.")
hwbiListOfLanguages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiListOfLanguages.setStatus('current')
if mibBuilder.loadTexts: hwbiListOfLanguages.setDescription('Array of names of available BIOS-installable languages.')
hwbiManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwbiManufacturer.setDescription('Manufacturer of this software element. This property is inherited from CIM_SoftwareElement.')
hwbiName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 15), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiName.setStatus('current')
if mibBuilder.loadTexts: hwbiName.setDescription('Name used to identify this software element. This property is inherited from CIM_ManagedSystemElement.')
hwbiOtherTargetOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 16), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiOtherTargetOS.setStatus('current')
if mibBuilder.loadTexts: hwbiOtherTargetOS.setDescription('Records the manufacturer and operating system type for a software element when the TargetOperatingSystem property has a value of 1 (Other). When TargetOperatingSystem has a value of 1, OtherTargetOS must have a non-null value. For all other values of TargetOperatingSystem, OtherTargetOS is NULL. This property is inherited from CIM_SoftwareElement.')
hwbiPrimaryBIOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiPrimaryBIOS.setStatus('current')
if mibBuilder.loadTexts: hwbiPrimaryBIOS.setDescription('If TRUE, this is the primary BIOS of the computer system. This property is inherited from CIM_BIOSElement.')
hwbiReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiReleaseDate.setStatus('current')
if mibBuilder.loadTexts: hwbiReleaseDate.setDescription('Release date of the Windows BIOS in the Coordinated Universal Time (UTC) format of YYYYMMDDHHMMSS.MMMMMM(+-)OOO.')
hwbiSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwbiSerialNumber.setDescription('Assigned serial number of the software element. This property is inherited from CIM_SoftwareElement.')
hwbiSMBIOSBIOSVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSMBIOSBIOSVersion.setStatus('current')
if mibBuilder.loadTexts: hwbiSMBIOSBIOSVersion.setDescription('BIOS version as reported by SMBIOS.')
hwbiSMBIOSMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSMBIOSMajorVersion.setStatus('current')
if mibBuilder.loadTexts: hwbiSMBIOSMajorVersion.setDescription('Major SMBIOS version number. This property is NULL if SMBIOS is not found.')
hwbiSMBIOSMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSMBIOSMinorVersion.setStatus('current')
if mibBuilder.loadTexts: hwbiSMBIOSMinorVersion.setDescription('Minor SMBIOS version number. This property is NULL if SMBIOS is not found.')
hwbiSMBIOSPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSMBIOSPresent.setStatus('current')
if mibBuilder.loadTexts: hwbiSMBIOSPresent.setDescription('If true, the SMBIOS is available on this computer system.')
hwbiSoftwareElementID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSoftwareElementID.setStatus('current')
if mibBuilder.loadTexts: hwbiSoftwareElementID.setDescription('Identifier for this software element; designed to be used in conjunction with other keys to create a unique representation of this CIM_SoftwareElement instance. This property is inherited from CIM_SoftwareElement.')
hwbiSoftwareElementState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("deployable", 0), ("installable", 1), ("executable", 2), ("running", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiSoftwareElementState.setStatus('current')
if mibBuilder.loadTexts: hwbiSoftwareElementState.setDescription('State of a software element. This property is inherited from CIM_SoftwareElement.')
hwbiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiStatus.setStatus('current')
if mibBuilder.loadTexts: hwbiStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwbiTargetOperatingSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("macos", 2), ("attunix", 3), ("dgux", 4), ("decnt", 5), ("digitalUnix", 6), ("openVMS", 7), ("hpux", 8), ("aix", 9), ("mvs", 10), ("os400", 11), ("os2", 12), ("javaVM", 13), ("msdos", 14), ("win3x", 15), ("win95", 16), ("win98", 17), ("winnt", 18), ("wince", 19), ("ncr3000", 20), ("netWare", 21), ("osf", 22), ("dcOS", 23), ("reliantUNIX", 24), ("scoUnixWare", 25), ("scoOpenServer", 26), ("sequent", 27), ("irix", 28), ("solaris", 29), ("sunOS", 30), ("u6000", 31), ("aseries", 32), ("tandemNSK", 33), ("tandemNT", 34), ("bs2000", 35), ("linux", 36), ("lynx", 37), ("xenix", 38), ("vmESA", 39), ("interactiveUNIX", 40), ("bsdunix", 41), ("freeBSD", 42), ("netBSD", 43), ("gnuHurd", 44), ("os9", 45), ("machKernel", 46), ("inferno", 47), ("qnx", 48), ("epoc", 49), ("ixWorks", 50), ("vxWorks", 51), ("miNT", 52), ("beOS", 53), ("hpMPE", 54), ("nextStep", 55), ("palmPilot", 56), ("rhapsody", 57), ("windows2000", 58), ("dedicated", 59), ("vse", 60), ("tpf", 61)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiTargetOperatingSystem.setStatus('current')
if mibBuilder.loadTexts: hwbiTargetOperatingSystem.setDescription('Target operating system of the owning software element. This property is inherited from CIM_SoftwareElement.')
hwbiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 3, 1, 28), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbiVersion.setStatus('current')
if mibBuilder.loadTexts: hwbiVersion.setDescription('Version of the BIOS. This string is created by the BIOS manufacturer. This property is inherited from CIM_SoftwareElement.')
win32BusTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4), )
if mibBuilder.loadTexts: win32BusTable.setStatus('current')
if mibBuilder.loadTexts: win32BusTable.setDescription('The Win32_Bus WMI class represents a physical bus as seen by a Windows operating system. Any instance of a Windows bus is a descendent (or member) of this class.')
win32BusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1), ).setIndexNames((0, "INFORMANT-HW", "hwbuIndex"))
if mibBuilder.loadTexts: win32BusEntry.setStatus('current')
if mibBuilder.loadTexts: win32BusEntry.setDescription('None')
hwbuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuIndex.setStatus('current')
if mibBuilder.loadTexts: hwbuIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwbuAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuAvailability.setStatus('current')
if mibBuilder.loadTexts: hwbuAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwbuBusNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuBusNum.setStatus('current')
if mibBuilder.loadTexts: hwbuBusNum.setDescription('Logical number assigned to the physical bus. Example: 1')
hwbuBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("internal", 0), ("isa", 1), ("eisa", 2), ("microChannel", 3), ("turboChannel", 4), ("pciBus", 5), ("vmeBus", 6), ("nuBus", 7), ("pcmciaBus", 8), ("cBus", 9), ("mpiBus", 10), ("mpsaBus", 11), ("internalProcessor", 12), ("internalPowerBus", 13), ("pnpISABus", 14), ("pnpBus", 15), ("maximumInterfaceType", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuBusType.setStatus('current')
if mibBuilder.loadTexts: hwbuBusType.setDescription('Type of the physical bus. This value will be one of the values in the INTERFACE_TYPE enumeration defined in Bus.h.')
hwbuCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuCaption.setStatus('current')
if mibBuilder.loadTexts: hwbuCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwbuConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwbuConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwbuConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwbuConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwbuCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwbuCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwbuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuDescription.setStatus('current')
if mibBuilder.loadTexts: hwbuDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwbuDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwbuDeviceID.setDescription('Unique name that identifies the bus. This property is inherited from CIM_LogicalDevice.')
hwbuErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwbuErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwbuErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwbuErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwbuInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwbuInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwbuLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwbuLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwbuName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuName.setStatus('current')
if mibBuilder.loadTexts: hwbuName.setDescription('Label by which the object is known. When subclassed, this property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwbuPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwbuPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwbuPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwbuPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwbuPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwbuPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwbuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuStatus.setStatus('current')
if mibBuilder.loadTexts: hwbuStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwbuStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwbuStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwbuSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwbuSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwbuSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 4, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbuSystemName.setStatus('current')
if mibBuilder.loadTexts: hwbuSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32CacheMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5), )
if mibBuilder.loadTexts: win32CacheMemoryTable.setStatus('current')
if mibBuilder.loadTexts: win32CacheMemoryTable.setDescription('The Win32_CacheMemory WMI class represents internal and external cache memory on a computer system.')
win32CacheMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1), ).setIndexNames((0, "INFORMANT-HW", "hwcmIndex"))
if mibBuilder.loadTexts: win32CacheMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: win32CacheMemoryEntry.setDescription('None')
hwcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmIndex.setStatus('current')
if mibBuilder.loadTexts: hwcmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwcmAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writable", 2), ("readWriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmAccess.setStatus('current')
if mibBuilder.loadTexts: hwcmAccess.setDescription('Type of access. This property is inherited from CIM_StorageExtent.')
hwcmAdditionalErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmAdditionalErrorData.setStatus('current')
if mibBuilder.loadTexts: hwcmAdditionalErrorData.setDescription('Array of octets that hold additional error information. An example is ECC Syndrome or the return of the check bits if a CRC-based error methodology is used. In the latter case, if a single bit error is recognized and the CRC algorithm is known, it is possible to determine the exact bit that failed. This type of data (ECC Syndrome, Check Bit, Parity Bit data, or other vendor supplied information) is included in this field. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmAssociativity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("directMapped", 3), ("n2waySetAssociative", 4), ("n4waySetAssociative", 5), ("fullyAssociative", 6), ("n8waySetAssociative", 7), ("n16waySetAssociative", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmAssociativity.setStatus('current')
if mibBuilder.loadTexts: hwcmAssociativity.setDescription('An integer enumeration that defines the system cache associativity. This property is inherited from CIM_CacheMemory.')
hwcmAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmAvailability.setStatus('current')
if mibBuilder.loadTexts: hwcmAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwcmBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwcmBlockSize.setDescription('Size in bytes of the blocks that form this storage extent. If unknown or if a block concept is not valid (for example, for aggregate extents, memory or logical disks), enter a 1. This property is inherited from CIM_StorageExtent.')
hwcmCacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 7), Gauge32()).setUnits('NanoSeconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmCacheSpeed.setStatus('current')
if mibBuilder.loadTexts: hwcmCacheSpeed.setDescription('Speed of the cache.')
hwcmCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("instruction", 3), ("data", 4), ("unified", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmCacheType.setStatus('current')
if mibBuilder.loadTexts: hwcmCacheType.setDescription('Type of cache. This property is inherited from CIM_CacheMemory.')
hwcmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmCaption.setStatus('current')
if mibBuilder.loadTexts: hwcmCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwcmConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcmConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwcmConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwcmConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwcmCorrectableError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmCorrectableError.setStatus('current')
if mibBuilder.loadTexts: hwcmCorrectableError.setDescription('If TRUE, the most recent error was correctable. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 13), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcmCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwcmCurrentSRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmCurrentSRAM.setStatus('current')
if mibBuilder.loadTexts: hwcmCurrentSRAM.setDescription('Array of types of Static Random Access Memory (SRAM) being used for the cache memory. Value Meaning 0 Other 1 Unknown 2 Non-Burst 3 Burst 4 Pipeline Burst 5 Synchronous 6 Asynchronous ')
hwcmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmDescription.setStatus('current')
if mibBuilder.loadTexts: hwcmDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwcmDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcmDeviceID.setDescription("Unique identifier of the cache represented by an instance of Win32_CacheMemory. This property is inherited from CIM_LogicalDevice. Example: 'Cache Memory 1'")
hwcmEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwcmEndingAddress.setDescription('Ending address, referenced by an application or operating system and mapped by a memory controller, for this memory object. The ending address is specified in kilobytes. This property is inherited from CIM_Memory.')
hwcmErrorAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorAccess.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorAccess.setDescription('Memory access operation that caused the last error. The type of error is described by the ErrorInfo property. If ErrorInfo is equal to 3 (OK), then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorAddress.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorAddress.setDescription('Address of the last memory error. The type of error is described by the ErrorInfo property. If ErrorInfo is equal to 3 (OK), then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwcmErrorCorrectType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singlebitECC", 5), ("multibitECC", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorCorrectType.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorCorrectType.setDescription('Error correction method used by the cache memory.')
hwcmErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorData.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorData.setDescription('Array of data captured during the last erroneous memory access. The data occupies the first n octets of the array necessary to hold the number of bits specified by the ErrorTransferSize property. If ErrorTransferSize is 0, then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmErrorDataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("leastSignificantByteFirst", 1), ("mostSignificantByteFirst", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorDataOrder.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorDataOrder.setDescription('Ordering for data stored in the ErrorData property. If ErrorTransferSize is 0, then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwcmErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("crcError", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorInfo.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorInfo.setDescription('Type of error that occurred most recently. The values 12-14 are undefined in the CIM schema because in DMI they mix the semantics of the type of error and whether it was correctable or not. The latter is indicated in the property CorrectableError. This property is inherited from CIM_Memory.')
hwcmErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorMethodology.setDescription('Details on the parity or CRC algorithms, ECC, or other mechanisms used. This property is inherited from CIM_Memory.')
hwcmErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorResolution.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorResolution.setDescription('Range, in bytes, to which the last error can be resolved. For example, if error addresses are resolved to bit 11 (that is, on a typical page basis), then errors can be resolved to 4K boundaries and this property is set to 4000. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorTime.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorTime.setDescription('Time that the last memory error occurred. The type of error is described by the ErrorInfo property. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmErrorTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmErrorTransferSize.setStatus('current')
if mibBuilder.loadTexts: hwcmErrorTransferSize.setDescription('Size of the data transfer in bits that caused the last error. 0 indicates no error. If the ErrorInfo property is equal to 3 (OK), then this property should be set to 0. This property is inherited from CIM_Memory.')
hwcmFlushTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmFlushTimer.setStatus('current')
if mibBuilder.loadTexts: hwcmFlushTimer.setDescription('Maximum amount of time, in seconds, dirty lines or buckets may remain in the cache before they are flushed. A value of 0 indicated that a cache flush is not controlled by a flushing timer. This property is inherited from CIM_CacheMemory.')
hwcmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 31), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwcmInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwcmInstalledSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 32), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmInstalledSize.setStatus('current')
if mibBuilder.loadTexts: hwcmInstalledSize.setDescription('Current size of the installed cache memory.')
hwcmLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcmLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwcmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("primary", 3), ("secondary", 4), ("tertiary", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmLevel.setStatus('current')
if mibBuilder.loadTexts: hwcmLevel.setDescription('Level of the cache. This property is inherited from CIM_CacheMemory.')
hwcmLineSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmLineSize.setStatus('current')
if mibBuilder.loadTexts: hwcmLineSize.setDescription('Size, in bytes, of a single cache bucket or line. This property is inherited from CIM_CacheMemory.')
hwcmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("internal", 0), ("external", 1), ("reserved", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmLocation.setStatus('current')
if mibBuilder.loadTexts: hwcmLocation.setDescription('Physical location of the cache memory.')
hwcmMaxCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 37), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmMaxCacheSize.setStatus('current')
if mibBuilder.loadTexts: hwcmMaxCacheSize.setDescription('Maximum cache size installable to this particular cache memory.')
hwcmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmName.setStatus('current')
if mibBuilder.loadTexts: hwcmName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwcmNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: hwcmNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent. This property is inherited from CIM_StorageExtent.')
hwcmOtherErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmOtherErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwcmOtherErrorDescription.setDescription('Free-form string providing more information if the ErrorType property is set to 1, Other. Otherwise, this string has no meaning. This property is inherited from CIM_Memory.')
hwcmPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcmPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwcmPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 42), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwcmPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwcmPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 43), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwcmPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwcmPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 44), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmPurpose.setStatus('current')
if mibBuilder.loadTexts: hwcmPurpose.setDescription('Free-form string describing the media and/or its use. This property is inherited from CIM_StorageExtent.')
hwcmReadPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("readAhead", 4), ("readAndReadAhead", 5), ("determinationPerIO", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmReadPolicy.setStatus('current')
if mibBuilder.loadTexts: hwcmReadPolicy.setDescription('Policy that shall be employed by the cache for handling read requests. This property is inherited from CIM_CacheMemory.')
hwcmReplacementPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leastRecentlyUsed", 3), ("firstInFirstOut", 4), ("lastInFirstOut", 5), ("leastFrequentlyUsed", 6), ("mostFrequentlyUsed", 7), ("osDependentAlgorithms", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmReplacementPolicy.setStatus('current')
if mibBuilder.loadTexts: hwcmReplacementPolicy.setDescription('Algorithm to determine which cache lines or buckets should be re-used. This property is inherited from CIM_CacheMemory.')
hwcmStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwcmStartingAddress.setDescription('Beginning address, referenced by an application or operating system and mapped by a memory controller, for this memory object. The starting address is specified in kilobytes. This property is inherited from CIM_Memory.')
hwcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmStatus.setStatus('current')
if mibBuilder.loadTexts: hwcmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwcmStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwcmStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwcmSupportedSRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 50), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmSupportedSRAM.setStatus('current')
if mibBuilder.loadTexts: hwcmSupportedSRAM.setDescription('Array of supported types of Static Random Access Memory (SRAM) that can be used for the cache memory. Value Meaning 0 Other 1 Unknown 2 Non-Burst 3 Burst 4 Pipeline Burst 5 Synchronous 6 Asynchronous ')
hwcmSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 51), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcmSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwcmSystemLevelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmSystemLevelAddress.setStatus('current')
if mibBuilder.loadTexts: hwcmSystemLevelAddress.setDescription('If TRUE, the address information in the property ErrorAddress is a system-level address. If FALSE, it is a physical address. If the ErrorInfo property is equal to 3, then this property has no meaning. This property is inherited from CIM_Memory.')
hwcmSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 53), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmSystemName.setStatus('current')
if mibBuilder.loadTexts: hwcmSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwcmWritePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 5, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("writeBack", 3), ("writeThrough", 4), ("variesWithAddress", 5), ("determinationPerIO", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcmWritePolicy.setStatus('current')
if mibBuilder.loadTexts: hwcmWritePolicy.setDescription('Write policy definition. This property is inherited from CIM_CacheMemory.')
win32DeviceMemoryAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6), )
if mibBuilder.loadTexts: win32DeviceMemoryAddressTable.setStatus('current')
if mibBuilder.loadTexts: win32DeviceMemoryAddressTable.setDescription('The Win32_DeviceMemoryAddress WMI class represents a device memory address on a Windows system.')
win32DeviceMemoryAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1), ).setIndexNames((0, "INFORMANT-HW", "hwdaIndex"))
if mibBuilder.loadTexts: win32DeviceMemoryAddressEntry.setStatus('current')
if mibBuilder.loadTexts: win32DeviceMemoryAddressEntry.setDescription('None')
hwdaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaIndex.setStatus('current')
if mibBuilder.loadTexts: hwdaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwdaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaCaption.setStatus('current')
if mibBuilder.loadTexts: hwdaCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwdaCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwdaCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_MemoryMappedIO.')
hwdaCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwdaCSCreationClassName.setDescription('Name of the scoping computer system creation class. This property is inherited from CIM_MemoryMappedIO.')
hwdaCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaCSName.setStatus('current')
if mibBuilder.loadTexts: hwdaCSName.setDescription('Name of the scoping computer system. This property is inherited from CIM_MemoryMappedIO.')
hwdaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaDescription.setStatus('current')
if mibBuilder.loadTexts: hwdaDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwdaEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwdaEndingAddress.setDescription('Ending address of memory-mapped I/O. This property is inherited from CIM_MemoryMappedIO.')
hwdaInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwdaInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwdaMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("readWrite", 1), ("readOnly", 2), ("writeOnly", 3), ("prefetchable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaMemoryType.setStatus('current')
if mibBuilder.loadTexts: hwdaMemoryType.setDescription('Characteristics of the memory resource on the Windows system.')
hwdaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaName.setStatus('current')
if mibBuilder.loadTexts: hwdaName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwdaStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwdaStartingAddress.setDescription('Starting address of memory-mapped I/O. The hardware resource identifier property should be set to this value to construct the mapped I/O resource key. This property is inherited from CIM_MemoryMappedIO.')
hwdaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdaStatus.setStatus('current')
if mibBuilder.loadTexts: hwdaStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
win32DMAChannelTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7), )
if mibBuilder.loadTexts: win32DMAChannelTable.setStatus('current')
if mibBuilder.loadTexts: win32DMAChannelTable.setDescription('The Win32_DMAChannel WMI class represents a direct memory access (DMA) channel on a Windows computer system. DMA is a method of moving data from a device to memory (or vice versa) without the help of the microprocessor. The system board uses a DMA controller to handle a fixed number of channels, each of which can be used by one (and only one) device at a time.')
win32DMAChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1), ).setIndexNames((0, "INFORMANT-HW", "hwdmaIndex"))
if mibBuilder.loadTexts: win32DMAChannelEntry.setStatus('current')
if mibBuilder.loadTexts: win32DMAChannelEntry.setDescription('None')
hwdmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaIndex.setStatus('current')
if mibBuilder.loadTexts: hwdmaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwdmaAddressSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaAddressSize.setStatus('current')
if mibBuilder.loadTexts: hwdmaAddressSize.setDescription('DMA channel address size in bits. Permissible values are 8, 16, 32 or 64 bits. If unknown, enter 0 (zero). This property is inherited from CIM_DMA.')
hwdmaAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("available", 3), ("inUseNotAvailable", 4), ("inUseAndAvailableShareable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaAvailability.setStatus('current')
if mibBuilder.loadTexts: hwdmaAvailability.setDescription('Availability of the DMA. This property is inherited from CIM_DMA.')
hwdmaBurstMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaBurstMode.setStatus('current')
if mibBuilder.loadTexts: hwdmaBurstMode.setDescription('Indicates whether or not the DMA channel supports burst mode. This property is inherited from CIM_DMA.')
hwdmaByteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("doesNotExecuteIncountByByteMode", 3), ("executeIncountByByteMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaByteMode.setStatus('current')
if mibBuilder.loadTexts: hwdmaByteMode.setDescription('DMA execution mode. This property is inherited from CIM_DMA.')
hwdmaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaCaption.setStatus('current')
if mibBuilder.loadTexts: hwdmaCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwdmaChannelTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("isaCompatible", 3), ("typeA", 4), ("typeB", 5), ("typeF", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaChannelTiming.setStatus('current')
if mibBuilder.loadTexts: hwdmaChannelTiming.setDescription('DMA channel timing. This property is inherited from CIM_DMA.')
hwdmaCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwdmaCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_DMA.')
hwdmaCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwdmaCSCreationClassName.setDescription('Name of the scoping computer system creation class. This property is inherited from CIM_DMA.')
hwdmaCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaCSName.setStatus('current')
if mibBuilder.loadTexts: hwdmaCSName.setDescription('Name of the scoping computer system. This property is inherited from CIM_DMA.')
hwdmaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaDescription.setStatus('current')
if mibBuilder.loadTexts: hwdmaDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwdmaDMAChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaDMAChannel.setStatus('current')
if mibBuilder.loadTexts: hwdmaDMAChannel.setDescription("DMA channel number, part of the object's key value. This property is inherited from CIM_DMA.")
hwdmaInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwdmaInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwdmaMaxTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaMaxTransferSize.setStatus('current')
if mibBuilder.loadTexts: hwdmaMaxTransferSize.setDescription('Maximum number of bytes that can be transferred by this DMA channel. If unknown, enter 0 (zero). This property is inherited from CIM_DMA.')
hwdmaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaName.setStatus('current')
if mibBuilder.loadTexts: hwdmaName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwdmaPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaPort.setStatus('current')
if mibBuilder.loadTexts: hwdmaPort.setDescription('DMA port used by the host bus adapter. This is meaningful for MCA-type buses. Example: 12')
hwdmaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaStatus.setStatus('current')
if mibBuilder.loadTexts: hwdmaStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwdmaTransferWidths = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaTransferWidths.setStatus('current')
if mibBuilder.loadTexts: hwdmaTransferWidths.setDescription('Array of all the transfer widths (in bits) supported by this DMA channel. If unknown, enter 0 (zero). This property is inherited from CIM_DMA.')
hwdmaTypeCTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("isaCompatible", 3), ("notSupported", 4), ("supported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaTypeCTiming.setStatus('current')
if mibBuilder.loadTexts: hwdmaTypeCTiming.setDescription('Support for C type (burst) timing. This property is inherited from CIM_DMA.')
hwdmaWordMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("doesNotExecuteIncountByWordMode", 3), ("executeIncountByWordMode", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmaWordMode.setStatus('current')
if mibBuilder.loadTexts: hwdmaWordMode.setDescription('DMA execution mode. This property is inherited from CIM_DMA.')
win32FloppyControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8), )
if mibBuilder.loadTexts: win32FloppyControllerTable.setStatus('current')
if mibBuilder.loadTexts: win32FloppyControllerTable.setDescription('The Win32_FloppyController WMI class represents the capabilities and management capacity of a floppy disk drive controller.')
win32FloppyControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1), ).setIndexNames((0, "INFORMANT-HW", "hwfcIndex"))
if mibBuilder.loadTexts: win32FloppyControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win32FloppyControllerEntry.setDescription('None')
hwfcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcIndex.setStatus('current')
if mibBuilder.loadTexts: hwfcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwfcAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcAvailability.setStatus('current')
if mibBuilder.loadTexts: hwfcAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwfcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcCaption.setStatus('current')
if mibBuilder.loadTexts: hwfcCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwfcConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwfcConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwfcConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwfcConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwfcCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwfcCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwfcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcDescription.setStatus('current')
if mibBuilder.loadTexts: hwfcDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwfcDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwfcDeviceID.setDescription('Unique identifier of the floppy controller. This property is inherited from CIM_LogicalDevice.')
hwfcErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwfcErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwfcErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwfcErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwfcInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwfcInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwfcLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwfcLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwfcManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwfcManufacturer.setDescription("Name of the floppy controller manufacturer. Example: 'Microsoft'")
hwfcMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwfcMaxNumberControlled.setDescription('Maximum number of directly addressable entities that this controller supports. A value of 0 (zero) should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwfcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcName.setStatus('current')
if mibBuilder.loadTexts: hwfcName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwfcPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwfcPNPDeviceID.setDescription("Windows Plug and Play device identifier for the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwfcPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwfcPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled, but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwfcPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwfcPowerManagementSupported.setDescription('If TRUE, the device can be power-managed, which means that it can be put into suspend mode, and so on. The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwfcProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ataATAPI", 6), ("flexibleDiskette", 7), ("n1496", 8), ("scsiParallelInterface", 9), ("scsiFibreChannelProtocol", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol2", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelProtocol", 17), ("escon", 18), ("diagnostic", 19), ("i2C", 20), ("power", 21), ("hippi", 22), ("multiBus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802310BASE5", 28), ("ieee802310BASE2", 29), ("ieee80231BASES", 30), ("ieee802310BROAD36", 31), ("ieee8023100BASEVG", 32), ("ieee8025TokenRing", 33), ("ansiX3T95FDDI", 34), ("mca", 35), ("esdi", 36), ("ide", 37), ("cmd", 38), ("st506", 39), ("dssi", 40), ("qic2", 41), ("enhancedATAIDE", 42), ("agp", 43), ("twowayInfrared", 44), ("fastInfrared", 45), ("serialInfrared", 46), ("irBus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwfcProtocolSupported.setDescription('Protocol that the controller uses to access controlled devices. This property is inherited from CIM_Controller.')
hwfcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcStatus.setStatus('current')
if mibBuilder.loadTexts: hwfcStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwfcStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwfcStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwfcSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwfcSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwfcSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcSystemName.setStatus('current')
if mibBuilder.loadTexts: hwfcSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwfcTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 8, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwfcTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwfcTimeOfLastReset.setDescription('Date and time the controller was last reset. This could mean the controller was powered down or reinitialized. This property is inherited from CIM_Controller.')
win32IDEControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9), )
if mibBuilder.loadTexts: win32IDEControllerTable.setStatus('current')
if mibBuilder.loadTexts: win32IDEControllerTable.setDescription('The Win32_IDEController WMI class manages the capabilities of an integrated device electronics (IDE) controller device.')
win32IDEControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1), ).setIndexNames((0, "INFORMANT-HW", "hwideIndex"))
if mibBuilder.loadTexts: win32IDEControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win32IDEControllerEntry.setDescription('None')
hwideIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideIndex.setStatus('current')
if mibBuilder.loadTexts: hwideIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwideAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideAvailability.setStatus('current')
if mibBuilder.loadTexts: hwideAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwideCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideCaption.setStatus('current')
if mibBuilder.loadTexts: hwideCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwideConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwideConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwideConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwideConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwideCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwideCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwideDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideDescription.setStatus('current')
if mibBuilder.loadTexts: hwideDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwideDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwideDeviceID.setDescription('Unique identifier of the IDE controller with other devices on the system. This property is inherited from CIM_LogicalDevice. ')
hwideErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwideErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwideErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwideErrorDescription.setDescription('More information about the error recorded in LastErrorCode property, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice. ')
hwideInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwideInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwideLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwideLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwideManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwideManufacturer.setDescription('Manufacturer of the IDE controller device. ')
hwideMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwideMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 (zero) should be used if the number is unknown. This property is inherited from CIM_Controller. ')
hwideName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideName.setStatus('current')
if mibBuilder.loadTexts: hwideName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwidePNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidePNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwidePNPDeviceID.setDescription('Windows plug and play device ID of the logical device. This property is inherited from CIM_LogicalDevice. Example: *PNP030b')
hwidePowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidePowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwidePowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled, but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle), and Time set to a specific date and time or interval for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwidePowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidePowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwidePowerManagementSupported.setDescription('If TRUE, the device can be power-managed put into suspend mode, and so on. The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwideProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ataATAPI", 6), ("flexibleDiskette", 7), ("n1496", 8), ("scsiParallelInterface", 9), ("scsiFibreChannelProtocol", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol1394", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelProtocol", 17), ("escon", 18), ("diagnostic", 19), ("i2C", 20), ("power", 21), ("hippi", 22), ("multiBus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802310BASE5", 28), ("ieee802310BASE2", 29), ("ieee80231BASE5", 30), ("ieee802310BROAD36", 31), ("ieee8023100BASEVG", 32), ("ieee8025TokenRing", 33), ("ansiX3T95FDDI", 34), ("mca", 35), ("esdi", 36), ("ide", 37), ("cmd", 38), ("st506", 39), ("dssi", 40), ("qic2", 41), ("enhancedATAIDE", 42), ("agp", 43), ("twowayInfrared", 44), ("fastInfrared", 45), ("serialInfrared", 46), ("irBus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwideProtocolSupported.setDescription('Protocol used by the controller to access controlled devices. This property is inherited from CIM_Controller.')
hwideStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideStatus.setStatus('current')
if mibBuilder.loadTexts: hwideStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwideStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwideStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwideSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwideSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwideSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideSystemName.setStatus('current')
if mibBuilder.loadTexts: hwideSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwideTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 9, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwideTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwideTimeOfLastReset.setDescription('Date and time this controller was last reset. This could mean the controller was powered down or reinitialized. This property is inherited from CIM_Controller.')
win32InfraredDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10), )
if mibBuilder.loadTexts: win32InfraredDeviceTable.setStatus('current')
if mibBuilder.loadTexts: win32InfraredDeviceTable.setDescription('The Win32_InfraredDevice WMI class represents the capabilities and management of an infrared device.')
win32InfraredDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1), ).setIndexNames((0, "INFORMANT-HW", "hwidIndex"))
if mibBuilder.loadTexts: win32InfraredDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: win32InfraredDeviceEntry.setDescription('None')
hwidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidIndex.setStatus('current')
if mibBuilder.loadTexts: hwidIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwidAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidAvailability.setStatus('current')
if mibBuilder.loadTexts: hwidAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwidCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidCaption.setStatus('current')
if mibBuilder.loadTexts: hwidCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwidConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwidConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwidConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwidConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwidCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwidCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwidDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidDescription.setStatus('current')
if mibBuilder.loadTexts: hwidDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwidDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwidDeviceID.setDescription('Unique identifier of the infrared device. This property is inherited from CIM_LogicalDevice.')
hwidErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwidErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwidErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwidErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwidInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwidInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwidLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwidLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwidManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwidManufacturer.setDescription('Manufacturer of the device.')
hwidMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwidMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this device. A value of 0 (zero) should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwidName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidName.setStatus('current')
if mibBuilder.loadTexts: hwidName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwidPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwidPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwidPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwidPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwidPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwidPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwidProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ataATAPI", 6), ("flexibleDiskette", 7), ("n1496", 8), ("scsiParallelInterface", 9), ("scsiFibreChannelProtocol", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol1394", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelProtocol", 17), ("escon", 18), ("diagnostic", 19), ("i2C", 20), ("power", 21), ("hippi", 22), ("multiBus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802310BASE5", 28), ("ieee802310BASE2", 29), ("ieee80231BASE5", 30), ("ieee802310BROAD36", 31), ("ieee8023100BASEVG", 32), ("ieee8025TokenRing", 33), ("ansiX3T95FDDI", 34), ("mca", 35), ("esdi", 36), ("ide", 37), ("cmd", 38), ("st506", 39), ("dssi", 40), ("qic2", 41), ("enhancedATAIDE", 42), ("agp", 43), ("twowayInfrared", 44), ("fastInfrared", 45), ("serialInfrared", 46), ("irBus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwidProtocolSupported.setDescription('Protocol used by the controller to access controlled devices. This property is inherited from CIM_Controller.')
hwidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidStatus.setStatus('current')
if mibBuilder.loadTexts: hwidStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwidStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwidStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwidSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwidSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwidSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidSystemName.setStatus('current')
if mibBuilder.loadTexts: hwidSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwidTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 10, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwidTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwidTimeOfLastReset.setDescription('Date and time the controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32IRQResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11), )
if mibBuilder.loadTexts: win32IRQResourceTable.setStatus('current')
if mibBuilder.loadTexts: win32IRQResourceTable.setDescription('The Win32_IRQResource WMI class represents an interrupt request line (IRQ) number on a Windows computer system. An interrupt request is a signal sent to the CPU by a device or program for time critical events. IRQ can be hardware or software-based.')
win32IRQResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1), ).setIndexNames((0, "INFORMANT-HW", "hwirqIndex"))
if mibBuilder.loadTexts: win32IRQResourceEntry.setStatus('current')
if mibBuilder.loadTexts: win32IRQResourceEntry.setDescription('None')
hwirqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqIndex.setStatus('current')
if mibBuilder.loadTexts: hwirqIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwirqAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("available", 2), ("inUseNotAvailable", 3), ("inUseAndAvailableShareable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqAvailability.setStatus('current')
if mibBuilder.loadTexts: hwirqAvailability.setDescription('Availability of the IRQ. This property is inherited from CIM_IRQ.')
hwirqCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqCaption.setStatus('current')
if mibBuilder.loadTexts: hwirqCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwirqCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwirqCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_IRQ.')
hwirqCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwirqCSCreationClassName.setDescription('Name of the scoping computer system creation class. This property is inherited from CIM_IRQ.')
hwirqCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqCSName.setStatus('current')
if mibBuilder.loadTexts: hwirqCSName.setDescription('Name of the scoping computer system. This property is inherited from CIM_IRQ.')
hwirqDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqDescription.setStatus('current')
if mibBuilder.loadTexts: hwirqDescription.setDescription('Textual description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwirqHardware = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqHardware.setStatus('current')
if mibBuilder.loadTexts: hwirqHardware.setDescription('If TRUE, the interrupt is hardware or software based. A hardware IRQ is a physical wire from the peripheral to the programmable interrupt controller (PIC) chip through which the CPU can be notified of time-critical events. Some IRQ lines are reserved for standard devices such as the keyboard, floppy disk drives, and the system clock. A software interrupt allows applications to get the attention of the processor.')
hwirqInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwirqInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwirqIRQNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqIRQNumber.setStatus('current')
if mibBuilder.loadTexts: hwirqIRQNumber.setDescription("Part of the object's key value. This property is inherited from CIM_IRQ.")
hwirqName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqName.setStatus('current')
if mibBuilder.loadTexts: hwirqName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwirqShareable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqShareable.setStatus('current')
if mibBuilder.loadTexts: hwirqShareable.setDescription('If TRUE, the IRQ can be shared. This property is inherited from CIM_IRQ.')
hwirqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqStatus.setStatus('current')
if mibBuilder.loadTexts: hwirqStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwirqTriggerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("activeLow", 3), ("activeHigh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqTriggerLevel.setStatus('current')
if mibBuilder.loadTexts: hwirqTriggerLevel.setDescription('IRQ trigger level indicating whether the interrupt is triggered by the hardware signal going high (4) or low (3). This property is inherited from CIM_IRQ.')
hwirqTriggerType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("level", 3), ("edge", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqTriggerType.setStatus('current')
if mibBuilder.loadTexts: hwirqTriggerType.setDescription('IRQ trigger type indicating whether edge- (4) or level-triggered (3) interrupts occur. This property is inherited from CIM_IRQ.')
hwirqVector = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 11, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwirqVector.setStatus('current')
if mibBuilder.loadTexts: hwirqVector.setDescription('Vector of the Windows IRQ resource. A vector contains the memory address to the function that will execute once the interrupt request is acknowledged by the CPU.')
win32MemoryArrayTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12), )
if mibBuilder.loadTexts: win32MemoryArrayTable.setStatus('current')
if mibBuilder.loadTexts: win32MemoryArrayTable.setDescription('The Win32_MemoryArray WMI class represents the properties of the computer system memory array and mapped addresses.')
win32MemoryArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1), ).setIndexNames((0, "INFORMANT-HW", "hwmaIndex"))
if mibBuilder.loadTexts: win32MemoryArrayEntry.setStatus('current')
if mibBuilder.loadTexts: win32MemoryArrayEntry.setDescription('None')
hwmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaIndex.setStatus('current')
if mibBuilder.loadTexts: hwmaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwmaAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writable", 2), ("readWriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaAccess.setStatus('current')
if mibBuilder.loadTexts: hwmaAccess.setDescription('Type of media access available. This property is inherited from CIM_StorageExtent.')
hwmaAdditionalErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaAdditionalErrorData.setStatus('current')
if mibBuilder.loadTexts: hwmaAdditionalErrorData.setDescription('Array of additional error information. An example is Error Checking and Correcting (ECC) Syndrome, or the return of the check bits if a cyclical redundancy check (CRC) based ErrorMethodology value is used. In the latter case, if a single bit error is recognized and the CRC algorithm is known, it is possible to determine the exact bit that failed. This type of data (ECC Syndrome, Check Bit, Parity Bit data, or other vendor-supplied information) is included in this field. This property is used only when the ErrorInfo property is not equal to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaAvailability.setStatus('current')
if mibBuilder.loadTexts: hwmaAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwmaBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwmaBlockSize.setDescription('Size in bytes of the blocks that form this storage extent. If unknown or if a block concept is not valid (for example, for aggregate extents, memory or logical disks), enter a 1. This property is inherited from CIM_StorageExtent.')
hwmaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaCaption.setStatus('current')
if mibBuilder.loadTexts: hwmaCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwmaConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwmaConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwmaConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwmaConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwmaCorrectableError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaCorrectableError.setStatus('current')
if mibBuilder.loadTexts: hwmaCorrectableError.setDescription('If TRUE, the most recent error was correctable. This property is not used if ErrorInfo is set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 10), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwmaCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwmaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaDescription.setStatus('current')
if mibBuilder.loadTexts: hwmaDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwmaDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwmaDeviceID.setDescription("Unique identifier of the memory array. This property is inherited from CIM_LogicalDevice. Example: 'Memory Array 1'")
hwmaEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwmaEndingAddress.setDescription('Ending address referenced by an application or operating system. This memory address is mapped by a memory controller for this memory object. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorAccess.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorAccess.setDescription('Type of memory access operation that caused the last error. This property is valid only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorAddress.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorAddress.setDescription('Address of the last memory error. This property is used only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwmaErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorData.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorData.setDescription('Array of data captured from the last memory access with an error. The data occupies the first n octets of the array necessary to hold the number of bits specified by the ErrorTransferSize property. If ErrorTransferSize is 0 (zero), then this property is not used. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorDataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("leastSignificantByteFirst", 1), ("mostSignificantByteFirst", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorDataOrder.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorDataOrder.setDescription('Ordering for data stored in the ErrorData property. This property is used only when ErrorTransferSize is 0 (zero). This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwmaErrorGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("deviceLevel", 3), ("memoryPartitionLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorGranularity.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorGranularity.setDescription('Level where the error can be resolved.')
hwmaErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("crcError", 11), ("correctedSinglebitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorInfo.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorInfo.setDescription('Type of error that occurred most recently. The values 12-14, which indicate whether an error is correctable, are not used with this property but this information is found in the CorrectableError property. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6), ("crc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorMethodology.setDescription('Types of error checking used by the memory hardware. This property is inherited from CIM_StorageExtent.')
hwmaErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorResolution.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorResolution.setDescription('Amount of data actually determined to cause the error. This property is unused when the ErrorInfo property is set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorTime.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorTime.setDescription('Time that the last memory error occurred. This property is valid only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaErrorTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaErrorTransferSize.setStatus('current')
if mibBuilder.loadTexts: hwmaErrorTransferSize.setDescription('Size of the data (containing the last error) being transferred. This property is set to 0 (zero) if there is no error. This property is inherited from Win32_SMBIOSMemory.')
hwmaInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwmaInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwmaLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwmaLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwmaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaName.setStatus('current')
if mibBuilder.loadTexts: hwmaName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwmaNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: hwmaNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent. This property is inherited from CIM_StorageExtent.')
hwmaOtherErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaOtherErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwmaOtherErrorDescription.setDescription('More information when the ErrorInfo property is set to 1. This property is inherited from Win32_SMBIOSMemory.')
hwmaPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwmaPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwmaPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwmaPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwmaPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwmaPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwmaPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaPurpose.setStatus('current')
if mibBuilder.loadTexts: hwmaPurpose.setDescription('Free-form string describing the media and/or its use. This property is inherited from CIM_StorageExtent.')
hwmaStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwmaStartingAddress.setDescription('Beginning address referenced by an application or the operating system. This memory address is mapped by a memory controller for this memory object. This property is inherited from Win32_SMBIOSMemory.')
hwmaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaStatus.setStatus('current')
if mibBuilder.loadTexts: hwmaStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwmaStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwmaStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwmaSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwmaSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwmaSystemLevelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaSystemLevelAddress.setStatus('current')
if mibBuilder.loadTexts: hwmaSystemLevelAddress.setDescription('If TRUE, the address information in the ErrorAddress property is a system-level address. If FALSE, it is a physical address. This property is used only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmaSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 12, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmaSystemName.setStatus('current')
if mibBuilder.loadTexts: hwmaSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32MemoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13), )
if mibBuilder.loadTexts: win32MemoryDeviceTable.setStatus('current')
if mibBuilder.loadTexts: win32MemoryDeviceTable.setDescription('The Win32_MemoryDevice WMI class represents the properties of a computer system memory device and its associated mapped addresses.')
win32MemoryDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1), ).setIndexNames((0, "INFORMANT-HW", "hwmmIndex"))
if mibBuilder.loadTexts: win32MemoryDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: win32MemoryDeviceEntry.setDescription('None')
hwmmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmIndex.setStatus('current')
if mibBuilder.loadTexts: hwmmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwmmAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writable", 2), ("readWriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmAccess.setStatus('current')
if mibBuilder.loadTexts: hwmmAccess.setDescription('Media access available. This property is inherited from CIM_StorageExtent.')
hwmmAdditionalErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmAdditionalErrorData.setStatus('current')
if mibBuilder.loadTexts: hwmmAdditionalErrorData.setDescription('Array of additional error information. An example is Error Checking and Correcting (ECC) Syndrome, or the return of the check bits if a cyclical redundancy check (CRC) based error methodology is used. In the latter case, if a single bit error is recognized and the CRC algorithm is known, it is possible to determine the exact bit that failed. This type of data (ECC Syndrome, Check Bit, Parity Bit data, or other vendor-supplied information) is included in this field. This property is used only when the ErrorInfo property is not equal to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmAvailability.setStatus('current')
if mibBuilder.loadTexts: hwmmAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwmmBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwmmBlockSize.setDescription('Size in bytes of the blocks that form this storage extent. If unknown or if a block concept is not valid (for example, for aggregate extents, memory or logical disks), enter a 1. This property is inherited from CIM_StorageExtent.')
hwmmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmCaption.setStatus('current')
if mibBuilder.loadTexts: hwmmCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwmmConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwmmConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwmmConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwmmConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwmmCorrectableError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmCorrectableError.setStatus('current')
if mibBuilder.loadTexts: hwmmCorrectableError.setDescription('If TRUE, the most recent error was correctable. This property is not used if ErrorInfo is set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 10), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwmmCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwmmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmDescription.setStatus('current')
if mibBuilder.loadTexts: hwmmDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwmmDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwmmDeviceID.setDescription("Unique identifier of the memory device. This property is inherited from CIM_LogicalDevice. Example: 'Memory Device 1'")
hwmmEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwmmEndingAddress.setDescription('Ending address referenced by an application or operating system. This memory address is mapped by a memory controller for this memory object. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorAccess.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorAccess.setDescription('Type of memory access operation that caused the last error. This property is valid only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorAddress.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorAddress.setDescription('Address of the last memory error. This property is used only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwmmErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorData.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorData.setDescription('Array of data captured from the last memory access with an error. The data occupies the first n octets of the array necessary to hold the number of bits specified by the ErrorTransferSize property. If ErrorTransferSize is 0 (zero), then this property is not used. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorDataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("leastSignificantByteFirst", 1), ("mostSignificantByteFirst", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorDataOrder.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorDataOrder.setDescription('Ordering for data stored in the ErrorData property. This property is used only when ErrorTransferSize is 0 (zero). This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwmmErrorGranularity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("deviceLevel", 3), ("memoryPartitionLevel", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorGranularity.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorGranularity.setDescription('Level where the error can be resolved.')
hwmmErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("crcError", 11), ("correctedSinglebitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorInfo.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorInfo.setDescription('Type of error that occurred most recently. The values 12-14, indicating whether an error is correctable, are not used with this property but this information is found in the CorrectableError property. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("name", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6), ("crc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorMethodology.setDescription('Types of error checking used by the memory hardware. This property is inherited from CIM_StorageExtent.')
hwmmErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorResolution.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorResolution.setDescription('Amount of data actually determined to cause the error. This property is unused when the ErrorInfo property is set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorTime.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorTime.setDescription('Time that the last memory error occurred. This property is valid only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmErrorTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmErrorTransferSize.setStatus('current')
if mibBuilder.loadTexts: hwmmErrorTransferSize.setDescription('Size of the data (containing the last error) being transferred. This property is set to 0 (zero) if there is no error. This property is inherited from Win32_SMBIOSMemory.')
hwmmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwmmInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwmmLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwmmLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwmmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmName.setStatus('current')
if mibBuilder.loadTexts: hwmmName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwmmNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: hwmmNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent. This property is inherited from CIM_StorageExtent.')
hwmmOtherErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmOtherErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwmmOtherErrorDescription.setDescription('More information when the ErrorInfo property is set to 1. This property is inherited from Win32_SMBIOSMemory.')
hwmmPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwmmPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwmmPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwmmPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwmmPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwmmPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwmmPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmPurpose.setStatus('current')
if mibBuilder.loadTexts: hwmmPurpose.setDescription('Free-form string describing the media and/or its use. This property is inherited from CIM_StorageExtent.')
hwmmStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwmmStartingAddress.setDescription('Beginning address referenced by an application or the operating system. This memory address is mapped by a memory controller for this memory object. This property is inherited from Win32_SMBIOSMemory.')
hwmmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmStatus.setStatus('current')
if mibBuilder.loadTexts: hwmmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwmmStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwmmStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwmmSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwmmSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwmmSystemLevelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmSystemLevelAddress.setStatus('current')
if mibBuilder.loadTexts: hwmmSystemLevelAddress.setDescription('If TRUE, the address information in the ErrorAddress property is a system-level address. If FALSE, it is a physical address. This property is used only when ErrorInfo is not set to 3. This property is inherited from Win32_SMBIOSMemory.')
hwmmSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 13, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmmSystemName.setStatus('current')
if mibBuilder.loadTexts: hwmmSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32MotherboardDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14), )
if mibBuilder.loadTexts: win32MotherboardDeviceTable.setStatus('current')
if mibBuilder.loadTexts: win32MotherboardDeviceTable.setDescription('The Win32_MotherboardDevice WMI class represents a device that contains the central components of the Windows computer system.')
win32MotherboardDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1), ).setIndexNames((0, "INFORMANT-HW", "hwmbIndex"))
if mibBuilder.loadTexts: win32MotherboardDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: win32MotherboardDeviceEntry.setDescription('None')
hwmbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbIndex.setStatus('current')
if mibBuilder.loadTexts: hwmbIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwmbAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbAvailability.setStatus('current')
if mibBuilder.loadTexts: hwmbAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwmbCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbCaption.setStatus('current')
if mibBuilder.loadTexts: hwmbCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwmbConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwmbConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwmbConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwmbConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwmbCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwmbCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwmbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbDescription.setStatus('current')
if mibBuilder.loadTexts: hwmbDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwmbDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwmbDeviceID.setDescription('Unique identifier of this motherboard. This property is inherited from CIM_LogicalDevice.')
hwmbErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwmbErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwmbErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwmbErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwmbInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwmbInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwmbLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwmbLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwmbName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbName.setStatus('current')
if mibBuilder.loadTexts: hwmbName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwmbPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwmbPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwmbPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwmbPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwmbPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwmbPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwmbPrimaryBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbPrimaryBusType.setStatus('current')
if mibBuilder.loadTexts: hwmbPrimaryBusType.setDescription("Primary bus type of the motherboard. Example: 'PCI'")
hwmbRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: hwmbRevisionNumber.setDescription("Revision number of the motherboard. Example: '00'")
hwmbSecondaryBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbSecondaryBusType.setStatus('current')
if mibBuilder.loadTexts: hwmbSecondaryBusType.setDescription("Secondary bus type of the motherboard. Example: 'ISA'")
hwmbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbStatus.setStatus('current')
if mibBuilder.loadTexts: hwmbStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwmbStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwmbStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwmbSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwmbSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwmbSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 14, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwmbSystemName.setStatus('current')
if mibBuilder.loadTexts: hwmbSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32OnBoardDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15), )
if mibBuilder.loadTexts: win32OnBoardDeviceTable.setStatus('current')
if mibBuilder.loadTexts: win32OnBoardDeviceTable.setDescription('The Win32_OnBoardDevice WMI class represents common adapter devices built into the motherboard (system board).')
win32OnBoardDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1), ).setIndexNames((0, "INFORMANT-HW", "hwobIndex"))
if mibBuilder.loadTexts: win32OnBoardDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: win32OnBoardDeviceEntry.setDescription('None')
hwobIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobIndex.setStatus('current')
if mibBuilder.loadTexts: hwobIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwobCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobCaption.setStatus('current')
if mibBuilder.loadTexts: hwobCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwobCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwobCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_PhysicalElement.')
hwobDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobDescription.setStatus('current')
if mibBuilder.loadTexts: hwobDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwobDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("video", 3), ("scsiController", 4), ("ethernet", 5), ("tokenRing", 6), ("sound", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobDeviceType.setStatus('current')
if mibBuilder.loadTexts: hwobDeviceType.setDescription('Type of device being represented.')
hwobEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobEnabled.setStatus('current')
if mibBuilder.loadTexts: hwobEnabled.setDescription('If TRUE, the on-board device is available for use. ')
hwobHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobHotSwappable.setStatus('current')
if mibBuilder.loadTexts: hwobHotSwappable.setDescription('If TRUE, a physical package can be hot-swapped (if it is possible to replace the element with a physically different but equivalent one while the containing package has power applied to it). For example, a disk drive package inserted using SCA connectors is removable and can be hot-swapped. All packages that can be hot-swapped are inherently removable and replaceable. This property is inherited from CIM_PhysicalComponent.')
hwobInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwobInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwobManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwobManufacturer.setDescription('Name of the organization responsible for producing the physical element. This property is inherited from CIM_PhysicalElement.')
hwobModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobModel.setStatus('current')
if mibBuilder.loadTexts: hwobModel.setDescription('Name by which the physical element is generally known. This property is inherited from CIM_PhysicalElement.')
hwobName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobName.setStatus('current')
if mibBuilder.loadTexts: hwobName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwobOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwobOtherIdentifyingInfo.setDescription('Additional data, beyond asset tag information, that could be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. Note that if only bar code data is available and is unique/able to be used as an element key, this property would be NULL and the bar code data used as the class key, in the tag property. This property is inherited from CIM_PhysicalElement.')
hwobPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwobPartNumber.setDescription('Part number assigned by the organization responsible for producing or manufacturing the physical element. This property is inherited from CIM_PhysicalElement.')
hwobPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwobPoweredOn.setDescription('If TRUE, the physical element is powered on. This property is inherited from CIM_PhysicalElement.')
hwobRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobRemovable.setStatus('current')
if mibBuilder.loadTexts: hwobRemovable.setDescription("If TRUE, a physical package is removable (if it is designed to be taken in and out of the physical container in which it is normally found, without impairing the function of the overall packaging). A package can still be removable if power must be 'off' to perform the removal. If power can be 'on' and the package removed, then the element is removable and can be hot-swapped. For example, an extra battery in a laptop is removable, as is a disk drive package inserted using SCA connectors. However, the latter can be hot-swapped. A laptop's display is not removable, nor is a non-redundant power supply. Removing these components would affect the function of the overall packaging or is impossible due to the tight integration of the package. This property is inherited from CIM_PhysicalComponent.")
hwobReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobReplaceable.setStatus('current')
if mibBuilder.loadTexts: hwobReplaceable.setDescription('If TRUE, a physical package is replaceable (if it is possible to replace, FRU or upgrade, the element with a physically different one). For example, some computer systems allow the main processor chip to be upgraded to one of a higher clock rating. In this case, the processor is said to be replaceable. Another example is a power supply package mounted on sliding rails. All removable packages are inherently replaceable. This property is inherited from CIM_PhysicalComponent.')
hwobSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwobSerialNumber.setDescription('Manufacturer-allocated number used to identify the physical element. This property is inherited from CIM_PhysicalElement.')
hwobSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobSKU.setStatus('current')
if mibBuilder.loadTexts: hwobSKU.setDescription('Stock-keeping unit number for the physical element. This property is inherited from CIM_PhysicalElement.')
hwobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobStatus.setStatus('current')
if mibBuilder.loadTexts: hwobStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwobTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 20), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobTag.setStatus('current')
if mibBuilder.loadTexts: hwobTag.setDescription("Unique identifier of the on-board device connected to the system. This property is inherited from CIM_PhysicalElement. Example: 'On Board Device 1'")
hwobVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 15, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwobVersion.setStatus('current')
if mibBuilder.loadTexts: hwobVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
win32ParallelPortTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16), )
if mibBuilder.loadTexts: win32ParallelPortTable.setStatus('current')
if mibBuilder.loadTexts: win32ParallelPortTable.setDescription('The Win32_ParallelPort WMI class represents the properties of a parallel port on a Windows computer system.')
win32ParallelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1), ).setIndexNames((0, "INFORMANT-HW", "hwppIndex"))
if mibBuilder.loadTexts: win32ParallelPortEntry.setStatus('current')
if mibBuilder.loadTexts: win32ParallelPortEntry.setDescription('None')
hwppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppIndex.setStatus('current')
if mibBuilder.loadTexts: hwppIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwppAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppAvailability.setStatus('current')
if mibBuilder.loadTexts: hwppAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwppCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwppCapabilities.setDescription('Array of the capabilities of the parallel controller. This property is inherited from CIM_ParallelController. Value (dec/hex) Meaning 1 0x1 Unknown 2 0x2 Other 3 0x3 XT/AT Compatible 4 0x4 PS/2 Compatible 5 0x5 ECP 6 0x6 EPP 7 0x7 PC-98 8 0x8 PC-98-Hireso 9 0x9 PC-H98 ')
hwppCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwppCapabilityDescriptions.setDescription('Array of more detailed explanations for any of the parallel controller features indicated in the Capabilities array. Each entry of this array is related to the entry in the Capabilities array that is located at the same index. This property is inherited from CIM_ParallelController.')
hwppCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppCaption.setStatus('current')
if mibBuilder.loadTexts: hwppCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwppConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwppConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwppConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwppConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwppCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwppCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwppDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppDescription.setStatus('current')
if mibBuilder.loadTexts: hwppDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwppDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwppDeviceID.setDescription('Identifier of the parallel port. This property is inherited from CIM_LogicalDevice.')
hwppDMASupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppDMASupport.setStatus('current')
if mibBuilder.loadTexts: hwppDMASupport.setDescription('If TRUE, the parallel port supports DMA. This property is inherited from CIM_ParallelController.')
hwppErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwppErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is cleared. This property is inherited from CIM_LogicalDevice.')
hwppErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwppErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about corrective actions that might be taken. This property is inherited from CIM_LogicalDevice.')
hwppInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwppInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwppLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwppLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwppMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwppMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 (zero) should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppName.setStatus('current')
if mibBuilder.loadTexts: hwppName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwppOSAutoDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppOSAutoDiscovered.setStatus('current')
if mibBuilder.loadTexts: hwppOSAutoDiscovered.setDescription('If TRUE, the parallel port was automatically detected by the operating system. If FALSE, the port was detected by other means (such as being manually added through the Control Panel).')
hwppPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwppPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwppPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwppPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value (dec/hex) Meaning 0 0x0 Unknown 1 0x1 Not Supported 2 0x2 Disabled 3 0x3 Enabled 4 0x4 Power Saving Modes Entered Automatically 5 0x5 Power State Settable 6 0x6 Power Cycling Supported 7 0x7 Timed Power On Supported ')
hwppPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwppPowerManagementSupported.setDescription('If TRUE, the device can be power-managed, which means that it can be put into suspend mode, and so on. The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwppProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ataATAPI", 6), ("flexibleDiskette", 7), ("n1496", 8), ("scsiParallelInterface", 9), ("scsiFibreChannelProtocol", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol1394", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelProtocol", 17), ("escon", 18), ("diagnostic", 19), ("i2C", 20), ("power", 21), ("hippi", 22), ("multiBus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802310BASE5", 28), ("ieee802310BASE2", 29), ("ieee80231BASES", 30), ("ieee802310BROAD36", 31), ("ieee8023100BASEVG", 32), ("ieee8025TokenRing", 33), ("ansiX3T95FDDI", 34), ("mca", 35), ("esdi", 36), ("ide", 37), ("cmd", 38), ("st506", 39), ("dssi", 40), ("qic2", 41), ("enhancedATAIDE", 42), ("agp", 43), ("twowayInfrared", 44), ("fastInfrared", 45), ("serialInfrared", 46), ("irBus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwppProtocolSupported.setDescription('Protocol used by the controller to access controlled devices. This property is inherited from CIM_Controller.')
hwppStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppStatus.setStatus('current')
if mibBuilder.loadTexts: hwppStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwppStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwppStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwppSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwppSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwppSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppSystemName.setStatus('current')
if mibBuilder.loadTexts: hwppSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwppTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 16, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwppTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwppTimeOfLastReset.setDescription('Date and time the controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32PCMCIAControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17), )
if mibBuilder.loadTexts: win32PCMCIAControllerTable.setStatus('current')
if mibBuilder.loadTexts: win32PCMCIAControllerTable.setDescription('The Win32_PCMCIAController WMI class manages the capabilities of a Personal Computer Memory Card Interface Adapter (PCMCIA of PC card) controller device.')
win32PCMCIAControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpcmIndex"))
if mibBuilder.loadTexts: win32PCMCIAControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win32PCMCIAControllerEntry.setDescription('None')
hwpcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmIndex.setStatus('current')
if mibBuilder.loadTexts: hwpcmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpcmAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmAvailability.setStatus('current')
if mibBuilder.loadTexts: hwpcmAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwpcmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmCaption.setStatus('current')
if mibBuilder.loadTexts: hwpcmCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpcmConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpcmConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwpcmConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwpcmConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwpcmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpcmCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwpcmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmDescription.setStatus('current')
if mibBuilder.loadTexts: hwpcmDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpcmDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpcmDeviceID.setDescription('Unique identifier of this device with other peripherals using the Plug and Play BIOS. This property is derived from CIM_LogicalDevice.')
hwpcmErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwpcmErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwpcmErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwpcmErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwpcmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpcmInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpcmLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpcmLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwpcmManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpcmManufacturer.setDescription("Name of the PCMCIA controller manufacturer. This property is inherited from CIM_PCMCIAController. Example: 'Acme'")
hwpcmMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwpcmMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwpcmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmName.setStatus('current')
if mibBuilder.loadTexts: hwpcmName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpcmPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpcmPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwpcmPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwpcmPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwpcmPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwpcmPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwpcmProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("eisa", 3), ("isa", 4), ("pci", 5), ("ataATAPI", 6), ("flexibleDiskette", 7), ("n1496", 8), ("scsiParallelInterface", 9), ("scsiFibreChannelProtocol", 10), ("scsiSerialBusProtocol", 11), ("scsiSerialBusProtocol1394", 12), ("scsiSerialStorageArchitecture", 13), ("vesa", 14), ("pcmcia", 15), ("universalSerialBus", 16), ("parallelProtocol", 17), ("escon", 18), ("diagnostic", 19), ("i2C", 20), ("power", 21), ("hippi", 22), ("multiBus", 23), ("vme", 24), ("ipi", 25), ("ieee488", 26), ("rs232", 27), ("ieee802310BASE5", 28), ("ieee802310BASE2", 29), ("ieee80231BASE5", 30), ("ieee802310BROAD36", 31), ("ieee8023100BASEVG", 32), ("ieee8025TokenRing", 33), ("ansiX3T95FDDI", 34), ("mca", 35), ("esdi", 36), ("ide", 37), ("cmd", 38), ("st506", 39), ("dssi", 40), ("qic2", 41), ("enhancedATAIDE", 42), ("agp", 43), ("twoWayInfrared", 44), ("fastInfrared", 45), ("serialInfrared", 46), ("irBus", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwpcmProtocolSupported.setDescription("Protocol used by the controller to access 'controlled' devices. This property is inherited from CIM_Controller.")
hwpcmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmStatus.setStatus('current')
if mibBuilder.loadTexts: hwpcmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpcmStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwpcmStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwpcmSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpcmSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwpcmSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmSystemName.setStatus('current')
if mibBuilder.loadTexts: hwpcmSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwpcmTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 17, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcmTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwpcmTimeOfLastReset.setDescription('Date and time the controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32PhysicalMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18), )
if mibBuilder.loadTexts: win32PhysicalMemoryTable.setStatus('current')
if mibBuilder.loadTexts: win32PhysicalMemoryTable.setDescription('The Win32_PhysicalMemory WMI class represents a physical memory device located on a computer system and available to the operating system.')
win32PhysicalMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpmmIndex"))
if mibBuilder.loadTexts: win32PhysicalMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: win32PhysicalMemoryEntry.setDescription('None')
hwpmmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmIndex.setStatus('current')
if mibBuilder.loadTexts: hwpmmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpmmBankLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmBankLabel.setStatus('current')
if mibBuilder.loadTexts: hwpmmBankLabel.setDescription("Physically-labeled bank where the memory is located. This property is inherited from CIM_PhysicalMemory. Examples: 'Bank 0', 'Bank A'")
hwpmmCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmCapacity.setStatus('current')
if mibBuilder.loadTexts: hwpmmCapacity.setDescription('Total capacity of the physical memory in bytes. This property is inherited from CIM_PhysicalMemory.')
hwpmmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmCaption.setStatus('current')
if mibBuilder.loadTexts: hwpmmCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwpmmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpmmCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_PhysicalElement.')
hwpmmDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmDataWidth.setStatus('current')
if mibBuilder.loadTexts: hwpmmDataWidth.setDescription('Data width of the physical memory in bits. A data width of 0 (zero) and a total width of 8 indicates that the memory is used solely to provide error correction bits. This property is inherited from CIM_PhysicalMemory.')
hwpmmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmDescription.setStatus('current')
if mibBuilder.loadTexts: hwpmmDescription.setDescription('Description of an object. This property is inherited from CIM_ManagedSystemElement.')
hwpmmDeviceLocator = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmDeviceLocator.setStatus('current')
if mibBuilder.loadTexts: hwpmmDeviceLocator.setDescription("Label of the socket or circuit board that holds the memory. Example: 'SIMM 3'")
hwpmmFormFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("sip", 2), ("dip", 3), ("zip", 4), ("soj", 5), ("proprietary", 6), ("simm", 7), ("dimm", 8), ("tsop", 9), ("pga", 10), ("rimm", 11), ("sodimm", 12), ("srimm", 13), ("smd", 14), ("ssmp", 15), ("qfp", 16), ("tqfp", 17), ("soic", 18), ("lcc", 19), ("plcc", 20), ("bga", 21), ("fpbga", 22), ("lga", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmFormFactor.setStatus('current')
if mibBuilder.loadTexts: hwpmmFormFactor.setDescription('Implementation form factor for the chip. This property is inherited from CIM_Chip.')
hwpmmHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmHotSwappable.setStatus('current')
if mibBuilder.loadTexts: hwpmmHotSwappable.setDescription("If TRUE, a physical component can be hot-swapped if it is possible to replace the element with a physically different but equivalent one while the containing package has power applied to it, is 'on'. For example, a fan component may be designed to be hot-swapped. All components that can be hot-swapped are inherently removable and replaceable. This property is inherited from CIM_PhysicalComponent.")
hwpmmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpmmInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpmmInterleaveDataDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmInterleaveDataDepth.setStatus('current')
if mibBuilder.loadTexts: hwpmmInterleaveDataDepth.setDescription('Unsigned 16-bit integer maximum number of consecutive rows of data that are accessed in a single interleaved transfer from the memory device. If the value is 0 (zero), the memory is not interleaved.')
hwpmmInterleavePosition = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noninterleaved", 0), ("firstPosition", 1), ("secondPosition", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmInterleavePosition.setStatus('current')
if mibBuilder.loadTexts: hwpmmInterleavePosition.setDescription("Position of the physical memory in an interleave. For example, in a 2:1 interleave, a value of '1' indicates that the memory is in the 'even' position. This property is inherited from CIM_PhysicalMemory. ")
hwpmmManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpmmManufacturer.setDescription('Name of the organization responsible for producing the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmmMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("dram", 2), ("synchronousDRAM", 3), ("cacheDRAM", 4), ("edo", 5), ("edram", 6), ("vram", 7), ("sram", 8), ("ram", 9), ("rom", 10), ("flash", 11), ("eeprom", 12), ("feprom", 13), ("eprom", 14), ("cdram", 15), ("n3DRAM", 16), ("sdram", 17), ("sgram", 18), ("rdram", 19), ("ddr", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmMemoryType.setStatus('current')
if mibBuilder.loadTexts: hwpmmMemoryType.setDescription('Type of physical memory. This property is inherited from CIM_PhysicalMemory.')
hwpmmModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmModel.setStatus('current')
if mibBuilder.loadTexts: hwpmmModel.setDescription('Name for the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmName.setStatus('current')
if mibBuilder.loadTexts: hwpmmName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpmmOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmmOtherIdentifyingInfo.setDescription('Additional data, beyond asset tag information, that can be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. If only bar code data is available and unique or able to be used as an element key, this property is be NULL and the bar code data is used as the class key in the tag property. This property is inherited from CIM_PhysicalElement.')
hwpmmPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwpmmPartNumber.setDescription('Part number assigned by the organization responsible for producing or manufacturing the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmmPositionInRow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmPositionInRow.setStatus('current')
if mibBuilder.loadTexts: hwpmmPositionInRow.setDescription('Position of the physical memory in a row. For example, if it takes two 8-bit memory devices to form a 16-bit row, then a value of 2 means that this memory is the second device 0 (zero) is an invalid value for this property. This property is inherited from CIM_PhysicalMemory.')
hwpmmPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwpmmPoweredOn.setDescription('If TRUE, the physical element is powered on. This property is inherited from CIM_PhysicalElement.')
hwpmmRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmRemovable.setStatus('current')
if mibBuilder.loadTexts: hwpmmRemovable.setDescription("If TRUE, a physical component is removable (if it is designed to be taken in and out of the physical container in which it is normally found, without impairing the function of the overall packaging). A component can still be removable if power must be 'off' in order to perform the removal. If power can be 'on' and the component removed, then the element is removable and can be hot-swapped. For example, an upgradable processor chip is removable. This property is inherited from CIM_PhysicalComponent.")
hwpmmReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmReplaceable.setStatus('current')
if mibBuilder.loadTexts: hwpmmReplaceable.setDescription('If TRUE, a physical component is replaceable (if it is possible to replace, FRU or upgrade, the element with a physically different one). For example, some computer systems allow the main processor chip to be upgraded to one of a higher clock rating. In this case, the processor is said to be replaceable. All removable components are inherently replaceable. This property is inherited from CIM_PhysicalComponent.')
hwpmmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwpmmSerialNumber.setDescription('Manufacturer-allocated number to identify the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmmSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmSKU.setStatus('current')
if mibBuilder.loadTexts: hwpmmSKU.setDescription('Stock-keeping unit number for the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmmSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmSpeed.setStatus('current')
if mibBuilder.loadTexts: hwpmmSpeed.setDescription('Speed of the physical memory in nanoseconds. This property is inherited from CIM_PhysicalMemory.')
hwpmmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmStatus.setStatus('current')
if mibBuilder.loadTexts: hwpmmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpmmTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 28), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmTag.setStatus('current')
if mibBuilder.loadTexts: hwpmmTag.setDescription("Unique identifier for the physical memory device that is represented by an instance of Win32_PhysicalMemory. This property is inherited from CIM_PhysicalElement. Example: 'Physical Memory 1'")
hwpmmTotalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmTotalWidth.setStatus('current')
if mibBuilder.loadTexts: hwpmmTotalWidth.setDescription('Total width, in bits, of the physical memory, including check or error correction bits. If there are no error correction bits, the value in this property should match what is specified for the DataWidth property. This property is inherited from CIM_PhysicalMemory.')
hwpmmTypeDetail = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("reserved", 1), ("other", 2), ("unknown", 4), ("fastpaged", 8), ("staticColumn", 16), ("pseudostatic", 32), ("rambus", 64), ("synchronous", 128), ("cmos", 256), ("edo", 512), ("windowDRAM", 1024), ("cacheDRAM", 2048), ("nonvolatile", 4096)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmTypeDetail.setStatus('current')
if mibBuilder.loadTexts: hwpmmTypeDetail.setDescription('Type of physical memory represented.')
hwpmmVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 18, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmmVersion.setStatus('current')
if mibBuilder.loadTexts: hwpmmVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
win32PhysicalMemoryArrayTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19), )
if mibBuilder.loadTexts: win32PhysicalMemoryArrayTable.setStatus('current')
if mibBuilder.loadTexts: win32PhysicalMemoryArrayTable.setDescription('The Win32_PhysicalMemoryArray WMI class represents details about the computer system physical memory. This includes the number of memory devices, memory capacity available, and memory type for example, system or video memory.')
win32PhysicalMemoryArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpmaIndex"))
if mibBuilder.loadTexts: win32PhysicalMemoryArrayEntry.setStatus('current')
if mibBuilder.loadTexts: win32PhysicalMemoryArrayEntry.setDescription('None')
hwpmaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaIndex.setStatus('current')
if mibBuilder.loadTexts: hwpmaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpmaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaCaption.setStatus('current')
if mibBuilder.loadTexts: hwpmaCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwpmaCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpmaCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_PhysicalElement.')
hwpmaDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaDepth.setStatus('current')
if mibBuilder.loadTexts: hwpmaDepth.setDescription('Depth of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
hwpmaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaDescription.setStatus('current')
if mibBuilder.loadTexts: hwpmaDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpmaHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaHeight.setStatus('current')
if mibBuilder.loadTexts: hwpmaHeight.setDescription('Height of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
hwpmaHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaHotSwappable.setStatus('current')
if mibBuilder.loadTexts: hwpmaHotSwappable.setDescription("If TRUE, a physical package can be hot-swapped (if it is possible to replace the element with a physically different but equivalent one while the containing package has power applied to it, is 'on'). For example, a disk drive package inserted using SCA connectors is removable and can be hot-swapped. All packages that can be hot-swapped are inherently removable and replaceable. This property is inherited from CIM_PhysicalPackage.")
hwpmaInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpmaInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpmaLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("systemBoardOrMotherboard", 3), ("isaAddonCard", 4), ("eisaAddonCard", 5), ("pciAddonCard", 6), ("mcaAddonCard", 7), ("pcmciaAddonCard", 8), ("proprietaryAddonCard", 9), ("nuBus", 10), ("pc98C20AddonCard", 11), ("pc98C24AddonCard", 12), ("pc98EAddonCard", 13), ("pc98LocalBusAddonCard", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaLocation.setStatus('current')
if mibBuilder.loadTexts: hwpmaLocation.setDescription('Physical location of the memory array.')
hwpmaManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpmaManufacturer.setDescription('Name of the organization responsible for producing the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmaMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 11), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaMaxCapacity.setStatus('current')
if mibBuilder.loadTexts: hwpmaMaxCapacity.setDescription('Maximum memory size (in bytes) installable for this particular memory array. If the size is unknown, the property is given a value of 0 (zero).')
hwpmaMemoryDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaMemoryDevices.setStatus('current')
if mibBuilder.loadTexts: hwpmaMemoryDevices.setDescription('Number of physical slots or sockets available in this memory array.')
hwpmaMemoryErrorCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singlebitECC", 5), ("multibitECC", 6), ("crc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaMemoryErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: hwpmaMemoryErrorCorrection.setDescription('Type of error correction used by the memory array.')
hwpmaModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaModel.setStatus('current')
if mibBuilder.loadTexts: hwpmaModel.setDescription('Name by which the physical element is generally known. This property is inherited from CIM_PhysicalElement.')
hwpmaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaName.setStatus('current')
if mibBuilder.loadTexts: hwpmaName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpmaOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmaOtherIdentifyingInfo.setDescription('Additional data, beyond asset tag information, that could be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. Note that if only bar code data is available and is unique/able to be used as an element key, this property would be NULL and the bar code data used as the class key, in the tag property. This property is inherited from CIM_PhysicalElement.')
hwpmaPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwpmaPartNumber.setDescription('Part number assigned by the organization responsible for producing or manufacturing the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmaPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwpmaPoweredOn.setDescription('If TRUE, the physical element is powered on. This property is inherited from CIM_PhysicalElement.')
hwpmaRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaRemovable.setStatus('current')
if mibBuilder.loadTexts: hwpmaRemovable.setDescription("If TRUE, a physical package is removable (if it is designed to be taken in and out of the physical container in which it is normally found, without impairing the function of the overall packaging). A package can still be removable if power must be 'off' in order to perform the removal. If power can be 'on' and the package removed, then the element is removable and can be hot-swapped. For example, an extra battery in a laptop is removable, as is a disk drive package inserted using SCA connectors. However, the latter can be hot-swapped. A laptop's display is not removable, nor is a non-redundant power supply. Removing these components would affect the function of the overall packaging or is impossible due to the tight integration of the package. This property is inherited from CIM_PhysicalPackage.")
hwpmaReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaReplaceable.setStatus('current')
if mibBuilder.loadTexts: hwpmaReplaceable.setDescription('If TRUE, a physical package is replaceable (if it is possible to replace, FRU or upgrade, the element with a physically different one). For example, some computer systems allow the main processor chip to be upgraded to one of a higher clock rating. In this case, the processor is said to be replaceable. Another example is a power supply package mounted on sliding rails. All removable packages are inherently replaceable. This property is inherited from CIM_PhysicalPackage.')
hwpmaSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwpmaSerialNumber.setDescription('Manufacturer-allocated number used to identify the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmaSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaSKU.setStatus('current')
if mibBuilder.loadTexts: hwpmaSKU.setDescription('Stockkeeping unit number for the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaStatus.setStatus('current')
if mibBuilder.loadTexts: hwpmaStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement")
hwpmaTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 24), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaTag.setStatus('current')
if mibBuilder.loadTexts: hwpmaTag.setDescription("Unique identifier of the physical memory array. This property is inherited from CIM_PhysicalElement. Example: 'Physical Memory Array 1'")
hwpmaUse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("systemMemory", 3), ("videoMemory", 4), ("flashMemory", 5), ("nonvolatileRAM", 6), ("cacheMemory", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaUse.setStatus('current')
if mibBuilder.loadTexts: hwpmaUse.setDescription('How memory is used in the computer system.')
hwpmaVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaVersion.setStatus('current')
if mibBuilder.loadTexts: hwpmaVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
hwpmaWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaWeight.setStatus('current')
if mibBuilder.loadTexts: hwpmaWeight.setDescription('Weight of the physical package in pounds. This property is inherited from CIM_PhysicalPackage.')
hwpmaWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 19, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmaWidth.setStatus('current')
if mibBuilder.loadTexts: hwpmaWidth.setDescription('Width of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
win32PnPEntityTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20), )
if mibBuilder.loadTexts: win32PnPEntityTable.setStatus('current')
if mibBuilder.loadTexts: win32PnPEntityTable.setDescription('The Win32_PnPEntity WMI class represents the properties of a Plug and Play device. Plug and Play entities are shown as entries in the Device Manager located in Control Panel.')
win32PnPEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpnpIndex"))
if mibBuilder.loadTexts: win32PnPEntityEntry.setStatus('current')
if mibBuilder.loadTexts: win32PnPEntityEntry.setDescription('None')
hwpnpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpIndex.setStatus('current')
if mibBuilder.loadTexts: hwpnpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpnpAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpAvailability.setStatus('current')
if mibBuilder.loadTexts: hwpnpAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwpnpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpCaption.setStatus('current')
if mibBuilder.loadTexts: hwpnpCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpnpClassGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpClassGuid.setStatus('current')
if mibBuilder.loadTexts: hwpnpClassGuid.setDescription('Globally unique identifier (GUID) of this Plug and Play device.')
hwpnpConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpnpConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwpnpConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwpnpConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwpnpCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpnpCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwpnpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpDescription.setStatus('current')
if mibBuilder.loadTexts: hwpnpDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpnpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpnpDeviceID.setDescription('Identifier of the Plug and Play device. This property is inherited from CIM_LogicalDevice.')
hwpnpErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwpnpErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwpnpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwpnpErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwpnpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpnpInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpnpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpnpLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwpnpManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpnpManufacturer.setDescription("Name of the manufacturer of the Plug and Play device. Example: 'Acme'")
hwpnpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpName.setStatus('current')
if mibBuilder.loadTexts: hwpnpName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpnpPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpnpPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwpnpPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwpnpPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwpnpPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwpnpPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwpnpService = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpService.setStatus('current')
if mibBuilder.loadTexts: hwpnpService.setDescription("Name of the service that supports this Plug and Play device. For more information, see Win32_SystemDriverPnPEntity. Example: 'atapi'")
hwpnpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpStatus.setStatus('current')
if mibBuilder.loadTexts: hwpnpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpnpStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwpnpStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwpnpSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpnpSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwpnpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 20, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpnpSystemName.setStatus('current')
if mibBuilder.loadTexts: hwpnpSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32PnPSignedDriverTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21), )
if mibBuilder.loadTexts: win32PnPSignedDriverTable.setStatus('current')
if mibBuilder.loadTexts: win32PnPSignedDriverTable.setDescription('The Win32_PnPSignedDriver WMI class provides digital signature information about drivers.')
win32PnPSignedDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpsdIndex"))
if mibBuilder.loadTexts: win32PnPSignedDriverEntry.setStatus('current')
if mibBuilder.loadTexts: win32PnPSignedDriverEntry.setDescription('None')
hwpsdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdIndex.setStatus('current')
if mibBuilder.loadTexts: hwpsdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpsdClassGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdClassGuid.setStatus('current')
if mibBuilder.loadTexts: hwpsdClassGuid.setDescription("GUID of the device class. Example: '{71A27CDD-11D0-BEC7-08002BE2092F}'")
hwpsdCompatID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdCompatID.setStatus('current')
if mibBuilder.loadTexts: hwpsdCompatID.setDescription("Compatibility identifier for the driver. Example: 'DETECTEDInternal\\ftdisk'")
hwpsdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDescription.setStatus('current')
if mibBuilder.loadTexts: hwpsdDescription.setDescription('Description of the driver.')
hwpsdDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDeviceClass.setStatus('current')
if mibBuilder.loadTexts: hwpsdDeviceClass.setDescription("Device class of the driver. Example: 'SYSTEM'")
hwpsdDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpsdDeviceID.setDescription("Device identifier of the device. Example: 'ROOT\\FTDISK\\0000'")
hwpsdDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDeviceName.setStatus('current')
if mibBuilder.loadTexts: hwpsdDeviceName.setDescription('Name of the device.')
hwpsdDevLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDevLoader.setStatus('current')
if mibBuilder.loadTexts: hwpsdDevLoader.setDescription('Device loader for the device.')
hwpsdDriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDriverDate.setStatus('current')
if mibBuilder.loadTexts: hwpsdDriverDate.setDescription("Build date of the driver (from the manufacturer). Example: '1-25-2001'")
hwpsdDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDriverName.setStatus('current')
if mibBuilder.loadTexts: hwpsdDriverName.setDescription('Name of the driver.')
hwpsdDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdDriverVersion.setStatus('current')
if mibBuilder.loadTexts: hwpsdDriverVersion.setDescription("Version of the driver. Example: '5.1.2427.1'")
hwpsdFriendlyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdFriendlyName.setStatus('current')
if mibBuilder.loadTexts: hwpsdFriendlyName.setDescription("Friendly name of the driver. Example: 'Communications Port (COM2)'")
hwpsdHardWareID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdHardWareID.setStatus('current')
if mibBuilder.loadTexts: hwpsdHardWareID.setDescription("Hardware identifier for the driver. Example: 'ROOT\\FTDISK'")
hwpsdInfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdInfName.setStatus('current')
if mibBuilder.loadTexts: hwpsdInfName.setDescription("Name of the .inf file which installed the device. Example: 'machine.inf'")
hwpsdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpsdInstallDate.setDescription('Date the driver was installed. Lack of value does not indicate that the driver is not installed. This property is inherited from CIM_ManagedSystemElement.')
hwpsdIsSigned = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdIsSigned.setStatus('current')
if mibBuilder.loadTexts: hwpsdIsSigned.setDescription('If TRUE, the driver is signed.')
hwpsdLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdLocation.setStatus('current')
if mibBuilder.loadTexts: hwpsdLocation.setDescription('Location of the driver.')
hwpsdManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpsdManufacturer.setDescription("Manufacturer of the driver. Example: 'Microsoft'")
hwpsdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdName.setStatus('current')
if mibBuilder.loadTexts: hwpsdName.setDescription('Name of the driver. This property is inherited from CIM_ManagedSystemElement.')
hwpsdPDO = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdPDO.setStatus('current')
if mibBuilder.loadTexts: hwpsdPDO.setDescription("Physical device object (PDO). PDOs represent individual devices on a bus. Other drivers for the device attach on top of the PDO. It is always at the bottom of the device stack. Example: '\\Device\\00000002'")
hwpsdProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdProviderName.setStatus('current')
if mibBuilder.loadTexts: hwpsdProviderName.setDescription("Provider of the driver. Example: 'Microsoft'")
hwpsdSigner = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdSigner.setStatus('current')
if mibBuilder.loadTexts: hwpsdSigner.setDescription("Signer of driver, if it is signed. Example: 'ntbuild'")
hwpsdStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdStarted.setStatus('current')
if mibBuilder.loadTexts: hwpsdStarted.setDescription('If TRUE, the driver is started. This property is inherited from CIM_Service.')
hwpsdStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdStartMode.setStatus('current')
if mibBuilder.loadTexts: hwpsdStartMode.setDescription('Start mode of the driver. This property is inherited from CIM_Service.')
hwpsdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdStatus.setStatus('current')
if mibBuilder.loadTexts: hwpsdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpsdSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpsdSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_Service.")
hwpsdSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 21, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpsdSystemName.setStatus('current')
if mibBuilder.loadTexts: hwpsdSystemName.setDescription('System name. This property is inherited from CIM_Service.')
win32PortConnectorTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22), )
if mibBuilder.loadTexts: win32PortConnectorTable.setStatus('current')
if mibBuilder.loadTexts: win32PortConnectorTable.setDescription('The Win32_PortConnector WMI class represents physical connection ports, such as DB-25 pin male, Centronics, or PS/2.')
win32PortConnectorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpcIndex"))
if mibBuilder.loadTexts: win32PortConnectorEntry.setStatus('current')
if mibBuilder.loadTexts: win32PortConnectorEntry.setDescription('None')
hwpcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcIndex.setStatus('current')
if mibBuilder.loadTexts: hwpcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcCaption.setStatus('current')
if mibBuilder.loadTexts: hwpcCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwpcConnectorPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcConnectorPinout.setStatus('current')
if mibBuilder.loadTexts: hwpcConnectorPinout.setDescription('Pin configuration and signal usage of a physical connector. This property is inherited from CIM_PhysicalConnector.')
hwpcConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcConnectorType.setStatus('current')
if mibBuilder.loadTexts: hwpcConnectorType.setDescription('Array of physical attributes of the connector used by this port. This property is inherited from CIM_PhysicalConnector. Values are the following: Value Meaning 0 Unknown 1 Other 2 Male 3 Female 4 Shielded 5 Unshielded 6 SCSI (A) High-Density (50 pins) 7 SCSI (A) Low-Density (50 pins) 8 SCSI (P) High-Density (68 pins) 9 SCSI SCA-I (80 pins) 10 SCSI SCA-II (80 pins) 11 SCSI Fibre Channel (DB-9, Copper) 12 SCSI Fibre Channel (Fibre) 13 SCSI Fibre Channel SCA-II (40 pins) 14 SCSI Fibre Channel SCA-II (20 pins) 15 SCSI Fibre Channel BNC 16 ATA 3-1/2 Inch (40 pins) 17 ATA 2-1/2 Inch (44 pins) 18 ATA-2 19 ATA-3 20 ATA/66 21 DB-9 22 DB-15 23 DB-25 24 DB-36 25 RS-232C 26 RS-422 27 RS-423 28 RS-485 29 RS-449 30 V.35 31 X.21 32 IEEE-488 33 AUI 34 UTP Category 3 35 UTP Category 4 36 UTP Category 5 37 BNC 38 RJ11 39 RJ45 40 Fiber MIC 41 Apple AUI 42 Apple GeoPort 43 PCI 44 ISA 45 EISA 46 VESA 47 PCMCIA 48 PCMCIA Type I 49 PCMCIA Type II 50 PCMCIA Type III 51 ZV Port 52 CardBus 53 USB 54 IEEE 1394 55 HIPPI 56 HSSDC (6 pins) 57 GBIC 58 DIN 59 Mini-DIN 60 Micro-DIN 61 PS/2 62 Infrared 63 HP-HIL 64 Access.bus 65 NuBus 66 Centronics 67 Mini-Centronics 68 Mini-Centronics Type-14 69 Mini-Centronics Type-20 70 Mini-Centronics Type-26 71 Bus Mouse 72 ADB 73 AGP 74 VME Bus 75 VME64 76 Proprietary 77 Proprietary Processor Card Slot 78 Proprietary Memory Card Slot 79 Proprietary I/O Riser Slot 80 PCI-66MHZ 81 AGP2X 82 AGP4X 83 PC-98 84 PC-98-Hireso 85 PC-H98 86 PC-98Note 87 PC-98Full 88 SSA SCSI 89 Circular 90 On Board IDE Connector 91 On Board Floppy Connector 92 9 Pin Dual Inline 93 25 Pin Dual Inline 94 50 Pin Dual Inline 95 68 Pin Dual Inline 96 On Board Sound Connector 97 Mini-jack 98 PCI-X 99 Sbus IEEE 1396-1993 32 bit 100 Sbus IEEE 1396-1993 64 bit 101 MCA 102 GIO 103 XIO 104 HIO 105 NGIO 106 PMC 107 MTRJ 108 VF-45 109 Future I/O 110 SC 111 SG 112 Electrical 113 Optical 114 Ribbon 115 GLM 116 1x9 117 Mini SG 118 LC 119 HSSC 120 VHDCI Shielded (68 pins) 121 InfiniBand ')
hwpcCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpcCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_PhysicalElement.')
hwpcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcDescription.setStatus('current')
if mibBuilder.loadTexts: hwpcDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpcExternalReferenceDesignator = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcExternalReferenceDesignator.setStatus('current')
if mibBuilder.loadTexts: hwpcExternalReferenceDesignator.setDescription("External reference designator of the port. External reference designators are identifiers that determine the type and use of the port. Example: 'COM1'")
hwpcInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpcInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpcInternalReferenceDesignator = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcInternalReferenceDesignator.setStatus('current')
if mibBuilder.loadTexts: hwpcInternalReferenceDesignator.setDescription("Internal reference designator of the port. Internal reference designators are specific to the manufacturer, and identify the circuit board location or use of the port. Example: 'J101'")
hwpcManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpcManufacturer.setDescription('Name of the organization responsible for producing the physical element. This property is inherited from CIM_PhysicalElement.')
hwpcModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcModel.setStatus('current')
if mibBuilder.loadTexts: hwpcModel.setDescription('Name for the physical element. This property is inherited from CIM_PhysicalElement.')
hwpcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcName.setStatus('current')
if mibBuilder.loadTexts: hwpcName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpcOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwpcOtherIdentifyingInfo.setDescription('Additional data, beyond asset tag information, that can be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. If only bar code data is available and unique or able to be used as an element key, this property is NULL and the bar code data is used as the class key in the tag property. This property is inherited from CIM_PhysicalElement.')
hwpcPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwpcPartNumber.setDescription('Part number assigned by the organization responsible for producing or manufacturing the physical element. This property is inherited from CIM_PhysicalElement.')
hwpcPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("parallelPortXTATCompatible", 1), ("parallelPortPS2", 2), ("parallelPortECP", 3), ("parallelPortEPP", 4), ("parallelPortECPEPP", 5), ("serialPortXTATCompatible", 6), ("serialPort16450Compatible", 7), ("serialPort16550Compatible", 8), ("serialPort16550ACompatible", 9), ("scsiPort", 10), ("midiPort", 11), ("joyStickPort", 12), ("keyboardPort", 13), ("mousePort", 14), ("ssaSCSI", 15), ("usb", 16), ("fireWire", 17), ("pcmciaTypeII", 18), ("pcmciaTypeII2", 19), ("cardbus", 20), ("accessBusPort", 21), ("scsiII", 22), ("scsiWide", 23), ("pc98", 24), ("pc98Hireso", 25), ("pcH98", 26), ("audioPort", 27), ("modemPort", 28), ("networkPort", 29), ("n8251Compatible", 30), ("n8251FIFOCompatible", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcPortType.setStatus('current')
if mibBuilder.loadTexts: hwpcPortType.setDescription('Function of the port.')
hwpcPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwpcPoweredOn.setDescription('If TRUE, the physical element is powered on. This property is inherited from CIM_PhysicalElement.')
hwpcSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwpcSerialNumber.setDescription('Manufacturer-allocated number used to identify a physical element. This property is inherited from CIM_PhysicalElement.')
hwpcSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcSKU.setStatus('current')
if mibBuilder.loadTexts: hwpcSKU.setDescription('Stock-keeping unit number for a physical element. This property is inherited from CIM_PhysicalElement.')
hwpcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcStatus.setStatus('current')
if mibBuilder.loadTexts: hwpcStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 20), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcTag.setStatus('current')
if mibBuilder.loadTexts: hwpcTag.setDescription("Unique identifier of a port connection on the computer system. This property is inherited from CIM_PhysicalElement. Example: 'Port Connector 1'")
hwpcVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 22, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpcVersion.setStatus('current')
if mibBuilder.loadTexts: hwpcVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
win32PortResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23), )
if mibBuilder.loadTexts: win32PortResourceTable.setStatus('current')
if mibBuilder.loadTexts: win32PortResourceTable.setDescription('The Win32_PortResource WMI class represents an I/O port on a Windows computer system.')
win32PortResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpreIndex"))
if mibBuilder.loadTexts: win32PortResourceEntry.setStatus('current')
if mibBuilder.loadTexts: win32PortResourceEntry.setDescription('None')
hwpreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreIndex.setStatus('current')
if mibBuilder.loadTexts: hwpreIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpreAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreAlias.setStatus('current')
if mibBuilder.loadTexts: hwpreAlias.setDescription('If TRUE, this instance represents one of the ranges with an alias. If FALSE, the instance represents a base port address. A base port address is a predetermined port address dedicated to a specific service or device. A port alias address is one that a device responds to as if it were the actual address of an I/O port.')
hwpreCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreCaption.setStatus('current')
if mibBuilder.loadTexts: hwpreCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpreCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpreCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_MemoryMappedIO.')
hwpreCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpreCSCreationClassName.setDescription('Creation class name of the scoping computer system. This property is inherited from CIM_MemoryMappedIO.')
hwpreCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreCSName.setStatus('current')
if mibBuilder.loadTexts: hwpreCSName.setDescription('Name of the scoping computer system. This property is inherited from CIM_MemoryMappedIO.')
hwpreDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreDescription.setStatus('current')
if mibBuilder.loadTexts: hwpreDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpreEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwpreEndingAddress.setDescription('Ending address of memory mapped I/O. This property is inherited from CIM_MemoryMappedIO.')
hwpreInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpreInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpreName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreName.setStatus('current')
if mibBuilder.loadTexts: hwpreName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpreStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwpreStartingAddress.setDescription('Starting address of memory mapped I/O. The hardware resource identifier property should be set to this value to construct the mapped I/O resource key. This property is inherited from CIM_MemoryMappedIO.')
hwpreStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 23, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpreStatus.setStatus('current')
if mibBuilder.loadTexts: hwpreStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
win32ProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24), )
if mibBuilder.loadTexts: win32ProcessorTable.setStatus('current')
if mibBuilder.loadTexts: win32ProcessorTable.setDescription('The Win32_Processor WMI class represents a device that can interpret a sequence of machine instructions on a computer running a Windows operating system. On a multiprocessor machine, one instance of the Win32_Processor class exists for each processor.')
win32ProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1), ).setIndexNames((0, "INFORMANT-HW", "hwcpuIndex"))
if mibBuilder.loadTexts: win32ProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: win32ProcessorEntry.setDescription('None')
hwcpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuIndex.setStatus('current')
if mibBuilder.loadTexts: hwcpuIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwcpuAddressWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuAddressWidth.setStatus('current')
if mibBuilder.loadTexts: hwcpuAddressWidth.setDescription('Processor address width in bits. This property is inherited from CIM_Processor.')
hwcpuArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6))).clone(namedValues=NamedValues(("x86", 0), ("mips", 1), ("alpha", 2), ("powerPC", 3), ("ia64", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuArchitecture.setStatus('current')
if mibBuilder.loadTexts: hwcpuArchitecture.setDescription('Processor architecture that the platform uses.')
hwcpuAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningOrFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuAvailability.setStatus('current')
if mibBuilder.loadTexts: hwcpuAvailability.setDescription('Availability and status of a device. Power Save - Unknown indicates that a device is in a power save mode, but the status is unknown; Power Save - Low Power Mode indicates that a device is in a power save mode, but still functioning in a degraded performance state; Power Save - Standby indicates that a device is not functioning, but can be brought to full power quickly; and Power Save - Warning indicates that a device is in a warning and power save mode. This property is inherited from CIM_LogicalDevice.')
hwcpuCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuCaption.setStatus('current')
if mibBuilder.loadTexts: hwcpuCaption.setDescription('Qualifier: MaxLen(64) Short description of an object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwcpuConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcpuConfigManagerErrorCode.setDescription('Error code for the Windows Configuration Manager. This property is inherited from CIM_LogicalDevice.')
hwcpuConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwcpuConfigManagerUserConfig.setDescription('If TRUE, the device is using a configuration that the user defines. This property is inherited from CIM_LogicalDevice.')
hwcpuCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("cpuEnabled", 1), ("cpuDisabledByUserViaBIOSSetup", 2), ("cpuDisabledByBIOS", 3), ("cpuIsIdle", 4), ("reserved", 5), ("reserved2", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuCpuStatus.setStatus('current')
if mibBuilder.loadTexts: hwcpuCpuStatus.setDescription('Current status of the processor. Status changes indicate processor usage, not the physical condition of the processor.')
hwcpuCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcpuCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used to create an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwcpuCurrentClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 10), Gauge32()).setUnits('MegaHertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuCurrentClockSpeed.setStatus('current')
if mibBuilder.loadTexts: hwcpuCurrentClockSpeed.setDescription('Current speed of the processor in MHz. This property is inherited from CIM_Processor.')
hwcpuCurrentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 11), Integer32()).setUnits('tenth-Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuCurrentVoltage.setStatus('current')
if mibBuilder.loadTexts: hwcpuCurrentVoltage.setDescription('Voltage of the processor. Bits 0-6 of the field contain the current voltage of the processor times 10. This value is only set when SMBIOS designates a voltage value. For specific values, see VoltageCaps. Example: field value for a processor voltage of 1.8 volts is 92h = 80h + (1.8 x 10) = 80h + 18 = 80h + 12h')
hwcpuDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuDataWidth.setStatus('current')
if mibBuilder.loadTexts: hwcpuDataWidth.setDescription('Processor data width in bits. This property is inherited from CIM_Processor.')
hwcpuDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuDescription.setStatus('current')
if mibBuilder.loadTexts: hwcpuDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwcpuDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcpuDeviceID.setDescription('Unique identifier of a processor on the system. This property is inherited from CIM_LogicalDevice.')
hwcpuErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwcpuErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is clear. This property is inherited from CIM_LogicalDevice.')
hwcpuErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwcpuErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about corrective actions that can be taken. This property is inherited from CIM_LogicalDevice.')
hwcpuExtClock = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 17), Gauge32()).setUnits('MegaHertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuExtClock.setStatus('current')
if mibBuilder.loadTexts: hwcpuExtClock.setDescription('External clock frequency in MHz. If the frequency is unknown, this property is set to NULL.')
hwcpuFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 48, 49, 50, 51, 52, 53, 54, 55, 64, 65, 66, 67, 68, 69, 80, 81, 82, 83, 84, 85, 86, 87, 88, 96, 97, 98, 99, 100, 101, 112, 120, 121, 128, 130, 144, 145, 146, 147, 148, 149, 150, 160, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 190, 200, 201, 202, 250, 251, 260, 261, 280, 281, 300, 301, 302, 320, 350, 500))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("n8086", 3), ("n80286", 4), ("n80386", 5), ("n80486", 6), ("n8087", 7), ("n80287", 8), ("n80387", 9), ("n80487", 10), ("pentiumBrand", 11), ("pentiumPro", 12), ("pentiumII", 13), ("pentiumProcessorMMX", 14), ("celeron", 15), ("pentiumIIXeon", 16), ("pentiumIII", 17), ("m1Family", 18), ("m2Family", 19), ("k5Family", 24), ("k6Family", 25), ("k62", 26), ("k63", 27), ("amdAthlonProcessorFamily", 28), ("amdDuronProcessor", 29), ("amd2900Family", 30), ("k62plus", 31), ("powerPCFamily", 32), ("powerPC601", 33), ("powerPC603", 34), ("powerPC603plus", 35), ("powerPC604", 36), ("powerPC620", 37), ("powerPCX704", 38), ("powerPC750", 39), ("alphaFamily", 48), ("alpha21064", 49), ("alpha21066", 50), ("alpha21164", 51), ("alpha21164PC", 52), ("alpha21164a", 53), ("alpha21264", 54), ("alpha21364", 55), ("mipsFamily", 64), ("mipsR4000", 65), ("mipsR4200", 66), ("mipsR4400", 67), ("mipsR4600", 68), ("mipsR10000", 69), ("sparcFamily", 80), ("superSPARC", 81), ("microSPARCII", 82), ("microSPARCIIep", 83), ("ultraSPARC", 84), ("ultraSPARCII", 85), ("ultraSPARCIIi", 86), ("ultraSPARCIII", 87), ("ultraSPARCIIIi", 88), ("n68040", 96), ("n68xxxFamily", 97), ("n68000", 98), ("n68010", 99), ("n68020", 100), ("n68030", 101), ("hobbitFamily", 112), ("crusoeTM5000Family", 120), ("crusoeTM3000Family", 121), ("weitek", 128), ("itaniumProcessor", 130), ("paRISCFamily", 144), ("paRISC8500", 145), ("paRISC8000", 146), ("paRISC7300LC", 147), ("paRISC7200", 148), ("paRISC7100LC", 149), ("paRISC7100", 150), ("v30Family", 160), ("pentiumIIIXeon", 176), ("pentiumIIIProcessorSpeedStep", 177), ("pentium4", 178), ("intelXeon", 179), ("as400Family", 180), ("intelXeonProcessorMP", 181), ("amdAthlonXPFamily", 182), ("amdAthlonMPFamily", 183), ("intelItanium2", 184), ("amdOpteronFamily", 185), ("k7", 190), ("ibm390Family", 200), ("g4", 201), ("g5", 202), ("i860", 250), ("i960", 251), ("sh3", 260), ("sh4", 261), ("arm", 280), ("strongARM", 281), ("n6x86", 300), ("mediaGX", 301), ("mii", 302), ("winChip", 320), ("dsp", 350), ("videoProcessor", 500)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuFamily.setStatus('current')
if mibBuilder.loadTexts: hwcpuFamily.setDescription('Processor family type. This property is inherited from CIM_Processor. ')
hwcpuInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwcpuInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwcpuL2CacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 20), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuL2CacheSize.setStatus('current')
if mibBuilder.loadTexts: hwcpuL2CacheSize.setDescription('Size of the Level 2 processor cache. A Level 2 cache is an external memory area that has a faster access time than the main RAM memory.')
hwcpuL2CacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 21), Gauge32()).setUnits('MegaHertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuL2CacheSpeed.setStatus('current')
if mibBuilder.loadTexts: hwcpuL2CacheSpeed.setDescription('Clock speed of the Level 2 processor cache. A Level 2 cache is an external memory area that has a faster access time than the main RAM memory.')
hwcpuLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcpuLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwcpuLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuLevel.setStatus('current')
if mibBuilder.loadTexts: hwcpuLevel.setDescription('Definition of the processor type. The value depends on the architecture of the processor.')
hwcpuLoadPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 24), Integer32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuLoadPercentage.setStatus('current')
if mibBuilder.loadTexts: hwcpuLoadPercentage.setDescription('Load capacity of each processor, averaged to the last second. Processor loading refers to the total computing burden for each processor at one time. This property is inherited from CIM_Processor.')
hwcpuManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwcpuManufacturer.setDescription('Name of the processor manufacturer. Example: A. Datum Corporation')
hwcpuMaxClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 26), Gauge32()).setUnits('MegaHertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuMaxClockSpeed.setStatus('current')
if mibBuilder.loadTexts: hwcpuMaxClockSpeed.setDescription('Maximum speed of the processor in MHz. This property is inherited from CIM_Processor.')
hwcpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuName.setStatus('current')
if mibBuilder.loadTexts: hwcpuName.setDescription('Label by which the object is known. When this property is a subclass, it can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwcpuOtherFamilyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 28), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuOtherFamilyDescription.setStatus('current')
if mibBuilder.loadTexts: hwcpuOtherFamilyDescription.setDescription('Processor family type. Used when the Family property is set to 1, which means Other. This string should be set to NULL when the Family property is a value that is not 1. This property is inherited from CIM_Processor.')
hwcpuPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcpuPNPDeviceID.setDescription('Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: *PNP030b')
hwcpuPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwcpuPowerManagementCapabilities.setDescription('Specific power capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled, but the exact setting is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5. Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 and Time set to a specific date and time, or interval to power ON. This property is inherited from CIM_UnitaryComputerSystem. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwcpuPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwcpuPowerManagementSupported.setDescription('If TRUE, the power of the device can be managed, which means that it can be put into suspend mode, and so on. The property does not indicate that power management features are enabled, but it does indicate that the logical device power can be managed. This property is inherited from CIM_LogicalDevice.')
hwcpuProcessorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuProcessorId.setStatus('current')
if mibBuilder.loadTexts: hwcpuProcessorId.setDescription('Processor information that describes the processor features. For an x86 class CPU, the field format depends on the processor support of the CPUID instruction. If the instruction is supported, the property contains 2 (two) DWORD formatted values. The first is an offset of 08h-0Bh, which is the EAX value that a CPUID instruction returns with input EAX set to 1. The second is an offset of 0Ch-0Fh, which is the EDX value that the instruction returns. Only the first two bytes of the property are significant and contain the contents of the DX register at CPU reset all others are set to 0 (zero), and the contents are in DWORD format.')
hwcpuProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("centralProcessor", 3), ("mathProcessor", 4), ("dspProcessor", 5), ("videoProcessor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuProcessorType.setStatus('current')
if mibBuilder.loadTexts: hwcpuProcessorType.setDescription('Primary function of the processor.')
hwcpuRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuRevision.setStatus('current')
if mibBuilder.loadTexts: hwcpuRevision.setDescription('System revision level that depends on the architecture. The system revision level contains the same values as the Version property, but in a numerical format.')
hwcpuRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuRole.setStatus('current')
if mibBuilder.loadTexts: hwcpuRole.setDescription('Role of the processor. This property is inherited from CIM_Processor. Examples: Central Processor or Math Processor')
hwcpuSocketDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuSocketDesignation.setStatus('current')
if mibBuilder.loadTexts: hwcpuSocketDesignation.setDescription('Type of chip socket used on the circuit. Example: J202')
hwcpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuStatus.setStatus('current')
if mibBuilder.loadTexts: hwcpuStatus.setDescription('Current status of an object. Various operational and non-operational statuses can be defined. Operational statuses include: OK, Degraded, and Pred Fail, which is an element such as a SMART-enabled hard drive that may be functioning properly, but predicts a failure in the near future. Non-operational statuses include: Error, Starting, Stopping, and Service, which can apply during mirror resilvering of a disk, reloading a user permissions list, or other administrative work. Not all status work is online, but the managed element is not OK or in one of the other states. This property is inherited from CIM_ManagedSystemElement.')
hwcpuStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwcpuStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, use the value 5, which means Not Applicable. This property is inherited from CIM_LogicalDevice.')
hwcpuStepping = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 39), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuStepping.setStatus('current')
if mibBuilder.loadTexts: hwcpuStepping.setDescription('Revision level of the processor in the processor family. This property is inherited from CIM_Processor.')
hwcpuSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcpuSystemCreationClassName.setDescription('Value of the CreationClassName property for the scoping computer. This property is inherited from CIM_LogicalDevice.')
hwcpuSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuSystemName.setStatus('current')
if mibBuilder.loadTexts: hwcpuSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwcpuUniqueId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 42), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuUniqueId.setStatus('current')
if mibBuilder.loadTexts: hwcpuUniqueId.setDescription('Globally unique identifier for the processor. This identifier may only be unique within a processor family. This property is inherited from CIM_Processor.')
hwcpuUpgradeMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("daughterBoard", 3), ("zifSocket", 4), ("replacementPiggyBack", 5), ("none", 6), ("lifSocket", 7), ("slot1", 8), ("slot2", 9), ("n370PinSocket", 10), ("slotA", 11), ("slotM", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuUpgradeMethod.setStatus('current')
if mibBuilder.loadTexts: hwcpuUpgradeMethod.setDescription('Method by which this processor can be upgraded, if upgrades are supported. This property is an integer enumeration. This property is inherited from CIM_Processor.')
hwcpuVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 44), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuVersion.setStatus('current')
if mibBuilder.loadTexts: hwcpuVersion.setDescription('Processor revision number that depends on the architecture. This property is not used in Windows 95. Example: Model 2, Stepping 12')
hwcpuVoltageCaps = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("n5", 1), ("n33", 2), ("n29", 4)))).setUnits('Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuVoltageCaps.setStatus('current')
if mibBuilder.loadTexts: hwcpuVoltageCaps.setDescription('Voltage capabilities of the processor. Bits 0-3 of the field represent specific voltages that the processor socket can accept. All other bits should be set to 0 (zero). The socket is configurable if multiple bits are set. For a range of voltages, see CurrentVoltage. If the property is NULL, then the voltage capabilities are unknown.')
hwcpuL3CacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 46), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuL3CacheSize.setStatus('current')
if mibBuilder.loadTexts: hwcpuL3CacheSize.setDescription('Size of the Level 3 processor cache. A Level 3 cache is an external memory area that has a faster access time than the main RAM memory.')
hwcpuL3CacheSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 47), Gauge32()).setUnits('MegaHertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuL3CacheSpeed.setStatus('current')
if mibBuilder.loadTexts: hwcpuL3CacheSpeed.setDescription('Clockspeed of the Level 3 property cache. A Level 3 cache is an external memory area that has a faster access time than the main RAM memory.')
hwcpuNumberOfCores = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuNumberOfCores.setStatus('current')
if mibBuilder.loadTexts: hwcpuNumberOfCores.setDescription('Number of cores for the current instance of the processor. A core is a physical processor on the integrated circuit. For example, in a dual-core processor this property has a value of 2. To determine if hyperthreading is enabled for the processor, compare NumberOfLogicalProcessors and NumberOfCores. If hyperthreading is enabled in the BIOS for the processor, then NumberOfCores is less than NumberOfLogicalProcessors. For example, a dual processor system that contains two processors enabled for hyperthreading can run four threads or programs or simultaneously. In this case, NumberOfCores is 2 and NumberOfLogicalProcessors is 4.')
hwcpuNumberOfLogicalProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 24, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpuNumberOfLogicalProcessors.setStatus('current')
if mibBuilder.loadTexts: hwcpuNumberOfLogicalProcessors.setDescription('Number of logical processors for the current instance of the processor. For processors capable of hyperthreading, this value includes only the processors which have hyperthreading enabled. To determine if hyperthreading is enabled for the processor, compare NumberOfLogicalProcessors and NumberOfCores. If hyperthreading is enabled in the BIOS for the processor, then NumberOfCores is less than NumberOfLogicalProcessors. For example, a dual processor system that contains two processors enabled for hyperthreading can run four threads or programs or simultaneously. In this case, NumberOfCores is 2 and NumberOfLogicalProcessors is 4.')
win32SCSIControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25), )
if mibBuilder.loadTexts: win32SCSIControllerTable.setStatus('current')
if mibBuilder.loadTexts: win32SCSIControllerTable.setDescription('The Win32_SCSIController WMI class represents a SCSI controller on a Windows system.')
win32SCSIControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1), ).setIndexNames((0, "INFORMANT-HW", "hwscsiIndex"))
if mibBuilder.loadTexts: win32SCSIControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win32SCSIControllerEntry.setDescription('None')
hwscsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiIndex.setStatus('current')
if mibBuilder.loadTexts: hwscsiIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwscsiAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiAvailability.setStatus('current')
if mibBuilder.loadTexts: hwscsiAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwscsiCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiCaption.setStatus('current')
if mibBuilder.loadTexts: hwscsiCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwscsiConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwscsiConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. . This property is inherited from CIM_LogicalDevice.')
hwscsiConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwscsiConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwscsiControllerTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiControllerTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwscsiControllerTimeouts.setDescription('Number of timeouts that have occurred after the TimeOfLastReset value. This property is inherited from CIM_SCSIController.')
hwscsiCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwscsiCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwscsiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiDescription.setStatus('current')
if mibBuilder.loadTexts: hwscsiDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwscsiDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwscsiDeviceID.setDescription('Unique identifier of the SCSI controller with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwscsiDeviceMap = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiDeviceMap.setStatus('current')
if mibBuilder.loadTexts: hwscsiDeviceMap.setDescription('Order in which devices are listed with this SCSI controller.')
hwscsiDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiDriverName.setStatus('current')
if mibBuilder.loadTexts: hwscsiDriverName.setDescription("Driver file name of the SCSI controller. Example: 'Adaptec'")
hwscsiErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwscsiErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwscsiErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwscsiErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwscsiHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hwscsiHardwareVersion.setDescription("Hardware version number of the SCSI controller. Example: '1.25'")
hwscsiRegistryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiRegistryIndex.setStatus('current')
if mibBuilder.loadTexts: hwscsiRegistryIndex.setDescription('Index number of the SCSI controller in the system registry. Example: 0')
hwscsiInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwscsiInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwscsiLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwscsiLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwscsiManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwscsiManufacturer.setDescription("Name of the SCSI controller manufacturer. Example: 'Adaptec'")
hwscsiMaxDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiMaxDataWidth.setStatus('current')
if mibBuilder.loadTexts: hwscsiMaxDataWidth.setDescription('Maximum data width (in bits) supported by the SCSI controller. This property is inherited from CIM_SCSIController.')
hwscsiMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwscsiMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwscsiMaxTransferRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiMaxTransferRate.setStatus('current')
if mibBuilder.loadTexts: hwscsiMaxTransferRate.setDescription('Maximum transfer rate (in bits per second) supported by the SCSI controller. This property is inherited from CIM_SCSIController.')
hwscsiName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiName.setStatus('current')
if mibBuilder.loadTexts: hwscsiName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwscsiPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwscsiPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwscsiPowerManagementCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiPowerManagementCapability.setStatus('current')
if mibBuilder.loadTexts: hwscsiPowerManagementCapability.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwscsiPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwscsiPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwscsiProtectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("unprotected", 3), ("protected", 4), ("protectedThroughSCC", 5), ("protectedThroughSCC2", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiProtectionManagement.setStatus('current')
if mibBuilder.loadTexts: hwscsiProtectionManagement.setDescription('Support of the SCSI controller for redundancy or protection against device failures. This property is inherited from CIM_SCSIController.')
hwscsiProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("eisa", 2), ("isa", 3), ("pci", 4), ("ataATAPI", 5), ("flexibleDiskette", 6), ("n1496", 7), ("scsiParallelInterface", 8), ("scsiFibreChannelProtocol", 9), ("scsiSerialBusProtocol", 10), ("scsiSerialBusProtocol1394", 11), ("scsiSerialStorageArchitecture", 12), ("vesa", 13), ("pcmcia", 14), ("universalSerialBus", 15), ("parallelProtocol", 16), ("escon", 17), ("diagnostic", 18), ("i2C", 19), ("power", 20), ("hippi", 21), ("multiBus", 22), ("vme", 23), ("ipi", 24), ("ieee488", 25), ("rs232", 26), ("ieee802310BASE5", 27), ("ieee802310BASE2", 28), ("ieee80231BASE5", 29), ("ieee802310BROAD36", 30), ("ieee8023100BASEVG", 31), ("ieee8025TokenRing", 32), ("ansiX3T95FDDI", 33), ("mca", 34), ("esdi", 35), ("ide", 36), ("cmd", 37), ("st506", 38), ("dssi", 39), ("qic2", 40), ("enhancedATAIDE", 41), ("agp", 42), ("twowayInfrared", 43), ("fastInfrared", 44), ("serialInfrared", 45), ("irBus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwscsiProtocolSupported.setDescription("Protocol used by the controller to access 'controlled' devices. This property is inherited from CIM_Controller.")
hwscsiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiStatus.setStatus('current')
if mibBuilder.loadTexts: hwscsiStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwscsiStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwscsiStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwscsiSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwscsiSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwscsiSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiSystemName.setStatus('current')
if mibBuilder.loadTexts: hwscsiSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwscsiTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 25, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwscsiTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwscsiTimeOfLastReset.setDescription('Date and time this controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32SerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26), )
if mibBuilder.loadTexts: win32SerialPortTable.setStatus('current')
if mibBuilder.loadTexts: win32SerialPortTable.setDescription('The Win32_SerialPort WMI class represents a serial port on a Windows system.')
win32SerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1), ).setIndexNames((0, "INFORMANT-HW", "hwspIndex"))
if mibBuilder.loadTexts: win32SerialPortEntry.setStatus('current')
if mibBuilder.loadTexts: win32SerialPortEntry.setDescription('None')
hwspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspIndex.setStatus('current')
if mibBuilder.loadTexts: hwspIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwspAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspAvailability.setStatus('current')
if mibBuilder.loadTexts: hwspAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwspBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspBinary.setStatus('current')
if mibBuilder.loadTexts: hwspBinary.setDescription('If TRUE, the serial port is configured for binary data transfer. Because the Windows API does not support non-binary mode transfers, this property must be TRUE.')
hwspCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwspCapabilities.setDescription('Array of chip-level compatibility for the serial controller. This property describes the buffering and other capabilities of the serial controller that may be inherent in the chip hardware. The property is an enumerated integer. This property is inherited from CIM_SerialController. Value Meaning 1 Other 2 Unknown 3 XT/AT Compatible 4 16450 Compatible 5 16550 Compatible 6 16550A Compatible 160 8251 Compatible 161 8251FIFO Compatible ')
hwspCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwspCapabilityDescriptions.setDescription('Array of free-form strings providing more detailed explanations for any of the serial controller features indicated in the Capabilities array. Note, each entry of this array is related to the entry in the Capabilities array that is located at the same index. This property is inherited from CIM_SerialController.')
hwspCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspCaption.setStatus('current')
if mibBuilder.loadTexts: hwspCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwspConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwspConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. . This property is inherited from CIM_LogicalDevice.')
hwspConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwspConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwspCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwspCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwspDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspDescription.setStatus('current')
if mibBuilder.loadTexts: hwspDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwspDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwspDeviceID.setDescription('Unique identifier of the serial port with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwspErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwspErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwspErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwspErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwspInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwspInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwspLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwspLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwspMaxBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 16), Gauge32()).setUnits('Bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspMaxBaudRate.setStatus('current')
if mibBuilder.loadTexts: hwspMaxBaudRate.setDescription('Maximum baud rate (in bits per second) supported by the serial controller. This property is inherited from CIM_SerialController.')
hwspMaximumInputBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 17), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspMaximumInputBufferSize.setStatus('current')
if mibBuilder.loadTexts: hwspMaximumInputBufferSize.setDescription("Maximum size of the serial port driver's internal input buffer. A value of 0 indicates that no maximum value is imposed by the serial provider.")
hwspMaximumOutputBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 18), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspMaximumOutputBufferSize.setStatus('current')
if mibBuilder.loadTexts: hwspMaximumOutputBufferSize.setDescription("Maximum size of the serial port driver's internal output buffer. A value of 0 indicates that no maximum value is imposed by the serial provider.")
hwspMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwspMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwspName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspName.setStatus('current')
if mibBuilder.loadTexts: hwspName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwspOSAutoDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspOSAutoDiscovered.setStatus('current')
if mibBuilder.loadTexts: hwspOSAutoDiscovered.setDescription('If TRUE, the instances of this class were automatically discovered by the operating system. If, for example, hardware was added through the Control Panel, the operating system finds instances of this class by querying hardware from the instances of this class.')
hwspPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwspPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwspPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwspPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwspPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwspPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management.')
hwspProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("eisa", 2), ("isa", 3), ("pci", 4), ("ataATAPI", 5), ("flexibleDiskette", 6), ("n1496", 7), ("scsiParallelInterface", 8), ("scsiFibreChannelProtocol", 9), ("scsiSerialBusProtocol", 10), ("scsiSerialBusProtocol1394", 11), ("scsiSerialStorageArchitecture", 12), ("vesa", 13), ("pcmcia", 14), ("universalSerialBus", 15), ("parallelProtocol", 16), ("escon", 17), ("diagnostic", 18), ("i2C", 19), ("power", 20), ("hippi", 21), ("multiBus", 22), ("vme", 23), ("ipi", 24), ("ieee488", 25), ("rs232", 26), ("ieee802310BASE5", 27), ("ieee802310BASE2", 28), ("ieee80231BASE5", 29), ("ieee802310BROAD36", 30), ("ieee8023100BASEVG", 31), ("ieee8025TokenRing", 32), ("ansiX3T95FDDI", 33), ("mca", 34), ("esdi", 35), ("ide", 36), ("cmd", 37), ("st506", 38), ("dssi", 39), ("qic2", 40), ("enhancedATAIDE", 41), ("agp", 42), ("twowayInfrared", 43), ("fastInfrared", 44), ("serialInfrared", 45), ("irBus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwspProtocolSupported.setDescription("Protocol used by the controller to access 'controlled' devices. This property is inherited from CIM_Controller.")
hwspProviderType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspProviderType.setStatus('current')
if mibBuilder.loadTexts: hwspProviderType.setDescription("Communications provider type. Values are: 'FAX Device' 'LAT Protocol' 'Modem Device' 'Network Bridge' 'Parallel Port' 'RS232 Serial Port' 'RS422 Port' 'RS423 Port' 'RS449 Port' 'Scanner Device' 'TCP/IP TelNet' 'X.25' 'Unspecified'")
hwspSettableBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableBaudRate.setStatus('current')
if mibBuilder.loadTexts: hwspSettableBaudRate.setDescription('If TRUE, the baud rate can be changed for this serial port.')
hwspSettableDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableDataBits.setStatus('current')
if mibBuilder.loadTexts: hwspSettableDataBits.setDescription('If TRUE, data bits can be set for this serial port.')
hwspSettableFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableFlowControl.setStatus('current')
if mibBuilder.loadTexts: hwspSettableFlowControl.setDescription('If TRUE, flow control can be set for this serial port.')
hwspSettableParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableParity.setStatus('current')
if mibBuilder.loadTexts: hwspSettableParity.setDescription('If TRUE, parity can be set for this serial port.')
hwspSettableParityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableParityCheck.setStatus('current')
if mibBuilder.loadTexts: hwspSettableParityCheck.setDescription('If TRUE, parity checking can be set for this serial port (if parity checking is supported).')
hwspSettableRLSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableRLSD.setStatus('current')
if mibBuilder.loadTexts: hwspSettableRLSD.setDescription('If TRUE, Received Line Signal Detect (RLSD) can be set for this serial port (if RLSD is supported).')
hwspSettableStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSettableStopBits.setStatus('current')
if mibBuilder.loadTexts: hwspSettableStopBits.setDescription('If TRUE, stop bits can be set for this serial port.')
hwspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspStatus.setStatus('current')
if mibBuilder.loadTexts: hwspStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwspStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwspStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwspSupports16BitMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupports16BitMode.setStatus('current')
if mibBuilder.loadTexts: hwspSupports16BitMode.setDescription('If TRUE, 16-bit mode is supported on this serial port.')
hwspSupportsDTRDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 37), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsDTRDSR.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsDTRDSR.setDescription('If TRUE, Data Terminal Ready (DTR) and Data Set Ready (DSR) signals are supported on this serial port.')
hwspSupportsElapsedTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsElapsedTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsElapsedTimeouts.setDescription('If TRUE, elapsed timeouts are supported on this serial port. Elapsed timeouts track the total amount of time between data transmissions.')
hwspSupportsIntTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 39), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsIntTimeouts.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsIntTimeouts.setDescription('If TRUE, interval timeouts are supported. An interval timeout is the amount of time allowed to elapse between the arrival of each piece of data.')
hwspSupportsParityCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsParityCheck.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsParityCheck.setDescription('If TRUE, parity checking is supported on this serial port.')
hwspSupportsRLSD = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsRLSD.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsRLSD.setDescription('If TRUE, Received Line Signal Detect (RLSD) is supported on this serial port.')
hwspSupportsRTSCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsRTSCTS.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsRTSCTS.setDescription('If TRUE, Ready To Send (RTS) and Clear To Send (CTS) signals are supported on this serial port.')
hwspSupportsSpecialCharacters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 43), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsSpecialCharacters.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsSpecialCharacters.setDescription('If TRUE, serial port control characters are supported. These characters signal events rather than data. These characters are not displayable and are set by the driver. They include EofChar, ErrorChar, BreakChar, EventChar, XonChar, and XoffChar.')
hwspSupportsXOnXOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 44), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsXOnXOff.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsXOnXOff.setDescription('If TRUE, XON/XOFF flow control is supported on this serial port.')
hwspSupportsXOnXOffSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSupportsXOnXOffSet.setStatus('current')
if mibBuilder.loadTexts: hwspSupportsXOnXOffSet.setDescription('If TRUE, the communications provider supports configuration of the XON/XOFF flow control setting.')
hwspSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 46), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwspSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwspSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 47), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspSystemName.setStatus('current')
if mibBuilder.loadTexts: hwspSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwspTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 26, 1, 48), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwspTimeOfLastReset.setDescription('Date and time this controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32SerialPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27), )
if mibBuilder.loadTexts: win32SerialPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: win32SerialPortConfigTable.setDescription('The Win32_SerialPortConfiguration WMI class represents the settings for data transmission on a Windows serial port. This includes configurations for establishing a connection and error checking.')
win32SerialPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1), ).setIndexNames((0, "INFORMANT-HW", "hwspcIndex"))
if mibBuilder.loadTexts: win32SerialPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: win32SerialPortConfigEntry.setDescription('None')
hwspcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcIndex.setStatus('current')
if mibBuilder.loadTexts: hwspcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwspcAbortReadWriteOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcAbortReadWriteOnError.setStatus('current')
if mibBuilder.loadTexts: hwspcAbortReadWriteOnError.setDescription('If TRUE, read and write operations are terminated if an error occurs. If TRUE, the driver terminates all read and write operations with an error status if an error occurs. The driver will not accept any further communications operations until the application acknowledges the error.')
hwspcBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcBaudRate.setStatus('current')
if mibBuilder.loadTexts: hwspcBaudRate.setDescription('Baud (bits per second) rate at which the communications device operates. Example: 9600')
hwspcBinaryModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcBinaryModeEnabled.setStatus('current')
if mibBuilder.loadTexts: hwspcBinaryModeEnabled.setDescription('If TRUE, binary-mode data transfers are enabled for the serial port. Windows systems only allow binary transfers through serial ports, so this value is always TRUE.')
hwspcBitsPerByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcBitsPerByte.setStatus('current')
if mibBuilder.loadTexts: hwspcBitsPerByte.setDescription('Number of bits transmitted and received for each byte of data for the Windows serial port. The number may vary with control and error correction bits, such as parity bits. Example: 8')
hwspcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcCaption.setStatus('current')
if mibBuilder.loadTexts: hwspcCaption.setDescription('Short description (one-line string) of the CIM_Setting object. This property is inherited from CIM_Setting.')
hwspcContinueXMitOnXOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcContinueXMitOnXOff.setStatus('current')
if mibBuilder.loadTexts: hwspcContinueXMitOnXOff.setDescription('If TRUE, data transmissions continue when the input buffer has come within XOffXMitThreshold bytes of being full and the driver has transmitted the XOffChararcter value to stop receiving bytes. If FALSE, transmission does not continue until the input buffer is within XOnXMitThreshold bytes of being empty and the driver has transmitted the XOnCharacter value to resume reception.')
hwspcCTSOutflowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcCTSOutflowControl.setStatus('current')
if mibBuilder.loadTexts: hwspcCTSOutflowControl.setDescription('If TRUE, the Clear To Send (CTS) signal is checked before transmitting data. CTS signals that both devices on the serial connection are ready to transfer data. Data transmission is suspended until the CTS signal is given.')
hwspcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcDescription.setStatus('current')
if mibBuilder.loadTexts: hwspcDescription.setDescription('Description of the CIM_Setting object. This property is inherited from CIM_Setting.')
hwspcDiscardNULLBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcDiscardNULLBytes.setStatus('current')
if mibBuilder.loadTexts: hwspcDiscardNULLBytes.setDescription('If TRUE, NULL bytes (characters) are discarded when they are received.')
hwspcDSROutflowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcDSROutflowControl.setStatus('current')
if mibBuilder.loadTexts: hwspcDSROutflowControl.setDescription('If TRUE, data outflow control is enabled when there is a Data Set Ready (DSR) condition. DSR signals that the connection has been established by the devices on the serial connection. DSR data transmission is suspended until DSR signal is given.')
hwspcDSRSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcDSRSensitivity.setStatus('current')
if mibBuilder.loadTexts: hwspcDSRSensitivity.setDescription('If TRUE, the communications driver is sensitive to the state of the DSR signal. The driver ignores any bytes received, unless the DSR modem input line is high.')
hwspcDTRFlowControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("handshake", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcDTRFlowControlType.setStatus('current')
if mibBuilder.loadTexts: hwspcDTRFlowControlType.setDescription('Use of the data-terminal-ready (DTR) flow control after a connection has been established.')
hwspcEOFCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcEOFCharacter.setStatus('current')
if mibBuilder.loadTexts: hwspcEOFCharacter.setDescription('Value of the character used to signal the end of data. Example: ^Z')
hwspcErrorReplaceCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcErrorReplaceCharacter.setStatus('current')
if mibBuilder.loadTexts: hwspcErrorReplaceCharacter.setDescription('Value of the character used to replace bytes received with a parity error. Example: ^C')
hwspcErrorReplacementEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcErrorReplacementEnabled.setStatus('current')
if mibBuilder.loadTexts: hwspcErrorReplacementEnabled.setDescription('If TRUE, bytes received with parity errors are replaced with the ErrorReplaceCharacter value. Characters with parity errors are only replaced if this property is TRUE and the parity is enabled.')
hwspcEventCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcEventCharacter.setStatus('current')
if mibBuilder.loadTexts: hwspcEventCharacter.setDescription('Value of the control character that is used to signal an event, such as end of file. Example: ^e')
hwspcIsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcIsBusy.setStatus('current')
if mibBuilder.loadTexts: hwspcIsBusy.setDescription('If TRUE, the serial port is busy.')
hwspcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 19), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcName.setStatus('current')
if mibBuilder.loadTexts: hwspcName.setDescription("Name of the Windows serial port. Example: 'COM1'")
hwspcParity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcParity.setStatus('current')
if mibBuilder.loadTexts: hwspcParity.setDescription("Method of parity checking to be used. Parity is used as an error checking technique where an extra parity bit is included with every unit of data. The receiver can then verify the validity of the data by counting the bits that are set. Value Meaning 'None' Parity checking not used 'Odd' Sets the parity bit so that the count of bits set is an odd number 'Even' Sets the parity bit so that the count of bits set is an even number 'Mark' Leaves the parity bit set to 1 'Space' Leaves the parity bit set to 0")
hwspcParityCheckEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcParityCheckEnabled.setStatus('current')
if mibBuilder.loadTexts: hwspcParityCheckEnabled.setDescription('If TRUE, parity checking is enabled.')
hwspcRTSFlowControlType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcRTSFlowControlType.setStatus('current')
if mibBuilder.loadTexts: hwspcRTSFlowControlType.setDescription("Request-to-send (RTS) flow control. RTS is used to signal that data is available for transmission. Value Meaning 'Enable' RTS is left on for the data transfer session 'Disable' RTS is ignored after the first RTS signal is received 'Handshake' RTS is turned off if the transmission buffer is more than three-quarters full, and RTS is turned on when the buffer is less than one-half full 'Toggle' RTS is turned on if there is any data buffered for transmission")
hwspcSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 23), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcSettingID.setStatus('current')
if mibBuilder.loadTexts: hwspcSettingID.setDescription('Identifier by which the CIM_Setting instance is known. This property is inherited from CIM_Setting.')
hwspcStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcStopBits.setStatus('current')
if mibBuilder.loadTexts: hwspcStopBits.setDescription("Number of stop bits to be used. Stop bits separate each unit of data on an asynchronous serial connection. They are also sent continuously when no data is available for transmission. Values are: '1' '1.5' '2'")
hwspcXOffCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcXOffCharacter.setStatus('current')
if mibBuilder.loadTexts: hwspcXOffCharacter.setDescription('Value of the XOFF character for both transmission and reception. XOFF is a software control to stop the transmission of data (whereas RTS and CTS are hardware controls). XON resumes the transmission.')
hwspcXOffXMitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcXOffXMitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwspcXOffXMitThreshold.setDescription('Maximum number of bytes allowed in the input buffer before the XOFF character is sent.')
hwspcXOnCharacter = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcXOnCharacter.setStatus('current')
if mibBuilder.loadTexts: hwspcXOnCharacter.setDescription('Value of the XON character for both transmission and reception. XON is a software control to resume the transmission of data (whereas RTS and CTS are hardware controls). XOFF stops the transmission.')
hwspcXOnXMitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcXOnXMitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwspcXOnXMitThreshold.setDescription('Minimum number of bytes allowed in the input buffer before the XON character is sent. This property works in conjunction with XOffXMitThreshold to regulate the rate at which data is transferred.')
hwspcXOnXOffInFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcXOnXOffInFlowControl.setStatus('current')
if mibBuilder.loadTexts: hwspcXOnXOffInFlowControl.setDescription('If TRUE, XON/XOFF flow control is used during reception. If TRUE, the XOffCharacter value is sent when the input buffer comes within XOffXMitThreshold bytes of being full, and the XOnCharacter value is sent when the input buffer comes within XOnXMitThreshold bytes of being empty.')
hwspcXOnXOffOutFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 27, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwspcXOnXOffOutFlowControl.setStatus('current')
if mibBuilder.loadTexts: hwspcXOnXOffOutFlowControl.setDescription('The XOnXOffOutFlowControl specifies whether XON/XOFF flow control is used during transmission. If TRUE, transmission stops when the XOffCharacter value is received and starts again when the XOnCharacter value is received.')
win32SMBIOSMemoryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28), )
if mibBuilder.loadTexts: win32SMBIOSMemoryTable.setStatus('current')
if mibBuilder.loadTexts: win32SMBIOSMemoryTable.setDescription('The Win32_SMBIOSMemory abstract WMI class represents the properties of a computer system memory as seen through the System Management BIOS (SMBIOS) interface. The SMBIOS interface does not distinguish between non-volatile, volatile, and flash memories. The CIM_Memory class is the parent class of all types of memory.')
win32SMBIOSMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1), ).setIndexNames((0, "INFORMANT-HW", "hwsbmIndex"))
if mibBuilder.loadTexts: win32SMBIOSMemoryEntry.setStatus('current')
if mibBuilder.loadTexts: win32SMBIOSMemoryEntry.setDescription('None')
hwsbmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmIndex.setStatus('current')
if mibBuilder.loadTexts: hwsbmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwsbmAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("readable", 1), ("writable", 2), ("readWriteSupported", 3), ("writeOnce", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmAccess.setStatus('current')
if mibBuilder.loadTexts: hwsbmAccess.setDescription('Type of access. This property is inherited from CIM_StorageExtent.')
hwsbmAdditionalErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmAdditionalErrorData.setStatus('current')
if mibBuilder.loadTexts: hwsbmAdditionalErrorData.setDescription('Array of octets that hold additional error information. An example is Error Checking and Correcting (ECC) Syndrome, or the return of the check bits if a CRC-based error methodology is used. In the latter case, if a single bit error is recognized and the cyclical redundancy check (CRC) algorithm is known, it is possible to determine the exact bit that failed. This type of data (ECC Syndrome, Check Bit or Parity Bit data, or other vendor supplied information) is included in this field. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning.')
hwsbmAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmAvailability.setStatus('current')
if mibBuilder.loadTexts: hwsbmAvailability.setDescription('Availability and status of the device. This property is inherited from CIM_LogicalDevice.')
hwsbmBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmBlockSize.setStatus('current')
if mibBuilder.loadTexts: hwsbmBlockSize.setDescription('Size in bytes of the blocks that form this storage extent. If unknown or if a block concept is not valid (for example, for aggregate extents, memory or logical disks), enter a 1. This property is inherited from CIM_StorageExtent.')
hwsbmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmCaption.setStatus('current')
if mibBuilder.loadTexts: hwsbmCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwsbmConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwsbmConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwsbmConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwsbmConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwsbmCorrectableError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmCorrectableError.setStatus('current')
if mibBuilder.loadTexts: hwsbmCorrectableError.setDescription('If TRUE, the most recent error was correctable. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning.')
hwsbmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 10), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwsbmCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwsbmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmDescription.setStatus('current')
if mibBuilder.loadTexts: hwsbmDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwsbmDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwsbmDeviceID.setDescription('Unique identifier of the logical device. This property is inherited from CIM_LogicalDevice.')
hwsbmEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwsbmEndingAddress.setDescription('Ending address, referenced by an application or operating system and mapped by a memory controller for this memory object. The ending address is specified in kilobytes.')
hwsbmErrorAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("read", 3), ("write", 4), ("partialWrite", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorAccess.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorAccess.setDescription('Memory access operation that caused the last error. The type of error is described by the ErrorInfo property. If ErrorInfo is equal to 3 (OK), then this property has no meaning.')
hwsbmErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorAddress.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorAddress.setDescription('Address of the last memory error. The type of error is described by the ErrorInfo property. If ErrorInfo is equal to 3 (OK), then this property has no meaning.')
hwsbmErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwsbmErrorData = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorData.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorData.setDescription('Array of data captured during the last erroneous memory access. The data occupies the first n octets of the array necessary to hold the number of bits specified by the ErrorTransferSize property. If ErrorTransferSize is 0 (zero), then this property has no meaning.')
hwsbmErrorDataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("leastSignificantByteFirst", 1), ("mostSignificantByteFirst", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorDataOrder.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorDataOrder.setDescription('Ordering for data stored in the ErrorData property. If ErrorTransferSize is 0 (zero), then this property has no meaning.')
hwsbmErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwsbmErrorInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("badRead", 4), ("parityError", 5), ("singleBitError", 6), ("doubleBitError", 7), ("multiBitError", 8), ("nibbleError", 9), ("checksumError", 10), ("crcError", 11), ("correctedSinglebitError", 12), ("correctedError", 13), ("uncorrectableError", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorInfo.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorInfo.setDescription('Type of error that occurred most recently. The values 12 through 14 are unused. The ability to be corrected is indicated in the property CorrectableError.')
hwsbmErrorMethodology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("parity", 4), ("singleBitECC", 5), ("multiBitECC", 6), ("crc", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorMethodology.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorMethodology.setDescription('Details on the parity or CRC algorithms, ECC or other mechanisms used. This property is inherited from CIM_StorageExtent.')
hwsbmErrorResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorResolution.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorResolution.setDescription('Range, in bytes, to which the last error can be resolved. For example, if error addresses are resolved to bit 11 (that is, on a typical page basis), then errors can be resolved to 4 KB boundaries and this property is set to 4000. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning.')
hwsbmErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorTime.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorTime.setDescription('Time that the last memory error occurred. The type of error is described by the ErrorInfo property. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning.')
hwsbmErrorTransferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmErrorTransferSize.setStatus('current')
if mibBuilder.loadTexts: hwsbmErrorTransferSize.setDescription('Size of the data transfer in bits that caused the last error 0 (zero) indicates no error. If the ErrorInfo property is equal to 3 (OK), then this property should be set to 0 (zero).')
hwsbmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwsbmInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwsbmLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwsbmLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwsbmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmName.setStatus('current')
if mibBuilder.loadTexts: hwsbmName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwsbmNumberOfBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmNumberOfBlocks.setStatus('current')
if mibBuilder.loadTexts: hwsbmNumberOfBlocks.setDescription('Total number of consecutive blocks, each block the size of the value contained in the BlockSize property, which form this storage extent. Total size of the storage extent can be calculated by multiplying the value of the BlockSize property by the value of this property. If the value of BlockSize is 1, this property is the total size of the storage extent. This property is inherited from CIM_StorageExtent.')
hwsbmOtherErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmOtherErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwsbmOtherErrorDescription.setDescription('Free-form string that provides more information if the ErrorType property is set to 1; otherwise, this string has no meaning.')
hwsbmPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwsbmPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwsbmPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwsbmPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwsbmPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwsbmPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwsbmPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmPurpose.setStatus('current')
if mibBuilder.loadTexts: hwsbmPurpose.setDescription('Free-form string describing the media and/or its use. This property is inherited from CIM_StorageExtent.')
hwsbmStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwsbmStartingAddress.setDescription('Beginning address that is referenced by an application or operating system, and mapped by a memory controller for this memory object. The starting address is specified in kilobytes.')
hwsbmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmStatus.setStatus('current')
if mibBuilder.loadTexts: hwsbmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwsbmStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwsbmStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwsbmSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwsbmSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwsbmSystemLevelAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmSystemLevelAddress.setStatus('current')
if mibBuilder.loadTexts: hwsbmSystemLevelAddress.setDescription('If TRUE, the address information in the ErrorAddress property is a system-level address. If FALSE, it is a physical address. If the ErrorInfo property is equal to 3 (OK), then this property has no meaning.')
hwsbmSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 28, 1, 39), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsbmSystemName.setStatus('current')
if mibBuilder.loadTexts: hwsbmSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32SoundDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29), )
if mibBuilder.loadTexts: win32SoundDeviceTable.setStatus('current')
if mibBuilder.loadTexts: win32SoundDeviceTable.setDescription('The Win32_SoundDevice WMI class represents the properties of a sound device on a Windows computer system.')
win32SoundDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1), ).setIndexNames((0, "INFORMANT-HW", "hwsndIndex"))
if mibBuilder.loadTexts: win32SoundDeviceEntry.setStatus('current')
if mibBuilder.loadTexts: win32SoundDeviceEntry.setDescription('None')
hwsndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndIndex.setStatus('current')
if mibBuilder.loadTexts: hwsndIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwsndAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndAvailability.setStatus('current')
if mibBuilder.loadTexts: hwsndAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwsndCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndCaption.setStatus('current')
if mibBuilder.loadTexts: hwsndCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwsndConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwsndConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. . This property is inherited from CIM_LogicalDevice.')
hwsndConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwsndConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwsndCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwsndCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwsndDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndDescription.setStatus('current')
if mibBuilder.loadTexts: hwsndDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwsndDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 260))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwsndDeviceID.setDescription('Unique identifier of the sound device. This property is inherited from CIM_LogicalDevice.')
hwsndDMABufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 9), Integer32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndDMABufferSize.setStatus('current')
if mibBuilder.loadTexts: hwsndDMABufferSize.setDescription('Size of the Direct Memory Access buffer. Example: 4')
hwsndErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwsndErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwsndErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwsndErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwsndInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwsndInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwsndLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwsndLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwsndManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwsndManufacturer.setDescription("Manufacturer of the sound device. Example: 'Creative Labs'")
hwsndMPU401Address = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndMPU401Address.setStatus('current')
if mibBuilder.loadTexts: hwsndMPU401Address.setDescription('Starting I/O address assigned to the MPU-401 port of the sound device. Example: 300')
hwsndName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndName.setStatus('current')
if mibBuilder.loadTexts: hwsndName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwsndPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwsndPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwsndPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwsndPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwsndPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwsndPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwsndProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndProductName.setStatus('current')
if mibBuilder.loadTexts: hwsndProductName.setDescription("Product name of the sound device. Example: 'Creative Labs SoundBlaster AWE64PNP'")
hwsndStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndStatus.setStatus('current')
if mibBuilder.loadTexts: hwsndStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwsndStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwsndStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwsndSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwsndSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwsndSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 29, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsndSystemName.setStatus('current')
if mibBuilder.loadTexts: hwsndSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32SystemEnclosureTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30), )
if mibBuilder.loadTexts: win32SystemEnclosureTable.setStatus('current')
if mibBuilder.loadTexts: win32SystemEnclosureTable.setDescription('The Win32_SystemEnclosure WMI class represents the properties associated with a physical system enclosure.')
win32SystemEnclosureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1), ).setIndexNames((0, "INFORMANT-HW", "hwseIndex"))
if mibBuilder.loadTexts: win32SystemEnclosureEntry.setStatus('current')
if mibBuilder.loadTexts: win32SystemEnclosureEntry.setDescription('None')
hwseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseIndex.setStatus('current')
if mibBuilder.loadTexts: hwseIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwseAudibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseAudibleAlarm.setStatus('current')
if mibBuilder.loadTexts: hwseAudibleAlarm.setDescription('If TRUE, the frame is equipped with an audible alarm. This property is inherited from CIM_PhysicalFrame.')
hwseBreachDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseBreachDescription.setStatus('current')
if mibBuilder.loadTexts: hwseBreachDescription.setDescription('Free-form string that provides more information if the SecurityBreach property indicates that a breach or some other security-related event occurred. This property is inherited from CIM_PhysicalFrame.')
hwseCableManagementStrategy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseCableManagementStrategy.setStatus('current')
if mibBuilder.loadTexts: hwseCableManagementStrategy.setDescription('Free-form string that contains information about how the various cables are connected and bundled for the frame. With many networking, storage-related, and power cables, cable management can be a complex and challenging endeavor. The property contains information to aid in assembly and service of the frame. This property is inherited from CIM_PhysicalFrame.')
hwseCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseCaption.setStatus('current')
if mibBuilder.loadTexts: hwseCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwseChassisTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseChassisTypes.setStatus('current')
if mibBuilder.loadTexts: hwseChassisTypes.setDescription('Array of chassis types. This property is inherited from CIM_Chassis. Value Meaning 1 Other 2 Unknown 3 Desktop 4 Low Profile Desktop 5 Pizza Box 6 Mini Tower 7 Tower 8 Portable 9 Laptop 10 Notebook 11 Hand Held 12 Docking Station 13 All in One 14 Sub Notebook 15 Space-Saving 16 Lunch Box 17 Main System Chassis 18 Expansion Chassis 19 SubChassis 20 Bus Expansion Chassis 21 Peripheral Chassis 22 Storage Chassis 23 Rack Mount Chassis 24 Sealed-Case PC ')
hwseCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwseCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_PhysicalElement.')
hwseCurrentRequiredOrProduced = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 8), Integer32()).setUnits('Amps at 120 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseCurrentRequiredOrProduced.setStatus('current')
if mibBuilder.loadTexts: hwseCurrentRequiredOrProduced.setDescription('Current required by the chassis at 120V. If power is provided by the chassis as in the case of an uninterruptible power supply (UPS) this property may indicate the amperage produced (as a negative number). This property is inherited from CIM_Chassis.')
hwseDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseDepth.setStatus('current')
if mibBuilder.loadTexts: hwseDepth.setDescription('Depth of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
hwseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseDescription.setStatus('current')
if mibBuilder.loadTexts: hwseDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwseHeatGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseHeatGeneration.setStatus('current')
if mibBuilder.loadTexts: hwseHeatGeneration.setDescription('Amount of heat generated by the chassis in BTU/hour. This property is inherited from CIM_Chassis.')
hwseHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseHeight.setStatus('current')
if mibBuilder.loadTexts: hwseHeight.setDescription('Height of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
hwseHotSwappable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseHotSwappable.setStatus('current')
if mibBuilder.loadTexts: hwseHotSwappable.setDescription('If TRUE, a physical package can be hot-swapped (if it is possible to replace the element with a physically different but equivalent one while the containing package has power applied to it). For example, a disk drive package inserted using SCA connectors is removable and can be hot-swapped. All packages that can be hot-swapped are inherently removable and replaceable. This property is inherited from CIM_PhysicalPackage.')
hwseInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwseInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwseLockPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseLockPresent.setStatus('current')
if mibBuilder.loadTexts: hwseLockPresent.setDescription('If TRUE, the frame is protected with a lock. This property is inherited from CIM_PhysicalFrame.')
hwseManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 16), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwseManufacturer.setDescription('Name of the organization responsible for producing the physical element. This property is inherited from CIM_PhysicalElement.')
hwseModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 17), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseModel.setStatus('current')
if mibBuilder.loadTexts: hwseModel.setDescription('Name by which the physical element is generally known. This property is inherited from CIM_PhysicalElement.')
hwseName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseName.setStatus('current')
if mibBuilder.loadTexts: hwseName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwseNumberOfPowerCords = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseNumberOfPowerCords.setStatus('current')
if mibBuilder.loadTexts: hwseNumberOfPowerCords.setDescription('Number of power cords that must be connected to the chassis for all the components to operate. This property is inherited from CIM_Chassis.')
hwseOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwseOtherIdentifyingInfo.setDescription('Additional data, beyond asset tag information, that can be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. Note that if only bar code data is available and is unique/able to be used as an element key, this property would be NULL and the bar code data used as the class key, in the tag property. This property is inherited from CIM_PhysicalElement.')
hwsePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 21), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsePartNumber.setStatus('current')
if mibBuilder.loadTexts: hwsePartNumber.setDescription('Part number assigned by the organization responsible for producing or manufacturing the physical element. This property is inherited from CIM_PhysicalElement.')
hwsePoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsePoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwsePoweredOn.setDescription('If TRUE, the physical element is powered ON. This property is inherited from CIM_PhysicalElement.')
hwseRemovable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseRemovable.setStatus('current')
if mibBuilder.loadTexts: hwseRemovable.setDescription("If TRUE, a physical package is removable (if it is designed to be taken in and out of the physical container in which it is normally found, without impairing the function of the overall packaging). A package can still be removable if power must be 'off' in order to perform the removal. If power can be ON and the package removed, then the element is removable and can be hot-swapped. For example, an extra battery in a laptop is removable, as is a disk drive package inserted using SCA connectors. However, the latter can be hot swapped. A laptop's display is not removable, nor is a non-redundant power supply. Removing these components would affect the function of the overall packaging or is impossible due to the tight integration of the package. This property is inherited from CIM_PhysicalPackage.")
hwseReplaceable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseReplaceable.setStatus('current')
if mibBuilder.loadTexts: hwseReplaceable.setDescription('If TRUE, a physical package is replaceable (if it is possible to replace field replaceable unit (FRU) or upgrade the element with a physically different one). For example, some computer systems allow the main processor chip to be upgraded to one of a higher clock rating. In this case, the processor is replaceable. Another example is a power supply package mounted on sliding rails. All removable packages are inherently replaceable. This property is inherited from CIM_PhysicalPackage.')
hwseSecurityBreach = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("noBreach", 3), ("breachAttempted", 4), ("breachSuccessful", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseSecurityBreach.setStatus('current')
if mibBuilder.loadTexts: hwseSecurityBreach.setDescription('Status of a physical breach of the frame. This property is inherited from CIM_PhysicalFrame.')
hwseSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("none", 3), ("externalInterfaceLockedOut", 4), ("externalInterfaceEnabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: hwseSecurityStatus.setDescription('Security setting for external input for example, a keyboard to this computer.')
hwseSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 27), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwseSerialNumber.setDescription('Manufacturer-allocated number used to identify the physical element. This property is inherited from CIM_PhysicalElement.')
hwseServiceDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseServiceDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwseServiceDescriptions.setDescription('Array of more detailed explanations for any of the entries in the ServicePhilosophy array. Note that each entry of this array is related to the entry in ServicePhilosophy that is located at the same index. This property is inherited from CIM_PhysicalFrame.')
hwseServicePhilosophy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseServicePhilosophy.setStatus('current')
if mibBuilder.loadTexts: hwseServicePhilosophy.setDescription('Array that includes whether the frame is serviced from the top, front, back, or side; whether the frame has sliding trays or removable sides; and whether the frame is moveable for example, having rollers. This property is inherited from CIM_PhysicalFrame. Value Meaning 0 Unknown 1 Other 2 Service From Top 3 Service From Front 4 Service From Back 5 Service From Side 6 Sliding Trays 7 Removable Sides 8 Moveable ')
hwseSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 30), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseSKU.setStatus('current')
if mibBuilder.loadTexts: hwseSKU.setDescription('Stock keeping unit number for the physical element. This property is inherited from CIM_PhysicalElement.')
hwseSMBIOSAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseSMBIOSAssetTag.setStatus('current')
if mibBuilder.loadTexts: hwseSMBIOSAssetTag.setDescription('Asset tag number of the system enclosure.')
hwseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseStatus.setStatus('current')
if mibBuilder.loadTexts: hwseStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwseTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 33), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseTag.setStatus('current')
if mibBuilder.loadTexts: hwseTag.setDescription("Unique identifier of the system enclosure. This property is inherited from CIM_PhysicalElement. Example: 'System Enclosure 1'")
hwseTypeDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseTypeDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwseTypeDescriptions.setDescription('Array of more information about the ChassisTypes array entries. Note that each entry of this array is related to the entry in ChassisTypes that is located at the same index. This property is inherited from CIM_Chassis.')
hwseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 35), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseVersion.setStatus('current')
if mibBuilder.loadTexts: hwseVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
hwseVisibleAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseVisibleAlarm.setStatus('current')
if mibBuilder.loadTexts: hwseVisibleAlarm.setDescription('If TRUE, the equipment includes a visible alarm. This property is inherited from CIM_PhysicalFrame.')
hwseWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseWeight.setStatus('current')
if mibBuilder.loadTexts: hwseWeight.setDescription('Weight of the physical package in pounds. This property is inherited from CIM_PhysicalPackage.')
hwseWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 30, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwseWidth.setStatus('current')
if mibBuilder.loadTexts: hwseWidth.setDescription('Width of the physical package in inches. This property is inherited from CIM_PhysicalPackage.')
win32SystemMemoryResourceTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31), )
if mibBuilder.loadTexts: win32SystemMemoryResourceTable.setStatus('current')
if mibBuilder.loadTexts: win32SystemMemoryResourceTable.setDescription('The Win32_SystemMemoryResource abstract WMI class represents a system memory resource on a Windows operating system.')
win32SystemMemoryResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1), ).setIndexNames((0, "INFORMANT-HW", "hwsmrIndex"))
if mibBuilder.loadTexts: win32SystemMemoryResourceEntry.setStatus('current')
if mibBuilder.loadTexts: win32SystemMemoryResourceEntry.setDescription('None')
hwsmrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrIndex.setStatus('current')
if mibBuilder.loadTexts: hwsmrIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwsmrCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrCaption.setStatus('current')
if mibBuilder.loadTexts: hwsmrCaption.setDescription('Short description of an object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwsmrCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwsmrCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with other key properties of a class, the property allows all instances of the class and its subclasses to be identified uniquely. This property is inherited from CIM_MemoryMappedIO.')
hwsmrCSCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrCSCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwsmrCSCreationClassName.setDescription('Creation class name of the scoping computer system. This property is inherited from CIM_MemoryMappedIO.')
hwsmrCSName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrCSName.setStatus('current')
if mibBuilder.loadTexts: hwsmrCSName.setDescription('Name of the scoping computer system. This property is inherited from CIM_MemoryMappedIO.')
hwsmrDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrDescription.setStatus('current')
if mibBuilder.loadTexts: hwsmrDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwsmrEndingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrEndingAddress.setStatus('current')
if mibBuilder.loadTexts: hwsmrEndingAddress.setDescription('Ending address of memory mapped I/O. This property is inherited from CIM_MemoryMappedIO.')
hwsmrInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwsmrInstallDate.setDescription('Date and time an object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwsmrName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrName.setStatus('current')
if mibBuilder.loadTexts: hwsmrName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwsmrStartingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrStartingAddress.setStatus('current')
if mibBuilder.loadTexts: hwsmrStartingAddress.setDescription('Starting address of memory mapped I/O. The hardware resource identifier property should be set to this value to construct the mapped I/O resource key. This property is inherited from CIM_MemoryMappedIO.')
hwsmrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwsmrStatus.setStatus('current')
if mibBuilder.loadTexts: hwsmrStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
win32SystemSlotTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32), )
if mibBuilder.loadTexts: win32SystemSlotTable.setStatus('current')
if mibBuilder.loadTexts: win32SystemSlotTable.setDescription('The Win32_SystemSlot WMI class represents physical connection points including ports, motherboard slots and peripherals, and proprietary connection points.')
win32SystemSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1), ).setIndexNames((0, "INFORMANT-HW", "hwssIndex"))
if mibBuilder.loadTexts: win32SystemSlotEntry.setStatus('current')
if mibBuilder.loadTexts: win32SystemSlotEntry.setDescription('None')
hwssIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssIndex.setStatus('current')
if mibBuilder.loadTexts: hwssIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwssCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssCaption.setStatus('current')
if mibBuilder.loadTexts: hwssCaption.setDescription('Short description of an object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwssConnectorPinout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssConnectorPinout.setStatus('current')
if mibBuilder.loadTexts: hwssConnectorPinout.setDescription('Free-form string that describes the pin configuration and signal usage of a physical connector. This property is inherited from CIM_PhysicalConnector.')
hwssConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssConnectorType.setStatus('current')
if mibBuilder.loadTexts: hwssConnectorType.setDescription('Array of physical attributes of the connector that this slot uses. This property is inherited from CIM_PhysicalConnector. Value Meaning 0 Unknown 1 Other 2 Male 3 Female 4 Shielded 5 Unshielded 6 SCSI (A) High-Density (50 pins) 7 SCSI (A) Low-Density (50 pins) 8 SCSI (P) High-Density (68 pins) 9 SCSI SCA-I (80 pins) 10 SCSI SCA-II (80 pins) 11 SCSI Fibre Channel (DB-9, Copper) 12 SCSI Fibre Channel (Fibre) 13 SCSI Fibre Channel SCA-II (40 pins) 14 SCSI Fibre Channel SCA-II (20 pins) 15 SCSI Fibre Channel BNC 16 ATA 3-1/2 Inch (40 pins) 17 ATA 2-1/2 Inch (44 pins) 18 ATA-2 19 ATA-3 20 ATA/66 21 DB-9 22 DB-15 23 DB-25 24 DB-36 25 RS-232C 26 RS-422 27 RS-423 28 RS-485 29 RS-449 30 V.35 31 X.21 32 IEEE-488 33 AUI 34 UTP Category 3 35 UTP Category 4 36 UTP Category 5 37 BNC 38 RJ11 39 RJ45 40 Fiber MIC 41 Apple AUI 42 Apple GeoPort 43 PCI 44 ISA 45 EISA 46 VESA 47 PCMCIA 48 PCMCIA Type I 49 PCMCIA Type II 50 PCMCIA Type III 51 ZV Port 52 CardBus 53 USB 54 IEEE 1394 55 HIPPI 56 HSSDC (6 pins) 57 GBIC 58 DIN 59 Mini-DIN 60 Micro-DIN 61 PS/2 62 Infrared 63 HP-HIL 64 Access.bus 65 NuBus 66 Centronics 67 Mini-Centronics 68 Mini-Centronics Type-14 69 Mini-Centronics Type-20 70 Mini-Centronics Type-26 71 Bus Mouse 72 ADB 73 AGP 74 VME Bus 75 VME64 76 Proprietary 77 Proprietary Processor Card Slot 78 Proprietary Memory Card Slot 79 Proprietary I/O Riser Slot 80 PCI-66MHZ 81 AGP2X 82 AGP4X 83 PC-98 84 PC-98-Hireso 85 PC-H98 86 PC-98Note 87 PC-98Full 88 SSA SCSI 89 Circular 90 On Board IDE Connector 91 On Board Floppy Connector 92 9 Pin Dual Inline 93 25 Pin Dual Inline 94 50 Pin Dual Inline 95 68 Pin Dual Inline 96 On Board Sound Connector 97 Mini-jack 98 PCI-X 99 Sbus IEEE 1396-1993 32 bit 100 Sbus IEEE 1396-1993 64 bit 101 MCA 102 GIO 103 XIO 104 HIO 105 NGIO 106 PMC 107 MTRJ 108 VF-45 109 Future I/O 110 SC 111 SG 112 Electrical 113 Optical 114 Ribbon 115 GLM 116 1x9 117 Mini SG 118 LC 119 HSSC 120 VHDCI Shielded (68 pins) 121 InfiniBand ')
hwssCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 5), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwssCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of a class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_PhysicalElement.')
hwssCurrentUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("reserved", 0), ("other", 1), ("unknown", 2), ("available", 3), ("inUse", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: hwssCurrentUsage.setDescription('Status of system slot use.')
hwssDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssDescription.setStatus('current')
if mibBuilder.loadTexts: hwssDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwssHeightAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssHeightAllowed.setStatus('current')
if mibBuilder.loadTexts: hwssHeightAllowed.setDescription('Maximum height of an adapter card that can be inserted into the slot in inches. This property is inherited from CIM_Slot.')
hwssInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwssInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwssLengthAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssLengthAllowed.setStatus('current')
if mibBuilder.loadTexts: hwssLengthAllowed.setDescription('Maximum length of an adapter card that can be inserted into the slot in inches. This property is inherited from CIM_Slot.')
hwssManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 11), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwssManufacturer.setDescription('Name of the organization that produces the physical element. This property is inherited from CIM_PhysicalElement.')
hwssMaxDataWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssMaxDataWidth.setStatus('current')
if mibBuilder.loadTexts: hwssMaxDataWidth.setDescription('Maximum bus width of adapter cards that can be inserted into this slot in bits. This property is inherited from CIM_Slot. Value Maximun data widith (bits) 0 8 1 16 2 32 3 64 4 128 ')
hwssModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 13), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssModel.setStatus('current')
if mibBuilder.loadTexts: hwssModel.setDescription('Name for the physical element. This property is inherited from CIM_PhysicalElement.')
hwssName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssName.setStatus('current')
if mibBuilder.loadTexts: hwssName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwssNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssNumber.setStatus('current')
if mibBuilder.loadTexts: hwssNumber.setDescription('Physical slot number that can be used as an index into a system slot table, whether or not that slot is physically occupied. This property is inherited from CIM_Slot.')
hwssOtherIdentifyingInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssOtherIdentifyingInfo.setStatus('current')
if mibBuilder.loadTexts: hwssOtherIdentifyingInfo.setDescription('Additional data (that is, more than asset tag information), that can be used to identify a physical element. One example is bar code data associated with an element that also has an asset tag. Note that if only bar code data is available, and it is unique or can be used as an element key, this property is NULL, and the bar code data is used as the class key in the Tag property. This property is inherited from CIM_PhysicalElement.')
hwssPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 17), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwssPartNumber.setDescription('Part number that the producer or manufacturer assigns to the physical element. This property is inherited from CIM_PhysicalElement.')
hwssPMESignal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssPMESignal.setStatus('current')
if mibBuilder.loadTexts: hwssPMESignal.setDescription('If TRUE, the PCI bus Power Management Enabled (PME) signal is supported by this slot.')
hwssPoweredOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssPoweredOn.setStatus('current')
if mibBuilder.loadTexts: hwssPoweredOn.setDescription('If TRUE, the physical element is powered on. This property is inherited from CIM_PhysicalElement.')
hwssPurposeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssPurposeDescription.setStatus('current')
if mibBuilder.loadTexts: hwssPurposeDescription.setDescription('Free-form string that describes how this slot is physically unique and may hold special types of hardware. This property only has meaning when the corresponding property SpecialPurpose is TRUE. This property is inherited from CIM_Slot.')
hwssSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 21), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwssSerialNumber.setDescription('Manufacturer-allocated number used to identify the physical element. This property is inherited from CIM_PhysicalElement.')
hwssShared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssShared.setStatus('current')
if mibBuilder.loadTexts: hwssShared.setDescription('If TRUE, two or more slots share a location on the baseboard, such as a PCI/EISA shared slot.')
hwssSKU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 23), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssSKU.setStatus('current')
if mibBuilder.loadTexts: hwssSKU.setDescription('Stockkeeping unit number for the physical element. This property is inherited from CIM_PhysicalElement.')
hwssSlotDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssSlotDesignation.setStatus('current')
if mibBuilder.loadTexts: hwssSlotDesignation.setDescription("SMBIOS string that identifies the system slot designation of the slot on the motherboard. Example: 'PCI-1'")
hwssSpecialPurpose = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssSpecialPurpose.setStatus('current')
if mibBuilder.loadTexts: hwssSpecialPurpose.setDescription('If TRUE, this slot is physically unique and may hold special types of hardware, such as a graphics processor slot. If TRUE, then PurposeDescription should specify the nature of the uniqueness or purpose of the slot. This property is inherited from CIM_Slot.')
hwssStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssStatus.setStatus('current')
if mibBuilder.loadTexts: hwssStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwssSupportsHotPlug = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssSupportsHotPlug.setStatus('current')
if mibBuilder.loadTexts: hwssSupportsHotPlug.setDescription('If TRUE, the slot supports hot-plugging of adapter cards. This property is inherited from CIM_Slot.')
hwssTag = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 28), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssTag.setStatus('current')
if mibBuilder.loadTexts: hwssTag.setDescription("System slot represented by an instance of this class. This property is inherited from CIM_PhysicalElement. Example: 'System Slot 1'")
hwssThermalRating = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssThermalRating.setStatus('current')
if mibBuilder.loadTexts: hwssThermalRating.setDescription('Maximum thermal dissipation of the slot in milliwatts. This property is inherited from CIM_Slot.')
hwssVccMixedVoltageSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssVccMixedVoltageSupport.setStatus('current')
if mibBuilder.loadTexts: hwssVccMixedVoltageSupport.setDescription('Array of enumerated integers indicating the Vcc voltage supported by this slot. This property is inherited from CIM_Slot. Value Meaning 0 Unknown 1 Other 2 3.3V 3 5V ')
hwssVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 31), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssVersion.setStatus('current')
if mibBuilder.loadTexts: hwssVersion.setDescription('Version of the physical element. This property is inherited from CIM_PhysicalElement.')
hwssVppMixedVoltageSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 32, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwssVppMixedVoltageSupport.setStatus('current')
if mibBuilder.loadTexts: hwssVppMixedVoltageSupport.setDescription('Array of enumerated integers indicating the Vpp voltage supported by this slot. This property is inherited from CIM_Slot. Value Meaning 0 Unknown 1 Other 2 3.3V 3 5V 4 12V ')
win32USBControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33), )
if mibBuilder.loadTexts: win32USBControllerTable.setStatus('current')
if mibBuilder.loadTexts: win32USBControllerTable.setDescription('The Win32_USBController WMI class manages the capabilities of a Universal Serial Bus (USB) controller.')
win32USBControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1), ).setIndexNames((0, "INFORMANT-HW", "hwucIndex"))
if mibBuilder.loadTexts: win32USBControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win32USBControllerEntry.setDescription('None')
hwucIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucIndex.setStatus('current')
if mibBuilder.loadTexts: hwucIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwucAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucAvailability.setStatus('current')
if mibBuilder.loadTexts: hwucAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwucCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucCaption.setStatus('current')
if mibBuilder.loadTexts: hwucCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwucConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwucConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwucConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwucConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwucCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwucCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwucDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucDescription.setStatus('current')
if mibBuilder.loadTexts: hwucDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwucDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwucDeviceID.setDescription('Unique identifier of the USB controller. This property is inherited from CIM_LogicalDevice.')
hwucErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwucErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwucErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwucErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwucInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwucInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwucLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwucLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwucManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwucManufacturer.setDescription('Manufacturer of the controller. This property is inherited from CIM_USBController.')
hwucMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwucMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwucName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucName.setStatus('current')
if mibBuilder.loadTexts: hwucName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwucPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwucPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwucPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwucPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwucPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwucPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwucProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("eisa", 2), ("isa", 3), ("pci", 4), ("ataATAPI", 5), ("flexibleDiskette", 6), ("n1496", 7), ("scsiParallelInterface", 8), ("scsiFibreChannelProtocol", 9), ("scsiSerialBusProtocol", 10), ("scsiSerialBusProtocol1394", 11), ("scsiSerialStorageArchitecture", 12), ("vesa", 13), ("pcmcia", 14), ("universalSerialBus", 15), ("parallelProtocol", 16), ("escon", 17), ("diagnostic", 18), ("i2C", 19), ("power", 20), ("hippi", 21), ("multiBus", 22), ("vme", 23), ("ipi", 24), ("ieee488", 25), ("rs232", 26), ("ieee802310BASE5", 27), ("ieee802310BASE2", 28), ("ieee80231BASE5", 29), ("ieee802310BROAD36", 30), ("ieee8023100BASEVG", 31), ("ieee8025TokenRing", 32), ("ansiX3T95FDDI", 33), ("mca", 34), ("esdi", 35), ("ide", 36), ("cmd", 37), ("st506", 38), ("dssi", 39), ("qic2", 40), ("enhancedATAIDE", 41), ("agp", 42), ("twowayInfrared", 43), ("fastInfrared", 44), ("serialInfrared", 45), ("irBus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwucProtocolSupported.setDescription("Protocol used by the controller to access 'controlled' devices. This property is inherited from CIM_Controller.")
hwucStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucStatus.setStatus('current')
if mibBuilder.loadTexts: hwucStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwucStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwucStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwucSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwucSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwucSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucSystemName.setStatus('current')
if mibBuilder.loadTexts: hwucSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwucTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 33, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwucTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwucTimeOfLastReset.setDescription('Date and time the controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
win32USBHubTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34), )
if mibBuilder.loadTexts: win32USBHubTable.setStatus('current')
if mibBuilder.loadTexts: win32USBHubTable.setDescription('The Win32_USBHub WMI class represents the management characteristics of a USB hub.')
win32USBHubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1), ).setIndexNames((0, "INFORMANT-HW", "hwuhIndex"))
if mibBuilder.loadTexts: win32USBHubEntry.setStatus('current')
if mibBuilder.loadTexts: win32USBHubEntry.setDescription('None')
hwuhIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhIndex.setStatus('current')
if mibBuilder.loadTexts: hwuhIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwuhAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhAvailability.setStatus('current')
if mibBuilder.loadTexts: hwuhAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwuhCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhCaption.setStatus('current')
if mibBuilder.loadTexts: hwuhCaption.setDescription('Short description (one-line string) of the CIM_Setting object. This property is inherited from CIM_Setting.')
hwuhClassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhClassCode.setStatus('current')
if mibBuilder.loadTexts: hwuhClassCode.setDescription('USB class code. This property is inherited from CIM_USBHub.')
hwuhConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwuhConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwuhConfigManagerUserCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhConfigManagerUserCode.setStatus('current')
if mibBuilder.loadTexts: hwuhConfigManagerUserCode.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwuhCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwuhCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwuhCurrentAlternativeSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhCurrentAlternativeSettings.setStatus('current')
if mibBuilder.loadTexts: hwuhCurrentAlternativeSettings.setDescription('Array of USB alternate settings for each interface in the currently selected configuration (indicated by the CurrentConfigValue property). This array has one entry for each interface in the configuration. If the property, CurrentConfigValue is 0 (indicating that the device is not configured), the array is undefined. To understand how to parse this octet string, refer to the USB specification. This property is inherited from CIM_LogicalDevice.')
hwuhCurrentConfigValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhCurrentConfigValue.setStatus('current')
if mibBuilder.loadTexts: hwuhCurrentConfigValue.setDescription('Configuration currently configured for this device. If this value is 0, the device is not configured. This property is inherited from CIM_USBDevice.')
hwuhDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhDescription.setStatus('current')
if mibBuilder.loadTexts: hwuhDescription.setDescription('Textual description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwuhDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwuhDeviceID.setDescription('Address or other identifying information to name the logical device uniquely. This property is inherited from CIM_LogicalDevice.')
hwuhErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwuhErrorCleared.setDescription('Indicates that the error reported in the LastErrorCode property is now cleared. This property is inherited from CIM_LogicalDevice.')
hwuhErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwuhErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode property, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwuhGangSwitched = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhGangSwitched.setStatus('current')
if mibBuilder.loadTexts: hwuhGangSwitched.setDescription('If TRUE, power is switched to all ports on the HUB at one time. If FALSE, power is switched individually for each port. This property is inherited from CIM_USBHub.')
hwuhInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwuhInstallDate.setDescription('Date the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwuhLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwuhLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwuhName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhName.setStatus('current')
if mibBuilder.loadTexts: hwuhName.setDescription('Name of the USB hub. This property is inherited from CIM_ManagedSystemElement.')
hwuhNumberOfConfigs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhNumberOfConfigs.setStatus('current')
if mibBuilder.loadTexts: hwuhNumberOfConfigs.setDescription('Number of defined device configurations. This property is inherited from CIM_USBDevice.')
hwuhNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhNumberOfPorts.setStatus('current')
if mibBuilder.loadTexts: hwuhNumberOfPorts.setDescription("Number of downstream ports on the hub, including those embedded in the hub's silicon. This property is inherited from CIM_USBHub.")
hwuhPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwuhPNPDeviceID.setDescription('Windows Plug and Play device identifier of the logical device. Example: *PNP030b. This property is inherited from CIM_LogicalDevice.')
hwuhPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwuhPowerManagementCapabilities.setDescription('Specific power-related capabilities of the logical device. This property is inherited from CIM_USBHub. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwuhPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwuhPowerManagementSupported.setDescription("If TRUE, the device can be power managed; that is, put into a power save state. This Boolean value does not indicate that power management features are currently enabled, or if enabled, what features are supported. For more information, see the PowerManagementCapabilities array for this information. If FALSE, the integer value 1, for the string 'Not Supported', should be the only entry in the PowerManagementCapabilities array. This property is inherited from CIM_LogicalDevice.")
hwuhProtocolCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhProtocolCode.setStatus('current')
if mibBuilder.loadTexts: hwuhProtocolCode.setDescription('USB protocol code. This property is inherited from CIM_USBDevice.')
hwuhStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhStatus.setStatus('current')
if mibBuilder.loadTexts: hwuhStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwuhStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwuhStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwuhSubclassCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhSubclassCode.setStatus('current')
if mibBuilder.loadTexts: hwuhSubclassCode.setDescription('USB subclass code. This property is inherited from CIM_USBDevice.')
hwuhSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwuhSystemCreationClassName.setDescription('Creation class name for the scoping system. This property is inherited from CIM_LogicalDevice.')
hwuhSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhSystemName.setStatus('current')
if mibBuilder.loadTexts: hwuhSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwuhUSBVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 4, 34, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwuhUSBVersion.setStatus('current')
if mibBuilder.loadTexts: hwuhUSBVersion.setDescription('Latest USB version supported by the USB device. The property is expressed as a binary-coded decimal (BCD), where a decimal point is implied between the second and third digits. For example, a value of 0x201 indicates that version 2.01 is supported. This property is inherited from CIM_USBDevice.')
wmiNetworkingDevice = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5))
if mibBuilder.loadTexts: wmiNetworkingDevice.setStatus('current')
if mibBuilder.loadTexts: wmiNetworkingDevice.setDescription('The Networking Devices subcategory groups classes that represent the network interface controller, its configurations, and its settings.')
win32NetworkAdapterTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1), )
if mibBuilder.loadTexts: win32NetworkAdapterTable.setStatus('current')
if mibBuilder.loadTexts: win32NetworkAdapterTable.setDescription('The Win32_NetworkAdapter WMI class represents a network adapter on a Windows operating system.')
win32NetworkAdapterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwnaIndex"))
if mibBuilder.loadTexts: win32NetworkAdapterEntry.setStatus('current')
if mibBuilder.loadTexts: win32NetworkAdapterEntry.setDescription('None')
hwnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaIndex.setStatus('current')
if mibBuilder.loadTexts: hwnaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwnaAdapterType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaAdapterType.setStatus('current')
if mibBuilder.loadTexts: hwnaAdapterType.setDescription("Network medium in use. This property may not be applicable to all types of network adapters listed within this class Windows NT only. 'Ethernet 802.3' 'Token Ring 802.5' 'Fiber Distributed Data Interface (FDDI)' 'Wide Area Network (WAN)' 'LocalTalk' 'Ethernet using DIX header format' 'ARCNET' 'ARCNET (878.2)' 'ATM' 'Wireless' 'Infrared Wireless' 'Bpc' 'CoWan' '1394'")
hwnaAdapterTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ethernet8023", 0), ("tokenRing8025", 1), ("fiberDistributedDataInterface", 2), ("wideAreaNetwork", 3), ("localTalk", 4), ("ethernetUsingDIXHeaderFormat", 5), ("arcnet", 6), ("arcnet8782", 7), ("atm", 8), ("wireless", 9), ("infraredWireless", 10), ("bpc", 11), ("coWan", 12), ("n1394", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaAdapterTypeID.setStatus('current')
if mibBuilder.loadTexts: hwnaAdapterTypeID.setDescription('Network medium in use. Gives the same information as the AdapterType property, except that the information is in the form of an integer. This property may not be applicable to all types of network adapters listed Windows NT only. This property is new for Windows XP.')
hwnaAutoSense = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaAutoSense.setStatus('current')
if mibBuilder.loadTexts: hwnaAutoSense.setDescription('If TRUE, the network adapter is capable of automatically determining the speed of the attached/network media. This property is inherited from CIM_NetworkAdapter. ')
hwnaAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaAvailability.setStatus('current')
if mibBuilder.loadTexts: hwnaAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwnaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaCaption.setStatus('current')
if mibBuilder.loadTexts: hwnaCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement. ')
hwnaConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwnaConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwnaConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwnaConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwnaCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwnaCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwnaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaDescription.setStatus('current')
if mibBuilder.loadTexts: hwnaDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwnaDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwnaDeviceID.setDescription('Unique identifier of the network adapter from other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwnaErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwnaErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwnaErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwnaErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwnaRegistryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaRegistryIndex.setStatus('current')
if mibBuilder.loadTexts: hwnaRegistryIndex.setDescription('Index number of the network adapter, stored in the system registry. Example: 0')
hwnaInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwnaInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwnaInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaInstalled.setStatus('current')
if mibBuilder.loadTexts: hwnaInstalled.setDescription('If TRUE, the network adapter is installed in the system.')
hwnaInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwnaInterfaceIndex.setDescription('Index value that uniquely identifies the local network interface. The value in this property is the same as the value in the InterfaceIndex property in the instance of Win32_IP4RouteTable that represents the network interface in the route table. Windows XP and earlier: The InterfaceIndex property is not available.')
hwnaLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwnaLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwnaMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaMACAddress.setStatus('current')
if mibBuilder.loadTexts: hwnaMACAddress.setDescription('Media access control address for this network adapter. A MAC address is a unique 48-bit number assigned to the network adapter by the manufacturer. It uniquely identifies this network adapter and is used for mapping TCP/IP network communications.')
hwnaManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwnaManufacturer.setDescription("Name of the network adapter's manufacturer. Example: '3COM'")
hwnaMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwnaMaxNumberControlled.setDescription('Maximum number of directly addressable ports supported by this network adapter. A value of 0 should be used if the number is unknown.')
hwnaMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: hwnaMaxSpeed.setDescription('Maximum speed, in bits per second, for the network adapter. This property is inherited from CIM_NetworkAdapter.')
hwnaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaName.setStatus('current')
if mibBuilder.loadTexts: hwnaName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwnaNetConnectionID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaNetConnectionID.setStatus('current')
if mibBuilder.loadTexts: hwnaNetConnectionID.setDescription('Name of the network connection as it appears in the Network Connections Control Panel program. This property is new for Windows XP.')
hwnaNetConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("disconnected", 0), ("connecting", 1), ("connected", 2), ("disconnecting", 3), ("hardwareNotPresent", 4), ("hardwareDisabled", 5), ("hardwareMalfunction", 6), ("mediaDisconnected", 7), ("authenticating", 8), ("authenticationSucceeded", 9), ("authenticationFailed", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaNetConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: hwnaNetConnectionStatus.setDescription("State of the network adapter's connection to the network. This property is new for Windows XP.")
hwnaNetworkAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaNetworkAddresses.setStatus('current')
if mibBuilder.loadTexts: hwnaNetworkAddresses.setDescription('Array of network addresses for an adapter. This property is inherited from CIM_NetworkAdapter.')
hwnaPermanentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaPermanentAddress.setStatus('current')
if mibBuilder.loadTexts: hwnaPermanentAddress.setDescription('Network address hard-coded into an adapter. This hard-coded address may be changed by firmware upgrade or software configuration. If so, this field should be updated when the change is made. The property should be left blank if no hard-coded address exists for the network adapter. This property is inherited from CIM_NetworkAdapter.')
hwnaPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwnaPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwnaPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwnaPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwnaPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwnaPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwnaProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaProductName.setStatus('current')
if mibBuilder.loadTexts: hwnaProductName.setDescription("Product name of the network adapter. Example: 'Fast EtherLink XL'")
hwnaServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaServiceName.setStatus('current')
if mibBuilder.loadTexts: hwnaServiceName.setDescription("Service name of the network adapter. This name is usually shorter than the full product name. Example: 'Elnkii'")
hwnaSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaSpeed.setStatus('current')
if mibBuilder.loadTexts: hwnaSpeed.setDescription('Estimate of the current bandwidth in bits per second. For endpoints which vary in bandwidth or for those where no accurate estimation can be made, this property should contain the nominal bandwidth. This property is inherited from CIM_NetworkAdapter.')
hwnaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaStatus.setStatus('current')
if mibBuilder.loadTexts: hwnaStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwnaStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwnaStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwnaSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwnaSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwnaSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaSystemName.setStatus('current')
if mibBuilder.loadTexts: hwnaSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwnaTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 1, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnaTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwnaTimeOfLastReset.setDescription('Date and time the network adapter was last reset.')
win32NetworkAdapterConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2), )
if mibBuilder.loadTexts: win32NetworkAdapterConfigTable.setStatus('current')
if mibBuilder.loadTexts: win32NetworkAdapterConfigTable.setDescription('The Win32_NetworkAdapterConfiguration WMI class represents the attributes and behaviors of a network adapter. This class includes extra properties and methods that support the management of the TCP/IP and Internetworking Packet Exchange (IPX) protocols that are independent from the network adapter.')
win32NetworkAdapterConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwnacIndex"))
if mibBuilder.loadTexts: win32NetworkAdapterConfigEntry.setStatus('current')
if mibBuilder.loadTexts: win32NetworkAdapterConfigEntry.setDescription('None')
hwnacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIndex.setStatus('current')
if mibBuilder.loadTexts: hwnacIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwnacArpAlwaysSourceRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacArpAlwaysSourceRoute.setStatus('current')
if mibBuilder.loadTexts: hwnacArpAlwaysSourceRoute.setDescription('If TRUE, TCP/IP transmits Address Resolution Protocol (ARP) queries with source routing enabled on Token Ring networks. By default (FALSE), ARP first queries without source routing, and then retries with source routing enabled if no reply is received. Source routing allows the routing of network packets across different types of networks.')
hwnacArpUseEtherSNAP = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacArpUseEtherSNAP.setStatus('current')
if mibBuilder.loadTexts: hwnacArpUseEtherSNAP.setDescription('If TRUE, Ethernet packets follow the IEEE 802.3 Sub-Network Access Protocol (SNAP) encoding. Setting this parameter to 1 forces TCP/IP to transmit Ethernet packets by using 802.3 SNAP encoding. By default (FALSE), the stack transmits packets in DIX Ethernet format. Windows NT/Windows 2000 systems can receive both formats.')
hwnacCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacCaption.setStatus('current')
if mibBuilder.loadTexts: hwnacCaption.setDescription('Description of the CIM_Setting object a one-line string. This property is inherited from CIM_Setting.')
hwnacDatabasePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDatabasePath.setStatus('current')
if mibBuilder.loadTexts: hwnacDatabasePath.setDescription('Valid Windows file path to standard Internet database files (HOSTS, LMHOSTS, NETWORKS, PROTOCOLS). The file path is used by the Windows Sockets interface. This property is only available on Windows NT/Windows 2000 systems.')
hwnacDeadGWDetectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDeadGWDetectEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacDeadGWDetectEnabled.setDescription('If TRUE, dead gateway detection occurs. With this feature enabled, Transmission Control Protocol (TCP) asks Internet Protocol (IP) to change to a backup gateway if it re-transmits a segment several times without receiving a response.')
hwnacDefaultIPGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDefaultIPGateway.setStatus('current')
if mibBuilder.loadTexts: hwnacDefaultIPGateway.setDescription("Array of IP addresses of default gateways that the computer system uses. Example: '192.168.12.1 192.168.46.1'")
hwnacDefaultTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDefaultTOS.setStatus('current')
if mibBuilder.loadTexts: hwnacDefaultTOS.setDescription('Default Type Of Service (TOS) value set in the header of outgoing IP packets. Request for Comments (RFC) 791 defines the values. Default: 0, Valid Range: 0 - 255.')
hwnacDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: hwnacDefaultTTL.setDescription('Default Time To Live (TTL) value set in the header of outgoing IP packets. The TTL specifies the number of routers an IP packet can pass through to reach its destination before being discarded. Each router decrements by one the TTL count of a packet as it passes through and discards the packets if the TTL is 0 (zero). Default: 32, Valid Range: 1 - 255.')
hwnacDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDescription.setStatus('current')
if mibBuilder.loadTexts: hwnacDescription.setDescription('Description of the CIM_Setting object. This property is inherited from CIM_Setting.')
hwnacDHCPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDHCPEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacDHCPEnabled.setDescription('If TRUE, the dynamic host configuration protocol (DHCP) server automatically assigns an IP address to the computer system when establishing a network connection.')
hwnacDHCPLeaseExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDHCPLeaseExpires.setStatus('current')
if mibBuilder.loadTexts: hwnacDHCPLeaseExpires.setDescription('Expiration date and time for a leased IP address that was assigned to the computer by the dynamic host configuration protocol (DHCP) server. Example: 20521201000230.000000000')
hwnacDHCPLeaseObtained = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDHCPLeaseObtained.setStatus('current')
if mibBuilder.loadTexts: hwnacDHCPLeaseObtained.setDescription('Date and time the lease was obtained for the IP address assigned to the computer by the dynamic host configuration protocol (DHCP) server. Example: 19521201000230.000000000')
hwnacDHCPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDHCPServer.setStatus('current')
if mibBuilder.loadTexts: hwnacDHCPServer.setDescription("IP address of the dynamic host configuration protocol (DHCP) server. Example: '10.55.34'")
hwnacDNSDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDNSDomain.setStatus('current')
if mibBuilder.loadTexts: hwnacDNSDomain.setDescription("Organization name followed by a period and an extension that indicates the type of organization, such as microsoft.com. The name can be any combination of the letters A through Z, the numerals 0 through 9, and the hyphen (-), plus the period (.) character used as a separator. Example: 'microsoft.com'")
hwnacDNSDomainSuffixSearchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDNSDomainSuffixSearchOrder.setStatus('current')
if mibBuilder.loadTexts: hwnacDNSDomainSuffixSearchOrder.setDescription("Array of DNS domain suffixes to be appended to the end of host names during name resolution. When attempting to resolve a fully-qualified domain name (FQDN) from a host only name, the system will first append the local domain name. If this is not successful, the system will use the domain suffix list to create additional FQDNs in the order listed and query DNS servers for each Example: 'samples.microsoft.com example.microsoft.com'")
hwnacDNSEnabledForWINSResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDNSEnabledForWINSResolution.setStatus('current')
if mibBuilder.loadTexts: hwnacDNSEnabledForWINSResolution.setDescription('If TRUE, the Domain Name System (DNS) is enabled for name resolution over Windows Internet Naming Service (WINS) resolution. If the name cannot be resolved using DNS, the name request is forwarded to WINS for resolution.')
hwnacDNSHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDNSHostName.setStatus('current')
if mibBuilder.loadTexts: hwnacDNSHostName.setDescription("Host name used to identify the local computer for authentication by some utilities. Other TCP/IP-based utilities can use this value to acquire the name of the local computer. Host names are stored on DNS servers in a table that maps names to IP addresses for use by DNS. The name can be any combination of the letters A through Z, the numerals 0 through 9, and the hyphen (-), plus the period (.) character used as a separator. By default, this value is the Microsoft networking computer name, but the network administrator can assign another host name without affecting the computer name. Example: 'corpdns'")
hwnacDNSServerSearchOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDNSServerSearchOrder.setStatus('current')
if mibBuilder.loadTexts: hwnacDNSServerSearchOrder.setDescription('Array of server IP addresses to be used in querying for DNS servers.')
hwnacDomainDNSRegistrationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacDomainDNSRegistrationEnable.setStatus('current')
if mibBuilder.loadTexts: hwnacDomainDNSRegistrationEnable.setDescription("If TRUE, the IP addresses for this connection are registered in DNS under the domain name of this connection in addition to being registered under the computer's full DNS name. The domain name of this connection is either set using the SetDNSDomain() method or assigned by DSCP. The registered name is the host name of the computer with the domain name appended. This property is new for Windows XP.")
hwnacForwardBufferMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 21), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacForwardBufferMemory.setStatus('current')
if mibBuilder.loadTexts: hwnacForwardBufferMemory.setDescription('Memory allocated by IP to store packet data in the router packet queue. When this buffer space is filled, the router begins discarding packets at random from its queue. Packet queue data buffers are 256 bytes in length, so the value of this parameter should be a multiple of 256. Multiple buffers are chained together for larger packets. The IP header for a packet is stored separately. This parameter is ignored and no buffers are allocated if the IP router is not enabled. The buffer size can range from the network MTU to the a value smaller than 0xFFFFFFFF. Default: 74240 (fifty 1480-byte packets, rounded to a multiple of 256).')
hwnacFullDNSRegistrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacFullDNSRegistrationEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacFullDNSRegistrationEnabled.setDescription("If TRUE, the IP addresses for this connection are registered in DNS under the computer's full DNS name. The full DNS name of the computer is displayed on the Network Identification tab in the System application in Control Panel. This property is new for Windows XP.")
hwnacGatewayCostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacGatewayCostMetric.setStatus('current')
if mibBuilder.loadTexts: hwnacGatewayCostMetric.setDescription('Array of integer cost metric values (ranging from 1 to 9999) to be used in calculating the fastest, most reliable, or least expensive routes. This argument has a one-to-one correspondence with the DefaultIPGateway property. Windows 2000 only.')
hwnacIGMPLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noMulticast", 0), ("ipMulticast", 1), ("ipIGMPMulticast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIGMPLevel.setStatus('current')
if mibBuilder.loadTexts: hwnacIGMPLevel.setDescription('Extent to which the system supports IP multicast and participates in the Internet Group Management Protocol. At level 0 (zero), the system provides no multicast support. At level 1, the system may only send IP multicast packets. At level 2, the system may send IP multicast packets and fully participate in IGMP to receive multicast packets.')
hwnacConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacConfigurationIndex.setStatus('current')
if mibBuilder.loadTexts: hwnacConfigurationIndex.setDescription('Index number of the Windows network adapter configuration. The index number is used when there is more than one configuration available.')
hwnacInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwnacInterfaceIndex.setDescription('Index value that uniquely identifies a local network interface. The value in this property is the same as the value in the InterfaceIndex property in the instance of Win32_IP4RouteTable that represents the network interface in the route table. Windows XP and earlier: The InterfaceIndex property is not available.')
hwnacIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 27), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwnacIPAddress.setDescription("Array of all of the IP addresses associated with the current network adapter. Example: '172.16.22.0'")
hwnacIPConnectionMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPConnectionMetric.setStatus('current')
if mibBuilder.loadTexts: hwnacIPConnectionMetric.setDescription('Cost of using the configured routes for the IP bound adapter and is the weighted value for those routes in the IP routing table. If there are multiple routes to a destination in the IP routing table, the route with the lowest metric is used. The default value is 1. This property is new for Windows XP.')
hwnacIPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 29), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacIPEnabled.setDescription('If TRUE, TCP/IP is bound and enabled on this network adapter.')
hwnacIPFilterSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPFilterSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacIPFilterSecurityEnabled.setDescription('If TRUE, IP port security is enabled globally across all IP-bound network adapters and the security values associated with individual network adapters are in effect. This property is used in conjunction with IPSecPermitTCPPorts, IPSecPermitUDPPorts, and IPSecPermitIPProtocols. If FALSE, IP filter security is disabled across all network adapters and allows all port and protocol traffic to flow unfiltered.')
hwnacIPPortSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPPortSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacIPPortSecurityEnabled.setDescription('If TRUE, IP port security is enabled globally across all IP-bound network adapters. This property is obsolete. In place of this property, you should use IPFilterSecurityEnabled.')
hwnacIPSecPermitIPProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPSecPermitIPProtocols.setStatus('current')
if mibBuilder.loadTexts: hwnacIPSecPermitIPProtocols.setDescription('Array of the protocols permitted to run over the IP. The list of protocols is defined using the EnableIPSec method. The list will either be empty or contain numeric values. A numeric value of 0 (zero) indicates access permission is granted for all protocols. An empty string indicates that no protocols are permitted to run when IPFilterSecurityEnabled is TRUE.')
hwnacIPSecPermitTCPPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPSecPermitTCPPorts.setStatus('current')
if mibBuilder.loadTexts: hwnacIPSecPermitTCPPorts.setDescription('Array of the ports that will be granted access permission for TCP. The list of protocols is defined using the EnableIPSec method. The list will either be empty or contain numeric values. A numeric value of 0 (zero)indicates access permission is granted for all ports. An empty string indicates that no ports are granted access permission when IPFilterSecurityEnabled is TRUE.')
hwnacIPSecPermitUDPPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPSecPermitUDPPorts.setStatus('current')
if mibBuilder.loadTexts: hwnacIPSecPermitUDPPorts.setDescription('Array of the ports that will be granted User Datagram Protocol (UDP) access permission. The list of protocols is defined using the EnableIPSec method. The list will either be empty or contain numeric values. A numeric value of 0 (zero) indicates access permission is granted for all ports. An empty string indicates that no ports are granted access permission when IPFilterSecurityEnabled is TRUE.')
hwnacIPSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPSubnet.setStatus('current')
if mibBuilder.loadTexts: hwnacIPSubnet.setDescription("Array of all the subnet masks associated with the current network adapter. Example: '255.255.0'")
hwnacIPUseZeroBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPUseZeroBroadcast.setStatus('current')
if mibBuilder.loadTexts: hwnacIPUseZeroBroadcast.setDescription('If TRUE, IP zeros-broadcasts are used (0.0.0.0), and the system uses ones-broadcasts (255.255.255.255). Computer systems generally use ones-broadcasts, but those derived from BSD implementations use zeros-broadcasts. Systems that do not use that same broadcasts will not interoperate on the same network. The default is FALSE.')
hwnacIPXAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPXAddress.setStatus('current')
if mibBuilder.loadTexts: hwnacIPXAddress.setDescription('Internetworking Packet Exchange (IPX) address of the network adapter. The IPX address identifies a computer system on a network using the IPX protocol.')
hwnacIPXEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 38), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPXEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacIPXEnabled.setDescription('If TRUE, the or Internetwork Packet Exchange (IPX) protocol is bound and enabled for this adapter.')
hwnacIPXFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 39), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPXFrameType.setStatus('current')
if mibBuilder.loadTexts: hwnacIPXFrameType.setDescription('Array of frame type identifiers. The values in this array correspond to the elements in IPXNetworkNumber. Value Meaning 0 Ethernet II 1 Ethernet 802.3 2 Ethernet 802.2 3 Ethernet SNAP 255 AUTO ')
hwnacIPXMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenRing", 2), ("fddi", 3), ("arcnet", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPXMediaType.setStatus('current')
if mibBuilder.loadTexts: hwnacIPXMediaType.setDescription('Internetworking Packet Exchange (IPX) media type identifier.')
hwnacIPXNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPXNetworkNumber.setStatus('current')
if mibBuilder.loadTexts: hwnacIPXNetworkNumber.setDescription('Array of characters that uniquely identifies a frame/network adapter combination on the computer system. The NetWare Link (NWLink) IPX/SPX-compatible transport in Windows 2000 and Windows NT 4.0 and later use two distinctly different types of network numbers. This number is sometimes referred to as the external network number. It must be unique for each network segment. The order in this string list will correspond item-for-item with the elements in the IPXFrameType property.')
hwnacIPXVirtualNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 42), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacIPXVirtualNetNumber.setStatus('current')
if mibBuilder.loadTexts: hwnacIPXVirtualNetNumber.setDescription('Unique identifier of the computer system on the network. It is represented in the form of an eight-character hexadecimal digit. Windows NT/Windows 2000 uses the virtual network number (also known as an internal network number) for internal routing.')
hwnacKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 43), Gauge32()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: hwnacKeepAliveInterval.setDescription('Interval separating Keep Alive Retransmissions until a response is received. After a response is received, the delay until the next Keep Alive Transmission is again controlled by the value of KeepAliveTime. The connection will be aborted after the number of retransmissions specified by TcpMaxDataRetransmissions have gone unanswered. Default: 1000, Valid Range: 1 - 0xFFFFFFFF.')
hwnacKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 44), Gauge32()).setUnits('Milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: hwnacKeepAliveTime.setDescription('The KeepAliveTime property indicates how often the TCP attempts to verify that an idle connection is still intact by sending a Keep Alive Packet. A remote system that is reachable will acknowledge the keep alive transmission. Keep Alive packets are not sent by default. This feature may be enabled in a connection by an application. Default: 7,200,000 (two hours)')
hwnacMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacMACAddress.setStatus('current')
if mibBuilder.loadTexts: hwnacMACAddress.setDescription("Media Access Control (MAC) address of the network adapter. A MAC address is assigned by the manufacturer to uniquely identify the network adapter. Example: '00:80:C7:8F:6C:96'")
hwnacMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 46), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacMTU.setStatus('current')
if mibBuilder.loadTexts: hwnacMTU.setDescription('Overrides the default Maximum Transmission Unit (MTU) for a network interface. The MTU is the maximum packet size (including the transport header) that the transport will transmit over the underlying network. The IP datagram can span multiple packets. The range of this value spans the minimum packet size (68) to the MTU supported by the underlying network.')
hwnacNumForwardPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacNumForwardPackets.setStatus('current')
if mibBuilder.loadTexts: hwnacNumForwardPackets.setDescription('Number of IP packet headers allocated for the router packet queue. When all headers are in use, the router will begin to discard packets from the queue at random. This value should be at least as large as the ForwardBufferMemory value divided by the maximum IP data size of the networks connected to the router. It should be no larger than the ForwardBufferMemory value divided by 256, since at least 256 bytes of forward buffer memory are used for each packet. The optimal number of forward packets for a given ForwardBufferMemory size depends on the type of traffic on the network. It will be somewhere between these two values. If the router is not enabled, this parameter is ignored and no headers are allocated. Default: 50, Valid Range: 1 - 0xFFFFFFFE')
hwnacPMTUBHDetectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 48), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacPMTUBHDetectEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacPMTUBHDetectEnabled.setDescription("If TRUE, detection of black hole routers occurs while TCP discovers the path of the Maximum Transmission Unit. A black hole router does not return ICMP Destination Unreachable messages when it needs to fragment an IP datagram with the Don't Fragment bit set. TCP depends on receiving these messages to perform Path MTU Discovery. With this feature enabled, TCP will try to send segments without the Don't Fragment bit set if several retransmissions of a segment go unacknowledged. If the segment is acknowledged as a result, the MSS will be decreased and the Don't Fragment bit will be set in future packets on the connection. Enabling black hole detection increases the maximum number of retransmissions performed for a given segment. The default value of this property is FALSE.")
hwnacPMTUDiscoveryEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacPMTUDiscoveryEnabled.setStatus('current')
if mibBuilder.loadTexts: hwnacPMTUDiscoveryEnabled.setDescription('If TRUE, the Maximum Transmission Unit (MTU) path is discovered over the path to a remote host. By discovering the MTU path and limiting TCP segments to this size, TCP can eliminate fragmentation at routers along the path that connect networks with different MTUs. Fragmentation adversely affects TCP throughput and network congestion. Setting this parameter to FALSE causes an MTU of 576 bytes to be used for all connections that are not to machines on the local subnet. The default is TRUE.')
hwnacServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 50), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacServiceName.setStatus('current')
if mibBuilder.loadTexts: hwnacServiceName.setDescription("Service name of the network adapter. This name is usually shorter than the full product name. Example: 'Elnkii'")
hwnacSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 51), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacSettingID.setStatus('current')
if mibBuilder.loadTexts: hwnacSettingID.setDescription('Identifier by which the CIM_Setting object is known. This property is inherited from CIM_Setting.')
hwnacTcpipNetbiosOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("n0x0EnableNetbiosViaDhcp", 0), ("n0x1EnableNetbios", 1), ("n0x2DisableNetbios", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacTcpipNetbiosOptions.setStatus('current')
if mibBuilder.loadTexts: hwnacTcpipNetbiosOptions.setDescription('Bitmap of the possible settings related to NetBIOSover TCP/IP. This property is new for Windows XP.')
hwnacTcpMaxConnectRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacTcpMaxConnectRetransmission.setStatus('current')
if mibBuilder.loadTexts: hwnacTcpMaxConnectRetransmission.setDescription('Number of times TCP attempts to retransmit a Connect Request before terminating the connection. The initial retransmission timeout is 3 seconds. The retransmission timeout doubles for each attempt. Default: 3, Valid Range: 0 - 0xFFFFFFFF.')
hwnacTcpMaxDataRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacTcpMaxDataRetransmissions.setStatus('current')
if mibBuilder.loadTexts: hwnacTcpMaxDataRetransmissions.setDescription('Number of times TCP re-transmits an individual data segment (non-connect segment) before terminating the connection. The retransmission time-out doubles with each successive retransmission on a connection. Default: 5, Valid Range: 0 - 0xFFFFFFFF.')
hwnacTcpNumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacTcpNumConnections.setStatus('current')
if mibBuilder.loadTexts: hwnacTcpNumConnections.setDescription('Maximum number of connections that TCP can have open simultaneously. Default: 0xFFFFFE, Valid Range: 0 - 0xFFFFFE.')
hwnacTcpUseRFC1122UrgentPointer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 56), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacTcpUseRFC1122UrgentPointer.setStatus('current')
if mibBuilder.loadTexts: hwnacTcpUseRFC1122UrgentPointer.setDescription('If TRUE, TCP uses the RFC 1122 specification for urgent data. If FALSE (default), TCP uses the mode used by Berkeley Software Design (BSD) derived systems. The two mechanisms interpret the urgent pointer differently and are not interoperable. Windows 2000 and Windows NT version 3.51 and later default to BSD mode.')
hwnacTcpWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 57), Integer32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacTcpWindowSize.setStatus('current')
if mibBuilder.loadTexts: hwnacTcpWindowSize.setDescription('Maximum TCP Receive Window size offered by the system. The Receive Window specifies the number of bytes a sender may transmit without receiving an acknowledgment. In general, larger receiving windows will improve performance over high delay and high bandwidth networks. For efficiency, the receiving window should be an even multiple of the TCP Maximum Segment Size (MSS). Default: Four times the maximum TCP data size or an even multiple of TCP data size rounded up to the nearest multiple of 8192. Ethernet networks default to 8760. Valid range: 0 - 65535.')
hwnacWINSEnableLMHostsLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 58), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacWINSEnableLMHostsLookup.setStatus('current')
if mibBuilder.loadTexts: hwnacWINSEnableLMHostsLookup.setDescription('If TRUE, local lookup files are used. Lookup files will contain a map of IP addresses to host names. If they exist on the local system, they will be found in %SystemRoot%\\system32\\drivers\\etc.')
hwnacWINSHostLookupFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 59), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacWINSHostLookupFile.setStatus('current')
if mibBuilder.loadTexts: hwnacWINSHostLookupFile.setDescription('Path to a WINS lookup file on the local system. This file will contain a map of IP addresses to host names. If the file specified in this property is found, it will be copied to the %SystemRoot%\\system32\\drivers\\etc folder of the local system. Valid only if the WINSEnableLMHostsLookup property is TRUE.')
hwnacWINSPrimaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 60), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacWINSPrimaryServer.setStatus('current')
if mibBuilder.loadTexts: hwnacWINSPrimaryServer.setDescription('IP address for the primary WINS server.')
hwnacWINSScopeID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 61), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacWINSScopeID.setStatus('current')
if mibBuilder.loadTexts: hwnacWINSScopeID.setDescription('Value appended to the end of the NetBIOS name that isolates a group of computer systems communicating with only each other. It is used for all NetBIOS transactions over TCP/IP communications from that computer system. Computers configured with identical scope identifiers are able to communicate with this computer. TCP/IP clients with different scope identifiers disregard packets from computers with this scope identifier. Valid only when the EnableWINS method executes successfully.')
hwnacWINSSecondaryServer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 5, 2, 1, 62), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwnacWINSSecondaryServer.setStatus('current')
if mibBuilder.loadTexts: hwnacWINSSecondaryServer.setDescription('IP address for the secondary WINS server.')
wmiPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6))
if mibBuilder.loadTexts: wmiPower.setStatus('current')
if mibBuilder.loadTexts: wmiPower.setDescription('The Power subcategory groups classes that represent power supplies, batteries, and events related to these devices.')
win32BatteryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1), )
if mibBuilder.loadTexts: win32BatteryTable.setStatus('current')
if mibBuilder.loadTexts: win32BatteryTable.setDescription('The Win32_Battery WMI class represents a battery connected to the computer system. Windows 2000 and Windows 98 do not report instances of Win32_Battery unless Advanced Power Management (APM) is enabled on the system, and a battery is present.')
win32BatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwbaIndex"))
if mibBuilder.loadTexts: win32BatteryEntry.setStatus('current')
if mibBuilder.loadTexts: win32BatteryEntry.setDescription('None')
hwbaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaIndex.setStatus('current')
if mibBuilder.loadTexts: hwbaIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwbaAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaAvailability.setStatus('current')
if mibBuilder.loadTexts: hwbaAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwbaBatteryRechargeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 3), Gauge32()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaBatteryRechargeTime.setStatus('current')
if mibBuilder.loadTexts: hwbaBatteryRechargeTime.setDescription('Time required to fully charge the battery. This property is not supported. BatteryRechargeTime does not have a replacement property, and is now considered obsolete.')
hwbaBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("fullyCharged", 3), ("low", 4), ("critical", 5), ("charging", 6), ("chargingAndHigh", 7), ("chargingAndLow", 8), ("chargingAndCritical", 9), ("undefined", 10), ("partiallyCharged", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: hwbaBatteryStatus.setDescription('Status of the battery. The value 10 (Undefined) is not valid in the CIM schema because in DMI it represents that no battery is installed. In this case, the object should not be instantiated. This property is inherited from CIM_Battery.')
hwbaCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaCaption.setStatus('current')
if mibBuilder.loadTexts: hwbaCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwbaChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leadAcid", 3), ("nickelCadmium", 4), ("nickelMetalHydride", 5), ("lithiumion", 6), ("zincAir", 7), ("lithiumPolymer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaChemistry.setStatus('current')
if mibBuilder.loadTexts: hwbaChemistry.setDescription("Enumeration that describes the battery's chemistry. This property is inherited from CIM_Battery.")
hwbaConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwbaConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. For more information, see the Remarks section of this topic. This property is inherited from CIM_LogicalDevice.')
hwbaConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwbaConfigManagerUserConfig.setDescription('If true, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice. ')
hwbaCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 9), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwbaCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice. ')
hwbaDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaDescription.setStatus('current')
if mibBuilder.loadTexts: hwbaDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement. ')
hwbaDesignCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaDesignCapacity.setStatus('current')
if mibBuilder.loadTexts: hwbaDesignCapacity.setDescription('Design capacity of the battery in milliwatt-hours. If the property is not supported, enter 0 (zero). This property is inherited from CIM_Battery. ')
hwbaDesignVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaDesignVoltage.setStatus('current')
if mibBuilder.loadTexts: hwbaDesignVoltage.setDescription('Design voltage of the battery in millivolts. If the attribute is not supported, enter 0 (zero). This property is inherited from CIM_Battery. ')
hwbaDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwbaDeviceID.setDescription("Identifies the battery. This property is inherited from CIM_LogicalDevice. Example: 'Internal Battery'")
hwbaErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwbaErrorCleared.setDescription('If true, the error reported in the LastErrorCode property is now cleared. This property is inherited from CIM_LogicalDevice.')
hwbaErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwbaErrorDescription.setDescription('Free-form string that supplies more information about the error recorded in LastErrorCode property, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwbaEstimatedChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaEstimatedChargeRemaining.setStatus('current')
if mibBuilder.loadTexts: hwbaEstimatedChargeRemaining.setDescription('Estimate of the percentage of full charge remaining. This property is inherited from CIM_Battery.')
hwbaEstimatedRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaEstimatedRunTime.setStatus('current')
if mibBuilder.loadTexts: hwbaEstimatedRunTime.setDescription('Estimate in minutes of the time to battery charge depletion under the present load conditions if the utility power is off, or lost and remains off, or a laptop is disconnected from a power source. This property is inherited from CIM_Battery.')
hwbaExpectedBatteryLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 18), Gauge32()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaExpectedBatteryLife.setStatus('current')
if mibBuilder.loadTexts: hwbaExpectedBatteryLife.setDescription('Amount of time it takes to completely drain the battery after it is fully charged. This property is no longer used and is considered obsolete.')
hwbaExpectedLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaExpectedLife.setStatus('current')
if mibBuilder.loadTexts: hwbaExpectedLife.setDescription("Battery's expected lifetime in minutes, assuming that the battery is fully charged. The property represents the total expected life of the battery, not its current remaining life, which is indicated by the EstimatedRunTime property. This property is inherited from CIM_Battery.")
hwbaFullChargeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaFullChargeCapacity.setStatus('current')
if mibBuilder.loadTexts: hwbaFullChargeCapacity.setDescription("Full charge capacity of the battery in milliwatt-hours. Comparison of the value to the DesignCapacity property determines when the battery requires replacement. A battery's end of life is typically when the FullChargeCapacity property falls below 80% of the DesignCapacity property. If the property is not supported, enter 0 (zero). This property is inherited from CIM_Battery.")
hwbaInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwbaInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwbaLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwbaLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwbaMaxRechargeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaMaxRechargeTime.setStatus('current')
if mibBuilder.loadTexts: hwbaMaxRechargeTime.setDescription('Maximum time, in minutes, to fully charge the battery. The property represents the time to recharge a fully depleted battery, not the current remaining charge time, which is indicated in the TimeToFullCharge property. This property is inherited from CIM_Battery.')
hwbaName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaName.setStatus('current')
if mibBuilder.loadTexts: hwbaName.setDescription('Defines the label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwbaPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwbaPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwbaPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwbaPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled, but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwbaPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwbaPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwbaSmartBatteryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaSmartBatteryVersion.setStatus('current')
if mibBuilder.loadTexts: hwbaSmartBatteryVersion.setDescription('Data Specification version number supported by the battery. If the battery does not support this function, the value should be left blank. This property is inherited from CIM_Battery.')
hwbaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaStatus.setStatus('current')
if mibBuilder.loadTexts: hwbaStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwbaStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwbaStatusInfo.setDescription('State of the logical device. If the property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwbaSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwbaSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwbaSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaSystemName.setStatus('current')
if mibBuilder.loadTexts: hwbaSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwbaTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaTimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: hwbaTimeOnBattery.setDescription("Elapsed time in seconds since the computer system's UPS last switched to battery power, or the time since the system or UPS was last restarted, whichever is less. If the battery is 'on line', 0 (zero) is returned. This property is inherited from CIM_Battery.")
hwbaTimeToFullCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 1, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwbaTimeToFullCharge.setStatus('current')
if mibBuilder.loadTexts: hwbaTimeToFullCharge.setDescription('Remaining time to charge the battery fully in minutes at the current charging rate and usage. This property is inherited from CIM_Battery.')
win32CurrentProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2), )
if mibBuilder.loadTexts: win32CurrentProbeTable.setStatus('current')
if mibBuilder.loadTexts: win32CurrentProbeTable.setDescription('The Win32_CurrentProbe WMI class represents the properties of a current monitoring sensor (ammeter).')
win32CurrentProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwcpIndex"))
if mibBuilder.loadTexts: win32CurrentProbeEntry.setStatus('current')
if mibBuilder.loadTexts: win32CurrentProbeEntry.setDescription('None')
hwcpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpIndex.setStatus('current')
if mibBuilder.loadTexts: hwcpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwcpAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 2), Integer32()).setUnits('Hundredths of Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpAccuracy.setStatus('current')
if mibBuilder.loadTexts: hwcpAccuracy.setDescription('Accuracy of the sensor for the measured property. The value is recorded as plus/minus hundredths of a percent. Accuracy, along with resolution and tolerance, is used to calculate the actual value of the measured physical property. Accuracy may vary and depends on whether or not the device is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwcpAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpAvailability.setStatus('current')
if mibBuilder.loadTexts: hwcpAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice. ')
hwcpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpCaption.setStatus('current')
if mibBuilder.loadTexts: hwcpCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwcpConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcpConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwcpConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwcpConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwcpCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcpCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwcpCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 8), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpCurrentReading.setStatus('current')
if mibBuilder.loadTexts: hwcpCurrentReading.setDescription('Current value indicated by the sensor. This property is inherited from CIM_NumericSensor.')
hwcpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpDescription.setStatus('current')
if mibBuilder.loadTexts: hwcpDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwcpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcpDeviceID.setDescription('Unique identifier of the current probe. This property is inherited from CIM_LogicalDevice.')
hwcpErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwcpErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwcpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwcpErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwcpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwcpInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwcpIsLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpIsLinear.setStatus('current')
if mibBuilder.loadTexts: hwcpIsLinear.setDescription('If TRUE, the sensor is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwcpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwcpLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwcpLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 16), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpLowerThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: hwcpLowerThresholdCritical.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine whether or not the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdCritical and LowerThresholdFatal, the current state is critical. This property is inherited from CIM_NumericSensor.')
hwcpLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 17), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpLowerThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: hwcpLowerThresholdFatal.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) for determining whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is below LowerThresholdFatal, the current state is fatal. This property is inherited from CIM_NumericSensor.")
hwcpLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 18), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpLowerThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: hwcpLowerThresholdNonCritical.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) for determining whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdNonCritical and UpperThresholdNonCritical, the sensor is reporting a normal value. If CurrentReading is between LowerThresholdNonCritical and LowerThresholdCritical, the current state is non-critical. This property is inherited from CIM_NumericSensor.")
hwcpMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 19), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpMaxReadable.setStatus('current')
if mibBuilder.loadTexts: hwcpMaxReadable.setDescription('Largest value of the measured property that can be read by the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwcpMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 20), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpMinReadable.setStatus('current')
if mibBuilder.loadTexts: hwcpMinReadable.setDescription('Smallest value of the measured property that can be read by the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwcpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpName.setStatus('current')
if mibBuilder.loadTexts: hwcpName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwcpNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 22), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpNominalReading.setStatus('current')
if mibBuilder.loadTexts: hwcpNominalReading.setDescription('Normal or expected value for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwcpNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 23), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpNormalMax.setStatus('current')
if mibBuilder.loadTexts: hwcpNormalMax.setDescription('Normal or expected value for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwcpNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 24), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpNormalMin.setStatus('current')
if mibBuilder.loadTexts: hwcpNormalMin.setDescription('Guidance for the user as to the normal minimum range for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwcpPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwcpPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwcpPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwcpPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwcpPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwcpPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwcpResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 28), Gauge32()).setUnits('Tenths of Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpResolution.setStatus('current')
if mibBuilder.loadTexts: hwcpResolution.setDescription('Ability of the sensor to resolve differences in the measured property. This value may vary depending on whether the device is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpStatus.setStatus('current')
if mibBuilder.loadTexts: hwcpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwcpStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwcpStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwcpSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwcpSystemCreationClassName.setDescription("Value for the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwcpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpSystemName.setStatus('current')
if mibBuilder.loadTexts: hwcpSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwcpTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 33), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpTolerance.setStatus('current')
if mibBuilder.loadTexts: hwcpTolerance.setDescription('Tolerance of the sensor for the measured property. Tolerance, along with resolution and accuracy, is used to calculate the actual value of the measured physical property. Tolerance may vary depending on whether the device is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwcpUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 34), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpUpperThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: hwcpUpperThresholdCritical.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) for determining whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between UpperThresholdCritical and UpperThresholdFatal, the current state is critical. This property is inherited from CIM_NumericSensor.")
hwcpUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 35), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpUpperThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: hwcpUpperThresholdFatal.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) for determining whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is above UpperThresholdFatal, the current state is fatal. This property is inherited from CIM_NumericSensor.")
hwcpUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 2, 1, 36), Integer32()).setUnits('Milliamps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwcpUpperThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: hwcpUpperThresholdNonCritical.setDescription("Sensor's threshold values specify the ranges (minimum and maximum values) for determining whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdNonCritical and UpperThresholdNonCritical, the sensor is reporting a normal value. If CurrentReading is between UpperThresholdNonCritical and UpperThresholdCritical, the current state is non-critical. This property is inherited from CIM_NumericSensor.")
win32PortableBatteryTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3), )
if mibBuilder.loadTexts: win32PortableBatteryTable.setStatus('current')
if mibBuilder.loadTexts: win32PortableBatteryTable.setDescription('The Win32_PortableBattery WMI class contains the properties related to a portable battery, such a notebook computer battery.')
win32PortableBatteryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpbIndex"))
if mibBuilder.loadTexts: win32PortableBatteryEntry.setStatus('current')
if mibBuilder.loadTexts: win32PortableBatteryEntry.setDescription('None')
hwpbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbIndex.setStatus('current')
if mibBuilder.loadTexts: hwpbIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpbAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbAvailability.setStatus('current')
if mibBuilder.loadTexts: hwpbAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwpbBatteryRechargeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbBatteryRechargeTime.setStatus('current')
if mibBuilder.loadTexts: hwpbBatteryRechargeTime.setDescription('Time required to fully charge the battery. This property is inherited from CIM_Battery. Windows 2000: This property is not supported. Windows XP and Windows Server 2003: This property is removed.')
hwpbBatteryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("fullyCharged", 3), ("low", 4), ("critical", 5), ("charging", 6), ("chargingAndHigh", 7), ("chargingAndLow", 8), ("chargingAndCritical", 9), ("undefined", 10), ("partiallyCharged", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbBatteryStatus.setStatus('current')
if mibBuilder.loadTexts: hwpbBatteryStatus.setDescription("Description of the battery's charge status. The value 10 (Undefined) is not valid in the Common Information Model (CIM) schema because in Desktop Management Interface (DMI) it represents that no battery is installed. In this case, this object should not be instantiated. This property is inherited from CIM_Battery.")
hwpbCapacityMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbCapacityMultiplier.setStatus('current')
if mibBuilder.loadTexts: hwpbCapacityMultiplier.setDescription('Multiplication factor of the DesignCapacity value to ensure that the milliwatt hour value does not overflow for Smart Battery Data Specification (SBDS) implementations.')
hwpbCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbCaption.setStatus('current')
if mibBuilder.loadTexts: hwpbCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwpbChemistry = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("leadAcid", 3), ("nickelCadmium", 4), ("nickelMetalHydride", 5), ("lithiumion", 6), ("zincAir", 7), ("lithiumPolymer", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbChemistry.setStatus('current')
if mibBuilder.loadTexts: hwpbChemistry.setDescription('Chemistry of the battery. This property is inherited from CIM_Battery.')
hwpbConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpbConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwpbConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwpbConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwpbCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 10), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpbCreationClassName.setDescription('Name of the first concrete class that appears in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwpbDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbDescription.setStatus('current')
if mibBuilder.loadTexts: hwpbDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpbDesignCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbDesignCapacity.setStatus('current')
if mibBuilder.loadTexts: hwpbDesignCapacity.setDescription('Design capacity of the battery in milliwatt-hours. If this property is not supported, enter 0 (zero). This property is inherited from CIM_Battery.')
hwpbDesignVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbDesignVoltage.setStatus('current')
if mibBuilder.loadTexts: hwpbDesignVoltage.setDescription('Design voltage of the battery in Millivolts. If this attribute is not supported, enter 0 (zero). This property is inherited from CIM_Battery.')
hwpbDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpbDeviceID.setDescription("Battery identifier. This property is inherited from CIM_LogicalDevice. Example: 'Internal Battery'")
hwpbErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwpbErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwpbErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwpbErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwpbEstimatedChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbEstimatedChargeRemaining.setStatus('current')
if mibBuilder.loadTexts: hwpbEstimatedChargeRemaining.setDescription('Estimate of the percentage of full charge remaining. This property is inherited from CIM_Battery.')
hwpbEstimatedRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbEstimatedRunTime.setStatus('current')
if mibBuilder.loadTexts: hwpbEstimatedRunTime.setDescription('Estimate in minutes of the time to battery charge depletion under the present load conditions if the utility power is off, or lost and remains off, or a laptop is disconnected from a power source. This property is inherited from CIM_Battery.')
hwpbExpectedBatteryLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbExpectedBatteryLife.setStatus('current')
if mibBuilder.loadTexts: hwpbExpectedBatteryLife.setDescription('Amount of time it takes to completely drain the battery after it has been fully charged. This property is inherited from CIM_Battery. Windows 2000: This property is not supported. Windows XP and Windows Server 2003: This property has been removed.')
hwpbExpectedLife = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbExpectedLife.setStatus('current')
if mibBuilder.loadTexts: hwpbExpectedLife.setDescription("Battery's expected lifetime in minutes, assuming that the battery is fully charged. This property represents the total expected life of the battery, not its current remaining life, which is indicated by the EstimatedRunTime property. This property is inherited from CIM_Battery.")
hwpbFullChargeCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbFullChargeCapacity.setStatus('current')
if mibBuilder.loadTexts: hwpbFullChargeCapacity.setDescription("Full charge capacity of the battery in milliwatt-hours. Comparison of this value to the DesignCapacity property determines when the battery requires replacement. A battery's end of life is typically when the FullChargeCapacity property falls below 80% of the DesignCapacity property. If this property is not supported, enter 0 (zero). This property is inherited from CIM_Battery.")
hwpbInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 22), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpbInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpbLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpbLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwpbLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbLocation.setStatus('current')
if mibBuilder.loadTexts: hwpbLocation.setDescription("Physical location of the battery. This property is filled by the computer manufacturer. Example: 'In the back, on the left-hand side'")
hwpbManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbManufactureDate.setStatus('current')
if mibBuilder.loadTexts: hwpbManufactureDate.setDescription('Date when the battery was manufactured.')
hwpbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwpbManufacturer.setDescription('Manufacturer of the battery.')
hwpbMaxBatteryError = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 27), Integer32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbMaxBatteryError.setStatus('current')
if mibBuilder.loadTexts: hwpbMaxBatteryError.setDescription('Difference between the highest estimated amount of energy left in the battery and the current amount reported by the battery.')
hwpbMaxRechargeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbMaxRechargeTime.setStatus('current')
if mibBuilder.loadTexts: hwpbMaxRechargeTime.setDescription('Maximum time, in minutes, to fully charge the battery. This property represents the time to recharge a fully depleted battery, not the current remaining charge time, which is indicated in the TimeToFullCharge property. This property is inherited from CIM_Battery.')
hwpbName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbName.setStatus('current')
if mibBuilder.loadTexts: hwpbName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpbPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpbPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwpbPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwpbPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Timeset to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwpbPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwpbPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwpbSmartBatteryVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbSmartBatteryVersion.setStatus('current')
if mibBuilder.loadTexts: hwpbSmartBatteryVersion.setDescription('Smart Battery Data Specification version number supported by this battery. If the battery does not support this function, the value should be left blank. This property is inherited from CIM_Battery.')
hwpbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbStatus.setStatus('current')
if mibBuilder.loadTexts: hwpbStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpbStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwpbStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwpbSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpbSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwpbSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbSystemName.setStatus('current')
if mibBuilder.loadTexts: hwpbSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwpbTimeOnBattery = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbTimeOnBattery.setStatus('current')
if mibBuilder.loadTexts: hwpbTimeOnBattery.setDescription("Elapsed time in seconds since the computer system's UPS last switched to battery power, or the time since the system or UPS was last restarted, whichever is less. If the battery is online, 0 (zero) is returned. This property is inherited from CIM_Battery.")
hwpbTimeToFullCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 3, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpbTimeToFullCharge.setStatus('current')
if mibBuilder.loadTexts: hwpbTimeToFullCharge.setDescription('Remaining time in minutes to charge the battery fully at the current charge rate and usage. This property is inherited from CIM_Battery.')
win32UninterruptPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4), )
if mibBuilder.loadTexts: win32UninterruptPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: win32UninterruptPowerSupplyTable.setDescription('The Win32_UninterruptiblePowerSupply WMI class represents the capabilities and management capacity of an uninterruptible power supply (UPS). The properties of the UPS device indicate when incoming power is trimmed or boosted, and the aggregated information of the batteries, generators, and so on, that comprise the device. These individual components (for example, multiple batteries) can also be independently modeled and associated with the UPS.')
win32UninterruptPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1), ).setIndexNames((0, "INFORMANT-HW", "hwupsIndex"))
if mibBuilder.loadTexts: win32UninterruptPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: win32UninterruptPowerSupplyEntry.setDescription('None')
hwupsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsIndex.setStatus('current')
if mibBuilder.loadTexts: hwupsIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwupsActiveInputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("range1", 3), ("range2", 4), ("both", 5), ("neither", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsActiveInputVoltage.setStatus('current')
if mibBuilder.loadTexts: hwupsActiveInputVoltage.setDescription('Input voltage range currently in use. This property is inherited from CIM_PowerSupply.')
hwupsAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsAvailability.setStatus('current')
if mibBuilder.loadTexts: hwupsAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwupsBatteryInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsBatteryInstalled.setStatus('current')
if mibBuilder.loadTexts: hwupsBatteryInstalled.setDescription('If TRUE, a battery is installed on the device.')
hwupsCanTurnOffRemotely = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsCanTurnOffRemotely.setStatus('current')
if mibBuilder.loadTexts: hwupsCanTurnOffRemotely.setDescription('If TRUE, the power supply can be turned off remotely.')
hwupsCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 6), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsCaption.setStatus('current')
if mibBuilder.loadTexts: hwupsCaption.setDescription('Short description of an object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwupsCommandFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsCommandFile.setStatus('current')
if mibBuilder.loadTexts: hwupsCommandFile.setDescription('Name of a command file to execute immediately before shutting down.')
hwupsConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwupsConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwupsConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwupsConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwupsCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 10), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwupsCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwupsDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsDescription.setStatus('current')
if mibBuilder.loadTexts: hwupsDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwupsDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwupsDeviceID.setDescription('Unique identifier of this UPS device with other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwupsErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwupsErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwupsErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwupsErrorDescription.setDescription('Free-form string that supplies more information about the error recorded in LastErrorCode, and information about corrective actions that can be taken. This property is inherited from CIM_LogicalDevice.')
hwupsEstimatedChargeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsEstimatedChargeRemaining.setStatus('current')
if mibBuilder.loadTexts: hwupsEstimatedChargeRemaining.setDescription('Estimate of the percentage of full charge that remains for a UPS that uses battery technology. This property is inherited from CIM_UninterruptiblePowerSupply.')
hwupsEstimatedRunTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsEstimatedRunTime.setStatus('current')
if mibBuilder.loadTexts: hwupsEstimatedRunTime.setDescription('Estimated time, in minutes, until battery or generator depletion in the present load conditions if the utility power is off or lost and remains off. This property is inherited from CIM_UninterruptiblePowerSupply.')
hwupsFirstMessageDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 17), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsFirstMessageDelay.setStatus('current')
if mibBuilder.loadTexts: hwupsFirstMessageDelay.setDescription('Length of time between initial power failure and the first message sent to users. If power is restored within the FirstMessageDelay value, no message is sent, but the event is logged.')
hwupsInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwupsInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwupsIsSwitchingSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsIsSwitchingSupply.setStatus('current')
if mibBuilder.loadTexts: hwupsIsSwitchingSupply.setDescription('If TRUE, the power supply is a switching supply as opposed to linear. This property is inherited from CIM_PowerSupply.')
hwupsLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwupsLastErrorCode.setDescription('Last error code the logical device reports. This property is inherited from CIM_LogicalDevice.')
hwupsLowBatterySignal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsLowBatterySignal.setStatus('current')
if mibBuilder.loadTexts: hwupsLowBatterySignal.setDescription('If TRUE, the power supply has a low battery signal.')
hwupsMessageInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 22), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsMessageInterval.setStatus('current')
if mibBuilder.loadTexts: hwupsMessageInterval.setDescription('Length of time between messages sent to users to inform the users of power failure.')
hwupsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsName.setStatus('current')
if mibBuilder.loadTexts: hwupsName.setDescription('Label for the object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwupsPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwupsPNPDeviceID.setDescription("Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwupsPowerFailSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsPowerFailSignal.setStatus('current')
if mibBuilder.loadTexts: hwupsPowerFailSignal.setDescription('If TRUE, the power supply has a power failure signal.')
hwupsPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwupsPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwupsPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwupsPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwupsRange1InputFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange1InputFrequencyHigh.setStatus('current')
if mibBuilder.loadTexts: hwupsRange1InputFrequencyHigh.setDescription('Frequency, in hertz, at the high end of the power supply input frequency range 1. A value of 0 (zero) indicates DC. This property is inherited from CIM_PowerSupply.')
hwupsRange1InputFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange1InputFrequencyLow.setStatus('current')
if mibBuilder.loadTexts: hwupsRange1InputFrequencyLow.setDescription('Frequency, in hertz, at the low end of the power supply input frequency range 1. A value of 0 (zero) indicates DC. This property is inherited from CIM_PowerSupply.')
hwupsRange1InputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange1InputVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: hwupsRange1InputVoltageHigh.setDescription("Voltage level, in millivolts, above which the UPS must compensate by trimming the voltage. A value of 0 (zero)indicates that the voltage at trimming time is 'unknown'. This property is inherited from CIM_PowerSupply.")
hwupsRange1InputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange1InputVoltageLow.setStatus('current')
if mibBuilder.loadTexts: hwupsRange1InputVoltageLow.setDescription("Voltage level, in millivolts, below which the UPS must compensate by boosting the voltage using its power source. A value of 0 (zero) indicates that the voltage at boosting time is 'unknown'. This property is inherited from CIM_PowerSupply.")
hwupsRange2InputFrequencyHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange2InputFrequencyHigh.setStatus('current')
if mibBuilder.loadTexts: hwupsRange2InputFrequencyHigh.setDescription('Frequency, in hertz, at the high end of the power supply input frequency range 2. A value of 0 (zero) indicates DC. This property is inherited from CIM_PowerSupply.')
hwupsRange2InputFrequencyLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange2InputFrequencyLow.setStatus('current')
if mibBuilder.loadTexts: hwupsRange2InputFrequencyLow.setDescription('Frequency, in hertz, at the low end of the power supply input frequency range 2. A value of 0 (zero) indicates DC. This property is inherited from CIM_PowerSupply.')
hwupsRange2InputVoltageHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange2InputVoltageHigh.setStatus('current')
if mibBuilder.loadTexts: hwupsRange2InputVoltageHigh.setDescription("Voltage level, in millivolts, above which the UPS must compensate by trimming the voltage. A value of 0 (zero)indicates that the voltage at trimming time is 'unknown'. This property is inherited from CIM_PowerSupply.")
hwupsRange2InputVoltageLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRange2InputVoltageLow.setStatus('current')
if mibBuilder.loadTexts: hwupsRange2InputVoltageLow.setDescription("Voltage level, in millivolts, below which the UPS must compensate by using the power source to boost the voltage. A value of 0 (zero) indicates that the voltage at boosting time is 'unknown'. This property is inherited from CIM_PowerSupply.")
hwupsRemainingCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("norma", 2), ("low", 3), ("depleted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsRemainingCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: hwupsRemainingCapacityStatus.setDescription("Capacity remaining in the UPS' batteries and generator. Normal (2) indicates that the remaining estimated minutes of run-time is greater than the UPS' defined 'low power' state (typically two minutes). Low (3) indicates that the remaining estimated minutes of run-time is less than or equal to the UPS' defined 'low power' state. Depleted (4) indicates that the UPS will be unable to sustain the present load when and if the utility power is lost (including the possibility that the utility power is currently absent). This property is inherited from CIM_UninterruptiblePowerSupply.")
hwupsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsStatus.setStatus('current')
if mibBuilder.loadTexts: hwupsStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwupsStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwupsStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwupsSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 39), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwupsSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwupsSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 40), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsSystemName.setStatus('current')
if mibBuilder.loadTexts: hwupsSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwupsTimeOnBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsTimeOnBackup.setStatus('current')
if mibBuilder.loadTexts: hwupsTimeOnBackup.setDescription("Elapsed time, in seconds, after the UPS last switched to battery power, generator, or the time after the UPS was last restarted, whichever is less. If the UPS is 'on line', 0 (zero) is returned. This property is inherited from CIM_UninterruptiblePowerSupply.")
hwupsTotalOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsTotalOutputPower.setStatus('current')
if mibBuilder.loadTexts: hwupsTotalOutputPower.setDescription("Total output power of the power supply in milliwatts. The value 0 (zero) denotes 'unknown'. This property is inherited from CIM_PowerSupply.")
hwupsTypeOfRangeSwitching = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("manual", 3), ("autoswitch", 4), ("wideRange", 5), ("notApplicable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsTypeOfRangeSwitching.setStatus('current')
if mibBuilder.loadTexts: hwupsTypeOfRangeSwitching.setDescription('Type of input voltage range switching implemented in this power supply. This property is inherited from CIM_PowerSupply.')
hwupsUPSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 4, 1, 44), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwupsUPSPort.setStatus('current')
if mibBuilder.loadTexts: hwupsUPSPort.setDescription("Name of the serial port to which the UPS is connected. Example: 'COM1:'")
win32VoltageProbeTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5), )
if mibBuilder.loadTexts: win32VoltageProbeTable.setStatus('current')
if mibBuilder.loadTexts: win32VoltageProbeTable.setDescription('The Win32_VoltageProbe WMI class represents the properties of a voltage sensor (electronic voltmeter).')
win32VoltageProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1), ).setIndexNames((0, "INFORMANT-HW", "hwvpIndex"))
if mibBuilder.loadTexts: win32VoltageProbeEntry.setStatus('current')
if mibBuilder.loadTexts: win32VoltageProbeEntry.setDescription('None')
hwvpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpIndex.setStatus('current')
if mibBuilder.loadTexts: hwvpIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwvpAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 2), Integer32()).setUnits('Hundredths of Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpAccuracy.setStatus('current')
if mibBuilder.loadTexts: hwvpAccuracy.setDescription('Accuracy of the sensor for the measured property. The accuracy value is recorded as plus or minus hundredths of a percent. Accuracy, along with resolution and tolerance, is used to calculate the actual value of the measured physical property. The accuracy may vary and depends on whether or not the device is linear in its dynamic range. This property is inherited from CIM_NumericSensor.')
hwvpAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpAvailability.setStatus('current')
if mibBuilder.loadTexts: hwvpAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwvpCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpCaption.setStatus('current')
if mibBuilder.loadTexts: hwvpCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwvpConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwvpConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwvpConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwvpConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwvpCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwvpCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwvpCurrentReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 8), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpCurrentReading.setStatus('current')
if mibBuilder.loadTexts: hwvpCurrentReading.setDescription('Current value indicated by the sensor. This property is inherited from CIM_NumericSensor.')
hwvpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpDescription.setStatus('current')
if mibBuilder.loadTexts: hwvpDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwvpDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwvpDeviceID.setDescription('Unique identifier of the voltage probe. This property is inherited from CIM_LogicalDevice.')
hwvpErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwvpErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwvpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwvpErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information about any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwvpInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwvpInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwvpIsLinear = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpIsLinear.setStatus('current')
if mibBuilder.loadTexts: hwvpIsLinear.setDescription('If TRUE, the sensor is linear over its dynamic range. This property is inherited from CIM_NumericSensor.')
hwvpLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwvpLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwvpLowerThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 16), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpLowerThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: hwvpLowerThresholdCritical.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine if the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdCritical and LowerThresholdFatal, the current state is critical. This property is inherited from CIM_NumericSensor.')
hwvpLowerThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 17), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpLowerThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: hwvpLowerThresholdFatal.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine if the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is below LowerThresholdFatal, the current state is fatal. This property is inherited from CIM_NumericSensor.')
hwvpLowerThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 18), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpLowerThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: hwvpLowerThresholdNonCritical.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine if the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdNonCritical and UpperThresholdNonCritical, the sensor is reporting a normal value. If CurrentReading is between LowerThresholdNonCritical and LowerThresholdCritical, the current state is non-critical. This property is inherited from CIM_NumericSensor.')
hwvpMaxReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 19), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpMaxReadable.setStatus('current')
if mibBuilder.loadTexts: hwvpMaxReadable.setDescription('Largest value of the measured property that the numeric sensor can read. This property is inherited from CIM_NumericSensor.')
hwvpMinReadable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 20), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpMinReadable.setStatus('current')
if mibBuilder.loadTexts: hwvpMinReadable.setDescription('Smallest value of the measured property that the numeric sensor can read. This property is inherited from CIM_NumericSensor.')
hwvpName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpName.setStatus('current')
if mibBuilder.loadTexts: hwvpName.setDescription('Label for an object. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwvpNominalReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 22), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpNominalReading.setStatus('current')
if mibBuilder.loadTexts: hwvpNominalReading.setDescription('Normal or expected value for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwvpNormalMax = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 23), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpNormalMax.setStatus('current')
if mibBuilder.loadTexts: hwvpNormalMax.setDescription('Normal or expected value for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwvpNormalMin = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 24), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpNormalMin.setStatus('current')
if mibBuilder.loadTexts: hwvpNormalMin.setDescription('Guidance for the user to indicate the normal minimum range for the numeric sensor. This property is inherited from CIM_NumericSensor.')
hwvpPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 25), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwvpPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwvpPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwvpPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwvpPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwvpPowerManagementSupported.setDescription('If TRUE, the device can be power-managed, which means that it can be put into suspend mode, and so on. The property does not indicate that power management features are currently enabled, but it does indicate that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwvpResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 28), Gauge32()).setUnits('Tenths of Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpResolution.setStatus('current')
if mibBuilder.loadTexts: hwvpResolution.setDescription('Ability of the sensor to resolve differences in the measured property. This value may vary and depends on whether the device is linear in its dynamic range. This property is inherited from CIM_NumericSensor.')
hwvpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpStatus.setStatus('current')
if mibBuilder.loadTexts: hwvpStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwvpStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwvpStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwvpSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwvpSystemCreationClassName.setDescription('Value for the CreationClassName property of the scoping computer. This property is inherited from CIM_LogicalDevice.')
hwvpSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpSystemName.setStatus('current')
if mibBuilder.loadTexts: hwvpSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwvpTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 33), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpTolerance.setStatus('current')
if mibBuilder.loadTexts: hwvpTolerance.setDescription('Tolerance of the sensor for the measured property. Tolerance, along with resolution and accuracy, is used to calculate the actual value of the measured physical property. Tolerance may vary, and depends on whether the device is linear in its dynamic range. This property is inherited from CIM_NumericSensor.')
hwvpUpperThresholdCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 34), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpUpperThresholdCritical.setStatus('current')
if mibBuilder.loadTexts: hwvpUpperThresholdCritical.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between UpperThresholdCritical and UpperThresholdFatal, the current state is critical. This property is inherited from CIM_NumericSensor.')
hwvpUpperThresholdFatal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 35), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpUpperThresholdFatal.setStatus('current')
if mibBuilder.loadTexts: hwvpUpperThresholdFatal.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is above UpperThresholdFatal, the current state is fatal. This property is inherited from CIM_NumericSensor.')
hwvpUpperThresholdNonCritical = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 6, 5, 1, 36), Integer32()).setUnits('Millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvpUpperThresholdNonCritical.setStatus('current')
if mibBuilder.loadTexts: hwvpUpperThresholdNonCritical.setDescription('Sensor threshold values specify the ranges (minimum and maximum values) to determine whether the sensor is operating under normal, non-critical, critical, or fatal conditions. If CurrentReading is between LowerThresholdNonCriticaland UpperThresholdNonCritical, the sensor is reporting a normal value. If CurrentReading is between UpperThresholdNonCritical and UpperThresholdCritical, the current state is non-critical. This property is inherited from CIM_NumericSensor.')
wmiPrinting = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7))
if mibBuilder.loadTexts: wmiPrinting.setStatus('current')
if mibBuilder.loadTexts: wmiPrinting.setDescription('The Printing subcategory groups classes that represent printers, printer configurations, and print jobs.')
win32PrinterTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1), )
if mibBuilder.loadTexts: win32PrinterTable.setStatus('current')
if mibBuilder.loadTexts: win32PrinterTable.setDescription('The Win32_Printer WMI class represents a device connected to a Windows computer system that can reproduce a visual image on paper or other medium.')
win32PrinterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwprIndex"))
if mibBuilder.loadTexts: win32PrinterEntry.setStatus('current')
if mibBuilder.loadTexts: win32PrinterEntry.setDescription('None')
hwprIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprIndex.setStatus('current')
if mibBuilder.loadTexts: hwprIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwprAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprAttributes.setStatus('current')
if mibBuilder.loadTexts: hwprAttributes.setDescription('Attributes of a Windows printing device represented by a combination of flags. Value used to set the bit Meaning 0x1 Print jobs are buffered and queued. 0x2 Document to be sent directly to the printer. This value is used if print jobs are not being queued correctly. 0x4 Default printer on a computer. 0x8 Available as a shared network resource. 0x10 Attached to a network. If both Local and Network bits are set, this indicates a network printer. 0x20 Hidden from some users on the network. 0x40 Directly connected to a computer. If both Local and Network bits are set, this indicates a network printer. 0x80 Enable the queue on the printer if available. 0x100 Spooler should not delete documents after they are printed. 0x200 Start jobs that are finished spooling first. 0x400 Queue print jobs when a printer is not available. 0x800 Enable bi-directional printing. 0x1000 Allow only raw data type jobs to be spooled. 0x2000 Published in the network directory service. ')
hwprAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningOrFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprAvailability.setStatus('current')
if mibBuilder.loadTexts: hwprAvailability.setDescription('Availability and status of a device. Power Save - Unknown indicates that the device is in a power save mode, but the exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but can be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, and a power save mode. This property is inherited from CIM_LogicalDevice.')
hwprAvailableJobSheets = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprAvailableJobSheets.setStatus('current')
if mibBuilder.loadTexts: hwprAvailableJobSheets.setDescription('Array of all the job sheets available on a printer. Can also be used to describe the banner that a printer might provide at the beginning of each job, or other user-specified options. This property is inherited from CIM_Printer. This property is new for Windows XP.')
hwprAveragePagesPerMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprAveragePagesPerMinute.setStatus('current')
if mibBuilder.loadTexts: hwprAveragePagesPerMinute.setDescription('Printing rate that a printer can produce output the average number of pages per minute.')
hwprCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwprCapabilities.setDescription('Array of printer capabilities. This property is inherited from CIM_Printer. Value Meaning 0 Unknown 1 Other 2 Color Printing 3 Duplex Printing 4 Copies 5 Collation 6 Stapling 7 Transparency Printing 8 Punch 9 Cover 10 Bind 11 Black and White Printing 12 One Sided 13 Two Sided Long Edge 14 Two Sided Short Edge 15 Portrait 16 Landscape 17 Reverse Portrait 18 Reverse Landscape 19 Quality High 20 Quality Normal 21 Quality Low ')
hwprCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwprCapabilityDescriptions.setDescription('Array of free-form strings that provide detailed explanations for the printer features indicated in the Capabilities array. Each entry of this array is related to an entry in the Capabilities array that is located in the same index. This property is inherited from CIM_Printer.')
hwprCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCaption.setStatus('current')
if mibBuilder.loadTexts: hwprCaption.setDescription('Short description of an object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwprCharSetsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCharSetsSupported.setStatus('current')
if mibBuilder.loadTexts: hwprCharSetsSupported.setDescription("Array of available character sets for output. Strings provided in this property must conform to the semantics and syntax specified by section 4.1.2 ('Charset parameters') in RFC 2046 (MIME Part 2) and contained in the IANA character-set registry. Examples include utf-8, us-ascii and iso-8859-1. This property is inherited from CIM_Printer. This property is new for Windows XP.")
hwprComment = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprComment.setStatus('current')
if mibBuilder.loadTexts: hwprComment.setDescription('Comment for a print queue. This property is new for Windows XP. Example: Color printer')
hwprConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwprConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwprConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwprConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwprCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwprCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used to create an instance. When used with other key properties of the class, the property allows all instances of this class and its subclasses to be identified uniquely. This property is inherited from CIM_LogicalDevice.')
hwprCurrentCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCurrentCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwprCurrentCapabilities.setDescription('Array of printer finishings and other capabilities that are being used currently. An entry in this property must also be listed in the Capabilities array. This property is inherited from CIM_Printer. This property is new for Windows XP. Value Meaning 0 Unknown 1 Other 2 Color Printing 3 Duplex Printing 4 Copies 5 Collation 6 Stapling 7 Transparency Printing 8 Punch 9 Cover 10 Bind 11 Black and White Printing 12 One Sided 13 Two Sided Long Edge 14 Two Sided Short Edge 15 Portrait 16 Landscape 17 Reverse Portrait 18 Reverse Landscape 19 Quality High 20 Quality Normal 21 Quality Low ')
hwprCurrentCharSet = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCurrentCharSet.setStatus('current')
if mibBuilder.loadTexts: hwprCurrentCharSet.setDescription("The character set currently being used for output. Strings provided in this property must conform to the semantics and syntax specified by section 4.1.2 ('Charset parameters') in RFC 2046 (MIME Part 2) and contained in the IANA character-set registry. Examples include utf-8, us-ascii and iso-8859-1. This property is inherited from CIM_Printer. This property is new for Windows XP.")
hwprCurrentLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pcl", 3), ("hpgl", 4), ("pjl", 5), ("ps", 6), ("psprinter", 7), ("ipds", 8), ("ppds", 9), ("escapeP", 10), ("epson", 11), ("ddif", 12), ("interpress", 13), ("iso6429", 14), ("lineData", 15), ("dodca", 16), ("regis", 17), ("scs", 18), ("spdl", 19), ("tek4014", 20), ("pds", 21), ("igp", 22), ("codeV", 23), ("dscdse", 24), ("wps", 25), ("ln03", 26), ("ccitt", 27), ("quic", 28), ("cpap", 29), ("decPPL", 30), ("simpleText", 31), ("npap", 32), ("doc", 33), ("imPress", 34), ("pinwriter", 35), ("npdl", 36), ("nec201PL", 37), ("automatic", 38), ("pages", 39), ("lips", 40), ("tiff", 41), ("diagnostic", 42), ("caPSL", 43), ("excl", 44), ("lcds", 45), ("xes", 46), ("mime", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCurrentLanguage.setStatus('current')
if mibBuilder.loadTexts: hwprCurrentLanguage.setDescription('Windows Server 2003 and Windows XP: Printer language currently being used. The language being used must be listed in the LanguagesSupported property. This property is inherited from CIM_Printer. This property is new for Windows XP.')
hwprCurrentMimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCurrentMimeType.setStatus('current')
if mibBuilder.loadTexts: hwprCurrentMimeType.setDescription('MIME type currently being used if the CurrentLanguage is a MIME type (value = 47). This property is inherited from CIM_Printer. This property is new for Windows XP.')
hwprCurrentNaturalLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCurrentNaturalLanguage.setStatus('current')
if mibBuilder.loadTexts: hwprCurrentNaturalLanguage.setDescription('Language that the printer is using for management currently. The language listed here must also be listed in the NaturalLanguagesSupported property. This property is inherited from CIM_Printer. This property is new for Windows XP.')
hwprCurrentPaperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprCurrentPaperType.setStatus('current')
if mibBuilder.loadTexts: hwprCurrentPaperType.setDescription('Type of paper the printer is using. Must be expressed in the form specified by the ISO/IEC 10175 Document Printing Application (DPA), which is summarized in Appendix C of RFC 1759 (Printer MIB). This property is inherited from CIM_Printer. This property is new for Windows XP.')
hwprDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefault.setStatus('current')
if mibBuilder.loadTexts: hwprDefault.setDescription('If TRUE, the printer is the default printer on the computer. This property is new for Windows XP.')
hwprDefaultCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultCapabilities.setDescription('Array of the finishings and other printer capabilities that are used by default. Each entry in the DefaultCapabilities array must also be listed in the Capabilities array. This property is inherited from CIM_Printer. This property is new for Windows XP. Value Meaning 0 Unknown 1 Other 2 Color Printing 3 Duplex Printing 4 Copies 5 Collation 6 Stapling 7 Transparency Printing 8 Punch 9 Cover 10 Bind 11 Black and White Printing 12 One Sided 13 Two Sided Long Edge 14 Two Sided Short Edge 15 Portrait 16 Landscape 17 Reverse Portrait 18 Reverse Landscape 19 Quality High 20 Quality Normal 21 Quality Low ')
hwprDefaultCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultCopies.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultCopies.setDescription('Number of copies that are produced for one job unless otherwise specified. This property is inherited from CIM_Printer. This property is new for Windows XP.')
hwprDefaultLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("pcl", 3), ("hpgl", 4), ("pjl", 5), ("ps", 6), ("psprinter", 7), ("ipds", 8), ("ppds", 9), ("escapeP", 10), ("epson", 11), ("ddif", 12), ("interpress", 13), ("iso6429", 14), ("lineData", 15), ("dodca", 16), ("regis", 17), ("scs", 18), ("spdl", 19), ("tek4014", 20), ("pds", 21), ("igp", 22), ("codeV", 23), ("dscdse", 24), ("wps", 25), ("ln03", 26), ("ccitt", 27), ("quic", 28), ("cpap", 29), ("decPPL", 30), ("simpleText", 31), ("npap", 32), ("doc", 33), ("imPress", 34), ("pinwriter", 35), ("npdl", 36), ("nec201PL", 37), ("automatic", 38), ("pages", 39), ("lips", 40), ("tiff", 41), ("diagnostic", 42), ("caPSL", 43), ("excl", 44), ("lcds", 45), ("xes", 46), ("mime", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultLanguage.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultLanguage.setDescription('Windows Server 2003 and Windows XP: Default printer language. The language listed here must also be listed in the LanguagesSupported property. This property is inherited from CIM_Printer.')
hwprDefaultMimeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 24), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultMimeType.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultMimeType.setDescription('Windows Server 2003 and Windows XP: MIME type currently being used, if the DefaultLanguage value is a MIME type (value = 47). This property is inherited from CIM_Printer.')
hwprDefaultNumberUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultNumberUp.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultNumberUp.setDescription('Windows Server 2003 and Windows XP: Number of print-stream pages that the printer renders on one media sheet unless a job specifies otherwise. This property is inherited from CIM_Printer.')
hwprDefaultPaperType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultPaperType.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultPaperType.setDescription('Windows Server 2003 and Windows XP: Paper type that the printer uses unless a print job specifies a different paper type. The string must be expressed in the form specified by ISO/IEC 1017 Document Printing Application (DPA), which is summarized in Appendix C of RFC 1759 (Printer MIB). This property is inherited from CIM_Printer.')
hwprDefaultPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDefaultPriority.setStatus('current')
if mibBuilder.loadTexts: hwprDefaultPriority.setDescription('Default priority value assigned to each print job.')
hwprDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDescription.setStatus('current')
if mibBuilder.loadTexts: hwprDescription.setDescription('Description of an object. This property is inherited from CIM_ManagedSystemElement.')
hwprDetectedErrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noError", 3), ("lowPaper", 4), ("noPaper", 5), ("lowToner", 6), ("noToner", 7), ("doorOpen", 8), ("jammed", 9), ("offline", 10), ("serviceRequested", 11), ("outputBinFull", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDetectedErrorState.setStatus('current')
if mibBuilder.loadTexts: hwprDetectedErrorState.setDescription('Printer error information. This property is inherited from CIM_Printer.')
hwprDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwprDeviceID.setDescription('Unique identifier of the printer on a system. This property is inherited from CIM_LogicalDevice.')
hwprDirect = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 31), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDirect.setStatus('current')
if mibBuilder.loadTexts: hwprDirect.setDescription('Windows Server 2003 and Windows XP: If TRUE, the print job is sent directly to the printer. If FALSE, the print job is spooled.')
hwprDoCompleteFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 32), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDoCompleteFirst.setStatus('current')
if mibBuilder.loadTexts: hwprDoCompleteFirst.setDescription('Windows Server 2003 and Windows XP: If TRUE, the printer starts jobs that are finished spooling. If FALSE, the printer starts jobs in the order that the jobs are received. ')
hwprDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprDriverName.setStatus('current')
if mibBuilder.loadTexts: hwprDriverName.setDescription('Name of the Windows printer driver. Example: Windows NT Fax Driver')
hwprEnableBIDI = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprEnableBIDI.setStatus('current')
if mibBuilder.loadTexts: hwprEnableBIDI.setDescription('Windows Server 2003 and Windows XP: If TRUE, the printer can print bi-directionally.')
hwprEnableDevQueryPrint = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 35), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprEnableDevQueryPrint.setStatus('current')
if mibBuilder.loadTexts: hwprEnableDevQueryPrint.setDescription('Windows Server 2003 and Windows XP: If TRUE, the printer holds documents in the queue if document and printer setups do not match.')
hwprErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwprErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode has been cleared. This property is inherited from CIM_LogicalDevice.')
hwprErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 37), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwprErrorDescription.setDescription('Information about the error recorded in LastErrorCode, and information about corrective actions that can be taken. This property is inherited from CIM_LogicalDevice.')
hwprErrorInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 38), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprErrorInformation.setStatus('current')
if mibBuilder.loadTexts: hwprErrorInformation.setDescription('Windows Server 2003 and Windows XP: Array of supplemental information for the current error state indicated in DetectedErrorState. This property is inherited from CIM_Printer.')
hwprExtendedDetectedErrorState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("noError", 2), ("lowPaper", 3), ("noPaper", 4), ("lowToner", 5), ("noToner", 6), ("doorOpen", 7), ("jammed", 8), ("serviceRequested", 9), ("outputBinFull", 10), ("paperProblem", 11), ("cannotPrintPage", 12), ("userInterventionRequired", 13), ("outOfMemory", 14), ("serverUnknown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprExtendedDetectedErrorState.setStatus('current')
if mibBuilder.loadTexts: hwprExtendedDetectedErrorState.setDescription('Windows Server 2003 and Windows XP: Reports standard error information. Additional information should be recorded in DetectedErrorState.')
hwprExtendedPrinterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("printing", 4), ("warmup", 5), ("stoppedPrinting", 6), ("offline", 7), ("paused", 8), ("error", 9), ("busy", 10), ("notAvailable", 11), ("waiting", 12), ("processing", 13), ("initialization", 14), ("powerSave", 15), ("pendingDeletion", 16), ("iOActive", 17), ("manualFeed", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprExtendedPrinterStatus.setStatus('current')
if mibBuilder.loadTexts: hwprExtendedPrinterStatus.setDescription('Windows Server 2003 and Windows XP: Status information for a printer that is different from information specified in the Availability property.')
hwprHidden = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprHidden.setStatus('current')
if mibBuilder.loadTexts: hwprHidden.setDescription('Windows Server 2003 and Windows XP: If TRUE, the printer is hidden from network users.')
hwprHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprHorizontalResolution.setStatus('current')
if mibBuilder.loadTexts: hwprHorizontalResolution.setDescription('Horizontal resolution of the printer in pixels per inch. This property is inherited from CIM_Printer.')
hwprInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 43), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwprInstallDate.setDescription('Date and time an object was installed. The object may be installed without a value being written to this property. This property is inherited from CIM_ManagedSystemElement.')
hwprJobCountSinceLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprJobCountSinceLastReset.setStatus('current')
if mibBuilder.loadTexts: hwprJobCountSinceLastReset.setDescription('Number of print jobs since the printer was last reset. This property is inherited from CIM_Printer.')
hwprKeepPrintedJobs = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprKeepPrintedJobs.setStatus('current')
if mibBuilder.loadTexts: hwprKeepPrintedJobs.setDescription('Windows Server 2003 and Windows XP: If TRUE, the print spooler does not delete the completed jobs.')
hwprLanguagesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 46), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprLanguagesSupported.setStatus('current')
if mibBuilder.loadTexts: hwprLanguagesSupported.setDescription('Array of the print languages natively supported. This property is inherited from CIM_Printer. Value Meaning 1 Other 2 Unknown 3 PCL 4 HPGL 5 PJL 6 PS 7 PSPrinter 8 IPDS 9 PPDS 10 EscapeP 11 Epson 12 DDIF 13 Interpress 14 ISO6429 15 LineData 16 DODCA 17 REGIS 18 SCS 19 SPDL 20 TEK4014 21 PDS 22 IGP 23 CodeV 24 DSCDSE 25 WPS 26 LN03 27 CCITT 28 QUIC 29 CPAP 30 DecPPL 31 SimpleText 32 NPAP 33 DOC 34 imPress 35 Pinwriter 36 NPDL 37 NEC201PL 38 Automatic 39 Pages 40 LIPS 41 TIFF 42 Diagnostic 43 CaPSL 44 EXCL 45 LCDS 46 XES 47 MIME ')
hwprLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwprLastErrorCode.setDescription('Last error code that the logical device reports. This property is inherited from CIM_LogicalDevice.')
hwprLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 48), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprLocal.setStatus('current')
if mibBuilder.loadTexts: hwprLocal.setDescription('Windows Server 2003 and Windows XP: If TRUE, the printer is not attached to a network. If both the Local and Network properties are set to TRUE, then the printer is a network printer.')
hwprLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 49), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprLocation.setStatus('current')
if mibBuilder.loadTexts: hwprLocation.setDescription('Physical location of the printer. Example: Bldg. 38, Room 1164')
hwprMarkingTechnology = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("electrophotographicLED", 3), ("electrophotographicLaser", 4), ("electrophotographicOther", 5), ("impactMovingHeadDotMatrix9pin", 6), ("impactMovingHeadDotMatrix24pin", 7), ("impactMovingHeadDotMatrixOther", 8), ("impactMovingHeadFullyFormed", 9), ("impactBand", 10), ("impactOther", 11), ("inkjetAqueous", 12), ("inkjetSolid", 13), ("inkjetOther", 14), ("pen", 15), ("thermalTransfer", 16), ("thermalSensitive", 17), ("thermalDiffusion", 18), ("thermalOther", 19), ("electroerosion", 20), ("electrostatic", 21), ("photographicMicrofiche", 22), ("photographicImagesetter", 23), ("photographicOther", 24), ("ionDeposition", 25), ("eBeam", 26), ("typesetter", 27)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprMarkingTechnology.setStatus('current')
if mibBuilder.loadTexts: hwprMarkingTechnology.setDescription('Windows Server 2003 and Windows XP: Marking technology that the printer uses. This property is inherited from CIM_Printer.')
hwprMaxCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprMaxCopies.setStatus('current')
if mibBuilder.loadTexts: hwprMaxCopies.setDescription('Windows Server 2003 and Windows XP: Maximum number of copies the printer can produce for one job. This property is inherited from CIM_Printer.')
hwprMaxNumberUp = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprMaxNumberUp.setStatus('current')
if mibBuilder.loadTexts: hwprMaxNumberUp.setDescription('Windows Server 2003 and Windows XP: Maximum number of print-stream pages the printer can render on one media sheet such as paper. This property is inherited from CIM_Printer. ')
hwprMaxSizeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprMaxSizeSupported.setStatus('current')
if mibBuilder.loadTexts: hwprMaxSizeSupported.setDescription('Windows Server 2003 and Windows XP: Largest job as a byte steam that the printer can accept in kilobytes. A value of 0 (zero) indicates that no limit is set. This property is inherited from CIM_Printer. ')
hwprMimeTypesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 54), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprMimeTypesSupported.setStatus('current')
if mibBuilder.loadTexts: hwprMimeTypesSupported.setDescription("Windows Server 2003 and Windows XP: Array of detailed MIME type explanations that the printer supports. If data is provided, then the value 47 ('MIME') must be included in the LanguagesSupported property. This property is inherited from CIM_Printer.")
hwprName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 55), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprName.setStatus('current')
if mibBuilder.loadTexts: hwprName.setDescription('Label for an object. When inherited by a subclass, the property can be overridden to be a key property.')
hwprNaturalLanguagesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 56), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprNaturalLanguagesSupported.setStatus('current')
if mibBuilder.loadTexts: hwprNaturalLanguagesSupported.setDescription("Windows XP and Windows Server 2003: Array of languages supported for strings that the printer uses for output of management information. Must conform to RFC 1766. For example, 'en' is used for English. This property is inherited from CIM_Printer.")
hwprNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 57), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprNetwork.setStatus('current')
if mibBuilder.loadTexts: hwprNetwork.setDescription('Windows XP and Windows Server 2003: If TRUE, the printer is a network printer. If both the Local and Network properties are set to TRUE, then the printer is a network printer.')
hwprPaperSizesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 58), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPaperSizesSupported.setStatus('current')
if mibBuilder.loadTexts: hwprPaperSizesSupported.setDescription('Array of the paper types that the printer supports. This property is inherited from CIM_Printer. Value Meaning 0 Unknown 1 Other 2 A 3 B 4 C 5 D 6 E 7 Letter 8 Legal 9 NA-10x13-Envelope 10 NA-9x12-Envelope 11 NA-Number-10-Envelope 12 NA-7x9-Envelope 13 NA-9x11-Envelope 14 NA-10x14-Envelope 15 NA-Number-9-Envelope 16 NA-6x9-Envelope 17 NA-10x15-Envelope 18 A0 19 A1 20 A2 21 A3 22 A4 23 A5 24 A6 25 A7 26 A8 27 A9A10 28 B0 29 B1 30 B2 31 B3 32 B4 33 B5 34 B6 35 B7 36 B8 37 B9 38 B10 39 C0 40 C1 41 C2 42 C3 43 C4 44 C5 45 C6 46 C7 47 C8 48 ISO-Designated 49 JIS B0 50 JIS B1 51 JIS B2 52 JIS B3 53 JIS B4 54 JIS B5 55 JIS B6 56 JIS B7 57 JIS B8 58 JIS B9 59 JIS B10 ')
hwprPaperTypesAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 59), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPaperTypesAvailable.setStatus('current')
if mibBuilder.loadTexts: hwprPaperTypesAvailable.setDescription('Windows XP and Windows Server 2003: Array of paper types that are currently available currently on the printer. Each string must be expressed in the format specified by ISO/IEC 10175 Document Printing Application (DPA), which is summarized in Appendix C of RFC 1759 (Printer MIB). Any paper size identified in this property must also appear in the PaperSizesSupported property. This property is inherited from CIM_Printer. Example: iso-a4-colored')
hwprParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 60), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprParameters.setStatus('current')
if mibBuilder.loadTexts: hwprParameters.setDescription('Windows XP and Windows Server 2003: Optional parameters for the print processor. Example: Copies=2')
hwprPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 61), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwprPNPDeviceID.setDescription('Windows plug and play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: *PNP030b')
hwprPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 62), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPortName.setStatus('current')
if mibBuilder.loadTexts: hwprPortName.setDescription('Port that is used to transmit data to a printer. If a printer is connected to more than one port, the names of each port are separated by commas. Under Windows 95, only one port can be specified. Example: LPT1:, LPT2:, LPT3:')
hwprPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 63), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwprPowerManagementCapabilities.setDescription('Specific power capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled, but the exact setting is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5. Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 and Time set to a specific date and time, or interval to power ON. This property is inherited from CIM_UnitaryComputerSystem. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwprPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 64), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwprPowerManagementSupported.setDescription('If TRUE, the power of the device can be managed, which means that it can be put into suspend mode, and so on. The property does not indicate that power management features are enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwprPrinterPaperNames = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 65), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPrinterPaperNames.setStatus('current')
if mibBuilder.loadTexts: hwprPrinterPaperNames.setDescription('Array of paper sizes supported by the printer. The printer-specified names are used to represent supported paper sizes. Example: B5 (JIS)')
hwprPrinterState = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("paused", 1), ("error", 2), ("pendingDeletion", 3), ("paperJam", 4), ("paperOut", 5), ("manualFeed", 6), ("paperProblem", 7), ("offline", 8), ("ioActive", 9), ("busy", 10), ("printing", 11), ("outputBinFull", 12), ("notAvailable", 13), ("waiting", 14), ("processing", 15), ("initialization", 16), ("warmingUp", 17), ("tonerLow", 18), ("noToner", 19), ("pagePunt", 20), ("userInterventionRequired", 21), ("outOfMemory", 22), ("doorOpen", 23), ("serverUnknown", 24), ("powerSave", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPrinterState.setStatus('current')
if mibBuilder.loadTexts: hwprPrinterState.setDescription('One of the possible states relating to this printer. This property is obsolete. In place of this property, use PrinterStatus.')
hwprPrinterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("idle", 3), ("printing", 4), ("warmup", 5), ("stoppedPrinting", 6), ("offline", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPrinterStatus.setStatus('current')
if mibBuilder.loadTexts: hwprPrinterStatus.setDescription('Status information for a printer that is different from information specified in the logical device Availability property. This property is inherited from CIM_Printer.')
hwprPrintJobDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 68), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPrintJobDataType.setStatus('current')
if mibBuilder.loadTexts: hwprPrintJobDataType.setDescription('Data type of a print job waiting for the Windows printing device.')
hwprPrintProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 69), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPrintProcessor.setStatus('current')
if mibBuilder.loadTexts: hwprPrintProcessor.setDescription('Name of the print spooler that handles print jobs. Example: SPOOLSS.DLL')
hwprPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPriority.setStatus('current')
if mibBuilder.loadTexts: hwprPriority.setDescription('Windows XP and Windows Server 2003: Priority of the printer. Jobs on a higher priority printer are scheduled first.')
hwprPublished = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 71), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprPublished.setStatus('current')
if mibBuilder.loadTexts: hwprPublished.setDescription('Windows XP and Windows Server 2003: If TRUE, the printer is published in the network directory service.')
hwprQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 72), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprQueued.setStatus('current')
if mibBuilder.loadTexts: hwprQueued.setDescription('Windows XP and Windows Server 2003: If TRUE, the printer buffers and queues print jobs.')
hwprRawOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 73), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprRawOnly.setStatus('current')
if mibBuilder.loadTexts: hwprRawOnly.setDescription('Windows XP and Windows Server 2003: If TRUE, the printer accepts only raw data to be spooled.')
hwprSeparatorFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 74), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprSeparatorFile.setStatus('current')
if mibBuilder.loadTexts: hwprSeparatorFile.setDescription('Name of the file used to create a separator page. This page is used to separate print jobs sent to the printer.')
hwprServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 75), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprServerName.setStatus('current')
if mibBuilder.loadTexts: hwprServerName.setDescription('Name of the server that controls the printer. If this string is NULL, the printer is controlled locally.')
hwprShared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 76), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprShared.setStatus('current')
if mibBuilder.loadTexts: hwprShared.setDescription('Windows XP and Windows Server 2003: If TRUE, the printer is available as a shared network resource.')
hwprShareName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 77), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprShareName.setStatus('current')
if mibBuilder.loadTexts: hwprShareName.setDescription('Share name of the Windows printing device. Example: \\\\PRINTSERVER1\\PRINTER2')
hwprSpoolEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 78), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprSpoolEnabled.setStatus('current')
if mibBuilder.loadTexts: hwprSpoolEnabled.setDescription('This property is obsolete; do not use. If TRUE, spooling is enabled for printer.')
hwprStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 79), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprStartTime.setStatus('current')
if mibBuilder.loadTexts: hwprStartTime.setDescription('Date and time that a printer can start to print a job if the printer is limited to print at specific times. This value is expressed as the time elapsed since 12:00 AM GMT (Greenwich mean time).')
hwprStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprStatus.setStatus('current')
if mibBuilder.loadTexts: hwprStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror- resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is on-line, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwprStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 81), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwprStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwprSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 82), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwprSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwprSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 83), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprSystemName.setStatus('current')
if mibBuilder.loadTexts: hwprSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwprTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 84), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwprTimeOfLastReset.setDescription('Date and time the printer was last reset. This property is inherited from CIM_Printer.')
hwprUntilTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 85), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprUntilTime.setStatus('current')
if mibBuilder.loadTexts: hwprUntilTime.setDescription('Date and time that a printer can print the last job if the printer is limited to print at specific times. This value is expressed as the time elapsed since 12:00 AM GMT (Greenwich mean time).')
hwprVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 86), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprVerticalResolution.setStatus('current')
if mibBuilder.loadTexts: hwprVerticalResolution.setDescription('Vertical resolution of the printer in pixels per inch. This property is inherited from CIM_Printer.')
hwprWorkOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 1, 1, 87), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprWorkOffline.setStatus('current')
if mibBuilder.loadTexts: hwprWorkOffline.setDescription('Windows XP and Windows Server 2003: If TRUE, you can queue print jobs on the computer when the printer is offline.')
win32PrinterConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2), )
if mibBuilder.loadTexts: win32PrinterConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: win32PrinterConfigurationTable.setDescription('The Win32_PrinterConfiguration WMI class defines the configuration for a printer device. This includes capabilities such as resolution, color, fonts, and orientation.')
win32PrinterConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwprcIndex"))
if mibBuilder.loadTexts: win32PrinterConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: win32PrinterConfigurationEntry.setDescription('None')
hwprcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcIndex.setStatus('current')
if mibBuilder.loadTexts: hwprcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwprcBitsPerPel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcBitsPerPel.setStatus('current')
if mibBuilder.loadTexts: hwprcBitsPerPel.setDescription('This property must not be used.')
hwprcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcCaption.setStatus('current')
if mibBuilder.loadTexts: hwprcCaption.setDescription('Short description (one-line string) of the CIM_Setting object. This property is inherited from CIM_Setting.')
hwprcCollate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcCollate.setStatus('current')
if mibBuilder.loadTexts: hwprcCollate.setDescription('If TRUE, the pages that are printed should be collated. To collate is to print out the entire document before printing the next copy, as opposed to printing out each page of the document the required number of times. This property is ignored unless the printer driver indicates support for collation.')
hwprcColor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("monochrome", 1), ("color", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcColor.setStatus('current')
if mibBuilder.loadTexts: hwprcColor.setDescription('Color of the document. Some color printers have the capability to print using true black instead of a combination of cyan, magenta, and yellow (CMY). This usually creates darker and sharper text for documents. This option is only useful for color printers that support true black printing.')
hwprcCopies = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcCopies.setStatus('current')
if mibBuilder.loadTexts: hwprcCopies.setDescription('Number of copies to be printed. The printer driver must support printing multi-page copies. Example: 2')
hwprcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDescription.setStatus('current')
if mibBuilder.loadTexts: hwprcDescription.setDescription('Description of the CIM_Setting object. This property is inherited from CIM_Setting.')
hwprcDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDeviceName.setStatus('current')
if mibBuilder.loadTexts: hwprcDeviceName.setDescription("Friendly name of the printer. This name is unique to the type of printer and may be truncated because of the limitations of the string from which it is derived. Example: 'PCL/HP LaserJet'")
hwprcDisplayFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDisplayFlags.setStatus('current')
if mibBuilder.loadTexts: hwprcDisplayFlags.setDescription('This property must not be used.')
hwprcDisplayFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDisplayFrequency.setStatus('current')
if mibBuilder.loadTexts: hwprcDisplayFrequency.setDescription('This property must not be used.')
hwprcDitherType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noDithering", 1), ("coarseBrush", 2), ("fineBrush", 3), ("lineArt", 4), ("greyscale", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDitherType.setStatus('current')
if mibBuilder.loadTexts: hwprcDitherType.setDescription('Dither type of the printer. This property can assume predefined values of 1 to 5, or driver-defined values from 6 to 256. Line art dithering is a special dithering method that produces well defined borders between black, white, and gray scalings. It is not suitable for images that include continuous graduations in intensity and hue such as scanned photographs.')
hwprcDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDriverVersion.setStatus('current')
if mibBuilder.loadTexts: hwprcDriverVersion.setDescription('Version number of the Windows printer driver. The version numbers are created and maintained by the driver manufacturer.')
hwprcDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcDuplex.setStatus('current')
if mibBuilder.loadTexts: hwprcDuplex.setDescription('If TRUE, printing is done on both sides. If FALSE, printing is done on only one side of the media.')
hwprcFormName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcFormName.setStatus('current')
if mibBuilder.loadTexts: hwprcFormName.setDescription("Name of the form used for the print job. This property is used only on Windows NT/Windows 2000 systems. Example: 'Legal'")
hwprcHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 15), Gauge32()).setUnits('dots per inch').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcHorizontalResolution.setStatus('current')
if mibBuilder.loadTexts: hwprcHorizontalResolution.setDescription('Print resolution in dots per inch along the X axis (width) of the print job (similar to the obsolete XResolution property). This value is only set when the PrintQuality property of this class is positive.')
hwprcICMIntent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("saturation", 1), ("contrast", 2), ("exactColor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcICMIntent.setStatus('current')
if mibBuilder.loadTexts: hwprcICMIntent.setDescription('Specific value of one of the three possible color matching methods (called intents) that should be used by default. ICM applications establish intents by using the ICM functions. This property can assume predefined values of 1 to 3, or driver-defined values from 4 to 256. Non-ICM applications can use this value to determine how the printer handles color printing jobs.')
hwprcICMMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("windows", 2), ("deviceDriver", 3), ("device", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcICMMethod.setStatus('current')
if mibBuilder.loadTexts: hwprcICMMethod.setDescription('How ICM is handled. For a non-ICM application, this property determines if ICM is enabled or disabled. For ICM applications, the system examines this property to determine which part of the computer system handles ICM support.')
hwprcLogPixels = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcLogPixels.setStatus('current')
if mibBuilder.loadTexts: hwprcLogPixels.setDescription('This property must not be used.')
hwprcMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("transparency", 2), ("glossy", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcMediaType.setStatus('current')
if mibBuilder.loadTexts: hwprcMediaType.setDescription('Type of media being printed on. The property can be set to a predefined value or a driver-defined value greater than or equal to 256. This property is supported in Windows 95 and later.')
hwprcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 20), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcName.setStatus('current')
if mibBuilder.loadTexts: hwprcName.setDescription('Name of the printer with which this configuration is associated.')
hwprcOrientation = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portrait", 1), ("landscape", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcOrientation.setStatus('current')
if mibBuilder.loadTexts: hwprcOrientation.setDescription('Printing orientation of the paper.')
hwprcPaperLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 22), Gauge32()).setUnits('Tenths of a Millimeter').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcPaperLength.setStatus('current')
if mibBuilder.loadTexts: hwprcPaperLength.setDescription('Length of the paper. Example: 2794')
hwprcPaperSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcPaperSize.setStatus('current')
if mibBuilder.loadTexts: hwprcPaperSize.setDescription("Size of the paper. Example: 'A4 or Letter'")
hwprcPaperWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 24), Gauge32()).setUnits('Tenths of a Millimeter').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcPaperWidth.setStatus('current')
if mibBuilder.loadTexts: hwprcPaperWidth.setDescription('Width of the paper. Example: 2159')
hwprcPelsHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcPelsHeight.setStatus('current')
if mibBuilder.loadTexts: hwprcPelsHeight.setDescription('This property must not be used.')
hwprcPelsWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcPelsWidth.setStatus('current')
if mibBuilder.loadTexts: hwprcPelsWidth.setDescription('This property must not be used.')
hwprcPrintQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcPrintQuality.setStatus('current')
if mibBuilder.loadTexts: hwprcPrintQuality.setDescription('One of four quality levels of the print job. If a positive value is specified, the quality is measured in dots per inch.')
hwprcScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 28), Gauge32()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcScale.setStatus('current')
if mibBuilder.loadTexts: hwprcScale.setDescription('Factor by which the printed output is to be scaled. For example, a scale of 75 reduces the print output to 3/4 its original height and width.')
hwprcSettingID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 29), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcSettingID.setStatus('current')
if mibBuilder.loadTexts: hwprcSettingID.setDescription('Identifier by which the CIM_Setting object is known. This property is inherited from CIM_Setting.')
hwprcSpecificationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcSpecificationVersion.setStatus('current')
if mibBuilder.loadTexts: hwprcSpecificationVersion.setDescription('Version number of the initialization data for the device associated with the Windows printer.')
hwprcTTOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bitmap", 1), ("download", 2), ("substitute", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcTTOption.setStatus('current')
if mibBuilder.loadTexts: hwprcTTOption.setDescription('How TrueType fonts should be printed.')
hwprcVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 32), Gauge32()).setUnits('dots per inch').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcVerticalResolution.setStatus('current')
if mibBuilder.loadTexts: hwprcVerticalResolution.setDescription('Print resolution along the Y axis (height) of the print job (similar to the obsolete YResolution property). This value is only set when the PrintQuality property of this class is positive.')
hwprcXResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcXResolution.setStatus('current')
if mibBuilder.loadTexts: hwprcXResolution.setDescription('This property must not be used.')
hwprcYResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprcYResolution.setStatus('current')
if mibBuilder.loadTexts: hwprcYResolution.setDescription('This property must not be used.')
win32PrinterDriverTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3), )
if mibBuilder.loadTexts: win32PrinterDriverTable.setStatus('current')
if mibBuilder.loadTexts: win32PrinterDriverTable.setDescription('The Win32_PrinterDriver WMI class represents the drivers for a Win32_Printer instance. This class is new for Windows XP.')
win32PrinterDriverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1), ).setIndexNames((0, "INFORMANT-HW", "hwprdIndex"))
if mibBuilder.loadTexts: win32PrinterDriverEntry.setStatus('current')
if mibBuilder.loadTexts: win32PrinterDriverEntry.setDescription('None')
hwprdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdIndex.setStatus('current')
if mibBuilder.loadTexts: hwprdIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwprdCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdCaption.setStatus('current')
if mibBuilder.loadTexts: hwprdCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwprdConfigFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdConfigFile.setStatus('current')
if mibBuilder.loadTexts: hwprdConfigFile.setDescription("Configuration file for this printer driver. Example: 'pscrptui.dll'")
hwprdCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwprdCreationClassName.setDescription('Name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_Service.')
hwprdDataFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdDataFile.setStatus('current')
if mibBuilder.loadTexts: hwprdDataFile.setDescription("Data file for this printer driver. Example: 'qms810.ppd'")
hwprdDefaultDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdDefaultDataType.setStatus('current')
if mibBuilder.loadTexts: hwprdDefaultDataType.setDescription("Default data type for this printer driver. Example: 'EMF'")
hwprdDependentFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdDependentFiles.setStatus('current')
if mibBuilder.loadTexts: hwprdDependentFiles.setDescription('Array of dependent files for this printer driver.')
hwprdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdDescription.setStatus('current')
if mibBuilder.loadTexts: hwprdDescription.setDescription('Comment that describes the link. This property is inherited from CIM_ManagedSystemElement.')
hwprdDriverPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdDriverPath.setStatus('current')
if mibBuilder.loadTexts: hwprdDriverPath.setDescription("Path for this printer driver. Example: 'C:\\\\drivers\\\\pscript.dll'")
hwprdFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdFilePath.setStatus('current')
if mibBuilder.loadTexts: hwprdFilePath.setDescription("Path to the INF file being used. Example: 'c:\\\\temp\\\\driver'")
hwprdHelpFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdHelpFile.setStatus('current')
if mibBuilder.loadTexts: hwprdHelpFile.setDescription("Help file for this printer driver. Example: 'pscrptui.hlp'")
hwprdInfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdInfName.setStatus('current')
if mibBuilder.loadTexts: hwprdInfName.setDescription("Name of the INF file being used. The default is 'ntprint.INF'. This will only be different if the drivers are provided directly by the manufacturer of the printer and not the operating system.")
hwprdInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwprdInstallDate.setDescription('Date and time when the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwprdMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdMonitorName.setStatus('current')
if mibBuilder.loadTexts: hwprdMonitorName.setDescription("Name of the monitor for this printer driver. Example: 'PJL monitor'")
hwprdName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdName.setStatus('current')
if mibBuilder.loadTexts: hwprdName.setDescription('Driver name for this printer. This is a compound key composed of the Name, Version, and SupportedPlatform values. This property is inherited from CIM_ManagedSystemElement and overrides the Name definition in that class.')
hwprdOEMUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdOEMUrl.setStatus('current')
if mibBuilder.loadTexts: hwprdOEMUrl.setDescription("World Wide Web (WWW) link to the printer manufacturer's Web site. Note that this property is not populated when the Win32.inf file is used, and is only applicable for drivers provided directly from the manufacturer.")
hwprdStarted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdStarted.setStatus('current')
if mibBuilder.loadTexts: hwprdStarted.setDescription('If TRUE, the service is started. If FALSE, the service is stopped. This property is inherited from CIM_Service.')
hwprdStartMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("manual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdStartMode.setStatus('current')
if mibBuilder.loadTexts: hwprdStartMode.setDescription('Start mode of the service is automatically started by an operating system, or only started when requested. This property is inherited from CIM_Service.')
hwprdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdStatus.setStatus('current')
if mibBuilder.loadTexts: hwprdStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwprdSupportedPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdSupportedPlatform.setStatus('current')
if mibBuilder.loadTexts: hwprdSupportedPlatform.setDescription("Operating environments that the driver is intended for. Example: 'Windows NT x86' or 'Windows IA64'")
hwprdSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwprdSystemCreationClassName.setDescription("Scoping system's creation class name. This property is inherited from CIM_Service.")
hwprdSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdSystemName.setStatus('current')
if mibBuilder.loadTexts: hwprdSystemName.setDescription('Name of the system that hosts this service. This property is inherited from CIM_Service.')
hwprdVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 3, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("win9x", 0), ("win351", 1), ("nt40", 2), ("win2k", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprdVersion.setStatus('current')
if mibBuilder.loadTexts: hwprdVersion.setDescription('Operating system version for the printer driver.')
win32PrintJobTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4), )
if mibBuilder.loadTexts: win32PrintJobTable.setStatus('current')
if mibBuilder.loadTexts: win32PrintJobTable.setDescription('The Win32_PrintJob WMI class represents a print job that a Windows application generates. Any unit of work generated by the print command of an application that is running on a Windows system is a descendent or member of this class.')
win32PrintJobEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1), ).setIndexNames((0, "INFORMANT-HW", "hwprjIndex"))
if mibBuilder.loadTexts: win32PrintJobEntry.setStatus('current')
if mibBuilder.loadTexts: win32PrintJobEntry.setDescription('None')
hwprjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjIndex.setStatus('current')
if mibBuilder.loadTexts: hwprjIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwprjCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 2), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjCaption.setStatus('current')
if mibBuilder.loadTexts: hwprjCaption.setDescription('Short description of the object a one-line string. This property is inherited from CIM_ManagedSystemElement.')
hwprjDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjDataType.setStatus('current')
if mibBuilder.loadTexts: hwprjDataType.setDescription("Format of the data for this print job. This instructs the printer driver to translate the data (generic text, PostScript, or PCL) before printing, or print in a raw format (for graphics and pictures). Example: 'TEXT'")
hwprjDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjDescription.setStatus('current')
if mibBuilder.loadTexts: hwprjDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwprjDocument = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjDocument.setStatus('current')
if mibBuilder.loadTexts: hwprjDocument.setDescription("Name of the print job. The user sees this name when viewing documents that are waiting to be printed. Example: 'Microsoft Word - Review.doc'")
hwprjDriverName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjDriverName.setStatus('current')
if mibBuilder.loadTexts: hwprjDriverName.setDescription('Name of the printer driver used for the print job.')
hwprjElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjElapsedTime.setStatus('current')
if mibBuilder.loadTexts: hwprjElapsedTime.setDescription('Length of time that the job has been executing. This property is inherited from CIM_Job.')
hwprjHostPrintQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjHostPrintQueue.setStatus('current')
if mibBuilder.loadTexts: hwprjHostPrintQueue.setDescription('Name of the computer on which the print job is created.')
hwprjInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwprjInstallDate.setDescription('Date and time the object is installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwprjJobId = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjJobId.setStatus('current')
if mibBuilder.loadTexts: hwprjJobId.setDescription('Identifier number of the job. It is used by other methods as a handle to a job spooling to the printer.')
hwprjJobStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjJobStatus.setStatus('current')
if mibBuilder.loadTexts: hwprjJobStatus.setDescription('Free-form string that represents the job status. This property is inherited from CIM_Job.')
hwprjName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjName.setStatus('current')
if mibBuilder.loadTexts: hwprjName.setDescription('Name of the printer to which the print job is being spooled. This property is inherited from CIM_ManagedSystemElement.')
hwprjNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 13), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjNotify.setStatus('current')
if mibBuilder.loadTexts: hwprjNotify.setDescription('User is to be notified when job completes or fails. This property is restricted to 16 characters in Windows 95/98 platforms. This property is inherited from CIM_Job.')
hwprjOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjOwner.setStatus('current')
if mibBuilder.loadTexts: hwprjOwner.setDescription('User that submitted the job. This property is inherited from CIM_Job.')
hwprjPagesPrinted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjPagesPrinted.setStatus('current')
if mibBuilder.loadTexts: hwprjPagesPrinted.setDescription('Number of pages that are printed. This value may be 0 (zero) if the print job does not contain page delimiting information.')
hwprjParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjParameters.setStatus('current')
if mibBuilder.loadTexts: hwprjParameters.setDescription('Optional parameters to send to the print processor. For more information, see the PrintProcessor property.')
hwprjPrintProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjPrintProcessor.setStatus('current')
if mibBuilder.loadTexts: hwprjPrintProcessor.setDescription('Print processor service used to process the print job. A printer processor works in conjunction with the printer driver to provide additional translation of printer data for the printer, and can also be used to provide special options such as a title page for the job.')
hwprjPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjPriority.setStatus('current')
if mibBuilder.loadTexts: hwprjPriority.setDescription('Urgency or importance of job execution. This property is inherited from CIM_Job.')
hwprjSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 19), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjSize.setStatus('current')
if mibBuilder.loadTexts: hwprjSize.setDescription('Size of the print job.')
hwprjStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjStartTime.setStatus('current')
if mibBuilder.loadTexts: hwprjStartTime.setDescription('Date and time that the job begins. This property is inherited from CIM_Job.')
hwprjStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjStatus.setStatus('current')
if mibBuilder.loadTexts: hwprjStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwprjStatusMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2948))).clone(namedValues=NamedValues(("paused", 1), ("error", 2), ("deleting", 4), ("spooling", 8), ("printing", 16), ("offline", 32), ("paperout", 64), ("printed", 128), ("deleted", 256), ("blockedDevQ", 512), ("userInterventionReq", 1024), ("restart", 2948)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjStatusMask.setStatus('current')
if mibBuilder.loadTexts: hwprjStatusMask.setDescription('Bitmap of the possible statuses that relate to this print job.')
hwprjTimeSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjTimeSubmitted.setStatus('current')
if mibBuilder.loadTexts: hwprjTimeSubmitted.setDescription('Time that the job is submitted. This property is inherited from CIM_Job.')
hwprjTotalPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjTotalPages.setStatus('current')
if mibBuilder.loadTexts: hwprjTotalPages.setDescription('Number of pages required to complete the job. This value may be 0 (zero) if the print job does not contain page-delimiting information.')
hwprjUntilTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 4, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwprjUntilTime.setStatus('current')
if mibBuilder.loadTexts: hwprjUntilTime.setDescription('Time when the job is invalid or should be stopped. This property is inherited from CIM_Job.')
win32TCPIPPrinterPortTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5), )
if mibBuilder.loadTexts: win32TCPIPPrinterPortTable.setStatus('current')
if mibBuilder.loadTexts: win32TCPIPPrinterPortTable.setDescription('The Win32_TCPIPPrinterPort WMI class represents a TCP/IP service access point. This class has been added for Windows XP.')
win32TCPIPPrinterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1), ).setIndexNames((0, "INFORMANT-HW", "hwtppIndex"))
if mibBuilder.loadTexts: win32TCPIPPrinterPortEntry.setStatus('current')
if mibBuilder.loadTexts: win32TCPIPPrinterPortEntry.setDescription('None')
hwtppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppIndex.setStatus('current')
if mibBuilder.loadTexts: hwtppIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwtppByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppByteCount.setStatus('current')
if mibBuilder.loadTexts: hwtppByteCount.setDescription('If TRUE, the computer counts the bytes in a document before sending them to the printer and the printer reports back the number of bytes actually read. This capability is used for diagnostics when missing bytes are detected in the print output.')
hwtppCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 3), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppCaption.setStatus('current')
if mibBuilder.loadTexts: hwtppCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwtppCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 4), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwtppCreationClassName.setDescription('Name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_ServiceAccessPoint.')
hwtppDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppDescription.setStatus('current')
if mibBuilder.loadTexts: hwtppDescription.setDescription('Detailed description of the functionality managed. This property is inherited from CIM_ManagedSystemElement.')
hwtppHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppHostAddress.setStatus('current')
if mibBuilder.loadTexts: hwtppHostAddress.setDescription('Address of the device or print server.')
hwtppInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwtppInstallDate.setDescription('Date and time when the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwtppName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppName.setStatus('current')
if mibBuilder.loadTexts: hwtppName.setDescription("Identifier for the service access point that provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property. This property is inherited from CIM_ManagedSystemElement.")
hwtppPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppPortNumber.setStatus('current')
if mibBuilder.loadTexts: hwtppPortNumber.setDescription('Number of the TCP port used by the port monitor to communicate with the device.')
hwtppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("raw", 0), ("lpr", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppProtocol.setStatus('current')
if mibBuilder.loadTexts: hwtppProtocol.setDescription('Printing protocol used. Some printers support only LPR.')
hwtppQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppQueue.setStatus('current')
if mibBuilder.loadTexts: hwtppQueue.setDescription('Name of the print queue on the server when used with the LPR protocol.')
hwtppSNMPCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppSNMPCommunity.setStatus('current')
if mibBuilder.loadTexts: hwtppSNMPCommunity.setDescription("Security level value for the device. Example: 'public''")
hwtppSNMPDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppSNMPDevIndex.setStatus('current')
if mibBuilder.loadTexts: hwtppSNMPDevIndex.setDescription('SNMP index number of this device for the SNMP agent.')
hwtppSNMPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppSNMPEnabled.setStatus('current')
if mibBuilder.loadTexts: hwtppSNMPEnabled.setDescription('If TRUE, this printer supports RFC1759 (Simple Network Management Protocol) and can provide rich status information from the device.')
hwtppStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppStatus.setStatus('current')
if mibBuilder.loadTexts: hwtppStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwtppSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 16), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwtppSystemCreationClassName.setDescription('Creation class name of the scoping system. This property is inherited from CIM_ServiceAccessPoint.')
hwtppSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 17), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppSystemName.setStatus('current')
if mibBuilder.loadTexts: hwtppSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_ServiceAccessPoint.')
hwtppType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 7, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("n0x1Write", 1), ("n0x2Read", 2), ("n0x4Redirected", 4), ("n0x8NetAttached", 8), ("n0x10Unknown", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwtppType.setStatus('current')
if mibBuilder.loadTexts: hwtppType.setDescription('Bitmap showing the type of service access point (SAP). This property is inherited from CIM_ServiceAccessPoint.')
wmiTelephony = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8))
if mibBuilder.loadTexts: wmiTelephony.setStatus('current')
if mibBuilder.loadTexts: wmiTelephony.setDescription("The Telephony subcategory groups classes that represent 'plain old telephone' modem devices and their associated serial connections.")
win32POTSModemTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1), )
if mibBuilder.loadTexts: win32POTSModemTable.setStatus('current')
if mibBuilder.loadTexts: win32POTSModemTable.setDescription('The Win32_POTSModem WMI class represents the services and characteristics of a Plain Old Telephone Service (POTS) modem on a Windows system.')
win32POTSModemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwpmIndex"))
if mibBuilder.loadTexts: win32POTSModemEntry.setStatus('current')
if mibBuilder.loadTexts: win32POTSModemEntry.setDescription('None')
hwpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmIndex.setStatus('current')
if mibBuilder.loadTexts: hwpmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwpmAnswerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("disabled", 3), ("manualAnswer", 4), ("autoAnswer", 5), ("autoAnswerWithCallBack", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmAnswerMode.setStatus('current')
if mibBuilder.loadTexts: hwpmAnswerMode.setDescription('Current auto-answer/call-back setting for the modem. This property is inherited from CIM_PotsModem.')
hwpmAttachedTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmAttachedTo.setStatus('current')
if mibBuilder.loadTexts: hwpmAttachedTo.setDescription("Port to which the POTS modem is attached. Example: 'COM1'")
hwpmAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmAvailability.setStatus('current')
if mibBuilder.loadTexts: hwpmAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwpmBlindOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 5), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmBlindOff.setStatus('current')
if mibBuilder.loadTexts: hwpmBlindOff.setDescription("Command string used to detect a dial tone before dialing. Example: 'X4'")
hwpmBlindOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 6), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmBlindOn.setStatus('current')
if mibBuilder.loadTexts: hwpmBlindOn.setDescription("Command string used to dial whether or not there is a dial tone. Example: 'X3'")
hwpmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCaption.setStatus('current')
if mibBuilder.loadTexts: hwpmCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpmCompatibilityFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCompatibilityFlags.setStatus('current')
if mibBuilder.loadTexts: hwpmCompatibilityFlags.setDescription('All modem connection protocols with which this modem device is compatible.')
hwpmCompressionInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noCompression", 3), ("mnp5", 4), ("v42bis", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCompressionInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmCompressionInfo.setDescription('Data compression characteristics of the modem. This property is inherited from CIM_PotsModem.')
hwpmCompressionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 10), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCompressionOff.setStatus('current')
if mibBuilder.loadTexts: hwpmCompressionOff.setDescription("Command string used to disable hardware data compression. Example: 'S46=136'")
hwpmCompressionOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 11), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCompressionOn.setStatus('current')
if mibBuilder.loadTexts: hwpmCompressionOn.setDescription("Command string used to enable hardware data compression. Example: 'S46=138'")
hwpmConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpmConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwpmConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwpmConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwpmConfigurationDialog = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 14), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmConfigurationDialog.setStatus('current')
if mibBuilder.loadTexts: hwpmConfigurationDialog.setDescription('Modem initialization string. This property is comprised of command strings from other properties of this class.')
hwpmCountriesSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 15), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCountriesSupported.setStatus('current')
if mibBuilder.loadTexts: hwpmCountriesSupported.setDescription('Array of countries/regions in which the modem can operate. This property is inherited from CIM_PotsModem.')
hwpmCountrySelected = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCountrySelected.setStatus('current')
if mibBuilder.loadTexts: hwpmCountrySelected.setDescription('Country/region for which the modem is currently programmed. When multiple countries/regions are supported, this property defines which one is currently selected for use. This property is inherited from CIM_PotsModem.')
hwpmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpmCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwpmCurrentPasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmCurrentPasswords.setStatus('current')
if mibBuilder.loadTexts: hwpmCurrentPasswords.setDescription('List of currently defined passwords for the modem. This array may be left blank for security reasons. This property is inherited from CIM_PotsModem.')
hwpmDCB = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 19), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDCB.setStatus('current')
if mibBuilder.loadTexts: hwpmDCB.setDescription('Control settings for a serial communications device, in this case, the modem device.')
hwpmDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 20), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDefault.setStatus('current')
if mibBuilder.loadTexts: hwpmDefault.setDescription('If TRUE, this POTS modem is the default modem on the Windows computer system.')
hwpmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDescription.setStatus('current')
if mibBuilder.loadTexts: hwpmDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwpmDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpmDeviceID.setDescription('Unique identifier of this POTS modem from other devices on the system. This property is inherited from CIM_LogicalDevice.')
hwpmDeviceLoader = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 23), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDeviceLoader.setStatus('current')
if mibBuilder.loadTexts: hwpmDeviceLoader.setDescription('Name of the device loader for the modem. A device loader loads and manages device drivers and enumerators for a given device.')
hwpmDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("nullModem", 1), ("internalModem", 2), ("externalModem", 3), ("pcmciaModem", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDeviceType.setStatus('current')
if mibBuilder.loadTexts: hwpmDeviceType.setDescription('Physical type of the modem.')
hwpmDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("tone", 1), ("pulse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDialType.setStatus('current')
if mibBuilder.loadTexts: hwpmDialType.setDescription('Type of dialing method used. This property is inherited from CIM_PotsModem.')
hwpmDriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmDriverDate.setStatus('current')
if mibBuilder.loadTexts: hwpmDriverDate.setDescription('Date of the modem driver.')
hwpmErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwpmErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwpmErrorControlForced = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmErrorControlForced.setStatus('current')
if mibBuilder.loadTexts: hwpmErrorControlForced.setDescription("Command string used to enable error correction control when establishing a connection. This increases the reliability of the connection. Example: '+Q5S36=4S48=7'")
hwpmErrorControlInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("noErrorCorrection", 3), ("mnp4", 4), ("lapm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmErrorControlInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmErrorControlInfo.setDescription('Error correction characteristics of the modem. This property is inherited from CIM_PotsModem.')
hwpmErrorControlOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 30), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmErrorControlOff.setStatus('current')
if mibBuilder.loadTexts: hwpmErrorControlOff.setDescription("Command string used to disable error control. Example: '+Q6S36=3S48=128'")
hwpmErrorControlOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmErrorControlOn.setStatus('current')
if mibBuilder.loadTexts: hwpmErrorControlOn.setDescription("Command string used to enable error control. Example: '+Q5S36=7S48=7'")
hwpmErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwpmErrorDescription.setDescription('More information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwpmFlowControlHard = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 33), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmFlowControlHard.setStatus('current')
if mibBuilder.loadTexts: hwpmFlowControlHard.setDescription("Command string used to enable hardware flow control. Flow control consists of signals sent between computers that verify that both computers are ready to transmit or receive data. Example: '&K1'")
hwpmFlowControlOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmFlowControlOff.setStatus('current')
if mibBuilder.loadTexts: hwpmFlowControlOff.setDescription("Command string used to disable flow control. Flow control consists of signals sent between computers that verify that both computers are ready to transmit or receive data. Example: '&K0'")
hwpmFlowControlSoft = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 35), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmFlowControlSoft.setStatus('current')
if mibBuilder.loadTexts: hwpmFlowControlSoft.setDescription("Command string used to enable software flow control. Flow control consists of signals sent between computers that verify that both computers are ready to transmit or receive data. Example: '&K2'")
hwpmInactivityScale = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 36), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmInactivityScale.setStatus('current')
if mibBuilder.loadTexts: hwpmInactivityScale.setDescription('Multiplier used with the InactivityTimeout property to calculate the timeout period of a connection.')
hwpmInactivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 37), Gauge32()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: hwpmInactivityTimeout.setDescription('Time limit (in seconds) for automatic disconnection of the phone line, if no data is exchanged. A value of 0 indicates that this feature is present but not enabled. This property is inherited from CIM_PotsModem.')
hwpmModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModemIndex.setStatus('current')
if mibBuilder.loadTexts: hwpmModemIndex.setDescription('Index number for this POTS modem. Example: 0')
hwpmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwpmInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwpmLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwpmLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwpmMaxBaudRateToPhone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 41), Gauge32()).setUnits('Bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmMaxBaudRateToPhone.setStatus('current')
if mibBuilder.loadTexts: hwpmMaxBaudRateToPhone.setDescription('Maximum settable communication speed for accessing the phone system. This property is inherited from CIM_PotsModem.')
hwpmMaxBaudRateToSerialPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 42), Gauge32()).setUnits('Bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmMaxBaudRateToSerialPort.setStatus('current')
if mibBuilder.loadTexts: hwpmMaxBaudRateToSerialPort.setDescription('Maximum settable communication speed to the COM port for an external modem. Enter 0 if not applicable. This property is inherited from CIM_PotsModem.')
hwpmMaxNumberOfPasswords = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmMaxNumberOfPasswords.setStatus('current')
if mibBuilder.loadTexts: hwpmMaxNumberOfPasswords.setDescription('Number of passwords definable in the modem itself. If this feature is not supported, enter 0. This property is inherited from CIM_PotsModem.')
hwpmModel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 44), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModel.setStatus('current')
if mibBuilder.loadTexts: hwpmModel.setDescription("Model of this POTS modem. Example: 'Sportster 56K External'")
hwpmModemInfPath = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModemInfPath.setStatus('current')
if mibBuilder.loadTexts: hwpmModemInfPath.setDescription("Path to this modem's .inf file. This file contains initialization information for the modem and its driver. Example: 'C:\\WINNT\\INF'")
hwpmModemInfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 46), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModemInfSection.setStatus('current')
if mibBuilder.loadTexts: hwpmModemInfSection.setDescription("Name of the section in the modem's .inf file that contains information about the modem.")
hwpmModulationBell = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 47), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModulationBell.setStatus('current')
if mibBuilder.loadTexts: hwpmModulationBell.setDescription("Command string used to instruct the modem to use Bell modulations for 300 and 1200 bps. Example: 'B1'")
hwpmModulationCCITT = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 48), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModulationCCITT.setStatus('current')
if mibBuilder.loadTexts: hwpmModulationCCITT.setDescription("Command string used to instruct the modem to use CCITT modulations for 300 and 1200 bps. Example: 'B0'")
hwpmModulationScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("notSupported", 3), ("bell103", 4), ("bell212A", 5), ("v22bis", 6), ("v32", 7), ("v32bis", 8), ("vturbo", 9), ("vFC", 10), ("v34", 11), ("v34bis", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmModulationScheme.setStatus('current')
if mibBuilder.loadTexts: hwpmModulationScheme.setDescription('Modulation scheme of the modem. This property is inherited from CIM_PotsModem.')
hwpmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 50), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmName.setStatus('current')
if mibBuilder.loadTexts: hwpmName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwpmPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 51), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwpmPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwpmPortSubClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("parallelPort", 0), ("serialPort", 1), ("modem", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmPortSubClass.setStatus('current')
if mibBuilder.loadTexts: hwpmPortSubClass.setDescription('Definition of the port used for this modem.')
hwpmPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 53), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwpmPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwpmPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 54), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwpmPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwpmPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 55), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmPrefix.setStatus('current')
if mibBuilder.loadTexts: hwpmPrefix.setDescription('Dialing prefix used to access an outside line.')
hwpmProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 56), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmProperties.setStatus('current')
if mibBuilder.loadTexts: hwpmProperties.setDescription('List of all the properties (and their values) for this modem.')
hwpmProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 57), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmProviderName.setStatus('current')
if mibBuilder.loadTexts: hwpmProviderName.setDescription('Network path to the computer that provides the modem services.')
hwpmPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 58), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmPulse.setStatus('current')
if mibBuilder.loadTexts: hwpmPulse.setDescription("Command string used to instruct the modem to use pulse mode for dialing. Pulse dialing is necessary for phone lines that are unable to handle tone dialing. Example: 'P'")
hwpmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 59), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmReset.setStatus('current')
if mibBuilder.loadTexts: hwpmReset.setDescription("Command string used to reset the modem for the next call. Example: 'AT&F'")
hwpmResponsesKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 60), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmResponsesKeyName.setStatus('current')
if mibBuilder.loadTexts: hwpmResponsesKeyName.setDescription('Response this modem might report to the operating system during the connection process. The first two characters specify the type of response. The second two characters specify information about the connection being made. The second two characters are used only for Negotiation Progress or Connect response codes. The next eight characters specify the modem-to-modem line speed negotiated in bits per second (bps). The characters represent a 32-bit integer doubleword format (byte and word reversed). The last eight characters indicate that the modem is changing to a different port or Data Terminal Equipment (DTE) speed. Usually this field is not used because modems make connections at a locked port speed regardless of the modem-to-modem or Data Communications Equipment (DCE) speed.')
hwpmRingsBeforeAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmRingsBeforeAnswer.setStatus('current')
if mibBuilder.loadTexts: hwpmRingsBeforeAnswer.setDescription('Number of rings before the modem answers an incoming call. This property is inherited from CIM_PotsModem.')
hwpmSpeakerModeDial = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 62), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerModeDial.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerModeDial.setDescription("Command string used to turn the modem speaker on after dialing a number, and turning the speaker off when a connection has been established. Example: 'M1'")
hwpmSpeakerModeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 63), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerModeOff.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerModeOff.setDescription("Command string used to turn the modem speaker off. Example: 'M0'")
hwpmSpeakerModeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 64), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerModeOn.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerModeOn.setDescription("Command string used to turn the modem speaker on. Example: 'M2'")
hwpmSpeakerModeSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 65), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerModeSetup.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerModeSetup.setDescription("Command string used to instruct the modem to turn the speaker on (until a connection is established). Example: 'M3'")
hwpmSpeakerVolumeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 66), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerVolumeHigh.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerVolumeHigh.setDescription("Command string used to set the modem speaker to the highest volume. Example: 'L3'")
hwpmSpeakerVolumeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("notSupported", 2), ("high", 3), ("medium", 4), ("low", 5), ("off", 6), ("auto", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerVolumeInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerVolumeInfo.setDescription('Describes the volume level of the audible tones from the modem. This property is inherited from CIM_PotsModem.')
hwpmSpeakerVolumeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 68), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerVolumeLow.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerVolumeLow.setDescription("Command string used to set the modem speaker to the lowest volume. Example: 'L1'")
hwpmSpeakerVolumeMed = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 69), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSpeakerVolumeMed.setStatus('current')
if mibBuilder.loadTexts: hwpmSpeakerVolumeMed.setDescription("Command string used to set the modem speaker to a medium volume. Example: 'L2'")
hwpmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmStatus.setStatus('current')
if mibBuilder.loadTexts: hwpmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwpmStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwpmStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwpmStringFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 72), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmStringFormat.setStatus('current')
if mibBuilder.loadTexts: hwpmStringFormat.setDescription("Type of characters used for text passed through the modem. Values are: 'ASCII string format' 'DBCS string format' 'UNICODE string format'")
hwpmSupportsCallback = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 73), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSupportsCallback.setStatus('current')
if mibBuilder.loadTexts: hwpmSupportsCallback.setDescription('If TRUE, the modem supports call-back. This property is inherited from CIM_PotsModem.')
hwpmSupportsSynchronousConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 74), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSupportsSynchronousConnect.setStatus('current')
if mibBuilder.loadTexts: hwpmSupportsSynchronousConnect.setDescription('If TRUE, synchronous, as well as asynchronous, communication is supported. This property is inherited from CIM_PotsModem.')
hwpmSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 75), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwpmSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwpmSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 76), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmSystemName.setStatus('current')
if mibBuilder.loadTexts: hwpmSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwpmTerminator = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 77), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmTerminator.setStatus('current')
if mibBuilder.loadTexts: hwpmTerminator.setDescription("String that marks the end of a command string. Example: '<cr'")
hwpmTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 78), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwpmTimeOfLastReset.setDescription('Date and time the modem was last reset. This property is inherited from CIM_PotsModem.')
hwpmTone = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 79), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmTone.setStatus('current')
if mibBuilder.loadTexts: hwpmTone.setDescription("Command string that instructs the modem to use tone mode for dialing. The phone line must support tone dialing. Example: 'T'")
hwpmVoiceSwitchFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 8, 1, 1, 80), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwpmVoiceSwitchFeature.setStatus('current')
if mibBuilder.loadTexts: hwpmVoiceSwitchFeature.setDescription("Command strings used to activate the voice capabilities of a voice modem. Example: 'AT+V'")
wmiVideoMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9))
if mibBuilder.loadTexts: wmiVideoMonitor.setStatus('current')
if mibBuilder.loadTexts: wmiVideoMonitor.setDescription('The Video and Monitors subcategory groups classes that represent monitors, video cards, and their associated settings.')
win32DesktopMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1), )
if mibBuilder.loadTexts: win32DesktopMonitorTable.setStatus('current')
if mibBuilder.loadTexts: win32DesktopMonitorTable.setDescription('The Win32_DesktopMonitor WMI class represents the type of monitor or display device attached to the computer system.')
win32DesktopMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1), ).setIndexNames((0, "INFORMANT-HW", "hwdmIndex"))
if mibBuilder.loadTexts: win32DesktopMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: win32DesktopMonitorEntry.setDescription('None')
hwdmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmIndex.setStatus('current')
if mibBuilder.loadTexts: hwdmIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwdmAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmAvailability.setStatus('current')
if mibBuilder.loadTexts: hwdmAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwdmBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwdmBandwidth.setDescription("Monitor's bandwidth in megahertz. If unknown, enter 0. This property is inherited from CIM_DesktopMonitor.")
hwdmCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmCaption.setStatus('current')
if mibBuilder.loadTexts: hwdmCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwdmConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwdmConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwdmConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwdmConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwdmCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 7), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwdmCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwdmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 8), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmDescription.setStatus('current')
if mibBuilder.loadTexts: hwdmDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwdmDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 9), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwdmDeviceID.setDescription('Unique identifier of a desktop monitor. This property is inherited from CIM_LogicalDevice.')
hwdmDisplayType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 0), ("other", 1), ("multiscanColor", 2), ("multiscanMonochrome", 3), ("fixedFrequencyColor", 4), ("fixedFrequencyMonochrome", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmDisplayType.setStatus('current')
if mibBuilder.loadTexts: hwdmDisplayType.setDescription('Type of desktop monitor or CRT. This property is inherited from CIM_DesktopMonitor.')
hwdmErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwdmErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode is now cleared. This property is inherited from CIM_LogicalDevice.')
hwdmErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 12), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwdmErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwdmInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwdmInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwdmIsLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmIsLocked.setStatus('current')
if mibBuilder.loadTexts: hwdmIsLocked.setDescription('If TRUE, the device is locked, preventing user input or output. This property is inherited from CIM_UserDevice.')
hwdmLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwdmLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwdmMonitorManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 16), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmMonitorManufacturer.setStatus('current')
if mibBuilder.loadTexts: hwdmMonitorManufacturer.setDescription("Name of the monitor manufacturer. Example: 'NEC'")
hwdmMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 17), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmMonitorType.setStatus('current')
if mibBuilder.loadTexts: hwdmMonitorType.setDescription("Type of monitor. Example: 'NEC 5FGp'")
hwdmName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 18), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmName.setStatus('current')
if mibBuilder.loadTexts: hwdmName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwdmPixelsPerXLogicalInch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 19), Gauge32()).setUnits('Pixels per Logical Inch').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmPixelsPerXLogicalInch.setStatus('current')
if mibBuilder.loadTexts: hwdmPixelsPerXLogicalInch.setDescription('Resolution along the X axis (horizontal direction) of the monitor.')
hwdmPixelsPerYLogicalInch = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 20), Gauge32()).setUnits('Pixels per Logical Inch').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmPixelsPerYLogicalInch.setStatus('current')
if mibBuilder.loadTexts: hwdmPixelsPerYLogicalInch.setDescription('Resolution along the Y axis (vertical direction) of the monitor.')
hwdmPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwdmPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwdmPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwdmPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwdmPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwdmPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwdmScreenHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmScreenHeight.setStatus('current')
if mibBuilder.loadTexts: hwdmScreenHeight.setDescription('Logical height of the display in screen coordinates. This property is inherited from CIM_DesktopMonitor.')
hwdmScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmScreenWidth.setStatus('current')
if mibBuilder.loadTexts: hwdmScreenWidth.setDescription('Logical width of the display in screen coordinates. This property is inherited from CIM_DesktopMonitor.')
hwdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmStatus.setStatus('current')
if mibBuilder.loadTexts: hwdmStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwdmStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwdmStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwdmSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwdmSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwdmSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 1, 1, 29), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwdmSystemName.setStatus('current')
if mibBuilder.loadTexts: hwdmSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
win32VideoControllerTable = MibTable((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2), )
if mibBuilder.loadTexts: win32VideoControllerTable.setStatus('current')
if mibBuilder.loadTexts: win32VideoControllerTable.setDescription('The Win32_VideoController WMI class represents the capabilities and management capacity of the video controller on a Windows computer system.')
win32VideoControllerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1), ).setIndexNames((0, "INFORMANT-HW", "hwvcIndex"))
if mibBuilder.loadTexts: win32VideoControllerEntry.setStatus('current')
if mibBuilder.loadTexts: win32VideoControllerEntry.setDescription('None')
hwvcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcIndex.setStatus('current')
if mibBuilder.loadTexts: hwvcIndex.setDescription('The value of this object uniquely identifies the instance entry for this class.')
hwvcAcceleratorCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 2), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcAcceleratorCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwvcAcceleratorCapabilities.setDescription('Array of graphics and 3D capabilities of the video controller. This property is inherited from CIM_VideoController. Value Meaning 0 Unknown 1 Other 2 Graphics Accelerator 3 3D Accelerator ')
hwvcAdapterCompatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 3), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcAdapterCompatibility.setStatus('current')
if mibBuilder.loadTexts: hwvcAdapterCompatibility.setDescription('General chip set used for this controller to compare compatibilities with the system.')
hwvcAdapterDACType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 4), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcAdapterDACType.setStatus('current')
if mibBuilder.loadTexts: hwvcAdapterDACType.setDescription('Name or identifier of the digital-to-analog converter (DAC) chip. The character set of this property is alphanumeric.')
hwvcAdapterRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 5), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcAdapterRAM.setStatus('current')
if mibBuilder.loadTexts: hwvcAdapterRAM.setDescription('Memory size of the video adapter. Example: 64000')
hwvcAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("runningFullPower", 3), ("warning", 4), ("inTest", 5), ("notApplicable", 6), ("powerOff", 7), ("offLine", 8), ("offDuty", 9), ("degraded", 10), ("notInstalled", 11), ("installError", 12), ("powerSaveUnknown", 13), ("powerSaveLowPowerMode", 14), ("powerSaveStandby", 15), ("powerCycle", 16), ("powerSaveWarning", 17), ("paused", 18), ("notReady", 19), ("notConfigured", 20), ("quiesced", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcAvailability.setStatus('current')
if mibBuilder.loadTexts: hwvcAvailability.setDescription('Availability and status of the device. Power Save - Unknown indicates that the device is known to be in a power save mode, but its exact status is unknown; Power Save - Low Power Mode indicates that the device is in a power save state but still functioning, and may exhibit degraded performance; Power Save - Standby indicates that the device is not functioning but could be brought to full power quickly; and Power Save - Warning indicates that the device is in a warning state, though also in a power save mode. This property is inherited from CIM_LogicalDevice.')
hwvcCapabilityDescriptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 7), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCapabilityDescriptions.setStatus('current')
if mibBuilder.loadTexts: hwvcCapabilityDescriptions.setDescription('Free-form strings providing more detailed explanations for any of the video accelerator features indicated in the AcceleratorCapabilities array. Note, each entry of this array is related to the entry in the AcceleratorCapabilities array that is located at the same index. This property is inherited from CIM_VideoController.')
hwvcCaption = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 8), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCaption.setStatus('current')
if mibBuilder.loadTexts: hwvcCaption.setDescription('Short description (one-line string) of the object. This property is inherited from CIM_ManagedSystemElement.')
hwvcColorTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcColorTableEntries.setStatus('current')
if mibBuilder.loadTexts: hwvcColorTableEntries.setDescription("Size of the system's color table. The device must have a color depth of no more than 8 bits per pixel; otherwise, this property is not set. Example: 256")
hwvcConfigManagerErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("workingProperly", 0), ("notConfigured", 1), ("cannotLoad", 2), ("lowResource", 3), ("driverCorrupted", 4), ("needResource", 5), ("bootConflicts", 6), ("cannotFilter", 7), ("driverLoaderMissing", 8), ("resourceIncorrect", 9), ("cannotStart", 10), ("deviceFailed", 11), ("noFreeResources", 12), ("cannotVerifyResources", 13), ("restartComputer", 14), ("reenumerationProblem", 15), ("cannotIdentify", 16), ("unknownResourceType", 17), ("reinstallDrivers", 18), ("failedVXDloader", 19), ("registryCorrupted", 20), ("systemFailure", 21), ("deviceDisabled", 22), ("systemFailuer2", 23), ("deviceProblem", 24), ("settingUpDevice", 25), ("settingUpDevice2", 26), ("invalidLogConfiguration", 27), ("driversNotInstalled", 28), ("missingResources", 29), ("conflictIRQ", 30), ("cannotLoadDrivers", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcConfigManagerErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwvcConfigManagerErrorCode.setDescription('Windows Configuration Manager error code. This property is inherited from CIM_LogicalDevice.')
hwvcConfigManagerUserConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcConfigManagerUserConfig.setStatus('current')
if mibBuilder.loadTexts: hwvcConfigManagerUserConfig.setDescription('If TRUE, the device is using a user-defined configuration. This property is inherited from CIM_LogicalDevice.')
hwvcCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 12), WtcsDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwvcCreationClassName.setDescription('Name of the first concrete class to appear in the inheritance chain used in the creation of an instance. When used with the other key properties of the class, the property allows all instances of this class and its subclasses to be uniquely identified. This property is inherited from CIM_LogicalDevice.')
hwvcCurrentBitsPerPixel = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 13), Gauge32()).setUnits('Bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentBitsPerPixel.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentBitsPerPixel.setDescription('Number of bits used to display each pixel. This property is inherited from CIM_VideoController.')
hwvcCurrentHorizontalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 14), Gauge32()).setUnits('Pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentHorizontalResolution.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentHorizontalResolution.setDescription('Current number of horizontal pixels. This property is inherited from CIM_VideoController.')
hwvcCurrentNumberOfColors = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentNumberOfColors.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentNumberOfColors.setDescription('Number of colors supported at the current resolution. This property is inherited from CIM_VideoController.')
hwvcCurrentNumberOfColumns = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentNumberOfColumns.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentNumberOfColumns.setDescription('Number of columns for this video controller (if in character mode). Otherwise, enter 0. This property is inherited from CIM_VideoController.')
hwvcCurrentNumberOfRows = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentNumberOfRows.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentNumberOfRows.setDescription('Number of rows for this video controller (if in character mode). Otherwise, enter 0. This property is inherited from CIM_VideoController.')
hwvcCurrentRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 18), Gauge32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentRefreshRate.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentRefreshRate.setDescription('Frequency at which the video controller refreshes the image for the monitor. A value of 0 indicates the default rate is being used, while 0xFFFFFFFF indicates the optimal rate is being used. This property is inherited from CIM_VideoController.')
hwvcCurrentScanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("interlaced", 3), ("nonInterlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentScanMode.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentScanMode.setDescription('Current scan mode. This property is inherited from CIM_VideoController.')
hwvcCurrentVerticalResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 20), Gauge32()).setUnits('Pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcCurrentVerticalResolution.setStatus('current')
if mibBuilder.loadTexts: hwvcCurrentVerticalResolution.setDescription('Current number of vertical pixels. This property is inherited from CIM_VideoController.')
hwvcDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 21), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcDescription.setStatus('current')
if mibBuilder.loadTexts: hwvcDescription.setDescription('Description of the object. This property is inherited from CIM_ManagedSystemElement.')
hwvcDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 22), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwvcDeviceID.setDescription('Identifier (unique to the computer system) for this video controller. This property is inherited from CIM_LogicalDevice.')
hwvcDeviceSpecificPens = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcDeviceSpecificPens.setStatus('current')
if mibBuilder.loadTexts: hwvcDeviceSpecificPens.setDescription('Current number of device-specific pens. A value of 0xffff means that the device does not support pens. Example: 3')
hwvcDitherType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noDithering", 1), ("ditheringWithACoarseBrush", 2), ("ditheringWithAFineBrush", 3), ("lineArtDithering", 4), ("deviceDoesGrayScaling", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcDitherType.setStatus('current')
if mibBuilder.loadTexts: hwvcDitherType.setDescription('Dither type of the video controller. The property can be one of the predefined values, or a driver-defined value greater than or equal to 256. If line art dithering is chosen, the controller uses a dithering method that produces well-defined borders between black, white, and gray scalings. Line art dithering is not suitable for images that include continuous graduations in intensity and hue such as scanned photographs.')
hwvcDriverDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcDriverDate.setStatus('current')
if mibBuilder.loadTexts: hwvcDriverDate.setDescription('Last modification date and time of the currently-installed video driver.')
hwvcDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 26), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcDriverVersion.setStatus('current')
if mibBuilder.loadTexts: hwvcDriverVersion.setDescription('Version number of the video driver.')
hwvcErrorCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcErrorCleared.setStatus('current')
if mibBuilder.loadTexts: hwvcErrorCleared.setDescription('If TRUE, the error reported in LastErrorCode property is now cleared. This property is inherited from CIM_LogicalDevice.')
hwvcErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 28), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcErrorDescription.setStatus('current')
if mibBuilder.loadTexts: hwvcErrorDescription.setDescription('Free-form string supplying more information about the error recorded in LastErrorCode property, and information on any corrective actions that may be taken. This property is inherited from CIM_LogicalDevice.')
hwvcICMIntent = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("saturation", 1), ("contrast", 2), ("exactColor", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcICMIntent.setStatus('current')
if mibBuilder.loadTexts: hwvcICMIntent.setDescription('Specific value of one of the three possible color-matching methods or intents that should be used by default. This property is used primarily for non-ICM applications. ICM applications establish intents by using the ICM functions. This property can be a predefined value or a driver defined value greater than or equal to 256. Color matching based on saturation is the most appropriate choice for business graphs when dithering is not desired. Color matching based on contrast is the most appropriate choice for scanned or photographic images when dithering is desired. Color matching optimized to match the exact color requested is most appropriate for use with business logos or other images when an exact color match is desired.')
hwvcICMMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("windows", 2), ("deviceDriver", 3), ("destinationDevice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcICMMethod.setStatus('current')
if mibBuilder.loadTexts: hwvcICMMethod.setDescription('Method of handling ICM. For non-ICM applications, this property determines if ICM is enabled. For ICM applications, the system examines this property to determine how to handle ICM support. This property can be a predefined value or a driver-defined value greater than or equal to 256. The value determines which system handles image color matching.')
hwvcInfFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 31), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcInfFilename.setStatus('current')
if mibBuilder.loadTexts: hwvcInfFilename.setDescription("Path to the video adapter's .inf file. Example: 'C:\\WINNT\\SYSTEM32\\DRIVERS'")
hwvcInfSection = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 32), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcInfSection.setStatus('current')
if mibBuilder.loadTexts: hwvcInfSection.setDescription('Section of the .inf file where the Windows video information resides.')
hwvcInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcInstallDate.setStatus('current')
if mibBuilder.loadTexts: hwvcInstallDate.setDescription('Date and time the object was installed. This property does not need a value to indicate that the object is installed. This property is inherited from CIM_ManagedSystemElement.')
hwvcInstalledDisplayDrivers = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 34), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcInstalledDisplayDrivers.setStatus('current')
if mibBuilder.loadTexts: hwvcInstalledDisplayDrivers.setDescription('Name of the installed display device driver.')
hwvcLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: hwvcLastErrorCode.setDescription('Last error code reported by the logical device. This property is inherited from CIM_LogicalDevice.')
hwvcMaxMemorySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 36), Gauge32()).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcMaxMemorySupported.setStatus('current')
if mibBuilder.loadTexts: hwvcMaxMemorySupported.setDescription('Maximum amount of memory supported in bytes. This property is inherited from CIM_VideoController.')
hwvcMaxNumberControlled = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcMaxNumberControlled.setStatus('current')
if mibBuilder.loadTexts: hwvcMaxNumberControlled.setDescription('Maximum number of directly addressable entities supportable by this controller. A value of 0 should be used if the number is unknown. This property is inherited from CIM_Controller.')
hwvcMaxRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 38), Gauge32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcMaxRefreshRate.setStatus('current')
if mibBuilder.loadTexts: hwvcMaxRefreshRate.setDescription('Maximum refresh rate of the video controller in hertz. This property is inherited from CIM_VideoController.')
hwvcMinRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 39), Gauge32()).setUnits('Hertz').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcMinRefreshRate.setStatus('current')
if mibBuilder.loadTexts: hwvcMinRefreshRate.setDescription('Minimum refresh rate of the video controller in hertz. This property is inherited from CIM_VideoController.')
hwvcMonochrome = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 40), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcMonochrome.setStatus('current')
if mibBuilder.loadTexts: hwvcMonochrome.setDescription('If TRUE, gray scale is used to display images.')
hwvcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 41), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcName.setStatus('current')
if mibBuilder.loadTexts: hwvcName.setDescription('Label by which the object is known. When subclassed, the property can be overridden to be a key property. This property is inherited from CIM_ManagedSystemElement.')
hwvcNumberOfColorPlanes = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcNumberOfColorPlanes.setStatus('current')
if mibBuilder.loadTexts: hwvcNumberOfColorPlanes.setDescription('Current number of color planes. If this value is not applicable for the current video configuration, enter 0. This property is inherited from CIM_PCVideoController.')
hwvcNumberOfVideoPages = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcNumberOfVideoPages.setStatus('current')
if mibBuilder.loadTexts: hwvcNumberOfVideoPages.setDescription('Number of video pages supported given the current resolutions and available memory. This property is inherited from CIM_VideoController.')
hwvcPNPDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 44), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcPNPDeviceID.setStatus('current')
if mibBuilder.loadTexts: hwvcPNPDeviceID.setDescription("Windows Plug and Play device identifier of the logical device. This property is inherited from CIM_LogicalDevice. Example: '*PNP030b'")
hwvcPowerManagementCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 45), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcPowerManagementCapabilities.setStatus('current')
if mibBuilder.loadTexts: hwvcPowerManagementCapabilities.setDescription('Array of the specific power-related capabilities of a logical device. The Enabled value indicates that the power management features are currently enabled but the exact feature set is unknown or the information is unavailable. Power Saving Modes Entered Automatically indicates that a device can change its power state based on usage or other criteria. Power State Settable indicates that the SetPowerState method is supported. Power Cycling Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle). Timed Power On Supported indicates that the SetPowerState method can be invoked with the PowerState parameter set to 5 (Power Cycle) and Time set to a specific date and time, or interval, for power-on. This property is inherited from CIM_LogicalDevice. Value Meaning 0 Unknown 1 Not Supported 2 Disabled 3 Enabled 4 Power Saving Modes Entered Automatically 5 Power State Settable 6 Power Cycling Supported 7 Timed Power On Supported ')
hwvcPowerManagementSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcPowerManagementSupported.setStatus('current')
if mibBuilder.loadTexts: hwvcPowerManagementSupported.setDescription('If TRUE, the device can be power-managed (can be put into suspend mode, and so on). The property does not indicate that power management features are currently enabled, only that the logical device is capable of power management. This property is inherited from CIM_LogicalDevice.')
hwvcProtocolSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46))).clone(namedValues=NamedValues(("other", 0), ("unknown", 1), ("eisa", 2), ("isa", 3), ("pci", 4), ("ataATAPI", 5), ("flexibleDiskette", 6), ("n1496", 7), ("scsiParallelInterface", 8), ("scsiFibreChannelProtocol", 9), ("scsiSerialBusProtocol", 10), ("scsiSerialBusProtocol1394", 11), ("scsiSerialStorageArchitecture", 12), ("vesa", 13), ("pcmcia", 14), ("universalSerialBus", 15), ("parallelProtocol", 16), ("escon", 17), ("diagnostic", 18), ("i2C", 19), ("power", 20), ("hippi", 21), ("multiBus", 22), ("vme", 23), ("ipi", 24), ("ieee488", 25), ("rs232", 26), ("ieee802310BASE5", 27), ("ieee802310BASE2", 28), ("ieee80231BASE5", 29), ("ieee802310BROAD36", 30), ("ieee8023100BASEVG", 31), ("ieee8025TokenRing", 32), ("ansiX3T95FDDI", 33), ("mca", 34), ("esdi", 35), ("ide", 36), ("cmd", 37), ("st506", 38), ("dssi", 39), ("qic2", 40), ("enhancedATAIDE", 41), ("agp", 42), ("twowayInfrared", 43), ("fastInfrared", 44), ("serialInfrared", 45), ("irBus", 46)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcProtocolSupported.setStatus('current')
if mibBuilder.loadTexts: hwvcProtocolSupported.setDescription("Protocol used by the controller to access 'controlled' devices. This property is inherited from CIM_Controller.")
hwvcReservedSystemPaletteEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcReservedSystemPaletteEntries.setStatus('current')
if mibBuilder.loadTexts: hwvcReservedSystemPaletteEntries.setDescription('Number of reserved entries in the system palette. The operating system may reserve entries to support standard colors for task bars and other desktop display items. This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index, and is available only if the driver is compatible with 16-bit Windows. If the system is not using a palette, ReservedSystemPaletteEntries is not set. Example: 20')
hwvcSpecificationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcSpecificationVersion.setStatus('current')
if mibBuilder.loadTexts: hwvcSpecificationVersion.setDescription('Version number of the initialization data specification (upon which the structure is based).')
hwvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("degraded", 3), ("unknown", 4), ("predFail", 5), ("starting", 6), ("stopping", 7), ("service", 8), ("stressed", 9), ("nonRecover", 10), ("noContact", 11), ("lostComm", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcStatus.setStatus('current')
if mibBuilder.loadTexts: hwvcStatus.setDescription("Current status of the object. Various operational and non-operational statuses can be defined. Operational statuses include: 'OK', 'Degraded', and 'Pred Fail' (an element, such as a SMART-enabled hard drive, may be functioning properly but predicting a failure in the near future). Non-operational statuses include: 'Error', 'Starting', 'Stopping', and 'Service'. The latter, 'Service', could apply during mirror-resilvering of a disk, reload of a user permissions list, or other administrative work. Not all such work is online, yet the managed element is neither 'OK' nor in one of the other states. This property is inherited from CIM_ManagedSystemElement.")
hwvcStatusInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("enabled", 3), ("disabled", 4), ("notApplicable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcStatusInfo.setStatus('current')
if mibBuilder.loadTexts: hwvcStatusInfo.setDescription('State of the logical device. If this property does not apply to the logical device, the value 5 (Not Applicable) should be used. This property is inherited from CIM_LogicalDevice.')
hwvcSystemCreationClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 52), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcSystemCreationClassName.setStatus('current')
if mibBuilder.loadTexts: hwvcSystemCreationClassName.setDescription("Value of the scoping computer's CreationClassName property. This property is inherited from CIM_LogicalDevice.")
hwvcSystemName = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 53), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcSystemName.setStatus('current')
if mibBuilder.loadTexts: hwvcSystemName.setDescription('Name of the scoping system. This property is inherited from CIM_LogicalDevice.')
hwvcSystemPaletteEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcSystemPaletteEntries.setStatus('current')
if mibBuilder.loadTexts: hwvcSystemPaletteEntries.setDescription('Current number of color index entries in the system palette. This index is valid only if the device driver sets the RC_PALETTE bit in the RASTERCAPS index, and is available only if the driver is compatible with 16-bit Windows. If the system is not using a palette, SystemPaletteEntries is not set. Example: 20')
hwvcTimeOfLastReset = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 55), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcTimeOfLastReset.setStatus('current')
if mibBuilder.loadTexts: hwvcTimeOfLastReset.setDescription('Date and time this controller was last reset. This could mean the controller was powered down, or reinitialized. This property is inherited from CIM_Controller.')
hwvcVideoArchitecture = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 160))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("cga", 3), ("ega", 4), ("vga", 5), ("svga", 6), ("mda", 7), ("hgc", 8), ("mcga", 9), ("n8514A", 10), ("xga", 11), ("linearFrameBuffer", 12), ("pc98", 160)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcVideoArchitecture.setStatus('current')
if mibBuilder.loadTexts: hwvcVideoArchitecture.setDescription('Type of video architecture. This property is inherited from CIM_PCVideoController.')
hwvcVideoMemoryType = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("vram", 3), ("dram", 4), ("sram", 5), ("wram", 6), ("edoRAM", 7), ("burstSynchronousDRAM", 8), ("pipelinedBurstSRAM", 9), ("cdram", 10), ("n3DRAM", 11), ("sdram", 12), ("sgram", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcVideoMemoryType.setStatus('current')
if mibBuilder.loadTexts: hwvcVideoMemoryType.setDescription('Type of video memory. This property is inherited from CIM_VideoController.')
hwvcVideoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcVideoMode.setStatus('current')
if mibBuilder.loadTexts: hwvcVideoMode.setDescription('Current video mode. This property is inherited from CIM_PCVideoController.')
hwvcVideoModeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 59), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcVideoModeDescription.setStatus('current')
if mibBuilder.loadTexts: hwvcVideoModeDescription.setDescription("Current resolution, color, and scan mode settings of the video controller. Example: '1024 x 768 x 256 colors'")
hwvcVideoProcessor = MibTableColumn((1, 3, 6, 1, 4, 1, 9600, 1, 21, 9, 2, 1, 60), WtcsDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwvcVideoProcessor.setStatus('current')
if mibBuilder.loadTexts: hwvcVideoProcessor.setDescription('Free-form string describing the video processor. This property is inherited from CIM_VideoController.')
mibBuilder.exportSymbols("INFORMANT-HW", hwpcOtherIdentifyingInfo=hwpcOtherIdentifyingInfo, hwscsiDeviceMap=hwscsiDeviceMap, hwspcXOffXMitThreshold=hwspcXOffXMitThreshold, hwuhIndex=hwuhIndex, hwupsCreationClassName=hwupsCreationClassName, hwnacDHCPLeaseExpires=hwnacDHCPLeaseExpires, hwfdCreationClassName=hwfdCreationClassName, hwtdMediaType=hwtdMediaType, win32MemoryDeviceEntry=win32MemoryDeviceEntry, hwucPowerManagementSupported=hwucPowerManagementSupported, hwprcDisplayFrequency=hwprcDisplayFrequency, hwvcDriverVersion=hwvcDriverVersion, hw1394Status=hw1394Status, hwpmmTypeDetail=hwpmmTypeDetail, hwptResolution=hwptResolution, hwbuBusType=hwbuBusType, hwddTracksPerCylinder=hwddTracksPerCylinder, hwtdDeviceID=hwtdDeviceID, hwupsErrorCleared=hwupsErrorCleared, hwmbPowerManagementSupported=hwmbPowerManagementSupported, hwpcmSystemCreationClassName=hwpcmSystemCreationClassName, hwseSecurityBreach=hwseSecurityBreach, hwpmdDescription=hwpmdDescription, hwpmaCaption=hwpmaCaption, hwideCaption=hwideCaption, hwpmaWidth=hwpmaWidth, hwvcICMIntent=hwvcICMIntent, hwucErrorDescription=hwucErrorDescription, hwfanDesiredSpeed=hwfanDesiredSpeed, hwpsdLocation=hwpsdLocation, hwmmErrorResolution=hwmmErrorResolution, hwvpErrorCleared=hwvpErrorCleared, hwpmMaxNumberOfPasswords=hwpmMaxNumberOfPasswords, hwirqTriggerType=hwirqTriggerType, hwpbExpectedBatteryLife=hwpbExpectedBatteryLife, hwscsiDescription=hwscsiDescription, hwideStatus=hwideStatus, hwpmdRemovable=hwpmdRemovable, hw1394Index=hw1394Index, hwbbProduct=hwbbProduct, hwppTimeOfLastReset=hwppTimeOfLastReset, hwptName=hwptName, hwpnpStatusInfo=hwpnpStatusInfo, hwdmConfigManagerErrorCode=hwdmConfigManagerErrorCode, hwtmpNormalMin=hwtmpNormalMin, hwpsdIsSigned=hwpsdIsSigned, hwvcDitherType=hwvcDitherType, hwmbPowerManagementCapabilities=hwmbPowerManagementCapabilities, hwpmmSKU=hwpmmSKU, hwpmSystemCreationClassName=hwpmSystemCreationClassName, hwtppSystemCreationClassName=hwtppSystemCreationClassName, hwnacGatewayCostMetric=hwnacGatewayCostMetric, win32IRQResourceEntry=win32IRQResourceEntry, hwddSystemCreationClassName=hwddSystemCreationClassName, hwpmAvailability=hwpmAvailability, hwbiReleaseDate=hwbiReleaseDate, hwpcName=hwpcName, hwfanDeviceID=hwfanDeviceID, hwupsFirstMessageDelay=hwupsFirstMessageDelay, hwupsRange2InputFrequencyHigh=hwupsRange2InputFrequencyHigh, hwprcColor=hwprcColor, hwspSettableStopBits=hwspSettableStopBits, win32PortConnectorTable=win32PortConnectorTable, hwideLastErrorCode=hwideLastErrorCode, hwrfgSystemName=hwrfgSystemName, hwpbEstimatedChargeRemaining=hwpbEstimatedChargeRemaining, hwnaIndex=hwnaIndex, hwvpAvailability=hwvpAvailability, hwsePartNumber=hwsePartNumber, hwddDefaultBlockSize=hwddDefaultBlockSize, hwtdIndex=hwtdIndex, hwcmErrorCorrectType=hwcmErrorCorrectType, hwmbCaption=hwmbCaption, hwcpUpperThresholdNonCritical=hwcpUpperThresholdNonCritical, hwprEnableDevQueryPrint=hwprEnableDevQueryPrint, win32PortableBatteryTable=win32PortableBatteryTable, hwpmdModel=hwpmdModel, hwpmdReplaceable=hwpmdReplaceable, hwpmmSerialNumber=hwpmmSerialNumber, hwprdDriverPath=hwprdDriverPath, hwsbmConfigManagerErrorCode=hwsbmConfigManagerErrorCode, hwpcCaption=hwpcCaption, hwppCapabilityDescriptions=hwppCapabilityDescriptions, hwpmmPartNumber=hwpmmPartNumber, hwtmpLastErrorCode=hwtmpLastErrorCode, hwddCapabilityDescriptions=hwddCapabilityDescriptions, hwbuDeviceID=hwbuDeviceID, hwssDescription=hwssDescription, hwmmAvailability=hwmmAvailability, hwkbSystemCreationClassName=hwkbSystemCreationClassName, hwprdMonitorName=hwprdMonitorName, hwcpuStatus=hwcpuStatus, hwmaCreationClassName=hwmaCreationClassName, hwobHotSwappable=hwobHotSwappable, hwnacIPXNetworkNumber=hwnacIPXNetworkNumber, hwcdSCSILogicalUnit=hwcdSCSILogicalUnit, hwvpResolution=hwvpResolution, hwseHeatGeneration=hwseHeatGeneration, hwpmaDescription=hwpmaDescription, hwprjSize=hwprjSize, hwpcmManufacturer=hwpcmManufacturer, hwrfgConfigManagerUserConfig=hwrfgConfigManagerUserConfig, hwpmmTag=hwpmmTag, hwpreName=hwpreName, hwdaCSName=hwdaCSName, hwpmCompatibilityFlags=hwpmCompatibilityFlags, hwddSize=hwddSize, hwpmmMemoryType=hwpmmMemoryType, hwnacSettingID=hwnacSettingID, hwbaStatusInfo=hwbaStatusInfo, hwmbCreationClassName=hwmbCreationClassName, hwtdStatus=hwtdStatus, win32UninterruptPowerSupplyEntry=win32UninterruptPowerSupplyEntry, hwspSettableDataBits=hwspSettableDataBits, hwupsCanTurnOffRemotely=hwupsCanTurnOffRemotely, hwssPoweredOn=hwssPoweredOn, hwcpCurrentReading=hwcpCurrentReading, hwpmdWriteProtectOn=hwpmdWriteProtectOn, hwcpuNumberOfCores=hwcpuNumberOfCores, hwcpuDataWidth=hwcpuDataWidth, hwbuCreationClassName=hwbuCreationClassName, hwscsiPNPDeviceID=hwscsiPNPDeviceID, hwupsPowerManagementSupported=hwupsPowerManagementSupported, hwseHotSwappable=hwseHotSwappable, wmiVideoMonitor=wmiVideoMonitor, hwpcManufacturer=hwpcManufacturer, hwpmaHotSwappable=hwpmaHotSwappable, hwvpSystemName=hwvpSystemName, hwbbCreationClassName=hwbbCreationClassName, hwpcTag=hwpcTag, hwscsiManufacturer=hwscsiManufacturer, hwfcConfigManagerErrorCode=hwfcConfigManagerErrorCode, hw1394Caption=hw1394Caption, hwmbConfigManagerUserConfig=hwmbConfigManagerUserConfig, hwobName=hwobName, hwcmErrorAddress=hwcmErrorAddress, hwprjHostPrintQueue=hwprjHostPrintQueue, hwpreCSName=hwpreCSName, hwppSystemName=hwppSystemName, hwprjUntilTime=hwprjUntilTime, hwbiPrimaryBIOS=hwbiPrimaryBIOS, hwnaNetworkAddresses=hwnaNetworkAddresses, hwupsRange1InputFrequencyHigh=hwupsRange1InputFrequencyHigh, hwspPowerManagementSupported=hwspPowerManagementSupported, hwcmPowerManagementCapabilities=hwcmPowerManagementCapabilities, hwprdDataFile=hwprdDataFile, hw1394Name=hw1394Name, win32IDEControllerTable=win32IDEControllerTable, hwmaStatus=hwmaStatus, hwuhErrorCleared=hwuhErrorCleared, hwptInfFileName=hwptInfFileName, hwmbDeviceID=hwmbDeviceID, hwprStatusInfo=hwprStatusInfo, hwmaErrorCleared=hwmaErrorCleared, hwupsRemainingCapacityStatus=hwupsRemainingCapacityStatus, hwpmDeviceID=hwpmDeviceID, hwdaDescription=hwdaDescription, hwfdPowerManagementSupported=hwfdPowerManagementSupported, hwcmErrorDescription=hwcmErrorDescription, win32TCPIPPrinterPortEntry=win32TCPIPPrinterPortEntry, hwdmAvailability=hwdmAvailability, hwspSupportsRLSD=hwspSupportsRLSD, hwtdPNPDeviceID=hwtdPNPDeviceID, hwvpNormalMax=hwvpNormalMax, hwprjName=hwprjName, hwvcLastErrorCode=hwvcLastErrorCode, hwpmSpeakerVolumeLow=hwpmSpeakerVolumeLow, hwssSpecialPurpose=hwssSpecialPurpose, hwbiSoftwareElementState=hwbiSoftwareElementState, hwpmFlowControlHard=hwpmFlowControlHard, hwmaDescription=hwmaDescription, win32SerialPortConfigEntry=win32SerialPortConfigEntry, hwvcReservedSystemPaletteEntries=hwvcReservedSystemPaletteEntries, hwbbManufacturer=hwbbManufacturer, hwnacDNSServerSearchOrder=hwnacDNSServerSearchOrder, hwmbErrorCleared=hwmbErrorCleared, hwobReplaceable=hwobReplaceable, hwhpErrorCleared=hwhpErrorCleared, hwpreStatus=hwpreStatus, hwbbInstallDate=hwbbInstallDate, hwspSettableBaudRate=hwspSettableBaudRate, hwptCreationClassName=hwptCreationClassName, hwpsdProviderName=hwpsdProviderName, hwpmConfigManagerUserConfig=hwpmConfigManagerUserConfig, hwtdStatusInfo=hwtdStatusInfo, hwhpErrorDescription=hwhpErrorDescription, hwsmrCaption=hwsmrCaption, hwcpuArchitecture=hwcpuArchitecture, hwcdNeedsCleaning=hwcdNeedsCleaning, hwpmPowerManagementSupported=hwpmPowerManagementSupported, hwprAttributes=hwprAttributes, hwprPrintJobDataType=hwprPrintJobDataType, hwspName=hwspName, hwnaConfigManagerErrorCode=hwnaConfigManagerErrorCode, hwvpStatus=hwvpStatus, hwpmPowerManagementCapabilities=hwpmPowerManagementCapabilities, hwvpLowerThresholdFatal=hwvpLowerThresholdFatal, win32TCPIPPrinterPortTable=win32TCPIPPrinterPortTable, hwfanIndex=hwfanIndex, hwcdStatus=hwcdStatus, hwcpLowerThresholdCritical=hwcpLowerThresholdCritical, hwupsTypeOfRangeSwitching=hwupsTypeOfRangeSwitching, hwprCaption=hwprCaption, hwcpuExtClock=hwcpuExtClock, hwcdCompressionMethod=hwcdCompressionMethod, hwbiIndex=hwbiIndex, hwuhSubclassCode=hwuhSubclassCode, hwprDeviceID=hwprDeviceID, hwpmdOtherIdentifyingInfo=hwpmdOtherIdentifyingInfo, hwpmmPoweredOn=hwpmmPoweredOn, hwcpConfigManagerErrorCode=hwcpConfigManagerErrorCode, hwbiVersion=hwbiVersion, hwpmmOtherIdentifyingInfo=hwpmmOtherIdentifyingInfo, hwideName=hwideName, hwpbDesignCapacity=hwpbDesignCapacity, hwdmErrorCleared=hwdmErrorCleared, hwpreInstallDate=hwpreInstallDate, hwvcInfFilename=hwvcInfFilename, hwpcSerialNumber=hwpcSerialNumber, hwmaStartingAddress=hwmaStartingAddress, win32SystemMemoryResourceEntry=win32SystemMemoryResourceEntry, wmiInputDevice=wmiInputDevice, hwbbModel=hwbbModel, hwfcPowerManagementSupported=hwfcPowerManagementSupported, hwprcVerticalResolution=hwprcVerticalResolution, win32BIOSEntry=win32BIOSEntry, hwpnpLastErrorCode=hwpnpLastErrorCode, hwcmBlockSize=hwcmBlockSize, hwppErrorCleared=hwppErrorCleared, hwhpAvailability=hwhpAvailability, hwcmWritePolicy=hwcmWritePolicy, hwpmdInstallDate=hwpmdInstallDate, hwpmCountrySelected=hwpmCountrySelected, hwcmErrorMethodology=hwcmErrorMethodology, hwsbmEndingAddress=hwsbmEndingAddress, hwuhDeviceID=hwuhDeviceID, hwspSettableParity=hwspSettableParity, hwfcSystemName=hwfcSystemName, hwprCurrentCapabilities=hwprCurrentCapabilities, hwfdPowerManagementCapabilities=hwfdPowerManagementCapabilities, hwfanConfigManagerErrorCode=hwfanConfigManagerErrorCode, hwfanStatus=hwfanStatus, hwpmReset=hwpmReset, hwcdSize=hwcdSize, hwtdFeaturesHigh=hwtdFeaturesHigh, hwddErrorCleared=hwddErrorCleared, hwbbCaption=hwbbCaption, hwpcmErrorCleared=hwpcmErrorCleared, hwobEnabled=hwobEnabled, hw1394PowerManagementSupported=hw1394PowerManagementSupported, hwptConfigManagerErrorCode=hwptConfigManagerErrorCode, hw1394LastErrorCode=hw1394LastErrorCode, hwsbmErrorResolution=hwsbmErrorResolution, hwprDefaultMimeType=hwprDefaultMimeType)
mibBuilder.exportSymbols("INFORMANT-HW", hwbiBIOSVersion=hwbiBIOSVersion, hwcdInstallDate=hwcdInstallDate, hwpbBatteryStatus=hwpbBatteryStatus, hwsndProductName=hwsndProductName, hwprcSpecificationVersion=hwprcSpecificationVersion, hwpcVersion=hwpcVersion, hwbaTimeOnBattery=hwbaTimeOnBattery, hwssShared=hwssShared, hwdmaDescription=hwdmaDescription, hwasSettingID=hwasSettingID, hwvcAdapterDACType=hwvcAdapterDACType, hwvcProtocolSupported=hwvcProtocolSupported, hwscsiAvailability=hwscsiAvailability, hwbbOtherIdentifyingInfo=hwbbOtherIdentifyingInfo, hwpbErrorCleared=hwpbErrorCleared, hwptLastErrorCode=hwptLastErrorCode, hwbaBatteryStatus=hwbaBatteryStatus, hwprjInstallDate=hwprjInstallDate, hwmaErrorData=hwmaErrorData, hwspMaxBaudRate=hwspMaxBaudRate, hwideAvailability=hwideAvailability, hwnacTcpMaxDataRetransmissions=hwnacTcpMaxDataRetransmissions, hwmmLastErrorCode=hwmmLastErrorCode, hwnacIPSubnet=hwnacIPSubnet, hwcpSystemName=hwcpSystemName, hwmaConfigManagerUserConfig=hwmaConfigManagerUserConfig, hwirqIRQNumber=hwirqIRQNumber, hwhpDeviceID=hwhpDeviceID, hwcmConfigManagerErrorCode=hwcmConfigManagerErrorCode, PYSNMP_MODULE_ID=wmiHardware, hwvcVideoMemoryType=hwvcVideoMemoryType, hwnaPNPDeviceID=hwnaPNPDeviceID, win32PrintJobEntry=win32PrintJobEntry, hwuhNumberOfPorts=hwuhNumberOfPorts, hwsmrInstallDate=hwsmrInstallDate, win32NetworkAdapterTable=win32NetworkAdapterTable, hwpmmHotSwappable=hwpmmHotSwappable, hwddCreationClassName=hwddCreationClassName, hwscsiInstallDate=hwscsiInstallDate, hwtmpPowerManagementCapabilities=hwtmpPowerManagementCapabilities, hwvcStatusInfo=hwvcStatusInfo, hwbiSMBIOSPresent=hwbiSMBIOSPresent, hwupsLowBatterySignal=hwupsLowBatterySignal, hwnaMACAddress=hwnaMACAddress, hwsmrEndingAddress=hwsmrEndingAddress, hwfanCreationClassName=hwfanCreationClassName, hwvcNumberOfVideoPages=hwvcNumberOfVideoPages, hwspSystemCreationClassName=hwspSystemCreationClassName, hwfanSystemCreationClassName=hwfanSystemCreationClassName, hwspcXOnXOffInFlowControl=hwspcXOnXOffInFlowControl, hwprjParameters=hwprjParameters, hwideIndex=hwideIndex, hwtmpStatus=hwtmpStatus, hwtmpCaption=hwtmpCaption, hwtdLastErrorCode=hwtdLastErrorCode, hwprcPaperWidth=hwprcPaperWidth, hwsndDMABufferSize=hwsndDMABufferSize, hwtdMaxBlockSize=hwtdMaxBlockSize, win32TemperatureProbeEntry=win32TemperatureProbeEntry, win32PointingDeviceEntry=win32PointingDeviceEntry, hwcdTransferRate=hwcdTransferRate, hwscsiCreationClassName=hwscsiCreationClassName, hwsbmErrorMethodology=hwsbmErrorMethodology, hwcmFlushTimer=hwcmFlushTimer, hwbaTimeToFullCharge=hwbaTimeToFullCharge, wmiMassStorage=wmiMassStorage, hwseChassisTypes=hwseChassisTypes, hwmaName=hwmaName, hwpmmBankLabel=hwpmmBankLabel, hwbbHotSwappable=hwbbHotSwappable, hwmmCorrectableError=hwmmCorrectableError, hwvcPowerManagementCapabilities=hwvcPowerManagementCapabilities, hwprMaxSizeSupported=hwprMaxSizeSupported, hwvcDriverDate=hwvcDriverDate, hwprComment=hwprComment, hwucConfigManagerErrorCode=hwucConfigManagerErrorCode, hwvpConfigManagerUserConfig=hwvpConfigManagerUserConfig, hwmmBlockSize=hwmmBlockSize, hwpreAlias=hwpreAlias, win32FloppyControllerEntry=win32FloppyControllerEntry, hwddCompressionMethod=hwddCompressionMethod, hwprjDataType=hwprjDataType, hwseSKU=hwseSKU, hwsmrCSCreationClassName=hwsmrCSCreationClassName, hwupsInstallDate=hwupsInstallDate, hwpmmRemovable=hwpmmRemovable, win32POTSModemTable=win32POTSModemTable, hwnaCreationClassName=hwnaCreationClassName, hwbuLastErrorCode=hwbuLastErrorCode, hwsbmLastErrorCode=hwsbmLastErrorCode, hwprcFormName=hwprcFormName, hwupsUPSPort=hwupsUPSPort, hwpsdCompatID=hwpsdCompatID, win32SerialPortEntry=win32SerialPortEntry, hwvpDescription=hwvpDescription, hwnacWINSSecondaryServer=hwnacWINSSecondaryServer, hwvcCurrentHorizontalResolution=hwvcCurrentHorizontalResolution, hwdaStartingAddress=hwdaStartingAddress, hwddAvailability=hwddAvailability, hwuhStatus=hwuhStatus, hwmbIndex=hwmbIndex, wmiCoolingDevice=wmiCoolingDevice, hwrfgDeviceID=hwrfgDeviceID, hwcmInstalledSize=hwcmInstalledSize, hwpmIndex=hwpmIndex, hwucProtocolSupported=hwucProtocolSupported, hwhpLastErrorCode=hwhpLastErrorCode, hwbuPNPDeviceID=hwbuPNPDeviceID, hwddStatus=hwddStatus, hwpmaOtherIdentifyingInfo=hwpmaOtherIdentifyingInfo, hwsndPowerManagementCapabilities=hwsndPowerManagementCapabilities, hwcmErrorDataOrder=hwcmErrorDataOrder, hwprDirect=hwprDirect, hwpmdCapacity=hwpmdCapacity, hwnacWINSEnableLMHostsLookup=hwnacWINSEnableLMHostsLookup, hwprDefaultLanguage=hwprDefaultLanguage, hwvpLowerThresholdCritical=hwvpLowerThresholdCritical, hwtmpNormalMax=hwtmpNormalMax, hwnaRegistryIndex=hwnaRegistryIndex, hwpcPartNumber=hwpcPartNumber, hwtppPortNumber=hwtppPortNumber, hwcmLevel=hwcmLevel, hwprNetwork=hwprNetwork, hwdmCaption=hwdmCaption, hwpmDefault=hwpmDefault, hwpsdSystemName=hwpsdSystemName, hwdmaBurstMode=hwdmaBurstMode, win32PortConnectorEntry=win32PortConnectorEntry, hwucName=hwucName, hwmaAdditionalErrorData=hwmaAdditionalErrorData, hwptPowerManagementSupported=hwptPowerManagementSupported, hwpmModel=hwpmModel, hwcmErrorCleared=hwcmErrorCleared, win32SystemSlotTable=win32SystemSlotTable, hwsbmAvailability=hwsbmAvailability, hwppCreationClassName=hwppCreationClassName, win32SystemMemoryResourceTable=win32SystemMemoryResourceTable, hwspErrorDescription=hwspErrorDescription, hwvcConfigManagerErrorCode=hwvcConfigManagerErrorCode, hwnacServiceName=hwnacServiceName, win32ProcessorTable=win32ProcessorTable, hwssSupportsHotPlug=hwssSupportsHotPlug, win32USBControllerTable=win32USBControllerTable, hwvcAcceleratorCapabilities=hwvcAcceleratorCapabilities, hwscsiConfigManagerUserConfig=hwscsiConfigManagerUserConfig, hwpbDescription=hwpbDescription, hwpmSpeakerModeSetup=hwpmSpeakerModeSetup, win32PnPEntityEntry=win32PnPEntityEntry, hwidErrorCleared=hwidErrorCleared, hwobVersion=hwobVersion, hwscsiProtocolSupported=hwscsiProtocolSupported, hwsmrIndex=hwsmrIndex, hwpmmSpeed=hwpmmSpeed, hwupsStatusInfo=hwupsStatusInfo, win32PrinterDriverEntry=win32PrinterDriverEntry, hwvpStatusInfo=hwvpStatusInfo, hwdmInstallDate=hwdmInstallDate, hwdmaByteMode=hwdmaByteMode, hwssThermalRating=hwssThermalRating, hwbiCurrentLanguage=hwbiCurrentLanguage, hwpmdCaption=hwpmdCaption, hwcmReadPolicy=hwcmReadPolicy, hwseVersion=hwseVersion, hwssCreationClassName=hwssCreationClassName, hwssSKU=hwssSKU, win321394ControllerTable=win321394ControllerTable, hwcmErrorAccess=hwcmErrorAccess, hwupsCommandFile=hwupsCommandFile, hwcpNormalMax=hwcpNormalMax, hwobCaption=hwobCaption, win32DeviceMemoryAddressEntry=win32DeviceMemoryAddressEntry, hwscsiStatus=hwscsiStatus, hwupsEstimatedRunTime=hwupsEstimatedRunTime, hwdmCreationClassName=hwdmCreationClassName, hwbuConfigManagerUserConfig=hwbuConfigManagerUserConfig, win32SMBIOSMemoryTable=win32SMBIOSMemoryTable, hwcpDeviceID=hwcpDeviceID, win32POTSModemEntry=win32POTSModemEntry, hwprPublished=hwprPublished, hwtmpLowerThresholdFatal=hwtmpLowerThresholdFatal, hwpmmModel=hwpmmModel, hwpmaModel=hwpmaModel, hwprcDriverVersion=hwprcDriverVersion, hwprCapabilityDescriptions=hwprCapabilityDescriptions, hwtmpMinReadable=hwtmpMinReadable, hwpmStatus=hwpmStatus, hwcpPNPDeviceID=hwcpPNPDeviceID, hwvpCaption=hwvpCaption, hwnacForwardBufferMemory=hwnacForwardBufferMemory, hwprjStatusMask=hwprjStatusMask, hwidCreationClassName=hwidCreationClassName, hwpsdFriendlyName=hwpsdFriendlyName, hwbiSerialNumber=hwbiSerialNumber, hwpmConfigManagerErrorCode=hwpmConfigManagerErrorCode, hwprShareName=hwprShareName, hwspcDTRFlowControlType=hwspcDTRFlowControlType, hwcmStartingAddress=hwcmStartingAddress, hwsbmOtherErrorDescription=hwsbmOtherErrorDescription, hwseOtherIdentifyingInfo=hwseOtherIdentifyingInfo, hwirqCaption=hwirqCaption, hwdaInstallDate=hwdaInstallDate, hwnacIPSecPermitUDPPorts=hwnacIPSecPermitUDPPorts, hwpbAvailability=hwpbAvailability, win32PnPSignedDriverEntry=win32PnPSignedDriverEntry, hwideCreationClassName=hwideCreationClassName, hwmaPowerManagementSupported=hwmaPowerManagementSupported, hwpmDescription=hwpmDescription, hwdaIndex=hwdaIndex, hwptQuadSpeedThreshold=hwptQuadSpeedThreshold, win32PhysicalMemoryEntry=win32PhysicalMemoryEntry, hwnacIPXMediaType=hwnacIPXMediaType, hwmmConfigManagerErrorCode=hwmmConfigManagerErrorCode, hwddPhysicalIndex=hwddPhysicalIndex, hwcmCacheType=hwcmCacheType, hwssTag=hwssTag, hwhpCreationClassName=hwhpCreationClassName, hwpmdMediaType=hwpmdMediaType, win32InfraredDeviceTable=win32InfraredDeviceTable, hwbbName=hwbbName, hwprDoCompleteFirst=hwprDoCompleteFirst, hwmaErrorDescription=hwmaErrorDescription, hwmmOtherErrorDescription=hwmmOtherErrorDescription, win32DiskDriveTable=win32DiskDriveTable, hwpnpCaption=hwpnpCaption, hwprStatus=hwprStatus, win32HeatPipeTable=win32HeatPipeTable, hwtppByteCount=hwtppByteCount, hwmmIndex=hwmmIndex, hwfcManufacturer=hwfcManufacturer, hwcpuCurrentVoltage=hwcpuCurrentVoltage, hwpmmPositionInRow=hwpmmPositionInRow, hwbuConfigManagerErrorCode=hwbuConfigManagerErrorCode, hwpbSmartBatteryVersion=hwpbSmartBatteryVersion, hwdmSystemName=hwdmSystemName, hwbiSMBIOSMinorVersion=hwbiSMBIOSMinorVersion, hwmaAccess=hwmaAccess, hwnaName=hwnaName, hwnacDefaultTOS=hwnacDefaultTOS, win32MotherboardDeviceEntry=win32MotherboardDeviceEntry, hwssVersion=hwssVersion, hwmaErrorResolution=hwmaErrorResolution, hwmmPNPDeviceID=hwmmPNPDeviceID, hwssStatus=hwssStatus, hwideMaxNumberControlled=hwideMaxNumberControlled, hwuhPowerManagementSupported=hwuhPowerManagementSupported, hw1394ErrorCleared=hw1394ErrorCleared, hwtdReportSetMarks=hwtdReportSetMarks, hwidPowerManagementCapabilities=hwidPowerManagementCapabilities, hwspcDSRSensitivity=hwspcDSRSensitivity, hwssVppMixedVoltageSupport=hwssVppMixedVoltageSupport, hwcdSCSIBus=hwcdSCSIBus, win32VoltageProbeEntry=win32VoltageProbeEntry, hwobPartNumber=hwobPartNumber, hwsmrStatus=hwsmrStatus)
mibBuilder.exportSymbols("INFORMANT-HW", win32AutochkSettingTable=win32AutochkSettingTable, hwpmRingsBeforeAnswer=hwpmRingsBeforeAnswer, hwpmaMemoryDevices=hwpmaMemoryDevices, hwprSystemName=hwprSystemName, hwucConfigManagerUserConfig=hwucConfigManagerUserConfig, hwobOtherIdentifyingInfo=hwobOtherIdentifyingInfo, hwmmName=hwmmName, hwvcMaxMemorySupported=hwvcMaxMemorySupported, hwsbmCaption=hwsbmCaption, hwfdDefaultBlockSize=hwfdDefaultBlockSize, hwmmAdditionalErrorData=hwmmAdditionalErrorData, hwpmmIndex=hwpmmIndex, hwpbEstimatedRunTime=hwpbEstimatedRunTime, hwnacIPUseZeroBroadcast=hwnacIPUseZeroBroadcast, hwasUserInputDelay=hwasUserInputDelay, hwpmCreationClassName=hwpmCreationClassName, hwseWidth=hwseWidth, hwspcBitsPerByte=hwspcBitsPerByte, hwprjStartTime=hwprjStartTime, hwtmpDeviceID=hwtmpDeviceID, hwnaPowerManagementSupported=hwnaPowerManagementSupported, hwtppName=hwtppName, hwuhConfigManagerUserCode=hwuhConfigManagerUserCode, hwdmaAvailability=hwdmaAvailability, hwbbIndex=hwbbIndex, hwbbRequiresDaughterBoard=hwbbRequiresDaughterBoard, hwsbmErrorTime=hwsbmErrorTime, hwvcVideoProcessor=hwvcVideoProcessor, hwspcEventCharacter=hwspcEventCharacter, hwdmDescription=hwdmDescription, hwidConfigManagerErrorCode=hwidConfigManagerErrorCode, hwnacTcpWindowSize=hwnacTcpWindowSize, hwfdSystemCreationClassName=hwfdSystemCreationClassName, hwcpuManufacturer=hwcpuManufacturer, hwprExtendedPrinterStatus=hwprExtendedPrinterStatus, hwspOSAutoDiscovered=hwspOSAutoDiscovered, hwvcErrorDescription=hwvcErrorDescription, win32BusTable=win32BusTable, hwpreStartingAddress=hwpreStartingAddress, hwrfgPNPDeviceID=hwrfgPNPDeviceID, hwmaLastErrorCode=hwmaLastErrorCode, hwmmErrorDescription=hwmmErrorDescription, hwvcSystemName=hwvcSystemName, hwcdErrorCleared=hwcdErrorCleared, hwuhConfigManagerErrorCode=hwuhConfigManagerErrorCode, hwtdPadding=hwtdPadding, hwfcProtocolSupported=hwfcProtocolSupported, hwsmrName=hwsmrName, hwbaConfigManagerUserConfig=hwbaConfigManagerUserConfig, hwbaSmartBatteryVersion=hwbaSmartBatteryVersion, hwupsRange2InputFrequencyLow=hwupsRange2InputFrequencyLow, hwtmpPNPDeviceID=hwtmpPNPDeviceID, hwbbRemovable=hwbbRemovable, hwmmPurpose=hwmmPurpose, hwspStatusInfo=hwspStatusInfo, hwppDescription=hwppDescription, hwbbWidth=hwbbWidth, hwprdDefaultDataType=hwprdDefaultDataType, hwspcName=hwspcName, hwnaPermanentAddress=hwnaPermanentAddress, hwmmCaption=hwmmCaption, hwtdNumberOfMediaSupported=hwtdNumberOfMediaSupported, hwpbMaxRechargeTime=hwpbMaxRechargeTime, win32FanTable=win32FanTable, hwpmmFormFactor=hwpmmFormFactor, win321394ControllerEntry=win321394ControllerEntry, hwbuInstallDate=hwbuInstallDate, hwpreCSCreationClassName=hwpreCSCreationClassName, hwpbSystemName=hwpbSystemName, hwnacWINSScopeID=hwnacWINSScopeID, hwpcConnectorType=hwpcConnectorType, hwpbInstallDate=hwpbInstallDate, hwprdFilePath=hwprdFilePath, hwpcmErrorDescription=hwpcmErrorDescription, hwpmmCapacity=hwpmmCapacity, hwbuSystemCreationClassName=hwbuSystemCreationClassName, hwcpuRevision=hwcpuRevision, hwprCurrentCharSet=hwprCurrentCharSet, hwfcCreationClassName=hwfcCreationClassName, hwcpuCurrentClockSpeed=hwcpuCurrentClockSpeed, hwpcmIndex=hwpcmIndex, hwspTimeOfLastReset=hwspTimeOfLastReset, hwideDescription=hwideDescription, hwpsdSigner=hwpsdSigner, hwmaPowerManagementCapabilities=hwmaPowerManagementCapabilities, hwpsdClassGuid=hwpsdClassGuid, hwcpuVoltageCaps=hwcpuVoltageCaps, hwcdVolumeSerialNumber=hwcdVolumeSerialNumber, hwidPNPDeviceID=hwidPNPDeviceID, hwseReplaceable=hwseReplaceable, hwpmaMemoryErrorCorrection=hwpmaMemoryErrorCorrection, hwpmResponsesKeyName=hwpmResponsesKeyName, hwprPrintProcessor=hwprPrintProcessor, hwkbStatus=hwkbStatus, hwnacDHCPServer=hwnacDHCPServer, hwvpTolerance=hwvpTolerance, win32PrinterEntry=win32PrinterEntry, hwfdErrorDescription=hwfdErrorDescription, hwspSupportsXOnXOffSet=hwspSupportsXOnXOffSet, hwnaAvailability=hwnaAvailability, hwvcCurrentScanMode=hwvcCurrentScanMode, hwvcConfigManagerUserConfig=hwvcConfigManagerUserConfig, hwvcDeviceSpecificPens=hwvcDeviceSpecificPens, hwpmSpeakerModeDial=hwpmSpeakerModeDial, hwbbSerialNumber=hwbbSerialNumber, hwsndAvailability=hwsndAvailability, hwddModel=hwddModel, hwidConfigManagerUserConfig=hwidConfigManagerUserConfig, hwpbExpectedLife=hwpbExpectedLife, hwcdPNPDeviceID=hwcdPNPDeviceID, hwsndIndex=hwsndIndex, hwprdSupportedPlatform=hwprdSupportedPlatform, hwnacDHCPLeaseObtained=hwnacDHCPLeaseObtained, hwcdMaxMediaSize=hwcdMaxMediaSize, hwseIndex=hwseIndex, hwpnpInstallDate=hwpnpInstallDate, hwprjPagesPrinted=hwprjPagesPrinted, hwmbDescription=hwmbDescription, hwbaIndex=hwbaIndex, hwnacDNSEnabledForWINSResolution=hwnacDNSEnabledForWINSResolution, hwbaStatus=hwbaStatus, win32PCMCIAControllerEntry=win32PCMCIAControllerEntry, hwprcTTOption=hwprcTTOption, hwdmConfigManagerUserConfig=hwdmConfigManagerUserConfig, hwddInstallDate=hwddInstallDate, hwspCapabilityDescriptions=hwspCapabilityDescriptions, hwkbInstallDate=hwkbInstallDate, hwcdMediaLoaded=hwcdMediaLoaded, hwpmTone=hwpmTone, hwprcXResolution=hwprcXResolution, win32OnBoardDeviceEntry=win32OnBoardDeviceEntry, hwprDefaultCopies=hwprDefaultCopies, hwvcMinRefreshRate=hwvcMinRefreshRate, hwpmSpeakerModeOff=hwpmSpeakerModeOff, hwpmaWeight=hwpmaWeight, hwkbErrorCleared=hwkbErrorCleared, hwtppInstallDate=hwtppInstallDate, hwcmSystemLevelAddress=hwcmSystemLevelAddress, hwseServiceDescriptions=hwseServiceDescriptions, hwddLastErrorCode=hwddLastErrorCode, hwpbChemistry=hwpbChemistry, hwpmProviderName=hwpmProviderName, hwprdInstallDate=hwprdInstallDate, hwbiInstallableLanguages=hwbiInstallableLanguages, hwfcStatusInfo=hwfcStatusInfo, hwfcPNPDeviceID=hwfcPNPDeviceID, hwvcPowerManagementSupported=hwvcPowerManagementSupported, hwnacTcpipNetbiosOptions=hwnacTcpipNetbiosOptions, hwuhPowerManagementCapabilities=hwuhPowerManagementCapabilities, hwptDoubleSpeedThreshold=hwptDoubleSpeedThreshold, hwbiCaption=hwbiCaption, hwhpPowerManagementSupported=hwhpPowerManagementSupported, hwtmpSystemCreationClassName=hwtmpSystemCreationClassName, hwddSignature=hwddSignature, hwpmaPartNumber=hwpmaPartNumber, hwnacWINSHostLookupFile=hwnacWINSHostLookupFile, hwpmCurrentPasswords=hwpmCurrentPasswords, hwfdConfigManagerUserConfig=hwfdConfigManagerUserConfig, hwvcAvailability=hwvcAvailability, hwseHeight=hwseHeight, hwddConfigManagerErrorCode=hwddConfigManagerErrorCode, hwtmpDescription=hwtmpDescription, hwfanInstallDate=hwfanInstallDate, hwuhGangSwitched=hwuhGangSwitched, hwpmaIndex=hwpmaIndex, hwpnpSystemCreationClassName=hwpnpSystemCreationClassName, hwpsdDriverName=hwpsdDriverName, hwddMinBlockSize=hwddMinBlockSize, hwpnpErrorCleared=hwpnpErrorCleared, hwbaPNPDeviceID=hwbaPNPDeviceID, hwvpMinReadable=hwvpMinReadable, hwppOSAutoDiscovered=hwppOSAutoDiscovered, hwcpuCaption=hwcpuCaption, hwprLocal=hwprLocal, hwmbName=hwmbName, hwspcErrorReplacementEnabled=hwspcErrorReplacementEnabled, hwpmdIndex=hwpmdIndex, hwspSupportsIntTimeouts=hwspSupportsIntTimeouts, hwirqName=hwirqName, hwrfgSystemCreationClassName=hwrfgSystemCreationClassName, hwkbLastErrorCode=hwkbLastErrorCode, hwddName=hwddName, hwmaBlockSize=hwmaBlockSize, hwprPrinterPaperNames=hwprPrinterPaperNames, hwppStatus=hwppStatus, hwbuErrorCleared=hwbuErrorCleared, hwprcMediaType=hwprcMediaType, hwbaDeviceID=hwbaDeviceID, hwpcmAvailability=hwpcmAvailability, hwirqTriggerLevel=hwirqTriggerLevel, hwcpuLevel=hwcpuLevel, hwcpuUniqueId=hwcpuUniqueId, hwcmCurrentSRAM=hwcmCurrentSRAM, hwobInstallDate=hwobInstallDate, hwpsdStatus=hwpsdStatus, hwucSystemName=hwucSystemName, hwtdPowerManagementCapabilities=hwtdPowerManagementCapabilities, hwpsdDeviceID=hwpsdDeviceID, hwmaErrorAddress=hwmaErrorAddress, hwprdName=hwprdName, hwfdCapabilityDescriptions=hwfdCapabilityDescriptions, hwasDescription=hwasDescription, hwcpuProcessorId=hwcpuProcessorId, win32HeatPipeEntry=win32HeatPipeEntry, hwcpuSystemCreationClassName=hwcpuSystemCreationClassName, hwprIndex=hwprIndex, hwpbErrorDescription=hwpbErrorDescription, hwcpuUpgradeMethod=hwcpuUpgradeMethod, hwddStatusInfo=hwddStatusInfo, hwcmCacheSpeed=hwcmCacheSpeed, win32NetworkAdapterConfigTable=win32NetworkAdapterConfigTable, hwtdCreationClassName=hwtdCreationClassName, hwvcMonochrome=hwvcMonochrome, hwnaInterfaceIndex=hwnaInterfaceIndex, hwidSystemName=hwidSystemName, hwasCaption=hwasCaption, hwmmStatusInfo=hwmmStatusInfo, hwmaErrorAccess=hwmaErrorAccess, hwtmpLowerThresholdNonCritical=hwtmpLowerThresholdNonCritical, win32BaseBoardTable=win32BaseBoardTable, hwcdManufacturer=hwcdManufacturer, hwupsPowerManagementCapabilities=hwupsPowerManagementCapabilities, hwcmAdditionalErrorData=hwcmAdditionalErrorData, hwtppCaption=hwtppCaption, hwnacKeepAliveTime=hwnacKeepAliveTime, hwddMediaType=hwddMediaType, hwvpErrorDescription=hwvpErrorDescription, hwcpInstallDate=hwcpInstallDate, hwcpStatus=hwcpStatus, hwptSampleRate=hwptSampleRate, hwbuErrorDescription=hwbuErrorDescription, win32PhysicalMediaEntry=win32PhysicalMediaEntry, hwnacIPAddress=hwnacIPAddress, hwnacTcpNumConnections=hwnacTcpNumConnections, hwcdId=hwcdId, hwnacIPSecPermitTCPPorts=hwnacIPSecPermitTCPPorts, hwcdPowerManagementCapabilities=hwcdPowerManagementCapabilities, hwrfgActiveCooling=hwrfgActiveCooling, hwvcName=hwvcName, hwbuStatus=hwbuStatus, win32SerialPortTable=win32SerialPortTable, hwbaFullChargeCapacity=hwbaFullChargeCapacity, hwprdSystemName=hwprdSystemName, hwprjTotalPages=hwprjTotalPages, hwhpSystemName=hwhpSystemName, hwpmmInterleaveDataDepth=hwpmmInterleaveDataDepth, hwobCreationClassName=hwobCreationClassName, hwcpuPowerManagementCapabilities=hwcpuPowerManagementCapabilities, hwscsiHardwareVersion=hwscsiHardwareVersion, hwcpNormalMin=hwcpNormalMin, hwbuAvailability=hwbuAvailability, hwprDefaultCapabilities=hwprDefaultCapabilities, hwobSKU=hwobSKU, hwcmAvailability=hwcmAvailability)
mibBuilder.exportSymbols("INFORMANT-HW", win32ParallelPortEntry=win32ParallelPortEntry, hwnacKeepAliveInterval=hwnacKeepAliveInterval, win32FanEntry=win32FanEntry, hwcdSCSIPort=hwcdSCSIPort, hwprErrorDescription=hwprErrorDescription, hwvcCurrentNumberOfColors=hwvcCurrentNumberOfColors, hwtdMaxPartitionCount=hwtdMaxPartitionCount, hwssModel=hwssModel, hwrfgName=hwrfgName, hwvpCurrentReading=hwvpCurrentReading, hwirqCreationClassName=hwirqCreationClassName, win32USBHubTable=win32USBHubTable, hwppInstallDate=hwppInstallDate, hwnacIPXFrameType=hwnacIPXFrameType, win32USBControllerEntry=win32USBControllerEntry, hwdmIndex=hwdmIndex, hwmmSystemLevelAddress=hwmmSystemLevelAddress, hwsbmSystemName=hwsbmSystemName, hwcdMinBlockSize=hwcdMinBlockSize, hwmbStatusInfo=hwmbStatusInfo, hwtmpIsLinear=hwtmpIsLinear, hwkbPowerManagementCapabilities=hwkbPowerManagementCapabilities, hwmbConfigManagerErrorCode=hwmbConfigManagerErrorCode, hwsbmPurpose=hwsbmPurpose, hwcmErrorTime=hwcmErrorTime, hwddNumberOfMediaSupported=hwddNumberOfMediaSupported, hwmmErrorData=hwmmErrorData, hw1394SystemCreationClassName=hw1394SystemCreationClassName, hwcpDescription=hwcpDescription, hwcpuAddressWidth=hwcpuAddressWidth, hwddPowerManagementCapabilities=hwddPowerManagementCapabilities, hwpnpClassGuid=hwpnpClassGuid, hwvpAccuracy=hwvpAccuracy, hwpcmCaption=hwpcmCaption, hwucErrorCleared=hwucErrorCleared, hwpsdManufacturer=hwpsdManufacturer, hwprcDisplayFlags=hwprcDisplayFlags, hwfanPowerManagementSupported=hwfanPowerManagementSupported, hwprCharSetsSupported=hwprCharSetsSupported, hwucMaxNumberControlled=hwucMaxNumberControlled, hwppErrorDescription=hwppErrorDescription, hwideErrorCleared=hwideErrorCleared, hwsbmInstallDate=hwsbmInstallDate, hwhpCaption=hwhpCaption, hwpmSupportsSynchronousConnect=hwpmSupportsSynchronousConnect, hwcpuErrorDescription=hwcpuErrorDescription, hwdaMemoryType=hwdaMemoryType, hwsndMPU401Address=hwsndMPU401Address, hwbbVersion=hwbbVersion, hwpmmInterleavePosition=hwpmmInterleavePosition, hwcpuIndex=hwcpuIndex, hwmaSystemName=hwmaSystemName, hwpmmTotalWidth=hwpmmTotalWidth, hwcpMinReadable=hwcpMinReadable, hwpmCompressionInfo=hwpmCompressionInfo, hwmmErrorAddress=hwmmErrorAddress, hwpmErrorControlOn=hwpmErrorControlOn, hwidAvailability=hwidAvailability, win32DesktopMonitorEntry=win32DesktopMonitorEntry, hwvcCreationClassName=hwvcCreationClassName, hwvpUpperThresholdFatal=hwvpUpperThresholdFatal, hwspDeviceID=hwspDeviceID, win32BusEntry=win32BusEntry, hwssConnectorType=hwssConnectorType, hwobSerialNumber=hwobSerialNumber, wmiPrinting=wmiPrinting, win32PhysicalMemoryArrayTable=win32PhysicalMemoryArrayTable, win32CDROMDriveTable=win32CDROMDriveTable, hwprjStatus=hwprjStatus, hwirqShareable=hwirqShareable, hwucManufacturer=hwucManufacturer, hwcmConfigManagerUserConfig=hwcmConfigManagerUserConfig, hwrfgPowerManagementSupported=hwrfgPowerManagementSupported, hwdmaCSCreationClassName=hwdmaCSCreationClassName, hwptAvailability=hwptAvailability, hwobRemovable=hwobRemovable, hwprStartTime=hwprStartTime, hwhpInstallDate=hwhpInstallDate, hwmbLastErrorCode=hwmbLastErrorCode, hwnacArpUseEtherSNAP=hwnacArpUseEtherSNAP, hwcpuProcessorType=hwcpuProcessorType, hwcmSystemCreationClassName=hwcmSystemCreationClassName, hwbuSystemName=hwbuSystemName, hwcpLastErrorCode=hwcpLastErrorCode, hwucCreationClassName=hwucCreationClassName, hwcpCreationClassName=hwcpCreationClassName, hwmaPurpose=hwmaPurpose, hwprdHelpFile=hwprdHelpFile, hwvpNominalReading=hwvpNominalReading, hwbiCodeSet=hwbiCodeSet, hwtmpName=hwtmpName, hwtdDefaultBlockSize=hwtdDefaultBlockSize, hwpmCountriesSupported=hwpmCountriesSupported, hwsbmSystemCreationClassName=hwsbmSystemCreationClassName, hwddTotalTracks=hwddTotalTracks, hwbuStatusInfo=hwbuStatusInfo, hwobManufacturer=hwobManufacturer, hwdmaAddressSize=hwdmaAddressSize, win32PortResourceTable=win32PortResourceTable, hwmmErrorMethodology=hwmmErrorMethodology, hwpmModemIndex=hwpmModemIndex, win32DesktopMonitorTable=win32DesktopMonitorTable, hwpbTimeOnBattery=hwpbTimeOnBattery, hwupsConfigManagerErrorCode=hwupsConfigManagerErrorCode, hwkbIndex=hwkbIndex, hwfanErrorCleared=hwfanErrorCleared, hwcdConfigManagerErrorCode=hwcdConfigManagerErrorCode, hwtdSystemName=hwtdSystemName, hwbbPartNumber=hwbbPartNumber, hwnaManufacturer=hwnaManufacturer, hwnaPowerManagementCapabilities=hwnaPowerManagementCapabilities, hwprdStartMode=hwprdStartMode, win32CacheMemoryEntry=win32CacheMemoryEntry, hwmmAccess=hwmmAccess, hwupsRange1InputVoltageHigh=hwupsRange1InputVoltageHigh, hwfdPNPDeviceID=hwfdPNPDeviceID, hwsbmAccess=hwsbmAccess, hwcmCorrectableError=hwcmCorrectableError, hwvpPowerManagementSupported=hwvpPowerManagementSupported, hwprKeepPrintedJobs=hwprKeepPrintedJobs, hwtdCaption=hwtdCaption, hwprCurrentMimeType=hwprCurrentMimeType, hwmaErrorInfo=hwmaErrorInfo, hwfcSystemCreationClassName=hwfcSystemCreationClassName, hwppCapabilities=hwppCapabilities, hwprAveragePagesPerMinute=hwprAveragePagesPerMinute, hwprCurrentLanguage=hwprCurrentLanguage, hwmbSystemCreationClassName=hwmbSystemCreationClassName, hwbaSystemCreationClassName=hwbaSystemCreationClassName, hwbuPowerManagementSupported=hwbuPowerManagementSupported, hwcdMfrAssignedRevisionLevel=hwcdMfrAssignedRevisionLevel, hwpbManufacturer=hwpbManufacturer, hwprdDescription=hwprdDescription, hwssNumber=hwssNumber, hwspConfigManagerUserConfig=hwspConfigManagerUserConfig, hwvpConfigManagerErrorCode=hwvpConfigManagerErrorCode, hwnacCaption=hwnacCaption, hwpcmCreationClassName=hwpcmCreationClassName, hwsndPowerManagementSupported=hwsndPowerManagementSupported, hwobTag=hwobTag, hwddSectorsPerTrack=hwddSectorsPerTrack, hwnaProductName=hwnaProductName, hwddInterfaceType=hwddInterfaceType, hwcpuOtherFamilyDescription=hwcpuOtherFamilyDescription, hwprPriority=hwprPriority, hwfdErrorCleared=hwfdErrorCleared, hwpmSpeakerVolumeHigh=hwpmSpeakerVolumeHigh, hwfanSystemName=hwfanSystemName, hwbuPowerManagementCapabilities=hwbuPowerManagementCapabilities, hwbiName=hwbiName, hwfdCapabilities=hwfdCapabilities, hwmbSystemName=hwmbSystemName, hwkbPNPDeviceID=hwkbPNPDeviceID, hwseDescription=hwseDescription, hwscsiTimeOfLastReset=hwscsiTimeOfLastReset, hwmmStatus=hwmmStatus, win32PCMCIAControllerTable=win32PCMCIAControllerTable, hw1394PNPDeviceID=hw1394PNPDeviceID, hwpmdCreationClassName=hwpmdCreationClassName, hwptDeviceID=hwptDeviceID, hwssSerialNumber=hwssSerialNumber, hwtmpConfigManagerUserConfig=hwtmpConfigManagerUserConfig, hwrfgErrorDescription=hwrfgErrorDescription, hwnaNetConnectionStatus=hwnaNetConnectionStatus, hwdmSystemCreationClassName=hwdmSystemCreationClassName, hwtdFeaturesLow=hwtdFeaturesLow, wmiHardware=wmiHardware, hwprPrinterState=hwprPrinterState, hwtppDescription=hwtppDescription, hwobIndex=hwobIndex, hwdmDisplayType=hwdmDisplayType, hwuhErrorDescription=hwuhErrorDescription, hwcpConfigManagerUserConfig=hwcpConfigManagerUserConfig, hwfcCaption=hwfcCaption, hwtppStatus=hwtppStatus, hwpsdDriverDate=hwpsdDriverDate, hwcmErrorResolution=hwcmErrorResolution, hwdmPixelsPerXLogicalInch=hwdmPixelsPerXLogicalInch, hwptDeviceInterface=hwptDeviceInterface, hwtdECC=hwtdECC, hwspProviderType=hwspProviderType, hwtmpSystemName=hwtmpSystemName, hwuhStatusInfo=hwuhStatusInfo, hwpcmProtocolSupported=hwpcmProtocolSupported, hwspcXOnXMitThreshold=hwspcXOnXMitThreshold, hwnaConfigManagerUserConfig=hwnaConfigManagerUserConfig, hwprParameters=hwprParameters, hwpbPowerManagementCapabilities=hwpbPowerManagementCapabilities, hwcdErrorDescription=hwcdErrorDescription, hwbaDescription=hwbaDescription, hwprWorkOffline=hwprWorkOffline, hwdmMonitorType=hwdmMonitorType, hwcpStatusInfo=hwcpStatusInfo, hwfanCaption=hwfanCaption, hwpbLastErrorCode=hwpbLastErrorCode, hwbbWeight=hwbbWeight, hwbaCaption=hwbaCaption, hwprjJobId=hwprjJobId, hwuhAvailability=hwuhAvailability, hwprCurrentPaperType=hwprCurrentPaperType, hwtppType=hwtppType, hwpsdStarted=hwpsdStarted, hwfdMaxMediaSize=hwfdMaxMediaSize, hwpmSpeakerVolumeInfo=hwpmSpeakerVolumeInfo, hwideSystemCreationClassName=hwideSystemCreationClassName, hwmbPrimaryBusType=hwmbPrimaryBusType, hwpmmName=hwpmmName, hwpbCaption=hwpbCaption, hwspcCTSOutflowControl=hwspcCTSOutflowControl, hwdmMonitorManufacturer=hwdmMonitorManufacturer, hwpreDescription=hwpreDescription, hwpmmInstallDate=hwpmmInstallDate, hwspMaxNumberControlled=hwspMaxNumberControlled, hwpmdMediaDescription=hwpmdMediaDescription, hwcpAccuracy=hwcpAccuracy, hwidStatus=hwidStatus, hwbbStatus=hwbbStatus, hwprVerticalResolution=hwprVerticalResolution, hwcdVolumeName=hwcdVolumeName, hwkbConfigManagerErrorCode=hwkbConfigManagerErrorCode, hwprMaxNumberUp=hwprMaxNumberUp, win32SoundDeviceEntry=win32SoundDeviceEntry, hw1394Manufacturer=hw1394Manufacturer, hw1394ErrorDescription=hw1394ErrorDescription, hwmaStatusInfo=hwmaStatusInfo, hwpbTimeToFullCharge=hwpbTimeToFullCharge, hwprcIndex=hwprcIndex, hwideSystemName=hwideSystemName, hwfdName=hwfdName, hwpmdStatus=hwpmdStatus, hwnacDNSHostName=hwnacDNSHostName, hwseBreachDescription=hwseBreachDescription, hwbaPowerManagementSupported=hwbaPowerManagementSupported, hwtdName=hwtdName, hwprPaperSizesSupported=hwprPaperSizesSupported, hwprAvailableJobSheets=hwprAvailableJobSheets, hwdmaCSName=hwdmaCSName, hwspcBinaryModeEnabled=hwspcBinaryModeEnabled, hwprcDeviceName=hwprcDeviceName, hwprcPrintQuality=hwprcPrintQuality, hwmbRevisionNumber=hwmbRevisionNumber, hwpmLastErrorCode=hwpmLastErrorCode, hwptIsLocked=hwptIsLocked, hwssCaption=hwssCaption, hwpmTimeOfLastReset=hwpmTimeOfLastReset, hwprInstallDate=hwprInstallDate, hw1394InstallDate=hw1394InstallDate, hwcdCapabilities=hwcdCapabilities, hwtdInstallDate=hwtdInstallDate, hwuhCurrentConfigValue=hwuhCurrentConfigValue, hwnacDescription=hwnacDescription, hwuhCaption=hwuhCaption, hwprDefaultPriority=hwprDefaultPriority, hwucTimeOfLastReset=hwucTimeOfLastReset)
mibBuilder.exportSymbols("INFORMANT-HW", hwprNaturalLanguagesSupported=hwprNaturalLanguagesSupported, hwtmpTolerance=hwtmpTolerance, hwkbIsLocked=hwkbIsLocked, hwfcErrorCleared=hwfcErrorCleared, win32MemoryDeviceTable=win32MemoryDeviceTable, hwdmLastErrorCode=hwdmLastErrorCode, hw1394StatusInfo=hw1394StatusInfo, hwssPartNumber=hwssPartNumber, hwprjDocument=hwprjDocument, win32BaseBoardEntry=win32BaseBoardEntry, hwtppSNMPEnabled=hwtppSNMPEnabled, win32BIOSTable=win32BIOSTable, hwpmaDepth=hwpmaDepth, hwkbNumberOfFunctionKeys=hwkbNumberOfFunctionKeys, hwcmLineSize=hwcmLineSize, hwpmdHotSwappable=hwpmdHotSwappable, hwtdNeedsCleaning=hwtdNeedsCleaning, hw1394ConfigManagerErrorCode=hw1394ConfigManagerErrorCode, hwbbSlotLayout=hwbbSlotLayout, hwvpPowerManagementCapabilities=hwvpPowerManagementCapabilities, hwssConnectorPinout=hwssConnectorPinout, hwrfgIndex=hwrfgIndex, hwppPowerManagementSupported=hwppPowerManagementSupported, win32VoltageProbeTable=win32VoltageProbeTable, hwnacIPFilterSecurityEnabled=hwnacIPFilterSecurityEnabled, hwmbAvailability=hwmbAvailability, hwdmaInstallDate=hwdmaInstallDate, hwcpuLoadPercentage=hwcpuLoadPercentage, win32FloppyControllerTable=win32FloppyControllerTable, hwupsIndex=hwupsIndex, hwscsiDeviceID=hwscsiDeviceID, hwpmdSKU=hwpmdSKU, hwcpSystemCreationClassName=hwcpSystemCreationClassName, win32TemperatureProbeTable=win32TemperatureProbeTable, hwcpuRole=hwcpuRole, hwdmStatus=hwdmStatus, hw1394TimeOfLastReset=hw1394TimeOfLastReset, hwirqIndex=hwirqIndex, hwfdCompressionMethod=hwfdCompressionMethod, hwscsiErrorCleared=hwscsiErrorCleared, hwfcAvailability=hwfcAvailability, hwspcParity=hwspcParity, hwnaStatus=hwnaStatus, hwsbmStartingAddress=hwsbmStartingAddress, hwpmmDataWidth=hwpmmDataWidth, hwssPMESignal=hwssPMESignal, hwcmAssociativity=hwcmAssociativity, hwnacIGMPLevel=hwnacIGMPLevel, hwprcPaperLength=hwprcPaperLength, hwbbTag=hwbbTag, hwspcContinueXMitOnXOff=hwspcContinueXMitOnXOff, hwuhClassCode=hwuhClassCode, hwssVccMixedVoltageSupport=hwssVccMixedVoltageSupport, hwspcAbortReadWriteOnError=hwspcAbortReadWriteOnError, win32SystemEnclosureEntry=win32SystemEnclosureEntry, hwuhSystemCreationClassName=hwuhSystemCreationClassName, hwprcBitsPerPel=hwprcBitsPerPel, hwprcSettingID=hwprcSettingID, hwsndStatusInfo=hwsndStatusInfo, hwprdSystemCreationClassName=hwprdSystemCreationClassName, hwdmScreenWidth=hwdmScreenWidth, hwcmDescription=hwcmDescription, hwidProtocolSupported=hwidProtocolSupported, hwseStatus=hwseStatus, hwprdOEMUrl=hwprdOEMUrl, hwdmStatusInfo=hwdmStatusInfo, hwspLastErrorCode=hwspLastErrorCode, hwprPowerManagementCapabilities=hwprPowerManagementCapabilities, win32PhysicalMediaTable=win32PhysicalMediaTable, hwrfgCreationClassName=hwrfgCreationClassName, hwpmErrorDescription=hwpmErrorDescription, hwpcModel=hwpcModel, hwcpResolution=hwcpResolution, hwfcInstallDate=hwfcInstallDate, hwucDeviceID=hwucDeviceID, hwmaPNPDeviceID=hwmaPNPDeviceID, win32DMAChannelEntry=win32DMAChannelEntry, hwprDetectedErrorState=hwprDetectedErrorState, hwddSCSITargetId=hwddSCSITargetId, hwideErrorDescription=hwideErrorDescription, hwidMaxNumberControlled=hwidMaxNumberControlled, hwvcMaxNumberControlled=hwvcMaxNumberControlled, hwupsTotalOutputPower=hwupsTotalOutputPower, win32PhysicalMemoryTable=win32PhysicalMemoryTable, hw1394ProtocolSupported=hw1394ProtocolSupported, hwspcDSROutflowControl=hwspcDSROutflowControl, hwppConfigManagerErrorCode=hwppConfigManagerErrorCode, hwpmPortSubClass=hwpmPortSubClass, hwcdSCSITargetId=hwcdSCSITargetId, hwpmaHeight=hwpmaHeight, hwspDescription=hwspDescription, hwkbCreationClassName=hwkbCreationClassName, hwuhName=hwuhName, hwtdDescription=hwtdDescription, hwhpDescription=hwhpDescription, hwcmLocation=hwcmLocation, hwpmaUse=hwpmaUse, hwprjDriverName=hwprjDriverName, hwmaErrorGranularity=hwmaErrorGranularity, hwpnpAvailability=hwpnpAvailability, hwnaMaxNumberControlled=hwnaMaxNumberControlled, hwidTimeOfLastReset=hwidTimeOfLastReset, hwpmSpeakerModeOn=hwpmSpeakerModeOn, hwseSerialNumber=hwseSerialNumber, hwscsiPowerManagementSupported=hwscsiPowerManagementSupported, hwcdMaxBlockSize=hwcdMaxBlockSize, hwpmVoiceSwitchFeature=hwpmVoiceSwitchFeature, hwsmrStartingAddress=hwsmrStartingAddress, hwcdDrive=hwcdDrive, hwseManufacturer=hwseManufacturer, hwpbConfigManagerErrorCode=hwpbConfigManagerErrorCode, hwscsiIndex=hwscsiIndex, hwtmpMaxReadable=hwtmpMaxReadable, hwmaEndingAddress=hwmaEndingAddress, hwupsPNPDeviceID=hwupsPNPDeviceID, win32MemoryArrayEntry=win32MemoryArrayEntry, hwpmDCB=hwpmDCB, hwcmPurpose=hwcmPurpose, hwmbInstallDate=hwmbInstallDate, hwpcmMaxNumberControlled=hwpcmMaxNumberControlled, hwupsName=hwupsName, hwbbRequirementsDescription=hwbbRequirementsDescription, hwsndLastErrorCode=hwsndLastErrorCode, hwseServicePhilosophy=hwseServicePhilosophy, hwssOtherIdentifyingInfo=hwssOtherIdentifyingInfo, hwddTotalSectors=hwddTotalSectors, win32KeyboardTable=win32KeyboardTable, hwcmPNPDeviceID=hwcmPNPDeviceID, win32SCSIControllerEntry=win32SCSIControllerEntry, hwtmpUpperThresholdNonCritical=hwtmpUpperThresholdNonCritical, hwptCaption=hwptCaption, hwsbmErrorAddress=hwsbmErrorAddress, hwscsiSystemCreationClassName=hwscsiSystemCreationClassName, hwdmScreenHeight=hwdmScreenHeight, hwpnpService=hwpnpService, hwupsEstimatedChargeRemaining=hwupsEstimatedChargeRemaining, hwprLocation=hwprLocation, hwupsRange1InputVoltageLow=hwupsRange1InputVoltageLow, hwpmErrorCleared=hwpmErrorCleared, hwnacMTU=hwnacMTU, hwpcConnectorPinout=hwpcConnectorPinout, hwseCaption=hwseCaption, hwpsdDevLoader=hwpsdDevLoader, hwpmDeviceType=hwpmDeviceType, hwupsAvailability=hwupsAvailability, hwddSCSIPort=hwddSCSIPort, hwpbStatusInfo=hwpbStatusInfo, hwrfgCaption=hwrfgCaption, hwcdDeviceID=hwcdDeviceID, hwvpSystemCreationClassName=hwvpSystemCreationClassName, hwmmInstallDate=hwmmInstallDate, hwucInstallDate=hwucInstallDate, win32BatteryTable=win32BatteryTable, hwcpuSocketDesignation=hwcpuSocketDesignation, win32SoundDeviceTable=win32SoundDeviceTable, hwprcPaperSize=hwprcPaperSize, hwprPortName=hwprPortName, hwvpDeviceID=hwvpDeviceID, hwprcOrientation=hwprcOrientation, hwcdCapabilityDescriptions=hwcdCapabilityDescriptions, hwcmNumberOfBlocks=hwcmNumberOfBlocks, hwspMaximumOutputBufferSize=hwspMaximumOutputBufferSize, hwspSettableFlowControl=hwspSettableFlowControl, hwfanVariableSpeed=hwfanVariableSpeed, hwuhCurrentAlternativeSettings=hwuhCurrentAlternativeSettings, hw1394ConfigManagerUserConfig=hw1394ConfigManagerUserConfig, hwprcPelsHeight=hwprcPelsHeight, hwspcParityCheckEnabled=hwspcParityCheckEnabled, hwprdDependentFiles=hwprdDependentFiles, hwcdDefaultBlockSize=hwcdDefaultBlockSize, hwnaInstalled=hwnaInstalled, hwssSlotDesignation=hwssSlotDesignation, hwsndDeviceID=hwsndDeviceID, hwspProtocolSupported=hwspProtocolSupported, hwpmaMaxCapacity=hwpmaMaxCapacity, hwprEnableBIDI=hwprEnableBIDI, hwnacIPSecPermitIPProtocols=hwnacIPSecPermitIPProtocols, hwdaCaption=hwdaCaption, hwcdSystemName=hwcdSystemName, hwspInstallDate=hwspInstallDate, hwptStatusInfo=hwptStatusInfo, hwdmaChannelTiming=hwdmaChannelTiming, hwpbBatteryRechargeTime=hwpbBatteryRechargeTime, hwpmmDescription=hwpmmDescription, hwkbDescription=hwkbDescription, hw1394SystemName=hw1394SystemName, hwscsiMaxTransferRate=hwscsiMaxTransferRate, hwtdCapabilityDescriptions=hwtdCapabilityDescriptions, hwmbErrorDescription=hwmbErrorDescription, hwpmaInstallDate=hwpmaInstallDate, hwsbmCorrectableError=hwsbmCorrectableError, hwbiStatus=hwbiStatus, hwprQueued=hwprQueued, hwsbmPowerManagementSupported=hwsbmPowerManagementSupported, hwprSystemCreationClassName=hwprSystemCreationClassName, hwspcErrorReplaceCharacter=hwspcErrorReplaceCharacter, hwmaOtherErrorDescription=hwmaOtherErrorDescription, hwmbPNPDeviceID=hwmbPNPDeviceID, hwspCreationClassName=hwspCreationClassName, hwdmaDMAChannel=hwdmaDMAChannel, hwfcDescription=hwfcDescription, hwhpStatusInfo=hwhpStatusInfo, hwpcmPNPDeviceID=hwpcmPNPDeviceID, hwtdCapabilities=hwtdCapabilities, hwcpuAvailability=hwcpuAvailability, hwprcLogPixels=hwprcLogPixels, hwvcCurrentNumberOfColumns=hwvcCurrentNumberOfColumns, hwddTotalCylinders=hwddTotalCylinders, hwidDeviceID=hwidDeviceID, hw1394DeviceID=hw1394DeviceID, hwbbHostingBoard=hwbbHostingBoard, hwseTypeDescriptions=hwseTypeDescriptions, hwupsRange1InputFrequencyLow=hwupsRange1InputFrequencyLow, hwsbmStatusInfo=hwsbmStatusInfo, hwseCreationClassName=hwseCreationClassName, hwvcCaption=hwvcCaption, hwbaErrorCleared=hwbaErrorCleared, hwcpuL3CacheSpeed=hwcpuL3CacheSpeed, hwfcDeviceID=hwfcDeviceID, hwscsiDriverName=hwscsiDriverName, win32NetworkAdapterConfigEntry=win32NetworkAdapterConfigEntry, hwmaDeviceID=hwmaDeviceID, hwpnpConfigManagerUserConfig=hwpnpConfigManagerUserConfig, hwspErrorCleared=hwspErrorCleared, hwprPaperTypesAvailable=hwprPaperTypesAvailable, hwpmCaption=hwpmCaption, hwmmConfigManagerUserConfig=hwmmConfigManagerUserConfig, hwprjJobStatus=hwprjJobStatus, win32KeyboardEntry=win32KeyboardEntry, hwpmModulationScheme=hwpmModulationScheme, hwcdErrorMethodology=hwcdErrorMethodology, hwmbSecondaryBusType=hwmbSecondaryBusType, hwpreIndex=hwpreIndex, hwmaSystemCreationClassName=hwmaSystemCreationClassName, hwpmModemInfSection=hwpmModemInfSection, hwsbmCreationClassName=hwsbmCreationClassName, hwsndInstallDate=hwsndInstallDate, hwtmpUpperThresholdCritical=hwtmpUpperThresholdCritical, hwuhLastErrorCode=hwuhLastErrorCode, hwidErrorDescription=hwidErrorDescription, win32SCSIControllerTable=win32SCSIControllerTable, hwucCaption=hwucCaption, hwvcCapabilityDescriptions=hwvcCapabilityDescriptions, hwupsDescription=hwupsDescription, hwprDescription=hwprDescription, hwtmpCurrentReading=hwtmpCurrentReading, hwdaCSCreationClassName=hwdaCSCreationClassName, hwfcIndex=hwfcIndex, hwspSystemName=hwspSystemName, hwpcSKU=hwpcSKU, hwprCurrentNaturalLanguage=hwprCurrentNaturalLanguage, hwprjDescription=hwprjDescription, hwdmaStatus=hwdmaStatus, hwbaBatteryRechargeTime=hwbaBatteryRechargeTime)
mibBuilder.exportSymbols("INFORMANT-HW", hwcpuPowerManagementSupported=hwcpuPowerManagementSupported, hwprdCreationClassName=hwprdCreationClassName, hwmaConfigManagerErrorCode=hwmaConfigManagerErrorCode, hwpbName=hwpbName, hwprdStatus=hwprdStatus, hwseInstallDate=hwseInstallDate, hwcdPowerManagementSupported=hwcdPowerManagementSupported, hwcpuL3CacheSize=hwcpuL3CacheSize, hwfdIndex=hwfdIndex, hwsbmErrorData=hwsbmErrorData, hwpmaSKU=hwpmaSKU, hwdmaTransferWidths=hwdmaTransferWidths, hwspSettableParityCheck=hwspSettableParityCheck, hwseSMBIOSAssetTag=hwseSMBIOSAssetTag, hwpsdDeviceName=hwpsdDeviceName, hwscsiRegistryIndex=hwscsiRegistryIndex, hwpnpErrorDescription=hwpnpErrorDescription, win32RefrigerationTable=win32RefrigerationTable, hwppPowerManagementCapabilities=hwppPowerManagementCapabilities, hwbaSystemName=hwbaSystemName, hwscsiConfigManagerErrorCode=hwscsiConfigManagerErrorCode, hwucSystemCreationClassName=hwucSystemCreationClassName, hwpbMaxBatteryError=hwpbMaxBatteryError, hwtppSNMPCommunity=hwtppSNMPCommunity, hwvcVideoMode=hwvcVideoMode, hwvpName=hwvpName, hwseCableManagementStrategy=hwseCableManagementStrategy, hwsndManufacturer=hwsndManufacturer, hwpmaVersion=hwpmaVersion, hwcmCreationClassName=hwcmCreationClassName, hwbiManufacturer=hwbiManufacturer, hwssIndex=hwssIndex, hwspAvailability=hwspAvailability, hwcpuNumberOfLogicalProcessors=hwcpuNumberOfLogicalProcessors, hwidStatusInfo=hwidStatusInfo, hwtppHostAddress=hwtppHostAddress, hwppName=hwppName, hwptErrorDescription=hwptErrorDescription, hwcdNumberOfMediaSupported=hwcdNumberOfMediaSupported, hwnaServiceName=hwnaServiceName, win32SystemSlotEntry=win32SystemSlotEntry, hwprcCaption=hwprcCaption, hwvpLowerThresholdNonCritical=hwvpLowerThresholdNonCritical, hwpmDeviceLoader=hwpmDeviceLoader, hwspSupportsDTRDSR=hwspSupportsDTRDSR, hwvpInstallDate=hwvpInstallDate, hwpmMaxBaudRateToPhone=hwpmMaxBaudRateToPhone, hw1394Availability=hw1394Availability, hwprHorizontalResolution=hwprHorizontalResolution, hwnacIndex=hwnacIndex, hwbaName=hwbaName, hwnacDNSDomainSuffixSearchOrder=hwnacDNSDomainSuffixSearchOrder, hwpmaLocation=hwpmaLocation, hwppConfigManagerUserConfig=hwppConfigManagerUserConfig, hwpbPowerManagementSupported=hwpbPowerManagementSupported, hwpcCreationClassName=hwpcCreationClassName, hwppSystemCreationClassName=hwppSystemCreationClassName, hwdmDeviceID=hwdmDeviceID, hwpmModemInfPath=hwpmModemInfPath, hwnacIPEnabled=hwnacIPEnabled, hwtppCreationClassName=hwtppCreationClassName, hwptNumberOfButtons=hwptNumberOfButtons, hwcpUpperThresholdCritical=hwcpUpperThresholdCritical, hwpmdPartNumber=hwpmdPartNumber, hwdmPowerManagementSupported=hwdmPowerManagementSupported, hwsbmDeviceID=hwsbmDeviceID, hwpnpCreationClassName=hwpnpCreationClassName, hwseDepth=hwseDepth, hwnaMaxSpeed=hwnaMaxSpeed, hwpmAnswerMode=hwpmAnswerMode, hwpmaSerialNumber=hwpmaSerialNumber, hwtdEOTWarningZoneSize=hwtdEOTWarningZoneSize, hwnacDomainDNSRegistrationEnable=hwnacDomainDNSRegistrationEnable, hwnaErrorDescription=hwnaErrorDescription, hwscsiLastErrorCode=hwscsiLastErrorCode, hwdmaTypeCTiming=hwdmaTypeCTiming, hwidLastErrorCode=hwidLastErrorCode, hwspMaximumInputBufferSize=hwspMaximumInputBufferSize, hwseName=hwseName, hwptPNPDeviceID=hwptPNPDeviceID, hwmaCaption=hwmaCaption, hwpcPortType=hwpcPortType, hwupsTimeOnBackup=hwupsTimeOnBackup, win32CacheMemoryTable=win32CacheMemoryTable, hwtmpErrorCleared=hwtmpErrorCleared, hwpcStatus=hwpcStatus, hwsbmSystemLevelAddress=hwsbmSystemLevelAddress, hwfanName=hwfanName, hwdmaWordMode=hwdmaWordMode, hwmaSystemLevelAddress=hwmaSystemLevelAddress, hwnaAdapterTypeID=hwnaAdapterTypeID, hwddErrorDescription=hwddErrorDescription, hwpmaStatus=hwpmaStatus, win32PhysicalMemoryArrayEntry=win32PhysicalMemoryArrayEntry, hwidDescription=hwidDescription, hwnaSpeed=hwnaSpeed, hwprUntilTime=hwprUntilTime, hwupsBatteryInstalled=hwupsBatteryInstalled, win32IRQResourceTable=win32IRQResourceTable, hwcdSystemCreationClassName=hwcdSystemCreationClassName, hwppMaxNumberControlled=hwppMaxNumberControlled, hwpmErrorControlInfo=hwpmErrorControlInfo, hwdmErrorDescription=hwdmErrorDescription, hwddErrorMethodology=hwddErrorMethodology, hwuhDescription=hwuhDescription, hwddSCSILogicalUnit=hwddSCSILogicalUnit, win32MotherboardDeviceTable=win32MotherboardDeviceTable, win32PointingDeviceTable=win32PointingDeviceTable, hwnacPMTUDiscoveryEnabled=hwnacPMTUDiscoveryEnabled, hwnacIPXVirtualNetNumber=hwnacIPXVirtualNetNumber, hwppPNPDeviceID=hwppPNPDeviceID, hwptPointingType=hwptPointingType, hwspcRTSFlowControlType=hwspcRTSFlowControlType, hwbbSpecialRequirements=hwbbSpecialRequirements, hwfdStatus=hwfdStatus, hwpmInactivityTimeout=hwpmInactivityTimeout, hwbiIdentificationCode=hwbiIdentificationCode, hwdmPNPDeviceID=hwdmPNPDeviceID, hwcmSystemName=hwcmSystemName, hwspcStopBits=hwspcStopBits, hwbbPoweredOn=hwbbPoweredOn, hwrfgLastErrorCode=hwrfgLastErrorCode, win32SystemEnclosureTable=win32SystemEnclosureTable, hwucAvailability=hwucAvailability, hwuhCreationClassName=hwuhCreationClassName, hwspcDiscardNULLBytes=hwspcDiscardNULLBytes, hwcpNominalReading=hwcpNominalReading, hwpmModulationCCITT=hwpmModulationCCITT, hwidPowerManagementSupported=hwidPowerManagementSupported, hwnacIPXAddress=hwnacIPXAddress, hwvcCurrentNumberOfRows=hwvcCurrentNumberOfRows, hwscsiStatusInfo=hwscsiStatusInfo, hwfdInstallDate=hwfdInstallDate, win32OnBoardDeviceTable=win32OnBoardDeviceTable, hwpmmStatus=hwpmmStatus, hwucLastErrorCode=hwucLastErrorCode, hwmmEndingAddress=hwmmEndingAddress, hwsbmErrorTransferSize=hwsbmErrorTransferSize, hwpcmDeviceID=hwpcmDeviceID, hwddDeviceID=hwddDeviceID, hwpbIndex=hwpbIndex, hwbuBusNum=hwbuBusNum, hwrfgStatusInfo=hwrfgStatusInfo, hwbaLastErrorCode=hwbaLastErrorCode, hwpnpPNPDeviceID=hwpnpPNPDeviceID, hwtmpAccuracy=hwtmpAccuracy, hwpsdHardWareID=hwpsdHardWareID, hwpcIndex=hwpcIndex, hwspSupportsRTSCTS=hwspSupportsRTSCTS, hwdmName=hwdmName, hwcpMaxReadable=hwcpMaxReadable, hwnaCaption=hwnaCaption, hwcmStatusInfo=hwcmStatusInfo, hwfanPowerManagementCapabilities=hwfanPowerManagementCapabilities, hwseTag=hwseTag, hwprRawOnly=hwprRawOnly, hwirqCSCreationClassName=hwirqCSCreationClassName, hwcmMaxCacheSize=hwcmMaxCacheSize, hwspSupportsSpecialCharacters=hwspSupportsSpecialCharacters, hwrfgStatus=hwrfgStatus, hw1394PowerManagementCapability=hw1394PowerManagementCapability, hwsndCreationClassName=hwsndCreationClassName, hwupsDeviceID=hwupsDeviceID, hwprdIndex=hwprdIndex, hwnaSystemCreationClassName=hwnaSystemCreationClassName, hwseLockPresent=hwseLockPresent, hwprCapabilities=hwprCapabilities, hwucIndex=hwucIndex, hwpcPoweredOn=hwpcPoweredOn, hwprDefaultNumberUp=hwprDefaultNumberUp, hwfdManufacturer=hwfdManufacturer, hwvcPNPDeviceID=hwvcPNPDeviceID, hwdmaIndex=hwdmaIndex, hwobDeviceType=hwobDeviceType, hwppDeviceID=hwppDeviceID, hwhpStatus=hwhpStatus, hwasIndex=hwasIndex, hwprcHorizontalResolution=hwprcHorizontalResolution, hwbbHeight=hwbbHeight, hwcpuFamily=hwcpuFamily, hwtmpPowerManagementSupported=hwtmpPowerManagementSupported, hwpnpIndex=hwpnpIndex, hwbuCaption=hwbuCaption, hwssHeightAllowed=hwssHeightAllowed, hwmmErrorAccess=hwmmErrorAccess, hwpnpDeviceID=hwpnpDeviceID, hwcpPowerManagementSupported=hwcpPowerManagementSupported, hwprHidden=hwprHidden, hwidePowerManagementCapabilities=hwidePowerManagementCapabilities, hwucStatusInfo=hwucStatusInfo, hwkbName=hwkbName, hwsbmName=hwsbmName, hwfcStatus=hwfcStatus, hwfdErrorMethodology=hwfdErrorMethodology, win32DiskDriveEntry=win32DiskDriveEntry, hwsmrCSName=hwsmrCSName, hwprMarkingTechnology=hwprMarkingTechnology, hwcpLowerThresholdFatal=hwcpLowerThresholdFatal, hwddMediaLoaded=hwddMediaLoaded, hwcdMediaType=hwcdMediaType, hwtdErrorMethodology=hwtdErrorMethodology, hwsmrDescription=hwsmrDescription, hwcpUpperThresholdFatal=hwcpUpperThresholdFatal, hwupsCaption=hwupsCaption, hwcmPowerManagementSupported=hwcmPowerManagementSupported, hwpmPulse=hwpmPulse, hwcpErrorCleared=hwcpErrorCleared, hwpmCompressionOn=hwpmCompressionOn, hwirqInstallDate=hwirqInstallDate, hwtdMinBlockSize=hwtdMinBlockSize, win32BatteryEntry=win32BatteryEntry, hwbiSMBIOSBIOSVersion=hwbiSMBIOSBIOSVersion, hwfdAvailability=hwfdAvailability, hwpsdDescription=hwpsdDescription, hwtmpIndex=hwtmpIndex, hwkbDeviceID=hwkbDeviceID, hwpbManufactureDate=hwpbManufactureDate, hwsndConfigManagerErrorCode=hwsndConfigManagerErrorCode, hwkbErrorDescription=hwkbErrorDescription, hwpcmConfigManagerErrorCode=hwpcmConfigManagerErrorCode, hwuhInstallDate=hwuhInstallDate, hwprjOwner=hwprjOwner, hwideTimeOfLastReset=hwideTimeOfLastReset, hwfanStatusInfo=hwfanStatusInfo, hwptErrorCleared=hwptErrorCleared, hwirqAvailability=hwirqAvailability, hwnaAdapterType=hwnaAdapterType, hwirqVector=hwirqVector, hw1394CreationClassName=hw1394CreationClassName, hwmaAvailability=hwmaAvailability, hwupsStatus=hwupsStatus, hwpmmVersion=hwpmmVersion, hwpmdSerialNumber=hwpmdSerialNumber, hwdmIsLocked=hwdmIsLocked, hwpmmManufacturer=hwpmmManufacturer, win32PrintJobTable=win32PrintJobTable, hwprcICMIntent=hwprcICMIntent, hwpmaManufacturer=hwpmaManufacturer, hwkbConfigManagerUserConfig=hwkbConfigManagerUserConfig, hwvcNumberOfColorPlanes=hwvcNumberOfColorPlanes, hwdmPixelsPerYLogicalInch=hwdmPixelsPerYLogicalInch, hwprDefaultPaperType=hwprDefaultPaperType, hwptInfSection=hwptInfSection, hwpnpName=hwpnpName, hwptIndex=hwptIndex, hwidInstallDate=hwidInstallDate, hwbaExpectedBatteryLife=hwbaExpectedBatteryLife, hwfdNeedsCleaning=hwfdNeedsCleaning, hwprcCopies=hwprcCopies, hwcpTolerance=hwcpTolerance, hwddCaption=hwddCaption, hwppProtocolSupported=hwppProtocolSupported, hwpmProperties=hwpmProperties, hwtdManufacturer=hwtdManufacturer)
mibBuilder.exportSymbols("INFORMANT-HW", hwscsiControllerTimeouts=hwscsiControllerTimeouts, hwseSecurityStatus=hwseSecurityStatus, hwmmPowerManagementCapabilities=hwmmPowerManagementCapabilities, hwtmpResolution=hwtmpResolution, hwcpuErrorCleared=hwcpuErrorCleared, hwmaErrorMethodology=hwmaErrorMethodology, hwpmdTag=hwpmdTag, hwpmStatusInfo=hwpmStatusInfo, hwddSCSIBus=hwddSCSIBus, hwfcErrorDescription=hwfcErrorDescription, win32ProcessorEntry=win32ProcessorEntry, hwbiDescription=hwbiDescription, hwnacDeadGWDetectEnabled=hwnacDeadGWDetectEnabled, hwsbmIndex=hwsbmIndex, hwrfgPowerManagementCapabilities=hwrfgPowerManagementCapabilities, hwpmmCaption=hwpmmCaption, hwspBinary=hwspBinary, hwpnpSystemName=hwpnpSystemName, hwprTimeOfLastReset=hwprTimeOfLastReset, hwpmErrorControlOff=hwpmErrorControlOff, hwbaDesignVoltage=hwbaDesignVoltage, hwspcXOnXOffOutFlowControl=hwspcXOnXOffOutFlowControl, hwuhNumberOfConfigs=hwuhNumberOfConfigs, hwsbmPNPDeviceID=hwsbmPNPDeviceID, hwspSupportsElapsedTimeouts=hwspSupportsElapsedTimeouts, hwvcCurrentBitsPerPixel=hwvcCurrentBitsPerPixel, hwbaExpectedLife=hwbaExpectedLife, hwuhPNPDeviceID=hwuhPNPDeviceID, hwirqCSName=hwirqCSName, hwidManufacturer=hwidManufacturer, hwcpIsLinear=hwcpIsLinear, hwmmDescription=hwmmDescription, hwprSeparatorFile=hwprSeparatorFile, hwprcICMMethod=hwprcICMMethod, hwmmErrorCleared=hwmmErrorCleared, hwideConfigManagerUserConfig=hwideConfigManagerUserConfig, hwptDescription=hwptDescription, hwrfgErrorCleared=hwrfgErrorCleared, hwprConfigManagerUserConfig=hwprConfigManagerUserConfig, hwideInstallDate=hwideInstallDate, hwpcmName=hwpcmName, hwdaCreationClassName=hwdaCreationClassName, win32PnPSignedDriverTable=win32PnPSignedDriverTable, hwpmErrorControlForced=hwpmErrorControlForced, hwrfgAvailability=hwrfgAvailability, hwbaPowerManagementCapabilities=hwbaPowerManagementCapabilities, hwsmrCreationClassName=hwsmrCreationClassName, hwcdFileSystemFlags=hwcdFileSystemFlags, hwnaInstallDate=hwnaInstallDate, hwobStatus=hwobStatus, hwptSystemCreationClassName=hwptSystemCreationClassName, wmiMotherboardControllerPort=wmiMotherboardControllerPort, hwcpuInstallDate=hwcpuInstallDate, hwmmDeviceID=hwmmDeviceID, hwcpuConfigManagerErrorCode=hwcpuConfigManagerErrorCode, hwuhUSBVersion=hwuhUSBVersion, hwtmpCreationClassName=hwtmpCreationClassName, hwpmaName=hwpmaName, hwpmCompressionOff=hwpmCompressionOff, hwpsdIndex=hwpsdIndex, hwscsiSystemName=hwscsiSystemName, hwsbmBlockSize=hwsbmBlockSize, hwcmIndex=hwcmIndex, win32TapeDriveTable=win32TapeDriveTable, hwbaMaxRechargeTime=hwbaMaxRechargeTime, hwprcPelsWidth=hwprcPelsWidth, hwdmBandwidth=hwdmBandwidth, hwpcmPowerManagementSupported=hwpcmPowerManagementSupported, hwtmpNominalReading=hwtmpNominalReading, hwvpIsLinear=hwvpIsLinear, hwpcmLastErrorCode=hwpcmLastErrorCode, win32AutochkSettingEntry=win32AutochkSettingEntry, win32USBHubEntry=win32USBHubEntry, hwnacDatabasePath=hwnacDatabasePath, hwspCaption=hwspCaption, hwssPurposeDescription=hwssPurposeDescription, win32VideoControllerTable=win32VideoControllerTable, hwidePNPDeviceID=hwidePNPDeviceID, hwtdCompressionMethod=hwtdCompressionMethod, hwideDeviceID=hwideDeviceID, hwpnpPowerManagementSupported=hwpnpPowerManagementSupported, hwpbCapacityMultiplier=hwpbCapacityMultiplier, hwsbmErrorAccess=hwsbmErrorAccess, hwpbConfigManagerUserConfig=hwpbConfigManagerUserConfig, hwcpuL2CacheSize=hwcpuL2CacheSize, hwupsConfigManagerUserConfig=hwupsConfigManagerUserConfig, hwpmInactivityScale=hwpmInactivityScale, win32RefrigerationEntry=win32RefrigerationEntry, hwirqDescription=hwirqDescription, hwcpuL2CacheSpeed=hwcpuL2CacheSpeed, hwcmCaption=hwcmCaption, hwobModel=hwobModel, hwcpName=hwcpName, hwscsiErrorDescription=hwscsiErrorDescription, hwnaTimeOfLastReset=hwnaTimeOfLastReset, hwfanAvailability=hwfanAvailability, hwmmSystemName=hwmmSystemName, hwfanPNPDeviceID=hwfanPNPDeviceID, hwddPartitions=hwddPartitions, hwcdConfigManagerUserConfig=hwcdConfigManagerUserConfig, hwmbStatus=hwmbStatus, hwddConfigManagerUserConfig=hwddConfigManagerUserConfig, win32CurrentProbeEntry=win32CurrentProbeEntry, hwpbSystemCreationClassName=hwpbSystemCreationClassName, hwpmDialType=hwpmDialType, win32SMBIOSMemoryEntry=win32SMBIOSMemoryEntry, hwmmErrorTransferSize=hwmmErrorTransferSize, hwvpNormalMin=hwvpNormalMin, win32UninterruptPowerSupplyTable=win32UninterruptPowerSupplyTable, hwbiBiosCharacteristics=hwbiBiosCharacteristics, hwucPNPDeviceID=hwucPNPDeviceID, hwpmmDeviceLocator=hwpmmDeviceLocator, hwnaDescription=hwnaDescription, hwbbConfigOptions=hwbbConfigOptions, hwcmErrorTransferSize=hwcmErrorTransferSize, hwhpSystemCreationClassName=hwhpSystemCreationClassName, hwcdStatusInfo=hwcdStatusInfo, hwtdMaxMediaSize=hwtdMaxMediaSize, hwbiSoftwareElementID=hwbiSoftwareElementID, hwvpUpperThresholdNonCritical=hwvpUpperThresholdNonCritical, hwdmaName=hwdmaName, hwpnpDescription=hwpnpDescription, hwscsiMaxNumberControlled=hwscsiMaxNumberControlled, hwvcSystemCreationClassName=hwvcSystemCreationClassName, hwprLastErrorCode=hwprLastErrorCode, win32VideoControllerEntry=win32VideoControllerEntry, hwtdCompression=hwtdCompression, hwtdId=hwtdId, hw1394Description=hw1394Description, hwpbCreationClassName=hwpbCreationClassName, hwpmdVersion=hwpmdVersion, hwpcmStatus=hwpcmStatus, hwfdMaxBlockSize=hwfdMaxBlockSize, hwspcXOnCharacter=hwspcXOnCharacter, hwspcXOffCharacter=hwspcXOffCharacter, hwppDMASupport=hwppDMASupport, hwbaChemistry=hwbaChemistry, hwprdStarted=hwprdStarted, hwssName=hwssName, hwseNumberOfPowerCords=hwseNumberOfPowerCords, hwfdSystemName=hwfdSystemName, win32PrinterDriverTable=win32PrinterDriverTable, win32IDEControllerEntry=win32IDEControllerEntry, hwfcConfigManagerUserConfig=hwfcConfigManagerUserConfig, hwdaEndingAddress=hwdaEndingAddress, hwmmPowerManagementSupported=hwmmPowerManagementSupported, hwpsdDeviceClass=hwpsdDeviceClass, hwvcVideoArchitecture=hwvcVideoArchitecture, win32CurrentProbeTable=win32CurrentProbeTable, hwbbSKU=hwbbSKU, hwpcDescription=hwpcDescription, hwcmOtherErrorDescription=hwcmOtherErrorDescription, hwtmpConfigManagerErrorCode=hwtmpConfigManagerErrorCode, hwtdErrorCleared=hwtdErrorCleared, hwdmPowerManagementCapabilities=hwdmPowerManagementCapabilities, hwpcmConfigManagerUserConfig=hwpcmConfigManagerUserConfig, hwprSpoolEnabled=hwprSpoolEnabled, hwpsdName=hwpsdName, hwuhProtocolCode=hwuhProtocolCode, hwpreCaption=hwpreCaption, hwfcPowerManagementCapabilities=hwfcPowerManagementCapabilities, hwucPowerManagementCapabilities=hwucPowerManagementCapabilities, hwcdCreationClassName=hwcdCreationClassName, hwpnpStatus=hwpnpStatus, hwbaEstimatedChargeRemaining=hwbaEstimatedChargeRemaining, hwpbLocation=hwpbLocation, hwcmErrorData=hwcmErrorData, hwprjNotify=hwprjNotify, hwkbStatusInfo=hwkbStatusInfo, hwcdLastErrorCode=hwcdLastErrorCode, hwupsRange2InputVoltageLow=hwupsRange2InputVoltageLow, hwpmFlowControlOff=hwpmFlowControlOff, hwnacDHCPEnabled=hwnacDHCPEnabled, hwtppSystemName=hwtppSystemName, hwvcIndex=hwvcIndex, hwideProtocolSupported=hwideProtocolSupported, hwcdCaption=hwcdCaption, hwpmAttachedTo=hwpmAttachedTo, hwpbPNPDeviceID=hwpbPNPDeviceID, hwspSettableRLSD=hwspSettableRLSD, hwppAvailability=hwppAvailability, hwsbmErrorCleared=hwsbmErrorCleared, hwtppQueue=hwtppQueue, hwvcErrorCleared=hwvcErrorCleared, hwcmStatus=hwcmStatus, hwspSupports16BitMode=hwspSupports16BitMode, hwprShared=hwprShared, win32DeviceMemoryAddressTable=win32DeviceMemoryAddressTable, hwnacDefaultIPGateway=hwnacDefaultIPGateway, hwtmpErrorDescription=hwtmpErrorDescription, hwbiSMBIOSMajorVersion=hwbiSMBIOSMajorVersion, hwprcScale=hwprcScale, hwddMaxMediaSize=hwddMaxMediaSize, hwssCurrentUsage=hwssCurrentUsage, win32PortResourceEntry=win32PortResourceEntry, hwnacConfigurationIndex=hwnacConfigurationIndex, hwspcBaudRate=hwspcBaudRate, hwsePoweredOn=hwsePoweredOn, hwpsdPDO=hwpsdPDO, hwpmmCreationClassName=hwpmmCreationClassName, hwvcVideoModeDescription=hwvcVideoModeDescription, hwfdNumberOfMediaSupported=hwfdNumberOfMediaSupported, hwcmErrorInfo=hwcmErrorInfo, hwsbmPowerManagementCapabilities=hwsbmPowerManagementCapabilities, hwspPNPDeviceID=hwspPNPDeviceID, hwpmaPoweredOn=hwpmaPoweredOn, hwfdCaption=hwfdCaption, hwnaDeviceID=hwnaDeviceID, hwscsiCaption=hwscsiCaption, hwspSupportsXOnXOff=hwspSupportsXOnXOff, hwidCaption=hwidCaption, hwssManufacturer=hwssManufacturer, hwptSynch=hwptSynch, hwvcSpecificationVersion=hwvcSpecificationVersion, hwcmLastErrorCode=hwcmLastErrorCode, hwppStatusInfo=hwppStatusInfo, hwptConfigManagerUserConfig=hwptConfigManagerUserConfig, hwupsActiveInputVoltage=hwupsActiveInputVoltage, hwbiLanguageEdition=hwbiLanguageEdition, hwupsLastErrorCode=hwupsLastErrorCode, hwpbDesignVoltage=hwpbDesignVoltage, win32InfraredDeviceEntry=win32InfraredDeviceEntry, hwprdCaption=hwprdCaption, hwprjPrintProcessor=hwprjPrintProcessor, hwddDescription=hwddDescription, hwvpCreationClassName=hwvpCreationClassName, hwpnpConfigManagerErrorCode=hwpnpConfigManagerErrorCode, hwdmaMaxTransferSize=hwdmaMaxTransferSize, hwnaSystemName=hwnaSystemName, hwspcIndex=hwspcIndex, hwseModel=hwseModel, wmiNetworkingDevice=wmiNetworkingDevice, hwpmdManufacturer=hwpmdManufacturer, hwdmaPort=hwdmaPort, hwspConfigManagerErrorCode=hwspConfigManagerErrorCode, hwbaCreationClassName=hwbaCreationClassName, hwspPowerManagementCapabilities=hwspPowerManagementCapabilities, hwpmaRemovable=hwpmaRemovable, hwppLastErrorCode=hwppLastErrorCode, hwpsdDriverVersion=hwpsdDriverVersion, hwuhSystemName=hwuhSystemName, hwupsSystemName=hwupsSystemName, hwpcInstallDate=hwpcInstallDate, hwspCapabilities=hwspCapabilities, wmiPower=wmiPower, win32PrinterConfigurationEntry=win32PrinterConfigurationEntry, hwkbPowerManagementSupported=hwkbPowerManagementSupported, hwprCreationClassName=hwprCreationClassName, hwpcInternalReferenceDesignator=hwpcInternalReferenceDesignator, hwcdRevisionLevel=hwcdRevisionLevel, hwpmInstallDate=hwpmInstallDate, hwprjIndex=hwprjIndex, hwmmNumberOfBlocks=hwmmNumberOfBlocks, hwhpConfigManagerUserConfig=hwhpConfigManagerUserConfig)
mibBuilder.exportSymbols("INFORMANT-HW", hwupsIsSwitchingSupply=hwupsIsSwitchingSupply, hwpmConfigurationDialog=hwpmConfigurationDialog, hwpreCreationClassName=hwpreCreationClassName, hwsndCaption=hwsndCaption, hwcpuCreationClassName=hwcpuCreationClassName, hwcmName=hwcmName, hwbbDescription=hwbbDescription, hwobPoweredOn=hwobPoweredOn, hwvcTimeOfLastReset=hwvcTimeOfLastReset, hwidSystemCreationClassName=hwidSystemCreationClassName, hwscsiPowerManagementCapability=hwscsiPowerManagementCapability, hwbaAvailability=hwbaAvailability, hwvpMaxReadable=hwvpMaxReadable, hwcpLowerThresholdNonCritical=hwcpLowerThresholdNonCritical, hwpsdStartMode=hwpsdStartMode, hwddSystemName=hwddSystemName, hwseRemovable=hwseRemovable, hwkbAvailability=hwkbAvailability, hwprConfigManagerErrorCode=hwprConfigManagerErrorCode, hwprcDitherType=hwprcDitherType, hwptPowerManagementCapabilities=hwptPowerManagementCapabilities, hwcmSupportedSRAM=hwcmSupportedSRAM, hwmaIndex=hwmaIndex, hwprcYResolution=hwprcYResolution, hwvcSystemPaletteEntries=hwvcSystemPaletteEntries, hwucStatus=hwucStatus, hwssLengthAllowed=hwssLengthAllowed, hwideStatusInfo=hwideStatusInfo, hwcmDeviceID=hwcmDeviceID, hwfcMaxNumberControlled=hwfcMaxNumberControlled, hwcdMaximumComponentLength=hwcdMaximumComponentLength, hwpcmTimeOfLastReset=hwpcmTimeOfLastReset, hwvcInstalledDisplayDrivers=hwvcInstalledDisplayDrivers, hwirqStatus=hwirqStatus, hwpmMaxBaudRateToSerialPort=hwpmMaxBaudRateToSerialPort, hwcpuName=hwcpuName, hwvcStatus=hwvcStatus, hwcdDriveIntegrity=hwcdDriveIntegrity, hwprcDuplex=hwprcDuplex, hwvcCurrentRefreshRate=hwvcCurrentRefreshRate, hwbuName=hwbuName, hwprcName=hwprcName, hwpbDeviceID=hwpbDeviceID, hwnacTcpMaxConnectRetransmission=hwnacTcpMaxConnectRetransmission, hwrfgDescription=hwrfgDescription, hwpmdCleanerMedia=hwpmdCleanerMedia, hwnacNumForwardPackets=hwnacNumForwardPackets, hwvcDeviceID=hwvcDeviceID, hwddManufacturer=hwddManufacturer, hwpcmPowerManagementCapabilities=hwpcmPowerManagementCapabilities, hwprDefault=hwprDefault, hwkbCaption=hwkbCaption, hwprErrorCleared=hwprErrorCleared, hwddBytesPerSector=hwddBytesPerSector, hwpmDriverDate=hwpmDriverDate, hwpmaTag=hwpmaTag, hwtppSNMPDevIndex=hwtppSNMPDevIndex, hwspcEOFCharacter=hwspcEOFCharacter, hwcpPowerManagementCapabilities=hwcpPowerManagementCapabilities, hwseWeight=hwseWeight, hwscsiName=hwscsiName, hwddNeedsCleaning=hwddNeedsCleaning, hwfdLastErrorCode=hwfdLastErrorCode, win32TapeDriveEntry=win32TapeDriveEntry, hwcpuLastErrorCode=hwcpuLastErrorCode, hwnaNetConnectionID=hwnaNetConnectionID, win32PrinterTable=win32PrinterTable, hwspSupportsParityCheck=hwspSupportsParityCheck, hwkbSystemName=hwkbSystemName, hwidIndex=hwidIndex, win32PnPEntityTable=win32PnPEntityTable, hwpnpManufacturer=hwpnpManufacturer, hwcpuConfigManagerUserConfig=hwcpuConfigManagerUserConfig, hwspcCaption=hwspcCaption, hwssInstallDate=hwssInstallDate, hwmaErrorDataOrder=hwmaErrorDataOrder, hwnacDefaultTTL=hwnacDefaultTTL, hwptStatus=hwptStatus, hwnacArpAlwaysSourceRoute=hwnacArpAlwaysSourceRoute, hwupsMessageInterval=hwupsMessageInterval, hwsbmConfigManagerUserConfig=hwsbmConfigManagerUserConfig, hwfanLastErrorCode=hwfanLastErrorCode, hwbiInstallDate=hwbiInstallDate, hwfdMinBlockSize=hwfdMinBlockSize, hwddCapabilities=hwddCapabilities, hwpmModulationBell=hwpmModulationBell, win32PrinterConfigurationTable=win32PrinterConfigurationTable, hwpmStringFormat=hwpmStringFormat, hwpmdPoweredOn=hwpmdPoweredOn, hwprJobCountSinceLastReset=hwprJobCountSinceLastReset, win32PortableBatteryEntry=win32PortableBatteryEntry, hwbiListOfLanguages=hwbiListOfLanguages, hwbbDepth=hwbbDepth, hwcpuPNPDeviceID=hwcpuPNPDeviceID, hwppCaption=hwppCaption, hwidName=hwidName, hwnaLastErrorCode=hwnaLastErrorCode, hwddTotalHeads=hwddTotalHeads, hwfanActiveCooling=hwfanActiveCooling, hwscsiProtectionManagement=hwscsiProtectionManagement, hwspcSettingID=hwspcSettingID, hwsbmErrorDataOrder=hwsbmErrorDataOrder, hwsndSystemName=hwsndSystemName, hwnacWINSPrimaryServer=hwnacWINSPrimaryServer, hwupsErrorDescription=hwupsErrorDescription, hwprErrorInformation=hwprErrorInformation, hwsbmAdditionalErrorData=hwsbmAdditionalErrorData, win32MemoryArrayTable=win32MemoryArrayTable, hwobDescription=hwobDescription, hwrfgInstallDate=hwrfgInstallDate, win32FloppyDriveEntry=win32FloppyDriveEntry, hwcmReplacementPolicy=hwcmReplacementPolicy, hwbaDesignCapacity=hwbaDesignCapacity, hwbuIndex=hwbuIndex, hwnacFullDNSRegistrationEnabled=hwnacFullDNSRegistrationEnabled, hwcdDescription=hwcdDescription, hwmmCreationClassName=hwmmCreationClassName, hwcpuDeviceID=hwcpuDeviceID, hwbuDescription=hwbuDescription, hwpmBlindOff=hwpmBlindOff, hwseCurrentRequiredOrProduced=hwseCurrentRequiredOrProduced, hwprName=hwprName, hwprLanguagesSupported=hwprLanguagesSupported, hwsndStatus=hwsndStatus, hwirqHardware=hwirqHardware, win32NetworkAdapterEntry=win32NetworkAdapterEntry, hwspcDescription=hwspcDescription, hwsndConfigManagerUserConfig=hwsndConfigManagerUserConfig, hwpbStatus=hwpbStatus, hwvpUpperThresholdCritical=hwvpUpperThresholdCritical, hwvcMaxRefreshRate=hwvcMaxRefreshRate, hwsbmErrorDescription=hwsbmErrorDescription, hwsbmStatus=hwsbmStatus, hwspIndex=hwspIndex, hwprMaxCopies=hwprMaxCopies, hwssMaxDataWidth=hwssMaxDataWidth, hwtdConfigManagerErrorCode=hwtdConfigManagerErrorCode, win32DMAChannelTable=win32DMAChannelTable, hwkbPassword=hwkbPassword, hwcpuDescription=hwcpuDescription, hwddMaxBlockSize=hwddMaxBlockSize, hwcdName=hwcdName, hwpsdSystemCreationClassName=hwpsdSystemCreationClassName, hwcpuStepping=hwcpuStepping, hwtdPowerManagementSupported=hwtdPowerManagementSupported, hwpcmSystemName=hwpcmSystemName, hwprDriverName=hwprDriverName, wmiTelephony=wmiTelephony, hwsndName=hwsndName, hwpmSystemName=hwpmSystemName, hwnaErrorCleared=hwnaErrorCleared, hwcpuSystemName=hwcpuSystemName, hwbiOtherTargetOS=hwbiOtherTargetOS, hwprcDescription=hwprcDescription, hwprjCaption=hwprjCaption, win32CDROMDriveEntry=win32CDROMDriveEntry, hwhpPNPDeviceID=hwhpPNPDeviceID, hwvpLastErrorCode=hwvpLastErrorCode, hwfanDescription=hwfanDescription, hwsndErrorDescription=hwsndErrorDescription, hwfcTimeOfLastReset=hwfcTimeOfLastReset, hwideConfigManagerErrorCode=hwideConfigManagerErrorCode, hwppIndex=hwppIndex, hwrfgConfigManagerErrorCode=hwrfgConfigManagerErrorCode, hwcpuMaxClockSpeed=hwcpuMaxClockSpeed, hwupsRange2InputVoltageHigh=hwupsRange2InputVoltageHigh, hwbiTargetOperatingSystem=hwbiTargetOperatingSystem, hwfcName=hwfcName, hwnacIPXEnabled=hwnacIPXEnabled, hwupsSystemCreationClassName=hwupsSystemCreationClassName, hwspStatus=hwspStatus, hwnacDNSDomain=hwnacDNSDomain, hwcpuCpuStatus=hwcpuCpuStatus, hwnacIPPortSecurityEnabled=hwnacIPPortSecurityEnabled, hwfdConfigManagerErrorCode=hwfdConfigManagerErrorCode, hwmmErrorGranularity=hwmmErrorGranularity, hwptManufacturer=hwptManufacturer, hwseAudibleAlarm=hwseAudibleAlarm, hwtppProtocol=hwtppProtocol, hwdmaCreationClassName=hwdmaCreationClassName, hwmaErrorTime=hwmaErrorTime, hw1394MaxNumberControlled=hw1394MaxNumberControlled, hwcpIndex=hwcpIndex, hwhpIndex=hwhpIndex, hwbaErrorDescription=hwbaErrorDescription, hwvpIndex=hwvpIndex, hwcdAvailability=hwcdAvailability, hwpmPrefix=hwpmPrefix, hwucDescription=hwucDescription, hwsndDescription=hwsndDescription, hwprjPriority=hwprjPriority, hwprjTimeSubmitted=hwprjTimeSubmitted, hwtdSystemCreationClassName=hwtdSystemCreationClassName, hwbiBuildNumber=hwbiBuildNumber, hwpmPNPDeviceID=hwpmPNPDeviceID, hwptHardwareType=hwptHardwareType, hwprPrinterStatus=hwprPrinterStatus, hwpcmStatusInfo=hwpcmStatusInfo, hwdmaCaption=hwdmaCaption, hwcmEndingAddress=hwcmEndingAddress, hwcpAvailability=hwcpAvailability, hwnacIPConnectionMetric=hwnacIPConnectionMetric, hwsndSystemCreationClassName=hwsndSystemCreationClassName, hwcpErrorDescription=hwcpErrorDescription, hwseVisibleAlarm=hwseVisibleAlarm, hwpreEndingAddress=hwpreEndingAddress, hwtdErrorDescription=hwtdErrorDescription, hwfcLastErrorCode=hwfcLastErrorCode, hwpmFlowControlSoft=hwpmFlowControlSoft, hwbaConfigManagerErrorCode=hwbaConfigManagerErrorCode, hwpcmInstallDate=hwpcmInstallDate, hwprdInfName=hwprdInfName, hwvcCurrentVerticalResolution=hwvcCurrentVerticalResolution, hwcdIndex=hwcdIndex, hwpmBlindOn=hwpmBlindOn, hwcpCaption=hwcpCaption, hwvcDescription=hwvcDescription, hwcmAccess=hwcmAccess, hwcdFileSystemFlagsEx=hwcdFileSystemFlagsEx, hwpmTerminator=hwpmTerminator, hwsbmErrorInfo=hwsbmErrorInfo, hwtppIndex=hwtppIndex, hwnaAutoSense=hwnaAutoSense, hwupsPowerFailSignal=hwupsPowerFailSignal, hwfdDeviceID=hwfdDeviceID, hwprdConfigFile=hwprdConfigFile, hwcpuVersion=hwcpuVersion, hwtmpUpperThresholdFatal=hwtmpUpperThresholdFatal, hwmmErrorDataOrder=hwmmErrorDataOrder, hwspcIsBusy=hwspcIsBusy, hwmaInstallDate=hwmaInstallDate, hwvcInstallDate=hwvcInstallDate, hwmaNumberOfBlocks=hwmaNumberOfBlocks, hwprdVersion=hwprdVersion, hwprAvailability=hwprAvailability, hwddPowerManagementSupported=hwddPowerManagementSupported, hwvcAdapterRAM=hwvcAdapterRAM, hwhpActiveCooling=hwhpActiveCooling, hwcmInstallDate=hwcmInstallDate, hwhpPowerManagementCapabilities=hwhpPowerManagementCapabilities, hwmmSystemCreationClassName=hwmmSystemCreationClassName, hwhpConfigManagerErrorCode=hwhpConfigManagerErrorCode, hwpsdInfName=hwpsdInfName, hwprServerName=hwprServerName, hwprMimeTypesSupported=hwprMimeTypesSupported, hwideManufacturer=hwideManufacturer, hwdaName=hwdaName, hwmaErrorTransferSize=hwmaErrorTransferSize, hwvcColorTableEntries=hwvcColorTableEntries, hwmmErrorTime=hwmmErrorTime, hwsbmNumberOfBlocks=hwsbmNumberOfBlocks, hwnacPMTUBHDetectEnabled=hwnacPMTUBHDetectEnabled, hwpbFullChargeCapacity=hwpbFullChargeCapacity, hwptSystemName=hwptSystemName)
mibBuilder.exportSymbols("INFORMANT-HW", hwprjElapsedTime=hwprjElapsedTime, win32FloppyDriveTable=win32FloppyDriveTable, hwbbReplaceable=hwbbReplaceable, win32ParallelPortTable=win32ParallelPortTable, hwcpuStatusInfo=hwcpuStatusInfo, hwddPNPDeviceID=hwddPNPDeviceID, hwpmaReplaceable=hwpmaReplaceable, hwtdAvailability=hwtdAvailability, hwhpName=hwhpName, hwvpPNPDeviceID=hwvpPNPDeviceID, hwkbLayout=hwkbLayout, hwidePowerManagementSupported=hwidePowerManagementSupported, hwpcmDescription=hwpcmDescription, hwnacInterfaceIndex=hwnacInterfaceIndex, hwsndPNPDeviceID=hwsndPNPDeviceID, hwfdStatusInfo=hwfdStatusInfo, hwtmpStatusInfo=hwtmpStatusInfo, hwtmpAvailability=hwtmpAvailability, hwpnpPowerManagementCapabilities=hwpnpPowerManagementCapabilities, hwnacTcpUseRFC1122UrgentPointer=hwnacTcpUseRFC1122UrgentPointer, hwtmpLowerThresholdCritical=hwtmpLowerThresholdCritical, hwfanConfigManagerUserConfig=hwfanConfigManagerUserConfig, hwprPowerManagementSupported=hwprPowerManagementSupported, hwddIndex=hwddIndex, hwptInstallDate=hwptInstallDate, hwprExtendedDetectedErrorState=hwprExtendedDetectedErrorState, hwpmSpeakerVolumeMed=hwpmSpeakerVolumeMed, hwmaCorrectableError=hwmaCorrectableError, hwprcCollate=hwprcCollate, hwpcExternalReferenceDesignator=hwpcExternalReferenceDesignator, hwvcAdapterCompatibility=hwvcAdapterCompatibility, win32SerialPortConfigTable=win32SerialPortConfigTable, hwtdConfigManagerUserConfig=hwtdConfigManagerUserConfig, hwscsiMaxDataWidth=hwscsiMaxDataWidth, hwnaStatusInfo=hwnaStatusInfo, hwmmStartingAddress=hwmmStartingAddress, hwfanErrorDescription=hwfanErrorDescription, hwtmpInstallDate=hwtmpInstallDate, hwptHandedness=hwptHandedness, hwpmdName=hwpmdName, hwvcICMMethod=hwvcICMMethod, hwmmErrorInfo=hwmmErrorInfo, hwpmaCreationClassName=hwpmaCreationClassName, hwbaEstimatedRunTime=hwbaEstimatedRunTime, hwbaInstallDate=hwbaInstallDate, hwnacMACAddress=hwnacMACAddress, hwsbmDescription=hwsbmDescription, hwpmName=hwpmName, hwpmSupportsCallback=hwpmSupportsCallback, hwsndErrorCleared=hwsndErrorCleared, hwpmmReplaceable=hwpmmReplaceable, hwprPNPDeviceID=hwprPNPDeviceID, hwfdDescription=hwfdDescription, hwdaStatus=hwdaStatus, hwpsdInstallDate=hwpsdInstallDate, hwvcInfSection=hwvcInfSection)
