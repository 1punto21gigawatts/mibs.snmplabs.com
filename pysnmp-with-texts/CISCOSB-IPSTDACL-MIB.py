#
# PySNMP MIB module CISCOSB-IPSTDACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCOSB-IPSTDACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:22:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
switch001, = mibBuilder.importSymbols("CISCOSB-MIB", "switch001")
InetAddressType, InetAddress, InetZoneIndex, InetAddressPrefixLength, InetVersion = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetZoneIndex", "InetAddressPrefixLength", "InetVersion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Unsigned32, TimeTicks, Counter32, Bits, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, Counter64, ModuleIdentity, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Unsigned32", "TimeTicks", "Counter32", "Bits", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "Counter64", "ModuleIdentity", "Integer32", "IpAddress")
DateAndTime, TruthValue, DisplayString, RowStatus, TextualConvention, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "TimeStamp")
rlIpStdAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207))
rlIpStdAcl.setRevisions(('2011-05-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlIpStdAcl.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: rlIpStdAcl.setLastUpdated('201106200000Z')
if mibBuilder.loadTexts: rlIpStdAcl.setOrganization('Cisco Small Business')
if mibBuilder.loadTexts: rlIpStdAcl.setContactInfo('Postal: 170 West Tasman Drive San Jose , CA 95134-1706 USA Website: Cisco Small Business Home http://www.cisco.com/smb>;, Cisco Small Business Support Community <http://www.cisco.com/go/smallbizsupport>')
if mibBuilder.loadTexts: rlIpStdAcl.setDescription('The private MIB module definition for IP Standard ACL.')
class RlIpStdAclActionType(TextualConvention, Integer32):
    description = 'ACE action type. Drop action prevents packet forwarding. Permit action allows packet forwarding.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("drop", 1), ("permit", 2))

class RlIpStdAclStdClassificationType(TextualConvention, Integer32):
    description = 'Classification type is used to create ACL rule. ANY type means match all. IPv4 or IPv6 types mean match specified in rlIpStdAclIpAddr field address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("any", 1), ("ipv4", 2), ("ipv6any", 3), ("ipv6", 4))

rlIpStdAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1), )
if mibBuilder.loadTexts: rlIpStdAclTable.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclTable.setDescription('The IP Standard ACL table.')
rlIpStdAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1), ).setIndexNames((0, "CISCOSB-IPSTDACL-MIB", "rlIpStdAclAclName"), (0, "CISCOSB-IPSTDACL-MIB", "rlIpStdAclAceIndex"))
if mibBuilder.loadTexts: rlIpStdAclEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclEntry.setDescription('An entry in the rlIpStdAclTable.')
rlIpStdAclAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlIpStdAclAclName.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclAclName.setDescription('ACL Name.')
rlIpStdAclAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: rlIpStdAclAceIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclAceIndex.setDescription('ACE index.')
rlIpStdAclSrcClassificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 3), RlIpStdAclStdClassificationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcClassificationType.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclSrcClassificationType.setDescription('Classification type.')
rlIpStdAclSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclSrcIpAddrType.setDescription('The address type of rlIpStdAclIpAddr.')
rlIpStdAclSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclSrcIpAddr.setDescription('IP address.')
rlIpStdAclSrcPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 6), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclSrcPrefLen.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclSrcPrefLen.setDescription('The prefix length of this address.')
rlIpStdAclDstClassificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 7), RlIpStdAclStdClassificationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstClassificationType.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclDstClassificationType.setDescription('Classification type.')
rlIpStdAclDstIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstIpAddrType.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclDstIpAddrType.setDescription('The address type of rlIpStdAclIpAddr.')
rlIpStdAclDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclDstIpAddr.setDescription('IP address.')
rlIpStdAclDstPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 10), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclDstPrefLen.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclDstPrefLen.setDescription('The prefix length of this address.')
rlIpStdAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 11), RlIpStdAclActionType().clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclAction.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclAction.setDescription('Permit or deny action.')
rlIpStdAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 1, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclRowStatus.setDescription('Row status.')
rlIpStdAclFreeAceIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStdAclFreeAceIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclFreeAceIndex.setDescription('Returns free ACE index which could be used in order to create new ACE entry.')
rlIpStdAclNameToIndexTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3), )
if mibBuilder.loadTexts: rlIpStdAclNameToIndexTable.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclNameToIndexTable.setDescription('The IP Standard ACL name to index convert table.')
rlIpStdAclNameToIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3, 1), ).setIndexNames((0, "CISCOSB-IPSTDACL-MIB", "rlIpStdAclNameToIndexName"))
if mibBuilder.loadTexts: rlIpStdAclNameToIndexEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclNameToIndexEntry.setDescription('An entry in the rlIpStdAclNameToIndexTable.')
rlIpStdAclNameToIndexName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlIpStdAclNameToIndexName.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclNameToIndexName.setDescription('ACL Name.')
rlIpStdAclNameToIndexIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIpStdAclNameToIndexIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpStdAclNameToIndexIndex.setDescription('ACL index.')
rlIpStdPairAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4), )
if mibBuilder.loadTexts: rlIpStdPairAclTable.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclTable.setDescription('The IP Standard Pair ACL table.')
rlIpStdPairAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1), ).setIndexNames((0, "CISCOSB-IPSTDACL-MIB", "rlIpStdPairAclAclName"), (0, "CISCOSB-IPSTDACL-MIB", "rlIpStdPairAclAceIndex"))
if mibBuilder.loadTexts: rlIpStdPairAclEntry.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclEntry.setDescription('An entry in the rlIpStdPairAclTable.')
rlIpStdPairAclAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: rlIpStdPairAclAclName.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclAclName.setDescription('ACL Name.')
rlIpStdPairAclAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: rlIpStdPairAclAceIndex.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclAceIndex.setDescription('ACE index.')
rlIpStdPairAclSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclSrcIpAddrType.setDescription('The address type of rlIpStdAclIpAddr.')
rlIpStdPairAclSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclSrcIpAddr.setDescription('IP address.')
rlIpStdPairAclSrcPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 5), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclSrcPrefLen.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclSrcPrefLen.setDescription('The prefix length of this address.')
rlIpStdPairAclDstIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclDstIpAddrType.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclDstIpAddrType.setDescription('The address type of rlIpStdAclIpAddr.')
rlIpStdPairAclDstIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclDstIpAddr.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclDstIpAddr.setDescription('IP address.')
rlIpStdPairAclDstPrefLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 8), InetAddressPrefixLength().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclDstPrefLen.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclDstPrefLen.setDescription('The prefix length of this address.')
rlIpStdPairAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 9), RlIpStdAclActionType().clone('permit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclAction.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclAction.setDescription('Permit or deny action.')
rlIpStdPairAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 6, 1, 101, 207, 4, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpStdPairAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlIpStdPairAclRowStatus.setDescription('Row status.')
mibBuilder.exportSymbols("CISCOSB-IPSTDACL-MIB", rlIpStdPairAclDstIpAddr=rlIpStdPairAclDstIpAddr, rlIpStdAclSrcClassificationType=rlIpStdAclSrcClassificationType, rlIpStdPairAclAceIndex=rlIpStdPairAclAceIndex, rlIpStdPairAclEntry=rlIpStdPairAclEntry, rlIpStdAclAction=rlIpStdAclAction, rlIpStdAclDstIpAddr=rlIpStdAclDstIpAddr, rlIpStdAclRowStatus=rlIpStdAclRowStatus, rlIpStdAcl=rlIpStdAcl, rlIpStdPairAclRowStatus=rlIpStdPairAclRowStatus, rlIpStdPairAclSrcIpAddrType=rlIpStdPairAclSrcIpAddrType, rlIpStdAclSrcIpAddr=rlIpStdAclSrcIpAddr, rlIpStdPairAclDstIpAddrType=rlIpStdPairAclDstIpAddrType, rlIpStdAclAclName=rlIpStdAclAclName, RlIpStdAclStdClassificationType=RlIpStdAclStdClassificationType, rlIpStdPairAclDstPrefLen=rlIpStdPairAclDstPrefLen, rlIpStdPairAclSrcPrefLen=rlIpStdPairAclSrcPrefLen, rlIpStdPairAclAclName=rlIpStdPairAclAclName, rlIpStdAclTable=rlIpStdAclTable, rlIpStdAclFreeAceIndex=rlIpStdAclFreeAceIndex, rlIpStdAclNameToIndexName=rlIpStdAclNameToIndexName, rlIpStdAclDstPrefLen=rlIpStdAclDstPrefLen, rlIpStdAclAceIndex=rlIpStdAclAceIndex, rlIpStdAclDstClassificationType=rlIpStdAclDstClassificationType, rlIpStdAclNameToIndexTable=rlIpStdAclNameToIndexTable, rlIpStdAclNameToIndexEntry=rlIpStdAclNameToIndexEntry, rlIpStdPairAclSrcIpAddr=rlIpStdPairAclSrcIpAddr, rlIpStdAclNameToIndexIndex=rlIpStdAclNameToIndexIndex, rlIpStdAclSrcPrefLen=rlIpStdAclSrcPrefLen, RlIpStdAclActionType=RlIpStdAclActionType, PYSNMP_MODULE_ID=rlIpStdAcl, rlIpStdPairAclAction=rlIpStdPairAclAction, rlIpStdPairAclTable=rlIpStdPairAclTable, rlIpStdAclEntry=rlIpStdAclEntry, rlIpStdAclSrcIpAddrType=rlIpStdAclSrcIpAddrType, rlIpStdAclDstIpAddrType=rlIpStdAclDstIpAddrType)
