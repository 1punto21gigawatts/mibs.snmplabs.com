#
# PySNMP MIB module F10-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10CardOperStatus, F10ChassisType, F10SlotState, F10MfgDate, F10HundredthdB, F10ChassisMode, F10SwDate, F10ProcessorModuleType, F10SystemPortType, F10SystemCardType = mibBuilder.importSymbols("FORCE10-TC", "F10CardOperStatus", "F10ChassisType", "F10SlotState", "F10MfgDate", "F10HundredthdB", "F10ChassisMode", "F10SwDate", "F10ProcessorModuleType", "F10SystemPortType", "F10SystemCardType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Gauge32, ObjectIdentity, IpAddress, iso, Bits, MibIdentifier, ModuleIdentity, Counter32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Gauge32", "ObjectIdentity", "IpAddress", "iso", "Bits", "MibIdentifier", "ModuleIdentity", "Counter32", "NotificationType", "Counter64")
DateAndTime, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString")
f10ChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 1))
f10ChassisMib.setRevisions(('2013-01-09 12:00', '2008-09-02 12:00', '2008-04-30 12:00', '2008-04-16 12:00', '2008-02-29 12:00', '2007-06-28 12:00', '2007-05-22 12:00', '1906-05-22 00:00', '1901-01-02 00:00', '1903-10-02 00:00', '1903-10-02 00:00', '1903-07-30 00:00', '1903-07-20 00:00', '1902-06-01 00:00', '1902-04-01 00:00', '1902-12-25 00:00', '1902-08-08 00:00', '1902-06-16 00:00', '1902-05-12 00:00', '1902-05-01 00:00', '1902-04-15 00:00', '1901-11-07 00:00', '1901-03-26 00:00', '1900-11-21 00:00', '1900-10-20 00:00', '1900-10-28 00:00', '1900-10-18 00:00', '1900-10-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10ChassisMib.setRevisionsDescriptions(('Dell Networking OS Chassis MIB version 1.24 Add chAlarmUnsupportedOptic notification.', 'Dell Networking OS Chassis MIB version 1.23 Import F10CardOperStatus.', 'Dell Networking OS Chassis MIB version 1.22 Add chAlarmAcDcMixedPowerSupplyDetect notification. ', 'Dell Networking OS Chassis MIB version 1.21 Add the Sram Parity error counters: - chSysCardParityPhantomError - chSysCardParityRecoverableError - chSysCardParityNonrecovrableError ', 'Dell Networking OS Chassis MIB version 1.20 Add chAlarmSRAMParityErrorDetect notification. ', 'Dell Networking OS Chassis MIB version 1.19 Import F10ChassisType. Redefine XFP received power object. ', 'Dell Networking OS Chassis MIB version 1.18 - add new table: chLineCardUtilTable - add new enum value, e1200i(6), to chType - use Gauge32 to define utilization objects - add notification group', 'Dell Networking OS Chassis MIB version 1.17 Add new XFP Received power to port table. ', 'Dell Networking OS Chassis MIB version 1.16 Add new chassis types E610. ', 'Dell Networking OS Chassis MIB version 1.15 ', "Dell Networking OS Chassis MIB version 1.14 1. Rename chSysPortOperStatus variables a) 'cableProblem' to 'portDown' b) 'notConfigured to 'notPresent' ", 'Dell Networking OS Chassis MIB version 1.13 1. Add support for E300 chassis. 2. Move all textual convention to the Textual-Convention MIB f10-tc.mib ', 'Dell Networking OS Chassis MIB version 1.12 Create SFM Group to add Utilization objects. Changed some OCTET STRING to DisplayString to work around the SNMPc browser problem. ', 'Dell Networking OS Chassis MIB version 1.11 Added CPU utilization support and added trap information. Added traps descriptions that we supported. Changed linecard name from F12PD to F12PE. ', 'Dell Networking OS Chassis MIB version 1.10 Added new linecards and port type Morphesus EoMpls, Promatheus 80km & WAN, Cronus ED2 and Apollo ', 'Dell Networking OS Chassis MIB version 1.9 Added New Linecards, fixed Cronus EE port type ', 'Dell Networking OS Chassis MIB version 1.8 Added New Linecards ', 'Dell Networking OS Chassis MIB version 1.7 Added Dell Networking OS product order number to card, SFM, and the overall chassis. ', 'Dell Networking OS Chassis MIB version 1.6 Added Dell Networking OS date textual convention. Refine the descriptions of chRpmCOAlarmStatus. ', 'Dell Networking OS Chassis MIB version 1.5 Modify textual convention, f10SystemPortType to add port types. ', 'Dell Networking OS Chassis MIB version 1.4 Update for E600 series chassis specification. Modify slot bitmap description and add power supply type. Update chassis, card and SFM tables. ', 'Dell Networking OS Chassis MIB version 1.3 Modify Card Table - to match the latest chassis manager specification.', 'Dell Networking OS Chassis MIB version 1.2 Modify Software Module Table - to match the latest download manager specification.', 'Dell Networking OS Chassis MIB version 1.1. Add more port types and removed Air Filter Table.', 'Dell Networking OS Chassis MIB version 1.0.', 'Updates with review comments from marketing, hardware and software groups. Added more RPM information - 2nd draft revision.', 'Updates with first draft review comments. Changes to software release information.', 'First draft revision of Dell Networking OS chassis mib.',))
if mibBuilder.loadTexts: f10ChassisMib.setLastUpdated('201301091200Z')
if mibBuilder.loadTexts: f10ChassisMib.setOrganization('Dell Inc')
if mibBuilder.loadTexts: f10ChassisMib.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10ChassisMib.setDescription('Dell Networking OS Chassis MIB. ')
f10ChassisMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2))
chRpmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3))
chAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4))
chLineCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5))
chType = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 1), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chType.setStatus('current')
if mibBuilder.loadTexts: chType.setDescription('The Dell Networking OS type of chassis.')
chSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chSerialNumber.setDescription("The Dell Networking OS chassis's serial number.")
chVendorId = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chVendorId.setStatus('current')
if mibBuilder.loadTexts: chVendorId.setDescription("The Dell Networking OS manufacturer's id.")
chMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 4), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chMfgDate.setStatus('current')
if mibBuilder.loadTexts: chMfgDate.setDescription('The date the chassis was manufactured. ')
chEcLevel = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chEcLevel.setStatus('deprecated')
if mibBuilder.loadTexts: chEcLevel.setDescription('The EC Level of the Dell Networking OS chassis.')
chNumFanTrays = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumFanTrays.setStatus('current')
if mibBuilder.loadTexts: chNumFanTrays.setDescription('The total number of fan trays on the chassis.')
chNumPowerSupplies = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: chNumPowerSupplies.setDescription('The total number of power supply in the Dell Networking OS chassis')
chNumSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSlots.setStatus('current')
if mibBuilder.loadTexts: chNumSlots.setDescription('The total number of physical slots in the chassis for line cards and route process module (rpm ) cards.')
chNumSfmSlots = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumSfmSlots.setStatus('current')
if mibBuilder.loadTexts: chNumSfmSlots.setDescription('The total number of switch fabric modules (sfm) slots in the chassis.')
chNumAirFilters = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumAirFilters.setStatus('deprecated')
if mibBuilder.loadTexts: chNumAirFilters.setDescription('The total number of air intake filters in the chassis.')
chSlot1to16 = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 11), F10SlotState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSlot1to16.setStatus('current')
if mibBuilder.loadTexts: chSlot1to16.setDescription('This object has been obsoleted and will not be supported by future Dell Networking OS Chassis. The information here is for reference only. This variable indicates the slot states. Each slot occupies a bit. The value 1 indicates slot is in used and 0 indicates the slot is empty. The placement of line cards and rpm cards in a E1200 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 | | | | ------------- ------------------- | | | | line cards | | line card | | | + ----> RPM card +-------> RPM card The most significant bit is slot 1 and the least significant bit is slot 16. The placement of line cards and rpm cards in a E600 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 7 8 9 | | ------------- | | | line cards | | | | | + ----> RPM card +-------> RPM card The most significant bit is slot 1 and the least significant bit is slot 9.')
chCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chCountryCode.setStatus('current')
if mibBuilder.loadTexts: chCountryCode.setDescription("The Dell Networking OS manufacturer's y code.")
chPartNum = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chPartNum.setStatus('current')
if mibBuilder.loadTexts: chPartNum.setDescription("The Dell Networking OS manufacturer's part number.")
chProductRev = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductRev.setStatus('current')
if mibBuilder.loadTexts: chProductRev.setDescription("The Dell Networking OS manufacturer's product revision.")
chProductOrder = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chProductOrder.setStatus('current')
if mibBuilder.loadTexts: chProductOrder.setDescription('The Dell Networking OS product order number')
chChassisMode = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 1, 16), F10ChassisMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chChassisMode.setStatus('current')
if mibBuilder.loadTexts: chChassisMode.setDescription('The Dell Networking OS chassis mode of this chassis.')
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyTable.setDescription('A list of power supply resident in this chassis.')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setDescription('A power supply entry containing objects for a particular power supply.')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setDescription('The unique index of the power supply.')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setDescription('The status of the power supply.')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyType.setDescription('The type of the power supply.')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayTable.setDescription('A list of fan tray resident in this chassis.')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayEntry.setDescription('A fan entry containing objects for a particular fan tray.')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayIndex.setDescription('The unique index of the fan tray.')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setDescription('The status of the fan tray.')
chSysCardTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3), )
if mibBuilder.loadTexts: chSysCardTable.setStatus('current')
if mibBuilder.loadTexts: chSysCardTable.setDescription('A list of cards resident in the chassis. The placement of line cards and rpm cards in the E1200 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ( Dell Networking OS card number ) 0 1 2 3 4 5 6 0 1 7 8 9 10 11 12 13 | | | | ------------- ------------------- | | | | line card | | line card | | | + ----> RPM card +-------> RPM card The placement of line cards and rpm cards in the E600 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 7 8 9 ( Dell Networking OS card number ) 0 1 2 3 4 5 6 0 1 | | ------------- | | | line card | | | | | + ----> RPM card +-------> RPM card The placement of line cards and rpm cards in the E300 chassis are as follows : ( physical slot numbers ) 1 2 3 4 5 6 7 8 ( Dell Networking OS card number ) 0 1 0 1 2 3 4 5 | | ----------- | | | | | line card | | | + ----> RPM card +-------> RPM card ')
chSysCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysCardSlotIndex"))
if mibBuilder.loadTexts: chSysCardEntry.setStatus('current')
if mibBuilder.loadTexts: chSysCardEntry.setDescription('A list of cards entries containing information for line card or rpm card.')
chSysCardSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysCardSlotIndex.setDescription('A unique index for each slot within the chassis. This value is the physical slot number and the value is determined by the chassis slot location where the card is inserted. Valid entries are 1 to the value of chNumSlots.')
chSysCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 2), F10SystemCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardType.setStatus('current')
if mibBuilder.loadTexts: chSysCardType.setDescription('Type of card in this slot. The type of cards are defined in F10SystemCardType.')
chSysCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumber.setStatus('current')
if mibBuilder.loadTexts: chSysCardNumber.setDescription('This is the card number assigned to the line cards and the RPM cards in the chassis. The line cards number are from 0 to 13 and the RPM are from 0 to 1.')
chSysCardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chSysCardSerialNumber.setDescription('The serial number of the card in this slot.')
chSysCardVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardVendorId.setStatus('current')
if mibBuilder.loadTexts: chSysCardVendorId.setDescription('The vendor id that manufactured the card in this slot.')
chSysCardMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 6), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardMfgDate.setStatus('current')
if mibBuilder.loadTexts: chSysCardMfgDate.setDescription('The date the card is manufactured.')
chSysCardEcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardEcLevel.setStatus('deprecated')
if mibBuilder.loadTexts: chSysCardEcLevel.setDescription('The EC Level of the card.')
chSysCardUpperTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardUpperTemp.setStatus('current')
if mibBuilder.loadTexts: chSysCardUpperTemp.setDescription('The temperature of the card. If the temperature is too high, alarm chAlarmCardTemperatureHigh will be sent.')
chSysCardLowerTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardLowerTemp.setStatus('current')
if mibBuilder.loadTexts: chSysCardLowerTemp.setDescription('This temperature field is not used at the moment.')
chSysCardNumProcessors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumProcessors.setStatus('current')
if mibBuilder.loadTexts: chSysCardNumProcessors.setDescription('The number of Processors in the card. The number of processors are depended on the type of card plugged into the slot.')
chSysCardNumPhyPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumPhyPorts.setStatus('current')
if mibBuilder.loadTexts: chSysCardNumPhyPorts.setDescription('The number of physical ports in each card. The card can have one or more ports depending on the type of cards. If it is a logical card, the value set to zero. ')
chSysCardNumLgcPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardNumLgcPorts.setStatus('current')
if mibBuilder.loadTexts: chSysCardNumLgcPorts.setDescription('The number of logical ports in each card. The card can have one or more ports depending on the type of cards. If it is a physical card, the value set to zero. ')
chSysCardUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardUpTime.setStatus('current')
if mibBuilder.loadTexts: chSysCardUpTime.setDescription('The SysUpTime for this slot. This variable indicates the time since the card last reset.')
chSysCardAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysCardAdminStatus.setDescription("The admin status of the card. The valid status are as followed: 'up' - card present and ready. 'down' - card is not ready.")
chSysCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 15), F10CardOperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysCardOperStatus.setDescription('The current operational state of the card.')
chSysCardFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardFaultStatus.setStatus('current')
if mibBuilder.loadTexts: chSysCardFaultStatus.setDescription("The Fault status of the card. The valid status are as followed: 'on' - the system fault light is on. 'off' - the system fault light is off.")
chSysCardLogStream = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardLogStream.setStatus('current')
if mibBuilder.loadTexts: chSysCardLogStream.setDescription('Reserved field. This fields should return null.')
chSysCardCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardCountryCode.setStatus('current')
if mibBuilder.loadTexts: chSysCardCountryCode.setDescription("The card manufacturer's country code")
chSysCardPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardPartNum.setStatus('current')
if mibBuilder.loadTexts: chSysCardPartNum.setDescription('The card part number')
chSysCardProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardProductRev.setStatus('current')
if mibBuilder.loadTexts: chSysCardProductRev.setDescription("The card manufacturer's product revision")
chSysCardProdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardProdOrder.setStatus('current')
if mibBuilder.loadTexts: chSysCardProdOrder.setDescription('The F10 product order number')
chSysCardParityPhantomError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardParityPhantomError.setStatus('current')
if mibBuilder.loadTexts: chSysCardParityPhantomError.setDescription('Counters indicating Transient Phantom Parity Errors on this card. Applied to Linecards only.')
chSysCardParityRecoverableError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardParityRecoverableError.setStatus('current')
if mibBuilder.loadTexts: chSysCardParityRecoverableError.setDescription('Counters indicating Transient Recoverable Parity Errors on this card. Applied to Linecards only.')
chSysCardParityNonrecovrableError = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCardParityNonrecovrableError.setStatus('current')
if mibBuilder.loadTexts: chSysCardParityNonrecovrableError.setDescription('Counters indicating Transient Non-Recoverable Parity Errors on this card. Applied to Linecards only.')
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
if mibBuilder.loadTexts: chSysPortTable.setDescription('A list of ports in a slot.')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysPortSlotIndex"), (0, "F10-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPortEntry.setDescription('A port entry containing objects for a particular slot.')
chSysPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortSlotIndex.setDescription('A unique index for each slot within the chassis. This value is determined by the chassis slot number where the card is inserted. Valid entries are 1 to the value of chNumSlots')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIndex.setDescription('A unique index for each slot within the card. This value is determined by the variable chSysSlotNumPorts. This value can also be determined by the chSysCardType. Valid entries are 1 to the value of number of ports availabled')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 3), F10SystemPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
if mibBuilder.loadTexts: chSysPortType.setDescription('The type of port in the card.')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortAdminStatus.setDescription('The admin status of the card. The port admin status is Up if the user has configured it to be up otherwise, the admin status is Down.')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortOperStatus.setDescription("The operational status provides further condition of the card. If the chSysPortAdminStatus is 'up', the valid state is 'ready' - the card is present and ready and the chSysPortAdminStatus status is 'up'. 'portDown' - the port is down or not enabled. 'portProblem' - port hardware problems. 'cardProblem' - not used. Same as cardDown. 'cardDown' - the card is downed. 'notPresent' - the card is not present.")
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIfIndex.setDescription('The index of ifIndex in the Interface Mib. This index can link to the ifEntry to get this interface/port information')
chSysXfpRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 4, 1, 7), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysXfpRecvPower.setStatus('current')
if mibBuilder.loadTexts: chSysXfpRecvPower.setDescription(' The power signal strength (dB) received for interface on 10G linecard. ')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorTable.setDescription('A list of Processors resident in this slot.')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysProcessorSlotIndex"), (0, "F10-CHASSIS-MIB", "chSysProcessorIndex"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorEntry.setDescription('A list of Processor entries.')
chSysProcessorSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorSlotIndex.setDescription('A unique index for each slot within the chassis. This value is determined by the chassis slot number where the card is inserted. Valid entries are 1 to the value of chNumSlots')
chSysProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorIndex.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorIndex.setDescription('A unique index for each Processor within the card. This value is determined by the variable chSysSlotNumProcessors. the valid entries are 1 to the value of number of processors')
chSysProcessorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 3), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorModule.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorModule.setDescription('The type of module running on the Processor.')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorUpTime.setDescription('The SysUpTime for this Processor.')
chSysProcessorNvramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorNvramSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorNvramSize.setDescription('Total Non-volatile RAM in Kbytes.')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorMemSize.setDescription('The size of the RAM in Mb.')
chSysProcessorLogStream = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 6, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorLogStream.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorLogStream.setDescription('Reserved field. Currently, this field should return NULL.')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleTable.setDescription('A list of software version information in a processor.')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysSwSlotIndex"), (0, "F10-CHASSIS-MIB", "chSysSwProcessorIndex"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleEntry.setDescription('A software module entry containing version number information for a particular processor.')
chSysSwSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwSlotIndex.setStatus('current')
if mibBuilder.loadTexts: chSysSwSlotIndex.setDescription('A unique index for each slot within the chassis. This value is determined by the chassis slot number where the card is inserted. Valid entries are 1 to the value of chNumSlots')
chSysSwProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwProcessorIndex.setStatus('current')
if mibBuilder.loadTexts: chSysSwProcessorIndex.setDescription('A unique index for each CPU within the card. This value is determined by the variable chSysSlotNumCPUs. This value can also be determined by the chSysSlotType. Valid entries are 1 to the value of number of cpu')
chSysSwRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setDescription("This variable indicates the software module version that is currently running on the processor. The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.1' indicate major version of 1 and minor release of 1.")
chSysSwRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 4), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setDescription('The release date of this software module.')
chSysSwCurrentBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setDescription("The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.1' indicate major version of 1 and minor release of 1.")
chSysSwCurrentBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setDescription('The release date of this software module If the CPU is reset, the software module running date (chSysSwModuleRunningDate) will change to this current date.')
chSysSwCurrentBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setDescription('The status of current boot image.')
chSysSwBackupBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setDescription("The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.1' indicate major version of 1 and minor release of 1.")
chSysSwBackupBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setDescription('The backup boot image released date.')
chSysSwBackupBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setDescription('The status of the backup boot image.')
chSysSwNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwNextRebootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwNextRebootImage.setDescription('The boot flash image selection. When the chassis is rebooted, this is the boot image to use.')
chSysSwCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setDescription('The current boot image. This is the boot image described by the chSysSwCurrentBootImgVersion, chSysSwCurrentBootImgDate, and chSysSwCurrentBootImgStatus objects. ')
chSysSfmTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8), )
if mibBuilder.loadTexts: chSysSfmTable.setStatus('current')
if mibBuilder.loadTexts: chSysSfmTable.setDescription('A list of Swicth Fabric Module in a slot.')
chSysSfmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysSfmIndex"))
if mibBuilder.loadTexts: chSysSfmEntry.setStatus('current')
if mibBuilder.loadTexts: chSysSfmEntry.setDescription('A SFM entry containing objects for a particular slot.')
chSysSfmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmIndex.setStatus('current')
if mibBuilder.loadTexts: chSysSfmIndex.setDescription('A unique index for each SFM within the chassis. The number of SFM slots can be determined with chNumSfmSlots.')
chSysSfmSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chSysSfmSerialNumber.setDescription('The serial number of the SFM.')
chSysSfmVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmVendorId.setStatus('current')
if mibBuilder.loadTexts: chSysSfmVendorId.setDescription('The vendor id that manufactured the SFM.')
chSysSfmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 4), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmMfgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSfmMfgDate.setDescription('The date the SFM is manufactured.')
chSysSfmEcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmEcLevel.setStatus('deprecated')
if mibBuilder.loadTexts: chSysSfmEcLevel.setDescription('The EC Level of the SFM.')
chSysSfmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSfmAdminStatus.setDescription('The admin status of each SFM.')
chSysSfmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("absent", 2), ("standby", 3), ("incomp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSfmOperStatus.setDescription("The Operational status provides further condition of Switch Fabric Module card. If the chSysSfmAdminStatus is 'up', the valid state is 'active' - the card is present and ready and the chSysSfmAdminStatus status is 'up'. If the chSysCardOperStatus is 'down', the service states can be as followed: 'absent' - the card is not present. 'standby' - the card is in standby mode. 'incomp' - incompatible with current sfm switch mode. ")
chSysSfmErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("error", 2), ("not-available", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmErrorStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSfmErrorStatus.setDescription("The Operational status provides further condition of Switch Fabric Module card. If the chSysSfmAdminStatus is 'up', the valid state is 'ok' - the card is present and ready and the chSysSfmAdminStatus status is 'up'. If the chSysSfmAdminStatus is 'down', the error status can be as followed: 'not-available' - status not available. 'error' - the card is in error state.")
chSysSfmCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmCountryCode.setStatus('current')
if mibBuilder.loadTexts: chSysSfmCountryCode.setDescription("The SFM manufacturer's country code")
chSysSfmPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmPartNum.setStatus('current')
if mibBuilder.loadTexts: chSysSfmPartNum.setDescription("The SFM manufacturer's part number")
chSysSfmProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmProductRev.setStatus('current')
if mibBuilder.loadTexts: chSysSfmProductRev.setDescription("The SFM manufacturer's product revision")
chSysSfmProdOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 8, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSfmProdOrder.setStatus('current')
if mibBuilder.loadTexts: chSysSfmProdOrder.setDescription('The SFM product order number.')
chSysSfmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9))
chSfmUtil5Sec = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSfmUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chSfmUtil5Sec.setDescription('SFM utilization in percentage for last 5 Seconds.')
chSfmUtil1Min = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSfmUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chSfmUtil1Min.setDescription('SFM utilization in percentage for last 1 minute.')
chSfmUtil5Min = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 2, 9, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSfmUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chSfmUtil5Min.setDescription('SFM utilization in percentage for last 5 minute.')
chRpmNumRpms = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmNumRpms.setStatus('current')
if mibBuilder.loadTexts: chRpmNumRpms.setDescription('The number of RPM installed in the chassis. There is always one primary RPM, but a secondary RPM can also be installed as backup.')
chRpmSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmSlotNumber.setStatus('current')
if mibBuilder.loadTexts: chRpmSlotNumber.setDescription('The primary routing process module slot number. If the primary RPM is switched to secondary RPM, the slot number will be updated here.')
chRpmUptime = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmUptime.setStatus('current')
if mibBuilder.loadTexts: chRpmUptime.setDescription('SysUpTime of the last time the RPM is reset. Used the SysUpTime of the control processor as this variable.')
chRpmLastSwitchDate = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmLastSwitchDate.setStatus('current')
if mibBuilder.loadTexts: chRpmLastSwitchDate.setDescription('The date and time when the Routing Process Module is switched.')
chRpmCOAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCOAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: chRpmCOAlarmStatus.setDescription("The Central Office (CO) Alarm on RPM card. The valid status are as followed: 'off' - CO Alarm light is off. 'on' - CO Alarm light is on. Please refer to Dell Networking OS Alarm document - Appendix C for the condition when this CO alarm is triggered. ")
chRpmFlashStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absent", 1), ("present", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmFlashStatus.setStatus('current')
if mibBuilder.loadTexts: chRpmFlashStatus.setDescription("The Compact Flash on RPM card. The valid status are as followed: 'absent' - external flash is not present. 'present' - external flash is present. ")
chRpmUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7), )
if mibBuilder.loadTexts: chRpmUtilTable.setStatus('current')
if mibBuilder.loadTexts: chRpmUtilTable.setDescription('A table listing the cpu and memory utilization in master RPM.')
chRpmUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chRpmCpuIndex"))
if mibBuilder.loadTexts: chRpmUtilEntry.setStatus('current')
if mibBuilder.loadTexts: chRpmUtilEntry.setDescription('A row in each processor cpu and mmory utilization')
chRpmCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuIndex.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuIndex.setDescription('A unique index for each Processor within the RPM. This value is determined by the variable chSysSlotNumProcessors. the valid entries are 1 to the value of number of processors')
chRpmCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 2), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuType.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuType.setDescription('The type of module running on the Processor.')
chRpmCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuUtil5Sec.setDescription('CPU utilization in percentage for last 5 seconds.')
chRpmCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuUtil1Min.setDescription('CPU utilization in percentage for last 1 minute.')
chRpmCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmCpuUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chRpmCpuUtil5Min.setDescription('CPU utilization in percentage for last 5 minutes.')
chRpmMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 7, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMemUsageUtil.setStatus('current')
if mibBuilder.loadTexts: chRpmMemUsageUtil.setDescription("Total RPM's memory usage in percentage.")
chRpmMajorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMajorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: chRpmMajorAlarmStatus.setDescription('The Major Alarm LED on the Primary RPM card.')
chRpmMinorAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chRpmMinorAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: chRpmMinorAlarmStatus.setDescription('The Minor Alarm LED on the Primary RPM card.')
chLineCardUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1), )
if mibBuilder.loadTexts: chLineCardUtilTable.setStatus('current')
if mibBuilder.loadTexts: chLineCardUtilTable.setDescription('A table listing the cpu and memory utilization in line cards.')
chLineCardUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1), ).setIndexNames((0, "F10-CHASSIS-MIB", "chSysCardNumber"))
if mibBuilder.loadTexts: chLineCardUtilEntry.setStatus('current')
if mibBuilder.loadTexts: chLineCardUtilEntry.setDescription('A row in each line card cpu and memory utilization')
chLineCardCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chLineCardCpuUtil5Sec.setDescription('CPU utilization in percentage for last 5 seconds.')
chLineCardCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chLineCardCpuUtil1Min.setDescription('CPU utilization in percentage for last 1 minute.')
chLineCardCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardCpuUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chLineCardCpuUtil5Min.setDescription('CPU utilization in percentage for last 5 minutes.')
chLineCardMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 5, 1, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chLineCardMemUsageUtil.setStatus('current')
if mibBuilder.loadTexts: chLineCardMemUsageUtil.setDescription('Memory usage in percentage.')
chAlarmMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0))
chAlarmVariable = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1))
chAlarmVarInteger = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarInteger.setStatus('current')
if mibBuilder.loadTexts: chAlarmVarInteger.setDescription('An generic integer value in the TRAP object')
chAlarmVarString = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 2), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarString.setStatus('current')
if mibBuilder.loadTexts: chAlarmVarString.setDescription('An generic string value in the TRAP object')
chAlarmVarSlot = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarSlot.setStatus('current')
if mibBuilder.loadTexts: chAlarmVarSlot.setDescription('The chassis slot number. For the traps that does not have slot information the value will -1 in the TRAP PDU. ')
chAlarmVarPort = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: chAlarmVarPort.setStatus('current')
if mibBuilder.loadTexts: chAlarmVarPort.setDescription('The chassis port number. For the traps that does not have port information the value will -1 in the TRAP PDU. ')
chAlarmCardDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 1)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardDown.setDescription('The driver/agent generate this trap when a card operational status is down.')
chAlarmCardUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 2)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardUp.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardUp.setDescription('The driver/agent generate this trap when a card operational status is up.')
chAlarmCardReset = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 3)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardReset.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardReset.setDescription('The driver/agent generate this trap when a card is reset.')
chAlarmCardOffline = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 4)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardOffline.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardOffline.setDescription('The driver/agent generate this trap when a card is set to offline.')
chAlarmCardMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 5)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardMismatch.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardMismatch.setDescription('The driver/agent generate this trap when a card is not the same as configured')
chAlarmCardRemove = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 6)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardRemove.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardRemove.setDescription('The driver/agent generate this trap when a card is removed')
chAlarmCardProblem = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 7)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardProblem.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardProblem.setDescription('The driver/agent generate this trap when a card is indicated wht status card problem')
chAlarmCutoff = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 8)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCutoff.setStatus('current')
if mibBuilder.loadTexts: chAlarmCutoff.setDescription('This trap is generated if the alarm cut off button on RPM is pressed.')
chAlarmSfmUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 9)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmUp.setStatus('current')
if mibBuilder.loadTexts: chAlarmSfmUp.setDescription('The driver/agent generate this trap when a SFM operational status is up.')
chAlarmSfmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 10)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmSfmDown.setDescription('The driver/agent generate this trap when a SFM operational status is down.')
chAlarmRpmUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 11)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmRpmUp.setStatus('current')
if mibBuilder.loadTexts: chAlarmRpmUp.setDescription('The primary RPM generate this trap when the primary RPM or the secondary RPM is up and running.')
chAlarmRpmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 12)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmRpmDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmRpmDown.setDescription('The primary RPM generate this trap when the secondary RPM is down, either by software reset or being physically removed from the chassis.')
chAlarmPowersupplyDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 13)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmPowersupplyDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmPowersupplyDown.setDescription('The driver/agent generate this trap when a power supply is not operational.')
chAlarmMinorTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 14)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorTemperatureHigh.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorTemperatureHigh.setDescription("The driver/agent generate this trap when the chassis's temperature exceed the minor threshold.")
chAlarmMajorTemperatureHigh = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 15)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorTemperatureHigh.setStatus('current')
if mibBuilder.loadTexts: chAlarmMajorTemperatureHigh.setDescription("The driver/agent generate this trap when the chassis's temperature exceede the major threshold.")
chAlarmFanTrayDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 16)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmFanTrayDown.setDescription('The driver/agent generate this trap when a fan tray is missing or down.')
chAlarmPowersupplyClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 17)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmPowersupplyClear.setStatus('current')
if mibBuilder.loadTexts: chAlarmPowersupplyClear.setDescription('The driver/agent generate this trap when a power supply is now operational.')
chAlarmMinorTemperatureClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 18)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorTemperatureClear.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorTemperatureClear.setDescription("The driver/agent generate this trap when the chassis's temperature within the minor threshold.")
chAlarmMajorTemperatureClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 19)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorTemperatureClear.setStatus('current')
if mibBuilder.loadTexts: chAlarmMajorTemperatureClear.setDescription("The driver/agent generate this trap when the chassis's temperature within the major threshold.")
chAlarmFanTrayClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 20)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayClear.setStatus('current')
if mibBuilder.loadTexts: chAlarmFanTrayClear.setDescription('The driver/agent generate this trap when a fan tray is now operational.')
chAlarmMinorFanBadClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 21)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorFanBadClear.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorFanBadClear.setDescription('The driver/agent generate this trap when a minor fan tray that was bad is now operational.')
chAlarmMajorSfmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 22)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorSfmDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmMajorSfmDown.setDescription('The driver/agent generate this trap when a majority of SFM are down.')
chAlarmMajorSfmDownClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 23)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorSfmDownClr.setStatus('current')
if mibBuilder.loadTexts: chAlarmMajorSfmDownClr.setDescription('The driver/agent generate this trap when a majority of SFM were down are now operational.')
chAlarmMinorSfmDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 24)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorSfmDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorSfmDown.setDescription('The driver/agent generate this trap when a majority of SFM are down.')
chAlarmMinorSfmDownClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 25)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorSfmDownClr.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorSfmDownClr.setDescription('The driver/agent generate this trap when a majority of SFM were down are now operational.')
chAlarmTaskSuspend = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 26)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmTaskSuspend.setStatus('current')
if mibBuilder.loadTexts: chAlarmTaskSuspend.setDescription('The system generate this trap when a a task is suspended.')
chAlarmTaskTerm = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 27)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmTaskTerm.setStatus('current')
if mibBuilder.loadTexts: chAlarmTaskTerm.setDescription('The system generate this trap when a a task is terminated.')
chAlarmVrrpGoMaster = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 28)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmVrrpGoMaster.setStatus('current')
if mibBuilder.loadTexts: chAlarmVrrpGoMaster.setDescription('The VRRP generate this trap when it become a backup')
chAlarmVrrpGiveupMaster = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 29)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmVrrpGiveupMaster.setStatus('current')
if mibBuilder.loadTexts: chAlarmVrrpGiveupMaster.setDescription('The VRRP generate this trap when it is no longer the master and has entered non-operational state.')
chAlarmBgpEstb = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 30)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmBgpEstb.setStatus('current')
if mibBuilder.loadTexts: chAlarmBgpEstb.setDescription('BGP task neighbour established.')
chAlarmBgpXsition = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 31)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmBgpXsition.setStatus('current')
if mibBuilder.loadTexts: chAlarmBgpXsition.setDescription('BGP task is in transition. ')
chAlarmMajorPS = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 32)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorPS.setStatus('current')
if mibBuilder.loadTexts: chAlarmMajorPS.setDescription('The agent generate this trap when a power supply major alarm is issued.')
chAlarmMajorPSClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 33)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMajorPSClr.setStatus('current')
if mibBuilder.loadTexts: chAlarmMajorPSClr.setDescription('The agent generate this trap when a power supply major alarm is cleared.')
chAlarmMinorPS = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 34)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorPS.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorPS.setDescription('The agent generate this trap when a power supply minor alarm is issued.')
chAlarmMinorPSClr = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 35)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorPSClr.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorPSClr.setDescription('The agent generate this trap when a power supply minor alarm is cleared.')
chAlarmMinorFanBad = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 36)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMinorFanBad.setStatus('current')
if mibBuilder.loadTexts: chAlarmMinorFanBad.setDescription('The agent generate this trap when fan is bad.')
chAlarmExdCpuThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 37)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmExdCpuThreshold.setStatus('current')
if mibBuilder.loadTexts: chAlarmExdCpuThreshold.setDescription('The agent generate this trap when cpu utilization excceded 80%.')
chAlarmClrCpuThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 38)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmClrCpuThreshold.setStatus('current')
if mibBuilder.loadTexts: chAlarmClrCpuThreshold.setDescription('The agent generate this trap when cpu utilization falls below threshold.')
chAlarmExdMemThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 39)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmExdMemThreshold.setStatus('current')
if mibBuilder.loadTexts: chAlarmExdMemThreshold.setDescription('The agent generate this trap when memory utilization excceded 92%.')
chAlarmClrMemThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 40)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmClrMemThreshold.setStatus('current')
if mibBuilder.loadTexts: chAlarmClrMemThreshold.setDescription('The agent generate this trap when memory utilization falls below threshold.')
chAlarmMacStationMove = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 41)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmMacStationMove.setStatus('current')
if mibBuilder.loadTexts: chAlarmMacStationMove.setDescription('The agent generate this trap when a MAC station move exceed the threshold. ')
chAlarmSfmAdd = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 42)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmAdd.setStatus('current')
if mibBuilder.loadTexts: chAlarmSfmAdd.setDescription('The agent generate this trap when a SFM is added to the chassis. ')
chAlarmSfmRemove = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 43)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSfmRemove.setStatus('current')
if mibBuilder.loadTexts: chAlarmSfmRemove.setDescription('The agent generate this trap when a SFM is removed from the chassis. ')
chAlarmRpmPrimary = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 44)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmRpmPrimary.setStatus('current')
if mibBuilder.loadTexts: chAlarmRpmPrimary.setDescription('The agent generate this trap when a standby RPM become Primary RPM after fail-over. ')
chSnmpIpAclDeny = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 45)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chSnmpIpAclDeny.setStatus('current')
if mibBuilder.loadTexts: chSnmpIpAclDeny.setDescription('The agent generate this trap when SNMP Agent deny a SNMP request based on the IP ACL rules. ')
chAlarmSRAMParityErrorDetect = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 47)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmSRAMParityErrorDetect.setStatus('current')
if mibBuilder.loadTexts: chAlarmSRAMParityErrorDetect.setDescription("The agent generate this trap when a linecard detects SRAM parity error and then tries to recover but can't recover that section. ")
chAlarmAcDcMixedPowerSupplyDetect = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 48)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmAcDcMixedPowerSupplyDetect.setStatus('current')
if mibBuilder.loadTexts: chAlarmAcDcMixedPowerSupplyDetect.setDescription('The agent generate this trap when a system detects AC and DC mixed power supply. Applied to C-series only. ')
chAlarmCardVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 56)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmCardVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: chAlarmCardVersionMismatch.setDescription('The driver/agent generate this trap when a card is not the same software version as a Management unit. Applied to S-series stackin only.')
chAlarmUnsupportedOptic = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 57)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmUnsupportedOptic.setStatus('current')
if mibBuilder.loadTexts: chAlarmUnsupportedOptic.setDescription('The Interface Agent generate this trap when an unsupported optic is inserted in a port')
chAlarmFanTrayOrPsuDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 58)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayOrPsuDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmFanTrayOrPsuDown.setDescription('The driver/agent generate this trap when a fan tray or psu is missing or down.')
chAlarmFanTrayOrPsuClear = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 1, 1, 4, 0, 59)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmFanTrayOrPsuClear.setStatus('current')
if mibBuilder.loadTexts: chAlarmFanTrayOrPsuClear.setDescription('The driver/agent generate this trap when a fan tray or psu is now operational.')
f10ChassisMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2))
f10ChassisMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 1))
f10ChassisMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2))
f10ChassisMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 1, 1)).setObjects(("F10-CHASSIS-MIB", "f10ComponentGroup"), ("F10-CHASSIS-MIB", "f10SystemGroup"), ("F10-CHASSIS-MIB", "f10RpmGroup"), ("F10-CHASSIS-MIB", "f10LineCardGroup"), ("F10-CHASSIS-MIB", "f10ChassisNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ChassisMibCompliance = f10ChassisMibCompliance.setStatus('current')
if mibBuilder.loadTexts: f10ChassisMibCompliance.setDescription('The compliance statement for Dell Networking OS product which implement the f10 Chassis MIB.')
f10ComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 1)).setObjects(("F10-CHASSIS-MIB", "chType"), ("F10-CHASSIS-MIB", "chSerialNumber"), ("F10-CHASSIS-MIB", "chVendorId"), ("F10-CHASSIS-MIB", "chMfgDate"), ("F10-CHASSIS-MIB", "chEcLevel"), ("F10-CHASSIS-MIB", "chNumFanTrays"), ("F10-CHASSIS-MIB", "chNumPowerSupplies"), ("F10-CHASSIS-MIB", "chNumSlots"), ("F10-CHASSIS-MIB", "chNumSfmSlots"), ("F10-CHASSIS-MIB", "chSlot1to16"), ("F10-CHASSIS-MIB", "chCountryCode"), ("F10-CHASSIS-MIB", "chPartNum"), ("F10-CHASSIS-MIB", "chProductRev"), ("F10-CHASSIS-MIB", "chProductOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ComponentGroup = f10ComponentGroup.setStatus('current')
if mibBuilder.loadTexts: f10ComponentGroup.setDescription('A collection of objects providing the overall chassis information.')
f10SystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 2)).setObjects(("F10-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-CHASSIS-MIB", "chSysCardNumber"), ("F10-CHASSIS-MIB", "chSysCardType"), ("F10-CHASSIS-MIB", "chSysCardSerialNumber"), ("F10-CHASSIS-MIB", "chSysCardVendorId"), ("F10-CHASSIS-MIB", "chSysCardMfgDate"), ("F10-CHASSIS-MIB", "chSysCardEcLevel"), ("F10-CHASSIS-MIB", "chSysCardUpperTemp"), ("F10-CHASSIS-MIB", "chSysCardLowerTemp"), ("F10-CHASSIS-MIB", "chSysCardNumProcessors"), ("F10-CHASSIS-MIB", "chSysCardNumPhyPorts"), ("F10-CHASSIS-MIB", "chSysCardNumLgcPorts"), ("F10-CHASSIS-MIB", "chSysCardUpTime"), ("F10-CHASSIS-MIB", "chSysCardAdminStatus"), ("F10-CHASSIS-MIB", "chSysCardOperStatus"), ("F10-CHASSIS-MIB", "chSysCardFaultStatus"), ("F10-CHASSIS-MIB", "chSysCardLogStream"), ("F10-CHASSIS-MIB", "chSysCardCountryCode"), ("F10-CHASSIS-MIB", "chSysCardPartNum"), ("F10-CHASSIS-MIB", "chSysCardProductRev"), ("F10-CHASSIS-MIB", "chSysCardProdOrder"), ("F10-CHASSIS-MIB", "chSysCardParityPhantomError"), ("F10-CHASSIS-MIB", "chSysCardParityRecoverableError"), ("F10-CHASSIS-MIB", "chSysCardParityNonrecovrableError"), ("F10-CHASSIS-MIB", "chSysProcessorModule"), ("F10-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-CHASSIS-MIB", "chSysProcessorNvramSize"), ("F10-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-CHASSIS-MIB", "chSysProcessorLogStream"), ("F10-CHASSIS-MIB", "chSysPortType"), ("F10-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-CHASSIS-MIB", "chSysXfpRecvPower"), ("F10-CHASSIS-MIB", "chSysSwRuntimeImgVersion"), ("F10-CHASSIS-MIB", "chSysSwRuntimeImgDate"), ("F10-CHASSIS-MIB", "chSysSwCurrentBootImgVersion"), ("F10-CHASSIS-MIB", "chSysSwCurrentBootImgDate"), ("F10-CHASSIS-MIB", "chSysSwCurrentBootImgStatus"), ("F10-CHASSIS-MIB", "chSysSwBackupBootImgVersion"), ("F10-CHASSIS-MIB", "chSysSwBackupBootImgDate"), ("F10-CHASSIS-MIB", "chSysSwBackupBootImgStatus"), ("F10-CHASSIS-MIB", "chSysSwNextRebootImage"), ("F10-CHASSIS-MIB", "chSysSfmSerialNumber"), ("F10-CHASSIS-MIB", "chSysSfmVendorId"), ("F10-CHASSIS-MIB", "chSysSfmMfgDate"), ("F10-CHASSIS-MIB", "chSysSfmEcLevel"), ("F10-CHASSIS-MIB", "chSysSfmAdminStatus"), ("F10-CHASSIS-MIB", "chSysSfmOperStatus"), ("F10-CHASSIS-MIB", "chSysSfmErrorStatus"), ("F10-CHASSIS-MIB", "chSysSfmCountryCode"), ("F10-CHASSIS-MIB", "chSysSfmPartNum"), ("F10-CHASSIS-MIB", "chSysSfmProductRev"), ("F10-CHASSIS-MIB", "chSysSfmProdOrder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10SystemGroup = f10SystemGroup.setStatus('current')
if mibBuilder.loadTexts: f10SystemGroup.setDescription('A collection of objects providing the chassis system hardware information.')
f10RpmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 3)).setObjects(("F10-CHASSIS-MIB", "chRpmNumRpms"), ("F10-CHASSIS-MIB", "chRpmSlotNumber"), ("F10-CHASSIS-MIB", "chRpmUptime"), ("F10-CHASSIS-MIB", "chRpmLastSwitchDate"), ("F10-CHASSIS-MIB", "chRpmCOAlarmStatus"), ("F10-CHASSIS-MIB", "chRpmFlashStatus"), ("F10-CHASSIS-MIB", "chRpmCpuType"), ("F10-CHASSIS-MIB", "chRpmCpuUtil5Sec"), ("F10-CHASSIS-MIB", "chRpmCpuUtil1Min"), ("F10-CHASSIS-MIB", "chRpmCpuUtil5Min"), ("F10-CHASSIS-MIB", "chRpmMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10RpmGroup = f10RpmGroup.setStatus('current')
if mibBuilder.loadTexts: f10RpmGroup.setDescription('A collection of objects providing the Route Process Module (RPM) information.')
f10LineCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 4)).setObjects(("F10-CHASSIS-MIB", "chLineCardCpuUtil5Sec"), ("F10-CHASSIS-MIB", "chLineCardCpuUtil1Min"), ("F10-CHASSIS-MIB", "chLineCardCpuUtil5Min"), ("F10-CHASSIS-MIB", "chLineCardMemUsageUtil"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10LineCardGroup = f10LineCardGroup.setStatus('current')
if mibBuilder.loadTexts: f10LineCardGroup.setDescription('A collection of objects providing CPU and Memory Utilization in the Line cards.')
f10ChassisNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 1, 2, 2, 5)).setObjects(("F10-CHASSIS-MIB", "chAlarmCardDown"), ("F10-CHASSIS-MIB", "chAlarmCardUp"), ("F10-CHASSIS-MIB", "chAlarmCardReset"), ("F10-CHASSIS-MIB", "chAlarmCardOffline"), ("F10-CHASSIS-MIB", "chAlarmCardMismatch"), ("F10-CHASSIS-MIB", "chAlarmCardRemove"), ("F10-CHASSIS-MIB", "chAlarmCardProblem"), ("F10-CHASSIS-MIB", "chAlarmCutoff"), ("F10-CHASSIS-MIB", "chAlarmSfmUp"), ("F10-CHASSIS-MIB", "chAlarmSfmDown"), ("F10-CHASSIS-MIB", "chAlarmRpmUp"), ("F10-CHASSIS-MIB", "chAlarmRpmDown"), ("F10-CHASSIS-MIB", "chAlarmPowersupplyDown"), ("F10-CHASSIS-MIB", "chAlarmMinorTemperatureHigh"), ("F10-CHASSIS-MIB", "chAlarmMajorTemperatureHigh"), ("F10-CHASSIS-MIB", "chAlarmFanTrayDown"), ("F10-CHASSIS-MIB", "chAlarmPowersupplyClear"), ("F10-CHASSIS-MIB", "chAlarmMinorTemperatureClear"), ("F10-CHASSIS-MIB", "chAlarmMajorTemperatureClear"), ("F10-CHASSIS-MIB", "chAlarmFanTrayClear"), ("F10-CHASSIS-MIB", "chAlarmMinorFanBadClear"), ("F10-CHASSIS-MIB", "chAlarmMajorSfmDown"), ("F10-CHASSIS-MIB", "chAlarmMajorSfmDownClr"), ("F10-CHASSIS-MIB", "chAlarmMinorSfmDown"), ("F10-CHASSIS-MIB", "chAlarmMinorSfmDownClr"), ("F10-CHASSIS-MIB", "chAlarmTaskSuspend"), ("F10-CHASSIS-MIB", "chAlarmTaskTerm"), ("F10-CHASSIS-MIB", "chAlarmVrrpGoMaster"), ("F10-CHASSIS-MIB", "chAlarmVrrpGiveupMaster"), ("F10-CHASSIS-MIB", "chAlarmBgpEstb"), ("F10-CHASSIS-MIB", "chAlarmBgpXsition"), ("F10-CHASSIS-MIB", "chAlarmMajorPS"), ("F10-CHASSIS-MIB", "chAlarmMajorPSClr"), ("F10-CHASSIS-MIB", "chAlarmMinorPS"), ("F10-CHASSIS-MIB", "chAlarmMinorPSClr"), ("F10-CHASSIS-MIB", "chAlarmMinorFanBad"), ("F10-CHASSIS-MIB", "chAlarmExdCpuThreshold"), ("F10-CHASSIS-MIB", "chAlarmClrCpuThreshold"), ("F10-CHASSIS-MIB", "chAlarmExdMemThreshold"), ("F10-CHASSIS-MIB", "chAlarmClrMemThreshold"), ("F10-CHASSIS-MIB", "chAlarmMacStationMove"), ("F10-CHASSIS-MIB", "chAlarmSfmAdd"), ("F10-CHASSIS-MIB", "chAlarmSfmRemove"), ("F10-CHASSIS-MIB", "chAlarmRpmPrimary"), ("F10-CHASSIS-MIB", "chSnmpIpAclDeny"), ("F10-CHASSIS-MIB", "chAlarmSRAMParityErrorDetect"), ("F10-CHASSIS-MIB", "chAlarmAcDcMixedPowerSupplyDetect"), ("F10-CHASSIS-MIB", "chAlarmCardVersionMismatch"), ("F10-CHASSIS-MIB", "chAlarmUnsupportedOptic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10ChassisNotificationGroup = f10ChassisNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: f10ChassisNotificationGroup.setDescription('Notifications for Dell Networking OS Chassis mib')
mibBuilder.exportSymbols("F10-CHASSIS-MIB", chAlarmCutoff=chAlarmCutoff, chAlarmMajorTemperatureHigh=chAlarmMajorTemperatureHigh, chRpmCpuUtil5Sec=chRpmCpuUtil5Sec, chAlarmMinorFanBad=chAlarmMinorFanBad, chAlarmBgpXsition=chAlarmBgpXsition, chSysSwRuntimeImgVersion=chSysSwRuntimeImgVersion, chSysCardSlotIndex=chSysCardSlotIndex, chAlarmMajorSfmDownClr=chAlarmMajorSfmDownClr, chSysCardAdminStatus=chSysCardAdminStatus, chLineCardCpuUtil5Min=chLineCardCpuUtil5Min, f10LineCardGroup=f10LineCardGroup, chAlarmCardDown=chAlarmCardDown, chAlarmVrrpGiveupMaster=chAlarmVrrpGiveupMaster, chSysSfmTable=chSysSfmTable, chSysFanTrayEntry=chSysFanTrayEntry, chSysPortType=chSysPortType, chSysProcessorTable=chSysProcessorTable, chSysSfmEntry=chSysSfmEntry, chSysFanTrayTable=chSysFanTrayTable, chEcLevel=chEcLevel, chNumFanTrays=chNumFanTrays, f10ChassisMibCompliances=f10ChassisMibCompliances, chNumSlots=chNumSlots, chSfmUtil5Sec=chSfmUtil5Sec, chRpmUtilEntry=chRpmUtilEntry, chSysCardNumProcessors=chSysCardNumProcessors, chRpmUtilTable=chRpmUtilTable, chSysSwBackupBootImgVersion=chSysSwBackupBootImgVersion, chAlarmBgpEstb=chAlarmBgpEstb, chAlarmSfmAdd=chAlarmSfmAdd, chAlarmMinorSfmDown=chAlarmMinorSfmDown, chSysCardUpTime=chSysCardUpTime, chSysCardPartNum=chSysCardPartNum, chSysSwProcessorIndex=chSysSwProcessorIndex, chSysCardUpperTemp=chSysCardUpperTemp, chSysSfmErrorStatus=chSysSfmErrorStatus, chSysSfmProductRev=chSysSfmProductRev, chAlarmCardUp=chAlarmCardUp, chSysCardNumPhyPorts=chSysCardNumPhyPorts, chObjects=chObjects, f10ChassisMibConformance=f10ChassisMibConformance, chSysPortIfIndex=chSysPortIfIndex, chSysSwBackupBootImgStatus=chSysSwBackupBootImgStatus, chSysSfmPartNum=chSysSfmPartNum, chSysSfmProdOrder=chSysSfmProdOrder, chMfgDate=chMfgDate, chSysProcessorModule=chSysProcessorModule, chLineCardObjects=chLineCardObjects, chSysPortIndex=chSysPortIndex, chSysCardCountryCode=chSysCardCountryCode, chSysPortEntry=chSysPortEntry, chAlarmFanTrayOrPsuClear=chAlarmFanTrayOrPsuClear, chSnmpIpAclDeny=chSnmpIpAclDeny, chSysProcessorMemSize=chSysProcessorMemSize, chAlarmVarString=chAlarmVarString, chAlarmCardReset=chAlarmCardReset, chAlarmCardVersionMismatch=chAlarmCardVersionMismatch, chSysProcessorLogStream=chSysProcessorLogStream, chAlarmVarPort=chAlarmVarPort, chNumAirFilters=chNumAirFilters, chAlarmUnsupportedOptic=chAlarmUnsupportedOptic, chSysSwSlotIndex=chSysSwSlotIndex, chSysCardVendorId=chSysCardVendorId, chAlarmMinorTemperatureHigh=chAlarmMinorTemperatureHigh, chSysSfmIndex=chSysSfmIndex, chAlarmVariable=chAlarmVariable, chAlarmMinorPS=chAlarmMinorPS, chLineCardUtilEntry=chLineCardUtilEntry, chProductRev=chProductRev, chAlarmMacStationMove=chAlarmMacStationMove, chType=chType, chRpmMinorAlarmStatus=chRpmMinorAlarmStatus, chSysPortAdminStatus=chSysPortAdminStatus, chSysProcessorNvramSize=chSysProcessorNvramSize, chChassisMode=chChassisMode, chSysObjects=chSysObjects, chSerialNumber=chSerialNumber, chVendorId=chVendorId, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chRpmNumRpms=chRpmNumRpms, chSysCardProdOrder=chSysCardProdOrder, chAlarmRpmUp=chAlarmRpmUp, chAlarmRpmDown=chAlarmRpmDown, chAlarmMinorSfmDownClr=chAlarmMinorSfmDownClr, chAlarmObjects=chAlarmObjects, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, chAlarmCardMismatch=chAlarmCardMismatch, chAlarmVarSlot=chAlarmVarSlot, chRpmMajorAlarmStatus=chRpmMajorAlarmStatus, chAlarmMajorTemperatureClear=chAlarmMajorTemperatureClear, chRpmLastSwitchDate=chRpmLastSwitchDate, chAlarmCardRemove=chAlarmCardRemove, chSysSwModuleTable=chSysSwModuleTable, chSysProcessorIndex=chSysProcessorIndex, chAlarmMinorTemperatureClear=chAlarmMinorTemperatureClear, chSysCardParityPhantomError=chSysCardParityPhantomError, chAlarmSRAMParityErrorDetect=chAlarmSRAMParityErrorDetect, chSysSfmEcLevel=chSysSfmEcLevel, chSfmUtil1Min=chSfmUtil1Min, chLineCardMemUsageUtil=chLineCardMemUsageUtil, chAlarmFanTrayClear=chAlarmFanTrayClear, chAlarmExdCpuThreshold=chAlarmExdCpuThreshold, chSysCardNumber=chSysCardNumber, chSysSwRuntimeImgDate=chSysSwRuntimeImgDate, chSysSfmOperStatus=chSysSfmOperStatus, chSysPowerSupplyTable=chSysPowerSupplyTable, chSysSwCurrentBootImage=chSysSwCurrentBootImage, chSysPowerSupplyType=chSysPowerSupplyType, f10ChassisMibGroups=f10ChassisMibGroups, f10ChassisNotificationGroup=f10ChassisNotificationGroup, chSysCardLogStream=chSysCardLogStream, chAlarmMibNotifications=chAlarmMibNotifications, f10ChassisMibCompliance=f10ChassisMibCompliance, f10ChassisMibObject=f10ChassisMibObject, chSysFanTrayIndex=chSysFanTrayIndex, PYSNMP_MODULE_ID=f10ChassisMib, chSysCardLowerTemp=chSysCardLowerTemp, chSysCardEcLevel=chSysCardEcLevel, chAlarmPowersupplyClear=chAlarmPowersupplyClear, f10ComponentGroup=f10ComponentGroup, f10SystemGroup=f10SystemGroup, chCountryCode=chCountryCode, chAlarmSfmRemove=chAlarmSfmRemove, chSysCardNumLgcPorts=chSysCardNumLgcPorts, chAlarmTaskSuspend=chAlarmTaskSuspend, chLineCardCpuUtil1Min=chLineCardCpuUtil1Min, chSysCardProductRev=chSysCardProductRev, chAlarmSfmDown=chAlarmSfmDown, chSysPortTable=chSysPortTable, chAlarmClrMemThreshold=chAlarmClrMemThreshold, chSysCardSerialNumber=chSysCardSerialNumber, chSysSfmAdminStatus=chSysSfmAdminStatus, f10RpmGroup=f10RpmGroup, chSlot1to16=chSlot1to16, chRpmCpuUtil1Min=chRpmCpuUtil1Min, chAlarmMinorPSClr=chAlarmMinorPSClr, chRpmCOAlarmStatus=chRpmCOAlarmStatus, chAlarmCardOffline=chAlarmCardOffline, chRpmObjects=chRpmObjects, chSysCardFaultStatus=chSysCardFaultStatus, chLineCardUtilTable=chLineCardUtilTable, chProductOrder=chProductOrder, chRpmUptime=chRpmUptime, chSysSwCurrentBootImgStatus=chSysSwCurrentBootImgStatus, chAlarmMajorPS=chAlarmMajorPS, chAlarmAcDcMixedPowerSupplyDetect=chAlarmAcDcMixedPowerSupplyDetect, chAlarmMinorFanBadClear=chAlarmMinorFanBadClear, chSysPortSlotIndex=chSysPortSlotIndex, chSysSwCurrentBootImgDate=chSysSwCurrentBootImgDate, chNumSfmSlots=chNumSfmSlots, chRpmCpuUtil5Min=chRpmCpuUtil5Min, chAlarmMajorPSClr=chAlarmMajorPSClr, f10ChassisMib=f10ChassisMib, chSysSwModuleEntry=chSysSwModuleEntry, chSysSfmSerialNumber=chSysSfmSerialNumber, chAlarmVrrpGoMaster=chAlarmVrrpGoMaster, chSysCardEntry=chSysCardEntry, chSysCardTable=chSysCardTable, chSysSfmMfgDate=chSysSfmMfgDate, chSysSfmCountryCode=chSysSfmCountryCode, chAlarmMajorSfmDown=chAlarmMajorSfmDown, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chSysSfmVendorId=chSysSfmVendorId, chAlarmSfmUp=chAlarmSfmUp, chSysPowerSupplyEntry=chSysPowerSupplyEntry, chRpmMemUsageUtil=chRpmMemUsageUtil, chRpmCpuType=chRpmCpuType, chLineCardCpuUtil5Sec=chLineCardCpuUtil5Sec, chPartNum=chPartNum, chSysPortOperStatus=chSysPortOperStatus, chAlarmVarInteger=chAlarmVarInteger, chAlarmFanTrayOrPsuDown=chAlarmFanTrayOrPsuDown, chRpmSlotNumber=chRpmSlotNumber, chSysProcessorEntry=chSysProcessorEntry, chAlarmPowersupplyDown=chAlarmPowersupplyDown, chSysCardOperStatus=chSysCardOperStatus, chSysCardParityRecoverableError=chSysCardParityRecoverableError, chSysXfpRecvPower=chSysXfpRecvPower, chSysSwNextRebootImage=chSysSwNextRebootImage, chSysSwBackupBootImgDate=chSysSwBackupBootImgDate, chSysCardMfgDate=chSysCardMfgDate, chAlarmExdMemThreshold=chAlarmExdMemThreshold, chSysCardParityNonrecovrableError=chSysCardParityNonrecovrableError, chSysProcessorUpTime=chSysProcessorUpTime, chAlarmRpmPrimary=chAlarmRpmPrimary, chAlarmClrCpuThreshold=chAlarmClrCpuThreshold, chRpmFlashStatus=chRpmFlashStatus, chAlarmFanTrayDown=chAlarmFanTrayDown, chAlarmCardProblem=chAlarmCardProblem, chAlarmTaskTerm=chAlarmTaskTerm, chNumPowerSupplies=chNumPowerSupplies, chSfmUtil5Min=chSfmUtil5Min, chSysSwCurrentBootImgVersion=chSysSwCurrentBootImgVersion, chRpmCpuIndex=chRpmCpuIndex, chSysCardType=chSysCardType, chSysProcessorSlotIndex=chSysProcessorSlotIndex, chSysSfmGroup=chSysSfmGroup)
