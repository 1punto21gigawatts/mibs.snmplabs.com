#
# PySNMP MIB module DESKSNMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DESKSNMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:41:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, NotificationType, IpAddress, enterprises, TimeTicks, Unsigned32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2, ModuleIdentity, MibIdentifier, iso, Gauge32, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "IpAddress", "enterprises", "TimeTicks", "Unsigned32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2", "ModuleIdentity", "MibIdentifier", "iso", "Gauge32", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sni = MibIdentifier((1, 3, 6, 1, 4, 1, 231))
sniProductMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2))
sniExtensions = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10))
sniDesktopMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3))
sniDeskInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1))
sniPCInformation = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2))
sniPCManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCManufacturer.setDescription('')
sniPCName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCName.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCName.setDescription('')
sniProductVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniProductVersion.setDescription('')
sniPCSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCSerialNumber.setDescription('')
sniChassisType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-desktop", 3), ("e-low-profile-desktop", 4), ("e-pizza-box", 5), ("e-mini-tower", 6), ("e-tower", 7), ("e-portable", 8), ("e-laptop", 9), ("e-notebook", 10), ("e-handheld", 11), ("e-docking-station", 12), ("e-all-in-one", 13), ("e-sub-notebook", 14), ("e-space-saving", 15), ("e-lunch-box", 16), ("e-mainserver", 17), ("e-expansion-chassis", 18), ("e-sub-chassis", 19), ("e-bus-expansion-chassis", 20), ("e-peripheral-chassis", 21), ("e-raid-chassis", 22), ("e-rack-mount-chassis", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniChassisType.setStatus('mandatory')
if mibBuilder.loadTexts: sniChassisType.setDescription('')
sniChassisColor = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniChassisColor.setStatus('mandatory')
if mibBuilder.loadTexts: sniChassisColor.setDescription('')
sniHousingGeometry = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHousingGeometry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHousingGeometry.setDescription('')
sniCustomerSpecificSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCustomerSpecificSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniCustomerSpecificSerialNumber.setDescription('')
sniUUID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUUID.setStatus('mandatory')
if mibBuilder.loadTexts: sniUUID.setDescription('')
sniBios = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3))
sniBiosManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sniBiosManufacturer.setDescription('')
sniAdaptions = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdaptions.setStatus('mandatory')
if mibBuilder.loadTexts: sniAdaptions.setDescription('')
sniFeatures = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: sniFeatures.setDescription('')
sniBiosVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniBiosVersion.setDescription('')
sniLoaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLoaderVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniLoaderVersion.setDescription('')
sniRomSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRomSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniRomSizekB.setDescription('')
sniBiosDate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosDate.setStatus('mandatory')
if mibBuilder.loadTexts: sniBiosDate.setDescription('')
sniStatus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sniStatus.setDescription('')
sniStartaddress = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStartaddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniStartaddress.setDescription('')
sniEndaddress = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEndaddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniEndaddress.setDescription('')
sniISABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniISABus.setStatus('mandatory')
if mibBuilder.loadTexts: sniISABus.setDescription('')
sniMCABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMCABus.setStatus('mandatory')
if mibBuilder.loadTexts: sniMCABus.setDescription('')
sniEISABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEISABus.setStatus('mandatory')
if mibBuilder.loadTexts: sniEISABus.setDescription('')
sniPCIBus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIBus.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIBus.setDescription('')
sniPCMCIAInterface = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCMCIAInterface.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCMCIAInterface.setDescription('')
sniPlugandPlayPnP = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPlugandPlayPnP.setStatus('mandatory')
if mibBuilder.loadTexts: sniPlugandPlayPnP.setDescription('')
sniAdvPowerManagemAPM = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdvPowerManagemAPM.setStatus('mandatory')
if mibBuilder.loadTexts: sniAdvPowerManagemAPM.setDescription('')
sniVLBus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVLBus.setStatus('mandatory')
if mibBuilder.loadTexts: sniVLBus.setDescription('')
sniESCDBus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniESCDBus.setStatus('mandatory')
if mibBuilder.loadTexts: sniESCDBus.setDescription('')
sniIRDABus = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIRDABus.setStatus('mandatory')
if mibBuilder.loadTexts: sniIRDABus.setDescription('')
sniBootfromCDROM = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBootfromCDROM.setStatus('mandatory')
if mibBuilder.loadTexts: sniBootfromCDROM.setDescription('')
sniBootfromPCMCIA = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBootfromPCMCIA.setStatus('mandatory')
if mibBuilder.loadTexts: sniBootfromPCMCIA.setDescription('')
sniBiosShadowing = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBiosShadowing.setStatus('mandatory')
if mibBuilder.loadTexts: sniBiosShadowing.setDescription('')
sniSavetoDiskStd = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSavetoDiskStd.setStatus('mandatory')
if mibBuilder.loadTexts: sniSavetoDiskStd.setDescription('')
sniSecurity = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: sniSecurity.setDescription('')
sniUSB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUSB.setStatus('mandatory')
if mibBuilder.loadTexts: sniUSB.setDescription('')
sniSoftwarePowerOff = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwarePowerOff.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftwarePowerOff.setDescription('')
sniRemoteOn = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRemoteOn.setStatus('mandatory')
if mibBuilder.loadTexts: sniRemoteOn.setDescription('')
sniAPMSpecificVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAPMSpecificVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniAPMSpecificVersion.setDescription('')
sniPNPSpecificVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPNPSpecificVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniPNPSpecificVersion.setDescription('')
sniFlashBIOS = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFlashBIOS.setStatus('mandatory')
if mibBuilder.loadTexts: sniFlashBIOS.setDescription('')
sniPC98 = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPC98.setStatus('mandatory')
if mibBuilder.loadTexts: sniPC98.setDescription('')
sniBootDeviceSelectable = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBootDeviceSelectable.setStatus('mandatory')
if mibBuilder.loadTexts: sniBootDeviceSelectable.setDescription('')
sniBIOSRomSocketed = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBIOSRomSocketed.setStatus('mandatory')
if mibBuilder.loadTexts: sniBIOSRomSocketed.setDescription('')
sniEnhancedDiskDriveEDD = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEnhancedDiskDriveEDD.setStatus('mandatory')
if mibBuilder.loadTexts: sniEnhancedDiskDriveEDD.setDescription('')
sniNEC9800FloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNEC9800FloppySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniNEC9800FloppySupport.setDescription('')
sniToshibaFloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniToshibaFloppySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniToshibaFloppySupport.setDescription('')
sni360kBFloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni360kBFloppySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sni360kBFloppySupport.setDescription('')
sni720kBFloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni720kBFloppySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sni720kBFloppySupport.setDescription('')
sni1MB2FloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni1MB2FloppySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sni1MB2FloppySupport.setDescription('')
sni2MB88FloppySupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sni2MB88FloppySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sni2MB88FloppySupport.setDescription('')
sniInt5PrintScreenService = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt5PrintScreenService.setStatus('mandatory')
if mibBuilder.loadTexts: sniInt5PrintScreenService.setDescription('')
sniInt9Keyboard8042Supp = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt9Keyboard8042Supp.setStatus('mandatory')
if mibBuilder.loadTexts: sniInt9Keyboard8042Supp.setDescription('')
sniSoftwarePowerOn = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwarePowerOn.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftwarePowerOn.setDescription('')
sniISAMemoryGapSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniISAMemoryGapSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniISAMemoryGapSupport.setDescription('')
sniIEEE1394Support = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIEEE1394Support.setStatus('mandatory')
if mibBuilder.loadTexts: sniIEEE1394Support.setDescription('')
sniDMISupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDMISupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniDMISupport.setDescription('')
sniACPISupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniACPISupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniACPISupport.setDescription('')
sniSystemMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemMonitoring.setStatus('mandatory')
if mibBuilder.loadTexts: sniSystemMonitoring.setDescription('')
sniInt14SerialServices = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt14SerialServices.setStatus('mandatory')
if mibBuilder.loadTexts: sniInt14SerialServices.setDescription('')
sniInt17PrinterServices = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt17PrinterServices.setStatus('mandatory')
if mibBuilder.loadTexts: sniInt17PrinterServices.setDescription('')
sniInt10CGAVideoServices = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInt10CGAVideoServices.setStatus('mandatory')
if mibBuilder.loadTexts: sniInt10CGAVideoServices.setDescription('')
sniAGPSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAGPSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniAGPSupport.setDescription('')
sniI2OBootSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniI2OBootSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniI2OBootSupport.setDescription('')
sniLS120BootSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLS120BootSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniLS120BootSupport.setDescription('')
sniAtapiZIPDriveBootSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAtapiZIPDriveBootSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniAtapiZIPDriveBootSupport.setDescription('')
sniSMARTBatterieSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 3, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTBatterieSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTBatterieSupport.setDescription('')
sniMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4))
sniPhysicalMemoryMB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalMemoryMB.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalMemoryMB.setDescription('')
sniBaseMemorykB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseMemorykB.setStatus('mandatory')
if mibBuilder.loadTexts: sniBaseMemorykB.setDescription('')
sniFreePhysicalMemorykB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFreePhysicalMemorykB.setStatus('mandatory')
if mibBuilder.loadTexts: sniFreePhysicalMemorykB.setDescription('')
sniFreeUserResourcesPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFreeUserResourcesPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: sniFreeUserResourcesPercentage.setDescription('')
sniFreeGDIResourcesPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFreeGDIResourcesPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: sniFreeGDIResourcesPercentage.setDescription('')
sniVirtualMemoryType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-no-paging", 1), ("e-dos-paging", 2), ("e-protected-paging", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVirtualMemoryType.setStatus('mandatory')
if mibBuilder.loadTexts: sniVirtualMemoryType.setDescription('')
sniSwapFileName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSwapFileName.setStatus('mandatory')
if mibBuilder.loadTexts: sniSwapFileName.setDescription('')
sniSwapFileSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSwapFileSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniSwapFileSizekB.setDescription('')
sniSwapFileUsedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSwapFileUsedPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: sniSwapFileUsedPercentage.setDescription('')
sniEMMSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniEMMSizekB.setDescription('')
sniEMMFreekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMFreekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniEMMFreekB.setDescription('')
sniEMMDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniEMMDriverVersion.setDescription('')
sniEMMDriverName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEMMDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: sniEMMDriverName.setDescription('')
sniXMSSizekB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniXMSSizekB.setDescription('')
sniXMSFreeMemorykB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSFreeMemorykB.setStatus('mandatory')
if mibBuilder.loadTexts: sniXMSFreeMemorykB.setDescription('')
sniXMSDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniXMSDriverVersion.setDescription('')
sniXMSDriverName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 4, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniXMSDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: sniXMSDriverName.setDescription('')
sniGraphic = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5))
sniGraphicCardManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicCardManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sniGraphicCardManufacturer.setDescription('')
sniGraphicController = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicController.setStatus('mandatory')
if mibBuilder.loadTexts: sniGraphicController.setDescription('')
sniGraphicCardDate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicCardDate.setStatus('mandatory')
if mibBuilder.loadTexts: sniGraphicCardDate.setDescription('')
sniShadowed = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniShadowed.setStatus('mandatory')
if mibBuilder.loadTexts: sniShadowed.setDescription('')
sniGraphicType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-cga", 3), ("e-ega", 4), ("e-vga", 5), ("e-svga", 6), ("e-mda", 7), ("e-hgc", 8), ("e-mcga", 9), ("e-8514a", 10), ("e-xga", 11), ("e-frame-buffer", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicType.setStatus('mandatory')
if mibBuilder.loadTexts: sniGraphicType.setDescription('')
sniDriver = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriver.setStatus('mandatory')
if mibBuilder.loadTexts: sniDriver.setDescription('')
sniGraphicmode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicmode.setStatus('mandatory')
if mibBuilder.loadTexts: sniGraphicmode.setDescription('')
snivertResolutionPixel = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snivertResolutionPixel.setStatus('mandatory')
if mibBuilder.loadTexts: snivertResolutionPixel.setDescription('')
snihorResolutionPixel = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snihorResolutionPixel.setStatus('mandatory')
if mibBuilder.loadTexts: snihorResolutionPixel.setDescription('')
sniColorResolution = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniColorResolution.setStatus('mandatory')
if mibBuilder.loadTexts: sniColorResolution.setDescription('')
sniRefreshrateHz = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRefreshrateHz.setStatus('mandatory')
if mibBuilder.loadTexts: sniRefreshrateHz.setDescription('')
sniScanMode = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-interlaced", 3), ("e-non-interlaced", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniScanMode.setStatus('mandatory')
if mibBuilder.loadTexts: sniScanMode.setDescription('')
sniMinRefreshrateHz = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinRefreshrateHz.setStatus('mandatory')
if mibBuilder.loadTexts: sniMinRefreshrateHz.setDescription('')
sniMaxRefreshrateHz = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxRefreshrateHz.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxRefreshrateHz.setDescription('')
sniMemorySizeKB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemorySizeKB.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemorySizeKB.setDescription('')
sniMemoryType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-vram", 3), ("e-dram", 4), ("e-sram", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryType.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryType.setDescription('')
sniGraphicCardLocation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-integrated", 3), ("e-add-on", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGraphicCardLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sniGraphicCardLocation.setDescription('')
sniStandardBios = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStandardBios.setStatus('mandatory')
if mibBuilder.loadTexts: sniStandardBios.setDescription('')
sniVESAExtensions = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVESAExtensions.setStatus('mandatory')
if mibBuilder.loadTexts: sniVESAExtensions.setDescription('')
sniDPMS = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDPMS.setStatus('mandatory')
if mibBuilder.loadTexts: sniDPMS.setDescription('')
sniDDC = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDDC.setStatus('mandatory')
if mibBuilder.loadTexts: sniDDC.setDescription('')
sniShadowing = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniShadowing.setStatus('mandatory')
if mibBuilder.loadTexts: sniShadowing.setDescription('')
sniUpgradable = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUpgradable.setStatus('mandatory')
if mibBuilder.loadTexts: sniUpgradable.setDescription('')
sniMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6))
sniMonitorName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMonitorName.setStatus('mandatory')
if mibBuilder.loadTexts: sniMonitorName.setDescription('')
sniSizeInch = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSizeInch.setStatus('mandatory')
if mibBuilder.loadTexts: sniSizeInch.setDescription('')
sniDDCSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDDCSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniDDCSupport.setDescription('')
sniDPMSSupport = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDPMSSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniDPMSSupport.setDescription('')
sniMaxhorizResolution = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxhorizResolution.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxhorizResolution.setDescription('')
sniMaxverticalResolution = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxverticalResolution.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxverticalResolution.setDescription('')
sniMaxhorizontalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxhorizontalFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxhorizontalFrequency.setDescription('')
sniMinhorizontalFrequency = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinhorizontalFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: sniMinhorizontalFrequency.setDescription('')
sniMaximumRefreshrate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumRefreshrate.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaximumRefreshrate.setDescription('')
sniMinimumRefreshrate = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinimumRefreshrate.setStatus('mandatory')
if mibBuilder.loadTexts: sniMinimumRefreshrate.setDescription('')
sniSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniSerialNumber.setDescription('')
sniWeekofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWeekofManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: sniWeekofManufacture.setDescription('')
sniYearofManufacture = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniYearofManufacture.setStatus('mandatory')
if mibBuilder.loadTexts: sniYearofManufacture.setDescription('')
sniOperatingSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7))
sniOSName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSName.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSName.setDescription('')
sniOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSVersion.setDescription('')
sniOSLanguage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSLanguage.setDescription('')
sniOSInstallationDirectory = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSInstallationDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSInstallationDirectory.setDescription('')
sniOSNameSecondary = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSNameSecondary.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSNameSecondary.setDescription('')
sniOSVersionSecondary = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSVersionSecondary.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSVersionSecondary.setDescription('')
sniOSLanguageSecondary = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSLanguageSecondary.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSLanguageSecondary.setDescription('')
sniOSInstallDirSec = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOSInstallDirSec.setStatus('mandatory')
if mibBuilder.loadTexts: sniOSInstallDirSec.setDescription('')
sniPreInstallationVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPreInstallationVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniPreInstallationVersion.setDescription('')
sniPreInstallationLanguage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 7, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPreInstallationLanguage.setStatus('mandatory')
if mibBuilder.loadTexts: sniPreInstallationLanguage.setDescription('')
sniSoftware = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8), )
if mibBuilder.loadTexts: sniSoftware.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftware.setDescription('')
sniSoftwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSoftwareIndex"))
if mibBuilder.loadTexts: sniSoftwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftwareEntry.setDescription('An entry of the table')
sniSoftwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftwareIndex.setDescription('')
sniSoftwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwareName.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftwareName.setDescription('')
sniSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniSoftwareVersion.setDescription('')
sniInstallationDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInstallationDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: sniInstallationDirectory.setDescription('')
sniAtPreInstallTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAtPreInstallTime.setStatus('mandatory')
if mibBuilder.loadTexts: sniAtPreInstallTime.setDescription('')
sniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniVersion.setDescription('')
sniHardware = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10), )
if mibBuilder.loadTexts: sniHardware.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardware.setDescription('')
sniHardwareEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniHardwareIndex"))
if mibBuilder.loadTexts: sniHardwareEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwareEntry.setDescription('An entry of the table')
sniHardwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHardwareIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwareIndex.setDescription('')
sniHardwareName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHardwareName.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwareName.setDescription('')
sniDriverDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriverDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: sniDriverDirectory.setDescription('')
sniLogicalDrives = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12), )
if mibBuilder.loadTexts: sniLogicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrives.setDescription('')
sniLogicalDrivesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniDriveletter"))
if mibBuilder.loadTexts: sniLogicalDrivesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivesEntry.setDescription('An entry of the table')
sniDriveletter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriveletter.setStatus('mandatory')
if mibBuilder.loadTexts: sniDriveletter.setDescription('')
sniLogicalDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-harddisk", 3), ("e-removable-disk", 4), ("e-remote", 5), ("e-cd-rom", 6), ("e-floppy-disk", 7), ("e-ramdrive", 8), ("e-disk-array", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDriveType.setDescription('')
sniVolumename = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVolumename.setStatus('mandatory')
if mibBuilder.loadTexts: sniVolumename.setDescription('')
sniLogicalDriveSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDriveSizekB.setDescription('')
sniLogicalDriveFreeSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveFreeSpacekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDriveFreeSpacekB.setDescription('')
sniLogicalDriveSectorSizeByte = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDriveSectorSizeByte.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDriveSectorSizeByte.setDescription('')
sniClusterSizeByte = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniClusterSizeByte.setStatus('mandatory')
if mibBuilder.loadTexts: sniClusterSizeByte.setDescription('')
sniSectorsPerCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSectorsPerCluster.setStatus('mandatory')
if mibBuilder.loadTexts: sniSectorsPerCluster.setDescription('')
sniClusters = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniClusters.setStatus('mandatory')
if mibBuilder.loadTexts: sniClusters.setDescription('')
sniSectors = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSectors.setStatus('mandatory')
if mibBuilder.loadTexts: sniSectors.setDescription('')
sniNetworkpath = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNetworkpath.setStatus('mandatory')
if mibBuilder.loadTexts: sniNetworkpath.setDescription('')
sniLogicalDrivePartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionName.setDescription('')
sniLogicalDrivePartitionSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionSizekB.setDescription('')
sniLogicalDrivePartitionFreeSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionFreeSpacekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionFreeSpacekB.setDescription('')
sniLogicalDrivePartitionLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionLabel.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionLabel.setDescription('')
sniLogicalDrivePartitionFilesystem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-fat", 3), ("e-hpfs", 4), ("e-ntfs", 5), ("e-ofs", 6), ("e-mfs", 7), ("e-hfs", 8), ("e-vxfs", 9), ("e-sfs", 10), ("e-s5", 11), ("e-s52k", 12), ("e-ufs", 13), ("e-ffs", 14), ("e-netware286", 15), ("e-netware386", 16), ("e-cdfs", 17), ("e-fat32", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionFilesystem.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionFilesystem.setDescription('')
sniLogicalDrivePartitionCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionCompressed.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionCompressed.setDescription('')
sniLogicalDrivePartitionEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionEncrypted.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionEncrypted.setDescription('')
sniLogicalDrivePartitionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionActive.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionActive.setDescription('')
sniLogicalDrivePartitionBootable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 12, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLogicalDrivePartitionBootable.setStatus('mandatory')
if mibBuilder.loadTexts: sniLogicalDrivePartitionBootable.setDescription('')
sniPhysicalDrives = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14), )
if mibBuilder.loadTexts: sniPhysicalDrives.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDrives.setDescription('')
sniPhysicalDrivesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPhysicalDrive"))
if mibBuilder.loadTexts: sniPhysicalDrivesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDrivesEntry.setDescription('An entry of the table')
sniPhysicalDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDrive.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDrive.setDescription('')
sniPhysicalDriveName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveName.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveName.setDescription('')
sniPhysicalDriveType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-harddisk", 3), ("e-floppydisk", 4), ("e-optical-rom", 5), ("e-optical-worm", 6), ("e-optical-rw", 7), ("e-cd", 8), ("e-flash-disk", 9), ("e-bernoulli-disk", 10), ("e-optical-fd", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveType.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveType.setDescription('')
sniInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-scsi", 3), ("e-esdi", 4), ("e-ide", 5), ("e-cmd", 6), ("e-ipi", 7), ("e-st506", 8), ("e-dssi", 9), ("e-parallel", 10), ("e-hippi", 11), ("e-qic2", 12), ("e-fd", 13), ("e-pcmcia", 14), ("e-eide", 15), ("e-ide-eide", 16), ("e-atapi", 17), ("e-usb", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterface.setStatus('mandatory')
if mibBuilder.loadTexts: sniInterface.setDescription('')
sniMediaLoaded = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMediaLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: sniMediaLoaded.setDescription('')
sniRemovableDrive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRemovableDrive.setStatus('mandatory')
if mibBuilder.loadTexts: sniRemovableDrive.setDescription('')
sniRemovableMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRemovableMedia.setStatus('mandatory')
if mibBuilder.loadTexts: sniRemovableMedia.setDescription('')
sniSCSIID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIID.setStatus('mandatory')
if mibBuilder.loadTexts: sniSCSIID.setDescription('')
sniSCSILUN = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSILUN.setStatus('mandatory')
if mibBuilder.loadTexts: sniSCSILUN.setDescription('')
sniPhysicalDriveTotalSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveTotalSpacekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveTotalSpacekB.setDescription('')
sniTracks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTracks.setStatus('mandatory')
if mibBuilder.loadTexts: sniTracks.setDescription('')
sniSectorsPerTrack = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSectorsPerTrack.setStatus('mandatory')
if mibBuilder.loadTexts: sniSectorsPerTrack.setDescription('')
sniHeads = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHeads.setStatus('mandatory')
if mibBuilder.loadTexts: sniHeads.setDescription('')
sniWritePreComp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWritePreComp.setStatus('mandatory')
if mibBuilder.loadTexts: sniWritePreComp.setDescription('')
sniLandingZone = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLandingZone.setStatus('mandatory')
if mibBuilder.loadTexts: sniLandingZone.setDescription('')
sniPhysicalDriveSectorSizeByte = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveSectorSizeByte.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveSectorSizeByte.setDescription('')
sniBadBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBadBlocks.setStatus('mandatory')
if mibBuilder.loadTexts: sniBadBlocks.setDescription('')
sniPhysicalDrivePartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDrivePartitions.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDrivePartitions.setDescription('')
sniPhysicalDriveLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-internal", 3), ("e-external", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveLocation.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveLocation.setDescription('')
sniSMART = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-ok", 3), ("e-warning", 4), ("e-critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMART.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMART.setDescription('')
sniSMARTCrossreference = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 14, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTCrossreference.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTCrossreference.setDescription('')
sniPartitions = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16), )
if mibBuilder.loadTexts: sniPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitions.setDescription('')
sniPartitionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPhysicalDriveIndex"), (0, "DESKSNMP-MIB", "sniPartitionIndex"))
if mibBuilder.loadTexts: sniPartitionsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionsEntry.setDescription('An entry of the table')
sniPhysicalDriveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveIndex.setDescription('')
sniPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionIndex.setDescription('')
sniPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionName.setDescription('')
sniPartitionSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionSizekB.setDescription('')
sniPartitionFreeSpacekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionFreeSpacekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionFreeSpacekB.setDescription('')
sniLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLabel.setStatus('mandatory')
if mibBuilder.loadTexts: sniLabel.setDescription('')
sniPartitionFilesystem = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-fat", 3), ("e-hpfs", 4), ("e-ntfs", 5), ("e-ofs", 6), ("e-mfs", 7), ("e-hfs", 8), ("e-vxfs", 9), ("e-sfs", 10), ("e-s5", 11), ("e-s52k", 12), ("e-ufs", 13), ("e-ffs", 14), ("e-netware286", 15), ("e-netware386", 16), ("e-cdfs", 17), ("e-fat32", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionFilesystem.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionFilesystem.setDescription('')
sniPartitionCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionCompressed.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionCompressed.setDescription('')
sniPartitionEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionEncrypted.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionEncrypted.setDescription('')
sniPartitionActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionActive.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionActive.setDescription('')
sniPartitionBootable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPartitionBootable.setStatus('mandatory')
if mibBuilder.loadTexts: sniPartitionBootable.setDescription('')
sniMainboard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18))
sniMainboardManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardManufacturer.setDescription('')
sniMainboardName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardName.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardName.setDescription('')
sniMainboardVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardVersion.setDescription('')
sniProductID = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductID.setStatus('mandatory')
if mibBuilder.loadTexts: sniProductID.setDescription('')
sniProductType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductType.setStatus('mandatory')
if mibBuilder.loadTexts: sniProductType.setDescription('')
sniMaxMemoryMB = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxMemoryMB.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxMemoryMB.setDescription('')
sniUsedMemorySlots = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUsedMemorySlots.setStatus('mandatory')
if mibBuilder.loadTexts: sniUsedMemorySlots.setDescription('')
sniNumberMemorySlots = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberMemorySlots.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberMemorySlots.setDescription('')
sniOnBoardMouse = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnBoardMouse.setStatus('mandatory')
if mibBuilder.loadTexts: sniOnBoardMouse.setDescription('')
sniHarddiskAccelerator = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHarddiskAccelerator.setStatus('mandatory')
if mibBuilder.loadTexts: sniHarddiskAccelerator.setDescription('')
sniMainboardGSNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardGSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardGSNumber.setDescription('')
sniMainboardVariant = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 18, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardVariant.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardVariant.setDescription('')
sniMainboardProcessors = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19), )
if mibBuilder.loadTexts: sniMainboardProcessors.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardProcessors.setDescription('')
sniMainboardProcessorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniProcessorIndex"))
if mibBuilder.loadTexts: sniMainboardProcessorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardProcessorsEntry.setDescription('An entry of the table')
sniProcessorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniProcessorIndex.setDescription('')
sniProcessorType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-cpu", 3), ("e-co-processor", 4), ("e-sound-processor", 5), ("e-graphic-processor", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorType.setStatus('mandatory')
if mibBuilder.loadTexts: sniProcessorType.setDescription('')
sniFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFamily.setStatus('mandatory')
if mibBuilder.loadTexts: sniFamily.setDescription('')
sniProcessorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniProcessorVersion.setDescription('')
sniCurrentProcSpeedMHz = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCurrentProcSpeedMHz.setStatus('mandatory')
if mibBuilder.loadTexts: sniCurrentProcSpeedMHz.setDescription('')
sniMaxBoardSpeedMHz = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxBoardSpeedMHz.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxBoardSpeedMHz.setDescription('')
sniProcessorSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 19, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProcessorSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniProcessorSerialnumber.setDescription('')
sniMainboardCache = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21), )
if mibBuilder.loadTexts: sniMainboardCache.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardCache.setDescription('')
sniMainboardCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniCacheIndex"))
if mibBuilder.loadTexts: sniMainboardCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardCacheEntry.setDescription('An entry of the table')
sniCacheIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheIndex.setDescription('')
sniCacheActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheActive.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheActive.setDescription('')
sniCacheSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheSizekB.setDescription('')
sniMaximumSizekB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumSizekB.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaximumSizekB.setDescription('')
sniLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sniLevel.setDescription('')
sniCacheBurstType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-non-burst", 1), ("e-burst", 2), ("e-burst-nonburst", 3), ("e-pipelinedburst", 4), ("e-nonburst-pipelinedburst", 5), ("e-burst-pipelinedburst", 6), ("e-burst-nonburst-pipelinedburst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheBurstType.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheBurstType.setDescription('')
sniCacheSynchron = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-yes", 1), ("e-no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheSynchron.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheSynchron.setDescription('')
sniCacheSRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheSRAM.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheSRAM.setDescription('')
sniBurstTypeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-non-burst", 1), ("e-burst", 2), ("e-burst-nonburst", 3), ("e-pipelinedburst", 4), ("e-nonburst-pipelinedburst", 5), ("e-burst-pipelinedburst", 6), ("e-burst-nonburst-pipelinedburst", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBurstTypeSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniBurstTypeSupport.setDescription('')
sniSynchronSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-synchron", 1), ("e-asynchron", 2), ("e-synchron-asynchron", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSynchronSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniSynchronSupport.setDescription('')
sniSRAMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSRAMSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniSRAMSupport.setDescription('')
sniWriteThrough = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWriteThrough.setStatus('mandatory')
if mibBuilder.loadTexts: sniWriteThrough.setDescription('')
sniWriteBack = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWriteBack.setStatus('mandatory')
if mibBuilder.loadTexts: sniWriteBack.setDescription('')
sniDataCache = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDataCache.setStatus('mandatory')
if mibBuilder.loadTexts: sniDataCache.setDescription('')
sniInstructionCache = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInstructionCache.setStatus('mandatory')
if mibBuilder.loadTexts: sniInstructionCache.setDescription('')
sniInternal = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInternal.setStatus('mandatory')
if mibBuilder.loadTexts: sniInternal.setDescription('')
sniInSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInSocket.setStatus('mandatory')
if mibBuilder.loadTexts: sniInSocket.setDescription('')
sniMainboardPorts = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23), )
if mibBuilder.loadTexts: sniMainboardPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardPorts.setDescription('')
sniMainboardPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPortIndex"))
if mibBuilder.loadTexts: sniMainboardPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardPortsEntry.setDescription('An entry of the table')
sniPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPortIndex.setDescription('')
sniPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortName.setStatus('mandatory')
if mibBuilder.loadTexts: sniPortName.setDescription('')
sniPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 2147483647))).clone(namedValues=NamedValues(("e-unknown", 255), ("e-no-interface", 0), ("e-proprietary", 1), ("e-centronics", 2), ("e-mini-centronics", 3), ("e-db25-male", 4), ("e-db25-female", 5), ("e-db15-male", 6), ("e-db15-female", 7), ("e-db9-male", 8), ("e-db9-female", 9), ("e-rj11", 10), ("e-rj45", 11), ("e-mini-scsi", 12), ("e-mini-din", 13), ("e-micro-din", 14), ("e-ps2", 15), ("e-infra-red", 16), ("e-hp-hil", 17), ("e-access-bus", 18), ("e-ssa-scsi", 19), ("e-circ-din8-male", 20), ("e-circ-din8-female", 21), ("e-ide", 22), ("e-fd", 23), ("e-dil9", 24), ("e-dil25", 25), ("e-dil50", 26), ("e-dil68", 27), ("e-cd-rom-sound", 28), ("e-centronics14", 29), ("e-centronics26", 30), ("e-pc98", 31), ("e-pc98-hireso", 32), ("e-pch98", 33), ("e-pc98note", 34), ("e-pc98full", 35), ("e-usb", 36), ("e-mini-jack", 37), ("e-firewire", 38), ("e-other", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortType.setStatus('mandatory')
if mibBuilder.loadTexts: sniPortType.setDescription('')
sniIOBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIOBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniIOBaseAddress.setDescription('')
sniPortIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: sniPortIRQ.setDescription('')
sniPortDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPortDMA.setStatus('mandatory')
if mibBuilder.loadTexts: sniPortDMA.setDescription('')
sniMainboardSystemSlots = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25), )
if mibBuilder.loadTexts: sniMainboardSystemSlots.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardSystemSlots.setDescription('')
sniMainboardSystemSlotsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSystemSlotIndex"))
if mibBuilder.loadTexts: sniMainboardSystemSlotsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardSystemSlotsEntry.setDescription('An entry of the table')
sniSystemSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniSystemSlotIndex.setDescription('')
sniSystemSlotName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSlotName.setStatus('mandatory')
if mibBuilder.loadTexts: sniSystemSlotName.setDescription('')
sniSystemSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-isa", 3), ("e-mca", 4), ("e-eisa", 5), ("e-pci", 6), ("e-pcmcia", 7), ("e-vlb", 8), ("e-proprietary", 9), ("e-processor-card", 10), ("e-memory-card", 11), ("e-riser-card", 12), ("e-nubus", 13), ("e-pci66", 14), ("e-pc98c20", 15), ("e-pc98c24", 16), ("e-pc98e", 17), ("e-pc98-localbus", 18), ("e-pc98-card", 19), ("e-agp", 20), ("e-agp2x", 21), ("e-agp4x", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSlotType.setStatus('mandatory')
if mibBuilder.loadTexts: sniSystemSlotType.setDescription('')
sniNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumber.setDescription('')
sniInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInUse.setStatus('mandatory')
if mibBuilder.loadTexts: sniInUse.setDescription('')
sniBusWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-8", 3), ("e-16", 4), ("e-32", 5), ("e-64", 6), ("e-128", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBusWidth.setStatus('mandatory')
if mibBuilder.loadTexts: sniBusWidth.setDescription('')
sniSlotLength = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-full", 3), ("e-half", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSlotLength.setStatus('mandatory')
if mibBuilder.loadTexts: sniSlotLength.setDescription('')
sniSharedSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 25, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSharedSlot.setStatus('mandatory')
if mibBuilder.loadTexts: sniSharedSlot.setDescription('')
sniMainboardOnboardDevices = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27), )
if mibBuilder.loadTexts: sniMainboardOnboardDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardOnboardDevices.setDescription('')
sniMainboardOnboardDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniOnboardDeviceIndex"))
if mibBuilder.loadTexts: sniMainboardOnboardDevicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardOnboardDevicesEntry.setDescription('An entry of the table')
sniOnboardDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniOnboardDeviceIndex.setDescription('')
sniOnboardDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: sniOnboardDeviceName.setDescription('')
sniOnboardDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-graphic-card", 3), ("e-scsi", 4), ("e-ethernet-card", 5), ("e-tokenring-card", 6), ("e-sound-card", 7), ("e-mouse", 8), ("e-hd-accelerator", 9), ("e-sni-chip", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: sniOnboardDeviceType.setDescription('')
sniOnboardDeviceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOnboardDeviceActive.setStatus('mandatory')
if mibBuilder.loadTexts: sniOnboardDeviceActive.setDescription('')
sniMainboardMemory = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29), )
if mibBuilder.loadTexts: sniMainboardMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardMemory.setDescription('')
sniMainboardMemoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniMemoryControllerIndex"))
if mibBuilder.loadTexts: sniMainboardMemoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardMemoryEntry.setDescription('An entry of the table')
sniMemoryControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryControllerIndex.setDescription('')
sniNumberOfMemoryModules = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfMemoryModules.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberOfMemoryModules.setDescription('')
sniMaxNumberofModules = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaxNumberofModules.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaxNumberofModules.setDescription('')
sniMaximumModuleSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumModuleSizeMB.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaximumModuleSizeMB.setDescription('')
sniSupportedSpeeds = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4, 8, 16))).clone(namedValues=NamedValues(("e-other", 0), ("e-unknown", 2), ("e-70-ns", 4), ("e-60-ns", 8), ("e-50-ns", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSupportedSpeeds.setStatus('mandatory')
if mibBuilder.loadTexts: sniSupportedSpeeds.setDescription('')
sniErrorCorrectionECC = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 8))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-no", 3), ("e-single-bit", 4), ("e-double-bit", 5), ("e-scrubbing", 6), ("e-other", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorCorrectionECC.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorCorrectionECC.setDescription('')
sniStandardSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStandardSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniStandardSupport.setDescription('')
sniFastPageModeSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFastPageModeSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniFastPageModeSupport.setDescription('')
sniEDOSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 16))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEDOSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniEDOSupport.setDescription('')
sniParitySupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 32))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniParitySupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniParitySupport.setDescription('')
sniECCSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 64))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniECCSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniECCSupport.setDescription('')
sniSIMMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSIMMSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniSIMMSupport.setDescription('')
sniDIMMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 256))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDIMMSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniDIMMSupport.setDescription('')
sniRIMMSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 512))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRIMMSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniRIMMSupport.setDescription('')
sniMaximumNumberOfLowLevelDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumNumberOfLowLevelDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaximumNumberOfLowLevelDevices.setDescription('')
sniTotalNumberOfLowLevelDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 29, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTotalNumberOfLowLevelDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniTotalNumberOfLowLevelDevices.setDescription('')
sniMainboardMemoryModules = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31), )
if mibBuilder.loadTexts: sniMainboardMemoryModules.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardMemoryModules.setDescription('')
sniMainboardMemoryModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniMemoryController"), (0, "DESKSNMP-MIB", "sniMemoryModule"))
if mibBuilder.loadTexts: sniMainboardMemoryModulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardMemoryModulesEntry.setDescription('An entry of the table')
sniMemoryController = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryController.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryController.setDescription('')
sniMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModule.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryModule.setDescription('')
sniMemoryModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryModuleName.setDescription('')
sniModuleSizeMB = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleSizeMB.setStatus('mandatory')
if mibBuilder.loadTexts: sniModuleSizeMB.setDescription('')
sniSpeedns = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSpeedns.setStatus('mandatory')
if mibBuilder.loadTexts: sniSpeedns.setDescription('')
sniStandardMemoryModule = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 4))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniStandardMemoryModule.setStatus('mandatory')
if mibBuilder.loadTexts: sniStandardMemoryModule.setDescription('')
sniEDO = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 16))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEDO.setStatus('mandatory')
if mibBuilder.loadTexts: sniEDO.setDescription('')
sniSIMM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 128))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 128)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSIMM.setStatus('mandatory')
if mibBuilder.loadTexts: sniSIMM.setDescription('')
sniDIMM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 256))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 256)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDIMM.setStatus('mandatory')
if mibBuilder.loadTexts: sniDIMM.setDescription('')
sniFastPageMode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 8))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFastPageMode.setStatus('mandatory')
if mibBuilder.loadTexts: sniFastPageMode.setDescription('')
sniParity = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 32))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniParity.setStatus('mandatory')
if mibBuilder.loadTexts: sniParity.setDescription('')
sniECC = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 64))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 64)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniECC.setStatus('mandatory')
if mibBuilder.loadTexts: sniECC.setDescription('')
sniMemoryBank = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryBank.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryBank.setDescription('')
sniAttachedMemoryBank = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAttachedMemoryBank.setStatus('mandatory')
if mibBuilder.loadTexts: sniAttachedMemoryBank.setDescription('')
sniRIMM = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 31, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 512))).clone(namedValues=NamedValues(("e-no", 0), ("e-unknown", 2), ("e-yes", 512)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRIMM.setStatus('mandatory')
if mibBuilder.loadTexts: sniRIMM.setDescription('')
sniStateOfSupplySystemData = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33))
sniSystemName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: sniSystemName.setDescription('')
sniIdentNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIdentNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniIdentNumber.setDescription('')
sniSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSystemSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniSystemSerialNumber.setDescription('')
sniProductionMonth = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 33, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductionMonth.setStatus('mandatory')
if mibBuilder.loadTexts: sniProductionMonth.setDescription('')
sniStateOfSupplyMainboard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34))
sniProductName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProductName.setStatus('mandatory')
if mibBuilder.loadTexts: sniProductName.setDescription('')
sniGSNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniGSNumber.setDescription('')
sniMainboardSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMainboardSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardSerialNumber.setDescription('')
sniBIOSVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 34, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBIOSVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniBIOSVersion.setDescription('')
sniStateOfSupplyInternalDevices = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35), )
if mibBuilder.loadTexts: sniStateOfSupplyInternalDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplyInternalDevices.setDescription('')
sniStateOfSupplyInternalDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniDeviceIndex"))
if mibBuilder.loadTexts: sniStateOfSupplyInternalDevicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplyInternalDevicesEntry.setDescription('An entry of the table')
sniDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceIndex.setDescription('')
sniDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceName.setDescription('')
sniDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-power-supply", 3), ("e-harddisk", 4), ("e-floppydisk", 5), ("e-cd-rom", 6), ("e-magneto-optical-disk", 7), ("e-streamer", 8), ("e-floptical-disk", 9), ("e-chipcard-reader", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceType.setDescription('')
sniDeviceSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceSerialnumber.setDescription('')
sniNumberofDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberofDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberofDevices.setDescription('')
sniStateOfSupplyAddOnModules = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37), )
if mibBuilder.loadTexts: sniStateOfSupplyAddOnModules.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplyAddOnModules.setDescription('')
sniStateOfSupplyAddOnModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniModuleIndex"))
if mibBuilder.loadTexts: sniStateOfSupplyAddOnModulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplyAddOnModulesEntry.setDescription('An entry of the table')
sniModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniModuleIndex.setDescription('')
sniModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: sniModuleName.setDescription('')
sniModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-cache", 3), ("e-dram", 4), ("e-video-memory", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: sniModuleType.setDescription('')
sniModuleSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModuleSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniModuleSerialnumber.setDescription('')
sniNumberofModules = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberofModules.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberofModules.setDescription('')
sniStateOfSupplyAddOnBoards = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39), )
if mibBuilder.loadTexts: sniStateOfSupplyAddOnBoards.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplyAddOnBoards.setDescription('')
sniStateOfSupplyAddOnBoardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniBoardIndex"))
if mibBuilder.loadTexts: sniStateOfSupplyAddOnBoardsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplyAddOnBoardsEntry.setDescription('An entry of the table')
sniBoardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniBoardIndex.setDescription('')
sniBoardName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardName.setStatus('mandatory')
if mibBuilder.loadTexts: sniBoardName.setDescription('')
sniBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-video", 3), ("e-net", 4), ("e-scsi", 5), ("e-audio", 6), ("e-fax", 7), ("e-modem", 8), ("e-tv", 9), ("e-mpeg", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: sniBoardType.setDescription('')
sniBoardSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniBoardSerialnumber.setDescription('')
sniNumberofBoards = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberofBoards.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberofBoards.setDescription('')
sniVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: sniVendorID.setDescription('')
sniBoardIRQ = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: sniBoardIRQ.setDescription('')
sniBoardDMA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBoardDMA.setStatus('mandatory')
if mibBuilder.loadTexts: sniBoardDMA.setDescription('')
sniIOAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIOAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniIOAddress.setDescription('')
sniMemoryMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 39, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryMapping.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryMapping.setDescription('')
sniStateOfSupplySCSIDevices = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41), )
if mibBuilder.loadTexts: sniStateOfSupplySCSIDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplySCSIDevices.setDescription('')
sniStateOfSupplySCSIDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSCSIDeviceIndex"))
if mibBuilder.loadTexts: sniStateOfSupplySCSIDevicesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniStateOfSupplySCSIDevicesEntry.setDescription('An entry of the table')
sniSCSIDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniSCSIDeviceIndex.setDescription('')
sniSCSIDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: sniSCSIDeviceName.setDescription('')
sniSCSIDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-tape", 3), ("e-printer", 4), ("e-processor", 5), ("e-worm", 6), ("e-cdrom", 7), ("e-scanner", 8), ("e-optical-disk", 9), ("e-jukebox", 10), ("e-communication", 11), ("e-ascit8-defined", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: sniSCSIDeviceType.setDescription('')
sniTargetID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniTargetID.setStatus('mandatory')
if mibBuilder.loadTexts: sniTargetID.setDescription('')
sniHostAdapterID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniHostAdapterID.setStatus('mandatory')
if mibBuilder.loadTexts: sniHostAdapterID.setDescription('')
sniCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: sniCapacity.setDescription('')
sniSCSIDeviceSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSCSIDeviceSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniSCSIDeviceSerialnumber.setDescription('')
sniInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInfo.setStatus('mandatory')
if mibBuilder.loadTexts: sniInfo.setDescription('')
sniNumberOfSCSIDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 41, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfSCSIDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberOfSCSIDevices.setDescription('')
sniAntiVirus = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43), )
if mibBuilder.loadTexts: sniAntiVirus.setStatus('mandatory')
if mibBuilder.loadTexts: sniAntiVirus.setDescription('')
sniAntiVirusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniAntiVirusProgramIndex"))
if mibBuilder.loadTexts: sniAntiVirusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniAntiVirusEntry.setDescription('An entry of the table')
sniAntiVirusProgramIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAntiVirusProgramIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniAntiVirusProgramIndex.setDescription('')
sniAntiVirusLogfile = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAntiVirusLogfile.setStatus('mandatory')
if mibBuilder.loadTexts: sniAntiVirusLogfile.setDescription('')
sniScannerName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniScannerName.setStatus('mandatory')
if mibBuilder.loadTexts: sniScannerName.setDescription('')
sniErrorKeyword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword1.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword1.setDescription('')
sniErrorKeyword2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword2.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword2.setDescription('')
sniErrorKeyword3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword3.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword3.setDescription('')
sniErrorKeyword4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword4.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword4.setDescription('')
sniErrorKeyword5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword5.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword5.setDescription('')
sniErrorKeyword6 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword6.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword6.setDescription('')
sniErrorKeyword7 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword7.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword7.setDescription('')
sniErrorKeyword8 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword8.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword8.setDescription('')
sniErrorKeyword9 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword9.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword9.setDescription('')
sniErrorKeyword10 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniErrorKeyword10.setStatus('mandatory')
if mibBuilder.loadTexts: sniErrorKeyword10.setDescription('')
sniWarningKeyword1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword1.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword1.setDescription('')
sniWarningKeyword2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword2.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword2.setDescription('')
sniWarningKeyword3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword3.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword3.setDescription('')
sniWarningKeyword4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword4.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword4.setDescription('')
sniWarningKeyword5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword5.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword5.setDescription('')
sniWarningKeyword6 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword6.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword6.setDescription('')
sniWarningKeyword7 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword7.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword7.setDescription('')
sniWarningKeyword8 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword8.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword8.setDescription('')
sniWarningKeyword9 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword9.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword9.setDescription('')
sniWarningKeyword10 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWarningKeyword10.setStatus('mandatory')
if mibBuilder.loadTexts: sniWarningKeyword10.setDescription('')
sniDistinguishWarningError = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 43, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDistinguishWarningError.setStatus('mandatory')
if mibBuilder.loadTexts: sniDistinguishWarningError.setDescription('')
sniMouse = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45))
sniMouseManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sniMouseManufacturer.setDescription('')
sniMouseDriverName = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseDriverName.setStatus('mandatory')
if mibBuilder.loadTexts: sniMouseDriverName.setDescription('')
sniDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriverVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniDriverVersion.setDescription('')
sniMouseInterface = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-serial", 3), ("e-ps-2", 4), ("e-infra-red", 5), ("e-bus", 6), ("e-usb", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseInterface.setStatus('mandatory')
if mibBuilder.loadTexts: sniMouseInterface.setDescription('')
sniMouseIRQ = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMouseIRQ.setStatus('mandatory')
if mibBuilder.loadTexts: sniMouseIRQ.setDescription('')
sniMousePort = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMousePort.setStatus('mandatory')
if mibBuilder.loadTexts: sniMousePort.setDescription('')
sniSupportedButtons = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSupportedButtons.setStatus('mandatory')
if mibBuilder.loadTexts: sniSupportedButtons.setDescription('')
sniButtonsExchanged = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniButtonsExchanged.setStatus('mandatory')
if mibBuilder.loadTexts: sniButtonsExchanged.setDescription('')
sniSpeedPercentage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSpeedPercentage.setStatus('mandatory')
if mibBuilder.loadTexts: sniSpeedPercentage.setDescription('')
sniShowMouseTrails = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 45, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniShowMouseTrails.setStatus('mandatory')
if mibBuilder.loadTexts: sniShowMouseTrails.setDescription('')
sniKeyboard = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46))
sniKeyboardType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniKeyboardType.setStatus('mandatory')
if mibBuilder.loadTexts: sniKeyboardType.setDescription('')
sniLayout = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLayout.setStatus('mandatory')
if mibBuilder.loadTexts: sniLayout.setDescription('')
sniInterfaceType = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-mini-din", 3), ("e-micro-din", 4), ("e-ps-2", 5), ("e-infra-red", 6), ("e-hp-hil", 7), ("e-db-9", 8), ("e-access-bus", 9), ("e-usb", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: sniInterfaceType.setDescription('')
sniCodepage = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCodepage.setStatus('mandatory')
if mibBuilder.loadTexts: sniCodepage.setDescription('')
sniWindowsDriver = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniWindowsDriver.setStatus('mandatory')
if mibBuilder.loadTexts: sniWindowsDriver.setDescription('')
sniDOSDriver = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 46, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDOSDriver.setStatus('mandatory')
if mibBuilder.loadTexts: sniDOSDriver.setDescription('')
sniDeskViewVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47))
sniSysInf32Version = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSysInf32Version.setStatus('mandatory')
if mibBuilder.loadTexts: sniSysInf32Version.setDescription('')
sniSysInf16Version = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSysInf16Version.setStatus('mandatory')
if mibBuilder.loadTexts: sniSysInf16Version.setDescription('')
sniDeskInfoAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeskInfoAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeskInfoAgentVersion.setDescription('')
sniDINetVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDINetVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniDINetVersion.setDescription('')
sniDNAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNAgentVersion.setDescription('')
sniDNBrowserVersion = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 47, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNBrowserVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNBrowserVersion.setDescription('')
sniSMARTValues = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48), )
if mibBuilder.loadTexts: sniSMARTValues.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTValues.setDescription('')
sniSMARTValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniSMARTIndex"))
if mibBuilder.loadTexts: sniSMARTValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTValuesEntry.setDescription('An entry of the table')
sniSMARTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTIndex.setDescription('')
sniPhysicalDriveCrossreference = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhysicalDriveCrossreference.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhysicalDriveCrossreference.setDescription('')
sniSMARTID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTID.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTID.setDescription('')
sniSMARTName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTName.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTName.setDescription('')
sniSMARTErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTErrorThreshold.setDescription('')
sniSMARTWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTWarningThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTWarningThreshold.setDescription('')
sniCurrentSMARTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCurrentSMARTValue.setStatus('mandatory')
if mibBuilder.loadTexts: sniCurrentSMARTValue.setDescription('')
sniSMARTState = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 48, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-ok", 3), ("e-warning", 4), ("e-critical", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSMARTState.setStatus('mandatory')
if mibBuilder.loadTexts: sniSMARTState.setDescription('')
sniHardwarePowersupply = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50), )
if mibBuilder.loadTexts: sniHardwarePowersupply.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePowersupply.setDescription('')
sniHardwarePowersupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPowersupplyIndex"))
if mibBuilder.loadTexts: sniHardwarePowersupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePowersupplyEntry.setDescription('An entry of the table')
sniPowersupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplyIndex.setDescription('')
sniPowersupplySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplySerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplySerialNumber.setDescription('')
sniPowersupplyGSLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyGSLevel.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplyGSLevel.setDescription('')
sniPowersupplyRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyRevision.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplyRevision.setDescription('')
sniPowersupplyManufacturingDate = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyManufacturingDate.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplyManufacturingDate.setDescription('')
sniOutputPowerW = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOutputPowerW.setStatus('mandatory')
if mibBuilder.loadTexts: sniOutputPowerW.setDescription('')
sniMonitorOutletSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMonitorOutletSupported.setStatus('mandatory')
if mibBuilder.loadTexts: sniMonitorOutletSupported.setDescription('')
sniMonitorOutlet = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-off", 3), ("e-on", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMonitorOutlet.setStatus('mandatory')
if mibBuilder.loadTexts: sniMonitorOutlet.setDescription('')
sniVoltage5V = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVoltage5V.setStatus('mandatory')
if mibBuilder.loadTexts: sniVoltage5V.setDescription('')
sniVoltage12V = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVoltage12V.setStatus('mandatory')
if mibBuilder.loadTexts: sniVoltage12V.setDescription('')
sniMin5VCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMin5VCurrentA.setStatus('mandatory')
if mibBuilder.loadTexts: sniMin5VCurrentA.setDescription('')
sniOutputCurrentmA = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniOutputCurrentmA.setStatus('mandatory')
if mibBuilder.loadTexts: sniOutputCurrentmA.setDescription('')
sniPulsPerRevolution = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPulsPerRevolution.setStatus('mandatory')
if mibBuilder.loadTexts: sniPulsPerRevolution.setDescription('')
sniPowersFanControlSupp = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersFanControlSupp.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersFanControlSupp.setDescription('')
sniPowersupplyFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-controlled", 3), ("e-full-speed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyFanSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplyFanSpeed.setDescription('')
sniPowersupplyFanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 50, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-not-controlled", 3), ("e-on-off", 4), ("e-full-controlled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPowersupplyFanControl.setStatus('mandatory')
if mibBuilder.loadTexts: sniPowersupplyFanControl.setDescription('')
sniHardwareDriveBays = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52), )
if mibBuilder.loadTexts: sniHardwareDriveBays.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwareDriveBays.setDescription('')
sniHardwareDriveBaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniDriveBayIndex"))
if mibBuilder.loadTexts: sniHardwareDriveBaysEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwareDriveBaysEntry.setDescription('An entry of the table')
sniDriveBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriveBayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniDriveBayIndex.setDescription('')
sniDriveBayType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-3-5-inch", 3), ("e-5-25-inch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDriveBayType.setStatus('mandatory')
if mibBuilder.loadTexts: sniDriveBayType.setDescription('')
sniNumberOfDriveBays = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfDriveBays.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberOfDriveBays.setDescription('')
sniAccessible = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 52, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAccessible.setStatus('mandatory')
if mibBuilder.loadTexts: sniAccessible.setDescription('')
sniMainboardResourceUsage = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54), )
if mibBuilder.loadTexts: sniMainboardResourceUsage.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardResourceUsage.setDescription('')
sniMainboardResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniResourceUsageIndex"))
if mibBuilder.loadTexts: sniMainboardResourceUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardResourceUsageEntry.setDescription('An entry of the table')
sniResourceUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniResourceUsageIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniResourceUsageIndex.setDescription('')
sniBusType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-other", 1), ("e-pci", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBusType.setStatus('mandatory')
if mibBuilder.loadTexts: sniBusType.setDescription('')
sniBusLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 54, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBusLoad.setStatus('mandatory')
if mibBuilder.loadTexts: sniBusLoad.setDescription('')
sniHardwarePCIBaseAddress = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56), )
if mibBuilder.loadTexts: sniHardwarePCIBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePCIBaseAddress.setDescription('')
sniHardwarePCIBaseAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPCIBaseAddressIndex"))
if mibBuilder.loadTexts: sniHardwarePCIBaseAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePCIBaseAddressEntry.setDescription('An entry of the table')
sniPCIBaseAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIBaseAddressIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIBaseAddressIndex.setDescription('')
sniPCIIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIIndex1.setDescription('')
sniMemoryIOSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-memory-space", 3), ("e-io-space", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryIOSpace.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryIOSpace.setDescription('')
sniPrefetchable = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPrefetchable.setStatus('mandatory')
if mibBuilder.loadTexts: sniPrefetchable.setDescription('')
sniPCIMemoryMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-in-32bit-space", 3), ("e-below-1-mbyte", 4), ("e-in-64bit-space", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIMemoryMapping.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIMemoryMapping.setDescription('')
sniBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 56, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniBaseAddress.setDescription('')
sniHardwarePCICharacteristics = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58), )
if mibBuilder.loadTexts: sniHardwarePCICharacteristics.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePCICharacteristics.setDescription('')
sniHardwarePCICharacteristicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPCICharacteristicsIndex"))
if mibBuilder.loadTexts: sniHardwarePCICharacteristicsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePCICharacteristicsEntry.setDescription('An entry of the table')
sniPCICharacteristicsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCICharacteristicsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCICharacteristicsIndex.setDescription('')
sniPCIIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIIndex2.setDescription('')
sniCharacteristicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCharacteristicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniCharacteristicNumber.setDescription('')
sniCharacteristicInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCharacteristicInfo.setStatus('mandatory')
if mibBuilder.loadTexts: sniCharacteristicInfo.setDescription('')
sniModeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniModeNumber.setDescription('')
sniModeInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 58, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniModeInfo.setStatus('mandatory')
if mibBuilder.loadTexts: sniModeInfo.setDescription('')
sniHardwarePCIInfo = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60), )
if mibBuilder.loadTexts: sniHardwarePCIInfo.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePCIInfo.setDescription('')
sniHardwarePCIInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniPCIInfoIndex"))
if mibBuilder.loadTexts: sniHardwarePCIInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniHardwarePCIInfoEntry.setDescription('An entry of the table')
sniPCIInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIInfoIndex.setDescription('')
sniPCIIndex3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIIndex3.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIIndex3.setDescription('')
sniDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceID.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceID.setDescription('')
sniPCIDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIDeviceType.setDescription('')
sniPCIDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIDeviceName.setDescription('')
sniRevisionID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniRevisionID.setStatus('mandatory')
if mibBuilder.loadTexts: sniRevisionID.setDescription('')
sniPCIBusNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIBusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIBusNumber.setDescription('')
sniPCISlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCISlotNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCISlotNumber.setDescription('')
sniPCIVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPCIVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: sniPCIVendorID.setDescription('')
sniVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniVendorName.setStatus('mandatory')
if mibBuilder.loadTexts: sniVendorName.setDescription('')
sniBaseClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseClassID.setStatus('mandatory')
if mibBuilder.loadTexts: sniBaseClassID.setDescription('')
sniSubClassID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubClassID.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubClassID.setDescription('')
sniProgrammingInterfaceID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniProgrammingInterfaceID.setStatus('mandatory')
if mibBuilder.loadTexts: sniProgrammingInterfaceID.setDescription('')
sniBaseClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBaseClassDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sniBaseClassDescription.setDescription('')
sniSubClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubClassDescription.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubClassDescription.setDescription('')
sniSingleMultiFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-single", 3), ("e-multi", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSingleMultiFunction.setStatus('mandatory')
if mibBuilder.loadTexts: sniSingleMultiFunction.setDescription('')
sniDeviceCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceCommand.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceCommand.setDescription('')
sniDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sniDeviceStatus.setDescription('')
sniCacheLineSize = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCacheLineSize.setStatus('mandatory')
if mibBuilder.loadTexts: sniCacheLineSize.setDescription('')
sniLatencyTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLatencyTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sniLatencyTimer.setDescription('')
sniCompletionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCompletionCode.setStatus('mandatory')
if mibBuilder.loadTexts: sniCompletionCode.setDescription('')
sniBuildinSelfTestSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniBuildinSelfTestSupport.setStatus('mandatory')
if mibBuilder.loadTexts: sniBuildinSelfTestSupport.setDescription('')
sniInterruptLine = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterruptLine.setStatus('mandatory')
if mibBuilder.loadTexts: sniInterruptLine.setDescription('')
sniInterruptPin = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("e-unknown", 0), ("e-none", 3), ("e-inta", 4), ("e-intb", 5), ("e-intc", 6), ("e-intd", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniInterruptPin.setStatus('mandatory')
if mibBuilder.loadTexts: sniInterruptPin.setDescription('')
sniMinimumGrant = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMinimumGrant.setStatus('mandatory')
if mibBuilder.loadTexts: sniMinimumGrant.setDescription('')
sniMaximumLatencyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMaximumLatencyTime.setStatus('mandatory')
if mibBuilder.loadTexts: sniMaximumLatencyTime.setDescription('')
sniSubVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubVendorID.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubVendorID.setDescription('')
sniSubSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubSystemID.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubSystemID.setDescription('')
sniCIS = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniCIS.setStatus('mandatory')
if mibBuilder.loadTexts: sniCIS.setDescription('Reserved')
sniExpROMBaseAddressReg = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniExpROMBaseAddressReg.setStatus('mandatory')
if mibBuilder.loadTexts: sniExpROMBaseAddressReg.setDescription('')
sniExpansionROMBaseAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniExpansionROMBaseAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniExpansionROMBaseAddress.setDescription('')
sniDecodeenabled = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("e-no", 0), ("e-yes", 1), ("e-unknown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDecodeenabled.setStatus('mandatory')
if mibBuilder.loadTexts: sniDecodeenabled.setDescription('')
sniFunctionnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniFunctionnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniFunctionnumber.setDescription('')
sniDevicenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 60, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDevicenumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniDevicenumber.setDescription('')
sniMainboardMemoryModulesEx = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62), )
if mibBuilder.loadTexts: sniMainboardMemoryModulesEx.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardMemoryModulesEx.setDescription('')
sniMainboardMemoryModulesExEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniMemoryController2"), (0, "DESKSNMP-MIB", "sniMemoryModule2"))
if mibBuilder.loadTexts: sniMainboardMemoryModulesExEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniMainboardMemoryModulesExEntry.setDescription('An entry of the table')
sniMemoryController2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryController2.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryController2.setDescription('')
sniMemoryModule2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModule2.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryModule2.setDescription('')
sniMemoryModuleSerialnumber = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModuleSerialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryModuleSerialnumber.setDescription('')
sniMemoryModuleManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryModuleManufacturer.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryModuleManufacturer.setDescription('')
sniLocationMemoryBank = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniLocationMemoryBank.setStatus('mandatory')
if mibBuilder.loadTexts: sniLocationMemoryBank.setDescription('')
sniNumberOfLowLevelDevices = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNumberOfLowLevelDevices.setStatus('mandatory')
if mibBuilder.loadTexts: sniNumberOfLowLevelDevices.setDescription('')
sniSpeedMHz = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSpeedMHz.setStatus('mandatory')
if mibBuilder.loadTexts: sniSpeedMHz.setDescription('')
sniMemoryTypeEx = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("e-other", 1), ("e-unknown", 2), ("e-dram", 3), ("e-edram", 4), ("e-vram", 5), ("e-sram", 6), ("e-ram", 7), ("e-rom", 8), ("e-flash", 9), ("e-eeprom", 10), ("e-feprom", 11), ("e-eprom", 12), ("e-cdram", 13), ("e-3dram", 14), ("e-sdram", 15), ("e-sgram", 16), ("e-rdram", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemoryTypeEx.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemoryTypeEx.setDescription('')
sniMemorymoduleFormfactorandType = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 62, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMemorymoduleFormfactorandType.setStatus('mandatory')
if mibBuilder.loadTexts: sniMemorymoduleFormfactorandType.setDescription('')
sniUSER = MibIdentifier((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64))
sniUsername = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniUsername.setStatus('mandatory')
if mibBuilder.loadTexts: sniUsername.setDescription('')
sniPhonenumber = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPhonenumber.setStatus('mandatory')
if mibBuilder.loadTexts: sniPhonenumber.setDescription('')
sniPlace = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniPlace.setStatus('mandatory')
if mibBuilder.loadTexts: sniPlace.setDescription('')
sniDepartment = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDepartment.setStatus('mandatory')
if mibBuilder.loadTexts: sniDepartment.setDescription('')
sniJobTitle = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniJobTitle.setStatus('mandatory')
if mibBuilder.loadTexts: sniJobTitle.setDescription('')
sniContact = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniContact.setStatus('mandatory')
if mibBuilder.loadTexts: sniContact.setDescription('')
sniAdditionalUserInformation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdditionalUserInformation.setStatus('mandatory')
if mibBuilder.loadTexts: sniAdditionalUserInformation.setDescription('')
sniServicePartner = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniServicePartner.setStatus('mandatory')
if mibBuilder.loadTexts: sniServicePartner.setDescription('')
sniServiceContact = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniServiceContact.setStatus('mandatory')
if mibBuilder.loadTexts: sniServiceContact.setDescription('')
sniEndOfContract = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniEndOfContract.setStatus('mandatory')
if mibBuilder.loadTexts: sniEndOfContract.setDescription('')
sniAdditionalServiceInformation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniAdditionalServiceInformation.setStatus('mandatory')
if mibBuilder.loadTexts: sniAdditionalServiceInformation.setDescription('')
sniGeneralInformation = MibScalar((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 64, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGeneralInformation.setStatus('mandatory')
if mibBuilder.loadTexts: sniGeneralInformation.setDescription('')
sniNetwork = MibTable((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65), )
if mibBuilder.loadTexts: sniNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: sniNetwork.setDescription('')
sniNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1), ).setIndexNames((0, "DESKSNMP-MIB", "sniNetworkAdapterIndex"))
if mibBuilder.loadTexts: sniNetworkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sniNetworkEntry.setDescription('An entry of the table')
sniNetworkAdapterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNetworkAdapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sniNetworkAdapterIndex.setDescription('')
sniNetworkAdapter = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniNetworkAdapter.setStatus('mandatory')
if mibBuilder.loadTexts: sniNetworkAdapter.setDescription('')
sniMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sniMACAddress.setDescription('')
sniComputerName = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniComputerName.setStatus('mandatory')
if mibBuilder.loadTexts: sniComputerName.setDescription('')
sniDHCPServer = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDHCPServer.setStatus('mandatory')
if mibBuilder.loadTexts: sniDHCPServer.setDescription('')
sniDNSHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSHostname.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSHostname.setDescription('')
sniDNSDomainname = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSDomainname.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSDomainname.setDescription('')
sniDNSServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer1.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSServer1.setDescription('')
sniDNSServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer2.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSServer2.setDescription('')
sniDNSServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer3.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSServer3.setDescription('')
sniDNSServer4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer4.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSServer4.setDescription('')
sniDNSServer5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniDNSServer5.setStatus('mandatory')
if mibBuilder.loadTexts: sniDNSServer5.setDescription('')
sniIPAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: sniIPAddress1.setDescription('')
sniIPAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: sniIPAddress2.setDescription('')
sniIPAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: sniIPAddress3.setDescription('')
sniIPAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress4.setStatus('mandatory')
if mibBuilder.loadTexts: sniIPAddress4.setDescription('')
sniIPAddress5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniIPAddress5.setStatus('mandatory')
if mibBuilder.loadTexts: sniIPAddress5.setDescription('')
sniSubnetMask1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask1.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubnetMask1.setDescription('')
sniSubnetMask2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask2.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubnetMask2.setDescription('')
sniSubnetMask3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask3.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubnetMask3.setDescription('')
sniSubnetMask4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask4.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubnetMask4.setDescription('')
sniSubnetMask5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniSubnetMask5.setStatus('mandatory')
if mibBuilder.loadTexts: sniSubnetMask5.setDescription('')
sniGateway1 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway1.setStatus('mandatory')
if mibBuilder.loadTexts: sniGateway1.setDescription('')
sniGateway2 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway2.setStatus('mandatory')
if mibBuilder.loadTexts: sniGateway2.setDescription('')
sniGateway3 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway3.setStatus('mandatory')
if mibBuilder.loadTexts: sniGateway3.setDescription('')
sniGateway4 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway4.setStatus('mandatory')
if mibBuilder.loadTexts: sniGateway4.setDescription('')
sniGateway5 = MibTableColumn((1, 3, 6, 1, 4, 1, 231, 2, 10, 3, 1, 65, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sniGateway5.setStatus('mandatory')
if mibBuilder.loadTexts: sniGateway5.setDescription('')
mibBuilder.exportSymbols("DESKSNMP-MIB", sniMainboardMemoryModules=sniMainboardMemoryModules, sniNumberOfSCSIDevices=sniNumberOfSCSIDevices, sniXMSDriverVersion=sniXMSDriverVersion, sniGraphicCardDate=sniGraphicCardDate, sniISABus=sniISABus, sniTargetID=sniTargetID, sniPortName=sniPortName, sniBiosShadowing=sniBiosShadowing, sniMainboardVersion=sniMainboardVersion, sniMemoryModuleManufacturer=sniMemoryModuleManufacturer, sniAdditionalServiceInformation=sniAdditionalServiceInformation, sniDNSServer3=sniDNSServer3, sniCacheIndex=sniCacheIndex, sniMemoryController2=sniMemoryController2, sniClusterSizeByte=sniClusterSizeByte, sniBaseClassDescription=sniBaseClassDescription, sniLogicalDrivePartitionName=sniLogicalDrivePartitionName, sniShadowing=sniShadowing, sniSCSIDeviceIndex=sniSCSIDeviceIndex, sniPhysicalDriveType=sniPhysicalDriveType, sniMainboardMemoryModulesExEntry=sniMainboardMemoryModulesExEntry, sniPhysicalDriveName=sniPhysicalDriveName, sniRIMM=sniRIMM, sniGateway4=sniGateway4, sniMaxNumberofModules=sniMaxNumberofModules, sniUsedMemorySlots=sniUsedMemorySlots, sniProgrammingInterfaceID=sniProgrammingInterfaceID, sniProcessorVersion=sniProcessorVersion, sniHardwarePCIBaseAddressEntry=sniHardwarePCIBaseAddressEntry, sniPCIDeviceType=sniPCIDeviceType, sniErrorKeyword5=sniErrorKeyword5, sniOnboardDeviceName=sniOnboardDeviceName, sniMainboardSystemSlotsEntry=sniMainboardSystemSlotsEntry, sniAccessible=sniAccessible, sniIRDABus=sniIRDABus, sniCapacity=sniCapacity, sniMaximumModuleSizeMB=sniMaximumModuleSizeMB, sniSectors=sniSectors, sniDeviceType=sniDeviceType, sniBIOSRomSocketed=sniBIOSRomSocketed, sniMaximumNumberOfLowLevelDevices=sniMaximumNumberOfLowLevelDevices, sniEDO=sniEDO, sniLogicalDrivePartitionEncrypted=sniLogicalDrivePartitionEncrypted, sniKeyboard=sniKeyboard, sniKeyboardType=sniKeyboardType, sniDriverDirectory=sniDriverDirectory, sniSIMM=sniSIMM, sniExpROMBaseAddressReg=sniExpROMBaseAddressReg, sniVLBus=sniVLBus, sniHostAdapterID=sniHostAdapterID, sniServicePartner=sniServicePartner, sniDriveBayType=sniDriveBayType, sniScanMode=sniScanMode, sniSoftwarePowerOff=sniSoftwarePowerOff, sniProductType=sniProductType, sniErrorKeyword2=sniErrorKeyword2, sniMinRefreshrateHz=sniMinRefreshrateHz, sniLogicalDrivePartitionBootable=sniLogicalDrivePartitionBootable, sniBootfromCDROM=sniBootfromCDROM, sniBootfromPCMCIA=sniBootfromPCMCIA, sniVendorName=sniVendorName, sniWriteBack=sniWriteBack, sniBootDeviceSelectable=sniBootDeviceSelectable, sniVoltage5V=sniVoltage5V, sniStateOfSupplyInternalDevices=sniStateOfSupplyInternalDevices, sniAtPreInstallTime=sniAtPreInstallTime, sniMainboardMemoryModulesEntry=sniMainboardMemoryModulesEntry, sniOutputCurrentmA=sniOutputCurrentmA, sniMaximumLatencyTime=sniMaximumLatencyTime, sniLogicalDriveSizekB=sniLogicalDriveSizekB, sniAntiVirus=sniAntiVirus, sniPartitionCompressed=sniPartitionCompressed, sniCompletionCode=sniCompletionCode, sniCacheBurstType=sniCacheBurstType, sniPhysicalMemoryMB=sniPhysicalMemoryMB, sniSystemName=sniSystemName, sniMemoryControllerIndex=sniMemoryControllerIndex, sniUUID=sniUUID, sniDNAgentVersion=sniDNAgentVersion, sniPartitionFilesystem=sniPartitionFilesystem, sniLevel=sniLevel, sniMaxverticalResolution=sniMaxverticalResolution, sniPCIDeviceName=sniPCIDeviceName, sniCacheSynchron=sniCacheSynchron, sniErrorKeyword3=sniErrorKeyword3, sniComputerName=sniComputerName, sniSMARTIndex=sniSMARTIndex, sniPartitionEncrypted=sniPartitionEncrypted, sniSoftwareEntry=sniSoftwareEntry, sniDNSServer5=sniDNSServer5, sniEMMDriverVersion=sniEMMDriverVersion, sniECC=sniECC, sniWarningKeyword7=sniWarningKeyword7, sniMaxRefreshrateHz=sniMaxRefreshrateHz, sniMainboardGSNumber=sniMainboardGSNumber, sniBuildinSelfTestSupport=sniBuildinSelfTestSupport, sniRevisionID=sniRevisionID, sniErrorKeyword6=sniErrorKeyword6, sniChassisColor=sniChassisColor, sniDDC=sniDDC, sniPortDMA=sniPortDMA, sniColorResolution=sniColorResolution, sniExtensions=sniExtensions, sniProductVersion=sniProductVersion, sniSysInf32Version=sniSysInf32Version, sniSMARTValuesEntry=sniSMARTValuesEntry, sniCacheSizekB=sniCacheSizekB, sniMainboardMemoryModulesEx=sniMainboardMemoryModulesEx, sniSMART=sniSMART, sniModuleIndex=sniModuleIndex, sniLogicalDrivesEntry=sniLogicalDrivesEntry, sniPCName=sniPCName, sni2MB88FloppySupport=sni2MB88FloppySupport, sniHardwareDriveBays=sniHardwareDriveBays, sniMemoryController=sniMemoryController, sniAttachedMemoryBank=sniAttachedMemoryBank, sniInt14SerialServices=sniInt14SerialServices, sniMemoryModule2=sniMemoryModule2, sniBiosDate=sniBiosDate, sniAPMSpecificVersion=sniAPMSpecificVersion, sniTotalNumberOfLowLevelDevices=sniTotalNumberOfLowLevelDevices, sniErrorKeyword1=sniErrorKeyword1, snihorResolutionPixel=snihorResolutionPixel, snivertResolutionPixel=snivertResolutionPixel, sniSMARTBatterieSupport=sniSMARTBatterieSupport, sniLayout=sniLayout, sniPartitions=sniPartitions, sniBusType=sniBusType, sniMemoryIOSpace=sniMemoryIOSpace, sniUsername=sniUsername, sniInstallationDirectory=sniInstallationDirectory, sniLogicalDriveFreeSpacekB=sniLogicalDriveFreeSpacekB, sniPCICharacteristicsIndex=sniPCICharacteristicsIndex, sniIPAddress4=sniIPAddress4, sniMemoryBank=sniMemoryBank, sniLogicalDrives=sniLogicalDrives, sniWriteThrough=sniWriteThrough, sniStartaddress=sniStartaddress, sniI2OBootSupport=sniI2OBootSupport, sniModuleType=sniModuleType, sniDNSDomainname=sniDNSDomainname, sniLogicalDrivePartitionLabel=sniLogicalDrivePartitionLabel, sniSMARTWarningThreshold=sniSMARTWarningThreshold, sniMaxBoardSpeedMHz=sniMaxBoardSpeedMHz, sniUpgradable=sniUpgradable, sniPartitionBootable=sniPartitionBootable, sniBoardName=sniBoardName, sniPortIndex=sniPortIndex, sniMediaLoaded=sniMediaLoaded, sniNumberofDevices=sniNumberofDevices, sniDPMSSupport=sniDPMSSupport, sniPulsPerRevolution=sniPulsPerRevolution, sniPC98=sniPC98, sniSpeedPercentage=sniSpeedPercentage, sniPCInformation=sniPCInformation, sniInterruptPin=sniInterruptPin, sniDeviceName=sniDeviceName, sniYearofManufacture=sniYearofManufacture, sniDINetVersion=sniDINetVersion, sniVendorID=sniVendorID, sniWarningKeyword10=sniWarningKeyword10, sniProductMibs=sniProductMibs, sniOSVersionSecondary=sniOSVersionSecondary, sniDNSServer4=sniDNSServer4, sniSectorsPerCluster=sniSectorsPerCluster, sniPhysicalDrivesEntry=sniPhysicalDrivesEntry, sniCacheActive=sniCacheActive, sniSoftwarePowerOn=sniSoftwarePowerOn, sniMousePort=sniMousePort, sniMonitorOutlet=sniMonitorOutlet, sniJobTitle=sniJobTitle, sniSubnetMask2=sniSubnetMask2, sniNetworkAdapter=sniNetworkAdapter, sni1MB2FloppySupport=sni1MB2FloppySupport, sniInfo=sniInfo, sniMainboardVariant=sniMainboardVariant, sniSubClassID=sniSubClassID, sniHousingGeometry=sniHousingGeometry, sniRIMMSupport=sniRIMMSupport, sniMinimumRefreshrate=sniMinimumRefreshrate, sniNumberOfMemoryModules=sniNumberOfMemoryModules, sniAntiVirusLogfile=sniAntiVirusLogfile, sniPCIInfoIndex=sniPCIInfoIndex, sniMCABus=sniMCABus, sniNetworkEntry=sniNetworkEntry, sniStandardMemoryModule=sniStandardMemoryModule, sniTracks=sniTracks, sniDeskInfoAgentVersion=sniDeskInfoAgentVersion, sni=sni, sniMainboard=sniMainboard, sniMainboardProcessors=sniMainboardProcessors, sniScannerName=sniScannerName, sniECCSupport=sniECCSupport, sniHardwarePCIInfo=sniHardwarePCIInfo, sniFreeGDIResourcesPercentage=sniFreeGDIResourcesPercentage, sniPowersupplyManufacturingDate=sniPowersupplyManufacturingDate, sniDriveletter=sniDriveletter, sniCurrentProcSpeedMHz=sniCurrentProcSpeedMHz, sniSlotLength=sniSlotLength, sniIPAddress3=sniIPAddress3, sniMouse=sniMouse, sniCharacteristicInfo=sniCharacteristicInfo, sniLogicalDrivePartitionFilesystem=sniLogicalDrivePartitionFilesystem, sniPCIBusNumber=sniPCIBusNumber, sniGateway2=sniGateway2, sniStateOfSupplyMainboard=sniStateOfSupplyMainboard, sniSoftwareVersion=sniSoftwareVersion, sniDataCache=sniDataCache, sniSCSIDeviceType=sniSCSIDeviceType, sniWarningKeyword9=sniWarningKeyword9, sniPCIVendorID=sniPCIVendorID, sniDNSHostname=sniDNSHostname, sniMaxhorizontalFrequency=sniMaxhorizontalFrequency, sniMainboardCache=sniMainboardCache, sniBoardIndex=sniBoardIndex, sniGraphicType=sniGraphicType, sniFeatures=sniFeatures, sniToshibaFloppySupport=sniToshibaFloppySupport, sniMouseInterface=sniMouseInterface, sniStateOfSupplyAddOnModulesEntry=sniStateOfSupplyAddOnModulesEntry, sniBaseMemorykB=sniBaseMemorykB, sniOSName=sniOSName, sniEMMSizekB=sniEMMSizekB, sniAntiVirusEntry=sniAntiVirusEntry, sniRemoteOn=sniRemoteOn, sniPhysicalDrives=sniPhysicalDrives, sniErrorKeyword4=sniErrorKeyword4, sniPCIMemoryMapping=sniPCIMemoryMapping, sniDMISupport=sniDMISupport, sniStateOfSupplySystemData=sniStateOfSupplySystemData, sniBiosManufacturer=sniBiosManufacturer, sniFreePhysicalMemorykB=sniFreePhysicalMemorykB, sniSMARTValues=sniSMARTValues, sniHardwareName=sniHardwareName, sniHardwarePCIInfoEntry=sniHardwarePCIInfoEntry, sniSystemSlotType=sniSystemSlotType, sniHardwareDriveBaysEntry=sniHardwareDriveBaysEntry, sniMainboardOnboardDevices=sniMainboardOnboardDevices, sniBoardSerialnumber=sniBoardSerialnumber, sniPCIIndex1=sniPCIIndex1, sniInSocket=sniInSocket, sniMonitorOutletSupported=sniMonitorOutletSupported, sniIOBaseAddress=sniIOBaseAddress, sniSMARTState=sniSMARTState, sniErrorKeyword10=sniErrorKeyword10, sniOnboardDeviceIndex=sniOnboardDeviceIndex, sniMaxhorizResolution=sniMaxhorizResolution, sniPhysicalDrivePartitions=sniPhysicalDrivePartitions, sniPCMCIAInterface=sniPCMCIAInterface, sniSystemMonitoring=sniSystemMonitoring, sniSecurity=sniSecurity, sniHeads=sniHeads, sniBIOSVersion=sniBIOSVersion, sniSCSIDeviceSerialnumber=sniSCSIDeviceSerialnumber)
mibBuilder.exportSymbols("DESKSNMP-MIB", sniMemoryTypeEx=sniMemoryTypeEx, sniMainboardOnboardDevicesEntry=sniMainboardOnboardDevicesEntry, sniSCSILUN=sniSCSILUN, sniSMARTCrossreference=sniSMARTCrossreference, sniBadBlocks=sniBadBlocks, sniMin5VCurrentA=sniMin5VCurrentA, sniBurstTypeSupport=sniBurstTypeSupport, sniESCDBus=sniESCDBus, sniPowersupplyGSLevel=sniPowersupplyGSLevel, sniWindowsDriver=sniWindowsDriver, sniInt9Keyboard8042Supp=sniInt9Keyboard8042Supp, sniWarningKeyword8=sniWarningKeyword8, sniPhysicalDriveTotalSpacekB=sniPhysicalDriveTotalSpacekB, sniPCIIndex3=sniPCIIndex3, sniEndOfContract=sniEndOfContract, sniSizeInch=sniSizeInch, sniOnboardDeviceType=sniOnboardDeviceType, sniStateOfSupplySCSIDevices=sniStateOfSupplySCSIDevices, sniPhysicalDriveLocation=sniPhysicalDriveLocation, sniModuleSizeMB=sniModuleSizeMB, sniOperatingSystem=sniOperatingSystem, sniSCSIDeviceName=sniSCSIDeviceName, sniFastPageModeSupport=sniFastPageModeSupport, sniOSInstallDirSec=sniOSInstallDirSec, sniVolumename=sniVolumename, sniSRAMSupport=sniSRAMSupport, sniNumberofModules=sniNumberofModules, sniMemoryType=sniMemoryType, sniMemorySizeKB=sniMemorySizeKB, sniOutputPowerW=sniOutputPowerW, sniSMARTID=sniSMARTID, sniPartitionName=sniPartitionName, sniDeskInfo=sniDeskInfo, sniHarddiskAccelerator=sniHarddiskAccelerator, sniMainboardMemoryEntry=sniMainboardMemoryEntry, sniChassisType=sniChassisType, sniWarningKeyword4=sniWarningKeyword4, sniPlugandPlayPnP=sniPlugandPlayPnP, sniCodepage=sniCodepage, sniIPAddress5=sniIPAddress5, sniSubnetMask5=sniSubnetMask5, sniPowersFanControlSupp=sniPowersFanControlSupp, sniServiceContact=sniServiceContact, sniWeekofManufacture=sniWeekofManufacture, sniVirtualMemoryType=sniVirtualMemoryType, sniInterfaceType=sniInterfaceType, sniMouseDriverName=sniMouseDriverName, sniPreInstallationVersion=sniPreInstallationVersion, sniPCIBaseAddressIndex=sniPCIBaseAddressIndex, sniGateway5=sniGateway5, sniErrorCorrectionECC=sniErrorCorrectionECC, sni360kBFloppySupport=sni360kBFloppySupport, sniOSInstallationDirectory=sniOSInstallationDirectory, sniProductName=sniProductName, sniSMARTErrorThreshold=sniSMARTErrorThreshold, sniPowersupplySerialNumber=sniPowersupplySerialNumber, sniShowMouseTrails=sniShowMouseTrails, sniLoaderVersion=sniLoaderVersion, sniMonitor=sniMonitor, sniSystemSlotIndex=sniSystemSlotIndex, sniPowersupplyIndex=sniPowersupplyIndex, sniErrorKeyword8=sniErrorKeyword8, sniGraphicController=sniGraphicController, sniAdaptions=sniAdaptions, sniEMMDriverName=sniEMMDriverName, sniDIMMSupport=sniDIMMSupport, sniNetworkpath=sniNetworkpath, sniFunctionnumber=sniFunctionnumber, sniSubVendorID=sniSubVendorID, sniLogicalDrivePartitionFreeSpacekB=sniLogicalDrivePartitionFreeSpacekB, sniHardwarePowersupplyEntry=sniHardwarePowersupplyEntry, sniPCIIndex2=sniPCIIndex2, sniGateway1=sniGateway1, sniEDOSupport=sniEDOSupport, sniIdentNumber=sniIdentNumber, sniXMSFreeMemorykB=sniXMSFreeMemorykB, sniEMMFreekB=sniEMMFreekB, sniVESAExtensions=sniVESAExtensions, sniSingleMultiFunction=sniSingleMultiFunction, sniPowersupplyRevision=sniPowersupplyRevision, sniRomSizekB=sniRomSizekB, sniDNSServer2=sniDNSServer2, sniInt5PrintScreenService=sniInt5PrintScreenService, sniAntiVirusProgramIndex=sniAntiVirusProgramIndex, sniNumber=sniNumber, sniWritePreComp=sniWritePreComp, sniMinimumGrant=sniMinimumGrant, sniSubSystemID=sniSubSystemID, sniDIMM=sniDIMM, sniSavetoDiskStd=sniSavetoDiskStd, sniStateOfSupplyAddOnBoards=sniStateOfSupplyAddOnBoards, sniPhysicalDrive=sniPhysicalDrive, sniInternal=sniInternal, sniFlashBIOS=sniFlashBIOS, sniStatus=sniStatus, sniMainboardManufacturer=sniMainboardManufacturer, sniModuleName=sniModuleName, sniDeviceIndex=sniDeviceIndex, sniWarningKeyword5=sniWarningKeyword5, sniMaximumRefreshrate=sniMaximumRefreshrate, sniNumberofBoards=sniNumberofBoards, sniMouseManufacturer=sniMouseManufacturer, sniDriveBayIndex=sniDriveBayIndex, sniMemoryModuleName=sniMemoryModuleName, sniSoftware=sniSoftware, sni720kBFloppySupport=sni720kBFloppySupport, sniLandingZone=sniLandingZone, sniDOSDriver=sniDOSDriver, sniMainboardMemory=sniMainboardMemory, sniPCManufacturer=sniPCManufacturer, sniDNSServer1=sniDNSServer1, sniContact=sniContact, sniLocationMemoryBank=sniLocationMemoryBank, sniBios=sniBios, sniGraphicCardManufacturer=sniGraphicCardManufacturer, sniSoftwareIndex=sniSoftwareIndex, sniUSER=sniUSER, sniDPMS=sniDPMS, sniModuleSerialnumber=sniModuleSerialnumber, sniModeInfo=sniModeInfo, sniXMSDriverName=sniXMSDriverName, sniRemovableMedia=sniRemovableMedia, sniEnhancedDiskDriveEDD=sniEnhancedDiskDriveEDD, sniSysInf16Version=sniSysInf16Version, sniGraphicmode=sniGraphicmode, sniRemovableDrive=sniRemovableDrive, sniBaseAddress=sniBaseAddress, sniWarningKeyword1=sniWarningKeyword1, sniNumberMemorySlots=sniNumberMemorySlots, sniMainboardSystemSlots=sniMainboardSystemSlots, sniPartitionIndex=sniPartitionIndex, sniSupportedButtons=sniSupportedButtons, sniLogicalDriveType=sniLogicalDriveType, sniMaximumSizekB=sniMaximumSizekB, sniGraphic=sniGraphic, sniOSVersion=sniOSVersion, sniAtapiZIPDriveBootSupport=sniAtapiZIPDriveBootSupport, sniLogicalDrivePartitionActive=sniLogicalDrivePartitionActive, sniPhonenumber=sniPhonenumber, sniPowersupplyFanSpeed=sniPowersupplyFanSpeed, sniMainboardCacheEntry=sniMainboardCacheEntry, sniSCSIID=sniSCSIID, sniStateOfSupplyInternalDevicesEntry=sniStateOfSupplyInternalDevicesEntry, sniPortIRQ=sniPortIRQ, sniNetwork=sniNetwork, sniBusWidth=sniBusWidth, sniVersion=sniVersion, sniProductionMonth=sniProductionMonth, sniProcessorIndex=sniProcessorIndex, sniIEEE1394Support=sniIEEE1394Support, sniSwapFileSizekB=sniSwapFileSizekB, sniPhysicalDriveCrossreference=sniPhysicalDriveCrossreference, sniBoardDMA=sniBoardDMA, sniOSLanguageSecondary=sniOSLanguageSecondary, sniInterface=sniInterface, sniMainboardResourceUsage=sniMainboardResourceUsage, sniMaxMemoryMB=sniMaxMemoryMB, sniProductID=sniProductID, sniHardwarePowersupply=sniHardwarePowersupply, sniSoftwareName=sniSoftwareName, sniAGPSupport=sniAGPSupport, sniWarningKeyword6=sniWarningKeyword6, sniModeNumber=sniModeNumber, sniPartitionSizekB=sniPartitionSizekB, sniCacheSRAM=sniCacheSRAM, sniCIS=sniCIS, sniUSB=sniUSB, sniSwapFileUsedPercentage=sniSwapFileUsedPercentage, sniParitySupport=sniParitySupport, sniLS120BootSupport=sniLS120BootSupport, sniHardwareIndex=sniHardwareIndex, sniDeviceSerialnumber=sniDeviceSerialnumber, sniSystemSlotName=sniSystemSlotName, sniClusters=sniClusters, sniEndaddress=sniEndaddress, sniMainboardPortsEntry=sniMainboardPortsEntry, sniParity=sniParity, sniLogicalDriveSectorSizeByte=sniLogicalDriveSectorSizeByte, sniXMSSizekB=sniXMSSizekB, sniPhysicalDriveIndex=sniPhysicalDriveIndex, sniDepartment=sniDepartment, sniBaseClassID=sniBaseClassID, sniLabel=sniLabel, sniSynchronSupport=sniSynchronSupport, sniSpeedMHz=sniSpeedMHz, sniSectorsPerTrack=sniSectorsPerTrack, sniGSNumber=sniGSNumber, sniPartitionsEntry=sniPartitionsEntry, sniErrorKeyword7=sniErrorKeyword7, sniGraphicCardLocation=sniGraphicCardLocation, sniAdditionalUserInformation=sniAdditionalUserInformation, sniNetworkAdapterIndex=sniNetworkAdapterIndex, sniPlace=sniPlace, sniDeviceCommand=sniDeviceCommand, sniSystemSerialNumber=sniSystemSerialNumber, sniLogicalDrivePartitionSizekB=sniLogicalDrivePartitionSizekB, sniACPISupport=sniACPISupport, sniPhysicalDriveSectorSizeByte=sniPhysicalDriveSectorSizeByte, sniInstructionCache=sniInstructionCache, sniPortType=sniPortType, sniDeviceStatus=sniDeviceStatus, sniCharacteristicNumber=sniCharacteristicNumber, sniMouseIRQ=sniMouseIRQ, sniDriverVersion=sniDriverVersion, sniShadowed=sniShadowed, sniProcessorType=sniProcessorType, sniCacheLineSize=sniCacheLineSize, sniStandardSupport=sniStandardSupport, sniStateOfSupplyAddOnModules=sniStateOfSupplyAddOnModules, sniMACAddress=sniMACAddress, sniErrorKeyword9=sniErrorKeyword9, sniPNPSpecificVersion=sniPNPSpecificVersion, sniDesktopMgmt=sniDesktopMgmt, sniNumberOfDriveBays=sniNumberOfDriveBays, sniButtonsExchanged=sniButtonsExchanged, sniStateOfSupplyAddOnBoardsEntry=sniStateOfSupplyAddOnBoardsEntry, sniGeneralInformation=sniGeneralInformation, sniPCIBus=sniPCIBus, sniMinhorizontalFrequency=sniMinhorizontalFrequency, sniNEC9800FloppySupport=sniNEC9800FloppySupport, sniMemory=sniMemory, sniSerialNumber=sniSerialNumber, sniLatencyTimer=sniLatencyTimer, sniMainboardResourceUsageEntry=sniMainboardResourceUsageEntry, sniBusLoad=sniBusLoad, sniWarningKeyword3=sniWarningKeyword3, sniSwapFileName=sniSwapFileName, sniPartitionActive=sniPartitionActive, sniMemoryModuleSerialnumber=sniMemoryModuleSerialnumber, sniIPAddress1=sniIPAddress1, sniSIMMSupport=sniSIMMSupport, sniPCSerialNumber=sniPCSerialNumber, sniBoardIRQ=sniBoardIRQ, sniOnboardDeviceActive=sniOnboardDeviceActive, sniExpansionROMBaseAddress=sniExpansionROMBaseAddress, sniISAMemoryGapSupport=sniISAMemoryGapSupport, sniPowersupplyFanControl=sniPowersupplyFanControl, sniOnBoardMouse=sniOnBoardMouse, sniSubnetMask3=sniSubnetMask3, sniAdvPowerManagemAPM=sniAdvPowerManagemAPM, sniHardware=sniHardware, sniProcessorSerialnumber=sniProcessorSerialnumber, sniVoltage12V=sniVoltage12V, sniSubClassDescription=sniSubClassDescription, sniSubnetMask4=sniSubnetMask4, sniIOAddress=sniIOAddress, sniSupportedSpeeds=sniSupportedSpeeds, sniDDCSupport=sniDDCSupport, sniMemorymoduleFormfactorandType=sniMemorymoduleFormfactorandType, sniLogicalDrivePartitionCompressed=sniLogicalDrivePartitionCompressed, sniFamily=sniFamily, sniFastPageMode=sniFastPageMode, sniOSLanguage=sniOSLanguage, sniInterruptLine=sniInterruptLine)
mibBuilder.exportSymbols("DESKSNMP-MIB", sniMemoryModule=sniMemoryModule, sniPCISlotNumber=sniPCISlotNumber, sniDeviceID=sniDeviceID, sniRefreshrateHz=sniRefreshrateHz, sniDecodeenabled=sniDecodeenabled, sniDriver=sniDriver, sniDeskViewVersion=sniDeskViewVersion, sniOSNameSecondary=sniOSNameSecondary, sniSharedSlot=sniSharedSlot, sniSubnetMask1=sniSubnetMask1, sniSMARTName=sniSMARTName, sniDHCPServer=sniDHCPServer, sniSpeedns=sniSpeedns, sniGateway3=sniGateway3, sniMainboardPorts=sniMainboardPorts, sniDistinguishWarningError=sniDistinguishWarningError, sniDevicenumber=sniDevicenumber, sniDNBrowserVersion=sniDNBrowserVersion, sniHardwarePCIBaseAddress=sniHardwarePCIBaseAddress, sniStateOfSupplySCSIDevicesEntry=sniStateOfSupplySCSIDevicesEntry, sniCurrentSMARTValue=sniCurrentSMARTValue, sniPreInstallationLanguage=sniPreInstallationLanguage, sniHardwarePCICharacteristics=sniHardwarePCICharacteristics, sniNumberOfLowLevelDevices=sniNumberOfLowLevelDevices, sniMainboardName=sniMainboardName, sniMainboardProcessorsEntry=sniMainboardProcessorsEntry, sniResourceUsageIndex=sniResourceUsageIndex, sniInt10CGAVideoServices=sniInt10CGAVideoServices, sniMainboardSerialNumber=sniMainboardSerialNumber, sniWarningKeyword2=sniWarningKeyword2, sniFreeUserResourcesPercentage=sniFreeUserResourcesPercentage, sniBiosVersion=sniBiosVersion, sniHardwareEntry=sniHardwareEntry, sniInUse=sniInUse, sniInt17PrinterServices=sniInt17PrinterServices, sniMemoryMapping=sniMemoryMapping, sniBoardType=sniBoardType, sniPartitionFreeSpacekB=sniPartitionFreeSpacekB, sniMonitorName=sniMonitorName, sniIPAddress2=sniIPAddress2, sniHardwarePCICharacteristicsEntry=sniHardwarePCICharacteristicsEntry, sniCustomerSpecificSerialNumber=sniCustomerSpecificSerialNumber, sniStandardBios=sniStandardBios, sniPrefetchable=sniPrefetchable, sniEISABus=sniEISABus)
