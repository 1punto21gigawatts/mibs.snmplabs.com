#
# PySNMP MIB module WWP-LEOS-TWAMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-TWAMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, TimeTicks, Counter64, ObjectIdentity, Counter32, NotificationType, MibIdentifier, Integer32, ModuleIdentity, Unsigned32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "TimeTicks", "Counter64", "ObjectIdentity", "Counter32", "NotificationType", "MibIdentifier", "Integer32", "ModuleIdentity", "Unsigned32", "IpAddress", "Gauge32")
TruthValue, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "DateAndTime")
wwpModules, wwpModulesLeos = mibBuilder.importSymbols("WWP-SMI", "wwpModules", "wwpModulesLeos")
wwpLeosTwampMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40))
wwpLeosTwampMIB.setRevisions(('2008-08-08 08:00', '2008-02-15 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosTwampMIB.setRevisionsDescriptions(('Added wwpLeosTwampClientSessionsTable under wwpLeosTwampModule Added wwpLeosTwampClientSessionsStatisticsTable under wwpLeosTwampModule.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosTwampMIB.setLastUpdated('200808080800Z')
if mibBuilder.loadTexts: wwpLeosTwampMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosTwampMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosTwampMIB.setDescription('The MIB module for the WWP Specifc twamp mib. It contains the variables which applies to TWAMP functionality on the chassis for the WWP System.')
wwpLeosTwampMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1))
wwpLeosTwamp = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1))
wwpLeosTwampModule = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1))
wwpLeosTwampPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampPort.setDescription('TCP/UDP port for TWAMP messaging.')
wwpLeosTwampEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampEnable.setDescription('System level TWAMP enable/disable.')
wwpLeosTwampPortEnableTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosTwampPortEnableTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampPortEnableTable.setDescription('Table of Ethernet Ports Traps.')
wwpLeosTwampPortEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-TWAMP-MIB", "wwpLeosTwampPortId"))
if mibBuilder.loadTexts: wwpLeosTwampPortEnableEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampPortEnableEntry.setDescription('TWAMP enable state of the port.')
wwpLeosTwampPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampPortId.setDescription('Port index for TWAMP messaging.')
wwpLeosTwampPortEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampPortEnableState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampPortEnableState.setDescription('Setting this object will enable or disable TWAMP messaging on given port.')
wwpLeosTwampClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientEnable.setDescription('TWAMP Client enable/disable.')
wwpLeosTwampServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampServerEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerEnable.setDescription('TWAMP Server enable/disable.')
wwpLeosTwampLightEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampLightEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampLightEnable.setDescription('TWAMP Light enable/disable.')
wwpLeosTwampServerSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosTwampServerSessionsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionsTable.setDescription('Table of Ethernet Ports Traps.')
wwpLeosTwampServerSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-TWAMP-MIB", "wwpLeosTwampServerSessionId"))
if mibBuilder.loadTexts: wwpLeosTwampServerSessionEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionEntry.setDescription('TWAMP Server Session characteristics.')
wwpLeosTwampServerSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionId.setDescription('Session index for TWAMP Server records.')
wwpLeosTwampServerSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("listen", 0), ("greet", 1), ("start", 2), ("accept", 3), ("test", 4), ("stop", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionState.setDescription('The current state of the Server Session.')
wwpLeosTwampServerSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionPort.setDescription('Host source/reply port for TWAMP Server records.')
wwpLeosTwampServerSessionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionHost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionHost.setDescription('Host IP address for TWAMP Server records.')
wwpLeosTwampServerSessionNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionNumPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionNumPkts.setDescription('Number of packets defined for TWAMP Server records.')
wwpLeosTwampServerSessionSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionSeqNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionSeqNum.setDescription('Current sequence number for TWAMP Server records.')
wwpLeosTwampServerSessionHwAssist = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerSessionHwAssist.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerSessionHwAssist.setDescription('The current state of the Server Session FPGA Hardware Assist.')
wwpLeosTwampTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampTimeout.setDescription('TCP session timeout (max lifetime) for TWAMP messaging.')
wwpLeosTwampClientSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9), )
if mibBuilder.loadTexts: wwpLeosTwampClientSessionsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionsTable.setDescription('Table of Client Sessions. To create an entry set the twampClientSessionStatus to 2 and provide SessionName and set the sessionHost to valid IP Address.')
wwpLeosTwampClientSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1), ).setIndexNames((0, "WWP-LEOS-TWAMP-MIB", "wwpLeosTwampClientSessionId"))
if mibBuilder.loadTexts: wwpLeosTwampClientSessionEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionEntry.setDescription('TWAMP Client Session characteristics.')
wwpLeosTwampClientSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: wwpLeosTwampClientSessionId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionId.setDescription('Session index for TWAMP Client records.')
wwpLeosTwampClientSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 2), ("clear", 3), ("startTest", 4), ("stopTest", 5), ("clearStats", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'clear' will clear the entry contents in the table. Setting this object to 'startTest' will begin the entry's defined test. Setting this object to 'stopTest' will abort the entry's current running test. Setting this object to 'clearStats' will clear the statistics for that client session.")
wwpLeosTwampClientSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionName.setDescription("Text string containing the session's unique name.")
wwpLeosTwampClientSessionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionHost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionHost.setDescription('Host IP address for TWAMP test records.')
wwpLeosTwampClientSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 0), ("greeting", 1), ("serverStart", 2), ("sessionSetup", 3), ("sessionStart", 4), ("testing", 5), ("stop", 6), ("error", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionState.setDescription('The current state of the Client Session.')
wwpLeosTwampClientSessionCommPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionCommPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionCommPort.setDescription('Host source/reply port for TWAMP test records.')
wwpLeosTwampClientSessionCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dscp", 1), ("ipPrec", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionCosPolicy.setDescription('IP class of service to use for test message exchange')
wwpLeosTwampClientSessionDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionDscp.setDescription('DSCP value to use for TWAMP test messages.')
wwpLeosTwampClientSessionIpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionIpPrec.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionIpPrec.setDescription('IP-PREC value to use for TWAMP test messages.')
wwpLeosTwampClientSessionType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("poisson", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionType.setDescription('TWAMP test session sampling method setting.')
wwpLeosTwampClientSessionPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionPktSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionPktSize.setDescription('IP Packet size to use for TWAMP test messages.')
wwpLeosTwampClientSessionRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionRepeat.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionRepeat.setDescription('TWAMP test session continuous mode setting.')
wwpLeosTwampClientSessionSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionSeqNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionSeqNum.setDescription('Current sequence number for TWAMP test messages.')
wwpLeosTwampClientSessionNumPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionNumPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionNumPkts.setDescription('Number of packets defined for TWAMP test session.')
wwpLeosTwampClientSessionRxHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionRxHw.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionRxHw.setDescription('The current state of the Client Session FPGA RX Hardware Assist.')
wwpLeosTwampClientSessionTxHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionTxHw.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionTxHw.setDescription('The current state of the Client Session FPGA TX Hardware Assist.')
wwpLeosTwampClientSessionDot1dpri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 9, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionDot1dpri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionDot1dpri.setDescription('802.1d priority value to use for TWAMP test messages.')
wwpLeosTwampClientSessionsStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11), )
if mibBuilder.loadTexts: wwpLeosTwampClientSessionsStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionsStatisticsTable.setDescription('Table of Ethernet Ports Traps.')
wwpLeosTwampClientSessionStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1), ).setIndexNames((0, "WWP-LEOS-TWAMP-MIB", "wwpLeosTwampClientSessionStatsIndex"), (0, "WWP-LEOS-TWAMP-MIB", "wwpLeosTwampClientStatsRecordIndex"))
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatisticsEntry.setDescription('TWAMP Client Session characteristics.')
wwpLeosTwampClientSessionStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)))
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsIndex.setDescription('Session index for TWAMP Server records.')
wwpLeosTwampClientStatsRecordIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: wwpLeosTwampClientStatsRecordIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientStatsRecordIndex.setDescription('Session index for TWAMP Client Statistics records.')
wwpLeosTwampClientSessionStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsName.setDescription("Text string containing the session's unique name.")
wwpLeosTwampClientSessionTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionTimestamp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionTimestamp.setDescription('The time at which this statistics record was generated - Unix epoch seconds.')
wwpLeosTwampClientSessionStatsPktTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktTx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktTx.setDescription('The number of test packets emitted.')
wwpLeosTwampClientSessionStatsPktRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktRx.setDescription('The number of test packets received.')
wwpLeosTwampClientSessionStatsPktOL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktOL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktOL.setDescription('The number of test packets lost one-way.')
wwpLeosTwampClientSessionStatsPktRL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktRL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsPktRL.setDescription('The number of test packets lost round-trip.')
wwpLeosTwampClientSessionStatsRTMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTMin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTMin.setDescription('Round trip minimum interval.')
wwpLeosTwampClientSessionStatsRTMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTMax.setDescription('Round trip maximum interval.')
wwpLeosTwampClientSessionStatsRTMean = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTMean.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTMean.setDescription('Round trip average interval.')
wwpLeosTwampClientSessionStatsRTStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTStdDev.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRTStdDev.setDescription('Round trip standard deviation (jitter).')
wwpLeosTwampClientSessionStatsRT95th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRT95th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRT95th.setDescription('Round trip 95th percentile.')
wwpLeosTwampClientSessionStatsRT99pt9th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRT99pt9th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsRT99pt9th.setDescription('Round trip 99.9th percentile.')
wwpLeosTwampClientSessionStatsOWOMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOMin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOMin.setDescription('One way out minimum interval.')
wwpLeosTwampClientSessionStatsOWOMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOMax.setDescription('One way out maximum interval.')
wwpLeosTwampClientSessionStatsOWOMean = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOMean.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOMean.setDescription('One way out average interval.')
wwpLeosTwampClientSessionStatsOWOStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOStdDev.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWOStdDev.setDescription('One way out standard deviation (jitter).')
wwpLeosTwampClientSessionStatsOWO95th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWO95th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWO95th.setDescription('One way out 95th percentile.')
wwpLeosTwampClientSessionStatsOWO99pt9th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWO99pt9th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWO99pt9th.setDescription('One way out 99.9th percentile.')
wwpLeosTwampClientSessionStatsOWBMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBMin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBMin.setDescription('One way back minimum interval.')
wwpLeosTwampClientSessionStatsOWBMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBMax.setDescription('One way back maximum interval.')
wwpLeosTwampClientSessionStatsOWBMean = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBMean.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBMean.setDescription('One way back average interval.')
wwpLeosTwampClientSessionStatsOWBStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBStdDev.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWBStdDev.setDescription('One way back standard deviation (jitter).')
wwpLeosTwampClientSessionStatsOWB95th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWB95th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWB95th.setDescription('One way back 95th percentile.')
wwpLeosTwampClientSessionStatsOWB99pt9th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWB99pt9th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsOWB99pt9th.setDescription('One way back 99.9th percentile.')
wwpLeosTwampClientSessionStatsTPMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPMin.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPMin.setDescription('Target processing minimum interval.')
wwpLeosTwampClientSessionStatsTPMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPMax.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPMax.setDescription('Target processing maximum interval.')
wwpLeosTwampClientSessionStatsTPMean = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPMean.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPMean.setDescription('Target processing average interval.')
wwpLeosTwampClientSessionStatsTPStdDev = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPStdDev.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTPStdDev.setDescription('Target processing standard deviation (jitter).')
wwpLeosTwampClientSessionStatsTP95th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTP95th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTP95th.setDescription('Target processing 95th percentile.')
wwpLeosTwampClientSessionStatsTP99pt9th = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 11, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTP99pt9th.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientSessionStatsTP99pt9th.setDescription('Target processing 99.9th percentile.')
wwpLeosTwampClientDscp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientDscp.setDescription('DSCP value to use for TWAMP Client TCP test messages.')
wwpLeosTwampServerDscp = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampServerDscp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerDscp.setDescription('DSCP value to use for TWAMP Server TCP test messages.')
wwpLeosTwampClientHwAssist = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampClientHwAssist.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampClientHwAssist.setDescription('TWAMP Client hardware assist setting.')
wwpLeosTwampServerHwAssist = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTwampServerHwAssist.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerHwAssist.setDescription('TWAMP Server hardware assist setting.')
wwpLeosTwampServerCtrlSessionsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16), )
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionsTable.setDescription('Table of TWAMP Control Session Records.')
wwpLeosTwampServerCtrlSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16, 1), ).setIndexNames((0, "WWP-LEOS-TWAMP-MIB", "wwpLeosTwampServerCtrlSessionId"))
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionEntry.setDescription('TWAMP Server Control Session characteristics.')
wwpLeosTwampServerCtrlSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionId.setDescription('Session index for TWAMP Server Control Session records.')
wwpLeosTwampServerCtrlSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("listen", 0), ("greet", 1), ("start", 2), ("accept", 3), ("test", 4), ("stop", 5), ("error", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionState.setDescription('The current state of the Server Control Session.')
wwpLeosTwampServerCtrlSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionPort.setDescription('Host port for TWAMP Server Control session records.')
wwpLeosTwampServerCtrlSessionHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionHost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionHost.setDescription('Host IP address for TWAMP Server Control session records.')
wwpLeosTwampServerCtrlSessionTestMap = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 40, 1, 1, 1, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionTestMap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTwampServerCtrlSessionTestMap.setDescription('Bitmap of TWAMP Test sessions associated with Control session.')
mibBuilder.exportSymbols("WWP-LEOS-TWAMP-MIB", wwpLeosTwampClientSessionTimestamp=wwpLeosTwampClientSessionTimestamp, wwpLeosTwampServerSessionHwAssist=wwpLeosTwampServerSessionHwAssist, wwpLeosTwampServerSessionState=wwpLeosTwampServerSessionState, wwpLeosTwampClientSessionsStatisticsTable=wwpLeosTwampClientSessionsStatisticsTable, wwpLeosTwampClientSessionStatsOWO95th=wwpLeosTwampClientSessionStatsOWO95th, wwpLeosTwampPortEnableEntry=wwpLeosTwampPortEnableEntry, wwpLeosTwampClientSessionStatsTPMin=wwpLeosTwampClientSessionStatsTPMin, wwpLeosTwampServerCtrlSessionId=wwpLeosTwampServerCtrlSessionId, wwpLeosTwampClientSessionPktSize=wwpLeosTwampClientSessionPktSize, wwpLeosTwampClientSessionStatsName=wwpLeosTwampClientSessionStatsName, wwpLeosTwampLightEnable=wwpLeosTwampLightEnable, wwpLeosTwampClientSessionState=wwpLeosTwampClientSessionState, wwpLeosTwampClientSessionDscp=wwpLeosTwampClientSessionDscp, wwpLeosTwampClientSessionRepeat=wwpLeosTwampClientSessionRepeat, wwpLeosTwampClientSessionEntry=wwpLeosTwampClientSessionEntry, wwpLeosTwampClientSessionStatsPktOL=wwpLeosTwampClientSessionStatsPktOL, wwpLeosTwampClientSessionStatsTPMax=wwpLeosTwampClientSessionStatsTPMax, wwpLeosTwampClientSessionStatsOWOMax=wwpLeosTwampClientSessionStatsOWOMax, wwpLeosTwampClientSessionStatsOWBMin=wwpLeosTwampClientSessionStatsOWBMin, wwpLeosTwampServerCtrlSessionEntry=wwpLeosTwampServerCtrlSessionEntry, wwpLeosTwampMIB=wwpLeosTwampMIB, wwpLeosTwampServerCtrlSessionState=wwpLeosTwampServerCtrlSessionState, wwpLeosTwampClientSessionDot1dpri=wwpLeosTwampClientSessionDot1dpri, wwpLeosTwampClientSessionStatsPktRx=wwpLeosTwampClientSessionStatsPktRx, wwpLeosTwampClientHwAssist=wwpLeosTwampClientHwAssist, wwpLeosTwampClientSessionIpPrec=wwpLeosTwampClientSessionIpPrec, wwpLeosTwampClientSessionStatsTPMean=wwpLeosTwampClientSessionStatsTPMean, wwpLeosTwampPortEnableState=wwpLeosTwampPortEnableState, wwpLeosTwampClientSessionStatsOWBMean=wwpLeosTwampClientSessionStatsOWBMean, wwpLeosTwampClientSessionStatsPktRL=wwpLeosTwampClientSessionStatsPktRL, wwpLeosTwampServerHwAssist=wwpLeosTwampServerHwAssist, wwpLeosTwampClientSessionStatsRTMean=wwpLeosTwampClientSessionStatsRTMean, wwpLeosTwampClientSessionStatsOWB95th=wwpLeosTwampClientSessionStatsOWB95th, wwpLeosTwampModule=wwpLeosTwampModule, wwpLeosTwampClientSessionStatsIndex=wwpLeosTwampClientSessionStatsIndex, wwpLeosTwampPortId=wwpLeosTwampPortId, wwpLeosTwampClientSessionCommPort=wwpLeosTwampClientSessionCommPort, wwpLeosTwampClientSessionHost=wwpLeosTwampClientSessionHost, wwpLeosTwampClientSessionStatsPktTx=wwpLeosTwampClientSessionStatsPktTx, wwpLeosTwampClientSessionSeqNum=wwpLeosTwampClientSessionSeqNum, wwpLeosTwampClientSessionStatsRT95th=wwpLeosTwampClientSessionStatsRT95th, wwpLeosTwampClientSessionStatsRT99pt9th=wwpLeosTwampClientSessionStatsRT99pt9th, wwpLeosTwampClientSessionCosPolicy=wwpLeosTwampClientSessionCosPolicy, wwpLeosTwampClientSessionStatisticsEntry=wwpLeosTwampClientSessionStatisticsEntry, wwpLeosTwampMIBObjects=wwpLeosTwampMIBObjects, wwpLeosTwampServerCtrlSessionsTable=wwpLeosTwampServerCtrlSessionsTable, wwpLeosTwampClientSessionNumPkts=wwpLeosTwampClientSessionNumPkts, wwpLeosTwampServerEnable=wwpLeosTwampServerEnable, wwpLeosTwampServerSessionHost=wwpLeosTwampServerSessionHost, wwpLeosTwampPort=wwpLeosTwampPort, wwpLeosTwampClientSessionStatsOWBMax=wwpLeosTwampClientSessionStatsOWBMax, wwpLeosTwampClientSessionName=wwpLeosTwampClientSessionName, wwpLeosTwampServerCtrlSessionPort=wwpLeosTwampServerCtrlSessionPort, wwpLeosTwampServerSessionEntry=wwpLeosTwampServerSessionEntry, wwpLeosTwampClientStatsRecordIndex=wwpLeosTwampClientStatsRecordIndex, wwpLeosTwampClientDscp=wwpLeosTwampClientDscp, wwpLeosTwampClientEnable=wwpLeosTwampClientEnable, wwpLeosTwampClientSessionStatsRTStdDev=wwpLeosTwampClientSessionStatsRTStdDev, wwpLeosTwampClientSessionStatsOWOStdDev=wwpLeosTwampClientSessionStatsOWOStdDev, wwpLeosTwampClientSessionStatsOWBStdDev=wwpLeosTwampClientSessionStatsOWBStdDev, wwpLeosTwampServerCtrlSessionHost=wwpLeosTwampServerCtrlSessionHost, wwpLeosTwampClientSessionStatsOWOMean=wwpLeosTwampClientSessionStatsOWOMean, wwpLeosTwampClientSessionType=wwpLeosTwampClientSessionType, wwpLeosTwampPortEnableTable=wwpLeosTwampPortEnableTable, wwpLeosTwampTimeout=wwpLeosTwampTimeout, wwpLeosTwampEnable=wwpLeosTwampEnable, wwpLeosTwamp=wwpLeosTwamp, wwpLeosTwampClientSessionStatsTP95th=wwpLeosTwampClientSessionStatsTP95th, wwpLeosTwampServerSessionsTable=wwpLeosTwampServerSessionsTable, wwpLeosTwampClientSessionStatus=wwpLeosTwampClientSessionStatus, wwpLeosTwampClientSessionTxHw=wwpLeosTwampClientSessionTxHw, wwpLeosTwampClientSessionStatsRTMax=wwpLeosTwampClientSessionStatsRTMax, PYSNMP_MODULE_ID=wwpLeosTwampMIB, wwpLeosTwampClientSessionId=wwpLeosTwampClientSessionId, wwpLeosTwampClientSessionStatsRTMin=wwpLeosTwampClientSessionStatsRTMin, wwpLeosTwampServerSessionPort=wwpLeosTwampServerSessionPort, wwpLeosTwampServerSessionSeqNum=wwpLeosTwampServerSessionSeqNum, wwpLeosTwampServerDscp=wwpLeosTwampServerDscp, wwpLeosTwampClientSessionStatsTPStdDev=wwpLeosTwampClientSessionStatsTPStdDev, wwpLeosTwampServerCtrlSessionTestMap=wwpLeosTwampServerCtrlSessionTestMap, wwpLeosTwampClientSessionStatsOWB99pt9th=wwpLeosTwampClientSessionStatsOWB99pt9th, wwpLeosTwampClientSessionStatsOWOMin=wwpLeosTwampClientSessionStatsOWOMin, wwpLeosTwampClientSessionRxHw=wwpLeosTwampClientSessionRxHw, wwpLeosTwampClientSessionStatsTP99pt9th=wwpLeosTwampClientSessionStatsTP99pt9th, wwpLeosTwampClientSessionStatsOWO99pt9th=wwpLeosTwampClientSessionStatsOWO99pt9th, wwpLeosTwampServerSessionId=wwpLeosTwampServerSessionId, wwpLeosTwampClientSessionsTable=wwpLeosTwampClientSessionsTable, wwpLeosTwampServerSessionNumPkts=wwpLeosTwampServerSessionNumPkts)
