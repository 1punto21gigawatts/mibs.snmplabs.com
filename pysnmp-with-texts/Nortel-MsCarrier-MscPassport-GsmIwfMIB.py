#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-GsmIwfMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-GsmIwfMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
RowStatus, StorageType, RowPointer, Gauge32, Integer32, DisplayString, Unsigned32, Counter32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowStatus", "StorageType", "RowPointer", "Gauge32", "Integer32", "DisplayString", "Unsigned32", "Counter32")
Link, FixedPoint2, AsciiString, NonReplicated = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Link", "FixedPoint2", "AsciiString", "NonReplicated")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, NotificationType, iso, IpAddress, ModuleIdentity, Counter64, Gauge32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, TimeTicks, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "iso", "IpAddress", "ModuleIdentity", "Counter64", "Gauge32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "TimeTicks", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gsmIwfMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129))
mscGsmCs = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127))
mscGsmCsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 1), )
if mibBuilder.loadTexts: mscGsmCsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCs components.')
mscGsmCsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"))
if mibBuilder.loadTexts: mscGsmCsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCs component.')
mscGsmCsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCs components. These components can be added and deleted.')
mscGsmCsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsStorageType.setDescription('This variable represents the storage type value for the mscGsmCs tables.')
mscGsmCsTrunkGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: mscGsmCsTrunkGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsTrunkGrpIndex.setDescription('This variable represents the index for the mscGsmCs tables.')
mscGsmCsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 100), )
if mibBuilder.loadTexts: mscGsmCsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsProvTable.setDescription('This group contains general provisioning data for the GsmIwfCallServer that does not fit within other provisioning groups.')
mscGsmCsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 100, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"))
if mibBuilder.loadTexts: mscGsmCsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsProvEntry.setDescription('An entry in the mscGsmCsProvTable.')
mscGsmCsCommentText = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 100, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(0, 40)).clone(hexValue="")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsCommentText.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCommentText.setDescription('Use of this attribute is at the discretion of the system administrator. Typically, this attribute specifies the name of the trunk group at the Mobile Services-switching Center (MSC) configured for this GsmIwfCallServer plus any other commentary information.')
mscGsmCsMscIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 100, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsMscIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsMscIpAddress.setDescription('This attribute specifies the Internetwork Protocol (IP) Address of the Mobile Services-switching Center (MSC) Control Module (CM) that is permitted to set up GSM InterWorking Function (IWF) calls using this GsmIwfCallServer. This address must be specified in order for this GsmIwfCallServer to provide service. If call setups are attempted from an MSC which does not have this address, those calls are rejected. The callsRequested statistic of this GsmIwfCallServer is incremented, but the callsSetup statistic of this GsmIwfCallServer is not, when call setup attempts are rejected. Also, at the MSC, appropriate call failure logs are generated.')
mscGsmCsVirtualRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 100, 1, 4), RowPointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsVirtualRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsVirtualRouterName.setDescription('This attribute specifies the VirtualRouter that this GsmIwfCallServer uses to transmit signaling messages to and receive signaling messages from the Mobile Services-switching Center (MSC) that utilizes this GsmIwfCallServer.')
mscGsmCsVoiceLaw = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("aLaw", 0), ("muLaw", 1))).clone('aLaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsVoiceLaw.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsVoiceLaw.setDescription('This attribute specifies the voice law to be established for the IWF to Public Switched Telephone Network (PSTN) modem link for calls established by this GsmIwfCallServer. Valid values are: aLaw, a protocol for encoding voice-band audio, Pulse Code Modulation (PCM). muLaw, a protocol for encoding voice-band audio, PCM. Note that this value must match the voice law used at the Mobile Services-switching Center (MSC) connected to this GsmIwfCallServer.')
mscGsmCsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 103), )
if mibBuilder.loadTexts: mscGsmCsCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscGsmCsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 103, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"))
if mibBuilder.loadTexts: mscGsmCsCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCidDataEntry.setDescription('An entry in the mscGsmCsCidDataTable.')
mscGsmCsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 103, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscGsmCsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 104), )
if mibBuilder.loadTexts: mscGsmCsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscGsmCsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"))
if mibBuilder.loadTexts: mscGsmCsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsStateEntry.setDescription('An entry in the mscGsmCsStateTable.')
mscGsmCsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 104, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscGsmCsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 104, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscGsmCsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 104, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscGsmCsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121), )
if mibBuilder.loadTexts: mscGsmCsStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsStatsTable.setDescription('This group contains operational attributes that measure the performance of this particular GsmIwfCallServer.')
mscGsmCsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"))
if mibBuilder.loadTexts: mscGsmCsStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsStatsEntry.setDescription('An entry in the mscGsmCsStatsTable.')
mscGsmCsCurrentCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2047))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsCurrentCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCurrentCalls.setDescription('This attribute indicates the number of active calls currently serviced by this particular GsmIwfCallServer.')
mscGsmCsCallsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsCallsRequested.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCallsRequested.setDescription('This attribute counts the number of IWF call setup requests received at this particular GsmIwfCallServer from the Mobile Services- switching Center (MSC). The counter wraps when it exceeds the maximum value.')
mscGsmCsCallsSetup = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsCallsSetup.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCallsSetup.setDescription('This attribute counts the number of IWF calls successfully setup by this particular GsmIwfCallServer. A call is considered setup when the IWF-Setup-Request message is received, indicating a request for a data communications service, and the IWF has successfully allocated the necessary resources to fulfill the request. The counter wraps when it exceeds the maximum value.')
mscGsmCsCallsActivated = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsCallsActivated.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCallsActivated.setDescription('This attribute counts the number of IWF calls successfully activated by this particular GsmIwfCallServer. A call is considered activated when the IWF receives an IWF-Activate-Request, indicating that the call parties are connected and that data communications must begin. The counter wraps when it exceeds the maximum value.')
mscGsmCsCallsReleasedNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsCallsReleasedNormal.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCallsReleasedNormal.setDescription('This attribute counts the number of IWF calls that have completed successfully on this particular GsmIwfCallServer. The counter wraps when it exceeds the maximum value.')
mscGsmCsCallsReleasedAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsCallsReleasedAbnormal.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsCallsReleasedAbnormal.setDescription('This attribute counts the number of IWF calls that have been released due to error conditions at this particular GsmIwfCallServer or one if its GsmIwfBearerChannels. The counter wraps when it exceeds the maximum value.')
mscGsmCsChannelConfigChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsChannelConfigChanges.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsChannelConfigChanges.setDescription('This attribute counts the number of channel configuration requests from the Mobile-services Switching Center (MSC) that have been received at this GsmIwfCallServer and have resulted in successful responses. The counter wraps when it exceeds the maximum value.')
mscGsmCsChannelModeModifyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsChannelModeModifyRequests.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsChannelModeModifyRequests.setDescription('This attribute counts the number of channel mode modify requests that have been generated by fax calls serviced by this particular GsmIwfCallServer. The counter wraps when it exceeds the maximum value.')
mscGsmCsStatusMessagesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsStatusMessagesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsStatusMessagesRx.setDescription('This attribute counts the number of status messages received from the Mobile Services-switching Center (MSC). The counter wraps when it exceeds the maximum value.')
mscGsmCsErroredMipFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 121, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsErroredMipFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsErroredMipFrames.setDescription('This attribute counts the number of MSC/IWF Interface Protocol (MIP) messages received from the Mobile Services-switching Center (MSC) that were in error. The counter wraps when it exceeds the maximum value.')
mscGsmCsModem = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2))
mscGsmCsModemRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2, 1), )
if mibBuilder.loadTexts: mscGsmCsModemRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsModemRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCsModem components.')
mscGsmCsModemRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsModemIndex"))
if mibBuilder.loadTexts: mscGsmCsModemRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsModemRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCsModem component.')
mscGsmCsModemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsModemRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsModemRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCsModem components. These components cannot be added nor deleted.')
mscGsmCsModemComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsModemComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsModemComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsModemStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsModemStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsModemStorageType.setDescription('This variable represents the storage type value for the mscGsmCsModem tables.')
mscGsmCsModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("v17", 0), ("v21", 1), ("v22", 2), ("v22bis", 3), ("v23", 4), ("v27ter", 6), ("v29", 7), ("v32", 8), ("v32bis", 9))))
if mibBuilder.loadTexts: mscGsmCsModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsModemIndex.setDescription('This variable represents the index for the mscGsmCsModem tables.')
mscGsmCsRlp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3))
mscGsmCsRlpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 1), )
if mibBuilder.loadTexts: mscGsmCsRlpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCsRlp components.')
mscGsmCsRlpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsRlpIndex"))
if mibBuilder.loadTexts: mscGsmCsRlpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCsRlp component.')
mscGsmCsRlpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsRlpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCsRlp components. These components cannot be added nor deleted.')
mscGsmCsRlpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsRlpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsRlpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsRlpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpStorageType.setDescription('This variable represents the storage type value for the mscGsmCsRlp tables.')
mscGsmCsRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("half6kRate", 0), ("full6kRate", 1), ("full12kRate", 2), ("full14k5Rate", 3))))
if mibBuilder.loadTexts: mscGsmCsRlpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpIndex.setDescription('This variable represents the index for the mscGsmCsRlp tables.')
mscGsmCsRlpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10), )
if mibBuilder.loadTexts: mscGsmCsRlpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpProvTable.setDescription('This group contains provisionable attributes for the Radio Link Protocol (RLP) parameters used for the call set up by this particular GsmIwfCallServer. Changes to these attributes do not effect existing calls.')
mscGsmCsRlpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsRlpIndex"))
if mibBuilder.loadTexts: mscGsmCsRlpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpProvEntry.setDescription('An entry in the mscGsmCsRlpProvTable.')
mscGsmCsRlpHighestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRlpHighestVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpHighestVersion.setDescription('This attribute specifies the highest version of the Radio Link Protocol (RLP) protocol supported on this GsmIwfCallServer. Valid values are: 0, Single-link basic version. 1, Single-link extended version (for example, extended by data compression). During the Exchange Information (XID) negotiation at the start of the call, both RLP entities (mobile station and IWF) can agree to use a particular RLP version. The IWF attempts to negotiate the value specified by this attribute. Note that if V.42bis data compression is be established between the mobile station and IWF, both entities must agree to use version 1 (or higher). The default value for highestVersion is 1 to enable support for V.42bis data compression. The negotiated value can be viewed in the component GsmIwfRlpOp attribute highestVersion. Changes to this attribute do not effect existing calls.')
mscGsmCsRlpIwfToMsWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61)).clone(61)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRlpIwfToMsWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpIwfToMsWindowSize.setDescription('This attribute specifies the maximum number of sequentially numbered Information (I) frames that may be outstanding (that is, unacknowledged) at any given time from the IWF to the mobile station. GSM specification 4.22 defines the range as 0 to 61. During the Exchange Information (XID) negotiation, both Radio Link Protocol (RLP) entities (mobile station and IWF) can agree to use a specific window size. The IWF attempts to negotiate to the value specified by this attribute. The negotiated value can be viewed in the component GsmIwfRlpOp attribute iwfToMsWindowSize. Changes to this attribute do not effect existing calls.')
mscGsmCsRlpMsToIwfWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61)).clone(61)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRlpMsToIwfWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpMsToIwfWindowSize.setDescription('This attribute specifies the maximum number of sequentially numbered Information (I) frames that may be outstanding (that is, unacknowledged) at any given time from the mobile station to IWF. GSM specification 4.22 defines the range as 0-61. During the Exchange Information (XID) negotiation, both Radio Link Protocol (RLP) entities (mobile station and IWF) can agree to use a specific window size. The IWF attempts to negotiate to the value specified by this attribute. The negotiated value can be viewed in the component GsmIwfRlpOp attribute msToIwfWindowSize. Changes to this attribute do not effect existing calls.')
mscGsmCsRlpT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(380, 1020))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRlpT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpT1AckTimer.setDescription('This attribute specifies the time in milliseconds within which an acknowledgment of a sent frame must be received. Once this timer expires, the transmitting Radio Link Protocol (RLP) entity shall assume that the frame was lost. During the Exchange Information (XID) negotiation, both RLP entities (mobile station and IWF) can agree to use specific value for this timer (T1). The IWF attempts to negotiate to the value specified by this attribute. The default value for t1AckTimer is 520 msec for the full14k5Rate instance of this component, 480 msec for full12kRate, 540 msec for full6kRate, and 780 msec for half6kRate. The negotiated value can be viewed in the component GsmIwfRlpOp attribute t1AckTimer. Changes to this attribute do not effect existing calls.')
mscGsmCsRlpT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 79)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRlpT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpT2AckDelayTimer.setDescription('This attribute specifies the maximum time in milliseconds the receiving Radio Link Protocol (RLP) entity shall wait before sending an acknowledgment for a received information frame. During the Exchange Information (XID) negotiation, both RLP entities (mobile station and IWF) can agree to use specific value for this timer (T2). The IWF attempts to negotiate to the value specified by this attribute. The negotiated value can be viewed in the component GsmIwfRlpOp attribute t2AckDelayTimer. Changes to this attribute do not effect existing calls.')
mscGsmCsRlpN2RetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 3, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsRlpN2RetransmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsRlpN2RetransmitCount.setDescription('This attribute specifies the maximum number of times a Radio Link Protocol (RLP) entity shall retransmit an individual frame following the expiry of timer T1. During the Exchange Information (XID) negotiation, both RLP entities (mobile station and InterWorking Function (IWF)) can agree to use specific value for N2 (Retransmit Count). The IWF attempts to negotiate to the value specified by this attribute. The negotiated value can be viewed in the component GsmIwfRlpOp attribute n2RetransmitCount. Changes to this attribute do not effect existing calls.')
mscGsmCsFax = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4))
mscGsmCsFaxRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 1), )
if mibBuilder.loadTexts: mscGsmCsFaxRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCsFax components.')
mscGsmCsFaxRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsFaxIndex"))
if mibBuilder.loadTexts: mscGsmCsFaxRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCsFax component.')
mscGsmCsFaxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsFaxRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCsFax components. These components cannot be added nor deleted.')
mscGsmCsFaxComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsFaxComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsFaxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsFaxStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxStorageType.setDescription('This variable represents the storage type value for the mscGsmCsFax tables.')
mscGsmCsFaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmCsFaxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxIndex.setDescription('This variable represents the index for the mscGsmCsFax tables.')
mscGsmCsFaxProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 10), )
if mibBuilder.loadTexts: mscGsmCsFaxProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxProvTable.setDescription('This group contains the provisionable attributes for the fascimile protocol (T.30 and GSM 03.45) for this particular GsmIwfCallServer. Changes to these attributes do not effect existing calls.')
mscGsmCsFaxProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsFaxIndex"))
if mibBuilder.loadTexts: mscGsmCsFaxProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxProvEntry.setDescription('An entry in the mscGsmCsFaxProvTable.')
mscGsmCsFaxT1CalledToneTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 4, 10, 1, 1), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(150, 300)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsFaxT1CalledToneTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsFaxT1CalledToneTimer.setDescription('This attribute specifies the delay to generate a Called (CED) tone at the IWF after the called station is connected to the line for mobile terminated calls. Changes to this attribute do not effect existing calls.')
mscGsmCsV42 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5))
mscGsmCsV42RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 1), )
if mibBuilder.loadTexts: mscGsmCsV42RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42RowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCsV42 components.')
mscGsmCsV42RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsV42Index"))
if mibBuilder.loadTexts: mscGsmCsV42RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42RowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCsV42 component.')
mscGsmCsV42RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsV42RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42RowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCsV42 components. These components cannot be added nor deleted.')
mscGsmCsV42ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsV42ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsV42StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsV42StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42StorageType.setDescription('This variable represents the storage type value for the mscGsmCsV42 tables.')
mscGsmCsV42Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmCsV42Index.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42Index.setDescription('This variable represents the index for the mscGsmCsV42 tables.')
mscGsmCsV42ProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10), )
if mibBuilder.loadTexts: mscGsmCsV42ProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42ProvTable.setDescription('This group contains the provisionable attributes for the V.42 protocol for this particular GsmIwfCallServer. Changes to these attributes do not effect existing calls.')
mscGsmCsV42ProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsV42Index"))
if mibBuilder.loadTexts: mscGsmCsV42ProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42ProvEntry.setDescription('An entry in the mscGsmCsV42ProvTable.')
mscGsmCsV42T400DetectTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 1), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(75, 254)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42T400DetectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42T400DetectTimer.setDescription('This attribute specifies the maximum amount of time that the IWF waits for an Originator Detection Pattern (ODP) or Answerer Detection Pattern (ADP). ODP/ADP is a series of special bit patterns used during the call setup procedures. If the IWF is the Originator of the call, it starts sending ODP patterns and waits for an ADP for the duration of T400 milliseconds from the answerer at call setup time. If the IWF is the Answerer of the call, it waits for an ODP for T400 seconds from the originator and if it receives during that time it sends an ADP pattern to the originator at the call setup time. Since both sides operate with different values of T400 timer, a higher value increases the chance of a successful call setup. Changes to this attribute do not effect existing calls.')
mscGsmCsV42T401AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 2), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(50, 900)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42T401AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42T401AckTimer.setDescription('This attribute specifies the maximum amount of time that the IWF waits for an acknowledgment before retransmitting a frame. Since information about the T401 timer is not carried in the Exchange Identification (XID) negotiations at call setup time, both sides operate with different timer values. The value for T401 depends on many factors, such as propagation delay or frame processing time. A frame is retransmitted up to N400 times if the timer T401 expires before an acknowledgment for a frame is actually received. The performance of the data link layer can be impacted by the value of this timer as retransmissions of frames occur on expiry of timer T401. Changes to this attribute do not effect existing calls.')
mscGsmCsV42T402AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 3), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(25, 450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42T402AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42T402AckDelayTimer.setDescription('This attribute specifies the maximum amount of time that the IWF may wait following the receipt of any frame requiring a reply before it initiates transmission of an appropriate reply in order to ensure that the reply frame is received by the remote error-correcting entity prior to expiration of the T401 timer of the remote error-correcting entity. Since information about the T402 timer is not carried in the Exchange Identification (XID) negotiations at call setup, both sides operate with different timer values. If this timer expires, then the reply that would have been returned prior to its expiration is not sent. The performance of the data link layer can be impacted by the value of this timer as retransmissions of frames occur on expiry of timer T401. For better performance, a value of t402AckDelayTimer (T402) equal to half the value of t401AckTimer (T401) is recommended. Changes to this attribute do not effect existing calls.')
mscGsmCsV42T403IdleProbeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 90)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42T403IdleProbeTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42T403IdleProbeTimer.setDescription('This attribute specifies the maximum amount of time that the IWF allows to elapse without frames being exchanged. The link is permitted to remain idle with no frames being exchanged on the data link. Upon expiry of this timer, the IWF polls its peer for status. Since information about the T403 timer is not carried in the Exchange Identification (XID) negotiations at call setup time, both sides operate with different timer values. Changes to this attribute do not effect existing calls.')
mscGsmCsV42TxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42TxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42TxN401FrameSize.setDescription('This attribute specifies the maximum number of octets that can be carried in the information field of an Information (I) frame, Exchange Identification (XID) frame, and a Unnumbered Information (UI) frame from the IWF to the remote entity. The default value is 128 octets, and no XID negotiations required for txN401FrameSize. If the value for txN401FrameSize value is set to other than 128 octets, then XID frames are exchanged to negotiate a value. The value provided for txN401FrameSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 128 is specified, then the IWF negotiates or attempts to negotiate a value between the 128 (as a minimum) and the given value (as a maximum). If a value less than 128 is specified, then the IWF attempts to negotiate a value between the given value (as a minimum) and 128 (as a maximum). Any value can be specified as long as it is within the provisionable limits. However, a value equal to or close to 128 is recommended. The negotiated value can be viewed in the component GsmIwfV42Op attribute txN401FrameSize. Changes to this attribute do not effect existing calls.')
mscGsmCsV42RxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42RxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42RxN401FrameSize.setDescription('This attribute specifies the maximum number of octets that can be carried in the information field of an Information (I) frame, Exchange Identification (XID) frame, and a Unnumbered Information (UI) frame from the remote entity to the IWF. The default value is 128 octets, and no XID negotiations are required for rxN401FrameSize. If the value set for rxN401FrameSize is other than 128, XID frames are exchanged to negotiate a value. The value provided for rxN401FrameSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 128 is specified, then the IWF attempts to negotiate for a value between 128 (as a minimum) and the given value (as a maximum). If a value less than 128 value is specified, then the IWF attempts to negotiate for a value between the given value (as a minimum) and 128 (as a maximum). Any value can be specified as long as it is within the provisionable limits. However, a value equal to or close to the default is recommended. The negotiated value can be viewed in the component GsmIwfV42Op attribute rxN401FrameSize. Changes to this attribute do not effect existing calls.')
mscGsmCsV42TxKwindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42TxKwindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42TxKwindowSize.setDescription('This attribute specifies the maximum number of outstanding unacknowledged sequenced Information (I) frames from the IWF to the remote entity. The default value is 15 frames, and if this value is used then no Exchange Identification (XID) negotiations are required for txKwindowSize. If the value set for txKwindowSize is other than 15, then XID frames are exchanged to negotiate a value. The value provided for txKwindowSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 15 is specified, then the IWF attempts to negotiate a value between 15 (as a minimum) and the given value (as a maximum). If a value less than 15 is specified, then the IWF attempts to negotiate for a value between the given value (as a minimum) and 15 (as a maximum). Any value can be specified as long at it is within the provisionable limits. However, a value equal to or close to the default is recommended. The negotiated value can be viewed in the component GsmIwfV42Op attribute txKwindowSize. Changes to this attribute do not effect existing calls.')
mscGsmCsV42RxKwindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42RxKwindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42RxKwindowSize.setDescription('This attribute specifies the maximum number of outstanding unacknowledged sequenced Information (I) frames from the remote entity to the IWF. The default value is 15 frames, and if this value is used then no Exchange Identification (XID) negotiations are required for rxKwindowSize. If the value set for rxKwindowSize is other than 15, then XID frames are exchanged to negotiate a value. The value provided for rxKwindowSize sets up the bounds during XID negotiations. The IWF performs XID negotiations with this value as a minimum or maximum value. If a value greater than 15 is specified, then the IWF attempts to negotiate a value between 15 (as a minimum) and the given value (as a maximum). If a value less than 15 is specified, then the IWF attempts to negotiate for a value between the given value (as a minimum) and 15 (as a maximum). Any value can be specified as long as it is within the provisionable limits. However, a value equal to or close to the default is recommended. The negotiated value can be viewed in the component GsmIwfV42Op attribute rxKwindowSize. Changes to this attribute do not effect existing calls.')
mscGsmCsV42N400RetransLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 5, 10, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42N400RetransLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42N400RetransLimit.setDescription('This attribute specifies the maximum number of times the IWF retransmits a frame upon expiry of t401AckTimer before appropriate recovery action is taken. Information about N400 (Retransmission Limit) is not carried in the Exchange Identification (XID) negotiation at call setup time so both sides operate with different N400 values. Changes to this attribute do not effect existing calls.')
mscGsmCsV42bis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6))
mscGsmCsV42bisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 1), )
if mibBuilder.loadTexts: mscGsmCsV42bisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCsV42bis components.')
mscGsmCsV42bisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsV42bisIndex"))
if mibBuilder.loadTexts: mscGsmCsV42bisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCsV42bis component.')
mscGsmCsV42bisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsV42bisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCsV42bis components. These components cannot be added nor deleted.')
mscGsmCsV42bisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsV42bisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsV42bisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsV42bisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisStorageType.setDescription('This variable represents the storage type value for the mscGsmCsV42bis tables.')
mscGsmCsV42bisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmCsV42bisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisIndex.setDescription('This variable represents the index for the mscGsmCsV42bis tables.')
mscGsmCsV42bisProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 10), )
if mibBuilder.loadTexts: mscGsmCsV42bisProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisProvTable.setDescription('This group contains the provisionable attributes for the V.42bis data compression protocol parameters used for the calls set up by this particular GsmIwfCallServer. Changes to these attributes do not effect existing calls.')
mscGsmCsV42bisProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsV42bisIndex"))
if mibBuilder.loadTexts: mscGsmCsV42bisProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisProvEntry.setDescription('An entry in the mscGsmCsV42bisProvTable.')
mscGsmCsV42bisCompressionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("encode", 1), ("decode", 2), ("both", 3))).clone('both')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42bisCompressionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisCompressionDirection.setDescription('This attribute specifies the V.42bis data compression direction to be supported. The value for compression direction is negotiated at link setup by the data link protocol by way of the Exchange Identification (XID) negotiation of parameter P0 (compression direction). During XID negotiation of parameter P0, both sides (IWF and mobile or IWF and Public Switched Telephone Network (PSTN)) agree on the compression direction. Valid values are: none, No compression is present. encode, The data sent by the IWF to the other entity is compressed. decode, The data received by the IWF from the other entity is compressed. both, The data sent and received by the IWF is compressed. The negotiated value can be viewed in the component GsmIwfV42bisOp attribute compressionDirection. Changes to this attribute do not effect existing calls.')
mscGsmCsV42bisMaximumCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(512, 512), ValueRangeConstraint(1024, 1024), ValueRangeConstraint(2048, 2048), ValueRangeConstraint(4096, 4096), )).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42bisMaximumCodewords.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisMaximumCodewords.setDescription('This attribute specifies the maximum number of V.42bis codewords the IWF supports. A codeword is a binary number that represents a string of characters in compressed form. V.42bis keeps a dictionary of codewords for each compression direction. During Exchange Identification (XID) negotiation of parameter P1 (number of codewords), both sides (IWF and mobile or IWF and Public Switched Telephone Network (PSTN)) agree on the total number of codewords in the dictionaries. Changes to this attribute impact the compression ratio for the encoder (component GsmV42BisOp attribute compRatioEncoder). Changes also impact the amount of memory used (more memory is used when increasing the attribute). The gain in performance obtained from the selection of a larger dictionary may be offset by the larger codeword size needed, and for certain types of data, better performance may be obtained by using a smaller dictionary. The negotiated value can be viewed in the component GsmIwfV42bisOp attribute maximumCodewords . Changes to this attribute do not effect existing calls.')
mscGsmCsV42bisMaximumStringSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 250)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42bisMaximumStringSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisMaximumStringSize.setDescription('This attribute specifies the maximum number of characters allowed in a string represented by a codeword that the IWF supports. Each codeword in a V.42bis dictionary represents a string of characters. During Exchange Identification (XID) negotiation of parameter P2 (maximum string size), both sides (IWF and mobile or IWF and Public Switched Telephone Network (PSTN)) agree on the maximum string length to be used in the dictionaries. Changes to this attribute impact the compression ratio for the encoder (component GsmIwfV42bisOp attribute compRatioEncoder). The negotiated value can be viewed in the component GsmIwfV42bisOp attribute maximumStringSize. Changes to this attribute do not effect existing calls.')
mscGsmCsV42bisActionOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("resetLink", 0), ("takeDownCall", 1))).clone('resetLink')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsV42bisActionOnError.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsV42bisActionOnError.setDescription('This attribute specifies whether or not V.42bis takes down the call or resets the link when any of the following errors occur: 1.Receipt of STEPUP (step up codeword size) codeword when it would cause C2 (current code word size) to exceed N1 (maximum code word size). 2. Receipt of a codeword, at any time, equal to C1 (next empty dictionary entry). 3. Receipt of a codeword representing an empty dictionary entry. 4. Receipt of a reserved command code. 5. Receipt of any other error. If the value is resetLink, the error corrected connection and V.42bis dictionaries are reset. Some data is lost but the call continues. If the value is takeDownCall, the call is taken down. Changes to this attribute do not effect existing calls.')
mscGsmCsLp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7))
mscGsmCsLpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 1), )
if mibBuilder.loadTexts: mscGsmCsLpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmCsLp components.')
mscGsmCsLpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsLpIndex"))
if mibBuilder.loadTexts: mscGsmCsLpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmCsLp component.')
mscGsmCsLpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmCsLpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmCsLp components. These components can be added and deleted.')
mscGsmCsLpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsLpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmCsLpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsLpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpStorageType.setDescription('This variable represents the storage type value for the mscGsmCsLp tables.')
mscGsmCsLpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscGsmCsLpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpIndex.setDescription('This variable represents the index for the mscGsmCsLp tables.')
mscGsmCsLpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 10), )
if mibBuilder.loadTexts: mscGsmCsLpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpOperTable.setDescription('This group contains operational attributes pertaining to information about GsmIwfBearerChannels and logical processors associated with a GsmIwfCallServer from a high-level view.')
mscGsmCsLpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmCsLpIndex"))
if mibBuilder.loadTexts: mscGsmCsLpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpOperEntry.setDescription('An entry in the mscGsmCsLpOperTable.')
mscGsmCsLpConfiguredBearerChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsLpConfiguredBearerChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpConfiguredBearerChannels.setDescription('This attribute indicates the number of GsmIwfBearerChannel components provisioned for the Logical Processor represented by this component.')
mscGsmCsLpActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 10, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsLpActiveCalls.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpActiveCalls.setDescription('This attribute indicates the number of GsmIwfBearerChannel components currently active on this LogicalProcessor.')
mscGsmCsLpAssignedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsLpAssignedCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpAssignedCapacity.setDescription("This attribute indicates what percentage (0 to 100%) of a given LogicalProcessor has been reserved for the data calls which are currently active. When the assignedCapacity reaches 100%, no new calls are established on the given LogicalProcessor. During the life of a call, the compute requirements will vary. The compute capacity required for a given call type depends on the type of call established including such factors as connection type, data compression, user rate, error correction, flow control; therefore, at call establishment the compute capacity is added to the assignedCapacity for a LogicalProcessor. When the call is released, it's compute capacity is subtracted from the assigned capacity for the Lp.The GsmIwfCallServer uses this information to balance the distribution of data calls across the logical processors.")
mscGsmCsLpModemsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 127, 7, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("yes", 0), ("no", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmCsLpModemsSupported.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmCsLpModemsSupported.setDescription('This attribute indicates if modems are supported with this LogicalProcessor.')
mscGsmBc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128))
mscGsmBcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1), )
if mibBuilder.loadTexts: mscGsmBcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBc components.')
mscGsmBcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"))
if mibBuilder.loadTexts: mscGsmBcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBc component.')
mscGsmBcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmBcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBc components. These components can be added and deleted.')
mscGsmBcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcStorageType.setDescription('This variable represents the storage type value for the mscGsmBc tables.')
mscGsmBcTrunkGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: mscGsmBcTrunkGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcTrunkGrpIndex.setDescription('This variable represents an index for the mscGsmBc tables.')
mscGsmBcCicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2047)))
if mibBuilder.loadTexts: mscGsmBcCicIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcCicIndex.setDescription('This variable represents an index for the mscGsmBc tables.')
mscGsmBcOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101), )
if mibBuilder.loadTexts: mscGsmBcOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcOperTable.setDescription('This group contains operational attributes concerning the operation of this particular GsmIwfBearerChannel for the current or most recent call.')
mscGsmBcOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"))
if mibBuilder.loadTexts: mscGsmBcOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcOperEntry.setDescription('An entry in the mscGsmBcOperTable.')
mscGsmBcMipState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("pendingSetup", 1), ("setup", 2), ("pendingActivation", 3), ("activated", 4), ("holdDisconnect", 5), ("suspended", 6))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcMipState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcMipState.setDescription('This attribute indicates the current state of the MSC/IWF Interface Protocol (MIP) for an IWF element. Valid values are: idle, Startup state of IWF element. pendingSetup, Pending initial state of IWF element. setup, Initial state of IWF element. pendingActivation, Synchronization has been requested, but the IWF element is not yet in the Synchronization state. activated, Synchronization state. holdDisconnect, Flush buffer state, during call clearing the MSC is responsible for holding the network connection towards the disconnected party while the IWF completes the data transmission (flushing any buffered data towards the disconnected party; any buffered data towards the disconnecting party is discarded.) currentlySuspended, The call is temporarily switched to speech phase during a dual services call.')
mscGsmBcMaxUserDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("n300", 0), ("n600", 1), ("n1200", 2), ("n120075", 3), ("n2400", 4), ("n4800", 5), ("n7200", 6), ("n9600", 7), ("n12000", 8), ("n14400", 9), ("n16800", 10), ("n19200", 11), ("n21600", 12), ("n24000", 13), ("n26400", 14), ("n28800", 15), ("n31200", 16), ("n32000", 17), ("n33600", 18), ("n38400", 19), ("n43200", 20), ("n48000", 21), ("n56000", 22), ("n57600", 23), ("n64000", 24), ("none", 25))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcMaxUserDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcMaxUserDataRate.setDescription('This attribute indicates the user rate which is in affect between the IWF and the fixed network. A user rate of 1200_75 is 75 bit/s in the receive direction 1200 bit/s in the transmit direction.')
mscGsmBcConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("synchronous", 0), ("asynchronous", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcConnectionType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcConnectionType.setDescription('This attribute indicates the connection types between the terminal equipment or terminal adaptor and mobile and between the IWF and the network. Valid connection types are: asynchronous, Transmission of data which does not require clocking of the data signal. synchronous, Transmission of data which requires clocking of the data signal.')
mscGsmBcDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 99))).clone(namedValues=NamedValues(("n7", 0), ("n8", 1), ("notApplicable", 99))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcDataBits.setDescription('This attribute indicates the number of data bits encoded between start and stop bits in an asynchronous data call connection data stream. This attribute is set to notApplicable for a synchronous data call.')
mscGsmBcStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 99))).clone(namedValues=NamedValues(("n1", 0), ("n2", 1), ("notApplicable", 99))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcStopBits.setDescription('This attribute indicates the number of stop bits (a mark (binary 1) placed at the end of each data byte) inserted between the data bits in an asynchronous data call connection data stream, this marks the end of the character. This attribute is set to notApplicable for a synchronous data call.')
mscGsmBcParity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 99))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2), ("forced0", 3), ("forced1", 4), ("notApplicable", 99))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcParity.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcParity.setDescription('This attribute indicates the type of parity for the data bits in an asynchronous data call connection data stream. Parity is a redundant bit that is added to each data byte to aid in error detection. If odd parity is used, all data bytes have an odd number of 1s, and if even parity is used, all data bytes have an even number of 1s. Also parity may be forced to 0, forced to 1, or may not be used at all (required for sending 8-bit data). This attribute will be set to notApplicable for a synchronouse data call. Valid values are: none, No parity. odd, Odd parity. even, Even parity. forced0, Parity forced to 0. forced1, Parity forced to 1. notApplicable, Parity not applicable.')
mscGsmBcFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("noFlowControlActive", 0), ("inband", 1), ("v110FlowCntrl", 2), ("errorCntrl", 3))).clone('noFlowControlActive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFlowControl.setDescription('This attribute indicates the current flow control status of this GsmIwfBearerChannel for an asynchronous call. For a synchronous data call this attribute will be set to noFlowControlActive. Valid values are: noFlowControlActive, There is no flow control active over the air interface and network interfaces. The applications at the end points handle flow control. inband, Embedded characters in the data stream indicate flow control. v110FlowCtnrl, Utilization of V.110 flow control. errorCntrl, Flow control is handle by datalink protocols.')
mscGsmBcCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("faxG3", 0), ("cda31khz", 1), ("cdaUdi", 2), ("cdsUdi", 3), ("cds31khz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcCallType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcCallType.setDescription('This attribute indicates the current call type. Valid values are: faxG3, group 3 fax calls cda31khz, asynchronous 3.1kHz modem cdaUdi, asynchronous unrestricted digital data call cdsUdi, synchronous unrestricted digital data call cds31khz, synchronous 3.1kHz modem')
mscGsmBcLastResponseCode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 99))).clone(namedValues=NamedValues(("requestDone", 0), ("systemError", 1), ("applicationError", 2), ("noResources", 3), ("msgSizeMismatch", 4), ("protocolViolation", 5), ("requestNotSupported", 6), ("requestDenied", 7), ("invalidMessage", 8), ("bufferNotFlushed", 9), ("notApplicable", 99))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLastResponseCode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLastResponseCode.setDescription("This attribute indicates the MSC/IWF Interface Protocol (MIP) response code returned for the last call which was active on this particular GsmIwfBearerChannel. Valid values are: requestDone, the call was terminated normally. systemError, the call was terminated due to a base system problem. applicationError, the call was terminated due to an application level problem. noResources, the call was terminated due to a lack of available resources. msgSizeMismatch, Message length does not match length defined by the MSC/IWF Interface Protocol for the particular message type. protocolViolation, Failed to perform the request because the coding of the request message was invalid; message was not understood. requestNotSupported, Message was understood but not supported by the IWF or MSC. requestDenied, Message was understood and supported by the IWF or MSC but the request is denied. invalidMessage, Message received is invalid for the current state of the IWF's state machine or the MSC data call state machine. The message is ignored. bufferNotFlushed, Message from the Iwf to the MSC indicating that the buffers are not flushed as requested by the MSC. notApplicable, this attribute is not applicable for this call. This is the default value for this attribute.")
mscGsmBcMateBearerChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 101, 1, 10), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcMateBearerChannel.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcMateBearerChannel.setDescription('This attribute contains the name of the mate GsmIwfBearerChannel that this GsmIwfBearerChannel is involved with in the currently active call.')
mscGsmBcCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 104), )
if mibBuilder.loadTexts: mscGsmBcCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscGsmBcCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 104, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"))
if mibBuilder.loadTexts: mscGsmBcCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcCidDataEntry.setDescription('An entry in the mscGsmBcCidDataTable.')
mscGsmBcCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 104, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmBcCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscGsmBcStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 105), )
if mibBuilder.loadTexts: mscGsmBcStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscGsmBcStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 105, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"))
if mibBuilder.loadTexts: mscGsmBcStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcStateEntry.setDescription('An entry in the mscGsmBcStateTable.')
mscGsmBcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 105, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscGsmBcOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 105, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscGsmBcUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 105, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscGsmBcFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2))
mscGsmBcFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 1), )
if mibBuilder.loadTexts: mscGsmBcFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcFramer components.')
mscGsmBcFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFramerIndex"))
if mibBuilder.loadTexts: mscGsmBcFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcFramer component.')
mscGsmBcFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcFramer components. These components cannot be added nor deleted.')
mscGsmBcFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerStorageType.setDescription('This variable represents the storage type value for the mscGsmBcFramer tables.')
mscGsmBcFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerIndex.setDescription('This variable represents the index for the mscGsmBcFramer tables.')
mscGsmBcFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 10), )
if mibBuilder.loadTexts: mscGsmBcFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
mscGsmBcFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFramerIndex"))
if mibBuilder.loadTexts: mscGsmBcFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerProvEntry.setDescription('An entry in the mscGsmBcFramerProvTable.')
mscGsmBcFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmBcFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
mscGsmBcFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11), )
if mibBuilder.loadTexts: mscGsmBcFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
mscGsmBcFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFramerIndex"))
if mibBuilder.loadTexts: mscGsmBcFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerStatsEntry.setDescription('An entry in the mscGsmBcFramerStatsTable.')
mscGsmBcFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerFrmToIf.setDescription('This attribute counts the number of frames transmitted to the link interface by Framer. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerFrmFromIf.setDescription('This attribute counts the number of frames received from the link interface by Framer. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerOctetFromIf.setDescription('This attribute counts the number of bytes received from the link interface by Framer. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerCrcErrors.setDescription('This attribute coutns the the total number of frames with CRC errors, occurring in the receive direction from the link. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerLrcErrors.setDescription('This attribute counts the total number of frames with LRC errors, occurring in the Tx link prior to transmission onto the link. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerNonOctetErrors.setDescription('This attribute counts the total number of frames that were non octet aligned. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerOverruns.setDescription('This attribute counts the total number of frames received from the link for which overruns occurred. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerUnderruns.setDescription('This attributecounts the total number of frames transmitted to the link for which underruns occurred. The counter wraps when it exceeds the maximum value.')
mscGsmBcFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 12), )
if mibBuilder.loadTexts: mscGsmBcFramerLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerLinkTable.setDescription('This group contains provisionable attributes for the GsmIwfFramer which controls link layer framing for application components sending and receiving data on a link interface for this particular GsmIwfBearerChannel.')
mscGsmBcFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFramerIndex"))
if mibBuilder.loadTexts: mscGsmBcFramerLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerLinkEntry.setDescription('An entry in the mscGsmBcFramerLinkTable.')
mscGsmBcFramerFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 8))).clone(namedValues=NamedValues(("btdsFraming", 2), ("gsmFraming", 8))).clone('gsmFraming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmBcFramerFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerFramingType.setDescription('This attribute indicates the type of framing for the link layer data received and transmitted on this channel. Valid values are: BtdsFraming, bit transparent framing required for the GsmIwfBearerChannel components on MVP cards. GsmFraming, GSM framing for the GsmIwfBearerChannel components on DS1C/E1C cards.')
mscGsmBcFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 13), )
if mibBuilder.loadTexts: mscGsmBcFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscGsmBcFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFramerIndex"))
if mibBuilder.loadTexts: mscGsmBcFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerStateEntry.setDescription('An entry in the mscGsmBcFramerStateTable.')
mscGsmBcFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscGsmBcFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscGsmBcFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 2, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscGsmBcLayer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3))
mscGsmBcLayer1RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 1), )
if mibBuilder.loadTexts: mscGsmBcLayer1RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1RowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcLayer1 components.')
mscGsmBcLayer1RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcLayer1Index"))
if mibBuilder.loadTexts: mscGsmBcLayer1RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1RowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcLayer1 component.')
mscGsmBcLayer1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1RowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcLayer1 components. These components cannot be added nor deleted.')
mscGsmBcLayer1ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcLayer1StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1StorageType.setDescription('This variable represents the storage type value for the mscGsmBcLayer1 tables.')
mscGsmBcLayer1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcLayer1Index.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1Index.setDescription('This variable represents the index for the mscGsmBcLayer1 tables.')
mscGsmBcLayer1OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 10), )
if mibBuilder.loadTexts: mscGsmBcLayer1OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1OperTable.setDescription('This group contains physical layer operational attributes concerning the operation of this particular GsmIwfBearerChannel.')
mscGsmBcLayer1OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcLayer1Index"))
if mibBuilder.loadTexts: mscGsmBcLayer1OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1OperEntry.setDescription('An entry in the mscGsmBcLayer1OperTable.')
mscGsmBcLayer1ActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("v110", 0), ("aTrau", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1ActiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1ActiveMode.setDescription('This attribute indicates the active physical layer protocol between the mobile and the IWF. Valid values are: v110, GSM V.110 rate adaptation scheme for interworking V-series connections to an Integrated Services Digital Network (ISDN). aTrau, GSM A-Transcoder/Rate Adaptor (A-TRAU).')
mscGsmBcLayer1Connection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("nonTransparent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1Connection.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1Connection.setDescription('This attribute indicates the connection between the mobile and the IWF. Valid values are: transparent, Constant throughput, constant transit delay, and variable error rate (does not use Radio Link Protocol). nonTransparent, Improved error rate with variable transit delay and variable throughput (uses Radio Link Protocol).')
mscGsmBcLayer1DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1DataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1DataRate.setDescription('This attribute indicates the layer 1 user data rate for the currently active call for this GsmIwfBearerChannel. This is the data rate between the mobile and IWF.')
mscGsmBcLayer1IntermediateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 10, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(8, 8), ValueRangeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1IntermediateRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1IntermediateRate.setDescription('This attribute indicates the intermediate rate used in the physical layer rate adaptation process. This field is valid between the mobile and the IWF. For user data rates of 300 bit/s - 4800 bit/s the intermediate rate is 8 kbit/s. For user data rates 9600 bit/s and above the intermediate rate is 16 kbit/s.')
mscGsmBcLayer1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11), )
if mibBuilder.loadTexts: mscGsmBcLayer1StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1StatsTable.setDescription('This group contains physical layer statistics concerning the operation of this particular GsmIwfBearerChannel.')
mscGsmBcLayer1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcLayer1Index"))
if mibBuilder.loadTexts: mscGsmBcLayer1StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1StatsEntry.setDescription('An entry in the mscGsmBcLayer1StatsTable.')
mscGsmBcLayer1FramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1FramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1FramesTx.setDescription('This attribute counts the number of frames transmitted on the link. The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1FramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1FramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1FramesRx.setDescription('This attribute counts the number of frames received on the link. Discarded frames are not included in this count. The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1BytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1BytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1BytesTx.setDescription('This attribute counts number of bytes transmitted on the link. The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1BytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1BytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1BytesRx.setDescription('This attribute counts the number of bytes received on the link. Bytes from discarded frames are not included in this count. The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1UnderRunsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1UnderRunsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1UnderRunsTx.setDescription('This attribute counts number of underruns, on a per-call basis, in the transmit direction reported by the hardware on the mobile-side.. These frames are not counted towards the number of frames transmitted (framesTx). The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1OverRunsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1OverRunsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1OverRunsRx.setDescription('This attribute counts number of overruns, on a per-call basis, in the receive direction reported by the hardware on the mobile-side. These frames are discarded. These frames are not counted towards the number of frames received (framesRx). The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1NonOctetErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1NonOctetErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1NonOctetErrorsRx.setDescription('This attribute counts the number of non-octet synchronous frame errors, on a per-call basis, received on the link reported by the hardware. This is when a frame whose bit content was not divisible by eight was detected. These frames are discarded. These frames are not counted towards the number of frames received (framesRx). The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1LargeFrameErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1LargeFrameErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1LargeFrameErrorsRx.setDescription('This attribute counts the number of frames, on a per-call basis, received on the link that exceeded internal buffer limits reported by the hardware. A large number of these errors could indicate a bad physical medium. These frames are discarded. These frames are not counted towards the number of frames received (framesRx). The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1FramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1FramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1FramesDiscarded.setDescription('This attribute counts the number of frames discarded, on a per-call basis, in the receive direction by software due to frame errors. The counter wraps when it exceeds the maximum value.')
mscGsmBcLayer1LrcErrorsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 3, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcLayer1LrcErrorsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcLayer1LrcErrorsTx.setDescription('This attribute counts the number of corrupted frames, on a per-call basis, due to memory inconsistencies found by Longitude Redundancy Check (LRC) checks at the IWF. These frames are not counted towards the number of frames transmitted (framesTx). The counter wraps when it exceeds the maximum value.')
mscGsmBcModem = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4))
mscGsmBcModemRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 1), )
if mibBuilder.loadTexts: mscGsmBcModemRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcModem components.')
mscGsmBcModemRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcModemIndex"))
if mibBuilder.loadTexts: mscGsmBcModemRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcModem component.')
mscGsmBcModemRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcModem components. These components cannot be added nor deleted.')
mscGsmBcModemComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcModemStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemStorageType.setDescription('This variable represents the storage type value for the mscGsmBcModem tables.')
mscGsmBcModemIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcModemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemIndex.setDescription('This variable represents the index for the mscGsmBcModem tables.')
mscGsmBcModemOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10), )
if mibBuilder.loadTexts: mscGsmBcModemOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemOperTable.setDescription('This group contains operational attributes that measure performance of the modem component for this particular GsmIwfBearerChannel.')
mscGsmBcModemOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcModemIndex"))
if mibBuilder.loadTexts: mscGsmBcModemOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemOperEntry.setDescription('An entry in the mscGsmBcModemOperTable.')
mscGsmBcModemRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("n300", 0), ("n600", 1), ("n1200", 2), ("n120075", 3), ("n2400", 4), ("n4800", 5), ("n7200", 6), ("n9600", 7), ("n12000", 8), ("n14400", 9), ("n16800", 10), ("n19200", 11), ("n21600", 12), ("n24000", 13), ("n26400", 14), ("n28800", 15), ("n31200", 16), ("n32000", 17), ("n33600", 18), ("n38400", 19), ("n43200", 20), ("n48000", 21), ("n56000", 22), ("n57600", 23), ("n64000", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemRate.setDescription('This attribute indicates the transmission rate of the current modem in use. A rate of 1200_75 is 75 bit/s in the transmit direction and 1200 bit/s in the receive direction. All other rates are the same in both the transmit and receive directions.')
mscGsmBcModemAlgorithmInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemAlgorithmInUse.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemAlgorithmInUse.setDescription('This attribute indicates the current modem algorithm(s) active for the channel. Valid values are: v17, V.17 is active.V.17 is an ITU-T 14400bit/s modem standard. v27ter, V.27ter is active. V.27ter is an ITU-T 7200bit/s modem standard. v29, V.29 is active. V.29 an ITU-T 9600bit/s modem standard. v21, V.21 active. V.21 is an ITU-4 300bit/s modem standard. v22bis, V.22 or V.22bis active. V.22 ia an ITU-T modem standard that operates at 1200bit/s and 600 baud. V.22bis is an ITU-T modem standard that operates at 2400bit/s and 600 baud. v23, V.23 active. V.23 is an ITU-T modem standard that operates at a speed of 1200bit/s. v26ter, V.26ter active. V.26ter is an ITU-T modem standard that operates at a speed of 2400bit/s. v32bis, V.32 or V.32bis active. V.32 is an ITU-T modem standard that operates at 9600bit/s and 2400 baud. V.32bis is an ITU-T modem standard that operates at a speed of 14.4kbit/s. v34, V.34 active. V.34 is an ITU-T modem standard that operates at a speed of up to 28.8kbit/s. Description of bits: notused0(0) v17(1) v29(2) v27ter(3) v21(4) v22bis(5) v23(6) v26ter(7) v32bis(8) v34(9)')
mscGsmBcModemProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("training", 1), ("connected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemProtocolState.setDescription('This attribute indicates the active protocol state of the modem in use.Valid values are: idle, Modem is in an inactive state and has no current connection established. training, Modem is attempting to establish a connection with the far end modem via handshaking. connected, Modem has establish a connection with the far end modem.')
mscGsmBcModemReceiverTransmitter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 0), ("rxOnTxOff", 1), ("rxOffTxOn", 2), ("rxTxOn", 3))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemReceiverTransmitter.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemReceiverTransmitter.setDescription('This attribute indicates whether the fax data modem is in receive or transmit mode. If this is not a fax data modem call, then the value is set to notApplicable. Valid values are: notApplicable, Not an applicable field. rxOnTxOff, Receiver is on, transmitter is off. rxOffTxOn, Receiver is off, transmitter is on. rxTxOn, Reciever is on, transmitter is on.')
mscGsmBcModemTraining = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 99))).clone(namedValues=NamedValues(("short", 0), ("long", 1), ("notApplicable", 99))).clone('notApplicable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemTraining.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemTraining.setDescription('This attribute indicates the training procedure used by the V.17 modems. ITU-T defines two training procedures. A longer training procedure used at call setup, and a short training procedure is used during the fax call when switching from the V.21 modem to the V.17 modem. A value of notApplicable indicates that the attribute is not applicable for the modem.')
mscGsmBcModemToUpperFlowControlActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemToUpperFlowControlActive.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemToUpperFlowControlActive.setDescription('This attribute indicates whether flow control was requested and an indication was sent to an upper layer protocol.')
mscGsmBcModemToDspFlowControlActive = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemToDspFlowControlActive.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemToDspFlowControlActive.setDescription('This attribute indicates whether an upper layer protocol requested flow control and an indication was sent to the Digital Signal Processor.')
mscGsmBcModemAsyncMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemAsyncMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemAsyncMode.setDescription('This attribute indicates whether conversion between synchronous and asynchronous data format (specifacally, the stripping or insertion of start and stop bits) is being performed. The value will be on unless the V.42 layer is active or it is a fax call.')
mscGsmBcModemAutoHdlcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemAutoHdlcMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemAutoHdlcMode.setDescription('This attribute indicates whether High-Level Data Link Control (HDLC) functions are being performed by the modem to support HDLC applications (V.42 for example).')
mscGsmBcModemOutbandFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemOutbandFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemOutbandFlowControl.setDescription('This attribute indicates whether inband or outband flow control conversions are being performed. The modem performs either inband or outband flow control unless V.42 layer is active, it is a fax call, or no flow control was specified by the MSC.')
mscGsmBcModemOutbandBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemOutbandBreak.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemOutbandBreak.setDescription('This attribute indicates whether inband or outband break control conversions are being performed. This is when the modem detects a break condition as defined by ITU-T X.28 and reports it. When a break condition is discovered all subsequent incoming data is discarded until a start bit is received.')
mscGsmBcModemAutobaud = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("on", 0), ("off", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemAutobaud.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemAutobaud.setDescription('This attribute indicates whether autobaud is active. The modem is instructed at call setup time by the MSC on: What is the initial modem data rate value and Whether a modem is allowed to perform autobauding (on) or not (off). With Autobauding on, the modem is allowed to connect using a valid modem data rate less than or equal to the initial rate specified to the modem by the MSC. If a modem can not perform autobauding and the carrier can not be established at the initial data rate, the modem is disabled.')
mscGsmBcModemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 11), )
if mibBuilder.loadTexts: mscGsmBcModemStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemStatsTable.setDescription('This group contains operational attributes that measure performance of the modem component for this particular GsmIwfBearerChannel.')
mscGsmBcModemStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcModemIndex"))
if mibBuilder.loadTexts: mscGsmBcModemStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemStatsEntry.setDescription('An entry in the mscGsmBcModemStatsTable.')
mscGsmBcModemBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemBytesTx.setDescription('This attribute counts the number of payload bytes transmitted. The counter wraps when it exceeds the maximum value.')
mscGsmBcModemBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemBytesRx.setDescription('This attribute counts the number of payload bytes received. The counter wraps when it exceeds the maximum value.')
mscGsmBcModemFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 4, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcModemFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcModemFramingErrors.setDescription('This attribute counts the number of framing errors detected by the hardware. This is the absence of a stop bit after a start bit and eight bits of data. All incoming data is discarded until the next start bit is received. The counter wraps when it exceeds the maximum value.')
mscGsmBcV110 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5))
mscGsmBcV110RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 1), )
if mibBuilder.loadTexts: mscGsmBcV110RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110RowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcV110 components.')
mscGsmBcV110RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV110Index"))
if mibBuilder.loadTexts: mscGsmBcV110RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110RowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcV110 component.')
mscGsmBcV110RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110RowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcV110 components. These components cannot be added nor deleted.')
mscGsmBcV110ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcV110StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110StorageType.setDescription('This variable represents the storage type value for the mscGsmBcV110 tables.')
mscGsmBcV110Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcV110Index.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110Index.setDescription('This variable represents the index for the mscGsmBcV110 tables.')
mscGsmBcV110OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 10), )
if mibBuilder.loadTexts: mscGsmBcV110OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110OperTable.setDescription('This group contains operational attributes that measure the performance of V110.')
mscGsmBcV110OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV110Index"))
if mibBuilder.loadTexts: mscGsmBcV110OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110OperEntry.setDescription('An entry in the mscGsmBcV110OperTable.')
mscGsmBcV110DataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110DataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110DataRate.setDescription('This attribute contains the layer 1 user data rate for the currently active call for this GsmIwfBearerChannel. This is the data rate between the IWF and the fixed network.')
mscGsmBcV110IntermediateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("n8KbitS", 0), ("n16KbitS", 1), ("n32KbitS", 2), ("notApplicable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110IntermediateRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110IntermediateRate.setDescription('This attribute indicates the intermediate rate used in the physical layer rate adaptation process. This field is valid between the network and the IWF. For user data rates of 300 bit/s to 4800 bit/s the intermediate rate is 8 kbit/s. For a user data rate of 9600 bit/s the intermediate rate is 16 kbit/s. For user data rates of 1200 bit/s to 19200 bit/s the intermediate rate is 32 kbit/s. Data rates above this have no intermediate rate.')
mscGsmBcV110StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11), )
if mibBuilder.loadTexts: mscGsmBcV110StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110StatsTable.setDescription('This group contains statistical attributes which measure the performance of V110.')
mscGsmBcV110StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV110Index"))
if mibBuilder.loadTexts: mscGsmBcV110StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110StatsEntry.setDescription('An entry in the mscGsmBcV110StatsTable.')
mscGsmBcV110FramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110FramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110FramesTx.setDescription('This attribute counts the number of frames transmitted on the link. The counter wraps when it exceeds the maximum value.')
mscGsmBcV110FramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110FramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110FramesRx.setDescription('This attribute counts the number of frames received on the link. Discarded frames are not included in this count. The counter wraps when it exceeds the maximum value.')
mscGsmBcV110BytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110BytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110BytesTx.setDescription('This attribute counts the number of bytes transmitted on the link. The counter wraps when it exceeds the maximum value.')
mscGsmBcV110BytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110BytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110BytesRx.setDescription('This attribute counts the number of bytes received on the link. Bytes from discarded frames are not included in this count. The counter wraps when it exceeds the maximum value.')
mscGsmBcV110UnderRunsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110UnderRunsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110UnderRunsTx.setDescription('This attribute counts the number of underruns, on a per-call basis, in the transmit direction reported by the hardware on the network side. These frames are not counted towards the number of frames transmitted (framesTx). The counter wraps when it exceeds the maximum value.')
mscGsmBcV110OverRunsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110OverRunsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110OverRunsRx.setDescription('This attribute counts the number of overruns, on a per-call basis, in the receive direction reported by the hardware on the network side. These frames are discarded. These frames are not counted towards the number of frames received (framesRx). The counter wraps when it exceeds the maximum value.')
mscGsmBcV110NonOctetErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110NonOctetErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110NonOctetErrorsRx.setDescription('This attribute counts the number of non-octet synchronous frame errors, on a per-call basis, received on the link reported by the hardware. These frames are discarded. These frames are not counted towards the number of frames received (framesRx). The counter wraps when it exceeds the maximum value.')
mscGsmBcV110LargeFrameErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110LargeFrameErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110LargeFrameErrorsRx.setDescription('This attribute counts the number of frames received on the link that exceeded internal buffer limits reported by the hardware, on a per- call basis. These frames are discarded. These frames are not counted towards the number of frames received (framesRx). The counter wraps when it exceeds the maximum value.')
mscGsmBcV110FramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110FramesDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110FramesDiscarded.setDescription('This attribute counts the number of frames discarded, on a per-call basis, in the receive direction by software due to frame errors. The counter wraps when it exceeds the maximum value.')
mscGsmBcV110LrcErrorsTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 5, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV110LrcErrorsTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV110LrcErrorsTx.setDescription('This attribute counts the number of corrupted frames, on a per-call basis, due to memory inconsistencies found by Longitude Redundancy Check (LRC) checks at the IWF. The counter wraps when it exceeds the maximum value.')
mscGsmBcFax = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6))
mscGsmBcFaxRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 1), )
if mibBuilder.loadTexts: mscGsmBcFaxRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcFax components.')
mscGsmBcFaxRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFaxIndex"))
if mibBuilder.loadTexts: mscGsmBcFaxRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcFax component.')
mscGsmBcFaxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcFax components. These components cannot be added nor deleted.')
mscGsmBcFaxComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcFaxStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxStorageType.setDescription('This variable represents the storage type value for the mscGsmBcFax tables.')
mscGsmBcFaxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcFaxIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxIndex.setDescription('This variable represents the index for the mscGsmBcFax tables.')
mscGsmBcFaxOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 10), )
if mibBuilder.loadTexts: mscGsmBcFaxOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxOperTable.setDescription('This group contains operational attributes which measure the performance of the fax protocol.')
mscGsmBcFaxOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFaxIndex"))
if mibBuilder.loadTexts: mscGsmBcFaxOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxOperEntry.setDescription('An entry in the mscGsmBcFaxOperTable.')
mscGsmBcFaxActiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("ecm", 1))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxActiveMode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxActiveMode.setDescription('This attribute indicates the mode of the fax T.30 protocol, determined during Exchange Identification (XID) negotiations. The following modes are supported: normal, normal T.30 protocol, Error Correction Mode (ECM) not used ecm, Error Correction Mode used. Fax error correction is done using a half-duplex page selective repeat technique.')
mscGsmBcFaxProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("setup", 0), ("idle", 1), ("bcsRx", 2), ("bcsTx", 3), ("msgRx", 4), ("msgTx", 5))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxProtocolState.setDescription('This attribute indicates the protocol state of the fax adaptor. The values are: setup, call setup state idle, idle state only transmitting Synchronize (SYNC) frames bcsRx, receiving Binary Coded Signal (BCS) packet from modem bcsTx, transmitting BCS packet to modem msgRx, receiving fax message from modem msgTx, transmitting fax message to modem')
mscGsmBcFaxMessageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxMessageRate.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxMessageRate.setDescription('This attribute indicates the fax message rate used for sending fax documents.')
mscGsmBcFaxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11), )
if mibBuilder.loadTexts: mscGsmBcFaxStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxStatsTable.setDescription('This group contains statistical attributes which measure the performance of the fax protocol.')
mscGsmBcFaxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcFaxIndex"))
if mibBuilder.loadTexts: mscGsmBcFaxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxStatsEntry.setDescription('An entry in the mscGsmBcFaxStatsTable.')
mscGsmBcFaxMessageFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxMessageFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxMessageFramesRx.setDescription('This attribute counts the number of fax message frames received from the mobile. One fax message frame is an eight byte DATA frame defined in GSM 3.45. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxMessageFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxMessageFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxMessageFramesTx.setDescription('This attribute counts the number of fax message frames transmitted to the mobile. One fax message frame is an eight byte DATA frame defined in GSM 3.45. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxBcsFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxBcsFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxBcsFramesRx.setDescription('This attribute counts the number of fax Binary Coded Signal (BCS) frames received from the mobile. A fax BCS frame is an 8-byte STATUS frame, which carries T.30 BCS data as defined in GSM 3.45. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxBcsFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxBcsFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxBcsFramesTx.setDescription('This attribute counts the number of fax Binary Coded Signal (BCS) frames transmitted to the mobile. A fax BCS frame is an 8-byte STATUS frame, which carries T.30 BCS data as defined in GSM 3.45. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxPagesRxFromMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxPagesRxFromMobile.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxPagesRxFromMobile.setDescription('This attribute counts the number of fax pages received from the mobile. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxPagesTxToMobile = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxPagesTxToMobile.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxPagesTxToMobile.setDescription('The attribute counts the number of fax pages transmitted to the mobile. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxChannelModeModify = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxChannelModeModify.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxChannelModeModify.setDescription('This attribute counts the number of Channel Mode Modify (CMM) requests initiated by the IWF. For transparent fax calls, the transmission speed is determined by the two fax machines at call setup. The speed may change during the transmission to satisfy the T.30 protocol. The CMM request is used by the GSM IWF to request that the T.30 requested speed change can be propagated throughout the network. The counter wraps when it exceeds the maximum value.')
mscGsmBcFaxBcsFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 6, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcFaxBcsFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcFaxBcsFrameErrors.setDescription('This attribute counts the number of fax Binary Coded Signal (BCS) frames in error. This attribute indicates the count of corrupted fax BCS frames over the GSM radio channel. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7))
mscGsmBcRlpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 1), )
if mibBuilder.loadTexts: mscGsmBcRlpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcRlp components.')
mscGsmBcRlpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcRlpIndex"))
if mibBuilder.loadTexts: mscGsmBcRlpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcRlp component.')
mscGsmBcRlpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcRlp components. These components cannot be added nor deleted.')
mscGsmBcRlpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcRlpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpStorageType.setDescription('This variable represents the storage type value for the mscGsmBcRlp tables.')
mscGsmBcRlpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcRlpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpIndex.setDescription('This variable represents the index for the mscGsmBcRlp tables.')
mscGsmBcRlpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10), )
if mibBuilder.loadTexts: mscGsmBcRlpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpOperTable.setDescription('This group contains operational attributes that measure performance of the GsmIwfBearerChannel.')
mscGsmBcRlpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcRlpIndex"))
if mibBuilder.loadTexts: mscGsmBcRlpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpOperEntry.setDescription('An entry in the mscGsmBcRlpOperTable.')
mscGsmBcRlpProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("detached", 0), ("disconnected", 1), ("connPending", 2), ("discPending", 3), ("connectEstablished", 4), ("synchronized", 5))).clone('detached')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpProtocolState.setDescription('This attribute indicates the last Radio Link Protocol (RLP) state before call take down. The following are the states: detached, Initial State. The call has not even started. disconnected, Asynchronous Disconnected Mode (ADM). connPending, In ADM, but sent Set Asynchronous Balanced Mode (SABM) and waiting for a response. discPending, Sent Disconnect (DISC), waiting for a response. connectEstablished, In Asynchronous Balanced Mode (ABM), Information frames can be exchanged. synchronized, Synchronization state entered after a change of channel coding. Handles REMAP procedure.')
mscGsmBcRlpFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpFrameSize.setDescription('This attribute indicates the current Radio Link Protocol (RLP) frame size transmitted. The size of the frame depends on the radio channel type. The frames can be 240 bits long for 12 kbit/s and 6 kbit/s or 576 bits long for 14.5 kbit/s.')
mscGsmBcRlpHighestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpHighestVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpHighestVersion.setDescription('This attribute indicates the current highest version of the Radio Link Protocol (RLP) protocol negotiated by the Radio Link Protocol (RLP), during Exchange Information (XID). Valid values are: 0, Single-link basic version. 1, Single-link extended version (for example, extended by data compression). The value used for XID negotiations can be provisioned by component GsmIwfRadioLinkProtocol attribute highestVersion.')
mscGsmBcRlpIwfToMsWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpIwfToMsWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpIwfToMsWindowSize.setDescription('This attribute indicates the current IWF to mobile window size negotiated by the Radio Link Protocol (RLP) during Exchange Information (XID). The window size is the maximum number of sequentially numbered Information (I) frames that may be unacknowledged at any given time. GSM specification 4.22 defines the range as 0 to 61. The value used for XID negotiations can be provisioned by component GsmIwfRadioLinkProtocol attribute iwftoMsWindowSize.')
mscGsmBcRlpMsToIwfWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 61))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpMsToIwfWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpMsToIwfWindowSize.setDescription('This attribute indicates the current mobile to IWF window size negotiated by the Radio Link Protocol (RLP), during Exchange Information (XID). The window size is the maximum number of sequentially numbered Information (I) frames that may be unacknowledged at any given time. GSM specification 4.22 defines the range as 0 to 61. The value used for XID negotiations can be provisioned by component GsmIwfRadioLinkProtocol attribute msToIwfWindowSize.')
mscGsmBcRlpT1AckTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(380, 1020))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpT1AckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpT1AckTimer.setDescription('This attribute indicates the current T1 timer negotiated by the Radio Link Protocol (RLP), during Exchange Information (XID). This is the period in milliseconds within which an acknowledgment of a sent frame must be received. Once this timer expires, the transmitting RLP entity shall assume that the frame was lost. The value used for XID negotiations can be provisioned by component GsmIwfRadioLinkProtocol attribute t1AckTimer.')
mscGsmBcRlpT2AckDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 70))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpT2AckDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpT2AckDelayTimer.setDescription('This attribute indicates the current T2 timer negotiated by the Radio Link Protocol (RLP), during Exchange Information (XID). This is the maximum period in milliseconds the receiving RLP entity shall wait before sending an acknowledgment for a received in sequenced frame. The value used for XID negotiations can be provisioned by component GsmIwfRadioLinkProtocol attribute t2AckDelayTimer.')
mscGsmBcRlpN2RetransmitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscGsmBcRlpN2RetransmitCount.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpN2RetransmitCount.setDescription('This attribute indicates the current value of N2 negotiated by the Radio Link Protocol (RLP), during Exchange Information (XID). This is the maximum number of times a RLP entity shall retransmit an individual frame following the expiry of timer T1. The value used for XID negotiations can be provisioned by component GsmIwfRadioLinkProtocol attribute n2RetransmitCount.')
mscGsmBcRlpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11), )
if mibBuilder.loadTexts: mscGsmBcRlpStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpStatsTable.setDescription('This group contains operational attributes that measure performance of the GsmIwfBearerChannel.')
mscGsmBcRlpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcRlpIndex"))
if mibBuilder.loadTexts: mscGsmBcRlpStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpStatsEntry.setDescription('An entry in the mscGsmBcRlpStatsTable.')
mscGsmBcRlpIFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpIFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpIFramesTx.setDescription('This attribute counts the number of valid Information frames transmitted. This count does not include the Information frames discarded. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpIFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpIFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpIFramesRx.setDescription('This attributes counts the number of valid Information (I) frames received. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpFramesRetransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpFramesRetransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpFramesRetransmitted.setDescription('This attribute counts the total number of frames retransmitted. Frames that are not acknowledged within the T1 timer are retransmitted. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpT1AckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpT1AckTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpT1AckTimeouts.setDescription('This attribute counts the total number of T1 timer time-outs. Retransmission of all unacknowledged frames is started after T1 timer expiry. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpInvalidFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpInvalidFrames.setDescription('This attribute counts the number of invalid frames received. These invalid frames are frames received from the mobile which contain errors in the header information. This count does not include the number of frames with Cyclic Redundancy Check (CRC) errors or out-of-sequence Frame Errors. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpCrcErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpCrcErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpCrcErrorsRx.setDescription('This attribute counts the number of frames with Cyclic Redundancy Check (CRC) errors received by the IWF Radio Link Protocol (RLP) entity. CRC is a type of block check character that is very effective in detecting communications errors. CRCs are commonly 16 or 32 bits long (though, in GSM non-transparent services, a 24- bit CRC is used). The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpOutOfSequenceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpOutOfSequenceFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpOutOfSequenceFrames.setDescription('This attribute counts the number of out-of-sequence Information frames received by the IWF Radio Link Protocol (RLP) entity. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpRemoteBusyIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpRemoteBusyIndications.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpRemoteBusyIndications.setDescription('This attribute counts the number of times the mobile Radio Link Protocol (RLP) entity is busy (that is, it is in Asynchronous Balanced Mode (ABM) and is not ready to receive Information frames). The RLP entity is considered to be not ready to receive information frames if the mobile sends a flow control indication RNR (Receive Not Ready). A Receive Ready is sent to the RLP entity when the mobile is ready to receive data. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpLocalBusyIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpLocalBusyIndications.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpLocalBusyIndications.setDescription('This attribute counts the number of times the IWF RLP entity is busy (that is it is in Asynchronous Balanced Mode (ABM) and is not ready to receive Information frames). When the network side introduces flow control towards the mobile and a Receive Not Ready (RNR) is sent to the mobile to stop the mobile from sending any more data frames. A Receive Ready (RR) is sent to the mobile when the RLP entity is ready to receive data. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpIFramesTxDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpIFramesTxDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpIFramesTxDiscarded.setDescription('This attribute counts the number of frames discarded by the IWF. Untransmitted and unacknowledged frames are discarded when a Set Asynchronous Balanced Mode (SABM) or Disconnect (DISC) is received or sent in Asynchronous Balanced Mode (ABM) mode. The counter wraps when it exceeds the maximum value.')
mscGsmBcRlpResetsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 7, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcRlpResetsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcRlpResetsRx.setDescription('This attribute counts the number of resets sent by the mobile. Loss of information may occur when a reset is issued. A reset is issued by the mobile on failure of checkpoint recovery. That is if the mobile does not receive acknowledgment for its information frame, it does checkpoint recovery (it sends a supervisory frame requesting the status of the other entity. If the responding entity fails to respond to N2 of this checkpoint frame a reset is initiated by the originating entity. A reset can also be issued by the mobile during handover where a loss of connection or synchronization occurs. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8))
mscGsmBcV42RowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 1), )
if mibBuilder.loadTexts: mscGsmBcV42RowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42RowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcV42 components.')
mscGsmBcV42RowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV42Index"))
if mibBuilder.loadTexts: mscGsmBcV42RowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42RowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcV42 component.')
mscGsmBcV42RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42RowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42RowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcV42 components. These components cannot be added nor deleted.')
mscGsmBcV42ComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42ComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42ComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcV42StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42StorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42StorageType.setDescription('This variable represents the storage type value for the mscGsmBcV42 tables.')
mscGsmBcV42Index = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcV42Index.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42Index.setDescription('This variable represents the index for the mscGsmBcV42 tables.')
mscGsmBcV42OperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10), )
if mibBuilder.loadTexts: mscGsmBcV42OperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42OperTable.setDescription('This group contains operational attributes which measure V.42 error detection and correction performance.')
mscGsmBcV42OperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV42Index"))
if mibBuilder.loadTexts: mscGsmBcV42OperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42OperEntry.setDescription('An entry in the mscGsmBcV42OperTable.')
mscGsmBcV42ProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notActive", 0), ("disconnected", 1), ("linksetup", 2), ("frameReject", 3), ("disconnectRequest", 4), ("informationTransfer", 5), ("waitingAck", 6))).clone('notActive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42ProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42ProtocolState.setDescription('This attribute indicates the state of V.42. Valid states are: notActive, The V.42 link connection with the Public Switched Telephoned Network) PSTN modem is not established. None of the V.42 functions including the error detection, error correction, and flow control is provided to the data call. This is the initial state of V.42. disconnected, This means that the V42 link is disconnected. linksetup, The V.42 operation enters this state from the disconnected state after the V.42 sends to the PSTN modem a Set Asynchronous Balanced Mode Extended (SABME) frame in an attempt to establish the error control connection with the PSTN modem. frameReject, The V.42 operation enters into this state after it identifies an invalid frame sent by the peer and it sends back a frame reject (FRMR) frame to the peer. disconnectRequest, The V.42 operation enters into this state after it sends to the peer a disconnect (DISC) frame with the attempt to disconnect the V.42 error control link. informationTransfer, The V.42 enters into this state after it receives a UA (unnumbered acknowledgment) frame which the peer sent upon receipt of the SAMBE frame from IWF V.42. Once in this state, the V.42 can exchange data and supervisory information with its peer. waitingAck, The V.42 enters this state after it sends polling enquiry to its peer. The V.42 sends the polling enquiry when it receives a reject frame (REJ) from its peer or either its acknowledgment timer or inactivity timer timed out on the information frames sent out.')
mscGsmBcV42TxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65355))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42TxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42TxN401FrameSize.setDescription('This attribute indicates the current value of parameter N401 for V.42 which is negotiated during Exchange Information (XID). This is the maximum number of octets that can be carried in the information field of an information frame that the IWF V.42 transmits to the Public Switched Telephone Network (PSTN) modem. The IWF V.42 puts this or even smaller size of data into the outgoing information frame. The value used for XID negotiations can be provisioned by component GsmIwfV42 attribute txN401FrameSize.')
mscGsmBcV42RxN401FrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42RxN401FrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42RxN401FrameSize.setDescription('This attribute indicates the current value of N401, that is negotiated during Exchange Identification (XID). This is the maximum number of octets that can be carried in the information field of an information frame received from the Public Switched Telephone Network (PSTN) modem. An incoming information frame carrying data octets more than this size shall be rejected by the IWF V.42. The value used for XID negotiations can be provisioned by component GsmIwfV42 attribute rxN401FrameSize.')
mscGsmBcV42TxKwindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42TxKwindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42TxKwindowSize.setDescription('This attribute indicates the current value of k, that is negotiated during Exchange Identification (XID). This is the size of flow control sliding window used for the information frames that the V.42 transmits to the Public Switched Telephone Network (PSTN) modem. This size governs the maximum number of information frames that the IWF V.42 error-correcting entity can have outstanding (that is, unacknowledged). The value used for XID negotiations can be provisioned by component GsmIwfV42 attribute txKwindowSize.')
mscGsmBcV42RxKwindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42RxKwindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42RxKwindowSize.setDescription('This attribute indicates the current value of k that is negotiated during Exchange Identification (XID). This is the size of flow control sliding window used for information frames transmitted from the Public Switched Telephone Network (PSTN) modem. This size governs the maximum number of information frames that the peer of the IWF V.42 error-correcting entity can have outstanding (that is, unacknowledged). The value used for XID negotiations can be provisioned by component GsmIwfV42 attribute rxKwindowSize.')
mscGsmBcV42StatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11), )
if mibBuilder.loadTexts: mscGsmBcV42StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42StatsTable.setDescription('This group contains statistical attributes that measure the V.42 error detection and correction performance.')
mscGsmBcV42StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV42Index"))
if mibBuilder.loadTexts: mscGsmBcV42StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42StatsEntry.setDescription('An entry in the mscGsmBcV42StatsTable.')
mscGsmBcV42IBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42IBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42IBytesRx.setDescription('This attribute counts the total number of bytes that the V.42 actually received from the Public Switched Telephone Network (PSTN) modem in a data call. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42IBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42IBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42IBytesTx.setDescription('This attribute counts the total number of bytes that the V.42 transmitted to the Public Switched Telephone Network (PSTN) modem in a data call. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42IFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42IFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42IFramesRx.setDescription('This attribute counts the total number of Information (I) frames that the V.42 received from the Public Switched Telephone Network (PSTN) modem in a data call. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42IFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42IFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42IFramesTx.setDescription('This attribute counts the total number of information frames that the V.42 transmitted to the Public Switched Telephone Network (PSTN) modem in a data call. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42FramesRetransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42FramesRetransmitted.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42FramesRetransmitted.setDescription('This attribute counts the total number of frames retransmitted by the IWF V.42 entity in a data call. The V.42 retransmits the same frame when the associated T401 acknowledgment timer time-outs or when a Reject (REJ) supervisory frame has been received from the Public Switched Telephone Network (PSTN) modem. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42T1AckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42T1AckTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42T1AckTimeouts.setDescription("This attribute counts the total number of times that the T401 timer has timed out within a data call. If this timer times-out frequently, the operator may need to adjust the provisional parameter T401 acknowledgment timer to a larger time amount, since every time that V.42 sends out a frame it sets the T401 timer to wait for the peer's acknowledgment of the frame. When the timer times-out and no acknowledgment has been received, the V.42 sends the same frame to its peer. The counter wraps when it exceeds the maximum value.")
mscGsmBcV42RemoteBusyIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42RemoteBusyIndications.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42RemoteBusyIndications.setDescription('This attribute counts the total number of times the Public Switched Telephone Network (PSTN) modem enters a busy state (the IWF has received a Receive Not Ready message) and asks the IWF V.42 not to send Information (I) frames to it until it is ready to receive information frames again (indicated by receipt of a Receive Ready message or a data message). The counter wraps when it exceeds the maximum value.')
mscGsmBcV42LocalBusyIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42LocalBusyIndications.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42LocalBusyIndications.setDescription('This attribute counts the total number of times the IWF V.42 enters in a busy condition and asks the peer to stop sending information frames until it has cleared up from the busy condition. The V.42 enters busy condition when its data buffer is about to be overflowed by the incoming Information (I) frames. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42BadFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42BadFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42BadFramesRx.setDescription("This attribute counts the total number of bad frames the IWF V.42 has received from the Public Switched Telephone Network (PSTN) remote modem within the data call. In this instance, 'bad frames' refer to the V.42 protocol error frames other than the check sequence error frames. The counter wraps when it exceeds the maximum value.")
mscGsmBcV42CrcErrorsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 8, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42CrcErrorsRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42CrcErrorsRx.setDescription('This attribute counts the total number of frames received from the remote Public Switched Telephone Network (PSTN) modem that contain incorrect frame check sequence. A high value signifies the condition of the physical medium is poor. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42bis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9))
mscGsmBcV42bisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 1), )
if mibBuilder.loadTexts: mscGsmBcV42bisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcV42bis components.')
mscGsmBcV42bisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV42bisIndex"))
if mibBuilder.loadTexts: mscGsmBcV42bisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcV42bis component.')
mscGsmBcV42bisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcV42bis components. These components cannot be added nor deleted.')
mscGsmBcV42bisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcV42bisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisStorageType.setDescription('This variable represents the storage type value for the mscGsmBcV42bis tables.')
mscGsmBcV42bisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcV42bisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisIndex.setDescription('This variable represents the index for the mscGsmBcV42bis tables.')
mscGsmBcV42bisOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10), )
if mibBuilder.loadTexts: mscGsmBcV42bisOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisOperTable.setDescription('This group contains operational attributes that measure the performance of V.42bis.')
mscGsmBcV42bisOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV42bisIndex"))
if mibBuilder.loadTexts: mscGsmBcV42bisOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisOperEntry.setDescription('An entry in the mscGsmBcV42bisOperTable.')
mscGsmBcV42bisProtocolModeEncoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("compressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisProtocolModeEncoder.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisProtocolModeEncoder.setDescription('This attribute indicates the current mode of the V.42bis encoder. This mode can be either: transparent - A mode of operation in which compression has been selected but data is being transmitted in uncompressed form. Transparent mode command sequences may be inserted into the data stream. compressed - A mode of operation in which data is transmitted in codewords. The encoder switches between the two modes depending on whether the data coming from the Date Terminal Equipment (DTE) is suitable for compression. The data comression function periodically determines the compressibility of the data based on a comparison of the number of bits required to represent a segment of the data stream before and after compression.')
mscGsmBcV42bisProtocolModeDecoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("transparent", 0), ("compressed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisProtocolModeDecoder.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisProtocolModeDecoder.setDescription('This attribute indicates the current mode of the V.42bis decoder. This mode can be either: transparent - A mode of operation in which compression has been selected but data is being transmitted in uncompressed form. Transparent mode command sequences may be inserted into the data stream. compressed - A mode of operation in which data is transmitted in codewords. The encoder (at the mobile or Public Switched Telephone Network) switches between the two modes depending on whether the data coming from the Date Terminal Equipment (DTE) is suitable for compression. The data comression function periodically determines the compressibility of the data based on a comparison of the number of bits required to represent a segment of the data stream before and after compression.')
mscGsmBcV42bisCompressionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("encode", 1), ("decode", 2), ("both", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisCompressionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisCompressionDirection.setDescription('This attribute indicates the direction in which V.42bis is active, negotiated at link setup by the data link protocol through Exchange Identification (XID) negotiation of parameter P0 (compression direction). The value used for XID negotiations can be provisioned by component GsmIwfV42bisProv attribute compressionDirection. Valid values are: none, No compression is present. encode, The data sent by the IWF to the other entity is compressed. decode, The data received by the IWF from the other entity is compressed. both, The data sent and received by the IWF is compressed.')
mscGsmBcV42bisMaximumCodewords = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisMaximumCodewords.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisMaximumCodewords.setDescription('This attribute indicates the maximum number of codewords in the dictionary negotiated at link setup by the data link protocol by way of the Exchange Identification (XID) negotiation of parameter P1 (number of codewords). The value used for XID negotiations can be provisioned by component GsmIwfV42bisProv attribute maximumCodewords.')
mscGsmBcV42bisMaximumStringSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(6, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisMaximumStringSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisMaximumStringSize.setDescription('This attribute indicates the maximum number of characters allowed in a string represented by a codeword negotiated at link setup by the data link protocol by way of the Exchange Identification (XID) negotiation of parameter P2 (maximum string size). The value used for XID negotiations can be provisioned by component GsmIwfV42bisProv attribute maximumStringSize.')
mscGsmBcV42bisLastDecodeError = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("badStepup", 1), ("codewordEqC1", 2), ("emptyCodeword", 3), ("reservedCommand", 4), ("generalError", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisLastDecodeError.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisLastDecodeError.setDescription('This attribute indicates last error found by the decoder. Error values are: none, No errors found. badStepup, Receipt of STEPUP (step up codeword size) codeword when it would cause C2 (current code word size) to exceed N1 (maximum code word size). codewordEqC1, Receipt of a codeword, at any time, equal to C1 (next empty dictionary entry). emptyCodeword, Receipt of a codeword representing an empty dictionary entry. reservedCommand, Receipt of a reserved command code. generalError, Receipt of any other error. The action taken by V.42bis on detecting an error is provisioned by component GsmIwfV42bis attribute actionOnError.')
mscGsmBcV42bisCompRatioEncoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 7), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisCompRatioEncoder.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisCompRatioEncoder.setDescription('This attribute indicates the number of uncompressed bytes divided by the number of compressed bytes. A value greater than one means that the data is being compressed. This is the compression ratio achieved by the V.42bis encoder running on the Passport. This attribute is relevant for both protocol modes transparent and compressed as the encoder switches between the two modes.')
mscGsmBcV42bisCompRatioDecoder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 10, 1, 8), FixedPoint2().subtype(subtypeSpec=ValueRangeConstraint(0, 30000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisCompRatioDecoder.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisCompRatioDecoder.setDescription('This attribute indicates the number of uncompressed bytes divided by the number of compressed bytes. A value greater than one means that the data is being compressed. This is the compression ratio achieved by the V.42bis encoder at the mobile or Public Switched Telephone Network (PSTN). This attribute is relevant for both protocol modes transparent and compressed as the encoder switches between the two modes.')
mscGsmBcV42bisStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11), )
if mibBuilder.loadTexts: mscGsmBcV42bisStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisStatsTable.setDescription('This group contains operational attributes that measure the performance of V.42bis.')
mscGsmBcV42bisStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcV42bisIndex"))
if mibBuilder.loadTexts: mscGsmBcV42bisStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisStatsEntry.setDescription('An entry in the mscGsmBcV42bisStatsTable.')
mscGsmBcV42bisModeChangesEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisModeChangesEncode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisModeChangesEncode.setDescription('This attribute counts the number of mode changes (from transparent to compressed or from compressed to transparent) by the encoder. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42bisModeChangesDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisModeChangesDecode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisModeChangesDecode.setDescription('This attribute counts the number of mode changes (from transparent to compressed or from compressed to transparent) by the decoder. The mode changes are determined by the encoder at the mobile or the Public Switched Telephone Network (PSTN). The counter wraps when it exceeds the maximum value.')
mscGsmBcV42bisResetsEncode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisResetsEncode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisResetsEncode.setDescription('This attribute counts the number of resets sent by the encoder. A reset is a command code sent by the encoder to force dictionary reinitialization. The counter wraps when it exceeds the maximum value.')
mscGsmBcV42bisResetsDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisResetsDecode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisResetsDecode.setDescription('This attribute counts the number of resets received by the decoder. A reset is a command code sent by the encoder to force dictionary reinitialization. The resets of the decoder are determined by the encoder at the mobile or Public Switched Telephone Network (PSTN). The counter wraps when it exceeds the maximum value.')
mscGsmBcV42bisReInitializations = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisReInitializations.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisReInitializations.setDescription('This attribute counts the number of times V.42bis is reinitialized because of a destructive break (a destructive break is a break that causes data to be discarded) occurring on the error-corrected connection initiatated by either the mobile or Public Switched Telephone Network (PSTN). The counter wraps when it exceeds the maximum value.')
mscGsmBcV42bisErrorsInDecode = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 9, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcV42bisErrorsInDecode.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcV42bisErrorsInDecode.setDescription('This attribute counts the number of errors found by the decoder. The errors could be any of the following: 1.Receipt of STEPUP (step up codeword size) codeword when it would cause C2 (current code word size) to exceed N1 (maximum code word size). 2. Receipt of a codeword, at any time, equal to C1 (next empty dictionary entry). 3. Receipt of a codeword representing an empty dictionary entry. 4. Receipt of a reserved command code. 5. Receipt of any other error. The counter wraps when it exceeds the maximum value. The action taken by V.42bis on detecting any of these errors is provisioned by component GsmIwfV42bis attribute actionOnError.')
mscGsmBcL2RCop = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10))
mscGsmBcL2RCopRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 1), )
if mibBuilder.loadTexts: mscGsmBcL2RCopRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcL2RCop components.')
mscGsmBcL2RCopRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcL2RCopIndex"))
if mibBuilder.loadTexts: mscGsmBcL2RCopRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcL2RCop component.')
mscGsmBcL2RCopRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcL2RCop components. These components cannot be added nor deleted.')
mscGsmBcL2RCopComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcL2RCopStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopStorageType.setDescription('This variable represents the storage type value for the mscGsmBcL2RCop tables.')
mscGsmBcL2RCopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcL2RCopIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopIndex.setDescription('This variable represents the index for the mscGsmBcL2RCop tables.')
mscGsmBcL2RCopOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 10), )
if mibBuilder.loadTexts: mscGsmBcL2RCopOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopOperTable.setDescription('This group contains operational attributes that measure the performance of L2RCop.')
mscGsmBcL2RCopOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcL2RCopIndex"))
if mibBuilder.loadTexts: mscGsmBcL2RCopOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopOperEntry.setDescription('An entry in the mscGsmBcL2RCopOperTable.')
mscGsmBcL2RCopFlowControlStateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopFlowControlStateTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopFlowControlStateTx.setDescription('This attribute indicates whether flow control is active in the transmit direction (towards the network side) for Layer2 Relay.')
mscGsmBcL2RCopFlowControlStateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopFlowControlStateRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopFlowControlStateRx.setDescription('This attribute indicates whether flow control is active in the receive direction (towards the mobile) for Layer2 Relay.')
mscGsmBcL2RCopStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 11), )
if mibBuilder.loadTexts: mscGsmBcL2RCopStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopStatsTable.setDescription('This group contains operational attributes that measure the performance of L2RCop.')
mscGsmBcL2RCopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcL2RCopIndex"))
if mibBuilder.loadTexts: mscGsmBcL2RCopStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopStatsEntry.setDescription('An entry in the mscGsmBcL2RCopStatsTable.')
mscGsmBcL2RCopBytesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopBytesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopBytesTx.setDescription('This attribute counts the number of data bytes relayed by Layer2 Relay in the transmit direction (towards the network). The counter wraps when it exceeds the maximum value.')
mscGsmBcL2RCopBytesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopBytesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopBytesRx.setDescription('This attribute counts the number of data bytes relayed by Layer2 Relay in the receive direction (towards the mobile). The counter wraps when it exceeds the maximum value.')
mscGsmBcL2RCopBreakCountRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopBreakCountRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopBreakCountRx.setDescription('This attribute counts the number of breaks received from the mobile. A break received from the mobile results in the V.42bis function being reset and the break condition forwarded to the network. The counter wraps when it exceeds the maximum value.')
mscGsmBcL2RCopBreakCountTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 10, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcL2RCopBreakCountTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcL2RCopBreakCountTx.setDescription('This attribute counts the number of breaks transmitted to the mobile (a break was received from the network). A break received from the network results in the V.42bis function being reset and the break condition forwarded to the mobile. The counter wraps when it exceeds the maximum value.')
mscGsmBcUpperRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11))
mscGsmBcUpperRelayRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 1), )
if mibBuilder.loadTexts: mscGsmBcUpperRelayRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayRowStatusTable.setDescription('This entry controls the addition and deletion of mscGsmBcUpperRelay components.')
mscGsmBcUpperRelayRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcUpperRelayIndex"))
if mibBuilder.loadTexts: mscGsmBcUpperRelayRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayRowStatusEntry.setDescription('A single entry in the table represents a single mscGsmBcUpperRelay component.')
mscGsmBcUpperRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscGsmBcUpperRelay components. These components cannot be added nor deleted.')
mscGsmBcUpperRelayComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscGsmBcUpperRelayStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayStorageType.setDescription('This variable represents the storage type value for the mscGsmBcUpperRelay tables.')
mscGsmBcUpperRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscGsmBcUpperRelayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayIndex.setDescription('This variable represents the index for the mscGsmBcUpperRelay tables.')
mscGsmBcUpperRelayOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 10), )
if mibBuilder.loadTexts: mscGsmBcUpperRelayOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayOperTable.setDescription('This group contains operational attributes that measure the performance of the UpperRelay.')
mscGsmBcUpperRelayOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcUpperRelayIndex"))
if mibBuilder.loadTexts: mscGsmBcUpperRelayOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayOperEntry.setDescription('An entry in the mscGsmBcUpperRelayOperTable.')
mscGsmBcUpperRelayBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayBufferSize.setDescription('This attribute indicates the size of the transmit and receive flow control buffers.')
mscGsmBcUpperRelayFlowControlStateTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayFlowControlStateTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayFlowControlStateTx.setDescription('This attribute indicates whether the transmit flow control is active or not.')
mscGsmBcUpperRelayFlowControlStateRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("active", 0), ("inactive", 1))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayFlowControlStateRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayFlowControlStateRx.setDescription('This attribute indicates whether the receive flow control is active or not.')
mscGsmBcUpperRelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 11), )
if mibBuilder.loadTexts: mscGsmBcUpperRelayStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayStatsTable.setDescription('This group contains operational attributes that measure the performance of the UpperRelay.')
mscGsmBcUpperRelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcTrunkGrpIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcCicIndex"), (0, "Nortel-MsCarrier-MscPassport-GsmIwfMIB", "mscGsmBcUpperRelayIndex"))
if mibBuilder.loadTexts: mscGsmBcUpperRelayStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayStatsEntry.setDescription('An entry in the mscGsmBcUpperRelayStatsTable.')
mscGsmBcUpperRelayFramesTx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayFramesTx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayFramesTx.setDescription('This attribute counts the number of frames that are sent in the transmit direction. The counter wraps when it exceeds the maximum value.')
mscGsmBcUpperRelayFramesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayFramesRx.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayFramesRx.setDescription('This attribute counts the number of frames that are sent in the receive direction. The counter wraps when it exceeds the maximum value.')
mscGsmBcUpperRelayUnacknowledgedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 128, 11, 11, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscGsmBcUpperRelayUnacknowledgedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: mscGsmBcUpperRelayUnacknowledgedFrames.setDescription('This attribute indicates the number of current frames sent that have not been acknowledged.')
gsmIwfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 1))
gsmIwfGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 1, 1))
gsmIwfGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 1, 1, 3))
gsmIwfGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 1, 1, 3, 2))
gsmIwfCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 3))
gsmIwfCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 3, 1))
gsmIwfCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 3, 1, 3))
gsmIwfCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 129, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-GsmIwfMIB", mscGsmCsCallsSetup=mscGsmCsCallsSetup, mscGsmBcMaxUserDataRate=mscGsmBcMaxUserDataRate, mscGsmCsCurrentCalls=mscGsmCsCurrentCalls, mscGsmCsCallsActivated=mscGsmCsCallsActivated, mscGsmBcL2RCopOperEntry=mscGsmBcL2RCopOperEntry, mscGsmBcV42bisModeChangesEncode=mscGsmBcV42bisModeChangesEncode, mscGsmCsV42bisMaximumCodewords=mscGsmCsV42bisMaximumCodewords, mscGsmBcFramerStatsTable=mscGsmBcFramerStatsTable, mscGsmCsErroredMipFrames=mscGsmCsErroredMipFrames, mscGsmBcV42bisRowStatus=mscGsmBcV42bisRowStatus, mscGsmBcV110BytesRx=mscGsmBcV110BytesRx, mscGsmBcV42bisOperTable=mscGsmBcV42bisOperTable, mscGsmBcOperTable=mscGsmBcOperTable, mscGsmBcV42OperEntry=mscGsmBcV42OperEntry, gsmIwfGroupCA=gsmIwfGroupCA, mscGsmBcFramerFramingType=mscGsmBcFramerFramingType, mscGsmBcL2RCopRowStatusEntry=mscGsmBcL2RCopRowStatusEntry, mscGsmBcV110=mscGsmBcV110, mscGsmBcV42RxKwindowSize=mscGsmBcV42RxKwindowSize, mscGsmBcLayer1ComponentName=mscGsmBcLayer1ComponentName, mscGsmBcL2RCopBreakCountRx=mscGsmBcL2RCopBreakCountRx, mscGsmBcFaxMessageFramesRx=mscGsmBcFaxMessageFramesRx, mscGsmBcFaxBcsFramesRx=mscGsmBcFaxBcsFramesRx, mscGsmCsChannelModeModifyRequests=mscGsmCsChannelModeModifyRequests, mscGsmBcV110StatsTable=mscGsmBcV110StatsTable, mscGsmBcLayer1UnderRunsTx=mscGsmBcLayer1UnderRunsTx, mscGsmBcRlpProtocolState=mscGsmBcRlpProtocolState, mscGsmCsRlpN2RetransmitCount=mscGsmCsRlpN2RetransmitCount, mscGsmBcUpperRelayFlowControlStateRx=mscGsmBcUpperRelayFlowControlStateRx, mscGsmBcFaxStorageType=mscGsmBcFaxStorageType, mscGsmBcUpperRelayOperEntry=mscGsmBcUpperRelayOperEntry, mscGsmBcUpperRelayRowStatus=mscGsmBcUpperRelayRowStatus, mscGsmBcRlpIFramesTx=mscGsmBcRlpIFramesTx, mscGsmBcFramerStateTable=mscGsmBcFramerStateTable, mscGsmCsV42bisCompressionDirection=mscGsmCsV42bisCompressionDirection, mscGsmBcRlpOperEntry=mscGsmBcRlpOperEntry, mscGsmCsV42bisIndex=mscGsmCsV42bisIndex, mscGsmBcStateEntry=mscGsmBcStateEntry, mscGsmBcDataBits=mscGsmBcDataBits, mscGsmBcStopBits=mscGsmBcStopBits, mscGsmCsRlpRowStatusEntry=mscGsmCsRlpRowStatusEntry, mscGsmCsLpAssignedCapacity=mscGsmCsLpAssignedCapacity, mscGsmCsFaxProvEntry=mscGsmCsFaxProvEntry, mscGsmBcV42bisModeChangesDecode=mscGsmBcV42bisModeChangesDecode, mscGsmBcConnectionType=mscGsmBcConnectionType, mscGsmBcLayer1FramesDiscarded=mscGsmBcLayer1FramesDiscarded, mscGsmBcV42bisResetsDecode=mscGsmBcV42bisResetsDecode, mscGsmCsLpComponentName=mscGsmCsLpComponentName, mscGsmBcV110RowStatusTable=mscGsmBcV110RowStatusTable, mscGsmBcFaxBcsFrameErrors=mscGsmBcFaxBcsFrameErrors, mscGsmBcLayer1FramesTx=mscGsmBcLayer1FramesTx, mscGsmBcV42BadFramesRx=mscGsmBcV42BadFramesRx, mscGsmCsV42ComponentName=mscGsmCsV42ComponentName, mscGsmBcRlpT1AckTimer=mscGsmBcRlpT1AckTimer, mscGsmBcRlpT1AckTimeouts=mscGsmBcRlpT1AckTimeouts, mscGsmBcModemOperTable=mscGsmBcModemOperTable, mscGsmBcV110RowStatus=mscGsmBcV110RowStatus, mscGsmCsV42bisRowStatusTable=mscGsmCsV42bisRowStatusTable, mscGsmBcLastResponseCode=mscGsmBcLastResponseCode, mscGsmBcUpperRelayRowStatusEntry=mscGsmBcUpperRelayRowStatusEntry, mscGsmBcFramerOctetFromIf=mscGsmBcFramerOctetFromIf, mscGsmBcFramerRowStatusEntry=mscGsmBcFramerRowStatusEntry, mscGsmBcRlpIwfToMsWindowSize=mscGsmBcRlpIwfToMsWindowSize, mscGsmBcV42bis=mscGsmBcV42bis, mscGsmCsStateTable=mscGsmCsStateTable, mscGsmBcV42RowStatusEntry=mscGsmBcV42RowStatusEntry, mscGsmCsV42bisProvTable=mscGsmCsV42bisProvTable, mscGsmBcFramerIndex=mscGsmBcFramerIndex, mscGsmBcV42LocalBusyIndications=mscGsmBcV42LocalBusyIndications, mscGsmBcRlpResetsRx=mscGsmBcRlpResetsRx, mscGsmBcUpperRelayComponentName=mscGsmBcUpperRelayComponentName, mscGsmCsRlpIndex=mscGsmCsRlpIndex, mscGsmBcUpperRelayOperTable=mscGsmBcUpperRelayOperTable, mscGsmBcFaxOperEntry=mscGsmBcFaxOperEntry, mscGsmBcRlpStatsEntry=mscGsmBcRlpStatsEntry, gsmIwfGroupCA02A=gsmIwfGroupCA02A, mscGsmBcRlpFramesRetransmitted=mscGsmBcRlpFramesRetransmitted, mscGsmCsModemStorageType=mscGsmCsModemStorageType, mscGsmBcRlpFrameSize=mscGsmBcRlpFrameSize, mscGsmBcL2RCopFlowControlStateTx=mscGsmBcL2RCopFlowControlStateTx, mscGsmBcMateBearerChannel=mscGsmBcMateBearerChannel, mscGsmBcFaxBcsFramesTx=mscGsmBcFaxBcsFramesTx, mscGsmBcV42bisProtocolModeEncoder=mscGsmBcV42bisProtocolModeEncoder, mscGsmCsV42=mscGsmCsV42, mscGsmBcLayer1OverRunsRx=mscGsmBcLayer1OverRunsRx, mscGsmBcFaxChannelModeModify=mscGsmBcFaxChannelModeModify, mscGsmCsModem=mscGsmCsModem, mscGsmCsComponentName=mscGsmCsComponentName, gsmIwfGroupCA02=gsmIwfGroupCA02, mscGsmCsV42TxN401FrameSize=mscGsmCsV42TxN401FrameSize, mscGsmBcV110OperTable=mscGsmBcV110OperTable, mscGsmBcTrunkGrpIndex=mscGsmBcTrunkGrpIndex, mscGsmBcV110LargeFrameErrorsRx=mscGsmBcV110LargeFrameErrorsRx, mscGsmBcRlpOutOfSequenceFrames=mscGsmBcRlpOutOfSequenceFrames, mscGsmCsStateEntry=mscGsmCsStateEntry, mscGsmBcLayer1ActiveMode=mscGsmBcLayer1ActiveMode, mscGsmBcFramerInterfaceName=mscGsmBcFramerInterfaceName, mscGsmBcRlpComponentName=mscGsmBcRlpComponentName, mscGsmBcFaxPagesRxFromMobile=mscGsmBcFaxPagesRxFromMobile, mscGsmBcFramerCrcErrors=mscGsmBcFramerCrcErrors, mscGsmCsV42bisComponentName=mscGsmCsV42bisComponentName, mscGsmBcFramerUnderruns=mscGsmBcFramerUnderruns, mscGsmBcLayer1Index=mscGsmBcLayer1Index, mscGsmBcFaxMessageRate=mscGsmBcFaxMessageRate, mscGsmBcV42IFramesRx=mscGsmBcV42IFramesRx, mscGsmBcFramerRowStatus=mscGsmBcFramerRowStatus, mscGsmBcV110StorageType=mscGsmBcV110StorageType, mscGsmBcRowStatusTable=mscGsmBcRowStatusTable, mscGsmBcModemStatsTable=mscGsmBcModemStatsTable, mscGsmBcUpperRelayStatsTable=mscGsmBcUpperRelayStatsTable, mscGsmCsV42ProvTable=mscGsmCsV42ProvTable, mscGsmBcStateTable=mscGsmBcStateTable, mscGsmCsRowStatusTable=mscGsmCsRowStatusTable, mscGsmCsRlpRowStatus=mscGsmCsRlpRowStatus, mscGsmBcL2RCopBytesTx=mscGsmBcL2RCopBytesTx, mscGsmCsLpRowStatus=mscGsmCsLpRowStatus, mscGsmBcV42OperTable=mscGsmBcV42OperTable, mscGsmBcComponentName=mscGsmBcComponentName, mscGsmBcV42bisRowStatusEntry=mscGsmBcV42bisRowStatusEntry, mscGsmBcParity=mscGsmBcParity, mscGsmBcV42bisCompRatioEncoder=mscGsmBcV42bisCompRatioEncoder, mscGsmBcRlpOperTable=mscGsmBcRlpOperTable, mscGsmBcLayer1RowStatusTable=mscGsmBcLayer1RowStatusTable, mscGsmCsStatsTable=mscGsmCsStatsTable, mscGsmBcFaxOperTable=mscGsmBcFaxOperTable, mscGsmBcRlpIFramesRx=mscGsmBcRlpIFramesRx, mscGsmBcL2RCopStatsEntry=mscGsmBcL2RCopStatsEntry, mscGsmCsV42bisProvEntry=mscGsmCsV42bisProvEntry, mscGsmCsVoiceLaw=mscGsmCsVoiceLaw, mscGsmBcModemProtocolState=mscGsmBcModemProtocolState, mscGsmBcUpperRelayRowStatusTable=mscGsmBcUpperRelayRowStatusTable, mscGsmBcL2RCopIndex=mscGsmBcL2RCopIndex, mscGsmCsStatusMessagesRx=mscGsmCsStatusMessagesRx, mscGsmBcL2RCopBytesRx=mscGsmBcL2RCopBytesRx, mscGsmBcUpperRelayStorageType=mscGsmBcUpperRelayStorageType, mscGsmBcFramerNonOctetErrors=mscGsmBcFramerNonOctetErrors, mscGsmBcV110FramesDiscarded=mscGsmBcV110FramesDiscarded, mscGsmBcV42bisComponentName=mscGsmBcV42bisComponentName, mscGsmBcCidDataTable=mscGsmBcCidDataTable, mscGsmBcV42bisMaximumStringSize=mscGsmBcV42bisMaximumStringSize, mscGsmBcFaxMessageFramesTx=mscGsmBcFaxMessageFramesTx, mscGsmBcLayer1LrcErrorsTx=mscGsmBcLayer1LrcErrorsTx, mscGsmBcV42TxN401FrameSize=mscGsmBcV42TxN401FrameSize, gsmIwfGroup=gsmIwfGroup, mscGsmCsV42bisMaximumStringSize=mscGsmCsV42bisMaximumStringSize, mscGsmBc=mscGsmBc, mscGsmBcV42bisProtocolModeDecoder=mscGsmBcV42bisProtocolModeDecoder, mscGsmBcRlpIFramesTxDiscarded=mscGsmBcRlpIFramesTxDiscarded, mscGsmBcModemRowStatus=mscGsmBcModemRowStatus, mscGsmCsAdminState=mscGsmCsAdminState, mscGsmCsV42bisStorageType=mscGsmCsV42bisStorageType, mscGsmCsVirtualRouterName=mscGsmCsVirtualRouterName, mscGsmBcV110ComponentName=mscGsmBcV110ComponentName, mscGsmBcV110Index=mscGsmBcV110Index, mscGsmBcFaxProtocolState=mscGsmBcFaxProtocolState, mscGsmCsV42bisRowStatusEntry=mscGsmCsV42bisRowStatusEntry, mscGsmBcRlpRowStatus=mscGsmBcRlpRowStatus, mscGsmBcFaxRowStatusTable=mscGsmBcFaxRowStatusTable, mscGsmBcFramerUsageState=mscGsmBcFramerUsageState, mscGsmBcModemAsyncMode=mscGsmBcModemAsyncMode, mscGsmBcV42ProtocolState=mscGsmBcV42ProtocolState, mscGsmBcModemOutbandBreak=mscGsmBcModemOutbandBreak, mscGsmCsProvTable=mscGsmCsProvTable, mscGsmBcV110StatsEntry=mscGsmBcV110StatsEntry, mscGsmBcV110OverRunsRx=mscGsmBcV110OverRunsRx, mscGsmCsOperationalState=mscGsmCsOperationalState, mscGsmCsRlpProvEntry=mscGsmCsRlpProvEntry, mscGsmBcFlowControl=mscGsmBcFlowControl, mscGsmBcRlpRemoteBusyIndications=mscGsmBcRlpRemoteBusyIndications, mscGsmBcUpperRelay=mscGsmBcUpperRelay, mscGsmBcV42bisCompRatioDecoder=mscGsmBcV42bisCompRatioDecoder, mscGsmBcFramerLinkEntry=mscGsmBcFramerLinkEntry, mscGsmBcV42RowStatus=mscGsmBcV42RowStatus, mscGsmCsRowStatusEntry=mscGsmCsRowStatusEntry, mscGsmCsRlpT2AckDelayTimer=mscGsmCsRlpT2AckDelayTimer, mscGsmBcLayer1DataRate=mscGsmBcLayer1DataRate, mscGsmCsRlp=mscGsmCsRlp, mscGsmCsLpOperEntry=mscGsmCsLpOperEntry, mscGsmBcV110FramesTx=mscGsmBcV110FramesTx, mscGsmBcModemRowStatusEntry=mscGsmBcModemRowStatusEntry, mscGsmBcV110IntermediateRate=mscGsmBcV110IntermediateRate, mscGsmCsFaxComponentName=mscGsmCsFaxComponentName, mscGsmBcL2RCopRowStatusTable=mscGsmBcL2RCopRowStatusTable, mscGsmBcL2RCopFlowControlStateRx=mscGsmBcL2RCopFlowControlStateRx, mscGsmBcMipState=mscGsmBcMipState, mscGsmCsLpIndex=mscGsmCsLpIndex, mscGsmBcStorageType=mscGsmBcStorageType, gsmIwfMIB=gsmIwfMIB, mscGsmBcLayer1NonOctetErrorsRx=mscGsmBcLayer1NonOctetErrorsRx, mscGsmCs=mscGsmCs, mscGsmBcFaxStatsEntry=mscGsmBcFaxStatsEntry, mscGsmBcRlpHighestVersion=mscGsmBcRlpHighestVersion, mscGsmBcV42bisLastDecodeError=mscGsmBcV42bisLastDecodeError, gsmIwfCapabilitiesCA=gsmIwfCapabilitiesCA, mscGsmBcV110NonOctetErrorsRx=mscGsmBcV110NonOctetErrorsRx, gsmIwfCapabilitiesCA02=gsmIwfCapabilitiesCA02, mscGsmCsCidDataTable=mscGsmCsCidDataTable, mscGsmBcFaxActiveMode=mscGsmBcFaxActiveMode, gsmIwfCapabilitiesCA02A=gsmIwfCapabilitiesCA02A, mscGsmCsFaxStorageType=mscGsmCsFaxStorageType, mscGsmBcRowStatus=mscGsmBcRowStatus, mscGsmBcFramerProvEntry=mscGsmBcFramerProvEntry, mscGsmBcModemRowStatusTable=mscGsmBcModemRowStatusTable, mscGsmBcFax=mscGsmBcFax, mscGsmBcLayer1RowStatusEntry=mscGsmBcLayer1RowStatusEntry, mscGsmBcFaxPagesTxToMobile=mscGsmBcFaxPagesTxToMobile, mscGsmCsMscIpAddress=mscGsmCsMscIpAddress, mscGsmBcOperationalState=mscGsmBcOperationalState, mscGsmCsV42RowStatusTable=mscGsmCsV42RowStatusTable, mscGsmBcLayer1=mscGsmBcLayer1, mscGsmBcV42ComponentName=mscGsmBcV42ComponentName, mscGsmBcFramerLrcErrors=mscGsmBcFramerLrcErrors, mscGsmCsTrunkGrpIndex=mscGsmCsTrunkGrpIndex, mscGsmCsModemComponentName=mscGsmCsModemComponentName, mscGsmCsLpOperTable=mscGsmCsLpOperTable, mscGsmCsV42bisRowStatus=mscGsmCsV42bisRowStatus, mscGsmBcV42bisCompressionDirection=mscGsmBcV42bisCompressionDirection, mscGsmBcFaxComponentName=mscGsmBcFaxComponentName, mscGsmBcUsageState=mscGsmBcUsageState, mscGsmCsRlpProvTable=mscGsmCsRlpProvTable, mscGsmBcFramerOperationalState=mscGsmBcFramerOperationalState, mscGsmCsFaxRowStatus=mscGsmCsFaxRowStatus, mscGsmCsLpRowStatusTable=mscGsmCsLpRowStatusTable, mscGsmBcV42CrcErrorsRx=mscGsmBcV42CrcErrorsRx, mscGsmBcRlpMsToIwfWindowSize=mscGsmBcRlpMsToIwfWindowSize, mscGsmCsV42RowStatusEntry=mscGsmCsV42RowStatusEntry, mscGsmBcModemBytesTx=mscGsmBcModemBytesTx, mscGsmBcModemOutbandFlowControl=mscGsmBcModemOutbandFlowControl, mscGsmBcL2RCopOperTable=mscGsmBcL2RCopOperTable, mscGsmBcLayer1IntermediateRate=mscGsmBcLayer1IntermediateRate, mscGsmCsModemIndex=mscGsmCsModemIndex, mscGsmCsV42TxKwindowSize=mscGsmCsV42TxKwindowSize, mscGsmBcV110LrcErrorsTx=mscGsmBcV110LrcErrorsTx, mscGsmBcRlpCrcErrorsRx=mscGsmBcRlpCrcErrorsRx, gsmIwfCapabilities=gsmIwfCapabilities, mscGsmBcV110BytesTx=mscGsmBcV110BytesTx, mscGsmBcV42bisReInitializations=mscGsmBcV42bisReInitializations, mscGsmCsStatsEntry=mscGsmCsStatsEntry, mscGsmBcUpperRelayStatsEntry=mscGsmBcUpperRelayStatsEntry, mscGsmCsV42RxN401FrameSize=mscGsmCsV42RxN401FrameSize, mscGsmCsCustomerIdentifier=mscGsmCsCustomerIdentifier, mscGsmCsCallsReleasedAbnormal=mscGsmCsCallsReleasedAbnormal, mscGsmBcModemRate=mscGsmBcModemRate, mscGsmBcFramer=mscGsmBcFramer, mscGsmBcFramerLinkTable=mscGsmBcFramerLinkTable, mscGsmBcV42RemoteBusyIndications=mscGsmBcV42RemoteBusyIndications, mscGsmBcLayer1Connection=mscGsmBcLayer1Connection, mscGsmCsLp=mscGsmCsLp, mscGsmBcRlpLocalBusyIndications=mscGsmBcRlpLocalBusyIndications, mscGsmBcV42StatsEntry=mscGsmBcV42StatsEntry, mscGsmBcFaxStatsTable=mscGsmBcFaxStatsTable, mscGsmBcFramerStatsEntry=mscGsmBcFramerStatsEntry, mscGsmBcModemStatsEntry=mscGsmBcModemStatsEntry, mscGsmBcV110RowStatusEntry=mscGsmBcV110RowStatusEntry)
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-GsmIwfMIB", mscGsmBcFramerProvTable=mscGsmBcFramerProvTable, mscGsmBcUpperRelayFramesTx=mscGsmBcUpperRelayFramesTx, mscGsmBcV42FramesRetransmitted=mscGsmBcV42FramesRetransmitted, mscGsmCsV42T403IdleProbeTimer=mscGsmCsV42T403IdleProbeTimer, mscGsmBcL2RCopRowStatus=mscGsmBcL2RCopRowStatus, mscGsmBcV42IFramesTx=mscGsmBcV42IFramesTx, mscGsmBcV110FramesRx=mscGsmBcV110FramesRx, mscGsmBcV42bisOperEntry=mscGsmBcV42bisOperEntry, mscGsmBcV42bisErrorsInDecode=mscGsmBcV42bisErrorsInDecode, mscGsmBcFramerOverruns=mscGsmBcFramerOverruns, mscGsmBcRlpRowStatusTable=mscGsmBcRlpRowStatusTable, mscGsmBcCallType=mscGsmBcCallType, mscGsmBcModemBytesRx=mscGsmBcModemBytesRx, mscGsmBcModemIndex=mscGsmBcModemIndex, mscGsmBcRlpRowStatusEntry=mscGsmBcRlpRowStatusEntry, mscGsmBcV42bisResetsEncode=mscGsmBcV42bisResetsEncode, mscGsmCsFaxIndex=mscGsmCsFaxIndex, mscGsmBcLayer1BytesRx=mscGsmBcLayer1BytesRx, mscGsmBcRlpIndex=mscGsmBcRlpIndex, mscGsmBcRowStatusEntry=mscGsmBcRowStatusEntry, mscGsmCsCallsRequested=mscGsmCsCallsRequested, mscGsmBcFaxIndex=mscGsmBcFaxIndex, mscGsmCsV42bisActionOnError=mscGsmCsV42bisActionOnError, mscGsmBcV42bisStatsEntry=mscGsmBcV42bisStatsEntry, mscGsmBcModemAutobaud=mscGsmBcModemAutobaud, mscGsmCsStorageType=mscGsmCsStorageType, mscGsmCsRlpRowStatusTable=mscGsmCsRlpRowStatusTable, mscGsmBcFramerStateEntry=mscGsmBcFramerStateEntry, mscGsmBcLayer1LargeFrameErrorsRx=mscGsmBcLayer1LargeFrameErrorsRx, mscGsmCsLpConfiguredBearerChannels=mscGsmCsLpConfiguredBearerChannels, mscGsmBcLayer1FramesRx=mscGsmBcLayer1FramesRx, mscGsmBcFaxRowStatusEntry=mscGsmBcFaxRowStatusEntry, mscGsmBcFramerComponentName=mscGsmBcFramerComponentName, mscGsmBcUpperRelayBufferSize=mscGsmBcUpperRelayBufferSize, mscGsmCsLpActiveCalls=mscGsmCsLpActiveCalls, mscGsmBcV42=mscGsmBcV42, mscGsmBcL2RCopBreakCountTx=mscGsmBcL2RCopBreakCountTx, mscGsmBcModemAlgorithmInUse=mscGsmBcModemAlgorithmInUse, mscGsmBcModemComponentName=mscGsmBcModemComponentName, mscGsmCsModemRowStatusTable=mscGsmCsModemRowStatusTable, mscGsmBcV42bisIndex=mscGsmBcV42bisIndex, mscGsmBcRlpN2RetransmitCount=mscGsmBcRlpN2RetransmitCount, mscGsmCsFax=mscGsmCsFax, mscGsmBcFramerFrmFromIf=mscGsmBcFramerFrmFromIf, mscGsmCsRlpIwfToMsWindowSize=mscGsmCsRlpIwfToMsWindowSize, mscGsmCsV42ProvEntry=mscGsmCsV42ProvEntry, mscGsmBcLayer1StatsTable=mscGsmBcLayer1StatsTable, mscGsmCsRlpT1AckTimer=mscGsmCsRlpT1AckTimer, mscGsmCsV42T402AckDelayTimer=mscGsmCsV42T402AckDelayTimer, mscGsmBcV42IBytesTx=mscGsmBcV42IBytesTx, mscGsmBcModemToUpperFlowControlActive=mscGsmBcModemToUpperFlowControlActive, mscGsmBcV42StorageType=mscGsmBcV42StorageType, mscGsmBcLayer1RowStatus=mscGsmBcLayer1RowStatus, mscGsmBcOperEntry=mscGsmBcOperEntry, mscGsmBcV110UnderRunsTx=mscGsmBcV110UnderRunsTx, mscGsmBcV42Index=mscGsmBcV42Index, mscGsmBcCidDataEntry=mscGsmBcCidDataEntry, mscGsmBcModemTraining=mscGsmBcModemTraining, mscGsmBcFramerFrmToIf=mscGsmBcFramerFrmToIf, mscGsmCsRlpComponentName=mscGsmCsRlpComponentName, mscGsmCsRlpMsToIwfWindowSize=mscGsmCsRlpMsToIwfWindowSize, mscGsmBcRlp=mscGsmBcRlp, mscGsmBcModemToDspFlowControlActive=mscGsmBcModemToDspFlowControlActive, mscGsmBcV110OperEntry=mscGsmBcV110OperEntry, mscGsmBcV42IBytesRx=mscGsmBcV42IBytesRx, mscGsmCsUsageState=mscGsmCsUsageState, mscGsmBcL2RCop=mscGsmBcL2RCop, mscGsmBcModemOperEntry=mscGsmBcModemOperEntry, mscGsmCsFaxProvTable=mscGsmCsFaxProvTable, mscGsmBcFramerStorageType=mscGsmBcFramerStorageType, mscGsmCsV42N400RetransLimit=mscGsmCsV42N400RetransLimit, mscGsmCsV42Index=mscGsmCsV42Index, mscGsmBcCicIndex=mscGsmBcCicIndex, mscGsmCsFaxT1CalledToneTimer=mscGsmCsFaxT1CalledToneTimer, mscGsmBcV42bisMaximumCodewords=mscGsmBcV42bisMaximumCodewords, mscGsmCsProvEntry=mscGsmCsProvEntry, mscGsmBcFramerRowStatusTable=mscGsmBcFramerRowStatusTable, mscGsmBcV42T1AckTimeouts=mscGsmBcV42T1AckTimeouts, mscGsmBcL2RCopComponentName=mscGsmBcL2RCopComponentName, mscGsmCsV42bis=mscGsmCsV42bis, mscGsmBcRlpInvalidFrames=mscGsmBcRlpInvalidFrames, mscGsmCsV42T401AckTimer=mscGsmCsV42T401AckTimer, mscGsmBcUpperRelayUnacknowledgedFrames=mscGsmBcUpperRelayUnacknowledgedFrames, mscGsmBcL2RCopStatsTable=mscGsmBcL2RCopStatsTable, mscGsmBcV110DataRate=mscGsmBcV110DataRate, mscGsmBcV42bisStorageType=mscGsmBcV42bisStorageType, mscGsmBcLayer1StorageType=mscGsmBcLayer1StorageType, mscGsmBcLayer1StatsEntry=mscGsmBcLayer1StatsEntry, mscGsmBcModem=mscGsmBcModem, mscGsmCsV42RowStatus=mscGsmCsV42RowStatus, mscGsmBcLayer1OperTable=mscGsmBcLayer1OperTable, mscGsmCsChannelConfigChanges=mscGsmCsChannelConfigChanges, mscGsmBcAdminState=mscGsmBcAdminState, mscGsmCsFaxRowStatusTable=mscGsmCsFaxRowStatusTable, mscGsmBcL2RCopStorageType=mscGsmBcL2RCopStorageType, mscGsmCsModemRowStatus=mscGsmCsModemRowStatus, mscGsmCsLpRowStatusEntry=mscGsmCsLpRowStatusEntry, mscGsmBcUpperRelayIndex=mscGsmBcUpperRelayIndex, mscGsmCsCidDataEntry=mscGsmCsCidDataEntry, mscGsmCsLpStorageType=mscGsmCsLpStorageType, mscGsmCsV42RxKwindowSize=mscGsmCsV42RxKwindowSize, mscGsmBcV42TxKwindowSize=mscGsmBcV42TxKwindowSize, mscGsmCsRlpStorageType=mscGsmCsRlpStorageType, mscGsmBcFramerAdminState=mscGsmBcFramerAdminState, mscGsmBcRlpStatsTable=mscGsmBcRlpStatsTable, mscGsmBcV42RowStatusTable=mscGsmBcV42RowStatusTable, mscGsmBcModemAutoHdlcMode=mscGsmBcModemAutoHdlcMode, mscGsmBcV42bisStatsTable=mscGsmBcV42bisStatsTable, mscGsmBcV42StatsTable=mscGsmBcV42StatsTable, mscGsmBcModemFramingErrors=mscGsmBcModemFramingErrors, mscGsmCsRowStatus=mscGsmCsRowStatus, mscGsmBcLayer1OperEntry=mscGsmBcLayer1OperEntry, mscGsmBcRlpStorageType=mscGsmBcRlpStorageType, mscGsmBcCustomerIdentifier=mscGsmBcCustomerIdentifier, mscGsmBcModemReceiverTransmitter=mscGsmBcModemReceiverTransmitter, mscGsmCsCallsReleasedNormal=mscGsmCsCallsReleasedNormal, mscGsmCsModemRowStatusEntry=mscGsmCsModemRowStatusEntry, mscGsmBcUpperRelayFlowControlStateTx=mscGsmBcUpperRelayFlowControlStateTx, mscGsmCsRlpHighestVersion=mscGsmCsRlpHighestVersion, mscGsmBcFaxRowStatus=mscGsmBcFaxRowStatus, mscGsmCsLpModemsSupported=mscGsmCsLpModemsSupported, mscGsmCsFaxRowStatusEntry=mscGsmCsFaxRowStatusEntry, mscGsmBcV42RxN401FrameSize=mscGsmBcV42RxN401FrameSize, mscGsmBcUpperRelayFramesRx=mscGsmBcUpperRelayFramesRx, mscGsmBcRlpT2AckDelayTimer=mscGsmBcRlpT2AckDelayTimer, mscGsmBcLayer1BytesTx=mscGsmBcLayer1BytesTx, mscGsmCsV42T400DetectTimer=mscGsmCsV42T400DetectTimer, mscGsmCsCommentText=mscGsmCsCommentText, mscGsmBcModemStorageType=mscGsmBcModemStorageType, mscGsmCsV42StorageType=mscGsmCsV42StorageType, mscGsmBcV42bisRowStatusTable=mscGsmBcV42bisRowStatusTable)
