#
# PySNMP MIB module ZYXEL-L2-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-L2-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:50:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, TimeTicks, IpAddress, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Unsigned32, ModuleIdentity, Bits, NotificationType, Gauge32, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "IpAddress", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Unsigned32", "ModuleIdentity", "Bits", "NotificationType", "Gauge32", "ObjectIdentity", "Counter32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelL2Ip = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38))
if mibBuilder.loadTexts: zyxelL2Ip.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelL2Ip.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelL2Ip.setContactInfo('')
if mibBuilder.loadTexts: zyxelL2Ip.setDescription('The subtree for layer 2 switch ip address')
zyxelLayer2IpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1))
zyLayer2IpDnsIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpDnsIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpDnsIpAddress.setDescription('Enter a domain name server IP address in order to be able to use a domain name instead of an IP address.')
zyLayer2IpDefaultMgmt = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inBand", 0), ("outOfBand", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpDefaultMgmt.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpDefaultMgmt.setDescription('Specify which traffic flow (In-Band or Out-of-band) the switch is to send packets originating from it or packets with unknown source.')
zyxelLayer2IpInbandDefaultSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 3))
zyLayer2IpInbandDefaultType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dhcpClient", 0), ("staticIp", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultType.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultType.setDescription('The type of in-band IP address.')
zyLayer2IpInbandDefaultVid = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultVid.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultVid.setDescription('The VLAN identification number associated with the switch IP address. This is the VLAN ID of the CPU and is used for management only.')
zyLayer2IpInbandDefaultStaticIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultStaticIpAddress.setDescription('IP address of your switch.')
zyLayer2IpInbandDefaultStaticMask = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultStaticMask.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultStaticMask.setDescription('The IP subnet mask of your switch.')
zyLayer2IpInbandDefaultStaticGateway = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultStaticGateway.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandDefaultStaticGateway.setDescription('IP address of the default outgoing gateway.')
zyLayer2IpInbandMaxNumberOfInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyLayer2IpInbandMaxNumberOfInterfaces.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandMaxNumberOfInterfaces.setDescription('The maximum number of in-band IP that can be created.')
zyxelLayer2IpInbandTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5), )
if mibBuilder.loadTexts: zyxelLayer2IpInbandTable.setStatus('current')
if mibBuilder.loadTexts: zyxelLayer2IpInbandTable.setDescription('The table contains layer 2 IP in-band configuration. ')
zyxelLayer2IpInbandEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1), ).setIndexNames((0, "ZYXEL-L2-IP-MIB", "zyLayer2IpInbandIpAddress"), (0, "ZYXEL-L2-IP-MIB", "zyLayer2IpInbandVid"))
if mibBuilder.loadTexts: zyxelLayer2IpInbandEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelLayer2IpInbandEntry.setDescription('An entry contains layer 2 IP in-band configuration. ')
zyLayer2IpInbandIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: zyLayer2IpInbandIpAddress.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandIpAddress.setDescription('IP address for managing the switch by the members of the VLAN specified in the VLAN ID field.')
zyLayer2IpInbandMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandMask.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandMask.setDescription('The IP subnet mask.')
zyLayer2IpInbandGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandGateway.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandGateway.setDescription('The IP address of the default outgoing gateway.')
zyLayer2IpInbandVid = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1, 4), Integer32())
if mibBuilder.loadTexts: zyLayer2IpInbandVid.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandVid.setDescription('Type the VLAN group identification number.')
zyLayer2IpInbandManageableState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyLayer2IpInbandManageableState.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandManageableState.setDescription('Enable/Disable the specified IP address as manageable.')
zyLayer2IpInbandRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 38, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zyLayer2IpInbandRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyLayer2IpInbandRowStatus.setDescription('This object allows entries to be created and deleted from the in-band IP table.')
mibBuilder.exportSymbols("ZYXEL-L2-IP-MIB", zyxelL2Ip=zyxelL2Ip, zyxelLayer2IpInbandEntry=zyxelLayer2IpInbandEntry, zyxelLayer2IpInbandDefaultSetup=zyxelLayer2IpInbandDefaultSetup, zyxelLayer2IpInbandTable=zyxelLayer2IpInbandTable, zyLayer2IpInbandIpAddress=zyLayer2IpInbandIpAddress, zyLayer2IpDefaultMgmt=zyLayer2IpDefaultMgmt, zyLayer2IpInbandDefaultType=zyLayer2IpInbandDefaultType, zyLayer2IpInbandMask=zyLayer2IpInbandMask, zyLayer2IpInbandDefaultStaticMask=zyLayer2IpInbandDefaultStaticMask, zyLayer2IpInbandDefaultStaticGateway=zyLayer2IpInbandDefaultStaticGateway, zyLayer2IpInbandMaxNumberOfInterfaces=zyLayer2IpInbandMaxNumberOfInterfaces, PYSNMP_MODULE_ID=zyxelL2Ip, zyLayer2IpInbandRowStatus=zyLayer2IpInbandRowStatus, zyLayer2IpDnsIpAddress=zyLayer2IpDnsIpAddress, zyLayer2IpInbandManageableState=zyLayer2IpInbandManageableState, zyxelLayer2IpSetup=zyxelLayer2IpSetup, zyLayer2IpInbandDefaultStaticIpAddress=zyLayer2IpInbandDefaultStaticIpAddress, zyLayer2IpInbandVid=zyLayer2IpInbandVid, zyLayer2IpInbandGateway=zyLayer2IpInbandGateway, zyLayer2IpInbandDefaultVid=zyLayer2IpInbandDefaultVid)
