#
# PySNMP MIB module HP-ICF-BFD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-BFD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
bfdSessEntry, bfdObjects = mibBuilder.importSymbols("BFD-STD-MIB", "bfdSessEntry", "bfdObjects")
BfdIntervalTC, BfdMultiplierTC = mibBuilder.importSymbols("BFD-TC-STD-MIB", "BfdIntervalTC", "BfdMultiplierTC")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
IANAbfdSessAuthenticationKeyTC, IANAbfdSessAuthenticationTypeTC = mibBuilder.importSymbols("IANA-BFD-TC-STD-MIB", "IANAbfdSessAuthenticationKeyTC", "IANAbfdSessAuthenticationTypeTC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, IpAddress, NotificationType, Unsigned32, ModuleIdentity, Counter32, Bits, TimeTicks, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "IpAddress", "NotificationType", "Unsigned32", "ModuleIdentity", "Counter32", "Bits", "TimeTicks", "Gauge32", "Integer32")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
hpicfBfd = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120))
hpicfBfd.setRevisions(('2016-11-28 10:00', '2010-10-28 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfBfd.setRevisionsDescriptions(('Added Static Support on Application ID to create BFD Sessions on Static Routes', 'The MIB module for managing the BFD sessions',))
if mibBuilder.loadTexts: hpicfBfd.setLastUpdated('201611281000Z')
if mibBuilder.loadTexts: hpicfBfd.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfBfd.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. M/S 5557 Roseville, CA 95747-5557')
if mibBuilder.loadTexts: hpicfBfd.setDescription('This MIB module contains HP proprietary extensions to the OSPF-MIB module.')
hpicfBfdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1))
hpicfBfdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2))
hpicfBfdScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 2))
hpicfBfdEchoSrcIpAddType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 2, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBfdEchoSrcIpAddType.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdEchoSrcIpAddType.setDescription('The type of IP address used as source address for BFD echo packet')
hpicfBfdEchoSrcIpAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 2, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBfdEchoSrcIpAdd.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdEchoSrcIpAdd.setDescription('The IP address which is used as source address for BFD echo packet')
hpicfBfdSessConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1), )
if mibBuilder.loadTexts: hpicfBfdSessConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigTable.setDescription('A table of BFD session parameters ')
hpicfBfdSessConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1), ).setIndexNames((0, "HP-ICF-BFD-MIB", "hpicfBfdSessConfigIfIndex"))
if mibBuilder.loadTexts: hpicfBfdSessConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigEntry.setDescription('A set of objects used to configure BFD session parameters .')
hpicfBfdSessConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpicfBfdSessConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigIfIndex.setDescription('The VLAN ifIndex value that uniquely identifies a row in the hpicf bfd session Table and corresponds to the VLAN on which the BFD session exist.')
hpicfBfdSessConfigDesiredMinTxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 2), BfdIntervalTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfBfdSessConfigDesiredMinTxInterval.setReference('Section 4.1 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigDesiredMinTxInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigDesiredMinTxInterval.setDescription('This object specifies the minimum interval, in microseconds, that the local system would like to use when transmitting BFD Control packets. The value of zero(0) is reserved in this case, and should not be used.')
hpicfBfdSessConfigReqMinRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 3), BfdIntervalTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinRxInterval.setReference('Section 4.1 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinRxInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinRxInterval.setDescription('This object specifies the minimum interval, in microseconds, between received BFD Control packets the local system is capable of supporting. The value of zero(0) can be specified when the transmitting system does not want the remote system to send any periodic BFD control packets.')
hpicfBfdSessConfigReqMinEchoRxInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 4), BfdIntervalTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinEchoRxInterval.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigReqMinEchoRxInterval.setDescription('This object specifies the minimum interval, in microseconds, between received BFD Echo packets that this system is capable of supporting. Value must be zero(0) if this is a multihop BFD session.')
hpicfBfdSessConfigDetectMult = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 5), BfdMultiplierTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigDetectMult.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigDetectMult.setDescription('This object specifies the Detect time multiplier.')
hpicfBfdSessConfigAuthPresFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthPresFlag.setReference('Sections 4.2 - 4.4 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthPresFlag.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthPresFlag.setDescription("This object indicates that the local system's desire to use Authentication. Specifically, it is set to true(1) if the local system wishes the session to be authenticated or false(2) if not.")
hpicfBfdSessConfigAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 7), IANAbfdSessAuthenticationTypeTC().clone('noAuthentication')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationType.setReference('Sections 4.2 - 4.4 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationType.setDescription('The Authentication Type used for this BFD session. This field is valid only when the Authentication Present bit is set. Max-access to this object as well as other authentication related objects are set to read-create in order to support management of a single key ID at a time, key rotation is not handled. Key update in practice must be done by atomic update using a set containing all affected objects in the same varBindList or otherwise risk the session dropping.')
hpicfBfdSessConfigAuthenticationKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKeyID.setReference('Sections 4.2 - 4.4 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKeyID.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKeyID.setDescription('The authentication key ID in use for this session. This object permits multiple keys to be active simultaneously. The value -1 indicates that no Authentication Key ID will be present in the optional BFD Authentication Section.')
hpicfBfdSessConfigAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 9), IANAbfdSessAuthenticationKeyTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKey.setReference('Sections 4.2 - 4.4 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthenticationKey.setDescription('The authentication key. When the hpicfBfdSessConfigAuthenticationType is simplePassword(1) and when the encryption is enabled on the switch, the value of this object is the encrypted password present in the BFD packets. When the hpicfBfdSessConfigAuthenticationType is one of the keyed authentication types, this value is used in the computation of the key present in the BFD authentication packet.')
hpicfBfdSessConfigAuthEncPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 10), IANAbfdSessAuthenticationKeyTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthEncPwd.setReference('Sections 4.2 - 4.4 from Katz, D. and D. Ward, Bidirectional Forwarding Detection (BFD), RFC 5880, June 2012.')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthEncPwd.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigAuthEncPwd.setDescription('The authentication key. When the bfdSessAuthenticationType is simplePassword(1), the value of this object is the password present in the BFD packets. When the bfdSessAuthenticationType is one of the keyed authentication types, this value is used in the computation of the key present in the BFD authentication packet.')
hpicfBfdSessConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessConfigRowStatus.setDescription('The status of this BFD session config entry.')
hpicfBfdSessTable = MibTable((1, 3, 6, 1, 2, 1, 222, 1, 6), )
if mibBuilder.loadTexts: hpicfBfdSessTable.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessTable.setDescription('HP extensions to the BfdSessTable (RFC 7331).')
hpicfBfdSessEntry = MibTableRow((1, 3, 6, 1, 2, 1, 222, 1, 6, 1), )
bfdSessEntry.registerAugmentions(("HP-ICF-BFD-MIB", "hpicfBfdSessEntry"))
hpicfBfdSessEntry.setIndexNames(*bfdSessEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfBfdSessEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessEntry.setDescription('HP extensions for an entry in the BfdSessTable.')
hpicfBfdSessApplicationID = MibTableColumn((1, 3, 6, 1, 2, 1, 222, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("ospf", 1), ("vrrp", 2), ("bgp", 3), ("multiple", 4), ("static", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessApplicationID.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessApplicationID.setDescription(' Name of application above BFD session.')
hpicfBfdSessStaus = MibTableColumn((1, 3, 6, 1, 2, 1, 222, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessStaus.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessStaus.setDescription(' Nature of application above BFD session.')
hpicfBfdSessClearStats = MibTableColumn((1, 3, 6, 1, 2, 1, 222, 1, 6, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfBfdSessClearStats.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessClearStats.setDescription(' Flag to clear or not to clear statistics.')
hpicfBfdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 1))
hpicfBfdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 2))
hpicfBfdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 2, 1)).setObjects(("HP-ICF-BFD-MIB", "hpicfBfdSessGroup"), ("HP-ICF-BFD-MIB", "hpicfBfdScalarGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBfdCompliance = hpicfBfdCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdCompliance.setDescription('Compliance statement for agents that provide full support for the BFD-MIB module. Such devices can then be monitored and also be configured using this MIB module.')
hpicfBfdSessGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 1, 1)).setObjects(("HP-ICF-BFD-MIB", "hpicfBfdSessConfigDesiredMinTxInterval"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigReqMinRxInterval"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigReqMinEchoRxInterval"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigDetectMult"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthPresFlag"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthenticationType"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthenticationKeyID"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthenticationKey"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigAuthEncPwd"), ("HP-ICF-BFD-MIB", "hpicfBfdSessConfigRowStatus"), ("HP-ICF-BFD-MIB", "hpicfBfdSessApplicationID"), ("HP-ICF-BFD-MIB", "hpicfBfdSessStaus"), ("HP-ICF-BFD-MIB", "hpicfBfdSessClearStats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBfdSessGroup = hpicfBfdSessGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdSessGroup.setDescription('Collection of objects needed for BFD sessions.')
hpicfBfdScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 120, 2, 1, 2)).setObjects(("HP-ICF-BFD-MIB", "hpicfBfdEchoSrcIpAddType"), ("HP-ICF-BFD-MIB", "hpicfBfdEchoSrcIpAdd"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfBfdScalarGroup = hpicfBfdScalarGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfBfdScalarGroup.setDescription('Collection of global parameters values needed for BFD instance.')
mibBuilder.exportSymbols("HP-ICF-BFD-MIB", hpicfBfdSessClearStats=hpicfBfdSessClearStats, hpicfBfdSessConfigAuthenticationKeyID=hpicfBfdSessConfigAuthenticationKeyID, hpicfBfdGroups=hpicfBfdGroups, hpicfBfdSessConfigEntry=hpicfBfdSessConfigEntry, hpicfBfdSessTable=hpicfBfdSessTable, hpicfBfdSessGroup=hpicfBfdSessGroup, hpicfBfdSessConfigTable=hpicfBfdSessConfigTable, hpicfBfdSessConfigAuthEncPwd=hpicfBfdSessConfigAuthEncPwd, hpicfBfdSessApplicationID=hpicfBfdSessApplicationID, hpicfBfdScalarGroup=hpicfBfdScalarGroup, hpicfBfdSessConfigAuthenticationKey=hpicfBfdSessConfigAuthenticationKey, hpicfBfdSessStaus=hpicfBfdSessStaus, hpicfBfd=hpicfBfd, hpicfBfdSessConfigAuthenticationType=hpicfBfdSessConfigAuthenticationType, PYSNMP_MODULE_ID=hpicfBfd, hpicfBfdSessEntry=hpicfBfdSessEntry, hpicfBfdEchoSrcIpAddType=hpicfBfdEchoSrcIpAddType, hpicfBfdSessConfigReqMinRxInterval=hpicfBfdSessConfigReqMinRxInterval, hpicfBfdCompliances=hpicfBfdCompliances, hpicfBfdSessConfigDetectMult=hpicfBfdSessConfigDetectMult, hpicfBfdScalarObjects=hpicfBfdScalarObjects, hpicfBfdSessConfigDesiredMinTxInterval=hpicfBfdSessConfigDesiredMinTxInterval, hpicfBfdSessConfigRowStatus=hpicfBfdSessConfigRowStatus, hpicfBfdCompliance=hpicfBfdCompliance, hpicfBfdSessConfigReqMinEchoRxInterval=hpicfBfdSessConfigReqMinEchoRxInterval, hpicfBfdConformance=hpicfBfdConformance, hpicfBfdEchoSrcIpAdd=hpicfBfdEchoSrcIpAdd, hpicfBfdSessConfigIfIndex=hpicfBfdSessConfigIfIndex, hpicfBfdObjects=hpicfBfdObjects, hpicfBfdSessConfigAuthPresFlag=hpicfBfdSessConfigAuthPresFlag)
