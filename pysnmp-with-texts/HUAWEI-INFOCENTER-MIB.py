#
# PySNMP MIB module HUAWEI-INFOCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-INFOCENTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, TimeTicks, ObjectIdentity, ModuleIdentity, NotificationType, Bits, iso, Counter64, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "NotificationType", "Bits", "iso", "Counter64", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
hwInfoCenter = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212))
hwInfoCenter.setRevisions(('2015-08-17 15:44', '2014-08-05 11:50', '2014-12-16 17:06', '2013-07-11 16:40', '2013-07-05 17:10', '2011-08-08 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwInfoCenter.setRevisionsDescriptions(('Add hwICInsufficientSpace.', 'To compile on linux', 'The HUAWEI-INFO-CENTER-MIB contains objects to manage the system info-center configuration. It defines the model used to represent configuration data that exists elsewhere in the system and in peripheral devices. The MIB is proper for system configuration. NMS can query configuration change log message and operate configuration. There are no constraints on this MIB.', 'The initial revision of this MIB module .', 'The initial revision of this MIB module .', 'The initial revision of this MIB module .',))
if mibBuilder.loadTexts: hwInfoCenter.setLastUpdated('201508171544Z')
if mibBuilder.loadTexts: hwInfoCenter.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwInfoCenter.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwInfoCenter.setDescription('Add hwICLogBufferLose.')
class HWMessageLevel(TextualConvention, Integer32):
    description = 'Specify level of message of info-center. Currently, following levels of message are provided: emergencies(0): alerts(1): critical(2): errors(3): warnings(4): notifications(5): informational(6): debugging(7): '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("emergencies", 0), ("alerts", 1), ("critical", 2), ("errors", 3), ("warnings", 4), ("notifications", 5), ("informational", 6), ("debugging", 7))

class HWFacilityType(TextualConvention, Integer32):
    description = 'Specify loghost facility which generates messages.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))

hwInfoCenterObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1))
hwICEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwICEnable.setStatus('current')
if mibBuilder.loadTexts: hwICEnable.setDescription("The object control the state of INFO CENTER. If the state is false, the device stop to generate or record message through INFO CENTER. All the log, diagnose log and trap won't record.")
hwICLoghost = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2))
hwICLoghostSourceInterface = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwICLoghostSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostSourceInterface.setDescription('The object indicates the source interface which the loghost binding when send log. All loghosts use the same source interface. The value is referenced from ifEntry.')
hwICLoghostTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2), )
if mibBuilder.loadTexts: hwICLoghostTable.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostTable.setDescription('The table indicates the configuration of loghost.')
hwICLoghostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-INFOCENTER-MIB", "hwICLoghostIpAddressType"), (0, "HUAWEI-INFOCENTER-MIB", "hwICLoghostIpAddress"), (1, "HUAWEI-INFOCENTER-MIB", "hwICLoghostVpnInstance"))
if mibBuilder.loadTexts: hwICLoghostEntry.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostEntry.setDescription('Information about a configuration loghost in the system.')
hwICLoghostIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwICLoghostIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostIpAddressType.setDescription('The ip address type of loghost.')
hwICLoghostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwICLoghostIpAddress.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostIpAddress.setDescription('The ip address of the specified loghost.')
hwICLoghostVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwICLoghostVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostVpnInstance.setDescription('The vpn instance which the loghost uses. ')
hwICLoghostChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 4), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLoghostChannel.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostChannel.setDescription('The channel which the loghost receives message. The value of this object identifies the index of the channel in the Channel Table. The value is referenced from hwICChannelTable.')
hwICLoghostFacility = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 5), HWFacilityType().clone('local7')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLoghostFacility.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostFacility.setDescription('The operations staff can selectively filter the messages with priority which consists of facility that generates the message and severity of the message.')
hwICLoghostLanguage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("chinese", 1), ("english", 2))).clone('english')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLoghostLanguage.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostLanguage.setDescription('The language of a loghost. If chinese is selected, the information which the loghost receives is chinese content.')
hwICLoghostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 2, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLoghostRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwICLoghostRowStatus.setDescription('The row status of this table.')
hwICChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 3))
hwICChannelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 3, 1), )
if mibBuilder.loadTexts: hwICChannelTable.setStatus('current')
if mibBuilder.loadTexts: hwICChannelTable.setDescription('A table of INFO CENTER channel.')
hwICChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 3, 1, 1), ).setIndexNames((0, "HUAWEI-INFOCENTER-MIB", "hwICChannelIndex"))
if mibBuilder.loadTexts: hwICChannelEntry.setStatus('current')
if mibBuilder.loadTexts: hwICChannelEntry.setDescription('The channel entry of INFO CENTER.')
hwICChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwICChannelIndex.setStatus('current')
if mibBuilder.loadTexts: hwICChannelIndex.setDescription('The index of this table.')
hwICChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwICChannelName.setStatus('current')
if mibBuilder.loadTexts: hwICChannelName.setDescription('The name of channel. The channel name must be different from each other.')
hwICModule = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 4))
hwICModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 4, 1), )
if mibBuilder.loadTexts: hwICModuleTable.setStatus('current')
if mibBuilder.loadTexts: hwICModuleTable.setDescription('A table of INFO CENTER module.')
hwICModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-INFOCENTER-MIB", "hwICModuleIndex"))
if mibBuilder.loadTexts: hwICModuleEntry.setStatus('current')
if mibBuilder.loadTexts: hwICModuleEntry.setDescription('The module entry of syslog.')
hwICModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwICModuleIndex.setStatus('current')
if mibBuilder.loadTexts: hwICModuleIndex.setDescription('The index of this table.')
hwICModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwICModuleName.setStatus('current')
if mibBuilder.loadTexts: hwICModuleName.setDescription('The name of module.')
hwICLogFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 5))
hwICLogFilterTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 5, 1), )
if mibBuilder.loadTexts: hwICLogFilterTable.setStatus('current')
if mibBuilder.loadTexts: hwICLogFilterTable.setDescription('A table of INFO CENTER module.')
hwICLogFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 5, 1, 1), ).setIndexNames((0, "HUAWEI-INFOCENTER-MIB", "hwICChannelIndex"), (1, "HUAWEI-INFOCENTER-MIB", "hwICModuleName"))
if mibBuilder.loadTexts: hwICLogFilterEntry.setStatus('current')
if mibBuilder.loadTexts: hwICLogFilterEntry.setDescription('The log entry of INFO CENTER.')
hwICLogFilterState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLogFilterState.setStatus('current')
if mibBuilder.loadTexts: hwICLogFilterState.setDescription('The switch state of log.')
hwICLogFilterLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 5, 1, 1, 2), HWMessageLevel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLogFilterLevel.setStatus('current')
if mibBuilder.loadTexts: hwICLogFilterLevel.setDescription('The level of log message.')
hwICLogFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwICLogFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwICLogFilterRowStatus.setDescription('The status of this table entry.')
hwICLogFile = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 6))
hwICLogFileType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("log", 1), ("diag", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwICLogFileType.setStatus('current')
if mibBuilder.loadTexts: hwICLogFileType.setDescription('The logfile type.')
hwICLogFileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwICLogFileName.setStatus('current')
if mibBuilder.loadTexts: hwICLogFileName.setDescription('The logfile name.')
hwInfoCenterNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 2))
hwICLogFileStorageThrd = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 2, 1)).setObjects(("HUAWEI-INFOCENTER-MIB", "hwICLogFileType"))
if mibBuilder.loadTexts: hwICLogFileStorageThrd.setStatus('current')
if mibBuilder.loadTexts: hwICLogFileStorageThrd.setDescription('The notification for logfile storage limit.')
hwICLogFileAging = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 2, 2)).setObjects(("HUAWEI-INFOCENTER-MIB", "hwICLogFileName"))
if mibBuilder.loadTexts: hwICLogFileAging.setStatus('current')
if mibBuilder.loadTexts: hwICLogFileAging.setDescription('The notification for logfile aging.')
hwICInsufficientSpace = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 2, 3))
if mibBuilder.loadTexts: hwICInsufficientSpace.setStatus('current')
if mibBuilder.loadTexts: hwICInsufficientSpace.setDescription('The notification for insufficient space.')
hwICLogBufferLose = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 2, 4))
if mibBuilder.loadTexts: hwICLogBufferLose.setStatus('current')
if mibBuilder.loadTexts: hwICLogBufferLose.setDescription('The notification for logfile buffer lose.')
hwInfoCenterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 3))
hwInfoCenterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 3, 1))
hwInfoCenterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 3, 1, 1)).setObjects(("HUAWEI-INFOCENTER-MIB", "hwInfoCenterGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwInfoCenterCompliance = hwInfoCenterCompliance.setStatus('current')
if mibBuilder.loadTexts: hwInfoCenterCompliance.setDescription('The compliance statement for systems supporting the HUAWEI-INFOCENTER-MIB.')
hwInfoCenterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 3, 2))
hwInfoCenterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 3, 2, 1)).setObjects(("HUAWEI-INFOCENTER-MIB", "hwICEnable"), ("HUAWEI-INFOCENTER-MIB", "hwICLoghostSourceInterface"), ("HUAWEI-INFOCENTER-MIB", "hwICLogFileType"), ("HUAWEI-INFOCENTER-MIB", "hwICLogFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwInfoCenterGroup = hwInfoCenterGroup.setStatus('current')
if mibBuilder.loadTexts: hwInfoCenterGroup.setDescription('The infocenter group.')
hwInfoCenterTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 212, 3, 2, 2)).setObjects(("HUAWEI-INFOCENTER-MIB", "hwICLogFileStorageThrd"), ("HUAWEI-INFOCENTER-MIB", "hwICLogFileAging"), ("HUAWEI-INFOCENTER-MIB", "hwICLogBufferLose"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwInfoCenterTrapGroup = hwInfoCenterTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwInfoCenterTrapGroup.setDescription('The infocenter trap group.')
mibBuilder.exportSymbols("HUAWEI-INFOCENTER-MIB", hwInfoCenterNotifications=hwInfoCenterNotifications, hwICLoghostSourceInterface=hwICLoghostSourceInterface, hwInfoCenterCompliance=hwInfoCenterCompliance, HWMessageLevel=HWMessageLevel, hwICChannelEntry=hwICChannelEntry, hwICModuleTable=hwICModuleTable, hwICLogFilterState=hwICLogFilterState, hwICLogFilterRowStatus=hwICLogFilterRowStatus, hwICChannelTable=hwICChannelTable, hwInfoCenter=hwInfoCenter, hwICLoghostIpAddressType=hwICLoghostIpAddressType, hwICLoghostIpAddress=hwICLoghostIpAddress, hwICModule=hwICModule, hwICLoghostVpnInstance=hwICLoghostVpnInstance, hwInfoCenterGroup=hwInfoCenterGroup, hwICLogFilterEntry=hwICLogFilterEntry, hwICLogFilterLevel=hwICLogFilterLevel, hwInfoCenterTrapGroup=hwInfoCenterTrapGroup, hwICChannel=hwICChannel, hwICLoghostLanguage=hwICLoghostLanguage, hwICChannelIndex=hwICChannelIndex, HWFacilityType=HWFacilityType, hwICLoghost=hwICLoghost, hwICModuleName=hwICModuleName, hwICLogFileType=hwICLogFileType, hwICLogFileName=hwICLogFileName, hwICLogBufferLose=hwICLogBufferLose, hwICLogFileAging=hwICLogFileAging, hwInfoCenterConformance=hwInfoCenterConformance, hwICLoghostEntry=hwICLoghostEntry, hwICChannelName=hwICChannelName, hwICLoghostTable=hwICLoghostTable, hwICLoghostRowStatus=hwICLoghostRowStatus, hwICLogFile=hwICLogFile, PYSNMP_MODULE_ID=hwInfoCenter, hwInfoCenterObjects=hwInfoCenterObjects, hwICModuleEntry=hwICModuleEntry, hwICLoghostFacility=hwICLoghostFacility, hwICLogFilterTable=hwICLogFilterTable, hwICLoghostChannel=hwICLoghostChannel, hwICLogFilter=hwICLogFilter, hwInfoCenterGroups=hwInfoCenterGroups, hwICLogFileStorageThrd=hwICLogFileStorageThrd, hwICEnable=hwICEnable, hwICInsufficientSpace=hwICInsufficientSpace, hwICModuleIndex=hwICModuleIndex, hwInfoCenterCompliances=hwInfoCenterCompliances)
