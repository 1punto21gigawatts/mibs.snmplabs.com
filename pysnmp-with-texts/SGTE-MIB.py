#
# PySNMP MIB module SGTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SGTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:01:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, IpAddress, MibIdentifier, NotificationType, Unsigned32, TimeTicks, iso, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Counter64, ObjectIdentity, NotificationType, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibIdentifier", "NotificationType", "Unsigned32", "TimeTicks", "iso", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Counter64", "ObjectIdentity", "NotificationType", "ModuleIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
sgte = MibIdentifier((1, 3, 6, 1, 4, 1, 13743))
sEci48VP = MibIdentifier((1, 3, 6, 1, 4, 1, 13743, 1))
cIDENTIFICATION = MibIdentifier((1, 3, 6, 1, 4, 1, 13743, 1, 1))
iNomEquipement = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iNomEquipement.setStatus('optional')
if mibBuilder.loadTexts: iNomEquipement.setDescription("Designation de l'entite")
iNomConstructeur = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iNomConstructeur.setStatus('optional')
if mibBuilder.loadTexts: iNomConstructeur.setDescription('Nom du constructeur')
iMarqueCommerciale = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iMarqueCommerciale.setStatus('optional')
if mibBuilder.loadTexts: iMarqueCommerciale.setDescription('Marque commerciale')
iVersionLogiciel = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iVersionLogiciel.setStatus('optional')
if mibBuilder.loadTexts: iVersionLogiciel.setDescription('Version du Logiciel')
iCaracterisationFine = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: iCaracterisationFine.setStatus('optional')
if mibBuilder.loadTexts: iCaracterisationFine.setDescription('Caracterisation plus fine du materiel')
cMESURES = MibIdentifier((1, 3, 6, 1, 4, 1, 13743, 1, 2))
mTensionUtilisation = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mTensionUtilisation.setStatus('optional')
if mibBuilder.loadTexts: mTensionUtilisation.setDescription('Tension Utilisation')
mTensionBatterie = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mTensionBatterie.setStatus('optional')
if mibBuilder.loadTexts: mTensionBatterie.setDescription('Tension Batterie')
mCourantUtilisation = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantUtilisation.setStatus('optional')
if mibBuilder.loadTexts: mCourantUtilisation.setDescription('Courant Utilisation')
mCourantBatterie1A = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie1A.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie1A.setDescription('Courant Batterie 1A')
mCourantBatterie2A = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie2A.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie2A.setDescription('Courant Batterie 2A')
mCourantBatterie3A = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie3A.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie3A.setDescription('Courant Batterie 3A')
mCourantBatterie1B = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie1B.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie1B.setDescription('Courant Batterie 1B')
mCourantBatterie2B = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie2B.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie2B.setDescription('Courant Batterie 2B')
mCourantBatterie3B = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie3B.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie3B.setDescription('Courant Batterie 3B')
mCourantRedresseur = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantRedresseur.setStatus('optional')
if mibBuilder.loadTexts: mCourantRedresseur.setDescription("Courant Nominal d'un Redresseur")
mTauxCharge = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mTauxCharge.setStatus('optional')
if mibBuilder.loadTexts: mTauxCharge.setDescription('Taux de Charge')
mEtape = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mEtape.setStatus('optional')
if mibBuilder.loadTexts: mEtape.setDescription("Numero de l'etape active")
mTensionDebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mTensionDebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mTensionDebutTestBatt.setDescription('Tension Batterie en debut de test')
mTensionFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mTensionFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mTensionFinTestBatt.setDescription('Tension Batterie en fin de test')
mCourantBatterie1ADebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie1ADebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie1ADebutTestBatt.setDescription('Courant Batterie 1A en debut de test')
mCourantBatterie1AFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie1AFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie1AFinTestBatt.setDescription('Courant Batterie 1A en fin de test')
mCourantBatterie2ADebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie2ADebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie2ADebutTestBatt.setDescription('Courant Batterie 2A en debut de test')
mCourantBatterie2AFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie2AFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie2AFinTestBatt.setDescription('Courant Batterie 2A en fin de test')
mCourantBatterie3ADebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie3ADebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie3ADebutTestBatt.setDescription('Courant Batterie 3A en debut de test')
mCourantBatterie3AFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie3AFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie3AFinTestBatt.setDescription('Courant Batterie 3A en fin de test')
mCourantBatterie1BDebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie1BDebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie1BDebutTestBatt.setDescription('Courant Batterie 1B en debut de test')
mCourantBatterie1BFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie1BFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie1BFinTestBatt.setDescription('Courant Batterie 1B en fin de test')
mCourantBatterie2BDebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie2BDebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie2BDebutTestBatt.setDescription('Courant Batterie 2B en debut de test')
mCourantBatterie2BFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie2BFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie2BFinTestBatt.setDescription('Courant Batterie 2B en fin de test')
mCourantBatterie3BDebutTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie3BDebutTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie3BDebutTestBatt.setDescription('Courant Batterie 3B en debut de test')
mCourantBatterie3BFinTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32768, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mCourantBatterie3BFinTestBatt.setStatus('optional')
if mibBuilder.loadTexts: mCourantBatterie3BFinTestBatt.setDescription('Courant Batterie 3B en fin de test')
mTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mTemperature.setStatus('optional')
if mibBuilder.loadTexts: mTemperature.setDescription('Temperature')
cETATS = MibIdentifier((1, 3, 6, 1, 4, 1, 13743, 1, 3))
eModifHeure = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eModifHeure.setStatus('optional')
if mibBuilder.loadTexts: eModifHeure.setDescription("Modification de l'heure")
eModifParam = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eModifParam.setStatus('optional')
if mibBuilder.loadTexts: eModifParam.setDescription('Modification des parametres')
eLiaisonJbus = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eLiaisonJbus.setStatus('optional')
if mibBuilder.loadTexts: eLiaisonJbus.setDescription('Defaut de la liaison JBUS')
eTestEnCours = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestEnCours.setStatus('optional')
if mibBuilder.loadTexts: eTestEnCours.setDescription('Test Batterie en cours')
eUBMin = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eUBMin.setStatus('optional')
if mibBuilder.loadTexts: eUBMin.setDescription('U Batterie < Seuil')
eTestNonRealise = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestNonRealise.setStatus('optional')
if mibBuilder.loadTexts: eTestNonRealise.setDescription('Test Batterie non realise')
eDefUnRed = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDefUnRed.setStatus('optional')
if mibBuilder.loadTexts: eDefUnRed.setDescription('Un redresseur en defaut')
eDefPlusRed = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDefPlusRed.setStatus('optional')
if mibBuilder.loadTexts: eDefPlusRed.setDescription('Plusieurs redresseurs en defaut')
eAlimSecteur = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eAlimSecteur.setStatus('optional')
if mibBuilder.loadTexts: eAlimSecteur.setDescription('Alimentation Absente')
eFuseBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFuseBatt.setStatus('optional')
if mibBuilder.loadTexts: eFuseBatt.setDescription('Defaut Fusible/Interrupteur Batterie')
eFuseDep = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFuseDep.setStatus('optional')
if mibBuilder.loadTexts: eFuseDep.setDescription('Defaut Fusible Depart')
eFuseAux = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFuseAux.setStatus('optional')
if mibBuilder.loadTexts: eFuseAux.setDescription('Defaut Fusible Auxiliaire')
eUMin = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eUMin.setStatus('optional')
if mibBuilder.loadTexts: eUMin.setDescription('U Utilisation < Seuil')
eUMax = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eUMax.setStatus('optional')
if mibBuilder.loadTexts: eUMax.setDescription('U Utilisation > Seuil')
eTauxCharge = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTauxCharge.setStatus('optional')
if mibBuilder.loadTexts: eTauxCharge.setDescription('Taux de Charge > Seuil')
eTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTemperature.setStatus('optional')
if mibBuilder.loadTexts: eTemperature.setDescription('Temperature > 45C')
eIBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eIBatt.setStatus('optional')
if mibBuilder.loadTexts: eIBatt.setDescription('I Batterie <> I Utilisation')
eChargeI = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eChargeI.setStatus('optional')
if mibBuilder.loadTexts: eChargeI.setDescription('Defaut CHARGE I')
eChargeU = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eChargeU.setStatus('optional')
if mibBuilder.loadTexts: eChargeU.setDescription('Defaut CHARGE U')
eFloating = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eFloating.setStatus('optional')
if mibBuilder.loadTexts: eFloating.setDescription('Defaut FLOATING')
eComptAH = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eComptAH.setStatus('optional')
if mibBuilder.loadTexts: eComptAH.setDescription('Decharge > Seuil')
eTestBattOK = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestBattOK.setStatus('optional')
if mibBuilder.loadTexts: eTestBattOK.setDescription('Test Batterie correct')
eTestBattKO = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestBattKO.setStatus('optional')
if mibBuilder.loadTexts: eTestBattKO.setDescription('Test Batterie mauvais')
eTestImpossible = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestImpossible.setStatus('optional')
if mibBuilder.loadTexts: eTestImpossible.setDescription('Test Batterie impossible')
eTestRepousse = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestRepousse.setStatus('optional')
if mibBuilder.loadTexts: eTestRepousse.setDescription('Test Batterie repousse')
eTestInterrompu = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestInterrompu.setStatus('optional')
if mibBuilder.loadTexts: eTestInterrompu.setDescription('Test Batterie interrompu')
eTestMiniKO = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eTestMiniKO.setStatus('optional')
if mibBuilder.loadTexts: eTestMiniKO.setDescription('Test mini mauvais')
ePuissTestBatt = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ePuissTestBatt.setStatus('optional')
if mibBuilder.loadTexts: ePuissTestBatt.setDescription('Puissance non constante')
eDefEprom = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDefEprom.setStatus('optional')
if mibBuilder.loadTexts: eDefEprom.setDescription('Perte de Parametres')
eDetectionCSB = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eDetectionCSB.setStatus('optional')
if mibBuilder.loadTexts: eDetectionCSB.setDescription('Detection de la carte CSB')
eRAZ = MibScalar((1, 3, 6, 1, 4, 1, 13743, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eRAZ.setStatus('optional')
if mibBuilder.loadTexts: eRAZ.setDescription("RAZ de l'ECI")
cALARMES = MibIdentifier((1, 3, 6, 1, 4, 1, 13743, 1, 4))
aModifHeure = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,1))
if mibBuilder.loadTexts: aModifHeure.setDescription("Modification de l'heure")
aModifParam = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,2))
if mibBuilder.loadTexts: aModifParam.setDescription('Modification des parametres')
aLiaisonJbus = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,3))
if mibBuilder.loadTexts: aLiaisonJbus.setDescription('Defaut de la liaison JBUS')
aTestEnCours = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,4))
if mibBuilder.loadTexts: aTestEnCours.setDescription('Test Batterie en cours')
aUBMin = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,5))
if mibBuilder.loadTexts: aUBMin.setDescription('U Batterie < Seuil')
aTestNonRealise = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,6))
if mibBuilder.loadTexts: aTestNonRealise.setDescription('Test Batterie non realise')
aDefUnRed = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,7))
if mibBuilder.loadTexts: aDefUnRed.setDescription('Un redresseur en defaut')
aDefPlusRed = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,8))
if mibBuilder.loadTexts: aDefPlusRed.setDescription('Plusieurs redresseurs en defaut')
aAlimSecteur = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,9))
if mibBuilder.loadTexts: aAlimSecteur.setDescription('Alimentation Absente')
aFuseBatt = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,10))
if mibBuilder.loadTexts: aFuseBatt.setDescription('Defaut Fusible/Interrupteur Batterie')
aFuseDep = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,11))
if mibBuilder.loadTexts: aFuseDep.setDescription('Defaut Fusible Depart')
aFuseAux = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,12))
if mibBuilder.loadTexts: aFuseAux.setDescription('Defaut Fusible Auxiliaire')
aUMin = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,13))
if mibBuilder.loadTexts: aUMin.setDescription('U Utilisation < Seuil')
aUMax = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,14))
if mibBuilder.loadTexts: aUMax.setDescription('U Utilisation > Seuil')
aTauxCharge = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,15))
if mibBuilder.loadTexts: aTauxCharge.setDescription('Taux de Charge > Seuil')
aTemperature = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,16))
if mibBuilder.loadTexts: aTemperature.setDescription('Temperature > 45C')
aIBatt = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,17))
if mibBuilder.loadTexts: aIBatt.setDescription('I Batterie <> I Utilisation')
aChargeI = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,18))
if mibBuilder.loadTexts: aChargeI.setDescription('Defaut CHARGE I')
aChargeU = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,19))
if mibBuilder.loadTexts: aChargeU.setDescription('Defaut CHARGE U')
aFloating = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,20))
if mibBuilder.loadTexts: aFloating.setDescription('Defaut FLOATING')
aComptAH = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,21))
if mibBuilder.loadTexts: aComptAH.setDescription('Decharge > Seuil')
aTestBattOK = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,22))
if mibBuilder.loadTexts: aTestBattOK.setDescription('Test Batterie correct')
aTestBattKO = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,23))
if mibBuilder.loadTexts: aTestBattKO.setDescription('Test Batterie mauvais')
aTestImpossible = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,24))
if mibBuilder.loadTexts: aTestImpossible.setDescription('Test Batterie impossible')
aTestRepousse = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,25))
if mibBuilder.loadTexts: aTestRepousse.setDescription('Test Batterie repousse')
aTestInterrompu = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,26))
if mibBuilder.loadTexts: aTestInterrompu.setDescription('Test Batterie interrompu')
aTestMiniKO = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,27))
if mibBuilder.loadTexts: aTestMiniKO.setDescription('Test mini mauvais')
aPuissTestBatt = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,28))
if mibBuilder.loadTexts: aPuissTestBatt.setDescription('Puissance non constante')
aDefEprom = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,29))
if mibBuilder.loadTexts: aDefEprom.setDescription('Perte de Parametres')
aDetectionCSB = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,30))
if mibBuilder.loadTexts: aDetectionCSB.setDescription('Detection de la carte CSB')
aRAZ = NotificationType((1, 3, 6, 1, 4, 1, 13743, 1, 4) + (0,31))
if mibBuilder.loadTexts: aRAZ.setDescription("RAZ de l'ECI")
mibBuilder.exportSymbols("SGTE-MIB", mCourantBatterie3BDebutTestBatt=mCourantBatterie3BDebutTestBatt, eFuseAux=eFuseAux, mTensionFinTestBatt=mTensionFinTestBatt, mCourantBatterie3B=mCourantBatterie3B, aTestBattOK=aTestBattOK, eTestMiniKO=eTestMiniKO, aAlimSecteur=aAlimSecteur, eFloating=eFloating, aUBMin=aUBMin, mCourantBatterie1BFinTestBatt=mCourantBatterie1BFinTestBatt, aModifHeure=aModifHeure, mCourantBatterie2A=mCourantBatterie2A, cETATS=cETATS, eTemperature=eTemperature, mCourantBatterie2B=mCourantBatterie2B, aUMax=aUMax, aDefUnRed=aDefUnRed, mCourantRedresseur=mCourantRedresseur, aChargeI=aChargeI, aTauxCharge=aTauxCharge, aTestBattKO=aTestBattKO, mCourantBatterie3ADebutTestBatt=mCourantBatterie3ADebutTestBatt, eDefPlusRed=eDefPlusRed, cIDENTIFICATION=cIDENTIFICATION, eDetectionCSB=eDetectionCSB, aFuseBatt=aFuseBatt, mCourantBatterie2BDebutTestBatt=mCourantBatterie2BDebutTestBatt, eModifParam=eModifParam, eUMax=eUMax, mCourantBatterie1A=mCourantBatterie1A, iNomEquipement=iNomEquipement, aTestEnCours=aTestEnCours, mCourantBatterie3A=mCourantBatterie3A, eTestBattOK=eTestBattOK, aTemperature=aTemperature, mTensionUtilisation=mTensionUtilisation, sEci48VP=sEci48VP, eModifHeure=eModifHeure, ePuissTestBatt=ePuissTestBatt, mEtape=mEtape, aDetectionCSB=aDetectionCSB, iVersionLogiciel=iVersionLogiciel, aFuseDep=aFuseDep, aFloating=aFloating, aComptAH=aComptAH, aChargeU=aChargeU, iNomConstructeur=iNomConstructeur, eComptAH=eComptAH, eUBMin=eUBMin, eTestNonRealise=eTestNonRealise, iMarqueCommerciale=iMarqueCommerciale, aTestNonRealise=aTestNonRealise, aLiaisonJbus=aLiaisonJbus, eDefUnRed=eDefUnRed, mCourantBatterie2BFinTestBatt=mCourantBatterie2BFinTestBatt, eTestImpossible=eTestImpossible, aDefPlusRed=aDefPlusRed, aTestMiniKO=aTestMiniKO, aFuseAux=aFuseAux, eTestBattKO=eTestBattKO, eTestInterrompu=eTestInterrompu, aDefEprom=aDefEprom, eDefEprom=eDefEprom, sgte=sgte, aTestInterrompu=aTestInterrompu, eFuseDep=eFuseDep, eTauxCharge=eTauxCharge, mCourantBatterie3BFinTestBatt=mCourantBatterie3BFinTestBatt, mCourantBatterie1ADebutTestBatt=mCourantBatterie1ADebutTestBatt, mCourantBatterie2ADebutTestBatt=mCourantBatterie2ADebutTestBatt, aTestImpossible=aTestImpossible, eTestRepousse=eTestRepousse, aIBatt=aIBatt, eRAZ=eRAZ, mTauxCharge=mTauxCharge, mCourantBatterie1BDebutTestBatt=mCourantBatterie1BDebutTestBatt, mCourantBatterie1B=mCourantBatterie1B, aRAZ=aRAZ, aModifParam=aModifParam, cMESURES=cMESURES, mTensionDebutTestBatt=mTensionDebutTestBatt, eLiaisonJbus=eLiaisonJbus, mTensionBatterie=mTensionBatterie, aTestRepousse=aTestRepousse, eTestEnCours=eTestEnCours, eChargeI=eChargeI, mCourantBatterie1AFinTestBatt=mCourantBatterie1AFinTestBatt, cALARMES=cALARMES, aPuissTestBatt=aPuissTestBatt, mCourantBatterie2AFinTestBatt=mCourantBatterie2AFinTestBatt, iCaracterisationFine=iCaracterisationFine, mCourantBatterie3AFinTestBatt=mCourantBatterie3AFinTestBatt, eUMin=eUMin, eFuseBatt=eFuseBatt, aUMin=aUMin, mCourantUtilisation=mCourantUtilisation, mTemperature=mTemperature, eIBatt=eIBatt, eChargeU=eChargeU, eAlimSecteur=eAlimSecteur)
