#
# PySNMP MIB module BAY-STACK-ARP-INSPECTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-ARP-INSPECTION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:34:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, Counter32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, ObjectIdentity, NotificationType, Bits, IpAddress, Unsigned32, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "ObjectIdentity", "NotificationType", "Bits", "IpAddress", "Unsigned32", "Counter64", "iso")
TextualConvention, TruthValue, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "MacAddress", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackArpInspectionMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 18))
bayStackArpInspectionMib.setRevisions(('2013-10-11 00:00', '2013-07-05 00:00', '2008-10-30 00:00', '2006-06-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackArpInspectionMib.setRevisionsDescriptions(('Ver 4: Added MacAddress to IMPORTS.', 'Ver 3: Added bsArpInspectionNotificationSourceMACAddr.', 'Ver 2: Added bsaiArpPacketDroppedOnUntrustedPort.', 'Ver 1: Initial version.',))
if mibBuilder.loadTexts: bayStackArpInspectionMib.setLastUpdated('201310110000Z')
if mibBuilder.loadTexts: bayStackArpInspectionMib.setOrganization('Nortel Ltd.')
if mibBuilder.loadTexts: bayStackArpInspectionMib.setContactInfo('nortel.com')
if mibBuilder.loadTexts: bayStackArpInspectionMib.setDescription("This MIB module is used for ARP inspection configuration settings in Nortel's software and products.")
bsArpInspectionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 18, 0))
bsArpInspectionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 18, 1))
bsArpInspectionVlanTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 1), )
if mibBuilder.loadTexts: bsArpInspectionVlanTable.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionVlanTable.setDescription('This table is used to control ARP inspection settings per-VLAN.')
bsArpInspectionVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 1, 1), ).setIndexNames((0, "BAY-STACK-ARP-INSPECTION-MIB", "bsArpInspectionVlanId"))
if mibBuilder.loadTexts: bsArpInspectionVlanEntry.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionVlanEntry.setDescription('An entry containing objects for controlling ARP inspection settings for a VLAN.')
bsArpInspectionVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: bsArpInspectionVlanId.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionVlanId.setDescription('The VLAN ID value of the VLAN.')
bsArpInspectionVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsArpInspectionVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionVlanEnabled.setDescription('This object is used to control whether ARP inspection is enabled for this VLAN.')
bsArpInspectionIfTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 2), )
if mibBuilder.loadTexts: bsArpInspectionIfTable.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionIfTable.setDescription('This table is used to control ARP inspection settings per-interface.')
bsArpInspectionIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 2, 1), ).setIndexNames((0, "BAY-STACK-ARP-INSPECTION-MIB", "bsArpInspectionIfIndex"))
if mibBuilder.loadTexts: bsArpInspectionIfEntry.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionIfEntry.setDescription('An entry containing objects for controlling ARP inspection settings for an interface.')
bsArpInspectionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bsArpInspectionIfIndex.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionIfIndex.setDescription('The ifIndex value of the interface.')
bsArpInspectionIfTrusted = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsArpInspectionIfTrusted.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionIfTrusted.setDescription('This object is used to control whether this interface is trusted for ARP inspection purposes.')
bsArpInspectionNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 3))
bsArpInspectionNotificationSourceMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 18, 1, 3, 1), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: bsArpInspectionNotificationSourceMACAddr.setStatus('current')
if mibBuilder.loadTexts: bsArpInspectionNotificationSourceMACAddr.setDescription('This value indicates the source MAC Address of an ARP packet.')
bsaiArpPacketDroppedOnUntrustedPort = NotificationType((1, 3, 6, 1, 4, 1, 45, 5, 18, 0, 1)).setObjects(("BAY-STACK-ARP-INSPECTION-MIB", "bsArpInspectionIfTrusted"), ("BAY-STACK-ARP-INSPECTION-MIB", "bsArpInspectionNotificationSourceMACAddr"))
if mibBuilder.loadTexts: bsaiArpPacketDroppedOnUntrustedPort.setStatus('current')
if mibBuilder.loadTexts: bsaiArpPacketDroppedOnUntrustedPort.setDescription('This notification is generated when an ARP packet is dropped on an untrusted port dur to an invalid IP/MAC binding. The port is identified by the instance of bsArpInspectionIfTrusted included in the notification.')
mibBuilder.exportSymbols("BAY-STACK-ARP-INSPECTION-MIB", bsArpInspectionIfTable=bsArpInspectionIfTable, bsArpInspectionNotifications=bsArpInspectionNotifications, bsArpInspectionObjects=bsArpInspectionObjects, bsArpInspectionVlanEntry=bsArpInspectionVlanEntry, bsArpInspectionIfTrusted=bsArpInspectionIfTrusted, bsArpInspectionNotificationSourceMACAddr=bsArpInspectionNotificationSourceMACAddr, bsaiArpPacketDroppedOnUntrustedPort=bsaiArpPacketDroppedOnUntrustedPort, bsArpInspectionNotificationObjects=bsArpInspectionNotificationObjects, bayStackArpInspectionMib=bayStackArpInspectionMib, bsArpInspectionVlanTable=bsArpInspectionVlanTable, bsArpInspectionIfIndex=bsArpInspectionIfIndex, PYSNMP_MODULE_ID=bayStackArpInspectionMib, bsArpInspectionIfEntry=bsArpInspectionIfEntry, bsArpInspectionVlanId=bsArpInspectionVlanId, bsArpInspectionVlanEnabled=bsArpInspectionVlanEnabled)
