#
# PySNMP MIB module TERADICI-PCOIPv2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERADICI-PCOIPv2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, iso, Unsigned32, ModuleIdentity, IpAddress, Integer32, enterprises, Gauge32, NotificationType, Bits, Counter32, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "iso", "Unsigned32", "ModuleIdentity", "IpAddress", "Integer32", "enterprises", "Gauge32", "NotificationType", "Bits", "Counter32", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
teraMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 25071))
teraMibModule.setRevisions(('2012-01-28 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: teraMibModule.setRevisionsDescriptions(('Version 2 of the PCoIP MIB.',))
if mibBuilder.loadTexts: teraMibModule.setLastUpdated('201201281000Z')
if mibBuilder.loadTexts: teraMibModule.setOrganization('Teradici Corporation')
if mibBuilder.loadTexts: teraMibModule.setContactInfo(' Chris Topp Postal: 101-4621 Canada Way Burnaby, BC V5G 4X8 Canada Tel: +1 604 451 5800 Fax: +1 604 451 5818 E-mail: ctopp@teradici.com')
if mibBuilder.loadTexts: teraMibModule.setDescription('MIB describing PC-over-IP (tm) statistics.')
teraProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1))
teraPcoipV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2))
teraPcoipGenStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1))
teraPcoipNetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2))
teraPcoipAudioStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3))
teraPcoipImagingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4))
teraPcoipUSBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5))
teraPcoipGenDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6))
teraPcoipImagingDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7))
teraPcoipUSBDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8))
pcoipGenStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1), )
if mibBuilder.loadTexts: pcoipGenStatsTable.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsTable.setDescription('The PCoIP General statistics table.')
pcoipGenStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipGenStatsSessionNumber"))
if mibBuilder.loadTexts: pcoipGenStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsEntry.setDescription('An entry in the PCoIP general statistics table.')
pcoipGenStatsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsSessionNumber.setDescription('PCoIP session number used to link PCoIP statistics to session.')
pcoipGenStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsPacketsSent.setDescription('Total number of packets that have been transmitted since the PCoIP session started.')
pcoipGenStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsBytesSent.setDescription('Total number of bytes that have been transmitted since the PCoIP session started.')
pcoipGenStatsPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsPacketsReceived.setDescription('Total number of packets that have been received since the PCoIP session started.')
pcoipGenStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsBytesReceived.setDescription('Total number of bytes that have been received since the PCoIP session started.')
pcoipGenStatsTxPacketsLost = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsTxPacketsLost.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsTxPacketsLost.setDescription('Total number of transmit packets that have been lost since the PCoIP session started.')
pcoipGenStatsSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 1, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenStatsSessionDuration.setStatus('current')
if mibBuilder.loadTexts: pcoipGenStatsSessionDuration.setDescription('An incrementing number that represents the total number of seconds the PCoIP session has been open.')
pcoipNetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1), )
if mibBuilder.loadTexts: pcoipNetStatsTable.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsTable.setDescription('The PCoIP Network statistics table.')
pcoipNetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipNetStatsSessionNumber"))
if mibBuilder.loadTexts: pcoipNetStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsEntry.setDescription('An entry in the PCoIP network statistics table.')
pcoipNetStatsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsSessionNumber.setDescription('PCoIP session number used to link statistics to session.')
pcoipNetStatsRoundTripLatencyMs = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsRoundTripLatencyMs.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsRoundTripLatencyMs.setDescription('Round trip latency (in milliseconds) between server and client.')
pcoipNetStatsRXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsRXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsRXBWkbitPersec.setDescription('Average number of kilobits per second that have been received by this device.')
pcoipNetStatsRXBWPeakkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsRXBWPeakkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsRXBWPeakkbitPersec.setDescription('Peak bandwidth for incoming PCoIP packets within a one second sampling period.')
pcoipNetStatsRXPacketLossPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsRXPacketLossPercent.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsRXPacketLossPercent.setDescription('Percentage of received packets lost during a one second sampling period.')
pcoipNetStatsTXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsTXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsTXBWkbitPersec.setDescription('Average number of kilobits per second that have been transmitted by this device.')
pcoipNetStatsTXBWActiveLimitkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsTXBWActiveLimitkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsTXBWActiveLimitkbitPersec.setDescription('The current estimate of the available network bandwidth, updated every second.')
pcoipNetStatsTXBWLimitkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsTXBWLimitkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsTXBWLimitkbitPersec.setDescription('Transmit bandwidth limit for outgoing packets.')
pcoipNetStatsTXPacketLossPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipNetStatsTXPacketLossPercent.setStatus('current')
if mibBuilder.loadTexts: pcoipNetStatsTXPacketLossPercent.setDescription('Percentage of transmitted packets lost during the one second sampling period.')
pcoipAudioStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1), )
if mibBuilder.loadTexts: pcoipAudioStatsTable.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsTable.setDescription('The PCoIP Audio statistics table.')
pcoipAudioStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipAudioStatsSessionNumber"))
if mibBuilder.loadTexts: pcoipAudioStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsEntry.setDescription('An entry in the PCoIP audio statistics table.')
pcoipAudioStatsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipAudioStatsSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsSessionNumber.setDescription('PCoIP session number used to link statistics to session.')
pcoipAudioStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipAudioStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsBytesReceived.setDescription('Total number of audio bytes that have been received since the PCoIP session started.')
pcoipAudioStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipAudioStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsBytesSent.setDescription('Total number of audio bytes that have been sent since the PCoIP session started.')
pcoipAudioStatsRXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipAudioStatsRXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsRXBWkbitPersec.setDescription('Average number of kilobits per second that have been received by the audio channel of this device.')
pcoipAudioStatsTXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipAudioStatsTXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsTXBWkbitPersec.setDescription('Total number of audio kilobits that have been transmitted since the PCoIP session started.')
pcoipAudioStatsTXBWLimitkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipAudioStatsTXBWLimitkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipAudioStatsTXBWLimitkbitPersec.setDescription('Transmit bandwidth limit for outgoing audio packets.')
pcoipImagingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1), )
if mibBuilder.loadTexts: pcoipImagingStatsTable.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsTable.setDescription('The PCoIP Imaging statistics table.')
pcoipImagingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipImagingStatsSessionNumber"))
if mibBuilder.loadTexts: pcoipImagingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsEntry.setDescription('An entry in the PCoIP imaging statistics table.')
pcoipImagingStatsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsSessionNumber.setDescription('PCoIP session number used to link statistics to session.')
pcoipImagingStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsBytesReceived.setDescription('Total number of imaging bytes that have been received since the PCoIP session started.')
pcoipImagingStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsBytesSent.setDescription('Total number of imaging bytes that have been sent since the PCoIP session started.')
pcoipImagingStatsRXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsRXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsRXBWkbitPersec.setDescription('Average number of kilobits per second that have been received by the imaging channel of this device.')
pcoipImagingStatsTXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsTXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsTXBWkbitPersec.setDescription('Average number of kilobits per second that have been received by the imaging channel of this device.')
pcoipImagingStatsEncodedFramesPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2400))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsEncodedFramesPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsEncodedFramesPersec.setDescription('The number of imaging frames which were encoded over a one second sampling period.')
pcoipImagingStatsActiveMinimumQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsActiveMinimumQuality.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsActiveMinimumQuality.setDescription('The lowest encoded quality, updated every second.')
pcoipImagingStatsDecoderCapabilitykbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsDecoderCapabilitykbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsDecoderCapabilitykbitPersec.setDescription('The current estimate of the decoder processing capability.')
pcoipImagingStatsPipelineProcRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingStatsPipelineProcRate.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingStatsPipelineProcRate.setDescription('The current pipeline processing rate.')
pcoipUSBStatsTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1), )
if mibBuilder.loadTexts: pcoipUSBStatsTable.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsTable.setDescription('The PCoIP USB statistics table.')
pcoipUSBStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipUSBStatsSessionNumber"))
if mibBuilder.loadTexts: pcoipUSBStatsEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsEntry.setDescription('An entry in the PCoIP USB statistics table.')
pcoipUSBStatsSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBStatsSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsSessionNumber.setDescription('PCoIP session number used to link statistics to session.')
pcoipUSBStatsBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBStatsBytesReceived.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsBytesReceived.setDescription('Total number of USB bytes that have been received since the PCoIP session started.')
pcoipUSBStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsBytesSent.setDescription('Total number of USB bytes that have been sent since the PCoIP session started.')
pcoipUSBStatsRXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBStatsRXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsRXBWkbitPersec.setDescription('Average number of kilobits per second that have been received by the USB channel of this device.')
pcoipUSBStatsTXBWkbitPersec = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 5, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBStatsTXBWkbitPersec.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBStatsTXBWkbitPersec.setDescription('Average number of kilobits per second that have been received by the USB channel of this device.')
pcoipGenDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1), )
if mibBuilder.loadTexts: pcoipGenDevicesTable.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesTable.setDescription('The PCoIP General Devices table.')
pcoipGenDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipGenDevicesSessionNumber"))
if mibBuilder.loadTexts: pcoipGenDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesEntry.setDescription('An entry in the PCoIP general devices table.')
pcoipGenDevicesSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesSessionNumber.setDescription('PCoIP session number used to link imaging devices to statistics.')
pcoipGenDevicesName = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesName.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesName.setDescription('String containing the PCoIP device name.')
pcoipGenDevicesDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesDescription.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesDescription.setDescription('String describing the processor.')
pcoipGenDevicesGenericTag = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesGenericTag.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesGenericTag.setDescription('String describing device generic tag. ')
pcoipGenDevicesPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesPartNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesPartNumber.setDescription('String describing the silicon part number of the device.')
pcoipGenDevicesFwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesFwPartNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesFwPartNumber.setDescription('String describing the product ID of the device.')
pcoipGenDevicesSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesSerialNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesSerialNumber.setDescription('String describing device serial number.')
pcoipGenDevicesHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesHardwareVersion.setDescription('String describing the silicon version.')
pcoipGenDevicesFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesFirmwareVersion.setDescription('String describing the currently running firmware revision.')
pcoipGenDevicesUniqueID = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesUniqueID.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesUniqueID.setDescription('String describing the device unique identifier.')
pcoipGenDevicesMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesMAC.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesMAC.setDescription('String describing the device MAC address.')
pcoipGenDevicesUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipGenDevicesUptime.setStatus('current')
if mibBuilder.loadTexts: pcoipGenDevicesUptime.setDescription('Integer containing the number of seconds since boot.')
pcoipImagingDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1), )
if mibBuilder.loadTexts: pcoipImagingDevicesTable.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesTable.setDescription('The PCoIP Imaging Devices table.')
pcoipImagingDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipImagingDevicesIndex"))
if mibBuilder.loadTexts: pcoipImagingDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesEntry.setDescription('An entry in the PCoIP imaging devices table.')
pcoipImagingDevicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesIndex.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesIndex.setDescription('The auxiliary variable used for identifying instances of the columnar objects in the devices table.')
pcoipImagingDevicesSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesSessionNumber.setDescription('PCoIP session number used to link imaging devices to statistics.')
pcoipImagingDevicesDisplayWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayWidth.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayWidth.setDescription('Display width in pixels.')
pcoipImagingDevicesDisplayHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayHeight.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayHeight.setDescription('Display height in lines.')
pcoipImagingDevicesDisplayRefreshRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayRefreshRate.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayRefreshRate.setDescription('Display refresh rate in Hz.')
pcoipImagingDevicesDisplayChangeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayChangeRate.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayChangeRate.setDescription('Display input change rate in Hz over a 1 second sample.')
pcoipImagingDevicesDisplayProcessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayProcessRate.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesDisplayProcessRate.setDescription('Display process frame rate in Hz over a 1 second sample.')
pcoipImagingDevicesLimitReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesLimitReason.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesLimitReason.setDescription('String describing the reason for limiting the frame rate of this display.')
pcoipImagingDevicesModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesModel.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesModel.setDescription('String describing the display model name.')
pcoipImagingDevicesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesStatus.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesStatus.setDescription('String describing the display device status.')
pcoipImagingDevicesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesMode.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesMode.setDescription('String describing the display mode.')
pcoipImagingDevicesSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesSerial.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesSerial.setDescription('String describing the display serial number.')
pcoipImagingDevicesVID = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesVID.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesVID.setDescription('String describing the display vendor ID.')
pcoipImagingDevicesPID = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesPID.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesPID.setDescription('String describing the display product ID.')
pcoipImagingDevicesDate = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 7, 1, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipImagingDevicesDate.setStatus('current')
if mibBuilder.loadTexts: pcoipImagingDevicesDate.setDescription('String describing the display date of manufacture.')
pcoipUSBDevicesTable = MibTable((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1), )
if mibBuilder.loadTexts: pcoipUSBDevicesTable.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesTable.setDescription('The PCoIP USB Devices table.')
pcoipUSBDevicesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1), ).setIndexNames((0, "TERADICI-PCOIPv2-MIB", "pcoipUSBDevicesIndex"))
if mibBuilder.loadTexts: pcoipUSBDevicesEntry.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesEntry.setDescription('An entry in the PCoIP USB devices table.')
pcoipUSBDevicesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesIndex.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesIndex.setDescription('The auxiliary variable used for identifying instances of the columnar objects in the devices table.')
pcoipUSBDevicesSessionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesSessionNumber.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesSessionNumber.setDescription('PCoIP session number used to link USB devices to statistics.')
pcoipUSBDevicesPort = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesPort.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesPort.setDescription('USB device port: OHCI or EHCI.')
pcoipUSBDevicesModel = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesModel.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesModel.setDescription('String describing the model name of the connected device.')
pcoipUSBDevicesStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesStatus.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesStatus.setDescription('String describing the USB device status.')
pcoipUSBDevicesDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesDeviceClass.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesDeviceClass.setDescription('String describing the USB device class.')
pcoipUSBDevicesSubClass = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesSubClass.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesSubClass.setDescription('String describing the USB sub device class.')
pcoipUSBDevicesProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesProtocol.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesProtocol.setDescription('String describing the USB protocol used.')
pcoipUSBDevicesSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesSerial.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesSerial.setDescription('String describing the USB device serial number.')
pcoipUSBDevicesVID = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesVID.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesVID.setDescription('String describing the USB device vendor ID.')
pcoipUSBDevicesPID = MibTableColumn((1, 3, 6, 1, 4, 1, 25071, 1, 2, 8, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcoipUSBDevicesPID.setStatus('current')
if mibBuilder.loadTexts: pcoipUSBDevicesPID.setDescription('String describing the USB device product ID.')
mibBuilder.exportSymbols("TERADICI-PCOIPv2-MIB", pcoipImagingStatsActiveMinimumQuality=pcoipImagingStatsActiveMinimumQuality, pcoipGenStatsBytesReceived=pcoipGenStatsBytesReceived, pcoipUSBStatsTable=pcoipUSBStatsTable, pcoipGenDevicesSerialNumber=pcoipGenDevicesSerialNumber, pcoipNetStatsTXBWActiveLimitkbitPersec=pcoipNetStatsTXBWActiveLimitkbitPersec, pcoipNetStatsTXPacketLossPercent=pcoipNetStatsTXPacketLossPercent, pcoipImagingStatsPipelineProcRate=pcoipImagingStatsPipelineProcRate, pcoipUSBDevicesProtocol=pcoipUSBDevicesProtocol, pcoipNetStatsRXBWPeakkbitPersec=pcoipNetStatsRXBWPeakkbitPersec, pcoipImagingDevicesTable=pcoipImagingDevicesTable, teraPcoipUSBStats=teraPcoipUSBStats, pcoipAudioStatsTXBWLimitkbitPersec=pcoipAudioStatsTXBWLimitkbitPersec, pcoipAudioStatsTXBWkbitPersec=pcoipAudioStatsTXBWkbitPersec, pcoipNetStatsEntry=pcoipNetStatsEntry, pcoipGenStatsPacketsReceived=pcoipGenStatsPacketsReceived, pcoipUSBDevicesPort=pcoipUSBDevicesPort, pcoipGenStatsSessionNumber=pcoipGenStatsSessionNumber, pcoipImagingDevicesPID=pcoipImagingDevicesPID, pcoipNetStatsSessionNumber=pcoipNetStatsSessionNumber, pcoipGenDevicesGenericTag=pcoipGenDevicesGenericTag, teraPcoipUSBDevices=teraPcoipUSBDevices, teraPcoipAudioStats=teraPcoipAudioStats, pcoipAudioStatsEntry=pcoipAudioStatsEntry, pcoipImagingStatsRXBWkbitPersec=pcoipImagingStatsRXBWkbitPersec, pcoipGenStatsEntry=pcoipGenStatsEntry, pcoipUSBDevicesSubClass=pcoipUSBDevicesSubClass, pcoipImagingDevicesDisplayProcessRate=pcoipImagingDevicesDisplayProcessRate, pcoipGenDevicesHardwareVersion=pcoipGenDevicesHardwareVersion, pcoipGenDevicesMAC=pcoipGenDevicesMAC, pcoipUSBStatsBytesReceived=pcoipUSBStatsBytesReceived, pcoipImagingDevicesVID=pcoipImagingDevicesVID, teraPcoipImagingStats=teraPcoipImagingStats, pcoipAudioStatsBytesReceived=pcoipAudioStatsBytesReceived, teraPcoipGenStats=teraPcoipGenStats, pcoipImagingStatsDecoderCapabilitykbitPersec=pcoipImagingStatsDecoderCapabilitykbitPersec, pcoipUSBStatsBytesSent=pcoipUSBStatsBytesSent, pcoipUSBDevicesIndex=pcoipUSBDevicesIndex, pcoipImagingStatsTXBWkbitPersec=pcoipImagingStatsTXBWkbitPersec, pcoipImagingDevicesModel=pcoipImagingDevicesModel, pcoipImagingDevicesIndex=pcoipImagingDevicesIndex, pcoipUSBStatsEntry=pcoipUSBStatsEntry, pcoipUSBDevicesStatus=pcoipUSBDevicesStatus, pcoipImagingStatsBytesReceived=pcoipImagingStatsBytesReceived, pcoipGenStatsPacketsSent=pcoipGenStatsPacketsSent, pcoipUSBDevicesTable=pcoipUSBDevicesTable, pcoipGenStatsSessionDuration=pcoipGenStatsSessionDuration, pcoipGenDevicesUptime=pcoipGenDevicesUptime, pcoipNetStatsRoundTripLatencyMs=pcoipNetStatsRoundTripLatencyMs, pcoipImagingDevicesLimitReason=pcoipImagingDevicesLimitReason, pcoipUSBStatsTXBWkbitPersec=pcoipUSBStatsTXBWkbitPersec, pcoipImagingStatsSessionNumber=pcoipImagingStatsSessionNumber, pcoipNetStatsTXBWkbitPersec=pcoipNetStatsTXBWkbitPersec, pcoipAudioStatsRXBWkbitPersec=pcoipAudioStatsRXBWkbitPersec, pcoipUSBDevicesSerial=pcoipUSBDevicesSerial, pcoipImagingStatsTable=pcoipImagingStatsTable, pcoipGenDevicesEntry=pcoipGenDevicesEntry, pcoipNetStatsRXBWkbitPersec=pcoipNetStatsRXBWkbitPersec, pcoipGenDevicesName=pcoipGenDevicesName, pcoipGenDevicesFirmwareVersion=pcoipGenDevicesFirmwareVersion, pcoipGenDevicesSessionNumber=pcoipGenDevicesSessionNumber, pcoipGenDevicesFwPartNumber=pcoipGenDevicesFwPartNumber, teraMibModule=teraMibModule, pcoipGenDevicesUniqueID=pcoipGenDevicesUniqueID, pcoipUSBDevicesVID=pcoipUSBDevicesVID, pcoipAudioStatsTable=pcoipAudioStatsTable, pcoipUSBDevicesEntry=pcoipUSBDevicesEntry, pcoipGenStatsTxPacketsLost=pcoipGenStatsTxPacketsLost, pcoipGenDevicesPartNumber=pcoipGenDevicesPartNumber, pcoipImagingDevicesMode=pcoipImagingDevicesMode, teraProducts=teraProducts, teraPcoipImagingDevices=teraPcoipImagingDevices, pcoipImagingDevicesStatus=pcoipImagingDevicesStatus, pcoipImagingDevicesEntry=pcoipImagingDevicesEntry, pcoipImagingDevicesDate=pcoipImagingDevicesDate, pcoipAudioStatsBytesSent=pcoipAudioStatsBytesSent, pcoipGenStatsBytesSent=pcoipGenStatsBytesSent, pcoipImagingDevicesDisplayChangeRate=pcoipImagingDevicesDisplayChangeRate, pcoipNetStatsRXPacketLossPercent=pcoipNetStatsRXPacketLossPercent, pcoipUSBStatsSessionNumber=pcoipUSBStatsSessionNumber, teraPcoipGenDevices=teraPcoipGenDevices, pcoipNetStatsTXBWLimitkbitPersec=pcoipNetStatsTXBWLimitkbitPersec, pcoipImagingDevicesDisplayHeight=pcoipImagingDevicesDisplayHeight, pcoipGenStatsTable=pcoipGenStatsTable, pcoipImagingDevicesSessionNumber=pcoipImagingDevicesSessionNumber, pcoipNetStatsTable=pcoipNetStatsTable, PYSNMP_MODULE_ID=teraMibModule, pcoipImagingDevicesDisplayWidth=pcoipImagingDevicesDisplayWidth, pcoipGenDevicesTable=pcoipGenDevicesTable, pcoipImagingDevicesDisplayRefreshRate=pcoipImagingDevicesDisplayRefreshRate, pcoipUSBDevicesDeviceClass=pcoipUSBDevicesDeviceClass, teraPcoipV2=teraPcoipV2, pcoipUSBDevicesPID=pcoipUSBDevicesPID, pcoipImagingStatsBytesSent=pcoipImagingStatsBytesSent, pcoipAudioStatsSessionNumber=pcoipAudioStatsSessionNumber, pcoipUSBDevicesSessionNumber=pcoipUSBDevicesSessionNumber, pcoipImagingDevicesSerial=pcoipImagingDevicesSerial, pcoipImagingStatsEncodedFramesPersec=pcoipImagingStatsEncodedFramesPersec, pcoipImagingStatsEntry=pcoipImagingStatsEntry, pcoipUSBStatsRXBWkbitPersec=pcoipUSBStatsRXBWkbitPersec, pcoipGenDevicesDescription=pcoipGenDevicesDescription, teraPcoipNetStats=teraPcoipNetStats, pcoipUSBDevicesModel=pcoipUSBDevicesModel)
