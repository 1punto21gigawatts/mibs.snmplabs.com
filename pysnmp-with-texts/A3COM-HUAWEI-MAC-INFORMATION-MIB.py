#
# PySNMP MIB module A3COM-HUAWEI-MAC-INFORMATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-MAC-INFORMATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:06:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, IpAddress, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Counter64, ObjectIdentity, NotificationType, Gauge32, iso, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Counter64", "ObjectIdentity", "NotificationType", "Gauge32", "iso", "ModuleIdentity", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
h3cMACInformation = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87))
h3cMACInformation.setRevisions(('2007-12-28 19:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cMACInformation.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: h3cMACInformation.setLastUpdated('200712281912Z')
if mibBuilder.loadTexts: h3cMACInformation.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cMACInformation.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: h3cMACInformation.setDescription('This MIB file is to provide the definition of the MAC Information general configuration. MAC Information feature is used to make that the changed MAC information in the monitored device is knowable in remote monitoring device.')
class H3cMACInfoWorkMode(TextualConvention, Integer32):
    description = 'The working mode of the MAC Information feature.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("trap", 1), ("syslog", 2))

h3cMACInformationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1))
h3cMACInformationMibGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1))
h3cMACInformationMIBTableTroop = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 2))
h3cMACInformationMibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3))
h3cMACInformationMibTrapExt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4))
h3cMACInformationEnabled = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMACInformationEnabled.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationEnabled.setDescription('The value is a global setting. The feature will not work until the value is set to enabled(1). If the value is set to disabled(2), the feature will stop working even there are interfaces that have been enabled the feature.')
h3cMACInformationcSendInterval = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMACInformationcSendInterval.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationcSendInterval.setDescription('The maximum interval that the device generate syslogs or traps. The unit is second.')
h3cMACInformationLearntMACNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMACInformationLearntMACNum.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationLearntMACNum.setDescription('The number of MAC addresses that learnt by the device since the h3cMACInformationEnabled is set to enabled(1) and h3cMACLearntEnable is set to enabled(1) at least on one interface. If the h3cMACInformationEnabled is set to disabled(2), the object will always return 0.')
h3cMACInformationRemovedMACNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMACInformationRemovedMACNum.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationRemovedMACNum.setDescription('The number of MAC addresses that removed by the device since the h3cMACInformationEnabled is set to enabled(1) and h3cMACRemovedEnable is set to enabled(1) at least on one interface. If the h3cMACInformationEnabled is set to disabled(2), the object will always return 0.')
h3cMACInformationTrapSendNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMACInformationTrapSendNum.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationTrapSendNum.setDescription('The number of traps that have been generated. This object is valid only when the h3cMACInfomationWorkMode is set to trap(1). If the h3cMACInfomationWorkMode is set to syslog(2), the object will always return 0.')
h3cMACInformationSyslogSendNum = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cMACInformationSyslogSendNum.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationSyslogSendNum.setDescription('The number of syslogs that have been generated. This object is valid only when the h3cMACInfomationWorkMode is set to syslog(2). If the h3cMACInfomationWorkMode is set to trap(1), the object will always return 0.')
h3cMACInformationCacheLen = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMACInformationCacheLen.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationCacheLen.setDescription('The maximum queue lenth used to cache the changed MAC addresses information in the monitored device. If the value is set to 0, syslog or trap will generate as soon as there is a MAC address learnt or removed.')
h3cMACInfomationWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 1, 8), H3cMACInfoWorkMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMACInfomationWorkMode.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfomationWorkMode.setDescription('The working mode of MAC Information feature. If the object is set to trap(1), the device will use trap mode to notify the MAC address information and all properties of trap interrelated is valid. If the object is set to syslog(2), the device will use syslog mode to notify the MAC address information and all properties of trap interrelated is invalid.')
h3cMACInfomationIfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 2, 1), )
if mibBuilder.loadTexts: h3cMACInfomationIfTable.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfomationIfTable.setDescription('The table is used to enable or disable the MAC Information feature on interfaces.')
h3cMACInfomationIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h3cMACInfomationIfEntry.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfomationIfEntry.setDescription('The entry of h3cMACInfomationIfTable.')
h3cMACLearntEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMACLearntEnable.setStatus('current')
if mibBuilder.loadTexts: h3cMACLearntEnable.setDescription('If the object is set to enabled(1) on interface, the device will cache the MAC address information that learnt on the interface.')
h3cMACRemovedEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cMACRemovedEnable.setStatus('current')
if mibBuilder.loadTexts: h3cMACRemovedEnable.setDescription('If the object is set to enable(1) on interface, the device will cache the MAC address information that removed on the interface.')
h3cMACInformationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3, 0))
h3cMACInformationChangedTrap = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3, 0, 1)).setObjects(("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapIndex"), ("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapCount"), ("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapMsg"))
if mibBuilder.loadTexts: h3cMACInformationChangedTrap.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationChangedTrap.setDescription('When the cached number of MAC address information is reached the value specified by h3cMACInformationCacheLen, trap is generated and is sent to the remote monitoring device. The trap is also generated when the amount of time elapsed since the previous notification is greater than the interval value specified by h3cMACInformationcSendInterval and there is at least one cached MAC address information learnt or removed. The object is valid only when h3cMACInfomationWorkMode is set to trap(1). When the h3cMACInfomationWorkMode is set to syslog(2), No trap will be generated even h3cMACInformationEnabled is set to enabled(1) and the feature is enabled on interface.')
h3cMACInformationTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3, 2))
h3cMACInfoTrapIndex = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3, 2, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapIndex.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapIndex.setDescription('The sequence number of trap information. When it reaches the maximum value, it should be set to 1.')
h3cMACInfoTrapCount = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3, 2, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapCount.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapCount.setDescription('The cell number of the current trap information. The trap message may consists of more than one MAC address information. Each of the one MAC address information in one trap is called cell.')
h3cMACInfoTrapMsg = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 3, 2, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapMsg.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapMsg.setDescription("This object is the MAC information that learnt or removed in the monitored device. It can consists of more than one MAC information in the object. This object is in the format of '<cell1><cell2>...'. Each cell consists of 12 octets in the format of '<operationType><VLAN><MAC><MACtype><ifIndex>'. <operationType> is the reason type of MAC address changed and have size of 1 octet. It only supports the following values. 1 - MAC learnt. 2 - MAC removed. <VLAN> is the vlan number that correspond to the MAC address in MAC address table and has size of 2 octet. <MAC> is the MAC address and has size of 6 octets. <MACtype> is the MAC address type and has size of 1 octet. It only supports the following values. 0 - Unknown 1 - Learnt 2 - Config dynamic 3 - Config static 4 - Blackhole 5 - Security 6 - 802.1x 7 - MAC authentication 8 - Voice VLAN 9 - WAPI <ifIndex> is the index of the interface where the MAC address is learnt or removed and has size of 2 octets.")
h3cMACInformationTrapsExt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 0))
h3cMACInformationChangedTrapExt = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 0, 1)).setObjects(("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapVerExt"), ("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapIndexExt"), ("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapCountExt"), ("A3COM-HUAWEI-MAC-INFORMATION-MIB", "h3cMACInfoTrapMsgExt"))
if mibBuilder.loadTexts: h3cMACInformationChangedTrapExt.setStatus('current')
if mibBuilder.loadTexts: h3cMACInformationChangedTrapExt.setDescription('When the cached number of MAC address information is reached the value specified by h3cMACInformationCacheLen, trap is generated and is sent to the remote monitoring device. The trap is also generated when the amount of time elapsed since the previous notification is greater than the interval value specified by h3cMACInformationcSendInterval and there is at least one cached MAC address information learnt or removed. The object is valid only when h3cMACInfomationWorkMode is set to trap(1). When the h3cMACInfomationWorkMode is set to syslog(2), No trap will be generated even h3cMACInformationEnabled is set to enabled(1) and the feature is enabled on interface.')
h3cMACInformationTrapObjectsExt = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 2))
h3cMACInfoTrapVerExt = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 2, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapVerExt.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapVerExt.setDescription('The version of trap information.')
h3cMACInfoTrapIndexExt = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapIndexExt.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapIndexExt.setDescription('The sequence number of trap information. When it reaches the maximum value, it should be set to 1.')
h3cMACInfoTrapCountExt = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 2, 3), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapCountExt.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapCountExt.setDescription('The cell number of the current trap information. The trap message may consists of more than one MAC address information. Each of the one MAC address information in one trap is called cell.')
h3cMACInfoTrapMsgExt = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 87, 1, 4, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 254))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cMACInfoTrapMsgExt.setStatus('current')
if mibBuilder.loadTexts: h3cMACInfoTrapMsgExt.setDescription("This object is the MAC information that learnt or removed in the monitored device. It can consists of more than one MAC information in the object. This object is in the format of '<cell1><cell2>...'. Each cell consists of 14 octets in the format of '<operationType><VLAN><MAC><MACtype><ifIndex>'. <operationType> is the reason type of MAC address changed and have size of 1 octet. It only supports the following values. 1 - MAC learnt. 2 - MAC removed. <VLAN> is the vlan number that correspond to the MAC address in MAC address table and has size of 2 octet. <MAC> is the MAC address and has size of 6 octets. <MACtype> is the MAC address type and has size of 1 octet. It only supports the following values. 0 - Unknown 1 - Learnt 2 - Config dynamic 3 - Config static 4 - Blackhole 5 - Security 6 - 802.1x 7 - MAC authentication 8 - Voice VLAN 9 - WAPI <ifIndex> is the index of the interface where the MAC address is learnt or removed and has size of 4 octets.")
mibBuilder.exportSymbols("A3COM-HUAWEI-MAC-INFORMATION-MIB", h3cMACInformation=h3cMACInformation, h3cMACLearntEnable=h3cMACLearntEnable, h3cMACInformationcSendInterval=h3cMACInformationcSendInterval, h3cMACInformationTrapObjects=h3cMACInformationTrapObjects, h3cMACInformationMIBTableTroop=h3cMACInformationMIBTableTroop, h3cMACInformationRemovedMACNum=h3cMACInformationRemovedMACNum, h3cMACInfomationIfEntry=h3cMACInfomationIfEntry, h3cMACInformationTrapsExt=h3cMACInformationTrapsExt, h3cMACInformationTrapObjectsExt=h3cMACInformationTrapObjectsExt, h3cMACInfomationIfTable=h3cMACInfomationIfTable, h3cMACInformationTraps=h3cMACInformationTraps, h3cMACInfoTrapMsgExt=h3cMACInfoTrapMsgExt, h3cMACInformationMibTrap=h3cMACInformationMibTrap, h3cMACInfoTrapCountExt=h3cMACInfoTrapCountExt, h3cMACInformationEnabled=h3cMACInformationEnabled, h3cMACInformationLearntMACNum=h3cMACInformationLearntMACNum, h3cMACInformationSyslogSendNum=h3cMACInformationSyslogSendNum, h3cMACInformationChangedTrapExt=h3cMACInformationChangedTrapExt, h3cMACInformationObjects=h3cMACInformationObjects, h3cMACInformationCacheLen=h3cMACInformationCacheLen, h3cMACInfoTrapIndex=h3cMACInfoTrapIndex, H3cMACInfoWorkMode=H3cMACInfoWorkMode, h3cMACInformationChangedTrap=h3cMACInformationChangedTrap, h3cMACInformationTrapSendNum=h3cMACInformationTrapSendNum, h3cMACInfomationWorkMode=h3cMACInfomationWorkMode, PYSNMP_MODULE_ID=h3cMACInformation, h3cMACInformationMibGlobal=h3cMACInformationMibGlobal, h3cMACInfoTrapIndexExt=h3cMACInfoTrapIndexExt, h3cMACInfoTrapMsg=h3cMACInfoTrapMsg, h3cMACInformationMibTrapExt=h3cMACInformationMibTrapExt, h3cMACInfoTrapCount=h3cMACInfoTrapCount, h3cMACInfoTrapVerExt=h3cMACInfoTrapVerExt, h3cMACRemovedEnable=h3cMACRemovedEnable)
