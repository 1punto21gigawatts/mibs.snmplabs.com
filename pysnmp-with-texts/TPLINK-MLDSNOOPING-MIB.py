#
# PySNMP MIB module TPLINK-MLDSNOOPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPLINK-MLDSNOOPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:25:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, Bits, MibIdentifier, Integer32, Unsigned32, IpAddress, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, ObjectIdentity, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "MibIdentifier", "Integer32", "Unsigned32", "IpAddress", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tplinkMgmt, = mibBuilder.importSymbols("TPLINK-MIB", "tplinkMgmt")
TPRowStatus, = mibBuilder.importSymbols("TPLINK-TC-MIB", "TPRowStatus")
tplinkMldSnoopingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11863, 6, 43))
tplinkMldSnoopingMIB.setRevisions(('2012-12-14 14:32',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tplinkMldSnoopingMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tplinkMldSnoopingMIB.setLastUpdated('201212141432Z')
if mibBuilder.loadTexts: tplinkMldSnoopingMIB.setOrganization('TPLINK')
if mibBuilder.loadTexts: tplinkMldSnoopingMIB.setContactInfo('www.tplink.com.cn')
if mibBuilder.loadTexts: tplinkMldSnoopingMIB.setDescription('Private MIB for mldSnooping manage.')
tplinkMldSnoopingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1))
tplinkMldSnoopingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 2))
tpMldSnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1))
tpMldFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2))
tpMldPacketStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3))
tpMldMultigroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4))
tpMldStaticMultigroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5))
tpMldSnoopingGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1))
tpMldSnoopingEnable = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldSnoopingEnable.setStatus('current')
if mibBuilder.loadTexts: tpMldSnoopingEnable.setDescription('Select Enable/Disable MLD Snooping function globally on the Switch. 0. disable 1. enable')
tpMldUnknownMulticastPacket = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("discard", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldUnknownMulticastPacket.setStatus('current')
if mibBuilder.loadTexts: tpMldUnknownMulticastPacket.setDescription('Select the operation for the switch to process unknown multicast. 0. forward 1. discard')
tpMldUnknownReportSuppression = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldUnknownReportSuppression.setStatus('current')
if mibBuilder.loadTexts: tpMldUnknownReportSuppression.setDescription('Select Enable/Disable MLD Snooping report suppression function globally on the Switch. 0. disable 1. enable')
tpMldGlobalRouterTime = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldGlobalRouterTime.setStatus('current')
if mibBuilder.loadTexts: tpMldGlobalRouterTime.setDescription("Specify the aging time of the router port. Within this time, if the switch don't receive MLD query message from the router port, it will consider this port is not a router port any more,60-600 second.")
tpMldGlobalMemberTime = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldGlobalMemberTime.setStatus('current')
if mibBuilder.loadTexts: tpMldGlobalMemberTime.setDescription("Specify the aging time of the member port. Within this time, if the switch don't receive MLD report message from the member port, it will consider this port is not a member port any more,60-600 second.")
tpMldlastListenerQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldlastListenerQueryInterval.setStatus('current')
if mibBuilder.loadTexts: tpMldlastListenerQueryInterval.setDescription('Enter the Last Listener Query interval time. When the multicast group has no more member ports, it will send the Specific Query Message with this interval time to check whether there is another member. The interval is ranging from 1 to 5 seconds.')
tpMldlastListenerQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldlastListenerQueryCount.setStatus('current')
if mibBuilder.loadTexts: tpMldlastListenerQueryCount.setDescription('Enter the Last Listener Query numbers. When the multicast group has no more member ports, it will send this numbers of Specific Query Message to check whether there is another member. It is ranging from 1 to 5.')
tpMldPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 2))
tpMldPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 2, 1), )
if mibBuilder.loadTexts: tpMldPortTable.setStatus('current')
if mibBuilder.loadTexts: tpMldPortTable.setDescription('MLD Snooping (Internet Group Management Protocol Snooping) is a multicast control mechanism running on Layer 2 switch. It can effectively prevent multicast groups being broadcasted in the network.')
tpMldPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpMldPortEntry.setStatus('current')
if mibBuilder.loadTexts: tpMldPortEntry.setDescription('An entry contains of the information of port configure.')
tpMldSnoopingPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldSnoopingPortEnable.setStatus('current')
if mibBuilder.loadTexts: tpMldSnoopingPortEnable.setDescription('Select Enable/Disable MLD Snooping for the desired port. 0. Disable 1. Enable')
tpMldFastLeavePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldFastLeavePortEnable.setStatus('current')
if mibBuilder.loadTexts: tpMldFastLeavePortEnable.setDescription('Select Enable/Disable Fast Leave feature for the desired port. If Fast Leave is enabled for a port, the Switch will immediately remove this port from the multicast group upon receiving MLD leave messages. 0. Disable 1. Enable')
tpMldPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldPortLag.setStatus('current')
if mibBuilder.loadTexts: tpMldPortLag.setDescription('Displays the LAG number which the port belongs to.')
tpMldVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3))
tpMldVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1), )
if mibBuilder.loadTexts: tpMldVlanTable.setStatus('current')
if mibBuilder.loadTexts: tpMldVlanTable.setDescription('Multicast groups established by MLD Snooping are based on VLANs. You can configure different MLD parameters for different VLANs. ')
tpMldVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1), ).setIndexNames((0, "TPLINK-MLDSNOOPING-MIB", "tpMldVlanId"))
if mibBuilder.loadTexts: tpMldVlanEntry.setStatus('current')
if mibBuilder.loadTexts: tpMldVlanEntry.setDescription('An entry contains of the information of mldsnooping.')
tpMldVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldVlanId.setStatus('current')
if mibBuilder.loadTexts: tpMldVlanId.setDescription('Enter the VLAN ID to enable MLD Snooping for the desired VLAN,1-4094.')
tpMldRouterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldRouterTime.setStatus('current')
if mibBuilder.loadTexts: tpMldRouterTime.setDescription("Specify the aging time of the router port. Within this time, if the switch don't receive MLD query message from the router port, it will consider this port is not a router port any more,0,60-600 second.")
tpMldMemberTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldMemberTime.setStatus('current')
if mibBuilder.loadTexts: tpMldMemberTime.setDescription("Specify the aging time of the member port. Within this time, if the switch don't receive MLD report message from the member port, it will consider this port is not a member port any more,0,60-600 second.")
tpMldRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldRouterPort.setStatus('current')
if mibBuilder.loadTexts: tpMldRouterPort.setDescription('Config the static router ports which are mainly used in the network with stable topology.')
tpMldForbiddenRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldForbiddenRouterPort.setStatus('current')
if mibBuilder.loadTexts: tpMldForbiddenRouterPort.setDescription('Config the forbidden router ports which are mainly used to forbidden specified ports to become router ports.')
tpMldVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 3, 1, 1, 6), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldVlanStatus.setStatus('current')
if mibBuilder.loadTexts: tpMldVlanStatus.setDescription('the following two values are states: these values may be read or written active(1), notInService(2), the following value is a state: this value may be read, but not written notReady(3), the following three values are actions: these values may be written, but are never read createAndGo(4), createAndWait(5), destroy(6)')
tpMldMultiVlanConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4))
tpMldMultiVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldMultiVlanId.setStatus('current')
if mibBuilder.loadTexts: tpMldMultiVlanId.setDescription('Enter the VLAN ID of the multicast VLAN,2-4094.If enter 0, multicast VLAN is disabled.')
tpMldMultitRouterTime = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldMultitRouterTime.setStatus('current')
if mibBuilder.loadTexts: tpMldMultitRouterTime.setDescription("Specify the aging time of the router port. Within this time, if the switch don't receive MLD query message from the router port, it will consider this port is not a router port any more,0,60-600 second.")
tpMldMultiMemberTime = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldMultiMemberTime.setStatus('current')
if mibBuilder.loadTexts: tpMldMultiMemberTime.setDescription("Specify the aging time of the member port. Within this time, if the switch don't receive MLD report message from the member port, it will consider this port is not a member port any more,0,60-600 second.")
tpMldMultiRouterPort = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldMultiRouterPort.setStatus('current')
if mibBuilder.loadTexts: tpMldMultiRouterPort.setDescription('Config the static router ports which are mainly used in the network with stable topology.')
tpMldMultiForbiddenRouterPort = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldMultiForbiddenRouterPort.setStatus('current')
if mibBuilder.loadTexts: tpMldMultiForbiddenRouterPort.setDescription('Config the forbidden router ports which are mainly used to forbidden specified ports to become router ports.')
tpMldMultiReplaceSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 4, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldMultiReplaceSrcIp.setStatus('current')
if mibBuilder.loadTexts: tpMldMultiReplaceSrcIp.setDescription('config the source ip which will replace the source ip of MLD report in multicast vlan.')
tpMldQuerierConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5))
mldQuerierTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1), )
if mibBuilder.loadTexts: mldQuerierTable.setStatus('current')
if mibBuilder.loadTexts: mldQuerierTable.setDescription('MLD Snooping Querier is based on VLAN. You can configure different MLD Snooping Querier parameters for different VLANs.')
mldQuerierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1, 1), ).setIndexNames((0, "TPLINK-MLDSNOOPING-MIB", "mldQuerierVlanId"))
if mibBuilder.loadTexts: mldQuerierEntry.setStatus('current')
if mibBuilder.loadTexts: mldQuerierEntry.setDescription('An entry contains of the information of MLD Snooping Querier.')
mldQuerierVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldQuerierVlanId.setStatus('current')
if mibBuilder.loadTexts: mldQuerierVlanId.setDescription('Enter the VLAN ID to enable MLD Snooping Querier for the desired VLAN, ranging from 1 to 4094.')
mldQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mldQueryInterval.setDescription('Enter the Query message interval time. The Querier will send General Query Message with this interval. The interval is ranging from 10 to 300 seconds.')
mldMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: mldMaxResponseTime.setDescription('Enter the value of Maximum Response Time field of the Query message. The host is expected to response to an MLD general query within this time. The time is ranging from 1 to 25 seconds.')
mldGeneralQuerySrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldGeneralQuerySrcIp.setStatus('current')
if mibBuilder.loadTexts: mldGeneralQuerySrcIp.setDescription('Enter the General Query Message source IP address.')
mldQuerierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 1, 5, 1, 1, 5), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldQuerierStatus.setStatus('current')
if mibBuilder.loadTexts: mldQuerierStatus.setDescription(' The following values are states: these values may be used as follow: active(1),if the entry is being used. createAndGo(4),not being used. destroy(6),destory the entry.')
tpMldPortFilterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1))
tpMldFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1, 1), )
if mibBuilder.loadTexts: tpMldFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: tpMldFilterPortTable.setDescription('When the switch receives MLD report message, it examines the multicast filtering IP ID configured on the access port to determine if the port can join the multicast group. If the multicast IP is not filtered, the switch will add the port to the forward port list of the multicast group. Otherwise, the switch will drop the MLD report message. In that way, you can control the multicast groups that users can access.')
tpMldFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpMldFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: tpMldFilterPortEntry.setDescription('An entry contains of the information of a port param.')
tpMldFilterMaxGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldFilterMaxGroup.setStatus('current')
if mibBuilder.loadTexts: tpMldFilterMaxGroup.setDescription('Specify the maximum number of multicast groups to prevent some ports taking up too much bandwidth.')
tpMldFilterMaxGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("drop", 0), ("replace", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldFilterMaxGroupAction.setStatus('current')
if mibBuilder.loadTexts: tpMldFilterMaxGroupAction.setDescription('The policy should be taken when the number of multicast group a port has joined reach the maximum. 0.Drop: drop the successive report packet, and this port can not join any other multicast group. 1.Replace: when the port joins another new multicast group,it will quit the existing multicast group randomly.')
tpMldFilterBindAddrId = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpMldFilterBindAddrId.setStatus('current')
if mibBuilder.loadTexts: tpMldFilterBindAddrId.setDescription('Enter the profile ID the port will be bound to. Only one profile can be bound to each port.')
tpMldFilterPortLag = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 2, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldFilterPortLag.setStatus('current')
if mibBuilder.loadTexts: tpMldFilterPortLag.setDescription('Displays the LAG number which the port belongs to.')
tpMldPktStat = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1))
tpMldPktStatTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1), )
if mibBuilder.loadTexts: tpMldPktStatTable.setStatus('current')
if mibBuilder.loadTexts: tpMldPktStatTable.setDescription('A list of multicast statistic Table.')
tpMldPktStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: tpMldPktStatEntry.setStatus('current')
if mibBuilder.loadTexts: tpMldPktStatEntry.setDescription('An entry contains of multicast packet statistics over each port.')
tpMldQueryPktStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldQueryPktStat.setStatus('current')
if mibBuilder.loadTexts: tpMldQueryPktStat.setDescription('Displays the number of query packets the port received.')
tpMldReportV1PktStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldReportV1PktStat.setStatus('current')
if mibBuilder.loadTexts: tpMldReportV1PktStat.setDescription('Displays the number of MLDv1 report packets the port received.')
tpMldReportV2PktStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldReportV2PktStat.setStatus('current')
if mibBuilder.loadTexts: tpMldReportV2PktStat.setDescription('Displays the number of MLDv2 report packets the port received.')
tpMldDonePktStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldDonePktStat.setStatus('current')
if mibBuilder.loadTexts: tpMldDonePktStat.setDescription('Displays the number of done packets the port received.')
tpMldErrorPktStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldErrorPktStat.setStatus('current')
if mibBuilder.loadTexts: tpMldErrorPktStat.setDescription('Displays the number of error packets the port received.')
tpIpMldPktStatClear = MibScalar((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("commit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tpIpMldPktStatClear.setStatus('current')
if mibBuilder.loadTexts: tpIpMldPktStatClear.setDescription('mld packet statistic clear.')
tpMldMulticastGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1))
tpMldMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1, 1), )
if mibBuilder.loadTexts: tpMldMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: tpMldMulticastGroupTable.setDescription('A list of multicast groups Table.')
tpMldMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1, 1, 1), ).setIndexNames((0, "TPLINK-MLDSNOOPING-MIB", "tpMldMulticastIP"), (0, "TPLINK-MLDSNOOPING-MIB", "tpMldVlanID"))
if mibBuilder.loadTexts: tpMldMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tpMldMulticastGroupEntry.setDescription('An entry contains of multicast packet statistics over each port.')
tpMldMulticastIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldMulticastIP.setStatus('current')
if mibBuilder.loadTexts: tpMldMulticastIP.setDescription('Displays the multicast IP address.')
tpMldVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldVlanID.setStatus('current')
if mibBuilder.loadTexts: tpMldVlanID.setDescription('Displays the VLAN ID.')
tpMldForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldForwardPorts.setStatus('current')
if mibBuilder.loadTexts: tpMldForwardPorts.setDescription('Displays the forward ports of multicast group.')
tpMldGrouptype = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("static", 0), ("dynamic", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tpMldGrouptype.setStatus('current')
if mibBuilder.loadTexts: tpMldGrouptype.setDescription('Displays the type of multicast group.')
tpMldMulticastStaticGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1))
tpMldMulticastStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1, 1), )
if mibBuilder.loadTexts: tpMldMulticastStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: tpMldMulticastStaticGroupTable.setDescription('A list of multicast groups Table.')
tpMldMulticastStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1, 1, 1), ).setIndexNames((0, "TPLINK-MLDSNOOPING-MIB", "tpMldStaticMulticastIP"), (0, "TPLINK-MLDSNOOPING-MIB", "tpMldStaticVlanID"))
if mibBuilder.loadTexts: tpMldMulticastStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tpMldMulticastStaticGroupEntry.setDescription('An entry contains of multicast packet statistics over each port.')
tpMldStaticMulticastIP = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1, 1, 1, 1), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldStaticMulticastIP.setStatus('current')
if mibBuilder.loadTexts: tpMldStaticMulticastIP.setDescription('The multicast IP address.')
tpMldStaticVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldStaticVlanID.setStatus('current')
if mibBuilder.loadTexts: tpMldStaticVlanID.setDescription('The VLAN ID.')
tpMldStaticForwardPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldStaticForwardPorts.setStatus('current')
if mibBuilder.loadTexts: tpMldStaticForwardPorts.setDescription('The forward ports of multicast group.')
tpMldStaticGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11863, 6, 43, 1, 5, 1, 1, 1, 4), TPRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tpMldStaticGroupStatus.setStatus('current')
if mibBuilder.loadTexts: tpMldStaticGroupStatus.setDescription(' The following values are states: these values may be used as follow: active(1),if the entry is being used. notInService(2),destory the entry. notReady(3),destory the entry. createAndGo(4),not being used createAndWait(5),creat a new entry destroy(6),destory the entry.')
mibBuilder.exportSymbols("TPLINK-MLDSNOOPING-MIB", tpMldStaticVlanID=tpMldStaticVlanID, tpMldMultiRouterPort=tpMldMultiRouterPort, tpMldVlanID=tpMldVlanID, tpMldUnknownMulticastPacket=tpMldUnknownMulticastPacket, tpMldPortEntry=tpMldPortEntry, tpMldFilterPortLag=tpMldFilterPortLag, tpIpMldPktStatClear=tpIpMldPktStatClear, tpMldFilterBindAddrId=tpMldFilterBindAddrId, tpMldStaticGroupStatus=tpMldStaticGroupStatus, tpMldMultitRouterTime=tpMldMultitRouterTime, tpMldPortTable=tpMldPortTable, tpMldForwardPorts=tpMldForwardPorts, tpMldFilterMaxGroup=tpMldFilterMaxGroup, tpMldVlanTable=tpMldVlanTable, tpMldVlanEntry=tpMldVlanEntry, mldQuerierStatus=mldQuerierStatus, tpMldUnknownReportSuppression=tpMldUnknownReportSuppression, tpMldSnoopingPortEnable=tpMldSnoopingPortEnable, tpMldMultiForbiddenRouterPort=tpMldMultiForbiddenRouterPort, mldGeneralQuerySrcIp=mldGeneralQuerySrcIp, tpMldForbiddenRouterPort=tpMldForbiddenRouterPort, tplinkMldSnoopingMIBObjects=tplinkMldSnoopingMIBObjects, tpMldMultigroup=tpMldMultigroup, tpMldVlanStatus=tpMldVlanStatus, mldQuerierTable=mldQuerierTable, tpMldPktStatTable=tpMldPktStatTable, tpMldGlobalRouterTime=tpMldGlobalRouterTime, tpMldSnooping=tpMldSnooping, tpMldPortFilterConfig=tpMldPortFilterConfig, tpMldVlanId=tpMldVlanId, mldQuerierVlanId=mldQuerierVlanId, tpMldErrorPktStat=tpMldErrorPktStat, tpMldStaticForwardPorts=tpMldStaticForwardPorts, tpMldVlanConfig=tpMldVlanConfig, tpMldMulticastStaticGroupTable=tpMldMulticastStaticGroupTable, tpMldQuerierConfig=tpMldQuerierConfig, tpMldStaticMulticastIP=tpMldStaticMulticastIP, tpMldMulticastStaticGroupEntry=tpMldMulticastStaticGroupEntry, mldQuerierEntry=mldQuerierEntry, tpMldMultiReplaceSrcIp=tpMldMultiReplaceSrcIp, tpMldRouterTime=tpMldRouterTime, tpMldMemberTime=tpMldMemberTime, mldQueryInterval=mldQueryInterval, PYSNMP_MODULE_ID=tplinkMldSnoopingMIB, tpMldReportV2PktStat=tpMldReportV2PktStat, tpMldPktStatEntry=tpMldPktStatEntry, tpMldPacketStatistic=tpMldPacketStatistic, tplinkMldSnoopingMIB=tplinkMldSnoopingMIB, tpMldMulticastGroupEntry=tpMldMulticastGroupEntry, tpMldDonePktStat=tpMldDonePktStat, tpMldSnoopingEnable=tpMldSnoopingEnable, tpMldGlobalMemberTime=tpMldGlobalMemberTime, tpMldMulticastGroups=tpMldMulticastGroups, tpMldRouterPort=tpMldRouterPort, tpMldFilterPortEntry=tpMldFilterPortEntry, tpMldMulticastIP=tpMldMulticastIP, tpMldQueryPktStat=tpMldQueryPktStat, tpMldPortConfig=tpMldPortConfig, tplinkMldSnoopingNotifications=tplinkMldSnoopingNotifications, tpMldMultiVlanId=tpMldMultiVlanId, tpMldGrouptype=tpMldGrouptype, tpMldFilterPortTable=tpMldFilterPortTable, tpMldFilterMaxGroupAction=tpMldFilterMaxGroupAction, tpMldMulticastGroupTable=tpMldMulticastGroupTable, tpMldSnoopingGlobalConfig=tpMldSnoopingGlobalConfig, tpMldFilter=tpMldFilter, tpMldReportV1PktStat=tpMldReportV1PktStat, mldMaxResponseTime=mldMaxResponseTime, tpMldPortLag=tpMldPortLag, tpMldlastListenerQueryCount=tpMldlastListenerQueryCount, tpMldlastListenerQueryInterval=tpMldlastListenerQueryInterval, tpMldMulticastStaticGroups=tpMldMulticastStaticGroups, tpMldMultiMemberTime=tpMldMultiMemberTime, tpMldPktStat=tpMldPktStat, tpMldMultiVlanConfig=tpMldMultiVlanConfig, tpMldFastLeavePortEnable=tpMldFastLeavePortEnable, tpMldStaticMultigroup=tpMldStaticMultigroup)
