#
# PySNMP MIB module BROCADE-SPX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BROCADE-SPX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
DisplayString, = mibBuilder.importSymbols("FOUNDRY-SN-AGENT-MIB", "DisplayString")
snSwitch, = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "snSwitch")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Counter64, Bits, TimeTicks, Integer32, iso, NotificationType, ObjectIdentity, Gauge32, IpAddress, Unsigned32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Bits", "TimeTicks", "Integer32", "iso", "NotificationType", "ObjectIdentity", "Gauge32", "IpAddress", "Unsigned32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
brcdSPXMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40))
brcdSPXMIB.setRevisions(('2015-05-12 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: brcdSPXMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: brcdSPXMIB.setLastUpdated('201505120000Z')
if mibBuilder.loadTexts: brcdSPXMIB.setOrganization('Brocade Communications Systems, Inc')
if mibBuilder.loadTexts: brcdSPXMIB.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: support@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: brcdSPXMIB.setDescription(' Management Information for 802.1BR SPX system configuration and operational status. Supported Platforms: - supported on FastIron ICX7750/ICX7450 platforms. Copyright 1996-2015 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.')
brcdSPXGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 1))
brcdSPXTableObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2))
brcdSPXGlobalConfigCBState = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXGlobalConfigCBState.setStatus('current')
if mibBuilder.loadTexts: brcdSPXGlobalConfigCBState.setDescription('Configure CB (Control Bridge) state for 802.1BR feature on the global level. The set operation is allowed only on CB device. none: reserve state. enable: 802.1BR is enable on CB. disable: 802.1BR is disable on CB. The none state will be displayed if it is not a CB device')
brcdSPXGlobalConfigPEState = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXGlobalConfigPEState.setStatus('current')
if mibBuilder.loadTexts: brcdSPXGlobalConfigPEState.setDescription('Configure PE (Port Extender) state for 802.1BR feature on the global level. The set operation is allowed only on PE standalone device. none: reserve state enable: 802.1BR is enabled on PE. disable: 802.1BR is disabled on PE. Note that enabling/disabling PE takes effect only after system is saved configure and reloaded. The none state will be displayed if it is not a PE device')
brcdSPXConfigUnitTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1), )
if mibBuilder.loadTexts: brcdSPXConfigUnitTable.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitTable.setDescription('802.1BR SPX configuration unit table.')
brcdSPXConfigUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1), ).setIndexNames((0, "BROCADE-SPX-MIB", "brcdSPXConfigUnitIndex"))
if mibBuilder.loadTexts: brcdSPXConfigUnitEntry.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitEntry.setDescription('An entry in SPX configuration table.')
brcdSPXConfigUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: brcdSPXConfigUnitIndex.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitIndex.setDescription('The SPX unit Id. CB unit ID is from 1 to 16. PE unit ID is from 17 to 56')
brcdSPXConfigUnitPEName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXConfigUnitPEName.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitPEName.setDescription('A name description of PE unit.')
brcdSPXConfigUnitPESPXPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXPort1.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXPort1.setDescription('A PE SPX port on PE unit. It returns 0 if SPX port does not exist. Note that the maximum PE SPX port on a PE unit is 2.')
brcdSPXConfigUnitPESPXPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXPort2.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXPort2.setDescription('A PE SPX port on PE unit. It returns 0 if SPX port does not exist. Note that the maximum PE SPX port on a PE unit is 2.')
brcdSPXConfigUnitPESPXLag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXLag1.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXLag1.setDescription('A list of interface indices which are the port membership of a SPX LAG group on PE. Each interface index is a 32-bit integer in big endian order. It returns NULL if PE SPX LAG does not exist. Note that the maximum PE SPX LAG on a PE unit is 2. Each SPX LAG group contains up to 16 ports.')
brcdSPXConfigUnitPESPXLag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXLag2.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitPESPXLag2.setDescription('A list of interface indices which are the port membership of a SPX LAG group on PE. Each interface index is a 32-bit integer in big endian order. It returns NULL if PE SPX LAG does not exist. Note that the maximum PE SPX LAG on a PE unit is 2. Each SPX LAG group contains up to 16 ports.')
brcdSPXConfigUnitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXConfigUnitRowStatus.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitRowStatus.setDescription("This object is used to delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row If the row exists, then a SET with value of create(4) returns error 'wrongValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuchName...no such row other(1).....some other cases valid(2)....the row exists and is valid")
brcdSPXConfigUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXConfigUnitType.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitType.setDescription('A description of the configured/active system type for each unit.')
brcdSPXConfigUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("reserved", 3), ("empty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXConfigUnitState.setStatus('current')
if mibBuilder.loadTexts: brcdSPXConfigUnitState.setDescription('A state for each unit.')
brcdSPXOperUnitTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2), )
if mibBuilder.loadTexts: brcdSPXOperUnitTable.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitTable.setDescription('802.1BR SPX operation unit table.')
brcdSPXOperUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1), ).setIndexNames((0, "BROCADE-SPX-MIB", "brcdSPXOperUnitIndex"))
if mibBuilder.loadTexts: brcdSPXOperUnitEntry.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitEntry.setDescription('An entry in SPX operation table.')
brcdSPXOperUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: brcdSPXOperUnitIndex.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitIndex.setDescription('The SPX unit Id. CB unit ID is from 1 to 16. PE unit ID is from 17 to 56')
brcdSPXOperUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitType.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitType.setDescription('A description of the configured/active system type for each unit.')
brcdSPXOperUnitRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("active", 2), ("standby", 3), ("member", 4), ("standalone", 5), ("spx-pe", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitRole.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitRole.setDescription('A role for each unit.')
brcdSPXOperUnitMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitMac.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitMac.setDescription('A MAC address for each unit')
brcdSPXOperUnitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitPriority.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitPriority.setDescription("The priority in Active/backup election on CB units. PE unit doesn't have priority, and 0 as default value.")
brcdSPXOperUnitState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("remote", 2), ("reserved", 3), ("empty", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitState.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitState.setDescription('A state for each unit ')
brcdSPXOperUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitDescription.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitDescription.setDescription('Describes the CB stacking or PE joining state for each unit.')
brcdSPXOperUnitImgVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitImgVer.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitImgVer.setDescription('The version of the running software image for each unit')
brcdSPXOperUnitBuildlVer = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXOperUnitBuildlVer.setStatus('current')
if mibBuilder.loadTexts: brcdSPXOperUnitBuildlVer.setDescription('The version of the running software build for each unit')
brcdSPXCBSPXPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 3), )
if mibBuilder.loadTexts: brcdSPXCBSPXPortTable.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXPortTable.setDescription('SPX configuration CB SPX port table.')
brcdSPXCBSPXPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 3, 1), ).setIndexNames((0, "BROCADE-SPX-MIB", "brcdSPXCBSPXPortPort"))
if mibBuilder.loadTexts: brcdSPXCBSPXPortEntry.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXPortEntry.setDescription('An entry in the SPX configuration CB SPX port table.')
brcdSPXCBSPXPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 3, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: brcdSPXCBSPXPortPort.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXPortPort.setDescription('The IfIndex for the configured CB SPX port. CB unit can have multiple SPX ports per unit. ')
brcdSPXCBSPXPortPEGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXCBSPXPortPEGroup.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXPortPEGroup.setDescription('The name of IfIndex for the configured CB SPX port. It is an optional field')
brcdSPXCBSPXPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXCBSPXPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXPortRowStatus.setDescription("This object is used to delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'wrongValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuchName...no such row other(1).....some other cases valid(2)....the row exists and is valid")
brcdSPXCBSPXLagTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 4), )
if mibBuilder.loadTexts: brcdSPXCBSPXLagTable.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXLagTable.setDescription('SPX configuration CB SPX LAG table.')
brcdSPXCBSPXLagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 4, 1), ).setIndexNames((0, "BROCADE-SPX-MIB", "brcdSPXCBSPXLagPrimaryPort"))
if mibBuilder.loadTexts: brcdSPXCBSPXLagEntry.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXLagEntry.setDescription('An entry in the SPX configuration CB SPX LAG table.')
brcdSPXCBSPXLagPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 4, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: brcdSPXCBSPXLagPrimaryPort.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXLagPrimaryPort.setDescription('The LAG primary port for the configured CB SPX LAG. This primary port is the smallest port in the CB SPX LAG group. CB unit can have multiple SPX LAGs per unit.')
brcdSPXCBSPXLagLagIflist = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 4, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXCBSPXLagLagIflist.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXLagLagIflist.setDescription('A list of interface indices which are the port membership of a SPX Lag group on CB. Each interface index is a 32-bit integer in big endian order. It returns NULL if CB SPX Lag does not exist. Note that each CB SPX LAG group contains up to 16 ports.')
brcdSPXCBSPXLagPEGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXCBSPXLagPEGroup.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXLagPEGroup.setDescription('The name of SPX LAG for the configured CB SPX LAG. It is an optional field')
brcdSPXCBSPXLagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdSPXCBSPXLagRowStatus.setStatus('current')
if mibBuilder.loadTexts: brcdSPXCBSPXLagRowStatus.setDescription("This object is used to delete row in the table and control if they are used. The values that can be written are: delete(3)...deletes the row create(4)...creates a new row If the row exists, then a SET with value of create(4) returns error 'wrongValue'. Deleted rows go away immediately. The following values can be returned on reads: noSuchName...no such row other(1).....some other cases valid(2)....the row exists and is valid")
brcdSPXPEGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 5), )
if mibBuilder.loadTexts: brcdSPXPEGroupTable.setStatus('current')
if mibBuilder.loadTexts: brcdSPXPEGroupTable.setDescription('SPX CB SPX port and PE group table.')
brcdSPXPEGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 5, 1), ).setIndexNames((0, "BROCADE-SPX-MIB", "brcdSPXPEGroupCBSPXPort"))
if mibBuilder.loadTexts: brcdSPXPEGroupEntry.setStatus('current')
if mibBuilder.loadTexts: brcdSPXPEGroupEntry.setDescription('An entry in the SPX PE group table.')
brcdSPXPEGroupCBSPXPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 5, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: brcdSPXPEGroupCBSPXPort.setStatus('current')
if mibBuilder.loadTexts: brcdSPXPEGroupCBSPXPort.setDescription('The IfIndex for the CB SPX port which is connected to a group of PE units')
brcdSPXPEGroupPEGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXPEGroupPEGroup.setStatus('current')
if mibBuilder.loadTexts: brcdSPXPEGroupPEGroup.setDescription('The name of IfIndex for the configured CB SPX port. It is an optional field')
brcdSPXPEGroupPEIdList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXPEGroupPEIdList.setStatus('current')
if mibBuilder.loadTexts: brcdSPXPEGroupPEIdList.setDescription('A list of PE unit ID indices which are attached to a CB SPX port.')
brcdSPXPEGroupCBSPXEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 1, 3, 40, 2, 5, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdSPXPEGroupCBSPXEndPort.setStatus('current')
if mibBuilder.loadTexts: brcdSPXPEGroupCBSPXEndPort.setDescription('The IfIndex for the CB SPX port which is connected to a group of PE units. This CB SPX port is at other end if it is a ring topology. It returns 0 if it is a chain topology and there is no the end port.')
mibBuilder.exportSymbols("BROCADE-SPX-MIB", brcdSPXCBSPXPortTable=brcdSPXCBSPXPortTable, brcdSPXCBSPXLagEntry=brcdSPXCBSPXLagEntry, brcdSPXCBSPXPortRowStatus=brcdSPXCBSPXPortRowStatus, brcdSPXOperUnitBuildlVer=brcdSPXOperUnitBuildlVer, brcdSPXPEGroupPEGroup=brcdSPXPEGroupPEGroup, brcdSPXConfigUnitPESPXLag2=brcdSPXConfigUnitPESPXLag2, brcdSPXConfigUnitEntry=brcdSPXConfigUnitEntry, brcdSPXCBSPXLagLagIflist=brcdSPXCBSPXLagLagIflist, brcdSPXConfigUnitPEName=brcdSPXConfigUnitPEName, brcdSPXOperUnitMac=brcdSPXOperUnitMac, brcdSPXPEGroupPEIdList=brcdSPXPEGroupPEIdList, brcdSPXOperUnitDescription=brcdSPXOperUnitDescription, brcdSPXCBSPXPortPEGroup=brcdSPXCBSPXPortPEGroup, brcdSPXGlobalObjects=brcdSPXGlobalObjects, brcdSPXCBSPXLagPrimaryPort=brcdSPXCBSPXLagPrimaryPort, brcdSPXOperUnitRole=brcdSPXOperUnitRole, brcdSPXPEGroupCBSPXPort=brcdSPXPEGroupCBSPXPort, brcdSPXOperUnitIndex=brcdSPXOperUnitIndex, brcdSPXCBSPXLagTable=brcdSPXCBSPXLagTable, brcdSPXConfigUnitType=brcdSPXConfigUnitType, brcdSPXConfigUnitRowStatus=brcdSPXConfigUnitRowStatus, brcdSPXCBSPXPortPort=brcdSPXCBSPXPortPort, brcdSPXTableObjects=brcdSPXTableObjects, brcdSPXCBSPXPortEntry=brcdSPXCBSPXPortEntry, brcdSPXCBSPXLagPEGroup=brcdSPXCBSPXLagPEGroup, brcdSPXOperUnitTable=brcdSPXOperUnitTable, brcdSPXOperUnitEntry=brcdSPXOperUnitEntry, brcdSPXConfigUnitState=brcdSPXConfigUnitState, brcdSPXOperUnitImgVer=brcdSPXOperUnitImgVer, brcdSPXConfigUnitPESPXLag1=brcdSPXConfigUnitPESPXLag1, brcdSPXConfigUnitTable=brcdSPXConfigUnitTable, brcdSPXGlobalConfigPEState=brcdSPXGlobalConfigPEState, brcdSPXPEGroupEntry=brcdSPXPEGroupEntry, brcdSPXPEGroupTable=brcdSPXPEGroupTable, brcdSPXOperUnitType=brcdSPXOperUnitType, brcdSPXPEGroupCBSPXEndPort=brcdSPXPEGroupCBSPXEndPort, PYSNMP_MODULE_ID=brcdSPXMIB, brcdSPXConfigUnitPESPXPort2=brcdSPXConfigUnitPESPXPort2, brcdSPXConfigUnitIndex=brcdSPXConfigUnitIndex, brcdSPXGlobalConfigCBState=brcdSPXGlobalConfigCBState, brcdSPXConfigUnitPESPXPort1=brcdSPXConfigUnitPESPXPort1, brcdSPXOperUnitState=brcdSPXOperUnitState, brcdSPXCBSPXLagRowStatus=brcdSPXCBSPXLagRowStatus, brcdSPXOperUnitPriority=brcdSPXOperUnitPriority, brcdSPXMIB=brcdSPXMIB)
