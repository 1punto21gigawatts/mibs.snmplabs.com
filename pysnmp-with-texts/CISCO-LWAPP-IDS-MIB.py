#
# PySNMP MIB module CISCO-LWAPP-IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-IDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:05:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Gauge32, ObjectIdentity, ModuleIdentity, iso, TimeTicks, Counter32, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, IpAddress, Unsigned32, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "ModuleIdentity", "iso", "TimeTicks", "Counter32", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "IpAddress", "Unsigned32", "NotificationType", "Integer32")
TruthValue, RowStatus, TextualConvention, DisplayString, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString", "TimeInterval")
ciscoLwappIdsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 519))
ciscoLwappIdsMIB.setRevisions(('2006-04-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappIdsMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoLwappIdsMIB.setLastUpdated('200604100000Z')
if mibBuilder.loadTexts: ciscoLwappIdsMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappIdsMIB.setContactInfo(' Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappIdsMIB.setDescription("This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB provides the information used to integrate the LWAPP controller with external IDS/IPS applications. LWAPP controllers interact with these applications to protect the network against various threats that would compromise the overall security of the network. The arrangement of the IDS / IPS applications, controller (referred to as CC in the diagram) and the LWAPP APs appear as followshe LWAPP tunnel exists between the controller and the APs. The MNs communicate with the APs through the protocol defined by the 802.11 standard. The controllers and the IDS systems exchange information through Cisco proprietary event exchange mechanisms. LWAPP APs, upon bootup, discover and join one of the controllers and the controller pushes the configuration, that includes the WLAN parameters, to the LWAPP APs. The APs then encapsulate all the 802.11 frames from wireless clients inside LWAPP frames and forward the LWAPP frames to the controller. One or more controllers hold logical connections to an IDS / IPS and interact with it to enforce security on the network. GLOSSARY Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides access to the distribution services via the wireless medium for associated clients. LWAPP APs encapsulate all the 802.11 frames in LWAPP frames and sends them to the controller to which it is logically connected. Central Controller ( CC ) The central entity that terminates the LWAPP protocol tunnel from the LWAPP APs. Throughout this MIB, this entity is also referred to as 'controller'. HyperText Transfer Protocol Over Secure Socket Layer (HTTPS) HTTPS is a Web based protocol that encrypts and decrypts user page requests as well as the pages that are returned by the Web server. HTTPS uses port 443 instead of HTTP port 80 in its interactions with the lower layer, TCP/IP. SSL uses a 40-bit key for the RC4 stream encryption algorithm, which is considered an adequate degree of encryption for commercial exchange. Intrusion Detection System ( IDS ) An IDS performs activities like enforcing security related policies, identifying and reporting attacks on the network etc., thereby helping to improve the overall security of the enterprise network. Intrusion Prevention System ( IPS ) An IPS offers significant protection to the network against viruses, worms, signature attacks etc. This system detects L3 - L7 attacks. This system can also instruct other IPS clients through standards based protocols to allow/block network access for specific network entities. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communication between the Access Points and the controller. Mobile Node ( MN ) A roaming 802.11 wireless device in a wireless network associated with an access point. Network Management System ( NMS ) The station from which the administrator manages the wired and wireless networks. Secure Hash Algorithm ( SHA ) The SHA, developed by NIST for use with the Digital Signature Standard (DSS) is specified within the Secure Hash Standard (SHS). SHA is a cryptographic message digest algorithm similar to the MD4 family of hash functions developed by Rivest. It differs from the MD4 hash functions in that it adds an additional expansion operation, an extra round and the whole transformation was designed to accomodate the DSS block size for efficiency. REFERENCE [1] Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications. [2] Draft-obara-capwap-lwapp-00.txt, IETF Light Weight Access Point Protocol ")
ciscoLwappIdsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 0))
ciscoLwappIdsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 1))
ciscoLwappIdsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 2))
ciscoLwappIdsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1))
ciscoLwappIdsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 2))
cLIdsIpsSensorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1), )
if mibBuilder.loadTexts: cLIdsIpsSensorConfigTable.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorConfigTable.setDescription('This table facilitates the configuration of a group of IPS sensors to which the LWAPP controller would subscribe to retrieve the IDS events from the respective sensors. IPS sensors are used to protect the network by helping to detect and report threats like worms, viruses etc. By subscribing to such a sensor, the LWAPP controller, through appropriate interfaces, can retrieve the events detected by the sensor and report the same to the NMS. The controller can accept the request, to block the packets from an IP address, from each Sensor configured through this table and block the data traffic originating from that particular source. Rows are added or deleted to the table by explicit management actions initiated by the user from a network management station. Information about each IPS sensor is uniquely identified by the network address of the respective sensor. ')
cLIdsIpsSensorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorAddressType"), (0, "CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorAddress"))
if mibBuilder.loadTexts: cLIdsIpsSensorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorConfigEntry.setDescription('There is an entry in this table for each IPS sensor identified by cLIdsIpsSensorAddressType and cLIdsIpsSensorAddress from which the controller can accept requests to block certain clients. ')
cLIdsIpsSensorAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLIdsIpsSensorAddressType.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorAddressType.setDescription('This object represents the type of the network address made available through cLIdsIpsSensorAddress. ')
cLIdsIpsSensorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLIdsIpsSensorAddress.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorAddress.setDescription('This object represents the network address of the IPS sensor. The type of the network address represented by this object is determined by the value of cLIdsIpsSensorAddressType. ')
cLIdsIpsSensorUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorUserName.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorUserName.setDescription('This object represents the user name in use by the LWAPP controller to get authenticated with the IPS sensor. ')
cLIdsIpsSensorPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorPassword.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorPassword.setDescription("This object represents the password following the username used by the LWAPP controller to get authenticated with the IPS sensor. Note that the read operation on this object returns a string in the pattern '****' for security reasons. ")
cLIdsIpsSensorQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 5), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1000, 360000)).clone(3000)).setUnits('Hundredths-seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorQueryInterval.setDescription('This object represents the time interval at which the controller would query this particular IPS sensor for IDS events. ')
cLIdsIpsSensorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorEnabled.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorEnabled.setDescription("This object represents the status of this IPS sensor as seen by controller for its interaction with the sensor. A value of 'true' indicates the controller shall query the sensor for events and respond to the requests from the sensor. A value of 'false' indicates the controller's communication with the sensor is disabled. ")
cLIdsIpsSensorFingerPrintHex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorFingerPrintHex.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorFingerPrintHex.setDescription("This object represents the SHA1 hash done on the sensor certificate and configured as a series of 40 hexadecimal digits. This hash value is needed to verify the validity of the certificate to prevent security attacks. Note that the read operation on this object returns a string in the pattern '****' for security reasons. ")
cLIdsIpsSensorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorPort.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorPort.setDescription('This object represents the HTTPS port on the sensor on which the controller polls the sensor. ')
cLIdsIpsSensorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cLIdsIpsSensorRowStatus.setStatus('current')
if mibBuilder.loadTexts: cLIdsIpsSensorRowStatus.setDescription('This is the status column for this row and used to create and delete specific instances of rows in this table. ')
cLIdsClientExclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 2, 1), )
if mibBuilder.loadTexts: cLIdsClientExclTable.setStatus('current')
if mibBuilder.loadTexts: cLIdsClientExclTable.setDescription("This table lists those clients whose data packets are to be blocked as requested by the IPS sensor due to the detection of attacks at layer 3 to layer 7 involving the particular client. This table has an expansion dependent relationship with cLIdsIpsSensorConfigTable. There may exist one or more rows corresponding to the row for each sensor configured through cLIdsIpsSensorConfigTable. An entry is added to this row by the agent when the controller receives the block request from one of the IPS sensors configured through cLIdsIpsSensorConfigTable. The controller sends the ciscoLwappIdsShunClientUpdate notification to indicate that the controller shall be blocking the particular client for a period equal to cLIdsClientTimeRemaining. The entry corresponding to a particular client is removed when one of the following happens. (i) When the configuration about the particular IPS sensor is removed from the controller, either through an explicit management action initiated through the NMS or when the controller reboots. (ii) When the remaining time period for which the client will be blocked as indicated by cLIdsClientTimeRemaining, expires. (iii) When the IPS sensor explicitly requests the controller to stop blocking the client's data packets. The controller sends the ciscoLwappIdsShunClientUpdate notification with cLIdsClientTimeRemaining equal to 0 to indicate that the client won't be blocked any further, on one of the three conditions for entry removal mentioned above. ")
cLIdsClientExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorAddressType"), (0, "CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorAddress"), (0, "CISCO-LWAPP-IDS-MIB", "cLIdsClientAddressType"), (0, "CISCO-LWAPP-IDS-MIB", "cLIdsClientAddress"))
if mibBuilder.loadTexts: cLIdsClientExclEntry.setStatus('current')
if mibBuilder.loadTexts: cLIdsClientExclEntry.setDescription('Each entry in this table represents the information about a wireless client whose data packets are requested to be blocked by the controller. The request is made by the IPS sensor identified by cLIdsIpsSensorAddress. ')
cLIdsClientAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cLIdsClientAddressType.setStatus('current')
if mibBuilder.loadTexts: cLIdsClientAddressType.setDescription('This object identifies the type of the network address being populated by cLIdsClientAddress. ')
cLIdsClientAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cLIdsClientAddress.setStatus('current')
if mibBuilder.loadTexts: cLIdsClientAddress.setDescription('This object identifies the network address of the wireless client whose data packets have been requested to be blocked by the controller. The type of the network address represented by this object is determined by the value of cLIdsClientAddressType. ')
cLIdsClientTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 519, 1, 2, 1, 1, 3), TimeInterval()).setUnits('hundredths-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cLIdsClientTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cLIdsClientTimeRemaining.setDescription("This object indicates the remaining time for which the client's data packets are going to be blocked by the controller. ")
ciscoLwappIdsShunClientUpdate = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 519, 0, 1)).setObjects(("CISCO-LWAPP-IDS-MIB", "cLIdsClientTimeRemaining"))
if mibBuilder.loadTexts: ciscoLwappIdsShunClientUpdate.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappIdsShunClientUpdate.setDescription('This notification is sent by the agent with cLIdsClientTimeRemaining indicating a value greater than 0, whenever it adds a row to cLIdsClientExclTable. The agent also sends this notification with cLIdsClientTimeRemaining equal to 0, when it removes a row from cLIdsClientExclTable. ')
ciscoLwappIdsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 2, 1))
ciscoLwappIdsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 519, 2, 2))
ciscoLwappIdsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 519, 2, 1, 1)).setObjects(("CISCO-LWAPP-IDS-MIB", "ciscoLwappIdsConfigGroup"), ("CISCO-LWAPP-IDS-MIB", "ciscoLwappIdsStatusGroup"), ("CISCO-LWAPP-IDS-MIB", "ciscoLwappIdsNotifsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappIdsMIBCompliance = ciscoLwappIdsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappIdsMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappIdsMIB module. ')
ciscoLwappIdsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 519, 2, 2, 1)).setObjects(("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorUserName"), ("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorPassword"), ("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorQueryInterval"), ("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorEnabled"), ("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorFingerPrintHex"), ("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorPort"), ("CISCO-LWAPP-IDS-MIB", "cLIdsIpsSensorRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappIdsConfigGroup = ciscoLwappIdsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappIdsConfigGroup.setDescription('This collection of objects provides the information used to integrate a controller with external IDS/IPS applications. ')
ciscoLwappIdsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 519, 2, 2, 2)).setObjects(("CISCO-LWAPP-IDS-MIB", "cLIdsClientTimeRemaining"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappIdsStatusGroup = ciscoLwappIdsStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappIdsStatusGroup.setDescription('This collection of objects provides the status of the various operations the controller performs together with external IDS/IPS applications. ')
ciscoLwappIdsNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 519, 2, 2, 3)).setObjects(("CISCO-LWAPP-IDS-MIB", "ciscoLwappIdsShunClientUpdate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappIdsNotifsGroup = ciscoLwappIdsNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappIdsNotifsGroup.setDescription('This collection of objects provides the information about the notifications sent by the agent related to IDS. ')
mibBuilder.exportSymbols("CISCO-LWAPP-IDS-MIB", ciscoLwappIdsMIB=ciscoLwappIdsMIB, ciscoLwappIdsStatus=ciscoLwappIdsStatus, cLIdsIpsSensorRowStatus=cLIdsIpsSensorRowStatus, cLIdsIpsSensorAddressType=cLIdsIpsSensorAddressType, cLIdsClientAddressType=cLIdsClientAddressType, ciscoLwappIdsConfig=ciscoLwappIdsConfig, cLIdsClientAddress=cLIdsClientAddress, PYSNMP_MODULE_ID=ciscoLwappIdsMIB, cLIdsClientTimeRemaining=cLIdsClientTimeRemaining, cLIdsIpsSensorConfigTable=cLIdsIpsSensorConfigTable, cLIdsIpsSensorQueryInterval=cLIdsIpsSensorQueryInterval, cLIdsIpsSensorUserName=cLIdsIpsSensorUserName, ciscoLwappIdsNotifsGroup=ciscoLwappIdsNotifsGroup, cLIdsIpsSensorEnabled=cLIdsIpsSensorEnabled, cLIdsIpsSensorAddress=cLIdsIpsSensorAddress, ciscoLwappIdsMIBGroups=ciscoLwappIdsMIBGroups, ciscoLwappIdsMIBConform=ciscoLwappIdsMIBConform, ciscoLwappIdsMIBObjects=ciscoLwappIdsMIBObjects, ciscoLwappIdsMIBNotifs=ciscoLwappIdsMIBNotifs, cLIdsIpsSensorFingerPrintHex=cLIdsIpsSensorFingerPrintHex, ciscoLwappIdsMIBCompliance=ciscoLwappIdsMIBCompliance, cLIdsClientExclEntry=cLIdsClientExclEntry, cLIdsIpsSensorPassword=cLIdsIpsSensorPassword, ciscoLwappIdsMIBCompliances=ciscoLwappIdsMIBCompliances, cLIdsIpsSensorPort=cLIdsIpsSensorPort, cLIdsIpsSensorConfigEntry=cLIdsIpsSensorConfigEntry, ciscoLwappIdsConfigGroup=ciscoLwappIdsConfigGroup, ciscoLwappIdsStatusGroup=ciscoLwappIdsStatusGroup, cLIdsClientExclTable=cLIdsClientExclTable, ciscoLwappIdsShunClientUpdate=ciscoLwappIdsShunClientUpdate)
