#
# PySNMP MIB module CISCO-FSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
DomainIdOrZero, DomainId = mibBuilder.importSymbols("CISCO-ST-TC", "DomainIdOrZero", "DomainId")
TimeIntervalMin, CiscoMilliSeconds, TimeIntervalSec = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalMin", "CiscoMilliSeconds", "TimeIntervalSec")
notifyVsanIndex, vsanIndex = mibBuilder.importSymbols("CISCO-VSAN-MIB", "notifyVsanIndex", "vsanIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter32, TimeTicks, NotificationType, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, ModuleIdentity, Bits, iso, ObjectIdentity, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "NotificationType", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "ModuleIdentity", "Bits", "iso", "ObjectIdentity", "Integer32", "Counter64")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
ciscoFspfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 287))
ciscoFspfMIB.setRevisions(('2003-10-08 00:00', '2003-04-13 00:00', '2003-02-21 00:00', '2002-11-21 00:00', '2002-11-01 00:00', '2002-10-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFspfMIB.setRevisionsDescriptions(('Added new object fspfLsrExternal to fspfLsrTable. Added a new compliance statement fspfMIBCompliance3.', 'Added two new objects fspfLinkNumber and fspfLsrNumber. Added new conformance group fspfDatabaseGroupRev1 and compliance fspfMIBCompliance2. Added a new object fspfTotalCheckSum to fspfTable. Added new conformance group fspfGenericGroupRev1 and compliance fspfMIBCompliance1.', 'Import Gauge32 from SNMPv2-SMI. Use CiscoMilliSeconds instead MilliSeconds from CISCO-TC.', 'Changed descriptions of fspfSetToDefault and fspfIfSetToDefault to reflect that the fact that the adminStatus objects also set to default when the entry is set to default.', 'Changed SYNTAX for fspfSpfHoldTime, fspfMinLsArrival and fspfMinLsInterval to CiscoMilliSeconds. Changed range for fspfIfDeadInterval', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFspfMIB.setLastUpdated('200310080000Z')
if mibBuilder.loadTexts: ciscoFspfMIB.setOrganization('Cisco Systems Inc. ')
if mibBuilder.loadTexts: ciscoFspfMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFspfMIB.setDescription('Fabric Shortest Path First (FSPF) MIB.')
fspfConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 1))
fspfDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 2))
fspfNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 3))
fspfNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 3, 0))
fspfMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 4))
class FspfRegionId(TextualConvention, Integer32):
    description = 'Region Id of an autonomous region. The backbone region has region id equal to 0.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FspfLsrType(TextualConvention, Integer32):
    description = 'Type of the Link State Record. There could be multiple type of LSRs even though the standard (FC-SW2) defines only two of them - Switch Link Record and AR Summary Record. The possible values are : 01 - Switch Link Record 02 - AR Summary Record 240-255 - Vendor Specific others - Reserved. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FspfLinkType(TextualConvention, Integer32):
    description = 'Type of an the FSPF Link. The possible values are : 01 - Point-to-Point 240-255 - Vendor Specific others - Reserved. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class FspfInterfaceState(TextualConvention, Integer32):
    reference = 'FC-SW2, Switch Fabric-2, Rev 5.4, June 26, 2001, section 8.7 .'
    description = 'State of FSPF. The possible values are : down (1) - Down init (2) - Init dbExchange (3) - Database Exchange dbAckwait (4) - Database AckWait dbWait (5) - Database Wait full (6) - Full (Conneted) .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("down", 1), ("init", 2), ("dbExchange", 3), ("dbAckwait", 4), ("dbWait", 5), ("full", 6))

class LastCreationTime(TextualConvention, TimeTicks):
    description = 'This TC describes an object that stores the last time its entry was created. This can be used for management applications to determine that an entry has been deleted and re-created between reads, causing an otherwise undetectable discontinuity in the data. Note that this will have syntax of TimeStamp.'
    status = 'current'

fspfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1), )
if mibBuilder.loadTexts: fspfTable.setStatus('current')
if mibBuilder.loadTexts: fspfTable.setDescription('This table allows the users to configure and monitor the Fabric Shortest Path First (FSPF) parameters on all the VSANs configured on the local switch. Entries in this tables are automatically created when VSANs are either created or activated (if an entry for that VSAN is not already existing). An entry is deleted automatically from this table if either: - the corresponding VSAN is deleted. or - the corresponding VSAN is suspended and the values of all writable objects in that entry have default values. An entry can be created through the use of fspfRowStatus only as a re-creation of that entry after it was deleted because the corresponding VSAN was suspended, and while the VSAN continues to exist. So an entry in this table exists when one or both of these conditions holds: - one or more configuration parameters have non-default values for a VSAN which is suspended, and/or - the VSAN is active. This has a number of consequences: - an entry exists for a suspended VSAN whenever that VSAN has non-default parameters. - an entry cannot be created (via fspfRowStatus) for a VSAN with default parameters; instead, the agent creates/deletes an entry for a VSAN with default parameters according to whether the VSAN is active or suspended. - an entry can not be created via fspfIfRowStatus unless non-default parameter values are (simultaneously) configured for a VSAN which is suspended; - deleting an entry via RowStatus when either the VSAN is suspended and configured with non-default values or the VSAN is active, is equivalent to resetting its parameters to their default values. If the VSAN is suspended and was configured with default- values, then the entry would be deleted.')
fspfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: fspfEntry.setStatus('current')
if mibBuilder.loadTexts: fspfEntry.setDescription('This entry contains the FSPF parameters on this VSAN.')
fspfRegionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 1), FspfRegionId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfRegionId.setStatus('current')
if mibBuilder.loadTexts: fspfRegionId.setDescription('The autonomous region of the local switch on this VSAN.')
fspfDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 2), DomainId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfDomainId.setStatus('current')
if mibBuilder.loadTexts: fspfDomainId.setDescription('The Domain Id of the local switch on this VSAN.')
fspfSpfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 3), TimeIntervalSec()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfSpfDelay.setStatus('current')
if mibBuilder.loadTexts: fspfSpfDelay.setDescription('The time between when FSPF receives topology updates and when it starts the Shortest Path First (SPF) computation on this VSAN. The smaller value means that routing will react to the changes faster but the CPU usage is greater.')
fspfSpfHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 4), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('MilliSeconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfSpfHoldTime.setStatus('current')
if mibBuilder.loadTexts: fspfSpfHoldTime.setDescription('The minimum time between two consecutive SPF computations on this VSAN. The smaller value means that routing will react to the changes faster but the CPU usage is greater.')
fspfMinLsArrival = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 5), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1000)).setUnits('MilliSeconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfMinLsArrival.setStatus('current')
if mibBuilder.loadTexts: fspfMinLsArrival.setDescription('The minimum time after accepting a Link State Record (LSR) on this VSAN before accepting another update of the same LSR on the same VSAN. An LSR update that is not accepted because of this time interval is discarded.')
fspfMinLsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 6), CiscoMilliSeconds().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5000)).setUnits('MilliSeconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfMinLsInterval.setStatus('current')
if mibBuilder.loadTexts: fspfMinLsInterval.setDescription('The minimum time after this switch sends an LSR on this VSAN before it will send another update of the same LSR on the same VSAN.')
fspfLsRefreshTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 7), TimeIntervalMin()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsRefreshTime.setStatus('current')
if mibBuilder.loadTexts: fspfLsRefreshTime.setDescription('The interval between transmission of refresh LSRs on this VSAN.')
fspfMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 8), TimeIntervalMin()).setUnits('Minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfMaxAge.setStatus('current')
if mibBuilder.loadTexts: fspfMaxAge.setDescription('The maximum age an LSR will be retained in the FSPF database on this VSAN. It is removed from the database after MaxAge is reached.')
fspfMaxAgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfMaxAgeCount.setStatus('current')
if mibBuilder.loadTexts: fspfMaxAgeCount.setDescription('The number of times any LSR reached fspfMaxAge in this VSAN since the creation of the entry.')
fspfSpfComputations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfSpfComputations.setStatus('current')
if mibBuilder.loadTexts: fspfSpfComputations.setDescription('The number of times the SPF computation has been done on this VSAN since the creation of the entry.')
fspfChecksumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfChecksumErrors.setStatus('current')
if mibBuilder.loadTexts: fspfChecksumErrors.setDescription('The number of FSPF checksum errors occurred on this on this VSAN since the creation of the entry.')
fspfLsuRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsuRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfLsuRxPkts.setDescription('Total number of Link State Update (LSU) packets received on all the interfaces on this VSAN since the creation of the entry.')
fspfLsaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsaRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfLsaRxPkts.setDescription('Total number of Link State Acknowledgement (LSA) packets received on all the interfaces on this VSAN since the creation of the entry.')
fspfLsuTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsuTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfLsuTxPkts.setDescription('Total number of Link State Update (LSU) packets transmitted on all the interfaces on this VSAN since the creation of the entry.')
fspfLsaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsaTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfLsaTxPkts.setDescription('Total number of Link State Acknowledgement (LSA) packets transmitted on all the interfaces on this VSAN since the creation of the entry.')
fspfHelloTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfHelloTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfHelloTxPkts.setDescription('Total number of HELLO packets transmitted on all interfaces on this VSAN since the creation of the entry.')
fspfHelloRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfHelloRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfHelloRxPkts.setDescription('Total number of HELLO packets received on all the interfaces on this VSAN since the creation of the entry.')
fspfRetransmittedLsuTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfRetransmittedLsuTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfRetransmittedLsuTxPkts.setDescription('Total number of LSU packets retransmitted on all the interfaces on this VSAN since the creation of the entry.')
fspfErrorRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfErrorRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfErrorRxPkts.setDescription('Number of invalid FSPF control packets received on all the interface on this VSAN since the creation of the entry.')
fspfLsrs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrs.setStatus('current')
if mibBuilder.loadTexts: fspfLsrs.setDescription('The number of current entries for this VSAN in the fspfLsrTable.')
fspfCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 21), LastCreationTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfCreateTime.setStatus('current')
if mibBuilder.loadTexts: fspfCreateTime.setDescription('The value of sysUpTime when this entry was last created.')
fspfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: fspfAdminStatus.setDescription('The desired state of FSPF on this VSAN. If value of this object is set to up (1) , then FSPF is enabled on this VSAN. If set to down (2) , then FSPF is disabled on this VSAN.')
fspfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfOperStatus.setStatus('current')
if mibBuilder.loadTexts: fspfOperStatus.setDescription("State of FSPF on this VSAN. If 'fspfAdminStatus' is down (2) then the 'fspfOperStatus' should be down (2). If 'fspfAdminStatus' is changed to up (1) then 'fspfOperStatus' should change to up (1) as and when FSPF is active on this VSAN.")
fspfSetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("noOp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfSetToDefault.setStatus('current')
if mibBuilder.loadTexts: fspfSetToDefault.setDescription("Setting this value to 'default' changes the value of each and every every write-able object in this row to its default value. If all the configuration parameters have their default values and if the VSAN is suspended, then the row is deleted automatically. No action is taken if this object is set to 'noOp'. The value of the object when read is always 'noOp'.")
fspfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfRowStatus.setStatus('current')
if mibBuilder.loadTexts: fspfRowStatus.setDescription('The status of conceptual row on this VSAN. This object can be used to create an entry only if the corresponding VSAN is suspended. If the VSAN is either not-existent or active, a create will fail.')
fspfTotalCheckSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfTotalCheckSum.setStatus('current')
if mibBuilder.loadTexts: fspfTotalCheckSum.setDescription('The total checksum of all the LSRs on this VSAN.')
fspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2), )
if mibBuilder.loadTexts: fspfIfTable.setStatus('current')
if mibBuilder.loadTexts: fspfIfTable.setDescription('This table allows the users to configure and monitor the Fabric Shortest Path First (FSPF) parameters on all interfaces on all the VSANs configured on the local switch. An entry is automatically created in this table if there is an entry in the fspfTable for a VSAN when an E_port comes up on that VSAN. An entry is automatically deleted from this table if either : a) the interface transitions to being a down interface which is configured with default values and which is either down or a non-E_port, or b) the fspfTable entry for the corresponding VSAN is deleted. Entries in this table can be created via fspfIfRowStatus only as the means to specify non-default parameter values for an interface at a time when that interface is either down or is a non-E_port. So an entry in this table exists when one or both of these conditions holds: - one or more configuration parameters have non-default values for an interface which is either down or a non-E_port and corresponding VSAN has an entry in the fspfTable, and/or - the interface is an E_port and it is up. This has a number of consequences: - an entry exists for a non-E_port or an E_port which is down whenever that interface has non-default parameters and the corresponding VSAN has an entry in the fspfTable; - an entry cannot be created (via fspfIfRowStatus) for an interface with default parameters; instead, the agent creates/deletes an entry for an interface with default parameters according to whether the E_port is up or down. - an entry can not be created via fspfIfRowStatus unless non-default parameter values are (simultaneously) configured for an interface which is a non-E_port or a down interface, and the corresponding VSAN has an entry in the fspfTable. - deleting an entry via RowStatus when either the interface is down and configured with non-default values or the interface is up, is equivalent to resetting its parameters to their default values. If the interface is down and was configured with default- values, then the entry would be deleted.')
fspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: fspfIfEntry.setDescription("An entry containing information for an FSPF interface on this VSAN. The entry is created when a FSPF is enabled on this VSAN by creating an entry in the fspfTable on this VSAN. 'vsanIndex' specifies a particular VSAN and 'ifIndex' specifies the particular interface for an entry.")
fspfIfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfCost.setReference('FC-SW2, Switch Fabric-2, Rev 5.4, June 26, 2001, section 8.5.5 .')
if mibBuilder.loadTexts: fspfIfCost.setStatus('current')
if mibBuilder.loadTexts: fspfIfCost.setDescription("The administrative cost of sending a frame on this interface on this VSAN. The value 0 means that the cost has not been configured. Once the value has been configured, the value can not again be zero; so, obviously the value can not be set to 0. If the value of this object is 0 and the corresponding interface is up, the agent sets this object to a value calculated using the 'ifSpeed' of the interface. Otherwise, the value of this object is used as the cost. Note that following formula is used to calculate the link cost. Link Cost = { fspfIfCost if fspfIfCost > 0 {(1.0625e12 / Baud Rate) if fspfIfCost == 0 where Baud Rate is the ifSpeed of the interface.")
fspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 2), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(20)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: fspfIfHelloInterval.setDescription('Interval between the periodic HELLO messages sent on this interface on this VSAN to verify the link health. Note that this value must be same on both the interfaces on each end of the link on this VSAN.')
fspfIfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 3), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)).clone(80)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: fspfIfDeadInterval.setDescription('Maximum time for which no HELLO messages can be received on this interface on this VSAN. After this time, the interface is assumed to be broken and removed from the database. Note that this value must be greater than the HELLO interval specified on this interface on this VSAN.')
fspfIfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 4), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setUnits('Seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: fspfIfRetransmitInterval.setDescription('Time after which an unacknowledged link update is retransmitted on this interface on this VSAN.')
fspfIfLsuRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfLsuRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfLsuRxPkts.setDescription('Number of Link State Update (LSU) packets received on this interface on this VSAN since the creation of the entry.')
fspfIfLsaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfLsaRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfLsaRxPkts.setDescription('Number of Link State Acknowledgement (LSA) packets received on this interface on this VSAN since the creation of the entry.')
fspfIfLsuTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfLsuTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfLsuTxPkts.setDescription('Number of Link State Update (LSU) packets transmitted on this interface on this VSAN since the creation of the entry.')
fspfIfLsaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfLsaTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfLsaTxPkts.setDescription('Number of Link State Acknowledgement (LSA) packets transmitted on this interface on this VSAN since the creation of the entry.')
fspfIfHelloTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfHelloTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfHelloTxPkts.setDescription('Number of HELLO packets transmitted on this interface on this VSAN since the creation of the entry.')
fspfIfHelloRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfHelloRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfHelloRxPkts.setDescription('Number of HELLO packets received on this interface on this VSAN since the creation of the entry.')
fspfIfRetransmittedLsuTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfRetransmittedLsuTxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfRetransmittedLsuTxPkts.setDescription('Number of LSU packets retransmitted on this interface on this VSAN since the creation of the entry.')
fspfIfErrorRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfErrorRxPkts.setStatus('current')
if mibBuilder.loadTexts: fspfIfErrorRxPkts.setDescription('Number of invalid FSPF control packets received on this interface on this VSAN since the creation of the entry.')
fspfIfInactivityExpirations = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfInactivityExpirations.setStatus('current')
if mibBuilder.loadTexts: fspfIfInactivityExpirations.setDescription('Number of times the inactivity timer has expired on this interface on this VSAN since the creation of the entry.')
fspfIfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 14), FspfInterfaceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfNbrState.setReference('FC-SW-2 Rev 5.3, Section 8.7 Neighbor Finite State Machine')
if mibBuilder.loadTexts: fspfIfNbrState.setStatus('current')
if mibBuilder.loadTexts: fspfIfNbrState.setDescription("The state of FSPF's 'neighbor state machine', which is the operational state of the interaction with the neighbor's interface which is connected to this interface. If the 'fspfIfAdminStatus' is down(2), then this object should be down (1). If the 'fspfIfAdminStatus' is up (2) then this object should be take any of the possible values depending on the state of FSPF's 'neighbor state machine' on this interface on this VSAN.")
fspfIfNbrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 15), DomainIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfNbrDomainId.setStatus('current')
if mibBuilder.loadTexts: fspfIfNbrDomainId.setDescription('The Domain Id of the neighbor on this VSAN.')
fspfIfNbrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfNbrPortIndex.setStatus('current')
if mibBuilder.loadTexts: fspfIfNbrPortIndex.setDescription("The index, as known by the neighbor, of the neighbor's interface which is connected to this interface on this VSAN.")
fspfIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: fspfIfAdminStatus.setDescription("The desired state of FSPF on this interface on this VSAN. If value of this object is set to 'up', then FSPF is enabled on this interface on this VSAN. If set to 'down', then FSPF is disabled on this interface on this VSAN. This object meaningful only when 'fspfAdminStatus' is up (1).")
fspfIfCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 18), LastCreationTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfIfCreateTime.setStatus('current')
if mibBuilder.loadTexts: fspfIfCreateTime.setDescription('The value of sysUpTime when this entry was last created.')
fspfIfSetToDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("noOp", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfSetToDefault.setStatus('current')
if mibBuilder.loadTexts: fspfIfSetToDefault.setDescription("Setting this value to 'default' changes the value of each and every every write-able object in this row to its default value. If all the configuration parameters have their default values and if the interface is down, then the row is deleted automatically. No action is taken if this object is set to 'noOp'. The value of the object when read is always 'noOp'.")
fspfIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fspfIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: fspfIfRowStatus.setDescription("The status of the conceptual row. This object can be used to create an entry only if the corresponding VSAN is suspended and the interface is either isolated or is a non-E_port. Otherwise, a create will fail. Setting this object to 'destroy' will always fail.")
fspfLsrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1), )
if mibBuilder.loadTexts: fspfLsrTable.setStatus('current')
if mibBuilder.loadTexts: fspfLsrTable.setDescription('This table is the database of all (the latest incarnation of) the Link State Records (LSR) which are currently contained in the topology database. The topology database contains the LSRs which have been either issued or received by the local switch on any/all VSANs, and which have not reached fspfMaxAge.')
fspfLsrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FSPF-MIB", "fspfLsrDomainId"), (0, "CISCO-FSPF-MIB", "fspfLsrType"))
if mibBuilder.loadTexts: fspfLsrEntry.setStatus('current')
if mibBuilder.loadTexts: fspfLsrEntry.setDescription('This gives information for the most recent update of an LSR. There is one entry for every LSR issued or received by the local on a VSAN.')
fspfLsrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 1), DomainId())
if mibBuilder.loadTexts: fspfLsrDomainId.setStatus('current')
if mibBuilder.loadTexts: fspfLsrDomainId.setDescription('Domain Id of the LSR owner on this VSAN. It is the Link State Id of this LSR.')
fspfLsrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 2), FspfLsrType())
if mibBuilder.loadTexts: fspfLsrType.setStatus('current')
if mibBuilder.loadTexts: fspfLsrType.setDescription('Type of this LSR.')
fspfLsrAdvDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 3), DomainId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrAdvDomainId.setStatus('current')
if mibBuilder.loadTexts: fspfLsrAdvDomainId.setDescription('Domain Id of the switch that is advertising the LSR on the behalf of the switch owning it.')
fspfLsrAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 4), TimeIntervalSec().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrAge.setStatus('current')
if mibBuilder.loadTexts: fspfLsrAge.setDescription('Time since this LSR was inserted into the database.')
fspfLsrIncarnationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrIncarnationNumber.setStatus('current')
if mibBuilder.loadTexts: fspfLsrIncarnationNumber.setDescription('The link state incarnation number of this LSR. This is used to identify most recent instance of an LSR while updating the topology database when an LSR is received. The updating of an LSR includes incrementing its incarnation number prior to transmission of the updated LSR. So most recent LSR is the one with larger incarnation number.')
fspfLsrCheckSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrCheckSum.setStatus('current')
if mibBuilder.loadTexts: fspfLsrCheckSum.setDescription('The checksum of the LSR.')
fspfLsrLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65355))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrLinks.setStatus('current')
if mibBuilder.loadTexts: fspfLsrLinks.setDescription('Number of entries in the fspfLinkTable associated with this LSR.')
fspfLsrExternal = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrExternal.setStatus('current')
if mibBuilder.loadTexts: fspfLsrExternal.setDescription('This objects indicates of this is an external LSR advertized by local switch.')
fspfLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2), )
if mibBuilder.loadTexts: fspfLinkTable.setStatus('current')
if mibBuilder.loadTexts: fspfLinkTable.setDescription('This table contains the list of Inter-Switch Links and their information which is part of the LSR received or issued.')
fspfLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1), ).setIndexNames((0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-FSPF-MIB", "fspfLsrDomainId"), (0, "CISCO-FSPF-MIB", "fspfLsrType"), (0, "CISCO-FSPF-MIB", "fspfLinkIndex"))
if mibBuilder.loadTexts: fspfLinkEntry.setStatus('current')
if mibBuilder.loadTexts: fspfLinkEntry.setDescription('An entry which contains information about a link contained in an LSR on this VSAN. An entry is created whenever a new link appears in an (issued or received) LSR. Also, an entry is deleted when a link no longer appears in an (issued or received) LSR.')
fspfLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: fspfLinkIndex.setStatus('current')
if mibBuilder.loadTexts: fspfLinkIndex.setDescription('An arbitrary index of this link.')
fspfLinkNbrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1, 2), DomainId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLinkNbrDomainId.setStatus('current')
if mibBuilder.loadTexts: fspfLinkNbrDomainId.setDescription('The Domain Id of the neighbor on the other end of this link on this VSAN.')
fspfLinkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLinkPortIndex.setStatus('current')
if mibBuilder.loadTexts: fspfLinkPortIndex.setDescription("The source E_port of this link, as indicated by the index value in the LSR received from the switch identified by 'fspfLsrDomainId'.")
fspfLinkNbrPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLinkNbrPortIndex.setStatus('current')
if mibBuilder.loadTexts: fspfLinkNbrPortIndex.setDescription("The destination E_port of this link, as indicated by the index value in the LSR received from the switch identified by 'fspfLinkNbrDomainId'.")
fspfLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1, 5), FspfLinkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLinkType.setStatus('current')
if mibBuilder.loadTexts: fspfLinkType.setDescription('The type of this link.')
fspfLinkCost = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLinkCost.setStatus('current')
if mibBuilder.loadTexts: fspfLinkCost.setDescription('The cost of sending a frame on this link on this VSAN. Link cost is calculated using a formula link cost = S * (1.0625e12/Baud Rate) where S (value of fspfIfCost object on inteface on the switch corresponding to the domain Id) is the administratively set cost factor for this interface.')
fspfLsrNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLsrNumber.setStatus('current')
if mibBuilder.loadTexts: fspfLsrNumber.setDescription('The number of rows in the fspfLsrTable.')
fspfLinkNumber = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 287, 2, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fspfLinkNumber.setStatus('current')
if mibBuilder.loadTexts: fspfLinkNumber.setDescription('The number of rows in the fspfLinkTable.')
fspfNbrStateChangeNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fspfNbrStateChangeNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: fspfNbrStateChangeNotifyEnable.setDescription("Specifies whether or not the local switch should issue the notification 'fspfNbrStateChangeNotify' when the local switch learns of a change in the Neighbor's state (state in the FSPF Neighbor Finite State Machine) on an interface on a VSAN. If the value of the object is 'true, then the notification is generated. If the value is 'false', notification is not generated.")
fspfIfPrevNbrState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 287, 1, 4), FspfInterfaceState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fspfIfPrevNbrState.setStatus('current')
if mibBuilder.loadTexts: fspfIfPrevNbrState.setDescription("The previous state of FSPF's 'neighbor state machine' on an interface. This object is to be used only as an object in the notification 'fspfNbrStateChangeNotify'.")
fspfNbrStateChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 287, 3, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("CISCO-VSAN-MIB", "notifyVsanIndex"), ("CISCO-FSPF-MIB", "fspfDomainId"), ("CISCO-FSPF-MIB", "fspfIfNbrDomainId"), ("CISCO-FSPF-MIB", "fspfIfNbrState"), ("CISCO-FSPF-MIB", "fspfIfPrevNbrState"))
if mibBuilder.loadTexts: fspfNbrStateChangeNotify.setStatus('current')
if mibBuilder.loadTexts: fspfNbrStateChangeNotify.setDescription("This notification signifies that there has been a change in the state of FSPF neighbors. This is generated when the FSPF state regresses (e.g., goes from Full to init or Down) or progresses (e.g., from any state to Full) to a terminal state. The value of 'fspfIfNbrState' is the state of the neighbor after the change.")
fspfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 1))
fspfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2))
fspfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 1, 1)).setObjects(("CISCO-FSPF-MIB", "fspfGenericGroup"), ("CISCO-FSPF-MIB", "fspfIfGroup"), ("CISCO-FSPF-MIB", "fspfDatabaseGroup"), ("CISCO-FSPF-MIB", "fspfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfMIBCompliance = fspfMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: fspfMIBCompliance.setDescription('The compliance statement for entities which implement the FSPF.')
fspfMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 1, 2)).setObjects(("CISCO-FSPF-MIB", "fspfGenericGroupRev1"), ("CISCO-FSPF-MIB", "fspfIfGroup"), ("CISCO-FSPF-MIB", "fspfDatabaseGroup"), ("CISCO-FSPF-MIB", "fspfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfMIBCompliance1 = fspfMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: fspfMIBCompliance1.setDescription('The compliance statement for entities which implement the FSPF.')
fspfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 1, 3)).setObjects(("CISCO-FSPF-MIB", "fspfGenericGroupRev1"), ("CISCO-FSPF-MIB", "fspfIfGroup"), ("CISCO-FSPF-MIB", "fspfDatabaseGroupRev1"), ("CISCO-FSPF-MIB", "fspfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfMIBCompliance2 = fspfMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: fspfMIBCompliance2.setDescription('The compliance statement for entities which implement the FSPF.')
fspfMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 1, 4)).setObjects(("CISCO-FSPF-MIB", "fspfGenericGroupRev1"), ("CISCO-FSPF-MIB", "fspfIfGroup"), ("CISCO-FSPF-MIB", "fspfDatabaseGroupRev2"), ("CISCO-FSPF-MIB", "fspfNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfMIBCompliance3 = fspfMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: fspfMIBCompliance3.setDescription('The compliance statement for entities which implement the FSPF.')
fspfGenericGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 1)).setObjects(("CISCO-FSPF-MIB", "fspfRegionId"), ("CISCO-FSPF-MIB", "fspfDomainId"), ("CISCO-FSPF-MIB", "fspfSpfDelay"), ("CISCO-FSPF-MIB", "fspfSpfHoldTime"), ("CISCO-FSPF-MIB", "fspfMinLsArrival"), ("CISCO-FSPF-MIB", "fspfMinLsInterval"), ("CISCO-FSPF-MIB", "fspfLsRefreshTime"), ("CISCO-FSPF-MIB", "fspfMaxAge"), ("CISCO-FSPF-MIB", "fspfMaxAgeCount"), ("CISCO-FSPF-MIB", "fspfSpfComputations"), ("CISCO-FSPF-MIB", "fspfChecksumErrors"), ("CISCO-FSPF-MIB", "fspfLsuRxPkts"), ("CISCO-FSPF-MIB", "fspfLsaRxPkts"), ("CISCO-FSPF-MIB", "fspfLsuTxPkts"), ("CISCO-FSPF-MIB", "fspfLsaTxPkts"), ("CISCO-FSPF-MIB", "fspfHelloTxPkts"), ("CISCO-FSPF-MIB", "fspfHelloRxPkts"), ("CISCO-FSPF-MIB", "fspfRetransmittedLsuTxPkts"), ("CISCO-FSPF-MIB", "fspfErrorRxPkts"), ("CISCO-FSPF-MIB", "fspfLsrs"), ("CISCO-FSPF-MIB", "fspfCreateTime"), ("CISCO-FSPF-MIB", "fspfAdminStatus"), ("CISCO-FSPF-MIB", "fspfOperStatus"), ("CISCO-FSPF-MIB", "fspfSetToDefault"), ("CISCO-FSPF-MIB", "fspfRowStatus"), ("CISCO-FSPF-MIB", "fspfNbrStateChangeNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfGenericGroup = fspfGenericGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fspfGenericGroup.setDescription('A collection of objects for displaying and configuring FSPF parameters.')
fspfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 3)).setObjects(("CISCO-FSPF-MIB", "fspfIfCost"), ("CISCO-FSPF-MIB", "fspfIfHelloInterval"), ("CISCO-FSPF-MIB", "fspfIfDeadInterval"), ("CISCO-FSPF-MIB", "fspfIfRetransmitInterval"), ("CISCO-FSPF-MIB", "fspfIfLsuRxPkts"), ("CISCO-FSPF-MIB", "fspfIfLsaRxPkts"), ("CISCO-FSPF-MIB", "fspfIfLsuTxPkts"), ("CISCO-FSPF-MIB", "fspfIfLsaTxPkts"), ("CISCO-FSPF-MIB", "fspfIfHelloTxPkts"), ("CISCO-FSPF-MIB", "fspfIfHelloRxPkts"), ("CISCO-FSPF-MIB", "fspfIfRetransmittedLsuTxPkts"), ("CISCO-FSPF-MIB", "fspfIfErrorRxPkts"), ("CISCO-FSPF-MIB", "fspfIfInactivityExpirations"), ("CISCO-FSPF-MIB", "fspfIfNbrState"), ("CISCO-FSPF-MIB", "fspfIfNbrDomainId"), ("CISCO-FSPF-MIB", "fspfIfNbrPortIndex"), ("CISCO-FSPF-MIB", "fspfIfAdminStatus"), ("CISCO-FSPF-MIB", "fspfIfCreateTime"), ("CISCO-FSPF-MIB", "fspfIfSetToDefault"), ("CISCO-FSPF-MIB", "fspfIfRowStatus"), ("CISCO-FSPF-MIB", "fspfIfPrevNbrState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfIfGroup = fspfIfGroup.setStatus('current')
if mibBuilder.loadTexts: fspfIfGroup.setDescription('A collection of objects for displaying the FSPF interface information.')
fspfDatabaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 4)).setObjects(("CISCO-FSPF-MIB", "fspfLsrAdvDomainId"), ("CISCO-FSPF-MIB", "fspfLsrAge"), ("CISCO-FSPF-MIB", "fspfLsrIncarnationNumber"), ("CISCO-FSPF-MIB", "fspfLsrCheckSum"), ("CISCO-FSPF-MIB", "fspfLsrLinks"), ("CISCO-FSPF-MIB", "fspfLinkNbrDomainId"), ("CISCO-FSPF-MIB", "fspfLinkPortIndex"), ("CISCO-FSPF-MIB", "fspfLinkNbrPortIndex"), ("CISCO-FSPF-MIB", "fspfLinkType"), ("CISCO-FSPF-MIB", "fspfLinkCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfDatabaseGroup = fspfDatabaseGroup.setStatus('deprecated')
if mibBuilder.loadTexts: fspfDatabaseGroup.setDescription('A collection of objects for displaying the FSPF topology database information.')
fspfNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 5)).setObjects(("CISCO-FSPF-MIB", "fspfNbrStateChangeNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfNotificationGroup = fspfNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fspfNotificationGroup.setDescription('A collection of notifications for FSPF.')
fspfGenericGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 6)).setObjects(("CISCO-FSPF-MIB", "fspfRegionId"), ("CISCO-FSPF-MIB", "fspfDomainId"), ("CISCO-FSPF-MIB", "fspfSpfDelay"), ("CISCO-FSPF-MIB", "fspfSpfHoldTime"), ("CISCO-FSPF-MIB", "fspfMinLsArrival"), ("CISCO-FSPF-MIB", "fspfMinLsInterval"), ("CISCO-FSPF-MIB", "fspfLsRefreshTime"), ("CISCO-FSPF-MIB", "fspfMaxAge"), ("CISCO-FSPF-MIB", "fspfMaxAgeCount"), ("CISCO-FSPF-MIB", "fspfSpfComputations"), ("CISCO-FSPF-MIB", "fspfChecksumErrors"), ("CISCO-FSPF-MIB", "fspfLsuRxPkts"), ("CISCO-FSPF-MIB", "fspfLsaRxPkts"), ("CISCO-FSPF-MIB", "fspfLsuTxPkts"), ("CISCO-FSPF-MIB", "fspfLsaTxPkts"), ("CISCO-FSPF-MIB", "fspfHelloTxPkts"), ("CISCO-FSPF-MIB", "fspfHelloRxPkts"), ("CISCO-FSPF-MIB", "fspfRetransmittedLsuTxPkts"), ("CISCO-FSPF-MIB", "fspfErrorRxPkts"), ("CISCO-FSPF-MIB", "fspfLsrs"), ("CISCO-FSPF-MIB", "fspfCreateTime"), ("CISCO-FSPF-MIB", "fspfAdminStatus"), ("CISCO-FSPF-MIB", "fspfOperStatus"), ("CISCO-FSPF-MIB", "fspfSetToDefault"), ("CISCO-FSPF-MIB", "fspfRowStatus"), ("CISCO-FSPF-MIB", "fspfTotalCheckSum"), ("CISCO-FSPF-MIB", "fspfNbrStateChangeNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfGenericGroupRev1 = fspfGenericGroupRev1.setStatus('current')
if mibBuilder.loadTexts: fspfGenericGroupRev1.setDescription('A collection of objects for displaying and configuring FSPF parameters.')
fspfDatabaseGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 7)).setObjects(("CISCO-FSPF-MIB", "fspfLsrAdvDomainId"), ("CISCO-FSPF-MIB", "fspfLsrAge"), ("CISCO-FSPF-MIB", "fspfLsrIncarnationNumber"), ("CISCO-FSPF-MIB", "fspfLsrCheckSum"), ("CISCO-FSPF-MIB", "fspfLsrLinks"), ("CISCO-FSPF-MIB", "fspfLinkNbrDomainId"), ("CISCO-FSPF-MIB", "fspfLinkPortIndex"), ("CISCO-FSPF-MIB", "fspfLinkNbrPortIndex"), ("CISCO-FSPF-MIB", "fspfLinkType"), ("CISCO-FSPF-MIB", "fspfLinkCost"), ("CISCO-FSPF-MIB", "fspfLsrNumber"), ("CISCO-FSPF-MIB", "fspfLinkNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfDatabaseGroupRev1 = fspfDatabaseGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: fspfDatabaseGroupRev1.setDescription('A collection of objects for displaying the FSPF topology database information.')
fspfDatabaseGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 287, 4, 2, 8)).setObjects(("CISCO-FSPF-MIB", "fspfLsrAdvDomainId"), ("CISCO-FSPF-MIB", "fspfLsrAge"), ("CISCO-FSPF-MIB", "fspfLsrIncarnationNumber"), ("CISCO-FSPF-MIB", "fspfLsrCheckSum"), ("CISCO-FSPF-MIB", "fspfLsrLinks"), ("CISCO-FSPF-MIB", "fspfLinkNbrDomainId"), ("CISCO-FSPF-MIB", "fspfLinkPortIndex"), ("CISCO-FSPF-MIB", "fspfLinkNbrPortIndex"), ("CISCO-FSPF-MIB", "fspfLinkType"), ("CISCO-FSPF-MIB", "fspfLinkCost"), ("CISCO-FSPF-MIB", "fspfLsrNumber"), ("CISCO-FSPF-MIB", "fspfLinkNumber"), ("CISCO-FSPF-MIB", "fspfLsrExternal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fspfDatabaseGroupRev2 = fspfDatabaseGroupRev2.setStatus('current')
if mibBuilder.loadTexts: fspfDatabaseGroupRev2.setDescription('A collection of objects for displaying the FSPF topology database information.')
mibBuilder.exportSymbols("CISCO-FSPF-MIB", fspfIfTable=fspfIfTable, fspfIfHelloRxPkts=fspfIfHelloRxPkts, fspfIfCreateTime=fspfIfCreateTime, fspfMinLsArrival=fspfMinLsArrival, fspfLsuTxPkts=fspfLsuTxPkts, fspfMIBCompliance1=fspfMIBCompliance1, fspfMIBConformance=fspfMIBConformance, fspfSetToDefault=fspfSetToDefault, LastCreationTime=LastCreationTime, ciscoFspfMIB=ciscoFspfMIB, fspfLsRefreshTime=fspfLsRefreshTime, fspfNbrStateChangeNotify=fspfNbrStateChangeNotify, fspfLinkEntry=fspfLinkEntry, fspfIfGroup=fspfIfGroup, fspfIfLsuRxPkts=fspfIfLsuRxPkts, fspfIfErrorRxPkts=fspfIfErrorRxPkts, fspfIfSetToDefault=fspfIfSetToDefault, fspfLsrCheckSum=fspfLsrCheckSum, fspfLinkNbrPortIndex=fspfLinkNbrPortIndex, fspfOperStatus=fspfOperStatus, fspfHelloRxPkts=fspfHelloRxPkts, fspfIfAdminStatus=fspfIfAdminStatus, FspfInterfaceState=FspfInterfaceState, PYSNMP_MODULE_ID=ciscoFspfMIB, fspfRegionId=fspfRegionId, fspfRowStatus=fspfRowStatus, fspfIfNbrPortIndex=fspfIfNbrPortIndex, fspfConfiguration=fspfConfiguration, fspfDatabaseGroup=fspfDatabaseGroup, fspfLsaRxPkts=fspfLsaRxPkts, fspfLsrAdvDomainId=fspfLsrAdvDomainId, fspfLinkNumber=fspfLinkNumber, fspfIfHelloInterval=fspfIfHelloInterval, fspfGenericGroup=fspfGenericGroup, fspfIfInactivityExpirations=fspfIfInactivityExpirations, fspfLsrLinks=fspfLsrLinks, fspfLsrAge=fspfLsrAge, fspfLsrNumber=fspfLsrNumber, FspfRegionId=FspfRegionId, fspfNotification=fspfNotification, fspfIfLsaRxPkts=fspfIfLsaRxPkts, fspfIfRowStatus=fspfIfRowStatus, fspfErrorRxPkts=fspfErrorRxPkts, fspfIfDeadInterval=fspfIfDeadInterval, fspfIfLsaTxPkts=fspfIfLsaTxPkts, fspfLsrType=fspfLsrType, fspfSpfComputations=fspfSpfComputations, fspfIfHelloTxPkts=fspfIfHelloTxPkts, fspfNbrStateChangeNotifyEnable=fspfNbrStateChangeNotifyEnable, fspfLsrExternal=fspfLsrExternal, fspfLsrEntry=fspfLsrEntry, fspfMIBCompliance=fspfMIBCompliance, fspfChecksumErrors=fspfChecksumErrors, fspfLsrTable=fspfLsrTable, fspfLsrIncarnationNumber=fspfLsrIncarnationNumber, fspfDatabaseGroupRev1=fspfDatabaseGroupRev1, fspfLinkType=fspfLinkType, fspfLinkNbrDomainId=fspfLinkNbrDomainId, fspfMaxAge=fspfMaxAge, fspfGenericGroupRev1=fspfGenericGroupRev1, fspfMIBCompliances=fspfMIBCompliances, fspfDatabase=fspfDatabase, fspfLsuRxPkts=fspfLsuRxPkts, fspfNotificationPrefix=fspfNotificationPrefix, fspfLinkIndex=fspfLinkIndex, fspfNotificationGroup=fspfNotificationGroup, fspfSpfHoldTime=fspfSpfHoldTime, fspfDatabaseGroupRev2=fspfDatabaseGroupRev2, fspfIfRetransmitInterval=fspfIfRetransmitInterval, fspfIfRetransmittedLsuTxPkts=fspfIfRetransmittedLsuTxPkts, fspfMIBGroups=fspfMIBGroups, fspfIfEntry=fspfIfEntry, fspfIfNbrDomainId=fspfIfNbrDomainId, fspfTotalCheckSum=fspfTotalCheckSum, fspfLinkTable=fspfLinkTable, fspfDomainId=fspfDomainId, fspfMaxAgeCount=fspfMaxAgeCount, fspfLsaTxPkts=fspfLsaTxPkts, fspfCreateTime=fspfCreateTime, fspfMIBCompliance3=fspfMIBCompliance3, fspfEntry=fspfEntry, fspfRetransmittedLsuTxPkts=fspfRetransmittedLsuTxPkts, fspfAdminStatus=fspfAdminStatus, fspfLinkPortIndex=fspfLinkPortIndex, fspfSpfDelay=fspfSpfDelay, fspfMinLsInterval=fspfMinLsInterval, fspfIfLsuTxPkts=fspfIfLsuTxPkts, fspfLinkCost=fspfLinkCost, FspfLinkType=FspfLinkType, fspfTable=fspfTable, fspfLsrDomainId=fspfLsrDomainId, fspfHelloTxPkts=fspfHelloTxPkts, FspfLsrType=FspfLsrType, fspfLsrs=fspfLsrs, fspfIfNbrState=fspfIfNbrState, fspfIfPrevNbrState=fspfIfPrevNbrState, fspfMIBCompliance2=fspfMIBCompliance2, fspfIfCost=fspfIfCost)
