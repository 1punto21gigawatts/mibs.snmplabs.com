#
# PySNMP MIB module WLSX-RS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WLSX-RS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
wlsxEnterpriseMibModules, = mibBuilder.importSymbols("ARUBA-MIB", "wlsxEnterpriseMibModules")
ArubaAPDot1dState, ArubaPortSpeed, ArubaPoeState, ArubaOperStateValue, ArubaActiveState, ArubaEnableValue, ArubaPortType, ArubaDot3azStatus, ArubaEnet1Mode, ArubaPortDuplex = mibBuilder.importSymbols("ARUBA-TC", "ArubaAPDot1dState", "ArubaPortSpeed", "ArubaPoeState", "ArubaOperStateValue", "ArubaActiveState", "ArubaEnableValue", "ArubaPortType", "ArubaDot3azStatus", "ArubaEnet1Mode", "ArubaPortDuplex")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
AddressFamilyNumbers, = mibBuilder.importSymbols("IANA-ADDRESS-FAMILY-NUMBERS-MIB", "AddressFamilyNumbers")
LldpManAddress, LldpPortId, LldpChassisIdSubtype, LldpSystemCapabilitiesMap, LldpPortIdSubtype, LldpChassisId = mibBuilder.importSymbols("LLDP-MIB", "LldpManAddress", "LldpPortId", "LldpChassisIdSubtype", "LldpSystemCapabilitiesMap", "LldpPortIdSubtype", "LldpChassisId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Counter32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, NotificationType, snmpModules, ObjectIdentity, MibIdentifier, Unsigned32, ModuleIdentity, Gauge32, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Counter32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "NotificationType", "snmpModules", "ObjectIdentity", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Gauge32", "Counter64", "Integer32")
PhysAddress, TDomain, TimeInterval, MacAddress, TAddress, TruthValue, TestAndIncr, TextualConvention, DisplayString, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TDomain", "TimeInterval", "MacAddress", "TAddress", "TruthValue", "TestAndIncr", "TextualConvention", "DisplayString", "StorageType", "RowStatus")
wlanAPMacAddress, = mibBuilder.importSymbols("WLSX-WLAN-MIB", "wlanAPMacAddress")
wlsxRSMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16))
wlsxRSMIB.setRevisions(('1911-06-01 20:12',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wlsxRSMIB.setRevisionsDescriptions(('The initial revision.',))
if mibBuilder.loadTexts: wlsxRSMIB.setLastUpdated('1106012012Z')
if mibBuilder.loadTexts: wlsxRSMIB.setOrganization('Aruba Wireless Networks')
if mibBuilder.loadTexts: wlsxRSMIB.setContactInfo('Postal: 1322 Crossman Avenue Sunnyvale, CA 94089 E-mail: dl-support@arubanetworks.com Phone: +1 408 227 4500')
if mibBuilder.loadTexts: wlsxRSMIB.setDescription('This MIB module defines MIB objects which provide information about remote user and node state.')
wlsxRemoteWiredGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1))
wlsxRemoteUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2))
wlsxRemoteAccessPointPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1))
wlsxRemoteAccessPointUSBGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1))
wlsxRemoteWiredPortTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1), )
if mibBuilder.loadTexts: wlsxRemoteWiredPortTable.setStatus('current')
if mibBuilder.loadTexts: wlsxRemoteWiredPortTable.setDescription(' This table enumerates the ports on the device ')
wlsxRemotePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"))
if mibBuilder.loadTexts: wlsxRemotePortEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxRemotePortEntry.setDescription('Wired Port Entry')
remotePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: remotePortNumber.setStatus('current')
if mibBuilder.loadTexts: remotePortNumber.setDescription(' Port Index ')
remotePortMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortMAC.setStatus('current')
if mibBuilder.loadTexts: remotePortMAC.setDescription(' Port MAC address ')
remotePortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 3), ArubaEnet1Mode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortMode.setStatus('current')
if mibBuilder.loadTexts: remotePortMode.setDescription(' Port Mode ')
remotePortSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSlotNumber.setStatus('current')
if mibBuilder.loadTexts: remotePortSlotNumber.setDescription(' Slot Number ')
remotePortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortPortNumber.setStatus('current')
if mibBuilder.loadTexts: remotePortPortNumber.setDescription(' Port Number ')
remotePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 6), ArubaPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortType.setStatus('current')
if mibBuilder.loadTexts: remotePortType.setDescription(' Port Type ')
remotePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 7), ArubaEnableValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortAdminState.setStatus('current')
if mibBuilder.loadTexts: remotePortAdminState.setDescription(' Administrative state ')
remotePortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 8), ArubaOperStateValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortOperState.setStatus('current')
if mibBuilder.loadTexts: remotePortOperState.setDescription(' Operational State ')
remotePortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 9), ArubaPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSpeed.setStatus('current')
if mibBuilder.loadTexts: remotePortSpeed.setDescription(' Port Speed ')
remotePortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 10), ArubaPortDuplex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortDuplex.setStatus('current')
if mibBuilder.loadTexts: remotePortDuplex.setDescription(' Port Duplex ')
remotePortTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortTxPackets.setStatus('current')
if mibBuilder.loadTexts: remotePortTxPackets.setDescription(' Transmitted frames ')
remotePortTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortTxBytes.setStatus('current')
if mibBuilder.loadTexts: remotePortTxBytes.setDescription(' Transmitted bytes ')
remotePortRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortRxPackets.setStatus('current')
if mibBuilder.loadTexts: remotePortRxPackets.setDescription(' Received frames ')
remotePortRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortRxBytes.setStatus('current')
if mibBuilder.loadTexts: remotePortRxBytes.setDescription(' Received bytes ')
remotePortDot3azStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 15), ArubaDot3azStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortDot3azStatus.setStatus('current')
if mibBuilder.loadTexts: remotePortDot3azStatus.setDescription(' 802.3az status ')
remotePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortName.setStatus('current')
if mibBuilder.loadTexts: remotePortName.setDescription(' The name of the port ')
remotePortPoEState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 17), ArubaPoeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortPoEState.setStatus('current')
if mibBuilder.loadTexts: remotePortPoEState.setDescription(' PSE status ')
remotePortSTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 1, 1, 18), ArubaAPDot1dState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remotePortSTPState.setStatus('current')
if mibBuilder.loadTexts: remotePortSTPState.setDescription(' STP status ')
wlsxRemoteUSBTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1), )
if mibBuilder.loadTexts: wlsxRemoteUSBTable.setStatus('current')
if mibBuilder.loadTexts: wlsxRemoteUSBTable.setDescription(' This table enumerates the ports on the device ')
wlsxUSBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "usbDevNumber"))
if mibBuilder.loadTexts: wlsxUSBEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxUSBEntry.setDescription('Wired Port Entry')
usbDevNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDevNumber.setStatus('current')
if mibBuilder.loadTexts: usbDevNumber.setDescription(' Device Number (1-based) ')
usbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbStatus.setStatus('current')
if mibBuilder.loadTexts: usbStatus.setDescription(' Device Status ')
usbManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbManufacturer.setStatus('current')
if mibBuilder.loadTexts: usbManufacturer.setDescription(' Manufacturer ')
usbProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbProduct.setStatus('current')
if mibBuilder.loadTexts: usbProduct.setDescription(' Product ')
usbSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbSerialNumber.setStatus('current')
if mibBuilder.loadTexts: usbSerialNumber.setDescription(' Serial Number ')
usbVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbVendor.setStatus('current')
if mibBuilder.loadTexts: usbVendor.setDescription(' Vendor ID ')
usbProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbProductID.setStatus('current')
if mibBuilder.loadTexts: usbProductID.setDescription(' Product ID ')
usbDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbDriver.setStatus('current')
if mibBuilder.loadTexts: usbDriver.setDescription(' Driver module ')
usbRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbRSSI.setStatus('current')
if mibBuilder.loadTexts: usbRSSI.setDescription(' RSSI ')
usbNetworkServiceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbNetworkServiceLevel.setStatus('current')
if mibBuilder.loadTexts: usbNetworkServiceLevel.setDescription(' Network Service Level ')
usbFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: usbFirmwareVersion.setDescription(' Firmware Version ')
usbEsnNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbEsnNumber.setStatus('current')
if mibBuilder.loadTexts: usbEsnNumber.setDescription(' ESN Number ')
usbifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 13), ArubaOperStateValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOperStatus.setStatus('current')
if mibBuilder.loadTexts: usbifOperStatus.setDescription(' Operational Status of the USB Interface ')
usbifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: usbifInUcastPkts.setDescription(' Received Unicast Packets ')
usbifInUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInUcastOctets.setStatus('current')
if mibBuilder.loadTexts: usbifInUcastOctets.setDescription(' Received Bytes ')
usbifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: usbifOutUcastPkts.setDescription(' Transmitted Unicast Packets ')
usbifOutUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutUcastOctets.setStatus('current')
if mibBuilder.loadTexts: usbifOutUcastOctets.setDescription(' Transmitted Bytes ')
usbifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifInErrors.setStatus('current')
if mibBuilder.loadTexts: usbifInErrors.setDescription(' Errors in Incoming Interface ')
usbifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 2, 1, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usbifOutErrors.setStatus('current')
if mibBuilder.loadTexts: usbifOutErrors.setDescription(' Errors in Outgoing Interface ')
wlsxRemoteWiredUserStatsTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2), )
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsTable.setStatus('current')
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsTable.setDescription(' This table enumerates the wired user statistics on the device ')
wlsxRemoteWiredUserStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1), ).setIndexNames((0, "WLSX-RS-MIB", "remoteWiredUserPhyAddress"))
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxRemoteWiredUserStatsEntry.setDescription('Wired User Stats Entry')
remoteWiredUserPhyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: remoteWiredUserPhyAddress.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserPhyAddress.setDescription(' The Physical Address of the Wired User. ')
remoteWiredUserSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserSlot.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserSlot.setDescription(' The Physical slot to which this user is connected to. ')
remoteWiredUserPort = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserPort.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserPort.setDescription(' The Physical port to which this user is connected to. ')
remoteWiredUserVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserVlan.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserVlan.setDescription(' The VLAN to which this user is connected to. ')
remoteWiredUserTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxPkts.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserTxPkts.setDescription(' The number of packets transmitted by this user. ')
remoteWiredUserTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBytes.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserTxBytes.setDescription(' The number of bytes transmitted by this user. ')
remoteWiredUserRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserRxPkts.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserRxPkts.setDescription(' The number of packets received by this user. ')
remoteWiredUserRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserRxBytes.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserRxBytes.setDescription(' The number of bytes received by this user. ')
remoteWiredUserTxBCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBCastPkts.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserTxBCastPkts.setDescription(' The number of broadcast packets transmitted by this user. ')
remoteWiredUserTxBCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxBCastBytes.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserTxBCastBytes.setDescription(' The number of broadcast bytes transmitted by this user. ')
remoteWiredUserTxMCastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxMCastPkts.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserTxMCastPkts.setDescription(' The number of multicast packets transmitted by this user. ')
remoteWiredUserTxMCastBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteWiredUserTxMCastBytes.setStatus('current')
if mibBuilder.loadTexts: remoteWiredUserTxMCastBytes.setDescription(' The number of multicast bytes transmitted by this user. ')
wlsxLldpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3), )
if mibBuilder.loadTexts: wlsxLldpNeighborTable.setStatus('current')
if mibBuilder.loadTexts: wlsxLldpNeighborTable.setDescription(' This table enumerates the LLDP neighbors discovered by the access point. ')
wlsxLldpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"), (0, "WLSX-RS-MIB", "lldpNeighborIndex"))
if mibBuilder.loadTexts: wlsxLldpNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxLldpNeighborEntry.setDescription('LLDP Neighbor Entry')
lldpNeighborIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lldpNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborIndex.setDescription(' Neighbor Index ')
lldpNeighborChassisIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 2), LldpChassisIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborChassisIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborChassisIdSubtype.setDescription(" The subtype of the neighbor's chassis ID ")
lldpNeighborChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 3), LldpChassisId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborChassisId.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborChassisId.setDescription(" The neighbor's chassis ID ")
lldpNeighborPortIdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 4), LldpPortIdSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortIdSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborPortIdSubtype.setDescription(" The subtype of the neighbor's port ID ")
lldpNeighborPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 5), LldpPortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortId.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborPortId.setDescription(" The neighbor's port ID ")
lldpNeighborPortDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborPortDesc.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborPortDesc.setDescription(" The name of the neighbor's port ")
lldpNeighborSysName = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysName.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborSysName.setDescription(' The name of the neighbor ')
lldpNeighborSysDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysDesc.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborSysDesc.setDescription(' The description of the neighbor ')
lldpNeighborSysCapSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 9), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysCapSupported.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborSysCapSupported.setDescription(' The supported set of capabilities ')
lldpNeighborSysCapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 3, 1, 10), LldpSystemCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborSysCapEnabled.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborSysCapEnabled.setDescription(' The enabled set of capabilities ')
wlsxLldpNeighborManAddrTable = MibTable((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4), )
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrTable.setStatus('current')
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrTable.setDescription(' This table enumerates the LLDP neighbor management address discovered by the access point. ')
wlsxLldpNeighborManAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1), ).setIndexNames((0, "WLSX-WLAN-MIB", "wlanAPMacAddress"), (0, "WLSX-RS-MIB", "remotePortNumber"), (0, "WLSX-RS-MIB", "lldpNeighborIndex"), (0, "WLSX-RS-MIB", "lldpNeighborManAddrIndex"))
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrEntry.setStatus('current')
if mibBuilder.loadTexts: wlsxLldpNeighborManAddrEntry.setDescription('LLDP Neighbor Entry')
lldpNeighborManAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: lldpNeighborManAddrIndex.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborManAddrIndex.setDescription(" Indexes the neighbor's management addresses ")
lldpNeighborManAddrSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 2), AddressFamilyNumbers()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborManAddrSubtype.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborManAddrSubtype.setDescription(' The subtype of the management address ')
lldpNeighborManAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 14823, 2, 2, 1, 16, 1, 1, 4, 1, 3), LldpManAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpNeighborManAddr.setStatus('current')
if mibBuilder.loadTexts: lldpNeighborManAddr.setDescription(' A neighbors management address ')
mibBuilder.exportSymbols("WLSX-RS-MIB", remoteWiredUserPort=remoteWiredUserPort, lldpNeighborChassisId=lldpNeighborChassisId, remotePortName=remotePortName, lldpNeighborManAddr=lldpNeighborManAddr, lldpNeighborManAddrSubtype=lldpNeighborManAddrSubtype, remoteWiredUserSlot=remoteWiredUserSlot, usbFirmwareVersion=usbFirmwareVersion, wlsxRemoteAccessPointPortGroup=wlsxRemoteAccessPointPortGroup, lldpNeighborChassisIdSubtype=lldpNeighborChassisIdSubtype, remotePortMode=remotePortMode, usbProduct=usbProduct, usbEsnNumber=usbEsnNumber, usbRSSI=usbRSSI, wlsxRemoteWiredUserStatsTable=wlsxRemoteWiredUserStatsTable, remotePortDuplex=remotePortDuplex, remotePortPortNumber=remotePortPortNumber, remotePortSTPState=remotePortSTPState, wlsxLldpNeighborTable=wlsxLldpNeighborTable, remotePortType=remotePortType, remotePortDot3azStatus=remotePortDot3azStatus, remoteWiredUserTxMCastBytes=remoteWiredUserTxMCastBytes, remotePortOperState=remotePortOperState, remoteWiredUserPhyAddress=remoteWiredUserPhyAddress, remoteWiredUserTxBytes=remoteWiredUserTxBytes, remotePortRxPackets=remotePortRxPackets, remoteWiredUserRxPkts=remoteWiredUserRxPkts, lldpNeighborPortId=lldpNeighborPortId, lldpNeighborSysCapSupported=lldpNeighborSysCapSupported, usbNetworkServiceLevel=usbNetworkServiceLevel, remotePortSlotNumber=remotePortSlotNumber, remoteWiredUserTxBCastBytes=remoteWiredUserTxBCastBytes, wlsxRemoteUSBTable=wlsxRemoteUSBTable, usbSerialNumber=usbSerialNumber, remotePortRxBytes=remotePortRxBytes, wlsxRemoteWiredUserStatsEntry=wlsxRemoteWiredUserStatsEntry, usbifOutUcastOctets=usbifOutUcastOctets, lldpNeighborSysDesc=lldpNeighborSysDesc, usbifOutUcastPkts=usbifOutUcastPkts, lldpNeighborManAddrIndex=lldpNeighborManAddrIndex, wlsxLldpNeighborManAddrTable=wlsxLldpNeighborManAddrTable, usbDriver=usbDriver, usbifInErrors=usbifInErrors, wlsxRSMIB=wlsxRSMIB, usbifOperStatus=usbifOperStatus, usbifInUcastOctets=usbifInUcastOctets, remoteWiredUserTxBCastPkts=remoteWiredUserTxBCastPkts, usbProductID=usbProductID, remoteWiredUserVlan=remoteWiredUserVlan, wlsxLldpNeighborEntry=wlsxLldpNeighborEntry, wlsxLldpNeighborManAddrEntry=wlsxLldpNeighborManAddrEntry, remoteWiredUserTxMCastPkts=remoteWiredUserTxMCastPkts, remotePortPoEState=remotePortPoEState, lldpNeighborPortIdSubtype=lldpNeighborPortIdSubtype, lldpNeighborIndex=lldpNeighborIndex, wlsxRemoteWiredPortTable=wlsxRemoteWiredPortTable, lldpNeighborPortDesc=lldpNeighborPortDesc, remotePortNumber=remotePortNumber, usbStatus=usbStatus, remoteWiredUserRxBytes=remoteWiredUserRxBytes, wlsxRemoteUSBGroup=wlsxRemoteUSBGroup, remotePortSpeed=remotePortSpeed, wlsxRemoteAccessPointUSBGroup=wlsxRemoteAccessPointUSBGroup, remotePortTxPackets=remotePortTxPackets, usbVendor=usbVendor, usbManufacturer=usbManufacturer, wlsxUSBEntry=wlsxUSBEntry, remoteWiredUserTxPkts=remoteWiredUserTxPkts, usbDevNumber=usbDevNumber, usbifInUcastPkts=usbifInUcastPkts, lldpNeighborSysName=lldpNeighborSysName, wlsxRemotePortEntry=wlsxRemotePortEntry, lldpNeighborSysCapEnabled=lldpNeighborSysCapEnabled, remotePortAdminState=remotePortAdminState, usbifOutErrors=usbifOutErrors, remotePortTxBytes=remotePortTxBytes, PYSNMP_MODULE_ID=wlsxRSMIB, remotePortMAC=remotePortMAC, wlsxRemoteWiredGroup=wlsxRemoteWiredGroup)
