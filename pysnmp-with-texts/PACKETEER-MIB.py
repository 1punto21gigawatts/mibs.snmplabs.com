#
# PySNMP MIB module PACKETEER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PACKETEER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:36:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, enterprises, Unsigned32, Counter32, iso, NotificationType, Gauge32, ObjectIdentity, TimeTicks, MibIdentifier, Bits, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "enterprises", "Unsigned32", "Counter32", "iso", "NotificationType", "Gauge32", "ObjectIdentity", "TimeTicks", "MibIdentifier", "Bits", "Integer32", "ModuleIdentity")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
packeteer = MibIdentifier((1, 3, 6, 1, 4, 1, 2334))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1))
packetShaper = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1))
packetShaper_2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 1)).setLabel("packetShaper-2000")
packetShaper_4000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 2)).setLabel("packetShaper-4000")
packetShaper_1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 3)).setLabel("packetShaper-1000")
packetShaper_2500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 4)).setLabel("packetShaper-2500")
packetShaper_4500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 5)).setLabel("packetShaper-4500")
packetShaper_1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 6)).setLabel("packetShaper-1500")
packetShaper_asm50 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 7)).setLabel("packetShaper-asm50")
packetShaper_asm70 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 8)).setLabel("packetShaper-asm70")
packetShaper_asm30 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 9)).setLabel("packetShaper-asm30")
packetShaper_asm90 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 10)).setLabel("packetShaper-asm90")
packetShaper_6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 11)).setLabel("packetShaper-6500")
packetShaper_8500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 12)).setLabel("packetShaper-8500")
packetShaper_asm110 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 13)).setLabel("packetShaper-asm110")
packetShaper_1550 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 14)).setLabel("packetShaper-1550")
packetShaper_9500 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 15)).setLabel("packetShaper-9500")
packetShaper_2550 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 16)).setLabel("packetShaper-2550")
packetShaper_10000 = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 1, 1, 17)).setLabel("packetShaper-10000")
packeteerMibs = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2))
psCommonMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1))
psSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 1))
psLinks = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2))
psPartitions = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3))
psClasses = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4))
psAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5))
psAdmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6))
psUserEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8))
psHighAv = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9))
psAgentEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10))
psShapingStatusOper = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psShapingStatusOper.setStatus('mandatory')
if mibBuilder.loadTexts: psShapingStatusOper.setDescription('This object reflects the current operational traffic shaping status of the PacketShaper. The value of this object reflects the status of the front panel status LED. If all of the following conditions are true, then the object is set to 1, otherwise it is 2: links are up, shaping is on, and the siterouter is usable (if configured).')
linkTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: linkTableSize.setDescription('Number of entries in the linkTable')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2), )
if mibBuilder.loadTexts: linkTable.setStatus('mandatory')
if mibBuilder.loadTexts: linkTable.setDescription('A list of link entries.')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: linkEntry.setDescription('A link entry containing containing statistical objects for a link.')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: linkIndex.setDescription('A unique ID for a link.')
linkName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkName.setStatus('mandatory')
if mibBuilder.loadTexts: linkName.setDescription('A unique name for a link.')
linkByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: linkByteCount.setDescription('The byte count in the link')
linkByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkByteCountHi.setDescription('The High 32 bits of byte count in the link.')
linkPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkPkts.setDescription('The packet count in the link')
linkDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkDataPkts.setDescription('The TCP data packet count in the link')
linkReTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxs.setStatus('mandatory')
if mibBuilder.loadTexts: linkReTxs.setDescription('The TCP retransmit packet count in the link')
linkReTxTosses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxTosses.setStatus('mandatory')
if mibBuilder.loadTexts: linkReTxTosses.setDescription('The TCP tossed retransmit packet count in the link')
linkCirFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCirFails.setStatus('mandatory')
if mibBuilder.loadTexts: linkCirFails.setDescription('The count of CIR fails events in the link')
linkCirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCirAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: linkCirAllocs.setDescription('The count of CIR alloc events in the link')
linkEirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkEirAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: linkEirAllocs.setDescription('The count of EIR alloc events in the link. This variable is obselete and should not be used.')
linkPeakTcpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakTcpConns.setStatus('mandatory')
if mibBuilder.loadTexts: linkPeakTcpConns.setDescription('The peak number of active TCP flows in the link.')
linkTcpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnInits.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpConnInits.setDescription('The count of TCP flows started in the link')
linkTcpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnExits.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpConnExits.setDescription('The count of TCP flows exited in the link')
linkTcpConnRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnRefuses.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpConnRefuses.setDescription('The count of TCP flows exited by TCP refuse in the link')
linkTcpConnIgnores = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnIgnores.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpConnIgnores.setDescription('The count of TCP flows exited by being ignored in the link.')
linkTcpConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnAborts.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpConnAborts.setDescription('The count of TCP flows aborted in the link.')
linkTcpConnDenies = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnDenies.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpConnDenies.setDescription('The count of TCP flows denied by CIR fail in the link.')
linkTcpConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpConnTimeouts.setStatus('deprecated')
if mibBuilder.loadTexts: linkTcpConnTimeouts.setDescription('The count of TCP flows timed out by pshaper in the link. This variable is obsolete and should not be used.')
linkPeakUdpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakUdpConns.setStatus('deprecated')
if mibBuilder.loadTexts: linkPeakUdpConns.setDescription('The peak number of active UDP flows in the link. This variable is deprecated, and should no longer be used.')
linkUdpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkUdpConnInits.setStatus('deprecated')
if mibBuilder.loadTexts: linkUdpConnInits.setDescription('The count of UDP flows started in the link. This variable is deprecated, and should no longer be used.')
linkUdpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkUdpConnExits.setStatus('deprecated')
if mibBuilder.loadTexts: linkUdpConnExits.setDescription('The count of UDP flows exited in the link. This variable is deprecated, and should no longer be used.')
linkSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSize.setStatus('mandatory')
if mibBuilder.loadTexts: linkSize.setDescription('The size in bps of the link.')
linkRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRate.setStatus('mandatory')
if mibBuilder.loadTexts: linkRate.setDescription('The peak bps of the link.')
linkRateAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRateAllocations.setStatus('mandatory')
if mibBuilder.loadTexts: linkRateAllocations.setDescription('The count of rate allocations on the link. This variable is obsolete and should not be used.')
linkPeakGuaranteedRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakGuaranteedRateFlows.setStatus('mandatory')
if mibBuilder.loadTexts: linkPeakGuaranteedRateFlows.setDescription('The peak number of guaranteed rate flows active on the link.')
linkPeakRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakRateFlows.setStatus('mandatory')
if mibBuilder.loadTexts: linkPeakRateFlows.setDescription('The peak number of rate-based flows active on the link. This variable is obsolete and should not be used.')
linkReTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: linkReTxByteCount.setDescription('The count of retransmitted bytes on the link. This is the low-order 32 bits.')
linkReTxByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReTxByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkReTxByteCountHi.setDescription('The count of retransmitted bytes on the link. This is the high-order 32 bits.')
linkTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkTotalRxPkts.setDescription('The total packets received on the link.')
linkTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkTotalTxPkts.setDescription('The total packets transmitted on the link.')
linkRxNoBufs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxNoBufs.setStatus('mandatory')
if mibBuilder.loadTexts: linkRxNoBufs.setDescription('The count of packets that were dropped due to unavailable buffers.')
linkRxPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxPktDrops.setStatus('mandatory')
if mibBuilder.loadTexts: linkRxPktDrops.setDescription('The count of packets dropped due to no buffers, no connection blocks or random dropping.')
linkTxPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTxPktDrops.setStatus('mandatory')
if mibBuilder.loadTexts: linkTxPktDrops.setDescription('The count of transmitted packets that were dropped due to no route available, an i/o error or no buffers.')
linkRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: linkRxErrors.setDescription('The count of received packets that were dropped due to hardware errors.')
linkTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTxErrors.setStatus('mandatory')
if mibBuilder.loadTexts: linkTxErrors.setDescription('The count of transmitted packets that were dropped due to hardware errors.')
linkTcpAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTcpAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: linkTcpAllocFails.setDescription('The count of TCP alloc fails on a link.')
linkIpdgAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIpdgAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: linkIpdgAllocFails.setDescription('The count of IPDG alloc fails on a link.')
linkHostdbAllocFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkHostdbAllocFails.setStatus('mandatory')
if mibBuilder.loadTexts: linkHostdbAllocFails.setDescription('The count of Host DB alloc fails on a link.')
linkShapingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("watch", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkShapingMode.setStatus('mandatory')
if mibBuilder.loadTexts: linkShapingMode.setDescription('The current shaping mode.')
linkAutoclassifyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAutoclassifyMode.setStatus('mandatory')
if mibBuilder.loadTexts: linkAutoclassifyMode.setDescription('The current autoclassification mode.')
linkMacSameSidePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkMacSameSidePkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkMacSameSidePkts.setDescription('The total number of same-side packets on the link.')
linkPassthruPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPassthruPkts.setStatus('mandatory')
if mibBuilder.loadTexts: linkPassthruPkts.setDescription('The total packets passed through on the link.')
linkTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: linkTotalRxBytes.setDescription('The total number of bytes received on the link. This is the low-order 32 bits.')
linkTotalRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalRxBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkTotalRxBytesHi.setDescription('The total number of bytes received on the link. This is the high-order 32 bits.')
linkTotalTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: linkTotalTxBytes.setDescription('The total number of bytes transmitted on the link. This is the low-order 32 bits.')
linkTotalTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTotalTxBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkTotalTxBytesHi.setDescription('The total number of bytes transmitted on the link. This is the high-order 32 bits.')
linkClassChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkClassChecks.setStatus('mandatory')
if mibBuilder.loadTexts: linkClassChecks.setDescription('The number of traversals of the class tree.')
linkPassthruBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPassthruBytes.setStatus('mandatory')
if mibBuilder.loadTexts: linkPassthruBytes.setDescription('The total number of bytes passed through on the link.')
linkCompressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCompressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: linkCompressionMode.setDescription('The current compression mode.')
linkPeakPreCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakPreCompressionRate.setStatus('mandatory')
if mibBuilder.loadTexts: linkPeakPreCompressionRate.setDescription('The peak pre-compression rate on the link.')
linkPeakPostCompressionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPeakPostCompressionRate.setStatus('mandatory')
if mibBuilder.loadTexts: linkPeakPostCompressionRate.setDescription('The peak post-compression rate on the link.')
linkNonComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNonComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: linkNonComprsnBytes.setDescription('The total number of non-compressed bytes on the link.')
linkNonComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNonComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkNonComprsnBytesHi.setDescription('The total number of non-compressed bytes on the link. This is the high-order 32 bits.')
linkPreComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPreComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: linkPreComprsnBytes.setDescription('The total number of bytes before compression on the link.')
linkPreComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPreComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkPreComprsnBytesHi.setDescription('The total number of bytes before compression on the link. This is the high-order 32 bits.')
linkPostComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPostComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: linkPostComprsnBytes.setDescription('The total number of bytes after compression on the link.')
linkPostComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 2, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPostComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: linkPostComprsnBytesHi.setDescription('The total number of bytes after compression on the link. This is the high-order 32 bits.')
partitionTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTableSize.setDescription('Number of entries in the partitionTable')
partitionTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2), )
if mibBuilder.loadTexts: partitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTable.setDescription('A list of partition entries.')
partitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "partitionIndex"))
if mibBuilder.loadTexts: partitionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: partitionEntry.setDescription('A partition entry containing statistical objects for a traffic partition.')
partitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: partitionIndex.setDescription('A unique ID for a partition.')
partitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionName.setStatus('mandatory')
if mibBuilder.loadTexts: partitionName.setDescription('A unique name for a partition.')
partitionLinkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-bound", 1), ("out-bound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLinkDirection.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLinkDirection.setDescription('The orientation of a partition.')
partitionByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionByteCount.setDescription('The byte count in the partition')
partitionByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionByteCountHi.setDescription('The high 32 bits of byte count in the partition.')
partitionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPkts.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPkts.setDescription('The packet count in the partition.')
partitionDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: partitionDataPkts.setDescription('The TCP data packet count in the partition.')
partitionReTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxs.setStatus('mandatory')
if mibBuilder.loadTexts: partitionReTxs.setDescription('The TCP retransmit packet count in the partition.')
partitionReTxTosses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxTosses.setStatus('mandatory')
if mibBuilder.loadTexts: partitionReTxTosses.setDescription('The TCP tossed retransmit packet count in the partition')
partitionCirFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCirFails.setStatus('mandatory')
if mibBuilder.loadTexts: partitionCirFails.setDescription('The count of CIR fail events in the partition.')
partitionCirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCirAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: partitionCirAllocs.setDescription('The count of CIR alloc events in the partition.')
partitionEirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionEirAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: partitionEirAllocs.setDescription('The count of EIR alloc events in the partition. This variable is obsolete and should not be used.')
partitionPeakTcpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakTcpConns.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPeakTcpConns.setDescription('The peak no. of active TCP flows in the partition.')
partitionTcpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnInits.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTcpConnInits.setDescription('The count of TCP flows started in the partition.')
partitionTcpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnExits.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTcpConnExits.setDescription('The count of TCP flows exited in the partition.')
partitionTcpConnRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnRefuses.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTcpConnRefuses.setDescription('The count of TCP flows exited by TCP refuse in the partition.')
partitionTcpConnIgnores = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnIgnores.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTcpConnIgnores.setDescription('The count of TCP flows exited by being ignored in the partition.')
partitionTcpConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnAborts.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTcpConnAborts.setDescription('The count of TCP flows aborted in the partition.')
partitionTcpConnDenies = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnDenies.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTcpConnDenies.setDescription('The count of TCP flows denied by CIR fail in the partition.')
partitionTcpConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTcpConnTimeouts.setStatus('deprecated')
if mibBuilder.loadTexts: partitionTcpConnTimeouts.setDescription('The count of TCP flows timed out by pshaper in the partition. This variable is obsolete and should not be used.')
partitionPeakUdpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakUdpConns.setStatus('deprecated')
if mibBuilder.loadTexts: partitionPeakUdpConns.setDescription('The peak no. of active UDP flows in the partition. This variable is deprecated, and should no longer be used.')
partitionUdpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionUdpConnInits.setStatus('deprecated')
if mibBuilder.loadTexts: partitionUdpConnInits.setDescription('The count of UDP flows started in the partition. This variable is deprecated, and should no longer be used.')
partitionUdpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionUdpConnExits.setStatus('deprecated')
if mibBuilder.loadTexts: partitionUdpConnExits.setDescription('The count of UDP flows exited in the partition. This variable is deprecated, and should no longer be used.')
partitionMinimumBps = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionMinimumBps.setStatus('mandatory')
if mibBuilder.loadTexts: partitionMinimumBps.setDescription('The minimum size in bps of the partition.')
partitionBurstLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionBurstLimit.setStatus('mandatory')
if mibBuilder.loadTexts: partitionBurstLimit.setDescription('The partition burst limit in bps.')
partitionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionRate.setStatus('mandatory')
if mibBuilder.loadTexts: partitionRate.setDescription('The peak total rate in bps of the partition.')
partitionCirRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCirRate.setStatus('mandatory')
if mibBuilder.loadTexts: partitionCirRate.setDescription('The peak guaranteed rate in bps of the partition. This variable is obsolete and should not be used.')
partitionEirRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionEirRate.setStatus('mandatory')
if mibBuilder.loadTexts: partitionEirRate.setDescription('The peak excess rate in bps of the partition. This variable is obsolete and should note be used.')
partitionUnreservedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionUnreservedRate.setStatus('mandatory')
if mibBuilder.loadTexts: partitionUnreservedRate.setDescription('The peak unreserved rate in bps of the partition. This variable is obsolete and should not be used.')
partitionFirstSatisfiedPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFirstSatisfiedPriority.setStatus('mandatory')
if mibBuilder.loadTexts: partitionFirstSatisfiedPriority.setDescription('The peak first priority level at which demand was satisfied (0-8).')
partitionTimeOverLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionTimeOverLimit.setStatus('mandatory')
if mibBuilder.loadTexts: partitionTimeOverLimit.setDescription('The total time in seconds spent over partition size for the partition')
partitionRateAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionRateAllocations.setStatus('mandatory')
if mibBuilder.loadTexts: partitionRateAllocations.setDescription('The count of rate allocations on the partition. This variable is obsolete and should not be used.')
partitionPeakGuaranteedRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakGuaranteedRateFlows.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPeakGuaranteedRateFlows.setDescription('The peak number of guaranteed rate flows active on the partition.')
partitionPeakRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPeakRateFlows.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPeakRateFlows.setDescription('The peak number of rate-based flows active on the partition. This variable is obsolete and should not be used.')
partitionReTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionReTxByteCount.setDescription('The count of retransmitted bytes on the partition. This is the low-order 32 bits.')
partitionReTxByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionReTxByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionReTxByteCountHi.setDescription('The count of retransmitted bytes on the partition. This is the high-order 32 bits.')
partitionDynamicCapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDynamicCapCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionDynamicCapCount.setDescription('The count of dynamic partition reaching caps.')
partitionDynamicNoCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDynamicNoCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionDynamicNoCount.setDescription('The count of unavailable dynamic partition .')
partitionDynamicLiveUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionDynamicLiveUserCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionDynamicLiveUserCount.setDescription('The count of total live dynamic partition user.')
partitionCommittmentFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionCommittmentFailures.setStatus('mandatory')
if mibBuilder.loadTexts: partitionCommittmentFailures.setDescription('The number of minute intervals that were not given the minimum programmed bandwidth.')
partitionLateDropPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropPktCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLateDropPktCount.setDescription('The count of number of late drops in the partition. This is the low-order 32 bits.')
partitionLateDropPktCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropPktCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLateDropPktCountHi.setDescription('The count of number of late drops in the partition . This is the high-order 32 bits.')
partitionLateDropByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLateDropByteCount.setDescription('The count of late drop bytes in the partition. This is the low-order 32 bits.')
partitionLateDropByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionLateDropByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionLateDropByteCountHi.setDescription('The count of late drop bytes in the partition . This is the high-order 32 bits.')
partitionSchedDropPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropPktCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionSchedDropPktCount.setDescription('The count of number of scheduler drops in the partition. This is the low-order 32 bits.')
partitionSchedDropPktCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropPktCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionSchedDropPktCountHi.setDescription('The count of number of scheduler drops in the partition . This is the high-order 32 bits.')
partitionSchedDropByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionSchedDropByteCount.setDescription('The count of scheduler drop bytes in the partition. This is the low-order 32 bits.')
partitionSchedDropByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionSchedDropByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionSchedDropByteCountHi.setDescription('The count of scheduler drop bytes in the partition . This is the high-order 32 bits.')
partitionFrameBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameBytes.setStatus('mandatory')
if mibBuilder.loadTexts: partitionFrameBytes.setDescription('The number of PVC bytes in the partition. This is the low-order 32 bits.')
partitionFrameBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionFrameBytesHi.setDescription('The number of PVC bytes in the partition . This is the high-order 32 bits.')
partitionFrameTargetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameTargetRate.setStatus('mandatory')
if mibBuilder.loadTexts: partitionFrameTargetRate.setDescription('The target frame rate in the partition. This is the low-order 32 bits.')
partitionFrameTargetRateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameTargetRateHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionFrameTargetRateHi.setDescription('The target frame rate in the partition . This is the high-order 32 bits.')
partitionFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionFrameCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionFrameCount.setDescription('The number of frames in the partition.')
partitionEcnCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionEcnCount.setStatus('mandatory')
if mibBuilder.loadTexts: partitionEcnCount.setDescription('The number of ECNs in the partition.')
partitionNonComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionNonComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: partitionNonComprsnBytes.setDescription('The total number of non-compressed bytes in the partition.')
partitionNonComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionNonComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionNonComprsnBytesHi.setDescription('The total number of non-compressed bytes in the partition. This is the high-order 32 bits.')
partitionPreComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPreComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPreComprsnBytes.setDescription('The total number of bytes before compression in the partition.')
partitionPreComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPreComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPreComprsnBytesHi.setDescription('The total number of bytes before compression in the partition. This is the high-order 32 bits.')
partitionPostComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPostComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPostComprsnBytes.setDescription('The total number of bytes after compression in the partition.')
partitionPostComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 3, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: partitionPostComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: partitionPostComprsnBytesHi.setDescription('The total number of bytes after compression in the partition. This is the high-order 32 bits.')
classTableSize = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: classTableSize.setDescription('Number of entries in the classTable')
classTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2), )
if mibBuilder.loadTexts: classTable.setStatus('mandatory')
if mibBuilder.loadTexts: classTable.setDescription('A list of traffic class entries.')
classEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1), ).setIndexNames((0, "PACKETEER-MIB", "classIndex"))
if mibBuilder.loadTexts: classEntry.setStatus('mandatory')
if mibBuilder.loadTexts: classEntry.setDescription('A traffic class entry containing statistical objects for a traffic class.')
classIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classIndex.setStatus('mandatory')
if mibBuilder.loadTexts: classIndex.setDescription('A unique ID for a traffic class.')
className = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: className.setStatus('mandatory')
if mibBuilder.loadTexts: className.setDescription('A unique name for a traffic class.')
classOwningPartName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classOwningPartName.setStatus('mandatory')
if mibBuilder.loadTexts: classOwningPartName.setDescription('A unique name for the partition which owns the class.')
classLinkDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in-bound", 1), ("out-bound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: classLinkDirection.setStatus('mandatory')
if mibBuilder.loadTexts: classLinkDirection.setDescription('The orientation of the class.')
classByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: classByteCount.setDescription('The byte count in the class.')
classByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: classByteCountHi.setDescription('The High 32 bits of byte count in the class.')
classPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPkts.setStatus('mandatory')
if mibBuilder.loadTexts: classPkts.setDescription('The packet count in the class.')
classDataPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classDataPkts.setStatus('mandatory')
if mibBuilder.loadTexts: classDataPkts.setDescription('The TCP data packet count in the class.')
classReTxs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxs.setStatus('mandatory')
if mibBuilder.loadTexts: classReTxs.setDescription('The TCP retransmit packet count in the class.')
classReTxTosses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxTosses.setStatus('mandatory')
if mibBuilder.loadTexts: classReTxTosses.setDescription('The TCP tossed retransmit packet count in the class.')
classCirFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classCirFails.setStatus('mandatory')
if mibBuilder.loadTexts: classCirFails.setDescription('The count of CIR fails events in the class.')
classCirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classCirAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: classCirAllocs.setDescription('The count of CIR alloc events in the class.')
classEirAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classEirAllocs.setStatus('mandatory')
if mibBuilder.loadTexts: classEirAllocs.setDescription('The count of EIR alloc events in the class. This variable is obsolete and should not be used.')
classPeakTcpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakTcpConns.setStatus('mandatory')
if mibBuilder.loadTexts: classPeakTcpConns.setDescription('The peak number of active TCP flows in the class.')
classTcpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnInits.setStatus('mandatory')
if mibBuilder.loadTexts: classTcpConnInits.setDescription('The count of TCP flows started in the class.')
classTcpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnExits.setStatus('mandatory')
if mibBuilder.loadTexts: classTcpConnExits.setDescription('The count of TCP flows exited in the class.')
classTcpConnRefuses = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnRefuses.setStatus('mandatory')
if mibBuilder.loadTexts: classTcpConnRefuses.setDescription('The count of TCP flows exited by TCP refuse in the class.')
classTcpConnIgnores = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnIgnores.setStatus('mandatory')
if mibBuilder.loadTexts: classTcpConnIgnores.setDescription('The count of TCP flows exited by being ignored in the class.')
classTcpConnAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnAborts.setStatus('mandatory')
if mibBuilder.loadTexts: classTcpConnAborts.setDescription('The count of TCP flows aborted in the class.')
classTcpConnDenies = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnDenies.setStatus('mandatory')
if mibBuilder.loadTexts: classTcpConnDenies.setDescription('The count of TCP flows denied by CIR fail in the class.')
classTcpConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classTcpConnTimeouts.setStatus('deprecated')
if mibBuilder.loadTexts: classTcpConnTimeouts.setDescription('The count of TCP flows timed out by pshaper in the class. This variable is obsolete and should not be used.')
classPeakUdpConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakUdpConns.setStatus('deprecated')
if mibBuilder.loadTexts: classPeakUdpConns.setDescription('The peak number of active UDP flows in the class. This variable is deprecated, and should no longer be used.')
classUdpConnInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classUdpConnInits.setStatus('deprecated')
if mibBuilder.loadTexts: classUdpConnInits.setDescription('The count of UDP flows started in the class. This variable is deprecated, and should no longer be used.')
classUdpConnExits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classUdpConnExits.setStatus('deprecated')
if mibBuilder.loadTexts: classUdpConnExits.setDescription('The count of UDP flows exited in the class. This variable is deprecated, and should no longer be used.')
classHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classHits.setStatus('mandatory')
if mibBuilder.loadTexts: classHits.setDescription('Count of hits in the class')
classPolicyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPolicyHits.setStatus('mandatory')
if mibBuilder.loadTexts: classPolicyHits.setDescription('Count of policy hits in the class')
classRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classRate.setStatus('mandatory')
if mibBuilder.loadTexts: classRate.setDescription('The peak total rate in bps of the class')
classRateAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classRateAllocations.setStatus('mandatory')
if mibBuilder.loadTexts: classRateAllocations.setDescription('The count of rate allocations on the class. This variable is obsolete and should not be used.')
classPeakGuaranteedRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakGuaranteedRateFlows.setStatus('mandatory')
if mibBuilder.loadTexts: classPeakGuaranteedRateFlows.setDescription('The peak number of guaranteed rate flows active on the class.')
classPeakRateFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakRateFlows.setStatus('mandatory')
if mibBuilder.loadTexts: classPeakRateFlows.setDescription('The peak number of rate-based flows active on the class. This variable is obsolete and should not be used.')
classDataDelayEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classDataDelayEvents.setStatus('deprecated')
if mibBuilder.loadTexts: classDataDelayEvents.setDescription('The total number of data delay events measured for the class. ** This variable is no longer used. Consult PacketeerRTM.mib for current response-time management variables.')
classDataDelayTimeCum = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classDataDelayTimeCum.setStatus('deprecated')
if mibBuilder.loadTexts: classDataDelayTimeCum.setDescription('The cumulative data delay time in milliseconds measured for the class. classDataDelayTimeCum divided by classDataDelayEvents provides an indication of average response time for the class. (However, classDataDelayEvents MAY be zero, so you must check for that). ** This variable is no longer used. Consult PacketeerRTM.mib for current response-time management variables.')
classReservedOne = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReservedOne.setStatus('mandatory')
if mibBuilder.loadTexts: classReservedOne.setDescription('This variable is for experimental use only.')
classReTxByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxByteCount.setStatus('mandatory')
if mibBuilder.loadTexts: classReTxByteCount.setDescription('The count of retransmitted bytes on the class. This is the low-order 32 bits.')
classReTxByteCountHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classReTxByteCountHi.setStatus('mandatory')
if mibBuilder.loadTexts: classReTxByteCountHi.setDescription('The count of retransmitted bytes on the class. This is the high-order 32 bits.')
classFullName = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classFullName.setStatus('mandatory')
if mibBuilder.loadTexts: classFullName.setDescription('The complete name of the class, e.g. /Inbound/Inside/HTTP. Note that the className variable gives only the last part, in this example HTTP.')
classCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classCurrentRate.setStatus('mandatory')
if mibBuilder.loadTexts: classCurrentRate.setDescription('The current rate in bits per second.')
classPktExchangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPktExchangeTime.setStatus('mandatory')
if mibBuilder.loadTexts: classPktExchangeTime.setDescription('(PacketShaper only). The packet exchange time for TCP data packets, between PacketShaper and the server side. This is the low-order 32 bits.')
classPktExchangeTimeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPktExchangeTimeHi.setStatus('mandatory')
if mibBuilder.loadTexts: classPktExchangeTimeHi.setDescription('(PacketShaper only). The packet exchange time for TCP data packets, between PacketShaper and the server side. This is the high-order 32 bits.')
classPktExchangeTimeSamples = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPktExchangeTimeSamples.setStatus('mandatory')
if mibBuilder.loadTexts: classPktExchangeTimeSamples.setDescription('(PacketShaper only). The total number of packet exchanges counted for the classPktExchangeTime / classPktExchangeTimeHi number.')
classClientFloodBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classClientFloodBlock.setStatus('mandatory')
if mibBuilder.loadTexts: classClientFloodBlock.setDescription('The total number of client side SYN flood attacks blocked.')
classServerFloodBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classServerFloodBlock.setStatus('mandatory')
if mibBuilder.loadTexts: classServerFloodBlock.setDescription('The total number of server side SYN flood attacks blocked.')
classAppAvailability = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classAppAvailability.setStatus('deprecated')
if mibBuilder.loadTexts: classAppAvailability.setDescription('The cumulative average application availability.')
classPeakIpdgConns = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPeakIpdgConns.setStatus('mandatory')
if mibBuilder.loadTexts: classPeakIpdgConns.setDescription('The peak number of active IPDG flows in the class.')
classWebResponse2XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse2XX.setStatus('mandatory')
if mibBuilder.loadTexts: classWebResponse2XX.setDescription('The count of HTTP response messages having 2XX status codes (successful).')
classWebResponse3XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse3XX.setStatus('mandatory')
if mibBuilder.loadTexts: classWebResponse3XX.setDescription('The count of HTTP response messages having 3XX status codes (redirection).')
classWebResponse4XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse4XX.setStatus('mandatory')
if mibBuilder.loadTexts: classWebResponse4XX.setDescription('The count of HTTP response messages having 4XX status codes (client error).')
classWebResponse5XX = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classWebResponse5XX.setStatus('mandatory')
if mibBuilder.loadTexts: classWebResponse5XX.setDescription('The count of HTTP response messages having 5XX status codes (server error).')
classNonComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNonComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: classNonComprsnBytes.setDescription('The total number of non-compressed bytes in the class.')
classNonComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classNonComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: classNonComprsnBytesHi.setDescription('The total number of non-compressed bytes in the class. This is the high-order 32 bits.')
classPreComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPreComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: classPreComprsnBytes.setDescription('The total number of bytes before compression in the class.')
classPreComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPreComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: classPreComprsnBytesHi.setDescription('The total number of bytes before compression in the class. This is the high-order 32 bits.')
classPostComprsnBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPostComprsnBytes.setStatus('mandatory')
if mibBuilder.loadTexts: classPostComprsnBytes.setDescription('The total number of bytes after compression in the class.')
classPostComprsnBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 4, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: classPostComprsnBytesHi.setStatus('mandatory')
if mibBuilder.loadTexts: classPostComprsnBytesHi.setDescription('The total number of bytes after compression in the class. This is the high-order 32 bits.')
psAlarmInsideLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmInsideLinkCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmInsideLinkCount.setDescription('The number of MIB-II LinkDown traps sent by the agent since the last reset, where ifIndex was for the Inside link.')
psAlarmOutsideLinkCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmOutsideLinkCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmOutsideLinkCount.setDescription('The number of MIB-II LinkDown traps sent by the agent since the last reset, where ifIndex was for the Outside link. ')
psAlarmSiteRouterCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmSiteRouterCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmSiteRouterCount.setDescription('The number of psAlarmSiteRouter traps sent by the agent since the last reset.')
psAlarmSiteRouterStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("gone", 2), ("error-inside", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmSiteRouterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmSiteRouterStatus.setDescription('Status of the site router. A status of gone(2) means that PacketShaper has stopped getting arp replies from the router. error-inside(3) means that it most recently got a reply, but from the inside. none(4) means that no site router was configured.')
psAlarmSiteRouter = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,3)).setObjects(("PACKETEER-MIB", "psAlarmSiteRouterStatus"))
if mibBuilder.loadTexts: psAlarmSiteRouter.setDescription('A psSiteRouter trap signifies that the site router attached to the device has changed to a state of less readiness. The psAlarmSiteRouterStatus variable included with this trap provides more information.')
psAlarmPowerSystemOne = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,4))
if mibBuilder.loadTexts: psAlarmPowerSystemOne.setDescription('A psPowerSystemOne trap signifies that the first power supply of the device has failed.')
psAlarmPowerSystemOneCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemOneCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmPowerSystemOneCount.setDescription('The number of psAlarmPowerSystemOne traps sent by the agent since the last reset.')
psAlarmPowerSystemOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemOneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmPowerSystemOneStatus.setDescription('The operational status of the first power system of the device. (1) UP (2) DOWN')
psAlarmPowerSystemTwo = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,5))
if mibBuilder.loadTexts: psAlarmPowerSystemTwo.setDescription('A psSitePowerSystemTwo trap signifies that the second power supply of the device has failed.')
psAlarmPowerSystemTwoCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemTwoCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmPowerSystemTwoCount.setDescription('The number of psAlarmPowerSystemTwo traps sent by the agent since the last reset.')
psAlarmPowerSystemTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmPowerSystemTwoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmPowerSystemTwoStatus.setDescription('The operational status of the second power supply of the device. (1) UP (2) DOWN')
psAlarmFanOne = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,6))
if mibBuilder.loadTexts: psAlarmFanOne.setDescription('A psFanOne trap signifies that the first fan of the device has failed.')
psAlarmFanOneCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanOneCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanOneCount.setDescription('The number of psAlarmFanOne traps sent by the agent since the last reset.')
psAlarmFanOneStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanOneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanOneStatus.setDescription('The operational status of the first fan of the device. (0) Not existant (1) UP (2) DOWN')
psAlarmFanTwo = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,7))
if mibBuilder.loadTexts: psAlarmFanTwo.setDescription('A psAlarmFanTwo trap signifies that second fan of the device has failed.')
psAlarmFanTwoCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanTwoCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanTwoCount.setDescription('The number of psAlarmFanTwo traps sent by the agent since the last reset.')
psAlarmFanTwoStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanTwoStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanTwoStatus.setDescription('The operational status of the second fan of the device. (0) Not existant (1) UP (2) DOWN')
psAlarmCfgFile = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,8))
if mibBuilder.loadTexts: psAlarmCfgFile.setDescription('A psAlarmCfgFile trap signifies that the configuration file of the device has been corrupted, or otherwise changed to a state of less readiness. This trap is obsolete and should not be used.')
psAlarmCfgFileCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmCfgFileCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmCfgFileCount.setDescription('The number of psAlarmCfgFile traps sent by the agent since the last reset. This variable is obsolete and should not be used.')
psAlarmCfgFileStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("corrupted", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmCfgFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmCfgFileStatus.setDescription('Whether the configuration file has been corrupted. A value of valid(1) signifies no problems, corrupted(2) that the configuration file has been corrupted. ')
psAlarmMeasurementEngineCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmMeasurementEngineCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmMeasurementEngineCount.setDescription('The number of psAlarmMeasurementEngine traps sent by the agent since the last reset.')
psAlarmMeasurementEngineStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("initiallyStarting", 1), ("starting", 2), ("running", 3), ("errorOnVolume", 4), ("disabled", 5), ("waitToStart", 6), ("suspended", 7), ("backup", 8), ("restore", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmMeasurementEngineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmMeasurementEngineStatus.setDescription("The current status of the Measurement Engine. The values enumerated above correspond to those shown in the command line 'me show' command. (1) initially starting (2) starting (3) running (4) error on volume (5) disabled (6) wait to start (7) suspended (8) backing up data (9) restoring data")
psAlarmMeasurementEngine = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,10)).setObjects(("PACKETEER-MIB", "psAlarmMeasurementEngineStatus"))
if mibBuilder.loadTexts: psAlarmMeasurementEngine.setDescription('A psAlarmMeasurementEngine trap signifies that the Measurement Engine has changed to a state of less readiness, or failed on startup. ')
psAlarmStandbyCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmStandbyCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmStandbyCount.setDescription('The number of psAlarmStandby traps sent by the agent since the last reset.')
psAlarmStandbyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("not-configured", 1), ("active", 2), ("passive", 3), ("down", 4), ("direct", 5), ("disconnected", 6), ("leak", 7), ("disable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmStandbyStatus.setDescription('Status of the standby feature. A status of not-configured(1) means that standby is not configured for this PacketShaper. active(2) means hot standby is processing traffic according to its shaping mode. passive(3) means hot standby is not processing traffic but is monitoring the active partner of the paired PacketShapers. down(4) means hot standby has declared itself ineligible for active mode due to a self-detected fault. direct(5) means standby direct is processing and copying traffic to its partner. disconnected(6) means standby direct is non-functional since it cannot reach its partner. leak(7) means the Packetshaper has detected a loop in the network and so has disabled the stanby direct functionality and is only processing traffic flowing through it. disable(8) means that the standby direct feature has been disabled and is non-functional.')
psAlarmStandby = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,11)).setObjects(("PACKETEER-MIB", "psAlarmStandbyStatus"))
if mibBuilder.loadTexts: psAlarmStandby.setDescription('A psAlarmStandby trap signifies that the standby status of the device has changed to a state of less readiness. The psAlarmStandbyStatus variable included with this trap provides more information.')
psAlarmFanThree = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,14))
if mibBuilder.loadTexts: psAlarmFanThree.setDescription('A psAlarmFanThree trap signifies that 3rd fan of the device has failed.')
psAlarmFanThreeCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanThreeCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanThreeCount.setDescription('The number of psAlarmFanThree traps sent by the agent since the last reset.')
psAlarmFanThreeStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanThreeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanThreeStatus.setDescription('The operational status of the 3rd fan of the device. (0) Not existant (1) UP (2) DOWN')
psAlarmFanFour = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,15))
if mibBuilder.loadTexts: psAlarmFanFour.setDescription('A psAlarmFanFour trap signifies that 4th fan of the device has failed.')
psAlarmFanFourCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanFourCount.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanFourCount.setDescription('The number of psAlarmFanFour traps sent by the agent since the last reset.')
psAlarmFanFourStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 5, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("non-existant", 0), ("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psAlarmFanFourStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psAlarmFanFourStatus.setDescription('The operational status of the 4th fan of the device. (0) Not existant (1) UP (2) DOWN')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('mandatory')
if mibBuilder.loadTexts: trapDestTable.setDescription('A list of destinations for traps emitted from this PacketShaper')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1, 1), ).setIndexNames((0, "PACKETEER-MIB", "trapDestIpAddr"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('mandatory')
if mibBuilder.loadTexts: trapDestEntry.setDescription('A trap destination entry containing the IP address (and possibly other information in the future)')
trapDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDestIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: trapDestIpAddr.setDescription('An address to which traps are sent')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trapDestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapDestStatus.setDescription('Status of this trap destination. Setting to invalid(2) is equivalent to removing the address from the table. See also trapDestRemove for a shortcut for removal.')
trapDestAdd = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 2), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trapDestAdd.setStatus('mandatory')
if mibBuilder.loadTexts: trapDestAdd.setDescription('A shortcut for adding a host to trapDestTable. If the name is not in n.n.n.n IP address form, then the agent attempts to look it up via DNS. If the operation fails with BADVALUE, try again with an IP address. The associated IP address is added to the trapDestTable if the operation succeeded. The table should be queried afterward to insure that the action took place. ')
trapDestRemove = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 3), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: trapDestRemove.setStatus('mandatory')
if mibBuilder.loadTexts: trapDestRemove.setDescription('A shortcut for removing an IP address from trapDestTable. If the name is not in n.n.n.n IP address form, then the agent attempts to look it up via DNS. If the operation fails with BADVALUE, try again with an IP address. The table should be queried afterward to insure that the action took place.')
psShapingStatusAdmin = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("bypass", 3), ("other", 4), ("watch", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: psShapingStatusAdmin.setStatus('mandatory')
if mibBuilder.loadTexts: psShapingStatusAdmin.setDescription("This object reflects the current configured traffic shaping status of the PacketShaper. The value of other(4) may occur in certain cases which can only be caused through the PacketShaper's user interface, and cannot be set through this variable ")
psUserEventTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1))
userEventTrapName = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 1), DisplayString())
if mibBuilder.loadTexts: userEventTrapName.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapName.setDescription('The name of the user event which has occurred.')
userEventTrapExpression = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 2), DisplayString())
if mibBuilder.loadTexts: userEventTrapExpression.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapExpression.setDescription('The expression defining this user event.')
userEventTrapVariable = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 3), DisplayString())
if mibBuilder.loadTexts: userEventTrapVariable.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapVariable.setDescription('The name of the Measurement Engine variable which is tested in this user event.')
userEventTrapElementType = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("link", 1), ("class", 2), ("partition", 3))))
if mibBuilder.loadTexts: userEventTrapElementType.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapElementType.setDescription('The type of element which is tested in this user event.')
userEventTrapRegid = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 5), Integer32())
if mibBuilder.loadTexts: userEventTrapRegid.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapRegid.setDescription('The registration of this user event.')
userEventTrapDate = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 6), DateAndTime())
if mibBuilder.loadTexts: userEventTrapDate.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapDate.setDescription('The time the event occurred.')
userEventTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 7), Integer32())
if mibBuilder.loadTexts: userEventTrapValue.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapValue.setDescription('The value of userEventTrapVariable which triggered the event.')
userEventTrapTarget = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 8), DisplayString())
if mibBuilder.loadTexts: userEventTrapTarget.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapTarget.setDescription('The name of the link, class, or partition, as given in userEventTrapElementType, which is the target of this event regiatration.')
userEventTrapThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 9), Integer32())
if mibBuilder.loadTexts: userEventTrapThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapThreshold.setDescription('The threshold value which triggers this event. See the value of userEventTrapExpression for the signedness with respect to the threshold (<, >, etc.)')
userEventTrapRearm = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 10), Integer32())
if mibBuilder.loadTexts: userEventTrapRearm.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapRearm.setDescription('The rearm value which must be hit after an occurrence of this event in order to rearm it. See the value of userEventTrapExpression for the signedness with respect to the threshold (<, >, etc.)')
userEventTrapDayCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 11), Integer32())
if mibBuilder.loadTexts: userEventTrapDayCount.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapDayCount.setDescription('The number of times this event has occurred on this day (as counted from midnight to midnight, local time). If this value is greater than or equal to userEventTrapDayLimit, and that value is non-zero, then no more instances of this event will be reported until the next day.')
userEventTrapDayLimit = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 8, 1, 12), Integer32())
if mibBuilder.loadTexts: userEventTrapDayLimit.setStatus('mandatory')
if mibBuilder.loadTexts: userEventTrapDayLimit.setDescription('The maximum number of times this event is allowed to occur per day (as counted from midnight to midnight, local time), as configured by the user. A value of zero denotes no limit.')
psAlarmUserEvent = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,9)).setObjects(("PACKETEER-MIB", "userEventTrapName"), ("PACKETEER-MIB", "userEventTrapExpression"), ("PACKETEER-MIB", "userEventTrapVariable"), ("PACKETEER-MIB", "userEventTrapElementType"), ("PACKETEER-MIB", "userEventTrapRegid"), ("PACKETEER-MIB", "userEventTrapDate"), ("PACKETEER-MIB", "userEventTrapValue"), ("PACKETEER-MIB", "userEventTrapTarget"), ("PACKETEER-MIB", "userEventTrapThreshold"), ("PACKETEER-MIB", "userEventTrapRearm"), ("PACKETEER-MIB", "userEventTrapDayCount"), ("PACKETEER-MIB", "userEventTrapDayLimit"))
if mibBuilder.loadTexts: psAlarmUserEvent.setDescription('A psAlarmUserEvent trap signifies that a user event, which has been registered by the user, has occurred. The associated variables give more information on the event.')
psAgentEventTrapVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1))
agentEventTrapName = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 1), DisplayString())
if mibBuilder.loadTexts: agentEventTrapName.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventTrapName.setDescription('The name of the agent instance which has fired the event.')
agentEventTrapDate = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 2), DateAndTime())
if mibBuilder.loadTexts: agentEventTrapDate.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventTrapDate.setDescription('The time the event occurred.')
agentEventTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("green", 0), ("red", 1), ("yellow", 2), ("blue", 3))))
if mibBuilder.loadTexts: agentEventTrapType.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventTrapType.setDescription('The type of event that occurred, 0 = GREEN, 1 = RED, 2 = YELLOW, 3 = BLUE.')
agentEventTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 10, 1, 4), DisplayString())
if mibBuilder.loadTexts: agentEventTrapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: agentEventTrapDescription.setDescription('A description of the event that has occurred.')
psAlarmAgentEvent = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,13)).setObjects(("PACKETEER-MIB", "agentEventTrapName"), ("PACKETEER-MIB", "agentEventTrapDate"), ("PACKETEER-MIB", "agentEventTrapType"), ("PACKETEER-MIB", "agentEventTrapDescription"))
if mibBuilder.loadTexts: psAlarmAgentEvent.setDescription('A psAlarmAgentEvent trap signifies that an agent event, which has been triggered by the user, has occurred. The associated variables give more information on the event.')
psFeatureHighAvDeviceDown = NotificationType((1, 3, 6, 1, 4, 1, 2334, 1, 1) + (0,12)).setObjects(("PACKETEER-MIB", "psFeatureHighAvDeviceDownStatus"), ("PACKETEER-MIB", "psFeatureHighAvDeviceDownRouter"), ("PACKETEER-MIB", "psFeatureHighAvDeviceDownInterface"))
if mibBuilder.loadTexts: psFeatureHighAvDeviceDown.setDescription("A psFeatureHighAvDeviceFailed trap signifies that an interface or router we are tracking has gone down. If it is an interface that went down, the bindings will show the corresponding router and the name of the interface which went down. The name will be specified as 'unknown' if we could not resolve the interface name. But if it is the router that went down, the interface name will not be specified.")
psFeatureHighAvDeviceDownCount = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownCount.setStatus('mandatory')
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownCount.setDescription('The number of psFeatureHighAvDevice traps sent by the agent since the last reset.')
psFeatureHighAvDeviceDownStatus = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownStatus.setDescription('The operational status of the interface of the router we are polling. (1) UP (2) DOWN.')
psFeatureHighAvDeviceDownRouter = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownRouter.setStatus('mandatory')
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownRouter.setDescription('The name of a router that has gone down or the name of the router whose one of the interfaces has gone down.')
psFeatureHighAvDeviceDownInterface = MibScalar((1, 3, 6, 1, 4, 1, 2334, 2, 1, 9, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownInterface.setStatus('mandatory')
if mibBuilder.loadTexts: psFeatureHighAvDeviceDownInterface.setDescription("The name of the interface that has gone down. The name will be specified as 'unknown' in the cases where we could not resolve the interface name. The interface name will have a value of NULL or zero-length value if the router goes down.")
mibBuilder.exportSymbols("PACKETEER-MIB", classReTxByteCountHi=classReTxByteCountHi, psFeatureHighAvDeviceDownInterface=psFeatureHighAvDeviceDownInterface, packeteerMibs=packeteerMibs, partitionFrameBytes=partitionFrameBytes, classPostComprsnBytesHi=classPostComprsnBytesHi, classServerFloodBlock=classServerFloodBlock, linkTcpConnExits=linkTcpConnExits, packetShaper=packetShaper, psAlarmFanOne=psAlarmFanOne, partitionTcpConnInits=partitionTcpConnInits, partitionSchedDropPktCount=partitionSchedDropPktCount, classByteCount=classByteCount, partitionSchedDropByteCountHi=partitionSchedDropByteCountHi, userEventTrapTarget=userEventTrapTarget, classCurrentRate=classCurrentRate, psAlarmFanTwoStatus=psAlarmFanTwoStatus, linkTotalRxBytes=linkTotalRxBytes, classNonComprsnBytes=classNonComprsnBytes, trapDestTable=trapDestTable, userEventTrapDate=userEventTrapDate, linkSize=linkSize, packetShaper_2500=packetShaper_2500, linkTxErrors=linkTxErrors, partitionTcpConnIgnores=partitionTcpConnIgnores, classOwningPartName=classOwningPartName, classDataDelayTimeCum=classDataDelayTimeCum, classFullName=classFullName, partitionFrameCount=partitionFrameCount, linkTotalTxBytes=linkTotalTxBytes, partitionEirAllocs=partitionEirAllocs, linkPeakRateFlows=linkPeakRateFlows, classTable=classTable, packetShaper_asm30=packetShaper_asm30, psAlarmOutsideLinkCount=psAlarmOutsideLinkCount, psAlarmPowerSystemTwoStatus=psAlarmPowerSystemTwoStatus, linkHostdbAllocFails=linkHostdbAllocFails, partitionTcpConnExits=partitionTcpConnExits, psAlarmFanThree=psAlarmFanThree, psPartitions=psPartitions, psFeatureHighAvDeviceDownCount=psFeatureHighAvDeviceDownCount, linkTotalTxBytesHi=linkTotalTxBytesHi, partitionPostComprsnBytesHi=partitionPostComprsnBytesHi, partitionFrameBytesHi=partitionFrameBytesHi, classEirAllocs=classEirAllocs, partitionReTxTosses=partitionReTxTosses, partitionLateDropByteCount=partitionLateDropByteCount, classPeakGuaranteedRateFlows=classPeakGuaranteedRateFlows, userEventTrapName=userEventTrapName, linkCompressionMode=linkCompressionMode, psAlarmSiteRouter=psAlarmSiteRouter, linkPeakTcpConns=linkPeakTcpConns, partitionEcnCount=partitionEcnCount, psFeatureHighAvDeviceDownRouter=psFeatureHighAvDeviceDownRouter, psAlarms=psAlarms, linkTcpConnIgnores=linkTcpConnIgnores, partitionUdpConnInits=partitionUdpConnInits, classPolicyHits=classPolicyHits, packetShaper_asm70=packetShaper_asm70, packetShaper_2000=packetShaper_2000, partitionLateDropPktCountHi=partitionLateDropPktCountHi, classWebResponse4XX=classWebResponse4XX, classPreComprsnBytesHi=classPreComprsnBytesHi, psAlarmPowerSystemOneCount=psAlarmPowerSystemOneCount, linkNonComprsnBytes=linkNonComprsnBytes, linkDataPkts=linkDataPkts, psAlarmFanOneCount=psAlarmFanOneCount, linkPreComprsnBytes=linkPreComprsnBytes, packetShaper_4500=packetShaper_4500, partitionFrameTargetRate=partitionFrameTargetRate, classDataPkts=classDataPkts, userEventTrapDayLimit=userEventTrapDayLimit, classPktExchangeTime=classPktExchangeTime, partitionFirstSatisfiedPriority=partitionFirstSatisfiedPriority, products=products, linkPeakUdpConns=linkPeakUdpConns, linkReTxByteCountHi=linkReTxByteCountHi, partitionPreComprsnBytesHi=partitionPreComprsnBytesHi, psCommonMib=psCommonMib, classReTxs=classReTxs, userEventTrapExpression=userEventTrapExpression, linkUdpConnExits=linkUdpConnExits, partitionPeakTcpConns=partitionPeakTcpConns, partitionPostComprsnBytes=partitionPostComprsnBytes, classAppAvailability=classAppAvailability, userEventTrapThreshold=userEventTrapThreshold, classWebResponse5XX=classWebResponse5XX, linkPeakPostCompressionRate=linkPeakPostCompressionRate, psUserEventTrapVars=psUserEventTrapVars, partitionFrameTargetRateHi=partitionFrameTargetRateHi, psFeatureHighAvDeviceDown=psFeatureHighAvDeviceDown, partitionTableSize=partitionTableSize, partitionTcpConnRefuses=partitionTcpConnRefuses, linkClassChecks=linkClassChecks, linkIndex=linkIndex, linkPassthruPkts=linkPassthruPkts, psAlarmFanTwoCount=psAlarmFanTwoCount, packetShaper_9500=packetShaper_9500, classReTxByteCount=classReTxByteCount, linkTcpConnRefuses=linkTcpConnRefuses, linkTcpConnDenies=linkTcpConnDenies, classWebResponse2XX=classWebResponse2XX, classIndex=classIndex, classPostComprsnBytes=classPostComprsnBytes, psAlarmCfgFileCount=psAlarmCfgFileCount, psAlarmFanThreeStatus=psAlarmFanThreeStatus, packetShaper_10000=packetShaper_10000, partitionEntry=partitionEntry, psAlarmFanTwo=psAlarmFanTwo, psAlarmAgentEvent=psAlarmAgentEvent, psAlarmStandby=psAlarmStandby, partitionName=partitionName, classTcpConnIgnores=classTcpConnIgnores, classUdpConnExits=classUdpConnExits, linkRate=linkRate, partitionBurstLimit=partitionBurstLimit, classHits=classHits, psAlarmSiteRouterStatus=psAlarmSiteRouterStatus, psAlarmStandbyCount=psAlarmStandbyCount, classDataDelayEvents=classDataDelayEvents, agentEventTrapName=agentEventTrapName, partitionReTxs=partitionReTxs, partitionIndex=partitionIndex, partitionDataPkts=partitionDataPkts, psUserEvents=psUserEvents, psHighAv=psHighAv, packetShaper_asm110=packetShaper_asm110, linkReTxTosses=linkReTxTosses, partitionEirRate=partitionEirRate, classTcpConnInits=classTcpConnInits, classPktExchangeTimeHi=classPktExchangeTimeHi, linkTotalTxPkts=linkTotalTxPkts, linkPkts=linkPkts, partitionMinimumBps=partitionMinimumBps, linkMacSameSidePkts=linkMacSameSidePkts, partitionTcpConnTimeouts=partitionTcpConnTimeouts, partitionUdpConnExits=partitionUdpConnExits, psAlarmFanFourCount=psAlarmFanFourCount, linkReTxByteCount=linkReTxByteCount, classUdpConnInits=classUdpConnInits, linkAutoclassifyMode=linkAutoclassifyMode, linkTcpConnInits=linkTcpConnInits, classLinkDirection=classLinkDirection, psAlarmUserEvent=psAlarmUserEvent, partitionDynamicCapCount=partitionDynamicCapCount, agentEventTrapType=agentEventTrapType, linkTcpConnAborts=linkTcpConnAborts, classPeakRateFlows=classPeakRateFlows, classPreComprsnBytes=classPreComprsnBytes, psAlarmFanFour=psAlarmFanFour, linkTotalRxBytesHi=linkTotalRxBytesHi, partitionCommittmentFailures=partitionCommittmentFailures, linkCirFails=linkCirFails, linkTcpAllocFails=linkTcpAllocFails, userEventTrapDayCount=userEventTrapDayCount, linkPreComprsnBytesHi=linkPreComprsnBytesHi, linkPostComprsnBytes=linkPostComprsnBytes, linkByteCount=linkByteCount, classWebResponse3XX=classWebResponse3XX, linkTcpConnTimeouts=linkTcpConnTimeouts, linkPeakPreCompressionRate=linkPeakPreCompressionRate, trapDestStatus=trapDestStatus, psAlarmMeasurementEngine=psAlarmMeasurementEngine, linkReTxs=linkReTxs, partitionByteCount=partitionByteCount, partitionDynamicLiveUserCount=partitionDynamicLiveUserCount, classTableSize=classTableSize, psLinks=psLinks, psAdmin=psAdmin, classRate=classRate, partitionCirRate=partitionCirRate, partitionDynamicNoCount=partitionDynamicNoCount, psAlarmFanFourStatus=psAlarmFanFourStatus, userEventTrapValue=userEventTrapValue, partitionTimeOverLimit=partitionTimeOverLimit, trapDestRemove=trapDestRemove, linkRxErrors=linkRxErrors, classCirAllocs=classCirAllocs, classReservedOne=classReservedOne, className=className, psFeatureHighAvDeviceDownStatus=psFeatureHighAvDeviceDownStatus, trapDestEntry=trapDestEntry, partitionPeakUdpConns=partitionPeakUdpConns, linkPostComprsnBytesHi=linkPostComprsnBytesHi, partitionCirAllocs=partitionCirAllocs, psAlarmInsideLinkCount=psAlarmInsideLinkCount, userEventTrapElementType=userEventTrapElementType, psAgentEventTrapVars=psAgentEventTrapVars, partitionSchedDropByteCount=partitionSchedDropByteCount, classTcpConnDenies=classTcpConnDenies, psAlarmPowerSystemTwoCount=psAlarmPowerSystemTwoCount, psShapingStatusAdmin=psShapingStatusAdmin, classByteCountHi=classByteCountHi, packetShaper_asm90=packetShaper_asm90, classPeakUdpConns=classPeakUdpConns, psAlarmPowerSystemTwo=psAlarmPowerSystemTwo, linkTable=linkTable, partitionPeakRateFlows=partitionPeakRateFlows, partitionCirFails=partitionCirFails, partitionUnreservedRate=partitionUnreservedRate, psAlarmFanOneStatus=psAlarmFanOneStatus, linkTableSize=linkTableSize, packetShaper_2550=packetShaper_2550, partitionRate=partitionRate, psAlarmCfgFile=psAlarmCfgFile, classCirFails=classCirFails, packetShaper_8500=packetShaper_8500, userEventTrapVariable=userEventTrapVariable, psAgentEvent=psAgentEvent, psAlarmMeasurementEngineCount=psAlarmMeasurementEngineCount, classReTxTosses=classReTxTosses, packetShaper_asm50=packetShaper_asm50, packetShaper_6500=packetShaper_6500, linkCirAllocs=linkCirAllocs, linkTxPktDrops=linkTxPktDrops, partitionLinkDirection=partitionLinkDirection, linkByteCountHi=linkByteCountHi, partitionTcpConnAborts=partitionTcpConnAborts, partitionPkts=partitionPkts, partitionPeakGuaranteedRateFlows=partitionPeakGuaranteedRateFlows, partitionReTxByteCountHi=partitionReTxByteCountHi, partitionPreComprsnBytes=partitionPreComprsnBytes, linkUdpConnInits=linkUdpConnInits, classTcpConnRefuses=classTcpConnRefuses, classTcpConnExits=classTcpConnExits, classNonComprsnBytesHi=classNonComprsnBytesHi, psClasses=psClasses, trapDestIpAddr=trapDestIpAddr, psAlarmCfgFileStatus=psAlarmCfgFileStatus, packetShaper_4000=packetShaper_4000, trapDestAdd=trapDestAdd, linkNonComprsnBytesHi=linkNonComprsnBytesHi, partitionByteCountHi=partitionByteCountHi, partitionNonComprsnBytesHi=partitionNonComprsnBytesHi, classEntry=classEntry, linkName=linkName, linkRateAllocations=linkRateAllocations, packetShaper_1000=packetShaper_1000, partitionTable=partitionTable, packeteer=packeteer, classTcpConnAborts=classTcpConnAborts, classPktExchangeTimeSamples=classPktExchangeTimeSamples, agentEventTrapDate=agentEventTrapDate, psSettings=psSettings, packetShaper_1500=packetShaper_1500, linkRxPktDrops=linkRxPktDrops, classRateAllocations=classRateAllocations, classTcpConnTimeouts=classTcpConnTimeouts, linkPeakGuaranteedRateFlows=linkPeakGuaranteedRateFlows, classClientFloodBlock=classClientFloodBlock, partitionSchedDropPktCountHi=partitionSchedDropPktCountHi, userEventTrapRearm=userEventTrapRearm, psAlarmSiteRouterCount=psAlarmSiteRouterCount, psAlarmPowerSystemOneStatus=psAlarmPowerSystemOneStatus, psAlarmStandbyStatus=psAlarmStandbyStatus)
mibBuilder.exportSymbols("PACKETEER-MIB", partitionTcpConnDenies=partitionTcpConnDenies, packetShaper_1550=packetShaper_1550, partitionLateDropByteCountHi=partitionLateDropByteCountHi, classPkts=classPkts, linkRxNoBufs=linkRxNoBufs, linkIpdgAllocFails=linkIpdgAllocFails, psAlarmFanThreeCount=psAlarmFanThreeCount, partitionNonComprsnBytes=partitionNonComprsnBytes, partitionRateAllocations=partitionRateAllocations, agentEventTrapDescription=agentEventTrapDescription, linkShapingMode=linkShapingMode, psAlarmPowerSystemOne=psAlarmPowerSystemOne, linkEntry=linkEntry, psShapingStatusOper=psShapingStatusOper, linkPassthruBytes=linkPassthruBytes, partitionReTxByteCount=partitionReTxByteCount, psAlarmMeasurementEngineStatus=psAlarmMeasurementEngineStatus, linkEirAllocs=linkEirAllocs, userEventTrapRegid=userEventTrapRegid, partitionLateDropPktCount=partitionLateDropPktCount, classPeakTcpConns=classPeakTcpConns, classPeakIpdgConns=classPeakIpdgConns, linkTotalRxPkts=linkTotalRxPkts)
