#
# PySNMP MIB module OMNI-gx2Lm870C-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OMNI-gx2Lm870C-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:33:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
gx2Lm870C, = mibBuilder.importSymbols("GX2HFC-MIB", "gx2Lm870C")
gi, motproxies = mibBuilder.importSymbols("NLS-BBNIDENT-MIB", "gi", "motproxies")
trapNetworkElemOperState, trapNetworkElemModelNumber, trapPerceivedSeverity, trapIdentifier, trapNetworkElemAlarmStatus, trapText, trapNetworkElemAdminState, trapNetworkElemAvailStatus, trapChangedValueDisplayString, trapNetworkElemSerialNum, trapChangedObjectId, trapChangedValueInteger, trapNETrapLastTrapTimeStamp = mibBuilder.importSymbols("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState", "trapNetworkElemModelNumber", "trapPerceivedSeverity", "trapIdentifier", "trapNetworkElemAlarmStatus", "trapText", "trapNetworkElemAdminState", "trapNetworkElemAvailStatus", "trapChangedValueDisplayString", "trapNetworkElemSerialNum", "trapChangedObjectId", "trapChangedValueInteger", "trapNETrapLastTrapTimeStamp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
iso, TimeTicks, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ModuleIdentity, MibIdentifier, Gauge32, Counter32, ObjectIdentity, Unsigned32, Counter64, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ModuleIdentity", "MibIdentifier", "Gauge32", "Counter32", "ObjectIdentity", "Unsigned32", "Counter64", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class Float(Counter32):
    pass

gx2Lm870CDescriptor = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 1))
gx2lm870CAnalogTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2), )
if mibBuilder.loadTexts: gx2lm870CAnalogTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CAnalogTable.setDescription('This table contains gx2Lm870C specific parameters with nominal and current values.')
gx2lm870CAnalogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1), ).setIndexNames((0, "OMNI-gx2Lm870C-MIB", "gx2Lm870CAnalogTableIndex"))
if mibBuilder.loadTexts: gx2lm870CAnalogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CAnalogEntry.setDescription('This list contains the analog parameters and descriptions.')
gx2lm870CDigitalTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3), )
if mibBuilder.loadTexts: gx2lm870CDigitalTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CDigitalTable.setDescription('This table contains gx2Lm870C specific parameters with discrete values.')
gx2lm870CDigitalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2), ).setIndexNames((0, "OMNI-gx2Lm870C-MIB", "gx2Lm870CDigitalTableIndex"))
if mibBuilder.loadTexts: gx2lm870CDigitalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CDigitalEntry.setDescription('This list contains digital parameters and descriptions.')
gx2lm870CStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4), )
if mibBuilder.loadTexts: gx2lm870CStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CStatusTable.setDescription('This table contains gx2Lm870C specific parameters with current values.')
gx2lm870CStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3), ).setIndexNames((0, "OMNI-gx2Lm870C-MIB", "gx2Lm870CStatusTableIndex"))
if mibBuilder.loadTexts: gx2lm870CStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CStatusEntry.setDescription('This list contains Status parameters and descriptions.')
gx2lm870CFactoryTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5), )
if mibBuilder.loadTexts: gx2lm870CFactoryTable.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CFactoryTable.setDescription('This table contains gx2Lm870C specific parameters with stored factory values.')
gx2lm870CFactoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4), ).setIndexNames((0, "OMNI-gx2Lm870C-MIB", "gx2Lm870CFactoryTableIndex"))
if mibBuilder.loadTexts: gx2lm870CFactoryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gx2lm870CFactoryEntry.setDescription('This list contains Factory parameters and descriptions.')
gx2Lm870CAnalogTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm870CAnalogTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Lm870CAnalogTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
lm870ClabelFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelFanCurrent.setDescription('The value of this object provides the label of the Fan Current Analog parameter.')
lm870CuomFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomFanCurrent.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomFanCurrent.setDescription('The value of this object provides the Unit of Measure of the Fan Current Analog parameter.')
lm870CmajorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 4), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighFanCurrent.setDescription('The value of this object provides the Major High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 5), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowFanCurrent.setDescription('The value of this object provides the Major Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 6), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighFanCurrent.setDescription('The value of this object provides the Minor High alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 7), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowFanCurrent.setDescription('The value of this object provides the Minor Low alarm value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 8), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueFanCurrent.setDescription('The value of this object provides the Current value of the Fan Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagFanCurrent.setDescription('The value of this object provides the state of the Fan Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 10), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueFanCurrent.setDescription('The value of this object provides the minimum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 11), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueFanCurrent.setDescription('The value of this object provides the maximum value the Fan Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateFanCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateFanCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateFanCurrent.setDescription('The value of this object provides the curent alarm state of the Fan Current Analog parameter.')
lm870Clabel12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870Clabel12Volt.setStatus('optional')
if mibBuilder.loadTexts: lm870Clabel12Volt.setDescription('The value of this object provides the label of the 12v Current Analog parameter.')
lm870Cuom12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870Cuom12Volt.setStatus('optional')
if mibBuilder.loadTexts: lm870Cuom12Volt.setDescription('The value of this object provides the Unit of Measure of the 12v Current Analog parameter.')
lm870CmajorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 15), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHigh12Volt.setDescription('The value of this object provides the Major High alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 16), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLow12Volt.setDescription('The value of this object provides the Major Low alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHigh12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 17), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHigh12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHigh12Volt.setDescription('The value of this object provides the Minor High alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLow12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 18), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLow12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLow12Volt.setDescription('The value of this object provides the Minor Low alarm value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 19), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValue12Volt.setDescription('The value of this object provides the Current value of the 12v Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlag12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlag12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlag12Volt.setDescription('The value of this object provides the state of the 12v Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 21), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValue12Volt.setDescription('The value of this object provides the minimum value the 12v Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValue12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 22), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValue12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValue12Volt.setDescription('The value of this object provides the maximum value the 12v Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmState12Volt = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmState12Volt.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmState12Volt.setDescription('The value of this object provides the curent alarm state of the 12v Current Analog parameter.')
lm870ClabelModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelModTemp.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelModTemp.setDescription('The value of this object provides the label of the Module Temperature Analog parameter.')
lm870CuomModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomModTemp.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomModTemp.setDescription('The value of this object provides the Unit of Measure of the Module Temperature Analog parameter.')
lm870CmajorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 26), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighModTemp.setDescription('The value of this object provides the Major High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 27), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowModTemp.setDescription('The value of this object provides the Major Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 28), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighModTemp.setDescription('The value of this object provides the Minor High alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 29), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowModTemp.setDescription('The value of this object provides the Minor Low alarm value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 30), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueModTemp.setDescription('The value of this object provides the Current value of the Module Temperature Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagModTemp.setDescription('The value of this object provides the state of the Module Temperature Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 32), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueModTemp.setDescription('The value of this object provides the minimum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 33), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueModTemp.setDescription('The value of this object provides the maximum value the Module Temperature Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateModTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateModTemp.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateModTemp.setDescription('The value of this object provides the curent alarm state of the Module Temperature Analog parameter.')
lm870ClabelOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelOmiOffset.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelOmiOffset.setDescription('The value of this object provides the label of the OMI Offset Analog parameter.')
lm870CuomOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomOmiOffset.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomOmiOffset.setDescription('The value of this object provides the Unit of Measure of the OMI Offset Analog parameter.')
lm870CmajorHighOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 37), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighOmiOffset.setDescription('The value of this object provides the Major High alarm value of the OMI Offset Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 38), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowOmiOffset.setDescription('The value of this object provides the Major Low alarm value of the OMI Offset Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 39), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighOmiOffset.setDescription('The value of this object provides the Minor High alarm value of the OMI Offset Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 40), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowOmiOffset.setDescription('The value of this object provides the Minor Low alarm value of the OMI Offset Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 41), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueOmiOffset.setDescription('The value of this object provides the Current value of the OMI Offset Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagOmiOffset.setDescription('The value of this object provides the state of the OMI Offset Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 43), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueOmiOffset.setDescription('The value of this object provides the minimum value the OMI Offset Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 44), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueOmiOffset.setDescription('The value of this object provides the maximum value the OMI Offset Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateOmiOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateOmiOffset.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateOmiOffset.setDescription('The value of this object provides the curent alarm state of the OMI Offset Analog parameter.')
lm870ClabelOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelOPTPower.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelOPTPower.setDescription('The value of this object provides the label of the Optical Power Analog parameter.')
lm870CuomOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomOPTPower.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomOPTPower.setDescription('The value of this object provides the Unit of Measure of the Optical Power Analog parameter..')
lm870CmajorHighOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 48), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighOPTPower.setDescription('The value of this object provides the Major High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 49), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowOPTPower.setDescription('The value of this object provides the Major Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 50), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighOPTPower.setDescription('The value of this object provides the Minor High alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 51), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowOPTPower.setDescription('The value of this object provides the Minor Low alarm value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 52), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueOPTPower.setDescription('The value of this object provides the Current value of the Optical Power Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagOPTPower.setDescription('The value of this object provides the state of the Optical Power Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 54), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueOPTPower.setDescription('The value of this object provides the minimum value the Optical Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 55), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueOPTPower.setDescription('The value of this object provides the maximum value the Optical Power Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateOPTPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateOPTPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateOPTPower.setDescription('The value of this object provides the curent alarm state of the Optical Power Analog parameter.')
lm870ClabelLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelLaserBias.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelLaserBias.setDescription('The value of this object provides the label of the Laser Bias Current Analog parameter.')
lm870CuomLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomLaserBias.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomLaserBias.setDescription('The value of this object provides the Unit of Measure of the Laser Bias Analog parameter.')
lm870CmajorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 59), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighLaserBias.setDescription('The value of this object provides the Major High alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 60), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowLaserBias.setDescription('The value of this object provides the Major Low alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 61), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighLaserBias.setDescription('The value of this object provides the Minor High alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 62), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowLaserBias.setDescription('The value of this object provides the Minor Low alarm value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 63), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueLaserBias.setDescription('The value of this object provides the Current value of the Laser Bias Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagLaserBias.setDescription('The value of this object provides the state of the Laser Bias Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 65), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueLaserBias.setDescription('The value of this object provides the minimum value the Laser Bias Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 66), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueLaserBias.setDescription('The value of this object provides the maximum value the Laser Bias Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateLaserBias = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateLaserBias.setDescription('The value of this object provides the curent alarm state of the Laser Bias Analog parameter.')
lm870ClabelTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelTecCurrent.setDescription('The value of this object provides the label of the TEC Current Analog parameter.')
lm870CuomTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomTecCurrent.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomTecCurrent.setDescription('The value of this object provides the Unit of Measure of the TEC Current Analog parameter..')
lm870CmajorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 70), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighTecCurrent.setDescription('The value of this object provides the Major High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 71), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowTecCurrent.setDescription('The value of this object provides the Major Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 72), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighTecCurrent.setDescription('The value of this object provides the Minor High alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 73), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowTecCurrent.setDescription('The value of this object provides the Minor Low alarm value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 74), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueTecCurrent.setDescription('The value of this object provides the Current value of the TEC Current Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagTecCurrent.setDescription('The value of this object provides the state of the TEC Current Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 76), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueTecCurrent.setDescription('The value of this object provides the minimum value the TEC Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 77), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueTecCurrent.setDescription('The value of this object provides the maximum value the TEC Current Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateTecCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateTecCurrent.setDescription('The value of this object provides the curent alarm state of the TEC Current Analog parameter.')
lm870ClabelOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelOmiAlarmSetpoint.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelOmiAlarmSetpoint.setDescription('The value of this object provides the label of the OMI Offset Alarm Setpoint Analog parameter.')
lm870CuomOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CuomOmiAlarmSetpoint.setStatus('optional')
if mibBuilder.loadTexts: lm870CuomOmiAlarmSetpoint.setDescription('The value of this object provides the Unit of Measure of the OMI Offset Alarm Setpoint Analog parameter..')
lm870CmajorHighOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 81), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorHighOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorHighOmiAlarmSetpoint.setDescription('The value of this object provides the Major High alarm value of the OMI Offset Alarm Setpoint Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmajorLowOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 82), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmajorLowOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmajorLowOmiAlarmSetpoint.setDescription('The value of this object provides the Major Low alarm value of the OMI Offset Alarm Setpoint Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorHighOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 83), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorHighOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorHighOmiAlarmSetpoint.setDescription('The value of this object provides the Minor High alarm value of the OMI Offset Alarm Setpoint Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CminorLowOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 84), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminorLowOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminorLowOmiAlarmSetpoint.setDescription('The value of this object provides the Minor Low alarm value of the OMI Offset Alarm Setpoint Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CcurrentValueOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 85), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcurrentValueOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcurrentValueOmiAlarmSetpoint.setDescription('The value of this object provides the Current value of the OMI Offset Alarm Setpoint Analog parameter. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CstateFlagOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 86), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagOmiAlarmSetpoint.setDescription('The value of this object provides the state of the OMI Offset Alarm Setpoint Analog parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870CminValueOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 87), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CminValueOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CminValueOmiAlarmSetpoint.setDescription('The value of this object provides the minimum value the OMI Offset Alarm Setpoint Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CmaxValueOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 88), Float()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CmaxValueOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CmaxValueOmiAlarmSetpoint.setDescription('The value of this object provides the maximum value the OMI Offset Alarm Setpoint Analog parameter can achive. This value is a floating point number that is represented as an IEEE 32 bit number.')
lm870CalarmStateOmiAlarmSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 2, 1, 89), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noAlarm", 1), ("majorLowAlarm", 2), ("minorLowAlarm", 3), ("minorHighAlarm", 4), ("majorHighAlarm", 5), ("informational", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CalarmStateOmiAlarmSetpoint.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CalarmStateOmiAlarmSetpoint.setDescription('The value of this object provides the curent alarm state of the OMI Offset Alarm Setpoint Analog parameter.')
gx2Lm870CDigitalTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm870CDigitalTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Lm870CDigitalTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
lm870ClabelOMIOffsetAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelOMIOffsetAlarms.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelOMIOffsetAlarms.setDescription('The value of this object provides the label of the OMI Offset Alarm mode Digital parameter.')
lm870CenumOMIOffsetAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CenumOMIOffsetAlarms.setStatus('optional')
if mibBuilder.loadTexts: lm870CenumOMIOffsetAlarms.setDescription('The value of this object represents the Enumeration values possible for the OMI Offset Alarm modeDigital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
lm870CvalueOMIOffsetAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("set", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lm870CvalueOMIOffsetAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueOMIOffsetAlarms.setDescription('The value of this object is the current value of the parameter. Note that the value to be read will always be 1 or 2 because the set value (3) is always changed to the on value (2) by the firmware')
lm870CstateFlagOMIOffsetAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagOMIOffsetAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagOMIOffsetAlarms.setDescription('The value of this object provides the state of the OMI Offset Alarm mode Digital parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelFactoryDefault.setDescription('The value of this object provides the label of the Reset to Factory Default Control Digital parameter.')
lm870CenumFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CenumFactoryDefault.setStatus('optional')
if mibBuilder.loadTexts: lm870CenumFactoryDefault.setDescription('The value of this object represents the Enumeration values possible for the Reste to Factory Default Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
lm870CvalueFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lm870CvalueFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueFactoryDefault.setDescription('The value of this object is the current value of the parameter.')
lm870CstateFlagFactoryDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagFactoryDefault.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateFlagFactoryDefault.setDescription('The value of this object provides the state of the the parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelOMISetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelOMISetpoint.setStatus('obsolete')
if mibBuilder.loadTexts: lm870ClabelOMISetpoint.setDescription('The value of this object provides the label of the OMI Setpoint Digital parameter.')
lm870CenumOMISetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CenumOMISetpoint.setStatus('obsolete')
if mibBuilder.loadTexts: lm870CenumOMISetpoint.setDescription('The value of this object represents the Enumeration values possible for the OMI Setpoint Digital parameter. Each Enumerated values is separated by a common. The first value has a enumerated value of 1.')
lm870CvalueOMISetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueOMISetpoint.setStatus('obsolete')
if mibBuilder.loadTexts: lm870CvalueOMISetpoint.setDescription('The value of this object is the current value of the OMI Setpoint parameter.')
lm870CstateFlagOMISetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateFlagOMISetpoint.setStatus('obsolete')
if mibBuilder.loadTexts: lm870CstateFlagOMISetpoint.setDescription('The value of this object provides the state of the OMI Setpoint Digital parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Lm870CStatusTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm870CStatusTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Lm870CStatusTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
lm870ClabelBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelBoot.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelBoot.setDescription('The value of this object provides the label of the Boot Status Status parameter.')
lm870CvalueBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueBoot.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueBoot.setDescription('The value of this object provides the current value of the boot status parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagBoot.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagBoot.setDescription('The value of this object provides the state of the the boot status parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelFlash.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelFlash.setDescription('The value of this object provides the label of the Flash Status Status parameter.')
lm870CvalueFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueFlash.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueFlash.setDescription('The value of this object provides the current value of the Flash Status parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagFlash.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagFlash.setDescription('The value of this object provides the state current of the the Flash Status parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelRFOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelRFOverload.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelRFOverload.setDescription('The value of this object provides the label for the RF Overload Status parameter.')
lm870CvalueRFOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueRFOverload.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueRFOverload.setDescription('The value of this object provides the current value of the RF Overload parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagRFOverload = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagRFOverload.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagRFOverload.setDescription('The value of this object provides the current state of the RF Overload parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelRFPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelRFPower.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelRFPower.setDescription('The value of this object provides the label for the RF Power Status parameter.')
lm870CvalueRFPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueRFPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueRFPower.setDescription('The value of this object provides the current value of the RF Power parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagRFPower = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagRFPower.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagRFPower.setDescription('The value of this object provides the current state of the RF Power parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelFactoryDataCRC.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelFactoryDataCRC.setDescription('The value of this object provides the label of the Factory Data CRC Status parameter.')
lm870CvalueFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueFactoryDataCRC.setDescription('The value of this object provides the current value of the Factory Data CRC parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagFactoryDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagFactoryDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagFactoryDataCRC.setDescription('The value of this object provides the current state of the the Factory Data CRC parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelAlarmDataCrc.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelAlarmDataCrc.setDescription('The value of this object provides the label of the Alarm Data Crc parameter.')
lm870CvalueAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueAlarmDataCrc.setDescription('The value of this object provides the current value of the Alarm Data Crc parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagAlarmDataCrc = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagAlarmDataCrc.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagAlarmDataCrc.setDescription('The value of this object provides the current state of the the Alarm Data Crc parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelModSetDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelModSetDataCRC.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelModSetDataCRC.setDescription('The value of this object provides the label of the Module Settings Data Crc parameter.')
lm870CvalueModSetDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueModSetDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueModSetDataCRC.setDescription('The value of this object provides the current value of the Module Settings Data Crc parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagModSetDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagModSetDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagModSetDataCRC.setDescription('The value of this object provides the current state of the the Module Settings Data Crc parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelOptCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelOptCalDataCRC.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelOptCalDataCRC.setDescription('The value of this object provides the label of the Optical Calibration Data Crc parameter.')
lm870CvalueOptCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueOptCalDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueOptCalDataCRC.setDescription('The value of this object provides the current value of the Optical Calibration Data Crc parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagOptCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagOptCalDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagOptCalDataCRC.setDescription('The value of this object provides the current state of the the Optical Calibration Data Crc parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
lm870ClabelRFCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ClabelRFCalDataCRC.setStatus('optional')
if mibBuilder.loadTexts: lm870ClabelRFCalDataCRC.setDescription('The value of this object provides the label of the RF Calibration Data Crc parameter.')
lm870CvalueRFCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("undetermined", 2), ("warning", 3), ("minor", 4), ("major", 5), ("critical", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CvalueRFCalDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CvalueRFCalDataCRC.setDescription('The value of this object provides the current value of the RF Calibration Data Crc parameter (0-Ok, 1-Undetermined 2-Warning, 3-Minor, 4-Major, 5-Critical).')
lm870CstateflagRFCalDataCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 4, 3, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hidden", 1), ("read-only", 2), ("updateable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CstateflagRFCalDataCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CstateflagRFCalDataCRC.setDescription('The value of this object provides the current state of the the RF Calibration Data Crc parameter. (0-Hidden 1-Read-Only, 2-Updateable).')
gx2Lm870CFactoryTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gx2Lm870CFactoryTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: gx2Lm870CFactoryTableIndex.setDescription('The value of this object identifies the network element. This index is equal to the hfcCommonTableIndex for the same element.')
lm870CbootControlByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CbootControlByte.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CbootControlByte.setDescription('The value of this object indicates which bank the firmware is currently being boot from.')
lm870CbootStatusByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CbootStatusByte.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CbootStatusByte.setDescription('This object indicates the status of the last boot')
lm870Cbank1CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870Cbank1CRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870Cbank1CRC.setDescription('This object provides the CRC code of bank 0.')
lm870Cbank2CRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870Cbank2CRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870Cbank2CRC.setDescription('This object provides the CRC code of bank 1.')
lm870CprgEEPROMByte = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CprgEEPROMByte.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CprgEEPROMByte.setDescription('This object indicates if the EEPROM has been programmed')
lm870CfactoryCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CfactoryCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CfactoryCRC.setDescription('This object provides the CRC code for the Factory data.')
lm870CcalculateCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("factory", 1), ("settings", 2), ("alarm", 3), ("opticalCal", 4), ("rfCal", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CcalculateCRC.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CcalculateCRC.setDescription('This object indicates which of the Emnums will have the CRC calculated.')
lm870ChourMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870ChourMeter.setStatus('mandatory')
if mibBuilder.loadTexts: lm870ChourMeter.setDescription('This object provides the hour meter reading of the module.')
lm870CflashPrgCntA = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CflashPrgCntA.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CflashPrgCntA.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
lm870CflashPrgCntB = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CflashPrgCntB.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CflashPrgCntB.setDescription('This object provides the number of times Bank 1 flash has been programmed.')
lm870CflashBankARev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CflashBankARev.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CflashBankARev.setDescription('This object provides the revision of flash bank 0.')
lm870CflashBankBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10, 5, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lm870CflashBankBRev.setStatus('mandatory')
if mibBuilder.loadTexts: lm870CflashBankBRev.setDescription('This object provides the revision of flash bank 1.')
trapLM870CConfigChangeInteger = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,1)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLM870CConfigChangeInteger.setDescription("This trap is issued if configuration of a single variable with integer type was changed (via ANY interface). TrapChangedValueInteger variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapLMCConfigChangeDisplayString = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,2)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueDisplayString"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCConfigChangeDisplayString.setDescription("This trap is issued if configuration of a single variable with DispalayString type was changed (via ANY interface). TrapChangedValueDisplayString variable may contain current reading of that variable. trapPerceivedSeverity - 'indeterminate'")
trapLMCFanCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,3)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCFanCurrentAlarm.setDescription('This trap is issued when the Laser Modules Fan Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapLMC12vAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,4)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMC12vAlarm.setDescription('This trap is issued when the Laser Modules 12 Volt parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapLMCModuleTempAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,5)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCModuleTempAlarm.setDescription('This trap is issued when the Laser Module Temperature goes out of range.')
trapLMCRFPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,6)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCRFPowerAlarm.setDescription('This trap is issued when the Laser Modules RF Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapLMCOPTPowerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,7)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCOPTPowerAlarm.setDescription('This trap is issued when the Laser Modules Optical Power parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapLMCLaserBiasAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,8)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCLaserBiasAlarm.setDescription('This trap is issued when the Laser Bias parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapLMCTECCurrentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,9)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCTECCurrentAlarm.setDescription('This trap is issued when the Laser Modules TEC Current parameter goes out of range. trapAdditionalInfoInteger variable contains current reading of the this parameter.')
trapLMCFlashAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,10)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCFlashAlarm.setDescription('This trap is issued when the Laser Modules detects an error during Flash memory operations.')
trapLMCBankBootAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,11)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCBankBootAlarm.setDescription('This trap is issued when the Laser Modules detects an error while booting from bank 0 or bank 1.')
trapLMCAlarmDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,12)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCAlarmDataCRCAlarm.setDescription('This trap is issued when the Alarm Data CRC is incorrect.')
trapLMCModSetDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,13)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCModSetDataCRCAlarm.setDescription('This trap is issued when the Module Settings CRC is incorrect.')
trapLMCFactoryDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,14)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCFactoryDataCRCAlarm.setDescription('This trap is issued when the Factory Data CRC is incorrect.')
trapLMCResetFactoryDefaultAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,15)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCResetFactoryDefaultAlarm.setDescription('This trap is issued when the Factory Default Reset occurs.')
trapLMCOPCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,16)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCOPCalDataCRCAlarm.setDescription('This trap is issued when the Optical Calibration Data CRC is incorrect.')
trapLMCRFCalDataCRCAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,17)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCRFCalDataCRCAlarm.setDescription('This trap is issued when the RF Calibration Data CRC is incorrect.')
trapLMCRFOverloadAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,18)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCRFOverloadAlarm.setDescription('This trap is issued when the RF Overload alarm occurs.')
trapLMCOMIoffsetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 1166, 6, 1, 2, 10) + (0,19)).setObjects(("NLSBBN-TRAPS-MIB", "trapIdentifier"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemModelNumber"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemSerialNum"), ("NLSBBN-TRAPS-MIB", "trapPerceivedSeverity"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemOperState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAlarmStatus"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAdminState"), ("NLSBBN-TRAPS-MIB", "trapNetworkElemAvailStatus"), ("NLSBBN-TRAPS-MIB", "trapText"), ("NLSBBN-TRAPS-MIB", "trapChangedObjectId"), ("NLSBBN-TRAPS-MIB", "trapChangedValueInteger"), ("NLSBBN-TRAPS-MIB", "trapNETrapLastTrapTimeStamp"))
if mibBuilder.loadTexts: trapLMCOMIoffsetAlarm.setDescription('This trap is issued when an OMI Offset alarm occurs.')
mibBuilder.exportSymbols("OMNI-gx2Lm870C-MIB", lm870ClabelRFOverload=lm870ClabelRFOverload, lm870CstateFlagFactoryDefault=lm870CstateFlagFactoryDefault, lm870CminValueFanCurrent=lm870CminValueFanCurrent, trapLMC12vAlarm=trapLMC12vAlarm, lm870ClabelFanCurrent=lm870ClabelFanCurrent, lm870CfactoryCRC=lm870CfactoryCRC, lm870ClabelOMISetpoint=lm870ClabelOMISetpoint, lm870CvalueRFCalDataCRC=lm870CvalueRFCalDataCRC, gx2Lm870CDigitalTableIndex=gx2Lm870CDigitalTableIndex, lm870CvalueOptCalDataCRC=lm870CvalueOptCalDataCRC, lm870Cuom12Volt=lm870Cuom12Volt, lm870CmajorLowLaserBias=lm870CmajorLowLaserBias, lm870CprgEEPROMByte=lm870CprgEEPROMByte, lm870CmajorHighModTemp=lm870CmajorHighModTemp, lm870CcurrentValueOmiOffset=lm870CcurrentValueOmiOffset, lm870Cbank1CRC=lm870Cbank1CRC, lm870CcurrentValueTecCurrent=lm870CcurrentValueTecCurrent, gx2Lm870CStatusTableIndex=gx2Lm870CStatusTableIndex, lm870CenumOMISetpoint=lm870CenumOMISetpoint, lm870CminorLowOPTPower=lm870CminorLowOPTPower, lm870CenumOMIOffsetAlarms=lm870CenumOMIOffsetAlarms, trapLMCFlashAlarm=trapLMCFlashAlarm, lm870CmajorLowOmiOffset=lm870CmajorLowOmiOffset, lm870Clabel12Volt=lm870Clabel12Volt, lm870CminorLow12Volt=lm870CminorLow12Volt, lm870CvalueRFOverload=lm870CvalueRFOverload, trapLMCOPCalDataCRCAlarm=trapLMCOPCalDataCRCAlarm, lm870CminorLowTecCurrent=lm870CminorLowTecCurrent, lm870ClabelRFCalDataCRC=lm870ClabelRFCalDataCRC, lm870ClabelOPTPower=lm870ClabelOPTPower, lm870CstateflagModSetDataCRC=lm870CstateflagModSetDataCRC, lm870CmaxValueTecCurrent=lm870CmaxValueTecCurrent, lm870ClabelOMIOffsetAlarms=lm870ClabelOMIOffsetAlarms, lm870CalarmStateFanCurrent=lm870CalarmStateFanCurrent, lm870CflashPrgCntA=lm870CflashPrgCntA, lm870ClabelFlash=lm870ClabelFlash, lm870CstateFlagOmiOffset=lm870CstateFlagOmiOffset, lm870CmajorHighLaserBias=lm870CmajorHighLaserBias, lm870CbootStatusByte=lm870CbootStatusByte, lm870CcurrentValueFanCurrent=lm870CcurrentValueFanCurrent, trapLMCTECCurrentAlarm=trapLMCTECCurrentAlarm, lm870CminValueTecCurrent=lm870CminValueTecCurrent, lm870CminValue12Volt=lm870CminValue12Volt, lm870CmaxValueFanCurrent=lm870CmaxValueFanCurrent, lm870CflashPrgCntB=lm870CflashPrgCntB, gx2lm870CStatusEntry=gx2lm870CStatusEntry, lm870CmajorHighFanCurrent=lm870CmajorHighFanCurrent, lm870ClabelBoot=lm870ClabelBoot, trapLMCModuleTempAlarm=trapLMCModuleTempAlarm, Float=Float, lm870CmajorHighOmiOffset=lm870CmajorHighOmiOffset, lm870CminorLowOmiOffset=lm870CminorLowOmiOffset, lm870ClabelFactoryDefault=lm870ClabelFactoryDefault, lm870CstateflagRFPower=lm870CstateflagRFPower, trapLMCConfigChangeDisplayString=trapLMCConfigChangeDisplayString, gx2lm870CAnalogEntry=gx2lm870CAnalogEntry, lm870CminorLowModTemp=lm870CminorLowModTemp, lm870CvalueFlash=lm870CvalueFlash, lm870CalarmStateTecCurrent=lm870CalarmStateTecCurrent, lm870CstateFlagOmiAlarmSetpoint=lm870CstateFlagOmiAlarmSetpoint, gx2lm870CAnalogTable=gx2lm870CAnalogTable, trapLMCRFCalDataCRCAlarm=trapLMCRFCalDataCRCAlarm, lm870CminorHighOPTPower=lm870CminorHighOPTPower, lm870ClabelRFPower=lm870ClabelRFPower, lm870CmajorLowModTemp=lm870CmajorLowModTemp, lm870CmajorLowFanCurrent=lm870CmajorLowFanCurrent, lm870CalarmStateModTemp=lm870CalarmStateModTemp, trapLMCAlarmDataCRCAlarm=trapLMCAlarmDataCRCAlarm, lm870CvalueRFPower=lm870CvalueRFPower, trapLMCOPTPowerAlarm=trapLMCOPTPowerAlarm, lm870ClabelModSetDataCRC=lm870ClabelModSetDataCRC, gx2Lm870CAnalogTableIndex=gx2Lm870CAnalogTableIndex, gx2lm870CDigitalTable=gx2lm870CDigitalTable, lm870CuomLaserBias=lm870CuomLaserBias, lm870CstateflagOptCalDataCRC=lm870CstateflagOptCalDataCRC, lm870CminValueLaserBias=lm870CminValueLaserBias, lm870CminorLowLaserBias=lm870CminorLowLaserBias, lm870CalarmState12Volt=lm870CalarmState12Volt, lm870CstateFlagOMISetpoint=lm870CstateFlagOMISetpoint, lm870CvalueAlarmDataCrc=lm870CvalueAlarmDataCrc, lm870ClabelTecCurrent=lm870ClabelTecCurrent, lm870CminValueOmiAlarmSetpoint=lm870CminValueOmiAlarmSetpoint, lm870CcurrentValueOPTPower=lm870CcurrentValueOPTPower, lm870CstateflagRFOverload=lm870CstateflagRFOverload, lm870CuomModTemp=lm870CuomModTemp, lm870CstateFlagOMIOffsetAlarms=lm870CstateFlagOMIOffsetAlarms, lm870ClabelAlarmDataCrc=lm870ClabelAlarmDataCrc, lm870CminValueModTemp=lm870CminValueModTemp, lm870CuomFanCurrent=lm870CuomFanCurrent, lm870CcurrentValueOmiAlarmSetpoint=lm870CcurrentValueOmiAlarmSetpoint, lm870Cbank2CRC=lm870Cbank2CRC, lm870CmajorHighOPTPower=lm870CmajorHighOPTPower, gx2lm870CStatusTable=gx2lm870CStatusTable, trapLMCFanCurrentAlarm=trapLMCFanCurrentAlarm, gx2lm870CFactoryEntry=gx2lm870CFactoryEntry, trapLMCOMIoffsetAlarm=trapLMCOMIoffsetAlarm, lm870CminorLowOmiAlarmSetpoint=lm870CminorLowOmiAlarmSetpoint, gx2Lm870CDescriptor=gx2Lm870CDescriptor, lm870CvalueOMIOffsetAlarms=lm870CvalueOMIOffsetAlarms, lm870CvalueBoot=lm870CvalueBoot, trapLMCRFOverloadAlarm=trapLMCRFOverloadAlarm, lm870CalarmStateOPTPower=lm870CalarmStateOPTPower, lm870CuomOPTPower=lm870CuomOPTPower, trapLMCBankBootAlarm=trapLMCBankBootAlarm, lm870CmajorLowOPTPower=lm870CmajorLowOPTPower, lm870CminorHighTecCurrent=lm870CminorHighTecCurrent, lm870ClabelOptCalDataCRC=lm870ClabelOptCalDataCRC, lm870CstateFlag12Volt=lm870CstateFlag12Volt, lm870CminorHighOmiOffset=lm870CminorHighOmiOffset, lm870CbootControlByte=lm870CbootControlByte, lm870CmaxValue12Volt=lm870CmaxValue12Volt, lm870CmaxValueOmiOffset=lm870CmaxValueOmiOffset, lm870CminorHighFanCurrent=lm870CminorHighFanCurrent, lm870CuomOmiOffset=lm870CuomOmiOffset, lm870CminValueOmiOffset=lm870CminValueOmiOffset, lm870CminorHighLaserBias=lm870CminorHighLaserBias, lm870CcurrentValueModTemp=lm870CcurrentValueModTemp, lm870CstateflagBoot=lm870CstateflagBoot, trapLMCModSetDataCRCAlarm=trapLMCModSetDataCRCAlarm, lm870CmajorHighTecCurrent=lm870CmajorHighTecCurrent, lm870CenumFactoryDefault=lm870CenumFactoryDefault, lm870CflashBankBRev=lm870CflashBankBRev, gx2lm870CFactoryTable=gx2lm870CFactoryTable, lm870ClabelFactoryDataCRC=lm870ClabelFactoryDataCRC, lm870CalarmStateOmiOffset=lm870CalarmStateOmiOffset, lm870CmajorLowTecCurrent=lm870CmajorLowTecCurrent, lm870CstateFlagLaserBias=lm870CstateFlagLaserBias, lm870CstateFlagOPTPower=lm870CstateFlagOPTPower, lm870CvalueOMISetpoint=lm870CvalueOMISetpoint, trapLMCResetFactoryDefaultAlarm=trapLMCResetFactoryDefaultAlarm, trapLMCRFPowerAlarm=trapLMCRFPowerAlarm, lm870CstateFlagTecCurrent=lm870CstateFlagTecCurrent, lm870CminorHigh12Volt=lm870CminorHigh12Volt, lm870CmajorLow12Volt=lm870CmajorLow12Volt, lm870CmajorHighOmiAlarmSetpoint=lm870CmajorHighOmiAlarmSetpoint, lm870CcurrentValue12Volt=lm870CcurrentValue12Volt, trapLM870CConfigChangeInteger=trapLM870CConfigChangeInteger, trapLMCLaserBiasAlarm=trapLMCLaserBiasAlarm, lm870CmaxValueModTemp=lm870CmaxValueModTemp, lm870CmaxValueLaserBias=lm870CmaxValueLaserBias, lm870ChourMeter=lm870ChourMeter, lm870CflashBankARev=lm870CflashBankARev, lm870CcurrentValueLaserBias=lm870CcurrentValueLaserBias, lm870CvalueFactoryDefault=lm870CvalueFactoryDefault, lm870ClabelOmiOffset=lm870ClabelOmiOffset, lm870ClabelModTemp=lm870ClabelModTemp, lm870CmajorLowOmiAlarmSetpoint=lm870CmajorLowOmiAlarmSetpoint, lm870CvalueFactoryDataCRC=lm870CvalueFactoryDataCRC, lm870CcalculateCRC=lm870CcalculateCRC, lm870CstateflagFlash=lm870CstateflagFlash, lm870CstateFlagFanCurrent=lm870CstateFlagFanCurrent, gx2Lm870CFactoryTableIndex=gx2Lm870CFactoryTableIndex, lm870CmaxValueOmiAlarmSetpoint=lm870CmaxValueOmiAlarmSetpoint, lm870CminorHighOmiAlarmSetpoint=lm870CminorHighOmiAlarmSetpoint, lm870CmaxValueOPTPower=lm870CmaxValueOPTPower, lm870ClabelLaserBias=lm870ClabelLaserBias, lm870CminorHighModTemp=lm870CminorHighModTemp, gx2lm870CDigitalEntry=gx2lm870CDigitalEntry, lm870CminValueOPTPower=lm870CminValueOPTPower, lm870CstateflagFactoryDataCRC=lm870CstateflagFactoryDataCRC, lm870CminorLowFanCurrent=lm870CminorLowFanCurrent, lm870CstateFlagModTemp=lm870CstateFlagModTemp, lm870CuomOmiAlarmSetpoint=lm870CuomOmiAlarmSetpoint, lm870ClabelOmiAlarmSetpoint=lm870ClabelOmiAlarmSetpoint, lm870CuomTecCurrent=lm870CuomTecCurrent, lm870CstateflagAlarmDataCrc=lm870CstateflagAlarmDataCrc, lm870CstateflagRFCalDataCRC=lm870CstateflagRFCalDataCRC, lm870CvalueModSetDataCRC=lm870CvalueModSetDataCRC, lm870CalarmStateLaserBias=lm870CalarmStateLaserBias, trapLMCFactoryDataCRCAlarm=trapLMCFactoryDataCRCAlarm, lm870CmajorHigh12Volt=lm870CmajorHigh12Volt, lm870CalarmStateOmiAlarmSetpoint=lm870CalarmStateOmiAlarmSetpoint)
