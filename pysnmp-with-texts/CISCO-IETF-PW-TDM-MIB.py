#
# PySNMP MIB module CISCO-IETF-PW-TDM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IETF-PW-TDM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:01:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
cpwVcIndex, = mibBuilder.importSymbols("CISCO-IETF-PW-MIB", "cpwVcIndex")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, ModuleIdentity, TimeTicks, iso, Counter64, Unsigned32, Counter32, Gauge32, IpAddress, ObjectIdentity, Integer32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "TimeTicks", "iso", "Counter64", "Unsigned32", "Counter32", "Gauge32", "IpAddress", "ObjectIdentity", "Integer32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, StorageType, TextualConvention, TruthValue, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "StorageType", "TextualConvention", "TruthValue", "TimeStamp", "RowStatus")
cpwCTDMMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 131))
cpwCTDMMIB.setRevisions(('2006-07-21 00:00', '2006-03-01 00:00', '2005-10-23 00:00', '2005-07-12 00:00', '2004-04-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cpwCTDMMIB.setRevisionsDescriptions(("Cisco'ized the IETF draft: draft-ietf-pwe3-tdm-mib-05.txt 1-Align object names with CISCO-IETF-PW-MIB and CISCO-IETF-PW-TC-MIB 2-Used cpwVcType instead of pwType 3-Used cpwVcTable instead of pwTable", 'Changes since last draft: 1-Remove Vc from all objects 2-Move MIB root to transmission 3-Change default of pwCTDMCfgSetUp2SynchTimeOut to 5000ms 4-Change PM running counters to daily intervals 5-Enhance description of pwCTDMCfgPktReplacePolicy 6-Enhance description of ES, SES, and UAS 7-Aligned objects with other PW MIBs', 'Changes since last draft: 1-Align object names with CISCO-IETF-PW-MIB and PW-TC-STD-MIB 2-clean up some text 3-pwCTDMCfgIndexNext SYNTAX was changed to TestAndIncr 4-Add explanation to descriptions of few objects 5-Performance objecs were modified to better represent their counts and type', 'Changes since last draft: 1-Merged all configurable objects from Satop MIB with objects of pwCTDMCfgTable in this MIB module. 2-pwCTDMCfgJtrBfrDepth-changed units to microsec. 3-pwCTDMAvePktLossTimeWindow moved to the pwCTDMCfgTable. 4-In pwCTDMCfgConfErr, the enum(1)was renamed to PayloadSize. 5-Renamed pwCSatopCfgConsecPktsLoss2Normal and pwCSatopCfgConsecMissPktNorma2Loss to pwCTDMCfgConsecPktsInSynch and to pwCTDMCfgConsecMissPktsOutSynch respectively.', 'Initial version, published as draft-ietf-pwe3-TDM-mib-00.txt',))
if mibBuilder.loadTexts: cpwCTDMMIB.setLastUpdated('200607210000Z')
if mibBuilder.loadTexts: cpwCTDMMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cpwCTDMMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 SA Tel: +1 800 553-NETS Email: cs-atm@cisco.com')
if mibBuilder.loadTexts: cpwCTDMMIB.setDescription('This MIB contains managed object definitions for encapsulating TDM (T1,E1, T3, E3, NxDS0) as pseudo-wires over packet-switching networks (PSN). This MIB supplements the CISCO-IETF-PW-MIB. The CISCO-IETF-PW-MIB contains structures and MIB associations generic to Pseudo-Wire (PW) emulation. PW-specific MIBs (such as this) contain config and stats for specific PW types.')
class CpwTDMCfgIndex(TextualConvention, Unsigned32):
    description = 'Index into any of the relevant pwCXXXCfgTable.'
    status = 'current'

cpwCTDMNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 131, 0))
cpwCTDMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 131, 1))
cpwCTDMConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 131, 2))
cpwCTDMTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1), )
if mibBuilder.loadTexts: cpwCTDMTable.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMTable.setDescription('This table contains basic information including ifIndex, and pointers to entries in the relevant TDM config tables for this TDM PW.')
cpwCTDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwCTDMEntry.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMEntry.setDescription('This table is indexed by the same index that was created for the associated entry in the VC Table (in the CISCO-IETF-PW-MIB). - The CpwVcIndex. An entry is created in this table by the agent for every entry in the cpwVcTable with a cpwVcType equal to one of the following: e1Satop(12), t1Satop(13), e3Satop(14), t3Satop(15), basicCesPsn(16), basicTdmIp(17), tdmCasCesPsn(18), tdmCasTdmIp(19).')
cpwCTDMRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 1), Integer32().clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpwCTDMRate.setReference('Control Protocol Extensions for Setup of TDM Pseudowires [TDMCP-EXT], describes extension to the PWE3 control protocol and PWE3 IANA allocations required for setup of TDM pseudo wires.')
if mibBuilder.loadTexts: cpwCTDMRate.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMRate.setDescription("The parameter represents the bit-rate of the TDM service in multiples of the 'basic' 64 Kbit/s rate. It complements the definition of cpwVcType used in CISCO-IETF-PW-MIB. For structure-agnostic the following should be used: a) Satop E1 - 32 b) Satop T1 emulation: i) MUST be set to 24 in the basic emulation mode ii) MUST be set to 25 for the 'Octet-aligned T1' emulation mode c) Satop E3 - 535 d) Satop T3 - 699 For all kinds of structure-aware emulation, this parameter MUST be set to N where N is the number of DS0 channels in the corresponding attachment circuit.")
cpwCTDMIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpwCTDMIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMIfIndex.setDescription('This is a unique index within the ifTable. It represents the interface index of the full link or the interface index for the bundle holding the group of time slots to be transmitted via this PW connection. A value of zero indicates an interface index that has yet to be determined. Once set, if the TDM ifIndex is (for some reason) later removed, the agent SHOULD delete the associated PW rows (e.g., this cpwCTDMTable entry). If the agent does not delete the rows, the agent MUST set this object to zero.')
cpwCGenTDMCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 3), CpwTDMCfgIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpwCGenTDMCfgIndex.setStatus('current')
if mibBuilder.loadTexts: cpwCGenTDMCfgIndex.setDescription('Index to the generic parameters in the TDM configuration table that appears in this MIB module. It is likely that multiple TDM PWs of the same characteristic will share a single TDM Cfg entry.')
cpwCRelTDMCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 4), CpwTDMCfgIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpwCRelTDMCfgIndex.setStatus('current')
if mibBuilder.loadTexts: cpwCRelTDMCfgIndex.setDescription('Index to the relevant TDM configuration table entry that appears in one of the related MIB modules such as TDMoIP or CESoPSN. It is likely that multiple TDM PWs of the same characteristic will share a single configuration entry of the relevant type. The value 0 implies no entry in other related MIB')
cpwCTDMConfigError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 5), Bits().clone(namedValues=NamedValues(("other", 0), ("tdmTypeIncompatible", 1), ("peerRtpIncompatible", 2), ("peerPayloadSizeIncompatible", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMConfigError.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMConfigError.setDescription('Any of the bits are set if the local configuration is not compatible with the peer configuration as available from the various parameters options. -tdmTypeIncompatible bit is set if the local configuration is not carrying the same TDM type as the peer configuration. -peerRtpIncompatible bit is set if the local configuration is configured to send RTP packets for this PW, and the remote is not capable of accepting RTP packets. -peerPayloadSizeIncompatible bit is set if the local configuration is not carrying the same Payload Size as the peer configuration.')
cpwCTDMTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMTimeElapsed.setDescription("The number of seconds, including partial seconds, that have elapsed since the beginning of the current measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
cpwCTDMValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMValidIntervals.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMValidIntervals.setDescription('The number of previous 15-minute intervals for which data was collected. An agent with TDM capability must be capable of supporting at least n intervals. The minimum value of n is 4, The default of n is 32 and the maximum value of n is 96. The value will be <n> unless the measurement was (re-) started within the last (<n>*15) minutes, in which case the value will be the number of complete 15 minute intervals for which the agent has at least some data. In certain cases(e.g., in the case where the agent is a proxy) it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
cpwCTDMValidDayIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setUnits('days').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMValidDayIntervals.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMValidDayIntervals.setDescription('The number of previous days for which data was collected. An agent with TDM capability must be capable of supporting at least n intervals. The minimum value of n is 1, The default of n is 1 and the maximum value of n is 30.')
cpwCTDMCurrentIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("other", 0), ("strayPacket", 1), ("malformedPacket", 2), ("excessivePktLossRate", 3), ("bufferOverrun", 4), ("bufferUnderrun", 5), ("remotePktLoss", 6), ("pktMisOrder", 7), ("packetLoss", 8), ("tdmFault", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMCurrentIndications.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCurrentIndications.setDescription("The following defects should be detected and reported upon request: -Stray packets MAY be detected by the PSN and multiplexing layers. Stray packets MUST be discarded by the CE-bound IWF and their detection MUST NOT affect mechanisms for detection of packet loss. -Malformed packets are detected by mismatch between the expected packet size (taking the value of the L bit into account) and the actual packet size inferred from the PSN and multiplexing layers. Malformed in-order packets MUST be discarded by the CE-bound IWF and replacement data generated as for lost packets. -Excessive packet loss rate is detected by computing the average packet loss rate over the value of cpwCTDMAvePktLossTimeWindow and comparing it with a preconfigured threshold [SATOP]. -Buffer overrun is detected in the normal operation state when the CE bound IWF's jitter buffer cannot accommodate newly arrived packets. -Remote packet loss is indicated by reception of packets with their R bit set. -Packet misorder is detected by looking at the Sequence number provided by the control word. -TDM Fault, if L bit in the control word is set, it indicates that TDM data carried in the payload is invalid due an attachment circuit fault. When the L bit is set the payload MAY be omitted in order to conserve bandwidth. Note: the algorithm used to capture these indications is implementation specific.")
cpwCTDMLatchedIndications = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 10), Bits().clone(namedValues=NamedValues(("other", 0), ("staryPacket", 1), ("malformedPacket", 2), ("excessivePktLossRate", 3), ("bufferOverrun", 4), ("bufferUnderrun", 5), ("remotePktLoss", 6), ("pktMisOrder", 7), ("packetLoss", 8), ("tdmFault", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMLatchedIndications.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMLatchedIndications.setDescription('The state of TDM indicators when the TDM PW last declared an error second (either as ES, SES or a second with errors inside a UAS) condition. At this time, only LOPS can create a failure. Since indicators other than LOPS are useful, all are latched here. For bit definitions, see cpwCTDMCurrentIndications above. Note: the algorithm used to latch these indications when entering a defect state is implementation specific.')
cpwCTDMLastEsTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMLastEsTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMLastEsTimeStamp.setDescription('The value of sysUpTime at the most recent occasion at which the TDM PW entered the ES or SES state.')
cpwCTDMCfgIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMCfgIndexNext.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgIndexNext.setDescription('This object contains the value to be used for cpwCTDMCfgIndex when creating entries in the cpwCTDMCfgTable. The value 0 indicates that no unassigned entries are available. To obtain the value of cpwCTDMCfgIndexNext for a new entry in the cpwCTDMCfgTable, the manager issues a management protocol retrieval operation. The agent will determine through its local policy when this index value will be made available for reuse.')
cpwCTDMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3), )
if mibBuilder.loadTexts: cpwCTDMCfgTable.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgTable.setDescription('This table contains a set of parameters that may be referenced by one or more TDM PWs in cpwCTDMTable.')
cpwCTDMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1), ).setIndexNames((0, "CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgIndex"))
if mibBuilder.loadTexts: cpwCTDMCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgEntry.setDescription('These parameters define the characteristics of a TDM PW. They are grouped here to ease NMS burden. Once an entry is created here it may be re-used by many PWs.')
cpwCTDMCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 1), CpwTDMCfgIndex())
if mibBuilder.loadTexts: cpwCTDMCfgIndex.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgIndex.setDescription('Index to an entry in this table. The value is a copy of the assigned cpwCTDMCfgIndexNext.')
cpwCTDMCfgConfErr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 2), Bits().clone(namedValues=NamedValues(("other", 0), ("payloadSize", 1), ("jtrBfrDepth", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMCfgConfErr.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgConfErr.setDescription('This object indicates the various configuration errors, illegal settings within the cpwCTDMCfg table. The errors can be due to several reasons, like Payload size mismatch or Jitter Buffer depth value mistmatch. payloadSize - This bit is set if there is Payload size mismatch between the local and peer configurations. jtrBfrDepth - This bit is set if there is Jitter Buffer depth value mistmatch. other - This bit is set if the error is not due to payloadSize and jtrBfrDepth mismatch.')
cpwCTDMCfgPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 3), Unsigned32().clone(32)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgPayloadSize.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgPayloadSize.setDescription('The value of this object indicates the PayLoad Size (in bytes) to be defined during the PW setUp. Upon TX, implementation must be capable of carrying that amount of bytes. Upon RX, when the LEN field is set to 0, the payload of packet MUST assume this size, and if the actual packet size is inconsistent with this length, the packet MUST be considered to be malformed.')
cpwCTDMCfgPktReorder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgPktReorder.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgPktReorder.setDescription('If set to true, CE bound packets are queued in the jitter buffer, out of order packets are re-ordered. The maximum sequence number differential (i.e., the range in which re-sequencing can occur) is dependant on the depth of the jitter buffer. See cpwCTDMCfgJtrBfrDepth.')
cpwCTDMCfgRtpHdrUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 5), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgRtpHdrUsed.setReference('RFC 4553, which describes a pseudowire encapsulation for TDM (T1, E1, T3, E3) bit-streams disregards any structure that may be imposed on these streams.')
if mibBuilder.loadTexts: cpwCTDMCfgRtpHdrUsed.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgRtpHdrUsed.setDescription('If the value of this object is set to false, then a RTP header is not pre-pended to the TDM packet.')
cpwCTDMCfgJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 6), Unsigned32().clone(3000)).setUnits('microsecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgJtrBfrDepth.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgJtrBfrDepth.setDescription("The size of this buffer SHOULD be locally configured to allow accommodation to the PSN-specific packet delay variation. If configured to a value not supported by the implementation, the agent MUST return an error code 'jtrBfrDepth' in 'cpwCTDMConfigError '. Jitter buffers are a limited resource to be managed. The actual size should be at least twice as big as the value of cpwCTDMCfgJtrBfrDepth")
cpwCTDMCfgPayloadSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgPayloadSuppression.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgPayloadSuppression.setDescription('This object indicates whether the Payload suppression is eanbled or disabled. Payload MAY be omitted in order to conserve bandwidth. enable - Payload suppression is allowed. disable - No Payload suppresion under any condition.')
cpwCTDMCfgConsecPktsInSynch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 8), Unsigned32().clone(2)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgConsecPktsInSynch.setReference('RFC 4553, which describes a pseudowire encapsulation for TDM (T1, E1, T3, E3) bit-streams that disregards any structure that may be imposed on these streams.')
if mibBuilder.loadTexts: cpwCTDMCfgConsecPktsInSynch.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgConsecPktsInSynch.setDescription('The number of consecutive packets with sequential sequence numbers that are required to exit the Loss of Packets (LOPS) state.')
cpwCTDMCfgConsecMissPktsOutSynch = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 9), Unsigned32().clone(10)).setUnits('packets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgConsecMissPktsOutSynch.setReference('RFC 4553, which describes a pseudowire encapsulation for TDM (T1, E1, T3, E3) bit-streams that disregards any structure that may be imposed on these streams.')
if mibBuilder.loadTexts: cpwCTDMCfgConsecMissPktsOutSynch.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgConsecMissPktsOutSynch.setDescription('The number of consecutive missing packets that are required to enter the LOPS state.')
cpwCTDMCfgSetUp2SynchTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 10), Unsigned32().clone(5000)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgSetUp2SynchTimeOut.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgSetUp2SynchTimeOut.setDescription("The amount of time the host should wait before declaring the pseudo wire in down state, if the number of consecutive TDM packets that have been received after changing the administrative status to up and after finalization of signaling (if supported) between the two PEs is smaller than cpwCTDMCfgConsecPktsInSynch. Once the the PW has OperStatus of 'up' this parameter is no longer valid. This parameter is defined to ensure that the host does not prematurely inform failure of the PW. In particular PW 'down' notifications should not be sent before expiration of this timer. This parameter is valid only after adminisrative changes of the status of the PW. If the PW fails due to network impairments a 'down' notification should be sent.")
cpwCTDMCfgPktReplacePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ais", 1), ("implementationSpecific", 2))).clone('ais')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgPktReplacePolicy.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgPktReplacePolicy.setDescription('This parameter determines the value to be played when CE bound packets have over/underflow the jitter buffer, or are missing for any reason. This AIS (Alarm Indication Signal) pattern is sent (played) on the TDM line. ais - AIS (Alarm Indication Signal) pattern is sent (played) on the TDM line. implementationSpecific - Implementation specific pattern is sent on the TDM line.')
cpwCTDMCfgAvePktLossTimeWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 12), Integer32().clone(20)).setUnits('millisecond').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgAvePktLossTimeWindow.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgAvePktLossTimeWindow.setDescription('The length of time over which the average packet loss rate should be computed to detect Excessive packet loss rate')
cpwCTDMCfgExcessivePktLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 13), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgExcessivePktLossThreshold.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgExcessivePktLossThreshold.setDescription('Excessive packet loss rate is detected by computing the average packetloss rate over a cpwCTDMCfgAvePktLossTimeWindow amount of time and comparing it with this threshold value.')
cpwCTDMCfgAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 14), Unsigned32().clone(2500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgAlarmThreshold.setDescription("Alarms are only reported when the defect state persists for the length of time specified by this object. The object's unit is millisec")
cpwCTDMCfgClearAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 15), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgClearAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgClearAlarmThreshold.setDescription("Alarm MUST be cleared after the corresponding defect is undetected for the amount of time specified by this object. The object's unit is millisec")
cpwCTDMCfgMissingPktsToSes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 16), Unsigned32().clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgMissingPktsToSes.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgMissingPktsToSes.setDescription('Number of missing packets detected (consecutive or not) within a 1 second window to cause a Severely Error Second (SES) to be counted.')
cpwCTDMCfgTimestampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("absolute", 2), ("differential", 3))).clone('absolute')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgTimestampMode.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgTimestampMode.setDescription('Timestamp generation MAY be used in one of the following modes: 1. Absolute mode: the PSN-bound IWF sets timestamps using the clock recovered from the incoming TDM attachment circuit. As a consequence, the timestamps are closely correlated with the sequence numbers. All TDM implementations that support usage of the RTP header MUST support this mode. 2. Differential mode: Both IWFs have access to a common high-quality timing source, and this source is used for timestamp generation. Support of this mode is OPTIONAL.')
cpwCTDMCfgStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 18), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgStorageType.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgStorageType.setDescription('This variable indicates the storage type for this row. The following are the read-write objects in permanent(4) rows, that an agent must allow to be writable: cpwCTDMCfgPayloadSize, cpwCTDMCfgPktReorder, cpwCTDMCfgRtpHdrUsed, cpwCTDMCfgJtrBfrDepth, cpwCTDMCfgPayloadSuppression, cpwCTDMCfgConfErr.')
cpwCTDMCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpwCTDMCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMCfgRowStatus.setDescription("The status of this conceptual row. To create a row in this table, a manager must set this object to either createAndGo(4) or createAndWait(5). All of the columnar objects have to be set to valid values before the row can be activated. Default value will be automatically provisioned if for those objects not specified during row creation. No objects in cascading tables have to be populated with related data before the row can be activated. The following objects cannot be modified if the RowStatus is active: cpwCTDMCfgPayloadSize, cpwCTDMCfgRtpHdrUsed, cpwCTDMCfgJtrBfrDepth, and cpwCTDMCfgPayloadSuppression. If the RowStatus is active, the following parameters can be modified: cpwCTDMCfgConfErr, cpwCTDMCfgPktReorder, cpwCTDMCfgConsecPktsInSynch, cpwCTDMCfgConsecMissPktsOutSynch, cpwCTDMCfgSetUp2SynchTimeOut, cpwCTDMCfgPktReplacePolicy, cpwCTDMCfgAvePktLossTimeWindow, cpwCTDMCfgExcessivePktLossThreshold, cpwCTDMCfgAlarmThreshold, cpwCTDMCfgClearAlarmThreshold, cpwCTDMCfgMissingPktsToSes, cpwCTDMCfgTimestampMode, cpwCTDMCfgStorageType. A row may be deleted by setting the RowStatus to 'destroy'.")
cpwCTDMPerfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5), )
if mibBuilder.loadTexts: cpwCTDMPerfCurrentTable.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentTable.setDescription('This table provides TDM PW performance information. This includes current 15 minute interval counts. The table includes counters that work together to integrate errors and the lack of errors on the TDM PW. An error is caused by a missing packet. Missing packet can be a result of, packet loss in the network, (uncorrectable) packet out of sequence, packet length error, jitter buffer overflow, and jitter buffer underflow. The result is declaring whether or not the TDM PW is in Loss of Packet (LOPS) state.')
cpwCTDMPerfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"))
if mibBuilder.loadTexts: cpwCTDMPerfCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentEntry.setDescription('An entry in this table is created by the agent for every cpwCTDMTable entry. After 15 minutes, the contents of this table entry are copied to a new entry in the cpwCTDMPerfInterval table and the counts in this entry are reset to zero.')
cpwCTDMPerfCurrentMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 1), PerfCurrentCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentMissingPkts.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
cpwCTDMPerfCurrentPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 2), PerfCurrentCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentPktsReOrder.setDescription('Number of packets detected out of sequence (via control word sequence number), but successfully re-ordered.')
cpwCTDMPerfCurrentJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
cpwCTDMPerfCurrentMisOrderDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 4), PerfCurrentCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentMisOrderDropped.setDescription('Number of packets detected out of order(via control word sequence numbers), and could not be re-ordered, or could not fit in the jitter buffer.')
cpwCTDMPerfCurrentMalformedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 5), PerfCurrentCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentMalformedPkt.setDescription("Number of packets detected with unexpected size, or bad headers' stack")
cpwCTDMPerfCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 6), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentESs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentESs.setDescription('The counter associated with the number of Error Seconds encountered. Any malformed packet, sequence error and similar are considered as error second')
cpwCTDMPerfCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 7), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentSESs.setDescription('The counter associated with the number of Severely Error Seconds encountered.')
cpwCTDMPerfCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 8), PerfCurrentCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered. Any consequtive five seconds of SES are counted as one UAS')
cpwCTDMPerfCurrentFC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 5, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfCurrentFC.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentFC.setDescription('This object represents the number of TDM failure events. A failure event begins when the LOPS failure is declared, and ends when the failure is cleared. A failure event that begins in one period and ends in another period is counted only in the period in which it begins.')
cpwCTDMPerfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6), )
if mibBuilder.loadTexts: cpwCTDMPerfIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalTable.setDescription('This table provides performance information per TDM PW similar to the cpwCTDMPerfCurrentTable above. However, these counts represent historical 15 minute intervals. Typically, this table will have a maximum of 96 entries for a 24 hour period, but is not limited to this.')
cpwCTDMPerfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"), (0, "CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalNumber"))
if mibBuilder.loadTexts: cpwCTDMPerfIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalEntry.setDescription('An entry in this table is created by the agent for every cpwCTDMPerfCurrentEntry that is 15 minutes old. The contents of the Current entry are copied to the new entry here. The Current entry, then resets its counts to zero for the next current 15 minute interval.')
cpwCTDMPerfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpwCTDMPerfIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalNumber.setDescription('This object indicates a number (normally between 1 and 96 to cover a 24 hour period) which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1. The minimum range of N is 1 through 4.The default range is 1 through 32. The maximum value of N is 1 through 96.')
cpwCTDMPerfIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
cpwCTDMPerfIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 3), Unsigned32().clone(900)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalDuration.setDescription("The duration of a particular interval in seconds. Adjustments in the system's time-of-day clock, may cause the interval to be greater or less than, the normal value. Therefore this actual interval value is provided.")
cpwCTDMPerfIntervalMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 4), PerfIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalMissingPkts.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
cpwCTDMPerfIntervalPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 5), PerfIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalPktsReOrder.setDescription('Number of packets detected out of sequence (via control word sequence number), but successfully re-ordered.')
cpwCTDMPerfIntervalJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
cpwCTDMPerfIntervalMisOrderDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 7), PerfIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalMisOrderDropped.setDescription('Number of packets detected out of order(via control word sequence numbers), and could not be re-ordered, or could not fit in the jitter buffer.')
cpwCTDMPerfIntervalMalformedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 8), PerfIntervalCount()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalMalformedPkt.setDescription("Number of packets detected with unexpected size, or bad headers' stack")
cpwCTDMPerfIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 9), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalESs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalESs.setDescription('The counter associated with the number of Error Seconds encountered.')
cpwCTDMPerfIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalSESs.setDescription('The counter associated with the number of Severely Error Seconds encountered.')
cpwCTDMPerfIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 11), PerfIntervalCount()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered.')
cpwCTDMPerfIntervalFC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 6, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerfIntervalFC.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalFC.setDescription('This object represents the number of TDM failure events. A failure event begins when the LOPS failure is declared, and ends when the failure is cleared. A failure event that begins in one period and ends in another period is counted only in the period in which it begins.')
cpwCTDMPerf1DayIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7), )
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalTable.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalTable.setDescription('This table provides performance information per TDM PW similar to the cpwCTDMPerfIntervalTable above. However, these counters represent historical 1 day intervals up to one full month. The table consists of real time data, as such it is not persistence across re-boot.')
cpwCTDMPerf1DayIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1), ).setIndexNames((0, "CISCO-IETF-PW-MIB", "cpwVcIndex"), (0, "CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalNumber"))
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalEntry.setDescription('An entry is created in this table by the agent for every entry in the cpwCTDMTable table.')
cpwCTDMPerf1DayIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalNumber.setDescription('The number of interval, where 1 indicates current day measured period and 2 and above indicate previous days respectively')
cpwCTDMPerf1DayIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
cpwCTDMPerf1DayIntervalDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 3), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalDuration.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalDuration.setDescription("The duration of a particular interval in seconds, Adjustments in the system's time-of-day clock, may cause the interval to be greater or less than, the normal value. Therefore this actual interval value is provided.")
cpwCTDMPerf1DayIntervalMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalMissingPkts.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalMissingPkts.setDescription('Number of missing packets (as detected via control word sequence number gaps).')
cpwCTDMPerf1DayIntervalPktsReOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalPktsReOrder.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalPktsReOrder.setDescription('Number of packets detected out of sequence (via control word sequence number), but successfully re-ordered.')
cpwCTDMPerf1DayIntervalJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalJtrBfrUnderruns.setDescription('Number of times a packet needed to be played out and the jitter buffer was empty.')
cpwCTDMPerf1DayIntervalMisOrderDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalMisOrderDropped.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalMisOrderDropped.setDescription('Number of packets detected out of order(via control word sequence numbers), and could not be re-ordered, or could not fit in the jitter buffer.')
cpwCTDMPerf1DayIntervalMalformedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalMalformedPkt.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalMalformedPkt.setDescription("Number of packets detected with unexpected size, or bad headers' stack.")
cpwCTDMPerf1DayIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 9), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalESs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalESs.setDescription('The counter associated with the number of Error Seconds encountered.')
cpwCTDMPerf1DayIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 10), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalSESs.setDescription('The counter associated with the number of Severely Error Seconds.')
cpwCTDMPerf1DayIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 11), Counter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalUASs.setDescription('The counter associated with the number of UnAvailable Seconds. When first entering the UAS state, the number of SES To UAS is added to this object, then as each additional UAS occurs, this object increments by one.')
cpwCTDMPerf1DayIntervalFC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 131, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalFC.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalFC.setDescription('This object represents the number of TDM failure events. A failure event begins when the LOPS failure is declared, and ends when the failure is cleared.')
cpwCTDMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 1))
cpwCTDMCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 2))
cpwTDMModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 2, 1)).setObjects(("CISCO-IETF-PW-TDM-MIB", "cpwCTDMGroup"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentGroup"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalGroup"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwTDMModuleCompliance = cpwTDMModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: cpwTDMModuleCompliance.setDescription('The compliance statement for agent that support TDM PW over PSN operation.')
cpwCTDMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 1, 1)).setObjects(("CISCO-IETF-PW-TDM-MIB", "cpwCTDMRate"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMIfIndex"), ("CISCO-IETF-PW-TDM-MIB", "cpwCGenTDMCfgIndex"), ("CISCO-IETF-PW-TDM-MIB", "cpwCRelTDMCfgIndex"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMConfigError"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMTimeElapsed"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMValidIntervals"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMValidDayIntervals"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCurrentIndications"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMLatchedIndications"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMLastEsTimeStamp"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgIndexNext"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgRowStatus"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgConfErr"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgPayloadSize"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgPktReorder"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgRtpHdrUsed"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgJtrBfrDepth"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgPayloadSuppression"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgConsecPktsInSynch"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgConsecMissPktsOutSynch"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgSetUp2SynchTimeOut"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgPktReplacePolicy"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgAvePktLossTimeWindow"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgExcessivePktLossThreshold"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgAlarmThreshold"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgClearAlarmThreshold"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgMissingPktsToSes"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgTimestampMode"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMCfgStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwCTDMGroup = cpwCTDMGroup.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMGroup.setDescription('Collection of objects for basic TDM PW config and status.')
cpwCTDMPerfCurrentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 1, 2)).setObjects(("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentMissingPkts"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentPktsReOrder"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentJtrBfrUnderruns"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentMisOrderDropped"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentMalformedPkt"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentESs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentSESs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentUASs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfCurrentFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwCTDMPerfCurrentGroup = cpwCTDMPerfCurrentGroup.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfCurrentGroup.setDescription('Collection of current statistics objects for TDM PWs.')
cpwCTDMPerfIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 1, 3)).setObjects(("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalValidData"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalDuration"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalMissingPkts"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalPktsReOrder"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalJtrBfrUnderruns"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalMisOrderDropped"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalMalformedPkt"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalESs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalSESs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalUASs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerfIntervalFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwCTDMPerfIntervalGroup = cpwCTDMPerfIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerfIntervalGroup.setDescription('Collection of Interval statistics objects for TDM PWs.')
cpwCTDMPerf1DayIntervalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 131, 2, 1, 4)).setObjects(("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalValidData"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalDuration"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalMissingPkts"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalPktsReOrder"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalJtrBfrUnderruns"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalMisOrderDropped"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalMalformedPkt"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalESs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalSESs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalUASs"), ("CISCO-IETF-PW-TDM-MIB", "cpwCTDMPerf1DayIntervalFC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpwCTDMPerf1DayIntervalGroup = cpwCTDMPerf1DayIntervalGroup.setStatus('current')
if mibBuilder.loadTexts: cpwCTDMPerf1DayIntervalGroup.setDescription('Collection of Daily statistics objects for TDM PWs.')
mibBuilder.exportSymbols("CISCO-IETF-PW-TDM-MIB", cpwCTDMIfIndex=cpwCTDMIfIndex, cpwCTDMCfgConfErr=cpwCTDMCfgConfErr, cpwCTDMPerfIntervalPktsReOrder=cpwCTDMPerfIntervalPktsReOrder, cpwTDMModuleCompliance=cpwTDMModuleCompliance, cpwCGenTDMCfgIndex=cpwCGenTDMCfgIndex, cpwCTDMPerfCurrentMalformedPkt=cpwCTDMPerfCurrentMalformedPkt, cpwCTDMPerf1DayIntervalGroup=cpwCTDMPerf1DayIntervalGroup, CpwTDMCfgIndex=CpwTDMCfgIndex, cpwCTDMCfgJtrBfrDepth=cpwCTDMCfgJtrBfrDepth, cpwCTDMEntry=cpwCTDMEntry, cpwCTDMPerf1DayIntervalPktsReOrder=cpwCTDMPerf1DayIntervalPktsReOrder, cpwCTDMCfgIndexNext=cpwCTDMCfgIndexNext, cpwCTDMPerfCurrentMissingPkts=cpwCTDMPerfCurrentMissingPkts, cpwCTDMPerf1DayIntervalJtrBfrUnderruns=cpwCTDMPerf1DayIntervalJtrBfrUnderruns, cpwCTDMCfgConsecPktsInSynch=cpwCTDMCfgConsecPktsInSynch, cpwCTDMCfgPktReorder=cpwCTDMCfgPktReorder, cpwCTDMPerf1DayIntervalNumber=cpwCTDMPerf1DayIntervalNumber, cpwCTDMPerf1DayIntervalFC=cpwCTDMPerf1DayIntervalFC, cpwCTDMCfgRtpHdrUsed=cpwCTDMCfgRtpHdrUsed, cpwCTDMPerfCurrentPktsReOrder=cpwCTDMPerfCurrentPktsReOrder, cpwCTDMPerfCurrentUASs=cpwCTDMPerfCurrentUASs, cpwCTDMPerfIntervalNumber=cpwCTDMPerfIntervalNumber, PYSNMP_MODULE_ID=cpwCTDMMIB, cpwCTDMPerfCurrentFC=cpwCTDMPerfCurrentFC, cpwCTDMCfgRowStatus=cpwCTDMCfgRowStatus, cpwCTDMPerfIntervalMissingPkts=cpwCTDMPerfIntervalMissingPkts, cpwCTDMCfgTable=cpwCTDMCfgTable, cpwCTDMConfigError=cpwCTDMConfigError, cpwCTDMMIB=cpwCTDMMIB, cpwCTDMPerf1DayIntervalDuration=cpwCTDMPerf1DayIntervalDuration, cpwCTDMTable=cpwCTDMTable, cpwCTDMCfgEntry=cpwCTDMCfgEntry, cpwCTDMCfgConsecMissPktsOutSynch=cpwCTDMCfgConsecMissPktsOutSynch, cpwCTDMPerf1DayIntervalUASs=cpwCTDMPerf1DayIntervalUASs, cpwCTDMCfgTimestampMode=cpwCTDMCfgTimestampMode, cpwCTDMObjects=cpwCTDMObjects, cpwCTDMCfgStorageType=cpwCTDMCfgStorageType, cpwCTDMGroup=cpwCTDMGroup, cpwCTDMPerfCurrentGroup=cpwCTDMPerfCurrentGroup, cpwCTDMCfgPktReplacePolicy=cpwCTDMCfgPktReplacePolicy, cpwCTDMPerfCurrentSESs=cpwCTDMPerfCurrentSESs, cpwCTDMValidDayIntervals=cpwCTDMValidDayIntervals, cpwCTDMPerfCurrentMisOrderDropped=cpwCTDMPerfCurrentMisOrderDropped, cpwCTDMConformance=cpwCTDMConformance, cpwCTDMGroups=cpwCTDMGroups, cpwCTDMPerfIntervalSESs=cpwCTDMPerfIntervalSESs, cpwCTDMPerfIntervalDuration=cpwCTDMPerfIntervalDuration, cpwCTDMPerfIntervalMisOrderDropped=cpwCTDMPerfIntervalMisOrderDropped, cpwCTDMPerfIntervalESs=cpwCTDMPerfIntervalESs, cpwCTDMPerf1DayIntervalSESs=cpwCTDMPerf1DayIntervalSESs, cpwCTDMCfgAlarmThreshold=cpwCTDMCfgAlarmThreshold, cpwCRelTDMCfgIndex=cpwCRelTDMCfgIndex, cpwCTDMCfgPayloadSize=cpwCTDMCfgPayloadSize, cpwCTDMPerfIntervalEntry=cpwCTDMPerfIntervalEntry, cpwCTDMCfgMissingPktsToSes=cpwCTDMCfgMissingPktsToSes, cpwCTDMCfgAvePktLossTimeWindow=cpwCTDMCfgAvePktLossTimeWindow, cpwCTDMPerfIntervalUASs=cpwCTDMPerfIntervalUASs, cpwCTDMPerfIntervalValidData=cpwCTDMPerfIntervalValidData, cpwCTDMNotifications=cpwCTDMNotifications, cpwCTDMPerfIntervalMalformedPkt=cpwCTDMPerfIntervalMalformedPkt, cpwCTDMPerf1DayIntervalValidData=cpwCTDMPerf1DayIntervalValidData, cpwCTDMPerf1DayIntervalMissingPkts=cpwCTDMPerf1DayIntervalMissingPkts, cpwCTDMPerf1DayIntervalMisOrderDropped=cpwCTDMPerf1DayIntervalMisOrderDropped, cpwCTDMPerfIntervalFC=cpwCTDMPerfIntervalFC, cpwCTDMPerf1DayIntervalESs=cpwCTDMPerf1DayIntervalESs, cpwCTDMCfgIndex=cpwCTDMCfgIndex, cpwCTDMCompliances=cpwCTDMCompliances, cpwCTDMRate=cpwCTDMRate, cpwCTDMPerfIntervalJtrBfrUnderruns=cpwCTDMPerfIntervalJtrBfrUnderruns, cpwCTDMLatchedIndications=cpwCTDMLatchedIndications, cpwCTDMPerf1DayIntervalMalformedPkt=cpwCTDMPerf1DayIntervalMalformedPkt, cpwCTDMPerfIntervalTable=cpwCTDMPerfIntervalTable, cpwCTDMCfgPayloadSuppression=cpwCTDMCfgPayloadSuppression, cpwCTDMLastEsTimeStamp=cpwCTDMLastEsTimeStamp, cpwCTDMPerf1DayIntervalEntry=cpwCTDMPerf1DayIntervalEntry, cpwCTDMPerfIntervalGroup=cpwCTDMPerfIntervalGroup, cpwCTDMValidIntervals=cpwCTDMValidIntervals, cpwCTDMPerfCurrentTable=cpwCTDMPerfCurrentTable, cpwCTDMTimeElapsed=cpwCTDMTimeElapsed, cpwCTDMPerfCurrentJtrBfrUnderruns=cpwCTDMPerfCurrentJtrBfrUnderruns, cpwCTDMPerfCurrentEntry=cpwCTDMPerfCurrentEntry, cpwCTDMCfgExcessivePktLossThreshold=cpwCTDMCfgExcessivePktLossThreshold, cpwCTDMCfgClearAlarmThreshold=cpwCTDMCfgClearAlarmThreshold, cpwCTDMPerfCurrentESs=cpwCTDMPerfCurrentESs, cpwCTDMPerf1DayIntervalTable=cpwCTDMPerf1DayIntervalTable, cpwCTDMCfgSetUp2SynchTimeOut=cpwCTDMCfgSetUp2SynchTimeOut, cpwCTDMCurrentIndications=cpwCTDMCurrentIndications)
