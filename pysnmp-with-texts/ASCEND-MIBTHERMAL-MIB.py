#
# PySNMP MIB module ASCEND-MIBTHERMAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBTHERMAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:28:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, TimeTicks, iso, Integer32, ObjectIdentity, Counter64, Gauge32, Unsigned32, ModuleIdentity, Bits, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "TimeTicks", "iso", "Integer32", "ObjectIdentity", "Counter64", "Gauge32", "Unsigned32", "ModuleIdentity", "Bits", "NotificationType", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

mibthermalProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 129))
mibthermalProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 129, 1), )
if mibBuilder.loadTexts: mibthermalProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: mibthermalProfileTable.setDescription('A list of mibthermalProfile profile entries.')
mibthermalProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1), ).setIndexNames((0, "ASCEND-MIBTHERMAL-MIB", "thermalProfile-Index-o"))
if mibBuilder.loadTexts: mibthermalProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mibthermalProfileEntry.setDescription('A mibthermalProfile entry containing objects that maps to the parameters of mibthermalProfile profile.')
thermalProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 1), Integer32()).setLabel("thermalProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: thermalProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_Index_o.setDescription('')
thermalProfile_FantrayLownoiseRpm = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 2), Integer32()).setLabel("thermalProfile-FantrayLownoiseRpm").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_FantrayLownoiseRpm.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_FantrayLownoiseRpm.setDescription('RPM of the fantray in Low-Noise mode')
thermalProfile_OperationMode = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fullSpeedOnly", 1), ("lowNoiseSpeedOnly", 2), ("autoRegulation", 3)))).setLabel("thermalProfile-OperationMode").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_OperationMode.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_OperationMode.setDescription('Operation mode of the fantray')
thermalProfile_LowTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 4), Integer32()).setLabel("thermalProfile-LowTemperatureThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_LowTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_LowTemperatureThreshold.setDescription('Low shelf-controller temperature trigger level (in Celsius). When operation-mode = auto-regulation and the temperature falls below this value, the fans return to low-noise mode')
thermalProfile_HighTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 5), Integer32()).setLabel("thermalProfile-HighTemperatureThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_HighTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_HighTemperatureThreshold.setDescription('High shelf-controller temperature trigger level (in Celsius). When operation-mode = auto-regulation and this temperature is exceeded, the fans switch to full speed')
thermalProfile_AlarmTemperatureTrigger = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 6), Integer32()).setLabel("thermalProfile-AlarmTemperatureTrigger").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_AlarmTemperatureTrigger.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_AlarmTemperatureTrigger.setDescription('Temperature that if exceeded, will trigger an ALARM state (in Celsius)')
thermalProfile_BottomLowTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 8), Integer32()).setLabel("thermalProfile-BottomLowTemperatureThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_BottomLowTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_BottomLowTemperatureThreshold.setDescription('Bottom thermal sensor low temperature trigger level (in Celsius). When temperature falls below this value, trigger ALARM state')
thermalProfile_BottomHighTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 9), Integer32()).setLabel("thermalProfile-BottomHighTemperatureThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_BottomHighTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_BottomHighTemperatureThreshold.setDescription('Bottom thermal sensor high temperature trigger level (in Celsius). When this temperature is exceeded, trigger ALARM state')
thermalProfile_TopLowTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 10), Integer32()).setLabel("thermalProfile-TopLowTemperatureThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_TopLowTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_TopLowTemperatureThreshold.setDescription('Top thermal sensor low temperature trigger level (in Celsius). When temperature falls below this value, trigger ALARM state')
thermalProfile_TopHighTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 11), Integer32()).setLabel("thermalProfile-TopHighTemperatureThreshold").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_TopHighTemperatureThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_TopHighTemperatureThreshold.setDescription('Top thermal sensor high temperature trigger level (in Celsius). When this temperature is exceeded, trigger ALARM state')
thermalProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 129, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("thermalProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: thermalProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: thermalProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBTHERMAL-MIB", thermalProfile_FantrayLownoiseRpm=thermalProfile_FantrayLownoiseRpm, mibthermalProfileEntry=mibthermalProfileEntry, thermalProfile_BottomHighTemperatureThreshold=thermalProfile_BottomHighTemperatureThreshold, thermalProfile_HighTemperatureThreshold=thermalProfile_HighTemperatureThreshold, thermalProfile_TopHighTemperatureThreshold=thermalProfile_TopHighTemperatureThreshold, thermalProfile_Index_o=thermalProfile_Index_o, thermalProfile_LowTemperatureThreshold=thermalProfile_LowTemperatureThreshold, thermalProfile_AlarmTemperatureTrigger=thermalProfile_AlarmTemperatureTrigger, thermalProfile_Action_o=thermalProfile_Action_o, mibthermalProfileTable=mibthermalProfileTable, thermalProfile_TopLowTemperatureThreshold=thermalProfile_TopLowTemperatureThreshold, mibthermalProfile=mibthermalProfile, thermalProfile_BottomLowTemperatureThreshold=thermalProfile_BottomLowTemperatureThreshold, thermalProfile_OperationMode=thermalProfile_OperationMode, DisplayString=DisplayString)
