#
# PySNMP MIB module CISCO-WAN-FR-SIGNALING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-FR-SIGNALING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
frPortCntSig, frPortCnfSig = mibBuilder.importSymbols("BASIS-MIB", "frPortCntSig", "frPortCnfSig")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Gauge32, ObjectIdentity, Counter32, ModuleIdentity, Counter64, MibIdentifier, TimeTicks, NotificationType, Unsigned32, Bits, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "ObjectIdentity", "Counter32", "ModuleIdentity", "Counter64", "MibIdentifier", "TimeTicks", "NotificationType", "Unsigned32", "Bits", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanFrSignalingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 46))
ciscoWanFrSignalingMIB.setRevisions(('2003-03-24 00:00', '2002-09-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanFrSignalingMIB.setRevisionsDescriptions(('Added portLmiSigConfMethod mib object to support LMI Autosense feature', 'Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanFrSignalingMIB.setLastUpdated('200303240000Z')
if mibBuilder.loadTexts: ciscoWanFrSignalingMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanFrSignalingMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanFrSignalingMIB.setDescription("The MIB module to configure LMI and CLLM on a frame relay ports. This mib module also contains objects to represent LMI and CLLM statistics information. The frame relay logical port is referred to as 'frame relay port' in this mib. The 'logical port' refers to frame relay port. LMI : Local Management Interface. The Frame Relay LMI is a set of enhancements to the basic Frame Relay Specification. The Key Frame Relay LMI extensions include global addressing, virtual circuit status messages and multicasting. The LMI includes support for a keepalive mechanism, which verifies that data is flowing, and a status mechanism, which provides an on-going status report on the DLCIs known to the switch. The LMI Global Addressing extension gives Frame Relay DLCI values global rather than local significance. The global addressing extension adds functionality and manageability to Frame Relay internetworks. The LMI virtual circuit messages provide communication and synchronization between Frame Relay DTE and DCE devices. These messages are periodically report on the status of PVCs, which prevents data from being sent into black holes(that, over PVCs that no longer exist). LMI UNI signaling enables subscribers to find out about the PVC status of the network, thus inhibiting the use of an unavailable PVC and supplies procedures for detecting and modifying following events: * deletion of a PVC * addition of a PVC * availability of a configured PVC * unavailability of a configured PVC * error due to LMI message sequencing ELMI : Enhanced LMI ELMI allows the router to learn QoS(Quality of Service) parameters from the switch and use them for traffic shaping, configuration or management purposes. CLLM : Consolidated Link Layer Management. The CLLM is an out-of-band mechanism to transport congestion-related information to the far end. The CLLM enables the Frame Relay network to more efficiently relay congestion notifications to the DTE(router). The CLLM congestion notification is sent on the reserved data link connection identifier(DLCI) 1023. Frame Forwarding Port: Frame Forwarding Ports are identified by portType = frame-forward(3). The signaling parameters are not applicable to these ports.")
frPortCnfSigLMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1))
frPortCnfSigLMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1), )
if mibBuilder.loadTexts: frPortCnfSigLMIGrpTable.setStatus('current')
if mibBuilder.loadTexts: frPortCnfSigLMIGrpTable.setDescription('This table is for configuration of singaling(LMI) on frame relay ports.')
frPortCnfSigLMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-SIGNALING-MIB", "lmiCnfPortNum"))
if mibBuilder.loadTexts: frPortCnfSigLMIGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frPortCnfSigLMIGrpEntry.setDescription('An entry for each frame relay port. The entries are applicable only for following ports: portType = frame-relay(1), portType = frFUNI(2). This table is not applicable for Frame Forwarding ports,i.e portType = frame-forward(3).')
lmiCnfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiCnfPortNum.setReference('portNum object in CISCO-WAN-FR-PORT-MIB.my')
if mibBuilder.loadTexts: lmiCnfPortNum.setStatus('current')
if mibBuilder.loadTexts: lmiCnfPortNum.setDescription("The value of this object identifies the frame relay port. The value of this object must be same as the value of 'portNum' from frPortCnfPortGrpTable. The Frame Forwarding Port value is not valid for this object.")
signallingProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("noSignalling", 2), ("strataLMI", 3), ("annexAUNI", 4), ("annexDUNI", 5), ("annexANNI", 6), ("annexDNNI", 7))).clone('noSignalling')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: signallingProtocolType.setReference('ANSI T1.617 Annex D, ITU Q.933 Annex A.')
if mibBuilder.loadTexts: signallingProtocolType.setStatus('current')
if mibBuilder.loadTexts: signallingProtocolType.setDescription('The value of this object is used for configuring the LMI signaling protocol type. 1 - other. Not a valid value for SET request. 2 - noSignalling 3 - strataLMI 4 - annexAUNI 5 - annexDUNI 6 - annexANNI 7 - annexDNNI The ports with portType = frame-forward(3) can be set to noSingalling(2) only. The value strataLMI(3) is not supported for portHeaderLen = fourOctets(2).')
asynchronousUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("fsenable", 3), ("updfsenable", 4))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: asynchronousUpdates.setStatus('current')
if mibBuilder.loadTexts: asynchronousUpdates.setDescription('This object is used for configuring asynchronous updates. The possible values are : disable(1) : disable Asynchronous Status Updates & Unsolicited Full Status enable(2) : enable Asynchronous Status Updates fsenable(3) : enable Unsolicited Full Status updfsenable(4) : enable Asynchronous Status Updates & Unsolicited Full Status.')
t391LinkIntegrityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t391LinkIntegrityTimer.setStatus('current')
if mibBuilder.loadTexts: t391LinkIntegrityTimer.setDescription('The value of this object identifies the desired User-side T391 link integrity verification polling timer value for this UNI/NNI logical port.')
t392PollingVerificationTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: t392PollingVerificationTimer.setStatus('current')
if mibBuilder.loadTexts: t392PollingVerificationTimer.setDescription('The value of this object identifies the desired Network-side T392 polling verification timer value (nT2 for LMI) for this UNI/NNI logical port. This is the length of time the network should wait between Status Inquiry Messages.')
n391FullStatusPollingCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setUnits('Polls').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n391FullStatusPollingCounter.setReference('Q.933 Annex A [22], T1.617 Annex D [17]')
if mibBuilder.loadTexts: n391FullStatusPollingCounter.setStatus('current')
if mibBuilder.loadTexts: n391FullStatusPollingCounter.setDescription('The value of this object identifies the User-Side 391 full status polling cycle value for this UNI/NNI logical port.')
n392ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: n392ErrorThreshold.setReference('Q.933 Annex A [22], T1.617 Annex D [17]')
if mibBuilder.loadTexts: n392ErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: n392ErrorThreshold.setDescription('The value of this object identifies the desired User-side/Network-side N392 error threshold value for this UNI/NNI logical port.')
n393MonitoredEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setUnits('Events').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n393MonitoredEventCount.setReference('Q.933 Annex A [22], T1.617 Annex D [17]')
if mibBuilder.loadTexts: n393MonitoredEventCount.setStatus('current')
if mibBuilder.loadTexts: n393MonitoredEventCount.setDescription('The value of this object identifies the desired User-side/Network-side N393 monitored events count value for this UNI/NNI logical port.')
enhancedLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enhancedLmi.setStatus('current')
if mibBuilder.loadTexts: enhancedLmi.setDescription('This object enables/disables the Enhanced LMI (ELMI) on the frame relay port.')
portFRF1Dot2Support = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFRF1Dot2Support.setReference('FRF 1.2')
if mibBuilder.loadTexts: portFRF1Dot2Support.setStatus('current')
if mibBuilder.loadTexts: portFRF1Dot2Support.setDescription('This object enables/disables the FRF 1.2 feature. This object is added for FRSM12. This object is not applicable to MGX Release 1.x ')
portLmiSigConfMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("autosense", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portLmiSigConfMethod.setStatus('current')
if mibBuilder.loadTexts: portLmiSigConfMethod.setDescription(' This object enables/disables the port LMI signalling autosense. Setting this object to autosense(2) enables the port to autodetect and configure port LMI signalling type. signallingProtocolType mib should be set to noSignalling while this object is being set to autosense(2). If signallingProtocolType mib is set to a value other than noSignalling while this object is being set to autosense(2), the set request fails. When this object is set to manual(1), user needs to manually configure the port LMI signalling type using the signallingProtocolType mib. signallingProtocolType can be configured to any valid value including noSignalling when this object is set to manual(1). ')
frPortCntSigLMIGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1))
frPortCntSigLMIGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1), )
if mibBuilder.loadTexts: frPortCntSigLMIGrpTable.setStatus('current')
if mibBuilder.loadTexts: frPortCntSigLMIGrpTable.setDescription('This table contains the LMI statistics of frame relay ports.')
frPortCntSigLMIGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-SIGNALING-MIB", "lmiSigPortNum"))
if mibBuilder.loadTexts: frPortCntSigLMIGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frPortCntSigLMIGrpEntry.setDescription('An entry for each frame relay port. Each entry identifies the LMI statistics supported on a frame relay port. The entries are applicable only for following ports: portType = frame-relay(1), portType = frFUNI(2). This table is not applicable for Frame Forwarding ports,i.e portType = frame-forward(3).')
lmiSigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lmiSigPortNum.setReference('portNum object in CISCO-WAN-FR-PORT-MIB.my')
if mibBuilder.loadTexts: lmiSigPortNum.setStatus('current')
if mibBuilder.loadTexts: lmiSigPortNum.setDescription("The value of this object refers to the frame relay port. The value for this object must be same as the 'portNum' object defined in frPortCnfPortGrpTable. The frame forwarding port value is not valid for this object.")
rcvStatusInquiry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvStatusInquiry.setStatus('current')
if mibBuilder.loadTexts: rcvStatusInquiry.setDescription('The number of Status Inquiry messages received.')
rcvInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: rcvInvalidRequest.setDescription('The number of Invalid Request messages received.')
rcvUNISeqMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvUNISeqMismatch.setStatus('current')
if mibBuilder.loadTexts: rcvUNISeqMismatch.setDescription('The number of times UNI messages with sequence number mismatches were received.')
xmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtStatus.setStatus('current')
if mibBuilder.loadTexts: xmtStatus.setDescription('The number of times Status response messages transmitted.')
xmtAsynchUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtAsynchUpdate.setStatus('current')
if mibBuilder.loadTexts: xmtAsynchUpdate.setDescription('The number of times Asynch Status messages transmitted.')
uniSignalingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSignalingTimeout.setStatus('current')
if mibBuilder.loadTexts: uniSignalingTimeout.setDescription('The number of times UNI Status requests were not received.')
xmtStatusInquiry = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtStatusInquiry.setStatus('current')
if mibBuilder.loadTexts: xmtStatusInquiry.setDescription('The number of Status Inquiry messages transmitted.')
rcvStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvStatus.setStatus('current')
if mibBuilder.loadTexts: rcvStatus.setDescription('The number of times Status response messages received.')
rcvAsynchUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvAsynchUpdate.setStatus('current')
if mibBuilder.loadTexts: rcvAsynchUpdate.setDescription('The number of times Asynch Status messages received ')
rcvNNISeqMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvNNISeqMismatch.setStatus('current')
if mibBuilder.loadTexts: rcvNNISeqMismatch.setDescription('The number of times NNI messages with sequence number mismatches were received.')
nniSignalingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 1, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nniSignalingTimeout.setStatus('current')
if mibBuilder.loadTexts: nniSignalingTimeout.setDescription('The number of times NNI Status requests were not received.')
frPortCnfSigCLLMGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2))
frPortCnfSigCLLMGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: frPortCnfSigCLLMGrpTable.setStatus('current')
if mibBuilder.loadTexts: frPortCnfSigCLLMGrpTable.setDescription('This table is configuring the CLLM on frame relay ports. This table is not applicable for Frame Forwarding ports.')
frPortCnfSigCLLMGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-SIGNALING-MIB", "cllmCnfPortNum"))
if mibBuilder.loadTexts: frPortCnfSigCLLMGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frPortCnfSigCLLMGrpEntry.setDescription('An entry for each frame relay port. The entries are applicable only for following ports: portType = frame-relay(1), portType = frFUNI(2). This table is not applicable for Frame Forwarding ports,i.e portType = frame-forward(3).')
cllmCnfPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cllmCnfPortNum.setReference('portNum object in CISCO-WAN-FR-PORT-MIB.my')
if mibBuilder.loadTexts: cllmCnfPortNum.setStatus('current')
if mibBuilder.loadTexts: cllmCnfPortNum.setDescription("The value of this object identifies the frame relay port. The value of this object must be same as the value of 'portNum' from frPortCnfPortGrpTable. The Frame Forwarding Port value is not valid for this object.")
cllmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cllmEnable.setStatus('current')
if mibBuilder.loadTexts: cllmEnable.setDescription("This object is used for enabling/disabling CLLM on frame relay port. When set to 'disabled', CLLM is disabled. When set to 'enabled', CLLM is enabled.")
xmtCLLMStatusTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 5000)).clone(40)).setUnits('milli-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: xmtCLLMStatusTimer.setStatus('current')
if mibBuilder.loadTexts: xmtCLLMStatusTimer.setDescription('Interval in milliseconds for CLLM to send CLLM updates.')
rcvCLLMStatusTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1000))).clone(namedValues=NamedValues(("rcvCLLMTimerValue", 1000))).clone('rcvCLLMTimerValue')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvCLLMStatusTimer.setStatus('current')
if mibBuilder.loadTexts: rcvCLLMStatusTimer.setDescription('Timeout value for receiving CLLM updates.')
frPortCntSigCLLMGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2))
frPortCntSigCLLMGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1), )
if mibBuilder.loadTexts: frPortCntSigCLLMGrpTable.setStatus('current')
if mibBuilder.loadTexts: frPortCntSigCLLMGrpTable.setDescription('This table is for CLLM statistics for frame relay ports.')
frPortCntSigCLLMGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1), ).setIndexNames((0, "CISCO-WAN-FR-SIGNALING-MIB", "cllmSigPortNum"))
if mibBuilder.loadTexts: frPortCntSigCLLMGrpEntry.setStatus('current')
if mibBuilder.loadTexts: frPortCntSigCLLMGrpEntry.setDescription(' An entry for frame relay port. The entries are applicable only for following ports: portType = frame-relay(1), portType = frFUNI(2). This table is not applicable for Frame Forwarding ports,i.e portType = frame-forward(3).')
cllmSigPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cllmSigPortNum.setReference('portNum object in CISCO-WAN-FR-PORT-MIB.my')
if mibBuilder.loadTexts: cllmSigPortNum.setStatus('current')
if mibBuilder.loadTexts: cllmSigPortNum.setDescription("The value of this object identifies the frame relay port. The value of this object must be same as the value of 'portNum' from frPortCnfPortGrpTable. The Frame Forwarding Port value is not valid for this object.")
rcvFramesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 2), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvFramesCLLM.setStatus('current')
if mibBuilder.loadTexts: rcvFramesCLLM.setDescription('The number of CLLM frames received.')
rcvBytesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: rcvBytesCLLM.setStatus('current')
if mibBuilder.loadTexts: rcvBytesCLLM.setDescription('The number of CLLM bytes received.')
xmtFramesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 4), Counter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtFramesCLLM.setStatus('current')
if mibBuilder.loadTexts: xmtFramesCLLM.setDescription('The number of CLLM frames transmitted.')
xmtBytesCLLM = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 5), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: xmtBytesCLLM.setStatus('current')
if mibBuilder.loadTexts: xmtBytesCLLM.setDescription('The number of CLLM bytes transmitted.')
cllmFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 1, 1, 2, 2, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cllmFailures.setStatus('current')
if mibBuilder.loadTexts: cllmFailures.setDescription('The number of times an expected CLLM message was not received.')
cwfSignalingMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 46, 2))
cwfSignalingMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 1))
cwfSignalingMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 2))
cwfSignalingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 2, 1)).setObjects(("CISCO-WAN-FR-SIGNALING-MIB", "ciscoWanFrLmiConfigGroup"), ("CISCO-WAN-FR-SIGNALING-MIB", "ciscoWanFrLmiStatsGroup"), ("CISCO-WAN-FR-SIGNALING-MIB", "ciscoWanFrCllmGroup"), ("CISCO-WAN-FR-SIGNALING-MIB", "ciscoWanFrCllmStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cwfSignalingMIBCompliance = cwfSignalingMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: cwfSignalingMIBCompliance.setDescription('The compliance statement for SNMP entities which have network interfaces.')
ciscoWanFrLmiConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 1, 1)).setObjects(("CISCO-WAN-FR-SIGNALING-MIB", "lmiCnfPortNum"), ("CISCO-WAN-FR-SIGNALING-MIB", "signallingProtocolType"), ("CISCO-WAN-FR-SIGNALING-MIB", "asynchronousUpdates"), ("CISCO-WAN-FR-SIGNALING-MIB", "t391LinkIntegrityTimer"), ("CISCO-WAN-FR-SIGNALING-MIB", "t392PollingVerificationTimer"), ("CISCO-WAN-FR-SIGNALING-MIB", "n391FullStatusPollingCounter"), ("CISCO-WAN-FR-SIGNALING-MIB", "n392ErrorThreshold"), ("CISCO-WAN-FR-SIGNALING-MIB", "n393MonitoredEventCount"), ("CISCO-WAN-FR-SIGNALING-MIB", "enhancedLmi"), ("CISCO-WAN-FR-SIGNALING-MIB", "portFRF1Dot2Support"), ("CISCO-WAN-FR-SIGNALING-MIB", "portLmiSigConfMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrLmiConfigGroup = ciscoWanFrLmiConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrLmiConfigGroup.setDescription('A collection of objects providing information applicable to Frame Relay Logical Ports (Frame Relay Ports).')
ciscoWanFrLmiStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 1, 2)).setObjects(("CISCO-WAN-FR-SIGNALING-MIB", "lmiSigPortNum"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvStatusInquiry"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvInvalidRequest"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvUNISeqMismatch"), ("CISCO-WAN-FR-SIGNALING-MIB", "xmtStatus"), ("CISCO-WAN-FR-SIGNALING-MIB", "xmtAsynchUpdate"), ("CISCO-WAN-FR-SIGNALING-MIB", "uniSignalingTimeout"), ("CISCO-WAN-FR-SIGNALING-MIB", "xmtStatusInquiry"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvStatus"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvAsynchUpdate"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvNNISeqMismatch"), ("CISCO-WAN-FR-SIGNALING-MIB", "nniSignalingTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrLmiStatsGroup = ciscoWanFrLmiStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrLmiStatsGroup.setDescription('A collection of objects providing information applicable to LMI statistics on Frame Relay Ports.')
ciscoWanFrCllmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 1, 3)).setObjects(("CISCO-WAN-FR-SIGNALING-MIB", "cllmCnfPortNum"), ("CISCO-WAN-FR-SIGNALING-MIB", "cllmEnable"), ("CISCO-WAN-FR-SIGNALING-MIB", "xmtCLLMStatusTimer"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvCLLMStatusTimer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrCllmGroup = ciscoWanFrCllmGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrCllmGroup.setDescription('A collection of objects providing information on CLLM applicable to Frame Relay Ports.')
ciscoWanFrCllmStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 46, 2, 1, 4)).setObjects(("CISCO-WAN-FR-SIGNALING-MIB", "cllmSigPortNum"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvFramesCLLM"), ("CISCO-WAN-FR-SIGNALING-MIB", "rcvBytesCLLM"), ("CISCO-WAN-FR-SIGNALING-MIB", "xmtFramesCLLM"), ("CISCO-WAN-FR-SIGNALING-MIB", "xmtBytesCLLM"), ("CISCO-WAN-FR-SIGNALING-MIB", "cllmFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanFrCllmStatsGroup = ciscoWanFrCllmStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanFrCllmStatsGroup.setDescription('A collection of objects providing information applicable to CLLMI statistics on Frame Relay Ports.')
mibBuilder.exportSymbols("CISCO-WAN-FR-SIGNALING-MIB", portFRF1Dot2Support=portFRF1Dot2Support, frPortCntSigCLLMGrpEntry=frPortCntSigCLLMGrpEntry, rcvUNISeqMismatch=rcvUNISeqMismatch, xmtStatus=xmtStatus, PYSNMP_MODULE_ID=ciscoWanFrSignalingMIB, rcvStatus=rcvStatus, cwfSignalingMIBGroups=cwfSignalingMIBGroups, rcvInvalidRequest=rcvInvalidRequest, frPortCnfSigCLLMGrpTable=frPortCnfSigCLLMGrpTable, frPortCntSigCLLMGrp=frPortCntSigCLLMGrp, portLmiSigConfMethod=portLmiSigConfMethod, n391FullStatusPollingCounter=n391FullStatusPollingCounter, frPortCnfSigCLLMGrp=frPortCnfSigCLLMGrp, xmtBytesCLLM=xmtBytesCLLM, lmiCnfPortNum=lmiCnfPortNum, frPortCnfSigLMIGrpEntry=frPortCnfSigLMIGrpEntry, cllmCnfPortNum=cllmCnfPortNum, enhancedLmi=enhancedLmi, frPortCnfSigCLLMGrpEntry=frPortCnfSigCLLMGrpEntry, asynchronousUpdates=asynchronousUpdates, cwfSignalingMIBConformance=cwfSignalingMIBConformance, cwfSignalingMIBCompliance=cwfSignalingMIBCompliance, rcvBytesCLLM=rcvBytesCLLM, t391LinkIntegrityTimer=t391LinkIntegrityTimer, frPortCnfSigLMIGrpTable=frPortCnfSigLMIGrpTable, rcvStatusInquiry=rcvStatusInquiry, ciscoWanFrCllmStatsGroup=ciscoWanFrCllmStatsGroup, frPortCntSigCLLMGrpTable=frPortCntSigCLLMGrpTable, ciscoWanFrCllmGroup=ciscoWanFrCllmGroup, cllmSigPortNum=cllmSigPortNum, uniSignalingTimeout=uniSignalingTimeout, frPortCntSigLMIGrpEntry=frPortCntSigLMIGrpEntry, t392PollingVerificationTimer=t392PollingVerificationTimer, n393MonitoredEventCount=n393MonitoredEventCount, ciscoWanFrLmiStatsGroup=ciscoWanFrLmiStatsGroup, nniSignalingTimeout=nniSignalingTimeout, signallingProtocolType=signallingProtocolType, frPortCntSigLMIGrp=frPortCntSigLMIGrp, xmtCLLMStatusTimer=xmtCLLMStatusTimer, rcvCLLMStatusTimer=rcvCLLMStatusTimer, xmtStatusInquiry=xmtStatusInquiry, rcvNNISeqMismatch=rcvNNISeqMismatch, xmtFramesCLLM=xmtFramesCLLM, ciscoWanFrSignalingMIB=ciscoWanFrSignalingMIB, n392ErrorThreshold=n392ErrorThreshold, ciscoWanFrLmiConfigGroup=ciscoWanFrLmiConfigGroup, xmtAsynchUpdate=xmtAsynchUpdate, rcvFramesCLLM=rcvFramesCLLM, cllmEnable=cllmEnable, frPortCnfSigLMIGrp=frPortCnfSigLMIGrp, frPortCntSigLMIGrpTable=frPortCntSigLMIGrpTable, lmiSigPortNum=lmiSigPortNum, cwfSignalingMIBCompliances=cwfSignalingMIBCompliances, rcvAsynchUpdate=rcvAsynchUpdate, cllmFailures=cllmFailures)
