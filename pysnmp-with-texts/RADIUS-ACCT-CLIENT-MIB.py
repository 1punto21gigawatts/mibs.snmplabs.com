#
# PySNMP MIB module RADIUS-ACCT-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADIUS-ACCT-CLIENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InetAddressType, InetAddress, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetPortNumber")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Gauge32, TimeTicks, Counter64, Bits, IpAddress, Counter32, Unsigned32, NotificationType, mib_2, MibIdentifier, iso, Integer32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Gauge32", "TimeTicks", "Counter64", "Bits", "IpAddress", "Counter32", "Unsigned32", "NotificationType", "mib-2", "MibIdentifier", "iso", "Integer32", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
radiusAccClientMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 67, 2, 2))
radiusAccClientMIB.setRevisions(('2006-05-10 00:00', '1999-06-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: radiusAccClientMIB.setRevisionsDescriptions(('Revised version as published in RFC xxxx. This version obsoletes that of RFC 2620 by deprecating the MIB table containing IPv4-only address formats and defining a new table to add support for version neutral IP address formats. The remaining MIB objects from RFC 2620 are carried forward into this version.', 'Initial version as published in RFC 2620.',))
if mibBuilder.loadTexts: radiusAccClientMIB.setLastUpdated('200605100000Z')
if mibBuilder.loadTexts: radiusAccClientMIB.setOrganization('IETF RADIUS Extensions Working Group.')
if mibBuilder.loadTexts: radiusAccClientMIB.setContactInfo(' Bernard Aboba Microsoft One Microsoft Way Redmond, WA 98052 US Phone: +1 425 936 6605 EMail: bernarda@microsoft.com')
if mibBuilder.loadTexts: radiusAccClientMIB.setDescription('The MIB module for entities implementing the client side of the Remote Authentication Dial-In User Service (RADIUS) accounting protocol.Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC xxxx; see the RFC itself for full legal notices.')
radiusMIB = ObjectIdentity((1, 3, 6, 1, 2, 1, 67))
if mibBuilder.loadTexts: radiusMIB.setStatus('current')
if mibBuilder.loadTexts: radiusMIB.setDescription('The OID assigned to RADIUS MIB work by the IANA.')
radiusAccounting = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2))
radiusAccClientMIBObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 2, 1))
radiusAccClient = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1))
radiusAccClientInvalidServerAddresses = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientInvalidServerAddresses.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientInvalidServerAddresses.setDescription('The number of RADIUS Accounting-Response packets received from unknown addresses.')
radiusAccClientIdentifier = MibScalar((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientIdentifier.setReference('RFC 2865 section 5.32')
if mibBuilder.loadTexts: radiusAccClientIdentifier.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientIdentifier.setDescription('The NAS-Identifier of the RADIUS accounting client. This is not necessarily the same as sysName in MIB II.')
radiusAccServerTable = MibTable((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3), )
if mibBuilder.loadTexts: radiusAccServerTable.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccServerTable.setDescription('The (conceptual) table listing the RADIUS accounting servers with which the client shares a secret.')
radiusAccServerEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1), ).setIndexNames((0, "RADIUS-ACCT-CLIENT-MIB", "radiusAccServerIndex"))
if mibBuilder.loadTexts: radiusAccServerEntry.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccServerEntry.setDescription('An entry (conceptual row) representing a RADIUS accounting server with which the client shares a secret.')
radiusAccServerIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: radiusAccServerIndex.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccServerIndex.setDescription('A number uniquely identifying each RADIUS Accounting server with which this client communicates.')
radiusAccServerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServerAddress.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccServerAddress.setDescription('The IP address of the RADIUS accounting server referred to in this table entry.')
radiusAccClientServerPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientServerPortNumber.setReference('RFC 2866 section 3')
if mibBuilder.loadTexts: radiusAccClientServerPortNumber.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientServerPortNumber.setDescription('The UDP port the client is using to send requests to this server.')
radiusAccClientRoundTripTime = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientRoundTripTime.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientRoundTripTime.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientRoundTripTime.setDescription('The time interval between the most recent Accounting-Response and the Accounting-Request that matched it from this RADIUS accounting server.')
radiusAccClientRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientRequests.setReference('RFC 2866 section 4.1')
if mibBuilder.loadTexts: radiusAccClientRequests.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientRequests.setDescription('The number of RADIUS Accounting-Request packets sent. This does not include retransmissions.')
radiusAccClientRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientRetransmissions.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientRetransmissions.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientRetransmissions.setDescription('The number of RADIUS Accounting-Request packets retransmitted to this RADIUS accounting server. Retransmissions include retries where the Identifier and Acct-Delay have been updated, as well as those in which they remain the same.')
radiusAccClientResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientResponses.setReference('RFC 2866 section 4.2')
if mibBuilder.loadTexts: radiusAccClientResponses.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientResponses.setDescription('The number of RADIUS packets received on the accounting port from this server.')
radiusAccClientMalformedResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientMalformedResponses.setReference('RFC 2866 section 3')
if mibBuilder.loadTexts: radiusAccClientMalformedResponses.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientMalformedResponses.setDescription('The number of malformed RADIUS Accounting-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators and unknown types are not included as malformed accounting responses.')
radiusAccClientBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientBadAuthenticators.setReference('RFC 2866 section 3')
if mibBuilder.loadTexts: radiusAccClientBadAuthenticators.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientBadAuthenticators.setDescription('The number of RADIUS Accounting-Response packets which contained invalid authenticators received from this server.')
radiusAccClientPendingRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 10), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientPendingRequests.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientPendingRequests.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientPendingRequests.setDescription('The number of RADIUS Accounting-Request packets sent to this server that have not yet timed out or received a response. This variable is incremented when an Accounting-Request is sent and decremented due to receipt of an Accounting-Response, a timeout or a retransmission.')
radiusAccClientTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 11), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientTimeouts.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientTimeouts.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientTimeouts.setDescription('The number of accounting timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as an Accounting-Request as well as a timeout.')
radiusAccClientUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientUnknownTypes.setReference('RFC 2866 section 4')
if mibBuilder.loadTexts: radiusAccClientUnknownTypes.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the accounting port.')
radiusAccClientPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 3, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientPacketsDropped.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the accounting port and dropped for some other reason.')
radiusAccServerExtTable = MibTable((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4), )
if mibBuilder.loadTexts: radiusAccServerExtTable.setStatus('current')
if mibBuilder.loadTexts: radiusAccServerExtTable.setDescription('The (conceptual) table listing the RADIUS accounting servers with which the client shares a secret.')
radiusAccServerExtEntry = MibTableRow((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1), ).setIndexNames((0, "RADIUS-ACCT-CLIENT-MIB", "radiusAccServerExtIndex"))
if mibBuilder.loadTexts: radiusAccServerExtEntry.setStatus('current')
if mibBuilder.loadTexts: radiusAccServerExtEntry.setDescription('An entry (conceptual row) representing a RADIUS accounting server with which the client shares a secret.')
radiusAccServerExtIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: radiusAccServerExtIndex.setStatus('current')
if mibBuilder.loadTexts: radiusAccServerExtIndex.setDescription('A number uniquely identifying each RADIUS Accounting server with which this client communicates.')
radiusAccServerInetAddressType = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: radiusAccServerInetAddressType.setDescription('The type of address format used for the radiusAccServerInetAddress object.')
radiusAccServerInetAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: radiusAccServerInetAddress.setDescription('The IP address of the RADIUS accounting server referred to in this table entry, using the version neutral IP address format.')
radiusAccClientServerInetPortNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 4), InetPortNumber().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientServerInetPortNumber.setReference('RFC 2866 section 3')
if mibBuilder.loadTexts: radiusAccClientServerInetPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientServerInetPortNumber.setDescription('The UDP port the client is using to send requests to this accounting server. The value zero (0) is invalid.')
radiusAccClientExtRoundTripTime = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtRoundTripTime.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientExtRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtRoundTripTime.setDescription('The time interval between the most recent Accounting-Response and the Accounting-Request that matched it from this RADIUS accounting server.')
radiusAccClientExtRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtRequests.setReference('RFC 2866 section 4.1')
if mibBuilder.loadTexts: radiusAccClientExtRequests.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtRequests.setDescription('The number of RADIUS Accounting-Request packets sent. This does not include retransmissions. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtRetransmissions.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientExtRetransmissions.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtRetransmissions.setDescription('The number of RADIUS Accounting-Request packets retransmitted to this RADIUS accounting server. Retransmissions include retries where the Identifier and Acct-Delay have been updated, as well as those in which they remain the same. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtResponses.setReference('RFC 2866 section 4.2')
if mibBuilder.loadTexts: radiusAccClientExtResponses.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtResponses.setDescription('The number of RADIUS packets received on the accounting port from this server. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtMalformedResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtMalformedResponses.setReference('RFC 2866 section 3')
if mibBuilder.loadTexts: radiusAccClientExtMalformedResponses.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtMalformedResponses.setDescription('The number of malformed RADIUS Accounting-Response packets received from this server. Malformed packets include packets with an invalid length. Bad authenticators and unknown types are not included as malformed accounting responses. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtBadAuthenticators = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtBadAuthenticators.setReference('RFC 2866 section 3')
if mibBuilder.loadTexts: radiusAccClientExtBadAuthenticators.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtBadAuthenticators.setDescription('The number of RADIUS Accounting-Response packets which contained invalid authenticators received from this server. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtPendingRequests = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 11), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtPendingRequests.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientExtPendingRequests.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtPendingRequests.setDescription('The number of RADIUS Accounting-Request packets sent to this server that have not yet timed out or received a response. This variable is incremented when an Accounting-Request is sent and decremented due to receipt of an Accounting-Response, a timeout or a retransmission. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtTimeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 12), Counter32()).setUnits('timeouts').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtTimeouts.setReference('RFC 2866 section 2')
if mibBuilder.loadTexts: radiusAccClientExtTimeouts.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtTimeouts.setDescription('The number of accounting timeouts to this server. After a timeout the client may retry to the same server, send to a different server, or give up. A retry to the same server is counted as a retransmit as well as a timeout. A send to a different server is counted as an Accounting-Request as well as a timeout. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtUnknownTypes = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtUnknownTypes.setReference('RFC 2866 section 4')
if mibBuilder.loadTexts: radiusAccClientExtUnknownTypes.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtUnknownTypes.setDescription('The number of RADIUS packets of unknown type which were received from this server on the accounting port. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientExtPacketsDropped = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientExtPacketsDropped.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtPacketsDropped.setDescription('The number of RADIUS packets which were received from this server on the accounting port and dropped for some other reason. This counter may experience a discontinuity when the RADIUS Accounting Client module within the managed entity is reinitialized, as indicated by the current value of radiusAccClientCounterDiscontinuity.')
radiusAccClientCounterDiscontinuity = MibTableColumn((1, 3, 6, 1, 2, 1, 67, 2, 2, 1, 1, 4, 1, 15), TimeTicks()).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusAccClientCounterDiscontinuity.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientCounterDiscontinuity.setDescription('The number of centiseconds since the last discontinuity in the RADIUS Accounting Client counters. A discontinuity may be the result of a reinitialization of the RADIUS Accounting Client module within the managed entity.')
radiusAccClientMIBConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 2, 2))
radiusAccClientMIBCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 2, 2, 1))
radiusAccClientMIBGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 67, 2, 2, 2, 2))
radiusAccClientMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 2, 2, 2, 1, 1)).setObjects(("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusAccClientMIBCompliance = radiusAccClientMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientMIBCompliance.setDescription('The compliance statement for accounting clients implementing the RADIUS Accounting Client MIB. Implementation of this module is for IPv4-only entities, or for backwards compatibility use with entities that support both IPv4 and IPv6.')
radiusAccClientExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 67, 2, 2, 2, 1, 2)).setObjects(("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusAccClientExtMIBCompliance = radiusAccClientExtMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtMIBCompliance.setDescription('The compliance statement for accounting clients implementing the RADIUS Accounting Client IPv6 Extensions MIB. Implementation of this module is for entities that support IPv6, or support IPv4 and IPv6.')
radiusAccClientMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 2, 2, 2, 2, 1)).setObjects(("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientIdentifier"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientInvalidServerAddresses"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccServerAddress"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientServerPortNumber"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientRoundTripTime"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientRequests"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientRetransmissions"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientResponses"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientMalformedResponses"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientBadAuthenticators"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientPendingRequests"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientTimeouts"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientUnknownTypes"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientPacketsDropped"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusAccClientMIBGroup = radiusAccClientMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: radiusAccClientMIBGroup.setDescription('The basic collection of objects providing management of RADIUS Accounting Clients.')
radiusAccClientExtMIBGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 67, 2, 2, 2, 2, 2)).setObjects(("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientIdentifier"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientInvalidServerAddresses"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccServerInetAddressType"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccServerInetAddress"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientServerInetPortNumber"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtRoundTripTime"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtRequests"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtRetransmissions"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtResponses"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtMalformedResponses"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtBadAuthenticators"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtPendingRequests"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtTimeouts"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtUnknownTypes"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientExtPacketsDropped"), ("RADIUS-ACCT-CLIENT-MIB", "radiusAccClientCounterDiscontinuity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    radiusAccClientExtMIBGroup = radiusAccClientExtMIBGroup.setStatus('current')
if mibBuilder.loadTexts: radiusAccClientExtMIBGroup.setDescription('The basic collection of objects providing management of RADIUS Accounting Clients.')
mibBuilder.exportSymbols("RADIUS-ACCT-CLIENT-MIB", radiusAccClientIdentifier=radiusAccClientIdentifier, radiusAccServerExtIndex=radiusAccServerExtIndex, radiusAccClientExtMIBGroup=radiusAccClientExtMIBGroup, radiusAccServerTable=radiusAccServerTable, radiusAccClientMIBGroups=radiusAccClientMIBGroups, radiusAccClientExtMIBCompliance=radiusAccClientExtMIBCompliance, radiusAccClientTimeouts=radiusAccClientTimeouts, radiusAccounting=radiusAccounting, radiusAccClientUnknownTypes=radiusAccClientUnknownTypes, radiusAccClientMIBCompliance=radiusAccClientMIBCompliance, radiusAccServerEntry=radiusAccServerEntry, radiusAccClientExtPacketsDropped=radiusAccClientExtPacketsDropped, PYSNMP_MODULE_ID=radiusAccClientMIB, radiusAccClientInvalidServerAddresses=radiusAccClientInvalidServerAddresses, radiusAccClientMIBCompliances=radiusAccClientMIBCompliances, radiusAccClientServerInetPortNumber=radiusAccClientServerInetPortNumber, radiusAccClientResponses=radiusAccClientResponses, radiusAccClientRoundTripTime=radiusAccClientRoundTripTime, radiusAccClientMalformedResponses=radiusAccClientMalformedResponses, radiusAccClientExtUnknownTypes=radiusAccClientExtUnknownTypes, radiusAccClientCounterDiscontinuity=radiusAccClientCounterDiscontinuity, radiusAccClientMIB=radiusAccClientMIB, radiusAccClientExtRetransmissions=radiusAccClientExtRetransmissions, radiusAccClientExtTimeouts=radiusAccClientExtTimeouts, radiusAccClientExtMalformedResponses=radiusAccClientExtMalformedResponses, radiusAccClient=radiusAccClient, radiusAccServerExtEntry=radiusAccServerExtEntry, radiusAccClientExtPendingRequests=radiusAccClientExtPendingRequests, radiusAccClientBadAuthenticators=radiusAccClientBadAuthenticators, radiusAccClientExtRoundTripTime=radiusAccClientExtRoundTripTime, radiusAccServerExtTable=radiusAccServerExtTable, radiusAccClientExtResponses=radiusAccClientExtResponses, radiusAccClientExtRequests=radiusAccClientExtRequests, radiusAccClientRequests=radiusAccClientRequests, radiusAccClientServerPortNumber=radiusAccClientServerPortNumber, radiusAccServerInetAddressType=radiusAccServerInetAddressType, radiusAccClientMIBConformance=radiusAccClientMIBConformance, radiusAccClientRetransmissions=radiusAccClientRetransmissions, radiusAccServerAddress=radiusAccServerAddress, radiusAccServerInetAddress=radiusAccServerInetAddress, radiusAccClientPendingRequests=radiusAccClientPendingRequests, radiusAccClientPacketsDropped=radiusAccClientPacketsDropped, radiusMIB=radiusMIB, radiusAccClientMIBGroup=radiusAccClientMIBGroup, radiusAccClientMIBObjects=radiusAccClientMIBObjects, radiusAccServerIndex=radiusAccServerIndex, radiusAccClientExtBadAuthenticators=radiusAccClientExtBadAuthenticators)
