#
# PySNMP MIB module G700-MG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G700-MG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
genAppFileName, genAppFileVersionNumber, genOpLastFailureIndex, genOpLastWarningDisplay, genAppFileId = mibBuilder.importSymbols("LOAD-MIB", "genAppFileName", "genAppFileVersionNumber", "genOpLastFailureIndex", "genOpLastWarningDisplay", "genAppFileId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, NotificationType, TimeTicks, ObjectIdentity, IpAddress, Gauge32, Counter64, enterprises, Counter32, MibIdentifier, iso, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "NotificationType", "TimeTicks", "ObjectIdentity", "IpAddress", "Gauge32", "Counter64", "enterprises", "Counter32", "MibIdentifier", "iso", "ModuleIdentity", "Bits")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
g700MediaGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 9))
g700MediaGatewayMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9))
class CmgItuPerceivedSeverity(TextualConvention, Integer32):
    reference = "ITU Recommendation M.3100, 'Generic Network Information Model', 1995 ITU Recommendation X.733, 'Information Technology - Open Systems Interconnection - System Management: Alarm Reporting Function', 1992"
    description = 'ITU perceived severity values'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("cleared", 1), ("indeterminate", 2), ("critical", 3), ("major", 4), ("minor", 5), ("warning", 6))

cmgmib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1))
cmgmib.setRevisions(('2014-05-08 16:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmgmib.setRevisionsDescriptions(('Added traps for DSP core faults/clear',))
if mibBuilder.loadTexts: cmgmib.setLastUpdated('201405081600Z')
if mibBuilder.loadTexts: cmgmib.setOrganization('Avaya, Inc.')
if mibBuilder.loadTexts: cmgmib.setContactInfo('Avaya Customer Services Postal: 4655 Great America Parkway Santa Clara,CA 95054 USA Tel.: +1-908-953-6000 Internet: http://support.avaya.com/contact ')
if mibBuilder.loadTexts: cmgmib.setDescription('A MIB to support the Avaya H248 Media Gateways. ')
class CmgModuleSlot(TextualConvention, Integer32):
    description = 'gateway module slot number'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 9)

cmgChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1))
cmgProcessor = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2))
cmgControllers = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3))
cmgVoip = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4))
cmgTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5))
cmgContactClosures = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6))
cmgETR = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7))
cmgDynamicCAC = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 8))
cmgSLAMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9))
cmgHWType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 28, 29, 30, 31, 32, 33, 34, 35, 37, 41))).clone(namedValues=NamedValues(("media-gateway", 1), ("g350", 2), ("avayaG250", 3), ("avayaG250-BRI", 4), ("avayaG250-DS1", 5), ("avayaG250-DCP", 6), ("avayaG450", 7), ("avayaG250-A14", 8), ("avayaTGM550", 10), ("avayaCommunicationManagerBranchEditioni120", 28), ("avayaCommunicationManagerBranchEditioni40-Analog", 29), ("avayaCommunicationManagerBranchEditioni40-BRI", 30), ("avayaCommunicationManagerBranchEditioni40-DS1", 31), ("avayaCommunicationManagerBranchEditioni40-DCP", 32), ("avayaTRM480", 33), ("avayaCommunicationManagerBranchEditioni40-A14", 34), ("avayaCommunicationManagerBranchEditionG450", 35), ("avayaCommunicationManagerBranchEditionG430", 37), ("avayaG430", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgHWType.setStatus('current')
if mibBuilder.loadTexts: cmgHWType.setDescription("Indicates the type of component. Where 'media-gateway' refers to G700")
cmgModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModelNumber.setStatus('current')
if mibBuilder.loadTexts: cmgModelNumber.setDescription('Model number of this component.')
cmgDescription = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDescription.setStatus('current')
if mibBuilder.loadTexts: cmgDescription.setDescription('Description of this component: G700 Media Gateway.')
cmgSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmgSerialNumber.setDescription('Serial number of this gateway.')
cmgHWVintage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgHWVintage.setStatus('current')
if mibBuilder.loadTexts: cmgHWVintage.setDescription('Hardware version of this gateway.')
cmgHWSuffix = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgHWSuffix.setStatus('current')
if mibBuilder.loadTexts: cmgHWSuffix.setDescription('Hardware vintage suffix of this gateway.')
cmgStackPosition = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgStackPosition.setStatus('current')
if mibBuilder.loadTexts: cmgStackPosition.setDescription('Position of this media gateway in the Cajun stack, counting from the bottom of the stack.')
cmgModuleList = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(14, 14)).setFixedLength(14)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleList.setStatus('current')
if mibBuilder.loadTexts: cmgModuleList.setDescription('List of the physical media modules installed in this gateway. Meaning of each octet is as follows. 1 Number of slots; in the G700 Media Gateway this is always 4. 2 Type of slot identifier; in the G700 Media Gateway this is always integer(2). 3-4 Length of each field in the following sequence; in the G700 Media Gateway this is always 1. 5-14 Module type ids in slot order, 1 - 10. Values are defined below for cmgModuleType, or none(0) if no module is installed. none(0), -- no module installed t1e1-voip(1), -- T1/E1 with integrated CSU/DSU & VoIP DSP bri(2), -- BRI trunk module dcp(3), -- DCP station module analog(4), -- combination analog line and trunk t1e1(5), -- T1/E1 with integrated CSU/DSU voip(6), -- dedicated VoIP media module icc(7), -- internal call controller fxo4fxs4(9), -- MM714 4 FXS + 4FXO analog ports module bri2(10), -- MM722 2 BRI trunk ports module ds1wan(11), -- MM340 1 DS1 (E1/T1) WAN data port module uspwan(12), -- MM342 1 USP WAN data port module dcp24hd(13), -- HDMM312 24 DCP station ports G350 high-density form-factor module poe24(14), -- HDMM314 24 power over Ethernet plus 1 GBIC port g350intana(16), -- G350 Integrated analog module dcp24(17), -- MM717 24 DCP station ports module fxs24(18), -- MM716 24 FXS analog ports module g250-int-analog-2L4T(19), -- G250 Integrated analog 2 Lines + 4 Trunks module g250-int-analog-2L1T(20), -- G250 Integrated analog 2 Lines + 1 Trunk module g250-int-BRI(21), -- G250 Integrated BRI Trunk module g250-int-DS1(24), -- G250 Integrated DS1 Trunk module g250-int-12pDCP(23), -- G250 Integrated 12 Port DCP lines module poe40(22), -- HDMM316 40 power over Ethernet plus 1 Giga bit copper poe24cr(25), -- HDMM314 24 power over Ethernet plus 1 GBIC port (Cost Reduction) poe8(26), -- MM118 - 8 10/100 power over Ethernet ports module tgm550-int-analog-2L2T(30), -- TGM550 Integrated analog 2 Lines + 2 Trunks module tim514(31), -- TIM514 4 FXS + 4 FXO analog ports module tim510(32), -- TIM510 1 DS1 (E1/T1) module tim521(33), -- TIM521 4 BRI trunk ports module avayaAM110ApplicationModule(34), -- Avaya Communication Manager Branch Edition Application Module for i40 and i120. g450Mainboard(40), -- G450 mainboard tim508(41), -- TIM508 8 FXS analog ports module tim516(42), -- TIM516 16 FXS analog ports module tim518(43), -- TIM518 8 FXS + 8 FXO analog ports module i120-intana(44), -- i120 Integrated analog module i40-int-analog-2L4T(45), -- avayaCommunicationManagerBranchEditioni40 Integrated analog 2 Lines + 4 Trunks module i40-int-analog-2L1T(46), -- avayaCommunicationManagerBranchEditioni40 Integrated analog 2 Lines + 1 Trunk module i40-int-BRI(47), -- avayaCommunicationManagerBranchEditioni40 Integrated BRI Trunk module i40-int-DS1(48), -- avayaCommunicationManagerBranchEditioni40 Integrated DS1 Trunk module i40-A14-int-analog-6L8T(49), -- avayaCommunicationManagerBranchEditioni40 Integrated analog 6 Lines + 8 Trunks module avayaCommunicationManagerBranchEditionG450Mainboard(50), -- Mainboard g430Mainboard(51), bri8(52), -- MM721 8 BRI trunk ports module unknown(255) -- type cannot be determined ')
cmgReset = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgReset.setStatus('current')
if mibBuilder.loadTexts: cmgReset.setDescription('Setting the value of this attribute to ON is interpreted as a reset command for the whole chassis. It initiates a complete reinitialisation of the chassis and of all the devices incorporated inside the chassis.')
cmgHardware = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10))
cmgCpuTemp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCpuTemp.setStatus('current')
if mibBuilder.loadTexts: cmgCpuTemp.setDescription('Reading of the internal temperature sensor at the CPU, expressed in degrees Celsius.')
cmgCpuTempWarningThresh = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCpuTempWarningThresh.setStatus('current')
if mibBuilder.loadTexts: cmgCpuTempWarningThresh.setDescription('Internal enclosure temperature warning threshold, expressed in degrees Celsius. When the temperature at the CPU sensor exceeds the threshold, a trap is sent to the management console. If both CPU and DSP sensors exceed their thresholds, only one trap is sent.')
cmgCpuTempShutdownThresh = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCpuTempShutdownThresh.setStatus('current')
if mibBuilder.loadTexts: cmgCpuTempShutdownThresh.setDescription('Internal enclosure temperature shutdown threshold, expressed in degrees Celsius. When the temperature at the CPU sensor exceeds the threshold, a trap is sent to the management console and the media gateway begins a controlled shutdown.')
cmgDspTemp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDspTemp.setStatus('current')
if mibBuilder.loadTexts: cmgDspTemp.setDescription('Reading of the internal temperature sensor at the DSPs, expressed in degrees Celsius.')
cmgDspTempWarningThresh = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDspTempWarningThresh.setStatus('current')
if mibBuilder.loadTexts: cmgDspTempWarningThresh.setDescription('Internal enclosure temperature warning threshold, expressed in degrees Celsius. When the temperature at the DSP sensor exceeds the threshold, a trap is sent to the management console. If both CPU and DSP sensors exceed their thresholds, only one trap is sent.')
cmgDspTempShutdownThresh = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDspTempShutdownThresh.setStatus('current')
if mibBuilder.loadTexts: cmgDspTempShutdownThresh.setDescription('Internal enclosure temperature shutdown threshold, expressed in degrees Celsius. When the temperature at the DSP sensor exceeds the threshold, a trap is sent to the management console and the media gateway begins a controlled shutdown.')
cmgPowerMgProcessor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgPowerMgProcessor.setStatus('current')
if mibBuilder.loadTexts: cmgPowerMgProcessor.setDescription('Voltage reading in millivolts at the power supply serving the Media Gateway main processor. Nominal value is +5100 mV. If the reading falls outside the range 4950 to 5250 mV, a trap is sent to the management console and the corresponding bit in the fault mask is turned on.')
cmgPowerMediaModules = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgPowerMediaModules.setStatus('current')
if mibBuilder.loadTexts: cmgPowerMediaModules.setDescription('Voltage reading in millivolts at the power supply serving the Media Modules. Nominal value is -48000 mV. If the reading falls outside the range -43000 to -53000 mV, a trap is sent to the management console and the corresponding bit in the fault mask is turned on.')
cmgPowerVoipComplex = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgPowerVoipComplex.setStatus('current')
if mibBuilder.loadTexts: cmgPowerVoipComplex.setDescription('Voltage reading in millivolts at the power supply serving the VoIP complexes. Nominal value is +3400 mV. If the reading falls outside the range 3200 to 3600 mV, a trap is sent to the management console and the corresponding bit in the fault mask is turned on.')
cmgPowerDsp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgPowerDsp.setStatus('current')
if mibBuilder.loadTexts: cmgPowerDsp.setDescription('Voltage reading in millivolts at the power supply serving the DSP units, derived from VoIP complex power. Nominal value is +1580 mV. If the reading falls outside the range 1530 to 1620 mV, a trap is sent to the management console and the corresponding bit in the fault mask is turned on.')
cmgPower8260 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgPower8260.setStatus('current')
if mibBuilder.loadTexts: cmgPower8260.setDescription('Voltage reading in millivolts at the power supply serving the 8260 processor, derived from VoIP complex power. Nominal value is +2500 mV. If the reading falls outside the range 2430 to 2580 mV, a trap is sent to the management console and the corresponding bit in the fault mask is turned on.')
cmgHardwareFaultMask = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgHardwareFaultMask.setStatus('current')
if mibBuilder.loadTexts: cmgHardwareFaultMask.setDescription("Each bit of this value set to '1' indicates a specific fault in the module. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Octet 0 high-order 4 bits show fan status. Octet 0 low-order 4 bits show temperature status. Octet 1 shows power supply status. Octet 2 shows other alarms. Cajun Octet Octet bit# /bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 Multiple fan warning: at least two fans have been operating at less than 90% of their nominal speed for 5 minutes or more. This may be an early warning of overheating. 1 0/1 0x40 PSU fan brief failure warning: the power supply fan has been operating at less than 90% of its nominal speed for 10 minutes or more, but less than 15 minutes. This may be an early warning of overheating. 2 0/2 0x20 PSU fan prolonged failure warning: the power supply fan has been operating at less than 90% of its nominal speed for 15 minutes or more. This may be an early warning of overheating. 3 0/3 Unused. 4 0/4 0x08 Temperature warning: cmgCpuTemp has exceeded its warning threshold. 5 0/5 0x04 Temperature warning: cmgDspTemp has exceeded its warning threshold. 6 0/6 Unused. 7 0/7 Power On Status Test failure -NCE, QUICC test failures on power up 8 1/0 0x80 The +5.1 v power supply to the MG processor is out of range. 9 1/1 0x40 The -48 v power supply to the media modules is out of range. 10 1/2 0x20 The +3.3 v power supply to the VoIP complexes is out of range. 11 1/3 0x10 The +1.58 v power supply to the DSP units is out of range. 12 1/4 0x08 The +2.5 v power supply to the 8260 processor is out of range. 13 1/5 0x04 The -48 v auxiliary power supply to the endpoints is out of range. 14 1/6 0x02 The +12 v power supply to the fans is out of range. 15 1/7 Unused. 16 2/0 0x80 Clock synchronization signal is lost. 17 2/1 0x40 Clock synchronization signal warning. Only one clock syncronization signal source remains. 18 2/2 0x20 Clock synchronization signal excessive switching. 19 2/3 0x10 TDM Test Expansion Box 1 Failure 20 2/4 0x08 TDM Test Expansion Box 2 Failure 21 2/5 0x04 PoE Power Supply Base Box Failure 22 2/6 0x02 PoE Power Supply Expansion Box 1 Failure 23 2/7 0x01 PoE Power Supply Expansion Box 2 Failure ")
cmgHardwareStatusMask = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgHardwareStatusMask.setStatus('current')
if mibBuilder.loadTexts: cmgHardwareStatusMask.setDescription("Each bit of this value set to '1' indicates a specific status condition in the module. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Octet 0 high-order 4 bits show LED status. Octet 0 low-order 4 bits show ICC status. Octets 1 - 5 show power-on self test (POST) results. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 Media gateway red LED is on. 1 0/1 0x40 The red LED is on in one or more of the media modules. 2-3 0/2-3 Unused. 4 0/4 0x08 Integrated Communications Controller hardware watchdog alert is on. 5-7 0/5-7 Unused. 8 1/0 0x80 POST HDLC local loopback failed. 9 1/1 0x40 POST Ethernet local loopback failed. 10 1/2 0x20 POST Ethernet physical local loopback failed. 11 1/3 0x10 POST Port I/O read-write test failed. 12-15 1/4-7 Unused. 16 2/0 0x80 POST NCE0 reset failed. 17 2/1 0x40 POST NCE0 internal RAM test failed. 18 2/2 0x20 POST NCE0 FIFO loop-around failed. 19 2/3 0x10 POST NCE0 internal channel loopback failed. 20 2/4 0x08 POST NCE0 internal TDM loopback failed. 21 2/5 0x04 POST NCE0 external channel loopback failed. 22-23 2/6-7 Unused. 24 3/0 0x80 POST NCE1 reset failed. 25 3/1 0x40 POST NCE1 internal RAM test failed. 26 3/2 0x20 POST NCE1 FIFO loop-around failed. 27 3/3 0x10 POST NCE1 internal channel loopback failed. 28 3/4 0x08 POST NCE1 internal TDM loopback failed. 29 3/5 0x04 POST NCE1 external channel loopback failed. 30-31 3/6-7 Unused. 32 4/0 0x80 POST DSP reset failed. 33 4/1 0x40 POST POST SPI internal loopback failed. 34 4/2 0x20 POST Spitfire FIFO test failed. 35 4/3 0x10 POST ADC test failed. 36 4/4 0x08 POST CPLD access test failed. 37-39 4/5-7 Unused. 40-47 5/0-7 Unused. ")
cmgHardwareFanLowSpeedLevel = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 10, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgHardwareFanLowSpeedLevel.setStatus('current')
if mibBuilder.loadTexts: cmgHardwareFanLowSpeedLevel.setDescription('The fan speed level mode. Disable(2) is used for normal operation of two fan speeds. Enable(1) is used to activate additional lower speed level. Default is disable(2).')
cmgModules = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11))
cmgModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1), )
if mibBuilder.loadTexts: cmgModuleTable.setStatus('current')
if mibBuilder.loadTexts: cmgModuleTable.setDescription('Table of physical media modules in this media gateway.')
cmgModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgModuleSlot"))
if mibBuilder.loadTexts: cmgModuleEntry.setStatus('current')
if mibBuilder.loadTexts: cmgModuleEntry.setDescription('An entry in the table, representing a single media module.')
cmgModuleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleSlot.setStatus('current')
if mibBuilder.loadTexts: cmgModuleSlot.setDescription('Slot number of this module.')
cmgModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 24, 23, 22, 25, 26, 29, 30, 31, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 253, 255))).clone(namedValues=NamedValues(("t1e1-voip", 1), ("bri", 2), ("dcp", 3), ("analog", 4), ("t1e1", 5), ("voip", 6), ("icc", 7), ("fxo4fxs4", 9), ("bri2", 10), ("ds1wan", 11), ("uspwan", 12), ("dcp24hd", 13), ("poe24", 14), ("g350intana", 16), ("dcp24", 17), ("fxs24", 18), ("g250-int-analog-2L4T", 19), ("g250-int-analog-2L1T", 20), ("g250-int-BRI", 21), ("g250-int-DS1", 24), ("g250-int-12pDCP", 23), ("poe40", 22), ("poe24cr", 25), ("poe8", 26), ("g250-int-analog-6L8T", 29), ("tgm550-int-analog-2L2T", 30), ("tim514", 31), ("tim510", 32), ("tim521", 33), ("avayaAM110ApplicationModule", 34), ("g450Mainboard", 40), ("tim508", 41), ("tim516", 42), ("tim518", 43), ("i120-intana", 44), ("i40-int-analog-2L4T", 45), ("i40-int-analog-2L1T", 46), ("i40-int-BRI", 47), ("i40-int-DS1", 48), ("i40-A14-int-analog-6L8T", 49), ("avayaCommunicationManagerBranchEditionG450Mainboard", 50), ("g430Mainboard", 51), ("bri8", 52), ("invalid", 253), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleType.setStatus('current')
if mibBuilder.loadTexts: cmgModuleType.setDescription('Type of this module.')
cmgModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleDescription.setStatus('current')
if mibBuilder.loadTexts: cmgModuleDescription.setDescription("Description of this media module, e.g. 'Avaya E1/T1 media module with integrated CSU/DSU'")
cmgModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleName.setStatus('current')
if mibBuilder.loadTexts: cmgModuleName.setDescription('User-assigned name of this media module.')
cmgModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmgModuleSerialNumber.setDescription('Serial number of this module. The first 12 characters are meaningful. Form is yyLLmmnnnnnn, where yy = last 2 digits of the year of manufacture LL = manufacturing facility, e.g. DR for Denver, Colorado mm = month of manufacture, 01 - 12 nnnnnn = a six-digit sequence number ')
cmgModuleHWVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleHWVintage.setStatus('current')
if mibBuilder.loadTexts: cmgModuleHWVintage.setDescription('Hardware vintage of this module.')
cmgModuleHWSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleHWSuffix.setStatus('current')
if mibBuilder.loadTexts: cmgModuleHWSuffix.setDescription('Hardware vintage suffix of this module.')
cmgModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleFWVersion.setStatus('current')
if mibBuilder.loadTexts: cmgModuleFWVersion.setDescription('Firmware version of this module. This duplicates information available in the Load MIB. It shows the media module run image version, plus the VoIP engine version if applicable.')
cmgModuleNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleNumberOfPorts.setStatus('current')
if mibBuilder.loadTexts: cmgModuleNumberOfPorts.setDescription('Number of physical connectors on this module.')
cmgModuleFaultMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleFaultMask.setStatus('current')
if mibBuilder.loadTexts: cmgModuleFaultMask.setDescription("Each bit of this value set to '1' indicates a specific fault in the module. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 Media module is in administrative busy-out. 1 0/1 0x40 One or more ports on this media module is in administrative busy-out. 2 0/2 0x20 Insertion sequence failed. 3 0/3 AWOH data module conflict. 4 0/4 0x08 Media module automatic reset occurred. 5 0/5 0x04 One or more power-on startup tests failed. 6 0/6 0x02 Media module parameter exchange failed. 7 0/7 Unsupported module enrolment. 8-15 1/0-7 Unused. ")
cmgModuleStatusMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleStatusMask.setStatus('current')
if mibBuilder.loadTexts: cmgModuleStatusMask.setDescription("Each bit of this value set to '1' indicates a specific status condition in the module. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 Red LED is on. 1 0/1 0x40 Module controlled by ACP on communications controller. 2-7 0/2-7 Unused. 8-15 1/0-7 Unused. ")
cmgModuleReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgModuleReset.setStatus('current')
if mibBuilder.loadTexts: cmgModuleReset.setDescription('Setting the value of this attribute to ON is interpreted as a reset command for the module. It initiates a complete reinitialization of the module and of all the devices incorporated inside the module.')
cmgModuleNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgModuleNumberOfChannels.setStatus('current')
if mibBuilder.loadTexts: cmgModuleNumberOfChannels.setDescription('Number of communications channels or spans on this module. Earlier Avaya products have referred to T1E1 channels as ports. This media gateway calls them channels.')
cmgAnalogPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12))
cmgAnalogPortTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1), )
if mibBuilder.loadTexts: cmgAnalogPortTable.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogPortTable.setDescription('Table of analog ports in this media gateway.')
cmgAnalogPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgAnalogSlot"), (0, "G700-MG-MIB", "cmgAnalogPort"))
if mibBuilder.loadTexts: cmgAnalogPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogPortEntry.setDescription('An entry in the table, representing a single analog port.')
cmgAnalogSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgAnalogSlot.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogSlot.setDescription('Slot number of this analog port.')
cmgAnalogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgAnalogPort.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogPort.setDescription('Port number of this analog port.')
cmgAnalogEchoCancellerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 0), ("on", 1), ("off", 2), ("fixedOn", 3), ("notSupported", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgAnalogEchoCancellerControl.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogEchoCancellerControl.setDescription('The echo canceller control setting for this analog port. auto means that the system will enable or disable the echo canceller as appropriate for each call. fixedOn indicates that the analog firmware always enables the echo canceller (this value cannot be changed). Similarly, notSupported indicates that the analog HW does not contain echo cancellers (this value cannot be changed).')
cmgAnalogEchoCancellerConfig1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgAnalogEchoCancellerConfig1.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogEchoCancellerConfig1.setDescription('Echo canceller configuration setting for this analog port (byte 1 of 2). This value is not writeable if cmgAnalogEchoCancellerControl is fixedOn(3) or notSupported(4).')
cmgAnalogEchoCancellerConfig2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgAnalogEchoCancellerConfig2.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogEchoCancellerConfig2.setDescription('Echo canceller configuration setting for this analog port (byte 2 of 2). This value is not writeable if cmgAnalogEchoCancellerControl is fixedOn(3) or notSupported(4).')
cmgAnalogBalance = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgAnalogBalance.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogBalance.setDescription('Balance index.')
cmgAnalogReceiveGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgAnalogReceiveGain.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogReceiveGain.setDescription('The receive gain multiplied by 100, for instance -123 indicates -1.23dB.')
cmgAnalogTransmitGain = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-600, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgAnalogTransmitGain.setStatus('current')
if mibBuilder.loadTexts: cmgAnalogTransmitGain.setDescription('The transmit gain multiplied by 100, for instance +287 indicates 2.87dB.')
cmgExpansionUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13))
cmgExpansionUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1), )
if mibBuilder.loadTexts: cmgExpansionUnitsTable.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionUnitsTable.setDescription('Table of Expansion Units connected to this media gateway.')
cmgExpansions = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgExpansionSlot"))
if mibBuilder.loadTexts: cmgExpansions.setStatus('current')
if mibBuilder.loadTexts: cmgExpansions.setDescription('An entry in the table, representing a single Expansion Unit.')
cmgExpansionSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionSlot.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionSlot.setDescription('Expansion Unit Slot.')
cmgExpansionModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionModelNumber.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionModelNumber.setDescription('Expansion Unit model.')
cmgExpansionDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionDescription.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionDescription.setDescription('Expansion Unit description.')
cmgExpansionSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionSerialNumber.setDescription('Expansion Unit serial number.')
cmgExpansionHWVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionHWVintage.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionHWVintage.setDescription('Expansion Unit HW vintage.')
cmgExpansionHWSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionHWSuffix.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionHWSuffix.setDescription('Expansion Unit HW suffix.')
cmgExpansionDemandTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgExpansionDemandTest.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionDemandTest.setDescription('When set to on(1), activates on demand test for the Expansion Unit.')
cmgExpansionDemandTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("fail", 1), ("pass", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgExpansionDemandTestResult.setStatus('current')
if mibBuilder.loadTexts: cmgExpansionDemandTestResult.setDescription('Result of the on demand test for the Expansion Unit. Failure(1) may be the result of a disconnected or bad cable.')
cmgTimeslotMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgTimeslotMonitoring.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotMonitoring.setDescription('Timeslot Monitoring flag. When on, timeslot usage is monitored and traps are sent when thresholds are crossed. Those traps are cmgTimeslotOccupancyFault, cmgTimeslotOccupancyClear, cmgTimeslotAvailabilityFault and cmgTimeslotAvailabilityClear.')
cmgTimeslotUpperThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgTimeslotUpperThreshold.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotUpperThreshold.setDescription('Timeslot Upper threshold. The gateway will send trap cmgTimeslotOccupancyFault as soon as the timeslot usage goes above this threshold. This threshold must be set greater than the lower threshold; for example, cmgTimeslotLowerThreshold=85, cmgTimeslotUpperThreshold=90. Default is 90. cmgTimeslotMonitoring must be set to on(1) for traps to be sent.')
cmgTimeslotLowerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgTimeslotLowerThreshold.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotLowerThreshold.setDescription('Timeslot Lower threshold. After the gateway has sent a cmgTimeslotOccupancyFault trap, it will send a cmgTimeslotOccupancyClear as soon as the timeslot usage goes below this threshold. Also after the gateway has sent a cmgTimeslotAvailabilityFault trap, it will send cmgTimeslotAvailabilityClear as soon as the timeslot usage goes below this threshold. This lower threshold must be less than the upper threshold; for example cmgTimeslotLowerThreshold=85, cmgTimeslotUpperThreshold=90. Default is 85. cmgTimeslotMonitoring must be set to on(1) for traps to be sent.')
cmgDsu = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2))
cmgDsuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1), )
if mibBuilder.loadTexts: cmgDsuConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuConfigTable.setDescription('Configuration of E1/T1 DSUs in this media gateway.')
cmgDsuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgDsuSlot"), (0, "G700-MG-MIB", "cmgDsuPort"))
if mibBuilder.loadTexts: cmgDsuConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuConfigEntry.setDescription('An entry in the table, representing the configuration of one DSU on a T1/E1 media module.')
cmgDsuSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuSlot.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuSlot.setDescription('Slot number of this DSU.')
cmgDsuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuPort.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuPort.setDescription('Port number of this DSU.')
cmgDsuPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuPortEnable.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuPortEnable.setDescription('This object allows a user to take the E1/T1 port out of service for administration. During administration, it may be in an inconsistent state. When administration is complete, the port may be enabled again. If the port is not yet correctly administered, the change to the enabled state will fail with an INCONSISTENT_VALUE error.')
cmgDsuDataFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate56Kbps", 1), ("rate64KbpsClear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuDataFormat.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDataFormat.setDescription('Data format (channel rate) of this DSU.')
cmgDsuFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dtr-rts", 1), ("dtr", 2), ("rts", 3), ("disable", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuFlowControl.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuFlowControl.setDescription('Specifies the conditions under which this DSU will send all ones to indicate data port not ready. dtr-rts(1) Monitor both DTR and RTS as described below. If either is interrupted, send all ones. dtr(2) Monitor the DTE Ready interchange circuit CD (CCITT 108/1/2). If DTR is interrupted, send all ones. rts(3) Monitor the Request-to-Send interchange circuit CD (CCITT 105). If RTS is interrupted, send all ones. disable(4) Do not monitor interchange circuits from the DTE.')
cmgDsuYellowAlarmAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("halt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuYellowAlarmAction.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuYellowAlarmAction.setDescription('Specifies the action to take when a yellow alarm is received on the network interface. noAction(1) Ignore yellow alarms. halt(2) Stop transmission and disable the data port. Send all ones on the Received Data interchange circuit BB (CCITT 104) and interrupt the Clear-to-Send interchange circuit (CCITT 106).')
cmgDsuReceiveClock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuReceiveClock.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuReceiveClock.setDescription('Specifies whether data received from the data port is clocked using the DSU internal clock or by an external clock provided by the DTE connected to the port. When an external clock is used, it must be synchronized to the same clock source as the DSU. The DSU Receive Clock is equivalent to the Data Port Transmit Clock. internal(1) The clock is provided internally by the DSU/CSU on the TXC interchange circuit DB (CCITT 114). external(2) The clock is provided externally by the DTE on the XTXC interchange circuit DA (CCITT 113). ')
cmgDsuInvertTxC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuInvertTxC.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuInvertTxC.setDescription('Specifies whether the clock supplied by the DSU/CSU on the TXC interchange circuit DB (CCITT 114) is phase inverted with respect to the Transmitted Data interchange ciucuit BA (CCITT 103). This option is useful when long cable lengths between the DSU/CSU and the DTE are causing data errors.')
cmgDsuInvertRxC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuInvertRxC.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuInvertRxC.setDescription('Specifies whether the receive clock supplied by the DSU/CSU or DTE is phase inverted.')
cmgDsuInvertTxD = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuInvertTxD.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuInvertTxD.setDescription('Specifies whether the transmitted data stream is logically inverted before being transmitted. This option is useful for applications where HDLC data is being transported. Inverting the data ensures that the density requirements for the network interface are met.')
cmgDsuInvertRxD = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuInvertRxD.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuInvertRxD.setDescription('Specifies whether the received data stream is logically inverted. This option is useful for applications where HDLC data is being transported. Inverting the data ensures that the density requirements for the network interface are met.')
cmgDsuPortInitiatedLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuPortInitiatedLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuPortInitiatedLoopback.setDescription('Specifies whether the DSU should accept loopback requests from the DTE port. The local DTE can send an LL or RL signal to the T1/E1 media module in the EIA-530A interface. The LL signal causes the module to activate a local DTE loopback. An RL signal causes the module to send an in-band code to signal the far end to go into loopback.')
cmgDsuNetworkInitiatedLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("disallow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuNetworkInitiatedLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuNetworkInitiatedLoopback.setDescription('Specifies whether the DSU should accept in-band loopback requests from the far end, that is, a DSU across the network.')
cmgDsuChannelAssignments = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuChannelAssignments.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuChannelAssignments.setDescription('Specifies which channels are assigned to Voice and which to the DSU. Each bit represents one channel. If the bit is set to 1, the channel is assigned to the DSU; otherwise it is assigned to Voice. The channel number of a bit is determined by the formula (8*n + b + 1), where n is the octet number and b is the bit number. So the 3rd bit in octet 2 represents channel (8*2 + 3 + 1) = 20.')
cmgDsuDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuDataRate.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDataRate.setDescription('Data format (channel rate) of this DSU times the number of channels of type ds0-dsu-channel(5). See cmgChType in cmgChannelTable.')
cmgDsuPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2), )
if mibBuilder.loadTexts: cmgDsuPortStatusTable.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuPortStatusTable.setDescription('Status of E1/T1 DSUs in this media gateway.')
cmgDsuPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgDsuSlot"), (0, "G700-MG-MIB", "cmgDsuPort"))
if mibBuilder.loadTexts: cmgDsuPortStatusEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuPortStatusEntry.setDescription('An entry in the table, representing the configuration of one DSU on a T1/E1 media module.')
cmgDsuRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuRTS.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRTS.setDescription('State of request-to-send signal from the DTE to the DSU.')
cmgDsuDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuDTR.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDTR.setDescription('State of data-terminal-ready signal from the DTE to the DSU.')
cmgDsuLL = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuLL.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuLL.setDescription('Is there a DTE local loopback active between the DTE and the DSU?')
cmgDsuRL = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuRL.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRL.setDescription('Is there a remote loopback active in the FPGA?')
cmgDsuRLSD = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuRLSD.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRLSD.setDescription('State of the Receive Line Signal Detect from the DSU to the DTE.')
cmgDsuCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuCTS.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuCTS.setDescription('State of clear-to-send signal from the DSU to the DTE.')
cmgDsuDSR = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuDSR.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDSR.setDescription('State of data-set-ready signal from the DCE to the DTE.')
cmgDsuRing = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuRing.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRing.setDescription('State of the DCE ring indicator signal to the DTE.')
cmgDsuTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuTestMode.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuTestMode.setDescription('Indicates whether tests are currently in progress.')
cmgDsuTxD = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mark", 1), ("space", 2), ("cycling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuTxD.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuTxD.setDescription('State of data transmission from the synchronous DTE to the data port on the DSU.')
cmgDsuRxD = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mark", 1), ("space", 2), ("cycling", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuRxD.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRxD.setDescription('State of data reception at the synchronous DTE from the data port on the DSU/CSU.')
cmgDsuFaultMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuFaultMask.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuFaultMask.setDescription("Each bit of this value set to '1' indicates a specific fault in this DSU. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 DSU FPGA configuration failure. 1 0/1 0x40 DSU automatic reset. 2-3 0/2-3 Unused. 4 0/4 0x08 DSU DTE DTR off - DTE is disconnected or not functioning. 5 0/5 0x04 DSU DTE RTS off - DTE is not sending data. 6 0/6 0x02 DSU TxD failure - data received from DTE is all zeroes or all ones. 7 0/7 0x01 DSU RxD failure - data received from far end is all zeroes or all ones. 8-15 1/0-7 Unused. ")
cmgDsuStatusMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuStatusMask.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuStatusMask.setDescription("Each bit of this value set to '1' indicates a specific status condition in this DSU, or a fault or status condition in its associated CSU. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. If the CSU is reporting a Blue Alarm (AIS), multiple other alarms may be hidden by the Blue Alarm. -- The four octets of the T1E1 status mask are taken from three different -- maintenance APIs and assembled by the SNMP agent. Octets 0-1 show CSU fault status. -- From t1e1csu_status.mask, built by the macro T1E1CSU_STATUS_MKMASK. -- This is defined in CAPIStructures.h:851 and used in T1E1Csu.C:194. Octet 2 shows CSU loopbacks active. -- From t1e1csu_lpbkstatus.mask, built by the macro T1E1CSU_LPBKSTATUS_MKMASK. -- This is defined in CAPIStructures.h:803 and used in T1E1Csu.C:173. Octet 3 shows DSU loopbacks active. -- From t1e1dsu_tstmgmt.mask, built by the macro T1E1DSU_TSTMGMT_MKMASK -- This is defined in CAPIStructures.h:1115 and used in T1E1Dsu.C:1574. -- Note this just copies t1e1dsu_tstmgmt.status_lpbk into the mask field. -- Don't confuse t1e1dsu_tstmgmt.lpbk and t1e1dsu_tstmgmt.status_lpbk. The -- first is what a CLI user requested; the second is what the board reports. -- -- The bit assignments are chosen to facilitate retrieval from the board. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0-5 0/0-5 Unused. 6 0/6 0x02 CSU CRC multiframe lost (LCM) - E1 only 7 0/7 0x01 CSU remote multiframe alignment lost (RMA) - E1 only 8 1/0 0x80 CSU local multiframe alignment lost (LMA) - E1 only 9 1/1 0x40 CSU polar density violations (PDV) - in the T1 configuration using AMI line coding, this is equivalent to bipolar violations (BPV). 10 1/2 0x20 CSU alarm indication signal (AIS, Blue Alarm). 11 1/3 0x10 CSU remote alarm indication signal (RAI, Yellow Alarm). 12 1/4 0x08 CSU loss of frame (LOF, Red Alarm) - unable to synchronize 13 1/5 0x04 CSU excessive error rate (EER) - applies to ESF framing only. on DS1 signal. 14 1/6 0x02 CSU out of frame (OOF) - 2 of 4 frame synchronization bits in error. 15 1/7 0x01 CSU loss of signal (LOS) - 175 consecutive zeroes received. 16-20 2/0-4 Unused. 21 2/5 0x04 CSU Digital diagnostic loopback active (towards DTE). This is the equivalent of either equipment (DTE) or repeater loopback in the Paradyne 3160. 22 2/6 0x02 CSU Line loopback active (towards network). 23 2/7 0x01 CSU Payload loopback active (towards network). 24-26 3/0-2 Unused. 27 3/3 0x10 DSU Far-end Data Channel loopback active. 28 3/4 0x08 DSU Data Terminal loopback active. 29 3/5 0x04 DSU Remote loopback active. 30 3/6 0x02 DSU Near-end Data Channel loopback active. 31 3/7 0x01 DSU Local DTE loopback active. ")
cmgDsuTestTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3), )
if mibBuilder.loadTexts: cmgDsuTestTable.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuTestTable.setDescription('Loopback tests in effect on DSUs in this media gateway.')
cmgDsuTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgDsuSlot"), (0, "G700-MG-MIB", "cmgDsuPort"))
if mibBuilder.loadTexts: cmgDsuTestEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuTestEntry.setDescription('An entry in the table, representing the configuration of one DSU on a T1/E1 media module.')
cmgDsuLoopbackPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 255))).clone(namedValues=NamedValues(("allZeroes", 1), ("allOnes", 2), ("oneZeroOne", 3), ("oneIn5", 4), ("oneIn8", 5), ("threeIn24", 6), ("qrs", 7), ("qrs511", 8), ("qrs2047", 9), ("none", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuLoopbackPattern.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuLoopbackPattern.setDescription("Specifies the pattern to be sent during a loopback test. allZeroes(1) is most often used to verify B8ZS line encoding. allOnes(2) is most often used to measure signal power. oneZeroOne(3) alternates ones and zeroes. It is most often used to test bridge taps. oneIn5(4) is the pattern '00001', to send a remote loopback request. oneIn8(5) is the pattern '00000001', used to test repeater timing recovery. threeIn24(6) is 21 zeroes followed by 3 ones, used to test the ones density tolerance in AMI coded lines. qrs(7) is a quasi-random signal approximating live data. It is also available in repeating patterns of 511 or 2047 bits. none means no pattern; used for response. ")
cmgDsuLocalDteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuLocalDteLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuLocalDteLoopback.setDescription('Indicates whether a Local DTE loopback is active, in which a signal received from the DTE is looped back after passing through the transceivers, but before passing through the FIFOs. This loopback can be activated by this DSU or by the local DTE.')
cmgDsuNearEndDataChannelLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuNearEndDataChannelLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuNearEndDataChannelLoopback.setDescription('Indicates whether a Near-end Data Channel loopback is active, in which a signal received from the CSU is looped back after passing through the FIFOs but before entering the transceivers. This loopback was activated by the near end, that is, this DSU.')
cmgDsuFarEndDataChannelLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuFarEndDataChannelLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuFarEndDataChannelLoopback.setDescription('Indicates whether a Far-end Data Channel loopback is active. This is functionally equivalent to the Near-end Data Channel loopback, except that this loopback was activated by the far end, that is, a DSU across the network.')
cmgDsuRemoteLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuRemoteLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRemoteLoopback.setDescription('Indicates whether a Remote loopback is active, in which a signal received from the CSU is looped back before entering the FIFOs. This loopback may have been activated by either the near end (this DSU) or the far end (a DSU across the network).')
cmgDsuDataTerminalLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDsuDataTerminalLoopback.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDataTerminalLoopback.setDescription('Indicates whether a Data Terminal loopback is active, in which a signal received from the DTE is looped back after passing through the FIFOs. This loopback can only be activated by the near end, that is, this DSU.')
cmgDsuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 1, 11, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDsuReset.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuReset.setDescription('Set to on(1) to request reinitialization of the DSU.')
cmgProcessorConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1))
cmgProcessorQos = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2))
cmgProcessorClock = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 3))
cmgGatewayNumber = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgGatewayNumber.setStatus('current')
if mibBuilder.loadTexts: cmgGatewayNumber.setDescription('Media gateway number by which the Call Controller knows this media module.')
cmgMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgMACAddress.setStatus('current')
if mibBuilder.loadTexts: cmgMACAddress.setDescription('MAC address of this processor.')
cmgFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgFWVersion.setStatus('current')
if mibBuilder.loadTexts: cmgFWVersion.setDescription('Firmware version of this gateway.')
cmgCurrentIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgCurrentIpAddress.setDescription("Current IP address of this processor. If cmgUseDhcpForIpAddress was on(1) at the time of last startup, this was received from the DHCP server. Otherwise it is the value of cmgStaticIpAddress at the last startup. If cmgUseDhcpForIpAddress was on(1) and the DHCP request failed, this value will be '0.0.0.0'.")
cmgUseDhcpForIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgUseDhcpForIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgUseDhcpForIpAddress.setDescription('Specifies whether the gateway should get its IP address, default gateway, and subnet mask from the DHCP server, or use the locally administered static IP address, default gateway, and subnet mask.')
cmgUseDhcpForVlan = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgUseDhcpForVlan.setStatus('current')
if mibBuilder.loadTexts: cmgUseDhcpForVlan.setDescription('Specifies whether the gateway should get its VLAN ID from the DHCP server, or use the locally administered static VLAN ID cmgStatic802Vlan.')
cmgDhcpSson = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDhcpSson.setStatus('current')
if mibBuilder.loadTexts: cmgDhcpSson.setDescription("Specifies the DHCP Site-Specific Option Number to use with a DHCP request. This gives the DHCP server information about the client's capabilities and properties.")
cmgStaticIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgStaticIpAddress.setDescription('Locally administered static IP address of this processor. If cmgUseDhcpForIpAddress is on(1), this object is ignored.')
cmgDnsServerList = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDnsServerList.setStatus('current')
if mibBuilder.loadTexts: cmgDnsServerList.setDescription('Comma-separated list of DNS server IP addresses this processor may use.')
cmgDnsHostname = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDnsHostname.setStatus('current')
if mibBuilder.loadTexts: cmgDnsHostname.setDescription('DNS Hostname of this processor.')
cmgMgpFaultMask = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgMgpFaultMask.setStatus('current')
if mibBuilder.loadTexts: cmgMgpFaultMask.setDescription("Each bit of this value set to '1' indicates a specific fault in the Media Gateway processor. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 Memory failure. 1 0/1 0x40 DHCP request failure. 2 0/2 0x20 Firmware download failure. 3 0/3 0x10 Software watchdog alert - MG processes restarting. 4 0/4 0x08 Internal Communications Controller expected but not present. 5 0/5 0x04 Internal Communications Controller automatic reset. 6 0/6 0x02 Media Gateway busy-out. 7 0/7 0x01 Configuration upload failure. 8 1/0 0x80 Primary controller not found. 9 1/1 0x40 No controller found. 10 1/2 0x20 Registration failure. 11 1/3 0x10 H.248 control link down. 12-13 1/4-5 Unused. 14 1/6 0x02 Maintenance test failure. 15 1/7 0x01 Maintenance test failure over threshold. 16 2/0 0x80 Configuration download failure. 17-23 2/0-7 Unused. ")
cmgCurrentInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 16), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCurrentInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgCurrentInetAddressType.setDescription('Current IPv6 address type of this processor. The processor can have two IP address one IPv4 and the second IPv6. cmgCurrentIpAddress presents the IPv4 address and this MIB item presents the IPv6 address. ')
cmgCurrentInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 1, 17), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCurrentInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgCurrentInetAddress.setDescription('The Inet Address of the processor. 1. The address type of this object is specified in cmgCurrentInetAddressType. 2. Default of cmgCurrentInetAddressType is unknown(0) and cmgCurrentInetAddress is zero length. ')
cmgQosControl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgQosControl.setStatus('current')
if mibBuilder.loadTexts: cmgQosControl.setDescription('Specifies whether this processor should use the locally administered Quality of Service parameters, or whether it should use the parameters downloaded from the controller. This affects both signaling and voice traffic.')
cmgRemoteSigDscp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgRemoteSigDscp.setStatus('current')
if mibBuilder.loadTexts: cmgRemoteSigDscp.setDescription('DiffServ Code Point for signaling traffic on the H.248 link, received from the controller. If cmgQosControl is local(1), this value is ignored.')
cmgRemoteSig802Priority = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgRemoteSig802Priority.setStatus('current')
if mibBuilder.loadTexts: cmgRemoteSig802Priority.setDescription('802.1 Priority for signaling traffic on the H.248 link, received from the controller. If cmgQosControl is local(1), this value is ignored.')
cmgLocalSigDscp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgLocalSigDscp.setStatus('current')
if mibBuilder.loadTexts: cmgLocalSigDscp.setDescription('DiffServ Code Point for signaling traffic on the H.248 link, locally administered. If cmgQosControl is remote(2), this value is ignored.')
cmgLocalSig802Priority = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgLocalSig802Priority.setStatus('current')
if mibBuilder.loadTexts: cmgLocalSig802Priority.setDescription('802.1 Priority for signaling traffic on the H.248 link, locally administered. If cmgQosControl is remote(2), this value is ignored.')
cmgStatic802Vlan = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgStatic802Vlan.setStatus('current')
if mibBuilder.loadTexts: cmgStatic802Vlan.setDescription('802.1 VLAN ID for this processor, locally administered. If cmgUseDhcpForVlan is on(1), this value is ignored.')
cmgCurrent802Vlan = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCurrent802Vlan.setStatus('current')
if mibBuilder.loadTexts: cmgCurrent802Vlan.setDescription('802.1 VLAN ID currently in use for this processor. If cmgUseDhcpForVlan was on(1) at the last startup, this came from the DHCP server. Otherwise it is equal to cmgStatic802Vlan at the time of the last startup.')
cmgPrimaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgPrimaryClockSource.setStatus('current')
if mibBuilder.loadTexts: cmgPrimaryClockSource.setDescription("Primary clock source configured for this processor. If a T1 or BRI module is providing the clock, it reads 'Vs' or 'Vs(pp,pp,...)', where s is slot number and pp are the port numbers. If the VoIP module is providing the clock, it reads 'voip'. It reads 'None' if no primary clock source is configured. If cmgClockSourceControl is remote(2), access is read-only. If cmgClockSourceControl is local(1), access is read-write.")
cmgSecondaryClockSource = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgSecondaryClockSource.setStatus('current')
if mibBuilder.loadTexts: cmgSecondaryClockSource.setDescription("Secondary clock source configured for this processor. If a T1 or BRI module is providing the clock, it reads 'Vs' or 'Vs(pp,pp,...)', where s is slot number and pp are the port numbers. If the VoIP module is providing the clock, it reads 'voip'. It reads 'None' if no secondary clock source is configured. If cmgClockSourceControl is remote(2), access is read-only. If cmgClockSourceControl is local(1), access is read-write.")
cmgActiveClockSource = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("local", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgActiveClockSource.setStatus('current')
if mibBuilder.loadTexts: cmgActiveClockSource.setDescription('Identifies the clock source in use at this processor. If cmgClockSourceControl is remote(2), access is read-only. If cmgClockSourceControl is local(1), access is read-write.')
cmgClockSwitching = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgClockSwitching.setStatus('current')
if mibBuilder.loadTexts: cmgClockSwitching.setDescription('A flag to enable/disable sync switching. If cmgClockSourceControl is remote(2), access is read-only. If cmgClockSourceControl is local(1), access is read-write.')
cmgClockSourceControl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgClockSourceControl.setStatus('current')
if mibBuilder.loadTexts: cmgClockSourceControl.setDescription('Specifies whether this processor sync administration parameters are controlled locally or remotely.')
cmgRegistrationState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("registered", 1), ("notRegistered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgRegistrationState.setStatus('current')
if mibBuilder.loadTexts: cmgRegistrationState.setDescription('Shows whether this media gateway is currently registered with any call controller.')
cmgActiveControllerAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgActiveControllerAddress.setStatus('current')
if mibBuilder.loadTexts: cmgActiveControllerAddress.setDescription("IPv4 Address of the call controller now serving this media gateway. If cmgRegistrationState is notRegistered(2), this will be '0.0.0.0'. If cmgRegistrationState is registered(1) and the controller IP address is IPv6 address, this will be '0.0.0.0'. Otherwise it will be taken from one of the two address lists at registration time.")
cmgH248LinkStatus = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgH248LinkStatus.setStatus('current')
if mibBuilder.loadTexts: cmgH248LinkStatus.setDescription('Status of the H.248 link connecting this media gateway to its active call controller.')
cmgH248LinkErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgH248LinkErrorCode.setStatus('current')
if mibBuilder.loadTexts: cmgH248LinkErrorCode.setDescription("Most recently received H.248 error code affecting the link between this media gateway and its active call controller. If cmgH248LinkStatus is up(1), this value will be zero. 0 No error 400 Syntax error in message 403 Syntax error in TransactionRequest 406 Version not supported 410 Incorrect identifier 411 The transaction refers to an unknown ContextId 412 No ContextIDs available 421 Unknown action or illegal combination of actions 422 Syntax error in action 430 Unknown TerminationID 431 No TerminationID matched a wildcard 432 Out of TerminationIDs or No TerminationID available 433 TerminationID is already in a Context 434 Max number of Terminations in a Context exceeded 440 Unsupported or unknown package 441 Missing remote or local descriptor 442 Syntax error in command 443 Unknown command 444 Unsupported or unknown descriptor 445 Unsupported property 446 Unsupported or unknown parameter 447 Descriptor not legal in this command 448 Descriptor appears twice in a command 450 No such property in this package 451 No such event in this package 452 No such signal in this package 453 No such statistic in this package 454 No such parameter value in this package 455 Parameter illegal in this descriptor 456 Parameter or property appears twice in this descriptor 457 Missing parameter in signal or event 471 Implied add for multiplex failure 500 Internal software failure in the media gateway 501 Not implemented 502 Not ready 503 Service unavailable 504 Command received from unauthorized entity 505 Transaction Request received before ServiceChange Reply received 510 Insufficient resources 512 Gateway unequipped to detect requested event 513 Gateway unequipped to generate requested signal 514 Gateway cannot send the specified announcement 515 Unsupported media type 517 Unsupported or invalid mode 518 Event buffer full 519 Out of space to store digit map 520 Digit map undefined in MG 521 Termination is 'Service Changing' 526 Insufficient bandwidth 529 Internal hardware failure in MG 530 Temporary network failure 531 Permanent network failure 581 Does not exist ")
cmgUseDhcpForMgcList = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgUseDhcpForMgcList.setStatus('current')
if mibBuilder.loadTexts: cmgUseDhcpForMgcList.setDescription('Should this gateway get its controller IP address from the DHCP server, or should it use the locally administered controller list? If this value is on(1), the gateway will try the DHCP-provided addresses first, and if they fail it will try the static addresses. If the value is off(2), the gateway will try only static addresses. Changes to this object take effect when the gateway is restarted.')
cmgStaticControllerHosts = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgStaticControllerHosts.setStatus('current')
if mibBuilder.loadTexts: cmgStaticControllerHosts.setDescription("Comma-separated list of up to four administered static IPv4 and IPv6 addresses for primary and backup call controllers. IPv4 addresses should be in the form '123.124.125.126', with no port numbers. (The Media Gateway always uses the default H.248 port number 2945). IPv6 address should be in the form of '2002:8740:64e2::8740:64e2'. Use '+' if there is both IPv4 and IPv6 address on the same index/location. An IP address may appear more than once in the list. If cmgUseDhcpForMgcList is equal to off(2), these are the only addresses the gateway will try. In that case this list must contain at least one active entry. Changes to the list take effect when the gateway is restarted. Example for IPv4 and IPv6 address configuration: '135.6.8.98+2001:db8::370:7334, 135.6.8.99, 2001:db8::1428:57ab'")
cmgDhcpControllerHosts = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDhcpControllerHosts.setStatus('current')
if mibBuilder.loadTexts: cmgDhcpControllerHosts.setDescription('List of IP addresses for up to four primary and backup call controllers, received from the DHCP server. An IP address may appear more than once in the list. If cmgUseDhcpForMgcList is equal to on(2), the gateway will try these addresses first, and if none succeed, it will try the addresses in cmgStaticControllerHosts.')
cmgPrimarySearchTime = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgPrimarySearchTime.setStatus('current')
if mibBuilder.loadTexts: cmgPrimarySearchTime.setDescription('Number of minutes for the Primary Search Timer.')
cmgTotalSearchTime = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgTotalSearchTime.setStatus('current')
if mibBuilder.loadTexts: cmgTotalSearchTime.setDescription('Number of minutes for the Total Search Timer.')
cmgTransitionPoint = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgTransitionPoint.setStatus('current')
if mibBuilder.loadTexts: cmgTransitionPoint.setDescription('Value of the Transition Point.')
cmgActiveControllerSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgActiveControllerSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: cmgActiveControllerSoftwareVersion.setDescription("Release string of the call controller now serving this media gateway. Release string should be in format 'R015x.02.0.947.0' without patch information. If cmgRegistrationState is notRegistered(2) or this information is unknown to the agent, then this object will contain a zero-length string. Changes to the value take effect when the gateway is registered or re-registered.")
cmgActiveControllerInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgActiveControllerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgActiveControllerInetAddressType.setDescription('IPv4/IPv6 Address of the call controller now serving this media gateway. If cmgRegistrationState is notRegistered(2), this will be unknown(0). cmgActiveControllerAddress will present IPv4 address controller only.')
cmgActiveControllerInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 3, 13), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgActiveControllerInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgActiveControllerInetAddress.setDescription('The Inet Address of the controller that the gateway is registered to. 1. The address type of this object is specified in cmgActiveControllerInetAddressType. 2. Default of cmgActiveControllerInetAddressType is unknown(0) and cmgActiveControllerInetAddress is zero length. ')
cmgVoipEngineUseDhcp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipEngineUseDhcp.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEngineUseDhcp.setDescription('Determines whether VoIP engines use their statically administered IP addresses or whether they get their addresses from the DHCP server.')
cmgVoipQosControl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipQosControl.setStatus('current')
if mibBuilder.loadTexts: cmgVoipQosControl.setDescription('This is the same as cmgQosControl in the MG Processor group. That parameter determines whether the gateway uses voice and signaling QoS parameters administered locally or whether it gets the parameters from its call controller. It is reproduced here for convenience.')
cmgVoipRemoteParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3))
cmgVoipRemoteQosParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 1))
cmgVoipRemoteRtcpParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2))
cmgVoipRemoteRsvpParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 3))
cmgVoipLocalParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4))
cmgVoipLocalQosParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 1))
cmgVoipLocalRtcpParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2))
cmgVoipLocalRsvpParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 3))
cmgVoipRemoteBbeDscp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteBbeDscp.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteBbeDscp.setDescription('The Better-than-Best-Effort DiffServ code point received from the controller. This is a value to be assigned to the code point part of the Differentiated Services field in the IP header of each voice packet. See RFC2475 for a full description of Differentiated Services.')
cmgVoipRemoteEfDscp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteEfDscp.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteEfDscp.setDescription('The Expedited-Forwarding DiffServ code point received from the controller. This is a value to be assigned to the code point part of the Differentiated Services field in the IP header of each voice packet. See RFC2475 for a full description of Differentiated Services.')
cmgVoipRemote802Priority = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemote802Priority.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemote802Priority.setDescription('The 802.1 priority received from the call controller. This is a priority value to be assigned to the tag header for priority-tagged voice frames. See IEEE standard 802.1Q-1998 for a full description.')
cmgVoipRemoteMinRtpPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65533))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteMinRtpPort.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteMinRtpPort.setDescription('The lower end of the range of UDP ports assigned to voice traffic, received from the call controller. Must be less than or equal to cmgVoipRemoteMaxRtpPort.')
cmgVoipRemoteMaxRtpPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteMaxRtpPort.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteMaxRtpPort.setDescription('The upper end of the range of UDP ports assigned to voice traffic, received from the call controller. Must be greater than or equal to cmgVoipRemoteMinRtpPort.')
cmgVoipRemoteRtcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpEnabled.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpEnabled.setDescription('A flag that determines whether the Media Gateway will collect and report RTCP statistics. See RFC 1889 for a full description of RTCP. If this value is disabled(2), the rest of this group will be ignored.')
cmgVoipRemoteRtcpMonitorIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorIpAddress.setDescription('The IPv4 address of an RTCP monitor to which the Media Gateway should report its RTCP statistics. cmgVoipRemoteRtcpMonitorIpAddress will present 0.0.0.0 if no IP address was configured or IPv6 address configured.')
cmgVoipRemoteRtcpMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorPort.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorPort.setDescription('The port on the RTCP monitor to which the Media Gateway should report its RTCP statistics.')
cmgVoipRemoteRtcpReportPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpReportPeriod.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpReportPeriod.setDescription('The RTCP reporting interval in seconds.')
cmgVoipRemoteRtcpMonitorInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorInetAddressType.setDescription('The IPv6 address type of an RTCP monitor to which the Media Gateway should report its RTCP statistics. User can define sending RTCP monitor packets to IPv4 host and IPv6 host. This mib item is used for IPv6 host, while cmgVoipRemoteRtcpMonitorIpAddress is used for the IPv4 host. cmgVoipRemoteRtcpMonitorIpAddress will present IPv4 address controller only.')
cmgVoipRemoteRtcpMonitorInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorInetAddress.setDescription('The IPv6 address of an RTCP monitor to which the Media Gateway should report its RTCP statistics. 1. The address type of this object is specified in cmgVoipRemoteRtcpMonitorInetAddressType. 2. Default of cmgVoipRemoteRtcpMonitorInetAddressType is unknown(0) and cmgVoipRemoteRtcpMonitorInetAddress is zero length. ')
cmgVoipRemoteRtcpMonitorPortInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorPortInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRtcpMonitorPortInetAddress.setDescription('The port on the IPv6 RTCP monitor to which the Media Gateway should report its RTCP statistics.')
cmgVoipRemoteRsvpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRsvpEnabled.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRsvpEnabled.setDescription('A flag that determines whether the VoIP engines should use RSVP to control call admission. See RFC 2205 for a full description of RSVP. If this value is disabled(2), the rest of this group will be ignored.')
cmgVoipRemoteRetryOnFailure = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRetryOnFailure.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRetryOnFailure.setDescription('A flag that determines whether the VoIP engines should retry a reservation request after the first one fails. If this value is disabled(2), the next object will be ignored.')
cmgVoipRemoteRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRetryDelay.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRetryDelay.setDescription('The interval in seconds between a reservation request failure and the subsequent retry. If cmgVoipRemoteRetryOnFailure is disabled(2), this object will be ignored.')
cmgVoipRemoteRsvpProfile = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteedService", 1), ("controlledLoadService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipRemoteRsvpProfile.setStatus('current')
if mibBuilder.loadTexts: cmgVoipRemoteRsvpProfile.setDescription('The RSVP service model to request.')
cmgVoipLocalBbeDscp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalBbeDscp.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalBbeDscp.setDescription('The Better-than-Best-Effort DiffServ code point received from the controller. This is a value to be assigned to the code point part of the Differentiated Services field in the IP header of each voice packet. See RFC2475 for a full description of Differentiated Services.')
cmgVoipLocalEfDscp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalEfDscp.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalEfDscp.setDescription('The Expedited-Forwarding DiffServ code point received from the controller. This is a value to be assigned to the code point part of the Differentiated Services field in the IP header of each voice packet. See RFC2475 for a full description of Differentiated Services.')
cmgVoipLocal802Priority = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocal802Priority.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocal802Priority.setDescription('The 802.1 priority received from the call controller. This is a priority value to be assigned to the tag header for priority-tagged voice frames. See IEEE standard 802.1Q-1998 for a full description.')
cmgVoipLocalMinRtpPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65533))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalMinRtpPort.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalMinRtpPort.setDescription('The lower end of the range of UDP ports assigned to voice traffic, received from the call controller. Must be less than or equal to cmgVoipLocalMaxRtpPort.')
cmgVoipLocalMaxRtpPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalMaxRtpPort.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalMaxRtpPort.setDescription('The upper end of the range of UDP ports assigned to voice traffic, received from the call controller. Must be greater than or equal to cmgVoipLocalMinRtpPort.')
cmgVoipLocalRtcpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRtcpEnabled.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpEnabled.setDescription('A flag that determines whether the Media Gateway will collect and report RTCP statistics. See RFC 1889 for a full description of RTCP. If this value is disabled(2), the rest of this group will be ignored.')
cmgVoipLocalRtcpMonitorIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorIpAddress.setDescription('The IPv4 address of an RTCP monitor to which the Media Gateway should report its RTCP statistics. cmgVoipLocalRtcpMonitorIpAddress will present 0.0.0.0 if no IP address was configured or IPv6 address configured.')
cmgVoipLocalRtcpMonitorPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorPort.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorPort.setDescription('The port on the RTCP monitor to which the Media Gateway should report its RTCP statistics.')
cmgVoipLocalRtcpReportPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRtcpReportPeriod.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpReportPeriod.setDescription('The RTCP reporting interval in seconds.')
cmgVoipLocalRtcpMonitorInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorInetAddressType.setDescription('The IPv6 address type of an RTCP monitor to which the Media Gateway should report its RTCP statistics. User can define sending RTCP monitor packets to IPv4 host and IPv6 host. This mib item is used for IPv6 host, while cmgVoipLocalRtcpMonitorIpAddress is used for the IPv4 host. cmgVoipLocalRtcpMonitorIpAddress will present IPv4 address controller only.')
cmgVoipLocalRtcpMonitorInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorInetAddress.setDescription('The IPv6 address of an RTCP monitor to which the Media Gateway should report its RTCP statistics. 1. The address type of this object is specified in cmgVoipLocalRtcpMonitorInetAddressType. 2. Default of cmgVoipLocalRtcpMonitorInetAddressType is unknown(0) and cmgVoipLocalRtcpMonitorInetAddress is zero length. ')
cmgVoipLocalRtcpMonitorPortInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorPortInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRtcpMonitorPortInetAddress.setDescription('The port on the IPv6 RTCP monitor to which the Media Gateway should report its RTCP statistics.')
cmgVoipLocalRsvpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRsvpEnabled.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRsvpEnabled.setDescription('A flag that determines whether the VoIP engines should use RSVP to control call admission. See RFC 2205 for a full description of RSVP. If this value is disabled(2), the rest of this group will be ignored.')
cmgVoipLocalRetryOnFailure = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRetryOnFailure.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRetryOnFailure.setDescription('A flag that determines whether the VoIP engines should retry a reservation request after the first one fails. If this value is disabled(2), the next object will be ignored.')
cmgVoipLocalRetryDelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRetryDelay.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRetryDelay.setDescription('The interval in seconds between a reservation request failure and the subsequent retry. If cmgVoipLocalRetryOnFailure is disabled(2), this object will be ignored.')
cmgVoipLocalRsvpProfile = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 4, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("guaranteedService", 1), ("controlledLoadService", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipLocalRsvpProfile.setStatus('current')
if mibBuilder.loadTexts: cmgVoipLocalRsvpProfile.setDescription('The RSVP service model to request.')
cmgVoipEngineTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5), )
if mibBuilder.loadTexts: cmgVoipEngineTable.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEngineTable.setDescription('Table of VoIP engines in the media gateway.')
cmgVoipEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgVoipSlot"))
if mibBuilder.loadTexts: cmgVoipEngineEntry.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEngineEntry.setDescription('An entry in the table representing one VoIP engine.')
cmgVoipSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 104))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipSlot.setStatus('current')
if mibBuilder.loadTexts: cmgVoipSlot.setDescription('Location of this VoIP engine, either a media module slot (1-4 for G700) or the motherboard (100 for G700, 10 for G350, G250). For G450/G430 the index arrangement is as follows: * For V1 - V10 the rule is cmgVoIPSlot = Slot# * 10 + SoDIMM#. Note that MM760 is not supported in G430/G450, nor other MM which support VoIP engine. Thus, only V10 is relevant. * For G450 motherboard is 101-104. * For G430 motherboard is 101-102 (101 is the on board DSP and 102 is the replaceable VoIP SoDIMM module. ')
cmgVoipMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipMACAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipMACAddress.setDescription('MAC address of the component hosting this VoIP engine.')
cmgVoipStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipStaticIpAddress.setDescription('Administered static IPv4 Address of this VoIP engine. If cmgVoipEngineUseDhcp was off(2) at startup time, this value determined the current IPv4 address of the engine.')
cmgVoipCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipCurrentIpAddress.setDescription('IPv4 Address currently in use at this VoIP engine. If cmgVoipEngineUseDhcp was on(2) at startup time, this value was received from the DHCP server. Otherwise it is equal to cmgVoipStaticIpAddress at startup time.')
cmgVoipJitterBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipJitterBufferSize.setStatus('current')
if mibBuilder.loadTexts: cmgVoipJitterBufferSize.setDescription('Size in bytes of the dynamic jitter buffer at this VoIP engine.')
cmgVoipTotalChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipTotalChannels.setStatus('current')
if mibBuilder.loadTexts: cmgVoipTotalChannels.setDescription('Total channels available to this VoIP engine.')
cmgVoipChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: cmgVoipChannelsInUse.setDescription('Number of channels in use at this VoIP engine.')
cmgVoipAverageOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipAverageOccupancy.setStatus('current')
if mibBuilder.loadTexts: cmgVoipAverageOccupancy.setDescription('5-minute average occupancy of this VoIP engine.')
cmgVoipHyperactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("normal", 1), ("hyperactive", 2), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipHyperactivity.setStatus('current')
if mibBuilder.loadTexts: cmgVoipHyperactivity.setDescription('Indicates whether hyperactivity has been detected by this VoIP engine.')
cmgVoipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("busy-out", 1), ("release", 2), ("camp-on", 3), ("unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipAdminState.setStatus('current')
if mibBuilder.loadTexts: cmgVoipAdminState.setDescription('Maintenance busy-out state of this VoIP engine.')
cmgVoipDspFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipDspFWVersion.setStatus('current')
if mibBuilder.loadTexts: cmgVoipDspFWVersion.setDescription('Firmware version of the DSP complex on this VoIP engine. This is also available in the Load MIB.')
cmgVoipDspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inUse", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipDspStatus.setStatus('current')
if mibBuilder.loadTexts: cmgVoipDspStatus.setDescription('Status of the DSP complex on this VoIP engine.')
cmgVoipEngineReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipEngineReset.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEngineReset.setDescription('Setting the value of this attribute to ON is interpreted as a reset command for the VoIP engine. It initiates a complete reinitialisation of the VoIP engine.')
cmgVoipFaultMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipFaultMask.setStatus('current')
if mibBuilder.loadTexts: cmgVoipFaultMask.setDescription("Each bit of this value set to '1' indicates a specific fault in the VoIP engine. Octets are numbered in the order in which they appear in the PDU. Bits are numbered from the most-significant leftmost bit in the octet (bit 0) to the least-significant rightmost bit (bit 7). Cajun numbering continues across octets, so that octet 1 bit 0 is called bit 8 in the Cajun scheme. That number is also shown below, with the octet value for each single bit set. Cajun Octet Octet bit# bit# value Meaning ----- ----- ----- ------- 0 0/0 0x80 Occupancy above threshold, based on a snapshot of cmgVoipChannelsInUse divided by cmgVoipTotalChannels. 1 0/1 0x40 Occupancy above threshold, based on cmgVoipAverageOccupancy. 2 0/2 0x20 VoIP engine automatic reset. 3 0/3 0x10 VoIP hardware fault. 4 0/4 0x08 VoIP IP configuration fault. 5 0/5 0x04 VoIP DSP Failure 6 0/6 0x02 VoIP DSP CORE Failure 7 0/7 0x01 VoIP DSP FPGA Failure 8 1/0 0x80 Unsupported DSP module. 9--15 1/1-7 Unused ")
cmgVoipStaticInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 15), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipStaticInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgVoipStaticInetAddressType.setDescription('Administered static IPv6 Address Type of the VoIP engine. The VoIP Engine Processor can have two IP addresses: one IPv4 and the second IPv6. cmgVoipStaticIpAddress presents the IPv4 address and this MIB item presents the IPv6 address. ')
cmgVoipStaticInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 16), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipStaticInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipStaticInetAddress.setDescription('Administered static IPv6 Address of the VoIP engine. 1. The address type of this object is specified in cmgVoipStaticInetAddressType. 2. Default of cmgVoipStaticInetAddressType is unknown(0) and cmgVoipStaticInetAddress is zero length. ')
cmgVoipCurrentInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipCurrentInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgVoipCurrentInetAddressType.setDescription('IPv6 Address Type currently in use at this VoIP engine. The VoIP Engine Processor can have two IP address one IPv4 and the second IPv6. cmgVoipCurrentIpAddress presents the IPv4 address and this MIB item presents the IPv6 address. ')
cmgVoipCurrentInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 5, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipCurrentInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgVoipCurrentInetAddress.setDescription('IPv6 Address currently in use at this VoIP engine. 1. The address type of this object is specified in cmgVoipCurrentInetAddressType. 2. Default of cmgVoipCurrentInetAddressType is unknown(0) and cmgVoipCurrentInetAddress is zero length. ')
cmgVoipDSPCoreTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6), )
if mibBuilder.loadTexts: cmgVoipDSPCoreTable.setStatus('current')
if mibBuilder.loadTexts: cmgVoipDSPCoreTable.setDescription('Table representing the DSP cores in VoIP engine of the media gateway.')
cmgVoipDSPCoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgVoipSlot"), (0, "G700-MG-MIB", "cmgDSPCoreCoreId"))
if mibBuilder.loadTexts: cmgVoipDSPCoreEntry.setStatus('current')
if mibBuilder.loadTexts: cmgVoipDSPCoreEntry.setDescription('An entry in the table representing one DSP Core of a VoIP engine. This table uses an external index from cmgVoIPEngineTable which selects a DSP SoDIMM/engine module and secondary index cmgDSPVoIPCoreID that selects a core on SoDIMM module')
cmgDSPCoreCoreId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDSPCoreCoreId.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreCoreId.setDescription('The DSP core ID within the specific DSP VoIP engine.')
cmgDSPCoreTotalChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDSPCoreTotalChannels.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreTotalChannels.setDescription('Total channels available to this DSP core.')
cmgDSPCoreChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDSPCoreChannelsInUse.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreChannelsInUse.setDescription('Number of channels in use at this DSP core.')
cmgDSPCoreAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("busy-out", 1), ("release", 2), ("camp-on", 3), ("unknown", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDSPCoreAdminState.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreAdminState.setDescription('Maintenance busy-out state of this DSP core.')
cmgDSPCoreStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("idle", 1), ("inUse", 2), ("fault", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDSPCoreStatus.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreStatus.setDescription('Status of the DSP Core.')
cmgDSPCoreDemandTest = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgDSPCoreDemandTest.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreDemandTest.setDescription('Activates on demand test for the DSP Core.')
cmgDSPCoreDemandTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 255))).clone(namedValues=NamedValues(("errorCode1", 1), ("errorCode2", 2), ("errorCode3", 3), ("errorCode4", 4), ("errorCode5", 5), ("errorCode6", 6), ("notResponding", 7), ("pass", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDSPCoreDemandTestResult.setStatus('current')
if mibBuilder.loadTexts: cmgDSPCoreDemandTestResult.setDescription('Result of the on demand test for the DSP Core.')
cmgVoipEchoCancellerControl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("auto", 0), ("on", 1), ("off", 2), ("fixedOn", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipEchoCancellerControl.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEchoCancellerControl.setDescription('The echo canceller control setting for all VoIP engines. auto means that the system will enable or disable the echo cancellers as appropriate for each call. fixedOn indicates that the VoIP firmware always enables the echo cancellers (this value cannot be changed).')
cmgVoipEchoCancellerConfig1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipEchoCancellerConfig1.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEchoCancellerConfig1.setDescription('Echo canceller configuration setting for all VoIP engines (byte 1 of 2). This value may not be writable if the VoIP firmware is old.')
cmgVoipEchoCancellerConfig2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgVoipEchoCancellerConfig2.setStatus('current')
if mibBuilder.loadTexts: cmgVoipEchoCancellerConfig2.setDescription('Echo canceller configuration setting for all VoIP engines (byte 2 of 2). This value may not be writable if the VoIP firmware is old.')
cmgVoipTotalChannelsEnforcedByCM = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgVoipTotalChannelsEnforcedByCM.setStatus('current')
if mibBuilder.loadTexts: cmgVoipTotalChannelsEnforcedByCM.setDescription('Total channels enforced by Communications Manager.')
cmgTrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 1), )
if mibBuilder.loadTexts: cmgTrapManagerTable.setStatus('current')
if mibBuilder.loadTexts: cmgTrapManagerTable.setDescription('Table of trap receivers in this media gateway.')
cmgTrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgTrapManagerAddress"))
if mibBuilder.loadTexts: cmgTrapManagerEntry.setStatus('current')
if mibBuilder.loadTexts: cmgTrapManagerEntry.setDescription('An entry in the table, representing a single trap receiver.')
cmgTrapManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 1, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgTrapManagerAddress.setStatus('current')
if mibBuilder.loadTexts: cmgTrapManagerAddress.setDescription('IP address of this trap receiver.')
cmgTrapManagerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgTrapManagerControl.setStatus('current')
if mibBuilder.loadTexts: cmgTrapManagerControl.setDescription('Specifies whether this trap receiver is currently receiving traps.')
cmgTrapManagerMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgTrapManagerMask.setStatus('current')
if mibBuilder.loadTexts: cmgTrapManagerMask.setDescription('A bit mask indicating the trap categories of interest to this trap receiver. Bit Category 0 Power warnings 1 Fan and temperature warnings 2 Application faults 3 Module insert or remove 4 Configuration traps: port enable or disable, administrative busy-out and release for ports and media modules 5-7 Not supported 8 Voice faults: Quality of service problems, voice hardware faults 9 Normal operations: successful registration with the gateway controller, successful firmware download. 10-31 Not supported ')
cmgTrapManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmgTrapManagerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmgTrapManagerRowStatus.setDescription('The status of this entry in the table. Available states: active(1), -- Trap receiver is administered, though not -- necessarily active. createAndGo(4), -- Used to add a new receiver to the table. destroy(6) -- Used to delete a receiver from the table. The cmgTrapManagerAddress of a new entry must be different from all other entries, or the create request will return INCONSISTENT-VALUE-ERROR. ')
cmgTrapDefinitions = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2))
cmgTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1))
cmgTrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2))
cmgTrapLocation = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapLocation.setStatus('current')
if mibBuilder.loadTexts: cmgTrapLocation.setDescription('Location of the problem in the form gggVspp, where ggg Media gateway number, or zero if the gateway is not currently registered with any controller. V The letter V; a field separator. s Slot number, if applicable. If the fault occurred on the media gateway processor, this will be omitted. pp Port number, if applicable. If the fault occurred on the media gateway processor or on a media module as a whole, this will be omitted. ')
cmgTrapOnBoard = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapOnBoard.setStatus('current')
if mibBuilder.loadTexts: cmgTrapOnBoard.setDescription("Expected values are 'no' and 'yes'. If a problem is on-board, replacing the media module is likely to resolve the problem.")
cmgTrapSubsystem = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapSubsystem.setStatus('current')
if mibBuilder.loadTexts: cmgTrapSubsystem.setDescription("The high-level subsystem that generated the trap. Expected values are 'HW', 'SW', and 'Net'.")
cmgTrapOnIccMissing = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgTrapOnIccMissing.setStatus('current')
if mibBuilder.loadTexts: cmgTrapOnIccMissing.setDescription('Should the media gateway send a trap on startup if there is no integrated communications controller in slot 1?')
cmgTrapModule = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapModule.setStatus('current')
if mibBuilder.loadTexts: cmgTrapModule.setDescription('A display string to identify the module type in module insert and remove traps.')
cmgTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 6), CmgItuPerceivedSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: cmgTrapSeverity.setDescription('The severity of the notification.')
cmgProductId = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgProductId.setStatus('current')
if mibBuilder.loadTexts: cmgProductId.setDescription('The Product Id of Avaya Device - 10 characters.')
cmgTrapAvailableTimeslots = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapAvailableTimeslots.setStatus('current')
if mibBuilder.loadTexts: cmgTrapAvailableTimeslots.setDescription('Number of Timeslots available on this gateway.')
cmgTrapInUseTimeslots = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgTrapInUseTimeslots.setStatus('current')
if mibBuilder.loadTexts: cmgTrapInUseTimeslots.setDescription('Number of Timeslots in use on this gateway.')
cmgFipsErrorType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cryptoTestError", 1), ("prngFailure", 2), ("hashIntegrity", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cmgFipsErrorType.setStatus('current')
if mibBuilder.loadTexts: cmgFipsErrorType.setDescription('The type of FIPS error.')
cmgTrapV3separator = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0))
cmgMultipleFanFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 2)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgMultipleFanFault.setStatus('current')
if mibBuilder.loadTexts: cmgMultipleFanFault.setDescription('At least two fans have been operating at less than 90% of their nominal speed for five minutes or more. This may be an early warning of overheating.')
cmgMultipleFanClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 3)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgMultipleFanClear.setStatus('current')
if mibBuilder.loadTexts: cmgMultipleFanClear.setDescription('At least three fans are operating normally. The system should be operable indefinitely without overheating.')
cmgPsuFanBriefFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 4)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgPsuFanBriefFault.setStatus('current')
if mibBuilder.loadTexts: cmgPsuFanBriefFault.setDescription('The power supply fan has been operating at less than 90% of its optimal speed for 10 minutes or more, but less than 15 minutes. This may be an early warning of overheating.')
cmgPsuFanBriefClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 5)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgPsuFanBriefClear.setStatus('current')
if mibBuilder.loadTexts: cmgPsuFanBriefClear.setDescription('The power supply fan is operating normally.')
cmgPsuFanProlongedFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 6)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgPsuFanProlongedFault.setStatus('current')
if mibBuilder.loadTexts: cmgPsuFanProlongedFault.setDescription('The power supply fan has been operating at less than 90% of its optimal speed for 15 minutes or more. This may be an early warning of overheating.')
cmgPsuFanProlongedClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 7)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgPsuFanProlongedClear.setStatus('current')
if mibBuilder.loadTexts: cmgPsuFanProlongedClear.setDescription('The power supply fan is operating normally.')
cmgCpuTempWarningFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 10)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgCpuTemp"), ("G700-MG-MIB", "cmgCpuTempWarningThresh"), ("G700-MG-MIB", "cmgCpuTempShutdownThresh"))
if mibBuilder.loadTexts: cmgCpuTempWarningFault.setStatus('current')
if mibBuilder.loadTexts: cmgCpuTempWarningFault.setDescription('The temperature sensor at the CPU has exceeded its warning threshold.')
cmgCpuTempWarningClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 11)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgCpuTemp"), ("G700-MG-MIB", "cmgCpuTempWarningThresh"), ("G700-MG-MIB", "cmgCpuTempShutdownThresh"))
if mibBuilder.loadTexts: cmgCpuTempWarningClear.setStatus('current')
if mibBuilder.loadTexts: cmgCpuTempWarningClear.setDescription('The temperature sensor at the CPU has dropped below its warning threshold.')
cmgDspTempWarningFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 12)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgDspTemp"), ("G700-MG-MIB", "cmgDspTempWarningThresh"), ("G700-MG-MIB", "cmgDspTempShutdownThresh"))
if mibBuilder.loadTexts: cmgDspTempWarningFault.setStatus('current')
if mibBuilder.loadTexts: cmgDspTempWarningFault.setDescription('The temperature sensor at the DSP complex has exceeded its warning threshold.')
cmgDspTempWarningClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 13)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgDspTemp"), ("G700-MG-MIB", "cmgDspTempWarningThresh"), ("G700-MG-MIB", "cmgDspTempShutdownThresh"))
if mibBuilder.loadTexts: cmgDspTempWarningClear.setStatus('current')
if mibBuilder.loadTexts: cmgDspTempWarningClear.setDescription('The temperature sensor at the DSP complex has dropped below its warning threshold.')
cmgTempShutdownFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 14)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgCpuTemp"), ("G700-MG-MIB", "cmgCpuTempShutdownThresh"), ("G700-MG-MIB", "cmgDspTemp"), ("G700-MG-MIB", "cmgDspTempShutdownThresh"))
if mibBuilder.loadTexts: cmgTempShutdownFault.setStatus('current')
if mibBuilder.loadTexts: cmgTempShutdownFault.setDescription('The CPU temperature sensor has exceeded its shutdown threshold. The system is about to begin controlled shutdown.')
cmgMgpPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 16)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerMgProcessor"))
if mibBuilder.loadTexts: cmgMgpPowerFault.setStatus('current')
if mibBuilder.loadTexts: cmgMgpPowerFault.setDescription('The voltage reading at the +5.1v power source serving the MG Processor is out of tolerance.')
cmgMgpPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 17)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerMgProcessor"))
if mibBuilder.loadTexts: cmgMgpPowerClear.setStatus('current')
if mibBuilder.loadTexts: cmgMgpPowerClear.setDescription('The voltage reading at the +5.1v power source serving the MG Processor is back within its tolerance range.')
cmgMediaModulePowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 18)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerMediaModules"))
if mibBuilder.loadTexts: cmgMediaModulePowerFault.setStatus('current')
if mibBuilder.loadTexts: cmgMediaModulePowerFault.setDescription('The voltage reading at the -48v power source serving the media modules is out of tolerance.')
cmgMediaModulePowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 19)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerMediaModules"))
if mibBuilder.loadTexts: cmgMediaModulePowerClear.setStatus('current')
if mibBuilder.loadTexts: cmgMediaModulePowerClear.setDescription('The voltage reading at the -48v power source serving the media modules is back within its tolerance range.')
cmgVoipPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 20)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerVoipComplex"))
if mibBuilder.loadTexts: cmgVoipPowerFault.setStatus('current')
if mibBuilder.loadTexts: cmgVoipPowerFault.setDescription('The voltage reading at the +3.4v power source serving the VoIP complexes is out of tolerance.')
cmgVoipPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 21)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerVoipComplex"))
if mibBuilder.loadTexts: cmgVoipPowerClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipPowerClear.setDescription('The voltage reading at the +3.4v power source serving the VoIP complexes is back within its tolerance range.')
cmgDspPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 22)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerDsp"))
if mibBuilder.loadTexts: cmgDspPowerFault.setStatus('current')
if mibBuilder.loadTexts: cmgDspPowerFault.setDescription('The voltage reading at the +1.58v power source serving the DSP units is out of tolerance.')
cmgDspPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 23)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPowerDsp"))
if mibBuilder.loadTexts: cmgDspPowerClear.setStatus('current')
if mibBuilder.loadTexts: cmgDspPowerClear.setDescription('The voltage reading at the +1.58v power source serving the DSP units is back within its tolerance range.')
cmg8260PowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 24)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPower8260"))
if mibBuilder.loadTexts: cmg8260PowerFault.setStatus('current')
if mibBuilder.loadTexts: cmg8260PowerFault.setDescription('The voltage reading at the +2.5v power source serving the 8260 processor is out of tolerance.')
cmg8260PowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 25)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPower8260"))
if mibBuilder.loadTexts: cmg8260PowerClear.setStatus('current')
if mibBuilder.loadTexts: cmg8260PowerClear.setDescription('The voltage reading at the +2.5v power source serving the 8260 processor is back within its tolerance range.')
cmgAuxPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 26)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgAuxPowerFault.setStatus('current')
if mibBuilder.loadTexts: cmgAuxPowerFault.setDescription('The voltage reading at the -48v auxiliary power source serving the end points is out of tolerance.')
cmgAuxPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 27)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgAuxPowerClear.setStatus('current')
if mibBuilder.loadTexts: cmgAuxPowerClear.setDescription('The voltage reading at the -48v auxiliary power source serving the end points is back within its tolerance range.')
cmgFanPowerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 28)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgFanPowerFault.setStatus('current')
if mibBuilder.loadTexts: cmgFanPowerFault.setDescription('The voltage at the +12 auxiliary power source serving the fans is out of tolerance.')
cmgFanPowerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 29)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"))
if mibBuilder.loadTexts: cmgFanPowerClear.setStatus('current')
if mibBuilder.loadTexts: cmgFanPowerClear.setDescription('The voltage at the +12 auxiliary power source serving the fans is back within its tolerance range.')
cmgSyncSignalFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 30)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPrimaryClockSource"), ("G700-MG-MIB", "cmgSecondaryClockSource"), ("G700-MG-MIB", "cmgActiveClockSource"))
if mibBuilder.loadTexts: cmgSyncSignalFault.setStatus('current')
if mibBuilder.loadTexts: cmgSyncSignalFault.setDescription('Synchronization signal lost.')
cmgSyncSignalClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 31)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPrimaryClockSource"), ("G700-MG-MIB", "cmgSecondaryClockSource"), ("G700-MG-MIB", "cmgActiveClockSource"))
if mibBuilder.loadTexts: cmgSyncSignalClear.setStatus('current')
if mibBuilder.loadTexts: cmgSyncSignalClear.setDescription('Synchronization signal normal.')
cmgVoipHardwareFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 32)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"))
if mibBuilder.loadTexts: cmgVoipHardwareFault.setStatus('current')
if mibBuilder.loadTexts: cmgVoipHardwareFault.setDescription('One or more of the DSP complexes serving VoIP engines has failed.')
cmgVoipHardwareClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 33)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"))
if mibBuilder.loadTexts: cmgVoipHardwareClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipHardwareClear.setDescription('All the DSP complexes serving VoIP engines are back in service.')
cmgSyncSignalWarn = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 34)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPrimaryClockSource"), ("G700-MG-MIB", "cmgSecondaryClockSource"), ("G700-MG-MIB", "cmgActiveClockSource"))
if mibBuilder.loadTexts: cmgSyncSignalWarn.setStatus('current')
if mibBuilder.loadTexts: cmgSyncSignalWarn.setDescription('Synchronization signal lost.')
cmgSyncWarnClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 35)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPrimaryClockSource"), ("G700-MG-MIB", "cmgSecondaryClockSource"), ("G700-MG-MIB", "cmgActiveClockSource"))
if mibBuilder.loadTexts: cmgSyncWarnClear.setStatus('current')
if mibBuilder.loadTexts: cmgSyncWarnClear.setDescription('Synchronization signal normal.')
cmgSyncSignalExcess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 36)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPrimaryClockSource"), ("G700-MG-MIB", "cmgSecondaryClockSource"), ("G700-MG-MIB", "cmgActiveClockSource"))
if mibBuilder.loadTexts: cmgSyncSignalExcess.setStatus('current')
if mibBuilder.loadTexts: cmgSyncSignalExcess.setDescription('The synchronization signal source (primary or secondary) is experiencing excessive failures in a short period of time causing excessive switching to an alternate source.')
cmgSyncExcessClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 37)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgHardwareFaultMask"), ("G700-MG-MIB", "cmgPrimaryClockSource"), ("G700-MG-MIB", "cmgSecondaryClockSource"), ("G700-MG-MIB", "cmgActiveClockSource"))
if mibBuilder.loadTexts: cmgSyncExcessClear.setStatus('current')
if mibBuilder.loadTexts: cmgSyncExcessClear.setDescription('Synchronization signal source which was causing excessive switching due to excessive failures is now normal.')
cmgVoipCoreFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 38)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"))
if mibBuilder.loadTexts: cmgVoipCoreFault.setStatus('current')
if mibBuilder.loadTexts: cmgVoipCoreFault.setDescription('One or more of the DSP Cores serving VoIP engines has failed.')
cmgVoipCoreClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 39)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"))
if mibBuilder.loadTexts: cmgVoipCoreClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipCoreClear.setDescription('All the DSP Cores serving VoIP engines are back in service.')
cmgModuleRemove = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 50)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapModule"))
if mibBuilder.loadTexts: cmgModuleRemove.setStatus('current')
if mibBuilder.loadTexts: cmgModuleRemove.setDescription('A media module has been removed.')
cmgModuleInsertFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 52)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"), ("G700-MG-MIB", "cmgTrapModule"))
if mibBuilder.loadTexts: cmgModuleInsertFault.setStatus('current')
if mibBuilder.loadTexts: cmgModuleInsertFault.setDescription('Media module insertion sequence has failed.')
cmgModuleInsertSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 53)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapModule"))
if mibBuilder.loadTexts: cmgModuleInsertSuccess.setStatus('current')
if mibBuilder.loadTexts: cmgModuleInsertSuccess.setDescription('A media module has been inserted.')
cmgMgBusyout = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 54)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgMgBusyout.setStatus('current')
if mibBuilder.loadTexts: cmgMgBusyout.setDescription('An administrator has moved a media module or port to the busy-out state.')
cmgMgRelease = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 55)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgMgRelease.setStatus('current')
if mibBuilder.loadTexts: cmgMgRelease.setDescription('An administrator has moved a media module or port from the busy-out state back into service.')
cmgUnsupportedMmEnrolement = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 56)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleSlot"), ("G700-MG-MIB", "cmgModuleType"), ("G700-MG-MIB", "cmgModuleName"))
if mibBuilder.loadTexts: cmgUnsupportedMmEnrolement.setStatus('current')
if mibBuilder.loadTexts: cmgUnsupportedMmEnrolement.setDescription('The event is sent when a module is inserted to a slot where it can be identified but not supported due to hardware limitations.')
cmgDataModuleAwohConflict = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 57)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleSlot"), ("G700-MG-MIB", "cmgModuleType"), ("G700-MG-MIB", "cmgModuleName"))
if mibBuilder.loadTexts: cmgDataModuleAwohConflict.setStatus('current')
if mibBuilder.loadTexts: cmgDataModuleAwohConflict.setDescription('This event is generated when a data module is found in a slot that was Administered without hardware as a voice module in the call controller.')
cmgFirmwareDownloadBegun = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 70)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"), ("G700-MG-MIB", "cmgProductId"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgFirmwareDownloadBegun.setStatus('current')
if mibBuilder.loadTexts: cmgFirmwareDownloadBegun.setDescription('The media gateway has begun download of a software module.')
cmgFirmwareDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 71)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"))
if mibBuilder.loadTexts: cmgFirmwareDownloadSuccess.setStatus('current')
if mibBuilder.loadTexts: cmgFirmwareDownloadSuccess.setDescription('The media gateway has completed successful download of a software module.')
cmgRegistrationSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 73)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgActiveControllerAddress"))
if mibBuilder.loadTexts: cmgRegistrationSuccess.setStatus('current')
if mibBuilder.loadTexts: cmgRegistrationSuccess.setDescription('The media gateway has successfully registered with a controller.')
cmgMgManualReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 74)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgMgManualReset.setStatus('current')
if mibBuilder.loadTexts: cmgMgManualReset.setDescription('The media gateway is beginning a user-requested reset operation.')
cmgModuleManualReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 75)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgModuleManualReset.setStatus('current')
if mibBuilder.loadTexts: cmgModuleManualReset.setDescription('A media module is beginning a user-requested reset operation.')
cmgVoipManualReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 76)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgVoipManualReset.setStatus('current')
if mibBuilder.loadTexts: cmgVoipManualReset.setDescription('A VoIP engine is beginning a user-requested reset operation.')
cmgDsuManualReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 77)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuManualReset.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuManualReset.setDescription('An E1/T1 DSU is beginning a user-requested reset operation.')
cmgConfigUploadBegun = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 78)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgConfigUploadBegun.setStatus('current')
if mibBuilder.loadTexts: cmgConfigUploadBegun.setDescription('The media gateway has begun upload of a configuration file.')
cmgConfigUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 79)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgConfigUploadSuccess.setStatus('current')
if mibBuilder.loadTexts: cmgConfigUploadSuccess.setDescription('The media gateway has completed successful upload of a configuration file.')
cmgMemoryFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 90)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgMemoryFault.setStatus('current')
if mibBuilder.loadTexts: cmgMemoryFault.setDescription('Main processor memory has issued a failure warning.')
cmgMemoryClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 91)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgMemoryClear.setStatus('current')
if mibBuilder.loadTexts: cmgMemoryClear.setDescription('Main processor memory is back in normal service.')
cmgDhcpRequestFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 92)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgDhcpRequestFault.setStatus('current')
if mibBuilder.loadTexts: cmgDhcpRequestFault.setDescription('The media gateway cannot contact its DHCP server, or the server failed to respond to a request.')
cmgDhcpRequestClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 93)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgDhcpRequestClear.setStatus('current')
if mibBuilder.loadTexts: cmgDhcpRequestClear.setDescription('The media gateway has received a successful response to a DHCP request.')
cmgFirmwareDownloadFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 94)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"), ("LOAD-MIB", "genOpLastFailureIndex"))
if mibBuilder.loadTexts: cmgFirmwareDownloadFault.setStatus('current')
if mibBuilder.loadTexts: cmgFirmwareDownloadFault.setDescription('An attempt to download a software module has failed.')
cmgFirmwareDownloadWarning = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 95)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("LOAD-MIB", "genAppFileId"), ("LOAD-MIB", "genAppFileName"), ("LOAD-MIB", "genAppFileVersionNumber"), ("LOAD-MIB", "genOpLastWarningDisplay"))
if mibBuilder.loadTexts: cmgFirmwareDownloadWarning.setStatus('current')
if mibBuilder.loadTexts: cmgFirmwareDownloadWarning.setDescription('Non critical event occur during attempt to download a software module.')
cmgProcessRestart = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 96)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgProcessRestart.setStatus('current')
if mibBuilder.loadTexts: cmgProcessRestart.setDescription('One or more media gateway software processes have terminated and been restarted by the software task manager.')
cmgProcessRestartClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 97)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgProcessRestartClear.setStatus('current')
if mibBuilder.loadTexts: cmgProcessRestartClear.setDescription('Media gateway software processes are running normally.')
cmgIccMissingFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 98)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgIccMissingFault.setStatus('current')
if mibBuilder.loadTexts: cmgIccMissingFault.setDescription('An Internal Communications Controller expected in slot 1 is missing.')
cmgIccMissingClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 99)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgIccMissingClear.setStatus('current')
if mibBuilder.loadTexts: cmgIccMissingClear.setDescription('The Internal Communications Controller expected in slot 1 is present.')
cmgIccAutoReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 100)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgIccAutoReset.setStatus('current')
if mibBuilder.loadTexts: cmgIccAutoReset.setDescription('The Media gateway has automatically reset the Internal Communications Controller.')
cmgIccAutoResetClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 101)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgIccAutoResetClear.setStatus('current')
if mibBuilder.loadTexts: cmgIccAutoResetClear.setDescription('The Internal Communications Controller is running normally.')
cmgPrimaryControllerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 102)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("G700-MG-MIB", "cmgUseDhcpForMgcList"))
if mibBuilder.loadTexts: cmgPrimaryControllerFault.setStatus('current')
if mibBuilder.loadTexts: cmgPrimaryControllerFault.setDescription('The media gateway cannot contact the first controller in its controller list.')
cmgPrimaryControllerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 103)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("G700-MG-MIB", "cmgUseDhcpForMgcList"))
if mibBuilder.loadTexts: cmgPrimaryControllerClear.setStatus('current')
if mibBuilder.loadTexts: cmgPrimaryControllerClear.setDescription('The media gateway has successfully contacted the first controller in its controller list.')
cmgNoControllerFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 104)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("G700-MG-MIB", "cmgUseDhcpForMgcList"))
if mibBuilder.loadTexts: cmgNoControllerFault.setStatus('current')
if mibBuilder.loadTexts: cmgNoControllerFault.setDescription('The media gateway cannot contact any controller in its controller lists.')
cmgNoControllerClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 105)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("G700-MG-MIB", "cmgUseDhcpForMgcList"))
if mibBuilder.loadTexts: cmgNoControllerClear.setStatus('current')
if mibBuilder.loadTexts: cmgNoControllerClear.setDescription('The media gateway has successfully contacted one of the controllers in its controller lists.')
cmgRegistrationFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 106)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("G700-MG-MIB", "cmgActiveControllerAddress"))
if mibBuilder.loadTexts: cmgRegistrationFault.setStatus('current')
if mibBuilder.loadTexts: cmgRegistrationFault.setDescription('The media gateway cannot register with any controller in its controller list.')
cmgH248LinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 108)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgH248LinkDown.setStatus('current')
if mibBuilder.loadTexts: cmgH248LinkDown.setDescription('The H.248 link between the media gateway and its controller is down.')
cmgH248LinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 109)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgH248LinkUp.setStatus('current')
if mibBuilder.loadTexts: cmgH248LinkUp.setDescription('The H.248 link between the media gateway and its controller is back in service.')
cmgTestFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 110)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgTestFault.setStatus('current')
if mibBuilder.loadTexts: cmgTestFault.setDescription('A maintenance test has failed.')
cmgTestClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 111)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgTestClear.setStatus('current')
if mibBuilder.loadTexts: cmgTestClear.setDescription('Failed maintenance tests have succeeded.')
cmgTestThresholdFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 112)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgTestThresholdFault.setStatus('current')
if mibBuilder.loadTexts: cmgTestThresholdFault.setDescription('Maintenance test failure count has exceeded its reporting threshold.')
cmgTestThresholdClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 113)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgTestThresholdClear.setStatus('current')
if mibBuilder.loadTexts: cmgTestThresholdClear.setDescription('Maintenance test failure count has dropped below its reporting threshold.')
cmgMgAutoReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 114)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"))
if mibBuilder.loadTexts: cmgMgAutoReset.setStatus('current')
if mibBuilder.loadTexts: cmgMgAutoReset.setDescription('The media gateway is beginning automatic reinitialization.')
cmgModuleAutoReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 116)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"))
if mibBuilder.loadTexts: cmgModuleAutoReset.setStatus('current')
if mibBuilder.loadTexts: cmgModuleAutoReset.setDescription('One of the media modules is beginning automatic reinitialization.')
cmgModuleAutoResetClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 117)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"))
if mibBuilder.loadTexts: cmgModuleAutoResetClear.setStatus('current')
if mibBuilder.loadTexts: cmgModuleAutoResetClear.setDescription('The reset media module is running normally.')
cmgModulePostFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 118)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"))
if mibBuilder.loadTexts: cmgModulePostFault.setStatus('current')
if mibBuilder.loadTexts: cmgModulePostFault.setDescription('A media module has failed its power-on startup test.')
cmgModulePostClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 119)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"))
if mibBuilder.loadTexts: cmgModulePostClear.setStatus('current')
if mibBuilder.loadTexts: cmgModulePostClear.setDescription('Media module power-on startup test successful.')
cmgModuleParameterFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 120)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"))
if mibBuilder.loadTexts: cmgModuleParameterFault.setStatus('current')
if mibBuilder.loadTexts: cmgModuleParameterFault.setDescription('A media module has failed its parameter exchange.')
cmgModuleParameterClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 121)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgModuleFaultMask"))
if mibBuilder.loadTexts: cmgModuleParameterClear.setStatus('current')
if mibBuilder.loadTexts: cmgModuleParameterClear.setDescription('Media module parameter exchange successful.')
cmgConfigUploadFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 122)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("LOAD-MIB", "genOpLastFailureIndex"))
if mibBuilder.loadTexts: cmgConfigUploadFault.setStatus('current')
if mibBuilder.loadTexts: cmgConfigUploadFault.setDescription('An attempt to upload a configuration file has failed.')
cmgVoipOccFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 124)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"), ("G700-MG-MIB", "cmgVoipChannelsInUse"), ("G700-MG-MIB", "cmgVoipTotalChannels"))
if mibBuilder.loadTexts: cmgVoipOccFault.setStatus('current')
if mibBuilder.loadTexts: cmgVoipOccFault.setDescription('One or more of the VoIP engines in the media gateway is over its occupancy threshold, as measured by a snapshot: (Channels In Use)/(Total Channels).')
cmgVoipOccClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 125)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"), ("G700-MG-MIB", "cmgVoipChannelsInUse"), ("G700-MG-MIB", "cmgVoipTotalChannels"))
if mibBuilder.loadTexts: cmgVoipOccClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipOccClear.setDescription('All the VoIP engines in the media gateway are operating below occupancy threshold, as measured by a snapshot: (Channels In Use)/(Total Channels).')
cmgVoipAvgOccFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 126)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"), ("G700-MG-MIB", "cmgVoipAverageOccupancy"))
if mibBuilder.loadTexts: cmgVoipAvgOccFault.setStatus('current')
if mibBuilder.loadTexts: cmgVoipAvgOccFault.setDescription('One or more of the VoIP engines in the media gateway is over its average occupancy threshold.')
cmgVoipAvgOccClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 127)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"), ("G700-MG-MIB", "cmgVoipAverageOccupancy"))
if mibBuilder.loadTexts: cmgVoipAvgOccClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipAvgOccClear.setDescription('All the VoIP engines in the media gateway are operating below occupancy threshold, as measured by a snapshot: (Channels In Use)/(Total Channels).')
cmgVoipAutoReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 128)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"))
if mibBuilder.loadTexts: cmgVoipAutoReset.setStatus('current')
if mibBuilder.loadTexts: cmgVoipAutoReset.setDescription('A VoIP engine has begun automatic reset.')
cmgVoipAutoResetClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 129)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"))
if mibBuilder.loadTexts: cmgVoipAutoResetClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipAutoResetClear.setDescription('A VoIP engine has completed automatic reset, and is running normally.')
cmgDsuFpgaConfigureFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 130)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuFpgaConfigureFault.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuFpgaConfigureFault.setDescription('The DSU in one of the E1/T1 media modules failed to configure its Field Programmable Gateway Array.')
cmgDsuFpgaConfigureClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 131)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuFpgaConfigureClear.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuFpgaConfigureClear.setDescription('The DSU in one of the E1/T1 media modules has successfully configured its Field Programmable Gateway Array.')
cmgDsuAutoReset = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 132)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuAutoReset.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuAutoReset.setDescription('A DSU in one of the E1/T1 media modules has begun automatic reset.')
cmgDsuAutoResetClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 133)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuAutoResetClear.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuAutoResetClear.setDescription('A DSU in one of the E1/T1 media modules has completed automatic reset, and is running normally.')
cmgDsuDteDtrFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 134)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuDteDtrFault.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDteDtrFault.setDescription('One of the E1/T1 media modules has detected that the DTR signal from its DTE is off. This indicates that the DTE is not connected or not functioning.')
cmgDsuDteDtrClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 135)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuDteDtrClear.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDteDtrClear.setDescription('One of the E1/T1 media modules has detected that the DTR signal from its DTE is back to normal.')
cmgDsuDteRtsFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 136)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuDteRtsFault.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDteRtsFault.setDescription('An E1/T1 media module has detected that the RTS signal from its DTE is not on whenever the DTE requests to send data and during data transfer. This indicates that the DTE is not functioning.')
cmgDsuDteRtsClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 137)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuDteRtsClear.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuDteRtsClear.setDescription('An E1/T1 media module has detected that the RTS signal from its DTE is back to normal.')
cmgDsuTxDFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 138)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuTxDFault.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuTxDFault.setDescription('An E1/T1 media module has detected that the data received from the local DTE to be sent to the far end is either all ones or all zeroes.')
cmgDsuTxDClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 139)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuTxDClear.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuTxDClear.setDescription('The E1/T1 media module is receiving normal data from the local DTE to be sent to the far end.')
cmgDsuRxDFailure = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 140)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuRxDFailure.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRxDFailure.setDescription('An E1/T1 media module has detected that the data received from the far end to be sent to the local DTE is either all ones or all zeroes.')
cmgDsuRxDClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 141)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgDsuRxDClear.setStatus('obsolete')
if mibBuilder.loadTexts: cmgDsuRxDClear.setDescription('The E1/T1 media module is receiving normal data from the far end to be sent to the local DTE.')
cmgVoipIpConfigFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 142)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"), ("G700-MG-MIB", "cmgVoipCurrentIpAddress"))
if mibBuilder.loadTexts: cmgVoipIpConfigFault.setStatus('current')
if mibBuilder.loadTexts: cmgVoipIpConfigFault.setDescription('There is an IP configuration failure in the VoIP Engine. No static IP address has been supplied or the firmware is getting indications that this is a duplicate IP address.')
cmgVoipIpConfigClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 143)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgVoipFaultMask"), ("G700-MG-MIB", "cmgVoipCurrentIpAddress"))
if mibBuilder.loadTexts: cmgVoipIpConfigClear.setStatus('current')
if mibBuilder.loadTexts: cmgVoipIpConfigClear.setDescription('The IP configuration of the VoIP Engine is successful.')
cmgConfigDownloadFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 144)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("LOAD-MIB", "genOpLastFailureIndex"))
if mibBuilder.loadTexts: cmgConfigDownloadFault.setStatus('current')
if mibBuilder.loadTexts: cmgConfigDownloadFault.setDescription('An attempt to download a configuration file has failed.')
cmgConfigDownloadBegun = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 145)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgConfigDownloadBegun.setStatus('current')
if mibBuilder.loadTexts: cmgConfigDownloadBegun.setDescription('The media gateway has begun download of a configuration file.')
cmgConfigDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 146)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"))
if mibBuilder.loadTexts: cmgConfigDownloadSuccess.setStatus('current')
if mibBuilder.loadTexts: cmgConfigDownloadSuccess.setDescription('The media gateway has completed successful download of a configuration file.')
cmgTimeslotOccupancyFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 147)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapAvailableTimeslots"), ("G700-MG-MIB", "cmgTrapInUseTimeslots"))
if mibBuilder.loadTexts: cmgTimeslotOccupancyFault.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotOccupancyFault.setDescription('Timeslot usage is over the occupancy threshold, as measured by a snapshot: (Timeslots In Use)/(Total Timeslots).')
cmgTimeslotOccupancyClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 148)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapAvailableTimeslots"), ("G700-MG-MIB", "cmgTrapInUseTimeslots"))
if mibBuilder.loadTexts: cmgTimeslotOccupancyClear.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotOccupancyClear.setDescription('Timeslot usage is below the occupancy threshold, as measured by a snapshot: (Timeslots In Use)/(Total Timeslots).')
cmgTimeslotAvailabilityFault = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 149)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapAvailableTimeslots"), ("G700-MG-MIB", "cmgTrapInUseTimeslots"))
if mibBuilder.loadTexts: cmgTimeslotAvailabilityFault.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotAvailabilityFault.setDescription('No more Timeslot are available on this gateway.')
cmgTimeslotAvailabilityClear = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 150)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapAvailableTimeslots"), ("G700-MG-MIB", "cmgTrapInUseTimeslots"))
if mibBuilder.loadTexts: cmgTimeslotAvailabilityClear.setStatus('current')
if mibBuilder.loadTexts: cmgTimeslotAvailabilityClear.setDescription('Timeslots are again available on this gateway, usage is below the occupancy threshold, as measured by a snapshot: (Timeslots In Use)/(Total Timeslots).')
cmgRegistrationSuccessInetAddress = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 151)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgActiveControllerInetAddressType"), ("G700-MG-MIB", "cmgActiveControllerInetAddress"), ("G700-MG-MIB", "cmgProductId"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgRegistrationSuccessInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgRegistrationSuccessInetAddress.setDescription('The media gateway has successfully registered with a controller. This trap is identical to cmgRegistrationSuccess but with INET Address varbind instead of IPv4 varbind.')
cmgRegistrationFaultInetAddress = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 152)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgMgpFaultMask"), ("G700-MG-MIB", "cmgActiveControllerInetAddressType"), ("G700-MG-MIB", "cmgActiveControllerInetAddress"), ("G700-MG-MIB", "cmgProductId"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgRegistrationFaultInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgRegistrationFaultInetAddress.setDescription('The media gateway cannot register with any controller in its controller list. This trap is identical to cmgRegistrationFault but with INET Address varbind instead of IPv4 varbind.')
cmgDs1Layer2Down = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 153)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapModule"))
if mibBuilder.loadTexts: cmgDs1Layer2Down.setStatus('current')
if mibBuilder.loadTexts: cmgDs1Layer2Down.setDescription('ISDN Layer-2 is down on a Ds1.')
cmgDs1Layer2Up = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 154)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapModule"))
if mibBuilder.loadTexts: cmgDs1Layer2Up.setStatus('current')
if mibBuilder.loadTexts: cmgDs1Layer2Up.setDescription('ISDN Layer-2 is established on a Ds1.')
cmgFipsErrorMode = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 155)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapModule"), ("G700-MG-MIB", "cmgFipsErrorType"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgFipsErrorMode.setStatus('current')
if mibBuilder.loadTexts: cmgFipsErrorMode.setDescription('The Gateway is in FIPS error mode.')
cmgCertErrorCertRevoked = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 156)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgCertErrorCertRevoked.setStatus('current')
if mibBuilder.loadTexts: cmgCertErrorCertRevoked.setDescription('A Gateway TLS Certificate was revoked.')
cmgCrlAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 157)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgCrlAccessDenied.setStatus('current')
if mibBuilder.loadTexts: cmgCrlAccessDenied.setDescription('The Gateway could not access a Certificate Revocation List.')
cmgCrlFileSize = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 158)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgCrlFileSize.setStatus('current')
if mibBuilder.loadTexts: cmgCrlFileSize.setDescription('The Gateway could not download a Certificate Revocation List due to filesystem limitations.')
cmgCertErrorCertExpired = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 159)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgCertErrorCertExpired.setStatus('current')
if mibBuilder.loadTexts: cmgCertErrorCertExpired.setDescription('A Gateway TLS Certificate has expired.')
cmgCertErrorNearExpiry = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 160)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgCertErrorNearExpiry.setStatus('current')
if mibBuilder.loadTexts: cmgCertErrorNearExpiry.setDescription('A Gateway TLS Certificate is near expiry and should be updated.')
cmgCertErrorIdAuthentication = NotificationType((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 5, 2, 2, 0, 161)).setObjects(("G700-MG-MIB", "cmgTrapSubsystem"), ("G700-MG-MIB", "cmgTrapOnBoard"), ("G700-MG-MIB", "cmgTrapLocation"), ("G700-MG-MIB", "cmgTrapSeverity"))
if mibBuilder.loadTexts: cmgCertErrorIdAuthentication.setStatus('current')
if mibBuilder.loadTexts: cmgCertErrorIdAuthentication.setDescription('A Gateway TLS Certificate could not be authenticated')
cmgContactClosuresTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1), )
if mibBuilder.loadTexts: cmgContactClosuresTable.setStatus('current')
if mibBuilder.loadTexts: cmgContactClosuresTable.setDescription(' This table is used for managing contact closure adjunct port. The adjunct box contains two relays. ')
cmgContactClosuresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgCcModule"), (0, "G700-MG-MIB", "cmgCcPort"), (0, "G700-MG-MIB", "cmgCcRelay"))
if mibBuilder.loadTexts: cmgContactClosuresEntry.setStatus('current')
if mibBuilder.loadTexts: cmgContactClosuresEntry.setDescription('')
cmgCcModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCcModule.setStatus('current')
if mibBuilder.loadTexts: cmgCcModule.setDescription('')
cmgCcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCcPort.setStatus('current')
if mibBuilder.loadTexts: cmgCcPort.setDescription('')
cmgCcRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCcRelay.setStatus('current')
if mibBuilder.loadTexts: cmgCcRelay.setDescription('Each contact closure port can control two relays on the adjunct')
cmgCcAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manualTrigger", 2), ("manualOff", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgCcAdminState.setStatus('current')
if mibBuilder.loadTexts: cmgCcAdminState.setDescription(' The admin state of the contact-closure where: Auto(1): The Contact Closure is controlled by the call Controller. Trigger(2): The contact closure relay is triggered. Off(3): The contact closure relay is off (not triggered). ')
cmgCcPulseDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgCcPulseDuration.setStatus('current')
if mibBuilder.loadTexts: cmgCcPulseDuration.setDescription(' The number of second the relay is triggred after each pulse activation signal is received from the call-controller. ')
cmgCcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("triggered", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgCcStatus.setStatus('current')
if mibBuilder.loadTexts: cmgCcStatus.setDescription(' The actual contact closure relay state ')
cmgETRTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1), )
if mibBuilder.loadTexts: cmgETRTable.setStatus('current')
if mibBuilder.loadTexts: cmgETRTable.setDescription('Emergency Transfer Function Table (short circuit Line and Trunk ports in case of call-controller connectivity problems)')
cmgETREntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1, 1), ).setIndexNames((0, "G700-MG-MIB", "cmgEtrModule"))
if mibBuilder.loadTexts: cmgETREntry.setStatus('current')
if mibBuilder.loadTexts: cmgETREntry.setDescription('')
cmgEtrModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgEtrModule.setStatus('current')
if mibBuilder.loadTexts: cmgEtrModule.setDescription('Module number - 10 on G450')
cmgEtrAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("on", 2), ("off", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgEtrAdminState.setStatus('current')
if mibBuilder.loadTexts: cmgEtrAdminState.setDescription("Module's ETR administration state where: off(1): ETR is turned off without checking if there is an active call among trunk-line port pairs auto(2): ETR is turned off as soon as the module is operational (controlled by a call controller) on(3): ETR is never turned off")
cmgEtrNumberOfPairs = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgEtrNumberOfPairs.setStatus('current')
if mibBuilder.loadTexts: cmgEtrNumberOfPairs.setDescription('The number of ETR TRUNK-LINE pairs')
cmgEtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgEtrStatus.setStatus('current')
if mibBuilder.loadTexts: cmgEtrStatus.setDescription('The current status of the ETR function')
cmgEtrCurrentLoopDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 7, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgEtrCurrentLoopDetect.setStatus('current')
if mibBuilder.loadTexts: cmgEtrCurrentLoopDetect.setDescription('Each bit in the bit-mask represents a current-loop-detector of one trunk-line ETR pairs. The bit is set when current is detected')
cmgDynCacStatus = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("active", 1), ("notConfigured", 2), ("notArmed", 3), ("armedNotConfigured", 4), ("notSupported", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDynCacStatus.setStatus('current')
if mibBuilder.loadTexts: cmgDynCacStatus.setDescription('Dynamic CAC status')
cmgDynCacRBBL = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDynCacRBBL.setStatus('current')
if mibBuilder.loadTexts: cmgDynCacRBBL.setDescription('The last Reported BBL value sent to the MGC')
cmgDynCacLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 8, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgDynCacLastUpdate.setStatus('current')
if mibBuilder.loadTexts: cmgDynCacLastUpdate.setDescription("The last time (sysUpTime) a 'dynamic CAC' event was sent to the MGC")
cmgSLAMonitorState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgSLAMonitorState.setStatus('current')
if mibBuilder.loadTexts: cmgSLAMonitorState.setDescription('The current state of the SLA Monitor.')
cmgSLAMonitorServerInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgSLAMonitorServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: cmgSLAMonitorServerInetAddressType.setDescription('The IP address type (IPv4 or IPv6) of this SLA Monitor server.')
cmgSLAMonitorServerInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgSLAMonitorServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: cmgSLAMonitorServerInetAddress.setDescription('The IPv4 or IPv6 address of the SLA Monitor server.')
cmgSLAMonitorServerPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgSLAMonitorServerPort.setStatus('current')
if mibBuilder.loadTexts: cmgSLAMonitorServerPort.setDescription('The SLA Monitor server port.')
cmgSLAMonitorPacketCaptureMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("withoutPayload", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmgSLAMonitorPacketCaptureMode.setStatus('current')
if mibBuilder.loadTexts: cmgSLAMonitorPacketCaptureMode.setDescription('The SLA Monitor packet capture mode.')
cmgSLAMonitorVersion = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 9, 1, 9, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmgSLAMonitorVersion.setStatus('current')
if mibBuilder.loadTexts: cmgSLAMonitorVersion.setDescription('The SLA Monitor firmware version.')
mibBuilder.exportSymbols("G700-MG-MIB", cmgDsuNearEndDataChannelLoopback=cmgDsuNearEndDataChannelLoopback, cmgReset=cmgReset, cmgVoipAvgOccFault=cmgVoipAvgOccFault, cmgVoipChannelsInUse=cmgVoipChannelsInUse, cmgTimeslotUpperThreshold=cmgTimeslotUpperThreshold, cmgProductId=cmgProductId, cmgSyncWarnClear=cmgSyncWarnClear, cmgDsuInvertTxC=cmgDsuInvertTxC, cmgCcRelay=cmgCcRelay, cmgDsuInvertTxD=cmgDsuInvertTxD, cmgDsuTestTable=cmgDsuTestTable, cmgProcessorQos=cmgProcessorQos, cmgVoipStaticInetAddress=cmgVoipStaticInetAddress, cmgNoControllerClear=cmgNoControllerClear, cmgModuleParameterClear=cmgModuleParameterClear, cmgETRTable=cmgETRTable, cmgDhcpSson=cmgDhcpSson, cmgIccMissingClear=cmgIccMissingClear, cmgActiveClockSource=cmgActiveClockSource, cmgExpansionSlot=cmgExpansionSlot, cmgCcPulseDuration=cmgCcPulseDuration, cmgEtrModule=cmgEtrModule, cmgAnalogTransmitGain=cmgAnalogTransmitGain, cmgPowerVoipComplex=cmgPowerVoipComplex, cmgTestThresholdFault=cmgTestThresholdFault, cmgSyncSignalWarn=cmgSyncSignalWarn, cmgPrimaryControllerFault=cmgPrimaryControllerFault, cmgPsuFanProlongedFault=cmgPsuFanProlongedFault, cmgModules=cmgModules, cmgMgAutoReset=cmgMgAutoReset, cmgCrlAccessDenied=cmgCrlAccessDenied, cmgModuleDescription=cmgModuleDescription, cmgVoipIpConfigClear=cmgVoipIpConfigClear, cmgDsuRing=cmgDsuRing, cmgDsuYellowAlarmAction=cmgDsuYellowAlarmAction, cmgPrimaryClockSource=cmgPrimaryClockSource, cmgSLAMonitorVersion=cmgSLAMonitorVersion, cmgClockSourceControl=cmgClockSourceControl, cmgModuleHWSuffix=cmgModuleHWSuffix, cmgHWType=cmgHWType, cmgVoipAverageOccupancy=cmgVoipAverageOccupancy, cmgVoipSlot=cmgVoipSlot, cmgPsuFanProlongedClear=cmgPsuFanProlongedClear, cmgAnalogPort=cmgAnalogPort, cmgModulePostFault=cmgModulePostFault, cmgFirmwareDownloadWarning=cmgFirmwareDownloadWarning, cmgAnalogReceiveGain=cmgAnalogReceiveGain, cmgDynCacStatus=cmgDynCacStatus, cmgCcPort=cmgCcPort, cmgDSPCoreCoreId=cmgDSPCoreCoreId, cmgRegistrationFault=cmgRegistrationFault, cmgModuleParameterFault=cmgModuleParameterFault, cmgTrapManagerMask=cmgTrapManagerMask, cmgDspPowerFault=cmgDspPowerFault, cmgTrapLocation=cmgTrapLocation, cmgVoipCurrentIpAddress=cmgVoipCurrentIpAddress, cmgVoipFaultMask=cmgVoipFaultMask, cmgVoipAdminState=cmgVoipAdminState, cmgMgpFaultMask=cmgMgpFaultMask, cmgSecondaryClockSource=cmgSecondaryClockSource, cmgTrapSeverity=cmgTrapSeverity, PYSNMP_MODULE_ID=cmgmib, cmgVoipCurrentInetAddressType=cmgVoipCurrentInetAddressType, cmgExpansionUnits=cmgExpansionUnits, cmgDSPCoreDemandTest=cmgDSPCoreDemandTest, cmgVoipLocalRsvpProfile=cmgVoipLocalRsvpProfile, cmgStatic802Vlan=cmgStatic802Vlan, cmgExpansionDemandTestResult=cmgExpansionDemandTestResult, cmgTestFault=cmgTestFault, cmgDsuRemoteLoopback=cmgDsuRemoteLoopback, cmgContactClosuresTable=cmgContactClosuresTable, cmgDSPCoreAdminState=cmgDSPCoreAdminState, cmgSLAMonitorState=cmgSLAMonitorState, cmgMgpPowerClear=cmgMgpPowerClear, cmgVoipRemoteRtcpMonitorInetAddressType=cmgVoipRemoteRtcpMonitorInetAddressType, cmgDsu=cmgDsu, cmgDsuLocalDteLoopback=cmgDsuLocalDteLoopback, cmgMemoryFault=cmgMemoryFault, cmgHWVintage=cmgHWVintage, cmgVoipAutoResetClear=cmgVoipAutoResetClear, cmgCurrentInetAddressType=cmgCurrentInetAddressType, cmgModuleTable=cmgModuleTable, cmgVoipRemoteRtcpParameters=cmgVoipRemoteRtcpParameters, cmgDnsServerList=cmgDnsServerList, cmgTrapManagerTable=cmgTrapManagerTable, cmgDsuDataRate=cmgDsuDataRate, cmgVoipLocalRtcpParameters=cmgVoipLocalRtcpParameters, cmgModuleAutoResetClear=cmgModuleAutoResetClear, cmgFipsErrorType=cmgFipsErrorType, cmgDSPCoreTotalChannels=cmgDSPCoreTotalChannels, cmgCpuTempShutdownThresh=cmgCpuTempShutdownThresh, cmgVoipIpConfigFault=cmgVoipIpConfigFault, cmgDynamicCAC=cmgDynamicCAC, cmgVoipDspStatus=cmgVoipDspStatus, cmgActiveControllerInetAddressType=cmgActiveControllerInetAddressType, cmgVoipQosControl=cmgVoipQosControl, cmgTimeslotOccupancyClear=cmgTimeslotOccupancyClear, cmgUseDhcpForIpAddress=cmgUseDhcpForIpAddress, cmgDsuTestEntry=cmgDsuTestEntry, cmgTransitionPoint=cmgTransitionPoint, cmgMemoryClear=cmgMemoryClear, cmgDs1Layer2Up=cmgDs1Layer2Up, cmgIccAutoReset=cmgIccAutoReset, cmgVoipRemoteRtcpEnabled=cmgVoipRemoteRtcpEnabled, cmgVoipOccClear=cmgVoipOccClear, cmgVoipEchoCancellerConfig1=cmgVoipEchoCancellerConfig1, cmgModuleStatusMask=cmgModuleStatusMask, cmgConfigDownloadFault=cmgConfigDownloadFault, cmgModuleList=cmgModuleList, cmgPsuFanBriefFault=cmgPsuFanBriefFault, cmgVoipLocal802Priority=cmgVoipLocal802Priority, cmgTrapOnBoard=cmgTrapOnBoard, cmgDsuInvertRxC=cmgDsuInvertRxC, cmgLocalSigDscp=cmgLocalSigDscp, cmgDsuChannelAssignments=cmgDsuChannelAssignments, cmgVoipAutoReset=cmgVoipAutoReset, cmgHardwareFaultMask=cmgHardwareFaultMask, cmgDsuLL=cmgDsuLL, cmgVoipTotalChannels=cmgVoipTotalChannels, cmgVoipEngineUseDhcp=cmgVoipEngineUseDhcp, cmgNoControllerFault=cmgNoControllerFault, cmgTraps=cmgTraps, cmgVoipRemoteRetryOnFailure=cmgVoipRemoteRetryOnFailure, cmgTimeslotAvailabilityClear=cmgTimeslotAvailabilityClear, cmgLocalSig802Priority=cmgLocalSig802Priority, cmgDsuPort=cmgDsuPort, cmgCpuTempWarningThresh=cmgCpuTempWarningThresh, cmgH248LinkDown=cmgH248LinkDown, cmgDspTempShutdownThresh=cmgDspTempShutdownThresh, cmgVoipJitterBufferSize=cmgVoipJitterBufferSize, cmgDsuFaultMask=cmgDsuFaultMask, cmgDsuDTR=cmgDsuDTR, cmgVoipLocalBbeDscp=cmgVoipLocalBbeDscp, cmgDynCacLastUpdate=cmgDynCacLastUpdate, cmgDsuFlowControl=cmgDsuFlowControl, cmgExpansionUnitsTable=cmgExpansionUnitsTable, cmgFirmwareDownloadSuccess=cmgFirmwareDownloadSuccess, cmgVoipLocalQosParameters=cmgVoipLocalQosParameters, cmgDsuLoopbackPattern=cmgDsuLoopbackPattern, cmgAnalogEchoCancellerControl=cmgAnalogEchoCancellerControl, cmgDsuDteDtrClear=cmgDsuDteDtrClear, cmgCertErrorCertExpired=cmgCertErrorCertExpired, cmgAnalogPorts=cmgAnalogPorts, cmgVoipRemoteParameters=cmgVoipRemoteParameters, cmgFWVersion=cmgFWVersion, cmgExpansionDemandTest=cmgExpansionDemandTest, cmgDsuAutoResetClear=cmgDsuAutoResetClear, cmgConfigDownloadBegun=cmgConfigDownloadBegun, cmgDhcpControllerHosts=cmgDhcpControllerHosts, cmgTrapModule=cmgTrapModule, cmgChassis=cmgChassis, cmgVoipLocalRtcpMonitorInetAddress=cmgVoipLocalRtcpMonitorInetAddress, cmgDSPCoreChannelsInUse=cmgDSPCoreChannelsInUse, cmgModuleInsertSuccess=cmgModuleInsertSuccess, cmgIccMissingFault=cmgIccMissingFault, cmgTimeslotLowerThreshold=cmgTimeslotLowerThreshold, g700MediaGatewayMIB=g700MediaGatewayMIB, cmgCpuTempWarningClear=cmgCpuTempWarningClear, cmgModuleFWVersion=cmgModuleFWVersion, cmgPrimarySearchTime=cmgPrimarySearchTime, cmgCcStatus=cmgCcStatus, cmgDsuTestMode=cmgDsuTestMode, cmgETREntry=cmgETREntry, cmgDsuRL=cmgDsuRL, cmgVoipRemoteMinRtpPort=cmgVoipRemoteMinRtpPort, cmgTempShutdownFault=cmgTempShutdownFault, cmgModuleEntry=cmgModuleEntry, cmgVoipRemoteRtcpReportPeriod=cmgVoipRemoteRtcpReportPeriod, cmgExpansionHWSuffix=cmgExpansionHWSuffix, cmgVoip=cmgVoip, cmgDsuDteDtrFault=cmgDsuDteDtrFault, cmgProcessRestartClear=cmgProcessRestartClear, cmgRemoteSigDscp=cmgRemoteSigDscp, cmgCurrent802Vlan=cmgCurrent802Vlan, cmgStaticControllerHosts=cmgStaticControllerHosts, cmg8260PowerClear=cmg8260PowerClear, cmgSerialNumber=cmgSerialNumber, cmgExpansionDescription=cmgExpansionDescription, cmgSyncSignalClear=cmgSyncSignalClear, cmgEtrStatus=cmgEtrStatus, cmgTotalSearchTime=cmgTotalSearchTime, cmgDataModuleAwohConflict=cmgDataModuleAwohConflict, cmgExpansions=cmgExpansions, cmgVoipCoreClear=cmgVoipCoreClear, cmgDsuInvertRxD=cmgDsuInvertRxD, cmgUnsupportedMmEnrolement=cmgUnsupportedMmEnrolement, cmgDsuTxDFault=cmgDsuTxDFault, cmgVoipStaticInetAddressType=cmgVoipStaticInetAddressType, cmgDsuRxDFailure=cmgDsuRxDFailure, cmgAuxPowerFault=cmgAuxPowerFault, cmgFirmwareDownloadBegun=cmgFirmwareDownloadBegun, cmgDspTempWarningFault=cmgDspTempWarningFault, cmgVoipLocalParameters=cmgVoipLocalParameters, cmgVoipLocalRetryOnFailure=cmgVoipLocalRetryOnFailure, cmgTimeslotOccupancyFault=cmgTimeslotOccupancyFault, cmgDSPCoreStatus=cmgDSPCoreStatus, cmgVoipMACAddress=cmgVoipMACAddress, cmgTimeslotAvailabilityFault=cmgTimeslotAvailabilityFault, cmgProcessorConfig=cmgProcessorConfig, cmgModuleFaultMask=cmgModuleFaultMask, cmgPsuFanBriefClear=cmgPsuFanBriefClear, CmgItuPerceivedSeverity=CmgItuPerceivedSeverity, cmgModuleHWVintage=cmgModuleHWVintage, cmgConfigUploadSuccess=cmgConfigUploadSuccess, cmgTrapVariables=cmgTrapVariables, cmgDsuPortStatusEntry=cmgDsuPortStatusEntry, cmgGatewayNumber=cmgGatewayNumber, cmgTrapManagerEntry=cmgTrapManagerEntry, cmgSLAMonitor=cmgSLAMonitor, cmgDnsHostname=cmgDnsHostname, cmgDsuFpgaConfigureFault=cmgDsuFpgaConfigureFault, cmgAnalogSlot=cmgAnalogSlot, cmgUseDhcpForMgcList=cmgUseDhcpForMgcList, cmgHWSuffix=cmgHWSuffix, cmgDspTemp=cmgDspTemp, cmgDsuReset=cmgDsuReset, cmgVoipPowerFault=cmgVoipPowerFault, cmgDhcpRequestFault=cmgDhcpRequestFault, cmgCertErrorIdAuthentication=cmgCertErrorIdAuthentication, cmgVoipLocalRetryDelay=cmgVoipLocalRetryDelay, cmgVoipCoreFault=cmgVoipCoreFault, cmgVoipDSPCoreEntry=cmgVoipDSPCoreEntry, cmgVoipHyperactivity=cmgVoipHyperactivity, cmgTrapV3separator=cmgTrapV3separator, cmgHardwareFanLowSpeedLevel=cmgHardwareFanLowSpeedLevel, cmgTrapSubsystem=cmgTrapSubsystem, cmgVoipRemoteBbeDscp=cmgVoipRemoteBbeDscp, cmgModuleNumberOfChannels=cmgModuleNumberOfChannels, cmgTrapTypes=cmgTrapTypes, cmgMultipleFanFault=cmgMultipleFanFault, cmgDspTempWarningClear=cmgDspTempWarningClear, cmgCertErrorNearExpiry=cmgCertErrorNearExpiry, cmgTrapManagerAddress=cmgTrapManagerAddress, cmgVoipLocalMinRtpPort=cmgVoipLocalMinRtpPort, cmgIccAutoResetClear=cmgIccAutoResetClear, cmgActiveControllerInetAddress=cmgActiveControllerInetAddress, cmgDsuRxDClear=cmgDsuRxDClear, cmgVoipOccFault=cmgVoipOccFault, cmgVoipRemoteQosParameters=cmgVoipRemoteQosParameters, cmgMgpPowerFault=cmgMgpPowerFault, cmgDsuNetworkInitiatedLoopback=cmgDsuNetworkInitiatedLoopback, cmg8260PowerFault=cmg8260PowerFault, cmgControllers=cmgControllers, mibs=mibs, cmgDsuPortInitiatedLoopback=cmgDsuPortInitiatedLoopback, cmgDsuStatusMask=cmgDsuStatusMask, cmgAuxPowerClear=cmgAuxPowerClear, cmgVoipRemoteRtcpMonitorIpAddress=cmgVoipRemoteRtcpMonitorIpAddress, cmgVoipHardwareClear=cmgVoipHardwareClear, cmgVoipRemoteEfDscp=cmgVoipRemoteEfDscp, cmgAnalogEchoCancellerConfig2=cmgAnalogEchoCancellerConfig2, cmgDs1Layer2Down=cmgDs1Layer2Down, cmgQosControl=cmgQosControl, cmgVoipRemoteRsvpProfile=cmgVoipRemoteRsvpProfile)
mibBuilder.exportSymbols("G700-MG-MIB", cmgVoipEngineTable=cmgVoipEngineTable, cmgDspPowerClear=cmgDspPowerClear, cmgDspTempWarningThresh=cmgDspTempWarningThresh, cmgVoipRemoteRtcpMonitorPort=cmgVoipRemoteRtcpMonitorPort, cmgTrapInUseTimeslots=cmgTrapInUseTimeslots, cmgCpuTempWarningFault=cmgCpuTempWarningFault, cmgTrapManagerRowStatus=cmgTrapManagerRowStatus, cmgStaticIpAddress=cmgStaticIpAddress, cmgDsuFpgaConfigureClear=cmgDsuFpgaConfigureClear, cmgVoipDSPCoreTable=cmgVoipDSPCoreTable, cmgVoipRemoteMaxRtpPort=cmgVoipRemoteMaxRtpPort, cmgRegistrationFaultInetAddress=cmgRegistrationFaultInetAddress, cmgVoipLocalMaxRtpPort=cmgVoipLocalMaxRtpPort, cmgSyncSignalExcess=cmgSyncSignalExcess, cmgModuleInsertFault=cmgModuleInsertFault, cmgModuleReset=cmgModuleReset, cmgVoipPowerClear=cmgVoipPowerClear, cmgVoipRemoteRtcpMonitorInetAddress=cmgVoipRemoteRtcpMonitorInetAddress, cmgPowerDsp=cmgPowerDsp, cmgFanPowerFault=cmgFanPowerFault, products=products, cmgDynCacRBBL=cmgDynCacRBBL, avaya=avaya, cmgH248LinkUp=cmgH248LinkUp, cmgDsuManualReset=cmgDsuManualReset, cmgAnalogPortTable=cmgAnalogPortTable, cmgVoipLocalRtcpMonitorPort=cmgVoipLocalRtcpMonitorPort, g700MediaGateway=g700MediaGateway, cmgDsuRTS=cmgDsuRTS, cmgSLAMonitorPacketCaptureMode=cmgSLAMonitorPacketCaptureMode, cmgVoipRemoteRsvpParameters=cmgVoipRemoteRsvpParameters, cmgSyncSignalFault=cmgSyncSignalFault, cmgModulePostClear=cmgModulePostClear, cmgDsuPortEnable=cmgDsuPortEnable, cmgTimeslotMonitoring=cmgTimeslotMonitoring, cmgActiveControllerSoftwareVersion=cmgActiveControllerSoftwareVersion, cmgCcModule=cmgCcModule, cmgFirmwareDownloadFault=cmgFirmwareDownloadFault, cmgEtrAdminState=cmgEtrAdminState, cmgProcessRestart=cmgProcessRestart, cmgModuleSerialNumber=cmgModuleSerialNumber, CmgModuleSlot=CmgModuleSlot, cmgUseDhcpForVlan=cmgUseDhcpForVlan, cmgVoipLocalRtcpEnabled=cmgVoipLocalRtcpEnabled, cmgModuleManualReset=cmgModuleManualReset, cmgVoipRemoteRtcpMonitorPortInetAddress=cmgVoipRemoteRtcpMonitorPortInetAddress, cmgCpuTemp=cmgCpuTemp, cmgMediaModulePowerClear=cmgMediaModulePowerClear, cmgPowerMgProcessor=cmgPowerMgProcessor, cmgAnalogEchoCancellerConfig1=cmgAnalogEchoCancellerConfig1, cmgDsuFarEndDataChannelLoopback=cmgDsuFarEndDataChannelLoopback, cmgVoipHardwareFault=cmgVoipHardwareFault, cmgDsuTxDClear=cmgDsuTxDClear, cmgHardware=cmgHardware, cmgVoipTotalChannelsEnforcedByCM=cmgVoipTotalChannelsEnforcedByCM, cmgTrapDefinitions=cmgTrapDefinitions, cmgTrapAvailableTimeslots=cmgTrapAvailableTimeslots, cmgContactClosuresEntry=cmgContactClosuresEntry, cmgExpansionModelNumber=cmgExpansionModelNumber, cmgConfigUploadFault=cmgConfigUploadFault, cmgClockSwitching=cmgClockSwitching, cmgModuleRemove=cmgModuleRemove, cmgDsuDSR=cmgDsuDSR, cmgConfigUploadBegun=cmgConfigUploadBegun, cmgVoipEngineEntry=cmgVoipEngineEntry, cmgH248LinkStatus=cmgH248LinkStatus, cmgDsuConfigTable=cmgDsuConfigTable, cmgDsuCTS=cmgDsuCTS, cmgVoipLocalRsvpParameters=cmgVoipLocalRsvpParameters, cmgVoipEchoCancellerConfig2=cmgVoipEchoCancellerConfig2, cmgAnalogPortEntry=cmgAnalogPortEntry, cmgModuleSlot=cmgModuleSlot, cmgDsuReceiveClock=cmgDsuReceiveClock, cmgVoipRemote802Priority=cmgVoipRemote802Priority, cmgVoipEchoCancellerControl=cmgVoipEchoCancellerControl, cmgDsuAutoReset=cmgDsuAutoReset, cmgPower8260=cmgPower8260, cmgVoipRemoteRsvpEnabled=cmgVoipRemoteRsvpEnabled, cmgDsuRLSD=cmgDsuRLSD, cmgCrlFileSize=cmgCrlFileSize, cmgPrimaryControllerClear=cmgPrimaryControllerClear, cmgVoipCurrentInetAddress=cmgVoipCurrentInetAddress, cmgDhcpRequestClear=cmgDhcpRequestClear, cmgDsuDteRtsFault=cmgDsuDteRtsFault, cmgDsuDataFormat=cmgDsuDataFormat, cmgDsuRxD=cmgDsuRxD, cmgMediaModulePowerFault=cmgMediaModulePowerFault, cmgRegistrationSuccess=cmgRegistrationSuccess, cmgH248LinkErrorCode=cmgH248LinkErrorCode, cmgModuleName=cmgModuleName, cmgDsuPortStatusTable=cmgDsuPortStatusTable, cmgFipsErrorMode=cmgFipsErrorMode, cmgRegistrationSuccessInetAddress=cmgRegistrationSuccessInetAddress, cmgModuleType=cmgModuleType, cmgMgManualReset=cmgMgManualReset, cmgHardwareStatusMask=cmgHardwareStatusMask, cmgVoipAvgOccClear=cmgVoipAvgOccClear, cmgDSPCoreDemandTestResult=cmgDSPCoreDemandTestResult, cmgVoipLocalRtcpMonitorPortInetAddress=cmgVoipLocalRtcpMonitorPortInetAddress, cmgActiveControllerAddress=cmgActiveControllerAddress, cmgCurrentInetAddress=cmgCurrentInetAddress, cmgVoipLocalRtcpMonitorInetAddressType=cmgVoipLocalRtcpMonitorInetAddressType, cmgDsuDataTerminalLoopback=cmgDsuDataTerminalLoopback, cmgPowerMediaModules=cmgPowerMediaModules, cmgDsuDteRtsClear=cmgDsuDteRtsClear, cmgRegistrationState=cmgRegistrationState, cmgVoipStaticIpAddress=cmgVoipStaticIpAddress, cmgMgRelease=cmgMgRelease, cmgVoipDspFWVersion=cmgVoipDspFWVersion, cmgEtrCurrentLoopDetect=cmgEtrCurrentLoopDetect, cmgmib=cmgmib, cmgVoipLocalEfDscp=cmgVoipLocalEfDscp, cmgCertErrorCertRevoked=cmgCertErrorCertRevoked, cmgSLAMonitorServerInetAddressType=cmgSLAMonitorServerInetAddressType, cmgVoipEngineReset=cmgVoipEngineReset, cmgExpansionHWVintage=cmgExpansionHWVintage, cmgMACAddress=cmgMACAddress, cmgTrapManagerControl=cmgTrapManagerControl, cmgProcessorClock=cmgProcessorClock, cmgRemoteSig802Priority=cmgRemoteSig802Priority, cmgSLAMonitorServerInetAddress=cmgSLAMonitorServerInetAddress, cmgEtrNumberOfPairs=cmgEtrNumberOfPairs, cmgMultipleFanClear=cmgMultipleFanClear, cmgDescription=cmgDescription, cmgContactClosures=cmgContactClosures, cmgCcAdminState=cmgCcAdminState, cmgTestClear=cmgTestClear, cmgTestThresholdClear=cmgTestThresholdClear, cmgTrapOnIccMissing=cmgTrapOnIccMissing, cmgDsuSlot=cmgDsuSlot, cmgVoipLocalRtcpReportPeriod=cmgVoipLocalRtcpReportPeriod, cmgFanPowerClear=cmgFanPowerClear, cmgETR=cmgETR, cmgExpansionSerialNumber=cmgExpansionSerialNumber, cmgProcessor=cmgProcessor, cmgSLAMonitorServerPort=cmgSLAMonitorServerPort, cmgCurrentIpAddress=cmgCurrentIpAddress, cmgVoipLocalRsvpEnabled=cmgVoipLocalRsvpEnabled, cmgMgBusyout=cmgMgBusyout, cmgVoipManualReset=cmgVoipManualReset, cmgAnalogBalance=cmgAnalogBalance, cmgConfigDownloadSuccess=cmgConfigDownloadSuccess, cmgModuleNumberOfPorts=cmgModuleNumberOfPorts, cmgVoipRemoteRetryDelay=cmgVoipRemoteRetryDelay, cmgModuleAutoReset=cmgModuleAutoReset, cmgVoipLocalRtcpMonitorIpAddress=cmgVoipLocalRtcpMonitorIpAddress, cmgSyncExcessClear=cmgSyncExcessClear, cmgStackPosition=cmgStackPosition, cmgDsuConfigEntry=cmgDsuConfigEntry, cmgDsuTxD=cmgDsuTxD, cmgModelNumber=cmgModelNumber)
