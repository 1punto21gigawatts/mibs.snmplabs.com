#
# PySNMP MIB module BTI-OL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BTI-OL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
olEvtNotifications, condObjectType, condDateAndTime, condCodeType, trapSeqNum, tcaMontype, olCondNotifications, condServiceAffecting, tcaThreshold, opticalLayer, evtCodeType, tcaIntervalType, evtObjectType, tcaDateAndTime, condDescription, evtDescription, condSeverity, evtDateAndTime, tcaValue, condReportType = mibBuilder.importSymbols("BTI-7000-MIB", "olEvtNotifications", "condObjectType", "condDateAndTime", "condCodeType", "trapSeqNum", "tcaMontype", "olCondNotifications", "condServiceAffecting", "tcaThreshold", "opticalLayer", "evtCodeType", "tcaIntervalType", "evtObjectType", "tcaDateAndTime", "condDescription", "evtDescription", "condSeverity", "evtDateAndTime", "tcaValue", "condReportType")
btiModules, = mibBuilder.importSymbols("BTI-MIB", "btiModules")
AdminStatus, CpType, BERType, PMValidity, HoursAndMinutes, FiberType, FixedX100, PMIntervalType, FixedX10, OperStatQlfr, InitializeCmd, OperStatus = mibBuilder.importSymbols("BTI-TC-MIB", "AdminStatus", "CpType", "BERType", "PMValidity", "HoursAndMinutes", "FiberType", "FixedX100", "PMIntervalType", "FixedX10", "OperStatQlfr", "InitializeCmd", "OperStatus")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, Counter64, Counter32, iso, Unsigned32, Bits, ModuleIdentity, Gauge32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "iso", "Unsigned32", "Bits", "ModuleIdentity", "Gauge32", "Integer32")
RowStatus, DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "DateAndTime")
olMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 18070, 1, 6))
olMib.setRevisions(('2012-08-17 12:00', '2012-02-10 12:00', '2011-09-26 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: olMib.setRevisionsDescriptions(('MIB Updates for BTI 7000 Rel 10.1.0: - deleted un-implemented table olDegreeTable - added new traps for Connection Mismatch feature: olPortCondNotification.0.17 - olPortCondNotification.0.20 - added new WCH traps for refined add-channel power monitoring: wchCondNotifications.0.13 - wchCondNotifications.0.18', 'MIB Updates for BTI 7000 Rel 9.2.0: - added new object olPortRemoteId', 'Initial version of the Optical Layer MIB.',))
if mibBuilder.loadTexts: olMib.setLastUpdated('201208171200Z')
if mibBuilder.loadTexts: olMib.setOrganization('BTI Systems Inc.')
if mibBuilder.loadTexts: olMib.setContactInfo('Technical Support BTI Systems Inc. 50 Northside Road Ottawa, Ontario, Canada K2H 5Z6 (613) 248-9154 support@btisystems.com')
if mibBuilder.loadTexts: olMib.setDescription('The external MIB definitions for the managenent of the BTI Dynamic Optical Layer components including DLA-series amplifiers and ROB-series ROADM modules.')
class OlGroupType(TextualConvention, Integer32):
    description = 'Identifies the configuration type of an optical layer grouping.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("noEqlzTerm", 2), ("eqlzTerm", 3), ("noEqlzLine", 4), ("eqlzLine", 5), ("roadm", 6))

class OlPortType(TextualConvention, Integer32):
    description = 'Identifies the type of managed optical interface port on an optical layer module.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("line", 1), ("client", 2), ("dcm", 3), ("channel", 4), ("expansion", 5))

olGroupTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1), )
if mibBuilder.loadTexts: olGroupTable.setStatus('current')
if mibBuilder.loadTexts: olGroupTable.setDescription('This table lists all provisioned optical layer module groupings on the node.')
olGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1), ).setIndexNames((0, "BTI-OL-MIB", "olGroupIdx"))
if mibBuilder.loadTexts: olGroupEntry.setStatus('current')
if mibBuilder.loadTexts: olGroupEntry.setDescription('The conceptual row object of the optical layer group table.')
olGroupIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: olGroupIdx.setStatus('current')
if mibBuilder.loadTexts: olGroupIdx.setDescription('A number which uniquely identifies the optical layer group within the node.')
olGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 2), OlGroupType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olGroupType.setStatus('current')
if mibBuilder.loadTexts: olGroupType.setDescription('The optical layer group configuration type. This is a mandatory object that must be specified when a row of the table is created. The value of none is not applicable for this object.')
olGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olGroupId.setStatus('current')
if mibBuilder.loadTexts: olGroupId.setDescription('Textual data recorded by the user to briefly identify the provisioned optical layer group in a manner useful to the user.')
olGroupCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olGroupCustom1.setStatus('current')
if mibBuilder.loadTexts: olGroupCustom1.setDescription('A variable length text string for operating company use.')
olGroupCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olGroupCustom2.setStatus('current')
if mibBuilder.loadTexts: olGroupCustom2.setDescription('A variable length text string for operating company use.')
olGroupCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olGroupCustom3.setStatus('current')
if mibBuilder.loadTexts: olGroupCustom3.setDescription('A variable length text string for operating company use.')
olGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 1, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: olGroupRowStatus.setDescription('Used to control the addition and deletion of entries in the optical layer group table.')
olEqptTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3), )
if mibBuilder.loadTexts: olEqptTable.setStatus('current')
if mibBuilder.loadTexts: olEqptTable.setDescription('This table lists all provisioned equipment modules that are assigned to an optical layer grouping.')
olEqptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1), ).setIndexNames((0, "BTI-OL-MIB", "olEqptCpTypeIdx"), (0, "BTI-OL-MIB", "olEqptShelfIdx"), (0, "BTI-OL-MIB", "olEqptSlotIdx"))
if mibBuilder.loadTexts: olEqptEntry.setStatus('current')
if mibBuilder.loadTexts: olEqptEntry.setDescription('The conceptual row object of the optical layer equipment table.')
olEqptCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1, 1), CpType())
if mibBuilder.loadTexts: olEqptCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olEqptCpTypeIdx.setDescription('The type of circuit pack of the equipment module that is assigned to the optical layer group.')
olEqptShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olEqptShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olEqptShelfIdx.setDescription('The number of the shelf of the equipment module that is assigned to the optical layer group. For equipment modules that do not reside in a shelf (40-channel Mux/Demux), the value of this object is 0.')
olEqptSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: olEqptSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olEqptSlotIdx.setDescription('The number of the slot of the equipment module that is assigned to the optical layer group. For equipment modules that do not reside in an active shelf slot (ex. 40-channel Mux/Demux), this object represents the module index among modules attributed to shelf 0.')
olEqptGroupNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olEqptGroupNum.setStatus('current')
if mibBuilder.loadTexts: olEqptGroupNum.setDescription('The optical layer group to which the equipment modules is assigned.')
olEqptDegreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olEqptDegreeNum.setStatus('current')
if mibBuilder.loadTexts: olEqptDegreeNum.setDescription('The optical layer group degree to which the equipment module is assigned.')
olEqptRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 3, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olEqptRowStatus.setStatus('current')
if mibBuilder.loadTexts: olEqptRowStatus.setDescription('Used to control the addition and deletion of entries in the optical layer equipment table, which in turn, controls the assigning and unassigning of equipment modules to/from an optical layer grouping.')
olPortTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4), )
if mibBuilder.loadTexts: olPortTable.setStatus('current')
if mibBuilder.loadTexts: olPortTable.setDescription('This table lists all managed ports on equipment modules assigned to optical layer groupings.')
olPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1), ).setIndexNames((0, "BTI-OL-MIB", "olPortCpTypeIdx"), (0, "BTI-OL-MIB", "olPortShelfIdx"), (0, "BTI-OL-MIB", "olPortSlotIdx"), (0, "BTI-OL-MIB", "olPortTypeIdx"), (0, "BTI-OL-MIB", "olPortIdx"))
if mibBuilder.loadTexts: olPortEntry.setStatus('current')
if mibBuilder.loadTexts: olPortEntry.setDescription('The conceptual row object of the optical layer port table.')
olPortCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 1), CpType())
if mibBuilder.loadTexts: olPortCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCpTypeIdx.setDescription('The type of circuit pack on which the optical layer port is located.')
olPortShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olPortShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olPortShelfIdx.setDescription('The number of the shelf on which the optical layer port is located.')
olPortSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: olPortSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olPortSlotIdx.setDescription('The number of the slot on which the optical layer port is located.')
olPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 4), OlPortType())
if mibBuilder.loadTexts: olPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortTypeIdx.setDescription('The type of optical layer port according to the function it provides.')
olPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)))
if mibBuilder.loadTexts: olPortIdx.setStatus('current')
if mibBuilder.loadTexts: olPortIdx.setDescription('The number of the optical layer port of the specified port type.')
olPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortId.setStatus('current')
if mibBuilder.loadTexts: olPortId.setDescription('Textual data recorded by the user to briefly identify the provisioned optical layer port in a manner useful to the user.')
olPortCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortCustom1.setStatus('current')
if mibBuilder.loadTexts: olPortCustom1.setDescription('A variable length text string for operating company use.')
olPortCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 8), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortCustom2.setStatus('current')
if mibBuilder.loadTexts: olPortCustom2.setDescription('A variable length text string for operating company use.')
olPortCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortCustom3.setStatus('current')
if mibBuilder.loadTexts: olPortCustom3.setDescription('A variable length text string for operating company use.')
olPortDWDMType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("native", 1), ("alien", 2))).clone('native')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortDWDMType.setStatus('current')
if mibBuilder.loadTexts: olPortDWDMType.setDescription('Used to configure the port for the type of DWDM composite to which it is inter-connection. By default, all ports are inter-connected with native optical layer DWDM composites. For some configurations, client port 2 of ROB2 pack and ROB4 modules may be configured for alien DWDM type.')
olPortGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ghz100", 1), ("ghz50", 2))).clone('ghz100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortGrid.setStatus('current')
if mibBuilder.loadTexts: olPortGrid.setDescription('The DWDM grid spacing on the port.')
olPortWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 12), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortWavelength.setStatus('current')
if mibBuilder.loadTexts: olPortWavelength.setDescription('The wavelength of the channel carried by the port. This object exists only in table entries for channel ports on Mux/Demux modules.')
olPortFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 13), FixedX100()).setUnits('terahertz/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortFrequency.setStatus('current')
if mibBuilder.loadTexts: olPortFrequency.setDescription('The frequency of the channel carried by the port. This object exists only in table entries for channel ports on Mux/Demux modules.')
olPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: olPortOperStatus.setDescription('The reported operational status of the optical layer port.')
olPortOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 15), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: olPortOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the optical layer port.')
olPortRemoteId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 16), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortRemoteId.setStatus('current')
if mibBuilder.loadTexts: olPortRemoteId.setDescription('Identifies the remote node and port to which the optical layer port is connected, in the format prescribed by the PSM network management system.')
olPortExpCnxDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: olPortExpCnxDegree.setStatus('current')
if mibBuilder.loadTexts: olPortExpCnxDegree.setDescription('The expected degree number of the equipment that is inter-connected on the port.')
olPortActCnxDegree = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: olPortActCnxDegree.setStatus('current')
if mibBuilder.loadTexts: olPortActCnxDegree.setDescription('The actual degree number of the equipment that is inter-connected on the port.')
olPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 4, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: olPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: olPortRowStatus.setDescription('Used to control the addition and deletion of entries in the Optical Layer Port table. Manual creation and deletion is supported only for the client 2 port on ROB packs assigned to a Channel-equalizing Terminal or Reconfigurable Add/Drop node group.')
eqptConnTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5), )
if mibBuilder.loadTexts: eqptConnTable.setStatus('current')
if mibBuilder.loadTexts: eqptConnTable.setDescription('This table lists all intra-group optical fiber patch connections between ports on equipment modules assigned to optical layer groupings.')
eqptConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1), ).setIndexNames((0, "BTI-OL-MIB", "eqptConnSrcCpTypeIdx"), (0, "BTI-OL-MIB", "eqptConnSrcShelfIdx"), (0, "BTI-OL-MIB", "eqptConnSrcSlotIdx"), (0, "BTI-OL-MIB", "eqptConnSrcPortTypeIdx"), (0, "BTI-OL-MIB", "eqptConnSrcIdx"), (0, "BTI-OL-MIB", "eqptConnDstCpTypeIdx"), (0, "BTI-OL-MIB", "eqptConnDstShelfIdx"), (0, "BTI-OL-MIB", "eqptConnDstSlotIdx"), (0, "BTI-OL-MIB", "eqptConnDstPortTypeIdx"), (0, "BTI-OL-MIB", "eqptConnDstIdx"))
if mibBuilder.loadTexts: eqptConnEntry.setStatus('current')
if mibBuilder.loadTexts: eqptConnEntry.setDescription('The conceptual row object of the equipment connection table.')
eqptConnSrcCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 1), CpType())
if mibBuilder.loadTexts: eqptConnSrcCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnSrcCpTypeIdx.setDescription('The type of circuit pack on which the source port of the equipment connection is located.')
eqptConnSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: eqptConnSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnSrcShelfIdx.setDescription('The number of the shelf on which the source port of the equipment connection is located.')
eqptConnSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: eqptConnSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnSrcSlotIdx.setDescription('The number of the slot on which the source port of the equipment connection is located.')
eqptConnSrcPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 4), OlPortType())
if mibBuilder.loadTexts: eqptConnSrcPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnSrcPortTypeIdx.setDescription('The type of the source port of the equipment connection, according to the function it provides.')
eqptConnSrcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)))
if mibBuilder.loadTexts: eqptConnSrcIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnSrcIdx.setDescription('The number of the port of the specified port type of the source port of the equipment connection.')
eqptConnDstCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 6), CpType())
if mibBuilder.loadTexts: eqptConnDstCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnDstCpTypeIdx.setDescription('The type of circuit pack on which the destination port of the equipment connection is located.')
eqptConnDstShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: eqptConnDstShelfIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnDstShelfIdx.setDescription('The number of the shelf on which the destination port of the equipment connection is located.')
eqptConnDstSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: eqptConnDstSlotIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnDstSlotIdx.setDescription('The number of the slot on which the destination port of the equipment connection is located.')
eqptConnDstPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 9), OlPortType())
if mibBuilder.loadTexts: eqptConnDstPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnDstPortTypeIdx.setDescription('The type of the destination port of the equipment connection, according to the function it provides.')
eqptConnDstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)))
if mibBuilder.loadTexts: eqptConnDstIdx.setStatus('current')
if mibBuilder.loadTexts: eqptConnDstIdx.setDescription('The number of the port of the specified port type of the destination port of the equipment connection.')
eqptConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("duplex", 1), ("loopback", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eqptConnType.setStatus('current')
if mibBuilder.loadTexts: eqptConnType.setDescription('The type of optical fiber patch cable for the equipment connection entry.')
eqptConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 5, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: eqptConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: eqptConnRowStatus.setDescription('The equipment connection table RowStatus object is not readable or writeable because all entries in the table are automatically created and deleted as equipment modules are assigned and unassigned to optical layer groupings. This equipment connection row status object is used only in database change notifications to indicate if the row has been created or deleted.')
olOSCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6), )
if mibBuilder.loadTexts: olOSCTable.setStatus('current')
if mibBuilder.loadTexts: olOSCTable.setDescription('This table lists all OSC managed objects that have been created on the optical layer equipment modules.')
olOSCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1), ).setIndexNames((0, "BTI-OL-MIB", "olOSCCpTypeIdx"), (0, "BTI-OL-MIB", "olOSCShelfIdx"), (0, "BTI-OL-MIB", "olOSCSlotIdx"), (0, "BTI-OL-MIB", "olOSCLineIdx"))
if mibBuilder.loadTexts: olOSCEntry.setStatus('current')
if mibBuilder.loadTexts: olOSCEntry.setDescription('The conceptual row object of the optical laye OSC table.')
olOSCCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 1), CpType())
if mibBuilder.loadTexts: olOSCCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCCpTypeIdx.setDescription('The type of circuit pack on which the OSC is located.')
olOSCShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olOSCShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCShelfIdx.setDescription('The number of the shelf in which the OSC is located.')
olOSCSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: olOSCSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCSlotIdx.setDescription('The number of the slot in which the OSC is located.')
olOSCLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: olOSCLineIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCLineIdx.setDescription('The line number of the OSC.')
olOSCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 5), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCAdminStatus.setStatus('current')
if mibBuilder.loadTexts: olOSCAdminStatus.setDescription('The administrative status of the OSC. The default value is autoEnabled if the supporting equipment is enabled or autoEnabled, otherwise it is disabled.')
olOSCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCOperStatus.setStatus('current')
if mibBuilder.loadTexts: olOSCOperStatus.setDescription('The reported operational status of the OSC.')
olOSCOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 7), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: olOSCOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the OSC.')
olOSCAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 8), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: olOSCAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted OSC. This value only applies if the olOSCAdminStatus object is set to autoEnabled, in which case the default value is 008-00, otherwise, it is 000-00.')
olOSCActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 9), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: olOSCActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
olOSCId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCId.setStatus('current')
if mibBuilder.loadTexts: olOSCId.setDescription('Textual data recorded by the user to briefly identify the OSC object in a manner useful to the user.')
olOSCCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCustom1.setStatus('current')
if mibBuilder.loadTexts: olOSCCustom1.setDescription('A variable length text string for operating company use.')
olOSCCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCustom2.setStatus('current')
if mibBuilder.loadTexts: olOSCCustom2.setDescription('A variable length text string for operating company use.')
olOSCCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCustom3.setStatus('current')
if mibBuilder.loadTexts: olOSCCustom3.setDescription('A variable length text string for operating company use.')
olOSCFEIMMon = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCFEIMMon.setStatus('current')
if mibBuilder.loadTexts: olOSCFEIMMon.setDescription('This object is used to control the monitoring of the Far End Node Mismatch Identifier condition. When enabled, the received far-end node identification attributes will be monitored and compared to the expected far-end node identification attribites, and a condition is raised if attributes do no match.')
olOSCExpFESysName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCExpFESysName.setStatus('current')
if mibBuilder.loadTexts: olOSCExpFESysName.setDescription('The expected far-end node system identifier.')
olOSCExpFEIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCExpFEIPAddr.setStatus('current')
if mibBuilder.loadTexts: olOSCExpFEIPAddr.setDescription('The expected far-end node IP address.')
olOSCExpFEGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCExpFEGrp.setStatus('current')
if mibBuilder.loadTexts: olOSCExpFEGrp.setDescription('The expected far-end node optical layer group number.')
olOSCExpFEDegr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCExpFEDegr.setStatus('current')
if mibBuilder.loadTexts: olOSCExpFEDegr.setDescription('The expected far-end node optical layer degree number.')
olOSCFESysName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCFESysName.setStatus('current')
if mibBuilder.loadTexts: olOSCFESysName.setDescription('The actual far-end node system identifier.')
olOSCFEIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 20), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCFEIPAddr.setStatus('current')
if mibBuilder.loadTexts: olOSCFEIPAddr.setDescription('The actual far-end node IP address.')
olOSCFEGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCFEGrp.setStatus('current')
if mibBuilder.loadTexts: olOSCFEGrp.setDescription('The actual far-end node optical layer group number.')
olOSCFEDegr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCFEDegr.setStatus('current')
if mibBuilder.loadTexts: olOSCFEDegr.setDescription('The actual far-end node optical layer degree number.')
olOSCFEGrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 23), OlGroupType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCFEGrpType.setStatus('current')
if mibBuilder.loadTexts: olOSCFEGrpType.setDescription('The actual far-end node optical layer group configuration type.')
olOSCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 6, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: olOSCRowStatus.setStatus('current')
if mibBuilder.loadTexts: olOSCRowStatus.setDescription('The Optical Layer OSC table RowStatus object is not readable or writeable because all entries in the table are automatically created and deleted when the supporting DLA or ROB equipment is provisioned. This optical layer OSC row status object is used only in database change notifications to indicate if the row has been created or deleted.')
odccTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7), )
if mibBuilder.loadTexts: odccTable.setStatus('current')
if mibBuilder.loadTexts: odccTable.setDescription('This table lists all provisioned ODCC objects on equipment modules assigned to optical layer groupings.')
odccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1), ).setIndexNames((0, "BTI-OL-MIB", "odccCpTypeIdx"), (0, "BTI-OL-MIB", "odccShelfIdx"), (0, "BTI-OL-MIB", "odccSlotIdx"), (0, "BTI-OL-MIB", "odccLineIdx"))
if mibBuilder.loadTexts: odccEntry.setStatus('current')
if mibBuilder.loadTexts: odccEntry.setDescription('The conceptual row object of the ODCC table.')
odccCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1, 1), CpType())
if mibBuilder.loadTexts: odccCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: odccCpTypeIdx.setDescription('The type of circuit pack on which the ODCC is located.')
odccShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: odccShelfIdx.setStatus('current')
if mibBuilder.loadTexts: odccShelfIdx.setDescription('The number of the shelf in which the ODCC is located.')
odccSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: odccSlotIdx.setStatus('current')
if mibBuilder.loadTexts: odccSlotIdx.setDescription('The number of the slot in which the ODC is located.')
odccLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: odccLineIdx.setStatus('current')
if mibBuilder.loadTexts: odccLineIdx.setDescription('The line number of the ODCC.')
odccAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1, 5), AdminStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odccAdminStatus.setStatus('current')
if mibBuilder.loadTexts: odccAdminStatus.setDescription('The administrative status of the ODCC. The default value is disabled if the supporting ODC is disabled, otherwise it is enabled.')
odccRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 7, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: odccRowStatus.setStatus('current')
if mibBuilder.loadTexts: odccRowStatus.setDescription('Used to control the addition and deletion of entries in the ODCC table, which in turn controls the provisioning and de-provisioning of ODCC objects.')
wdmTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8), )
if mibBuilder.loadTexts: wdmTable.setStatus('current')
if mibBuilder.loadTexts: wdmTable.setDescription('This table lists all WDM managed objects that have been created on optical layer equipment.')
wdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1), ).setIndexNames((0, "BTI-OL-MIB", "wdmCpTypeIdx"), (0, "BTI-OL-MIB", "wdmShelfIdx"), (0, "BTI-OL-MIB", "wdmSlotIdx"), (0, "BTI-OL-MIB", "wdmLineIdx"))
if mibBuilder.loadTexts: wdmEntry.setStatus('current')
if mibBuilder.loadTexts: wdmEntry.setDescription('The conceptual row object of the WDM table.')
wdmCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 1), CpType())
if mibBuilder.loadTexts: wdmCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wdmCpTypeIdx.setDescription('The type of circuit pack on which the WDM is located.')
wdmShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: wdmShelfIdx.setStatus('current')
if mibBuilder.loadTexts: wdmShelfIdx.setDescription('The number of the shelf in which the WDM is located.')
wdmSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: wdmSlotIdx.setStatus('current')
if mibBuilder.loadTexts: wdmSlotIdx.setDescription('The number of the slot in which the WDM is located.')
wdmLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: wdmLineIdx.setStatus('current')
if mibBuilder.loadTexts: wdmLineIdx.setDescription('The line number of the WDM.')
wdmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 5), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wdmAdminStatus.setDescription('The administrative status of the WDM. The default value is autoEnabled if the supporting equipment is enabled or autoEnabled, otherwise it is disabled.')
wdmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmOperStatus.setStatus('current')
if mibBuilder.loadTexts: wdmOperStatus.setDescription('The reported operational status of the WDM.')
wdmOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 7), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: wdmOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the WDM.')
wdmAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 8), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: wdmAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted WDM. This value only applies if the wdmAdminStatus object is set to autoEnabled, in which case the default value is 008-00, otherwise, it is 000-00.')
wdmActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 9), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: wdmActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
wdmId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmId.setStatus('current')
if mibBuilder.loadTexts: wdmId.setDescription('Textual data recorded by the user to briefly identify the WDM object in a manner useful to the user.')
wdmCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmCustom1.setStatus('current')
if mibBuilder.loadTexts: wdmCustom1.setDescription('A variable length text string for operating company use.')
wdmCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmCustom2.setStatus('current')
if mibBuilder.loadTexts: wdmCustom2.setDescription('A variable length text string for operating company use.')
wdmCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmCustom3.setStatus('current')
if mibBuilder.loadTexts: wdmCustom3.setDescription('A variable length text string for operating company use.')
wdmFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("smf", 1))).clone('smf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmFiberType.setStatus('current')
if mibBuilder.loadTexts: wdmFiberType.setDescription('The fiber type of the span fiber.')
wdmSpanLength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 15), Unsigned32()).setUnits('kilometers').setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmSpanLength.setStatus('current')
if mibBuilder.loadTexts: wdmSpanLength.setDescription('The measured length of the receive span fiber.')
wdmSpanLossRxHighTh = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 16), FixedX10()).setUnits('dB/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdmSpanLossRxHighTh.setStatus('current')
if mibBuilder.loadTexts: wdmSpanLossRxHighTh.setDescription('The high threshold setting for the loss on the receive fiber of the Line span. The setting for this object is used to evaluate the olPortLossRxHighThCond trap. When the value of this object is set to 0, the olPortLossRxHighThCond trap is disabled.')
wdmSpanLossSpecMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 17), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmSpanLossSpecMax.setStatus('current')
if mibBuilder.loadTexts: wdmSpanLossSpecMax.setDescription('The specified maximum supported loss on the Line span. The value of this object is dependent on the optical layer group configurations of the local and far-end nodes.')
wdmNumChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdmNumChannels.setStatus('current')
if mibBuilder.loadTexts: wdmNumChannels.setDescription('The actual number of channels that the WDM is currently provisioned to carry.')
wdmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 8, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wdmRowStatus.setStatus('current')
if mibBuilder.loadTexts: wdmRowStatus.setDescription('The WDM table RowStatus object is not readable or writeable because all entries in the table are automatically created and deleted when the supporting DLA or ROB circuit pack is assigned and unassigned to an optical layer grouping. This WDM row status object is used only in database change notifications to indicate if the row has been created or deleted.')
wchXCTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9), )
if mibBuilder.loadTexts: wchXCTable.setStatus('current')
if mibBuilder.loadTexts: wchXCTable.setDescription('This table lists all configured wavelength channel cross-connections configured on optical layer equipment.')
wchXCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1), ).setIndexNames((0, "BTI-OL-MIB", "wchXCSrcCpTypeIdx"), (0, "BTI-OL-MIB", "wchXCSrcShelfIdx"), (0, "BTI-OL-MIB", "wchXCSrcSlotIdx"), (0, "BTI-OL-MIB", "wchXCSrcPortTypeIdx"), (0, "BTI-OL-MIB", "wchXCSrcPortIdx"), (0, "BTI-OL-MIB", "wchXCSrcChannelIdx"), (0, "BTI-OL-MIB", "wchXCDstCpTypeIdx"), (0, "BTI-OL-MIB", "wchXCDstShelfIdx"), (0, "BTI-OL-MIB", "wchXCDstSlotIdx"), (0, "BTI-OL-MIB", "wchXCDstPortTypeIdx"), (0, "BTI-OL-MIB", "wchXCDstPortIdx"), (0, "BTI-OL-MIB", "wchXCDstChannelIdx"))
if mibBuilder.loadTexts: wchXCEntry.setStatus('current')
if mibBuilder.loadTexts: wchXCEntry.setDescription('The conceptual row object of the wavelength channel cross-connection table.')
wchXCSrcCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 1), CpType())
if mibBuilder.loadTexts: wchXCSrcCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCSrcCpTypeIdx.setDescription('The type of circuit pack on which the source wavelength channel of the cross-connection is located.')
wchXCSrcShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: wchXCSrcShelfIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCSrcShelfIdx.setDescription('The number of the shelf on which the source wavelength channel of the cross-connection is located.')
wchXCSrcSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: wchXCSrcSlotIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCSrcSlotIdx.setDescription('The number of the slot on which the source wavelength channel of the cross-connection is located.')
wchXCSrcPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 4), OlPortType())
if mibBuilder.loadTexts: wchXCSrcPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCSrcPortTypeIdx.setDescription('The type of port on which the source wavelength channel of the cross-connection is located.')
wchXCSrcPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)))
if mibBuilder.loadTexts: wchXCSrcPortIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCSrcPortIdx.setDescription('The number of the port on which the source wavelength channel of the cross-connection is located.')
wchXCSrcChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(135, 610)))
if mibBuilder.loadTexts: wchXCSrcChannelIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCSrcChannelIdx.setDescription('The channel number of the source wavelength channel of the cross-connection.')
wchXCDstCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 7), CpType())
if mibBuilder.loadTexts: wchXCDstCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCDstCpTypeIdx.setDescription('The type of circuit pack on which the destination wavelength channel of the cross-connection is located.')
wchXCDstShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: wchXCDstShelfIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCDstShelfIdx.setDescription('The number of the shelf on which the destination wavelength channel of the cross-connection is located.')
wchXCDstSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: wchXCDstSlotIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCDstSlotIdx.setDescription('The number of the slot on which the destination wavelength channel of the cross-connection is located.')
wchXCDstPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 10), OlPortType())
if mibBuilder.loadTexts: wchXCDstPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCDstPortTypeIdx.setDescription('The type of port on which the destination wavelength channel of the cross-connection is located.')
wchXCDstPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)))
if mibBuilder.loadTexts: wchXCDstPortIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCDstPortIdx.setDescription('The number of the port on which the destination wavelength channel of the cross-connection is located.')
wchXCDstChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(135, 610)))
if mibBuilder.loadTexts: wchXCDstChannelIdx.setStatus('current')
if mibBuilder.loadTexts: wchXCDstChannelIdx.setDescription('The channel number of the destination wavelength channel of the cross-connection.')
wchXCServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wchXCServiceName.setStatus('current')
if mibBuilder.loadTexts: wchXCServiceName.setDescription('Name of end-to-end wavelength service of which this cross- connection is a part.')
wchXCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 9, 1, 100), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wchXCRowStatus.setStatus('current')
if mibBuilder.loadTexts: wchXCRowStatus.setDescription('Used to control the addition and deletion of entries in the wavelength channel cross-connection table.')
wchTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10), )
if mibBuilder.loadTexts: wchTable.setStatus('current')
if mibBuilder.loadTexts: wchTable.setDescription('This table lists all managed wavelength channels on equipment modules assigned to optical layer groupings.')
wchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1), ).setIndexNames((0, "BTI-OL-MIB", "wchCpTypeIdx"), (0, "BTI-OL-MIB", "wchShelfIdx"), (0, "BTI-OL-MIB", "wchSlotIdx"), (0, "BTI-OL-MIB", "wchPortTypeIdx"), (0, "BTI-OL-MIB", "wchPortIdx"), (0, "BTI-OL-MIB", "wchIdx"))
if mibBuilder.loadTexts: wchEntry.setStatus('current')
if mibBuilder.loadTexts: wchEntry.setDescription('The conceptual row object of the wavelength channel table.')
wchCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 1), CpType())
if mibBuilder.loadTexts: wchCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchCpTypeIdx.setDescription('The type of circuit pack on which the wavelength channel is located.')
wchShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: wchShelfIdx.setStatus('current')
if mibBuilder.loadTexts: wchShelfIdx.setDescription('The number of the shelf on which the wavelength channel is located.')
wchSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: wchSlotIdx.setStatus('current')
if mibBuilder.loadTexts: wchSlotIdx.setDescription('The number of the slot on which the wavelength channel is located.')
wchPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 4), OlPortType())
if mibBuilder.loadTexts: wchPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchPortTypeIdx.setDescription('The type of port on which the wavelength channel is located.')
wchPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: wchPortIdx.setStatus('current')
if mibBuilder.loadTexts: wchPortIdx.setDescription('The number of the port on which the wavelength channel is located.')
wchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(135, 610)))
if mibBuilder.loadTexts: wchIdx.setStatus('current')
if mibBuilder.loadTexts: wchIdx.setDescription('The number of the targeted wavelength channel.')
wchAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 7), AdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchAdminStatus.setStatus('current')
if mibBuilder.loadTexts: wchAdminStatus.setDescription('The administrative status of the wavelength channel. The default value is autoEnabled if the supporting WDM is enabled or autoEnabled, otherwise it is disabled.')
wchOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 8), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchOperStatus.setStatus('current')
if mibBuilder.loadTexts: wchOperStatus.setDescription('The reported operational status of the wavelength channel.')
wchOperStatQlfr = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 9), OperStatQlfr()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchOperStatQlfr.setStatus('current')
if mibBuilder.loadTexts: wchOperStatQlfr.setDescription('This is a textual list of qualifiers about the reported operational status of the wavelength channel.')
wchAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 10), HoursAndMinutes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: wchAutoEnableTimer.setDescription('Specifies the auto-enable timer for the targeted wavelength channel. This value only applies if the wchAdminStatus object is set to autoEnabled, in which case the default value is 008-00, otherwise, it is 000-00.')
wchActAutoEnableTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 11), HoursAndMinutes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchActAutoEnableTimer.setStatus('current')
if mibBuilder.loadTexts: wchActAutoEnableTimer.setDescription('Indicates the time remaining on the auto-enable timer if it is actively counting down. Otherwise, the value returned is 000-00.')
wchId = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchId.setStatus('current')
if mibBuilder.loadTexts: wchId.setDescription('Textual data recorded by the user to briefly identify the wavelength channel object in a manner useful to the user.')
wchCustom1 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCustom1.setStatus('current')
if mibBuilder.loadTexts: wchCustom1.setDescription('A variable length text string for operating company use.')
wchCustom2 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCustom2.setStatus('current')
if mibBuilder.loadTexts: wchCustom2.setDescription('A variable length text string for operating company use.')
wchCustom3 = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCustom3.setStatus('current')
if mibBuilder.loadTexts: wchCustom3.setDescription('A variable length text string for operating company use.')
wchBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("tenGig", 1))).clone('tenGig')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchBitrate.setStatus('current')
if mibBuilder.loadTexts: wchBitrate.setDescription('The bitrate of the signal carried by the wavelength channel. A value of tenGig applies to all signal bitrates of 10Gb/sec or less.')
wchGrid = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ghz100", 1), ("ghz50", 2))).clone('ghz100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchGrid.setStatus('current')
if mibBuilder.loadTexts: wchGrid.setDescription('The minimum grid spacing with which the channel is compatible.')
wchWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 18), FixedX100()).setUnits('nanometers/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: wchWavelength.setStatus('current')
if mibBuilder.loadTexts: wchWavelength.setDescription('The wavelength of the channel.')
wchFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 19), FixedX100()).setUnits('terahertz/100').setMaxAccess("readonly")
if mibBuilder.loadTexts: wchFrequency.setStatus('current')
if mibBuilder.loadTexts: wchFrequency.setDescription('The frequency of the channel.')
wchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 10, 1, 100), RowStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wchRowStatus.setStatus('current')
if mibBuilder.loadTexts: wchRowStatus.setDescription('The Wavelength Channel table RowStatus object is not readable or writeable because all entries in the Wavelength Channel table are automatically created and deleted when an wavelength channel cross-connection involving the wavelength channel is created or deleted. This Wavelength Channel row status object is used only in database change notifications to indicate if the row has been created or deleted.')
olGroupMerge = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 11))
olGroupMergeCmd = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("invoke", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupMergeCmd.setStatus('current')
if mibBuilder.loadTexts: olGroupMergeCmd.setDescription('This object is used to invoke an optical layer group merge operation. The optical layer group merge is activated when this object is set to invoke(2). The values of the olGroupMergePrimary and olGroupMergeSecondary objects must be set in the same set request as this object. When a get is performed on this object, the value returned is idle(1).')
olGroupMergePrimary = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupMergePrimary.setStatus('current')
if mibBuilder.loadTexts: olGroupMergePrimary.setDescription('The identifier of the primary optical layer group of the merge.')
olGroupMergeSecondary = MibScalar((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olGroupMergeSecondary.setStatus('current')
if mibBuilder.loadTexts: olGroupMergeSecondary.setDescription('The identifier of the secondary optical layer group of the merge.')
olPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12))
olOSCCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1), )
if mibBuilder.loadTexts: olOSCCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMTable.setDescription('A table of current performance monitoring statistics collected for the optical layer OSC objects on the NE.')
olOSCCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1), ).setIndexNames((0, "BTI-OL-MIB", "olOSCCrntPMCpTypeIdx"), (0, "BTI-OL-MIB", "olOSCCrntPMShelfIdx"), (0, "BTI-OL-MIB", "olOSCCrntPMSlotIdx"), (0, "BTI-OL-MIB", "olOSCCrntPMLineIdx"), (0, "BTI-OL-MIB", "olOSCCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: olOSCCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMEntry.setDescription('The row entry object of the optical layer OSC current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given optical layer OSC object.')
olOSCCrntPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 1), CpType())
if mibBuilder.loadTexts: olOSCCrntPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMCpTypeIdx.setDescription('The type of circuit pack on which the optical layer OSC targeted for PMs is located.')
olOSCCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olOSCCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMShelfIdx.setDescription('The number of the shelf in which the optical layer OSC targeted for PMs is located.')
olOSCCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: olOSCCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSlotIdx.setDescription('The number of the slot in which the optical layer OSC targeted for PMs is located.')
olOSCCrntPMLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: olOSCCrntPMLineIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMLineIdx.setDescription('The line number of the OSC targeted for PMs.')
olOSCCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: olOSCCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
olOSCCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 6), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOPRValue.setDescription('The OSC optical power received on the Line port.')
olOSCCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
olOSCCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 8), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
olOSCCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOPTValue.setDescription('The OSC optical power transmitted at the output of the Line port.')
olOSCCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
olOSCCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
olOSCCrntPMOBRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 12), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOBRValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOBRValue.setDescription('The OSC optical back-reflected power.')
olOSCCrntPMOBRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOBRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOBRTimeStamp.setDescription('The date and time stamp of the optical back-reflected power value.')
olOSCCrntPMOBRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMOBRValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMOBRValidity.setDescription('Indicates the validity of the provided optical back-reflected power value.')
olOSCCrntPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMCVSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMCVSValue.setDescription('The count of coding violations at the section layer of the received OSC signal.')
olOSCCrntPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMCVSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMCVSTimeStamp.setDescription('The date and time stamp of the section layer coding violations value.')
olOSCCrntPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 17), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMCVSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMCVSValidity.setDescription('Indicates the validity of the provided section layer coding violations value.')
olOSCCrntPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMCVSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMCVSInitialize.setDescription('Used to initialize the value of the olOSCCrntPMCVSValue object to 0.')
olOSCCrntPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMESSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMESSValue.setDescription('The count of errored seconds at the section layer of the received OSC signal.')
olOSCCrntPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMESSTimeStamp.setDescription('The date and time stamp of the section layer errored seconds value.')
olOSCCrntPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMESSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMESSValidity.setDescription('Indicates the validity of the provided section layer errored seconds value.')
olOSCCrntPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 22), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMESSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMESSInitialize.setDescription('Used to initialize the value of the olOSCCrntPMESSValue object to 0.')
olOSCCrntPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMSESSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSESSValue.setDescription('The count of severely errored seconds at the section layer of the received OSC signal.')
olOSCCrntPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMSESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSESSTimeStamp.setDescription('The date and time stamp of the section layer severely errored seconds value.')
olOSCCrntPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMSESSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSESSValidity.setDescription('Indicates the validity of the provided section layer severely errored seconds value.')
olOSCCrntPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMSESSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSESSInitialize.setDescription('Used to initialize the value of the olOSCCrntPMSESSValue object to 0.')
olOSCCrntPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSEFSSValue.setDescription('The count of severely errored framing seconds at the section layer of the received OSC signal.')
olOSCCrntPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMSEFSSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSEFSSTimeStamp.setDescription('The date and time stamp of the section layer severely errored framing seconds value.')
olOSCCrntPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMSEFSSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSEFSSValidity.setDescription('Indicates the validity of the provided section layer severely errored framing seconds value.')
olOSCCrntPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMSEFSSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMSEFSSInitialize.setDescription('Used to initialize the value of the olOSCCrntPMSEFSSValue object to 0.')
olOSCCrntPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMUASSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMUASSValue.setDescription('The count of unavailable seconds at the section layer of the received OSC signal.')
olOSCCrntPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMUASSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMUASSTimeStamp.setDescription('The date and time stamp of the section layer unavailable seconds value.')
olOSCCrntPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCCrntPMUASSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMUASSValidity.setDescription('Indicates the validity of the provided section layer unavailable seconds value.')
olOSCCrntPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 1, 1, 34), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCCrntPMUASSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCCrntPMUASSInitialize.setDescription('Used to initialize the value of the olOSCCrntPMUASSValue object to 0.')
olOSCHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2), )
if mibBuilder.loadTexts: olOSCHistPMTable.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMTable.setDescription('A table of historical performance monitoring statistics collected for the optical layer OSC objects on the NE.')
olOSCHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1), ).setIndexNames((0, "BTI-OL-MIB", "olOSCHistPMCpTypeIdx"), (0, "BTI-OL-MIB", "olOSCHistPMShelfIdx"), (0, "BTI-OL-MIB", "olOSCHistPMSlotIdx"), (0, "BTI-OL-MIB", "olOSCHistPMLineIdx"), (0, "BTI-OL-MIB", "olOSCHistPMIntervalTypeIdx"), (0, "BTI-OL-MIB", "olOSCHistPMIntervalIdx"))
if mibBuilder.loadTexts: olOSCHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMEntry.setDescription('The row entry object of the optical layer OSC historical performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a historical measurement interval for a given optical layer OSC object.')
olOSCHistPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 1), CpType())
if mibBuilder.loadTexts: olOSCHistPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMCpTypeIdx.setDescription('The type of circuit pack on which the optical layer OSC targeted for PMs is located.')
olOSCHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olOSCHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMShelfIdx.setDescription('The number of the shelf in which the optical layer OSC targeted for PMs is located.')
olOSCHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: olOSCHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSlotIdx.setDescription('The number of the slot in which the optical layer OSC targeted for PMs is located.')
olOSCHistPMLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: olOSCHistPMLineIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMLineIdx.setDescription('The line number of the OSC targeted for PMs.')
olOSCHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: olOSCHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
olOSCHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: olOSCHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
olOSCHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOPRValue.setDescription('The OSC optical power received on the Line port.')
olOSCHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOPRTimeStamp.setDescription('The date and time stamp of the optical power received value.')
olOSCHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOPRValidity.setDescription('Indicates the validity of the provided optical power received value.')
olOSCHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOPTValue.setDescription('The OSC optical power transmitted at the output of the Line port.')
olOSCHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOPTTimeStamp.setDescription('The date and time stamp of the optical power transmitted value.')
olOSCHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOPTValidity.setDescription('Indicates the validity of the provided optical power transmitted value.')
olOSCHistPMOBRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 13), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOBRValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOBRValue.setDescription('The OSC optical back-reflected power.')
olOSCHistPMOBRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOBRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOBRTimeStamp.setDescription('The date and time stamp of the optical back-reflected power value.')
olOSCHistPMOBRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMOBRValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMOBRValidity.setDescription('Indicates the validity of the provided optical back-reflected power value.')
olOSCHistPMCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMCVSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMCVSValue.setDescription('The count of coding violations at the section layer of the received OSC signal.')
olOSCHistPMCVSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMCVSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMCVSTimeStamp.setDescription('The date and time stamp of the section layer coding violations value.')
olOSCHistPMCVSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMCVSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMCVSValidity.setDescription('Indicates the validity of the provided section layer coding violations value.')
olOSCHistPMCVSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMCVSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMCVSInitialize.setDescription('Used to initialize the value of the olOSCHistPMCVSValue object to 0.')
olOSCHistPMESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMESSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMESSValue.setDescription('The count of errored seconds at the section layer of the received OSC signal.')
olOSCHistPMESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMESSTimeStamp.setDescription('The date and time stamp of the section layer errored seconds value.')
olOSCHistPMESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMESSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMESSValidity.setDescription('Indicates the validity of the provided section layer errored seconds value.')
olOSCHistPMESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 23), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMESSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMESSInitialize.setDescription('Used to initialize the value of the olOSCHistPMESSValue object to 0.')
olOSCHistPMSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMSESSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSESSValue.setDescription('The count of severely errored seconds at the section layer of the received OSC signal.')
olOSCHistPMSESSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 25), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMSESSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSESSTimeStamp.setDescription('The date and time stamp of the section layer severely errored seconds value.')
olOSCHistPMSESSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 26), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMSESSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSESSValidity.setDescription('Indicates the validity of the provided section layer severely errored seconds value.')
olOSCHistPMSESSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 27), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMSESSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSESSInitialize.setDescription('Used to initialize the value of the olOSCHistPMSESSValue object to 0.')
olOSCHistPMSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSEFSSValue.setDescription('The count of severely errored framing seconds at the section layer of the received OSC signal.')
olOSCHistPMSEFSSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMSEFSSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSEFSSTimeStamp.setDescription('The date and time stamp of the section layer severely errored framing seconds value.')
olOSCHistPMSEFSSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMSEFSSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSEFSSValidity.setDescription('Indicates the validity of the provided section layer severely errored framing seconds value.')
olOSCHistPMSEFSSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 31), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMSEFSSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMSEFSSInitialize.setDescription('Used to initialize the value of the olOSCHistPMSEFSSValue object to 0.')
olOSCHistPMUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMUASSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMUASSValue.setDescription('The count of unavailable seconds at the section layer of the received OSC signal.')
olOSCHistPMUASSTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMUASSTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMUASSTimeStamp.setDescription('The date and time stamp of the section layer unavailable seconds value.')
olOSCHistPMUASSValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olOSCHistPMUASSValidity.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMUASSValidity.setDescription('Indicates the validity of the provided section layer unavailable seconds value.')
olOSCHistPMUASSInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 2, 1, 35), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCHistPMUASSInitialize.setStatus('current')
if mibBuilder.loadTexts: olOSCHistPMUASSInitialize.setDescription('Used to initialize the value of the olOSCHistPMUASSValue object to 0.')
olOSCPMThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3), )
if mibBuilder.loadTexts: olOSCPMThresholdTable.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdTable.setDescription('A table of threshold levels for performance monitoring counter values on Optical Layer OSC objects, that are used in the generation of threshold crossing alerts.')
olOSCPMThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1), ).setIndexNames((0, "BTI-OL-MIB", "olOSCPMThresholdCpTypeIdx"), (0, "BTI-OL-MIB", "olOSCPMThresholdShelfIdx"), (0, "BTI-OL-MIB", "olOSCPMThresholdSlotIdx"), (0, "BTI-OL-MIB", "olOSCPMThresholdLineIdx"), (0, "BTI-OL-MIB", "olOSCPMThresholdIntervalTypeIdx"))
if mibBuilder.loadTexts: olOSCPMThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdEntry.setDescription('The row entry object of the optical layer OSC performance monitoring threshold table. Each row of this table contains a set of PM thresholds for a given interval type that applies to an individual optical layer OSC object.')
olOSCPMThresholdCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 1), CpType())
if mibBuilder.loadTexts: olOSCPMThresholdCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdCpTypeIdx.setDescription('The type of circuit pack on which the optical layer OSC targeted for PM thresholds is located.')
olOSCPMThresholdShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olOSCPMThresholdShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdShelfIdx.setDescription('The number of the shelf in which the optical layer OSC targeted for PM thresholds is located.')
olOSCPMThresholdSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: olOSCPMThresholdSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdSlotIdx.setDescription('The number of the slot in which the optical layer OSC targeted for PM thresholds is located.')
olOSCPMThresholdLineIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: olOSCPMThresholdLineIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdLineIdx.setDescription('The line number of the OSC targeted for PM thresholds.')
olOSCPMThresholdIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 5), PMIntervalType())
if mibBuilder.loadTexts: olOSCPMThresholdIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdIntervalTypeIdx.setDescription('The type of PM bin according to interval length. Thresholds are supported for the 15-minute and 1-day PM bins only.')
olOSCPMThresholdCVSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCPMThresholdCVSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdCVSValue.setDescription('The threshold for the count of coding violations at the section layer.')
olOSCPMThresholdESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCPMThresholdESSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdESSValue.setDescription('The threshold for the count of errored seconds at the section layer.')
olOSCPMThresholdSESSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCPMThresholdSESSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdSESSValue.setDescription('The threshold for the count of severely errored seconds at the section layer.')
olOSCPMThresholdSEFSSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCPMThresholdSEFSSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdSEFSSValue.setDescription('The threshold for the count of severely errored framing seconds at the section layer.')
olOSCPMThresholdUASSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 3, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olOSCPMThresholdUASSValue.setStatus('current')
if mibBuilder.loadTexts: olOSCPMThresholdUASSValue.setDescription('The threshold for the count of unavailable seconds at the section layer.')
olPortCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4), )
if mibBuilder.loadTexts: olPortCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMTable.setDescription('A table of current performance monitoring statistics collected for ports on equipment modules assigned to optical layer groupings.')
olPortCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1), ).setIndexNames((0, "BTI-OL-MIB", "olPortCrntPMCpTypeIdx"), (0, "BTI-OL-MIB", "olPortCrntPMShelfIdx"), (0, "BTI-OL-MIB", "olPortCrntPMSlotIdx"), (0, "BTI-OL-MIB", "olPortCrntPMTypeIdx"), (0, "BTI-OL-MIB", "olPortCrntPMIdx"), (0, "BTI-OL-MIB", "olPortCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: olPortCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMEntry.setDescription('The row entry object of the optical layer port current performance monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a given optical layer port.')
olPortCrntPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 1), CpType())
if mibBuilder.loadTexts: olPortCrntPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMCpTypeIdx.setDescription('The type of circuit pack on which the port targeted for PMs is located.')
olPortCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olPortCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMShelfIdx.setDescription('The number of the shelf in which the port targeted for PMs is located.')
olPortCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: olPortCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMSlotIdx.setDescription('The number of the slot in which the port targeted for PMs is located.')
olPortCrntPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 4), OlPortType())
if mibBuilder.loadTexts: olPortCrntPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMTypeIdx.setDescription('The type of port targeted for PMs.')
olPortCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: olPortCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMIdx.setDescription('The number of the port of the specified port type targeted for PMs.')
olPortCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: olPortCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
olPortCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 7), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRValue.setDescription('The instantaneous optical power received on the port.')
olPortCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRTimeStamp.setDescription('The date and time stamp of the instantaneous optical power received value.')
olPortCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 9), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRValidity.setDescription('Indicates the validity of the provided instantaneous optical power received value.')
olPortCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 10), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRMinValue.setDescription('The minimum optical power received on the port over the interval.')
olPortCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
olPortCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 12), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
olPortCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 13), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRMaxValue.setDescription('The maximum optical power received on the port over the interval.')
olPortCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 14), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
olPortCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 15), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
olPortCrntPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 16), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRAvgValue.setDescription('The average optical power received on the port over the interval.')
olPortCrntPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
olPortCrntPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
olPortCrntPMOPRStdDevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 19), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRStdDevValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRStdDevValue.setDescription('The standard deviation from the average of the optical power received on the port over the interval.')
olPortCrntPMOPRStdDevTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRStdDevTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRStdDevTimeStamp.setDescription('The date and time stamp of the standard deviation value for the optical power received.')
olPortCrntPMOPRStdDevValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPRStdDevValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPRStdDevValidity.setDescription('Indicates the validity of the provided standard deviation value for the optical power received.')
olPortCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 22), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTValue.setDescription('The instantaneous optical power transmitted on the port.')
olPortCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTTimeStamp.setDescription('The date and time stamp of the instantaneous optical power transmitted value.')
olPortCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTValidity.setDescription('Indicates the validity of the provided instantaneous optical power transmitted value.')
olPortCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 25), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTMinValue.setDescription('The minimum optical power transmitted on the port over the interval.')
olPortCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
olPortCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 27), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
olPortCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 28), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted on the port over the interval.')
olPortCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 29), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
olPortCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 30), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
olPortCrntPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 31), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTAvgValue.setDescription('The average optical power transmitted on the port over the interval.')
olPortCrntPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 32), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
olPortCrntPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 33), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
olPortCrntPMOPTStdDevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 34), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTStdDevValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTStdDevValue.setDescription('The standard deviation from the average of the optical power transmitted on the port over the interval.')
olPortCrntPMOPTStdDevTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 35), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTStdDevTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTStdDevTimeStamp.setDescription('The date and time stamp of the standard deviation value for the optical power transmitted.')
olPortCrntPMOPTStdDevValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 36), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMOPTStdDevValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMOPTStdDevValidity.setDescription('Indicates the validity of the provided standard deviation value for the optical power transmitted.')
olPortCrntPMLossRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 37), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMLossRxValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMLossRxValue.setDescription('The optical power loss measured on the port in the receive direction. For a Line port, this represents the span loss. For a DCM port, this is the DCM loss. For a client port, this is the loss of the receive inter-connection fiber.')
olPortCrntPMLossRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 38), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMLossRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMLossRxTimeStamp.setDescription('The date and time stamp of the receive loss value.')
olPortCrntPMLossRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 39), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMLossRxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMLossRxValidity.setDescription('Indicates the validity of the provided receive loss value.')
olPortCrntPMLossTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 40), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMLossTxValue.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMLossTxValue.setDescription('The optical power loss measured on the port in the transmit direction. For a Line port, this represents the far-end span loss. For a client port, this is the loss of the transmit inter-connection fiber.')
olPortCrntPMLossTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 41), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMLossTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMLossTxTimeStamp.setDescription('The date and time stamp of the transmit loss value.')
olPortCrntPMLossTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 42), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortCrntPMLossTxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMLossTxValidity.setDescription('Indicates the validity of the provided transmit loss value.')
olPortCrntPMInitializeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 4, 1, 43), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortCrntPMInitializeAll.setStatus('current')
if mibBuilder.loadTexts: olPortCrntPMInitializeAll.setDescription('Used to initialize all binned PM values for a given entry in the table.')
olPortHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5), )
if mibBuilder.loadTexts: olPortHistPMTable.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMTable.setDescription('A table of historical performance monitoring statistics collected for optical layer ports.')
olPortHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1), ).setIndexNames((0, "BTI-OL-MIB", "olPortHistPMCpTypeIdx"), (0, "BTI-OL-MIB", "olPortHistPMShelfIdx"), (0, "BTI-OL-MIB", "olPortHistPMSlotIdx"), (0, "BTI-OL-MIB", "olPortHistPMTypeIdx"), (0, "BTI-OL-MIB", "olPortHistPMIdx"), (0, "BTI-OL-MIB", "olPortHistPMIntervalTypeIdx"), (0, "BTI-OL-MIB", "olPortHistPMIntervalIdx"))
if mibBuilder.loadTexts: olPortHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMEntry.setDescription('The row entry object of the Optical Layer Port Historical Performance Monitoring table. Each row of this table contains a full set of PM statistics and related data for an historical measurement interval for a given optical layer port.')
olPortHistPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 1), CpType())
if mibBuilder.loadTexts: olPortHistPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMCpTypeIdx.setDescription('The type of circuit pack on which the port targeted for PMs is located.')
olPortHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: olPortHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMShelfIdx.setDescription('The number of the shelf in which the port targeted for PMs is located.')
olPortHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: olPortHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMSlotIdx.setDescription('The number of the slot in which the port targeted for PMs is located.')
olPortHistPMTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 4), OlPortType())
if mibBuilder.loadTexts: olPortHistPMTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMTypeIdx.setDescription('The type of port targeted for PMs.')
olPortHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: olPortHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMIdx.setDescription('The number of the port of the specified port type targeted for PMs.')
olPortHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 6), PMIntervalType())
if mibBuilder.loadTexts: olPortHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
olPortHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: olPortHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
olPortHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRValue.setDescription('The instantaneous optical power received on the port.')
olPortHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRTimeStamp.setDescription('The date and time stamp of the instantaneous optical power received value.')
olPortHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRValidity.setDescription('Indicates the validity of the provided instantaneous optical power received value.')
olPortHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 11), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRMinValue.setDescription('The minimum optical power received on the port over the interval.')
olPortHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
olPortHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
olPortHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 14), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRMaxValue.setDescription('The maximum optical power received on the port over the interval.')
olPortHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
olPortHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 16), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
olPortHistPMOPRAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 17), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRAvgValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRAvgValue.setDescription('The average optical power received on the port over the interval.')
olPortHistPMOPRAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 18), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRAvgTimeStamp.setDescription('The date and time stamp of the average optical power received value.')
olPortHistPMOPRAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 19), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRAvgValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRAvgValidity.setDescription('Indicates the validity of the provided average optical power received value.')
olPortHistPMOPRStdDevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 20), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRStdDevValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRStdDevValue.setDescription('The standard deviation from the average of the optical power received on the port over the interval.')
olPortHistPMOPRStdDevTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRStdDevTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRStdDevTimeStamp.setDescription('The date and time stamp of the standard deviation value for the optical power received.')
olPortHistPMOPRStdDevValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPRStdDevValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPRStdDevValidity.setDescription('Indicates the validity of the provided standard deviation value for the optical power received.')
olPortHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 23), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTValue.setDescription('The instantaneous optical power transmitted on the port.')
olPortHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTTimeStamp.setDescription('The date and time stamp of the instantaneous optical power transmitted value.')
olPortHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTValidity.setDescription('Indicates the validity of the provided instantaneous optical power transmitted value.')
olPortHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 26), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTMinValue.setDescription('The minimum optical power transmitted on the port over the interval.')
olPortHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
olPortHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
olPortHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 29), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTMaxValue.setDescription('The maximum optical power transmitted on the port over the interval.')
olPortHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 30), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
olPortHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 31), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
olPortHistPMOPTAvgValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 32), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTAvgValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTAvgValue.setDescription('The average optical power transmitted on the port over the interval.')
olPortHistPMOPTAvgTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 33), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTAvgTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTAvgTimeStamp.setDescription('The date and time stamp of the average optical power transmitted value.')
olPortHistPMOPTAvgValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 34), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTAvgValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTAvgValidity.setDescription('Indicates the validity of the provided average optical power transmitted value.')
olPortHistPMOPTStdDevValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 35), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTStdDevValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTStdDevValue.setDescription('The standard deviation from the average of the optical power transmitted on the port over the interval.')
olPortHistPMOPTStdDevTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 36), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTStdDevTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTStdDevTimeStamp.setDescription('The date and time stamp of the standard deviation value for the optical power transmitted.')
olPortHistPMOPTStdDevValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 37), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMOPTStdDevValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMOPTStdDevValidity.setDescription('Indicates the validity of the provided standard deviation value for the optical power transmitted.')
olPortHistPMLossRxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 38), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMLossRxValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMLossRxValue.setDescription('The optical power loss measured on the port in the receive direction. For a Line port, this represents the span loss. For a DCM port, this is the DCM loss. For a client port, this is the loss of the receive inter-connection fiber.')
olPortHistPMLossRxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 39), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMLossRxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMLossRxTimeStamp.setDescription('The date and time stamp of the receive loss value.')
olPortHistPMLossRxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 40), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMLossRxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMLossRxValidity.setDescription('Indicates the validity of the provided receive loss value.')
olPortHistPMLossTxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 41), FixedX10()).setUnits('dB/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMLossTxValue.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMLossTxValue.setDescription('The optical power loss measured on the port in the transmit direction. For a Line port, this represents the far-end span loss. For a client port, this is the loss of the transmit inter-connection fiber.')
olPortHistPMLossTxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 42), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMLossTxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMLossTxTimeStamp.setDescription('The date and time stamp of the transmit loss value.')
olPortHistPMLossTxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 43), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: olPortHistPMLossTxValidity.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMLossTxValidity.setDescription('Indicates the validity of the provided transmit loss value.')
olPortHistPMInitializeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 5, 1, 44), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: olPortHistPMInitializeAll.setStatus('current')
if mibBuilder.loadTexts: olPortHistPMInitializeAll.setDescription('Used to initialize all binned PM values for a given entry in the table.')
wchCrntPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6), )
if mibBuilder.loadTexts: wchCrntPMTable.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMTable.setDescription('A table of current performance monitoring statistics collected for wavelength channels.')
wchCrntPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1), ).setIndexNames((0, "BTI-OL-MIB", "wchCrntPMCpTypeIdx"), (0, "BTI-OL-MIB", "wchCrntPMShelfIdx"), (0, "BTI-OL-MIB", "wchCrntPMSlotIdx"), (0, "BTI-OL-MIB", "wchCrntPMPortTypeIdx"), (0, "BTI-OL-MIB", "wchCrntPMPortIdx"), (0, "BTI-OL-MIB", "wchCrntPMIdx"), (0, "BTI-OL-MIB", "wchCrntPMIntervalTypeIdx"))
if mibBuilder.loadTexts: wchCrntPMEntry.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMEntry.setDescription('The row entry object of the Wavelength Channel Current Performance Monitoring table. Each row of this table contains a full set of PM statistics and related data for a current measurement interval for a wavelength channel object in an optical layer grouping.')
wchCrntPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 1), CpType())
if mibBuilder.loadTexts: wchCrntPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMCpTypeIdx.setDescription('The type of circuit pack on which the wavelength channel targeted for PMs is located.')
wchCrntPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: wchCrntPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMShelfIdx.setDescription('The number of the shelf in which the wavelength channel targeted for PMs is located.')
wchCrntPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: wchCrntPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMSlotIdx.setDescription('The number of the slot in which the wavelength channel targeted for PMs is located.')
wchCrntPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 4), OlPortType())
if mibBuilder.loadTexts: wchCrntPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMPortTypeIdx.setDescription('The type of port in which the wavelength channel targeted for PMs is located.')
wchCrntPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: wchCrntPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMPortIdx.setDescription('The number of the port of the specified port type in which the wavelength channel targeted for PMs is located.')
wchCrntPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(135, 610)))
if mibBuilder.loadTexts: wchCrntPMIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMIdx.setDescription('The number of the wavelength channel targeted for PMs.')
wchCrntPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 7), PMIntervalType())
if mibBuilder.loadTexts: wchCrntPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
wchCrntPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 8), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRValue.setDescription('The instantaneous optical power received on the channel.')
wchCrntPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRTimeStamp.setDescription('The date and time stamp of the instantaneous optical power received value.')
wchCrntPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 10), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRValidity.setDescription('Indicates the validity of the provided instantaneous optical power received value.')
wchCrntPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 11), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMinValue.setDescription('The minimum optical power received on the channel over the interval. Can be set to the value 0 to initialize.')
wchCrntPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
wchCrntPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 13), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
wchCrntPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 14), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMinInitialize.setDescription('Used to initialize the value of the wchCrntPMOPRMinValue object.')
wchCrntPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 15), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMaxValue.setDescription('The maximum optical power received on the channel over the interval. Can be set to the value 0 to initialize.')
wchCrntPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
wchCrntPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 17), PMValidity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
wchCrntPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 18), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPRMaxInitialize.setDescription('Used to initialize the value of the wchCrntPMOPRMaxValue object.')
wchCrntPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 19), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTValue.setDescription('The instantaneous optical power transmitted on the channel.')
wchCrntPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 20), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTTimeStamp.setDescription('The date and time stamp of the instantaneous optical power transmitted value.')
wchCrntPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 21), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTValidity.setDescription('Indicates the validity of the provided instantaneous optical power transmitted value.')
wchCrntPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 22), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMinValue.setDescription('The minimum optical power transmitted on the channel over the interval. Can be set to the value 0 to initialize.')
wchCrntPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 23), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
wchCrntPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 24), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
wchCrntPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 25), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMinInitialize.setDescription('Used to initialize the value of the wchCrntPMOPTMinValue object.')
wchCrntPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 26), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMaxValue.setDescription('The maximum optical power transmitted on the channel over the interval. Can be set to the value 0 to initialize.')
wchCrntPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 27), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
wchCrntPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 28), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchCrntPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
wchCrntPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 6, 1, 29), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchCrntPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: wchCrntPMOPTMaxInitialize.setDescription('Used to initialize the value of the wchCrntPMOPTMaxValue object.')
wchHistPMTable = MibTable((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7), )
if mibBuilder.loadTexts: wchHistPMTable.setStatus('current')
if mibBuilder.loadTexts: wchHistPMTable.setDescription('A table of historical performance monitoring statistics collected for wavelength channels.')
wchHistPMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1), ).setIndexNames((0, "BTI-OL-MIB", "wchHistPMCpTypeIdx"), (0, "BTI-OL-MIB", "wchHistPMShelfIdx"), (0, "BTI-OL-MIB", "wchHistPMSlotIdx"), (0, "BTI-OL-MIB", "wchHistPMPortTypeIdx"), (0, "BTI-OL-MIB", "wchHistPMPortIdx"), (0, "BTI-OL-MIB", "wchHistPMIdx"), (0, "BTI-OL-MIB", "wchHistPMIntervalTypeIdx"), (0, "BTI-OL-MIB", "wchHistPMIntervalIdx"))
if mibBuilder.loadTexts: wchHistPMEntry.setStatus('current')
if mibBuilder.loadTexts: wchHistPMEntry.setDescription('The row entry object of the Wavelength Channel Historical Performance Monitoring table. Each row of this table contains a full set of PM statistics and related data for a wavelength channel object in an optical layer grouping.')
wchHistPMCpTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 1), CpType())
if mibBuilder.loadTexts: wchHistPMCpTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMCpTypeIdx.setDescription('The type of circuit pack on which the wavelength channel targeted for PMs is located.')
wchHistPMShelfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(11, 11), ValueRangeConstraint(21, 21), ValueRangeConstraint(31, 31), )))
if mibBuilder.loadTexts: wchHistPMShelfIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMShelfIdx.setDescription('The number of the shelf in which the wavelength channel targeted for PMs is located.')
wchHistPMSlotIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: wchHistPMSlotIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMSlotIdx.setDescription('The number of the slot in which the wavelength channel targeted for PMs is located.')
wchHistPMPortTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 4), OlPortType())
if mibBuilder.loadTexts: wchHistPMPortTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMPortTypeIdx.setDescription('The type of port in which the wavelength channel targeted for PMs is located.')
wchHistPMPortIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: wchHistPMPortIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMPortIdx.setDescription('The number of the port of the specified port type in which the wavelength channel targeted for PMs is located.')
wchHistPMIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(135, 610)))
if mibBuilder.loadTexts: wchHistPMIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMIdx.setDescription('The number of the wavelength channel targeted for PMs.')
wchHistPMIntervalTypeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 7), PMIntervalType())
if mibBuilder.loadTexts: wchHistPMIntervalTypeIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMIntervalTypeIdx.setDescription('The type of PM bin according to interval length.')
wchHistPMIntervalIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: wchHistPMIntervalIdx.setStatus('current')
if mibBuilder.loadTexts: wchHistPMIntervalIdx.setDescription('The specific PM bin number. The range is 1 to 96 for the 15-minute historical bins. For the 1-day historical bin, the value is 1.')
wchHistPMOPRValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 9), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRValue.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRValue.setDescription('The instantaneous optical power received on the channel.')
wchHistPMOPRTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRTimeStamp.setDescription('The date and time stamp of the instantaneous optical power received value.')
wchHistPMOPRValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 11), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRValidity.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRValidity.setDescription('Indicates the validity of the provided instantaneous optical power received value.')
wchHistPMOPRMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 12), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPRMinValue.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMinValue.setDescription('The minimum optical power received on the channel over the interval. Can be set to the value 0 to initialize the object.')
wchHistPMOPRMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 13), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMinTimeStamp.setDescription('The date and time stamp of the minimum optical power received value.')
wchHistPMOPRMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 14), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRMinValidity.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMinValidity.setDescription('Indicates the validity of the provided minimum optical power received value.')
wchHistPMOPRMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 15), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPRMinInitialize.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMinInitialize.setDescription('Used to initialize the value of the wchHistPMOPRMinValue object.')
wchHistPMOPRMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 16), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPRMaxValue.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMaxValue.setDescription('The maximum optical power received on the channel over the interval. Can be set to the value 0 to initialize the object.')
wchHistPMOPRMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 17), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power received value.')
wchHistPMOPRMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 18), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPRMaxValidity.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMaxValidity.setDescription('Indicates the validity of the provided maximum optical power received value.')
wchHistPMOPRMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 19), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPRMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPRMaxInitialize.setDescription('Used to initialize the value of the wchHistPMOPRMaxValue object.')
wchHistPMOPTValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 20), FixedX10()).setUnits('dBm/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTValue.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTValue.setDescription('The instantaneous optical power transmitted on the channel.')
wchHistPMOPTTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 21), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTTimeStamp.setDescription('The date and time stamp of the instantaneous optical power transmitted value.')
wchHistPMOPTValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 22), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTValidity.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTValidity.setDescription('Indicates the validity of the provided instantaneous optical power transmitted value.')
wchHistPMOPTMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 23), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPTMinValue.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMinValue.setDescription('The minimum optical power transmitted on the channel over the interval. Can be set to the value 0 to initialize the object.')
wchHistPMOPTMinTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 24), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTMinTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMinTimeStamp.setDescription('The date and time stamp of the minimum optical power transmitted value.')
wchHistPMOPTMinValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 25), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTMinValidity.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMinValidity.setDescription('Indicates the validity of the provided minimum optical power transmitted value.')
wchHistPMOPTMinInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 26), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPTMinInitialize.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMinInitialize.setDescription('Used to initialize the value of the wchHistPMOPTMinValue object.')
wchHistPMOPTMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 27), FixedX10()).setUnits('dBm/10').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPTMaxValue.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMaxValue.setDescription('The maximum optical power transmitted on the channel over the interval. Can be set to the value 0 to initialize the object.')
wchHistPMOPTMaxTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTMaxTimeStamp.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMaxTimeStamp.setDescription('The date and time stamp of the maximum optical power transmitted value.')
wchHistPMOPTMaxValidity = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 29), PMValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wchHistPMOPTMaxValidity.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMaxValidity.setDescription('Indicates the validity of the provided maximum optical power transmitted value.')
wchHistPMOPTMaxInitialize = MibTableColumn((1, 3, 6, 1, 4, 1, 18070, 2, 2, 1, 16, 12, 7, 1, 30), InitializeCmd()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wchHistPMOPTMaxInitialize.setStatus('current')
if mibBuilder.loadTexts: wchHistPMOPTMaxInitialize.setDescription('Used to initialize the value of the wchHistPMOPTMaxValue object.')
olOSCEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 1))
olPortEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 2))
wdmEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 3))
wchEvtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 4))
olOSCCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1))
olPortCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2))
wdmCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3))
wchCondNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4))
olOSCStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 1, 0, 1)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-OL-MIB", "olOSCOperStatus"), ("BTI-OL-MIB", "olOSCOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: olOSCStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: olOSCStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier or an optical layer OSC facility.')
olOSCTcaEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 1, 0, 2)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "tcaIntervalType"), ("BTI-7000-MIB", "tcaDateAndTime"), ("BTI-7000-MIB", "tcaMontype"), ("BTI-7000-MIB", "tcaValue"), ("BTI-7000-MIB", "tcaThreshold"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: olOSCTcaEvt.setStatus('current')
if mibBuilder.loadTexts: olOSCTcaEvt.setDescription('This trap provides a threshold crossing alert for a performance monitoring statistic on an optical layer OSC facility.')
olPortStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 2, 0, 1)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-OL-MIB", "olPortOperStatus"), ("BTI-OL-MIB", "olPortOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: olPortStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: olPortStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier or an optical layer port.')
wdmStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 3, 0, 1)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-OL-MIB", "wdmOperStatus"), ("BTI-OL-MIB", "wdmOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: wdmStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: wdmStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier or an optical layer WDM object.')
wchStatusChangeEvt = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 1, 33, 4, 0, 1)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-OL-MIB", "wchOperStatus"), ("BTI-OL-MIB", "wchOperStatQlfr"), ("BTI-7000-MIB", "evtDateAndTime"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "evtDescription"), ("BTI-7000-MIB", "evtObjectType"), ("BTI-7000-MIB", "evtCodeType"))
if mibBuilder.loadTexts: wchStatusChangeEvt.setStatus('current')
if mibBuilder.loadTexts: wchStatusChangeEvt.setDescription('Notification of a change in the operational status or operational status qualifier or an optical layer WDM object.')
olOSCLossOfLightRxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 1)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCLossOfLightRxCond.setStatus('current')
if mibBuilder.loadTexts: olOSCLossOfLightRxCond.setDescription('There is no input signal detected for the identified OSC.')
olOSCLossOfLightRxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 2)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCLossOfLightRxClear.setStatus('current')
if mibBuilder.loadTexts: olOSCLossOfLightRxClear.setDescription('A previously active optical layer OSC Receive Loss of Light condition has cleared.')
olOSCLossOfFrameCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 3)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCLossOfFrameCond.setStatus('current')
if mibBuilder.loadTexts: olOSCLossOfFrameCond.setDescription('There input OSC signal cannot be framed.')
olOSCLossOfFrameClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 4)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCLossOfFrameClear.setStatus('current')
if mibBuilder.loadTexts: olOSCLossOfFrameClear.setDescription('A previously active optical layer OSC Loss of Frame condition has cleared.')
olOSCLossOfLightTxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 5)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCLossOfLightTxCond.setStatus('current')
if mibBuilder.loadTexts: olOSCLossOfLightTxCond.setDescription('There is no transmitted signal power detected for the identified OSC.')
olOSCLossOfLightTxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 6)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCLossOfLightTxClear.setStatus('current')
if mibBuilder.loadTexts: olOSCLossOfLightTxClear.setDescription('A previously active optical layer OSC Transmit Loss of Light condition has cleared.')
olOSCFarEndIdMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 7)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCFarEndIdMismatchCond.setStatus('current')
if mibBuilder.loadTexts: olOSCFarEndIdMismatchCond.setDescription('The identifying attributes received for the far-end node do not match the expected identifying attributes.')
olOSCFarEndIdMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 8)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCFarEndIdMismatchClear.setStatus('current')
if mibBuilder.loadTexts: olOSCFarEndIdMismatchClear.setDescription('A previously active optical layer OSC Far End Identification Mismatch condition has cleared.')
olOSCFarEndNodeCnfgInconsistentCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 9)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCFarEndNodeCnfgInconsistentCond.setStatus('current')
if mibBuilder.loadTexts: olOSCFarEndNodeCnfgInconsistentCond.setDescription('The optical layer group configuration type for the far-end node is inconsistent with the configuration type of the local optical layer group.')
olOSCFarEndNodeCnfgInconsistentClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 10)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCFarEndNodeCnfgInconsistentClear.setStatus('current')
if mibBuilder.loadTexts: olOSCFarEndNodeCnfgInconsistentClear.setDescription('A previously active optical layer OSC Far End Node Configuration Inconsistent condition has cleared.')
olOSCSpanContCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 11)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCSpanContCommCond.setStatus('current')
if mibBuilder.loadTexts: olOSCSpanContCommCond.setDescription('Bi-directional control communications with the node at the opposite end of the span section have failed.')
olOSCSpanContCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 12)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCSpanContCommClear.setStatus('current')
if mibBuilder.loadTexts: olOSCSpanContCommClear.setDescription('A previously active optical layer OSC Section Control Communications condition has cleared.')
olOSCEqlzContCommCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 13)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCEqlzContCommCond.setStatus('current')
if mibBuilder.loadTexts: olOSCEqlzContCommCond.setDescription('Bi-directional control communications with the node at the opposite end of the equalization section have failed.')
olOSCEqlzContCommClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 14)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCEqlzContCommClear.setStatus('current')
if mibBuilder.loadTexts: olOSCEqlzContCommClear.setDescription('A previously active optical layer OSC Equalization Control Communications condition has cleared.')
olOSCOpticalBackReflOutOfSpecCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 15)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCOpticalBackReflOutOfSpecCond.setStatus('current')
if mibBuilder.loadTexts: olOSCOpticalBackReflOutOfSpecCond.setDescription('The measured optical back reflection of the transmitted OSC signal exceeds the specified maximum.')
olOSCOpticalBackReflOutOfSpecClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 16)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCOpticalBackReflOutOfSpecClear.setStatus('current')
if mibBuilder.loadTexts: olOSCOpticalBackReflOutOfSpecClear.setDescription('A previously active optical layer OSC Optical Back Reflection Out of Specification condition has cleared.')
olOSCOpticalBackReflHighThCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 17)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCOpticalBackReflHighThCond.setStatus('current')
if mibBuilder.loadTexts: olOSCOpticalBackReflHighThCond.setDescription('The measured optical back reflection of the transmitted OSC signal exceeds the high threshold.')
olOSCOpticalBackReflHighThClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 1, 0, 18)).setObjects(("BTI-OL-MIB", "olOSCCpTypeIdx"), ("BTI-OL-MIB", "olOSCShelfIdx"), ("BTI-OL-MIB", "olOSCSlotIdx"), ("BTI-OL-MIB", "olOSCLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olOSCOpticalBackReflHighThClear.setStatus('current')
if mibBuilder.loadTexts: olOSCOpticalBackReflHighThClear.setDescription('A previously active optical layer OSC Optical Back Reflection High Threshold condition has cleared.')
olPortPowerOutOfSpecRxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 1)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortPowerOutOfSpecRxCond.setStatus('current')
if mibBuilder.loadTexts: olPortPowerOutOfSpecRxCond.setDescription('The power received on the optical port is outside the operating range.')
olPortPowerOutOfSpecRxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 2)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortPowerOutOfSpecRxClear.setStatus('current')
if mibBuilder.loadTexts: olPortPowerOutOfSpecRxClear.setDescription('A previously active optical layer port Received Power Out Of Specification condition has cleared.')
olPortLossOfLightRxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 3)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortLossOfLightRxCond.setStatus('current')
if mibBuilder.loadTexts: olPortLossOfLightRxCond.setDescription('There is no received optical power detected for the port.')
olPortLossOfLightRxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 4)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortLossOfLightRxClear.setStatus('current')
if mibBuilder.loadTexts: olPortLossOfLightRxClear.setDescription('A previously active optical layer port Receive Loss of Light condition has cleared.')
olPortLossRxOutOfSpecCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 5)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortLossRxOutOfSpecCond.setStatus('current')
if mibBuilder.loadTexts: olPortLossRxOutOfSpecCond.setDescription('The optical power loss measured over the span or fiber connection terminating on the port in the receive direction is outside the specification range.')
olPortLossRxOutOfSpecClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 6)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortLossRxOutOfSpecClear.setStatus('current')
if mibBuilder.loadTexts: olPortLossRxOutOfSpecClear.setDescription('A previously active optical layer port Receive Loss out of Specification condition has cleared.')
olPortLossRxHighThCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 7)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortLossRxHighThCond.setStatus('current')
if mibBuilder.loadTexts: olPortLossRxHighThCond.setDescription('The optical power loss measured over the span terminating on the line port in the receive direction is above the high threshold level.')
olPortLossRxHighThClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 8)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortLossRxHighThClear.setStatus('current')
if mibBuilder.loadTexts: olPortLossRxHighThClear.setDescription('A previously active optical layer port Receive Loss High Threshold condition has cleared.')
olPortAPSDCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 9)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortAPSDCond.setStatus('current')
if mibBuilder.loadTexts: olPortAPSDCond.setDescription('An automatic power shutdown has been automatically operated on the optical layer port for safety reasons.')
olPortAPSDClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 10)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortAPSDClear.setStatus('current')
if mibBuilder.loadTexts: olPortAPSDClear.setDescription('A previously active optical layer port Automatic Power Shutdown condition has cleared.')
olPortPayloadMissingIndCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 11)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortPayloadMissingIndCond.setStatus('current')
if mibBuilder.loadTexts: olPortPayloadMissingIndCond.setDescription('A Payload Missing Indication has been received on the optical layer port input.')
olPortPayloadMissingIndClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 12)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortPayloadMissingIndClear.setStatus('current')
if mibBuilder.loadTexts: olPortPayloadMissingIndClear.setDescription('A previously active optical layer port Payload Missing Indication condition has cleared.')
olPortBackwardDefectIndCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 13)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortBackwardDefectIndCond.setStatus('current')
if mibBuilder.loadTexts: olPortBackwardDefectIndCond.setDescription('A Backward Defect Indication has been received on the optical layer port input.')
olPortBackwardDefectIndClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 14)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortBackwardDefectIndClear.setStatus('current')
if mibBuilder.loadTexts: olPortBackwardDefectIndClear.setDescription('A previously active optical layer port Backward Defect Indication condition has cleared.')
olPortChannelCountDeficiencyCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 15)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortChannelCountDeficiencyCond.setStatus('current')
if mibBuilder.loadTexts: olPortChannelCountDeficiencyCond.setDescription('A channel count deficiency condition has been raised against the port. This indicates that the number of channels received on the port is less than the number required to maintain stable optical control given the high span loss level detected on the receive span fiber.')
olPortChannelCountDeficiencyClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 16)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortChannelCountDeficiencyClear.setStatus('current')
if mibBuilder.loadTexts: olPortChannelCountDeficiencyClear.setDescription('A previously active optical layer port Channel Count Deficiency condition has cleared.')
olPortConnectionMismatchCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 17)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-OL-MIB", "olPortExpCnxDegree"), ("BTI-OL-MIB", "olPortActCnxDegree"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortConnectionMismatchCond.setStatus('current')
if mibBuilder.loadTexts: olPortConnectionMismatchCond.setDescription('The identified optical layer port is incorrectly connected and must be re-connected to a different remote end port.')
olPortConnectionMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 18)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortConnectionMismatchClear.setStatus('current')
if mibBuilder.loadTexts: olPortConnectionMismatchClear.setDescription('A previously active optical layer port Connection Mismatch condition has cleared.')
olPortConnectionValidationTimeoutCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 19)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortConnectionValidationTimeoutCond.setStatus('current')
if mibBuilder.loadTexts: olPortConnectionValidationTimeoutCond.setDescription('Connection validation could not be performed on the identified optical layer port, which may mean that the port is incorrectly connected.')
olPortConnectionValidationTimeoutClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 2, 0, 20)).setObjects(("BTI-OL-MIB", "olPortCpTypeIdx"), ("BTI-OL-MIB", "olPortShelfIdx"), ("BTI-OL-MIB", "olPortSlotIdx"), ("BTI-OL-MIB", "olPortTypeIdx"), ("BTI-OL-MIB", "olPortIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: olPortConnectionValidationTimeoutClear.setStatus('current')
if mibBuilder.loadTexts: olPortConnectionValidationTimeoutClear.setDescription('A previously active optical layer port Connection Validation Timeout condition has cleared.')
wdmInvalidPreAmpOperCnfgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3, 0, 1)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wdmInvalidPreAmpOperCnfgCond.setStatus('current')
if mibBuilder.loadTexts: wdmInvalidPreAmpOperCnfgCond.setDescription('The WDM optical pre-amplifier is operating at a configuration which is invalid for the detected loss.')
wdmInvalidPreAmpOperCnfgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3, 0, 2)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wdmInvalidPreAmpOperCnfgClear.setStatus('current')
if mibBuilder.loadTexts: wdmInvalidPreAmpOperCnfgClear.setDescription('A previously active WDM Invalid Pre-Amplifier Operating Configuration condition has cleared.')
wdmInvalidMidAmpOperCnfgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3, 0, 3)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wdmInvalidMidAmpOperCnfgCond.setStatus('current')
if mibBuilder.loadTexts: wdmInvalidMidAmpOperCnfgCond.setDescription('The WDM optical mid-amplifier is operating at a configuration which is invalid for the detected loss.')
wdmInvalidMidAmpOperCnfgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3, 0, 4)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wdmInvalidMidAmpOperCnfgClear.setStatus('current')
if mibBuilder.loadTexts: wdmInvalidMidAmpOperCnfgClear.setDescription('A previously active WDM Invalid Mid-Amplifier Operating Configuration condition has cleared.')
wdmInvalidBoostAmpOperCnfgCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3, 0, 5)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wdmInvalidBoostAmpOperCnfgCond.setStatus('current')
if mibBuilder.loadTexts: wdmInvalidBoostAmpOperCnfgCond.setDescription('The WDM optical booster-amplifier is operating at a configuration which is invalid for the detected loss.')
wdmInvalidBoostAmpOperCnfgClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 3, 0, 6)).setObjects(("BTI-OL-MIB", "wdmCpTypeIdx"), ("BTI-OL-MIB", "wdmShelfIdx"), ("BTI-OL-MIB", "wdmSlotIdx"), ("BTI-OL-MIB", "wdmLineIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wdmInvalidBoostAmpOperCnfgClear.setStatus('current')
if mibBuilder.loadTexts: wdmInvalidBoostAmpOperCnfgClear.setDescription('A previously active WDM Invalid Booster-Amplifier Operating Configuration condition has cleared.')
wchPowerOutOfSpecRxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 1)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecRxCond.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerOutOfSpecRxCond.setDescription('The power received for the wavelength channel is outside the operating range.')
wchPowerOutOfSpecRxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 2)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecRxClear.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerOutOfSpecRxClear.setDescription('A previously active Wavelength Channel Received Power Out Of Specification condition has cleared.')
wchLossOfLightRxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 3)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchLossOfLightRxCond.setStatus('current')
if mibBuilder.loadTexts: wchLossOfLightRxCond.setDescription('There is no received optical power detected for the channel.')
wchLossOfLightRxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 4)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchLossOfLightRxClear.setStatus('current')
if mibBuilder.loadTexts: wchLossOfLightRxClear.setDescription('A previously active wavelength channel Receive Loss of Light condition has cleared.')
wchPowerOutOfSpecTxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 5)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecTxCond.setStatus('current')
if mibBuilder.loadTexts: wchPowerOutOfSpecTxCond.setDescription('The power transmitted for the wavelength channel is outside the operating range.')
wchPowerOutOfSpecTxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 6)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecTxClear.setStatus('current')
if mibBuilder.loadTexts: wchPowerOutOfSpecTxClear.setDescription('A previously active Wavelength Channel Transmitted Power Out Of Specification condition has cleared.')
wchLossOfLightTxCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 7)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchLossOfLightTxCond.setStatus('current')
if mibBuilder.loadTexts: wchLossOfLightTxCond.setDescription('There is no transmitted optical power detected for the channel.')
wchLossOfLightTxClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 8)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchLossOfLightTxClear.setStatus('current')
if mibBuilder.loadTexts: wchLossOfLightTxClear.setDescription('A previously active wavelength channel Transmitted Loss of Light condition has cleared.')
wchUnequippedCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 9)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchUnequippedCond.setStatus('current')
if mibBuilder.loadTexts: wchUnequippedCond.setDescription('An unequipped indication for the wavelength channel has been received from the far-end node of the line span.')
wchUnequippedClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 10)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchUnequippedClear.setStatus('current')
if mibBuilder.loadTexts: wchUnequippedClear.setDescription('A previously active wavelength channel unequipped indication condition has cleared.')
wchAISCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 11)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchAISCond.setStatus('current')
if mibBuilder.loadTexts: wchAISCond.setDescription('An alarm indication signal for the wavelength channel has been received from the far-end node of the line span.')
wchAISClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 12)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchAISClear.setStatus('current')
if mibBuilder.loadTexts: wchAISClear.setDescription('A previously active wavelength channel alarm indication signal condition has cleared.')
wchPowerOutOfSpecRxHighCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 13)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecRxHighCond.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerOutOfSpecRxHighCond.setDescription('The power received for the wavelength channel exceeds the upper limit of the normal operating range.')
wchPowerOutOfSpecRxHighClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 14)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecRxHighClear.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerOutOfSpecRxHighClear.setDescription('A previously active Wavelength Channel Received Power Out Of Specification High condition has cleared.')
wchPowerOutOfSpecRxLowCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 15)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecRxLowCond.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerOutOfSpecRxLowCond.setDescription('The power received for the wavelength channel is below the lower limit of the normal operating range.')
wchPowerOutOfSpecRxLowClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 16)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerOutOfSpecRxLowClear.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerOutOfSpecRxLowClear.setDescription('A previously active Wavelength Channel Received Power Out Of Specification Low condition has cleared.')
wchPowerRxHighFailCond = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 17)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerRxHighFailCond.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerRxHighFailCond.setDescription('The power received for the wavelength channel exceeds the maximum allowable level. The wavelength channel is declared to be failed at this power level.')
wchPowerRxHighFailClear = NotificationType((1, 3, 6, 1, 4, 1, 18070, 2, 2, 2, 2, 28, 4, 0, 18)).setObjects(("BTI-OL-MIB", "wchCpTypeIdx"), ("BTI-OL-MIB", "wchShelfIdx"), ("BTI-OL-MIB", "wchSlotIdx"), ("BTI-OL-MIB", "wchPortTypeIdx"), ("BTI-OL-MIB", "wchPortIdx"), ("BTI-OL-MIB", "wchIdx"), ("BTI-7000-MIB", "condReportType"), ("BTI-7000-MIB", "condDateAndTime"), ("BTI-7000-MIB", "condSeverity"), ("BTI-7000-MIB", "condServiceAffecting"), ("BTI-7000-MIB", "trapSeqNum"), ("BTI-7000-MIB", "condDescription"), ("BTI-7000-MIB", "condObjectType"), ("BTI-7000-MIB", "condCodeType"))
if mibBuilder.loadTexts: wchPowerRxHighFailClear.setStatus('deprecated')
if mibBuilder.loadTexts: wchPowerRxHighFailClear.setDescription('A previously active Wavelength Channel Received Power High Fail condition has cleared.')
mibBuilder.exportSymbols("BTI-OL-MIB", olPortHistPMTypeIdx=olPortHistPMTypeIdx, wdmShelfIdx=wdmShelfIdx, olOSCCrntPMESSInitialize=olOSCCrntPMESSInitialize, wchUnequippedClear=wchUnequippedClear, olOSCHistPMOPTValidity=olOSCHistPMOPTValidity, olPortCrntPMInitializeAll=olPortCrntPMInitializeAll, olOSCTable=olOSCTable, olPortHistPMOPTStdDevValue=olPortHistPMOPTStdDevValue, olOSCTcaEvt=olOSCTcaEvt, olOSCFEDegr=olOSCFEDegr, olPortCrntPMLossRxValidity=olPortCrntPMLossRxValidity, olOSCPMThresholdEntry=olOSCPMThresholdEntry, olPortOperStatQlfr=olPortOperStatQlfr, olOSCCrntPMSESSValidity=olOSCCrntPMSESSValidity, olPortSlotIdx=olPortSlotIdx, olPortHistPMLossRxValidity=olPortHistPMLossRxValidity, olOSCOpticalBackReflOutOfSpecCond=olOSCOpticalBackReflOutOfSpecCond, olPortCustom2=olPortCustom2, olPortHistPMOPTTimeStamp=olPortHistPMOPTTimeStamp, wchHistPMEntry=wchHistPMEntry, wchHistPMOPRValue=wchHistPMOPRValue, olOSCExpFESysName=olOSCExpFESysName, wdmCpTypeIdx=wdmCpTypeIdx, olPortHistPMOPRTimeStamp=olPortHistPMOPRTimeStamp, wchLossOfLightRxCond=wchLossOfLightRxCond, wchHistPMOPTMaxInitialize=wchHistPMOPTMaxInitialize, olOSCCrntPMESSValidity=olOSCCrntPMESSValidity, wchGrid=wchGrid, wchCrntPMOPRValue=wchCrntPMOPRValue, olEqptTable=olEqptTable, olOSCLossOfFrameClear=olOSCLossOfFrameClear, eqptConnType=eqptConnType, wchOperStatQlfr=wchOperStatQlfr, wdmInvalidPreAmpOperCnfgCond=wdmInvalidPreAmpOperCnfgCond, olGroupCustom1=olGroupCustom1, olOSCCrntPMCVSTimeStamp=olOSCCrntPMCVSTimeStamp, eqptConnSrcIdx=eqptConnSrcIdx, olPortEntry=olPortEntry, wchHistPMOPRMaxValidity=wchHistPMOPRMaxValidity, olPortPayloadMissingIndClear=olPortPayloadMissingIndClear, olPortCrntPMTable=olPortCrntPMTable, wchCrntPMOPRValidity=wchCrntPMOPRValidity, odccSlotIdx=odccSlotIdx, olPortRowStatus=olPortRowStatus, olPortHistPMOPRStdDevTimeStamp=olPortHistPMOPRStdDevTimeStamp, olOSCCrntPMSEFSSValidity=olOSCCrntPMSEFSSValidity, wchCrntPMPortTypeIdx=wchCrntPMPortTypeIdx, olPortCrntPMEntry=olPortCrntPMEntry, olPortCrntPMOPRMaxTimeStamp=olPortCrntPMOPRMaxTimeStamp, olPortPayloadMissingIndCond=olPortPayloadMissingIndCond, olOSCOpticalBackReflHighThClear=olOSCOpticalBackReflHighThClear, wchHistPMTable=wchHistPMTable, olOSCHistPMIntervalTypeIdx=olOSCHistPMIntervalTypeIdx, wchActAutoEnableTimer=wchActAutoEnableTimer, wchXCDstCpTypeIdx=wchXCDstCpTypeIdx, olOSCCrntPMSlotIdx=olOSCCrntPMSlotIdx, wdmInvalidBoostAmpOperCnfgClear=wdmInvalidBoostAmpOperCnfgClear, olOSCHistPMESSValidity=olOSCHistPMESSValidity, wchAutoEnableTimer=wchAutoEnableTimer, wchHistPMIntervalIdx=wchHistPMIntervalIdx, wchHistPMOPRValidity=wchHistPMOPRValidity, wchPowerOutOfSpecTxCond=wchPowerOutOfSpecTxCond, olPortHistPMOPRAvgTimeStamp=olPortHistPMOPRAvgTimeStamp, olOSCHistPMESSInitialize=olOSCHistPMESSInitialize, olPortHistPMOPRAvgValue=olPortHistPMOPRAvgValue, olOSCCrntPMOPTTimeStamp=olOSCCrntPMOPTTimeStamp, olOSCLossOfLightTxCond=olOSCLossOfLightTxCond, olPortConnectionValidationTimeoutCond=olPortConnectionValidationTimeoutCond, olPortHistPMLossTxValidity=olPortHistPMLossTxValidity, wchXCSrcPortTypeIdx=wchXCSrcPortTypeIdx, wchHistPMOPRMaxValue=wchHistPMOPRMaxValue, wchEvtNotifications=wchEvtNotifications, olOSCOperStatQlfr=olOSCOperStatQlfr, olOSCFESysName=olOSCFESysName, olOSCCustom2=olOSCCustom2, olPortCustom1=olPortCustom1, olPortCrntPMOPRTimeStamp=olPortCrntPMOPRTimeStamp, wchHistPMPortIdx=wchHistPMPortIdx, wdmCustom2=wdmCustom2, wchPortIdx=wchPortIdx, olOSCCrntPMIntervalTypeIdx=olOSCCrntPMIntervalTypeIdx, wdmEvtNotifications=wdmEvtNotifications, wdmCustom1=wdmCustom1, olOSCHistPMUASSValidity=olOSCHistPMUASSValidity, wdmId=wdmId, olPortShelfIdx=olPortShelfIdx, wdmActAutoEnableTimer=wdmActAutoEnableTimer, olOSCFEIMMon=olOSCFEIMMon, wdmSlotIdx=wdmSlotIdx, olOSCPMThresholdESSValue=olOSCPMThresholdESSValue, olOSCOpticalBackReflHighThCond=olOSCOpticalBackReflHighThCond, olOSCLossOfLightRxClear=olOSCLossOfLightRxClear, olOSCHistPMIntervalIdx=olOSCHistPMIntervalIdx, olPortActCnxDegree=olPortActCnxDegree, wdmInvalidMidAmpOperCnfgClear=wdmInvalidMidAmpOperCnfgClear, olPortHistPMOPTMinTimeStamp=olPortHistPMOPTMinTimeStamp, olPortCrntPMOPTStdDevTimeStamp=olPortCrntPMOPTStdDevTimeStamp, olPortHistPMOPTMaxTimeStamp=olPortHistPMOPTMaxTimeStamp, olPortFrequency=olPortFrequency, olOSCLossOfFrameCond=olOSCLossOfFrameCond, olPortCrntPMCpTypeIdx=olPortCrntPMCpTypeIdx, wchPowerOutOfSpecRxClear=wchPowerOutOfSpecRxClear, wchPowerOutOfSpecRxLowClear=wchPowerOutOfSpecRxLowClear, olOSCHistPMOPRValidity=olOSCHistPMOPRValidity, wchCrntPMOPTMaxTimeStamp=wchCrntPMOPTMaxTimeStamp, olOSCCrntPMSESSTimeStamp=olOSCCrntPMSESSTimeStamp, odccRowStatus=odccRowStatus, wdmCustom3=wdmCustom3, olPortCrntPMOPRAvgValidity=olPortCrntPMOPRAvgValidity, wchXCEntry=wchXCEntry, olOSCHistPMCVSTimeStamp=olOSCHistPMCVSTimeStamp, wdmInvalidMidAmpOperCnfgCond=wdmInvalidMidAmpOperCnfgCond, eqptConnSrcShelfIdx=eqptConnSrcShelfIdx, olGroupCustom3=olGroupCustom3, wchXCSrcSlotIdx=wchXCSrcSlotIdx, olPortCrntPMOPRStdDevValue=olPortCrntPMOPRStdDevValue, wchCpTypeIdx=wchCpTypeIdx, olOSCHistPMOPTTimeStamp=olOSCHistPMOPTTimeStamp, wchCrntPMOPTMinValue=wchCrntPMOPTMinValue, wchCustom3=wchCustom3, wchPowerRxHighFailCond=wchPowerRxHighFailCond, wchXCSrcCpTypeIdx=wchXCSrcCpTypeIdx, olPortCrntPMOPTTimeStamp=olPortCrntPMOPTTimeStamp, wchHistPMIntervalTypeIdx=wchHistPMIntervalTypeIdx, wchHistPMSlotIdx=wchHistPMSlotIdx, olPortCrntPMOPTAvgValidity=olPortCrntPMOPTAvgValidity, olOSCCrntPMESSTimeStamp=olOSCCrntPMESSTimeStamp, wchCrntPMPortIdx=wchCrntPMPortIdx, wchXCRowStatus=wchXCRowStatus, odccShelfIdx=odccShelfIdx, olOSCFarEndIdMismatchCond=olOSCFarEndIdMismatchCond, olPortHistPMOPTAvgTimeStamp=olPortHistPMOPTAvgTimeStamp, olOSCHistPMSEFSSTimeStamp=olOSCHistPMSEFSSTimeStamp, wchHistPMOPRMinInitialize=wchHistPMOPRMinInitialize, olOSCOperStatus=olOSCOperStatus, olOSCCrntPMSESSInitialize=olOSCCrntPMSESSInitialize, wchCrntPMOPRMaxTimeStamp=wchCrntPMOPRMaxTimeStamp, wdmFiberType=wdmFiberType, wchHistPMOPRTimeStamp=wchHistPMOPRTimeStamp, wchHistPMOPTTimeStamp=wchHistPMOPTTimeStamp, eqptConnDstCpTypeIdx=eqptConnDstCpTypeIdx, wchCrntPMOPTMaxValue=wchCrntPMOPTMaxValue, eqptConnDstPortTypeIdx=eqptConnDstPortTypeIdx, wchCrntPMOPRMinValidity=wchCrntPMOPRMinValidity, wchXCSrcShelfIdx=wchXCSrcShelfIdx, olPortCrntPMLossTxValue=olPortCrntPMLossTxValue, olPortCrntPMOPRStdDevTimeStamp=olPortCrntPMOPRStdDevTimeStamp, olOSCCrntPMOBRTimeStamp=olOSCCrntPMOBRTimeStamp, olOSCPMThresholdTable=olOSCPMThresholdTable, olPortHistPMLossRxTimeStamp=olPortHistPMLossRxTimeStamp, wchCrntPMOPTMinValidity=wchCrntPMOPTMinValidity, olOSCSpanContCommCond=olOSCSpanContCommCond, eqptConnDstShelfIdx=eqptConnDstShelfIdx, olOSCCrntPMUASSValue=olOSCCrntPMUASSValue, olPortHistPMOPTMaxValue=olPortHistPMOPTMaxValue, olOSCAdminStatus=olOSCAdminStatus, wdmRowStatus=wdmRowStatus, olOSCHistPMOPRValue=olOSCHistPMOPRValue, olOSCHistPMCpTypeIdx=olOSCHistPMCpTypeIdx, olPortHistPMOPRAvgValidity=olPortHistPMOPRAvgValidity, olPortHistPMOPRMaxTimeStamp=olPortHistPMOPRMaxTimeStamp, olOSCHistPMSESSValue=olOSCHistPMSESSValue, olGroupMerge=olGroupMerge, wchHistPMIdx=wchHistPMIdx, wchHistPMOPTMaxTimeStamp=wchHistPMOPTMaxTimeStamp, olOSCCrntPMESSValue=olOSCCrntPMESSValue, wchUnequippedCond=wchUnequippedCond, wdmInvalidBoostAmpOperCnfgCond=wdmInvalidBoostAmpOperCnfgCond, olOSCCrntPMCpTypeIdx=olOSCCrntPMCpTypeIdx, olPortHistPMIdx=olPortHistPMIdx, olPortHistPMOPRMinValidity=olPortHistPMOPRMinValidity, wchPowerRxHighFailClear=wchPowerRxHighFailClear, odccLineIdx=odccLineIdx, olOSCCrntPMOPRTimeStamp=olOSCCrntPMOPRTimeStamp, olOSCHistPMOBRTimeStamp=olOSCHistPMOBRTimeStamp, wchCrntPMIdx=wchCrntPMIdx, wdmInvalidPreAmpOperCnfgClear=wdmInvalidPreAmpOperCnfgClear, olPortGrid=olPortGrid, wchHistPMOPTValidity=wchHistPMOPTValidity, olPortHistPMShelfIdx=olPortHistPMShelfIdx, wchHistPMOPTMaxValidity=wchHistPMOPTMaxValidity, olOSCCrntPMSEFSSTimeStamp=olOSCCrntPMSEFSSTimeStamp, olOSCExpFEIPAddr=olOSCExpFEIPAddr, olGroupId=olGroupId, olOSCEntry=olOSCEntry, olOSCHistPMSESSValidity=olOSCHistPMSESSValidity, eqptConnSrcSlotIdx=eqptConnSrcSlotIdx, olPortWavelength=olPortWavelength, olEqptShelfIdx=olEqptShelfIdx, olPortHistPMOPTStdDevTimeStamp=olPortHistPMOPTStdDevTimeStamp, olPortLossRxOutOfSpecClear=olPortLossRxOutOfSpecClear, wchCrntPMOPRMinInitialize=wchCrntPMOPRMinInitialize, olPortStatusChangeEvt=olPortStatusChangeEvt, olOSCCrntPMOPRValue=olOSCCrntPMOPRValue, wchCrntPMOPTTimeStamp=wchCrntPMOPTTimeStamp, olPortIdx=olPortIdx, olPortCrntPMSlotIdx=olPortCrntPMSlotIdx, olOSCCrntPMEntry=olOSCCrntPMEntry, eqptConnDstIdx=eqptConnDstIdx, olMib=olMib, wchCondNotifications=wchCondNotifications, wchTable=wchTable, wchXCDstShelfIdx=wchXCDstShelfIdx, PYSNMP_MODULE_ID=olMib, olOSCAutoEnableTimer=olOSCAutoEnableTimer, olPortHistPMOPRValue=olPortHistPMOPRValue, wchCrntPMOPRMinValue=wchCrntPMOPRMinValue, wchXCSrcPortIdx=wchXCSrcPortIdx, wchCrntPMCpTypeIdx=wchCrntPMCpTypeIdx, olPortPowerOutOfSpecRxClear=olPortPowerOutOfSpecRxClear, olOSCSlotIdx=olOSCSlotIdx, eqptConnSrcPortTypeIdx=eqptConnSrcPortTypeIdx, olOSCActAutoEnableTimer=olOSCActAutoEnableTimer, wchHistPMOPTMinValue=wchHistPMOPTMinValue, olOSCCustom1=olOSCCustom1, OlPortType=OlPortType, olPortCrntPMIntervalTypeIdx=olPortCrntPMIntervalTypeIdx, olOSCCrntPMCVSValidity=olOSCCrntPMCVSValidity, olOSCShelfIdx=olOSCShelfIdx, wchStatusChangeEvt=wchStatusChangeEvt, olOSCCpTypeIdx=olOSCCpTypeIdx, olPortHistPMOPRMinTimeStamp=olPortHistPMOPRMinTimeStamp, wchXCDstPortIdx=wchXCDstPortIdx, olOSCHistPMCVSValidity=olOSCHistPMCVSValidity, olEqptSlotIdx=olEqptSlotIdx, olEqptRowStatus=olEqptRowStatus, olOSCFEIPAddr=olOSCFEIPAddr, olOSCRowStatus=olOSCRowStatus, olOSCHistPMShelfIdx=olOSCHistPMShelfIdx, olOSCCrntPMUASSValidity=olOSCCrntPMUASSValidity, olOSCHistPMSEFSSInitialize=olOSCHistPMSEFSSInitialize, wchCrntPMOPRMaxInitialize=wchCrntPMOPRMaxInitialize, olOSCId=olOSCId, olPortCrntPMOPTMaxValue=olPortCrntPMOPTMaxValue, olPortDWDMType=olPortDWDMType, OlGroupType=OlGroupType, olOSCPMThresholdSESSValue=olOSCPMThresholdSESSValue, olOSCCustom3=olOSCCustom3, olPortCrntPMOPTMinValidity=olPortCrntPMOPTMinValidity, olOSCHistPMOPRTimeStamp=olOSCHistPMOPRTimeStamp, olOSCExpFEGrp=olOSCExpFEGrp, olOSCHistPMESSValue=olOSCHistPMESSValue, wchHistPMOPTValue=wchHistPMOPTValue, olPortCrntPMTypeIdx=olPortCrntPMTypeIdx, wdmSpanLossRxHighTh=wdmSpanLossRxHighTh, olOSCHistPMCVSValue=olOSCHistPMCVSValue, wchCrntPMOPRMinTimeStamp=wchCrntPMOPRMinTimeStamp, olOSCCrntPMUASSInitialize=olOSCCrntPMUASSInitialize, olGroupCustom2=olGroupCustom2, wchCrntPMTable=wchCrntPMTable, olPortTypeIdx=olPortTypeIdx, wchEntry=wchEntry, olPortHistPMIntervalTypeIdx=olPortHistPMIntervalTypeIdx, olPortEvtNotifications=olPortEvtNotifications)
mibBuilder.exportSymbols("BTI-OL-MIB", olPortCrntPMOPTMaxValidity=olPortCrntPMOPTMaxValidity, olOSCHistPMSEFSSValue=olOSCHistPMSEFSSValue, olPortHistPMOPTValue=olPortHistPMOPTValue, wchCustom1=wchCustom1, olOSCPMThresholdShelfIdx=olOSCPMThresholdShelfIdx, wchAISClear=wchAISClear, olPortCrntPMOPTMaxTimeStamp=olPortCrntPMOPTMaxTimeStamp, olPortLossRxOutOfSpecCond=olPortLossRxOutOfSpecCond, olPortCrntPMOPRAvgTimeStamp=olPortCrntPMOPRAvgTimeStamp, olPortCrntPMLossTxValidity=olPortCrntPMLossTxValidity, wdmAutoEnableTimer=wdmAutoEnableTimer, odccCpTypeIdx=odccCpTypeIdx, olEqptDegreeNum=olEqptDegreeNum, olPortCrntPMOPRMinValue=olPortCrntPMOPRMinValue, olOSCOpticalBackReflOutOfSpecClear=olOSCOpticalBackReflOutOfSpecClear, olOSCPMThresholdLineIdx=olOSCPMThresholdLineIdx, olPortCrntPMOPTMinValue=olPortCrntPMOPTMinValue, wchCrntPMIntervalTypeIdx=wchCrntPMIntervalTypeIdx, olOSCPMThresholdSlotIdx=olOSCPMThresholdSlotIdx, olPortCrntPMLossRxTimeStamp=olPortCrntPMLossRxTimeStamp, olOSCCrntPMUASSTimeStamp=olOSCCrntPMUASSTimeStamp, olEqptCpTypeIdx=olEqptCpTypeIdx, olOSCLossOfLightRxCond=olOSCLossOfLightRxCond, olOSCHistPMESSTimeStamp=olOSCHistPMESSTimeStamp, olOSCCrntPMOPTValidity=olOSCCrntPMOPTValidity, olEqptEntry=olEqptEntry, olPortHistPMIntervalIdx=olPortHistPMIntervalIdx, olPortCrntPMOPRMaxValue=olPortCrntPMOPRMaxValue, olPortCustom3=olPortCustom3, olOSCHistPMSESSInitialize=olOSCHistPMSESSInitialize, wchShelfIdx=wchShelfIdx, olPerformance=olPerformance, olOSCHistPMLineIdx=olOSCHistPMLineIdx, wdmCondNotifications=wdmCondNotifications, wdmSpanLossSpecMax=wdmSpanLossSpecMax, olPortCrntPMOPRStdDevValidity=olPortCrntPMOPRStdDevValidity, olOSCHistPMSlotIdx=olOSCHistPMSlotIdx, wchWavelength=wchWavelength, olOSCCrntPMShelfIdx=olOSCCrntPMShelfIdx, olOSCCrntPMTable=olOSCCrntPMTable, wchHistPMOPRMaxInitialize=wchHistPMOPRMaxInitialize, wdmOperStatQlfr=wdmOperStatQlfr, eqptConnSrcCpTypeIdx=eqptConnSrcCpTypeIdx, wchCrntPMShelfIdx=wchCrntPMShelfIdx, olOSCCrntPMSESSValue=olOSCCrntPMSESSValue, wchHistPMOPRMaxTimeStamp=wchHistPMOPRMaxTimeStamp, olOSCHistPMSESSTimeStamp=olOSCHistPMSESSTimeStamp, wchCrntPMOPTMinTimeStamp=wchCrntPMOPTMinTimeStamp, olOSCHistPMEntry=olOSCHistPMEntry, olPortBackwardDefectIndClear=olPortBackwardDefectIndClear, wchHistPMOPTMinInitialize=wchHistPMOPTMinInitialize, wchPowerOutOfSpecRxCond=wchPowerOutOfSpecRxCond, wdmNumChannels=wdmNumChannels, olPortRemoteId=olPortRemoteId, olOSCSpanContCommClear=olOSCSpanContCommClear, wchXCSrcChannelIdx=wchXCSrcChannelIdx, olPortHistPMOPRMaxValidity=olPortHistPMOPRMaxValidity, olPortCrntPMOPTAvgTimeStamp=olPortCrntPMOPTAvgTimeStamp, olPortBackwardDefectIndCond=olPortBackwardDefectIndCond, olOSCHistPMOBRValue=olOSCHistPMOBRValue, wchXCServiceName=wchXCServiceName, wchCrntPMOPRTimeStamp=wchCrntPMOPRTimeStamp, olPortCrntPMLossRxValue=olPortCrntPMLossRxValue, olPortHistPMOPRStdDevValue=olPortHistPMOPRStdDevValue, olOSCCondNotifications=olOSCCondNotifications, olPortChannelCountDeficiencyClear=olPortChannelCountDeficiencyClear, olPortHistPMLossTxTimeStamp=olPortHistPMLossTxTimeStamp, wchCrntPMOPRMaxValidity=wchCrntPMOPRMaxValidity, olPortConnectionValidationTimeoutClear=olPortConnectionValidationTimeoutClear, olPortCrntPMOPTStdDevValidity=olPortCrntPMOPTStdDevValidity, olOSCCrntPMOBRValue=olOSCCrntPMOBRValue, olPortHistPMSlotIdx=olPortHistPMSlotIdx, olOSCHistPMUASSTimeStamp=olOSCHistPMUASSTimeStamp, olPortHistPMOPTAvgValue=olPortHistPMOPTAvgValue, olPortCondNotifications=olPortCondNotifications, olOSCCrntPMSEFSSInitialize=olOSCCrntPMSEFSSInitialize, olOSCPMThresholdCVSValue=olOSCPMThresholdCVSValue, olGroupMergeCmd=olGroupMergeCmd, eqptConnRowStatus=eqptConnRowStatus, olOSCStatusChangeEvt=olOSCStatusChangeEvt, olOSCCrntPMLineIdx=olOSCCrntPMLineIdx, eqptConnDstSlotIdx=eqptConnDstSlotIdx, odccTable=odccTable, olOSCHistPMTable=olOSCHistPMTable, olOSCCrntPMOPRValidity=olOSCCrntPMOPRValidity, olPortHistPMOPTStdDevValidity=olPortHistPMOPTStdDevValidity, wchCrntPMOPRMaxValue=wchCrntPMOPRMaxValue, wchCrntPMSlotIdx=wchCrntPMSlotIdx, olOSCExpFEDegr=olOSCExpFEDegr, olOSCHistPMCVSInitialize=olOSCHistPMCVSInitialize, olGroupTable=olGroupTable, olPortHistPMOPRMaxValue=olPortHistPMOPRMaxValue, wchLossOfLightTxClear=wchLossOfLightTxClear, olPortChannelCountDeficiencyCond=olPortChannelCountDeficiencyCond, olPortConnectionMismatchClear=olPortConnectionMismatchClear, olOSCCrntPMOPTValue=olOSCCrntPMOPTValue, olPortHistPMInitializeAll=olPortHistPMInitializeAll, olGroupMergeSecondary=olGroupMergeSecondary, wchCrntPMOPTMaxValidity=wchCrntPMOPTMaxValidity, wchHistPMOPTMaxValue=wchHistPMOPTMaxValue, olGroupEntry=olGroupEntry, wchHistPMPortTypeIdx=wchHistPMPortTypeIdx, olPortCrntPMOPTValue=olPortCrntPMOPTValue, wchHistPMCpTypeIdx=wchHistPMCpTypeIdx, olGroupRowStatus=olGroupRowStatus, olPortCrntPMOPTAvgValue=olPortCrntPMOPTAvgValue, olPortHistPMEntry=olPortHistPMEntry, olEqptGroupNum=olEqptGroupNum, wchCrntPMOPTMaxInitialize=wchCrntPMOPTMaxInitialize, wchXCTable=wchXCTable, olPortHistPMLossRxValue=olPortHistPMLossRxValue, wchCrntPMOPTValue=wchCrntPMOPTValue, olOSCEvtNotifications=olOSCEvtNotifications, olOSCCrntPMCVSInitialize=olOSCCrntPMCVSInitialize, eqptConnEntry=eqptConnEntry, wchBitrate=wchBitrate, olOSCLossOfLightTxClear=olOSCLossOfLightTxClear, wchHistPMOPRMinValidity=wchHistPMOPRMinValidity, wchCrntPMOPTMinInitialize=wchCrntPMOPTMinInitialize, odccAdminStatus=odccAdminStatus, olGroupType=olGroupType, olOSCHistPMOPTValue=olOSCHistPMOPTValue, wchHistPMOPRMinValue=wchHistPMOPRMinValue, olPortCrntPMOPTStdDevValue=olPortCrntPMOPTStdDevValue, olPortHistPMCpTypeIdx=olPortHistPMCpTypeIdx, wchOperStatus=wchOperStatus, olPortHistPMLossTxValue=olPortHistPMLossTxValue, olOSCPMThresholdSEFSSValue=olOSCPMThresholdSEFSSValue, olOSCHistPMUASSValue=olOSCHistPMUASSValue, olPortCrntPMOPRAvgValue=olPortCrntPMOPRAvgValue, wchXCDstChannelIdx=wchXCDstChannelIdx, olPortHistPMOPTMinValue=olPortHistPMOPTMinValue, wchPowerOutOfSpecRxLowCond=wchPowerOutOfSpecRxLowCond, olPortHistPMOPRStdDevValidity=olPortHistPMOPRStdDevValidity, olOSCFarEndIdMismatchClear=olOSCFarEndIdMismatchClear, wchLossOfLightRxClear=wchLossOfLightRxClear, wchSlotIdx=wchSlotIdx, olOSCCrntPMOBRValidity=olOSCCrntPMOBRValidity, olPortConnectionMismatchCond=olPortConnectionMismatchCond, odccEntry=odccEntry, wdmTable=wdmTable, eqptConnTable=eqptConnTable, olPortCrntPMShelfIdx=olPortCrntPMShelfIdx, wchHistPMShelfIdx=wchHistPMShelfIdx, olOSCFEGrpType=olOSCFEGrpType, wdmOperStatus=wdmOperStatus, wchPowerOutOfSpecTxClear=wchPowerOutOfSpecTxClear, olPortCrntPMOPRValidity=olPortCrntPMOPRValidity, olGroupIdx=olGroupIdx, olPortAPSDCond=olPortAPSDCond, olOSCCrntPMSEFSSValue=olOSCCrntPMSEFSSValue, olOSCEqlzContCommCond=olOSCEqlzContCommCond, olOSCPMThresholdUASSValue=olOSCPMThresholdUASSValue, wchXCDstPortTypeIdx=wchXCDstPortTypeIdx, olGroupMergePrimary=olGroupMergePrimary, olPortAPSDClear=olPortAPSDClear, olPortCrntPMOPTValidity=olPortCrntPMOPTValidity, olOSCCrntPMCVSValue=olOSCCrntPMCVSValue, olOSCPMThresholdCpTypeIdx=olOSCPMThresholdCpTypeIdx, wchCrntPMEntry=wchCrntPMEntry, wchIdx=wchIdx, wchCrntPMOPTValidity=wchCrntPMOPTValidity, wchAdminStatus=wchAdminStatus, wchCustom2=wchCustom2, olPortCrntPMOPRValue=olPortCrntPMOPRValue, olPortCrntPMOPRMinTimeStamp=olPortCrntPMOPRMinTimeStamp, olPortHistPMOPTMinValidity=olPortHistPMOPTMinValidity, olOSCHistPMSEFSSValidity=olOSCHistPMSEFSSValidity, olPortCrntPMOPRMaxValidity=olPortCrntPMOPRMaxValidity, olOSCLineIdx=olOSCLineIdx, wchHistPMOPRMinTimeStamp=wchHistPMOPRMinTimeStamp, wchHistPMOPTMinValidity=wchHistPMOPTMinValidity, wchPortTypeIdx=wchPortTypeIdx, wchPowerOutOfSpecRxHighClear=wchPowerOutOfSpecRxHighClear, olPortPowerOutOfSpecRxCond=olPortPowerOutOfSpecRxCond, wdmLineIdx=wdmLineIdx, olOSCFarEndNodeCnfgInconsistentClear=olOSCFarEndNodeCnfgInconsistentClear, olOSCHistPMOBRValidity=olOSCHistPMOBRValidity, wchAISCond=wchAISCond, olPortCrntPMIdx=olPortCrntPMIdx, wchFrequency=wchFrequency, olPortHistPMOPTMaxValidity=olPortHistPMOPTMaxValidity, olPortHistPMOPTAvgValidity=olPortHistPMOPTAvgValidity, wdmEntry=wdmEntry, olPortCrntPMLossTxTimeStamp=olPortCrntPMLossTxTimeStamp, olOSCEqlzContCommClear=olOSCEqlzContCommClear, olPortLossRxHighThClear=olPortLossRxHighThClear, olPortCpTypeIdx=olPortCpTypeIdx, olOSCFarEndNodeCnfgInconsistentCond=olOSCFarEndNodeCnfgInconsistentCond, wchId=wchId, wchXCDstSlotIdx=wchXCDstSlotIdx, olPortCrntPMOPTMinTimeStamp=olPortCrntPMOPTMinTimeStamp, olPortHistPMTable=olPortHistPMTable, olPortId=olPortId, olPortCrntPMOPRMinValidity=olPortCrntPMOPRMinValidity, olPortLossRxHighThCond=olPortLossRxHighThCond, olPortLossOfLightRxClear=olPortLossOfLightRxClear, wdmSpanLength=wdmSpanLength, olPortLossOfLightRxCond=olPortLossOfLightRxCond, olOSCPMThresholdIntervalTypeIdx=olOSCPMThresholdIntervalTypeIdx, wdmStatusChangeEvt=wdmStatusChangeEvt, olPortExpCnxDegree=olPortExpCnxDegree, wchLossOfLightTxCond=wchLossOfLightTxCond, olOSCHistPMUASSInitialize=olOSCHistPMUASSInitialize, olOSCFEGrp=olOSCFEGrp, wchRowStatus=wchRowStatus, wchPowerOutOfSpecRxHighCond=wchPowerOutOfSpecRxHighCond, olPortHistPMOPRMinValue=olPortHistPMOPRMinValue, olPortHistPMOPRValidity=olPortHistPMOPRValidity, wchHistPMOPTMinTimeStamp=wchHistPMOPTMinTimeStamp, olPortOperStatus=olPortOperStatus, wdmAdminStatus=wdmAdminStatus, olPortTable=olPortTable, olPortHistPMOPTValidity=olPortHistPMOPTValidity)
