#
# PySNMP MIB module TDLC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TDLC-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:15:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, Integer32, iso, TimeTicks, Unsigned32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Counter32, MibIdentifier, Bits, NotificationType, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "iso", "TimeTicks", "Unsigned32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Counter32", "MibIdentifier", "Bits", "NotificationType", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
class DisplayString(OctetString):
    pass

cdx6500PPCTTDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33), )
if mibBuilder.loadTexts: cdx6500PPCTTDLCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTTDLCPortTable.setDescription('This table contains the TDLC port configuration parameters.')
cdx6500PPCTTDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1), ).setIndexNames((0, "TDLC-OPT-MIB", "tdlcPCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTTDLCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTTDLCPortEntry.setDescription('Entries in the TDLC port configuration table.')
tdlcPCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgPortNumber.setDescription('Port Number of the TDLC port.')
tdlcPCfgPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49))).clone(namedValues=NamedValues(("tdlc", 49)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgPortType.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgPortType.setDescription('Specifies the type of access protocol for this port.')
tdlcPCfgPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 13, 14, 15, 16))).clone(namedValues=NamedValues(("speed300", 3), ("speed1200", 4), ("speed2400", 13), ("speed4800", 14), ("speed9600", 15), ("speed19200", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgPortSpeed.setDescription('Specifies port speed in bits per second. speed300 : 300 bits per second. speed1200 : 1200 bits per second. speed2400 : 2400 bits per second. speed4800 : 4800 bits per second. speed9600 : 9600 bits per second. speed19200 : 19200 bits per second.')
tdlcPCfgConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("simp", 1), ("dtr", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgConnType.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgConnType.setDescription('This specifies the control signal handshake and clocking required for a connection to be made to this port. simp - simple, no control signals required. dtr - dedicated, require the data terminal ready signal (dtr). nc - Skipped during configuration.')
tdlcPCfgCRCOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("normal", 1), ("transp", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgCRCOption.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgCRCOption.setDescription('This specifies CRC checking and generation for TNPP data frames. normal - 2 Bytes Binary CRC. transp - 4 Bytes ASCII CRC. nc - Skipped during configuration.')
tdlcPCfgTANControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgTANControl.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgTANControl.setDescription('This specifies whether to accept the control characters ACK, NAK, CAN and RS in TNPP data frames. no - Not Accepted. yes - Accepted. nc - Skipped during configuration.')
tdlcPCfgPagTerminalID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgPagTerminalID.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgPagTerminalID.setDescription('This specifies the identifier for the paging terminal connected.')
tdlcPCfgResponseControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 100))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("nc", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgResponseControl.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgResponseControl.setDescription('This specifies whether to respond to the paging terminal when the TFRI does not have connection with TFR. yes - Will respond only when the TFRI has connection with TFR. no - Will respond irrespective of TFRI connection with TFR.')
tdlcPCfgElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
tdlcPCfgV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
tdlcPCfgHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 33, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPCfgHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPCfgHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTTDLCPStatTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34))
tdlcPGenStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1), )
if mibBuilder.loadTexts: tdlcPGenStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGenStatTable.setDescription('This table contains the TDLC Port statistics general parameters.')
tdlcPGenStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1), ).setIndexNames((0, "TDLC-OPT-MIB", "tdlcPGStatPortNumber"))
if mibBuilder.loadTexts: tdlcPGenStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGenStatEntry.setDescription('Entries in the TDLC port statistics general parameter table.')
tdlcPGStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatPortNumber.setDescription('Port Number of the TDLC port.')
tdlcPGStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48))).clone(namedValues=NamedValues(("tdlc", 48)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatPortType.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatPortType.setDescription('This indicates the type of access protocol for this port.')
tdlcPGStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatPortStatus.setDescription('This indicates the operational status of the port. disabled : port is disabled. up : port is up.')
tdlcPGStatPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatPortSpeed.setDescription('This indicates port speed in bits per second.')
tdlcPGStatPortUtilIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatPortUtilIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatPortUtilIn.setDescription('This indicates the port utilization for the line to port direction.')
tdlcPGStatPortUtilOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatPortUtilOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatPortUtilOut.setDescription('This indicates the port utilization for the port to line direction.')
tdlcPGStatParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatParityErrors.setDescription('This indicates the number of parity errors counted by the I/O driver.')
tdlcPGStatOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatOverrunErrors.setDescription('This indicates the number of overrun errors detected by the I/O driver.')
tdlcPGStatFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPGStatFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPGStatFramingErrors.setDescription('This indicates the number of framing errors counted by the I/O driver.')
tdlcPDataSummaryStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2), )
if mibBuilder.loadTexts: tdlcPDataSummaryStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDataSummaryStatTable.setDescription('This table contains the TNPP port statistics data summary parameters.')
tdlcPDataSummaryStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1), ).setIndexNames((0, "TDLC-OPT-MIB", "tdlcPDSStatPortNumber"))
if mibBuilder.loadTexts: tdlcPDataSummaryStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDataSummaryStatEntry.setDescription('Entries in the TDLC port statistics data summary parameter table.')
tdlcPDSStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatPortNumber.setDescription('Port Number of the TDLC port.')
tdlcPDSStatTotalCharIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatTotalCharIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatTotalCharIn.setDescription('This indicates the total number of characters that have been received by the port.')
tdlcPDSStatTotalCharOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatTotalCharOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatTotalCharOut.setDescription('This indicates the total number of characters that have been transmitted by the port.')
tdlcPDSStatTotalFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatTotalFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatTotalFramesIn.setDescription('This indicates the total number of frames that have been received by the port.')
tdlcPDSStatTotalFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatTotalFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatTotalFramesOut.setDescription('This indicates the total number of frames that have been received by the port.')
tdlcPDSStatCharInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatCharInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatCharInPerSec.setDescription('This indicates the rate at which characters have been received by the port per second.')
tdlcPDSStatCharOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatCharOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatCharOutPerSec.setDescription('This indicates the rate at which characters have been transmitted by the port per second.')
tdlcPDSStatFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatFramesInPerSec.setDescription('This indicates the rate at which frames have been received by the port per second.')
tdlcPDSStatFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPDSStatFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPDSStatFramesOutPerSec.setDescription('This indicates the rate at which frames have been transmitted by the port per second.')
tdlcPFrameSummaryStatTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3), )
if mibBuilder.loadTexts: tdlcPFrameSummaryStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFrameSummaryStatTable.setDescription('This table contains the TDLC Port statistics frame summary parameters.')
tdlcPFrameSummaryStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1), ).setIndexNames((0, "TDLC-OPT-MIB", "tdlcPFSStatPortNumber"))
if mibBuilder.loadTexts: tdlcPFrameSummaryStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFrameSummaryStatEntry.setDescription('Entries in the TDLC port statistics frame summary parameter table.')
tdlcPFSStatPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatPortNumber.setDescription('Port Number of this port.')
tdlcPFSStatPagTerminalID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatPagTerminalID.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatPagTerminalID.setDescription('This specifies the identifier for the paging terminal connected.')
tdlcPFSStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 100))).clone(namedValues=NamedValues(("init", 1), ("awaitEnqResp", 2), ("ready", 3), ("transmitting", 4), ("trnsmitResponse", 5), ("na", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatLinkState.setDescription('This indicates the current link state. init - Initialization state. awaitEnqResp - Await enquiry response state. ready - Ready to communicate state transmitting - Transmitting state. transmitResponse - Transmit response state. na - Value not available.')
tdlcPFSStatCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatCRCErrors.setDescription('This indicates the total number data frames received with Cyclic Redundancy Check errors.')
tdlcPFSStatLinkFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatLinkFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatLinkFramingErrors.setDescription('This indicates the total number of TNPP framing errors (Invalid Header,Invalid Control character, Frame Size Exceeded, Incomplete Frame, etc.).')
tdlcPFSStatProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatProtocolErrors.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatProtocolErrors.setDescription('This indicates the number of Protocol errors due to unexpected events .')
tdlcPFSStatENQFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatENQFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatENQFramesIn.setDescription('This indicates the total number of Enquiry frames received by the port.')
tdlcPFSStatENQFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatENQFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatENQFramesOut.setDescription('This indicates the total number of Enquiry frames transmitted by the port.')
tdlcPFSStatEOTFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatEOTFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatEOTFramesIn.setDescription('This indicates the total number of End of Transmission frames received by the port.')
tdlcPFSStatEOTFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatEOTFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatEOTFramesOut.setDescription('This indicates the total number of End of Transmission frames transmitted by the port.')
tdlcPFSStatACKFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatACKFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatACKFramesIn.setDescription('This indicates the total number of Acknowledgment frames received by the port.')
tdlcPFSStatACKFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatACKFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatACKFramesOut.setDescription('This indicates the total number of Acknowledgment frames transmitted by the port.')
tdlcPFSStatNAKFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatNAKFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatNAKFramesIn.setDescription('This indicates the total number of Negative Acknowledgment frames received by the port.')
tdlcPFSStatNAKFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatNAKFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatNAKFramesOut.setDescription('This indicates the total number of Negative Acknowledgment frames transmitted.')
tdlcPFSStatRSFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatRSFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatRSFramesIn.setDescription('This indicates the total number of Request to Stop frames received by the port.')
tdlcPFSStatRSFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatRSFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatRSFramesOut.setDescription('This indicates the total number of Request to Stop frames transmitted by the port.')
tdlcPFSStatCANFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatCANFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatCANFramesIn.setDescription('This indicates the total number of CANcel report frames received by the port.')
tdlcPFSStatCANFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatCANFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatCANFramesOut.setDescription('This indicates the total number of CANcel report frames transmitted by the port.')
tdlcPFSStatDataFramesInPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatDataFramesInPassed.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatDataFramesInPassed.setDescription(' This indicates the total number of valid data frames received by the port.')
tdlcPFSStatDataFramesOutPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatDataFramesOutPassed.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatDataFramesOutPassed.setDescription(' This indicates the total number of valid data frames transmitted by the port.')
tdlcPFSStatDataFramesInDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatDataFramesInDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatDataFramesInDiscarded.setDescription(' This indicates the total number of data frames received by the port and discarded.')
tdlcPFSStatDataFramesOutDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 34, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdlcPFSStatDataFramesOutDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPFSStatDataFramesOutDiscarded.setDescription('This indicates the total number of data frames transmitted by the port and discarded.')
cdx6500ContTDLCTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 16))
cdx6500ContTDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 16, 1), )
if mibBuilder.loadTexts: cdx6500ContTDLCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContTDLCPortTable.setDescription('This table contains the TDLC Port Control parameters.')
cdx6500ContTDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 16, 1, 1), ).setIndexNames((0, "TDLC-OPT-MIB", "tdlcPContPortNumber"))
if mibBuilder.loadTexts: cdx6500ContTDLCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContTDLCPortEntry.setDescription('Entries in the TDLC Port Control Table.')
tdlcPContPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: tdlcPContPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPContPortNumber.setDescription('Port number of the TDLC port.')
tdlcPContPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("boot", 1), ("enable", 2), ("disable", 3), ("busyout", 4), ("resetstats", 5)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: tdlcPContPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: tdlcPContPortControl.setDescription('Control operations for the specified TDLC port. boot - Boots the TDLC Port. enable - Enables the TDLC Port. disable - Disables the TDLC Port. busyout - Busyout the TDLC Port. resetstats - Resets the TDLC port statistics.')
mibBuilder.exportSymbols("TDLC-OPT-MIB", tdlcPDataSummaryStatTable=tdlcPDataSummaryStatTable, tdlcPGenStatEntry=tdlcPGenStatEntry, tdlcPGStatPortUtilIn=tdlcPGStatPortUtilIn, tdlcPGStatPortStatus=tdlcPGStatPortStatus, tdlcPGStatFramingErrors=tdlcPGStatFramingErrors, tdlcPCfgResponseControl=tdlcPCfgResponseControl, cdx6500PPSTTDLCPStatTable=cdx6500PPSTTDLCPStatTable, tdlcPFSStatENQFramesOut=tdlcPFSStatENQFramesOut, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500Configuration=cdx6500Configuration, tdlcPDSStatTotalCharOut=tdlcPDSStatTotalCharOut, tdlcPFrameSummaryStatEntry=tdlcPFrameSummaryStatEntry, tdlcPFSStatCRCErrors=tdlcPFSStatCRCErrors, tdlcPCfgPagTerminalID=tdlcPCfgPagTerminalID, tdlcPCfgPortType=tdlcPCfgPortType, tdlcPGStatPortUtilOut=tdlcPGStatPortUtilOut, tdlcPFSStatACKFramesOut=tdlcPFSStatACKFramesOut, tdlcPFSStatCANFramesIn=tdlcPFSStatCANFramesIn, tdlcPFSStatDataFramesInPassed=tdlcPFSStatDataFramesInPassed, tdlcPDSStatTotalCharIn=tdlcPDSStatTotalCharIn, tdlcPFSStatPagTerminalID=tdlcPFSStatPagTerminalID, tdlcPFSStatRSFramesOut=tdlcPFSStatRSFramesOut, tdlcPFSStatCANFramesOut=tdlcPFSStatCANFramesOut, cdx6500PPCTTDLCPortTable=cdx6500PPCTTDLCPortTable, tdlcPCfgCRCOption=tdlcPCfgCRCOption, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, tdlcPCfgV24ElectricalInterfaceOption=tdlcPCfgV24ElectricalInterfaceOption, tdlcPGStatParityErrors=tdlcPGStatParityErrors, tdlcPFSStatNAKFramesOut=tdlcPFSStatNAKFramesOut, tdlcPFSStatDataFramesOutPassed=tdlcPFSStatDataFramesOutPassed, tdlcPContPortNumber=tdlcPContPortNumber, cdx6500PPCTTDLCPortEntry=cdx6500PPCTTDLCPortEntry, tdlcPFSStatNAKFramesIn=tdlcPFSStatNAKFramesIn, cdx6500ContTDLCPortEntry=cdx6500ContTDLCPortEntry, tdlcPGStatPortNumber=tdlcPGStatPortNumber, tdlcPFSStatENQFramesIn=tdlcPFSStatENQFramesIn, tdlcPFSStatEOTFramesIn=tdlcPFSStatEOTFramesIn, cdx6500ContTDLCTable=cdx6500ContTDLCTable, tdlcPCfgConnType=tdlcPCfgConnType, tdlcPDSStatCharInPerSec=tdlcPDSStatCharInPerSec, DisplayString=DisplayString, tdlcPCfgTANControl=tdlcPCfgTANControl, tdlcPGenStatTable=tdlcPGenStatTable, tdlcPDSStatFramesOutPerSec=tdlcPDSStatFramesOutPerSec, tdlcPFSStatLinkState=tdlcPFSStatLinkState, tdlcPDataSummaryStatEntry=tdlcPDataSummaryStatEntry, tdlcPGStatOverrunErrors=tdlcPGStatOverrunErrors, tdlcPFSStatEOTFramesOut=tdlcPFSStatEOTFramesOut, cdx6500Statistics=cdx6500Statistics, tdlcPDSStatPortNumber=tdlcPDSStatPortNumber, tdlcPFSStatLinkFramingErrors=tdlcPFSStatLinkFramingErrors, tdlcPContPortControl=tdlcPContPortControl, cdx6500Controls=cdx6500Controls, tdlcPCfgHighSpeedElectricalInterfaceOption=tdlcPCfgHighSpeedElectricalInterfaceOption, tdlcPGStatPortType=tdlcPGStatPortType, cdx6500ContTDLCPortTable=cdx6500ContTDLCPortTable, tdlcPFSStatPortNumber=tdlcPFSStatPortNumber, tdlcPCfgPortSpeed=tdlcPCfgPortSpeed, cdxProductSpecific=cdxProductSpecific, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, tdlcPDSStatFramesInPerSec=tdlcPDSStatFramesInPerSec, tdlcPCfgElectricalInterfaceType=tdlcPCfgElectricalInterfaceType, tdlcPGStatPortSpeed=tdlcPGStatPortSpeed, codex=codex, tdlcPDSStatTotalFramesIn=tdlcPDSStatTotalFramesIn, tdlcPFSStatRSFramesIn=tdlcPFSStatRSFramesIn, tdlcPDSStatCharOutPerSec=tdlcPDSStatCharOutPerSec, tdlcPFSStatDataFramesInDiscarded=tdlcPFSStatDataFramesInDiscarded, tdlcPCfgPortNumber=tdlcPCfgPortNumber, tdlcPDSStatTotalFramesOut=tdlcPDSStatTotalFramesOut, cdx6500=cdx6500, tdlcPFrameSummaryStatTable=tdlcPFrameSummaryStatTable, tdlcPFSStatDataFramesOutDiscarded=tdlcPFSStatDataFramesOutDiscarded, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, tdlcPFSStatACKFramesIn=tdlcPFSStatACKFramesIn, tdlcPFSStatProtocolErrors=tdlcPFSStatProtocolErrors)
