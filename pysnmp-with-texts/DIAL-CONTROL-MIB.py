#
# PySNMP MIB module DIAL-CONTROL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DIAL-CONTROL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:07:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
ifOperStatus, ifIndex, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "ifIndex", "InterfaceIndexOrZero", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, transmission, Gauge32, NotificationType, Counter32, TimeTicks, Counter64, MibIdentifier, ObjectIdentity, ModuleIdentity, iso, IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "transmission", "Gauge32", "NotificationType", "Counter32", "TimeTicks", "Counter64", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "iso", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
RowStatus, DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TimeStamp", "TextualConvention")
dialControlMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 21))
if mibBuilder.loadTexts: dialControlMib.setLastUpdated('9609231544Z')
if mibBuilder.loadTexts: dialControlMib.setOrganization('IETF ISDN Working Group')
if mibBuilder.loadTexts: dialControlMib.setContactInfo(' Guenter Roeck Postal: cisco Systems 170 West Tasman Drive San Jose, CA 95134 U.S.A. Phone: +1 408 527 3143 E-mail: groeck@cisco.com')
if mibBuilder.loadTexts: dialControlMib.setDescription('The MIB module to describe peer information for demand access and possibly other kinds of interfaces.')
class AbsoluteCounter32(TextualConvention, Unsigned32):
    description = 'Represents a Counter32-like value that starts at zero, does not decrease, and does not wrap. This may be used only in situations where wrapping is not possible or extremely unlikely. Should such a counter overflow, it locks at the maxium value of 4,294,967,295. The primary use of this type of counter is situations where a counter value is to be recorded as history and is thus no longer subject to reading for changing values.'
    status = 'current'

dialControlMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 1))
dialCtlConfiguration = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 1, 1))
dialCtlAcceptMode = MibScalar((1, 3, 6, 1, 2, 1, 10, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("acceptNone", 1), ("acceptAll", 2), ("acceptKnown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialCtlAcceptMode.setStatus('current')
if mibBuilder.loadTexts: dialCtlAcceptMode.setDescription('The security level for acceptance of incoming calls. acceptNone(1) - incoming calls will not be accepted acceptAll(2) - incoming calls will be accepted, even if there is no matching entry in the dialCtlPeerCfgTable acceptKnown(3) - incoming calls will be accepted only if there is a matching entry in the dialCtlPeerCfgTable ')
dialCtlTrapEnable = MibScalar((1, 3, 6, 1, 2, 1, 10, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dialCtlTrapEnable.setStatus('current')
if mibBuilder.loadTexts: dialCtlTrapEnable.setDescription('This object indicates whether dialCtlPeerCallInformation and dialCtlPeerCallSetup traps should be generated for all peers. If the value of this object is enabled(1), traps will be generated for all peers. If the value of this object is disabled(2), traps will be generated only for peers having dialCtlPeerCfgTrapEnable set to enabled(1).')
dialCtlPeer = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 1, 2))
dialCtlPeerCfgTable = MibTable((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1), )
if mibBuilder.loadTexts: dialCtlPeerCfgTable.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgTable.setDescription('The list of peers from which the managed device will accept calls or to which it will place them.')
dialCtlPeerCfgEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "dialCtlPeerCfgId"), (0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: dialCtlPeerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgEntry.setDescription('Configuration data for a single Peer. This entry is effectively permanent, and contains information to identify the peer, how to connect to the peer, how to identify the peer and its permissions. The value of dialCtlPeerCfgOriginateAddress must be specified before a new row in this table can become active(1). Any writeable parameters in an existing entry can be modified while the entry is active. The modification will take effect when the peer in question will be called the next time. An entry in this table can only be created if the associated ifEntry already exists.')
dialCtlPeerCfgId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dialCtlPeerCfgId.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgId.setDescription('This object identifies a single peer. There may be several entries in this table for one peer, defining different ways of reaching this peer. Thus, there may be several entries in this table with the same value of dialCtlPeerCfgId. Multiple entries for one peer may be used to support multilink as well as backup lines. A single peer will be identified by a unique value of this object. Several entries for one peer MUST have the same value of dialCtlPeerCfgId, but different ifEntries and thus different values of ifIndex.')
dialCtlPeerCfgIfType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 2), IANAifType().clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgIfType.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgIfType.setDescription('The interface type to be used for calling this peer. In case of ISDN, the value of isdn(63) is to be used.')
dialCtlPeerCfgLowerIf = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgLowerIf.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgLowerIf.setDescription('ifIndex value of an interface the peer will have to be called on. For example, on an ISDN interface, this can be the ifIndex value of a D channel or the ifIndex value of a B channel, whatever is appropriate for a given peer. As an example, for Basic Rate leased lines it will be necessary to specify a B channel ifIndex, while for semi-permanent connections the D channel ifIndex has to be specified. If the interface can be dynamically assigned, this object has a value of zero.')
dialCtlPeerCfgOriginateAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgOriginateAddress.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgOriginateAddress.setDescription("Call Address at which the peer will be called. Think of this as the set of characters following 'ATDT ' or the 'phone number' included in a D channel call request. The structure of this information will be switch type specific. If there is no address information required for reaching the peer, i.e., for leased lines, this object will be a zero length string.")
dialCtlPeerCfgAnswerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgAnswerAddress.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgAnswerAddress.setDescription('Calling Party Number information element, as for example passed in an ISDN SETUP message by a PBX or switch, for incoming calls. This address can be used to identify the peer. If this address is either unknown or identical to dialCtlPeerCfgOriginateAddress, this object will be a zero length string.')
dialCtlPeerCfgSubAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgSubAddress.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgSubAddress.setDescription('Subaddress at which the peer will be called. If the subaddress is undefined for the given media or unused, this is a zero length string.')
dialCtlPeerCfgClosedUserGroup = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgClosedUserGroup.setReference('Q.931, chapter 4.6.1.')
if mibBuilder.loadTexts: dialCtlPeerCfgClosedUserGroup.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgClosedUserGroup.setDescription('Closed User Group at which the peer will be called. If the Closed User Group is undefined for the given media or unused, this is a zero length string.')
dialCtlPeerCfgSpeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgSpeed.setDescription('The desired information transfer speed in bits/second when calling this peer. The detailed media specific information, e.g. information type and information transfer rate for ISDN circuits, has to be extracted from this object. If the transfer speed to be used is unknown or the default speed for this type of interfaces, the value of this object may be zero.')
dialCtlPeerCfgInfoType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ("fax", 10))).clone('other')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgInfoType.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgInfoType.setDescription('The Information Transfer Capability to be used when calling this peer. speech(2) refers to a non-data connection, whereas audio31(6) and audio7(7) refer to data mode connections.')
dialCtlPeerCfgPermission = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("both", 3), ("callback", 4), ("none", 5))).clone('both')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgPermission.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgPermission.setDescription("Applicable permissions. callback(4) either rejects the call and then calls back, or uses the 'Reverse charging' information element if it is available. Note that callback(4) is supposed to control charging, not security, and applies to callback prior to accepting a call. Callback for security reasons can be handled using PPP callback.")
dialCtlPeerCfgInactivityTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgInactivityTimer.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgInactivityTimer.setDescription('The connection will be automatically disconnected if no longer carrying useful data for a time period, in seconds, specified in this object. Useful data in this context refers to forwarding packets, including routing information; it excludes the encapsulator maintenance frames. A value of zero means the connection will not be automatically taken down due to inactivity, which implies that it is a dedicated circuit.')
dialCtlPeerCfgMinDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgMinDuration.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgMinDuration.setDescription('Minimum duration of a call in seconds, starting from the time the call is connected until the call is disconnected. This is to accomplish the fact that in most countries charging applies to units of time, which should be matched as closely as possible.')
dialCtlPeerCfgMaxDuration = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgMaxDuration.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgMaxDuration.setDescription("Maximum call duration in seconds. Zero means 'unlimited'.")
dialCtlPeerCfgCarrierDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgCarrierDelay.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgCarrierDelay.setDescription('The call timeout time in seconds. The default value of zero means that the call timeout as specified for the media in question will apply.')
dialCtlPeerCfgCallRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgCallRetries.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgCallRetries.setDescription('The number of calls to a non-responding address that may be made. A retry count of zero means there is no bound. The intent is to bound the number of successive calls to an address which is inaccessible, or which refuses those calls. Some countries regulate the number of call retries to a given peer that can be made.')
dialCtlPeerCfgRetryDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgRetryDelay.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgRetryDelay.setDescription('The time in seconds between call retries if a peer cannot be reached. A value of zero means that call retries may be done without any delay.')
dialCtlPeerCfgFailureDelay = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgFailureDelay.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgFailureDelay.setDescription('The time in seconds after which call attempts are to be placed again after a peer has been noticed to be unreachable, i.e. after dialCtlPeerCfgCallRetries unsuccessful call attempts. A value of zero means that a peer will not be called again after dialCtlPeerCfgCallRetries unsuccessful call attempts.')
dialCtlPeerCfgTrapEnable = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgTrapEnable.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgTrapEnable.setDescription('This object indicates whether dialCtlPeerCallInformation and dialCtlPeerCallSetup traps should be generated for this peer.')
dialCtlPeerCfgStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dialCtlPeerCfgStatus.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCfgStatus.setDescription('Status of one row in this table.')
dialCtlPeerStatsTable = MibTable((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2), )
if mibBuilder.loadTexts: dialCtlPeerStatsTable.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsTable.setDescription('Statistics information for each peer entry. There will be one entry in this table for each entry in the dialCtlPeerCfgTable.')
dialCtlPeerStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1), )
dialCtlPeerCfgEntry.registerAugmentions(("DIAL-CONTROL-MIB", "dialCtlPeerStatsEntry"))
dialCtlPeerStatsEntry.setIndexNames(*dialCtlPeerCfgEntry.getIndexNames())
if mibBuilder.loadTexts: dialCtlPeerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsEntry.setDescription('Statistics information for a single Peer. This entry is effectively permanent, and contains information describing the last call attempt as well as supplying statistical information.')
dialCtlPeerStatsConnectTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 1), AbsoluteCounter32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsConnectTime.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsConnectTime.setDescription('Accumulated connect time to the peer since system startup. This is the total connect time, i.e. the connect time for outgoing calls plus the time for incoming calls.')
dialCtlPeerStatsChargedUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 2), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsChargedUnits.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsChargedUnits.setDescription("The total number of charging units applying to this peer since system startup. Only the charging units applying to the local interface, i.e. for originated calls or for calls with 'Reverse charging' being active, will be counted here.")
dialCtlPeerStatsSuccessCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 3), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsSuccessCalls.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsSuccessCalls.setDescription('Number of completed calls to this peer.')
dialCtlPeerStatsFailCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 4), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsFailCalls.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsFailCalls.setDescription('Number of failed call attempts to this peer since system startup.')
dialCtlPeerStatsAcceptCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 5), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsAcceptCalls.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsAcceptCalls.setDescription('Number of calls from this peer accepted since system startup.')
dialCtlPeerStatsRefuseCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 6), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsRefuseCalls.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsRefuseCalls.setDescription('Number of calls from this peer refused since system startup.')
dialCtlPeerStatsLastDisconnectCause = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsLastDisconnectCause.setReference('- Bellcore SR-NWT-001953, Generic Guidelines for ISDN Terminal Equipment On Basic Access Interfaces, chapter 5.2.5.8. - Bellcore SR-NWT-002343, ISDN Primary Rate Interface Generic Guidelines for Customer Premises Equipment, chapter 8.2.5.8. - ITU-T Q.931, Appendix I. - ITU-T X.25, CAUSE and DIAGNOSTIC field values. - German Telekom FTZ 1TR6, chapter 3.2.3.4.4.4.')
if mibBuilder.loadTexts: dialCtlPeerStatsLastDisconnectCause.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsLastDisconnectCause.setDescription('The encoded network cause value associated with the last call. This object will be updated whenever a call is started or cleared. The value of this object will depend on the interface type as well as on the protocol and protocol version being used on this interface. Some references for possible cause values are given below.')
dialCtlPeerStatsLastDisconnectText = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsLastDisconnectText.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsLastDisconnectText.setDescription('ASCII text describing the reason for the last call termination. This object exists because it would be impossible for a management station to store all possible cause values for all types of interfaces. It should be used only if a management station is unable to decode the value of dialCtlPeerStatsLastDisconnectCause. This object will be updated whenever a call is started or cleared.')
dialCtlPeerStatsLastSetupTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 2, 2, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dialCtlPeerStatsLastSetupTime.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerStatsLastSetupTime.setDescription('The value of sysUpTime when the last call to this peer was started. For ISDN media, this will be the time when the setup message was received from or sent to the network. This object will be updated whenever a call is started or cleared.')
callActive = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 1, 3))
callActiveTable = MibTable((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1), )
if mibBuilder.loadTexts: callActiveTable.setStatus('current')
if mibBuilder.loadTexts: callActiveTable.setDescription('A table containing information about active calls to a specific destination.')
callActiveEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: callActiveEntry.setStatus('current')
if mibBuilder.loadTexts: callActiveEntry.setDescription('The information regarding a single active Connection. An entry in this table will be created when a call is started. An entry in this table will be deleted when an active call clears.')
callActiveSetupTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 1), TimeStamp())
if mibBuilder.loadTexts: callActiveSetupTime.setStatus('current')
if mibBuilder.loadTexts: callActiveSetupTime.setDescription('The value of sysUpTime when the call associated to this entry was started. This will be useful for an NMS to retrieve all calls after a specific time. Also, this object can be useful in finding large delays between the time the call was started and the time the call was connected. For ISDN media, this will be the time when the setup message was received from or sent to the network.')
callActiveIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: callActiveIndex.setStatus('current')
if mibBuilder.loadTexts: callActiveIndex.setDescription('Small index variable to distinguish calls that start in the same hundredth of a second.')
callActivePeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActivePeerAddress.setStatus('current')
if mibBuilder.loadTexts: callActivePeerAddress.setDescription('The number this call is connected to. If the number is not available, then it will have a length of zero.')
callActivePeerSubAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActivePeerSubAddress.setStatus('current')
if mibBuilder.loadTexts: callActivePeerSubAddress.setDescription('The subaddress this call is connected to. If the subaddress is undefined or not available, this will be a zero length string.')
callActivePeerId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActivePeerId.setStatus('current')
if mibBuilder.loadTexts: callActivePeerId.setDescription('This is the Id value of the peer table entry to which this call was made. If a peer table entry for this call does not exist or is unknown, the value of this object will be zero.')
callActivePeerIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActivePeerIfIndex.setStatus('current')
if mibBuilder.loadTexts: callActivePeerIfIndex.setDescription('This is the ifIndex value of the peer table entry to which this call was made. If a peer table entry for this call does not exist or is unknown, the value of this object will be zero.')
callActiveLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 7), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveLogicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: callActiveLogicalIfIndex.setDescription('This is the ifIndex value of the logical interface through which this call was made. For ISDN media, this would be the ifIndex of the B channel which was used for this call. If the ifIndex value is unknown, the value of this object will be zero.')
callActiveConnectTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveConnectTime.setStatus('current')
if mibBuilder.loadTexts: callActiveConnectTime.setDescription('The value of sysUpTime when the call was connected. If the call is not connected, this object will have a value of zero.')
callActiveCallState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("connecting", 2), ("connected", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCallState.setStatus('current')
if mibBuilder.loadTexts: callActiveCallState.setDescription('The current call state. unknown(1) - The call state is unknown. connecting(2) - A connection attempt (outgoing call) is being made. connected(3) - An incoming call is in the process of validation. active(4) - The call is active. ')
callActiveCallOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveCallOrigin.setStatus('current')
if mibBuilder.loadTexts: callActiveCallOrigin.setDescription('The call origin.')
callActiveChargedUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 11), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveChargedUnits.setStatus('current')
if mibBuilder.loadTexts: callActiveChargedUnits.setDescription('The number of charged units for this connection. For incoming calls or if charging information is not supplied by the switch, the value of this object will be zero.')
callActiveInfoType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ("fax", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveInfoType.setStatus('current')
if mibBuilder.loadTexts: callActiveInfoType.setDescription('The information type for this call.')
callActiveTransmitPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 13), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveTransmitPackets.setStatus('current')
if mibBuilder.loadTexts: callActiveTransmitPackets.setDescription('The number of packets which were transmitted for this call.')
callActiveTransmitBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 14), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: callActiveTransmitBytes.setDescription('The number of bytes which were transmitted for this call.')
callActiveReceivePackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 15), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveReceivePackets.setStatus('current')
if mibBuilder.loadTexts: callActiveReceivePackets.setDescription('The number of packets which were received for this call.')
callActiveReceiveBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 3, 1, 1, 16), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callActiveReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: callActiveReceiveBytes.setDescription('The number of bytes which were received for this call.')
callHistory = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 1, 4))
callHistoryTableMaxLength = MibScalar((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHistoryTableMaxLength.setStatus('current')
if mibBuilder.loadTexts: callHistoryTableMaxLength.setDescription('The upper limit on the number of entries that the callHistoryTable may contain. A value of 0 will prevent any history from being retained. When this table is full, the oldest entry will be deleted and the new one will be created.')
callHistoryRetainTimer = MibScalar((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: callHistoryRetainTimer.setStatus('current')
if mibBuilder.loadTexts: callHistoryRetainTimer.setDescription('The minimum amount of time that an callHistoryEntry will be maintained before being deleted. A value of 0 will prevent any history from being retained in the callHistoryTable, but will neither prevent callCompletion traps being generated nor affect other tables.')
callHistoryTable = MibTable((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3), )
if mibBuilder.loadTexts: callHistoryTable.setStatus('current')
if mibBuilder.loadTexts: callHistoryTable.setDescription('A table containing information about specific calls to a specific destination.')
callHistoryEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: callHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: callHistoryEntry.setDescription('The information regarding a single Connection.')
callHistoryPeerAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryPeerAddress.setStatus('current')
if mibBuilder.loadTexts: callHistoryPeerAddress.setDescription('The number this call was connected to. If the number is not available, then it will have a length of zero.')
callHistoryPeerSubAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryPeerSubAddress.setStatus('current')
if mibBuilder.loadTexts: callHistoryPeerSubAddress.setDescription('The subaddress this call was connected to. If the subaddress is undefined or not available, this will be a zero length string.')
callHistoryPeerId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryPeerId.setStatus('current')
if mibBuilder.loadTexts: callHistoryPeerId.setDescription('This is the Id value of the peer table entry to which this call was made. If a peer table entry for this call does not exist, the value of this object will be zero.')
callHistoryPeerIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryPeerIfIndex.setStatus('current')
if mibBuilder.loadTexts: callHistoryPeerIfIndex.setDescription('This is the ifIndex value of the peer table entry to which this call was made. If a peer table entry for this call does not exist, the value of this object will be zero.')
callHistoryLogicalIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryLogicalIfIndex.setStatus('current')
if mibBuilder.loadTexts: callHistoryLogicalIfIndex.setDescription('This is the ifIndex value of the logical interface through which this call was made. For ISDN media, this would be the ifIndex of the B channel which was used for this call.')
callHistoryDisconnectCause = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryDisconnectCause.setReference('- Bellcore SR-NWT-001953, Generic Guidelines for ISDN Terminal Equipment On Basic Access Interfaces, chapter 5.2.5.8. - Bellcore SR-NWT-002343, ISDN Primary Rate Interface Generic Guidelines for Customer Premises Equipment, chapter 8.2.5.8. - ITU-T Q.931, Appendix I. - ITU-T X.25, CAUSE and DIAGNOSTIC field values. - German Telekom FTZ 1TR6, chapter 3.2.3.4.4.4.')
if mibBuilder.loadTexts: callHistoryDisconnectCause.setStatus('current')
if mibBuilder.loadTexts: callHistoryDisconnectCause.setDescription('The encoded network cause value associated with this call. The value of this object will depend on the interface type as well as on the protocol and protocol version being used on this interface. Some references for possible cause values are given below.')
callHistoryDisconnectText = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryDisconnectText.setStatus('current')
if mibBuilder.loadTexts: callHistoryDisconnectText.setDescription('ASCII text describing the reason for call termination. This object exists because it would be impossible for a management station to store all possible cause values for all types of interfaces. It should be used only if a management station is unable to decode the value of dialCtlPeerStatsLastDisconnectCause.')
callHistoryConnectTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryConnectTime.setStatus('current')
if mibBuilder.loadTexts: callHistoryConnectTime.setDescription('The value of sysUpTime when the call was connected.')
callHistoryDisconnectTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryDisconnectTime.setStatus('current')
if mibBuilder.loadTexts: callHistoryDisconnectTime.setDescription('The value of sysUpTime when the call was disconnected.')
callHistoryCallOrigin = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("originate", 1), ("answer", 2), ("callback", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryCallOrigin.setStatus('current')
if mibBuilder.loadTexts: callHistoryCallOrigin.setDescription('The call origin.')
callHistoryChargedUnits = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 11), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryChargedUnits.setStatus('current')
if mibBuilder.loadTexts: callHistoryChargedUnits.setDescription('The number of charged units for this connection. For incoming calls or if charging information is not supplied by the switch, the value of this object will be zero.')
callHistoryInfoType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("other", 1), ("speech", 2), ("unrestrictedDigital", 3), ("unrestrictedDigital56", 4), ("restrictedDigital", 5), ("audio31", 6), ("audio7", 7), ("video", 8), ("packetSwitched", 9), ("fax", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryInfoType.setStatus('current')
if mibBuilder.loadTexts: callHistoryInfoType.setDescription('The information type for this call.')
callHistoryTransmitPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 13), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryTransmitPackets.setStatus('current')
if mibBuilder.loadTexts: callHistoryTransmitPackets.setDescription('The number of packets which were transmitted while this call was active.')
callHistoryTransmitBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 14), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryTransmitBytes.setStatus('current')
if mibBuilder.loadTexts: callHistoryTransmitBytes.setDescription('The number of bytes which were transmitted while this call was active.')
callHistoryReceivePackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 15), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryReceivePackets.setStatus('current')
if mibBuilder.loadTexts: callHistoryReceivePackets.setDescription('The number of packets which were received while this call was active.')
callHistoryReceiveBytes = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 21, 1, 4, 3, 1, 16), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callHistoryReceiveBytes.setStatus('current')
if mibBuilder.loadTexts: callHistoryReceiveBytes.setDescription('The number of bytes which were received while this call was active.')
dialControlMibTrapPrefix = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 2))
dialControlMibTraps = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 2, 0))
dialCtlPeerCallInformation = NotificationType((1, 3, 6, 1, 2, 1, 10, 21, 2, 0, 1)).setObjects(("DIAL-CONTROL-MIB", "callHistoryPeerId"), ("DIAL-CONTROL-MIB", "callHistoryPeerIfIndex"), ("DIAL-CONTROL-MIB", "callHistoryLogicalIfIndex"), ("IF-MIB", "ifOperStatus"), ("DIAL-CONTROL-MIB", "callHistoryPeerAddress"), ("DIAL-CONTROL-MIB", "callHistoryPeerSubAddress"), ("DIAL-CONTROL-MIB", "callHistoryDisconnectCause"), ("DIAL-CONTROL-MIB", "callHistoryConnectTime"), ("DIAL-CONTROL-MIB", "callHistoryDisconnectTime"), ("DIAL-CONTROL-MIB", "callHistoryInfoType"), ("DIAL-CONTROL-MIB", "callHistoryCallOrigin"))
if mibBuilder.loadTexts: dialCtlPeerCallInformation.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCallInformation.setDescription('This trap/inform is sent to the manager whenever a successful call clears, or a failed call attempt is determined to have ultimately failed. In the event that call retry is active, then this is after all retry attempts have failed. However, only one such trap is sent in between successful call attempts; subsequent call attempts result in no trap. ifOperStatus will return the operational status of the virtual interface associated with the peer to whom this call was made to.')
dialCtlPeerCallSetup = NotificationType((1, 3, 6, 1, 2, 1, 10, 21, 2, 0, 2)).setObjects(("DIAL-CONTROL-MIB", "callActivePeerId"), ("DIAL-CONTROL-MIB", "callActivePeerIfIndex"), ("DIAL-CONTROL-MIB", "callActiveLogicalIfIndex"), ("IF-MIB", "ifOperStatus"), ("DIAL-CONTROL-MIB", "callActivePeerAddress"), ("DIAL-CONTROL-MIB", "callActivePeerSubAddress"), ("DIAL-CONTROL-MIB", "callActiveInfoType"), ("DIAL-CONTROL-MIB", "callActiveCallOrigin"))
if mibBuilder.loadTexts: dialCtlPeerCallSetup.setStatus('current')
if mibBuilder.loadTexts: dialCtlPeerCallSetup.setDescription('This trap/inform is sent to the manager whenever a call setup message is received or sent. ifOperStatus will return the operational status of the virtual interface associated with the peer to whom this call was made to.')
dialControlMibConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 3))
dialControlMibCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 3, 1))
dialControlMibGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 21, 3, 2))
dialControlMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 21, 3, 1, 1)).setObjects(("DIAL-CONTROL-MIB", "dialControlGroup"), ("DIAL-CONTROL-MIB", "callActiveGroup"), ("DIAL-CONTROL-MIB", "callHistoryGroup"), ("DIAL-CONTROL-MIB", "callNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dialControlMibCompliance = dialControlMibCompliance.setStatus('current')
if mibBuilder.loadTexts: dialControlMibCompliance.setDescription('The compliance statement for entities which implement the DIAL CONTROL MIB')
dialControlGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 21, 3, 2, 1)).setObjects(("DIAL-CONTROL-MIB", "dialCtlAcceptMode"), ("DIAL-CONTROL-MIB", "dialCtlTrapEnable"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgIfType"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgLowerIf"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgOriginateAddress"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgAnswerAddress"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgSubAddress"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgClosedUserGroup"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgSpeed"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgInfoType"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgPermission"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgInactivityTimer"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgMinDuration"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgMaxDuration"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgCarrierDelay"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgCallRetries"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgRetryDelay"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgFailureDelay"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgTrapEnable"), ("DIAL-CONTROL-MIB", "dialCtlPeerCfgStatus"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsConnectTime"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsChargedUnits"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsSuccessCalls"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsFailCalls"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsAcceptCalls"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsRefuseCalls"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsLastDisconnectCause"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsLastDisconnectText"), ("DIAL-CONTROL-MIB", "dialCtlPeerStatsLastSetupTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dialControlGroup = dialControlGroup.setStatus('current')
if mibBuilder.loadTexts: dialControlGroup.setDescription('A collection of objects providing the DIAL CONTROL capability.')
callActiveGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 21, 3, 2, 2)).setObjects(("DIAL-CONTROL-MIB", "callActivePeerAddress"), ("DIAL-CONTROL-MIB", "callActivePeerSubAddress"), ("DIAL-CONTROL-MIB", "callActivePeerId"), ("DIAL-CONTROL-MIB", "callActivePeerIfIndex"), ("DIAL-CONTROL-MIB", "callActiveLogicalIfIndex"), ("DIAL-CONTROL-MIB", "callActiveConnectTime"), ("DIAL-CONTROL-MIB", "callActiveCallState"), ("DIAL-CONTROL-MIB", "callActiveCallOrigin"), ("DIAL-CONTROL-MIB", "callActiveChargedUnits"), ("DIAL-CONTROL-MIB", "callActiveInfoType"), ("DIAL-CONTROL-MIB", "callActiveTransmitPackets"), ("DIAL-CONTROL-MIB", "callActiveTransmitBytes"), ("DIAL-CONTROL-MIB", "callActiveReceivePackets"), ("DIAL-CONTROL-MIB", "callActiveReceiveBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    callActiveGroup = callActiveGroup.setStatus('current')
if mibBuilder.loadTexts: callActiveGroup.setDescription('A collection of objects providing the active call capability.')
callHistoryGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 21, 3, 2, 3)).setObjects(("DIAL-CONTROL-MIB", "callHistoryTableMaxLength"), ("DIAL-CONTROL-MIB", "callHistoryRetainTimer"), ("DIAL-CONTROL-MIB", "callHistoryPeerAddress"), ("DIAL-CONTROL-MIB", "callHistoryPeerSubAddress"), ("DIAL-CONTROL-MIB", "callHistoryPeerId"), ("DIAL-CONTROL-MIB", "callHistoryPeerIfIndex"), ("DIAL-CONTROL-MIB", "callHistoryLogicalIfIndex"), ("DIAL-CONTROL-MIB", "callHistoryDisconnectCause"), ("DIAL-CONTROL-MIB", "callHistoryDisconnectText"), ("DIAL-CONTROL-MIB", "callHistoryConnectTime"), ("DIAL-CONTROL-MIB", "callHistoryDisconnectTime"), ("DIAL-CONTROL-MIB", "callHistoryCallOrigin"), ("DIAL-CONTROL-MIB", "callHistoryChargedUnits"), ("DIAL-CONTROL-MIB", "callHistoryInfoType"), ("DIAL-CONTROL-MIB", "callHistoryTransmitPackets"), ("DIAL-CONTROL-MIB", "callHistoryTransmitBytes"), ("DIAL-CONTROL-MIB", "callHistoryReceivePackets"), ("DIAL-CONTROL-MIB", "callHistoryReceiveBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    callHistoryGroup = callHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: callHistoryGroup.setDescription('A collection of objects providing the Call History capability.')
callNotificationsGroup = NotificationGroup((1, 3, 6, 1, 2, 1, 10, 21, 3, 2, 4)).setObjects(("DIAL-CONTROL-MIB", "dialCtlPeerCallInformation"), ("DIAL-CONTROL-MIB", "dialCtlPeerCallSetup"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    callNotificationsGroup = callNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: callNotificationsGroup.setDescription('The notifications which a Dial Control MIB entity is required to implement.')
mibBuilder.exportSymbols("DIAL-CONTROL-MIB", dialCtlPeerStatsAcceptCalls=dialCtlPeerStatsAcceptCalls, dialCtlAcceptMode=dialCtlAcceptMode, dialControlMib=dialControlMib, callHistoryDisconnectCause=callHistoryDisconnectCause, callHistoryPeerAddress=callHistoryPeerAddress, dialCtlPeerCfgIfType=dialCtlPeerCfgIfType, callActiveTable=callActiveTable, callActiveReceivePackets=callActiveReceivePackets, callHistoryLogicalIfIndex=callHistoryLogicalIfIndex, dialCtlPeerCfgLowerIf=dialCtlPeerCfgLowerIf, dialControlMibCompliances=dialControlMibCompliances, callActiveReceiveBytes=callActiveReceiveBytes, dialControlMibTraps=dialControlMibTraps, dialCtlTrapEnable=dialCtlTrapEnable, dialCtlPeerCfgClosedUserGroup=dialCtlPeerCfgClosedUserGroup, callHistoryTransmitPackets=callHistoryTransmitPackets, dialControlGroup=dialControlGroup, callActiveConnectTime=callActiveConnectTime, dialCtlPeerCfgFailureDelay=dialCtlPeerCfgFailureDelay, callActiveSetupTime=callActiveSetupTime, callHistoryDisconnectTime=callHistoryDisconnectTime, callHistoryConnectTime=callHistoryConnectTime, dialCtlPeerCfgCarrierDelay=dialCtlPeerCfgCarrierDelay, dialCtlPeerStatsTable=dialCtlPeerStatsTable, callHistoryCallOrigin=callHistoryCallOrigin, dialCtlPeerCfgAnswerAddress=dialCtlPeerCfgAnswerAddress, dialCtlPeerCfgOriginateAddress=dialCtlPeerCfgOriginateAddress, callActiveTransmitBytes=callActiveTransmitBytes, dialCtlPeerCfgRetryDelay=dialCtlPeerCfgRetryDelay, dialCtlPeerStatsLastSetupTime=dialCtlPeerStatsLastSetupTime, dialCtlPeerCfgInfoType=dialCtlPeerCfgInfoType, dialControlMibObjects=dialControlMibObjects, callHistoryInfoType=callHistoryInfoType, dialCtlPeerCallInformation=dialCtlPeerCallInformation, callActive=callActive, dialCtlPeer=dialCtlPeer, dialCtlPeerCfgId=dialCtlPeerCfgId, callHistoryReceivePackets=callHistoryReceivePackets, callActiveInfoType=callActiveInfoType, callHistoryPeerIfIndex=callHistoryPeerIfIndex, dialControlMibGroups=dialControlMibGroups, dialCtlPeerCfgSubAddress=dialCtlPeerCfgSubAddress, callHistoryTableMaxLength=callHistoryTableMaxLength, dialControlMibCompliance=dialControlMibCompliance, callHistoryRetainTimer=callHistoryRetainTimer, callHistoryDisconnectText=callHistoryDisconnectText, callActivePeerAddress=callActivePeerAddress, dialCtlPeerStatsFailCalls=dialCtlPeerStatsFailCalls, dialCtlPeerCfgMaxDuration=dialCtlPeerCfgMaxDuration, callActivePeerIfIndex=callActivePeerIfIndex, dialCtlPeerCfgPermission=dialCtlPeerCfgPermission, callActivePeerId=callActivePeerId, callHistory=callHistory, dialCtlPeerCfgTrapEnable=dialCtlPeerCfgTrapEnable, dialCtlPeerStatsLastDisconnectText=dialCtlPeerStatsLastDisconnectText, callHistoryGroup=callHistoryGroup, callActiveCallOrigin=callActiveCallOrigin, callActiveEntry=callActiveEntry, dialCtlPeerStatsSuccessCalls=dialCtlPeerStatsSuccessCalls, PYSNMP_MODULE_ID=dialControlMib, dialCtlPeerStatsEntry=dialCtlPeerStatsEntry, callHistoryTable=callHistoryTable, dialCtlPeerCfgTable=dialCtlPeerCfgTable, callHistoryPeerSubAddress=callHistoryPeerSubAddress, callHistoryEntry=callHistoryEntry, callActiveLogicalIfIndex=callActiveLogicalIfIndex, callActiveIndex=callActiveIndex, dialCtlPeerCallSetup=dialCtlPeerCallSetup, callActivePeerSubAddress=callActivePeerSubAddress, callHistoryPeerId=callHistoryPeerId, callActiveTransmitPackets=callActiveTransmitPackets, dialControlMibTrapPrefix=dialControlMibTrapPrefix, callHistoryReceiveBytes=callHistoryReceiveBytes, callHistoryTransmitBytes=callHistoryTransmitBytes, dialCtlPeerCfgMinDuration=dialCtlPeerCfgMinDuration, dialCtlPeerCfgEntry=dialCtlPeerCfgEntry, callActiveCallState=callActiveCallState, dialCtlConfiguration=dialCtlConfiguration, dialCtlPeerStatsRefuseCalls=dialCtlPeerStatsRefuseCalls, AbsoluteCounter32=AbsoluteCounter32, dialCtlPeerStatsChargedUnits=dialCtlPeerStatsChargedUnits, callNotificationsGroup=callNotificationsGroup, dialCtlPeerCfgCallRetries=dialCtlPeerCfgCallRetries, dialCtlPeerCfgStatus=dialCtlPeerCfgStatus, dialCtlPeerCfgSpeed=dialCtlPeerCfgSpeed, dialCtlPeerCfgInactivityTimer=dialCtlPeerCfgInactivityTimer, callHistoryChargedUnits=callHistoryChargedUnits, callActiveGroup=callActiveGroup, dialControlMibConformance=dialControlMibConformance, dialCtlPeerStatsLastDisconnectCause=dialCtlPeerStatsLastDisconnectCause, callActiveChargedUnits=callActiveChargedUnits, dialCtlPeerStatsConnectTime=dialCtlPeerStatsConnectTime)
