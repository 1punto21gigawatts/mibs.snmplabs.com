#
# PySNMP MIB module GMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
applIndex, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, Counter64, ModuleIdentity, iso, ObjectIdentity, snmpModules, mib_2, IpAddress, Counter32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, enterprises, TimeTicks, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "ModuleIdentity", "iso", "ObjectIdentity", "snmpModules", "mib-2", "IpAddress", "Counter32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "enterprises", "TimeTicks", "Gauge32")
DisplayString, TestAndIncr, TimeStamp, TextualConvention, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TestAndIncr", "TimeStamp", "TextualConvention", "TimeInterval")
gordano = ModuleIdentity((1, 3, 6, 1, 4, 1, 24534))
gordano.setRevisions(('1916-11-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gordano.setRevisionsDescriptions(('Initial revision.',))
if mibBuilder.loadTexts: gordano.setLastUpdated('0909050000Z')
if mibBuilder.loadTexts: gordano.setOrganization('Gordano Ltd')
if mibBuilder.loadTexts: gordano.setContactInfo('Gordano Support Postal: Gordano Ltd 18 Kenn Road Clevedon North Somerset BS21 6EL United Kingdom Tel: +44 1275 340151 E-mail: support@gordano.com')
if mibBuilder.loadTexts: gordano.setDescription('MIB module for Gordano Products.')
gmsAV = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 2))
gmsAS = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 3))
gmsSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 4))
gmsPOST = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 5))
gmsPOP = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 6))
gmsIMAP = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 7))
gmsWWW = MibIdentifier((1, 3, 6, 1, 4, 1, 24534, 8))
gmsApplTable = MibTable((1, 3, 6, 1, 4, 1, 24534, 1), )
if mibBuilder.loadTexts: gmsApplTable.setStatus('current')
if mibBuilder.loadTexts: gmsApplTable.setDescription('An extension of the application table defined in RFC2788.')
gmsApplEntry = MibTableRow((1, 3, 6, 1, 4, 1, 24534, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: gmsApplEntry.setStatus('current')
if mibBuilder.loadTexts: gmsApplEntry.setDescription('The entry associated with each GMS service.')
applHandleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 24534, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applHandleCount.setStatus('current')
if mibBuilder.loadTexts: applHandleCount.setDescription('The number of open handles for the process.')
applPercentCPU = MibTableColumn((1, 3, 6, 1, 4, 1, 24534, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applPercentCPU.setStatus('current')
if mibBuilder.loadTexts: applPercentCPU.setDescription('The percentage of CPU used for the process. This value does not take multiple CPUs into account.')
applRssKB = MibTableColumn((1, 3, 6, 1, 4, 1, 24534, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applRssKB.setStatus('current')
if mibBuilder.loadTexts: applRssKB.setDescription('The resident set size for the process in KB.')
avEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 24534, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avEngineVersion.setStatus('current')
if mibBuilder.loadTexts: avEngineVersion.setDescription('Anti-Virus Engine Version')
avLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 24534, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avLastUpdate.setStatus('current')
if mibBuilder.loadTexts: avLastUpdate.setDescription('Date of last Anti-Virus update.')
avMessagesScanned = MibScalar((1, 3, 6, 1, 4, 1, 24534, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avMessagesScanned.setStatus('current')
if mibBuilder.loadTexts: avMessagesScanned.setDescription('Anti-Virus Messages Scanned')
avMessagesScannedLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avMessagesScannedLow.setStatus('current')
if mibBuilder.loadTexts: avMessagesScannedLow.setDescription('Anti-Virus Messages Scanned')
avVirusesFound = MibScalar((1, 3, 6, 1, 4, 1, 24534, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avVirusesFound.setStatus('current')
if mibBuilder.loadTexts: avVirusesFound.setDescription('Anti-Virus Viruses Found')
avVirusesFoundLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avVirusesFoundLow.setStatus('current')
if mibBuilder.loadTexts: avVirusesFoundLow.setDescription('Anti-Virus Viruses Found')
asLastUpdate = MibScalar((1, 3, 6, 1, 4, 1, 24534, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asLastUpdate.setStatus('current')
if mibBuilder.loadTexts: asLastUpdate.setDescription('Date of last Anti-Spam update.')
asMessagesChecked = MibScalar((1, 3, 6, 1, 4, 1, 24534, 3, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asMessagesChecked.setStatus('current')
if mibBuilder.loadTexts: asMessagesChecked.setDescription('Anti-Spam Messages Checked')
asMessagesCheckedLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asMessagesCheckedLow.setStatus('current')
if mibBuilder.loadTexts: asMessagesCheckedLow.setDescription('Anti-Spam Messages Checked')
asMessagesRejected = MibScalar((1, 3, 6, 1, 4, 1, 24534, 3, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asMessagesRejected.setStatus('current')
if mibBuilder.loadTexts: asMessagesRejected.setDescription('Anti-Spam Messages Rejected')
asMessagesRejectedLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: asMessagesRejectedLow.setStatus('current')
if mibBuilder.loadTexts: asMessagesRejectedLow.setDescription('Anti-Spam Messages Rejected')
smtpThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: smtpThreadsTotal.setDescription('Total number of worker threads.')
smtpThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpThreadsActive.setStatus('current')
if mibBuilder.loadTexts: smtpThreadsActive.setDescription('Number of active worker threads.')
smtpSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSessions.setStatus('current')
if mibBuilder.loadTexts: smtpSessions.setDescription('Number of SSL and non SSL sessions.')
smtpSSLSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSSLSessions.setStatus('current')
if mibBuilder.loadTexts: smtpSSLSessions.setDescription('Number of SSL sessions.')
smtpOutOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpOutOfThreads.setStatus('current')
if mibBuilder.loadTexts: smtpOutOfThreads.setDescription('Number of times the server has been unable to service an inbound connection due to all the worker threads being in use.')
smtpSuccessfulAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSuccessfulAuthentications.setStatus('current')
if mibBuilder.loadTexts: smtpSuccessfulAuthentications.setDescription('Number of successful authentications. 64 bit.')
smtpSuccessfulAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpSuccessfulAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: smtpSuccessfulAuthenticationsLow.setDescription('Number of successful authentications. 32 bit.')
smtpFailedAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: smtpFailedAuthentications.setDescription('Number of failed authentications. 64 bit.')
smtpFailedAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpFailedAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: smtpFailedAuthenticationsLow.setDescription('Number of failed authentications. 32 bit.')
postThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: postThreadsTotal.setDescription('Total number of worker threads.')
postThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postThreadsActive.setStatus('current')
if mibBuilder.loadTexts: postThreadsActive.setDescription('Number of active worker threads.')
postSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postSessions.setStatus('current')
if mibBuilder.loadTexts: postSessions.setDescription('Number of SSL and non SSL sessions.')
postSSLSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postSSLSessions.setStatus('current')
if mibBuilder.loadTexts: postSSLSessions.setDescription('Number of SSL sessions.')
postSuccessfulAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postSuccessfulAuthentications.setStatus('current')
if mibBuilder.loadTexts: postSuccessfulAuthentications.setDescription('Number of successful authentications. 64 bit.')
postSuccessfulAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postSuccessfulAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: postSuccessfulAuthenticationsLow.setDescription('Number of successful authentications. 32 bit.')
postFailedAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: postFailedAuthentications.setDescription('Number of failed authentications. 64 bit.')
postFailedAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postFailedAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: postFailedAuthenticationsLow.setDescription('Number of failed authentications. 32 bit.')
postQueues = MibScalar((1, 3, 6, 1, 4, 1, 24534, 5, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: postQueues.setStatus('current')
if mibBuilder.loadTexts: postQueues.setDescription('Number of queues.')
popThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: popThreadsTotal.setDescription('Total number of worker threads.')
popThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popThreadsActive.setStatus('current')
if mibBuilder.loadTexts: popThreadsActive.setDescription('Number of active worker threads.')
popSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popSessions.setStatus('current')
if mibBuilder.loadTexts: popSessions.setDescription('Number of SSL and non SSL sessions.')
popSSLSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popSSLSessions.setStatus('current')
if mibBuilder.loadTexts: popSSLSessions.setDescription('Number of SSL sessions.')
popLoggedOnUsers = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popLoggedOnUsers.setStatus('current')
if mibBuilder.loadTexts: popLoggedOnUsers.setDescription('Number of logged on users.')
popOutOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popOutOfThreads.setStatus('current')
if mibBuilder.loadTexts: popOutOfThreads.setDescription('Number of times the server has been unable to service an inbound connection due to all the worker threads being in use.')
popSuccessfulAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popSuccessfulAuthentications.setStatus('current')
if mibBuilder.loadTexts: popSuccessfulAuthentications.setDescription('Number of successful authentications. 64 bit.')
popSuccessfulAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popSuccessfulAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: popSuccessfulAuthenticationsLow.setDescription('Number of successful authentications. 32 bit.')
popFailedAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: popFailedAuthentications.setDescription('Number of failed authentications. 64 bit.')
popFailedAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popFailedAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: popFailedAuthenticationsLow.setDescription('Number of failed authentications. 32 bit.')
popRetrievedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popRetrievedVolume.setStatus('current')
if mibBuilder.loadTexts: popRetrievedVolume.setDescription('Total number of message bytes send in response to a RETR command. 64 bit.')
popRetrievedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popRetrievedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: popRetrievedVolumeLow.setDescription('Total number of message bytes send in response to a RETR command. 32 bit.')
popToppedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popToppedVolume.setStatus('current')
if mibBuilder.loadTexts: popToppedVolume.setDescription('Total number of message bytes send in response to a TOP command. 64 bit.')
popToppedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popToppedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: popToppedVolumeLow.setDescription('Total number of message bytes send in response to a TOP command. 32 bit.')
popXmitVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popXmitVolume.setStatus('current')
if mibBuilder.loadTexts: popXmitVolume.setDescription('Total number of message bytes received in response to an XMIT command. 64 bit.')
popXmitVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popXmitVolumeLow.setStatus('current')
if mibBuilder.loadTexts: popXmitVolumeLow.setDescription('Total number of message bytes received in response to an XMIT command. 32 bit.')
popDeletedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popDeletedMessages.setStatus('current')
if mibBuilder.loadTexts: popDeletedMessages.setDescription('Total number of deleted messages. 64 bit.')
popDeletedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popDeletedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: popDeletedMessagesLow.setDescription('Total number of deleted messages. 32 bit.')
popRetrievedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popRetrievedMessages.setStatus('current')
if mibBuilder.loadTexts: popRetrievedMessages.setDescription('Total number of retrieved messages. 64 bit.')
popRetrievedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popRetrievedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: popRetrievedMessagesLow.setDescription('Total number of retrieved messages. 32 bit.')
popToppedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popToppedMessages.setStatus('current')
if mibBuilder.loadTexts: popToppedMessages.setDescription('Total number of topped messages. 64 bit.')
popToppedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popToppedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: popToppedMessagesLow.setDescription('Total number of topped messages. 32 bit.')
popXmitedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popXmitedMessages.setStatus('current')
if mibBuilder.loadTexts: popXmitedMessages.setDescription('Total number of xmited messages. 64 bit.')
popXmitedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popXmitedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: popXmitedMessagesLow.setDescription('Total number of xmited messages. 32 bit.')
popLastInboundActivity = MibScalar((1, 3, 6, 1, 4, 1, 24534, 6, 25), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: popLastInboundActivity.setStatus('current')
if mibBuilder.loadTexts: popLastInboundActivity.setDescription('Time since the last time that this service had an inbound association.')
imapThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: imapThreadsTotal.setDescription('Total number of worker threads.')
imapThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapThreadsActive.setStatus('current')
if mibBuilder.loadTexts: imapThreadsActive.setDescription('Number of active worker threads.')
imapSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapSessions.setStatus('current')
if mibBuilder.loadTexts: imapSessions.setDescription('Number of SSL and non SSL sessions.')
imapSSLSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapSSLSessions.setStatus('current')
if mibBuilder.loadTexts: imapSSLSessions.setDescription('Number of SSL sessions.')
imapIdleSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapIdleSessions.setStatus('current')
if mibBuilder.loadTexts: imapIdleSessions.setDescription('Number of idle sessions.')
imapLoggedOnUsers = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapLoggedOnUsers.setStatus('current')
if mibBuilder.loadTexts: imapLoggedOnUsers.setDescription('Number of logged on users.')
imapOutOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapOutOfThreads.setStatus('current')
if mibBuilder.loadTexts: imapOutOfThreads.setDescription('Number of times the server has been unable to service an inbound connection due to all the worker threads being in use.')
imapSuccessfulAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapSuccessfulAuthentications.setStatus('current')
if mibBuilder.loadTexts: imapSuccessfulAuthentications.setDescription('Number of successful authentications. 64 bit.')
imapSuccessfulAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapSuccessfulAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: imapSuccessfulAuthenticationsLow.setDescription('Number of successful authentications. 32 bit.')
imapFailedAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: imapFailedAuthentications.setDescription('Number of failed authentications. 64 bit.')
imapFailedAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapFailedAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: imapFailedAuthenticationsLow.setDescription('Number of failed authentications. 32 bit.')
imapDeletedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapDeletedMessages.setStatus('current')
if mibBuilder.loadTexts: imapDeletedMessages.setDescription('Number of deleted messages. 64 bit.')
imapDeletedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapDeletedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: imapDeletedMessagesLow.setDescription('Number of deleted messages. 32 bit.')
imapStoredMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapStoredMessages.setStatus('current')
if mibBuilder.loadTexts: imapStoredMessages.setDescription('Number of stored messages. 64 bit.')
imapStoredMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapStoredMessagesLow.setStatus('current')
if mibBuilder.loadTexts: imapStoredMessagesLow.setDescription('Number of stored messages. 32 bit.')
imapAppendedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapAppendedMessages.setStatus('current')
if mibBuilder.loadTexts: imapAppendedMessages.setDescription('Number of appended messages. 64 bit.')
imapAppendedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapAppendedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: imapAppendedMessagesLow.setDescription('Number of appended messages. 32 bit.')
imapAppendedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapAppendedVolume.setStatus('current')
if mibBuilder.loadTexts: imapAppendedVolume.setDescription('Total number of appended message bytes. 64 bit.')
imapAppendedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapAppendedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: imapAppendedVolumeLow.setDescription('Total number of appended message bytes. 32 bit.')
imapFetchedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapFetchedMessages.setStatus('current')
if mibBuilder.loadTexts: imapFetchedMessages.setDescription('Number of fetched messages. 64 bit.')
imapFetchedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapFetchedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: imapFetchedMessagesLow.setDescription('Number of fetched messages. 32 bit.')
imapFetchedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapFetchedVolume.setStatus('current')
if mibBuilder.loadTexts: imapFetchedVolume.setDescription('Total number of fetched message bytes. 64 bit.')
imapFetchedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapFetchedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: imapFetchedVolumeLow.setDescription('Total number of fetched message bytes. 32 bit.')
imapCopiedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapCopiedMessages.setStatus('current')
if mibBuilder.loadTexts: imapCopiedMessages.setDescription('Number of copied messages. 64 bit.')
imapCopiedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapCopiedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: imapCopiedMessagesLow.setDescription('Number of copied messages. 32 bit.')
imapSearchedMessages = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapSearchedMessages.setStatus('current')
if mibBuilder.loadTexts: imapSearchedMessages.setDescription('Number of searched messages. 64 bit.')
imapSearchedMessagesLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapSearchedMessagesLow.setStatus('current')
if mibBuilder.loadTexts: imapSearchedMessagesLow.setDescription('Number of searched messages. 32 bit.')
imapLastInboundActivity = MibScalar((1, 3, 6, 1, 4, 1, 24534, 7, 28), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: imapLastInboundActivity.setStatus('current')
if mibBuilder.loadTexts: imapLastInboundActivity.setDescription('Time since the last time that this service had an inbound association.')
wwwThreadsTotal = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwThreadsTotal.setStatus('current')
if mibBuilder.loadTexts: wwwThreadsTotal.setDescription('Total number of worker threads.')
wwwThreadsActive = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwThreadsActive.setStatus('current')
if mibBuilder.loadTexts: wwwThreadsActive.setDescription('Number of active worker threads.')
wwwSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSessions.setStatus('current')
if mibBuilder.loadTexts: wwwSessions.setDescription('Number of SSL and non SSL sessions.')
wwwProxySessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxySessions.setStatus('current')
if mibBuilder.loadTexts: wwwProxySessions.setDescription('Number of proxy sessions.')
wwwScriptSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwScriptSessions.setStatus('current')
if mibBuilder.loadTexts: wwwScriptSessions.setDescription('Number of script sessions.')
wwwConnections = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwConnections.setStatus('current')
if mibBuilder.loadTexts: wwwConnections.setDescription('Number of SSL and non-SSL connections.')
wwwSSLConnections = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSSLConnections.setStatus('current')
if mibBuilder.loadTexts: wwwSSLConnections.setDescription('Number of SSL connections.')
wwwProxyConnections = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxyConnections.setStatus('current')
if mibBuilder.loadTexts: wwwProxyConnections.setDescription('Number of proxy SSL and non-SSL connections.')
wwwProxySSLConnections = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxySSLConnections.setStatus('current')
if mibBuilder.loadTexts: wwwProxySSLConnections.setDescription('Number of proxy SSL connections.')
wwwScriptConnections = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwScriptConnections.setStatus('current')
if mibBuilder.loadTexts: wwwScriptConnections.setDescription('Number of script connections.')
wwwLoggedOnUsers = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwLoggedOnUsers.setStatus('current')
if mibBuilder.loadTexts: wwwLoggedOnUsers.setDescription('Number of logged on users.')
wwwOutOfThreads = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwOutOfThreads.setStatus('current')
if mibBuilder.loadTexts: wwwOutOfThreads.setDescription('Number of times the server has been unable to service an inbound connection due to all the worker threads being in use.')
wwwOutOfSessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwOutOfSessions.setStatus('current')
if mibBuilder.loadTexts: wwwOutOfSessions.setDescription('Number of times the session limit has been reached.')
wwwOutOfProxySessions = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwOutOfProxySessions.setStatus('current')
if mibBuilder.loadTexts: wwwOutOfProxySessions.setDescription('Number of times the proxy session limit has been reached.')
wwwSessionTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwwSessionTimeouts.setDescription('Number of session timeouts.')
wwwSessionTimeoutsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSessionTimeoutsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSessionTimeoutsLow.setDescription('Number of session timeouts.')
wwwProxySessionTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxySessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwwProxySessionTimeouts.setDescription('Number of proxy session timeouts. 64 bit.')
wwwProxySessionTimeoutsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxySessionTimeoutsLow.setStatus('current')
if mibBuilder.loadTexts: wwwProxySessionTimeoutsLow.setDescription('Number of proxy session timeouts. 32 bit.')
wwwScriptSessionTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwScriptSessionTimeouts.setStatus('current')
if mibBuilder.loadTexts: wwwScriptSessionTimeouts.setDescription('Number of script session timeouts. 64 bit.')
wwwScriptSessionTimeoutsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwScriptSessionTimeoutsLow.setStatus('current')
if mibBuilder.loadTexts: wwwScriptSessionTimeoutsLow.setDescription('Number of script session timeouts. 32 bit.')
wwwSuccessfulAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulAuthentications.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulAuthentications.setDescription('Number of successful authentications. 64 bit.')
wwwSuccessfulAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulAuthenticationsLow.setDescription('Number of successful authentications. 32 bit.')
wwwFailedAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: wwwFailedAuthentications.setDescription('Number of failed authentications. 64 bit.')
wwwFailedAuthenticationsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedAuthenticationsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedAuthenticationsLow.setDescription('Number of failed authentications. 32 bit.')
wwwReceivedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: wwwReceivedVolume.setDescription('Number of received bytes. 64 bit.')
wwwReceivedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwReceivedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: wwwReceivedVolumeLow.setDescription('Number of received bytes. 32 bit.')
wwwTransmittedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwTransmittedVolume.setStatus('current')
if mibBuilder.loadTexts: wwwTransmittedVolume.setDescription('Number of transmitted bytes. 64 bit.')
wwwTransmittedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwTransmittedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: wwwTransmittedVolumeLow.setDescription('Number of transmitted bytes. 32 bit.')
wwwProxyReceivedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxyReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: wwwProxyReceivedVolume.setDescription('Number of proxy received bytes. 64 bit.')
wwwProxyReceivedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxyReceivedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: wwwProxyReceivedVolumeLow.setDescription('Number of proxy received bytes. 32 bit.')
wwwProxyTransmittedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxyTransmittedVolume.setStatus('current')
if mibBuilder.loadTexts: wwwProxyTransmittedVolume.setDescription('Number of proxy transmitted bytes. 64 bit.')
wwwProxyTransmittedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwProxyTransmittedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: wwwProxyTransmittedVolumeLow.setDescription('Number of proxy transmitted bytes. 32 bit.')
wwwReverseProxyReceivedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwReverseProxyReceivedVolume.setStatus('current')
if mibBuilder.loadTexts: wwwReverseProxyReceivedVolume.setDescription('Number of reverse proxy received bytes. 64 bit.')
wwwReverseProxyReceivedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwReverseProxyReceivedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: wwwReverseProxyReceivedVolumeLow.setDescription('Number of reverse proxy received bytes. 32 bit.')
wwwReverseProxyTransmittedVolume = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwReverseProxyTransmittedVolume.setStatus('current')
if mibBuilder.loadTexts: wwwReverseProxyTransmittedVolume.setDescription('Number of reverse proxy transmitted bytes. 64 bit.')
wwwReverseProxyTransmittedVolumeLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwReverseProxyTransmittedVolumeLow.setStatus('current')
if mibBuilder.loadTexts: wwwReverseProxyTransmittedVolumeLow.setDescription('Number of reverse proxy transmitted bytes. 32 bit.')
wwwSuccessfulRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulRequests.setDescription('Number of successful WWW requests. 64 bit.')
wwwSuccessfulRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulRequestsLow.setDescription('Number of successful WWW requests. 32 bit.')
wwwFailedRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedRequests.setDescription('Number of failed WWW requests. 64 bit.')
wwwFailedRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedRequestsLow.setDescription('Number of failed WWW requests. 32 bit.')
wwwSuccessfulAdminRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulAdminRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulAdminRequests.setDescription('Number of successful admin requests. 64 bit.')
wwwSuccessfulAdminRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulAdminRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulAdminRequestsLow.setDescription('Number of successful admin requests. 32 bit.')
wwwFailedAdminRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedAdminRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedAdminRequests.setDescription('Number of failed admin requests. 64 bit.')
wwwFailedAdminRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedAdminRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedAdminRequestsLow.setDescription('Number of failed admin requests. 32 bit.')
wwwSuccessfulWebmailRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulWebmailRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulWebmailRequests.setDescription('Number of successful webmail requests. 64 bit.')
wwwSuccessfulWebmailRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulWebmailRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulWebmailRequestsLow.setDescription('Number of successful webmail requests. 32 bit.')
wwwFailedWebmailRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedWebmailRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedWebmailRequests.setDescription('Number of failed webmail requests. 64 bit.')
wwwFailedWebmailRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedWebmailRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedWebmailRequestsLow.setDescription('Number of failed webmail requests. 32 bit.')
wwwSuccessfulUserRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulUserRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulUserRequests.setDescription('Number of successful user requests. 64 bit.')
wwwSuccessfulUserRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulUserRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulUserRequestsLow.setDescription('Number of successful user requests. 32 bit.')
wwwFailedUserRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedUserRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedUserRequests.setDescription('Number of failed user requests. 64 bit.')
wwwFailedUserRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedUserRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedUserRequestsLow.setDescription('Number of failed user requests. 32 bit.')
wwwSuccessfulProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulProxyRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulProxyRequests.setDescription('Number of successful proxy requests. 64 bit.')
wwwSuccessfulProxyRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulProxyRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulProxyRequestsLow.setDescription('Number of successful proxy requests. 32 bit.')
wwwFailedProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedProxyRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedProxyRequests.setDescription('Number of failed proxy requests. 64 bit.')
wwwFailedProxyRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedProxyRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedProxyRequestsLow.setDescription('Number of failed proxy requests. 32 bit.')
wwwSuccessfulReverseProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulReverseProxyRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulReverseProxyRequests.setDescription('Number of successful reverse proxy requests. 64 bit.')
wwwSuccessfulReverseProxyRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulReverseProxyRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulReverseProxyRequestsLow.setDescription('Number of successful reverse proxy requests. 32 bit.')
wwwFailedReverseProxyRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedReverseProxyRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedReverseProxyRequests.setDescription('Number of failed reverse proxy requests. 64 bit.')
wwwFailedReverseProxyRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedReverseProxyRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedReverseProxyRequestsLow.setDescription('Number of failed reverse proxy requests. 32 bit.')
wwwSuccessfulScriptRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulScriptRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulScriptRequests.setDescription('Number of successful script requests. 64 bit.')
wwwSuccessfulScriptRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulScriptRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulScriptRequestsLow.setDescription('Number of successful script requests. 32 bit.')
wwwFailedScriptRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedScriptRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedScriptRequests.setDescription('Number of failed script requests. 64 bit.')
wwwFailedScriptRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedScriptRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedScriptRequestsLow.setDescription('Number of failed script requests. 32 bit.')
wwwSuccessfulTimedRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulTimedRequests.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulTimedRequests.setDescription('Number of successful timed requests. 64 bit.')
wwwSuccessfulTimedRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwSuccessfulTimedRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwSuccessfulTimedRequestsLow.setDescription('Number of successful timed requests. 32 bit.')
wwwFailedTimedRequests = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedTimedRequests.setStatus('current')
if mibBuilder.loadTexts: wwwFailedTimedRequests.setDescription('Number of failed timed requests. 64 bit.')
wwwFailedTimedRequestsLow = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwFailedTimedRequestsLow.setStatus('current')
if mibBuilder.loadTexts: wwwFailedTimedRequestsLow.setDescription('Number of failed timed requests. 32 bit.')
wwwMMLErrors = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwMMLErrors.setStatus('current')
if mibBuilder.loadTexts: wwwMMLErrors.setDescription('Number of MML errors.')
wwwMessagesRead = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwMessagesRead.setStatus('current')
if mibBuilder.loadTexts: wwwMessagesRead.setDescription('Number of read messages.')
wwwMessagesSent = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwMessagesSent.setStatus('current')
if mibBuilder.loadTexts: wwwMessagesSent.setDescription('Number of sent messages.')
wwwLastInboundActivity = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 72), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwLastInboundActivity.setStatus('current')
if mibBuilder.loadTexts: wwwLastInboundActivity.setDescription('Time since the last time that this service had an inbound association.')
wwwLastOutboundActivity = MibScalar((1, 3, 6, 1, 4, 1, 24534, 8, 73), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwwLastOutboundActivity.setStatus('current')
if mibBuilder.loadTexts: wwwLastOutboundActivity.setDescription('Time since the last time that this service made an outbound association.')
mibBuilder.exportSymbols("GMS-MIB", wwwLoggedOnUsers=wwwLoggedOnUsers, wwwSuccessfulTimedRequestsLow=wwwSuccessfulTimedRequestsLow, imapDeletedMessages=imapDeletedMessages, wwwLastOutboundActivity=wwwLastOutboundActivity, wwwSuccessfulAdminRequestsLow=wwwSuccessfulAdminRequestsLow, gmsPOST=gmsPOST, avVirusesFound=avVirusesFound, popFailedAuthentications=popFailedAuthentications, postSSLSessions=postSSLSessions, gordano=gordano, wwwLastInboundActivity=wwwLastInboundActivity, imapFetchedVolumeLow=imapFetchedVolumeLow, wwwProxySessionTimeouts=wwwProxySessionTimeouts, imapSuccessfulAuthentications=imapSuccessfulAuthentications, asMessagesRejected=asMessagesRejected, imapFetchedMessages=imapFetchedMessages, wwwConnections=wwwConnections, postThreadsActive=postThreadsActive, wwwProxySessions=wwwProxySessions, wwwSuccessfulAuthentications=wwwSuccessfulAuthentications, wwwSuccessfulAuthenticationsLow=wwwSuccessfulAuthenticationsLow, imapCopiedMessages=imapCopiedMessages, wwwScriptSessionTimeouts=wwwScriptSessionTimeouts, wwwSuccessfulRequestsLow=wwwSuccessfulRequestsLow, popXmitVolume=popXmitVolume, wwwProxySessionTimeoutsLow=wwwProxySessionTimeoutsLow, postSessions=postSessions, popOutOfThreads=popOutOfThreads, imapSessions=imapSessions, imapAppendedVolumeLow=imapAppendedVolumeLow, popToppedVolumeLow=popToppedVolumeLow, wwwFailedRequestsLow=wwwFailedRequestsLow, wwwSuccessfulReverseProxyRequests=wwwSuccessfulReverseProxyRequests, imapSSLSessions=imapSSLSessions, applRssKB=applRssKB, wwwThreadsActive=wwwThreadsActive, smtpFailedAuthentications=smtpFailedAuthentications, postSuccessfulAuthenticationsLow=postSuccessfulAuthenticationsLow, wwwFailedWebmailRequests=wwwFailedWebmailRequests, imapDeletedMessagesLow=imapDeletedMessagesLow, popSuccessfulAuthentications=popSuccessfulAuthentications, wwwSessionTimeouts=wwwSessionTimeouts, wwwSuccessfulProxyRequestsLow=wwwSuccessfulProxyRequestsLow, wwwOutOfProxySessions=wwwOutOfProxySessions, imapOutOfThreads=imapOutOfThreads, popXmitVolumeLow=popXmitVolumeLow, wwwSuccessfulRequests=wwwSuccessfulRequests, asLastUpdate=asLastUpdate, wwwFailedScriptRequests=wwwFailedScriptRequests, wwwFailedRequests=wwwFailedRequests, avVirusesFoundLow=avVirusesFoundLow, popToppedMessagesLow=popToppedMessagesLow, wwwTransmittedVolumeLow=wwwTransmittedVolumeLow, popToppedMessages=popToppedMessages, asMessagesCheckedLow=asMessagesCheckedLow, popXmitedMessages=popXmitedMessages, imapFailedAuthentications=imapFailedAuthentications, imapStoredMessagesLow=imapStoredMessagesLow, wwwSuccessfulWebmailRequests=wwwSuccessfulWebmailRequests, smtpSSLSessions=smtpSSLSessions, wwwOutOfSessions=wwwOutOfSessions, PYSNMP_MODULE_ID=gordano, postSuccessfulAuthentications=postSuccessfulAuthentications, applPercentCPU=applPercentCPU, wwwFailedTimedRequestsLow=wwwFailedTimedRequestsLow, wwwSuccessfulTimedRequests=wwwSuccessfulTimedRequests, wwwReverseProxyTransmittedVolumeLow=wwwReverseProxyTransmittedVolumeLow, wwwReverseProxyTransmittedVolume=wwwReverseProxyTransmittedVolume, popFailedAuthenticationsLow=popFailedAuthenticationsLow, imapThreadsTotal=imapThreadsTotal, wwwFailedUserRequests=wwwFailedUserRequests, popSuccessfulAuthenticationsLow=popSuccessfulAuthenticationsLow, wwwSessionTimeoutsLow=wwwSessionTimeoutsLow, wwwSuccessfulReverseProxyRequestsLow=wwwSuccessfulReverseProxyRequestsLow, gmsApplTable=gmsApplTable, wwwFailedAdminRequestsLow=wwwFailedAdminRequestsLow, wwwFailedWebmailRequestsLow=wwwFailedWebmailRequestsLow, popXmitedMessagesLow=popXmitedMessagesLow, popDeletedMessages=popDeletedMessages, wwwFailedAuthentications=wwwFailedAuthentications, imapFetchedMessagesLow=imapFetchedMessagesLow, wwwSuccessfulScriptRequests=wwwSuccessfulScriptRequests, wwwReverseProxyReceivedVolumeLow=wwwReverseProxyReceivedVolumeLow, wwwSuccessfulScriptRequestsLow=wwwSuccessfulScriptRequestsLow, popRetrievedVolume=popRetrievedVolume, popLoggedOnUsers=popLoggedOnUsers, imapCopiedMessagesLow=imapCopiedMessagesLow, avMessagesScanned=avMessagesScanned, wwwSessions=wwwSessions, wwwReceivedVolume=wwwReceivedVolume, imapFetchedVolume=imapFetchedVolume, wwwScriptSessions=wwwScriptSessions, wwwReceivedVolumeLow=wwwReceivedVolumeLow, wwwProxyReceivedVolumeLow=wwwProxyReceivedVolumeLow, wwwFailedTimedRequests=wwwFailedTimedRequests, wwwSuccessfulUserRequestsLow=wwwSuccessfulUserRequestsLow, wwwFailedAdminRequests=wwwFailedAdminRequests, gmsAV=gmsAV, wwwMMLErrors=wwwMMLErrors, imapStoredMessages=imapStoredMessages, asMessagesRejectedLow=asMessagesRejectedLow, postFailedAuthentications=postFailedAuthentications, asMessagesChecked=asMessagesChecked, smtpOutOfThreads=smtpOutOfThreads, gmsWWW=gmsWWW, wwwTransmittedVolume=wwwTransmittedVolume, smtpSuccessfulAuthentications=smtpSuccessfulAuthentications, popLastInboundActivity=popLastInboundActivity, wwwFailedReverseProxyRequestsLow=wwwFailedReverseProxyRequestsLow, wwwProxyTransmittedVolume=wwwProxyTransmittedVolume, wwwSSLConnections=wwwSSLConnections, popSessions=popSessions, wwwFailedReverseProxyRequests=wwwFailedReverseProxyRequests, imapLoggedOnUsers=imapLoggedOnUsers, imapSearchedMessagesLow=imapSearchedMessagesLow, wwwScriptConnections=wwwScriptConnections, wwwSuccessfulWebmailRequestsLow=wwwSuccessfulWebmailRequestsLow, postQueues=postQueues, popThreadsTotal=popThreadsTotal, wwwThreadsTotal=wwwThreadsTotal, imapSuccessfulAuthenticationsLow=imapSuccessfulAuthenticationsLow, smtpSessions=smtpSessions, avEngineVersion=avEngineVersion, gmsApplEntry=gmsApplEntry, imapThreadsActive=imapThreadsActive, wwwFailedUserRequestsLow=wwwFailedUserRequestsLow, gmsSMTP=gmsSMTP, gmsAS=gmsAS, postThreadsTotal=postThreadsTotal, wwwProxyConnections=wwwProxyConnections, wwwFailedScriptRequestsLow=wwwFailedScriptRequestsLow, applHandleCount=applHandleCount, wwwFailedProxyRequests=wwwFailedProxyRequests, gmsPOP=gmsPOP, smtpThreadsTotal=smtpThreadsTotal, wwwSuccessfulProxyRequests=wwwSuccessfulProxyRequests, wwwMessagesRead=wwwMessagesRead, wwwSuccessfulAdminRequests=wwwSuccessfulAdminRequests, wwwProxyTransmittedVolumeLow=wwwProxyTransmittedVolumeLow, wwwOutOfThreads=wwwOutOfThreads, wwwFailedProxyRequestsLow=wwwFailedProxyRequestsLow, wwwScriptSessionTimeoutsLow=wwwScriptSessionTimeoutsLow, imapSearchedMessages=imapSearchedMessages, imapIdleSessions=imapIdleSessions, avMessagesScannedLow=avMessagesScannedLow, popRetrievedMessages=popRetrievedMessages, gmsIMAP=gmsIMAP, smtpFailedAuthenticationsLow=smtpFailedAuthenticationsLow, imapFailedAuthenticationsLow=imapFailedAuthenticationsLow, imapAppendedMessagesLow=imapAppendedMessagesLow, wwwProxySSLConnections=wwwProxySSLConnections, imapAppendedMessages=imapAppendedMessages, imapAppendedVolume=imapAppendedVolume, wwwProxyReceivedVolume=wwwProxyReceivedVolume, wwwMessagesSent=wwwMessagesSent, popDeletedMessagesLow=popDeletedMessagesLow, wwwSuccessfulUserRequests=wwwSuccessfulUserRequests, smtpSuccessfulAuthenticationsLow=smtpSuccessfulAuthenticationsLow, popRetrievedMessagesLow=popRetrievedMessagesLow, postFailedAuthenticationsLow=postFailedAuthenticationsLow, wwwReverseProxyReceivedVolume=wwwReverseProxyReceivedVolume, avLastUpdate=avLastUpdate, popSSLSessions=popSSLSessions, popToppedVolume=popToppedVolume, popThreadsActive=popThreadsActive, wwwFailedAuthenticationsLow=wwwFailedAuthenticationsLow, imapLastInboundActivity=imapLastInboundActivity, popRetrievedVolumeLow=popRetrievedVolumeLow, smtpThreadsActive=smtpThreadsActive)
