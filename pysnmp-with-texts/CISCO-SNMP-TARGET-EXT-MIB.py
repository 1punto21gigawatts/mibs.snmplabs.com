#
# PySNMP MIB module CISCO-SNMP-TARGET-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SNMP-TARGET-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
snmpTargetAddrName, snmpTargetAddrEntry = mibBuilder.importSymbols("SNMP-TARGET-MIB", "snmpTargetAddrName", "snmpTargetAddrEntry")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, Bits, Counter32, Integer32, TimeTicks, Gauge32, MibIdentifier, IpAddress, Counter64, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Counter32", "Integer32", "TimeTicks", "Gauge32", "MibIdentifier", "IpAddress", "Counter64", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Unsigned32")
TextualConvention, DisplayString, TruthValue, StorageType, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "StorageType", "RowStatus")
ciscoSnmpTargetExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 412))
ciscoSnmpTargetExtMIB.setRevisions(('2008-11-07 00:00', '2007-08-20 00:00', '2004-04-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSnmpTargetExtMIB.setRevisionsDescriptions(("-Added 'cExtSnmpNotifGblTrapSrcIfIndex' and 'cExtSnmpNotifGblInformSrcIfIndex' for supporting source interface configuration for the SNMP notifications. -Added OBJECT-GROUP 'ciscoSnmpTargetNotifSrcIntGroup' and MODULE-COMPLIANCE 'ciscoSnmpTargetExtMIBComplianceRev2'.", 'Added the following to support management of VRF based reachability and filtering for SNMP targets: - cExtSnmpTargetVrfTable for VRF related configuration of SNMP targets.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIB.setLastUpdated('200811070000Z')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIB.setDescription('This MIB is an extension of the SNMP-TARGET-MIB specified in RFC3413. This MIB module contains Cisco-defined extension to the snmpTargetAddrTable to represent information required for IPv6 Address. When Target has Link local or Multicast IPv6 address, the information of the interface on which the notification has to be sent is required. This additional information is provided by this extension MIB. This module also contains definition for set of new variable to hold the address of the host that had sent an unauthentic SNMP message to agent. Glossary of the terms used in this MIB: -------------------------------------- VRF - Virtual Routing and Forwarding. An IP technology that allows multiple instances of routing table to exist in a system and work simultaneously. A VRF consists of an IP routing table, a forwarding table, a set of interfaces that use the forwarding table, and a set of rules and routing protocol parameters that control the information that is included into the routing table.')
ciscoSnmpTargetExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 412, 1))
cExtSnmpTargetAuthAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 1))
cExtSnmpTargetAuthInetType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cExtSnmpTargetAuthInetType.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetAuthInetType.setDescription('This contains the type of address cExtSnmpTargetAuthInetAddr holds when a host sends an unauthentic SNMP message.')
cExtSnmpTargetAuthInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cExtSnmpTargetAuthInetAddr.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetAuthInetAddr.setDescription('This contains the address of the host from which snmp-agent has received a SNMP message that is not authentic.')
cExtSnmpTargetAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 2), )
if mibBuilder.loadTexts: cExtSnmpTargetAddrTable.setReference('RFC2737: Section 4.1')
if mibBuilder.loadTexts: cExtSnmpTargetAddrTable.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetAddrTable.setDescription("The cExtSnmpTargetAddrTable extends the SNMP-TARGET-MIB's snmpTargetAddrTable for providing info on the type of interface for Link Local or Multicast IPv6 Target Address.")
cExtSnmpTargetAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 2, 1), )
snmpTargetAddrEntry.registerAugmentions(("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetAddrEntry"))
cExtSnmpTargetAddrEntry.setIndexNames(*snmpTargetAddrEntry.getIndexNames())
if mibBuilder.loadTexts: cExtSnmpTargetAddrEntry.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetAddrEntry.setDescription('A cExtSnmpTargetAddrTable entry extends snmpTargetAddrTable to provide a new variable to hold the value of interface type. A target which has a link local or a multicast address the variable of this table is valid. Entries are removed when the corresponding entry in the snmpTargetAddrTable is removed.')
cExtSnmpTargetAddrIntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 2, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cExtSnmpTargetAddrIntIfIndex.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetAddrIntIfIndex.setDescription("Holds valid ifIndex value of the interface through which the notifications for the target with Multicast/Link local address specified in the snmpTargetAddrTAddress, is sent. If snmpTargetAddrTAddress doesn't hold a Linklocal or a Multicast target address then the value of this object will be zero. For the entries with snmpTargetAddrTAddress having Link Local or Multicast address the snmpTargetAddrStatus cannot be set to valid unless the value for this object holds a valid ifIndex value.")
cExtSnmpTargetVrfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3), )
if mibBuilder.loadTexts: cExtSnmpTargetVrfTable.setReference("D. Levi, P. Meyer and B. Stewart, Section 4.1 'The Management Target MIB Module', RFC-3413, December 2002.")
if mibBuilder.loadTexts: cExtSnmpTargetVrfTable.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfTable.setDescription('The cExtSnmpTargetVrfTable extends the snmpTargetAddrTable of the SNMP-TARGET-MIB for providing: - VRF reachability criterion for the SNMP target - VRF filtering criterion for the SNMP target This table is indexed by the target entity snmpTargetAddrName and the associated VRF name cExtSnmpTargetVrfName. Each entry of this table forms a tuple of target and VRF name for which all the VRF related configuration parameters can be specified by corresponding instances of the columnar objects. The reachability of the SNMP target is qualified by the routing context by way of associating VRF Name(s) with it. Restricting only those SNMP notifications that are generated within the context of a VRF to a specific SNMP target is VRF based filtering of notifications. A row in this table cannot be created prior to the creation of row it extends.')
cExtSnmpTargetVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3, 1), ).setIndexNames((0, "SNMP-TARGET-MIB", "snmpTargetAddrName"), (0, "CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetVrfName"))
if mibBuilder.loadTexts: cExtSnmpTargetVrfEntry.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfEntry.setDescription("An entry (conceptual row) in the cExtSnmpTargetVrfTable. When an entry in the snmpTargetAddrTable is deleted the corresponding entries in this table are also deleted. A row needs to exist in the cExtSnmpTargetVrfTable for each VRF for which SNMP notifications are to be sent to a particular target address, so that when the same target address is the destination for multiple VRFs, then multiple rows in this table will reference the same target address. However, only one of such multiple rows can be used for routing the SNMP notifications to that target address, i.e., only one of them can have an instance of cExtSnmpTargetVrfRoute with the value 'true'. Thus, any management operation which sets an instance of cExtSnmpTargetVrfRoute to 'true' must also have the effect of setting any other instance of cExtSnmpTargetVrfRoute for the same target address to 'false'.")
cExtSnmpTargetVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: cExtSnmpTargetVrfName.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfName.setDescription('This object identifies a human readable string representing the name of the VRF.')
cExtSnmpTargetVrfRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cExtSnmpTargetVrfRoute.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfRoute.setDescription("This object specifies whether this VRF (identified by the corresponding instance identifier of cExtSnmpTargetVrfName) should be used for routing the SNMP notifications sent to this target address specified in the value of the corresponding instance of snmpTargetAddrTAddress. The value 'true' indicates that this VRF should be used. The value 'false' indicates that this VRF should not be used.")
cExtSnmpTargetVrfFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cExtSnmpTargetVrfFilter.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfFilter.setDescription("This object specifies whether SNMP notifications generated in this VRF (identified by the corresponding instance identifier of cExtSnmpTargetVrfName) context should be sent to this target address specified in the value of the corresponding instance of snmpTargetAddrTAddress. By default, the notifications generated in any of the VRFs are allowed to be sent to the configured targets. Setting the value of this object to 'true' defines 'inclusive' filtering policy to allow notifications of a specific VRF while excluding notifications of all other VRFs. The value 'true' indicates that the notifications of this VRF should be sent. The value 'false' indicates that the notifications of this VRF should not be sent.")
cExtSnmpTargetVrfStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3, 1, 4), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cExtSnmpTargetVrfStorage.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfStorage.setDescription("The storage type for this conceptual row. When the value of an instance of this object is 'permanent', the value of the corresponding instance of all the other objects of this table except cExtSnmpTargetVrfStatus are read-writable. The 'permanent' rows can not be deleted by setting value of the corresponding instance of cExtSnmpTargetVrfStatus to 'destroy'.")
cExtSnmpTargetVrfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cExtSnmpTargetVrfStatus.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpTargetVrfStatus.setDescription("The status of this conceptual row. There are no specific restrictions for setting the value of this object to 'active'. Once the value of this object is set to 'active', the value of the corresponding instance of all other objects of this table can still be modified.")
cExtSnmpNotifGblTrapSrcIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cExtSnmpNotifGblTrapSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpNotifGblTrapSrcIfIndex.setDescription("This object specifies the ifIdex value of the source interface to be used for sending TRAP notifications. The value of this object should be a valid 'ifIndex' value. This is a global configuration applied for all TRAP notifications sent by this agent to all the targets. If the source interface is configured for a specific target using the value of corresponding instance of 'cExtSnmpTargetAddrIntIfIndex', then that value takes precedence and will be used for sending the notification. The value of this object being 'zero' implies that there is no source interface configuration for the TRAP notifications at a global level.")
cExtSnmpNotifGblInformSrcIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 412, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cExtSnmpNotifGblInformSrcIfIndex.setStatus('current')
if mibBuilder.loadTexts: cExtSnmpNotifGblInformSrcIfIndex.setDescription("This object specifies the ifIdex value of the source interface to be used for sending INFORM notifications. The value of this object should be a valid 'ifIndex' value. This is a global configuration applied for all INFORM notifications sent by this agent to all the targets. If the source interface is configured for a specific target using the value of corresponding instance of 'cExtSnmpTargetAddrIntIfIndex', then that value takes precedence and will be used for sending the notification. The value of this object being 'zero' implies that there is no source interface configuration for the INFORM notifications at a global level.")
ciscoSnmpTargetExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 412, 2))
ciscoSnmpTargetExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 1))
ciscoSnmpTargetExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 2))
ciscoSnmpTargetExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 1, 1)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetExtMIBGroup"), ("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetAuthFailureGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetExtMIBCompliance = ciscoSnmpTargetExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIBCompliance.setDescription('Compliance for IPv6 address supported by snmpTargetAddrTAddress for Link-Local or Multicast and for holding the recent host address that sent an unauthentic SNMP message in cExtSnmpTargetAuthInetAddr and cExtSnmpTargetAuthInetType.')
ciscoSnmpTargetExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 1, 2)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetExtMIBGroup"), ("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetAuthFailureGroup"), ("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetExtVrfMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetExtMIBComplianceRev1 = ciscoSnmpTargetExtMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-SNMP-TARGET-EXT-MIB.')
ciscoSnmpTargetExtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 1, 3)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetExtMIBGroup"), ("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetAuthFailureGroup"), ("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetExtVrfMIBGroup"), ("CISCO-SNMP-TARGET-EXT-MIB", "ciscoSnmpTargetNotifSrcIntGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetExtMIBComplianceRev2 = ciscoSnmpTargetExtMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-SNMP-TARGET-EXT-MIB.')
ciscoSnmpTargetAuthFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 2, 1)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetAuthInetType"), ("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetAuthInetAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetAuthFailureGroup = ciscoSnmpTargetAuthFailureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSnmpTargetAuthFailureGroup.setDescription('The collection of objects which gives information about the recent host that has sent a SNMP message to the agent that is not authentic.')
ciscoSnmpTargetExtMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 2, 2)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetAddrIntIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetExtMIBGroup = ciscoSnmpTargetExtMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSnmpTargetExtMIBGroup.setDescription('The collection of objects which give information about the interface through which the notifications are sent out for IPv6 Link-local and Multicast Target address.')
ciscoSnmpTargetExtVrfMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 2, 3)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetVrfRoute"), ("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetVrfFilter"), ("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetVrfStorage"), ("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpTargetVrfStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetExtVrfMIBGroup = ciscoSnmpTargetExtVrfMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSnmpTargetExtVrfMIBGroup.setDescription('The collection of objects for supporting VRF based configuration for the SNMP targets.')
ciscoSnmpTargetNotifSrcIntGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 412, 2, 2, 4)).setObjects(("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpNotifGblTrapSrcIfIndex"), ("CISCO-SNMP-TARGET-EXT-MIB", "cExtSnmpNotifGblInformSrcIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSnmpTargetNotifSrcIntGroup = ciscoSnmpTargetNotifSrcIntGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSnmpTargetNotifSrcIntGroup.setDescription('The collection of objects which give information about the interface through which SNMP TRAP and INFORM notifications are sent for all target addresses globally.')
mibBuilder.exportSymbols("CISCO-SNMP-TARGET-EXT-MIB", cExtSnmpTargetAuthInetType=cExtSnmpTargetAuthInetType, ciscoSnmpTargetExtVrfMIBGroup=ciscoSnmpTargetExtVrfMIBGroup, cExtSnmpTargetAddrTable=cExtSnmpTargetAddrTable, ciscoSnmpTargetExtMIBCompliance=ciscoSnmpTargetExtMIBCompliance, ciscoSnmpTargetExtMIBGroups=ciscoSnmpTargetExtMIBGroups, cExtSnmpTargetVrfStorage=cExtSnmpTargetVrfStorage, cExtSnmpNotifGblTrapSrcIfIndex=cExtSnmpNotifGblTrapSrcIfIndex, cExtSnmpTargetVrfName=cExtSnmpTargetVrfName, cExtSnmpTargetVrfRoute=cExtSnmpTargetVrfRoute, ciscoSnmpTargetExtMIBConformance=ciscoSnmpTargetExtMIBConformance, ciscoSnmpTargetExtMIBGroup=ciscoSnmpTargetExtMIBGroup, cExtSnmpTargetAuthInetAddr=cExtSnmpTargetAuthInetAddr, cExtSnmpTargetAddrIntIfIndex=cExtSnmpTargetAddrIntIfIndex, ciscoSnmpTargetExtMIBComplianceRev1=ciscoSnmpTargetExtMIBComplianceRev1, cExtSnmpTargetVrfStatus=cExtSnmpTargetVrfStatus, cExtSnmpTargetAddrEntry=cExtSnmpTargetAddrEntry, ciscoSnmpTargetAuthFailureGroup=ciscoSnmpTargetAuthFailureGroup, ciscoSnmpTargetExtMIBComplianceRev2=ciscoSnmpTargetExtMIBComplianceRev2, cExtSnmpNotifGblInformSrcIfIndex=cExtSnmpNotifGblInformSrcIfIndex, ciscoSnmpTargetExtMIBObjects=ciscoSnmpTargetExtMIBObjects, cExtSnmpTargetVrfTable=cExtSnmpTargetVrfTable, cExtSnmpTargetVrfEntry=cExtSnmpTargetVrfEntry, cExtSnmpTargetVrfFilter=cExtSnmpTargetVrfFilter, ciscoSnmpTargetNotifSrcIntGroup=ciscoSnmpTargetNotifSrcIntGroup, ciscoSnmpTargetExtMIB=ciscoSnmpTargetExtMIB, ciscoSnmpTargetExtMIBCompliances=ciscoSnmpTargetExtMIBCompliances, PYSNMP_MODULE_ID=ciscoSnmpTargetExtMIB, cExtSnmpTargetAuthAddr=cExtSnmpTargetAuthAddr)
