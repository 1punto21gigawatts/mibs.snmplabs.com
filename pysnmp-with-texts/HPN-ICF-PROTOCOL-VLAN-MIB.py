#
# PySNMP MIB module HPN-ICF-PROTOCOL-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-PROTOCOL-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Gauge32, MibIdentifier, ObjectIdentity, Counter64, IpAddress, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Unsigned32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter64", "IpAddress", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Unsigned32", "NotificationType")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hpnicfProtocolVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16))
hpnicfProtocolVlan.setRevisions(('2004-08-31 19:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfProtocolVlan.setRevisionsDescriptions(('The initial revision of this MIB module .',))
if mibBuilder.loadTexts: hpnicfProtocolVlan.setLastUpdated('200408311800Z')
if mibBuilder.loadTexts: hpnicfProtocolVlan.setOrganization('')
if mibBuilder.loadTexts: hpnicfProtocolVlan.setContactInfo('')
if mibBuilder.loadTexts: hpnicfProtocolVlan.setDescription('This MIB contains the objects for managing the protocol-based VLAN configurations.')
class HpnicfvProtocolVlanProtocolType(TextualConvention, Integer32):
    description = ' Contains protocols both for Layer 3 and Layer 2. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 101, 102, 103, 201))
    namedValues = NamedValues(("ip", 1), ("ipx", 2), ("at", 3), ("ipv6", 4), ("mode-llc", 101), ("mode-snap", 102), ("mode-ethernetii", 103), ("notConfigure", 201))

class HpnicfvProtocolVlanProtocolSubType(TextualConvention, Integer32):
    description = ' combine with HpnicfvProtocolVlanProtocolType. ethernetii(2), llc(3), raw(4), snap(5) are used when the value of HpnicfvProtocolVlanProtocolType is for Layer 3 protocols. etype(6) is used when the value of HpnicfvProtocolVlanProtocolType is for Layer 2 protocols. For detailed information, see the DESCRIPTION part of hpnicfProtocolVlanProtocolTypeValue. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notused", 1), ("ethernetii", 2), ("llc", 3), ("raw", 4), ("snap", 5), ("etype", 6))

hpnicfProtocolVlanOperate = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1))
hpnicfProtocolNumAllVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolNumAllVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolNumAllVlan.setDescription('The maximum number of protocols that can be configured on all VLANs. This number may vary with products.')
hpnicfProtocolNumPerVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolNumPerVlan.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolNumPerVlan.setDescription('The maximum number of protocols that can be configured per VLAN. This number may vary with products.')
hpnicfProtocolNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolNumAllPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolNumAllPort.setDescription('The maximum number of protocols that can be applied on all ports. This number may vary with products.')
hpnicfProtocolNumPerPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolNumPerPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolNumPerPort.setDescription('The maximum number of protocols that can be applied to each port. This number may vary with products.')
hpnicfProtocolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5), )
if mibBuilder.loadTexts: hpnicfProtocolVlanTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanTable.setDescription('Protocol-based VLAN configuration table.')
hpnicfProtocolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanVlanId"), (0, "HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanProtocolIndex"))
if mibBuilder.loadTexts: hpnicfProtocolVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanEntry.setDescription('Protocol-based VLAN configuration entry.')
hpnicfProtocolVlanVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfProtocolVlanVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanVlanId.setDescription('Vlan ID.')
hpnicfProtocolVlanProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolIndex.setDescription('The protocol index value of a row in this table is in the range of [0..hpnicfProtocolNumPerVlan-1]. This object may not be provided during creation. In this case, a number is assigned by system automatically.')
hpnicfProtocolVlanProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1, 3), HpnicfvProtocolVlanProtocolType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolType.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolType.setDescription(' Specify protocol types supported by a protocol-based VLAN. Now protocols supported on Layer 3 include ip, ipx, at, ipv6, etc. Now protocols supported on Layer 2 include llc, snap, ethernetii, etc. For detailed information, see description of hpnicfProtocolVlanProtocolTypeValue. ')
hpnicfProtocolVlanProtocolSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1, 4), HpnicfvProtocolVlanProtocolSubType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolSubType.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolSubType.setDescription(' See description of hpnicfProtocolVlanProtocolTypeValue. ')
hpnicfProtocolVlanProtocolTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolTypeValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolTypeValue.setDescription(" The value of the configured protocol type. By default, semicolon(;) is used as a separator between different parts in the content of the object. The relationship among hpnicfProtocolVlanProtocolType, hpnicfProtocolVlanProtocolSubType and hpnicfProtocolVlanProtocolTypeValue is as follows: |----------------------------------------------------------------------------------------------| | hpnicfProtocolVlan- | hpnicfProtocolVlan- | hpnicfProtocolVlanProtocolTypeValue | | ProtocolType | ProtocolSubType | | |-------------------|-------------------|------------------------------------------------------| | ip | notused | notused for create operation | |-------------------|-------------------|------------------------------------------------------| | ipv6 | notused | notused for create operation | |-------------------|-------------------|------------------------------------------------------| | at | notused | notused for create operation | |-------------------|-------------------|------------------------------------------------------| | ipx | ethernetii | notused for create operation | | llc | | | | raw | | | | snap | | |-------------------|-------------------|------------------------------------------------------| | mode-snap | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |-------------------|-------------------|------------------------------------------------------| | mode-ethernetii | etype | hex string like '600', which means 0x0600. | | | | The range is [0x600..0xffff] | |-------------------|-------------------|------------------------------------------------------| | mode-llc | notused | the sequence of different parts is as follows. | | | | [dsap value][;ssap value][dsap value;ssap value] | | | | Both range is [0x00..0xff] | | | | | | | | For example. Suppose value of dsap and ssap are 0x09 | | | | and 0x0a. | | | | If neither dsap or ssap, the string length is zero. | | | | If dsap provided, the string is '09;' or '09' | | | | If ssap provided, the value is ';0a' | | | | If dsap and ssap provided, the value is '09;0a' | |-------------------|-------------------|------------------------------------------------------| ")
hpnicfProtocolVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfProtocolVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanRowStatus.setDescription('The row status of this table.')
hpnicfProtocolVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6), )
if mibBuilder.loadTexts: hpnicfProtocolVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortTable.setDescription('Protocol-based VLAN port information table.')
hpnicfProtocolVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortIndex"), (0, "HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortVlanId"), (0, "HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortProtocolId"))
if mibBuilder.loadTexts: hpnicfProtocolVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortEntry.setDescription('Protocol-based VLAN port information entry.')
hpnicfProtocolVlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfProtocolVlanPortIndex.setReference('hpnicfLswPortIndex in HPN-ICF-LSW-DEV-ADM-MIB')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortIndex.setDescription(' The maximum number is the total number of ports supported by device. ')
hpnicfProtocolVlanPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfProtocolVlanPortVlanId.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortVlanId.setDescription('The protocol-based VLAN ID.')
hpnicfProtocolVlanPortProtocolId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfProtocolVlanPortProtocolId.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortProtocolId.setDescription('The protocol index.')
hpnicfProtocolVlanPortProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 4), HpnicfvProtocolVlanProtocolType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolVlanPortProtocolType.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortProtocolType.setDescription('See the description of hpnicfProtocolVlanProtocolType.')
hpnicfProtocolVlanPortProtocolSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 5), HpnicfvProtocolVlanProtocolSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolVlanPortProtocolSubType.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortProtocolSubType.setDescription('See the description of hpnicfProtocolVlanProtocolSubType.')
hpnicfProtocolVlanPortTypeValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolVlanPortTypeValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortTypeValue.setDescription('See the description of hpnicfProtocolVlanProtocolTypeValue.')
hpnicfProtocolVlanPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfProtocolVlanPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortRowStatus.setDescription('The row status of this table.')
hpnicfProtocolVlanPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfProtocolVlanPortStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortStatus.setDescription('The protocol VLAN status on the port. The value is active only when hpnicfProtocolVlanPortProtocolId has the corresponding entry in hpnicfProtocolVlanTable, the port link type is hybrid, and the VLAN is allowed by the port. active: protocol VLAN has been applied on the port. inactive: protocol VLAN is not applied on the port.')
hpnicfDifferentProtocolNumAllPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfDifferentProtocolNumAllPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfDifferentProtocolNumAllPort.setDescription('The maximum number of different protocols that can be applied to all ports.')
hpnicfProtocolVlanConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2))
hpnicfProtocolVlanCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2, 1))
hpnicfProtocolVlanCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2, 1, 1)).setObjects(("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanOperateGroup"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanProtocolGroup"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfProtocolVlanCompliance = hpnicfProtocolVlanCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanCompliance.setDescription('The compliance statement for protocol VLAN MIB.')
hpnicfProtocolVlanGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2, 2))
hpnicfProtocolVlanOperateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2, 2, 1)).setObjects(("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolNumAllVlan"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolNumPerVlan"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolNumAllPort"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolNumPerPort"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfDifferentProtocolNumAllPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfProtocolVlanOperateGroup = hpnicfProtocolVlanOperateGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanOperateGroup.setDescription('A group of scalar objects describing the maximum number.')
hpnicfProtocolVlanProtocolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2, 2, 2)).setObjects(("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanProtocolType"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanProtocolSubType"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanProtocolTypeValue"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfProtocolVlanProtocolGroup = hpnicfProtocolVlanProtocolGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanProtocolGroup.setDescription('A group of protocol VLAN protocol.')
hpnicfProtocolVlanPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 16, 2, 2, 3)).setObjects(("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortProtocolType"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortProtocolSubType"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortTypeValue"), ("HPN-ICF-PROTOCOL-VLAN-MIB", "hpnicfProtocolVlanPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfProtocolVlanPortGroup = hpnicfProtocolVlanPortGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfProtocolVlanPortGroup.setDescription('A group of protocol VLAN port.')
mibBuilder.exportSymbols("HPN-ICF-PROTOCOL-VLAN-MIB", hpnicfProtocolVlanOperateGroup=hpnicfProtocolVlanOperateGroup, hpnicfProtocolNumPerVlan=hpnicfProtocolNumPerVlan, hpnicfProtocolVlanCompliances=hpnicfProtocolVlanCompliances, hpnicfProtocolVlanPortGroup=hpnicfProtocolVlanPortGroup, hpnicfProtocolNumPerPort=hpnicfProtocolNumPerPort, hpnicfProtocolVlanOperate=hpnicfProtocolVlanOperate, hpnicfProtocolVlanProtocolIndex=hpnicfProtocolVlanProtocolIndex, hpnicfProtocolVlanVlanId=hpnicfProtocolVlanVlanId, hpnicfDifferentProtocolNumAllPort=hpnicfDifferentProtocolNumAllPort, hpnicfProtocolVlan=hpnicfProtocolVlan, PYSNMP_MODULE_ID=hpnicfProtocolVlan, HpnicfvProtocolVlanProtocolSubType=HpnicfvProtocolVlanProtocolSubType, hpnicfProtocolVlanPortTypeValue=hpnicfProtocolVlanPortTypeValue, hpnicfProtocolVlanEntry=hpnicfProtocolVlanEntry, hpnicfProtocolVlanPortRowStatus=hpnicfProtocolVlanPortRowStatus, hpnicfProtocolVlanPortEntry=hpnicfProtocolVlanPortEntry, hpnicfProtocolVlanPortProtocolSubType=hpnicfProtocolVlanPortProtocolSubType, hpnicfProtocolVlanGroups=hpnicfProtocolVlanGroups, hpnicfProtocolVlanRowStatus=hpnicfProtocolVlanRowStatus, hpnicfProtocolVlanProtocolType=hpnicfProtocolVlanProtocolType, hpnicfProtocolVlanProtocolTypeValue=hpnicfProtocolVlanProtocolTypeValue, hpnicfProtocolVlanCompliance=hpnicfProtocolVlanCompliance, hpnicfProtocolVlanProtocolSubType=hpnicfProtocolVlanProtocolSubType, HpnicfvProtocolVlanProtocolType=HpnicfvProtocolVlanProtocolType, hpnicfProtocolNumAllPort=hpnicfProtocolNumAllPort, hpnicfProtocolVlanTable=hpnicfProtocolVlanTable, hpnicfProtocolVlanConformance=hpnicfProtocolVlanConformance, hpnicfProtocolVlanPortProtocolId=hpnicfProtocolVlanPortProtocolId, hpnicfProtocolNumAllVlan=hpnicfProtocolNumAllVlan, hpnicfProtocolVlanProtocolGroup=hpnicfProtocolVlanProtocolGroup, hpnicfProtocolVlanPortVlanId=hpnicfProtocolVlanPortVlanId, hpnicfProtocolVlanPortProtocolType=hpnicfProtocolVlanPortProtocolType, hpnicfProtocolVlanPortTable=hpnicfProtocolVlanPortTable, hpnicfProtocolVlanPortIndex=hpnicfProtocolVlanPortIndex, hpnicfProtocolVlanPortStatus=hpnicfProtocolVlanPortStatus)
