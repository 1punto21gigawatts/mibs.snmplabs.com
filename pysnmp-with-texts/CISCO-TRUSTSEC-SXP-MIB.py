#
# PySNMP MIB module CISCO-TRUSTSEC-SXP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TRUSTSEC-SXP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoVrfName, = mibBuilder.importSymbols("CISCO-TC", "CiscoVrfName")
CtsPasswordEncryptionType, CtsPassword, CtsSecurityGroupTag = mibBuilder.importSymbols("CISCO-TRUSTSEC-TC-MIB", "CtsPasswordEncryptionType", "CtsPassword", "CtsSecurityGroupTag")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddressPrefixLength, InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, Gauge32, NotificationType, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, iso, TimeTicks, Bits, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Gauge32", "NotificationType", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "iso", "TimeTicks", "Bits", "Integer32", "ObjectIdentity")
StorageType, RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
ciscoTrustSecSxpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 720))
ciscoTrustSecSxpMIB.setRevisions(('2012-04-17 00:00', '2010-11-24 00:00', '2010-02-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTrustSecSxpMIB.setRevisionsDescriptions(('Added following OBJECT-GROUP - ctsxSxpBindingLogGroup - ctsxSxpBindingNotifInfoGroup - ctsxSxpNotifErrMsgGroup - ctsxSxpNodeIdInfoGroup - ctsxSxpSgtMapGroup - ctsxNotifsControlGroup - ctsxNotifsGroup - ctsxSxpGlobalHoldTimeGroup - ctsxSxpConnHoldTimeGroup - ctsxSxpConnCapbilityGroup - ctsxSxpVersionSupportGroup - ctsxSgtMapPeerSeqGroup Added new compliance - ciscoTrustSecSxpMIBCompliance3. Added enumerations three(4) and four(5) for the object ctsxSxpConnVersion.', 'Added ctsxSxpVersionGroup.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoTrustSecSxpMIB.setLastUpdated('201204170000Z')
if mibBuilder.loadTexts: ciscoTrustSecSxpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTrustSecSxpMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoTrustSecSxpMIB.setDescription("This MIB module is for the configuration and status query of SGT Exchange Protocol over TCP (SXPoTCP) feature of the device on the Cisco's Trusted Security (TrustSec) system. Security Group Tag (SGT) identifying its source, assigned to a packet on ingress to a TrustSec cloud, and used to determine security and other policy to be applied to it along its path through the cloud. SXPoTCP protocol extends the original SGT Exchange Protocol (SXP) protocol to enable a much wider array of deployment scenarios. This MIB uses the term SXP to refer to SXPoTCP. TrustSec secures a network fabric by authenticating and authorizing each device connecting to the network, allowing for the encryption, authentication and replay protection of data traffic on a hop by hop basis. SXP allows the deployment of RBACL, a key component of the TrustSec architecture, in the absence of TrustSec capable hardware.")
ciscoTrustSecSxpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 0))
ciscoTrustSecSxpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 1))
ciscoTrustSecSxpMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 2))
ctsxSxpGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1))
ctsxSxpConnectionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2))
ctsxSxpSgtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3))
ciscoTrustSecSxpMIBNotifsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4))
ciscoTrustSecSxpMIBNotifsOnlyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5))
ctsxSxpEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpEnable.setDescription('This object specifies if the SXP (Security Group Tag Exchange Protocol) functionality is enabled on the device.')
ctsxSxpConfigDefaultPasswordType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 2), CtsPasswordEncryptionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpConfigDefaultPasswordType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConfigDefaultPasswordType.setDescription("This object specifies the type of encryption used to configure ctsxSxpConfigDefaultPassword string. When read, this object will always return 'other'. Value of this object must be set in the same PDU as ctsxSxpConfigDefaultPassword. Value of this object must be specified as 'clearText', 'typeSix' or 'typeSeven' to configure a non zero length password in ctsxSxpConfigDefaultPassword. Value for this object must be 'none' if ctsxSxpConfigDefaultPassword is a zero length string.")
ctsxSxpConfigDefaultPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 3), CtsPassword()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpConfigDefaultPassword.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConfigDefaultPassword.setDescription("This object specifies the default password for SXP connections. The type of encryption used to configure this password is determined by ctsxSxpConfigDefaultPasswordType. When read, this object will always return a zero length string. The value of this object must be set in the same PDU as ctsxSxpConfigDefaultPasswordType. A non zero length password must be specified for this object if the value of ctsxSxpConfigDefaultPasswordType is other than 'none' or 'other'. Value for this object must be a zero length string if the value of ctsxSxpConfigDefaultPasswordType is 'none'. The purpose of this object is to only allow configuration of the default password. The ctsxSxpViewDefaultPassword object is used to display the default password.")
ctsxSxpViewDefaultPasswordType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 4), CtsPasswordEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpViewDefaultPasswordType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpViewDefaultPasswordType.setDescription('This object indicates the type of encryption in use for ctsxSxpViewDefaultPassword.')
ctsxSxpViewDefaultPassword = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 5), CtsPassword()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpViewDefaultPassword.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpViewDefaultPassword.setDescription('This object indicates the default password for SXP connections. The type of encryption used to display this password is determined by the object ctsxSxpViewDefaultPasswordType. The purpose of this object is to only display the password. The ctsxSxpConfigDefaultPassword object is used to configure the password.')
ctsxSxpDefaultSourceAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 6), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpDefaultSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpDefaultSourceAddrType.setDescription('The type of Internet address of the default source address for SXP connections.')
ctsxSxpDefaultSourceAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 7), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpDefaultSourceAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpDefaultSourceAddr.setDescription('The Internet address to be used as default source address for SXP connections. The type of this address is determined by the ctsxSxpDefaultSourceAddrType object. This address will be used as source address for SXP connections that do not have specific source-IP address configured via ctsxSxpConnSourceAddr object.')
ctsxSxpRetryPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 8), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpRetryPeriod.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpRetryPeriod.setDescription('This object specifies the amount of time after which the device will make the retry attempt for the SXP connections that are not setup successfully. A value of zero for this object indicates that the device will never try to establish connections that were not setup successfully.')
ctsxSxpReconPeriod = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpReconPeriod.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpReconPeriod.setDescription('This object specifies the amount of time after which system will initiate removal of SGT mappings for a reconciled connection. A value of zero for this object indicates that SGT mappings for a reconciled connection will never be deleted.')
ctsxSxpBindingChangesLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpBindingChangesLogEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingChangesLogEnable.setDescription("This object specifies if the system will generate system logging messages for SXP binding changes. A value of 'false' will prevent system from generating logging messages for SXP binding changes.")
ctsxSgtMapExpansionLimit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 11), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSgtMapExpansionLimit.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapExpansionLimit.setDescription('This object specifies the maximum number of SGT mapping entries that can be expanded on the system. Value of zero for this object indicates that SGT mapping expansion functionality is disabled.')
ctsxSgtMapExpansionCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSgtMapExpansionCount.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapExpansionCount.setDescription('This object indicates the number of SGT mapping entries currently expanded on the system.')
ctsxSxpAdminNodeId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpAdminNodeId.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpAdminNodeId.setDescription("This object specifies the administrative SXP node ID for this system. Setting this object to a non-zero value will clear the values in ctsxSxpNodeIdInterface and ctsxSxpNodeIdIpAddrType. This object can be set only if ctsxSxpEnable is 'false'.")
ctsxSxpNodeIdInterface = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 14), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpNodeIdInterface.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpNodeIdInterface.setDescription("This object specifies the interface to be used to select SXP node ID. Setting this object to a non-zero value will clear the values in ctsxSxpAdminNodeId and ctsxSxpNodeIdIpAddrType. This object can be set only if ctsxSxpEnable is 'false'.")
ctsxSxpNodeIdIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 15), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpNodeIdIpAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpNodeIdIpAddrType.setDescription('This object specifies the type of Internet address to be used to select the SXP node ID.')
ctsxSxpNodeIdIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 16), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpNodeIdIpAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpNodeIdIpAddr.setDescription("This object specifies the Internet address to be used to select the SXP node ID. The type of this address is determined by ctsxSxpOperNodeIdIpAddrType object. Setting this object to a non-zero length value will clear the values in ctsxSxpAdminNodeId and ctsxSxpNodeIdInterface. This object can be set only if ctsxSxpEnable is 'false'.")
ctsxSxpOperNodeId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpOperNodeId.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpOperNodeId.setDescription('This object indicates the operational SXP node ID of the system.')
ctsxSxpSpeakerMinHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpSpeakerMinHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSpeakerMinHoldTime.setDescription("This object specifies the global minimum hold-time for SXP connections in 'speaker' mode.")
ctsxSxpListenerMinHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpListenerMinHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpListenerMinHoldTime.setDescription("This object specifies the global minimum hold-time for SXP connections in 'listener' mode. Value of this object must be lesser than ctsxSxpListenerMaxHoldTime.")
ctsxSxpListenerMaxHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpListenerMaxHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpListenerMaxHoldTime.setDescription("This object specifies the global maximum hold-time for SXP connections in 'listener' mode. Value of this object must be greater than ctsxSxpListenerMinHoldTime.")
ctsxSxpVersionSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpVersionSupport.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpVersionSupport.setDescription("The highest version of SXP protocol that this device supports. 'unknown' - The SXP protocol version capability for the device is unknown. 'one' - The device supports SXP protocol up to version 1. 'two' - The device supports SXP protocol up to version 2. 'three' - The device supports SXP protocol up to version 3. 'four' - The device supports SXP protocol up to version 4.")
ctsxSxpConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1), )
if mibBuilder.loadTexts: ctsxSxpConnectionTable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnectionTable.setDescription('A list of SXP peers configured on this device.')
ctsxSxpConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnVrfName"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnPeerAddrType"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnPeerAddr"))
if mibBuilder.loadTexts: ctsxSxpConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnectionEntry.setDescription('An entry containing management information of a particular SXP peers.')
ctsxSxpConnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 1), CiscoVrfName())
if mibBuilder.loadTexts: ctsxSxpConnVrfName.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnVrfName.setDescription('The name of the Virtual Routing and Forwarding (VRF) table associated with this SXP connection. A zero length string implies that connection will be setup in the default virtual routing and forwarding domain.')
ctsxSxpConnPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ctsxSxpConnPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnPeerAddrType.setDescription('The type of Internet address of the peer SXP device.')
ctsxSxpConnPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: ctsxSxpConnPeerAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnPeerAddr.setDescription('The Internet address of the SXP peer device. The type of this address is determined by the value of ctsxSxpConnPeerAddrType object.')
ctsxSxpConnSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 4), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnSourceAddrType.setDescription('The type of source Internet address that is configured for this SXP connection.')
ctsxSxpConnSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnSourceAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnSourceAddr.setDescription('The source Internet address configured for this SXP connection. The type of this address is determined by the value of ctsxSxpConnSourceAddrType object. When specified, value of this object takes precedence over the ctsxSxpDefaultSourceAddr object.')
ctsxSxpConnOperSourceAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnOperSourceAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnOperSourceAddrType.setDescription('The type of source Internet address that is in in use for this SXP connection.')
ctsxSxpConnOperSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnOperSourceAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnOperSourceAddr.setDescription('The source Internet address that is in use for this SXP connection. The type of this address is determined by the value of ctsxSxpConnSourceAddrType object.')
ctsxSxpConnPasswordUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("default", 2), ("connectionSpecific", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnPasswordUsed.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnPasswordUsed.setDescription("This object specifies the type of password to be used for this SXP connection. 'none' - No password required for the SXP connection. 'default' - The default password which is specified by the object ctsxSxpViewDefaultPassword, will be used for the SXP connection. 'connectionSpecific' - The password specified by the ctsxSxpConnViewPassword object will be used for the connection.")
ctsxSxpConnConfigPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 9), CtsPasswordEncryptionType().clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnConfigPasswordType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnConfigPasswordType.setDescription("This object specifies the type of encryption used to configure ctsxSxpConnConfigPassword string. When read, this object will always return 'other'. Value for this object may be specified as 'clearText', 'typeSix' or 'typeSeven' if the value of the object ctsxSxpConnPasswordUsed is 'connectionSpecific'. Value for this object may not be specified if the value of ctsxSxpConnPasswordUsed is other than 'connectionSpecific'.")
ctsxSxpConnConfigPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 10), CtsPassword()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnConfigPassword.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnConfigPassword.setDescription("This object is used to specify the password for this connection. The type of encryption used to configure this password is determined by ctsxSxpConnConfigPasswordType. When read, this object will always return a zero length string. A non zero length password must be specified for this object if the value of ctsxSxpConnConfigPasswordType is other than 'none' or 'other'. A value for this object may not be specified if the value of ctsxSxpConnPasswordUsed is other than 'connectionSpecific'. The purpose of this object is to only allow configuration of the password. The ctsxSxpConnViewPassword object is used to display the password.")
ctsxSxpConnViewPasswordType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 11), CtsPasswordEncryptionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnViewPasswordType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnViewPasswordType.setDescription('This object indicates the type of encryption in use for ctsxSxpConnViewPassword.')
ctsxSxpConnViewPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 12), CtsPassword()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnViewPassword.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnViewPassword.setDescription('This object indicates the password associated with this connection. The type of encryption used to display this password is determined by the object ctsxSxpConnViewPasswordType. The purpose of this object is to only display the password. The ctsxSxpConnConfigPassword object is used to configure the password.')
ctsxSxpConnModeLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("peer", 2))).clone('local')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnModeLocation.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnModeLocation.setDescription("This object specifies if ctsxSxpConnMode is applicable for local or the peer device. A value of 'local' indicates that ctsxSxpConnMode applies to the local device in this SXP connection. A value of 'peer' indicates that ctsxSxpConnMode applies to the peer device in this SXP connection.")
ctsxSxpConnMode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("speaker", 1), ("listener", 2))).clone('speaker')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnMode.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnMode.setDescription("This object specifies the device mode of this SXP connection. A value of 'speaker' indicates that device will acts as the speaker in this SXP connection. A value of 'listener' indicates that device will acts as the listener in this SXP connection.")
ctsxSxpConnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnInstance.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnInstance.setDescription('This object indicates the instance number associated with this SXP connection. The instance number is used to identify stale SGT mappings which need to be removed from the system.')
ctsxSxpConnStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 16), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnStatusLastChange.setDescription('The amount of time elapsed since change in status of this SXP connection.')
ctsxSxpConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("on", 3), ("pendingOn", 4), ("deleteHoldDown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnStatus.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnStatus.setDescription("This object indicates the status of this SXP connection. 'other' - Any other state not covered by below enumerations. 'off' - The SXP connection has been disconnected. SGT mappings are no longer learnt through SXP connection in this state. SGT mappings already learnt through this connection will be deleted. 'on' - The SXP connection has been successfully established. SGT mappings are learnt through this SXP connection. 'pendingOn' - A request to establish SXP connection has been sent to the peer and is pending. 'deleteHoldDown' - The SXP connection is not operational and delete hold-down timer has been started. If the SXP connection does not recover before the expiration of the hold-down timer, the SGT mappings learnt on this connection will be deleted. If the SXP connection recovers before the expiration of the hold-down timer, the SGT mappings learnt on this connection will not be deleted.")
ctsxSxpVrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpVrfId.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpVrfId.setDescription('The numerical identifier associated with ctsxSxpConnVrfName.')
ctsxSxpConnStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 19), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnStorageType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnStorageType.setDescription('The storage type of this conceptual row.')
ctsxSxpConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnRowStatus.setDescription('The status of this conceptual row. Once a row becomes active, only the value in ctsxSxpConnModeLocation, ctsxSxpConnMode ctsxSxpConnSpeakerMinHoldTime, ctsxSxpConnListenerMinHoldTime, and ctsxSxpConnListenerMaxHoldTime within each a row can be modified.')
ctsxSxpConnVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("one", 2), ("two", 3), ("three", 4), ("four", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnVersion.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnVersion.setDescription("The version of SXP protocol in use for this connection. 'unknown' - Version of SXP protocol for this connection is unknown. 'one' - Connection is using version 1 of the SXP protocol. 'two' - Connection is using version 2 of the SXP protocol. 'three' - Connection is using version 3 of the SXP protocol. 'four' - Connection is using version 4 of the SXP protocol.")
ctsxSxpConnSpeakerMinHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65534), ValueRangeConstraint(65535, 65535), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnSpeakerMinHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnSpeakerMinHoldTime.setDescription("This object specifies the minimum hold-time for this SXP connection when the device is acting as 'speaker'. Setting the object to zero indicates that the global value ctsxSxpSpeakerMinHoldTime will be used for the connection. Setting the object to 65535 indicates that the hold-time functionality has been disabled for the connection. Value of this object must be 65535 if the corresponding instance value of ctsxSxpConnListenerMinHoldTime is 65535. Value of this object should be ignored and can not be set if the corresponding instance values of ctsxSxpConnModeLocation is 'local' and ctsSxpConnMode is 'listener' or ctsxSxpConnModeLocation is 'peer' and ctsSxpConnMode is 'speaker'.")
ctsxSxpConnListenerMinHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65534), ValueRangeConstraint(65535, 65535), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnListenerMinHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnListenerMinHoldTime.setDescription("This object specifies the minimum hold-time for this SXP connection when the device is acting as 'listener'. Value of this object must be lesser than ctsxSxpConnListenerMaxHoldTime. Setting the object to zero indicates that the global value ctsxSxpListenerMinHoldTime will be used for the connection. Value of this object must be zero if the value of corresponding instance value of ctsxSxpConnListenerMaxHoldTime is zero. Setting the object to 65535 indicates that hold-time functionality has been disabled for the connection. Value of this object must be 65535 if the corresponding instance value of ctsxSxpConnListenerMaxHoldTime is 65535. Value of this object should be ignored and can not be set if the corresponding instance value of ctsxSxpConnModeLocation is 'local' and ctsSxpConnMode is 'speaker' or ctsxSxpConnModeLocation is 'peer' and ctsSxpConnMode is 'listener'.")
ctsxSxpConnListenerMaxHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 24), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65534), ValueRangeConstraint(65535, 65535), ))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctsxSxpConnListenerMaxHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnListenerMaxHoldTime.setDescription("This object specifies the maximum hold-time for this SXP connection when the device is acting as 'listener'. Value of this object must be greater than ctsxSxpConnListenerMinHoldTime. Setting the object to zero indicates that the global value ctsxSxpListenerMaxHoldTime will be used for the connection. Value of this object must be zero if the corresponding instance value of ctsxSxpConnListenerMinHoldTime is zero. Setting the object to 65535 indicates that hold-time functionality has been disabled for the connection. Value of this object must be 65535 if the corresponding instance value ctsxSxpConnListenerMinHoldTime is 65535. Value of this object should be ignored and can not be set if the corresponding instance value of ctsxSxpConnModeLocation is 'local' and ctsSxpConnMode is 'speaker' or ctsxSxpConnModeLocation is 'peer' and ctsSxpConnMode is 'listener'.")
ctsxSxpConnHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 25), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnHoldTime.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnHoldTime.setDescription('This object indicates the hold-time in use for this SXP connection. A value of 0 indicates that hold-time functionality has been disabled for this connection.')
ctsxSxpConnCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 2, 1, 1, 26), Bits().clone(namedValues=NamedValues(("ipv4", 0), ("ipv6", 1), ("subnet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpConnCapability.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnCapability.setDescription('This object indicates the capability of SXP connection.')
ctsxIpSgtMappingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1), )
if mibBuilder.loadTexts: ctsxIpSgtMappingTable.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingTable.setDescription("A list of SGT mappings learnt by this device. If the value of ctsxSxpConnVersion is 'three' or above, this table populates entries for all mapping addresses without prefix. Addresses with prefix are not populated in this table. ctsxSxpSgtMapTable should be used in such case.")
ctsxIpSgtMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingVrfId"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingAddrType"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingAddr"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingPeerAddrType"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingPeerAddr"))
if mibBuilder.loadTexts: ctsxIpSgtMappingEntry.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingEntry.setDescription('An entry containing management information about SGT mapping learnt by this device. An entry will be created for each SGT mappings the device learns via SXP. An entry will be deleted if SXP connection from where the SGT mappings was learnt is disconnected.')
ctsxIpSgtMappingVrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ctsxIpSgtMappingVrfId.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingVrfId.setDescription('The VRF number identifying the VRF where this SGT mapping was learnt.')
ctsxIpSgtMappingAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ctsxIpSgtMappingAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingAddrType.setDescription('The type of IP address in this SGT mapping.')
ctsxIpSgtMappingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: ctsxIpSgtMappingAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingAddr.setDescription('The IP address in this SGT mapping. The type of this address is determined by the value of ctsxIpSgtMappingAddrType object.')
ctsxIpSgtMappingPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 4), InetAddressType())
if mibBuilder.loadTexts: ctsxIpSgtMappingPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingPeerAddrType.setDescription('The type of IP address of the SXP peer device from where this SGT mapping was learnt.')
ctsxIpSgtMappingPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 5), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: ctsxIpSgtMappingPeerAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingPeerAddr.setDescription('The IP address of the peer SXP device from where this SGT mapping was learnt. The type of this address is determined by the value of ctsxIpSgtMappingPeerAddrType object.')
ctsxIpSgtMappingSgt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 6), CtsSecurityGroupTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxIpSgtMappingSgt.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingSgt.setDescription('The Security Group Tag (SGT) in this SGT mapping. ctsxIpSgtMappingAddr represents the IP address associated with this SGT.')
ctsxIpSgtMappingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxIpSgtMappingInstance.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingInstance.setDescription('This object indicates the instance number of the SXP connection from where this SGT mapping was learnt. The instance number is used to determine if an SGT mapping entry is stale and needs to be removed from the system.')
ctsxIpSgtMappingVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 8), CiscoVrfName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxIpSgtMappingVrfName.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingVrfName.setDescription('The name of the VRF identified by ctsxIpSgtMappingVrfId.')
ctsxIpSgtMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxIpSgtMappingStatus.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingStatus.setDescription("This object indicates the status of this SGT mapping. 'other' - Any other state no covered by below enumerations. 'active' - The SGT mapping is currently active.")
ctsxSxpSgtMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2), )
if mibBuilder.loadTexts: ctsxSxpSgtMapTable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapTable.setDescription('A list of SGT mappings learnt by this device.')
ctsxSxpSgtMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1), ).setIndexNames((0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapVrfId"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapAddrType"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapAddr"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapAddrPrefixLength"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapPeerAddrType"), (0, "CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapPeerAddr"))
if mibBuilder.loadTexts: ctsxSxpSgtMapEntry.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapEntry.setDescription('An entry containing management information about SGT mapping learnt by this device. An entry will be created for each of the SGT mappings the device learns via SXP. An entry will be deleted if SXP connection from where the SGT mappings was learnt is disconnected.')
ctsxSxpSgtMapVrfId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ctsxSxpSgtMapVrfId.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapVrfId.setDescription('The VRF number identifying the VRF where this SGT mapping was learnt.')
ctsxSxpSgtMapAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ctsxSxpSgtMapAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapAddrType.setDescription('The type of address in this SGT mapping.')
ctsxSxpSgtMapAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: ctsxSxpSgtMapAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapAddr.setDescription('The address in this SGT mapping. The type of this address is determined by the value of ctsxSxpSgtMapAddrType object.')
ctsxSxpSgtMapAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 4), InetAddressPrefixLength())
if mibBuilder.loadTexts: ctsxSxpSgtMapAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapAddrPrefixLength.setDescription('This object indicates the length of the prefix associated with ctsxSxpSgtMapAddr. This object is always interpreted with the value of ctsxSxpSgtMapAddrType object.')
ctsxSxpSgtMapPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 5), InetAddressType())
if mibBuilder.loadTexts: ctsxSxpSgtMapPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapPeerAddrType.setDescription('The type of address of the SXP peer device from where this SGT mapping was learnt.')
ctsxSxpSgtMapPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 6), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 48)))
if mibBuilder.loadTexts: ctsxSxpSgtMapPeerAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapPeerAddr.setDescription('The address of the peer SXP device from where this SGT mapping was learnt. The type of this address is determined by the value of ctsxSxpSgtMapPeerAddrType object.')
ctsxSxpSgtMapSgt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 7), CtsSecurityGroupTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpSgtMapSgt.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapSgt.setDescription('The Security Group Tag (SGT) in this SGT mapping. ctsxSxpSgtMapAddr represents the address associated with this SGT.')
ctsxSxpSgtMapInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpSgtMapInstance.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapInstance.setDescription('This object indicates the instance number of the SXP connection from where this SGT binding was learnt. The instance number is used to determine if an SGT mapping entry is stale and needs to be removed from the system.')
ctsxSxpSgtMapVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 9), CiscoVrfName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpSgtMapVrfName.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapVrfName.setDescription('The name of the VRF identified by ctsxEnahncedSgtMapVrfId.')
ctsxSxpSgtMapPeerSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpSgtMapPeerSeq.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapPeerSeq.setDescription('The Peer Sequence associated with this SGT mapping entry. It is a sequence of node IDs though which SGT mapping has traversed. Each node ID is 4 octets long. The octets 1 to 4 represent the first node ID in the sequence, octets 5 to 8 represent the second node ID in the sequence and so on.')
ctsxSxpSgtMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctsxSxpSgtMapStatus.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapStatus.setDescription("This object indicates the status of this SGT mapping. 'other' - Any other state no covered by below enumerations. 'active' - The SGT mapping is currently active.")
ctsxSxpConnSourceAddrErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpConnSourceAddrErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnSourceAddrErrNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpConnSourceAddrErrNotif. A value of 'false' will prevent ctsxSxpConnSourceAddrErrNotif notifications from being generated by this system.")
ctsxSxpMsgParseErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpMsgParseErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpMsgParseErrNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpMsgParseErrNotif. A value of 'false' will prevent ctsxSxpMsgParseErrNotif notifications from being generated by this system.")
ctsxSxpConnConfigErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpConnConfigErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnConfigErrNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpConnConfigErrNotif. A value of 'false' will prevent ctsxSxpConnConfigErrNotif notifications from being generated by this system.")
ctsxSxpBindingErrNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpBindingErrNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingErrNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpBindingErrNotif. A value of 'false' will prevent ctsxSxpBindingErrNotif notifications from being generated by this system.")
ctsxSxpConnUpNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpConnUpNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnUpNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpConnUpNotif. A value of 'false' will prevent ctsxSxpConnUpNotif notifications from being generated by this system.")
ctsxSxpConnDownNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpConnDownNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnDownNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpConnDownNotif. A value of 'false' will prevent ctsxSxpConnDownNotif notifications from being generated by this system.")
ctsxSxpExpansionFailNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpExpansionFailNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpExpansionFailNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpExpansionFailNotif. A value of 'false' will prevent ctsxSxpExpansionFailNotif notifications from being generated by this system.")
ctsxSxpOperNodeIdChangeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpOperNodeIdChangeNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpOperNodeIdChangeNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpOperNodeIdChangeNotif. A value of 'false' will prevent ctsxSxpOperNodeIdChangeNotif notifications from being generated by this system.")
ctsxSxpBindingConflictNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 4, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctsxSxpBindingConflictNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingConflictNotifEnable.setDescription("This object specifies whether the system generates the ctsxSxpBindingConflictNotif. A value of 'false' will prevent ctsxSxpBindingConflictNotif notifications from being generated by this system.")
ctsxSgtMapExpansionVrf = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 1), CiscoVrfName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapExpansionVrf.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapExpansionVrf.setDescription('This object indicates the VRF name for which host SGT bindings cannot be expanded.')
ctsxSgtMapExpansionAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 2), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapExpansionAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapExpansionAddrType.setDescription('This object indicates the type of subnet address for which host SGT binding cannot be expanded.')
ctsxSgtMapExpansionAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapExpansionAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapExpansionAddr.setDescription('This object indicates the subnet address for which host SGT binding cannot be expanded. The type of this address is determined by the value of ctsxSgtMapExpansionAddrType object.')
ctsxSgtMapExpansionAddrPrefixLength = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 4), InetAddressPrefixLength()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapExpansionAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapExpansionAddrPrefixLength.setDescription('This object indicates the length of the prefix associated with ctsxSgtMapExpansionAddr. This object is always interpreted with the value of ctsxSgtMapExpansionAddrType object.')
ctsxSxpNotifErrMsg = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 5), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSxpNotifErrMsg.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpNotifErrMsg.setDescription('This object indicates error message associated with notifications.')
ctsxSgtMapConflictingVrfName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 6), CiscoVrfName()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapConflictingVrfName.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapConflictingVrfName.setDescription('This object indicates the VRF name of the SXP connection on which conflicting SGT mapping was received.')
ctsxSgtMapConflictingAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 7), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapConflictingAddrType.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapConflictingAddrType.setDescription('This object indicates the type of Internet address in the conflicting SGT mapping.')
ctsxSgtMapConflictingAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 8), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapConflictingAddr.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapConflictingAddr.setDescription('This object indicates the Internet address in the conflicting SGT mapping. The type of this address is determined by the value of ctsxSgtMapConflictingAddrType object.')
ctsxSgtMapConflictingOldSgt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 9), CtsSecurityGroupTag()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapConflictingOldSgt.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapConflictingOldSgt.setDescription('The existing value of Security Group Tag (SGT) in SGT mapping for which conflict has occurred.')
ctsxSgtMapConflictingNewSgt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 10), CtsSecurityGroupTag()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSgtMapConflictingNewSgt.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapConflictingNewSgt.setDescription('The new value of Security Group Tag (SGT) in SGT mapping that conflicts with the existing SGT.')
ctsxSxpOldOperNodeId = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 720, 1, 5, 11), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ctsxSxpOldOperNodeId.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpOldOperNodeId.setDescription('The SXP node ID that was in use by this SXP node and now replaced by a new SXP node ID represented by ctsxSxpOperNodeId.')
ctsxSxpConnSourceAddrErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 1)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddr"))
if mibBuilder.loadTexts: ctsxSxpConnSourceAddrErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnSourceAddrErrNotif.setDescription('A ctsxSxpConnSourceAddrErrNotif is generated if the system is not able to establish SXP connection using ctsxSxpConnOperSourceAddr.')
ctsxSxpMsgParseErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 2)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNotifErrMsg"))
if mibBuilder.loadTexts: ctsxSxpMsgParseErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpMsgParseErrNotif.setDescription('A ctsxSxpMsgParseErrNotif is generated if the system is not able to parse a received SXP message.')
ctsxSxpConnConfigErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 3)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNotifErrMsg"))
if mibBuilder.loadTexts: ctsxSxpConnConfigErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnConfigErrNotif.setDescription('A ctsxSxpConnConfigErrNotif is generated if the system detects a configuration error for an SXP connection.')
ctsxSxpBindingErrNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 4)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapSgt"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapInstance"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapVrfName"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNotifErrMsg"))
if mibBuilder.loadTexts: ctsxSxpBindingErrNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingErrNotif.setDescription('A ctsxSxpBindingErrNotif is generated if the address in the SGT mapping is not found in routing and forwarding table of the system.')
ctsxSxpConnUpNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 5)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnInstance"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnStatus"))
if mibBuilder.loadTexts: ctsxSxpConnUpNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnUpNotif.setDescription("A ctsxSxpConnUpNotif is generated if the ctsxSxpConnStatus for an SXP connection transitioned into 'on' state.")
ctsxSxpConnDownNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 6)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnInstance"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnStatus"))
if mibBuilder.loadTexts: ctsxSxpConnDownNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnDownNotif.setDescription("A ctsxSxpConnDownNotif is generated if ctsxSxpConnStatus for an SXP connection left the 'on' state and transitioned into some other state.")
ctsxSxpExpansionFailNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 7)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionLimit"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionCount"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionVrf"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionAddrPrefixLength"))
if mibBuilder.loadTexts: ctsxSxpExpansionFailNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpExpansionFailNotif.setDescription('A ctsxSxpExpansionFailNotif is generated if the number of expanded SGT maps reaches the configured limit and the received SGT mapping can not be expanded.')
ctsxSxpOperNodeIdChangeNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 8)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpOldOperNodeId"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpOperNodeId"))
if mibBuilder.loadTexts: ctsxSxpOperNodeIdChangeNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpOperNodeIdChangeNotif.setDescription('A ctsxSxpOperNodeIdChangeNotif is generated if the value of ctsxSxpOperNodeId changes.')
ctsxSxpBindingConflictNotif = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 720, 0, 9)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingVrfName"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingOldSgt"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingNewSgt"))
if mibBuilder.loadTexts: ctsxSxpBindingConflictNotif.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingConflictNotif.setDescription('A ctsxSxpBindingConflictNotif is generated if the device receives conflicting SGT mapping information.')
ciscoTrustSecSxpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 1))
ciscoTrustSecSxpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2))
ciscoTrustSecSxpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 1, 1)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpGlobalGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnectionGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSxpMIBCompliance = ciscoTrustSecSxpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecSxpMIBCompliance.setDescription('The compliance statement for the CISCO-TRUSTSEC-SXP-MIB.')
ciscoTrustSecSxpMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 1, 2)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpGlobalGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnectionGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpVersionGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSxpMIBCompliance2 = ciscoTrustSecSxpMIBCompliance2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoTrustSecSxpMIBCompliance2.setDescription('The compliance statement for the CISCO-TRUSTSEC-SXP-MIB.')
ciscoTrustSecSxpMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 1, 3)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpGlobalGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnectionGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpVersionGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingLogGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingNotifInfoGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNodeIdInfoGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxNotifsControlGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxNotifsGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNotifErrMsgGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpGlobalHoldTimeGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnHoldTimeGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnCapbilityGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpVersionSupportGroup"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapPeerSeqGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoTrustSecSxpMIBCompliance3 = ciscoTrustSecSxpMIBCompliance3.setStatus('current')
if mibBuilder.loadTexts: ciscoTrustSecSxpMIBCompliance3.setDescription('The compliance statement for the CISCO-TRUSTSEC-SXP-MIB.')
ctsxSxpGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 1)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConfigDefaultPasswordType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConfigDefaultPassword"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpViewDefaultPasswordType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpViewDefaultPassword"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpDefaultSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpDefaultSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpRetryPeriod"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpReconPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpGlobalGroup = ctsxSxpGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpGlobalGroup.setDescription('A collection of objects providing management functionality of global SXP configuration.')
ctsxSxpConnectionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 2)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnOperSourceAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnPasswordUsed"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnConfigPasswordType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnConfigPassword"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnViewPasswordType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnViewPassword"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnModeLocation"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnMode"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnInstance"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnStatusLastChange"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnStatus"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpVrfId"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnStorageType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpConnectionGroup = ctsxSxpConnectionGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnectionGroup.setDescription('A collection of objects providing management functionality of SXP connections.')
ctsxIpSgtMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 3)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingSgt"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingInstance"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingVrfName"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxIpSgtMappingStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxIpSgtMappingGroup = ctsxIpSgtMappingGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxIpSgtMappingGroup.setDescription('A collection of objects providing management functionality of SGT mapping for SXP.')
ctsxSxpVersionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 4)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpVersionGroup = ctsxSxpVersionGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpVersionGroup.setDescription('A collection of object(s) providing version information for SXP.')
ctsxSxpBindingLogGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 5)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingChangesLogEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpBindingLogGroup = ctsxSxpBindingLogGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingLogGroup.setDescription('A collection of object(s) providing logging control for SXP binding.')
ctsxSxpBindingNotifInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 6)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionVrf"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionAddrPrefixLength"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingVrfName"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingOldSgt"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapConflictingNewSgt"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpOldOperNodeId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpBindingNotifInfoGroup = ctsxSxpBindingNotifInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpBindingNotifInfoGroup.setDescription('A collection of object(s) providing variable binding information for SXP notifications.')
ctsxSxpNotifErrMsgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 7)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNotifErrMsg"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpNotifErrMsgGroup = ctsxSxpNotifErrMsgGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpNotifErrMsgGroup.setDescription('A collection of object(s) providing detailed error messages for SXP notifications.')
ctsxSxpNodeIdInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 8)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpAdminNodeId"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNodeIdInterface"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNodeIdIpAddrType"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpNodeIdIpAddr"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpOperNodeId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpNodeIdInfoGroup = ctsxSxpNodeIdInfoGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpNodeIdInfoGroup.setDescription('A collection of object(s) providing SXP node ID information for the system.')
ctsxSxpSgtMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 9)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapSgt"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapInstance"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapVrfName"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapStatus"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionLimit"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSgtMapExpansionCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpSgtMapGroup = ctsxSxpSgtMapGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpSgtMapGroup.setDescription('A collection of objects providing management functionality of SGT mapping and expansion for SXP.')
ctsxNotifsControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 10)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnSourceAddrErrNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpMsgParseErrNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnConfigErrNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingErrNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnUpNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnDownNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpExpansionFailNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpOperNodeIdChangeNotifEnable"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingConflictNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxNotifsControlGroup = ctsxNotifsControlGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxNotifsControlGroup.setDescription('A collection of objects providing notification control for SXP.')
ctsxNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 11)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnSourceAddrErrNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpMsgParseErrNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnConfigErrNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingErrNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnUpNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnDownNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpExpansionFailNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpOperNodeIdChangeNotif"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpBindingConflictNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxNotifsGroup = ctsxNotifsGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxNotifsGroup.setDescription('A collection of notifications for SXP.')
ctsxSxpGlobalHoldTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 12)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSpeakerMinHoldTime"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpListenerMinHoldTime"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpListenerMaxHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpGlobalHoldTimeGroup = ctsxSxpGlobalHoldTimeGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpGlobalHoldTimeGroup.setDescription('A collection of objects providing global hold-time information for SXP connections.')
ctsxSxpConnHoldTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 13)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnSpeakerMinHoldTime"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnListenerMinHoldTime"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnListenerMaxHoldTime"), ("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnHoldTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpConnHoldTimeGroup = ctsxSxpConnHoldTimeGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnHoldTimeGroup.setDescription('A collection of objects providing hold-time information for each SXP connection.')
ctsxSxpConnCapbilityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 14)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpConnCapability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpConnCapbilityGroup = ctsxSxpConnCapbilityGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpConnCapbilityGroup.setDescription('A collection of object(s) providing capability information for each SXP connection.')
ctsxSxpVersionSupportGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 15)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpVersionSupport"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSxpVersionSupportGroup = ctsxSxpVersionSupportGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSxpVersionSupportGroup.setDescription('A collection of object(s) providing SXP version capability information.')
ctsxSgtMapPeerSeqGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 720, 2, 2, 16)).setObjects(("CISCO-TRUSTSEC-SXP-MIB", "ctsxSxpSgtMapPeerSeq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctsxSgtMapPeerSeqGroup = ctsxSgtMapPeerSeqGroup.setStatus('current')
if mibBuilder.loadTexts: ctsxSgtMapPeerSeqGroup.setDescription('A collection of object(s) providing Peer Sequence information.')
mibBuilder.exportSymbols("CISCO-TRUSTSEC-SXP-MIB", ctsxSxpConnUpNotifEnable=ctsxSxpConnUpNotifEnable, ctsxSxpNotifErrMsgGroup=ctsxSxpNotifErrMsgGroup, ctsxSxpConnHoldTime=ctsxSxpConnHoldTime, ciscoTrustSecSxpMIBNotifsOnlyInfo=ciscoTrustSecSxpMIBNotifsOnlyInfo, ctsxSxpConnOperSourceAddr=ctsxSxpConnOperSourceAddr, ctsxSgtMapConflictingNewSgt=ctsxSgtMapConflictingNewSgt, ctsxSxpDefaultSourceAddr=ctsxSxpDefaultSourceAddr, ctsxSxpConnListenerMaxHoldTime=ctsxSxpConnListenerMaxHoldTime, ctsxSxpConnectionObjects=ctsxSxpConnectionObjects, ctsxSxpEnable=ctsxSxpEnable, ctsxSxpBindingConflictNotif=ctsxSxpBindingConflictNotif, ctsxSxpOperNodeIdChangeNotif=ctsxSxpOperNodeIdChangeNotif, ctsxSxpConnRowStatus=ctsxSxpConnRowStatus, ctsxIpSgtMappingVrfId=ctsxIpSgtMappingVrfId, ctsxSxpConnectionTable=ctsxSxpConnectionTable, ctsxIpSgtMappingVrfName=ctsxIpSgtMappingVrfName, ctsxSxpNotifErrMsg=ctsxSxpNotifErrMsg, ctsxSxpNodeIdIpAddr=ctsxSxpNodeIdIpAddr, ctsxSxpSgtMapStatus=ctsxSxpSgtMapStatus, ciscoTrustSecSxpMIB=ciscoTrustSecSxpMIB, ctsxSxpBindingErrNotifEnable=ctsxSxpBindingErrNotifEnable, ctsxIpSgtMappingPeerAddr=ctsxIpSgtMappingPeerAddr, ctsxSxpConnHoldTimeGroup=ctsxSxpConnHoldTimeGroup, ctsxSgtMapConflictingOldSgt=ctsxSgtMapConflictingOldSgt, ctsxSxpSgtMapVrfName=ctsxSxpSgtMapVrfName, ciscoTrustSecSxpMIBGroups=ciscoTrustSecSxpMIBGroups, ctsxSxpNodeIdInterface=ctsxSxpNodeIdInterface, ctsxSxpSgtObjects=ctsxSxpSgtObjects, ctsxNotifsControlGroup=ctsxNotifsControlGroup, ctsxSxpBindingChangesLogEnable=ctsxSxpBindingChangesLogEnable, ctsxSgtMapConflictingAddrType=ctsxSgtMapConflictingAddrType, ctsxSxpConnOperSourceAddrType=ctsxSxpConnOperSourceAddrType, ctsxIpSgtMappingPeerAddrType=ctsxIpSgtMappingPeerAddrType, ctsxIpSgtMappingInstance=ctsxIpSgtMappingInstance, ctsxSxpSgtMapInstance=ctsxSxpSgtMapInstance, ctsxSxpConnDownNotifEnable=ctsxSxpConnDownNotifEnable, ctsxSgtMapExpansionVrf=ctsxSgtMapExpansionVrf, ctsxIpSgtMappingGroup=ctsxIpSgtMappingGroup, ctsxSxpConnInstance=ctsxSxpConnInstance, ctsxSxpBindingLogGroup=ctsxSxpBindingLogGroup, ctsxSxpConnDownNotif=ctsxSxpConnDownNotif, ctsxSxpExpansionFailNotifEnable=ctsxSxpExpansionFailNotifEnable, ctsxSxpGlobalHoldTimeGroup=ctsxSxpGlobalHoldTimeGroup, ciscoTrustSecSxpMIBNotifs=ciscoTrustSecSxpMIBNotifs, ctsxSxpConnListenerMinHoldTime=ctsxSxpConnListenerMinHoldTime, ctsxSxpRetryPeriod=ctsxSxpRetryPeriod, ctsxSxpConnUpNotif=ctsxSxpConnUpNotif, ctsxSxpVersionSupport=ctsxSxpVersionSupport, ctsxNotifsGroup=ctsxNotifsGroup, ctsxSxpConnConfigPasswordType=ctsxSxpConnConfigPasswordType, ciscoTrustSecSxpMIBNotifsControl=ciscoTrustSecSxpMIBNotifsControl, ctsxSxpSgtMapPeerAddrType=ctsxSxpSgtMapPeerAddrType, ctsxSxpSgtMapGroup=ctsxSxpSgtMapGroup, ctsxIpSgtMappingTable=ctsxIpSgtMappingTable, ctsxSxpConnSourceAddr=ctsxSxpConnSourceAddr, ctsxSxpSgtMapEntry=ctsxSxpSgtMapEntry, ctsxSxpOperNodeId=ctsxSxpOperNodeId, ctsxSxpSgtMapPeerSeq=ctsxSxpSgtMapPeerSeq, ctsxSxpConnVersion=ctsxSxpConnVersion, ctsxSxpVersionSupportGroup=ctsxSxpVersionSupportGroup, ctsxIpSgtMappingSgt=ctsxIpSgtMappingSgt, ctsxSxpConnPeerAddr=ctsxSxpConnPeerAddr, ciscoTrustSecSxpMIBConform=ciscoTrustSecSxpMIBConform, ctsxSxpConnStatusLastChange=ctsxSxpConnStatusLastChange, ctsxSxpConnCapability=ctsxSxpConnCapability, ctsxSxpConnSourceAddrErrNotif=ctsxSxpConnSourceAddrErrNotif, ctsxSxpConnConfigPassword=ctsxSxpConnConfigPassword, ctsxSxpSgtMapSgt=ctsxSxpSgtMapSgt, ctsxSxpConnCapbilityGroup=ctsxSxpConnCapbilityGroup, ctsxIpSgtMappingStatus=ctsxIpSgtMappingStatus, ctsxSxpMsgParseErrNotifEnable=ctsxSxpMsgParseErrNotifEnable, ctsxSgtMapExpansionLimit=ctsxSgtMapExpansionLimit, ctsxSxpSgtMapTable=ctsxSxpSgtMapTable, ctsxSgtMapConflictingAddr=ctsxSgtMapConflictingAddr, ctsxSxpGlobalGroup=ctsxSxpGlobalGroup, ctsxSxpConnSourceAddrErrNotifEnable=ctsxSxpConnSourceAddrErrNotifEnable, ctsxSxpConnectionEntry=ctsxSxpConnectionEntry, ctsxSgtMapExpansionAddr=ctsxSgtMapExpansionAddr, ciscoTrustSecSxpMIBCompliance2=ciscoTrustSecSxpMIBCompliance2, ctsxSxpReconPeriod=ctsxSxpReconPeriod, ciscoTrustSecSxpMIBCompliance3=ciscoTrustSecSxpMIBCompliance3, ctsxSxpConnSourceAddrType=ctsxSxpConnSourceAddrType, ciscoTrustSecSxpMIBCompliances=ciscoTrustSecSxpMIBCompliances, PYSNMP_MODULE_ID=ciscoTrustSecSxpMIB, ctsxSxpConnStorageType=ctsxSxpConnStorageType, ctsxSxpDefaultSourceAddrType=ctsxSxpDefaultSourceAddrType, ctsxSxpConfigDefaultPassword=ctsxSxpConfigDefaultPassword, ctsxSxpConnModeLocation=ctsxSxpConnModeLocation, ctsxSxpConnSpeakerMinHoldTime=ctsxSxpConnSpeakerMinHoldTime, ctsxSxpViewDefaultPassword=ctsxSxpViewDefaultPassword, ctsxSxpConnPasswordUsed=ctsxSxpConnPasswordUsed, ctsxIpSgtMappingAddrType=ctsxIpSgtMappingAddrType, ciscoTrustSecSxpMIBCompliance=ciscoTrustSecSxpMIBCompliance, ctsxSxpBindingConflictNotifEnable=ctsxSxpBindingConflictNotifEnable, ctsxSgtMapExpansionAddrType=ctsxSgtMapExpansionAddrType, ctsxSxpSgtMapAddr=ctsxSxpSgtMapAddr, ctsxSxpBindingNotifInfoGroup=ctsxSxpBindingNotifInfoGroup, ctsxSxpNodeIdIpAddrType=ctsxSxpNodeIdIpAddrType, ctsxSxpBindingErrNotif=ctsxSxpBindingErrNotif, ctsxIpSgtMappingAddr=ctsxIpSgtMappingAddr, ctsxIpSgtMappingEntry=ctsxIpSgtMappingEntry, ctsxSxpSgtMapAddrPrefixLength=ctsxSxpSgtMapAddrPrefixLength, ctsxSxpConnMode=ctsxSxpConnMode, ctsxSgtMapExpansionAddrPrefixLength=ctsxSgtMapExpansionAddrPrefixLength, ctsxSxpConfigDefaultPasswordType=ctsxSxpConfigDefaultPasswordType, ctsxSxpMsgParseErrNotif=ctsxSxpMsgParseErrNotif, ctsxSxpConnectionGroup=ctsxSxpConnectionGroup, ctsxSxpExpansionFailNotif=ctsxSxpExpansionFailNotif, ctsxSxpOldOperNodeId=ctsxSxpOldOperNodeId, ctsxSxpConnViewPassword=ctsxSxpConnViewPassword, ctsxSxpNodeIdInfoGroup=ctsxSxpNodeIdInfoGroup, ctsxSxpViewDefaultPasswordType=ctsxSxpViewDefaultPasswordType, ctsxSxpConnViewPasswordType=ctsxSxpConnViewPasswordType, ctsxSxpVersionGroup=ctsxSxpVersionGroup, ctsxSxpConnConfigErrNotifEnable=ctsxSxpConnConfigErrNotifEnable, ctsxSxpListenerMinHoldTime=ctsxSxpListenerMinHoldTime, ctsxSxpConnConfigErrNotif=ctsxSxpConnConfigErrNotif, ctsxSxpSgtMapPeerAddr=ctsxSxpSgtMapPeerAddr, ciscoTrustSecSxpMIBObjects=ciscoTrustSecSxpMIBObjects, ctsxSxpOperNodeIdChangeNotifEnable=ctsxSxpOperNodeIdChangeNotifEnable, ctsxSgtMapExpansionCount=ctsxSgtMapExpansionCount, ctsxSxpConnStatus=ctsxSxpConnStatus, ctsxSxpSgtMapAddrType=ctsxSxpSgtMapAddrType, ctsxSgtMapPeerSeqGroup=ctsxSgtMapPeerSeqGroup, ctsxSxpAdminNodeId=ctsxSxpAdminNodeId, ctsxSxpGlobalObjects=ctsxSxpGlobalObjects, ctsxSxpListenerMaxHoldTime=ctsxSxpListenerMaxHoldTime, ctsxSxpConnVrfName=ctsxSxpConnVrfName, ctsxSxpSpeakerMinHoldTime=ctsxSxpSpeakerMinHoldTime, ctsxSxpSgtMapVrfId=ctsxSxpSgtMapVrfId, ctsxSxpVrfId=ctsxSxpVrfId, ctsxSgtMapConflictingVrfName=ctsxSgtMapConflictingVrfName, ctsxSxpConnPeerAddrType=ctsxSxpConnPeerAddrType)
