#
# PySNMP MIB module CLAB-GW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CLAB-GW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
clabCommonMibs, = mibBuilder.importSymbols("CLAB-DEF-MIB", "clabCommonMibs")
InetAddressIPv6, InetAddressPrefixLength, InetAddressIPv4 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv6", "InetAddressPrefixLength", "InetAddressIPv4")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Bits, MibIdentifier, Unsigned32, iso, TimeTicks, Counter64, Gauge32, Counter32, Integer32, ModuleIdentity, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "Unsigned32", "iso", "TimeTicks", "Counter64", "Gauge32", "Counter32", "Integer32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, RowStatus, TruthValue, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DateAndTime", "DisplayString")
clabGWMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4491, 4, 6))
clabGWMib.setRevisions(('2016-08-04 00:00', '2016-02-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: clabGWMib.setRevisionsDescriptions(('Revised per ECN eRouter-N-16.1513-2.', 'Original version, created by eRouter-N-15.1413-4.',))
if mibBuilder.loadTexts: clabGWMib.setLastUpdated('201608040000Z')
if mibBuilder.loadTexts: clabGWMib.setOrganization('Cable Television Laboratories, Inc.')
if mibBuilder.loadTexts: clabGWMib.setContactInfo('Broadband Network Services Cable Television Laboratories, Inc. 858 Coal Creek Circle, Louisville, CO 80027, USA Phone: +1 303-661-9100 Email: mibs@cablelabs.com')
if mibBuilder.loadTexts: clabGWMib.setDescription('This MIB module contains the management for gateways that also support TR-181i2. Copyright 2016 Cable Television Laboratories, Inc. All rights reserved.')
clabGWNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 0))
clabGWMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1))
clabGWMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2))
clabGWMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 1))
clabGWMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2))
clabGWDeviceInfoObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1))
clabGWDNSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 2))
clabGWMAPObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3))
clabGWDeviceInfoManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturer.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturer.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturer.setDescription('This object is defined in TR-181 Device.DeviceInfo.Manufacturer.')
clabGWDeviceInfoManufacturerOUI = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturerOUI.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturerOUI.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoManufacturerOUI.setDescription('This object is defined in TR-181 Device.DeviceInfo.ManufacturerOUI.')
clabGWDeviceInfoDeviceCategory = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(127, 127)).setFixedLength(127)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoDeviceCategory.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoDeviceCategory.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoDeviceCategory.setDescription('This object is defined in TR-181 Device.DeviceInfo.DeviceCategory.')
clabGWDeviceInfoModelName = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoModelName.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoModelName.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoModelName.setDescription('This object is defined in TR-181 Device.DeviceInfo.ModelName.')
clabGWDeviceInfoModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoModelNumber.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoModelNumber.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoModelNumber.setDescription('This object is defined in TR-181 Device.DeviceInfo.ModelNumber.')
clabGWDeviceInfoDescription = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoDescription.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoDescription.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoDescription.setDescription('This object is defined in TR-181 Device.DeviceInfo.Description.')
clabGWDeviceInfoProductClass = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoProductClass.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoProductClass.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoProductClass.setDescription('This object is defined in TR-181 Device.DeviceInfo.ProductClass.')
clabGWDeviceInfoSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoSerialNumber.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoSerialNumber.setDescription('This object is defined in TR-181 Device.DeviceInfo.SerialNumber.')
clabGWDeviceInfoHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoHardwareVersion.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoHardwareVersion.setDescription('This object is defined in TR-181 Device.DeviceInfo.HardwareVersion.')
clabGWDeviceInfoSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoSoftwareVersion.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoSoftwareVersion.setDescription('This object is defined in TR-181 Device.DeviceInfo.SoftwareVersion.')
clabGWDeviceInfoAdditionalHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoAdditionalHardwareVersion.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoAdditionalHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoAdditionalHardwareVersion.setDescription('This object is defined in TR-181 Device.DeviceInfo.AdditionalHardwareVersion.')
clabGWDeviceInfoAdditonalSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoAdditonalSoftwareVersion.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoAdditonalSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoAdditonalSoftwareVersion.setDescription('This object is defined in TR-181 Device.DeviceInfo.AdditonalSoftwareVersion.')
clabGWDeviceInfoProvisioningCode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(64, 64)).setFixedLength(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWDeviceInfoProvisioningCode.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoProvisioningCode.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoProvisioningCode.setDescription('This object is defined in TR-181 Device.DeviceInfo.ProvisioningCode.')
clabGWDeviceInfoUpTime = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoUpTime.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoUpTime.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoUpTime.setDescription('This object is defined in TR-181 Device.DeviceInfo.UpTime.')
clabGWDeviceInfoFirstUseDate = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 15), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWDeviceInfoFirstUseDate.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDeviceInfoFirstUseDate.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceInfoFirstUseDate.setDescription('This object is defined in TR-181 Device.DeviceInfo.FirstUseDate.')
clabGWDevicePublicAccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWDevicePublicAccessEnabled.setReference('TR-181 Device Data Model for TR-069.')
if mibBuilder.loadTexts: clabGWDevicePublicAccessEnabled.setStatus('current')
if mibBuilder.loadTexts: clabGWDevicePublicAccessEnabled.setDescription("This object is defined in the CableLabs TR-181 extension to Device.DeviceInfo. When set to 'true' will indicate that public access, for example Community WIFI, is enabled on this device. When set to 'false', indicates public access is disabled for this device.")
clabGWDeviceDNSIpv6QueryForDualMode = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 2, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWDeviceDNSIpv6QueryForDualMode.setReference('CableLabs eRouter Specification')
if mibBuilder.loadTexts: clabGWDeviceDNSIpv6QueryForDualMode.setStatus('current')
if mibBuilder.loadTexts: clabGWDeviceDNSIpv6QueryForDualMode.setDescription("This object provides control over the DNS queries transmitted by LAN clients when the Router is configured in either 'IPv6 Protocol Enabled' or 'Dual Protocol Enabled' modes. When the value of clabGWDeviceDNSIpv6QueryForDualMode is set to 'true', the IPv4 DNS query will be transport layer re-encapsulated into IPv6 for transmission across the Service Provider's network. When set to 'false', the IPv4 DNS query will be transmitted. natively over IPv4. This attribute has no effect if the router is configured for 'IPv4 Protocol Enabled' mode")
clabGWMAPEnable = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clabGWMAPEnable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Enable')
if mibBuilder.loadTexts: clabGWMAPEnable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPEnable.setDescription('Enables or disables MAP.')
clabGWMAPTunnelDomainNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPTunnelDomainNumEntries.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.DomainNumEntries')
if mibBuilder.loadTexts: clabGWMAPTunnelDomainNumEntries.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPTunnelDomainNumEntries.setDescription('Number of configured entries in the Domain table.')
clabGWMAPDomainTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3), )
if mibBuilder.loadTexts: clabGWMAPDomainTable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain')
if mibBuilder.loadTexts: clabGWMAPDomainTable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainTable.setDescription('MAP domain settings [MAP]. Each instance models a MAP domain. MAP supports two transport modes, both of which use NAPT44 (modified to use a restricted port range): MAP-E (TransportMode = Encapsulation) uses an IPv4-in-IPv6 tunnel. MAP-T (TransportMode = Translation) uses stateless NAT64.')
clabGWMAPDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainEntry.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainEntry.setDescription('This table allows configuration and monitoring of MAP Domains.')
clabGWMAPDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: clabGWMAPDomainIndex.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIndex.setDescription('Index value of the clabGWMAPDomainTable.')
clabGWMAPDomainEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainEnable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Enable')
if mibBuilder.loadTexts: clabGWMAPDomainEnable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainEnable.setDescription('Enables or disable this MAP domain.')
clabGWMAPDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("errorMisconfigured", 3), ("error", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainStatus.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Status')
if mibBuilder.loadTexts: clabGWMAPDomainStatus.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainStatus.setDescription('The current operational state of the MAP domain. The Error_Misconfigured value indicates that a necessary configuration value is undefined or invalid. Enumeration of: Disabled Enabled Error_Misconfigured (OPTIONAL) Error (OPTIONAL)')
clabGWMAPDomainAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainAlias.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Alias')
if mibBuilder.loadTexts: clabGWMAPDomainAlias.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainAlias.setDescription('A non-volatile handle used to reference this instance. Alias provides a mechanism for an ACS to label this instance for future reference.')
clabGWMAPDomainTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("encapsulation", 1), ("translation", 2))).clone('translation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainTransportMode.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.TransportMode')
if mibBuilder.loadTexts: clabGWMAPDomainTransportMode.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainTransportMode.setDescription("The transport mode to use. Corresponds to the [MAP-DHCP] S46_CONT_MAPE and S46_CONT_MAPT container options. Enumeration of: 'encapsulation' (MAP-E [MAP]) 'translation' (MAP-T [MAP-T])")
clabGWMAPDomainWANInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainWANInterface.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.WANInterface')
if mibBuilder.loadTexts: clabGWMAPDomainWANInterface.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainWANInterface.setDescription("The IP interface with which this MAP domain is associated. This will always be a NAT-ted upstream (WAN) interface. The End-user IPv6 prefix IPv6Prefix is one of this IP interface's prefixes.")
clabGWMAPDomainIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 7), InetAddressIPv6().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIPv6Prefix.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.IPv6Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIPv6Prefix.setDescription("The MAP domain's End-user IPv6 prefix.")
clabGWMAPDomainIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 8), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIPv6PrefixLen.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.IPv6Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIPv6PrefixLen.setDescription("The MAP domain's End-user IPv6 prefix length")
clabGWMAPDomainBRIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 9), InetAddressIPv6().clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6Prefix.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.BRIPv6Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6Prefix.setDescription('The MAP Border Relay (BR) address or prefix. For MAP-E this is the BR address and therefore MUST be a /128 [MAP]. For MAP-T this is the BR prefix [MAP-T].')
clabGWMAPDomainBRIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 10), InetAddressPrefixLength().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6PrefixLen.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.BRIPv6Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainBRIPv6PrefixLen.setDescription('The MAP Border Relay (BR) address or prefix length. For MAP-E this is the BR address and therefore MUST be a /128 [MAP]. For MAP-T this is the BR prefix [MAP-T].')
clabGWMAPDomainDSCPMarkPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainDSCPMarkPolicy.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.DSCPMarkPolicy')
if mibBuilder.loadTexts: clabGWMAPDomainDSCPMarkPolicy.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainDSCPMarkPolicy.setDescription('DSCP with which to mark the outer IP header for traffic that is associated with this MAP domain. Downstream packets are never re-marked. Automatic DSCP marking behavior is a local matter to the device, possibly influenced by other Broadband Forum standards that it supports. A value of -1 indicates copy from the incoming packet. A value of -2 indicates automatic marking of DSCP.')
clabGWMAPDomainIncludeSystemPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIncludeSystemPorts.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.IncludeSystemPorts')
if mibBuilder.loadTexts: clabGWMAPDomainIncludeSystemPorts.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIncludeSystemPorts.setDescription('Whether to include low-numbered (system) ports in the Port-sets. Normally ports in the range [0:2^(16-PSIDOffset)-1] are excluded, e.g. for the default PSIDOffset value of 4, ports [0:4095] are not included in the Port-sets. As specified in [MAP], this parameter is relevant only when PSIDOffset is 0.')
clabGWMAPDomainRuleNumEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainRuleNumEntries.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.RuleNumEntries')
if mibBuilder.loadTexts: clabGWMAPDomainRuleNumEntries.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleNumEntries.setDescription('Number of configured entries in the TunnelInterface table for this tunnel.')
clabGWMAPDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 3, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRowStatus.setDescription('The RowStatus interlock for the creation and deletion of a table entry.')
clabGWMAPDomainRuleTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4), )
if mibBuilder.loadTexts: clabGWMAPDomainRuleTable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}')
if mibBuilder.loadTexts: clabGWMAPDomainRuleTable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleTable.setDescription("The MAP domain's Mapping Rules [MAP]. The rule with the longest match between its IPv6Prefix and the end-user IPv6Prefix is the Basic Mapping Rule (BMR). Any of the rules (including the BMR) can be a Forwarding Mapping Rule. At most one entry in this table (regardless of whether or not it is enabled) can exist with a given value for Alias. On creation of a new table entry, the CPE MUST choose an initial value for Alias such that the new entry does not conflict with any existing entries.")
clabGWMAPDomainRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"), (0, "CLAB-GW-MIB", "clabGWMAPDomainRuleIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainRuleEntry.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleEntry.setDescription('List of individual rules mapped into MAP domains.')
clabGWMAPDomainRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: clabGWMAPDomainRuleIndex.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIndex.setDescription('The key for a unique instance of this object.')
clabGWMAPDomainRuleEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleEnable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.Enable')
if mibBuilder.loadTexts: clabGWMAPDomainRuleEnable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleEnable.setDescription('Enable or disable rule instance for MAP domain.')
clabGWMAPDomainRuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("error", 3))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainRuleStatus.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.Status')
if mibBuilder.loadTexts: clabGWMAPDomainRuleStatus.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleStatus.setDescription('The status of this Rule instance. Enumeration of: - Disabled - Enabled - Error (OPTIONAL) The Error value MAY be used by the CPE to indicate a locally defined error condition.')
clabGWMAPDomainRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleAlias.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.Alias')
if mibBuilder.loadTexts: clabGWMAPDomainRuleAlias.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleAlias.setDescription('A non-volatile handle used to reference this instance. Alias provides a mechanism for an ACS to label this instance for future reference.')
clabGWMAPDomainRuleOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dhcpv6", 1), ("static", 2))).clone('static')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleOrigin.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.Origin')
if mibBuilder.loadTexts: clabGWMAPDomainRuleOrigin.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleOrigin.setDescription("The mechanism via which the Rule was created Enumeration of: 'dhcpv6' 'static'")
clabGWMAPDomainRuleIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 6), InetAddressIPv6()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6Prefix.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.IPv6Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6Prefix.setDescription('The Rule IPv6 prefix. The Rule IPv6 prefix is a leading part of the end-user IPv6Prefix, i.e. its length MUST be less than or equal to the length of the end-user IPv6Prefix, and it MUST match the end-user IPv6Prefix.')
clabGWMAPDomainRuleIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 7), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6PrefixLen.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.IPv6Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv6PrefixLen.setDescription('The Rule IPv6 prefix length.')
clabGWMAPDomainRuleIPv4Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 8), InetAddressIPv4().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4Prefix.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.IPv4Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4Prefix.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4Prefix.setDescription('[IPv4Prefix] The Rule IPv4 prefix.')
clabGWMAPDomainRuleIPv4PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 9), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4PrefixLen.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.IPv4Prefix')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4PrefixLen.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIPv4PrefixLen.setDescription('[IPv4Prefix] The Rule IPv4 prefix length.')
clabGWMAPDomainRuleEABitsLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleEABitsLength.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.EABitsLength')
if mibBuilder.loadTexts: clabGWMAPDomainRuleEABitsLength.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleEABitsLength.setDescription('The length in bits of the Embedded Address (EA) bits in the end-user IPv6Prefix.')
clabGWMAPDomainRuleIsFMR = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleIsFMR.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Rule.{i}.IsFMR')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIsFMR.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleIsFMR.setDescription('Indicates whether this rule is a Forwarding Mapping Rule (FMR).')
clabGWMAPDomainRulePSIDOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDOffset.setReference('TR-181 Device:2.8 Data Model for TR-069,Device.MAP.Domain.{i}.PSIDOffset but moved on a be on per Rule basis.')
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDOffset.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDOffset.setDescription("Port-set ID (PSID) offset in bits. The number of Port-sets is 2^PSIDOffset. Corresponds to the [MAP-DHCP] S46_PORTPARAMS (Port Parameters) option's offset field.")
clabGWMAPDomainRulePSIDLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDLength.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.PSIDLength but moved on a be on per Rule basis.')
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDLength.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRulePSIDLength.setDescription("The length in bits of the Port-set id (PSID) configured in the PSID parameter. Corresponds to the [MAP-DHCP] S46_PORTPARAMS (Port Parameters) option's PSID-len field moved on a be on per Rule level.")
clabGWMAPDomainRulePSID = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRulePSID.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.PSIDLength but moved on a be on per Rule basis.')
if mibBuilder.loadTexts: clabGWMAPDomainRulePSID.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRulePSID.setDescription("Port-set ID (PSID) to use in preference to the value extracted from the Embedded Address (EA) bits. Only the high order PSIDLength bits of the PSID value are used, so the parameter is ignored when PSIDLength is zero. Corresponds to the [MAP-DHCP] S46_PORTPARAMS (Port Parameters) option's PSID field.")
clabGWMAPDomainRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 4, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainRuleRowStatus.setDescription('The RowStatus interlock for the creation and deletion of a table entry.')
clabGWMAPDomainIfTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5), )
if mibBuilder.loadTexts: clabGWMAPDomainIfTable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface')
if mibBuilder.loadTexts: clabGWMAPDomainIfTable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfTable.setDescription('This table contains information specific to LAN side MAP domain interface.')
clabGWMAPDomainIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainIfEntry.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfEntry.setDescription('List of individual source interface entry mapped into a MAP domain.')
clabGWMAPDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: clabGWMAPDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfIndex.setDescription('The key for a unique instance of this object.')
clabGWMAPDomainIfEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfEnable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Enable')
if mibBuilder.loadTexts: clabGWMAPDomainIfEnable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfEnable.setDescription('Enable or disable MAP domain interface.')
clabGWMAPDomainIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("unknown", 3), ("dormant", 4), ("notPresent", 5), ("lowerLayerDown", 6), ("error", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatus.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Status')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatus.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatus.setDescription('The status of this TunnelInterface. When Enable is false then Status SHOULD normally be Down (or NotPresent or Error if there is a fault condition on the interface). When Enable is false then Status SHOULD normally be Down (or NotPresent or Error if there is a fault condition on the interface). When Enable is changed to true then Status SHOULD change to Up if and only if the interface is able to transmit and receive network traffic; it SHOULD change to Dormant if and only if the interface is operable but is waiting for external actions before it can transmit and receive network traffic (and subsequently change to Up if still operable when the expected actions have completed); it SHOULD change to LowerLayerDown if and only if the interface is prevented from entering the Up state because one or more of the interfaces beneath it is down; it SHOULD remain in the Error state if there is an error or other fault condition detected on the interface; it SHOULD remain in the NotPresent state if the interface has missing (typically hardware) components; it SHOULD change to Unknown if the state of the interface can not be determined for some reason.')
clabGWMAPDomainIfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfAlias.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Alias')
if mibBuilder.loadTexts: clabGWMAPDomainIfAlias.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfAlias.setDescription('A non-volatile handle used to reference this instance. Alias provides a mechanism for an ACS to label this instance for future reference.')
clabGWMAPDomainIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfName.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Name')
if mibBuilder.loadTexts: clabGWMAPDomainIfName.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfName.setDescription('MAP domain interface name (The textual name of the tunnel interface as assigned by the CPE)')
clabGWMAPDomainIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 6), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfLastChange.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.LastChange')
if mibBuilder.loadTexts: clabGWMAPDomainIfLastChange.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfLastChange.setDescription('The accumulated time in seconds since the tunnel interface entered its current operational state.')
clabGWMAPDomainIfLowerLayers = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfLowerLayers.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.LowerLayers')
if mibBuilder.loadTexts: clabGWMAPDomainIfLowerLayers.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfLowerLayers.setDescription('Comma-separated list of source ifIndex values whose traffic will be passed through the MAP domain associated with this Domain Interface.')
clabGWMAPDomainIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 5, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clabGWMAPDomainIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfRowStatus.setDescription('The RowStatus interlock for the creation and deletion of a table entry.')
clabGWMAPDomainIfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6), )
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsTable.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsTable.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsTable.setDescription('This table provides statistical information of MAP Domain interfaces. This table extends clabGWMAPDomainIfTable. The index used is imported from the the clabGWMAPDomainIfTable. If a row is deleted from clabGWMAPDomainRuleTable, then the extension row will also be deleted.')
clabGWMAPDomainIfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1), ).setIndexNames((0, "CLAB-GW-MIB", "clabGWMAPDomainIndex"))
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsEntry.setDescription('Each table entry provides statistical information on a MAP Domain interface.')
clabGWMAPDomainIfStatsBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 1), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.BytesSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesSent.setDescription('Number of bytes sent.')
clabGWMAPDomainIfStatsBytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.BytesRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBytesRcvd.setDescription('Number of bytes received.')
clabGWMAPDomainIfStatsPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.PktSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktSent.setDescription('Number of packets sent.')
clabGWMAPDomainIfStatsPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.PktRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsPktRcvd.setDescription('Number of packets received.')
clabGWMAPDomainIfStatsErrorsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrorsSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.ErrorsSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrorsSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrorsSent.setDescription('Number of errors sent.')
clabGWMAPDomainIfStatsErrsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrsRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.ErrsRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrsRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsErrsRcvd.setDescription('Number of errors that were received.')
clabGWMAPDomainIfStatsUcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.UcastPktSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktSent.setDescription('Number of unicast packets sent.')
clabGWMAPDomainIfStatsUcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 8), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.UcastPktRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUcastPktRcvd.setDescription('Number of unicast packets received.')
clabGWMAPDomainIfStatsDcardPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.DcardPktSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktSent.setDescription('The total number of packets sent that were discarded.')
clabGWMAPDomainIfStatsDcardPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 10), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.DcardPktRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsDcardPktRcvd.setDescription('The total number of packets sent that were discarded.')
clabGWMAPDomainIfStatsMcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.McastPktSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktSent.setDescription('Number of multicast packets sent.')
clabGWMAPDomainIfStatsMcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.McastPktRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsMcastPktRcvd.setDescription('Number of multicast packets received.')
clabGWMAPDomainIfStatsBcastPktSent = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktSent.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.BcastPktSent')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktSent.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktSent.setDescription('Number of broadcast packets sent.')
clabGWMAPDomainIfStatsBcastPktRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 14), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktRcvd.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.BcastPktRcvd')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktRcvd.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsBcastPktRcvd.setDescription('Number of broadcast packets received.')
clabGWMAPDomainIfStatsUkwnProtoPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUkwnProtoPkt.setReference('TR-181 Device:2.8 Data Model for TR-069, Device.MAP.Domain.{i}.Interface.Stats.UkwnProtoPkt')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUkwnProtoPkt.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsUkwnProtoPkt.setDescription('Number of unknown protocol packets received.')
clabGWMAPDomainIfStatsInvV4Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4491, 4, 6, 1, 3, 6, 1, 16), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsInvV4Pkts.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPDomainIfStatsInvV4Pkts.setDescription('The CE checks that the MAP domain received packets that have a destination port number that is in the range configured for the CE, discarding the packet if it is not.')
clabGWCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 1, 1)).setObjects(("CLAB-GW-MIB", "clabGWGroup"), ("CLAB-GW-MIB", "clabGWDNSGroup"), ("CLAB-GW-MIB", "clabGWMAPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWCompliance = clabGWCompliance.setStatus('current')
if mibBuilder.loadTexts: clabGWCompliance.setDescription('The compliance statement for the gateway device.')
clabGWGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2, 1)).setObjects(("CLAB-GW-MIB", "clabGWDeviceInfoManufacturer"), ("CLAB-GW-MIB", "clabGWDeviceInfoManufacturerOUI"), ("CLAB-GW-MIB", "clabGWDeviceInfoDeviceCategory"), ("CLAB-GW-MIB", "clabGWDeviceInfoModelName"), ("CLAB-GW-MIB", "clabGWDeviceInfoModelNumber"), ("CLAB-GW-MIB", "clabGWDeviceInfoDescription"), ("CLAB-GW-MIB", "clabGWDeviceInfoProductClass"), ("CLAB-GW-MIB", "clabGWDeviceInfoSerialNumber"), ("CLAB-GW-MIB", "clabGWDeviceInfoHardwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoSoftwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoAdditionalHardwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoAdditonalSoftwareVersion"), ("CLAB-GW-MIB", "clabGWDeviceInfoProvisioningCode"), ("CLAB-GW-MIB", "clabGWDeviceInfoUpTime"), ("CLAB-GW-MIB", "clabGWDeviceInfoFirstUseDate"), ("CLAB-GW-MIB", "clabGWDevicePublicAccessEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWGroup = clabGWGroup.setStatus('current')
if mibBuilder.loadTexts: clabGWGroup.setDescription('Objects implemented in the clabGWGroup.')
clabGWDNSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2, 3)).setObjects(("CLAB-GW-MIB", "clabGWDeviceDNSIpv6QueryForDualMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWDNSGroup = clabGWDNSGroup.setStatus('current')
if mibBuilder.loadTexts: clabGWDNSGroup.setDescription('Objects implemented in the clabGWDNSGroup.')
clabGWMAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4491, 4, 6, 2, 2, 4)).setObjects(("CLAB-GW-MIB", "clabGWMAPEnable"), ("CLAB-GW-MIB", "clabGWMAPTunnelDomainNumEntries"), ("CLAB-GW-MIB", "clabGWMAPDomainEnable"), ("CLAB-GW-MIB", "clabGWMAPDomainStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainAlias"), ("CLAB-GW-MIB", "clabGWMAPDomainTransportMode"), ("CLAB-GW-MIB", "clabGWMAPDomainWANInterface"), ("CLAB-GW-MIB", "clabGWMAPDomainIPv6Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainIPv6PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainBRIPv6Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainBRIPv6PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainDSCPMarkPolicy"), ("CLAB-GW-MIB", "clabGWMAPDomainIncludeSystemPorts"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleNumEntries"), ("CLAB-GW-MIB", "clabGWMAPDomainRowStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleEnable"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleAlias"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleOrigin"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv6Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv6PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv4Prefix"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIPv4PrefixLen"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleEABitsLength"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleIsFMR"), ("CLAB-GW-MIB", "clabGWMAPDomainRulePSIDOffset"), ("CLAB-GW-MIB", "clabGWMAPDomainRulePSIDLength"), ("CLAB-GW-MIB", "clabGWMAPDomainRulePSID"), ("CLAB-GW-MIB", "clabGWMAPDomainRuleRowStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainIfEnable"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainIfAlias"), ("CLAB-GW-MIB", "clabGWMAPDomainIfName"), ("CLAB-GW-MIB", "clabGWMAPDomainIfLastChange"), ("CLAB-GW-MIB", "clabGWMAPDomainIfLowerLayers"), ("CLAB-GW-MIB", "clabGWMAPDomainIfRowStatus"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBytesSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBytesRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsErrorsSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsErrsRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsUcastPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsUcastPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsDcardPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsDcardPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsMcastPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsMcastPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBcastPktSent"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsBcastPktRcvd"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsUkwnProtoPkt"), ("CLAB-GW-MIB", "clabGWMAPDomainIfStatsInvV4Pkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clabGWMAPGroup = clabGWMAPGroup.setStatus('current')
if mibBuilder.loadTexts: clabGWMAPGroup.setDescription('Objects implemented in the clabGWDNSGroup.')
mibBuilder.exportSymbols("CLAB-GW-MIB", clabGWMAPDomainEntry=clabGWMAPDomainEntry, clabGWMAPDomainIfEntry=clabGWMAPDomainIfEntry, clabGWMAPDomainIfStatsBytesRcvd=clabGWMAPDomainIfStatsBytesRcvd, clabGWMAPDomainIfStatsBcastPktSent=clabGWMAPDomainIfStatsBcastPktSent, clabGWMAPDomainEnable=clabGWMAPDomainEnable, clabGWMAPDomainAlias=clabGWMAPDomainAlias, clabGWMAPTunnelDomainNumEntries=clabGWMAPTunnelDomainNumEntries, clabGWMAPDomainRuleIPv4Prefix=clabGWMAPDomainRuleIPv4Prefix, clabGWMAPObjects=clabGWMAPObjects, clabGWDeviceInfoUpTime=clabGWDeviceInfoUpTime, clabGWDeviceInfoAdditionalHardwareVersion=clabGWDeviceInfoAdditionalHardwareVersion, clabGWMAPDomainRuleIPv6PrefixLen=clabGWMAPDomainRuleIPv6PrefixLen, clabGWMAPDomainIfStatsPktRcvd=clabGWMAPDomainIfStatsPktRcvd, clabGWDeviceInfoDeviceCategory=clabGWDeviceInfoDeviceCategory, clabGWMibGroups=clabGWMibGroups, clabGWMAPDomainRuleEntry=clabGWMAPDomainRuleEntry, clabGWMAPDomainRulePSIDLength=clabGWMAPDomainRulePSIDLength, clabGWMAPDomainIfStatus=clabGWMAPDomainIfStatus, clabGWMAPDomainBRIPv6Prefix=clabGWMAPDomainBRIPv6Prefix, clabGWMAPDomainIfStatsInvV4Pkts=clabGWMAPDomainIfStatsInvV4Pkts, clabGWMAPDomainRuleNumEntries=clabGWMAPDomainRuleNumEntries, clabGWMAPDomainIPv6Prefix=clabGWMAPDomainIPv6Prefix, clabGWMAPDomainRuleIPv4PrefixLen=clabGWMAPDomainRuleIPv4PrefixLen, clabGWMAPDomainIPv6PrefixLen=clabGWMAPDomainIPv6PrefixLen, clabGWDeviceInfoManufacturerOUI=clabGWDeviceInfoManufacturerOUI, clabGWMAPDomainRuleEABitsLength=clabGWMAPDomainRuleEABitsLength, clabGWMAPDomainIfStatsBcastPktRcvd=clabGWMAPDomainIfStatsBcastPktRcvd, clabGWMAPDomainRuleAlias=clabGWMAPDomainRuleAlias, clabGWMAPDomainIndex=clabGWMAPDomainIndex, clabGWCompliance=clabGWCompliance, clabGWMAPDomainWANInterface=clabGWMAPDomainWANInterface, clabGWMAPDomainRuleTable=clabGWMAPDomainRuleTable, clabGWMAPDomainRuleIPv6Prefix=clabGWMAPDomainRuleIPv6Prefix, clabGWMAPDomainIfStatsTable=clabGWMAPDomainIfStatsTable, clabGWMAPDomainRulePSIDOffset=clabGWMAPDomainRulePSIDOffset, clabGWMAPDomainRuleEnable=clabGWMAPDomainRuleEnable, clabGWMAPGroup=clabGWMAPGroup, clabGWDevicePublicAccessEnabled=clabGWDevicePublicAccessEnabled, clabGWMAPDomainIfLastChange=clabGWMAPDomainIfLastChange, clabGWMib=clabGWMib, clabGWMAPDomainIfStatsEntry=clabGWMAPDomainIfStatsEntry, clabGWMibCompliances=clabGWMibCompliances, clabGWDeviceInfoObjects=clabGWDeviceInfoObjects, clabGWDeviceInfoModelName=clabGWDeviceInfoModelName, clabGWGroup=clabGWGroup, clabGWDeviceInfoProductClass=clabGWDeviceInfoProductClass, clabGWMAPDomainRuleStatus=clabGWMAPDomainRuleStatus, clabGWMAPDomainIfStatsErrsRcvd=clabGWMAPDomainIfStatsErrsRcvd, clabGWMAPDomainRowStatus=clabGWMAPDomainRowStatus, clabGWMAPDomainIfIndex=clabGWMAPDomainIfIndex, clabGWMibObjects=clabGWMibObjects, clabGWMAPDomainIfStatsUkwnProtoPkt=clabGWMAPDomainIfStatsUkwnProtoPkt, clabGWDeviceInfoHardwareVersion=clabGWDeviceInfoHardwareVersion, clabGWMAPDomainIfEnable=clabGWMAPDomainIfEnable, clabGWDeviceInfoSerialNumber=clabGWDeviceInfoSerialNumber, clabGWMAPDomainBRIPv6PrefixLen=clabGWMAPDomainBRIPv6PrefixLen, clabGWMAPDomainRuleIsFMR=clabGWMAPDomainRuleIsFMR, clabGWMAPDomainIfTable=clabGWMAPDomainIfTable, clabGWDeviceInfoDescription=clabGWDeviceInfoDescription, clabGWDeviceInfoProvisioningCode=clabGWDeviceInfoProvisioningCode, clabGWMAPDomainIfLowerLayers=clabGWMAPDomainIfLowerLayers, clabGWDeviceDNSIpv6QueryForDualMode=clabGWDeviceDNSIpv6QueryForDualMode, clabGWDeviceInfoFirstUseDate=clabGWDeviceInfoFirstUseDate, clabGWMAPDomainRulePSID=clabGWMAPDomainRulePSID, clabGWMAPEnable=clabGWMAPEnable, clabGWMAPDomainIfStatsDcardPktSent=clabGWMAPDomainIfStatsDcardPktSent, clabGWDeviceInfoAdditonalSoftwareVersion=clabGWDeviceInfoAdditonalSoftwareVersion, clabGWDeviceInfoManufacturer=clabGWDeviceInfoManufacturer, clabGWMAPDomainDSCPMarkPolicy=clabGWMAPDomainDSCPMarkPolicy, clabGWDeviceInfoSoftwareVersion=clabGWDeviceInfoSoftwareVersion, clabGWDNSObjects=clabGWDNSObjects, clabGWMAPDomainRuleRowStatus=clabGWMAPDomainRuleRowStatus, clabGWMAPDomainIfStatsPktSent=clabGWMAPDomainIfStatsPktSent, clabGWDNSGroup=clabGWDNSGroup, clabGWMAPDomainStatus=clabGWMAPDomainStatus, clabGWMAPDomainIfStatsUcastPktSent=clabGWMAPDomainIfStatsUcastPktSent, clabGWMAPDomainIfStatsMcastPktSent=clabGWMAPDomainIfStatsMcastPktSent, clabGWMAPDomainIfStatsBytesSent=clabGWMAPDomainIfStatsBytesSent, clabGWMAPDomainIfName=clabGWMAPDomainIfName, clabGWMAPDomainIfStatsDcardPktRcvd=clabGWMAPDomainIfStatsDcardPktRcvd, clabGWMAPDomainIncludeSystemPorts=clabGWMAPDomainIncludeSystemPorts, PYSNMP_MODULE_ID=clabGWMib, clabGWMibConformance=clabGWMibConformance, clabGWMAPDomainRuleIndex=clabGWMAPDomainRuleIndex, clabGWMAPDomainRuleOrigin=clabGWMAPDomainRuleOrigin, clabGWMAPDomainIfAlias=clabGWMAPDomainIfAlias, clabGWMAPDomainIfStatsMcastPktRcvd=clabGWMAPDomainIfStatsMcastPktRcvd, clabGWMAPDomainIfStatsErrorsSent=clabGWMAPDomainIfStatsErrorsSent, clabGWDeviceInfoModelNumber=clabGWDeviceInfoModelNumber, clabGWMAPDomainIfStatsUcastPktRcvd=clabGWMAPDomainIfStatsUcastPktRcvd, clabGWMAPDomainTransportMode=clabGWMAPDomainTransportMode, clabGWNotifications=clabGWNotifications, clabGWMAPDomainTable=clabGWMAPDomainTable, clabGWMAPDomainIfRowStatus=clabGWMAPDomainIfRowStatus)
