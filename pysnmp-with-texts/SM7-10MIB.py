#
# PySNMP MIB module SM7-10MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SM7-10MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:07:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, Bits, TimeTicks, Counter32, ModuleIdentity, Unsigned32, Gauge32, ObjectIdentity, Counter64, enterprises, MibIdentifier, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "Bits", "TimeTicks", "Counter32", "ModuleIdentity", "Unsigned32", "Gauge32", "ObjectIdentity", "Counter64", "enterprises", "MibIdentifier", "iso", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
symbios = MibIdentifier((1, 3, 6, 1, 4, 1, 1123))
wichita = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 1))
ftcollins = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 2))
cosprings = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 3))
sm7_10 = MibIdentifier((1, 3, 6, 1, 4, 1, 1123, 1, 204)).setLabel("sm7-10")
infoTable = MibTable((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1), )
if mibBuilder.loadTexts: infoTable.setStatus('mandatory')
if mibBuilder.loadTexts: infoTable.setDescription('Information for array traps.')
infoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1), ).setIndexNames((0, "SM7-10MIB", "deviceHostIP"))
if mibBuilder.loadTexts: infoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: infoEntry.setDescription('The data for array traps.')
deviceHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHostIP.setStatus('mandatory')
if mibBuilder.loadTexts: deviceHostIP.setDescription('Address of the network-attached device or device host.')
deviceHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceHostName.setStatus('mandatory')
if mibBuilder.loadTexts: deviceHostName.setDescription('The user label for the host of the device being reported on.')
deviceUserLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceUserLabel.setStatus('mandatory')
if mibBuilder.loadTexts: deviceUserLabel.setDescription('The user label for the device being reported on.')
deviceErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: deviceErrorCode.setDescription('The error code as reported by the device or host.')
eventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTime.setStatus('mandatory')
if mibBuilder.loadTexts: eventTime.setDescription('The time at which the event happen on the device.')
trapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 69))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapDescription.setStatus('mandatory')
if mibBuilder.loadTexts: trapDescription.setDescription('A string to indicate the nature of the trap')
componentType = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 59))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentType.setStatus('mandatory')
if mibBuilder.loadTexts: componentType.setDescription('A string to identify the failing component type')
componentLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1123, 1, 204, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 39))).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentLocation.setStatus('mandatory')
if mibBuilder.loadTexts: componentLocation.setDescription('A string to identify the location of the failing component')
storageArrayCritical = NotificationType((1, 3, 6, 1, 4, 1, 1123, 1, 204) + (0,1)).setObjects(("SM7-10MIB", "deviceHostIP"), ("SM7-10MIB", "deviceHostName"), ("SM7-10MIB", "deviceUserLabel"), ("SM7-10MIB", "deviceErrorCode"), ("SM7-10MIB", "eventTime"), ("SM7-10MIB", "trapDescription"), ("SM7-10MIB", "componentType"), ("SM7-10MIB", "componentLocation"))
if mibBuilder.loadTexts: storageArrayCritical.setDescription('This trap indicates an event where user-interaction is required immediately. Some example events are component failures or critical errors.')
mibBuilder.exportSymbols("SM7-10MIB", sm7_10=sm7_10, componentType=componentType, ftcollins=ftcollins, componentLocation=componentLocation, infoTable=infoTable, eventTime=eventTime, infoEntry=infoEntry, trapDescription=trapDescription, deviceHostName=deviceHostName, deviceErrorCode=deviceErrorCode, storageArrayCritical=storageArrayCritical, deviceHostIP=deviceHostIP, symbios=symbios, deviceUserLabel=deviceUserLabel, wichita=wichita, cosprings=cosprings)
