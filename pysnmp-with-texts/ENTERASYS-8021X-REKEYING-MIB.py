#
# PySNMP MIB module ENTERASYS-8021X-REKEYING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ENTERASYS-8021X-REKEYING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:03:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
etsysModules, = mibBuilder.importSymbols("ENTERASYS-MIB-NAMES", "etsysModules")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, Bits, ObjectIdentity, Counter64, iso, Integer32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Bits", "ObjectIdentity", "Counter64", "iso", "Integer32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter32", "Gauge32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
etsys8021xRekeyingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17))
etsys8021xRekeyingMIB.setRevisions(('2004-07-14 15:07', '2002-03-07 20:06',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: etsys8021xRekeyingMIB.setRevisionsDescriptions(('Added the etsysDot1xRekeyPairwise leaf.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: etsys8021xRekeyingMIB.setLastUpdated('200407141507Z')
if mibBuilder.loadTexts: etsys8021xRekeyingMIB.setOrganization('Enterasys Networks, Inc')
if mibBuilder.loadTexts: etsys8021xRekeyingMIB.setContactInfo('Postal: Enterasys Networks 50 Minuteman Rd. Andover, MA 01810-1008 USA Phone: +1 978 684 1000 E-mail: support@enterasys.com WWW: http://www.enterasys.com')
if mibBuilder.loadTexts: etsys8021xRekeyingMIB.setDescription("This MIB module defines a portion of the SNMP enterprise MIBs under Enterasys Networks' enterprise OID pertaining to IEEE 802.1x authentication. This MIB is designed to supplement and be used in connection with the standard IEEE 802.1x MIB. It provides configuration controls for Enterasys Networks' rapid rekeying feature -- a feature that enhances wireless LAN security by changing the network's radio keys on a regular basis.")
etsysDot1xRekeyingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1))
etsysDot1xRekeyBaseBranch = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1))
etsysDot1xRekeyConfigTable = MibTable((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1), )
if mibBuilder.loadTexts: etsysDot1xRekeyConfigTable.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyConfigTable.setDescription('A table that contains encryption-key-related configuration objects for ports on which Authenticator PAEs can run.')
etsysDot1xRekeyConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: etsysDot1xRekeyConfigEntry.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyConfigEntry.setDescription('Each conceptual row holds encryption key configuration information for the Authenticator PAEs associated with one port.')
etsysDot1xRekeyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xRekeyEnabled.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyEnabled.setDescription("Determines how an access point selects radio encryption keys. If the selected port/Authenticator PAE does not support the EAPOL-Key feature (e.g., because radio keys are not applicable to Ethernet ports), this object's value will be FALSE and attempts to write TRUE will fail. Normally, if radio keys are present, the manager enters them into the access point through some manual process. The manager or the users may also need to configure the keys into each laptop (access points can distribute the keys automatically to 802.1x EAP-TLS clients). However laptops get keys, the keys remain static until somebody goes to the trouble of changing them. If the keys stay unchanged for long periods, this can make it easier for a determined attacker to launch a cryptographic attack. When rapid rekeying is enabled, an access point ignores its manually-set keys. It generates pseudo-random keys on a periodic basis, using IEEE 802.1x key distribution to deliver the keys to new and current clients. Do not enable rapid rekeying unless ALL of your clients support IEEE 802.1x and an authentication method (e.g., EAP-TLS) that supports key distribution. Before enabling rapid rekeying, make sure that you have set 'dot1xAuthKeyTxEnabled' to TRUE. Changing the keys without telling any of the clients about the changes is not a very useful mode of operation.")
etsysDot1xRekeyPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1, 1, 2), Unsigned32().clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xRekeyPeriod.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyPeriod.setDescription('When rapid rekeying (periodic changing of radio keys) is enabled, the value of this object determines the period, in seconds, between key changes.')
etsysDot1xRekeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("keylen40", 1), ("keylen128", 2))).clone('keylen128')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xRekeyLength.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyLength.setDescription('Determines the number of bits/bytes used in the encryption keys. Currently supports either 128-bit (16-octet) encryption keys or 40-bit (5-octet) encryption keys.')
etsysDot1xRekeyAsymmetric = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xRekeyAsymmetric.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyAsymmetric.setDescription('Determines the association between the supplicant and authenticator transmit keys. If true(1), the authenticator and supplicant will use different encryption keys in order to transmit data. If false(2), the authenticator and supplicant will use a single key pattern to encrypt the transmitted data.')
etsysDot1xRekeyPairwise = MibTableColumn((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 1, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: etsysDot1xRekeyPairwise.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyPairwise.setDescription('Determines whether Rapid Rekeying tumbles Pairwise keys (when it is enabled, and the radio card supports them). If true(1), it indicates that the access point should tumble both Pairwise and Group keys. If false(2), it indicates that the access point should tumble only Group keys.')
etsysDot1xRekeyingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 2))
etsysDot1xRekeyingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 2, 1))
etsysDot1xRekeyingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 2, 2))
etsysDot1xRekeyingBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 2, 1, 1)).setObjects(("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyPeriod"), ("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyEnabled"), ("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyLength"), ("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyAsymmetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xRekeyingBaseGroup = etsysDot1xRekeyingBaseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyingBaseGroup.setDescription('A collection of objects providing rekeying configuration information about a port on which Authenticator PAEs can run.')
etsysDot1xRekeyingPairwiseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 2, 1, 2)).setObjects(("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyPairwise"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xRekeyingPairwiseGroup = etsysDot1xRekeyingPairwiseGroup.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyingPairwiseGroup.setDescription('A collection of objects providing rekeying configuration information related to Pairwise keys.')
etsysDot1xRekeyingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5624, 1, 2, 17, 2, 2, 1)).setObjects(("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyingBaseGroup"), ("ENTERASYS-8021X-REKEYING-MIB", "etsysDot1xRekeyingPairwiseGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    etsysDot1xRekeyingCompliance = etsysDot1xRekeyingCompliance.setStatus('current')
if mibBuilder.loadTexts: etsysDot1xRekeyingCompliance.setDescription('The compliance statement for devices that support the Enterasys IEEE 802.1x extensions MIB.')
mibBuilder.exportSymbols("ENTERASYS-8021X-REKEYING-MIB", etsysDot1xRekeyingBaseGroup=etsysDot1xRekeyingBaseGroup, etsysDot1xRekeyEnabled=etsysDot1xRekeyEnabled, etsysDot1xRekeyAsymmetric=etsysDot1xRekeyAsymmetric, etsys8021xRekeyingMIB=etsys8021xRekeyingMIB, etsysDot1xRekeyConfigEntry=etsysDot1xRekeyConfigEntry, etsysDot1xRekeyingConformance=etsysDot1xRekeyingConformance, etsysDot1xRekeyPairwise=etsysDot1xRekeyPairwise, PYSNMP_MODULE_ID=etsys8021xRekeyingMIB, etsysDot1xRekeyingObjects=etsysDot1xRekeyingObjects, etsysDot1xRekeyingCompliances=etsysDot1xRekeyingCompliances, etsysDot1xRekeyPeriod=etsysDot1xRekeyPeriod, etsysDot1xRekeyingCompliance=etsysDot1xRekeyingCompliance, etsysDot1xRekeyingPairwiseGroup=etsysDot1xRekeyingPairwiseGroup, etsysDot1xRekeyingGroups=etsysDot1xRekeyingGroups, etsysDot1xRekeyLength=etsysDot1xRekeyLength, etsysDot1xRekeyBaseBranch=etsysDot1xRekeyBaseBranch, etsysDot1xRekeyConfigTable=etsysDot1xRekeyConfigTable)
