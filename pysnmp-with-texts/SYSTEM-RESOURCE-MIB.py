#
# PySNMP MIB module SYSTEM-RESOURCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SYSTEM-RESOURCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:14:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ctResource, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctResource")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, MibIdentifier, Integer32, Bits, Gauge32, Counter32, IpAddress, Unsigned32, TimeTicks, iso, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "MibIdentifier", "Integer32", "Bits", "Gauge32", "Counter32", "IpAddress", "Unsigned32", "TimeTicks", "iso", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sysResourceInstalled = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1))
sysResourceSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 2))
sysResourceCpuTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1), )
if mibBuilder.loadTexts: sysResourceCpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceCpuTable.setDescription('This table defines the CPus present within the system.')
sysResourceCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1), ).setIndexNames((0, "SYSTEM-RESOURCE-MIB", "sysResSlotID"), (0, "SYSTEM-RESOURCE-MIB", "sysResCpuIndex"))
if mibBuilder.loadTexts: sysResourceCpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceCpuEntry.setDescription('Defines a particular CPU entry.')
sysResSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResSlotID.setStatus('mandatory')
if mibBuilder.loadTexts: sysResSlotID.setDescription('The slot for which this CPU information pertains.')
sysResCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResCpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sysResCpuIndex.setDescription('An identifier for the CPU on a per slot basis.')
sysResCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResCpuType.setStatus('mandatory')
if mibBuilder.loadTexts: sysResCpuType.setDescription('The processor (CPU) type.')
sysResCpuSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResCpuSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: sysResCpuSpeed.setDescription('The speed of the processor in mega-hertz.')
sysResCpuID = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResCpuID.setStatus('mandatory')
if mibBuilder.loadTexts: sysResCpuID.setDescription('A system wide unique identifier for each CPU.')
sysResInstalledLocalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResInstalledLocalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sysResInstalledLocalMemory.setDescription("Total installed local memory 'DRAM' used for code and data. This is reported in mega-bytes.")
sysResUsedLocalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResUsedLocalMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sysResUsedLocalMemory.setDescription("The current amount of local memory 'DRAM' that is currently being used for code and data. This is reported in bytes.")
sysResourceTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2), )
if mibBuilder.loadTexts: sysResourceTable.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceTable.setDescription('This table describes total installed system resources.')
sysResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1), ).setIndexNames((0, "SYSTEM-RESOURCE-MIB", "sysResSlotID"), (0, "SYSTEM-RESOURCE-MIB", "sysResCpuIndex"))
if mibBuilder.loadTexts: sysResourceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sysResourceEntry.setDescription('Describes a particular installed set of system resources.')
sysResInstalledNvram = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResInstalledNvram.setStatus('mandatory')
if mibBuilder.loadTexts: sysResInstalledNvram.setDescription("The total installed non-volatile memory 'NVRAM'. This is reported in K-bytes.")
sysResInstalledFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResInstalledFlash.setStatus('mandatory')
if mibBuilder.loadTexts: sysResInstalledFlash.setDescription('The total installed flash memory. This is reported in K-bytes.')
sysResInstalledSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResInstalledSharedMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sysResInstalledSharedMemory.setDescription('The total amount of shared memory that is installed. This is reported in K-bytes.')
sysResUsedNvram = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResUsedNvram.setStatus('mandatory')
if mibBuilder.loadTexts: sysResUsedNvram.setDescription("The current amount of non-volatile memory 'NVRAM' that is currently being used for data. This is reported in bytes.")
sysResUsedFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResUsedFlash.setStatus('mandatory')
if mibBuilder.loadTexts: sysResUsedFlash.setDescription('The current amount of flash memory that is currently being used for code and data. This is reported in bytes.')
sysResUsedSharedMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysResUsedSharedMemory.setStatus('mandatory')
if mibBuilder.loadTexts: sysResUsedSharedMemory.setDescription('The current amount of shared memory that is currently being used for data. This is reported in bytes.')
sysResManagementCpuResource = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("limited", 2), ("full", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysResManagementCpuResource.setStatus('mandatory')
if mibBuilder.loadTexts: sysResManagementCpuResource.setDescription('The desired amount of CPU bandwith reserved for management purposes. For example, in the default state (1), the device will devote all CPU bandwith to switching if necessary therefore possibly dropping management frames. If limited (2) is selected, management of the device may appear slow while under maximum switching capabilities although management will still be possible which may result in dropped frames. If full (3) is selected, management of the device is always possible and acts as if there is no switching load on the device, which may result in dropped frames.')
switchLoad = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchLoad.setStatus('mandatory')
if mibBuilder.loadTexts: switchLoad.setDescription('The returned value represents the current switch load based upon a percentage of maximum switching capacity where maximum switching capacity is 100%.')
peakSwitchload = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakSwitchload.setStatus('mandatory')
if mibBuilder.loadTexts: peakSwitchload.setDescription('The peak load which has occured on this switch. The value returned represents The peak percentage of switch load based upon a percentage of maximum switch load which is 100%.')
peakSwitchLoadTime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 2, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: peakSwitchLoadTime.setStatus('mandatory')
if mibBuilder.loadTexts: peakSwitchLoadTime.setDescription('The time at which the peak switch load occured. The value returned will represent system up time at which the peak occured.')
peakSwitchClear = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 1, 1, 12, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("noClear", 2))).clone('noClear')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: peakSwitchClear.setStatus('mandatory')
if mibBuilder.loadTexts: peakSwitchClear.setDescription('This object is used to clear the values found in peakSwitchload and peakSwitchLoadTime. When set with a value of clear(1) the values will be cleared. When read, a value of noClear(2) will be returned. A set of noClear(2) will have no effect.')
mibBuilder.exportSymbols("SYSTEM-RESOURCE-MIB", sysResCpuSpeed=sysResCpuSpeed, sysResSlotID=sysResSlotID, sysResUsedFlash=sysResUsedFlash, sysResCpuIndex=sysResCpuIndex, peakSwitchClear=peakSwitchClear, sysResUsedLocalMemory=sysResUsedLocalMemory, sysResInstalledSharedMemory=sysResInstalledSharedMemory, sysResourceTable=sysResourceTable, sysResManagementCpuResource=sysResManagementCpuResource, peakSwitchLoadTime=peakSwitchLoadTime, sysResInstalledLocalMemory=sysResInstalledLocalMemory, sysResUsedNvram=sysResUsedNvram, sysResourceInstalled=sysResourceInstalled, sysResUsedSharedMemory=sysResUsedSharedMemory, sysResourceCpuEntry=sysResourceCpuEntry, sysResourceEntry=sysResourceEntry, sysResInstalledFlash=sysResInstalledFlash, sysResCpuID=sysResCpuID, switchLoad=switchLoad, sysResCpuType=sysResCpuType, sysResInstalledNvram=sysResInstalledNvram, sysResourceCpuTable=sysResourceCpuTable, peakSwitchload=peakSwitchload, sysResourceSwitch=sysResourceSwitch)
