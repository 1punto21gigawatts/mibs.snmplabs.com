#
# PySNMP MIB module CISCO-WAN-CES-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-WAN-CES-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:20:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
circuitEmulation, = mibBuilder.importSymbols("BASIS-MIB", "circuitEmulation")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, ObjectIdentity, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Counter64, iso, Counter32, Unsigned32, Gauge32, Bits, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Counter64", "iso", "Counter32", "Unsigned32", "Gauge32", "Bits", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoWanCesPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 40))
ciscoWanCesPortMIB.setRevisions(('2002-11-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoWanCesPortMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoWanCesPortMIB.setLastUpdated('200211130000Z')
if mibBuilder.loadTexts: ciscoWanCesPortMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoWanCesPortMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoWanCesPortMIB.setDescription('The MIB module to configure the Circuit Emulation Service(CES) ports.')
cesmPort = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1))
cesmPortCnfGrp = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1))
cesmPortCnfGrpTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1), )
if mibBuilder.loadTexts: cesmPortCnfGrpTable.setStatus('current')
if mibBuilder.loadTexts: cesmPortCnfGrpTable.setDescription('The config table is for CES logical port. This is used for configuring the port type and number of DS0s and number of Subcircuits in DS0 on the CES port.')
cesmPortCnfGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-WAN-CES-PORT-MIB", "cesPortNum"))
if mibBuilder.loadTexts: cesmPortCnfGrpEntry.setStatus('current')
if mibBuilder.loadTexts: cesmPortCnfGrpEntry.setDescription('An entry for each logical port. Each entry contains information on the port type, DS0s configured and number of DS0 subcircuits.')
cesPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortNum.setStatus('current')
if mibBuilder.loadTexts: cesPortNum.setDescription('This object identifies the logical port number. The range support depends upon the type of the service module(Card). - 8 port T1 Card, range is 1..192. - 8 port E1 Card, range is 1..248. - 1 port T3 Card, range is 1..1. Range is caclulated as follows. This can be used for calculating the range for other type of cards. For T1 Card: (24 * Number of T1 Ports) For E1 Card: (31 * Number of E1 Ports).')
cesPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("del", 2), ("mod", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cesPortRowStatus.setDescription('This variable enables or modifies the port 1 - add : Add a logical port 2 - del : Delete a logical port 3 - mod : Modify a logical port.')
cesPortLineNum = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortLineNum.setStatus('current')
if mibBuilder.loadTexts: cesPortLineNum.setDescription('This object represents the line number to which this port is associated. The supported range depends upon the type of service module(card).')
cesPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("structured", 1), ("unstructured", 2), ("framingOnVcDisconnect", 3), ("strau", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortType.setStatus('current')
if mibBuilder.loadTexts: cesPortType.setDescription('This object represents port type whether it is carrying subrate circuits. structured : This is for SDT(Structured Data Transfer). This type of port supports following features: * intended to emulate point-to-point fractional DS1 or E1 circuit. * Synchronous timing * Fractional(Nx64 Kbps)DS1/E1 service (Contiguous timeslots only).You can map an Nx64 Kbps channel to any Virtual Channel(VC). unstructured : This is for unstructured data transfer(UDT) All the DS0 time slots are allocated. This type of port supports following features: * intended to emulate point-to-point DS1 or E1 circuit. * Synchronous and Asynchronous timing framingOnVcDisconnect : similar to unstructured during normal operation. In case of channel failure line data will be looped back towards line. strau : only one DS0 time slot is allocated. The value strau(4) value is not supported in CESM-8T1/E1 or CESM-T3E3. CESM-T3E3 card supports value unstructured(2) only.')
cesPortDs0ConfigBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortDs0ConfigBitMap.setStatus('current')
if mibBuilder.loadTexts: cesPortDs0ConfigBitMap.setDescription('This represents bit map of DS0s for a line which are used to form this logical port. Bit 0 represents DS0-1.')
cesPortNumOfDs0Slot = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortNumOfDs0Slot.setStatus('current')
if mibBuilder.loadTexts: cesPortNumOfDs0Slot.setDescription('This represents number of DS0 time slots configured to this Port. If the cesPortType is strau(4), then this can not have more than 1 DS0 time slot.')
cesPortNumOfSCIPerDS0 = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortNumOfSCIPerDS0.setStatus('current')
if mibBuilder.loadTexts: cesPortNumOfSCIPerDS0.setDescription('This object represents number of subcircuit in the DS0 time slot. This is applicable only when cesPortType is strau(4). 8 = there are 8 no .of 8kbps links (1 bit) 4 = there are 4 no .of 16kbps links (2 bit) 2 = there are 2 no .of 32kbps links (4 bit) Currently not supported in CESM-8.')
cesPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 44736))).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortSpeed.setStatus('current')
if mibBuilder.loadTexts: cesPortSpeed.setDescription('This object identifies the configured speed of port. Max speed for T1 = 1544 Max speed for E1 = 2038 Max speed for T3 = 44736 Max speed for E3 = 34368.')
cesPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notConfigured", 1), ("active", 2), ("remoteLoopback", 3), ("failedDueToLine", 4), ("failedDueToSignalling", 5), ("inactive", 6), ("inBert", 7), ("farEndRemoteLoopback", 8))).clone('notConfigured')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortState.setStatus('current')
if mibBuilder.loadTexts: cesPortState.setDescription('This variable indicates the state of the logical port. The possible values are : notConfigured (1) : Port is not configured active (2) : Port is in active state remoteLoopback (3) : Remote Loopback is set failedDueToLine(4) : Port failed due to some failure in physical line failedDueToSignalling(5) : Port failed due to some Signalling issues. inactive (6) : Port is not active inBert (7) : Bit Error Rate Test(BERT) in progress. farEndRemoteLoopback(8): Far End is in loopback.')
cesPortBERTEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cesPortBERTEnable.setStatus('current')
if mibBuilder.loadTexts: cesPortBERTEnable.setDescription('This variable enables/disables BERT. This object is not supported in CESM-T3E3.')
cesPortNextAvailable = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortNextAvailable.setStatus('current')
if mibBuilder.loadTexts: cesPortNextAvailable.setDescription("This variable contains the next UNUSED logical port number of the possible 32 DS0s * n ports. This number can be used in channel config table, the cesportNextAvailable gets updated if the number gets used to create a logical port. A '0' indicates that no more ports are available.")
cesPortsUsedLine1 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine1.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine1.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 1')
cesPortsUsedLine2 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine2.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine2.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 2.')
cesPortsUsedLine3 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine3.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine3.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 3')
cesPortsUsedLine4 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine4.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine4.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1. This is for line 4')
cesPortsUsedLine5 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine5.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine5.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 5')
cesPortsUsedLine6 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine6.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine6.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 6')
cesPortsUsedLine7 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine7.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine7.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 7')
cesPortsUsedLine8 = MibScalar((1, 3, 6, 1, 4, 1, 351, 110, 5, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cesPortsUsedLine8.setStatus('current')
if mibBuilder.loadTexts: cesPortsUsedLine8.setDescription('Each bits set represents a DS0 that is used by all the logical ports defined so far for that DS1, the most significant byte is invalid for DS1 This is for line 8')
ciscoWanCesPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 40, 2))
ciscoWanCesPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1))
ciscoWanCesPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 2))
ciscoWanCesPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 2, 1)).setObjects(("CISCO-WAN-CES-PORT-MIB", "ciscoWanCesPortConfGroup"), ("CISCO-WAN-CES-PORT-MIB", "ciscoWanCesPortDs0InDs1Group"), ("CISCO-WAN-CES-PORT-MIB", "ciscoWanCesPortsUsedGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortCompliance = ciscoWanCesPortCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCesPortCompliance.setDescription('The compliance statement for objects related to CES Logical Ports.')
ciscoWanCesPortsUsedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1, 1)).setObjects(("CISCO-WAN-CES-PORT-MIB", "cesPortNextAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortsUsedGroup = ciscoWanCesPortsUsedGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCesPortsUsedGroup.setDescription('The collection of objects which are applicable for general information about logical ports.')
ciscoWanCesPortConfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1, 2)).setObjects(("CISCO-WAN-CES-PORT-MIB", "cesPortNum"), ("CISCO-WAN-CES-PORT-MIB", "cesPortRowStatus"), ("CISCO-WAN-CES-PORT-MIB", "cesPortLineNum"), ("CISCO-WAN-CES-PORT-MIB", "cesPortType"), ("CISCO-WAN-CES-PORT-MIB", "cesPortDs0ConfigBitMap"), ("CISCO-WAN-CES-PORT-MIB", "cesPortNumOfDs0Slot"), ("CISCO-WAN-CES-PORT-MIB", "cesPortNumOfSCIPerDS0"), ("CISCO-WAN-CES-PORT-MIB", "cesPortSpeed"), ("CISCO-WAN-CES-PORT-MIB", "cesPortState"), ("CISCO-WAN-CES-PORT-MIB", "cesPortBERTEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortConfGroup = ciscoWanCesPortConfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCesPortConfGroup.setDescription('The collection of objects which are used to represent Circuit Emulation Service Port information.')
ciscoWanCesPortDs0InDs1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 40, 2, 1, 3)).setObjects(("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine1"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine2"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine3"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine4"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine5"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine6"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine7"), ("CISCO-WAN-CES-PORT-MIB", "cesPortsUsedLine8"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoWanCesPortDs0InDs1Group = ciscoWanCesPortDs0InDs1Group.setStatus('current')
if mibBuilder.loadTexts: ciscoWanCesPortDs0InDs1Group.setDescription('The collection of objects related to information on DS0 time slots used in each DS1 line.')
mibBuilder.exportSymbols("CISCO-WAN-CES-PORT-MIB", cesPortNum=cesPortNum, ciscoWanCesPortCompliance=ciscoWanCesPortCompliance, PYSNMP_MODULE_ID=ciscoWanCesPortMIB, cesPortDs0ConfigBitMap=cesPortDs0ConfigBitMap, cesmPort=cesmPort, cesPortsUsedLine8=cesPortsUsedLine8, ciscoWanCesPortsUsedGroup=ciscoWanCesPortsUsedGroup, cesmPortCnfGrpTable=cesmPortCnfGrpTable, cesmPortCnfGrp=cesmPortCnfGrp, cesPortNextAvailable=cesPortNextAvailable, cesPortsUsedLine5=cesPortsUsedLine5, ciscoWanCesPortMIBConformance=ciscoWanCesPortMIBConformance, ciscoWanCesPortConfGroup=ciscoWanCesPortConfGroup, cesPortsUsedLine6=cesPortsUsedLine6, ciscoWanCesPortMIBGroups=ciscoWanCesPortMIBGroups, cesPortState=cesPortState, cesPortsUsedLine3=cesPortsUsedLine3, cesPortBERTEnable=cesPortBERTEnable, cesPortSpeed=cesPortSpeed, cesmPortCnfGrpEntry=cesmPortCnfGrpEntry, cesPortsUsedLine4=cesPortsUsedLine4, cesPortsUsedLine7=cesPortsUsedLine7, cesPortType=cesPortType, cesPortNumOfDs0Slot=cesPortNumOfDs0Slot, cesPortLineNum=cesPortLineNum, cesPortRowStatus=cesPortRowStatus, cesPortsUsedLine1=cesPortsUsedLine1, ciscoWanCesPortMIBCompliances=ciscoWanCesPortMIBCompliances, ciscoWanCesPortDs0InDs1Group=ciscoWanCesPortDs0InDs1Group, ciscoWanCesPortMIB=ciscoWanCesPortMIB, cesPortsUsedLine2=cesPortsUsedLine2, cesPortNumOfSCIPerDS0=cesPortNumOfSCIPerDS0)
