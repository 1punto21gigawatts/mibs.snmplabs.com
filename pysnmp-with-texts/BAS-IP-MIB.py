#
# PySNMP MIB module BAS-IP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAS-IP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:33:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
basExtIp, BasLogicalPortId, BasInterfaceId, BasChassisId, BasCardClass, BasSlotId = mibBuilder.importSymbols("BAS-MIB", "basExtIp", "BasLogicalPortId", "BasInterfaceId", "BasChassisId", "BasCardClass", "BasSlotId")
IANAifType, = mibBuilder.importSymbols("IANAifType-MIB", "IANAifType")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, ObjectIdentity, TimeTicks, Bits, Integer32, ModuleIdentity, Counter32, NotificationType, iso, Counter64, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "TimeTicks", "Bits", "Integer32", "ModuleIdentity", "Counter32", "NotificationType", "iso", "Counter64", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
basIpMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1))
if mibBuilder.loadTexts: basIpMib.setLastUpdated('9810071415Z')
if mibBuilder.loadTexts: basIpMib.setOrganization('Broadband Access Systems')
if mibBuilder.loadTexts: basIpMib.setContactInfo(' Tech Support Broadband Access Systems 201 Forest Street Marlboro, MA 01752 U.S.A. 508-485-8200 support@basystems.com')
if mibBuilder.loadTexts: basIpMib.setDescription('This module defines extensions to the IP MIB objects for Broadband Access Systems.')
basIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1))
basIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1), )
if mibBuilder.loadTexts: basIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: basIpAddrTable.setDescription("The table of addressing information relevant to this entity's IP addresses.")
basIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1), ).setIndexNames((0, "BAS-IP-MIB", "basIpAdEntChassis"), (0, "BAS-IP-MIB", "basIpAdEntSlot"), (0, "BAS-IP-MIB", "basIpAdEntIf"), (0, "BAS-IP-MIB", "basIpAdEntLPort"), (0, "BAS-IP-MIB", "basIpAdEntAddr"))
if mibBuilder.loadTexts: basIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: basIpAddrEntry.setDescription("The addressing information for one of this entity's IP addresses.")
basIpAdEntChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 1), BasChassisId())
if mibBuilder.loadTexts: basIpAdEntChassis.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntChassis.setDescription('The BAS Chassis ID of the Route Server.')
basIpAdEntSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 2), BasSlotId())
if mibBuilder.loadTexts: basIpAdEntSlot.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntSlot.setDescription('The BAS Slot ID of the Route Server.')
basIpAdEntIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 3), BasInterfaceId())
if mibBuilder.loadTexts: basIpAdEntIf.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntIf.setDescription('The BAS interface ID of the Route Server.')
basIpAdEntLPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 4), BasLogicalPortId())
if mibBuilder.loadTexts: basIpAdEntLPort.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntLPort.setDescription('The BAS logical port ID of the Route Server.')
basIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntAddr.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
basIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntIfIndex.setDescription("The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of RFC 1573's ifIndex.")
basIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
basIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
basIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpAdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
basIpAdEntStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: basIpAdEntStatus.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntStatus.setDescription('The row status object used to create and delete a conceptual row according to RowStatus conventions.')
basIpAdEntCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 11), BasCardClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: basIpAdEntCardType.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntCardType.setDescription('The card type inserted in a particular slot')
basIpAdEntPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3493, 2, 3, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: basIpAdEntPriority.setStatus('current')
if mibBuilder.loadTexts: basIpAdEntPriority.setDescription('IP address priority, 1 = primary, 2 and above secondary. Cannot be set to 0.')
mibBuilder.exportSymbols("BAS-IP-MIB", basIpAdEntStatus=basIpAdEntStatus, basIpAdEntNetMask=basIpAdEntNetMask, basIpAdEntIfIndex=basIpAdEntIfIndex, basIpAdEntLPort=basIpAdEntLPort, basIpAdEntReasmMaxSize=basIpAdEntReasmMaxSize, basIp=basIp, PYSNMP_MODULE_ID=basIpMib, basIpAdEntAddr=basIpAdEntAddr, basIpAddrEntry=basIpAddrEntry, basIpAdEntBcastAddr=basIpAdEntBcastAddr, basIpAdEntSlot=basIpAdEntSlot, basIpAdEntPriority=basIpAdEntPriority, basIpMib=basIpMib, basIpAdEntChassis=basIpAdEntChassis, basIpAdEntIf=basIpAdEntIf, basIpAddrTable=basIpAddrTable, basIpAdEntCardType=basIpAdEntCardType)
