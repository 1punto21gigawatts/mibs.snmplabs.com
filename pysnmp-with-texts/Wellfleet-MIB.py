#
# PySNMP MIB module Wellfleet-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WELLFLEET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:36:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, enterprises, Counter64, TimeTicks, Gauge32, NotificationType, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, ModuleIdentity, Integer32, MibIdentifier, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "enterprises", "Counter64", "TimeTicks", "Gauge32", "NotificationType", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "ModuleIdentity", "Integer32", "MibIdentifier", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wellfleet = MibIdentifier((1, 3, 6, 1, 4, 1, 18))
commServer = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1))
wfMib = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1))
wfXns = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 6))
wfDrs = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 29))
wfBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 31))
wfTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 32))
wfApple = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34))
wfConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 35))
wfIpx = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 41))
wfxnsMib = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1))
wfxnsidp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1))
wfxnsidpForwarding = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("host", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpForwarding.setDescription('Indicates whether the node is a router.')
wfxnsidpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpInReceives.setDescription(' Contains the total number of all IDP datagrams (including those received in error) received from all interfaces.')
wfxnsidpInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpInHdrErrors.setDescription('Contains the number of IDP datagrams discarded because of errors in their IDP headers. Such errors include bad checksums, format errors and bad hop counts. ')
wfxnsidpInAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpInAddrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpInAddrErrors.setDescription('The number of IDP datagrams discarded because of invalid destination fields. ')
wfxnsidpForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpForwDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpForwDatagrams.setDescription('The number of received IDP datagrams not addressed to the XNS router. The router attempts to forward these datagrams to their ultimate destination. ')
wfxnsidpInUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpInUnknownProtos.setDescription('The number of IDP datagrams discarded because of an invalid protocol field.')
wfxnsidpInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpInDiscards.setDescription('The number of input IDP datagrams discarded because of of insufficient Server resources. ')
wfxnsidpInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpInDelivers.setDescription('The number of IDP datagrams delivered to the IDP user protocols. (Error, Echo, RIP). ')
wfxnsidpOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpOutRequests.setDescription('The number of IDP datagrams generated by the local IDP user protocols. ')
wfxnsidpOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpOutDiscards.setDescription('The number of output IDP datagrams discarded because of of insufficient Server resources. ')
wfxnsidpOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpOutNoRoutes.setDescription('The number of IDP datagrams discarded because no route could be found for their destination. ')
wfxnsidpErrs = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12))
wfxnsidpErrSupressed = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrSupressed.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrSupressed.setDescription('The number of packet dropped because their length is below minimum. ')
wfxnsidpErrDestUnspec = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestUnspec.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestUnspec.setDescription('The number of destination-host-generated Error packets with an Error Number of 0 relayed by the router. This indicates an IDP packet rejected for unspecified reasons.')
wfxnsidpErrDestHdrLen = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestHdrLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestHdrLen.setDescription('The number of packets rejected by a destination host because the packet header was of insufficient length.')
wfxnsidpErrDestProto = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestProto.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestProto.setDescription('The number of packets rejected by a destination host because the protocol type field contained an invalid or unknown value.')
wfxnsidpErrDestCksum = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestCksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestCksum.setDescription('The number of packets rejected by a destination host because of a faulty or corrupted IDP checksum.')
wfxnsidpErrDestBadSock = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestBadSock.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestBadSock.setDescription('The number of packets rejected by a destination host because the packet was addressed to an unknown socket.')
wfxnsidpErrDestNoResrcs = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestNoResrcs.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestNoResrcs.setDescription('The number of packets rejected by a destination host because of a lack of processing resources.')
wfxnsidpErrDestXitUnspec = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrDestXitUnspec.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrDestXitUnspec.setDescription('The number of packets rejected by the router for unspecified reasons.')
wfxnsidpErrXitCksum = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrXitCksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrXitCksum.setDescription('The number of packets rejected by the router because of a faulty or corrupted checksum.')
wfxnsidpErrXitUnreach = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrXitUnreach.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrXitUnreach.setDescription('The number of packets rejected by the router because the destination is unreachable.')
wfxnsidpErrXitHopCnt = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrXitHopCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrXitHopCnt.setDescription('The number of packets rejected by the router becuase the packet had passed through more than the maximum number of routers before arriving at its destination.')
wfxnsidpErrXitTooBig = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 12, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpErrXitTooBig.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpErrXitTooBig.setDescription('The number of packets rejected by the router becuase the packet was too long for the router to relay.')
wfxnsidpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 13), )
if mibBuilder.loadTexts: wfxnsidpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpAddrTable.setDescription('The IDP Address table. ')
wfxnsidpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 13, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfxnsidpAddrAddress"))
if mibBuilder.loadTexts: wfxnsidpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpAddrEntry.setDescription('An entry in the IDP address table.')
wfxnsidpAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpAddrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpAddrAddress.setDescription('The IDP network number. ')
wfxnsidpAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpAddrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpAddrIfIndex.setDescription('The interface index. ')
wfxnsidpRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14), )
if mibBuilder.loadTexts: wfxnsidpRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRoutingTable.setDescription('The XNS IDP routing table.')
wfxnsidpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfxnsidpRouteDest"))
if mibBuilder.loadTexts: wfxnsidpRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteEntry.setDescription('Information about a routing table entry. ')
wfxnsidpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteDest.setDescription('The destination network. ')
wfxnsidpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteIfIndex.setDescription('An index to the next hop interface. ')
wfxnsidpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteMetric.setDescription('The RIP hop count to the destination. 0 means the host is locally attached. ')
wfxnsidpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteNextHop.setDescription('The host address of the next hop gateway. ')
wfxnsidpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteType.setDescription('Indicates whether the route was statically configured, direct or learned via RIP. ')
wfxnsidpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteProto.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteProto.setDescription('The actual routing protocol used to determine the route.')
wfxnsidpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 6, 1, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfxnsidpRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfxnsidpRouteAge.setDescription('The age (in seconds) of the route. ')
wfdrsState = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsState.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsState.setDescription('Indicates the state of the router.')
wfdrsArea = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsArea.setDescription('The number of the local DECNET area.')
wfdrsNode = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNode.setDescription('The DECNET node number.')
wfdrsRouting = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsRouting.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsRouting.setDescription(' / tbs /')
wfdrsMaxArea = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsMaxArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsMaxArea.setDescription('The maximum number of areas in the network.')
wfdrsMaxNode = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsMaxNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsMaxNode.setDescription('The maximum number of nodes in any area.')
wfdrsAreaMaxHop = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaMaxHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaMaxHop.setDescription('Maximum number of areas a packet can transit from source to destination.')
wfdrsAreaMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaMaxCost.setDescription('The maximum area-to-area transit cost.')
wfdrsNodeMaxHop = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeMaxHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeMaxHop.setDescription('The maximum number of hops a packet can transit from source to destination.')
wfdrsNodeMaxCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeMaxCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeMaxCost.setDescription('The maximum node-to-node transit cost.')
wfdrsMaxVisits = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsMaxVisits.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsMaxVisits.setDescription('Maximum number of times packet can transit the same router.')
wfdrsRoutingTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsRoutingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsRoutingTimer.setDescription('Time interval between topology packets on non-broadcast media.')
wfdrsBcastRoutTimer = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsBcastRoutTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsBcastRoutTimer.setDescription('Time interval between topology packets on bradcast media.')
wfdrsBcastEnodeAdj = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsBcastEnodeAdj.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsBcastEnodeAdj.setDescription('Maximum number of adjacent nodes')
wfdrsIfTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15), )
if mibBuilder.loadTexts: wfdrsIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTable.setDescription('The DECNET Interface table. ')
wfdrsIfTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfdrsIfTabEntIfIndex"))
if mibBuilder.loadTexts: wfdrsIfTabEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntry.setDescription('An entry in the DECNET interface table. ')
wfdrsIfTabEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntIfIndex.setDescription('The router assigned interface number. ')
wfdrsIfTabEntState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntState.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntState.setDescription('The state of the interface. ')
wfdrsIfTabEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntName.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntName.setDescription('The circuit group name for this interface. ')
wfdrsIfTabEntCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntCost.setDescription('The DECNET circuit cost for this interface. ')
wfdrsIfTabEntHelloTimr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntHelloTimr.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntHelloTimr.setDescription('The time interval between DECNET hello packets.')
wfdrsIfTabEntRtrPrior = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntRtrPrior.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntRtrPrior.setDescription(' The router priority.')
wfdrsIfTabEntNumRtrs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsIfTabEntNumRtrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsIfTabEntNumRtrs.setDescription('Maximum number of adjacent routers on this interface.')
wfdrsAreaRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16), )
if mibBuilder.loadTexts: wfdrsAreaRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRoutingTable.setDescription('The level 2 (area) routing table. ')
wfdrsAreaRoute = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfdrsAreaRouteDest"))
if mibBuilder.loadTexts: wfdrsAreaRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRoute.setDescription('Information about a route to an area. ')
wfdrsAreaRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRouteDest.setDescription('Destination area. ')
wfdrsAreaRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaRouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRouteCost.setDescription('Aggregate cost to reach destination area.')
wfdrsAreaRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaRouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRouteHopCount.setDescription('Number of hops to reach destination area.')
wfdrsAreaRouteNextArea = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaRouteNextArea.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRouteNextArea.setDescription('The next area to forward the packet. ')
wfdrsAreaRouteNextNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaRouteNextNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRouteNextNode.setDescription('The next node to forward the packet to.')
wfdrsAreaRouteIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsAreaRouteIf.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsAreaRouteIf.setDescription('The interface to forward the packet on.')
wfdrsNodeRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17), )
if mibBuilder.loadTexts: wfdrsNodeRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRoutingTable.setDescription('The level 1 (node) routing table. ')
wfdrsNodeRoute = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfdrsNodeRouteDest"))
if mibBuilder.loadTexts: wfdrsNodeRoute.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRoute.setDescription('Information about how to reach an node within the area. ')
wfdrsNodeRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRouteDest.setDescription('The destination node number.')
wfdrsNodeRouteCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeRouteCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRouteCost.setDescription('The aggregate cost to the destination node.')
wfdrsNodeRouteHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeRouteHopCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRouteHopCount.setDescription('Number of hops to destination node.')
wfdrsNodeRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRouteNextHop.setDescription('The node number of the next hop.')
wfdrsNodeRouteIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 29, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfdrsNodeRouteIf.setStatus('mandatory')
if mibBuilder.loadTexts: wfdrsNodeRouteIf.setDescription('The interface index of the next hop.')
wflbFwdTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1), )
if mibBuilder.loadTexts: wflbFwdTable.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdTable.setDescription("The bridge modules's table of MAC address-interface mappings.")
wflbFwdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1), ).setIndexNames((0, "Wellfleet-MIB", "wflbFwdEntMacAddr"))
if mibBuilder.loadTexts: wflbFwdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntry.setDescription('Each entry describes one MAC address-interface mapping; that is, each entry describes a station which has been or is being learned.')
wflbFwdEntIf = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbFwdEntIf.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntIf.setDescription('A number identifying the interface on which the station addressed by wflbFwdEntMacAddr was learned. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wflbFwdEntMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbFwdEntMacAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntMacAddr.setDescription('The MAC-level (physical) address of the station described by this wflbFwdEntry.')
wflbFwdEntSrcDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbFwdEntSrcDisp.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntSrcDisp.setDescription('Identifies the disposition of frames containing wflbFwdEntMacAddr as the source address field of the frame. 0 signifies drop; 1 signifies forward.')
wflbFwdEntDstDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbFwdEntDstDisp.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntDstDisp.setDescription('Identifies the disposition of frames containing wflbFwdEntMacAddr as the destination address field of the frame. 0 signifies drop; 1 signifies forward.')
wflbFwdEntIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbFwdEntIfName.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntIfName.setDescription('A text string contining the circuit group name of interface wflbFwdEntIf.')
wflbFwdEntFloodStat = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 1), ("flooding", 2), ("dropping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbFwdEntFloodStat.setStatus('mandatory')
if mibBuilder.loadTexts: wflbFwdEntFloodStat.setDescription('Denotes whether frames destined for wflbFwdEntMacAddr are being flooded or dropped if the MAC Address-interface mapping for wflbFwdEntMacAddr has not yet been learned. If the value of wflbFwdEntFloodStat is forwarding(1), the MAC Address-interface mapping has been learned.')
wflbRifTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2), )
if mibBuilder.loadTexts: wflbRifTable.setStatus('mandatory')
if mibBuilder.loadTexts: wflbRifTable.setDescription("The bridge modules's source routing RIF (Routing Information Field) table.")
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1) + (1000, ), Integer32())
pysmiFakeCol1001 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1) + (1001, ), Integer32())
pysmiFakeCol1002 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1) + (1002, ), Integer32())
pysmiFakeCol1003 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1) + (1003, ), Integer32())
pysmiFakeCol1004 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1) + (1004, ), Integer32())
pysmiFakeCol1005 = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1) + (1005, ), Integer32())
wflbRifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1), ).setIndexNames((0, "Wellfleet-MIB", "pysmiFakeCol1000"), (0, "Wellfleet-MIB", "pysmiFakeCol1001"), (0, "Wellfleet-MIB", "pysmiFakeCol1002"), (0, "Wellfleet-MIB", "pysmiFakeCol1003"), (0, "Wellfleet-MIB", "pysmiFakeCol1004"), (0, "Wellfleet-MIB", "pysmiFakeCol1005"))
if mibBuilder.loadTexts: wflbRifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wflbRifEntry.setDescription('Each entry contains a RIF cache for a network node. The table is indexed by an arbitrary set of 6 integers.')
wflbRifMacSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbRifMacSrcAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wflbRifMacSrcAddress.setDescription('The MAC-level (physical) address of the source interface.')
wflbRifMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbRifMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wflbRifMacAddress.setDescription('The MAC-level (physical) address of the destination interface.')
wflbRifCg = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbRifCg.setStatus('mandatory')
if mibBuilder.loadTexts: wflbRifCg.setDescription('The name of the circuit group that connects the source interface to token ring.')
wflbRif = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 31, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wflbRif.setStatus('mandatory')
if mibBuilder.loadTexts: wflbRif.setDescription('A description of the path used to source route packets between the source route and the destination. The first two bytes contain the routing control (RC) field that describes the routing type, field length, direction bit and largest frame size as follows. bits 1-2: RIF type 00: Specifically Routed Frame (SRF) 11: Spanning Tree Explorer (STE) 10: All Routes Explorer (ARE) bit 3: Reserved bits 4-8: Length of RIF Maximum = 18 bytes bit 9: Direction that frames traverses LAN 0: Forward 1: Reverse bits 10-12: Largest Frame size for this route Maximum is 4472 bytes bits 13-16: Reserved Next are a series of two-byte route descriptors; each contains a 12-bit LAN ID followed by a 4-bit bridge ID number which indicate the next hop in the route.')
wftftpFilesIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpFilesIn.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpFilesIn.setDescription('The number of successful transfers of files to this entity since the system was last initialized.')
wftftpFilesOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpFilesOut.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpFilesOut.setDescription('The number of successful transfers of files from this entity since the system was last initialized.')
wftftpWRQIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpWRQIn.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpWRQIn.setDescription('The number of WRQ PDUs received by the TFTP entity since the system was last initialized. This is the number of requests to deposit a file made by a remote TFTP client.')
wftftpWRQOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpWRQOut.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpWRQOut.setDescription('The number of WRQ PDUs sent by the TFTP entity since the system was last initialized. This is the number of requests made by this system to send a file to a remote TFTP client.')
wftftpRRQIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpRRQIn.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpRRQIn.setDescription('The number of RRQ PDUs received by the TFTP entity since the system was last initialized. This is the number of requests to retreive a file made by a remote TFTP client.')
wftftpRRQOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpRRQOut.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpRRQOut.setDescription('The number of RRQ PDUs sent by the TFTP entity since the system was last initialized. This is the number of requests made by this system to retrieve a file from a remote TFTP client.')
wftftpRxmits = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpRxmits.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpRxmits.setDescription('The number of TFTP PDUs that have been retransmitted by this entity.')
wftftpERRIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpERRIn.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpERRIn.setDescription('The number of ERR PDUs received by the TFTP entity since the system was last initialized.')
wftftpERROut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpERROut.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpERROut.setDescription('The number of ERR PDUs sent by the TFTP entity since the system was last initialized.')
wftftpAborts = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 32, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wftftpAborts.setStatus('mandatory')
if mibBuilder.loadTexts: wftftpAborts.setDescription('The number of unsuccessful TFTP file transfer that have been abnormally terminated.')
wfappleStation = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 1))
wfappleStationRouting = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleStationRouting.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleStationRouting.setDescription('Indicates whether this entity is routing (i.e., forwarding) AppleTalk datagrams. 1 signifies forwarding; 0 not forwarding.')
wfappleStationVersion = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleStationVersion.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleStationVersion.setDescription('The version number of the AppleTalk protocol supported by this entity (i.e., Wellfleet supports Version 2).')
wfapplePortTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2), )
if mibBuilder.loadTexts: wfapplePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortTable.setDescription('The wfapplePortTable is a table of per-interface AppleTalk Configuration parameters. An interface will have a corresponding entry in this table only if AppleTalk routing is defined for that interface.')
wfapplePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfapplePortIfIndex"))
if mibBuilder.loadTexts: wfapplePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortEntry.setDescription('Each entry describes an interface of the AppleTalk Router.')
wfapplePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortIfIndex.setDescription('A number identifying the interface described by this wfapplePortEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfapplePortSeed = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortSeed.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortSeed.setDescription("Describes whether this interface was configured as a 'seed' port. 1 indicates a seed port; 0 a non-seed port.")
wfapplePortMinNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortMinNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortMinNet.setDescription('The minimum network number in the range of network numbers assigned to this interface.')
wfapplePortMaxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortMaxNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortMaxNet.setDescription('The maximum network number in the range of network numbers assigned to this interface.')
wfapplePortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortNetwork.setDescription('The network number within the range wfapplePortMinNet to wfapplePortMaxNet which is assigned to the network attached to this interface.')
wfapplePortNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortNodeID.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortNodeID.setDescription('The node identification which denotes this AppleTalk entity on network wfapplePortNetwork. The pair (wfapplePortNetwork, wfapplePortNodeID) constitutes a complete AppleTalk address.')
wfapplePortDefaultZone = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfapplePortDefaultZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfapplePortDefaultZone.setDescription('The name of the default zone for this interface (a zero-length string means that no default zone was assigned to this interface.')
wfappleDDP = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3))
wfappleDDPPktsIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPPktsIn.setDescription('The total number of DDP packets received by this entity.')
wfappleDDPPktsOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPPktsOut.setDescription('The total number of DDP packets transmitted by this entity.')
wfappleDDPPktsFwd = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPPktsFwd.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPPktsFwd.setDescription('The total number of DDP packets forwarded by this entity.')
wfappleDDPDelivers = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPDelivers.setDescription('The total number of DDP packets received by this entity which were delivered to a higher-layer AppleTalk protocol for processing.')
wfappleDDPUnknownNet = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPUnknownNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPUnknownNet.setDescription('The total number of DDP packets discarded by this entity because the destination network to which the packet was directed was unknown.')
wfappleDDPHopsExceeded = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPHopsExceeded.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPHopsExceeded.setDescription("The total number of DDP packets discarded by this entity because the packet's hop count exceeded 15.")
wfappleDDPBadChksum = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPBadChksum.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPBadChksum.setDescription('The total number of DDP packets discarded by this entity because the contained an incorrect DDP checksum.')
wfappleDDPDropped = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleDDPDropped.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleDDPDropped.setDescription('The total number of DDP packets discarded by this entity.')
wfappleEcho = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 4))
wfappleEchoRequestIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleEchoRequestIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleEchoRequestIn.setDescription('The number of AEP Echo Request Packets received by this entity.')
wfappleEchoResponseOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleEchoResponseOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleEchoResponseOut.setDescription('The number of AEP Echo Response Packets sent by this entity.')
wfappleRTMP = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 5))
wfappleRTMPRequestIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRTMPRequestIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRTMPRequestIn.setDescription('The total number of RTMP Request packets received by this entity.')
wfappleRTMPResponseOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRTMPResponseOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRTMPResponseOut.setDescription('The total number of RTMP Response packets transmitted by this entity.')
wfappleRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6), )
if mibBuilder.loadTexts: wfappleRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRoutingTable.setDescription('The AppleTalk Routing Table contains an entry for each AppleTalk Route known to this entity.')
wfappleRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfappleRouteMinNet"))
if mibBuilder.loadTexts: wfappleRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteEntry.setDescription('A route to a particular AppleTalk destination.')
wfappleRouteMinNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteMinNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteMinNet.setDescription("The minimum network number in the destination's network number range.")
wfappleRouteMaxNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteMaxNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteMaxNet.setDescription("The maximum network number in the destination's network number range.")
wfappleRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfappleRouteDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteDistance.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteDistance.setDescription('The AppleTalk routing metric for this route.')
wfappleRouteNextNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteNextNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteNextNet.setDescription('The network number of the Next Hop Router for this destination.')
wfappleRouteNextNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteNextNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteNextNode.setDescription('The node identification of the Next Hop Router for this destination.')
wfappleRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleRouteState.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleRouteState.setDescription('The status of this route. Valid routes are marked Good (2); invalidated or timed-out routes (if present) are marked Bad (0); a Suspect route (1) is still valid for routing but has been noted as marginal.')
wfappleNBP = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 7))
wfappleNBPFwdReqOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleNBPFwdReqOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleNBPFwdReqOut.setDescription('The number of NBP Forward Request packets transmitted by this entity.')
wfappleNBPLookupOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleNBPLookupOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleNBPLookupOut.setDescription('The number of NBP Lookup packets transmitted by this entity.')
wfappleNBPBcastReqIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleNBPBcastReqIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleNBPBcastReqIn.setDescription('The number of NBP Broadcast Request packets received by this entity.')
wfappleNBPFwdReqIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleNBPFwdReqIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleNBPFwdReqIn.setDescription('The number of NBP Forward Request packets received by this entity.')
wfappleZIP = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8))
wfappleZIPRequestOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPRequestOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPRequestOut.setDescription('The number of Zone Information Protocol (ZIP) Request packets transmitted by this entity.')
wfappleZIPReplyOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPReplyOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPReplyOut.setDescription('The number of Zone Information Protocol (ZIP) Reply packets transmitted by this entity.')
wfappleZIPNetInfoRepOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPNetInfoRepOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPNetInfoRepOut.setDescription('The number of ZIP GetNetInfo Reply packets transmitted by this entity.')
wfappleZIPGetLclZoneOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetLclZoneOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetLclZoneOut.setDescription('The number of ZIP GetLocalZones packets transmitted by this entity.')
wfappleZIPGetLclZoneRepOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetLclZoneRepOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetLclZoneRepOut.setDescription('The number of ZIP GetLocalZones Reply packets transmitted by this entity.')
wfappleZIPGetZoneListOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetZoneListOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetZoneListOut.setDescription('The number of ZIP GetZoneList packets transmitted by this entity.')
wfappleZIPGetNetInfoOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetNetInfoOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetNetInfoOut.setDescription('The number of ZIP GetNetInfo packets transmitted by this entity.')
wfappleZIPGetNetInfoIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetNetInfoIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetNetInfoIn.setDescription('The number of ZIP GetNetInfo packets received by this entity.')
wfappleZIPNetInfoRepIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPNetInfoRepIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPNetInfoRepIn.setDescription('The number of ZIP GetNetInfo Reply packets received by this entity.')
wfappleZIPRequestIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPRequestIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPRequestIn.setDescription('The number of ZIP Request packets received by this entity.')
wfappleZIPReplyIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPReplyIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPReplyIn.setDescription('The number of ZIP Reply packets received by this entity.')
wfappleZIPGetZoneListIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetZoneListIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetZoneListIn.setDescription('The number of ZIP GetZoneList packets received by this entity.')
wfappleZIPGetLclZoneIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetLclZoneIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetLclZoneIn.setDescription('The number of ZIP GetLocalZones packets received by this entity.')
wfappleZIPGetLclZoneRepIn = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 8, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleZIPGetLclZoneRepIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleZIPGetLclZoneRepIn.setDescription('The number of ZIP GetLocalZones Reply packets received by this entity.')
wfappleLocalZoneTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 9), )
if mibBuilder.loadTexts: wfappleLocalZoneTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleLocalZoneTable.setDescription('A list of all the zone names for the network to which the entity is connected.')
wfappleLZTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 9, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfappleLZTIfIndex"))
if mibBuilder.loadTexts: wfappleLZTEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleLZTEntry.setDescription('Each entry associates a zone name with an interface.')
wfappleLZTZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 9, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleLZTZoneName.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleLZTZoneName.setDescription('The name of an AppleTalk zone associated with a particular interface of the AppleTalk router.')
wfappleLZTIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleLZTIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleLZTIfIndex.setDescription('The interface to the network with which the named zone is associated. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
wfappleAARPTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 10), )
if mibBuilder.loadTexts: wfappleAARPTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleAARPTable.setDescription('The AppleTalk Address Resolution Protocol Table used for mapping from AppleTalk Net/Node addresses to physical addresses.')
wfappleAARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 10, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfappleAARPNet"), (0, "Wellfleet-MIB", "wfappleAARPNode"))
if mibBuilder.loadTexts: wfappleAARPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleAARPEntry.setDescription("Each entry contains one AppleTalk Net/Node address to 'physical' address equivalence.")
wfappleAARPNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleAARPNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleAARPNet.setDescription('The network number of the AppleTalk entity described by this address equivalence.')
wfappleAARPNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleAARPNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleAARPNode.setDescription('The node identification of the AppleTalk entity described by this address equivalence.')
wfappleAARPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleAARPMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleAARPMacAddress.setDescription("The media-dependent 'physical' address of this AppleTalk entity.")
wfappleAARPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 34, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfappleAARPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfappleAARPIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
wfconfigVersionMajor = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigVersionMajor.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigVersionMajor.setDescription('The Major Version Number of the Software Release running in the Communications Server.')
wfconfigVersionMinor = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigVersionMinor.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigVersionMinor.setDescription('The Minor Version Number of the Software Release running in the Communications Server.')
wfconfigImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigImageFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigImageFileName.setDescription('The name of the binary load image file from which the Communications Server was loaded.')
wfconfigConfigFileName = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigConfigFileName.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigConfigFileName.setDescription('The name of the text file from which the current configuration of the Communications Server was read.')
wfconfigKeys = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5))
wfconfigKeysBridge = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigKeysBridge.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigKeysBridge.setDescription("Indicates whether the Bridge software option is active in the Communications Server's software configuration. 0 indicates that the option is absent; 1 that it is present.")
wfconfigKeysDrs = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigKeysDrs.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigKeysDrs.setDescription("Indicates whether the DecNet routing software option is active in the Communications Server's software configuration. 0 indicates that the option is absent; 1 that it is present.")
wfconfigKeysIp = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigKeysIp.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigKeysIp.setDescription("Indicates whether the Ip routing software option is active in the Communications Server's software configuration. 0 indicates that the option is absent; 1 that it is present.")
wfconfigKeysX25 = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigKeysX25.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigKeysX25.setDescription("Indicates whether the X.25 software option is active in the Communications Server's software configuration. 0 indicates that the option is absent; 1 that it is present.")
wfconfigKeysXns = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigKeysXns.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigKeysXns.setDescription("Indicates whether the XNS/IPX routing software option is active in the Communications Server's software configuration. 0 indicates that the option is absent; 1 that it is present.")
wfconfigKeysApple = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigKeysApple.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigKeysApple.setDescription("Indicates whether the AppleTalk routing software option is active in the Communications Server's software configuration. 0 indicates that the option is absent; 1 that it is present.")
wfconfigHwTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6), )
if mibBuilder.loadTexts: wfconfigHwTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwTable.setDescription('The Hw Table records the Hardware present in the Communications Server.')
wfconfigHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfconfigHwSlot"))
if mibBuilder.loadTexts: wfconfigHwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwEntry.setDescription('Describes the Processor and ILI Cards present in a slot of the Communications Server. Slots are numbered from 1 to n, and there may be gaps. Conventionally, the System Controller and Floppy I/O module are present in slot 1.')
wfconfigHwAceSn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigHwAceSn.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwAceSn.setDescription('The serial number of the processor board in this slot. Conventionally the processor board in slot 1 is not an ACE but a System Controller.')
wfconfigHwAceRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigHwAceRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwAceRev.setDescription('The revision level of the processor board in this slot. Conventionally the processor board in slot 1 is not an ACE but a System Controller.')
wfconfigHwModSn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigHwModSn.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwModSn.setDescription('The serial number of the ILI board (Link Module) in this slot.')
wfconfigHwModRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigHwModRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwModRev.setDescription('The revision level of the ILI board (Link Module) in this slot.')
wfconfigHwModID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigHwModID.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwModID.setDescription("The ID number of the ILI board (Link Module) in this slot. ID numbers are documented in section A.13 of the Operator's Guide.")
wfconfigHwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigHwSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigHwSlot.setDescription('The slot in which the boards described in this entry are present. Slots are numbered from 1, and there need not be processor-ILI pair in every slot. wfconfigHwEntrys will be defined only for populated slots.')
wfconfigBootpRqSrvr = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigBootpRqSrvr.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigBootpRqSrvr.setDescription("The IP Address of the BOOTP Server which initialized the entity's Load Image and Configuration name.")
wfconfigBootpFileSrvr = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 35, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfconfigBootpFileSrvr.setStatus('mandatory')
if mibBuilder.loadTexts: wfconfigBootpFileSrvr.setDescription("The IP Address of the TFTP Server from which the entity's Load Image and Configuration file were downloaded.")
wfipxMib = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1))
wfipxidp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1))
wfipxidpForwarding = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("host", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpForwarding.setDescription('Indicates whether the node is a router.')
wfipxidpInReceives = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpInReceives.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpInReceives.setDescription(' Contains the total number of all IDP datagrams (including those received in error) received from all interfaces.')
wfipxidpInHdrErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpInHdrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpInHdrErrors.setDescription('Contains the number of IDP datagrams discarded because of errors in their IDP headers. Such errors include bad checksums, format errors and bad hop counts. ')
wfipxidpInAddrErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpInAddrErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpInAddrErrors.setDescription('The number of IDP datagrams discarded because of invalid destination fields. ')
wfipxidpForwDatagrams = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpForwDatagrams.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpForwDatagrams.setDescription('The number of received IDP datagrams not addressed to the IPX router. The router attempts to forward these datagrams to their ultimate destination. ')
wfipxidpInUnknownProtos = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpInUnknownProtos.setDescription('The number of IDP datagrams discarded because of an invalid protocol field.')
wfipxidpInDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpInDiscards.setDescription('The number of input IDP datagrams discarded because of of insufficient Server resources. ')
wfipxidpInDelivers = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpInDelivers.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpInDelivers.setDescription('The number of IDP datagrams delivered to the IDP user protocols. (Error, Echo, RIP). ')
wfipxidpOutRequests = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpOutRequests.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpOutRequests.setDescription('The number of IDP datagrams generated by the local IDP user protocols. ')
wfipxidpOutDiscards = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpOutDiscards.setDescription('The number of output IDP datagrams discarded because of of insufficient Server resources. ')
wfipxidpOutNoRoutes = MibScalar((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpOutNoRoutes.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpOutNoRoutes.setDescription('The number of IDP datagrams discarded because no route could be found for their destination. ')
wfipxidpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 13), )
if mibBuilder.loadTexts: wfipxidpAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpAddrTable.setDescription('The IDP Address table. ')
wfipxidpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 13, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfipxidpAddrAddress"))
if mibBuilder.loadTexts: wfipxidpAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpAddrEntry.setDescription('An entry in the IDP address table.')
wfipxidpAddrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpAddrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpAddrAddress.setDescription('The IDP network number. ')
wfipxidpAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpAddrIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpAddrIfIndex.setDescription('The interface index. ')
wfipxidpRoutingTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14), )
if mibBuilder.loadTexts: wfipxidpRoutingTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRoutingTable.setDescription('The IPX IDP routing table.')
wfipxidpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfipxidpRouteDest"))
if mibBuilder.loadTexts: wfipxidpRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteEntry.setDescription('Information about a routing table entry. ')
wfipxidpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteDest.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteDest.setDescription('The destination network. ')
wfipxidpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteIfIndex.setDescription('An index to the next hop interface. ')
wfipxidpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteMetric.setDescription('The RIP hop count to the destination. 0 means the host is locally attached. ')
wfipxidpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteNextHop.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteNextHop.setDescription('The host address of the next hop gateway. ')
wfipxidpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteType.setDescription('Indicates whether the route was statically configured, direct or learned via RIP. ')
wfipxidpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteProto.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteProto.setDescription('The actual routing protocol used to determine the route.')
wfipxidpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 14, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpRouteAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpRouteAge.setDescription('The age (in seconds) of the route. ')
wfipxidpSAPTable = MibTable((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15), )
if mibBuilder.loadTexts: wfipxidpSAPTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPTable.setDescription('The IPX SAP Servers table.')
wfipxidpSAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1), ).setIndexNames((0, "Wellfleet-MIB", "wfipxidpSAPType"), (0, "Wellfleet-MIB", "wfipxidpSAPNet"), (0, "Wellfleet-MIB", "wfipxidpSAPHost"), (0, "Wellfleet-MIB", "wfipxidpSAPSocket"), (0, "Wellfleet-MIB", "wfipxidpSAPIndex"))
if mibBuilder.loadTexts: wfipxidpSAPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPEntry.setDescription('Information about a SAP table entry. ')
wfipxidpSAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPType.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPType.setDescription('The IPX numerical type of server described by this server entry. ')
wfipxidpSAPNet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPNet.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPNet.setDescription('The IPX network number of the server described by this server entry. ')
wfipxidpSAPHost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPHost.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPHost.setDescription('The IPX host address of the server described by this server entry. ')
wfipxidpSAPSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPSocket.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPSocket.setDescription('The IPX socket number at which the server is advertising service.')
wfipxidpSAPName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(48, 48)).setFixedLength(48)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPName.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPName.setDescription('The name of the server described by this server entry. ')
wfipxidpSAPAge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPAge.setDescription('The age (in seconds) of the server entry. That is, the number of seconds since the entry was updated by the SAP protocol. ')
wfipxidpSAPHops = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPHops.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPHops.setDescription('The number of network hops needed to reach the server described by this server entry. ')
wfipxidpSAPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPIfIndex.setDescription('The index, corresponding of a value of ifIndex, identifying the interface through which the server is reachable.')
wfipxidpSAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 1, 1, 41, 1, 1, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfipxidpSAPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfipxidpSAPIndex.setDescription('A unique number identifying servers advertised at the same IPX network and host address.')
mibBuilder.exportSymbols("Wellfleet-MIB", wfdrsIfTabEntry=wfdrsIfTabEntry, wftftpFilesIn=wftftpFilesIn, wfipxidpInAddrErrors=wfipxidpInAddrErrors, wfappleLocalZoneTable=wfappleLocalZoneTable, commServer=commServer, wfXns=wfXns, wfipxidpRouteProto=wfipxidpRouteProto, wfipxidpForwarding=wfipxidpForwarding, wfxnsidpInDiscards=wfxnsidpInDiscards, wfappleRouteEntry=wfappleRouteEntry, wfxnsidp=wfxnsidp, wflbFwdEntDstDisp=wflbFwdEntDstDisp, wfconfigKeysDrs=wfconfigKeysDrs, wflbFwdEntFloodStat=wflbFwdEntFloodStat, wfappleDDP=wfappleDDP, wfConfig=wfConfig, wfxnsidpRouteAge=wfxnsidpRouteAge, wfdrsAreaMaxCost=wfdrsAreaMaxCost, pysmiFakeCol1004=pysmiFakeCol1004, wfconfigImageFileName=wfconfigImageFileName, wfApple=wfApple, wftftpRRQOut=wftftpRRQOut, wfappleNBP=wfappleNBP, wfipxidpInDelivers=wfipxidpInDelivers, wfipxidpSAPIndex=wfipxidpSAPIndex, wfapplePortNetwork=wfapplePortNetwork, wfdrsAreaRouteHopCount=wfdrsAreaRouteHopCount, wfdrsAreaRouteNextArea=wfdrsAreaRouteNextArea, wfxnsidpRouteMetric=wfxnsidpRouteMetric, wfapplePortEntry=wfapplePortEntry, wfappleAARPTable=wfappleAARPTable, wfipxidpSAPHops=wfipxidpSAPHops, wfdrsNodeMaxHop=wfdrsNodeMaxHop, wfappleDDPBadChksum=wfappleDDPBadChksum, wfconfigHwAceRev=wfconfigHwAceRev, wfdrsMaxArea=wfdrsMaxArea, wfconfigKeysApple=wfconfigKeysApple, wflbRifTable=wflbRifTable, wfconfigKeysIp=wfconfigKeysIp, wfappleLZTEntry=wfappleLZTEntry, wfappleAARPEntry=wfappleAARPEntry, wfipxidpSAPAge=wfipxidpSAPAge, wfdrsIfTabEntNumRtrs=wfdrsIfTabEntNumRtrs, wfappleAARPIfIndex=wfappleAARPIfIndex, wfxnsidpInUnknownProtos=wfxnsidpInUnknownProtos, wfdrsIfTable=wfdrsIfTable, wfdrsIfTabEntCost=wfdrsIfTabEntCost, wfconfigConfigFileName=wfconfigConfigFileName, wfconfigHwAceSn=wfconfigHwAceSn, wfTftp=wfTftp, wfipxidpAddrEntry=wfipxidpAddrEntry, wfdrsRouting=wfdrsRouting, wfappleRouteNextNode=wfappleRouteNextNode, wfxnsidpInAddrErrors=wfxnsidpInAddrErrors, wfappleZIPReplyIn=wfappleZIPReplyIn, wfappleEchoResponseOut=wfappleEchoResponseOut, wfxnsidpErrDestHdrLen=wfxnsidpErrDestHdrLen, wfappleZIPGetNetInfoIn=wfappleZIPGetNetInfoIn, wfappleZIPGetLclZoneIn=wfappleZIPGetLclZoneIn, wfxnsidpErrDestNoResrcs=wfxnsidpErrDestNoResrcs, wfdrsIfTabEntHelloTimr=wfdrsIfTabEntHelloTimr, wfdrsAreaRoute=wfdrsAreaRoute, wfappleEchoRequestIn=wfappleEchoRequestIn, wfdrsNodeMaxCost=wfdrsNodeMaxCost, wfappleZIPReplyOut=wfappleZIPReplyOut, wfapplePortIfIndex=wfapplePortIfIndex, wflbFwdEntIf=wflbFwdEntIf, wfappleNBPFwdReqIn=wfappleNBPFwdReqIn, wfapplePortTable=wfapplePortTable, wflbFwdEntry=wflbFwdEntry, wfipxidpRouteEntry=wfipxidpRouteEntry, wfdrsNodeRouteIf=wfdrsNodeRouteIf, wfipxidpSAPType=wfipxidpSAPType, wfappleRoutingTable=wfappleRoutingTable, wfdrsAreaRouteCost=wfdrsAreaRouteCost, wfappleRouteMinNet=wfappleRouteMinNet, wfipxMib=wfipxMib, wfconfigHwEntry=wfconfigHwEntry, wfxnsidpErrDestProto=wfxnsidpErrDestProto, wfxnsMib=wfxnsMib, wflbRifEntry=wflbRifEntry, wfappleZIP=wfappleZIP, wfconfigBootpFileSrvr=wfconfigBootpFileSrvr, wflbFwdEntMacAddr=wflbFwdEntMacAddr, wfxnsidpRouteEntry=wfxnsidpRouteEntry, wfappleRouteIfIndex=wfappleRouteIfIndex, wfxnsidpErrs=wfxnsidpErrs, wfipxidpSAPEntry=wfipxidpSAPEntry, wfxnsidpErrXitHopCnt=wfxnsidpErrXitHopCnt, wfMib=wfMib, wfipxidpInDiscards=wfipxidpInDiscards, wfappleRouteNextNet=wfappleRouteNextNet, wfdrsNodeRouteNextHop=wfdrsNodeRouteNextHop, wfxnsidpErrDestXitUnspec=wfxnsidpErrDestXitUnspec, wfdrsAreaRoutingTable=wfdrsAreaRoutingTable, wfdrsAreaRouteNextNode=wfdrsAreaRouteNextNode, wfipxidpSAPNet=wfipxidpSAPNet, wfipxidpRoutingTable=wfipxidpRoutingTable, wfxnsidpOutNoRoutes=wfxnsidpOutNoRoutes, wfconfigKeys=wfconfigKeys, wflbRif=wflbRif, wfxnsidpAddrTable=wfxnsidpAddrTable, wftftpAborts=wftftpAborts, wflbFwdTable=wflbFwdTable, wfipxidp=wfipxidp, wellfleet=wellfleet, wfipxidpRouteMetric=wfipxidpRouteMetric, wflbFwdEntIfName=wflbFwdEntIfName, wfdrsIfTabEntName=wfdrsIfTabEntName, wfxnsidpErrDestBadSock=wfxnsidpErrDestBadSock, wfxnsidpAddrIfIndex=wfxnsidpAddrIfIndex, wfipxidpRouteIfIndex=wfipxidpRouteIfIndex, wfconfigHwModRev=wfconfigHwModRev, wfconfigVersionMinor=wfconfigVersionMinor, wflbRifMacSrcAddress=wflbRifMacSrcAddress, pysmiFakeCol1005=pysmiFakeCol1005, wfxnsidpOutRequests=wfxnsidpOutRequests, wfappleLZTZoneName=wfappleLZTZoneName, wfipxidpOutNoRoutes=wfipxidpOutNoRoutes, wfxnsidpForwarding=wfxnsidpForwarding, wfxnsidpErrXitCksum=wfxnsidpErrXitCksum, wftftpERRIn=wftftpERRIn, wfappleRTMP=wfappleRTMP, wfipxidpAddrIfIndex=wfipxidpAddrIfIndex, wfappleAARPNode=wfappleAARPNode, wfxnsidpErrDestUnspec=wfxnsidpErrDestUnspec, wfipxidpRouteType=wfipxidpRouteType, wfxnsidpRouteDest=wfxnsidpRouteDest, wfipxidpSAPSocket=wfipxidpSAPSocket, wfdrsMaxVisits=wfdrsMaxVisits, wfxnsidpForwDatagrams=wfxnsidpForwDatagrams, wfdrsBcastRoutTimer=wfdrsBcastRoutTimer, wfappleDDPUnknownNet=wfappleDDPUnknownNet, wfappleDDPDropped=wfappleDDPDropped, wfappleDDPHopsExceeded=wfappleDDPHopsExceeded, wfapplePortSeed=wfapplePortSeed, wfappleNBPFwdReqOut=wfappleNBPFwdReqOut, wfapplePortDefaultZone=wfapplePortDefaultZone, wfconfigKeysX25=wfconfigKeysX25, wfappleNBPBcastReqIn=wfappleNBPBcastReqIn, wfconfigHwModSn=wfconfigHwModSn, wfxnsidpRouteIfIndex=wfxnsidpRouteIfIndex, wftftpRRQIn=wftftpRRQIn, wftftpERROut=wftftpERROut, wfappleZIPGetLclZoneRepOut=wfappleZIPGetLclZoneRepOut, wfipxidpSAPHost=wfipxidpSAPHost, wfxnsidpRouteNextHop=wfxnsidpRouteNextHop, wfapplePortMinNet=wfapplePortMinNet, wfappleZIPGetLclZoneRepIn=wfappleZIPGetLclZoneRepIn, wfdrsRoutingTimer=wfdrsRoutingTimer, wfapplePortMaxNet=wfapplePortMaxNet, wfappleDDPPktsOut=wfappleDDPPktsOut, wfxnsidpInDelivers=wfxnsidpInDelivers, wfappleStationRouting=wfappleStationRouting, wfconfigHwModID=wfconfigHwModID, wfdrsState=wfdrsState, wfipxidpRouteNextHop=wfipxidpRouteNextHop, wfdrsIfTabEntRtrPrior=wfdrsIfTabEntRtrPrior, wfappleRouteState=wfappleRouteState, wfxnsidpErrSupressed=wfxnsidpErrSupressed, wfxnsidpAddrAddress=wfxnsidpAddrAddress, wfipxidpSAPIfIndex=wfipxidpSAPIfIndex, wfipxidpInHdrErrors=wfipxidpInHdrErrors, wfdrsAreaMaxHop=wfdrsAreaMaxHop, pysmiFakeCol1002=pysmiFakeCol1002, wfipxidpInReceives=wfipxidpInReceives, wfipxidpSAPName=wfipxidpSAPName, wfIpx=wfIpx, wfipxidpInUnknownProtos=wfipxidpInUnknownProtos, wfappleZIPGetZoneListIn=wfappleZIPGetZoneListIn, wfxnsidpErrXitUnreach=wfxnsidpErrXitUnreach, wfapplePortNodeID=wfapplePortNodeID, wftftpFilesOut=wftftpFilesOut, wfdrsNodeRouteCost=wfdrsNodeRouteCost, wftftpRxmits=wftftpRxmits, wfappleRTMPRequestIn=wfappleRTMPRequestIn, wfdrsNodeRoute=wfdrsNodeRoute, wfdrsNodeRouteDest=wfdrsNodeRouteDest, wfconfigVersionMajor=wfconfigVersionMajor, wftftpWRQIn=wftftpWRQIn, wfconfigHwSlot=wfconfigHwSlot, wfipxidpAddrTable=wfipxidpAddrTable, wfappleZIPGetNetInfoOut=wfappleZIPGetNetInfoOut, wfappleZIPRequestOut=wfappleZIPRequestOut, wfxnsidpOutDiscards=wfxnsidpOutDiscards, pysmiFakeCol1003=pysmiFakeCol1003, wfxnsidpInHdrErrors=wfxnsidpInHdrErrors, wfappleLZTIfIndex=wfappleLZTIfIndex, wfappleZIPNetInfoRepOut=wfappleZIPNetInfoRepOut, wfxnsidpRouteProto=wfxnsidpRouteProto, wfipxidpOutDiscards=wfipxidpOutDiscards, wfappleZIPRequestIn=wfappleZIPRequestIn, wfappleStationVersion=wfappleStationVersion, wfxnsidpRouteType=wfxnsidpRouteType, wfxnsidpErrXitTooBig=wfxnsidpErrXitTooBig, wfxnsidpInReceives=wfxnsidpInReceives, wfappleDDPPktsIn=wfappleDDPPktsIn, pysmiFakeCol1001=pysmiFakeCol1001, wfappleNBPLookupOut=wfappleNBPLookupOut, wfdrsIfTabEntIfIndex=wfdrsIfTabEntIfIndex, wfappleRouteDistance=wfappleRouteDistance, wfconfigBootpRqSrvr=wfconfigBootpRqSrvr, wftftpWRQOut=wftftpWRQOut, wfappleZIPGetLclZoneOut=wfappleZIPGetLclZoneOut, wfdrsNode=wfdrsNode, wfappleAARPNet=wfappleAARPNet, wfdrsNodeRoutingTable=wfdrsNodeRoutingTable, wfipxidpForwDatagrams=wfipxidpForwDatagrams, wflbRifMacAddress=wflbRifMacAddress, wfappleRouteMaxNet=wfappleRouteMaxNet, wfappleDDPDelivers=wfappleDDPDelivers, wfconfigHwTable=wfconfigHwTable, wfappleAARPMacAddress=wfappleAARPMacAddress, wfxnsidpAddrEntry=wfxnsidpAddrEntry, wfappleStation=wfappleStation, wfappleZIPGetZoneListOut=wfappleZIPGetZoneListOut, wfipxidpRouteAge=wfipxidpRouteAge, wfxnsidpRoutingTable=wfxnsidpRoutingTable, wfBridge=wfBridge, wflbFwdEntSrcDisp=wflbFwdEntSrcDisp, wfipxidpSAPTable=wfipxidpSAPTable, wfdrsAreaRouteDest=wfdrsAreaRouteDest, wfipxidpAddrAddress=wfipxidpAddrAddress, wfdrsArea=wfdrsArea, wfdrsIfTabEntState=wfdrsIfTabEntState, wfDrs=wfDrs, wfdrsBcastEnodeAdj=wfdrsBcastEnodeAdj, wfappleDDPPktsFwd=wfappleDDPPktsFwd, wfappleZIPNetInfoRepIn=wfappleZIPNetInfoRepIn, wfxnsidpErrDestCksum=wfxnsidpErrDestCksum, wflbRifCg=wflbRifCg, wfdrsNodeRouteHopCount=wfdrsNodeRouteHopCount, wfipxidpRouteDest=wfipxidpRouteDest, wfappleRTMPResponseOut=wfappleRTMPResponseOut, wfipxidpOutRequests=wfipxidpOutRequests, wfappleEcho=wfappleEcho, wfdrsAreaRouteIf=wfdrsAreaRouteIf, pysmiFakeCol1000=pysmiFakeCol1000, wfdrsMaxNode=wfdrsMaxNode, wfconfigKeysBridge=wfconfigKeysBridge, wfconfigKeysXns=wfconfigKeysXns)
