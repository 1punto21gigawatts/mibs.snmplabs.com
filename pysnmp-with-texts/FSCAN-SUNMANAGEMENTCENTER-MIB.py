#
# PySNMP MIB module FSCAN-SUNMANAGEMENTCENTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FSCAN-SUNMANAGEMENTCENTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, ModuleIdentity, MibIdentifier, iso, Integer32, Bits, TimeTicks, ObjectIdentity, Counter32, Unsigned32, IpAddress, Counter64, NotificationType, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "ModuleIdentity", "MibIdentifier", "iso", "Integer32", "Bits", "TimeTicks", "ObjectIdentity", "Counter32", "Unsigned32", "IpAddress", "Counter64", "NotificationType", "enterprises")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
filescan = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24))
filescan.setRevisions(('1999-08-03 10:20',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: filescan.setRevisionsDescriptions(('Rev 1.0 3rd august 1999 10:20, Initial version Of MIB.',))
if mibBuilder.loadTexts: filescan.setLastUpdated('9908031020Z')
if mibBuilder.loadTexts: filescan.setOrganization('Sun Microsystems Inc.')
if mibBuilder.loadTexts: filescan.setContactInfo(' Sun Microsystems Inc. Customer Support Postal: 901 San Antonio Road Palo Alto, CA-94303-4900 USA Tel: 650-960-1300 E-mail: service@sun.com')
if mibBuilder.loadTexts: filescan.setDescription("The File Scanning allows to monitor files for regular expressions in one of four modes: Full mode - when ever the file is modified the entire file is scanned. Incremental - The entire file is scanned only once. Lines added to the end of the file are then scanned as they are appended. Tail - The existing file contents are not scanned at all. Lines added to the end of file are scanned as they are appended. Persist Tail - Same as Tail mode except when the agent is restarted, it scans the file starting from the last line examined in the previous scanning. SNMPv2 uses the term 'context' for the MIBs that can have multiple instances running on the Agent. If you are using a SNMPv2 based thirdparty management station to communicate with such an agent, then make sure that you are using the right context information. However, if you are using SNMPv1 based management station, then add the context information to the SNMP community as follows '<community>:<context>' This will enable you to access data from multiple instances of the same module running on an agent.")
sun = MibIdentifier((1, 3, 6, 1, 4, 1, 42))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2))
sunsymon = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12))
agent = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2))
modules = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2))
fsFileScanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1)).setObjects(("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileName"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanMode"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanStartTime"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileModificationTime"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileSize"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileLength"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileLengthRate"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanRowStatus"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanEntryName"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanEntryDesc"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanPattern"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanState"), ("FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanNumberOfMatches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fsFileScanGroup = fsFileScanGroup.setStatus('current')
if mibBuilder.loadTexts: fsFileScanGroup.setDescription('File and scan related statistics.')
fsFileStaticInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 1))
fsFileDynamicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 2))
fsFileName = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileName.setStatus('current')
if mibBuilder.loadTexts: fsFileName.setDescription('The name of the file.')
fsFileScanMode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileScanMode.setStatus('current')
if mibBuilder.loadTexts: fsFileScanMode.setDescription('The scan mode. Its value is one of the four (full, incremental, tail, ptail) modes available.')
fsFileScanStartTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileScanStartTime.setStatus('current')
if mibBuilder.loadTexts: fsFileScanStartTime.setDescription('The time the agent started scanning the file.')
fsFileModificationTime = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileModificationTime.setStatus('current')
if mibBuilder.loadTexts: fsFileModificationTime.setDescription('The time the file was last modified.')
fsFileSize = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 2, 2), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileSize.setStatus('current')
if mibBuilder.loadTexts: fsFileSize.setDescription('The size of the file.')
fsFileLength = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 2, 3), Integer32()).setUnits('lines').setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileLength.setStatus('current')
if mibBuilder.loadTexts: fsFileLength.setDescription('The number of lines in the file.')
fsFileLengthRate = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 2, 4), DisplayString()).setUnits('lines/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileLengthRate.setStatus('current')
if mibBuilder.loadTexts: fsFileLengthRate.setDescription('The number of lines written per second.')
fsFileScanTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3), )
if mibBuilder.loadTexts: fsFileScanTable.setStatus('current')
if mibBuilder.loadTexts: fsFileScanTable.setDescription('This table consists of rows that contain search patterns and the results corresponding to the pattern depending on the search mode.')
fsFileScanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1), ).setIndexNames((0, "FSCAN-SUNMANAGEMENTCENTER-MIB", "fsFileScanEntryName"))
if mibBuilder.loadTexts: fsFileScanEntry.setStatus('current')
if mibBuilder.loadTexts: fsFileScanEntry.setDescription('Scan information for one pattern.')
fsFileScanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsFileScanRowStatus.setStatus('current')
if mibBuilder.loadTexts: fsFileScanRowStatus.setDescription('The row status.')
fsFileScanEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileScanEntryName.setStatus('current')
if mibBuilder.loadTexts: fsFileScanEntryName.setDescription('The name of the entry containing scan information for for particular regular expression.')
fsFileScanEntryDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsFileScanEntryDesc.setStatus('current')
if mibBuilder.loadTexts: fsFileScanEntryDesc.setDescription('The pattern description.')
fsFileScanPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fsFileScanPattern.setStatus('current')
if mibBuilder.loadTexts: fsFileScanPattern.setDescription('The regular expression pattern, which needs to be matched.')
fsFileScanState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileScanState.setStatus('current')
if mibBuilder.loadTexts: fsFileScanState.setDescription('The monitoring state of the entry. The value is ON when the row entry is enabled and OFF when the row entry is disabled.')
fsFileScanNumberOfMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 12, 2, 2, 24, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fsFileScanNumberOfMatches.setStatus('current')
if mibBuilder.loadTexts: fsFileScanNumberOfMatches.setDescription('The number of lines that match with the corresponding pattern.')
mibBuilder.exportSymbols("FSCAN-SUNMANAGEMENTCENTER-MIB", modules=modules, fsFileScanTable=fsFileScanTable, fsFileScanMode=fsFileScanMode, fsFileLengthRate=fsFileLengthRate, fsFileStaticInfo=fsFileStaticInfo, fsFileScanNumberOfMatches=fsFileScanNumberOfMatches, fsFileDynamicInfo=fsFileDynamicInfo, fsFileName=fsFileName, prod=prod, fsFileScanEntryDesc=fsFileScanEntryDesc, fsFileSize=fsFileSize, fsFileScanPattern=fsFileScanPattern, agent=agent, fsFileScanState=fsFileScanState, fsFileModificationTime=fsFileModificationTime, PYSNMP_MODULE_ID=filescan, filescan=filescan, fsFileScanStartTime=fsFileScanStartTime, sunsymon=sunsymon, fsFileScanEntry=fsFileScanEntry, fsFileScanEntryName=fsFileScanEntryName, sun=sun, fsFileScanRowStatus=fsFileScanRowStatus, fsFileLength=fsFileLength, fsFileScanGroup=fsFileScanGroup)
