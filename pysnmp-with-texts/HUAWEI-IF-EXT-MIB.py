#
# PySNMP MIB module HUAWEI-IF-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-IF-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
AtmVcIdentifier, AtmVpIdentifier = mibBuilder.importSymbols("ATM-TC-MIB", "AtmVcIdentifier", "AtmVpIdentifier")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, ifDescr, ifAdminStatus, InterfaceIndexOrZero, InterfaceIndex, ifOperStatus, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr", "ifAdminStatus", "InterfaceIndexOrZero", "InterfaceIndex", "ifOperStatus", "ifName")
ipAdEntNetMask, = mibBuilder.importSymbols("IP-MIB", "ipAdEntNetMask")
PortList, VlanIdOrNone = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanIdOrNone")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
TimeTicks, Bits, IpAddress, ObjectIdentity, Counter64, ModuleIdentity, Unsigned32, MibIdentifier, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "IpAddress", "ObjectIdentity", "Counter64", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "NotificationType")
TextualConvention, TruthValue, PhysAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "PhysAddress", "RowStatus", "DisplayString")
hwIFExtMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41))
if mibBuilder.loadTexts: hwIFExtMib.setLastUpdated('200610312230Z')
if mibBuilder.loadTexts: hwIFExtMib.setOrganization('Huawei Technologies co.,Ltd.')
if mibBuilder.loadTexts: hwIFExtMib.setContactInfo('VRP Team Huawei Technologies co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwIFExtMib.setDescription('Some attribute of interface extended content, information of interface IP, interface of trunk interface.')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class SnmpPasswdString(TextualConvention, OctetString):
    description = 'The password string'
    status = 'current'
    displayHint = '16a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 16)

class HWDirectionType(TextualConvention, Integer32):
    description = 'The Direction Flux Limit apply on.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class HwIpAddressType(TextualConvention, Integer32):
    description = 'The type of IP address.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("primary", 1), ("sub", 2))

hwIFExtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1))
hwIFExtBase = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1))
hwIFExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1), )
if mibBuilder.loadTexts: hwIFExtTable.setStatus('current')
if mibBuilder.loadTexts: hwIFExtTable.setDescription('Interface extended table of private mib.')
hwIFExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIFExtIndex"))
if mibBuilder.loadTexts: hwIFExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwIFExtEntry.setDescription('Entries of private extended interface table.')
hwIFExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIFExtIndex.setStatus('current')
if mibBuilder.loadTexts: hwIFExtIndex.setDescription('Index of extended table of interface.')
hwIFExtLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtLayer.setStatus('current')
if mibBuilder.loadTexts: hwIFExtLayer.setDescription('Switch the port between Layer3 and Layer2. Corresponding to the port switch command.Layer2(1) is 1 when the port switch from layer3 to layer2.Layer3(1) is 1 when the port switch from lyaer2 to layer3.')
hwIFExtFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ethernetII", 1), ("ethernetSnap", 2), ("ethernet8022", 3), ("ethernet8023", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIFExtFrameType.setStatus('current')
if mibBuilder.loadTexts: hwIFExtFrameType.setDescription('Frame type is accepted by VLAN virtual interfaces.Frame format contains ethernetII(1),ethernetII(2),ethernet8022(3),ethernet8023. The type location setting 1 when the ethernetII(1) type is accepted.Now only surpport the first(ethernetII(1))')
hwIFExtFlowStatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtFlowStatInterval.setStatus('current')
if mibBuilder.loadTexts: hwIFExtFlowStatInterval.setDescription('Interval of interface flow stat.The value of interval must be divided exactly by 10.The interface interval is effective,when both interface interval and global interval are config.Globle interval is only effective in interfaces,which interface interval is not configured. The real time property of interface flow stat rate will be affected by the value of interval.')
hwIFExtFlushReceiveEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 5), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtFlushReceiveEnable.setStatus('current')
if mibBuilder.loadTexts: hwIFExtFlushReceiveEnable.setDescription('Whether or not permit the port to take over FLUSHDUs. Once it is enabled, the port will take over SmartLink FlushDUs from related vlans so as to delete the MAC forwarding table in the local equipment.')
hwIFExtFlushVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 6), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtFlushVlanId.setStatus('current')
if mibBuilder.loadTexts: hwIFExtFlushVlanId.setDescription('The ID of Vlan the port belongs to.When it is 0, it indicates the function of receiving FlushPDU is disabled.')
hwIFExtFlushPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 7), SnmpPasswdString().clone(hexValue="00")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtFlushPasswd.setStatus('current')
if mibBuilder.loadTexts: hwIFExtFlushPasswd.setDescription('A 16-octet read-write value used to define the password for negotiation.')
hwIFExtFlowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flowUp", 1), ("flowDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIFExtFlowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIFExtFlowStatus.setDescription(' Current flow status of interface. 1:flow up 2:flow down')
hwIFExtMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtMtu.setStatus('current')
if mibBuilder.loadTexts: hwIFExtMtu.setDescription('The Max Transmit Unit of the interface.')
hwIFExtMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 10), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtMacAddr.setStatus('current')
if mibBuilder.loadTexts: hwIFExtMacAddr.setDescription('The MAC address of the interface .')
hwIFExtBlockPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtBlockPriority.setStatus('current')
if mibBuilder.loadTexts: hwIFExtBlockPriority.setDescription('The blocked priority of the interface.')
hwIFExtMacShift = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("macShift", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFExtMacShift.setStatus('current')
if mibBuilder.loadTexts: hwIFExtMacShift.setDescription('The mac-shift state of the interface. 1:normal 2:monitor mac-shift')
hwIFExtSuppressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("unsuppress", 0), ("suppress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIFExtSuppressStatus.setStatus('current')
if mibBuilder.loadTexts: hwIFExtSuppressStatus.setDescription('The suppress state of the interface. 0:unsuppress 1:suppress')
hwIFExtPhyStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIFExtPhyStatus.setStatus('current')
if mibBuilder.loadTexts: hwIFExtPhyStatus.setDescription('The physical status of member interface.')
hwIFExtMemberOf = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIFExtMemberOf.setStatus('current')
if mibBuilder.loadTexts: hwIFExtMemberOf.setDescription('The description of the main interface which has the membership with the member interface.')
hwLinkModeChangeAutoCreateIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 4), )
if mibBuilder.loadTexts: hwLinkModeChangeAutoCreateIfTable.setStatus('current')
if mibBuilder.loadTexts: hwLinkModeChangeAutoCreateIfTable.setDescription('Interface extended table of private mib.')
hwLinkModeChangeAutoCreateIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 4, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwAutoIfIndex"))
if mibBuilder.loadTexts: hwLinkModeChangeAutoCreateIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwLinkModeChangeAutoCreateIfEntry.setDescription('Entries of private extended interface table.')
hwAutoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAutoIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwAutoIfIndex.setDescription('Index of extended table of interface.')
hwNewIfTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 4, 1, 2), Bits().clone(namedValues=NamedValues(("timeslot0", 0), ("timeslot1", 1), ("timeslot2", 2), ("timeslot3", 3), ("timeslot4", 4), ("timeslot5", 5), ("timeslot6", 6), ("timeslot7", 7), ("timeslot8", 8), ("timeslot9", 9), ("timeslot10", 10), ("timeslot11", 11), ("timeslot12", 12), ("timeslot13", 13), ("timeslot14", 14), ("timeslot15", 15), ("timeslot16", 16), ("timeslot17", 17), ("timeslot18", 18), ("timeslot19", 19), ("timeslot20", 20), ("timeslot21", 21), ("timeslot22", 22), ("timeslot23", 23), ("timeslot24", 24), ("timeslot25", 25), ("timeslot26", 26), ("timeslot27", 27), ("timeslot28", 28), ("timeslot29", 29), ("timeslot30", 30), ("timeslot31", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwNewIfTimeslot.setStatus('current')
if mibBuilder.loadTexts: hwNewIfTimeslot.setDescription('The time slot of the TDM interface: timeslot0(0):The time slot 0 on the TDM interface, timeslot1(1):The time slot 1 on the TDM interface, timeslot2(2):The time slot 2 on the TDM interface, timeslot3(3):The time slot 3 on the TDM interface, timeslot4(4):The time slot 4 on the TDM interface, timeslot5(5):The time slot 5 on the TDM interface, timeslot6(6):The time slot 6 on the TDM interface, timeslot7(7):The time slot 7 on the TDM interface, timeslot8(8):The time slot 8 on the TDM interface, timeslot9(9):The time slot 9 on the TDM interface, timeslot10(10):The time slot 10 on the TDM interface, timeslot11(11):The time slot 11 on the TDM interface, timeslot12(12):The time slot 12 on the TDM interface, timeslot13(13):The time slot 13 on the TDM interface, timeslot14(14):The time slot 14 on the TDM interface, timeslot15(15):The time slot 15 on the TDM interface, timeslot16(16):The time slot 16 on the TDM interface, timeslot17(17):The time slot 17 on the TDM interface, timeslot18(18):The time slot 18 on the TDM interface, timeslot19(19):The time slot 19 on the TDM interface, timeslot20(20):The time slot 20 on the TDM interface, timeslot21(21):The time slot 21 on the TDM interface, timeslot22(22):The time slot 22 on the TDM interface, timeslot23(23):The time slot 23 on the TDM interface, timeslot24(24):The time slot 24 on the TDM interface, timeslot25(25):The time slot 25 on the TDM interface, timeslot26(26):The time slot 26 on the TDM interface, timeslot27(27):The time slot 27 on the TDM interface, timeslot28(28):The time slot 28 on the TDM interface, timeslot29(29):The time slot 29 on the TDM interface, timeslot30(30):The time slot 30 on the TDM interface, timeslot31(31):The time slot 31 on the TDM interface.')
hwIFExtPhyNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIFExtPhyNumber.setStatus('current')
if mibBuilder.loadTexts: hwIFExtPhyNumber.setDescription('The number of the physical interfaces.')
hwInterfaceIp = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2))
hwIfIpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1), )
if mibBuilder.loadTexts: hwIfIpTable.setStatus('current')
if mibBuilder.loadTexts: hwIfIpTable.setDescription('Interface IP address configuration table .It contains IP address, IP address mask, IP address acquiring method.')
hwIfIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIpAdEntAddr"))
if mibBuilder.loadTexts: hwIfIpEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfIpEntry.setDescription(' Interface IP address configuration ')
hwIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpAdEntAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
hwIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpAdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
hwIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpAdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the host bits set to 0.')
hwIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpAdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
hwIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpAdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagram received on this interface.')
hwIpAdEntAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 6), HwIpAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpAdEntAddressType.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntAddressType.setDescription('The flag indicates whether the IP address is primary IP address. One interface has only one primary IP address, but can have many sub IP address. So when add a primary IP address to an interface that has already a primary IP address, the new primary address will replace old primary address and the old primary address will be deleted.')
hwIfIpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("assignedIp", 1), ("dhcpIp", 2), ("bootpIp", 3), ("other", 4), ("linklayer", 5), ("random", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfIpMethod.setStatus('current')
if mibBuilder.loadTexts: hwIfIpMethod.setDescription('Interface IP address acquiring method. assignedIp(1) indicates that the address was manually configured to a specified address, for example, by user configuration. dhcpIp(2) indicates an address that was assigned to this system by a DHCP server. bootpIp(3) indicates an address that was assigned to this system by the bootp protocol. other(4) indicates an address created by another method. linklayer(5) indicates an address created by IPv6 stateless auto-configuration. random(6) indicates an address chosen by the system at random, for example, an IPv4 address within 169.254/16, or an RFC 3041 privacy address.')
hwIpAdEntAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIpAdEntAddrStatus.setStatus('current')
if mibBuilder.loadTexts: hwIpAdEntAddrStatus.setDescription('The row status variable.')
hwIfIpUnnumberedTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2), )
if mibBuilder.loadTexts: hwIfIpUnnumberedTable.setStatus('current')
if mibBuilder.loadTexts: hwIfIpUnnumberedTable.setDescription('Interface IP address unnumbered table. It contains lend IP address and lend IP address mask.')
hwIfIpUnnumberedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwUnnumberedIfIndex"))
if mibBuilder.loadTexts: hwIfIpUnnumberedEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfIpUnnumberedEntry.setDescription(' Interface IP address unnumbered configuration ')
hwUnnumberedIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwUnnumberedIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwUnnumberedIfIndex.setDescription('The index value of the unnumbered interface.')
hwLendIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2, 1, 11), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLendIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLendIfIndex.setDescription('The index value of the lend interface.')
hwLendIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLendIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwLendIpAddr.setDescription('The IP address of the lend interface.')
hwLendIpAddrNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLendIpAddrNetMask.setStatus('current')
if mibBuilder.loadTexts: hwLendIpAddrNetMask.setDescription('The IP address mask of the lend interface.')
hwUnnumberedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 2, 2, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwUnnumberedRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwUnnumberedRowStatus.setDescription('The row status variable.')
hwTrunkAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3))
hwTrunkIfMax = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkIfMax.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfMax.setDescription('The maximum of Trunk interface')
hwTrunkNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkNextIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrunkNextIndex.setDescription('The nextindex of Trunk interface,that means its position')
hwTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3), )
if mibBuilder.loadTexts: hwTrunkIfTable.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfTable.setDescription('The trunk table.')
hwTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwTrunkIndex"))
if mibBuilder.loadTexts: hwTrunkIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfEntry.setDescription('Entries of the trunk table.')
hwTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIndex.setDescription(' The number of the Trunk interface ')
hwTrunkIfID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfID.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfID.setDescription(' The identification of the Trunk interface.It may identify Trunk and is an index of the interface.')
hwTrunkIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethTrunk", 1), ("ipTrunk", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfType.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfType.setDescription(' The type of the Trunk interface includes eth-trunk and ip-trunk. The ip-trunk is only comprised by pos link, otherwise the eth-trunk is only comprised by ethernet link.')
hwTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfIndex.setDescription(' Index number of the Trunk interface,it is consistent with ifIndex of ifTable in IF-MIB.')
hwTrunkIfModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, -1))).clone(namedValues=NamedValues(("packetAll", 1), ("sourceDesMac", 2), ("packetUdp", 3), ("packetTcp", 4), ("sourceDesIp", 5), ("sourceMacIpv6", 6), ("sourceIpIpv6", 7), ("sourceIp", 8), ("desIp", 9), ("sourceMac", 10), ("desMac", 11), ("sourcePort", 12), ("desPort", 13), ("sourceDesPort", 14), ("fwdType", 15), ("qos", 16), ("labelNum", 17), ("label", 18), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfModel.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfModel.setDescription('Participated model of interface load. sourceDesMac(1) and sourceMac(10) and desMac(11) are Layer2 hash arithmetic.')
hwTrunkIfBandWidthAffectLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfBandWidthAffectLinkNum.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfBandWidthAffectLinkNum.setDescription(' The max bandwidth-affected-linknumber, by default, an Eth-Trunk interface has a maximum of 16 physical interfaces. The number of physical interfaces in an Eth-Trunk interface varies according to the product type.Only in layer 2,can set this value.')
hwTrunkIfMinLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfMinLinkNum.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfMinLinkNum.setDescription(' The Trunk port changes to up when the number of the up port reach hwTrunkIfMinLinkNum. ')
hwTrunkIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfRowStatus.setDescription(' Current operation status of the row ')
hwTrunkIfWorkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, -1))).clone(namedValues=NamedValues(("masterBackup", 1), ("normalMode", 2), ("lacpStaticMode", 3), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfWorkingMode.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfWorkingMode.setDescription(' Current working mode of trunk. 1:master/backup access mode 2:normal mode 3:lacp static mode')
hwTrunkIfWorkingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, -1))).clone(namedValues=NamedValues(("generalMode", 1), ("initialization", 2), ("masterWorking", 3), ("backupWorking", 4), ("invalid", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkIfWorkingState.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfWorkingState.setDescription(' Current working state of backup-access trunk. 1:general mode working state 2:initialization 3:master working 4:backup working')
hwTrunkIfAutoRecover = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("generalMode", 1), ("autoRecover", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfAutoRecover.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfAutoRecover.setDescription(" If auto-recover has been set, the master port will be working instead of the other port when it changes from down state to up state. 1: don't support auto-recover 2: support auto-recover")
hwTrunkIfPreemptEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("invalid", -1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfPreemptEnable.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfPreemptEnable.setDescription('The preemption according to the priority will be and only be enabled when the lag port is working in static mode(M:N backup mode) In default condition, the preemption is disabled.')
hwTrunkIfPreemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 180), ValueRangeConstraint(-1, -1), )).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfPreemptDelay.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfPreemptDelay.setDescription('The waiting time for priority preemption; Unit: second. It is enabled only when the priority preemption is enabled. It indicates, When it comes to priority preemption, the operation of preemption will be delayed for hwTrunkIfPreemptDelay time.')
hwTrunkIfTimeoutReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("fast", 1), ("slow", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfTimeoutReceive.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfTimeoutReceive.setDescription('The expired time for the port to receive LACPDUS. There are two types: 1.fast: 3 seconds 2.slow: 90 seconds')
hwTrunkIfFlushSendEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("invalid", -1))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfFlushSendEnable.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfFlushSendEnable.setDescription('Whether or not permit the trunk to transmit FlushDUs.It is only used when it is in the handwork 1:1 mode.Once it is enabled, the newly active interface in the trunk will send SmartLink FlushDUs so as to delete the related MAC forwarding table of the layer2 equipment in network.Otherwise, SmartLink FlushDUs will not be sent.')
hwTrunkIfFlushVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfFlushVlanId.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfFlushVlanId.setDescription('The ID of Vlan the partner port belongs to.When it is 0, it indicates the function of sending FlushPDU is disabled. ')
hwTrunkIfFlushPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 17), SnmpPasswdString().clone(hexValue="00")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfFlushPasswd.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfFlushPasswd.setDescription('A 16-octet read-create value used to define the password for negotiation.')
hwTrunkIfForceSwitchEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, -1))).clone(namedValues=NamedValues(("enabled", 1), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfForceSwitchEnable.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfForceSwitchEnable.setDescription('It is only used when it is in the handwork 1:1 mode and the current working link is the backup link. At that time, working link will move from backup link to master link. However, if the master link is down, the operation will be forbidden.')
hwTrunkIfStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfStatReset.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfStatReset.setDescription('Reset the statistic information of LACPDUsRx,MarkerPDUsRx,LACPDUsTx, MarkerResponsePDUsTx for all the ports in the current trunk.')
hwTrunkBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwTrunkBandwidth.setDescription(' Current bandwidth of trunk in units of 1,000,000 bits per second. This bandwidth is the peculiar property of Eth-Trunk. And to the other kinds of trunk, this bandwidth is -1.')
hwTrunkIfArpSendSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(800, 3000), ValueRangeConstraint(-1, -1), )).clone(2000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfArpSendSpeed.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfArpSendSpeed.setDescription('Indicates the rate of sending gratuitous ARP packets (in pkts/sec) on the trunk member interface. ')
hwTrunkIfLagSelectedPortStd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("speed", 1), ("priority", 2), ("invalid", -1))).clone('priority')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfLagSelectedPortStd.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfLagSelectedPortStd.setDescription("The static mode Eth-trunk selected port standard. There are two types: 1.speed : selected by port's speed 2.priority: selected by port's priority The default type is priority.")
hwTrunkIfLagMaxActiveLinkNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkIfLagMaxActiveLinkNum.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfLagMaxActiveLinkNum.setDescription('The static mode Eth-trunk selected ports can not more than the value.')
hwTrunkETrunkPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkETrunkPriority.setStatus('current')
if mibBuilder.loadTexts: hwTrunkETrunkPriority.setDescription('The priority of the E-Trunk.')
hwTrunkETrunkSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 25), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkETrunkSysID.setStatus('current')
if mibBuilder.loadTexts: hwTrunkETrunkSysID.setDescription('The system ID of the E-Trunk. If set ffff-ffff-ffff the system ID will be to default.')
hwTrunkETrunkPriorityReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("invalid", -1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkETrunkPriorityReset.setStatus('current')
if mibBuilder.loadTexts: hwTrunkETrunkPriorityReset.setDescription('Status of operation, there are yes(1) and no(2). It expresses whether the configure of E-Trunk priority is resetted.')
hwTrunkETrunkSysIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("invalid", -1))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkETrunkSysIDReset.setStatus('current')
if mibBuilder.loadTexts: hwTrunkETrunkSysIDReset.setDescription('Status of operation, there are yes(1) and no(2). It expresses whether the configure of E-Trunk system ID is resetted.')
hwTrunkLocalPrefMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkLocalPrefMode.setStatus('current')
if mibBuilder.loadTexts: hwTrunkLocalPrefMode.setDescription('Local-preference transmit mode of eth-trunk, there are enable(1) and disable(2).The default value is disable(2).')
hwTrunkIfTrackVrrpVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkIfTrackVrrpVrid.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfTrackVrrpVrid.setDescription('The VRID which the static mode Eth-trunk tracked to.')
hwTrunkIfTrackVrrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 30), InterfaceIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkIfTrackVrrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfTrackVrrpIfIndex.setDescription('The VRRP interface which the static mode Eth-trunk tracked to.')
hwTrunkIfTrackVrrpReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("invalid", -1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkIfTrackVrrpReset.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfTrackVrrpReset.setDescription('Status of operation, there are yes(1) and no(2). The value of this object identifies whether the operation of clearing the configuration is performed. And the configuration is that the Eth-Trunk interface in static LACP mode is associated with an mVRRP backup group. The value yes(1) indicates performing the operation. This object indicates one operation but not one status, so when the operation is performed, the value is no(2). By default, the value is no(2).')
hwTrunkIfBackupPreemptEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 32), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkIfBackupPreemptEnable.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfBackupPreemptEnable.setDescription('The preemption according to the master and slave port will be and only be enabled when eth-trunk is working in backup mode. In default condition, the preemption is disabled.')
hwTrunkIfBackupPreemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 30), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkIfBackupPreemptDelay.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfBackupPreemptDelay.setDescription('The waiting time for priority preemption; Unit: minute. It is enabled only when the priority preemption is enabled. It indicates, When it comes to priority preemption, the operation of preemption will be delayed for hwTrunkIfBackupPreemptDelay time.')
hwTrunkSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkSystemPriority.setStatus('current')
if mibBuilder.loadTexts: hwTrunkSystemPriority.setDescription('The priority of the system.')
hwTrunkUnknownUnicastIfModel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("packetAll", 1), ("sourceDesMac", 2), ("packetUdp", 3), ("packetTcp", 4), ("sourceDesIp", 5), ("sourceMacIpv6", 6), ("sourceIpIpv6", 7), ("sourceIp", 8), ("desIp", 9), ("sourceMac", 10), ("desMac", 11), ("sourcePort", 12), ("desPort", 13), ("sourceDesPort", 14), ("label", 15), ("ipOrLabel", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkUnknownUnicastIfModel.setStatus('current')
if mibBuilder.loadTexts: hwTrunkUnknownUnicastIfModel.setDescription('Participated model of load for unknown unicast. sourceDesMac(2) and sourceMac(10) and desMac(11) are Layer2 hash arithmetic.')
hwTrunkETrunkSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkETrunkSystemPriority.setStatus('current')
if mibBuilder.loadTexts: hwTrunkETrunkSystemPriority.setDescription('The system priority of the E-Trunk.')
hwTrunkETrunkSystemID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 3, 7), PhysAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwTrunkETrunkSystemID.setStatus('current')
if mibBuilder.loadTexts: hwTrunkETrunkSystemID.setDescription('The system ID of the E-Trunk. If set ffff-ffff-ffff the system ID will be to default.')
hwTrunkMemAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4))
hwTrunkMemTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1), )
if mibBuilder.loadTexts: hwTrunkMemTable.setStatus('current')
if mibBuilder.loadTexts: hwTrunkMemTable.setDescription('Trunk member attribute information table.')
hwTrunkMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwTrunkIndex"), (0, "HUAWEI-IF-EXT-MIB", "hwTrunkMemifIndex"))
if mibBuilder.loadTexts: hwTrunkMemEntry.setStatus('current')
if mibBuilder.loadTexts: hwTrunkMemEntry.setDescription('Trunk member attribute information')
hwTrunkMemifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwTrunkMemifIndex.setStatus('current')
if mibBuilder.loadTexts: hwTrunkMemifIndex.setDescription('Trunk port index')
hwTrunkValidEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkValidEntry.setStatus('current')
if mibBuilder.loadTexts: hwTrunkValidEntry.setDescription('Valid Entries of Trunk interface ')
hwTrunkSelectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("trunkSelected", 1), ("trunkDeselected", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkSelectStatus.setStatus('current')
if mibBuilder.loadTexts: hwTrunkSelectStatus.setDescription('Selected Status of Trunk Port.It is used LACP.')
hwTrunkLacpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 4), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkLacpStatus.setStatus('current')
if mibBuilder.loadTexts: hwTrunkLacpStatus.setDescription('It is status of the LACP.')
hwTrunkDeleteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 5), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkDeleteFlag.setStatus('current')
if mibBuilder.loadTexts: hwTrunkDeleteFlag.setDescription('Flag is set trunk_del_enable(1) or trunk_del_disable(2), according to operation.')
hwTrunkOperstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkOperstatus.setStatus('current')
if mibBuilder.loadTexts: hwTrunkOperstatus.setDescription('Status of operation, indicates port status. There are trunk_up(1) and trunk_down(2).It expresses whether port is shutdown.')
hwTrunkIsDefaultLagRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTrunkIsDefaultLagRecv.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIsDefaultLagRecv.setDescription("We don't sustain now, default value is false.")
hwTrunkPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkPortWeight.setStatus('current')
if mibBuilder.loadTexts: hwTrunkPortWeight.setDescription('Port weight, it expresses proportion of port in Trunk interface table')
hwTrunkPortStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkPortStandby.setStatus('current')
if mibBuilder.loadTexts: hwTrunkPortStandby.setDescription('The value is backup of Trunk Port.')
hwTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwTrunkRowStatus.setDescription('Current operation status of the row. ')
hwTrunkPortMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("portSlave", 1), ("portMaster", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkPortMaster.setStatus('current')
if mibBuilder.loadTexts: hwTrunkPortMaster.setDescription('Master port of backup-access eth-trunk or not 1: port-slave 2: port-master')
hwTrunkPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 65535), ValueRangeConstraint(-1, -1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkPortPriority.setStatus('current')
if mibBuilder.loadTexts: hwTrunkPortPriority.setDescription('The priority value assigned to this Trunk Port. This 16-bit value is read-write.')
hwTrunkPortStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, -1))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2), ("invalid", -1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwTrunkPortStatReset.setStatus('current')
if mibBuilder.loadTexts: hwTrunkPortStatReset.setDescription('Reset the statistic information of LACPDUsRx,MarkerPDUsRx,LACPDUsTx, MarkerResponsePDUsTx for the current port.')
hwIFFlowStat = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 5))
hwIFFlowStatGlobalInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIFFlowStatGlobalInterval.setStatus('current')
if mibBuilder.loadTexts: hwIFFlowStatGlobalInterval.setDescription('Global interval of interface flow stat.The interface interval is effective, when both interface interval and global interval are config.Globle interval is only effective in interfaces,which interface interval is not configged. Flow stat rate of interface will be affected by the value of interval. The default value is 300s.')
hwIfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6))
hwIfEtherStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1), )
if mibBuilder.loadTexts: hwIfEtherStatTable.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatTable.setDescription(' Ethernet Interface Statistic Table ')
hwIfEtherStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfEtherStatIfIndex"))
if mibBuilder.loadTexts: hwIfEtherStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatEntry.setDescription(' Entry of Ethernet Interface Statistic Table ')
hwIfEtherStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIfEtherStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatIfIndex.setDescription(' The index of L2 interface ')
hwIfEtherStatInPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPkts64Octets.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPkts64Octets.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPkts65to127Octets.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPkts65to127Octets.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPkts128to255Octets.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPkts128to255Octets.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPkts256to511Octets.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPkts256to511Octets.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPkts512to1023Octets.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPkts512to1023Octets.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPkts1024to1518Octets.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPkts1024to1518Octets.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInJumboPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInJumboPkts.setDescription(' The number of recieved Packets whose size over 1518 bytes ')
hwIfEtherStatInCRCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInCRCPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInCRCPkts.setDescription(' The number of recieved Packets which have CRC checking errors ')
hwIfEtherStatInLongPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInLongPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInLongPkts.setDescription(' The number of recieved Packets whose length is over maximum length ')
hwIfEtherStatInJabberPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInJabberPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInJabberPkts.setDescription(' The number of recieved Packets whose length is over maximum length and wrong CRC checking ')
hwIfEtherStatInFragmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInFragmentPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInFragmentPkts.setDescription(' The number of recieved Packets which have short size and wrong CRC checking ')
hwIfEtherStatInUnderSizePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInUnderSizePkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInUnderSizePkts.setDescription(' The number of recieved Packets which have short size but right CRC checking ')
hwIfEtherStatInOverRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInOverRunPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInOverRunPkts.setDescription(' The number of recieved Packets whose queue overflow ')
hwIfEtherStatInPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInPausePkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInPausePkts.setDescription(' The number of recieved control Frames ')
hwIfEtherStatOutJumboPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutJumboPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutJumboPkts.setDescription(' The number of sended Packets whose size over 1518 bytes ')
hwIfEtherStatOutOverflowPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutOverflowPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutOverflowPkts.setDescription(' The number of Packets whitch happen FIFO overflow error')
hwIfEtherStatOutUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutUnderRunPkts.setDescription(' The number of Packets whitch happen FIFO empty')
hwIfEtherStatOutPausePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutPausePkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutPausePkts.setDescription(' The number of sended control Frames ')
hwIfEthIfStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfEthIfStatReset.setStatus('current')
if mibBuilder.loadTexts: hwIfEthIfStatReset.setDescription(' Reset the Statistic information Counter ')
hwIfEtherStatInDropEventPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInDropEventPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInDropEventPkts.setDescription(' The number of recieved Packets discarded for GBP full or back pressure discard ')
hwIfEtherStatInAlignmentPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInAlignmentPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInAlignmentPkts.setDescription(' The number of recieved Packets which have frame alignment error ')
hwIfEtherStatInSymbolPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInSymbolPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInSymbolPkts.setDescription(' The number of recieved Packets which have unknown symbols ')
hwIfEtherStatInIgnoredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInIgnoredPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInIgnoredPkts.setDescription(' The number of recieved MAC control frames which have unknown opecode ')
hwIfEtherStatInFramePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatInFramePkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatInFramePkts.setDescription(' The number of recieved frames whose actual length differs with 802.3 ')
hwIfEtherStatOutCollisionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutCollisionPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutCollisionPkts.setDescription(' The number of sended collision Frames(only happen in the 10/100M port with half duplex mode) ')
hwIfEtherStatOutDeferredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutDeferredPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutDeferredPkts.setDescription(' The number of sended deferred but not collision Frames(only happen in the 10/100M port) ')
hwIfEtherStatOutLateCollisionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutLateCollisionPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutLateCollisionPkts.setDescription(' The number of sended deferred and collision Frames(only happen in the 10/100M port) ')
hwIfEtherStatOutExcessiveCollisionPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutExcessiveCollisionPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutExcessiveCollisionPkts.setDescription(' The number of sended failure Frames whose collision more than 16(only happen in the 10/100M port) ')
hwIfEtherStatOutBufferPurgationPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfEtherStatOutBufferPurgationPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatOutBufferPurgationPkts.setDescription(' The number of sended Frames which is purged from the buffer because of long time ')
hwIfSdhStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2), )
if mibBuilder.loadTexts: hwIfSdhStatTable.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatTable.setDescription(' Sdh/sonet Interface Statistic Table ')
hwIfSdhStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfSdhStatIfIndex"))
if mibBuilder.loadTexts: hwIfSdhStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatEntry.setDescription(' Entry of Sdh/Sonet Interface Statistic Table ')
hwIfSdhStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIfSdhStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatIfIndex.setDescription(' The index of sdh/sonet interface ')
hwIfSdhStatInCRCPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfSdhStatInCRCPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatInCRCPkts.setDescription(' The number of recieved Packets which have CRC checking errors ')
hwIfSdhStatInShortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfSdhStatInShortPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatInShortPkts.setDescription(' The number of recieved Packets whose length is under minimal length ')
hwIfSdhStatInLongPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfSdhStatInLongPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatInLongPkts.setDescription(' The number of recieved Packets whose length is over maximum length ')
hwIfSdhStatOutOverRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfSdhStatOutOverRunPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatOutOverRunPkts.setDescription(' The number of sent Packets whose queue overflow ')
hwIfSdhStatOutUnderRunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfSdhStatOutUnderRunPkts.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhStatOutUnderRunPkts.setDescription(' The number of sent Packets whose queue underflow ')
hwIfSdhIfStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfSdhIfStatReset.setStatus('current')
if mibBuilder.loadTexts: hwIfSdhIfStatReset.setDescription(' Reset the Statistic information Counter ')
hwIfAtmStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3), )
if mibBuilder.loadTexts: hwIfAtmStatTable.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatTable.setDescription(' Atm Interface Statistic Table ')
hwIfAtmStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfAtmStatIfIndex"))
if mibBuilder.loadTexts: hwIfAtmStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatEntry.setDescription(' Entry of Atm Interface Statistic Table ')
hwIfAtmStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIfAtmStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatIfIndex.setDescription(' The index of atm interface ')
hwIfAtmStatInGoodCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfAtmStatInGoodCells.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatInGoodCells.setDescription(' The number of good cells recieved ')
hwIfAtmStatInIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfAtmStatInIdleCells.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatInIdleCells.setDescription(' The number of idle cells recieved ')
hwIfAtmStatInCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfAtmStatInCorrectedCells.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatInCorrectedCells.setDescription(' The number of recieved cells whitch have been corrected. ')
hwIfAtmStatInUncorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfAtmStatInUncorrectedCells.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatInUncorrectedCells.setDescription(' The number of recieved cells whitch can not be corrected. ')
hwIfAtmStatOutGoodCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfAtmStatOutGoodCells.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatOutGoodCells.setDescription(' The number of good cells sent ')
hwIfAtmStatOutIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfAtmStatOutIdleCells.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmStatOutIdleCells.setDescription(' The number of idle cells sent ')
hwIfAtmIfStatReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("ready", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfAtmIfStatReset.setStatus('current')
if mibBuilder.loadTexts: hwIfAtmIfStatReset.setDescription(' Reset the Statistic information Counter ')
hwIfMonitorObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7))
hwIfMonitorThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1), )
if mibBuilder.loadTexts: hwIfMonitorThresholdTable.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorThresholdTable.setDescription(' Alarm monitor table ')
hwIfMonitorThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfMonitorIndex"))
if mibBuilder.loadTexts: hwIfMonitorThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorThresholdEntry.setDescription(' Entry of alarm monitor table ')
hwIfMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIfMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorIndex.setDescription(' Index of alarm monitor table ')
hwIfMonitorCrcErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorCrcErrorStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorCrcErrorStatistics.setDescription(' Crc error statistics value ')
hwIfMonitorCrcErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorCrcErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorCrcErrorThreshold.setDescription(' Crc error alarm threshold,default value is 3 and 0 is an invalid value ')
hwIfMonitorCrcErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorCrcErrorInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorCrcErrorInterval.setDescription(' Crc error alarm interval time(unit is second),default value is 10s and 0 is an invalid value ')
hwIfMonitorSdhErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorSdhErrorStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhErrorStatistics.setDescription(' Sdh error statistics value only for B3')
hwIfMonitorSdhErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhErrorThreshold.setDescription(' Sdh error alarm threshold,only for B3,default value is 3 and 0 is an invalid value ')
hwIfMonitorSdhErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhErrorInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhErrorInterval.setDescription(' Sdh error alarm interval time(unit is second),only for B3,default value is 10s and 0 is an invalid value ')
hwIfMonitorInputRatePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorInputRatePercentage.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorInputRatePercentage.setDescription(' Input rate percentage value ')
hwIfMonitorInputRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorInputRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorInputRateThreshold.setDescription(' Input rate alarm threshold,default value is 100 ')
hwIfMonitorOutputRatePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorOutputRatePercentage.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorOutputRatePercentage.setDescription(' Output rate percentage value ')
hwIfMonitorOutputRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorOutputRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorOutputRateThreshold.setDescription(' Output rate alarm threshold,default value is 100 ')
hwIfMonitorPauseFrameStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorPauseFrameStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseFrameStatistics.setDescription(' Pause frame statistics value ')
hwIfMonitorPauseFrameThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorPauseFrameThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseFrameThreshold.setDescription(' Pause frame alarm threshold,and 0 is an invalid value ')
hwIfMonitorPauseFrameInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorPauseFrameInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseFrameInterval.setDescription(' Pause frame alarm interval time(unit is second),and 0 is an invalid value ')
hwIfMonitorDelayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorDelayValue.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorDelayValue.setDescription(' Delay value ')
hwIfMonitorDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorDelayThreshold.setDescription(' Delay alarm threshold ')
hwIfMonitorJitterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorJitterValue.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorJitterValue.setDescription(' Jitter value ')
hwIfMonitorJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorJitterThreshold.setDescription(' Jitter alarm threshold ')
hwIfMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorName.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorName.setDescription(" Interface's name of alarm monitor table ")
hwIfMonitorSdhB1ErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorStatistics.setDescription(' Sdh B1 error statistics value')
hwIfMonitorSdhB1ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorThreshold.setDescription(' Sdh B1 error alarm threshold,default value is 3')
hwIfMonitorSdhB1ErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorInterval.setDescription(' Sdh B1 error alarm interval time(unit is second),default value is 10s')
hwIfMonitorSdhB2ErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorStatistics.setDescription(' Sdh B2 error statistics value')
hwIfMonitorSdhB2ErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorThreshold.setDescription(' Sdh error B2 alarm threshold,default value is 3')
hwIfMonitorSdhB2ErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorInterval.setDescription(' Sdh B2 error alarm interval time(unit is second),default value is 10s')
hwIfMonitorSymbolErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorStatistics.setDescription(' Symbol error statistics value ')
hwIfMonitorSymbolErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorThreshold.setDescription(' Symbol error alarm threshold,default value is 3 ')
hwIfMonitorSymbolErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorInterval.setDescription(' Symbol error alarm interval time(unit is second),default value is 10s')
hwIfMonitorBadBytesErrorStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorStatistics.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorStatistics.setDescription('Description.')
hwIfMonitorBadBytesErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorThreshold.setDescription('Description.')
hwIfMonitorBadBytesErrorInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 7, 1, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorInterval.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorInterval.setDescription('Description.')
hwIfMonitorGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8))
hwIfMonitorCrcEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorCrcEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorCrcEnabledStatus.setDescription(' Enalbe or disable the crc error monitor, and the default value is disable.')
hwIfMonitorSdhEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorSdhEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhEnabledStatus.setDescription(' Enalbe or disable the sdh error monitor, and the default value is disable.')
hwIfMonitorInputRateEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorInputRateEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorInputRateEnabledStatus.setDescription(' Enalbe or disable the input rate monitor, and the default value is disable.')
hwIfMonitorOutputRateEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorOutputRateEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorOutputRateEnabledStatus.setDescription(' Enalbe or disable the output rate monitor, and the default value is disable.')
hwIfMonitorHalfDuplexEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorHalfDuplexEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorHalfDuplexEnabledStatus.setDescription(' Enalbe or disable the half duplex monitor, and the default value is disable.')
hwIfMonitorPauseRisingEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorPauseRisingEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseRisingEnabledStatus.setDescription(' Enalbe or disable the pause frame rising monitor, and the default value is disable.')
hwIfMonitorPauseContinuingEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIfMonitorPauseContinuingEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseContinuingEnabledStatus.setDescription(' Enalbe or disable the pause frame continuing monitor, and the default value is disable.')
hwifMonitorBadBytesEnabledStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 8, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwifMonitorBadBytesEnabledStatus.setStatus('current')
if mibBuilder.loadTexts: hwifMonitorBadBytesEnabledStatus.setDescription('Description.')
hwAdminVrrpMemberIf = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9))
hwIfFlowChangeTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIfFlowChangeTime.setStatus('obsolete')
if mibBuilder.loadTexts: hwIfFlowChangeTime.setDescription("The time indicates when the interface's flow status changes.")
hwAdminVrrpMemberIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2), )
if mibBuilder.loadTexts: hwAdminVrrpMemberIfTable.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpMemberIfTable.setDescription('The interface bound to VRRP table.')
hwAdminVrrpMemberIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwAdminVrrpMemberIfIndex"))
if mibBuilder.loadTexts: hwAdminVrrpMemberIfEntry.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpMemberIfEntry.setDescription('Entries of the interface bound to VRRP table.')
hwAdminVrrpMemberIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwAdminVrrpMemberIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpMemberIfIndex.setDescription('The number of the interface.')
hwAdminVrrpVrid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAdminVrrpVrid.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpVrid.setDescription('The administrator VRRP vrid.')
hwAdminVrrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAdminVrrpIfIndex.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpIfIndex.setDescription("The administrator VRRP's configure interface index.")
hwAdminVrrpMemberIfFlowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAdminVrrpMemberIfFlowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpMemberIfFlowStatus.setDescription(' Current flow status of interface. 1:up 2:down')
hwAdminVrrpMemberIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 9, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwAdminVrrpMemberIfRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpMemberIfRowStatus.setDescription('Current operation status of the row.')
hwIfFluxLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10))
hwIfFluxLimitTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1), )
if mibBuilder.loadTexts: hwIfFluxLimitTable.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxLimitTable.setDescription(' Flux limit table ')
hwIfFluxLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfFluxIfIndex"), (0, "HUAWEI-IF-EXT-MIB", "hwIfFluxVlanId"))
if mibBuilder.loadTexts: hwIfFluxLimitEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxLimitEntry.setDescription(' Entry of flux limit table ')
hwIfFluxIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIfFluxIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxIfIndex.setDescription('Interface Index, same as ifIndex.')
hwIfFluxVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 2), VlanIdOrNone())
if mibBuilder.loadTexts: hwIfFluxVlanId.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxVlanId.setDescription('Vlan ID. 0 is the default value')
hwIfFluxDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 3), HWDirectionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIfFluxDirection.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxDirection.setDescription('Limit direction: inbound (1) outbound (2)')
hwIfFluxLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("broadcastSuppression", 1), ("multicastSuppression", 2), ("unknownUnicastSuppression", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIfFluxLimitType.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxLimitType.setDescription('Flux limit type: broadcastSuppression(1),multicastSuppression(2),unknownUnicastSuppression(3).')
hwIfFluxCir = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIfFluxCir.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxCir.setDescription('Committed Information Rate. Unit: kbps. software QoS: 8..155000 hardware QoS: 100..10000000')
hwIfFluxCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIfFluxCbs.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxCbs.setDescription('Committed Burst Size. Unit: byte software QoS: 1875..19375000 hardware QoS: 64..33554432')
hwIfFluxRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 10, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIfFluxRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxRowStatus.setDescription('RowStatus. Three actions are used: active, createAndGo, destroy')
hwIfDiffServ = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11))
hwIfDiffServTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11, 1), )
if mibBuilder.loadTexts: hwIfDiffServTable.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServTable.setDescription('The table describes the different service mode of interfaces.')
hwIfDiffServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfDiffServIndex"))
if mibBuilder.loadTexts: hwIfDiffServEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServEntry.setDescription('Interface different service mode attribute configuration.')
hwIfDiffServIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwIfDiffServIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServIndex.setDescription(' The index of L2 interface. ')
hwIfDiffServMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pipe", 1), ("uniform", 2), ("shortpipe", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfDiffServMode.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServMode.setDescription('Different service mode of the interface binding to a VLL, default is uniform.')
hwIfDiffServServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("default", 0), ("be", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("ef", 6), ("cs6", 7), ("cs7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfDiffServServiceClass.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServServiceClass.setDescription('PHB in the ingress PE, the value must be be,af1,af2,af3,af4,ef,cs6,cs7.')
hwIfDiffServColor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("green", 1), ("yellow", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfDiffServColor.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServColor.setDescription('Remarked color of packet in the ingress PE, the value must be green,yellow,red.')
hwIfQuery = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 12))
hwIfQueryTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 12, 1), )
if mibBuilder.loadTexts: hwIfQueryTable.setStatus('current')
if mibBuilder.loadTexts: hwIfQueryTable.setDescription('Interface name table of private MIB.')
hwIfQueryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 12, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwIfName"))
if mibBuilder.loadTexts: hwIfQueryEntry.setStatus('current')
if mibBuilder.loadTexts: hwIfQueryEntry.setDescription('Entries of private interface name table.')
hwIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 12, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47)))
if mibBuilder.loadTexts: hwIfName.setStatus('current')
if mibBuilder.loadTexts: hwIfName.setDescription('The name of the interface.The value of this object must be the interface name assigned by the local device.')
hwIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 12, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwIfIndex.setDescription('The index of the interface. An index uniquely identifies an interface.')
hwLogicIfAttrib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13))
hwLogicIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1), )
if mibBuilder.loadTexts: hwLogicIfTable.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfTable.setDescription('Logic interface table.')
hwLogicIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwLogicIfIndex"))
if mibBuilder.loadTexts: hwLogicIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfEntry.setDescription('Logic interface table.')
hwLogicIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1, 1), InterfaceIndexOrZero())
if mibBuilder.loadTexts: hwLogicIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfIndex.setDescription('Indicates the interface index. The interface index to be created must be 0. Then the system automatically allocates an interface index.')
hwLogicIfMainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1, 11), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfMainIndex.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfMainIndex.setDescription('Indicates the interface index of the main interface to which the sub-interface belongs. For other interfaces, the interface index is 0.')
hwLogicIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("ve", 1), ("loopback", 2), ("vlanif", 3), ("subVe", 4), ("subEthTrunk", 5), ("subEthernet", 6), ("subAtm", 7), ("imaGroup", 8), ("subImaGroup", 9), ("subSerial", 10), ("tunnel", 11), ("mpGroup", 13), ("bridgeIf", 14), ("subAtmTrunk", 15), ("dslGroup", 16), ("wlanEss", 17), ("stackPort", 18)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLogicIfType.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfType.setDescription('Indicates the interface type.')
hwLogicIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLogicIfName.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfName.setDescription('Indicates the interface name. The interface name must be a name without blank spaces and Tab characters.')
hwLogicIfParaOne = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("p2p", 1), ("p2mp", 2), ("none", 255)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLogicIfParaOne.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfParaOne.setDescription('Indicates the extended attribute of the logical interface. The extended attribute takes effect only on the ATM sub-interface. The default extended attribute is P2MP. For sub-interfaces of other types, none is returned after the Get operation.')
hwLogicIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 1, 1, 51), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLogicIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfRowStatus.setDescription('Indicates the status of the row.')
hwLogicIfHelpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2), )
if mibBuilder.loadTexts: hwLogicIfHelpTable.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfHelpTable.setDescription('Logic interface help table.')
hwLogicIfHelpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwLogicIfhelpType"))
if mibBuilder.loadTexts: hwLogicIfHelpEntry.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfHelpEntry.setDescription('Logic interface help table.')
hwLogicIfhelpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 11, 13, 16))).clone(namedValues=NamedValues(("ve", 1), ("ima-Group", 8), ("tunnel", 11), ("mp-group", 13), ("dslGroup", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfhelpType.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfhelpType.setDescription('Indicates the types of logical interfaces that can be queried.')
hwLogicIfChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfChassisNumber.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfChassisNumber.setDescription('Indicates the ID of the chassis that supports the creation of the specified logical interface.')
hwLogicIfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfSlotNumber.setDescription('Indicates the ID of the slot that supports the creation of the specified logical interface.')
hwLogicIfCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfCardNumber.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfCardNumber.setDescription('Indicates the number of the card that supports the creation of the specified logical interface.')
hwLogicIfMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfMin.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfMin.setDescription('Indicates the minimum port number of the specified logical interface.')
hwLogicIfMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfMax.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfMax.setDescription('Indicates the maximum port number of the specified logical interface.')
hwLogicIfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicIfTotal.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfTotal.setDescription('Indicates the maximum number of the specified logical interface.')
hwLogicIfDynamicHelpTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3), )
if mibBuilder.loadTexts: hwLogicIfDynamicHelpTable.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfDynamicHelpTable.setDescription('Logic interface dynamic help table.')
hwLogicIfDynamicHelpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfhelpType"), (0, "HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfChassisNumber"), (0, "HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfSlotNumber"), (0, "HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfCardNumber"))
if mibBuilder.loadTexts: hwLogicIfDynamicHelpEntry.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfDynamicHelpEntry.setDescription('Logic interface dynamic help table.')
hwLogicDynamicIfhelpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 8, 11, 13, 16))).clone(namedValues=NamedValues(("ve", 1), ("ima-Group", 8), ("tunnel", 11), ("mp-group", 13), ("dslGroup", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfhelpType.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfhelpType.setDescription('Indicates the types of logical interfaces that can be queried.')
hwLogicDynamicIfChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfChassisNumber.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfChassisNumber.setDescription('Indicates the ID of the chassis that that can be queried.')
hwLogicDynamicIfSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfSlotNumber.setDescription('Indicates the ID of the slot that can be queried.')
hwLogicDynamicIfCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfCardNumber.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfCardNumber.setDescription('Indicates the ID of the card that can be queried.')
hwLogicDynamicIfMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfMin.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfMin.setDescription('Indicates the minimum port number of the specified logical interface.')
hwLogicDynamicIfMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfMax.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfMax.setDescription('Indicates the maximum port number of the specified logical interface.')
hwLogicDynamicIfTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLogicDynamicIfTotal.setStatus('current')
if mibBuilder.loadTexts: hwLogicDynamicIfTotal.setDescription('Indicates the maximum number of the specified logical interface.')
hwCppsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14))
hwCppsGlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCppsGlobalEnable.setStatus('current')
if mibBuilder.loadTexts: hwCppsGlobalEnable.setDescription('Whether statistic function is enabled globally, and the default value is disable.')
hwCppsInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 2), )
if mibBuilder.loadTexts: hwCppsInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwCppsInterfaceTable.setDescription('CPU packet and byte statistic interface configuration table.')
hwCppsInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 2, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwCppsInterfaceIndex"))
if mibBuilder.loadTexts: hwCppsInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwCppsInterfaceEntry.setDescription('The entry of hwCppsInterfaceTable.')
hwCppsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCppsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hwCppsInterfaceIndex.setDescription('Index number of the interface.')
hwCppsPortPvcEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 2, 1, 2), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCppsPortPvcEnable.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortPvcEnable.setDescription('Whether statistic function is enabled on PVC.')
hwCppsPortVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 2, 1, 3), EnabledStatus().clone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCppsPortVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortVlanEnable.setDescription('Whether statistic function is enabled on VLAN.')
hwCppsIfStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 3), )
if mibBuilder.loadTexts: hwCppsIfStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwCppsIfStatisticsTable.setDescription('CPU packet and byte statistic interface table.')
hwCppsIfStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 3, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwCppsIfStatisticsIndex"))
if mibBuilder.loadTexts: hwCppsIfStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwCppsIfStatisticsEntry.setDescription('The entry of hwCppsIfStatisticsTable.')
hwCppsIfStatisticsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCppsIfStatisticsIndex.setStatus('current')
if mibBuilder.loadTexts: hwCppsIfStatisticsIndex.setDescription('Index number of the interface.')
hwCppsInterfacePktStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCppsInterfacePktStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsInterfacePktStatisic.setDescription('Packet statistic information of the interface sent to CPU.')
hwCppsInterfaceByteStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCppsInterfaceByteStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsInterfaceByteStatisic.setDescription('Byte statistic information of the interface sent to CPU.')
hwCppsResetInterfaceStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unreset", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCppsResetInterfaceStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsResetInterfaceStatisic.setDescription('Whether to reset statistics.')
hwCppsAtmPvcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4), )
if mibBuilder.loadTexts: hwCppsAtmPvcTable.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmPvcTable.setDescription('CPU packet and byte statistic ATM PVC table.')
hwCppsAtmPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwCppsAtmIfIndex"), (0, "HUAWEI-IF-EXT-MIB", "hwCppsAtmVpi"), (0, "HUAWEI-IF-EXT-MIB", "hwCppsAtmVci"))
if mibBuilder.loadTexts: hwCppsAtmPvcEntry.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmPvcEntry.setDescription('The entry of hwCppsAtmPvcTable.')
hwCppsAtmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCppsAtmIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmIfIndex.setDescription('Index number of the interface.')
hwCppsAtmVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1, 2), AtmVpIdentifier())
if mibBuilder.loadTexts: hwCppsAtmVpi.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmVpi.setDescription('VPI.')
hwCppsAtmVci = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1, 3), AtmVcIdentifier())
if mibBuilder.loadTexts: hwCppsAtmVci.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmVci.setDescription('VCI.')
hwCppsAtmPvcPktStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCppsAtmPvcPktStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmPvcPktStatisic.setDescription('Packet statistic information of the PVC sent to CPU.')
hwCppsAtmPvcByteStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCppsAtmPvcByteStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmPvcByteStatisic.setDescription('Byte statistic information of the PVC sent to CPU.')
hwCppsResetAtmPvcStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unreset", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCppsResetAtmPvcStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsResetAtmPvcStatisic.setDescription('Whether to reset statistics.')
hwCppsPortVlanTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5), )
if mibBuilder.loadTexts: hwCppsPortVlanTable.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortVlanTable.setDescription('CPU packet and byte statistic port VLAN table.')
hwCppsPortVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwCppsPortIndex"), (0, "HUAWEI-IF-EXT-MIB", "hwCppsVlanId"))
if mibBuilder.loadTexts: hwCppsPortVlanEntry.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortVlanEntry.setDescription('The entry of hwCppsPortVlanTable.')
hwCppsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwCppsPortIndex.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortIndex.setDescription('Index number of the interface.')
hwCppsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5, 1, 2), VlanIdOrNone())
if mibBuilder.loadTexts: hwCppsVlanId.setStatus('current')
if mibBuilder.loadTexts: hwCppsVlanId.setDescription('VLAN ID.')
hwCppsPortVlanPktStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCppsPortVlanPktStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortVlanPktStatisic.setDescription('Packet statistic information of the port sent to CPU.')
hwCppsPortVlanByteStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwCppsPortVlanByteStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortVlanByteStatisic.setDescription('Byte statistic information of the port sent to CPU.')
hwCppsResetPortVlanStatisic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 14, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unreset", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwCppsResetPortVlanStatisic.setStatus('current')
if mibBuilder.loadTexts: hwCppsResetPortVlanStatisic.setDescription('Whether to reset statistics.')
hwPortIsolationGroupAttrib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 15))
hwPortIsolationGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 15, 1), )
if mibBuilder.loadTexts: hwPortIsolationGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwPortIsolationGroupTable.setDescription('Logic interface table.')
hwPortIsolationGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 15, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwPortIsolationGroupIndex"))
if mibBuilder.loadTexts: hwPortIsolationGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwPortIsolationGroupEntry.setDescription('Logic interface table.')
hwPortIsolationGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hwPortIsolationGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwPortIsolationGroupIndex.setDescription('ID of Port-Isolation-Group.')
hwPortIsolationGroupPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 15, 1, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortIsolationGroupPortList.setStatus('current')
if mibBuilder.loadTexts: hwPortIsolationGroupPortList.setDescription('PortList of Port-Isolation-Group.')
hwPortIsolationGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 15, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwPortIsolationGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortIsolationGroupRowStatus.setDescription('Indicates the status of the row.')
hwVTrunkAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16))
hwVTrunkIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16, 1), )
if mibBuilder.loadTexts: hwVTrunkIfTable.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfTable.setDescription('The vtrunk table.')
hwVTrunkIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwVTrunkIfIndex"))
if mibBuilder.loadTexts: hwVTrunkIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfEntry.setDescription('Entries of the vtrunk table.')
hwVTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwVTrunkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfIndex.setDescription(' The IfIndex of the VTrunk interface.')
hwVTrunkIfID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 511))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVTrunkIfID.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfID.setDescription(' The identification of the VTrunk interface.It may identify VTrunk and is an index of the interface.')
hwVTrunkIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pos-Trunk", 1), ("cpos-Trunk", 2), ("atm-Trunk", 3), ("atm-bundle", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVTrunkIfType.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfType.setDescription(' The type of the VTrunk interface includes pos-Trunk, cpos-Trunk, atm-trunk and atm-bundle.')
hwVTrunkIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 16, 1, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVTrunkIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfRowStatus.setDescription(' Current operation status of the row.')
hwVTrunkMemAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17))
hwVTrunkMemTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1), )
if mibBuilder.loadTexts: hwVTrunkMemTable.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkMemTable.setDescription('VTrunk member attribute information table.')
hwVTrunkMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwVTrunkMemIfIndex"))
if mibBuilder.loadTexts: hwVTrunkMemEntry.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkMemEntry.setDescription('VTrunk member attribute information.')
hwVTrunkMemIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: hwVTrunkMemIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkMemIfIndex.setDescription('VTrunk port index.')
hwVTrunkIfnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVTrunkIfnetIndex.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfnetIndex.setDescription('The IfnetIndex of the VTrunk interface.')
hwVTrunkValidEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVTrunkValidEntry.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkValidEntry.setDescription('Valid Entries of VTrunk interface.')
hwVTrunkOperstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVTrunkOperstatus.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkOperstatus.setDescription('Status of operation, indicates port status. There are vtrunk_up(1) and vtrunk_down(2).It expresses whether port is shutdown.')
hwVTrunkPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portInactive", 1), ("portActive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVTrunkPortActive.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkPortActive.setDescription('Active port of backup-access vtrunk or not 1: portInactive 2: portActive.')
hwVTrunkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 17, 1, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwVTrunkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkRowStatus.setDescription('Current operation status of the row. ')
hwMasterBackupTrunkSubinterfaceAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18))
hwMasterBackupTrunkSubinterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1), )
if mibBuilder.loadTexts: hwMasterBackupTrunkSubinterfaceTable.setStatus('current')
if mibBuilder.loadTexts: hwMasterBackupTrunkSubinterfaceTable.setDescription('Master-Backup Trunk Subinterface attribute information table.')
hwMasterBackupTrunkSubinterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwBackupTrunkIfIndex"))
if mibBuilder.loadTexts: hwMasterBackupTrunkSubinterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: hwMasterBackupTrunkSubinterfaceEntry.setDescription('Master-Backup Trunk Subinterface attribute information.')
hwBackupTrunkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwBackupTrunkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwBackupTrunkIfIndex.setDescription('This object indicates index of master/backup trunk sub-interface.')
hwBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBackupStatus.setStatus('current')
if mibBuilder.loadTexts: hwBackupStatus.setDescription('The value of this object identifies backupStatus of master/backup trunk sub-interface.')
hwRevertiveMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("revertive", 1), ("non-revertive", 2))).clone('revertive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRevertiveMode.setStatus('current')
if mibBuilder.loadTexts: hwRevertiveMode.setDescription('The value of this object identifies revertive-mode of master/backup trunk sub-interface.')
hwWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwWtrTime.setStatus('current')
if mibBuilder.loadTexts: hwWtrTime.setDescription('The value of this object identifies the wait-to-restore time of master/backup trunk sub-interface.')
hwFlushVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 18, 1, 1, 5), VlanIdOrNone()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwFlushVlanId.setStatus('current')
if mibBuilder.loadTexts: hwFlushVlanId.setDescription('This object indicates VLAN ID carried in a FlushPDU.')
hwVaspPort = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 19))
hwVaspPortPeerMacTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 19, 1), )
if mibBuilder.loadTexts: hwVaspPortPeerMacTable.setStatus('current')
if mibBuilder.loadTexts: hwVaspPortPeerMacTable.setDescription('Vasp port peer MAC table.')
hwVaspPortPeerMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 19, 1, 1), ).setIndexNames((0, "HUAWEI-IF-EXT-MIB", "hwVaspPortIfIndex"))
if mibBuilder.loadTexts: hwVaspPortPeerMacEntry.setStatus('current')
if mibBuilder.loadTexts: hwVaspPortPeerMacEntry.setDescription('Vasp port peer MAC table entry.')
hwVaspPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 19, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwVaspPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwVaspPortIfIndex.setDescription('The index of interface.')
hwVaspPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 19, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVaspPortName.setStatus('current')
if mibBuilder.loadTexts: hwVaspPortName.setDescription('The name of vasp port.')
hwVaspPortPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 19, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwVaspPortPeerMac.setStatus('current')
if mibBuilder.loadTexts: hwVaspPortPeerMac.setDescription('The peer MAC of port.')
hwIFExtTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 20))
hwLinkDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("physicalLinkDown", 1), ("lacpNegotiationFailed", 2), ("receiveConfReqPacket", 3), ("receiveConfAckPacket", 4), ("receiveNakPacket", 5), ("receiveTermPacket", 6), ("receiveTermAckPacket", 7), ("receiveCodeRejPacket", 8), ("receiveProtoRejPacket", 9), ("chapAuthenticationFailed", 10), ("papAuthenticationFailed", 11), ("keepaliveOutOfTime", 12), ("pvcDown", 13), ("efmSessionFailed", 14), ("tunnelDownOrInexist", 15), ("admindown", 16), ("protocoldown", 17), ("adminup", 18), ("protocolup", 19), ("mainifdown", 20), ("physicalLinkIsUp", 21), ("conditionsForActivationNotMet", 22), ("conditionsForActivationAreMet", 23), ("tunnelIsUp", 24), ("interfaceIsDeleted", 25), ("bfdSessionDown", 26), ("bfdSessionUp", 27), ("efmSessionUp", 28), ("portAlarmDown", 29), ("dldpIsDown", 30), ("dldpIsUp", 31), ("vrrpFlowDown", 32), ("vrrpFlowUp", 33)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwLinkDownReason.setStatus('current')
if mibBuilder.loadTexts: hwLinkDownReason.setDescription('The reason code of link changes.')
hwMainIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 20, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMainIfName.setStatus('current')
if mibBuilder.loadTexts: hwMainIfName.setDescription(' The main interface name.')
hwCfmOverPhysicalName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 1, 20, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwCfmOverPhysicalName.setStatus('current')
if mibBuilder.loadTexts: hwCfmOverPhysicalName.setDescription('The configuration of the interface board or interface card is restored.')
hwIFExtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2))
hwIFExtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1))
hwTrunkIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 1)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIFExtPhyStatus"), ("HUAWEI-IF-EXT-MIB", "hwIFExtMemberOf"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfMax"), ("HUAWEI-IF-EXT-MIB", "hwTrunkNextIndex"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIndex"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfType"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfModel"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfBandWidthAffectLinkNum"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfMinLinkNum"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfRowStatus"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfWorkingMode"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfWorkingState"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfAutoRecover"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfPreemptEnable"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfPreemptDelay"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfTimeoutReceive"), ("HUAWEI-IF-EXT-MIB", "hwTrunkBandwidth"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfFlushSendEnable"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfFlushVlanId"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfFlushPasswd"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfForceSwitchEnable"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfStatReset"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfLagSelectedPortStd"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfLagMaxActiveLinkNum"), ("HUAWEI-IF-EXT-MIB", "hwTrunkETrunkPriority"), ("HUAWEI-IF-EXT-MIB", "hwTrunkETrunkSysID"), ("HUAWEI-IF-EXT-MIB", "hwTrunkETrunkPriorityReset"), ("HUAWEI-IF-EXT-MIB", "hwTrunkETrunkSysIDReset"), ("HUAWEI-IF-EXT-MIB", "hwTrunkLocalPrefMode"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfTrackVrrpVrid"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfTrackVrrpIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfTrackVrrpReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTrunkIfGroup = hwTrunkIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwTrunkIfGroup.setDescription('A collection of objects indicating information of IP address of interface, contain IP address, IP address mask and IP address acquiring method.')
hwIfIpAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 2)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIpAdEntAddr"), ("HUAWEI-IF-EXT-MIB", "hwIpAdEntIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwIpAdEntNetMask"), ("HUAWEI-IF-EXT-MIB", "hwIpAdEntBcastAddr"), ("HUAWEI-IF-EXT-MIB", "hwIpAdEntReasmMaxSize"), ("HUAWEI-IF-EXT-MIB", "hwIpAdEntAddressType"), ("HUAWEI-IF-EXT-MIB", "hwIfIpMethod"), ("HUAWEI-IF-EXT-MIB", "hwIpAdEntAddrStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfIpAddressGroup = hwIfIpAddressGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfIpAddressGroup.setDescription('A collection of objects indicating attribute of the Trunk interface.')
hwIFExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 3)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIFExtLayer"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFrameType"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlowStatInterval"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlushReceiveEnable"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlushVlanId"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlushPasswd"), ("HUAWEI-IF-EXT-MIB", "hwTrunkSystemPriority"), ("HUAWEI-IF-EXT-MIB", "hwTrunkUnknownUnicastIfModel"), ("HUAWEI-IF-EXT-MIB", "hwTrunkETrunkSystemPriority"), ("HUAWEI-IF-EXT-MIB", "hwTrunkETrunkSystemID"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlowStatus"), ("HUAWEI-IF-EXT-MIB", "hwIFExtMtu"), ("HUAWEI-IF-EXT-MIB", "hwIFExtMacAddr"), ("HUAWEI-IF-EXT-MIB", "hwIFExtBlockPriority"), ("HUAWEI-IF-EXT-MIB", "hwIFExtMacShift"), ("HUAWEI-IF-EXT-MIB", "hwIFExtSuppressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIFExtGroup = hwIFExtGroup.setStatus('current')
if mibBuilder.loadTexts: hwIFExtGroup.setDescription('A collection of objects indicating attribute of interface extended.')
hwTrunkMemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 4)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkMemifIndex"), ("HUAWEI-IF-EXT-MIB", "hwTrunkValidEntry"), ("HUAWEI-IF-EXT-MIB", "hwTrunkSelectStatus"), ("HUAWEI-IF-EXT-MIB", "hwTrunkLacpStatus"), ("HUAWEI-IF-EXT-MIB", "hwTrunkDeleteFlag"), ("HUAWEI-IF-EXT-MIB", "hwTrunkOperstatus"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIsDefaultLagRecv"), ("HUAWEI-IF-EXT-MIB", "hwTrunkPortWeight"), ("HUAWEI-IF-EXT-MIB", "hwTrunkPortStandby"), ("HUAWEI-IF-EXT-MIB", "hwTrunkPortMaster"), ("HUAWEI-IF-EXT-MIB", "hwTrunkPortPriority"), ("HUAWEI-IF-EXT-MIB", "hwTrunkPortStatReset"), ("HUAWEI-IF-EXT-MIB", "hwTrunkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwTrunkMemGroup = hwTrunkMemGroup.setStatus('current')
if mibBuilder.loadTexts: hwTrunkMemGroup.setDescription("Trunk member attribute Group, now only can set hwTrunkPortWeight and hwTrunkPortStandby. hwTrunkSelectStatus and hwTrunkDeleteFlag can't be set. These attributes are for extend.")
hwIFFlowStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 5)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIFFlowStatGlobalInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIFFlowStatGroup = hwIFFlowStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwIFFlowStatGroup.setDescription('A collection of objects indicating interval time of interface flow stat.')
hwAdminVrrpMemberIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 6)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfFlowChangeTime"), ("HUAWEI-IF-EXT-MIB", "hwAdminVrrpVrid"), ("HUAWEI-IF-EXT-MIB", "hwAdminVrrpIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwAdminVrrpMemberIfFlowStatus"), ("HUAWEI-IF-EXT-MIB", "hwAdminVrrpMemberIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwAdminVrrpMemberIfGroup = hwAdminVrrpMemberIfGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwAdminVrrpMemberIfGroup.setDescription('A collection of objects indicating attribute of the interface track administrator VRRP.')
hwIfEtherStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 7)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPkts64Octets"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPkts65to127Octets"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPkts128to255Octets"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPkts256to511Octets"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPkts512to1023Octets"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPkts1024to1518Octets"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInJumboPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInCRCPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInLongPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInJabberPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInFragmentPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInUnderSizePkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInOverRunPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInPausePkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutJumboPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutOverflowPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutUnderRunPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutPausePkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEthIfStatReset"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInDropEventPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInAlignmentPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInSymbolPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInIgnoredPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatInFramePkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutCollisionPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutDeferredPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutLateCollisionPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutExcessiveCollisionPkts"), ("HUAWEI-IF-EXT-MIB", "hwIfEtherStatOutBufferPurgationPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfEtherStatGroup = hwIfEtherStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfEtherStatGroup.setDescription('Interface statistic Group.')
hwIFExtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 2))
hwIfMonitorThresholdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 8)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRatePercentage"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRateThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRatePercentage"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRateThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorDelayValue"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorDelayThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorJitterValue"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorJitterThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfMonitorThresholdGroup = hwIfMonitorThresholdGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorThresholdGroup.setDescription('Alarm Monitor Group.')
hwIfMonitorGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 9)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRateEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRateEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorHalfDuplexEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseRisingEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseContinuingEnabledStatus"), ("HUAWEI-IF-EXT-MIB", "hwifMonitorBadBytesEnabledStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfMonitorGeneralGroup = hwIfMonitorGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorGeneralGroup.setDescription('Alarm Monitor Enable Group.')
hwIfFluxLimitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 10)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfFluxDirection"), ("HUAWEI-IF-EXT-MIB", "hwIfFluxLimitType"), ("HUAWEI-IF-EXT-MIB", "hwIfFluxCir"), ("HUAWEI-IF-EXT-MIB", "hwIfFluxCbs"), ("HUAWEI-IF-EXT-MIB", "hwIfFluxRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfFluxLimitGroup = hwIfFluxLimitGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfFluxLimitGroup.setDescription('Flux limit Group.')
hwIfDiffServGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 11)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfDiffServMode"), ("HUAWEI-IF-EXT-MIB", "hwIfDiffServServiceClass"), ("HUAWEI-IF-EXT-MIB", "hwIfDiffServColor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfDiffServGroup = hwIfDiffServGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfDiffServGroup.setDescription('Interface statistic Group.')
hwIfQueryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 12)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfQueryGroup = hwIfQueryGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfQueryGroup.setDescription('Interface name Group.')
hwLogicIfAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 13)).setObjects(("HUAWEI-IF-EXT-MIB", "hwLogicIfMainIndex"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfType"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfName"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfParaOne"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLogicIfAttrGroup = hwLogicIfAttrGroup.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfAttrGroup.setDescription('Logic interface table Group.')
hwIfIpUnnumberedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 14)).setObjects(("HUAWEI-IF-EXT-MIB", "hwLendIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwLendIpAddr"), ("HUAWEI-IF-EXT-MIB", "hwLendIpAddrNetMask"), ("HUAWEI-IF-EXT-MIB", "hwUnnumberedRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIfIpUnnumberedGroup = hwIfIpUnnumberedGroup.setStatus('current')
if mibBuilder.loadTexts: hwIfIpUnnumberedGroup.setDescription('Logic interface table Group.')
hwLinkModeChangeAutoCreateIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 15)).setObjects(("HUAWEI-IF-EXT-MIB", "hwNewIfTimeslot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLinkModeChangeAutoCreateIfGroup = hwLinkModeChangeAutoCreateIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwLinkModeChangeAutoCreateIfGroup.setDescription('Interface time slot Group.')
hwCppsGlobalEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 16)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCppsGlobalEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCppsGlobalEnableGroup = hwCppsGlobalEnableGroup.setStatus('current')
if mibBuilder.loadTexts: hwCppsGlobalEnableGroup.setDescription('A collection of objects indicating global CPU packet statistic function.')
hwCppsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 17)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCppsPortPvcEnable"), ("HUAWEI-IF-EXT-MIB", "hwCppsPortVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCppsInterfaceGroup = hwCppsInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: hwCppsInterfaceGroup.setDescription('A collection of objects providing interface configuration function.')
hwCppsIfStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 18)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCppsInterfacePktStatisic"), ("HUAWEI-IF-EXT-MIB", "hwCppsInterfaceByteStatisic"), ("HUAWEI-IF-EXT-MIB", "hwCppsResetInterfaceStatisic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCppsIfStatisticsGroup = hwCppsIfStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwCppsIfStatisticsGroup.setDescription('A collection of objects providing packet and byte statistic of the interface sent to CPU.')
hwCppsAtmPvcGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 19)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCppsAtmPvcPktStatisic"), ("HUAWEI-IF-EXT-MIB", "hwCppsAtmPvcByteStatisic"), ("HUAWEI-IF-EXT-MIB", "hwCppsResetAtmPvcStatisic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCppsAtmPvcGroup = hwCppsAtmPvcGroup.setStatus('current')
if mibBuilder.loadTexts: hwCppsAtmPvcGroup.setDescription('A collection of objects providing packet and byte statistic for the pvc sent to CPU.')
hwCppsPortVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 20)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCppsPortVlanPktStatisic"), ("HUAWEI-IF-EXT-MIB", "hwCppsPortVlanByteStatisic"), ("HUAWEI-IF-EXT-MIB", "hwCppsResetPortVlanStatisic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwCppsPortVlanGroup = hwCppsPortVlanGroup.setStatus('current')
if mibBuilder.loadTexts: hwCppsPortVlanGroup.setDescription('A collection of objects providing packet and byte statistic for the port sent to CPU.')
hwPortIsolationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 21)).setObjects(("HUAWEI-IF-EXT-MIB", "hwPortIsolationGroupPortList"), ("HUAWEI-IF-EXT-MIB", "hwPortIsolationGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwPortIsolationGroup = hwPortIsolationGroup.setStatus('current')
if mibBuilder.loadTexts: hwPortIsolationGroup.setDescription('Port Isolation Group.')
hwVTrunkIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 22)).setObjects(("HUAWEI-IF-EXT-MIB", "hwVTrunkIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkIfID"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkIfType"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkIfRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVTrunkIfGroup = hwVTrunkIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkIfGroup.setDescription('VTrunk attribute Group.')
hwVTrunkMemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 23)).setObjects(("HUAWEI-IF-EXT-MIB", "hwVTrunkMemIfIndex"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkValidEntry"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkOperstatus"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkPortActive"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVTrunkMemGroup = hwVTrunkMemGroup.setStatus('current')
if mibBuilder.loadTexts: hwVTrunkMemGroup.setDescription('VTrunk member attribute Group.')
hwLogicIfHelpTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 24)).setObjects(("HUAWEI-IF-EXT-MIB", "hwLogicIfhelpType"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfChassisNumber"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfSlotNumber"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfCardNumber"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfMin"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfMax"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLogicIfHelpTableGroup = hwLogicIfHelpTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfHelpTableGroup.setDescription('Logic interface help table Group.')
hwSubInterfaceBackupTrunkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 25)).setObjects(("HUAWEI-IF-EXT-MIB", "hwBackupStatus"), ("HUAWEI-IF-EXT-MIB", "hwRevertiveMode"), ("HUAWEI-IF-EXT-MIB", "hwWtrTime"), ("HUAWEI-IF-EXT-MIB", "hwFlushVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwSubInterfaceBackupTrunkGroup = hwSubInterfaceBackupTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: hwSubInterfaceBackupTrunkGroup.setDescription('SubInterfaceBackupTrunk attribute Group.')
hwVaspPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 26)).setObjects(("HUAWEI-IF-EXT-MIB", "hwVaspPortName"), ("HUAWEI-IF-EXT-MIB", "hwVaspPortPeerMac"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwVaspPortGroup = hwVaspPortGroup.setStatus('current')
if mibBuilder.loadTexts: hwVaspPortGroup.setDescription('The vasp port group.')
hwLogicIfDynamicHelpTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 1, 27)).setObjects(("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfhelpType"), ("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfChassisNumber"), ("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfSlotNumber"), ("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfCardNumber"), ("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfMin"), ("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfMax"), ("HUAWEI-IF-EXT-MIB", "hwLogicDynamicIfTotal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwLogicIfDynamicHelpTableGroup = hwLogicIfDynamicHelpTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwLogicIfDynamicHelpTableGroup.setDescription('Logic interface Dynamic help table Group.')
hwIFExtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 2, 2, 1)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfGroup"), ("HUAWEI-IF-EXT-MIB", "hwIfIpAddressGroup"), ("HUAWEI-IF-EXT-MIB", "hwIFExtGroup"), ("HUAWEI-IF-EXT-MIB", "hwTrunkMemGroup"), ("HUAWEI-IF-EXT-MIB", "hwIFFlowStatGroup"), ("HUAWEI-IF-EXT-MIB", "hwIfQueryGroup"), ("HUAWEI-IF-EXT-MIB", "hwLogicIfAttrGroup"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkIfGroup"), ("HUAWEI-IF-EXT-MIB", "hwVTrunkMemGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIFExtCompliance = hwIFExtCompliance.setStatus('current')
if mibBuilder.loadTexts: hwIFExtCompliance.setDescription('The compliance statement for entities implementing Huawei extended interface management MIB.')
hwIFExtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3))
hwTrunkWorkingSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 1)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("HUAWEI-IF-EXT-MIB", "hwTrunkIfWorkingState"))
if mibBuilder.loadTexts: hwTrunkWorkingSwitch.setStatus('current')
if mibBuilder.loadTexts: hwTrunkWorkingSwitch.setDescription('hwTrunkWorkingSwitch. 1.hwTrunkIfID: The identification of the Trunk interface; 2.hwTrunkIfWorkingState: Current working state of backup-access trunk. Index: hwTrunkIndex.')
hwLacpNegotiateFailed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 2)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("IF-MIB", "ifName"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwLacpNegotiateFailed.setStatus('current')
if mibBuilder.loadTexts: hwLacpNegotiateFailed.setDescription('The member of LAG neither can take over PDU nor transmit PDUs. Send this trap when LACP protocol negotiation fails. 1.hwTrunkIfID: The identification of the Trunk interface; 2.ifName: It is the name of the trunk in the ifXTable of IF-MIB. 3.ifName: It is the name of the port in the ifXTable of IF-MIB. Indexes: 1.hwTrunkIndex; 2.ifIndex. ')
hwLacpTotalLinkLoss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 3)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwLacpTotalLinkLoss.setStatus('current')
if mibBuilder.loadTexts: hwLacpTotalLinkLoss.setDescription('Total loss of link bandwidth: it means that there is no member in the LAG group and the trap of MNCD(Member not Collecting/Distributing) occurs. 1.hwTrunkIfID: The identification of the Trunk interface; 2.ifName: It is in the ifXTable of IF-MIB. Index: hwTrunkIndex.')
hwLacpPartialLinkLoss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 4)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwLacpPartialLinkLoss.setStatus('current')
if mibBuilder.loadTexts: hwLacpPartialLinkLoss.setDescription("Part loss of link bandwidth: it means that some members in the LAG group aren't in the working-state, making the number of ports in working-state smaller than the hwTrunkIfMinLinkNum. The trap of PLL(Partial Link Loss) will be restrained by the trap of TLL(Total Link Loss). 1.hwTrunkIfID: The identification of the Trunk interface; 2.ifName: It is in the ifXTable of IF-MIB. Index: hwTrunkIndex.")
hwIfFlowDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 5)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlowStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwIfFlowDown.setStatus('current')
if mibBuilder.loadTexts: hwIfFlowDown.setDescription("This notification indicates the time when the interface's flow status changes to flow down,and the reason.")
hwIfFlowUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 6)).setObjects(("SNMPv2-MIB", "sysUpTime"), ("HUAWEI-IF-EXT-MIB", "hwIFExtFlowStatus"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwIfFlowUp.setStatus('current')
if mibBuilder.loadTexts: hwIfFlowUp.setDescription("This notification indicates the time when the interface's flow status changes to flow up,and the reason.")
hwIfNameChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 7))
if mibBuilder.loadTexts: hwIfNameChange.setStatus('current')
if mibBuilder.loadTexts: hwIfNameChange.setDescription('When a single-chassis device is upgraded to a multi-chassis device, the interface information is changed and then the system sends a trap.')
hwIfNameChangeResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 8))
if mibBuilder.loadTexts: hwIfNameChangeResume.setStatus('current')
if mibBuilder.loadTexts: hwIfNameChangeResume.setDescription('When a multi-chassis restore a single-chassis device, the interface information is changed and then the system sends a trap.')
hwExtLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 9)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifDescr"), ("HUAWEI-IF-EXT-MIB", "hwIFExtPhyStatus"), ("HUAWEI-IF-EXT-MIB", "hwIFExtMemberOf"))
if mibBuilder.loadTexts: hwExtLinkDown.setStatus('deprecated')
if mibBuilder.loadTexts: hwExtLinkDown.setDescription('This notification indicates the time when the member interface link status changes to down.The ifDescr indicates the name of the member interface,the hwIFExtMemberOf indicates the name of main interface.')
hwExtLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 10)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("IF-MIB", "ifDescr"), ("HUAWEI-IF-EXT-MIB", "hwIFExtPhyStatus"), ("HUAWEI-IF-EXT-MIB", "hwIFExtMemberOf"))
if mibBuilder.loadTexts: hwExtLinkUp.setStatus('deprecated')
if mibBuilder.loadTexts: hwExtLinkUp.setDescription('This notification indicates the time when the member interface link status changes to up.The ifDescr indicates the name of the member interface,the hwIFExtMemberOf indicates the name of main interface.')
hwLoopbackBlock = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 11)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfName"))
if mibBuilder.loadTexts: hwLoopbackBlock.setStatus('current')
if mibBuilder.loadTexts: hwLoopbackBlock.setDescription('This notification indicates block state of the interface.')
hwLoopbackResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 12)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfName"))
if mibBuilder.loadTexts: hwLoopbackResume.setStatus('current')
if mibBuilder.loadTexts: hwLoopbackResume.setDescription('This notification indicates normal state of the interface.')
hwLacpNegotiateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 13)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("IF-MIB", "ifName"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwLacpNegotiateResume.setStatus('current')
if mibBuilder.loadTexts: hwLacpNegotiateResume.setDescription('Negotiation failure alarm is resumed. 1.hwTrunkIfID: The identification of the Trunk interface; 2.ifName: It is the name of the trunk in the ifXTable of IF-MIB. 3.ifName: It is the name of the port in the ifXTable of IF-MIB. Indexes: 1.hwTrunkIndex; 2.ifIndex. ')
hwLacpTotalLinkLossResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 14)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwLacpTotalLinkLossResume.setStatus('current')
if mibBuilder.loadTexts: hwLacpTotalLinkLossResume.setDescription('Link bandwidth lost totally is resumed. 1.hwTrunkIfID: The identification of the Trunk interface; 2.ifName: It is in the ifXTable of IF-MIB. Index: hwTrunkIndex.')
hwLacpPartialLinkLossResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 15)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkIfID"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwLacpPartialLinkLossResume.setStatus('current')
if mibBuilder.loadTexts: hwLacpPartialLinkLossResume.setDescription('Link bandwidth lost partly is resumed. 1.hwTrunkIfID: The identification of the Trunk interface; 2.ifName: It is in the ifXTable of IF-MIB. Index: hwTrunkIndex.')
hwTrunkSubIfStateToMaster = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 24)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfName"), ("HUAWEI-IF-EXT-MIB", "hwBackupStatus"))
if mibBuilder.loadTexts: hwTrunkSubIfStateToMaster.setStatus('current')
if mibBuilder.loadTexts: hwTrunkSubIfStateToMaster.setDescription('This notification indicates BackupState of the Trunk subinterface. 1.hwIfName: The identification of the Trunk subinterface; 2.hwBackupStatus: Current working state of Trunk subinterface.')
hwTrunkSubIfStateToSlave = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 25)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfName"), ("HUAWEI-IF-EXT-MIB", "hwBackupStatus"))
if mibBuilder.loadTexts: hwTrunkSubIfStateToSlave.setStatus('current')
if mibBuilder.loadTexts: hwTrunkSubIfStateToSlave.setDescription('This notification indicates BackupState of the Trunk subinterface. 1.hwIfName: The identification of the Trunk subinterface; 2.hwBackupStatus: Current working state of Trunk subinterface.')
hwEntityExtCfmOverSlot = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 26)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCfmOverPhysicalName"))
if mibBuilder.loadTexts: hwEntityExtCfmOverSlot.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtCfmOverSlot.setDescription('The hwEntityExtCfmOverSlot notification will be displayed when the configuration of an interface board is restored. The object hwCfmOverPhysicalName idicates the name of the interface board.')
hwEntityExtCfmOverCard = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 27)).setObjects(("HUAWEI-IF-EXT-MIB", "hwCfmOverPhysicalName"))
if mibBuilder.loadTexts: hwEntityExtCfmOverCard.setStatus('current')
if mibBuilder.loadTexts: hwEntityExtCfmOverCard.setDescription('The hwEntityExtCfmOverCard notification will be displayed when the configuration of an interface card is restored. The object hwCfmOverPhysicalName idicates the name of the interface card.')
hwExtAllMemberDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 28)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwExtAllMemberDownNotify.setStatus('current')
if mibBuilder.loadTexts: hwExtAllMemberDownNotify.setDescription('This notification indicates the time when the last member interface link status changes to down. The ifName indicates the name of the Trunk interface.')
hwExtAllMemberDownResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 29)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwExtAllMemberDownResume.setStatus('current')
if mibBuilder.loadTexts: hwExtAllMemberDownResume.setDescription('This notification indicates the time when the first member interface link status changes to up. The ifName indicates the name of the Trunk interface.')
hwIfControlFlapSuppress = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 31)).setObjects(("IF-MIB", "ifName"), ("HUAWEI-IF-EXT-MIB", "hwIFExtSuppressStatus"))
if mibBuilder.loadTexts: hwIfControlFlapSuppress.setStatus('current')
if mibBuilder.loadTexts: hwIfControlFlapSuppress.setDescription(" This notification indicates the time when the interface's status changes from unsuppress to suppress. ")
hwIfControlFlapResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 32)).setObjects(("IF-MIB", "ifName"), ("HUAWEI-IF-EXT-MIB", "hwIFExtSuppressStatus"))
if mibBuilder.loadTexts: hwIfControlFlapResume.setStatus('current')
if mibBuilder.loadTexts: hwIfControlFlapResume.setDescription(" This notification indicates the time when the interface's status changes from suppress to unsuppress. ")
hwExtInterfaceDelete = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 3, 33)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwExtInterfaceDelete.setStatus('current')
if mibBuilder.loadTexts: hwExtInterfaceDelete.setDescription(' This notification indicates the time when the interface was deleted. ')
hwMonitorNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4))
hwIfMonitorCrcErrorRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 1)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorCrcErrorRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorCrcErrorRising.setDescription(' Crc error alarm notification ')
hwIfMonitorCrcErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 2)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorCrcErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorCrcErrorResume.setDescription(' Crc error alarm resume ')
hwIfMonitorSdhErrorRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 3)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSdhErrorRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhErrorRising.setDescription(' Sdh error alarm notification only for B3')
hwIfMonitorSdhErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 4)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSdhErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhErrorResume.setDescription(' Sdh error alarm resume only for B3')
hwIfMonitorInputRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 5)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRatePercentage"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRateThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorInputRateRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorInputRateRising.setDescription(' Input rate alarm notification ')
hwIfMonitorInputRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 6)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRatePercentage"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRateThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorInputRateResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorInputRateResume.setDescription(' Input rate alarm resume ')
hwIfMonitorOutputRateRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 7)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRatePercentage"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRateThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorOutputRateRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorOutputRateRising.setDescription(' Output rate alarm notification ')
hwIfMonitorOutputRateResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 8)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRatePercentage"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRateThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorOutputRateResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorOutputRateResume.setDescription(' Output rate alarm resume ')
hwIfMonitorHalfDuplexRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 9)).setObjects(("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hwIfMonitorHalfDuplexRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorHalfDuplexRising.setDescription(' Interface half duplex alarm norification ')
hwIfMonitorPauseFrameRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 10)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameInterval"))
if mibBuilder.loadTexts: hwIfMonitorPauseFrameRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseFrameRising.setDescription(' Pause frame alarm notification ')
hwIfMonitorPauseFrameRisingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 11)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameInterval"))
if mibBuilder.loadTexts: hwIfMonitorPauseFrameRisingResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorPauseFrameRisingResume.setDescription(' Pause frame alarm resume ')
hwIfPortControlUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 12)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwIfPortControlUp.setStatus('current')
if mibBuilder.loadTexts: hwIfPortControlUp.setDescription(' Control Up alarm notification ')
hwIfPortControlDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 13)).setObjects(("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwIfPortControlDown.setStatus('current')
if mibBuilder.loadTexts: hwIfPortControlDown.setDescription(' Control Down alarm notification ')
hwIfMonitorSdhB1ErrorRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 14)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorRising.setDescription(' Sdh B1 error alarm notification ')
hwIfMonitorSdhB1ErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 15)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB1ErrorResume.setDescription(' Sdh B1 error alarm resume')
hwIfMonitorSdhB2ErrorRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 16)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorRising.setDescription(' Sdh B2 error alarm notification ')
hwIfMonitorSdhB2ErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 17)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSdhB2ErrorResume.setDescription(' Sdh B2 error alarm resume')
hwIfMonitorSymbolErrorRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 18)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorRising.setDescription(' Symbol error alarm notification ')
hwIfMonitorSymbolErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 19)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorInterval"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorName"))
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorSymbolErrorResume.setDescription(' Crc error alarm resume ')
hwIfMonitorBadBytesErrorRising = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 40)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorInterval"))
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorRising.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorRising.setDescription('Description.')
hwIfMonitorBadBytesErrorResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 4, 41)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorStatistics"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorThreshold"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorInterval"))
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorResume.setStatus('current')
if mibBuilder.loadTexts: hwIfMonitorBadBytesErrorResume.setDescription('Description.')
hwIFExtTrapConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 5))
hwIFExtTrapGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 5, 1))
hwIFExtTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 5, 1, 1)).setObjects(("HUAWEI-IF-EXT-MIB", "hwTrunkWorkingSwitch"), ("HUAWEI-IF-EXT-MIB", "hwLacpNegotiateFailed"), ("HUAWEI-IF-EXT-MIB", "hwLacpTotalLinkLoss"), ("HUAWEI-IF-EXT-MIB", "hwLacpPartialLinkLoss"), ("HUAWEI-IF-EXT-MIB", "hwIfFlowDown"), ("HUAWEI-IF-EXT-MIB", "hwIfFlowUp"), ("HUAWEI-IF-EXT-MIB", "hwIfNameChange"), ("HUAWEI-IF-EXT-MIB", "hwIfNameChangeResume"), ("HUAWEI-IF-EXT-MIB", "hwExtLinkDown"), ("HUAWEI-IF-EXT-MIB", "hwExtLinkUp"), ("HUAWEI-IF-EXT-MIB", "hwLoopbackBlock"), ("HUAWEI-IF-EXT-MIB", "hwLoopbackResume"), ("HUAWEI-IF-EXT-MIB", "hwLacpNegotiateResume"), ("HUAWEI-IF-EXT-MIB", "hwLacpTotalLinkLossResume"), ("HUAWEI-IF-EXT-MIB", "hwLacpPartialLinkLossResume"), ("HUAWEI-IF-EXT-MIB", "hwExtAllMemberDownNotify"), ("HUAWEI-IF-EXT-MIB", "hwExtAllMemberDownResume"), ("HUAWEI-IF-EXT-MIB", "hwIfControlFlapSuppress"), ("HUAWEI-IF-EXT-MIB", "hwIfControlFlapResume"), ("HUAWEI-IF-EXT-MIB", "hwExtInterfaceDelete"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIFExtTrapGroup = hwIFExtTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwIFExtTrapGroup.setDescription('IF Trap Group.')
hwMonitorTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 5, 1, 2)).setObjects(("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorCrcErrorResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhErrorResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRateRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorInputRateResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRateRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorOutputRateResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorHalfDuplexRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorPauseFrameRisingResume"), ("HUAWEI-IF-EXT-MIB", "hwIfPortControlUp"), ("HUAWEI-IF-EXT-MIB", "hwIfPortControlDown"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB1ErrorResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSdhB2ErrorResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorSymbolErrorResume"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorRising"), ("HUAWEI-IF-EXT-MIB", "hwIfMonitorBadBytesErrorResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMonitorTrapGroup = hwMonitorTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwMonitorTrapGroup.setDescription('Monitor Trap Group.')
hwIFIpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 6))
hwIfIpAddressChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 41, 6, 1)).setObjects(("IP-MIB", "ipAdEntNetMask"), ("IP-MIB", "ipAdEntNetMask"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwIfIpAddressChange.setStatus('current')
if mibBuilder.loadTexts: hwIfIpAddressChange.setDescription('IP Trap Group. The trap will be generated when the primary IP address of an interface changes.')
mibBuilder.exportSymbols("HUAWEI-IF-EXT-MIB", hwLacpNegotiateFailed=hwLacpNegotiateFailed, hwIfEthIfStatReset=hwIfEthIfStatReset, hwIfSdhStatInCRCPkts=hwIfSdhStatInCRCPkts, hwCppsPortIndex=hwCppsPortIndex, hwIFExtMacAddr=hwIFExtMacAddr, hwCppsVlanId=hwCppsVlanId, hwIfMonitorSdhB2ErrorRising=hwIfMonitorSdhB2ErrorRising, hwTrunkIfForceSwitchEnable=hwTrunkIfForceSwitchEnable, hwIfEtherStatInFragmentPkts=hwIfEtherStatInFragmentPkts, hwVTrunkMemTable=hwVTrunkMemTable, hwVTrunkIfEntry=hwVTrunkIfEntry, hwIfSdhStatOutOverRunPkts=hwIfSdhStatOutOverRunPkts, hwUnnumberedRowStatus=hwUnnumberedRowStatus, hwTrunkIfType=hwTrunkIfType, hwIfMonitorBadBytesErrorThreshold=hwIfMonitorBadBytesErrorThreshold, hwTrunkIfTrackVrrpIfIndex=hwTrunkIfTrackVrrpIfIndex, hwIfQueryTable=hwIfQueryTable, hwIfSdhStatIfIndex=hwIfSdhStatIfIndex, hwIfMonitorSdhErrorResume=hwIfMonitorSdhErrorResume, hwTrunkMemAttr=hwTrunkMemAttr, hwIfMonitorInputRateEnabledStatus=hwIfMonitorInputRateEnabledStatus, hwIpAdEntAddrStatus=hwIpAdEntAddrStatus, hwAdminVrrpMemberIfEntry=hwAdminVrrpMemberIfEntry, hwTrunkSelectStatus=hwTrunkSelectStatus, hwTrunkLacpStatus=hwTrunkLacpStatus, hwVaspPortGroup=hwVaspPortGroup, hwIFFlowStat=hwIFFlowStat, hwIfEtherStatOutUnderRunPkts=hwIfEtherStatOutUnderRunPkts, hwIfMonitorSdhErrorRising=hwIfMonitorSdhErrorRising, SnmpPasswdString=SnmpPasswdString, hwLogicIfhelpType=hwLogicIfhelpType, hwIfIpTable=hwIfIpTable, hwExtAllMemberDownResume=hwExtAllMemberDownResume, hwTrunkIfEntry=hwTrunkIfEntry, hwLacpPartialLinkLoss=hwLacpPartialLinkLoss, hwIFFlowStatGroup=hwIFFlowStatGroup, hwIfMonitorIndex=hwIfMonitorIndex, hwCppsPortPvcEnable=hwCppsPortPvcEnable, hwIfFluxLimitGroup=hwIfFluxLimitGroup, hwLogicIfIndex=hwLogicIfIndex, hwIfMonitorCrcErrorStatistics=hwIfMonitorCrcErrorStatistics, hwVaspPortPeerMac=hwVaspPortPeerMac, hwCppsInterfaceTable=hwCppsInterfaceTable, hwTrunkMemTable=hwTrunkMemTable, hwAdminVrrpVrid=hwAdminVrrpVrid, hwLogicDynamicIfMax=hwLogicDynamicIfMax, hwIFExtTrapConformance=hwIFExtTrapConformance, hwTrunkNextIndex=hwTrunkNextIndex, hwCppsPortVlanTable=hwCppsPortVlanTable, hwTrunkPortMaster=hwTrunkPortMaster, hwAdminVrrpIfIndex=hwAdminVrrpIfIndex, hwIfEtherStatInFramePkts=hwIfEtherStatInFramePkts, hwCppsGlobalEnableGroup=hwCppsGlobalEnableGroup, hwVTrunkIfGroup=hwVTrunkIfGroup, hwTrunkIfTrackVrrpVrid=hwTrunkIfTrackVrrpVrid, hwIfIpUnnumberedTable=hwIfIpUnnumberedTable, hwIfAtmStatOutIdleCells=hwIfAtmStatOutIdleCells, hwLogicIfMax=hwLogicIfMax, hwPortIsolationGroupPortList=hwPortIsolationGroupPortList, hwIfEtherStatInSymbolPkts=hwIfEtherStatInSymbolPkts, hwCppsInterfaceGroup=hwCppsInterfaceGroup, hwEntityExtCfmOverSlot=hwEntityExtCfmOverSlot, hwTrunkIfMinLinkNum=hwTrunkIfMinLinkNum, hwIfEtherStatOutBufferPurgationPkts=hwIfEtherStatOutBufferPurgationPkts, hwVTrunkIfnetIndex=hwVTrunkIfnetIndex, hwIfMonitorJitterValue=hwIfMonitorJitterValue, hwAdminVrrpMemberIfFlowStatus=hwAdminVrrpMemberIfFlowStatus, hwIfIpAddressChange=hwIfIpAddressChange, hwIpAdEntAddr=hwIpAdEntAddr, hwIFFlowStatGlobalInterval=hwIFFlowStatGlobalInterval, hwVaspPortName=hwVaspPortName, hwTrunkPortStandby=hwTrunkPortStandby, hwTrunkIfTrackVrrpReset=hwTrunkIfTrackVrrpReset, hwCppsAtmPvcEntry=hwCppsAtmPvcEntry, hwIfMonitorSdhEnabledStatus=hwIfMonitorSdhEnabledStatus, hwCppsInterfacePktStatisic=hwCppsInterfacePktStatisic, hwIFExtEntry=hwIFExtEntry, hwIFExtTrapGroup=hwIFExtTrapGroup, hwTrunkPortStatReset=hwTrunkPortStatReset, hwIFExtTable=hwIFExtTable, hwTrunkMemGroup=hwTrunkMemGroup, hwMasterBackupTrunkSubinterfaceEntry=hwMasterBackupTrunkSubinterfaceEntry, hwVTrunkIfID=hwVTrunkIfID, hwTrunkETrunkSysIDReset=hwTrunkETrunkSysIDReset, hwIfMonitorDelayValue=hwIfMonitorDelayValue, hwIfPortControlDown=hwIfPortControlDown, hwIfEtherStatInDropEventPkts=hwIfEtherStatInDropEventPkts, hwIfMonitorSdhB1ErrorInterval=hwIfMonitorSdhB1ErrorInterval, hwIFExtConformance=hwIFExtConformance, hwCppsResetInterfaceStatisic=hwCppsResetInterfaceStatisic, hwLogicIfHelpTable=hwLogicIfHelpTable, hwLogicIfDynamicHelpTableGroup=hwLogicIfDynamicHelpTableGroup, hwTrunkETrunkPriority=hwTrunkETrunkPriority, hwIfEtherStatOutCollisionPkts=hwIfEtherStatOutCollisionPkts, hwIfEtherStatOutJumboPkts=hwIfEtherStatOutJumboPkts, hwLogicDynamicIfMin=hwLogicDynamicIfMin, hwLogicIfCardNumber=hwLogicIfCardNumber, HWDirectionType=HWDirectionType, hwIfMonitorSdhB1ErrorResume=hwIfMonitorSdhB1ErrorResume, hwIfControlFlapSuppress=hwIfControlFlapSuppress, hwLinkDownReason=hwLinkDownReason, hwIFExtGroup=hwIFExtGroup, hwIfEtherStatInPausePkts=hwIfEtherStatInPausePkts, hwUnnumberedIfIndex=hwUnnumberedIfIndex, hwIfAtmStatInUncorrectedCells=hwIfAtmStatInUncorrectedCells, hwIfMonitorJitterThreshold=hwIfMonitorJitterThreshold, hwIfMonitorHalfDuplexEnabledStatus=hwIfMonitorHalfDuplexEnabledStatus, PYSNMP_MODULE_ID=hwIFExtMib, hwCppsGlobalEnable=hwCppsGlobalEnable, hwTrunkIfArpSendSpeed=hwTrunkIfArpSendSpeed, hwCppsAtmPvcByteStatisic=hwCppsAtmPvcByteStatisic, hwIfDiffServTable=hwIfDiffServTable, hwIfIndex=hwIfIndex, hwIfMonitorPauseFrameRising=hwIfMonitorPauseFrameRising, hwCppsAtmPvcTable=hwCppsAtmPvcTable, hwIfMonitorSymbolErrorRising=hwIfMonitorSymbolErrorRising, hwIfFlowUp=hwIfFlowUp, hwAutoIfIndex=hwAutoIfIndex, hwIfMonitorSymbolErrorInterval=hwIfMonitorSymbolErrorInterval, hwCfmOverPhysicalName=hwCfmOverPhysicalName, hwIFIpNotifications=hwIFIpNotifications, hwIfFluxCbs=hwIfFluxCbs, hwLogicIfParaOne=hwLogicIfParaOne, hwIfMonitorCrcEnabledStatus=hwIfMonitorCrcEnabledStatus, hwIFExtMacShift=hwIFExtMacShift, hwIpAdEntNetMask=hwIpAdEntNetMask, hwIfMonitorSdhB2ErrorInterval=hwIfMonitorSdhB2ErrorInterval, hwAdminVrrpMemberIfTable=hwAdminVrrpMemberIfTable, hwIfMonitorInputRateThreshold=hwIfMonitorInputRateThreshold, hwCppsPortVlanByteStatisic=hwCppsPortVlanByteStatisic, hwIfFluxLimitType=hwIfFluxLimitType, hwIfEtherStatTable=hwIfEtherStatTable, hwTrunkWorkingSwitch=hwTrunkWorkingSwitch, hwIfEtherStatInPkts65to127Octets=hwIfEtherStatInPkts65to127Octets, hwVTrunkRowStatus=hwVTrunkRowStatus, hwTrunkIfAutoRecover=hwTrunkIfAutoRecover, hwIfMonitorOutputRateResume=hwIfMonitorOutputRateResume, hwIFExtSuppressStatus=hwIFExtSuppressStatus, hwIfSdhStatInLongPkts=hwIfSdhStatInLongPkts, hwPortIsolationGroupAttrib=hwPortIsolationGroupAttrib, hwVTrunkMemAttr=hwVTrunkMemAttr, hwIfMonitorGeneral=hwIfMonitorGeneral, hwBackupTrunkIfIndex=hwBackupTrunkIfIndex, hwTrunkIfID=hwTrunkIfID, hwTrunkPortWeight=hwTrunkPortWeight, hwIpAdEntAddressType=hwIpAdEntAddressType, hwIfMonitorOutputRatePercentage=hwIfMonitorOutputRatePercentage, hwTrunkIfIndex=hwTrunkIfIndex, hwIfMonitorObject=hwIfMonitorObject, hwTrunkIfWorkingState=hwTrunkIfWorkingState, hwExtLinkDown=hwExtLinkDown, hwIfDiffServIndex=hwIfDiffServIndex, hwIfEtherStatInPkts64Octets=hwIfEtherStatInPkts64Octets, hwPortIsolationGroup=hwPortIsolationGroup, hwTrunkIfFlushPasswd=hwTrunkIfFlushPasswd, hwIfMonitorHalfDuplexRising=hwIfMonitorHalfDuplexRising, hwIfDiffServ=hwIfDiffServ, hwIFExtObjects=hwIFExtObjects, hwMonitorNotifications=hwMonitorNotifications, hwIfMonitorInputRatePercentage=hwIfMonitorInputRatePercentage, hwLogicIfDynamicHelpEntry=hwLogicIfDynamicHelpEntry, hwIfMonitorPauseFrameStatistics=hwIfMonitorPauseFrameStatistics, hwLogicIfSlotNumber=hwLogicIfSlotNumber, hwIfMonitorSdhB2ErrorResume=hwIfMonitorSdhB2ErrorResume, hwMasterBackupTrunkSubinterfaceTable=hwMasterBackupTrunkSubinterfaceTable, hwLoopbackResume=hwLoopbackResume, hwIfIpUnnumberedGroup=hwIfIpUnnumberedGroup, hwCppsInterfaceByteStatisic=hwCppsInterfaceByteStatisic, hwCppsIfStatisticsGroup=hwCppsIfStatisticsGroup, hwTrunkIfPreemptDelay=hwTrunkIfPreemptDelay, hwLogicIfHelpTableGroup=hwLogicIfHelpTableGroup, hwIfAtmStatIfIndex=hwIfAtmStatIfIndex, hwIfMonitorCrcErrorInterval=hwIfMonitorCrcErrorInterval, hwAdminVrrpMemberIfIndex=hwAdminVrrpMemberIfIndex, hwIfFluxRowStatus=hwIfFluxRowStatus, hwIfAtmIfStatReset=hwIfAtmIfStatReset, hwIfMonitorBadBytesErrorRising=hwIfMonitorBadBytesErrorRising, hwIFExtCompliances=hwIFExtCompliances, hwLogicDynamicIfTotal=hwLogicDynamicIfTotal, hwIfMonitorSymbolErrorThreshold=hwIfMonitorSymbolErrorThreshold, hwIfSdhIfStatReset=hwIfSdhIfStatReset, hwAdminVrrpMemberIfRowStatus=hwAdminVrrpMemberIfRowStatus, hwTrunkETrunkPriorityReset=hwTrunkETrunkPriorityReset, hwTrunkSubIfStateToMaster=hwTrunkSubIfStateToMaster, hwIfSdhStatOutUnderRunPkts=hwIfSdhStatOutUnderRunPkts, hwIfFlowChangeTime=hwIfFlowChangeTime, hwTrunkValidEntry=hwTrunkValidEntry, hwTrunkETrunkSystemID=hwTrunkETrunkSystemID, hwIfEtherStatOutExcessiveCollisionPkts=hwIfEtherStatOutExcessiveCollisionPkts, hwIfMonitorName=hwIfMonitorName, hwIfMonitorCrcErrorResume=hwIfMonitorCrcErrorResume, hwIfEtherStatOutPausePkts=hwIfEtherStatOutPausePkts, hwLogicDynamicIfSlotNumber=hwLogicDynamicIfSlotNumber, hwLendIpAddrNetMask=hwLendIpAddrNetMask, hwVTrunkMemGroup=hwVTrunkMemGroup, hwIfDiffServMode=hwIfDiffServMode, hwIfSdhStatInShortPkts=hwIfSdhStatInShortPkts, hwIfFluxVlanId=hwIfFluxVlanId, hwIfEtherStatInPkts128to255Octets=hwIfEtherStatInPkts128to255Octets, hwIfDiffServColor=hwIfDiffServColor, hwIfEtherStatOutDeferredPkts=hwIfEtherStatOutDeferredPkts, hwVTrunkPortActive=hwVTrunkPortActive, hwNewIfTimeslot=hwNewIfTimeslot, hwTrunkIfTable=hwTrunkIfTable, hwIfQueryEntry=hwIfQueryEntry, hwTrunkIfStatReset=hwTrunkIfStatReset, hwCppsInterfaceIndex=hwCppsInterfaceIndex, hwTrunkUnknownUnicastIfModel=hwTrunkUnknownUnicastIfModel, hwIFExtPhyNumber=hwIFExtPhyNumber, hwCppsIfStatisticsIndex=hwCppsIfStatisticsIndex, hwIfIpMethod=hwIfIpMethod, hwLogicIfName=hwLogicIfName, hwLacpPartialLinkLossResume=hwLacpPartialLinkLossResume, hwWtrTime=hwWtrTime, hwIfEtherStatInCRCPkts=hwIfEtherStatInCRCPkts, hwCppsResetAtmPvcStatisic=hwCppsResetAtmPvcStatisic, hwLacpTotalLinkLoss=hwLacpTotalLinkLoss, hwTrunkIfPreemptEnable=hwTrunkIfPreemptEnable, hwIfName=hwIfName, hwIfMonitorPauseFrameRisingResume=hwIfMonitorPauseFrameRisingResume, hwIFExtTrapGroups=hwIFExtTrapGroups, hwTrunkIfTimeoutReceive=hwTrunkIfTimeoutReceive, hwVTrunkValidEntry=hwVTrunkValidEntry, hwIfMonitorSymbolErrorResume=hwIfMonitorSymbolErrorResume, hwIfEtherStatInJumboPkts=hwIfEtherStatInJumboPkts, hwTrunkBandwidth=hwTrunkBandwidth, hwLogicIfEntry=hwLogicIfEntry, hwCppsAtmIfIndex=hwCppsAtmIfIndex, hwIfEtherStatInJabberPkts=hwIfEtherStatInJabberPkts, hwTrunkIfBackupPreemptEnable=hwTrunkIfBackupPreemptEnable, hwAdminVrrpMemberIfGroup=hwAdminVrrpMemberIfGroup, hwVTrunkAttr=hwVTrunkAttr, hwIpAdEntIfIndex=hwIpAdEntIfIndex, hwIfIpAddressGroup=hwIfIpAddressGroup, hwIfEtherStatInPkts1024to1518Octets=hwIfEtherStatInPkts1024to1518Octets, hwIfEtherStatInPkts256to511Octets=hwIfEtherStatInPkts256to511Octets, hwCppsPortVlanGroup=hwCppsPortVlanGroup, hwCppsIfStatisticsEntry=hwCppsIfStatisticsEntry, hwTrunkIfRowStatus=hwTrunkIfRowStatus, hwIfControlFlapResume=hwIfControlFlapResume, hwLogicIfRowStatus=hwLogicIfRowStatus, hwIfMonitorInputRateResume=hwIfMonitorInputRateResume, hwLinkModeChangeAutoCreateIfGroup=hwLinkModeChangeAutoCreateIfGroup, hwTrunkIfMax=hwTrunkIfMax, hwIfIpUnnumberedEntry=hwIfIpUnnumberedEntry, hwTrunkIfFlushSendEnable=hwTrunkIfFlushSendEnable, hwFlushVlanId=hwFlushVlanId, hwTrunkMemEntry=hwTrunkMemEntry, hwIfDiffServEntry=hwIfDiffServEntry, hwTrunkIfWorkingMode=hwTrunkIfWorkingMode, hwIfMonitorPauseFrameInterval=hwIfMonitorPauseFrameInterval, hwIfFluxDirection=hwIfFluxDirection, hwTrunkIfBackupPreemptDelay=hwTrunkIfBackupPreemptDelay, hwMainIfName=hwMainIfName)
mibBuilder.exportSymbols("HUAWEI-IF-EXT-MIB", HwIpAddressType=HwIpAddressType, hwifMonitorBadBytesEnabledStatus=hwifMonitorBadBytesEnabledStatus, hwTrunkIfLagMaxActiveLinkNum=hwTrunkIfLagMaxActiveLinkNum, hwLoopbackBlock=hwLoopbackBlock, hwLogicIfMin=hwLogicIfMin, hwPortIsolationGroupIndex=hwPortIsolationGroupIndex, hwCppsObjects=hwCppsObjects, hwLinkModeChangeAutoCreateIfEntry=hwLinkModeChangeAutoCreateIfEntry, hwLogicIfTable=hwLogicIfTable, hwCppsAtmPvcPktStatisic=hwCppsAtmPvcPktStatisic, hwIfEtherStatGroup=hwIfEtherStatGroup, hwLacpNegotiateResume=hwLacpNegotiateResume, hwIfPortControlUp=hwIfPortControlUp, hwIFExtPhyStatus=hwIFExtPhyStatus, hwIfAtmStatTable=hwIfAtmStatTable, hwLogicIfType=hwLogicIfType, hwIfMonitorBadBytesErrorInterval=hwIfMonitorBadBytesErrorInterval, hwTrunkETrunkSysID=hwTrunkETrunkSysID, hwIfMonitorSdhB1ErrorStatistics=hwIfMonitorSdhB1ErrorStatistics, hwIpAdEntReasmMaxSize=hwIpAdEntReasmMaxSize, hwIfMonitorSdhB1ErrorRising=hwIfMonitorSdhB1ErrorRising, hwIfEtherStatInAlignmentPkts=hwIfEtherStatInAlignmentPkts, hwIfDiffServGroup=hwIfDiffServGroup, hwLogicIfDynamicHelpTable=hwLogicIfDynamicHelpTable, hwIfAtmStatOutGoodCells=hwIfAtmStatOutGoodCells, hwIFExtFlowStatInterval=hwIFExtFlowStatInterval, hwLogicDynamicIfhelpType=hwLogicDynamicIfhelpType, hwIfMonitorPauseFrameThreshold=hwIfMonitorPauseFrameThreshold, hwVTrunkMemIfIndex=hwVTrunkMemIfIndex, hwVaspPortIfIndex=hwVaspPortIfIndex, hwIFExtTraps=hwIFExtTraps, hwVaspPortPeerMacEntry=hwVaspPortPeerMacEntry, hwIfStatistics=hwIfStatistics, hwVTrunkMemEntry=hwVTrunkMemEntry, hwRevertiveMode=hwRevertiveMode, hwIfMonitorGeneralGroup=hwIfMonitorGeneralGroup, hwIfIpEntry=hwIfIpEntry, hwLendIpAddr=hwLendIpAddr, hwTrunkIfLagSelectedPortStd=hwTrunkIfLagSelectedPortStd, hwIfMonitorOutputRateThreshold=hwIfMonitorOutputRateThreshold, hwCppsPortVlanEntry=hwCppsPortVlanEntry, hwAdminVrrpMemberIf=hwAdminVrrpMemberIf, hwIfMonitorInputRateRising=hwIfMonitorInputRateRising, hwIfMonitorOutputRateRising=hwIfMonitorOutputRateRising, hwIfFluxLimit=hwIfFluxLimit, hwIfFluxCir=hwIfFluxCir, hwIfEtherStatInPkts512to1023Octets=hwIfEtherStatInPkts512to1023Octets, hwTrunkIfBandWidthAffectLinkNum=hwTrunkIfBandWidthAffectLinkNum, hwIfEtherStatInUnderSizePkts=hwIfEtherStatInUnderSizePkts, hwIfSdhStatTable=hwIfSdhStatTable, hwLogicDynamicIfCardNumber=hwLogicDynamicIfCardNumber, hwIfFluxLimitTable=hwIfFluxLimitTable, hwVTrunkIfTable=hwVTrunkIfTable, hwIfMonitorCrcErrorThreshold=hwIfMonitorCrcErrorThreshold, hwIFExtTrapObjects=hwIFExtTrapObjects, hwMonitorTrapGroup=hwMonitorTrapGroup, hwIFExtIndex=hwIFExtIndex, hwIfMonitorOutputRateEnabledStatus=hwIfMonitorOutputRateEnabledStatus, hwIFExtFlowStatus=hwIFExtFlowStatus, hwIfEtherStatInIgnoredPkts=hwIfEtherStatInIgnoredPkts, hwIfEtherStatOutLateCollisionPkts=hwIfEtherStatOutLateCollisionPkts, hwIfMonitorBadBytesErrorStatistics=hwIfMonitorBadBytesErrorStatistics, hwIFExtFrameType=hwIFExtFrameType, hwIFExtBase=hwIFExtBase, hwIfMonitorSdhB2ErrorThreshold=hwIfMonitorSdhB2ErrorThreshold, hwIfMonitorThresholdEntry=hwIfMonitorThresholdEntry, hwCppsAtmPvcGroup=hwCppsAtmPvcGroup, hwIfEtherStatEntry=hwIfEtherStatEntry, hwTrunkMemifIndex=hwTrunkMemifIndex, hwIfAtmStatInGoodCells=hwIfAtmStatInGoodCells, hwExtLinkUp=hwExtLinkUp, hwIfMonitorSdhErrorInterval=hwIfMonitorSdhErrorInterval, hwIFExtCompliance=hwIFExtCompliance, hwIFExtMtu=hwIFExtMtu, hwIfDiffServServiceClass=hwIfDiffServServiceClass, hwVaspPort=hwVaspPort, hwCppsPortVlanPktStatisic=hwCppsPortVlanPktStatisic, hwIFExtFlushPasswd=hwIFExtFlushPasswd, hwIFExtLayer=hwIFExtLayer, hwCppsAtmVpi=hwCppsAtmVpi, hwCppsAtmVci=hwCppsAtmVci, hwIfMonitorSdhB1ErrorThreshold=hwIfMonitorSdhB1ErrorThreshold, hwVTrunkIfIndex=hwVTrunkIfIndex, hwTrunkSystemPriority=hwTrunkSystemPriority, hwVTrunkIfType=hwVTrunkIfType, hwTrunkOperstatus=hwTrunkOperstatus, hwSubInterfaceBackupTrunkGroup=hwSubInterfaceBackupTrunkGroup, hwIfSdhStatEntry=hwIfSdhStatEntry, hwIfMonitorPauseRisingEnabledStatus=hwIfMonitorPauseRisingEnabledStatus, hwVaspPortPeerMacTable=hwVaspPortPeerMacTable, hwIFExtFlushVlanId=hwIFExtFlushVlanId, hwIFExtGroups=hwIFExtGroups, hwIfFluxLimitEntry=hwIfFluxLimitEntry, hwIfMonitorSymbolErrorStatistics=hwIfMonitorSymbolErrorStatistics, hwInterfaceIp=hwInterfaceIp, hwIpAdEntBcastAddr=hwIpAdEntBcastAddr, hwPortIsolationGroupEntry=hwPortIsolationGroupEntry, hwLogicIfMainIndex=hwLogicIfMainIndex, hwTrunkIsDefaultLagRecv=hwTrunkIsDefaultLagRecv, hwIFExtMib=hwIFExtMib, hwIfNameChange=hwIfNameChange, hwIfQueryGroup=hwIfQueryGroup, hwIfAtmStatEntry=hwIfAtmStatEntry, hwTrunkIndex=hwTrunkIndex, hwTrunkPortPriority=hwTrunkPortPriority, hwLogicIfAttrib=hwLogicIfAttrib, hwIfMonitorBadBytesErrorResume=hwIfMonitorBadBytesErrorResume, hwVTrunkOperstatus=hwVTrunkOperstatus, hwIfMonitorThresholdGroup=hwIfMonitorThresholdGroup, hwIfNameChangeResume=hwIfNameChangeResume, hwIfMonitorThresholdTable=hwIfMonitorThresholdTable, hwLendIfIndex=hwLendIfIndex, hwIfFluxIfIndex=hwIfFluxIfIndex, hwPortIsolationGroupTable=hwPortIsolationGroupTable, hwTrunkRowStatus=hwTrunkRowStatus, hwIfAtmStatInCorrectedCells=hwIfAtmStatInCorrectedCells, hwLacpTotalLinkLossResume=hwLacpTotalLinkLossResume, hwTrunkAttr=hwTrunkAttr, hwBackupStatus=hwBackupStatus, hwLogicIfTotal=hwLogicIfTotal, EnabledStatus=EnabledStatus, hwIfQuery=hwIfQuery, hwCppsPortVlanEnable=hwCppsPortVlanEnable, hwLogicIfAttrGroup=hwLogicIfAttrGroup, hwPortIsolationGroupRowStatus=hwPortIsolationGroupRowStatus, hwTrunkIfFlushVlanId=hwTrunkIfFlushVlanId, hwTrunkETrunkSystemPriority=hwTrunkETrunkSystemPriority, hwIfFlowDown=hwIfFlowDown, hwTrunkSubIfStateToSlave=hwTrunkSubIfStateToSlave, hwLinkModeChangeAutoCreateIfTable=hwLinkModeChangeAutoCreateIfTable, hwIfMonitorPauseContinuingEnabledStatus=hwIfMonitorPauseContinuingEnabledStatus, hwIfMonitorSdhErrorThreshold=hwIfMonitorSdhErrorThreshold, hwCppsResetPortVlanStatisic=hwCppsResetPortVlanStatisic, hwMasterBackupTrunkSubinterfaceAttr=hwMasterBackupTrunkSubinterfaceAttr, hwExtAllMemberDownNotify=hwExtAllMemberDownNotify, hwIFExtMemberOf=hwIFExtMemberOf, hwTrunkIfModel=hwTrunkIfModel, hwTrunkDeleteFlag=hwTrunkDeleteFlag, hwExtInterfaceDelete=hwExtInterfaceDelete, hwIFExtFlushReceiveEnable=hwIFExtFlushReceiveEnable, hwCppsInterfaceEntry=hwCppsInterfaceEntry, hwEntityExtCfmOverCard=hwEntityExtCfmOverCard, hwIfMonitorDelayThreshold=hwIfMonitorDelayThreshold, hwLogicIfHelpEntry=hwLogicIfHelpEntry, hwLogicDynamicIfChassisNumber=hwLogicDynamicIfChassisNumber, hwVTrunkIfRowStatus=hwVTrunkIfRowStatus, hwIfMonitorSdhErrorStatistics=hwIfMonitorSdhErrorStatistics, hwIfEtherStatInOverRunPkts=hwIfEtherStatInOverRunPkts, hwIfMonitorSdhB2ErrorStatistics=hwIfMonitorSdhB2ErrorStatistics, hwCppsIfStatisticsTable=hwCppsIfStatisticsTable, hwIfEtherStatInLongPkts=hwIfEtherStatInLongPkts, hwIfAtmStatInIdleCells=hwIfAtmStatInIdleCells, hwIfEtherStatIfIndex=hwIfEtherStatIfIndex, hwLogicIfChassisNumber=hwLogicIfChassisNumber, hwIfMonitorCrcErrorRising=hwIfMonitorCrcErrorRising, hwTrunkLocalPrefMode=hwTrunkLocalPrefMode, hwIFExtBlockPriority=hwIFExtBlockPriority, hwTrunkIfGroup=hwTrunkIfGroup, hwIfEtherStatOutOverflowPkts=hwIfEtherStatOutOverflowPkts)
