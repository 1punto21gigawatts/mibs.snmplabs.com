#
# PySNMP MIB module ZHONE-SHELF-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-SHELF-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:48:00 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, TimeTicks, NotificationType, IpAddress, Counter64, ModuleIdentity, Bits, Counter32, ObjectIdentity, Gauge32, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "NotificationType", "IpAddress", "Counter64", "ModuleIdentity", "Bits", "Counter32", "ObjectIdentity", "Gauge32", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TimeStamp", "TruthValue")
zhoneShelfIndex, zhoneSlotIndex, zhoneShelf, zhoneModules = mibBuilder.importSymbols("Zhone", "zhoneShelfIndex", "zhoneSlotIndex", "zhoneShelf", "zhoneModules")
ZhoneCardType, ZhoneCardLineType, ZhoneAdminString = mibBuilder.importSymbols("Zhone-TC", "ZhoneCardType", "ZhoneCardLineType", "ZhoneAdminString")
zhoneShelfMonitorModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 7))
zhoneShelfMonitorModule.setRevisions(('2011-12-02 11:14', '2011-05-24 10:25', '2010-08-10 15:08', '2006-08-31 10:58', '2004-05-11 22:03', '2003-10-28 15:31', '2003-09-17 18:56', '2003-07-16 16:30', '2002-08-19 10:02', '2002-07-09 10:36', '2002-05-28 18:08', '2002-02-12 09:54', '2001-09-10 18:34', '2001-09-10 16:16', '2000-10-24 16:18', '2000-10-13 16:42', '2000-09-27 16:25', '2000-09-12 11:26',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhoneShelfMonitorModule.setRevisionsDescriptions(('Add shelf I/O alarm board present', 'V01.01.15 - Update shelfCardStatus with new card states (15, 16) for concurrent uplink. Also added missing states.', 'V01.01.14 - Added Battery A, B and Battery return voltages. - Added shelfFanTrayType', 'V01.01.13 - Added fan C/D/E status. - Added missing power C/D status . ', 'V01.01.12 - Added power supply C status', 'V01.01.11 - Added FlashCardStatus Trap', 'V01.01.10 - Added fan A/B status ', 'V01.01.09 - added zhoneTrapCardVersionCheck trap.', 'V01.01.08 - added cardReboot', 'Added NotProvisioned State to cardState Added FanTrayOK type to shelfTrap list', 'Moved shelfDataTable from 3.2.4 to 3.2.1 Renamed shelfEnvironTable to shelfStatusTable and moved from 3.2.5 to 3.2.2 Added shelfFanTable, shelfTemperatureTable, and shelfCardTable Moved zhoneStatusChangeGroup', 'V01.01.05 - Added markup for environmental status fields.', 'V01.01.04 - Added tempOverLimit, tempUnderLimit, tempNormal, fanPowerSupplyAFailure, fanPowerSupplyAOK, fanPowerSupplyBFailure, fanPowerSupplyBOK, fanTrayAdded, and fanTrayRemoved to the zhoneShelfStatus OID.', 'V01.01.03 - Added the cardReset and cardRunning to the zhoneCardStatus Object Type. ', 'V01.01.02 - Added Revision descriptions to this mib.', 'V01.01.01 - Added the shelfControllerFault to the zhoneShelfStatus Object Type. Added the cardFaultError to the zhoneCardStatus Object Type. ', 'V01.01.00 - Added zhoneShelfStatus Object Type. Added zhoneCardStatus Object Type. Added zhoneShelfStatusLastChange Object Type. Added zhoneCardStatusLastChange Object Type. Imported TimeStamp from rfc1907.mib All changes for the shelfCtrl task. ', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: zhoneShelfMonitorModule.setLastUpdated('201112021020Z')
if mibBuilder.loadTexts: zhoneShelfMonitorModule.setOrganization('Zhone Technologies, Inc')
if mibBuilder.loadTexts: zhoneShelfMonitorModule.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: zhoneShelfMonitorModule.setDescription('Contains the elements that are monitored on a per shelf basis in the PLS.')
shelfDataTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1), )
if mibBuilder.loadTexts: shelfDataTable.setStatus('current')
if mibBuilder.loadTexts: shelfDataTable.setDescription('A table of shelf information and status for each shelf in a PLS system. The table includes revision level, general shelf status, and enviromental monitoring. The maximum number of shelves in a system is 255. Shelf 0 is an invalid entry.')
shelfDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"))
if mibBuilder.loadTexts: shelfDataEntry.setStatus('current')
if mibBuilder.loadTexts: shelfDataEntry.setDescription('An entry per shelf in a PLS system. The entries are indexed by zhoneShelfIndex or the shelf number which has a value of 1 to 255. Shelf 0 is not valid. zhoneShelfIndex is a column in the zhoneShelfSlotTable, defined in the zhone MIB (Zhone.mib). An Entry in the table is automatically created when a new shelf is added to a PLS and detected by the operating software of the system')
shelfMfgCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMfgCLEICode.setStatus('current')
if mibBuilder.loadTexts: shelfMfgCLEICode.setDescription('CLEI (Common Language Equipment Identifier) code of the shelf assembly as stored in the EEPROM of the unit if defined otherwise the value will be set to NULL (0-length string) by the shelf monitor card. Note: CLEI codes for individual assemblies of the shelf such as monitor card or backplane assembly are not supported.')
shelfMonitorSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 2), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMonitorSerialNumber.setStatus('current')
if mibBuilder.loadTexts: shelfMonitorSerialNumber.setDescription('The manufacturing serial number for the shelf monitor card of this shelf assembly.')
shelfMonitorRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfMonitorRevisionCode.setStatus('current')
if mibBuilder.loadTexts: shelfMonitorRevisionCode.setDescription('Manufacturing hardware revision code for the shelf monitoring card of this shelf assembly')
shelfBkplaneSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 4), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfBkplaneSerialNumber.setStatus('current')
if mibBuilder.loadTexts: shelfBkplaneSerialNumber.setDescription('The manufacturing serial number of the backplane in this shelf assembly.')
shelfBkplaneRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 5), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfBkplaneRevisionCode.setStatus('current')
if mibBuilder.loadTexts: shelfBkplaneRevisionCode.setDescription('The manufacturing hardware revision code for the back- plane in this shelf assembly.')
shelfFanTraySerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanTraySerialNumber.setStatus('current')
if mibBuilder.loadTexts: shelfFanTraySerialNumber.setDescription('The manufacturing serial number for the fan tray assembly in this shelf assembly.')
shelfFanTrayRevisionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 7), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanTrayRevisionCode.setStatus('current')
if mibBuilder.loadTexts: shelfFanTrayRevisionCode.setDescription('The hardware revision code for the fan tray assembly in this shelf assembly.')
shelfSlotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfSlotCount.setStatus('current')
if mibBuilder.loadTexts: shelfSlotCount.setDescription('The number of slots in this shelf')
shelfFeatureBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFeatureBits.setStatus('current')
if mibBuilder.loadTexts: shelfFeatureBits.setDescription('A string of 8 octets indicating the setting of the feature BITS. ')
shelfFanTrayType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 10), ZhoneCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanTrayType.setStatus('current')
if mibBuilder.loadTexts: shelfFanTrayType.setDescription('Description.')
shelfIOAlarmBoardPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfIOAlarmBoardPresent.setStatus('current')
if mibBuilder.loadTexts: shelfIOAlarmBoardPresent.setDescription('Indicates that MXK I/O Alarm Board hardware is present and supported. Not used in systems other than MXK.')
shelfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2), )
if mibBuilder.loadTexts: shelfStatusTable.setStatus('current')
if mibBuilder.loadTexts: shelfStatusTable.setDescription('environmental status table - this table contains the environmental monitoring data for each shelf in a PLS.')
shelfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"))
if mibBuilder.loadTexts: shelfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: shelfStatusEntry.setDescription('This table augments the shelfDataTable. Each entry in the table contains the status of the environmental monitoring sensors on the shelf monitor card.')
shelfAPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOk", 1), ("powerNotOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfAPowerStatus.setStatus('current')
if mibBuilder.loadTexts: shelfAPowerStatus.setDescription('Status of the A power to the shelf. On systems with multiple power sources, this entry represents the AC power-supply status. On systems with line-power, this entry represents the status of power-line 1. The status of the power is indicated as follows: powerOk: the shelf is receiving a normal (in-range) voltage. powerNotOk: the shelf is not receiving voltage or the voltage is outside of the usable range. A trap is generated with the loss of A power.')
shelfBPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOk", 1), ("powerNotOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfBPowerStatus.setStatus('current')
if mibBuilder.loadTexts: shelfBPowerStatus.setDescription('Status of the B power to the shelf. On systems with multiple power sources, this entry represents the -48 Volt DC power-supply status. On systems with line-power, this entry represents the status of power-line 2. The status of the power is indicated as follows: powerOk: the shelf is receiving a normal (in-range) voltage. powerNotOk: the shelf is not receiving voltage or the voltage is outside of the usable range. A trap is generated with the loss of A power.')
shelfTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("aboveNormal", 2), ("belowNormal", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureStatus.setDescription('Outlet or exhaust air temperature as status. A trap is generated if temperature leaves the normal opertioning range.')
shelfFanTrayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("operational", 1), ("partiallyOperational", 2), ("notOperational", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanTrayStatus.setStatus('current')
if mibBuilder.loadTexts: shelfFanTrayStatus.setDescription('The operational status of the shelf fan tray assembly as follows: Operational: the fan tray is fully operational with all fans running. notOperational: the fan tray assembly has failed. A high severity trap is generated when the status is set to notOperational.')
shelfAlarmContactsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 5), Bits().clone(namedValues=NamedValues(("contactAlarm0", 0), ("contactAlarm1", 1), ("contactAlarm2", 2), ("contactAlarm3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfAlarmContactsStatus.setStatus('current')
if mibBuilder.loadTexts: shelfAlarmContactsStatus.setDescription('A BIT field of two (2) BITs indicating larm status of the dry contact alarm on the chassis/shelf: A value of zero(0) is returned in each BIT if the contact is open A value of one(1) is returned if the contack is closed ')
shelfCardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCardStatus.setStatus('current')
if mibBuilder.loadTexts: shelfCardStatus.setDescription('A string of octets, with one octet per card slot on the shelf assembly. The string of octets indicates the status of each slot in sequence with the first octet describing first slot. The encoding of each octet is as follows: 1: card is booting from eeprom 2: card is performing post tests 3: card is loading code from code loader 4: card is configuing 5: card is running 6: card is blocked from booting 7: card is dumping fatal data 8: card is in faulted 9: card is reseting 10: slot is empty 11: slot is not provisioned 12: card is disabled 13: card is powered down 14: card is powered up 15: card is uplink with active traffic 16: card is uplink without active traffic ')
shelfLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 7), Bits().clone(namedValues=NamedValues(("battAPower", 0), ("battBPower", 1), ("fanAlarm", 2), ("minorAlarm", 3), ("majorAlarm", 4), ("criticalAlarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfLedStatus.setStatus('current')
if mibBuilder.loadTexts: shelfLedStatus.setDescription('A BIT field of six(6) BITs indicating the status of the LEDs on the chassis bezel. A value of zero(0) is returned in each BIT if the LED is off, a value of one(1) is returned if the LED is lit.')
shelfAdminResets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfAdminResets.setStatus('current')
if mibBuilder.loadTexts: shelfAdminResets.setDescription('Count of the number of administration resets to a shelf such as systemreboot.')
shelfFaultResets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFaultResets.setStatus('current')
if mibBuilder.loadTexts: shelfFaultResets.setDescription('Count of the number of shelf resets due to faults.')
shelfPowerResets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfPowerResets.setStatus('current')
if mibBuilder.loadTexts: shelfPowerResets.setDescription('Count of the number of shelf resets due to power failure or power cycle.')
shelfCPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOk", 1), ("powerNotOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfCPowerStatus.setStatus('current')
if mibBuilder.loadTexts: shelfCPowerStatus.setDescription('Status of the C power to the shelf. On systems with multiple power sources, this entry represents the line-power power-supply status. On systems with line-power, this entry represents the status of power-line 3. The status of the power is indicated as follows: powerOk: the shelf is receiving a normal (in-range) voltage. powerNotOk: the shelf is not receiving voltage or the voltage is outside of the usable range. A trap is generated with the loss of A power.')
shelfDPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("powerOk", 1), ("powerNotOk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfDPowerStatus.setStatus('current')
if mibBuilder.loadTexts: shelfDPowerStatus.setDescription('Status of the D power to the shelf. On systems with line-power, this entry represents the status of power-line 4. The status of the power is indicated as follows: powerOk: the shelf is receiving a normal (in-range) voltage. powerNotOk: the shelf is not receiving voltage or the voltage is outside of the usable range. A trap is generated with the loss of A power.')
shelfBatteryAVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 13), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfBatteryAVoltage.setStatus('current')
if mibBuilder.loadTexts: shelfBatteryAVoltage.setDescription('Battery A voltage measurement.')
shelfBatteryBVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 14), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfBatteryBVoltage.setStatus('current')
if mibBuilder.loadTexts: shelfBatteryBVoltage.setDescription('Battery B voltage measurement.')
shelfChassisReturnVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 2, 1, 15), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfChassisReturnVoltage.setStatus('current')
if mibBuilder.loadTexts: shelfChassisReturnVoltage.setDescription('Chassis return voltage.')
shelfFanTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 2, 3), )
if mibBuilder.loadTexts: shelfFanTable.setStatus('current')
if mibBuilder.loadTexts: shelfFanTable.setDescription('A table of information about the fans on the shelf. Currently a BAN has 8 fans and a MALC has 3 fans.')
shelfFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 2, 3, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "ZHONE-SHELF-MONITOR-MIB", "shelfFanIndex"))
if mibBuilder.loadTexts: shelfFanEntry.setStatus('current')
if mibBuilder.loadTexts: shelfFanEntry.setDescription('Description.')
shelfFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: shelfFanIndex.setStatus('current')
if mibBuilder.loadTexts: shelfFanIndex.setDescription('An index into the fan table. It is index from 1..Number of fans with no missing indicies.')
shelfFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanSpeed.setStatus('current')
if mibBuilder.loadTexts: shelfFanSpeed.setDescription('Fan speed of the fan in RPM')
shelfFanLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 3, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanLocation.setStatus('current')
if mibBuilder.loadTexts: shelfFanLocation.setDescription('Description of the location of the fan in the fan tray')
shelfFanLowSpeedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfFanLowSpeedThreshold.setStatus('current')
if mibBuilder.loadTexts: shelfFanLowSpeedThreshold.setDescription('The lower speed allowed for a fan before it is considered failed.')
shelfTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4), )
if mibBuilder.loadTexts: shelfTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureTable.setDescription('A table of information about the temperature sensors in the shelf.')
shelfTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "ZHONE-SHELF-MONITOR-MIB", "shelfTemperatureIndex"))
if mibBuilder.loadTexts: shelfTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureEntry.setDescription('Description.')
shelfTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: shelfTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureIndex.setDescription('An index into the temperature table. It is index 1..Number of temperature sensors with no missing indicies.')
shelfTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTemperature.setStatus('current')
if mibBuilder.loadTexts: shelfTemperature.setDescription('The temperature of a shelf at this position.')
shelfTemperatureLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4, 1, 3), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTemperatureLocation.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureLocation.setDescription('The location of the this temperature sensors.')
shelfTemperatureHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTemperatureHighThreshold.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureHighThreshold.setDescription('The upper temperature when an alarm will be sent.')
shelfTemperatureLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: shelfTemperatureLowThreshold.setStatus('current')
if mibBuilder.loadTexts: shelfTemperatureLowThreshold.setDescription('The lower temperature that an alarm will be sent.')
shelfCardTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5), )
if mibBuilder.loadTexts: shelfCardTable.setStatus('current')
if mibBuilder.loadTexts: shelfCardTable.setDescription('A table of card information for each shelf in a PLS system. The includes different counts of resets for each card and the card type for each slot.')
shelfCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1), ).setIndexNames((0, "Zhone", "zhoneShelfIndex"), (0, "Zhone", "zhoneSlotIndex"))
if mibBuilder.loadTexts: shelfCardEntry.setStatus('current')
if mibBuilder.loadTexts: shelfCardEntry.setDescription('An entry per slot and shelf in a PLS system. The entries are indexed by zhoneShelfIndex/zhoneSlotIndex.')
cardType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 1), ZhoneCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardType.setStatus('current')
if mibBuilder.loadTexts: cardType.setDescription('The card type for the card in this slot.')
cardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 2), ZhoneCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSubType.setStatus('current')
if mibBuilder.loadTexts: cardSubType.setDescription('The card sub type for this slot')
cardLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 3), ZhoneCardLineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardLineType.setStatus('current')
if mibBuilder.loadTexts: cardLineType.setDescription('The card line type for this slot. This is only valid if the slot is provisioned.')
cardVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 4), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardVersion.setStatus('current')
if mibBuilder.loadTexts: cardVersion.setDescription('The card version for the card in this slot.')
cardEepromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 5), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardEepromVersion.setStatus('current')
if mibBuilder.loadTexts: cardEepromVersion.setDescription('The eeprom version for the card in this slot.')
cardSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 6), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cardSerialNumber.setDescription('The serial number for the card in this slot.')
cardCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 7), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardCLEICode.setStatus('current')
if mibBuilder.loadTexts: cardCLEICode.setDescription('CLEI (Common Language Equipment Identifier) code of the shelf assembly as stored in the EEPROM of the unit if defined otherwise the value will be set to NULL (0-length string) by the shelf monitor card.')
cardFeatureBits = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFeatureBits.setStatus('current')
if mibBuilder.loadTexts: cardFeatureBits.setDescription('A string of 8 octets indicating the setting of the feature BITS. ')
cardState = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("cardStateNone", 0), ("cardStateBooting", 1), ("cardStatePost", 2), ("cardStateLoading", 3), ("cardStateConfiguring", 4), ("cardStateRunning", 5), ("cardStateResetHold", 6), ("cardStateDumping", 7), ("cardStateFault", 8), ("cardStateReset", 9), ("cardNotPresent", 10), ("cardNotProvisioned", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardState.setStatus('current')
if mibBuilder.loadTexts: cardState.setDescription('The card state for the card in this slot. cardStateBooting card is booting from eeprom cardStatePost card is performing post tests cardStateLoading card is loading code from code loader cardStateConfiguring card is configuing cardStateRunning card is running cardStateResetHold card is blocked from booting cardStateDumping cardStateFault card is in faulted cardStateReset card is reseting cardNotPresent card is not present in slot cardNotProvisioned card in slot is not provisioned ')
cardAdminResets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardAdminResets.setStatus('current')
if mibBuilder.loadTexts: cardAdminResets.setDescription('Count of the number of administration resets to this card.')
cardFaultResets = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cardFaultResets.setStatus('current')
if mibBuilder.loadTexts: cardFaultResets.setDescription('Count of number of fault resets to this card.')
cardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 3, 2, 5, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cardReboot.setStatus('current')
if mibBuilder.loadTexts: cardReboot.setDescription('When set to true, this card will be rebooted. Error cases: (a) If the card is not present, a set results in an INCONSISTENT_VALUE error. (b) An attempt to set to false results in a WRONG_VALUE error. All gets will return a value of false. This is supported only on systems with a supervisory bus, such as BAN & MALC.')
zhoneShelfStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("leftOutletTempOverLimit", 1), ("leftOutletTempNormal", 2), ("rightOutletTempOverLimit", 3), ("rightOutletTempNormal", 4), ("powerSupplyAFailure", 5), ("powerSupplyAOK", 6), ("powerSupplyBFailure", 7), ("powerSupplyBOK", 8), ("fanSpeedError", 9), ("shelfControllerFault", 10), ("tempOverLimit", 11), ("tempUnderLimit", 12), ("tempNormal", 13), ("fanPowerSupplyAFailure", 14), ("fanPowerSupplyAOK", 15), ("fanPowerSupplyBFailure", 16), ("fanPowerSupplyBOK", 17), ("fanTrayAdded", 18), ("fanTrayRemoved", 19), ("fanSpeedOK", 20), ("fanAFailure", 21), ("fanAOK", 22), ("fanBFailure", 23), ("fanBOK", 24), ("fanPowerSupplyCFailure", 25), ("fanPowerSupplyCOK", 26), ("fanPowerSupplyDFailure", 27), ("fanPowerSupplyDOK", 28), ("shelfControllerCleared", 29), ("fanCFailure", 30), ("fanCOK", 31), ("fanDFailure", 32), ("fanDOK", 33), ("fanEFailure", 34), ("fanEOK", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneShelfStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfStatus.setDescription('This variable is set by the ShelfMonitor when the shelf state changes.')
zhoneCardStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cardRemoved", 1), ("cardAdded", 2), ("cardTimeoutError", 3), ("cardFaultError", 4), ("cardReset", 5), ("cardRunning", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCardStatus.setDescription('This variable is set by the ShelfMonitor whenever the card state changes.')
zhoneShelfStatusLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 2, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneShelfStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfStatusLastChange.setDescription('The time the shelf status changed.')
zhoneCardStatusLastChange = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 2, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhoneCardStatusLastChange.setStatus('current')
if mibBuilder.loadTexts: zhoneCardStatusLastChange.setDescription('The time the card status last changed.')
zhoneTrapShelfMonitorV2Traps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12))
if mibBuilder.loadTexts: zhoneTrapShelfMonitorV2Traps.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapShelfMonitorV2Traps.setDescription('ShelfMonitor Trap.')
zhoneTrapShelfMonitorGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12, 1)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "zhoneTrapShelfStatusChange"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneTrapCardStatusChange"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneTrapCardVersionCheck"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneTrapFlashCardStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneTrapShelfMonitorGroup = zhoneTrapShelfMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapShelfMonitorGroup.setDescription('Description.')
zhoneTrapShelfStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12, 2)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "zhoneShelfStatus"))
if mibBuilder.loadTexts: zhoneTrapShelfStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapShelfStatusChange.setDescription('Shelf status reported by the ShelfMonitor.')
zhoneTrapCardStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12, 3)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "zhoneCardStatus"))
if mibBuilder.loadTexts: zhoneTrapCardStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapCardStatusChange.setDescription('Card status reported by the ShelfMonitor.')
zhoneTrapCardVersionCheck = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12, 4)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "cardVersion"))
if mibBuilder.loadTexts: zhoneTrapCardVersionCheck.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapCardVersionCheck.setDescription("When the cardVersion of a card is incompatible with that of active InfoServ card, this trap is generated. Currently, this is only supported on BAN platform and its card versions are described as follows: The revision number of the newer 40 Mhz cards is in the range of 'BA' to 'CV'. Older card version either does not display in this format or the revision number is not in this range. For example, for a card with cardVersion '840-29496-72-CR', the revision number is 'CR' and is a new 40 Mhz card.")
zhoneTrapFlashCardStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12, 5)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "zhoneFlashCardStatusChange"))
if mibBuilder.loadTexts: zhoneTrapFlashCardStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapFlashCardStatusChange.setDescription('This Trap reports the FlashCard status change for the InfoServ slots flash cards within BAN shelf.')
zhoneTrapCardToBkplaneStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 5504, 3, 2, 12, 6)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "zhoneCardLinkToBkplaneStatus"))
if mibBuilder.loadTexts: zhoneTrapCardToBkplaneStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneTrapCardToBkplaneStatusChange.setDescription('Mxk line card link to backplane status.')
zhoneShelfStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 2, 13)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "shelfMfgCLEICode"), ("ZHONE-SHELF-MONITOR-MIB", "shelfMonitorSerialNumber"), ("ZHONE-SHELF-MONITOR-MIB", "shelfMonitorRevisionCode"), ("ZHONE-SHELF-MONITOR-MIB", "shelfBkplaneSerialNumber"), ("ZHONE-SHELF-MONITOR-MIB", "shelfBkplaneRevisionCode"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFanTraySerialNumber"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFanTrayRevisionCode"), ("ZHONE-SHELF-MONITOR-MIB", "shelfSlotCount"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFeatureBits"), ("ZHONE-SHELF-MONITOR-MIB", "shelfAPowerStatus"), ("ZHONE-SHELF-MONITOR-MIB", "shelfBPowerStatus"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFanTrayStatus"), ("ZHONE-SHELF-MONITOR-MIB", "shelfAlarmContactsStatus"), ("ZHONE-SHELF-MONITOR-MIB", "shelfCardStatus"), ("ZHONE-SHELF-MONITOR-MIB", "shelfLedStatus"), ("ZHONE-SHELF-MONITOR-MIB", "shelfAdminResets"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFaultResets"), ("ZHONE-SHELF-MONITOR-MIB", "shelfPowerResets"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneShelfStatus"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneCardStatus"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneShelfStatusLastChange"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneCardStatusLastChange"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFanSpeed"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFanLocation"), ("ZHONE-SHELF-MONITOR-MIB", "shelfFanLowSpeedThreshold"), ("ZHONE-SHELF-MONITOR-MIB", "shelfTemperature"), ("ZHONE-SHELF-MONITOR-MIB", "shelfTemperatureLocation"), ("ZHONE-SHELF-MONITOR-MIB", "shelfTemperatureHighThreshold"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneFlashCardStatusChange"), ("ZHONE-SHELF-MONITOR-MIB", "shelfTemperatureLowThreshold"), ("ZHONE-SHELF-MONITOR-MIB", "shelfTemperatureStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneShelfStatusGroup = zhoneShelfStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneShelfStatusGroup.setDescription('These objects are used to identify the status change of the trap.')
zhoneStatusLastChangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 2, 14)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "zhoneShelfStatusLastChange"), ("ZHONE-SHELF-MONITOR-MIB", "zhoneCardStatusLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneStatusLastChangeGroup = zhoneStatusLastChangeGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneStatusLastChangeGroup.setDescription('Description.')
zhoneCardStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 3, 2, 15)).setObjects(("ZHONE-SHELF-MONITOR-MIB", "cardType"), ("ZHONE-SHELF-MONITOR-MIB", "cardSubType"), ("ZHONE-SHELF-MONITOR-MIB", "cardLineType"), ("ZHONE-SHELF-MONITOR-MIB", "cardVersion"), ("ZHONE-SHELF-MONITOR-MIB", "cardEepromVersion"), ("ZHONE-SHELF-MONITOR-MIB", "cardSerialNumber"), ("ZHONE-SHELF-MONITOR-MIB", "cardCLEICode"), ("ZHONE-SHELF-MONITOR-MIB", "cardFeatureBits"), ("ZHONE-SHELF-MONITOR-MIB", "cardState"), ("ZHONE-SHELF-MONITOR-MIB", "cardAdminResets"), ("ZHONE-SHELF-MONITOR-MIB", "cardFaultResets"), ("ZHONE-SHELF-MONITOR-MIB", "cardReboot"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhoneCardStatusGroup = zhoneCardStatusGroup.setStatus('current')
if mibBuilder.loadTexts: zhoneCardStatusGroup.setDescription('Description.')
zhoneFlashCardStatusChange = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("flashCardPort1Installed", 1), ("flashCardPort1Removed", 2), ("flashCardPort2Installed", 3), ("flashCardPort2Removed", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneFlashCardStatusChange.setStatus('current')
if mibBuilder.loadTexts: zhoneFlashCardStatusChange.setDescription('The FlashCardStatus reports the status of the flash card ports on the InfoServe cards within BAN shelf. 1 : FlashCard Port 1 is Installed 2 : FlashCard Port 1 is Removed 3 : FlashCard Port 2 is Installed 4 : FlashCard Port 2 is Removed')
zhoneCardLinkToBkplaneStatus = MibScalar((1, 3, 6, 1, 4, 1, 5504, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cardToBkpLinkNotPresent", 1), ("cardToBkpLinkPresent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: zhoneCardLinkToBkplaneStatus.setStatus('current')
if mibBuilder.loadTexts: zhoneCardLinkToBkplaneStatus.setDescription('Mxk linecard Link To Backplane status.')
mibBuilder.exportSymbols("ZHONE-SHELF-MONITOR-MIB", shelfChassisReturnVoltage=shelfChassisReturnVoltage, zhoneTrapShelfMonitorV2Traps=zhoneTrapShelfMonitorV2Traps, zhoneCardStatusGroup=zhoneCardStatusGroup, zhoneCardLinkToBkplaneStatus=zhoneCardLinkToBkplaneStatus, zhoneCardStatus=zhoneCardStatus, shelfAdminResets=shelfAdminResets, shelfFanEntry=shelfFanEntry, shelfMonitorSerialNumber=shelfMonitorSerialNumber, shelfFanTrayType=shelfFanTrayType, shelfLedStatus=shelfLedStatus, shelfBatteryBVoltage=shelfBatteryBVoltage, shelfTemperatureLowThreshold=shelfTemperatureLowThreshold, zhoneTrapShelfStatusChange=zhoneTrapShelfStatusChange, shelfTemperature=shelfTemperature, zhoneShelfStatus=zhoneShelfStatus, shelfTemperatureHighThreshold=shelfTemperatureHighThreshold, shelfFanTrayRevisionCode=shelfFanTrayRevisionCode, cardSerialNumber=cardSerialNumber, cardSubType=cardSubType, shelfMfgCLEICode=shelfMfgCLEICode, shelfStatusTable=shelfStatusTable, cardEepromVersion=cardEepromVersion, shelfFanTraySerialNumber=shelfFanTraySerialNumber, shelfAPowerStatus=shelfAPowerStatus, shelfFanLocation=shelfFanLocation, shelfPowerResets=shelfPowerResets, cardLineType=cardLineType, shelfAlarmContactsStatus=shelfAlarmContactsStatus, zhoneCardStatusLastChange=zhoneCardStatusLastChange, shelfSlotCount=shelfSlotCount, zhoneShelfMonitorModule=zhoneShelfMonitorModule, zhoneFlashCardStatusChange=zhoneFlashCardStatusChange, PYSNMP_MODULE_ID=zhoneShelfMonitorModule, zhoneTrapFlashCardStatusChange=zhoneTrapFlashCardStatusChange, shelfCardEntry=shelfCardEntry, shelfFeatureBits=shelfFeatureBits, shelfMonitorRevisionCode=shelfMonitorRevisionCode, shelfCardStatus=shelfCardStatus, shelfDataTable=shelfDataTable, shelfFanTrayStatus=shelfFanTrayStatus, zhoneTrapCardToBkplaneStatusChange=zhoneTrapCardToBkplaneStatusChange, shelfStatusEntry=shelfStatusEntry, zhoneTrapShelfMonitorGroup=zhoneTrapShelfMonitorGroup, shelfBkplaneSerialNumber=shelfBkplaneSerialNumber, zhoneTrapCardStatusChange=zhoneTrapCardStatusChange, cardVersion=cardVersion, shelfTemperatureEntry=shelfTemperatureEntry, shelfFanSpeed=shelfFanSpeed, shelfFanLowSpeedThreshold=shelfFanLowSpeedThreshold, shelfDataEntry=shelfDataEntry, shelfCPowerStatus=shelfCPowerStatus, shelfCardTable=shelfCardTable, shelfTemperatureTable=shelfTemperatureTable, zhoneStatusLastChangeGroup=zhoneStatusLastChangeGroup, shelfBatteryAVoltage=shelfBatteryAVoltage, cardFeatureBits=cardFeatureBits, shelfBPowerStatus=shelfBPowerStatus, shelfFanTable=shelfFanTable, zhoneTrapCardVersionCheck=zhoneTrapCardVersionCheck, cardType=cardType, cardState=cardState, cardAdminResets=cardAdminResets, cardReboot=cardReboot, shelfIOAlarmBoardPresent=shelfIOAlarmBoardPresent, shelfDPowerStatus=shelfDPowerStatus, shelfTemperatureIndex=shelfTemperatureIndex, cardCLEICode=cardCLEICode, shelfTemperatureStatus=shelfTemperatureStatus, zhoneShelfStatusGroup=zhoneShelfStatusGroup, shelfFanIndex=shelfFanIndex, cardFaultResets=cardFaultResets, shelfTemperatureLocation=shelfTemperatureLocation, zhoneShelfStatusLastChange=zhoneShelfStatusLastChange, shelfBkplaneRevisionCode=shelfBkplaneRevisionCode, shelfFaultResets=shelfFaultResets)
