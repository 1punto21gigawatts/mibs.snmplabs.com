#
# PySNMP MIB module OLD-CISCO-INTERFACES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/OLD-CISCO-INTERFACES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:24:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
local, = mibBuilder.importSymbols("CISCO-SMI", "local")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, iso, Gauge32, ModuleIdentity, Counter64, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32, Integer32, Bits, NotificationType, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Gauge32", "ModuleIdentity", "Counter64", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32", "Integer32", "Bits", "NotificationType", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
linterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 2, 2))
lifTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 1), )
if mibBuilder.loadTexts: lifTable.setStatus('mandatory')
if mibBuilder.loadTexts: lifTable.setDescription('A list of interface entries.')
lifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: lifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lifEntry.setDescription('A collection of additional objects in the cisco interface.')
locIfHardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfHardType.setStatus('mandatory')
if mibBuilder.loadTexts: locIfHardType.setDescription('Returns the type of interface.')
locIfLineProt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLineProt.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLineProt.setDescription('Boolean whether interface line protocol is up or not.')
locIfLastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastIn.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLastIn.setDescription('Elapsed time in milliseconds since last line protocol input packet was received.')
locIfLastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOut.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLastOut.setDescription('Elapsed time in milliseconds since last line protocol output packet was transmitted.')
locIfLastOutHang = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLastOutHang.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLastOutHang.setDescription('Elapsed time in milliseconds since last line protocol output packet could not be successfully transmitted.')
locIfInBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInBitsSec.setDescription('Five minute exponentially-decayed moving average of input bits per second.')
locIfInPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInPktsSec.setDescription('Five minute exponentially-decayed moving average of input packets per second.')
locIfOutBitsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutBitsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfOutBitsSec.setDescription('Five minute exponentially-decayed moving average of output bits per second.')
locIfOutPktsSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutPktsSec.setStatus('mandatory')
if mibBuilder.loadTexts: locIfOutPktsSec.setDescription('Five minute exponentially-decayed moving average of output packets per second.')
locIfInRunts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInRunts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInRunts.setDescription('Number of packets input which were smaller then the allowable physical media permitted.')
locIfInGiants = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInGiants.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInGiants.setDescription('Number of input packets which were larger then the physical media permitted.')
locIfInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInCRC.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInCRC.setDescription('Number of input packets which had cyclic redundancy checksum errors.')
locIfInFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInFrame.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInFrame.setDescription('Number of input packet which were misaligned.')
locIfInOverrun = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInOverrun.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInOverrun.setDescription('Count of input which arrived too quickly for the to hardware receive.')
locIfInIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInIgnored.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInIgnored.setDescription('Number of input packets which were simply ignored by this interface.')
locIfInAbort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInAbort.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInAbort.setDescription('Number of input packets which were aborted.')
locIfResets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfResets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfResets.setDescription('Number of times the interface internally reset.')
locIfRestarts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfRestarts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfRestarts.setDescription('Number of times interface needed to be completely restarted.')
locIfKeep = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfKeep.setStatus('mandatory')
if mibBuilder.loadTexts: locIfKeep.setDescription('Boolean whether keepalives are enabled on this interface.')
locIfReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReason.setStatus('mandatory')
if mibBuilder.loadTexts: locIfReason.setDescription('Reason for interface last status change.')
locIfCarTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCarTrans.setStatus('mandatory')
if mibBuilder.loadTexts: locIfCarTrans.setDescription('Number of times interface saw the carrier signal transition.')
locIfReliab = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfReliab.setStatus('mandatory')
if mibBuilder.loadTexts: locIfReliab.setDescription('The reliability of the interface. Used by IGRP.')
locIfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDelay.setStatus('mandatory')
if mibBuilder.loadTexts: locIfDelay.setDescription('The amount of delay in microseconds of the interface. Used by IGRP.')
locIfLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfLoad.setStatus('mandatory')
if mibBuilder.loadTexts: locIfLoad.setDescription('The loading factor of the interface. Used by IGRP.')
locIfCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: locIfCollisions.setDescription('The number of output collisions detected on this interface.')
locIfInputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfInputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: locIfInputQueueDrops.setDescription('The number of packets dropped because the input queue was full.')
locIfOutputQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfOutputQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: locIfOutputQueueDrops.setDescription('The number of packets dropped because the output queue was full.')
locIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locIfDescr.setStatus('mandatory')
if mibBuilder.loadTexts: locIfDescr.setDescription('User configurable interface description.')
locIfSlowInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowInPkts.setDescription('Packet count for Inbound traffic routed with slow switching')
locIfSlowOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowOutPkts.setDescription('Packet count for Outbound traffic routed with slow switching')
locIfSlowInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowInOctets.setDescription('Octet count for Inbound traffic routed with slow switching')
locIfSlowOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfSlowOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfSlowOutOctets.setDescription('Octet count for Outbound traffic routed with slow switching')
locIfFastInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastInPkts.setDescription('Packet count for Inbound traffic routed with fast switching')
locIfFastOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastOutPkts.setDescription('Packet count for Outbound traffic routed with fast switching')
locIfFastInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastInOctets.setDescription('Octet count for Inbound traffic routed with fast switching')
locIfFastOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFastOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFastOutOctets.setDescription('Octet count for Outbound traffic routed with fast switching')
locIfotherInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherInPkts.setDescription('Other protocol input packet count')
locIfotherOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherOutPkts.setDescription('Other protocol output packet count')
locIfotherInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherInOctets.setDescription('Other protocol input octet count')
locIfotherOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfotherOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfotherOutOctets.setDescription('Other protocol output octet count')
locIfipInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipInPkts.setDescription('ip protocol input packet count')
locIfipOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipOutPkts.setDescription('ip protocol output packet count')
locIfipInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipInOctets.setDescription('ip protocol input octet count')
locIfipOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfipOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfipOutOctets.setDescription('ip protocol output octet count')
locIfdecnetInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetInPkts.setDescription('Decnet protocol input packet count')
locIfdecnetOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetOutPkts.setDescription('Decnet protocol output packet count')
locIfdecnetInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetInOctets.setDescription('Decnet protocol input byte count')
locIfdecnetOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfdecnetOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfdecnetOutOctets.setDescription('Decnet protocol output byte count')
locIfxnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsInPkts.setDescription('XNS protocol input packet count')
locIfxnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsOutPkts.setDescription('XNS protocol output packet count')
locIfxnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsInOctets.setDescription('XNS protocol input byte count')
locIfxnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfxnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfxnsOutOctets.setDescription('XNS protocol output byte count')
locIfclnsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsInPkts.setDescription('CLNS protocol input packet count')
locIfclnsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsOutPkts.setDescription('CLNS protocol output packet count')
locIfclnsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsInOctets.setDescription('CLNS protocol input byte count')
locIfclnsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfclnsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfclnsOutOctets.setDescription('CLNS protocol output byte count')
locIfappletalkInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkInPkts.setDescription('Appletalk protocol input packet count')
locIfappletalkOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkOutPkts.setDescription('Appletalk protocol output packet count')
locIfappletalkInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkInOctets.setDescription('Appletalk protocol input octet count')
locIfappletalkOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfappletalkOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfappletalkOutOctets.setDescription('Appletalk protocol output octet count')
locIfnovellInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellInPkts.setDescription('Novell protocol input packet count')
locIfnovellOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellOutPkts.setDescription('Novell protocol output packet count')
locIfnovellInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellInOctets.setDescription('Novell protocol input octet count')
locIfnovellOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfnovellOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfnovellOutOctets.setDescription('Novell protocol output octet count')
locIfapolloInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloInPkts.setDescription('Apollo protocol input packet count')
locIfapolloOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloOutPkts.setDescription('Apollo protocol output packet count')
locIfapolloInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloInOctets.setDescription('Apollo protocol input octet count')
locIfapolloOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfapolloOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfapolloOutOctets.setDescription('Apollo protocol output octet count')
locIfvinesInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesInPkts.setDescription('Vines protocol input packet count')
locIfvinesOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesOutPkts.setDescription('Vines protocol output packet count')
locIfvinesInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesInOctets.setDescription('Vines protocol input octet count')
locIfvinesOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfvinesOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfvinesOutOctets.setDescription('Vines protocol output octet count')
locIfbridgedInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedInPkts.setDescription('Bridged protocol input packet count')
locIfbridgedOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedOutPkts.setDescription('Bridged protocol output packet count')
locIfbridgedInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedInOctets.setDescription('Bridged protocol input octet count')
locIfbridgedOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfbridgedOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfbridgedOutOctets.setDescription('Bridged protocol output octet count')
locIfsrbInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 78), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbInPkts.setDescription('SRB protocol input packet count')
locIfsrbOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbOutPkts.setDescription('SRB protocol output packet count')
locIfsrbInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbInOctets.setDescription('SRB protocol input octet count')
locIfsrbOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfsrbOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfsrbOutOctets.setDescription('SRB protocol output octet count')
locIfchaosInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosInPkts.setDescription('Choas protocol input packet count')
locIfchaosOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosOutPkts.setDescription('Choas protocol output packet count')
locIfchaosInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosInOctets.setDescription('Choas protocol input octet count')
locIfchaosOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfchaosOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfchaosOutOctets.setDescription('Choas protocol output octet count')
locIfpupInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupInPkts.setDescription('PUP protocol input packet count')
locIfpupOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupOutPkts.setDescription('PUP protocol output packet count')
locIfpupInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 88), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupInOctets.setDescription('PUP protocol input octet count')
locIfpupOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 89), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfpupOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfpupOutOctets.setDescription('PUP protocol output octet count')
locIfmopInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 90), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopInPkts.setDescription('MOP protocol input packet count')
locIfmopOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 91), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopOutPkts.setDescription('MOP protocol output packet count')
locIfmopInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 92), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopInOctets.setDescription('MOP protocol input octet count')
locIfmopOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 93), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfmopOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfmopOutOctets.setDescription('MOP protocol output octet count')
locIflanmanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 94), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanInPkts.setDescription('LanMan protocol input packet count')
locIflanmanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 95), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanOutPkts.setDescription('LanMan protocol output packet count')
locIflanmanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 96), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanInOctets.setDescription('LanMan protocol input octet count')
locIflanmanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIflanmanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIflanmanOutOctets.setDescription('LanMan protocol output octet count')
locIfstunInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunInPkts.setDescription('STUN protocol input packet count')
locIfstunOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunOutPkts.setDescription('STUN protocol output packet count')
locIfstunInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunInOctets.setDescription('STUN protocol input octet count')
locIfstunOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfstunOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfstunOutOctets.setDescription('STUN protocol output octet count')
locIfspanInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanInPkts.setDescription('Spanning tree input protocol packet count')
locIfspanOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 103), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanOutPkts.setDescription('Spanning tree output protocol packet count')
locIfspanInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 104), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanInOctets.setDescription('Spanning tree input octet packet count')
locIfspanOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 105), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfspanOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfspanOutOctets.setDescription('Spanning tree output octet packet count')
locIfarpInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 106), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpInPkts.setDescription('Arp protocol input packet count')
locIfarpOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpOutPkts.setDescription('Arp protocol output packet count')
locIfarpInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 108), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpInOctets.setDescription('Arp protocol input octet count')
locIfarpOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 109), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfarpOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfarpOutOctets.setDescription('Arp protocol output octet count')
locIfprobeInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 110), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeInPkts.setDescription('Probe protocol input packet count')
locIfprobeOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 111), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeOutPkts.setDescription('Probe protocol output packet count')
locIfprobeInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 112), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeInOctets.setDescription('Probe protocol input octet count')
locIfprobeOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 113), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfprobeOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: locIfprobeOutOctets.setDescription('Probe protocol output octet count')
locIfDribbleInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 1, 1, 114), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfDribbleInputs.setStatus('mandatory')
if mibBuilder.loadTexts: locIfDribbleInputs.setDescription('The number of good packets received with the dribble condition present')
lFSIPTable = MibTable((1, 3, 6, 1, 4, 1, 9, 2, 2, 2), )
if mibBuilder.loadTexts: lFSIPTable.setStatus('mandatory')
if mibBuilder.loadTexts: lFSIPTable.setDescription('A list of card entries for 4T, HSSI, Mx serial or FSIP.')
lFSIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1), ).setIndexNames((0, "OLD-CISCO-INTERFACES-MIB", "locIfFSIPIndex"))
if mibBuilder.loadTexts: lFSIPEntry.setStatus('mandatory')
if mibBuilder.loadTexts: lFSIPEntry.setDescription('A collection of objects specific to 4T, HSSI, Mx serial or FSIP.')
locIfFSIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPIndex.setDescription('Interface index of this card corresponding to its ifIndex')
locIfFSIPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("dte", 2), ("dce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPtype.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPtype.setDescription('Is this FSIP line DCE or DTE')
locIfFSIPrts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPrts.setDescription('Is the RTS signal up or down')
locIfFSIPcts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPcts.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPcts.setDescription('Is the CTS signal up or down')
locIfFSIPdtr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdtr.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPdtr.setDescription('Is the DTR signal up or down')
locIfFSIPdcd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdcd.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPdcd.setDescription('Is the DCD signal up or down')
locIfFSIPdsr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAvailable", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPdsr.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPdsr.setDescription('Is the DSR signal up or down')
locIfFSIPrxClockrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrxClockrate.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPrxClockrate.setDescription('Received clock rate')
locIfFSIPrxClockrateHi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPrxClockrateHi.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPrxClockrateHi.setDescription('Use when received clock rate is greater than 2^32 (gigabits).')
locIfFSIPportType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("noCable", 1), ("rs232", 2), ("rs422", 3), ("rs423", 4), ("v35", 5), ("x21", 6), ("rs449", 7), ("rs530", 8), ("hssi", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locIfFSIPportType.setStatus('mandatory')
if mibBuilder.loadTexts: locIfFSIPportType.setDescription('Cable Type of 4T, HSSI, Mx serial or FSIP')
mibBuilder.exportSymbols("OLD-CISCO-INTERFACES-MIB", locIfprobeInPkts=locIfprobeInPkts, locIfFSIPrxClockrate=locIfFSIPrxClockrate, locIfotherOutPkts=locIfotherOutPkts, locIfvinesInOctets=locIfvinesInOctets, locIfSlowInOctets=locIfSlowInOctets, locIfmopOutOctets=locIfmopOutOctets, locIfarpOutPkts=locIfarpOutPkts, locIfipInOctets=locIfipInOctets, locIfFSIPportType=locIfFSIPportType, locIfchaosInOctets=locIfchaosInOctets, locIfCollisions=locIfCollisions, locIfInPktsSec=locIfInPktsSec, locIfInFrame=locIfInFrame, locIfLastOut=locIfLastOut, locIfvinesOutPkts=locIfvinesOutPkts, lFSIPTable=lFSIPTable, locIfchaosInPkts=locIfchaosInPkts, locIfLastOutHang=locIfLastOutHang, locIfxnsInPkts=locIfxnsInPkts, locIfxnsOutOctets=locIfxnsOutOctets, locIfapolloInPkts=locIfapolloInPkts, locIfpupOutPkts=locIfpupOutPkts, locIfFSIPdsr=locIfFSIPdsr, locIfInRunts=locIfInRunts, locIfInAbort=locIfInAbort, locIfsrbInPkts=locIfsrbInPkts, locIfFSIPdcd=locIfFSIPdcd, locIfarpInOctets=locIfarpInOctets, locIfotherInPkts=locIfotherInPkts, locIfclnsInOctets=locIfclnsInOctets, locIfmopInPkts=locIfmopInPkts, locIfRestarts=locIfRestarts, locIfnovellInOctets=locIfnovellInOctets, locIfInGiants=locIfInGiants, locIfLastIn=locIfLastIn, locIfHardType=locIfHardType, lifTable=lifTable, locIfotherOutOctets=locIfotherOutOctets, locIfapolloOutPkts=locIfapolloOutPkts, locIfchaosOutPkts=locIfchaosOutPkts, locIfFSIPtype=locIfFSIPtype, locIfvinesInPkts=locIfvinesInPkts, locIfarpInPkts=locIfarpInPkts, locIfReason=locIfReason, lifEntry=lifEntry, locIfSlowInPkts=locIfSlowInPkts, locIfprobeInOctets=locIfprobeInOctets, locIfdecnetInPkts=locIfdecnetInPkts, locIfxnsOutPkts=locIfxnsOutPkts, locIfDribbleInputs=locIfDribbleInputs, locIfFastOutPkts=locIfFastOutPkts, locIflanmanOutPkts=locIflanmanOutPkts, locIfInputQueueDrops=locIfInputQueueDrops, locIfOutBitsSec=locIfOutBitsSec, locIfKeep=locIfKeep, locIfOutPktsSec=locIfOutPktsSec, locIfSlowOutOctets=locIfSlowOutOctets, locIfxnsInOctets=locIfxnsInOctets, locIfFSIPrxClockrateHi=locIfFSIPrxClockrateHi, locIfappletalkOutPkts=locIfappletalkOutPkts, locIfappletalkOutOctets=locIfappletalkOutOctets, locIfFastInOctets=locIfFastInOctets, locIfprobeOutPkts=locIfprobeOutPkts, locIfsrbInOctets=locIfsrbInOctets, locIfFastOutOctets=locIfFastOutOctets, locIfCarTrans=locIfCarTrans, locIfpupInPkts=locIfpupInPkts, locIfstunInPkts=locIfstunInPkts, locIfsrbOutOctets=locIfsrbOutOctets, locIfapolloInOctets=locIfapolloInOctets, locIfInBitsSec=locIfInBitsSec, locIfnovellOutOctets=locIfnovellOutOctets, locIfipOutOctets=locIfipOutOctets, locIfchaosOutOctets=locIfchaosOutOctets, locIfdecnetOutOctets=locIfdecnetOutOctets, locIfclnsOutPkts=locIfclnsOutPkts, locIfipInPkts=locIfipInPkts, locIfpupInOctets=locIfpupInOctets, locIfpupOutOctets=locIfpupOutOctets, locIfipOutPkts=locIfipOutPkts, locIfInIgnored=locIfInIgnored, locIfdecnetOutPkts=locIfdecnetOutPkts, locIfReliab=locIfReliab, locIfbridgedInPkts=locIfbridgedInPkts, locIfFastInPkts=locIfFastInPkts, locIflanmanInPkts=locIflanmanInPkts, locIfFSIPIndex=locIfFSIPIndex, locIfLineProt=locIfLineProt, locIfbridgedOutOctets=locIfbridgedOutOctets, locIfmopInOctets=locIfmopInOctets, locIfResets=locIfResets, locIfstunOutOctets=locIfstunOutOctets, locIfarpOutOctets=locIfarpOutOctets, locIfSlowOutPkts=locIfSlowOutPkts, locIfclnsInPkts=locIfclnsInPkts, locIfdecnetInOctets=locIfdecnetInOctets, locIfInOverrun=locIfInOverrun, locIfvinesOutOctets=locIfvinesOutOctets, locIfstunInOctets=locIfstunInOctets, locIfDescr=locIfDescr, locIfappletalkInPkts=locIfappletalkInPkts, locIfsrbOutPkts=locIfsrbOutPkts, locIfclnsOutOctets=locIfclnsOutOctets, locIfmopOutPkts=locIfmopOutPkts, locIfapolloOutOctets=locIfapolloOutOctets, locIfbridgedOutPkts=locIfbridgedOutPkts, locIfstunOutPkts=locIfstunOutPkts, locIfFSIPcts=locIfFSIPcts, linterfaces=linterfaces, locIfbridgedInOctets=locIfbridgedInOctets, locIfnovellInPkts=locIfnovellInPkts, locIfspanInPkts=locIfspanInPkts, lFSIPEntry=lFSIPEntry, locIfspanOutOctets=locIfspanOutOctets, locIfotherInOctets=locIfotherInOctets, locIfInCRC=locIfInCRC, locIfprobeOutOctets=locIfprobeOutOctets, locIflanmanOutOctets=locIflanmanOutOctets, locIfappletalkInOctets=locIfappletalkInOctets, locIfspanInOctets=locIfspanInOctets, locIflanmanInOctets=locIflanmanInOctets, locIfDelay=locIfDelay, locIfLoad=locIfLoad, locIfOutputQueueDrops=locIfOutputQueueDrops, locIfnovellOutPkts=locIfnovellOutPkts, locIfFSIPrts=locIfFSIPrts, locIfspanOutPkts=locIfspanOutPkts, locIfFSIPdtr=locIfFSIPdtr)
