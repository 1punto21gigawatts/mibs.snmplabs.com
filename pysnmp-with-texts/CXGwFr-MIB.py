#
# PySNMP MIB module CXGwFr-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXGwFr-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
Alias, cxGwFr, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "Alias", "cxGwFr", "SapIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Gauge32, ObjectIdentity, Unsigned32, Counter32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, MibIdentifier, Counter64, TimeTicks, Integer32, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Gauge32", "ObjectIdentity", "Unsigned32", "Counter32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "MibIdentifier", "Counter64", "TimeTicks", "Integer32", "Bits", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gffSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1), )
if mibBuilder.loadTexts: gffSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapTable.setDescription('Table containing configuration information about all the GFF module SAPs.')
gffSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1), ).setIndexNames((0, "CXGwFr-MIB", "gffSapId"))
if mibBuilder.loadTexts: gffSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapEntry.setDescription('This row holds all the parameters related to a particular GFF module SAP.')
gffSapId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gffSapId.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapId.setDescription('Identifies the SAP by a unique numerical value.')
gffSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapRowStatus.setDescription('This parameter is relevant to upper SAPs only. Indicates whether this SAP is configured in the CE. Options: invalid (1): Deletes the current entry (row) in the table. valid (2): Creates a SAP entry (row) in the table. Default Value: valid (2) Related Objects: gffSapType Configuration Changed: administrative')
gffSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapType.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapType.setDescription('Identifies the SAP type. There is one lower SAP connected permanently to TBC and up to 16 upper SAPs connected to FRM. Options: lower (1): SAP is a lower type (leads to the bus of the CX1000 chassis) upper (2): SAP is an upper type (leads to a lower SAP in the Frame Relay software layer) Default Value: none Configuration Changed: administrative')
gffSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapAlias.setDescription('Identifies the GFF local SAP by a textual name. Range of Values: 0 to 35 alphanumeric characters beginning with a non-numeric character. Default Value: gffsap1 (for gffSapId 1) gffsap2 (for gffSapId 2) gffsap3 (for gffSapId 3) gffsap4 (for gffSapId 4) gffsap5 (for gffSapId 5) gffsap6 (for gffSapId 6) gffsap7 (for gffSapId 7) gffsap8 (for gffSapId 8) gffsap9 (for gffSapId 9) gffsap10 (for gffSapId 10) gffsap11 (for gffSapId 11) gffsap12 (for gffSapId 12) gffsap13 (for gffSapId 13) gffsap14 (for gffSapId 14) gffsap15 (for gffSapId 15) gffsap16 (for gffSapId 16) gffsap17 (for gffSapId 17) Configuration Changed: administrative')
gffSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 5), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapCompanionAlias.setDescription('Determines the textual name identifying the remote or companion SAP that will communicate with this SAP. Range of Values: 0 to 35 alphanumeric characters beginning with a non-numeric character. Default Value: undefined for gffSapId 1-16; tbsap4 for gffSapId 17 Configuration Changed: administrative')
gffSapAssociatedSlotNo = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapAssociatedSlotNo.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapAssociatedSlotNo.setDescription('This parameter is relevant to upper SAPs only. Identifies the local chassis slot number that communicates with the Frame Relay service through this SAP. Range of Values: 1 - 16 Default Value: 6 Related Objects: gffSapType Configuration Changed: administrative')
gffSapWindowWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100)).clone(40)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapWindowWidth.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapWindowWidth.setDescription('This object is relevant to upper SAPs only and concerns the traffic going from FRM to GFF. Determines the number of OS buffers the Frame Relay software layer can transmitted through this SAP without receiving acknowledgement. Range of Values: 40 - 100 Default Value: 40 Related Objects: gffSapType Configuration Changed: administrative')
gffSapTrafficPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapTrafficPriority.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapTrafficPriority.setDescription("Determines the priority for sending frames to a PX600 card or to the Frame Relay software layer. Options: 1: urgent 2: expeditious 3: normal Default Value: 3 Configuration Changed: operative, but only if this object's row was included in the table at the last system reset. Otherwise, change is administrative. ")
gffSapMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 8192)).clone(4096)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gffSapMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: gffSapMaxFrameSize.setDescription("Determines the maximum frame size the Frame Relay software layer can expect from the GFF module. Range of Values: 3 - 8192 (bytes) Default Value: 4096 Configuration Changed: operative, but only if this object's row was included in the table at the last system reset. Otherwise, change is administrative. ")
mibBuilder.exportSymbols("CXGwFr-MIB", gffSapWindowWidth=gffSapWindowWidth, gffSapAssociatedSlotNo=gffSapAssociatedSlotNo, gffSapRowStatus=gffSapRowStatus, gffSapId=gffSapId, gffSapTable=gffSapTable, gffSapCompanionAlias=gffSapCompanionAlias, gffSapMaxFrameSize=gffSapMaxFrameSize, gffSapType=gffSapType, gffSapAlias=gffSapAlias, gffSapTrafficPriority=gffSapTrafficPriority, gffSapEntry=gffSapEntry)
