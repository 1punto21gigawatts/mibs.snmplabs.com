#
# PySNMP MIB module RAD-DS1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAD-DS1-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ifAlias, = mibBuilder.importSymbols("IF-MIB", "ifAlias")
PerfIntervalCount, PerfCurrentCount, PerfTotalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfCurrentCount", "PerfTotalCount")
diverseIfWanGen, alarmState, alarmSeverity = mibBuilder.importSymbols("RAD-MIB", "diverseIfWanGen", "alarmState", "alarmSeverity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, IpAddress, NotificationType, Bits, MibIdentifier, Counter64, Counter32, TimeTicks, ModuleIdentity, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "IpAddress", "NotificationType", "Bits", "MibIdentifier", "Counter64", "Counter32", "TimeTicks", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue")
ds1Interface = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4))
prtDS1Events = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0))
prtDs1PerfHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1))
dsx1XCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2), )
if mibBuilder.loadTexts: dsx1XCurrentTable.setStatus('current')
if mibBuilder.loadTexts: dsx1XCurrentTable.setDescription('A list of current statistics entries. This table contains additional objects for the current table.')
dsx1XCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1CurrentIndex"))
if mibBuilder.loadTexts: dsx1XCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1XCurrentEntry.setDescription('An entry containing additional statistical counters applicable to a particular current table.')
dsx1CurrentLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOS.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentLOS.setDescription('The counter associated with the number of LOS seconds, encountered by a DS1 interface in the current 15 minute interval.')
dsx1CurrentLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOF.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentLOF.setDescription('The counter associated with the number of LOF seconds, encountered by a DS1 interface in the current 15 minute interval.')
dsx1CurrentLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOC.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentLOC.setDescription(' Loss Of Cell delineation. Counts number of cells the ATM UNI cells receiver lost cells delineation .')
dsx1CurrentAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentAIS.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentAIS.setDescription('The counter associated with the number of AIS seconds, encountered by a DS1 interface in the current 15 minute interval.')
dsx1CurrentRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentRAI.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentRAI.setDescription('Remote Alarm Indication: Transmitted in the outgoing direction (toward the PABX) over FDL bits when the DS1 device detected an incoming Loss Of Frame. Received from the far end (PABX) over FDL when it detects a Loss of frame.')
dsx1CurrentLOMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOMF.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentLOMF.setDescription('Loss of Multi-Frame sequence in E1 time slot 16.')
dsx1CurrentFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentFEBE.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentFEBE.setDescription('Far End Block Errors, as reported in the first bit of frames 13 and 15, on multiframe E1 lines with CRC4, in the current 15 minute interval.')
dsx1CurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentStatus.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentStatus.setDescription('The statuses of the current interval: 0 - Valid. 1 - redundantLinkSwitch - the link has been switched by a redundancy mechanism. 2 - discontinuity - module was partialy out. 4 - notValid - module is out.')
dsx1CurrentBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentBPV.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentBPV.setDescription('The counter associated with the number of BPVs (Bi-Polar Violations) encountered by a DS1 interface in the current 15 minute interval.')
dsx1CurrentLOCRCMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOCRCMF.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentLOCRCMF.setDescription('Loss of CRC4 Multi-Frame sequence in E1. encountered in the current 15 minute interval')
dsx1CurrentLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentLOFC.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentLOFC.setDescription('Counts the number of loss of frame events measured. encountered in the current 15 minute interval')
dsx1CurrentCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 2, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1CurrentCRCErrors.setStatus('current')
if mibBuilder.loadTexts: dsx1CurrentCRCErrors.setDescription('Counts the number of CRC error events, encountered in the current 15 minute interval.')
dsx1XIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3), )
if mibBuilder.loadTexts: dsx1XIntervalTable.setStatus('current')
if mibBuilder.loadTexts: dsx1XIntervalTable.setDescription(' A list of Interval entries. This table contains additional objects for the interval table.')
dsx1XIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1IntervalIndex"), (0, "RAD-DS1-MIB", "dsx1IntervalNumber"))
if mibBuilder.loadTexts: dsx1XIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1XIntervalEntry.setDescription('An entry containing additional statistical counters applicable to a particular interval table.')
dsx1IntervalLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOS.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalLOS.setDescription('The counter associated with the number of LOS seconds , encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
dsx1IntervalLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOF.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalLOF.setDescription('The counter associated with the number of OOF seconds, encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
dsx1IntervalLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOC.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalLOC.setDescription(' Loss Of Cell delineation. Counts number of cells the ATM UNI cells receiver lost cells delineation .')
dsx1IntervalAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalAIS.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalAIS.setDescription('The counter associated with the number of AIS seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
dsx1IntervalRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalRAI.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalRAI.setDescription('Remote Alarm Indication: Transmitted in the outgoing direction (toward the PABX) over FDL bits when the DS1 device detected an incoming Loss Of Frame. Received from the far end (PABX) over FDL when it detects a Loss of frame.')
dsx1IntervalLOMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOMF.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalLOMF.setDescription('Loss of Multi-Frame sequence in E1 time slot 16.')
dsx1IntervalFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalFEBE.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalFEBE.setDescription('Far End Block Errors, as reported in the first bit of frames 13 and 15, on multiframe E1 lines with CRC4, in one of the previous 96, individual, 15 minute intervals.')
dsx1IntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalStatus.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalStatus.setDescription('The statuses of the current interval: 0 - Valid. 1 - redundantLinkSwitch - the link has been switched by a redundancy mechanism. 2 - discontinuity - module was partialy out. 4 - notValid - module is out.')
dsx1IntervalBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalBPV.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalBPV.setDescription('The counter associated with the number of BPV (Bi-Polar Violations) encountered by a DS1 interface in one of the previous 96, individual 15 minute, intervals.')
dsx1IntervalLOCRCMF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOCRCMF.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalLOCRCMF.setDescription('Loss of CRC4 Multi-Frame sequence in E1.')
dsx1IntervalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 3, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1IntervalLOFC.setStatus('current')
if mibBuilder.loadTexts: dsx1IntervalLOFC.setDescription('Counts the number of loss of frame events measured in one of the previous 96, individual 15 minute, intervals.')
dsx1XTotalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4), )
if mibBuilder.loadTexts: dsx1XTotalTable.setStatus('current')
if mibBuilder.loadTexts: dsx1XTotalTable.setDescription('A list of Total statistics entries. This table contains additional objects for the Total table.')
dsx1XTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1TotalIndex"))
if mibBuilder.loadTexts: dsx1XTotalEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1XTotalEntry.setDescription('An entry containing additional statistical counters applicable to a particular current table.')
dsx1TotalLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLOS.setStatus('current')
if mibBuilder.loadTexts: dsx1TotalLOS.setDescription('The counter associated with the number of LOS (Loss of Signal) seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
dsx1TotalBPV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalBPV.setStatus('current')
if mibBuilder.loadTexts: dsx1TotalBPV.setDescription('The counter associated with the number of BPV (Bi-Polar Violations) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
dsx1TotalLOFC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 4, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1TotalLOFC.setStatus('current')
if mibBuilder.loadTexts: dsx1TotalLOFC.setDescription('The counter associated with the number loss of frames encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
dsx1DataStreamStatTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5), )
if mibBuilder.loadTexts: dsx1DataStreamStatTable.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatTable.setDescription('The DS1 Data Stream Statistics table.')
dsx1DataStreamStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1DataStreamStatIfIndex"), (0, "RAD-DS1-MIB", "dsx1DataStreamStatIndex"))
if mibBuilder.loadTexts: dsx1DataStreamStatEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatEntry.setDescription('An entry in the DS1 Data Stream Statistics table.')
dsx1DataStreamStatIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: dsx1DataStreamStatIfIndex.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatIfIndex.setDescription('The index of the DS1 interface. It may be ifIndex.')
dsx1DataStreamStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: dsx1DataStreamStatIndex.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatIndex.setDescription('The DS1 Data Stream Index. For Vmux - the following indices are used: 1 for Transparent 2-3 for SS71-SS72 (respectively) 4-7 for Data1-Data4 (respectively) .')
dsx1DataStreamStatValid = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatValid.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatValid.setDescription('Indicates whether this Data Stream is valid or not. When invalid - all counters are irrelevant.')
dsx1DataStreamStatInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInFrames.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatInFrames.setDescription('The counter associated with the number of received frames, encountered by the DS1 Data Stream.')
dsx1DataStreamStatInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInBytes.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatInBytes.setDescription('The counter associated with the number of received bytes, encountered by the DS1 Data Stream.')
dsx1DataStreamStatInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInDiscards.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatInDiscards.setDescription('The counter associated with the number of Discarded incoming frames, encountered by the DS1 Data Stream.')
dsx1DataStreamStatInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatInErrors.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatInErrors.setDescription('The counter associated with the number of received Errored frames, encountered by the DS1 Data Stream.')
dsx1DataStreamStatOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatOutFrames.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatOutFrames.setDescription('The counter associated with the number of transmitted frames, encountered by the DS1 Data Stream.')
dsx1DataStreamStatOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatOutBytes.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatOutBytes.setDescription('The counter associated with the number of transmitted bytes, encountered by the DS1 Data Stream.')
dsx1DataStreamStatOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 1, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1DataStreamStatOutDiscards.setStatus('current')
if mibBuilder.loadTexts: dsx1DataStreamStatOutDiscards.setDescription('The counter associated with the number of Discarded outgoing frames, encountered by the DS1 Data Stream.')
dsx1XConfigTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2), )
if mibBuilder.loadTexts: dsx1XConfigTable.setStatus('current')
if mibBuilder.loadTexts: dsx1XConfigTable.setDescription(' An extension to the DS1 Configuration table.')
dsx1XConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1), ).setIndexNames((0, "RAD-DS1-MIB", "dsx1LineIndex"))
if mibBuilder.loadTexts: dsx1XConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dsx1XConfigEntry.setDescription('An entry containing additional configuration parameters.')
dsx1IdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1IdleCode.setStatus('current')
if mibBuilder.loadTexts: dsx1IdleCode.setDescription('Byte pattern of the data received/transmitted in the E1T1 framer idle timeslots. Valid range: (0 - FF HEX).')
dsx1LineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("csu", 1), ("dsu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineMode.setStatus('current')
if mibBuilder.loadTexts: dsx1LineMode.setDescription('T1 device operation mode. Valid for T1 only.')
dsx1dBTxGain = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("neg75dB", 2), ("neg15dB", 3), ("neg225dB", 4), ("zerodB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1dBTxGain.setStatus('current')
if mibBuilder.loadTexts: dsx1dBTxGain.setDescription('Transmit line Gain for T1 CSU line mode.')
dsx1RxSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("neg10dB", 2), ("neg32dB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1RxSensitivity.setStatus('current')
if mibBuilder.loadTexts: dsx1RxSensitivity.setDescription('Determine the maximum attenuation of the receive signal that can be compensated for by the interface receive path. Not applicable for T1.')
dsx1RestoreTime = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("sec1", 2), ("sec10", 3), ("immediate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1RestoreTime.setStatus('current')
if mibBuilder.loadTexts: dsx1RestoreTime.setDescription("Used to change the sync. algorithms to reduce the time required for the port to return to normal operation after a RED alarm. 'sec1' = Fast, 'sec10' = TR-6211, 'immediate' = CCITT")
dsx1TcFirstSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TcFirstSignal.setStatus('current')
if mibBuilder.loadTexts: dsx1TcFirstSignal.setDescription('Trunk conditioning signal - value to be sent as a signal during the first 2.5 seconds after alarm detection. Range is 0x0..0xF. 0xFF is a NULL value. This variable is used also for Space Signaling Code (in this case 0xFF is not NULL).')
dsx1TcSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TcSignal.setStatus('current')
if mibBuilder.loadTexts: dsx1TcSignal.setDescription('Trunk conditioning signal value after alarm detection. Range is 0x1..0xF for E1, and 0x0..0xF for T1. This variable is used also for Space Signaling Code (E1 and T1).')
dsx1TcPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TcPattern.setStatus('current')
if mibBuilder.loadTexts: dsx1TcPattern.setDescription('Trunk conditioning data pattern to be sent upon a DS0 fail. Range is 0x0..0xFF. This variable used also for Out of Service Code.')
dsx1Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("notActive", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1Scramble.setStatus('current')
if mibBuilder.loadTexts: dsx1Scramble.setDescription('Scrambling is an operation that randomizes the bits of the payload of the ATM cell by a polynom. This operation helps with the error detection mechanism of the HEC. Not applicable for E1. active - will scramble/descramble the payload ATM cell notActive - will not scramble/descramble. ')
dsx1LineAdaptiveTimingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LineAdaptiveTimingMode.setStatus('current')
if mibBuilder.loadTexts: dsx1LineAdaptiveTimingMode.setDescription('Enables end to end clock synchronization. Default value - off.')
dsx1TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("loopTiming", 1), ("localTiming", 2), ("throughTiming", 3), ("adaptive", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TxClockSource.setStatus('current')
if mibBuilder.loadTexts: dsx1TxClockSource.setDescription("The source of Transmit Clock. 'loopTiming' indicates that the recovered receive clock is used as the transmit clock. 'localTiming' indicates that a local clock source is used or when an external clock is attached to the box containing the interface. 'throughTiming' indicates that recovered receive clock from another interface is used as the transmit clock. 'adaptive' indicates that the clock is recovered according to the received data flow rate. ")
dsx1AisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1AisEnable.setStatus('current')
if mibBuilder.loadTexts: dsx1AisEnable.setDescription('Enable/ disable AIS transmit when Ethernet cable (for TDMoIP) is out (disconnected).')
dsx1TsEchoCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1TsEchoCancel.setStatus('current')
if mibBuilder.loadTexts: dsx1TsEchoCancel.setDescription("This parameter defines for each TS whether Echo-Cancellation is on. Each bit represents one TS as follow: First octet bit'0' = TS#1, bit'7' = TS#8, .. 2nd octet bit'0' = TS#9,.., 4th octet bit'7' = TS#32. Octets and bits order is from left to right: [31,30,..24] [23..16] [15..8] [7..0] MSB LSB MSB LSB MSB LSB MSB LSB For each bit values are: 0 - Echo-Cancellation off. 1 - Echo-Cancellation on.")
dsx1EchoCancelerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("notExist", 2), ("exist", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsx1EchoCancelerModule.setStatus('current')
if mibBuilder.loadTexts: dsx1EchoCancelerModule.setDescription('This parameter indicates whether echo-cancellation module exists for this line.')
dsx1PortFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("uni", 2), ("ces", 3), ("ima", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1PortFunction.setStatus('current')
if mibBuilder.loadTexts: dsx1PortFunction.setDescription('This object determines the ATM Mode over the physical port. uni - The port will function as an ATM UNI. ces - The port will function as a CES. ima - The port will function as an IMA-ATM.')
dsx1PortMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("r56", 2), ("r64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1PortMultiplier.setStatus('current')
if mibBuilder.loadTexts: dsx1PortMultiplier.setDescription('This object determines the data rate of each TS (Kbps units). This parameter is applicable for T1 only.')
dsx1LeasedLine = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1LeasedLine.setStatus('current')
if mibBuilder.loadTexts: dsx1LeasedLine.setDescription('This parameter defines whether Line mode is regular (non Leased Line mode) or transparent (Leased Line mode).')
dsx1CsuLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("local", 2), ("transparent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1CsuLoop.setStatus('current')
if mibBuilder.loadTexts: dsx1CsuLoop.setDescription('This parameter defines whether CSU loop will be done locally (by IPmux) or will be transferred to the TDM device.')
dsx1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1ClockSource.setStatus('current')
if mibBuilder.loadTexts: dsx1ClockSource.setDescription('This entry specifies the source from which the clock will be taken. Refer to device specification for source Index')
dsx1OosSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("space", 2), ("mark", 3), ("spaceMark", 4), ("markSpace", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dsx1OosSignal.setStatus('current')
if mibBuilder.loadTexts: dsx1OosSignal.setDescription(" This parameter defines the value to be sent as a signal after alarm detection: 'Space' = both A and B signaling bits are forced to '0' during out-of-service periods. 'Mark' = both A and B signaling bits are forced to '1' during out-of-service periods. 'spaceMark' = A and B bits are forced to '0' for 2.5 seconds; then they are switched to '1' until out-of-service condition disappears. 'markSpace' = A and B bits are forced to '1' for 2.5 seconds; then they are switched to '0' until out-of-service condition disappears. - '0'= 0 for T1, 1 for E1, or user defined value for Space - '1'= 1 for T1, 0 for E1, or user defined value for Mark.")
ds1LocalMultiframeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 1)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LocalMultiframeAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ds1LocalMultiframeAlarmTrap.setDescription('This trap indicates near end (Local) Loss of Multiframe Alignment, of the user E1 interface.')
ds1RemoteMultiframeAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 2)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1RemoteMultiframeAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ds1RemoteMultiframeAlarmTrap.setDescription('This trap indicates that the far end (remote) unit, connected to the user E1 interface, reports Loss of Multiframe Alignment.')
ds1LinkFrameSlipTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 3)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LinkFrameSlipTrap.setStatus('current')
if mibBuilder.loadTexts: ds1LinkFrameSlipTrap.setDescription('This trap indicates that a Frame Slip occurred at the user DS1 interface. This usually indicates timing problems (incorrect selection of timing reference), on the user DS1 link.')
ds1BpvErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 4)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1BpvErrorTrap.setStatus('current')
if mibBuilder.loadTexts: ds1BpvErrorTrap.setDescription('This trap indicates a Bipolar Violation (BPV) error has been detected at the user DS1 interface.')
ds1ExcessiveBpvTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 5)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveBpvTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveBpvTrap.setDescription('This trap indicates excessive number of Bipolar Violation errors (BPV) detected by the user DS1 interface')
ds1Crc4ErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 6)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1Crc4ErrorTrap.setStatus('current')
if mibBuilder.loadTexts: ds1Crc4ErrorTrap.setDescription('This trap indicates that a frame with CRC-4 error has been detected at the user DS1 interface.')
ds1ExcessiveErrorRatioTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 7)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveErrorRatioTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveErrorRatioTrap.setDescription('This trap indicates that the error rate, detected at the user DS1 interface, on the frame synchronization bits is high, as defined by ITU-T Rec. G.732.')
ds1RemoteSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 8)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1RemoteSyncLossTrap.setStatus('current')
if mibBuilder.loadTexts: ds1RemoteSyncLossTrap.setDescription('This trap indicates that the far-end (remote) unit, connected to user DS1 interface, reports Loss of Frame Alignment (Sync Loss).')
ds1LocalSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 9)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LocalSyncLossTrap.setStatus('current')
if mibBuilder.loadTexts: ds1LocalSyncLossTrap.setDescription('This trap indicates near end (Local) Loss of Frame Alignment failure (Sync Loss), of the user DS1 interface')
ds1AisSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 10)).setObjects(("RAD-MIB", "alarmSeverity"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1AisSyncLossTrap.setStatus('current')
if mibBuilder.loadTexts: ds1AisSyncLossTrap.setDescription('This trap indicates near end (Local) Loss of Frame Alignment (Sync Loss), caused by the reception of AIS at the user DS1 interface.')
ds1AisTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 11)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1AisTrap.setStatus('current')
if mibBuilder.loadTexts: ds1AisTrap.setDescription('This trap indicates AIS being received at the user DS1 interface.')
ds1NetworkRemoteLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 12)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1NetworkRemoteLoopTrap.setStatus('current')
if mibBuilder.loadTexts: ds1NetworkRemoteLoopTrap.setDescription('This trap indicates that a remote loopback has been activated, on the local uplink interface.')
ds1RemoteLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 13)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1RemoteLoopTrap.setStatus('current')
if mibBuilder.loadTexts: ds1RemoteLoopTrap.setDescription('This trap indicates that a remote loopback has been activated, on the local user port.')
ds1LocalLoopTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 14)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1LocalLoopTrap.setStatus('current')
if mibBuilder.loadTexts: ds1LocalLoopTrap.setDescription('This trap indicates that a local loopback has been activated on the user port.')
ds1ExcessiveFrameSlipTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 15)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveFrameSlipTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveFrameSlipTrap.setDescription('This trap indicates that the number of Frame Slips detected at the user DS1 interface, during the last minute exceeds threshold. For LA-110, threshold value is 10. This usually indicates timing problems (incorrect selection of timing reference) on the user DS1.')
ds1ExcessiveCrc4ErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 16)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveCrc4ErrorTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveCrc4ErrorTrap.setDescription('This trap indicates that the error rate detected on the CRC-4 bits at the user DS1 interface, is high.')
ds1ExcessiveLocalMfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 17)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveLocalMfAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveLocalMfAlarmTrap.setDescription('This trap indicates that the number of local Loss of Multiframe Alignment events, detected at the user E1 interface during the last minute exceeds threshold. For LA-110, threshold value is 10.')
ds1ExcessiveRemoteMfAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 18)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveRemoteMfAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveRemoteMfAlarmTrap.setDescription('This trap indicates that the number of Loss of multiframe alignment events reported by the remote unit connected to the user E1 interface during the last minute exceeds threshold. For LA-110, threshold value is 10.')
ds1ExcessiveRemoteSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 19)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveRemoteSyncLossTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveRemoteSyncLossTrap.setDescription('This trap indicates that the number of far end (remote) Loss of Synchronization alarms, reported by the user DS1 interface during the last minute, exceeds threshold. For LA-110, threshold value is 10.')
ds1ExcessiveLocalSyncLossTrap = NotificationType((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 4, 0, 20)).setObjects(("RAD-MIB", "alarmSeverity"), ("RAD-MIB", "alarmState"), ("IF-MIB", "ifAlias"))
if mibBuilder.loadTexts: ds1ExcessiveLocalSyncLossTrap.setStatus('current')
if mibBuilder.loadTexts: ds1ExcessiveLocalSyncLossTrap.setDescription('This trap indicates that the number of Loss of local Synchronization alarms reported by the user DS1 interface during the last minute, exceeds threshold. For LA-110, threshold value is 10.')
mibBuilder.exportSymbols("RAD-DS1-MIB", dsx1DataStreamStatInBytes=dsx1DataStreamStatInBytes, ds1ExcessiveBpvTrap=ds1ExcessiveBpvTrap, dsx1LineAdaptiveTimingMode=dsx1LineAdaptiveTimingMode, ds1ExcessiveRemoteSyncLossTrap=ds1ExcessiveRemoteSyncLossTrap, dsx1RestoreTime=dsx1RestoreTime, dsx1CurrentLOC=dsx1CurrentLOC, dsx1dBTxGain=dsx1dBTxGain, dsx1XConfigEntry=dsx1XConfigEntry, dsx1IntervalLOF=dsx1IntervalLOF, dsx1IntervalLOCRCMF=dsx1IntervalLOCRCMF, dsx1TxClockSource=dsx1TxClockSource, dsx1TotalBPV=dsx1TotalBPV, ds1Interface=ds1Interface, dsx1IntervalLOS=dsx1IntervalLOS, dsx1TcFirstSignal=dsx1TcFirstSignal, dsx1DataStreamStatOutDiscards=dsx1DataStreamStatOutDiscards, ds1LinkFrameSlipTrap=ds1LinkFrameSlipTrap, dsx1IntervalAIS=dsx1IntervalAIS, ds1RemoteSyncLossTrap=ds1RemoteSyncLossTrap, dsx1IntervalLOMF=dsx1IntervalLOMF, ds1ExcessiveCrc4ErrorTrap=ds1ExcessiveCrc4ErrorTrap, dsx1DataStreamStatEntry=dsx1DataStreamStatEntry, dsx1CurrentLOCRCMF=dsx1CurrentLOCRCMF, ds1NetworkRemoteLoopTrap=ds1NetworkRemoteLoopTrap, ds1ExcessiveErrorRatioTrap=ds1ExcessiveErrorRatioTrap, dsx1CurrentLOF=dsx1CurrentLOF, ds1RemoteMultiframeAlarmTrap=ds1RemoteMultiframeAlarmTrap, dsx1IntervalLOC=dsx1IntervalLOC, dsx1CurrentLOFC=dsx1CurrentLOFC, prtDs1PerfHistory=prtDs1PerfHistory, dsx1IntervalLOFC=dsx1IntervalLOFC, dsx1LeasedLine=dsx1LeasedLine, dsx1TotalLOFC=dsx1TotalLOFC, ds1AisSyncLossTrap=ds1AisSyncLossTrap, dsx1CurrentRAI=dsx1CurrentRAI, dsx1IdleCode=dsx1IdleCode, dsx1EchoCancelerModule=dsx1EchoCancelerModule, dsx1DataStreamStatValid=dsx1DataStreamStatValid, dsx1TotalLOS=dsx1TotalLOS, dsx1CurrentAIS=dsx1CurrentAIS, dsx1LineMode=dsx1LineMode, dsx1XCurrentTable=dsx1XCurrentTable, dsx1IntervalRAI=dsx1IntervalRAI, dsx1XConfigTable=dsx1XConfigTable, dsx1ClockSource=dsx1ClockSource, dsx1XTotalTable=dsx1XTotalTable, dsx1XCurrentEntry=dsx1XCurrentEntry, dsx1CurrentBPV=dsx1CurrentBPV, dsx1CurrentFEBE=dsx1CurrentFEBE, dsx1DataStreamStatOutFrames=dsx1DataStreamStatOutFrames, dsx1CurrentLOMF=dsx1CurrentLOMF, dsx1Scramble=dsx1Scramble, dsx1TcPattern=dsx1TcPattern, ds1AisTrap=ds1AisTrap, ds1ExcessiveFrameSlipTrap=ds1ExcessiveFrameSlipTrap, dsx1IntervalFEBE=dsx1IntervalFEBE, ds1BpvErrorTrap=ds1BpvErrorTrap, prtDS1Events=prtDS1Events, dsx1IntervalBPV=dsx1IntervalBPV, ds1LocalLoopTrap=ds1LocalLoopTrap, dsx1PortFunction=dsx1PortFunction, ds1ExcessiveLocalSyncLossTrap=ds1ExcessiveLocalSyncLossTrap, ds1ExcessiveLocalMfAlarmTrap=ds1ExcessiveLocalMfAlarmTrap, dsx1DataStreamStatInErrors=dsx1DataStreamStatInErrors, dsx1IntervalStatus=dsx1IntervalStatus, dsx1TcSignal=dsx1TcSignal, dsx1DataStreamStatInDiscards=dsx1DataStreamStatInDiscards, dsx1CurrentLOS=dsx1CurrentLOS, ds1RemoteLoopTrap=ds1RemoteLoopTrap, dsx1CsuLoop=dsx1CsuLoop, dsx1DataStreamStatInFrames=dsx1DataStreamStatInFrames, dsx1CurrentCRCErrors=dsx1CurrentCRCErrors, dsx1OosSignal=dsx1OosSignal, ds1Crc4ErrorTrap=ds1Crc4ErrorTrap, dsx1DataStreamStatIndex=dsx1DataStreamStatIndex, ds1ExcessiveRemoteMfAlarmTrap=ds1ExcessiveRemoteMfAlarmTrap, dsx1DataStreamStatOutBytes=dsx1DataStreamStatOutBytes, ds1LocalMultiframeAlarmTrap=ds1LocalMultiframeAlarmTrap, dsx1AisEnable=dsx1AisEnable, dsx1DataStreamStatTable=dsx1DataStreamStatTable, dsx1CurrentStatus=dsx1CurrentStatus, dsx1XTotalEntry=dsx1XTotalEntry, dsx1DataStreamStatIfIndex=dsx1DataStreamStatIfIndex, dsx1TsEchoCancel=dsx1TsEchoCancel, dsx1RxSensitivity=dsx1RxSensitivity, dsx1XIntervalTable=dsx1XIntervalTable, ds1LocalSyncLossTrap=ds1LocalSyncLossTrap, dsx1XIntervalEntry=dsx1XIntervalEntry, dsx1PortMultiplier=dsx1PortMultiplier)
