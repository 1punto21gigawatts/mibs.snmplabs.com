#
# PySNMP MIB module WWP-LEOS-FLOW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-FLOW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, Counter32, IpAddress, Counter64, Bits, Unsigned32, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "Counter32", "IpAddress", "Counter64", "Bits", "Unsigned32", "ModuleIdentity", "iso")
TruthValue, RowStatus, MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "MacAddress", "TextualConvention", "DisplayString")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosFlowMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6))
wwpLeosFlowMIB.setRevisions(('2012-03-29 00:00', '2011-02-02 00:00', '2008-06-16 17:00', '2001-04-03 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosFlowMIB.setRevisionsDescriptions(('Added new objects to support Ipv6 rate limits wwpLeosFlowCpuRateLimitIpV6Mgmt, wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed, wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped, wwpLeosFlowCpuRateLimitInet6, wwpLeosFlowCpuRateLimitStatsInet6Passed, wwpLeosFlowCpuRateLimitStatsInet6Dropped .', 'Added RAPS Frame Type into CpuRateLimit related MIB objects', 'Added the Port Service Level table and the ability to set secondary queue sizes for service levels.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosFlowMIB.setLastUpdated('201203290000Z')
if mibBuilder.loadTexts: wwpLeosFlowMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosFlowMIB.setContactInfo('Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosFlowMIB.setDescription('MIB module for the WWP FLOW specific information. This MIB module is common between 4.x and 6.x platforms.')
class PriorityMapping(TextualConvention, OctetString):
    description = 'Represents the priority mapping. Octets in this object represents the remarked priority values for priority 0-7 respectively.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

wwpLeosFlowMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1))
wwpLeosFlow = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1))
wwpLeosFlowNotifAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2))
wwpLeosFlowNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2))
wwpLeosFlowNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0))
wwpLeosFlowMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 3))
wwpLeosFlowMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 3, 1))
wwpLeosFlowMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 3, 2))
wwpLeosFlowAgeTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowAgeTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowAgeTime.setDescription('Specifies the age time after which mac entries will be flushed out.')
wwpLeosFlowAgeTimeState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowAgeTimeState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowAgeTimeState.setDescription('Specifies if age time is enabled or disabled.')
wwpLeosFlowServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelTable.setDescription('A table of flow service level entries. Following criteria must be met while creating entry in the table. - All indexes must be specified - wwpLeosFlowServiceLevelCirBW and wwpLeosFlowServiceLevelPirBW must be set. - wwpLeosFlowServiceLevelStatus must be set to create and go.')
wwpLeosFlowServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelDirection"))
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelEntry.setDescription('The flow service level entry in the Table.')
wwpLeosFlowServiceLevelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelDirection.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelDirection.setDescription('Service level Id direction used as index in the service level entry.')
wwpLeosFlowServiceLevelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPort.setDescription('Port id used as index in the service level entry. If it is intended to not specify the port id in the index, this value should be set to 0.')
wwpLeosFlowServiceLevelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelId.setDescription('Service level Id used as index in the service level entry.')
wwpLeosFlowServiceLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelName.setDescription('The flow service level name associated with this service level.')
wwpLeosFlowServiceLevelPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPriority.setDescription('The internal traffic-queue priority. This may also be used as a weighting factor.')
wwpLeosFlowServiceLevelQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("size0KB", 0), ("small", 1), ("medium", 2), ("large", 3), ("jumbo", 4), ("x5", 5), ("x6", 6), ("x7", 7), ("x8", 8), ("size16KB", 9), ("size32KB", 10), ("size64KB", 11), ("size128KB", 12), ("size256KB", 13), ("size512KB", 14), ("size1MB", 15), ("size2MB", 16), ("size4MB", 17)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSize.setDescription('The size of the traffic queue provisioned for this service level entry. This may also be referred to as Latency Tolerance.')
wwpLeosFlowServiceLevelDropEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelDropEligibility.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelDropEligibility.setDescription('This item is used to indicate whether or not frames should be dropped or queued when frame buffer resources become scarce.')
wwpLeosFlowServiceLevelShareEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelShareEligibility.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelShareEligibility.setDescription('This item is used to indicate whether or not a service level may be shared among entries in the flow service-mapping table.')
wwpLeosFlowServiceLevelCirBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelCirBW.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelCirBW.setDescription('The committed information rate (bandwidth) in Kbps associated with this service level entry.')
wwpLeosFlowServiceLevelPirBW = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPirBW.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPirBW.setDescription('The peak information rate (maximum bandwidth) in Kbps associated with this service level entry.')
wwpLeosFlowServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. In particular, a newly created row cannot be made active until one of the following instances have been set: - wwpLeosFlowServiceLevelCirBW - wwpLeosFlowServiceLevelPirBW.")
wwpLeosFlowServiceRedCurveId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveId.setDescription('This object is used to specifies the red curve index to be used for the given service level. If this OID is not specified, the system will use the default value of this object which is dependent on the queue size wwpLeosFlowServiceLevelQueueSize')
wwpLeosFlowServiceLevelQueueSizeYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSizeYellow.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSizeYellow.setDescription('The size of the yellow traffic queue provisioned for this service level entry. Also known as the discard preferred queue size. ')
wwpLeosFlowServiceLevelQueueSizeRed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSizeRed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelQueueSizeRed.setDescription('The size of the red traffic queue provisioned for this service level entry. Also known as the discard wanted queue size')
wwpLeosFlowServiceLevelFlowGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelFlowGroup.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelFlowGroup.setDescription('Service level Id direction used as index in the service level entry.')
wwpLeosFlowServiceMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingTable.setDescription(" A service mapping entry in the service-mapping table. To create entry in this table following criteria must be met and SNMP multiple set operation must be used to create entries. - wwpLeosFlowServiceMapDstSlidId must be set to valid SLID and this slid must exist on the device. Use wwpLeosFlowServiceLevelTable to create slid. - All indexes must be specified with exception to following objects. - wwpLeosFlowServiceMappingVid must be set to 0 if don't care else set it to some valid value. VID must exist on the device. - wwpLeosFlowServiceMappingSrcPort must be set to 0 if don't care else set it to some valid value. - wwpLeosFlowServiceMappingSrcTag must be set to 0 if don't care else set it to some valid value. - wwpLeosFlowServiceMappingDstPort must be set to 0 if don't care else set it to some valid value. - wwpLeosFlowServiceMappingDstTag must be set to 0 if don't care else set it to some valid value. - wwpLeosFlowServiceMappingProtocolType must be set to 1 if don't care else set it to some valid value. - wwpLeosFlowServiceMappingProtocolPortNum must be set to 0 if don't care else set it to some valid value. - wwpLeosFlowServiceMapSrcPri must be set to 255 if don't care else set it to some valid value.")
wwpLeosFlowServiceMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPri"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolPortNum"))
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingEntry.setDescription('A service mapping entry in the wwpLeosFlowServiceMappingTable.')
wwpLeosFlowServiceMapVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapVid.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapVid.setDescription('The VLAN id associated with this service mapping entry. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcPort.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcPort.setDescription('The source port id for the instance. This represents the ingress location of a flow. This port id should refer to the dot1dBasePort in the Dot1dBasePortEntry. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapSrcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcTag.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcTag.setDescription('The source VLAN tag associated with this service mapping entry. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstPort.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstPort.setDescription('The destination port id for the instance. This represents the egress location for a flow. This port id should refer to the dot1dBasePort in the Dot1dBasePortEntry. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapDstTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstTag.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstTag.setDescription('The destination VLAN tag associated with this service mapping entry. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapSrcPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcPri.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcPri.setDescription('The incoming packet vlan tag priority on the wwpLeosFlowServiceMapSrcPort. The 802.1p packet priority valid values are only from 0 to 7. If this object is set to 255 (or signed 8-bit integer -1), then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapProtocolType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapProtocolType.setDescription('The Layer 4 protocol type used as index in the table. This will correspond to the TCP or UDP protocol. If this object is set to 1, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapProtocolPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapProtocolPortNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapProtocolPortNum.setDescription('The Layer 4 protocol port number used as index in the table. This will correspond to a TCP or UDP port number. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapDstSlidId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstSlidId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapDstSlidId.setDescription('The service level id to apply to the flow at egress. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapSrcSlidId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcSlidId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapSrcSlidId.setDescription('The service level id to apply to the flow at ingress. If this object is set to 0, then this object should be ignored while creating the service-mapping entry.')
wwpLeosFlowServiceMapPriRemarkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapPriRemarkStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapPriRemarkStatus.setDescription("Setting this object to 'true' will enable remarking of the VLAN tag priority for frames that match the classification defined by this service-mapping entry.")
wwpLeosFlowServiceMapRemarkPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapRemarkPri.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapRemarkPri.setDescription('The remark priority value. For frames that match the classification defined by this service-mapping entry, the VLAN tag priority will be remarked with this value.')
wwpLeosFlowServiceMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 4, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceMapStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceMapStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'.")
wwpLeosFlowServiceACTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosFlowServiceACTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACTable.setDescription('A Table of FLOW Service Access Control Entries.')
wwpLeosFlowServiceACEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceACPortId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceACVid"))
if mibBuilder.loadTexts: wwpLeosFlowServiceACEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACEntry.setDescription('A service Access entry in the wwpLeosFlowServiceACTable.')
wwpLeosFlowServiceACPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACPortId.setDescription('Port id for the instance. This port id should refer to the dot1dBasePort in the Dot1dBasePortEntry. Used as index in service access table.')
wwpLeosFlowServiceACVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACVid.setDescription('The VLAN id associated with this access control entry. Used as index in service access table. If the platform supports only port-based service access control, this value should be set to 0.')
wwpLeosFlowServiceACMaxDynamicMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceACMaxDynamicMacCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACMaxDynamicMacCount.setDescription('The maximum number of dynamic MAC Addresses that will be learned and authorized by this access control entry. This value should default to 24.')
wwpLeosFlowServiceACDynamicNonFilteredMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACDynamicNonFilteredMacCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACDynamicNonFilteredMacCount.setDescription('The current number of non-filtered or authorized dynamic MAC addresses recorded in this access control entry.')
wwpLeosFlowServiceACDynamicFilteredMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceACDynamicFilteredMacCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACDynamicFilteredMacCount.setDescription('The current number of filtered or non-authorized dynamic MAC addresses recorded in this access control entry.')
wwpLeosFlowServiceACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceACStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'.")
wwpLeosFlowServiceACForwardLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 5, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowServiceACForwardLearning.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceACForwardLearning.setDescription('To specify whether or not unlearned frames are forwarded or dropped.')
wwpLeosFlowStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosFlowStaticMacTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowStaticMacTable.setDescription('The (conceptual) table to add the static mac addresses.')
wwpLeosFlowStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMMacAddr"))
if mibBuilder.loadTexts: wwpLeosFlowStaticMacEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowStaticMacEntry.setDescription('An entry (conceptual row) in the wwpLeosFlowStaticMacTable.')
wwpLeosFlowSMVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMVid.setDescription('The service network id associated with this entry. Used as index in static MAC table.')
wwpLeosFlowSMMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMMacAddr.setDescription('A unicast MAC address to be statically configured. Used as index in static MAC table.')
wwpLeosFlowSMPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMPortId.setDescription('Port id for the static MAC instance. This port id should refer to the dot1dBasePort in the Dot1dBasePortEntry.')
wwpLeosFlowSMTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMTag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMTag.setDescription('The VLAN tag for this static MAC instance.')
wwpLeosFlowSMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. In particular, a newly created row cannot be made active until the corresponding instances of wwpLeosFlowSMPortId and wwpLeosFlowSMTag have been set. The following objects may not be modified while the value of this object is active(1): - wwpLeosFlowSMPortId - wwpLeosFlowSMTag ")
wwpLeosFlowLearnTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosFlowLearnTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnTable.setDescription('A Table of flow learn entries.')
wwpLeosFlowLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnAddr"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnSrcPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnSrcTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnSrcPri"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowLearnAddrType"))
if mibBuilder.loadTexts: wwpLeosFlowLearnEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnEntry.setDescription('A flow learn entry in the wwpLeosFlowLearnTable.')
wwpLeosFlowLearnVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnVid.setDescription('The VLAN id associated with this flow-learn entry.')
wwpLeosFlowLearnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnAddr.setDescription('The address associated with this flow learn entry. Address can be layer 2 mac address or layer 3 ip address. If address is layer 3 ip address then first two bytes will be 0.')
wwpLeosFlowLearnSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcPort.setDescription('Source port Id for the instance. This port Id should refer to the dot1dBasePort in the Dot1dBasePortEntry.')
wwpLeosFlowLearnSrcTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcTag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcTag.setDescription('The source VLAN tag associated with this flow-learn entry.')
wwpLeosFlowLearnSrcPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnSrcPri.setDescription('The source Layer 2 priority associated with this flow-learn entry.')
wwpLeosFlowLearnAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("layer2", 1), ("layer3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnAddrType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnAddrType.setDescription('The address type associated with this flow-learn entry. Address can be layer 2 type or layer 3 type.')
wwpLeosFlowLearnDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnDstPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnDstPort.setDescription('Destination port id associated with this flow-learn entry. This port id should refer to the dot1dBasePort in the Dot1dBasePortEntry.')
wwpLeosFlowLearnDstTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnDstTag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnDstTag.setDescription('The destination VLAN tag associated with this flow-learn entry.')
wwpLeosFlowLearnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnType.setDescription('The flow-learn entry type. This indicates whether or not the device was learned dynamically or entered as a static MAC.')
wwpLeosFlowLearnIsFiltered = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 7, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowLearnIsFiltered.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowLearnIsFiltered.setDescription("This value indicates whether or not the flow-learn entry is filtered. A value of 'true' indicates the flow-learn entry is filtered.")
wwpLeosFlowServiceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8), )
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTable.setDescription('A Table of flow service statistics entries.')
wwpLeosFlowServiceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapVid"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstPort"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapDstTag"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapSrcPri"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceMapProtocolPortNum"))
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsEntry.setDescription('A flow service statistics entry in the wwpLeosFlowServiceStatsTable.')
wwpLeosFlowServiceStatsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsRxHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsRxHi.setDescription('The number of bytes received for this flow service entry. This counter represents the upper 32 bits of the counter value.')
wwpLeosFlowServiceStatsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsRxLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsRxLo.setDescription('The number of bytes received for this flow service entry. This counter represents the lower 32 bits of the counter value.')
wwpLeosFlowServiceStatsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTxHi.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTxHi.setDescription('The number of bytes transmitted for this flow service entry. This counter represents the upper 32 bits of the counter value.')
wwpLeosFlowServiceStatsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTxLo.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsTxLo.setDescription('The number of bytes transmitted for this flow service entry. This counter represents the lower 32 bits of the counter value.')
wwpLeosFlowServiceStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosFlowServiceStatsType.setDescription('Specifies the type of statistics for given entry.')
wwpLeosFlowMacFindTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9), )
if mibBuilder.loadTexts: wwpLeosFlowMacFindTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacFindTable.setDescription('A flow MAC-find table. MAC address must be specified to walk through the MIB.')
wwpLeosFlowMacFindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacFindVlanId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacFindMacAddr"))
if mibBuilder.loadTexts: wwpLeosFlowMacFindEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacFindEntry.setDescription('A flow service MAC statistics table.')
wwpLeosFlowMacFindMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacFindMacAddr.setDescription('This variable defines the mac address used as index in the MAC-find table.')
wwpLeosFlowMacFindVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacFindVlanId.setDescription('The VLAN ID on which this MAC address is learned.')
wwpLeosFlowMacFindPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacFindPort.setDescription('This specifies the port id on which this MAC address is learned.')
wwpLeosFlowMacFindVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowMacFindVlanTag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacFindVlanTag.setDescription('This specifies the VLAN tag on which this MAC address is learned.')
wwpLeosFlowPriRemapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10), )
if mibBuilder.loadTexts: wwpLeosFlowPriRemapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPriRemapTable.setDescription('The (conceptual) table to add the static mac addresses.')
wwpLeosFlowPriRemapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowUserPri"))
if mibBuilder.loadTexts: wwpLeosFlowPriRemapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPriRemapEntry.setDescription('An entry (conceptual row) in the wwpLeosFlowStaticMacTable.')
wwpLeosFlowUserPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowUserPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowUserPri.setDescription('Specifies the user priority. Also used as index in the table.')
wwpLeosFlowRemappedPri = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowRemappedPri.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowRemappedPri.setDescription("Specifies the remapped priority for given 'wwpLeosFlowUserPri'.")
wwpLeosFlowSMappingTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13), )
if mibBuilder.loadTexts: wwpLeosFlowSMappingTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingTable.setDescription("A service mapping entry in the service-mapping table. To create entry in this table following criteria must be met. - The indexes to the service mapping entry consist of type-value pairs. - There are four(4) sections to the entry. -- NETWORK (type / value) -- SOURCE (type / value) -- DESTINATION (type / value) -- CLASS OF SERVICE (type / value) - All indexes must be specified with the appropriate enumerated - type. If the TYPE is set to 'none', the corresponding VALUE - MUST be set to zero(0). - - The service-mapping entry is very generic. As such, acceptable - combinations of types and values will be scrutinized by the - running platform.")
wwpLeosFlowSMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosValue"))
if mibBuilder.loadTexts: wwpLeosFlowSMappingEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingEntry.setDescription('A service mapping entry in the wwpLeosFlowSMappingTable.')
wwpLeosFlowSMappingNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("vlan", 2), ("vsi", 3), ("vsiMpls", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingNetType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingNetType.setDescription("This object specifies the NETWORK object TYPE for the entry. - - If set to 'none', the corresponding value in - wwpLeosFlowSMappingNetValue MUST be zero(0). - - If set to vlan, a valid vlan-id must be specified. - If set to vsi, a valid ethernet virtual-switch-instance id must be specified. - If set to vsi_mpls, a valid mpls virtual-switch-instance id must be specified - - This used as index in the table.")
wwpLeosFlowSMappingNetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingNetValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingNetValue.setDescription('This object specifies the NETWORK object ID for the entry. - - This item must be set according to the value set - in wwpLeosFlowSMappingNetType. If wwpLeosFlowSMappingNetType - equals: - none(1): MUST be set to zero(0). - vlan(2): MUST be set to valid existing vlan id. - vsi(3): MUST be set to valid existing ethernet virtual switch id. - vsiMpls(4): MUST be set to valid existing mpls virtual switch id. - - This used as index in the table.')
wwpLeosFlowSMappingSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("port", 2), ("mplsVc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcType.setDescription("This object specifies the SOURCE object TYPE for the entry. - - If set to 'none', the corresponding value in - wwpLeosFlowSMappingSrcValue MUST be zero(0). - - If set to port, a valid port group id must be specified. - If set to mplsVc, a valid mpls-virtual-circuit id must be specified. - - This used as index in the table.")
wwpLeosFlowSMappingSrcValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcValue.setDescription('This object specifies the SOURCE object ID for the entry. - - This item must be set according to the value set - in wwpLeosFlowSMappingSrcType. If wwpLeosFlowSMappingSrcType - equals: - none(1): MUST be set to zero(0). - port(2): MUST be set to valid existing port group id. - mplsVc(3): MUST be set to valid existing mpls-virtual-circuit id. - - This used as index in the table.')
wwpLeosFlowSMappingDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("port", 2), ("mplsVc", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstType.setDescription("This object specifies the DESTINATION object TYPE for the entry. - - If set to 'none', the corresponding value in - wwpLeosFlowSMappingDstValue MUST be zero(0). - - If set to port, a valid port group id must be specified. - If set to mplsVc, a valid mpls-virtual-circuit id must be specified. - - This used as index in the table.")
wwpLeosFlowSMappingDstValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstValue.setDescription('This object specifies the DESTINATION object ID for the entry. - - This item must be set according to the value set - in wwpLeosFlowSMappingDstType. If wwpLeosFlowSMappingDstType - equals: - none(1): MUST be set to zero(0). - port(2): MUST be set to valid existing port group id. - mplsVc(3): MUST be set to valid existing mpls-virtual-circuit id. - - This used as index in the table.')
wwpLeosFlowSMappingCosType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("none", 1), ("phb", 2), ("dscp", 3), ("ipPrec", 4), ("dot1dPri", 5), ("mplsExp", 6), ("tcpSrcPort", 7), ("tcpDstPort", 8), ("udpSrcPort", 9), ("udpDstPort", 10), ("pcp", 11), ("cvlan", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingCosType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingCosType.setDescription("This object specifies the CLASS OF SERVICE object TYPE for the entry. - - If set to 'none', the corresponding value in - wwpLeosFlowSMappingCosValue MUST be zero(0). - - If set to tcpSrcPort, tcpDstPort, udpSrcPort, or udpDstPort, - a valid, NON-ZERO tcp or udp port must be specified. - - If set to phb, a valid per-hop-behavior enumeration must be specified. - If set to dscp, a valid differentiated services code point must be specified. - If set to ipPrec, a valid ip-precedence must be specified. - If set to dot1dPri, a valid 802.1d/p priority must be specified. - If set to cvlan, a support Customer VLAN must be specified - - This used as index in the table.")
wwpLeosFlowSMappingCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingCosValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingCosValue.setDescription('This object specifies the CLASS OF SERVICE object ID for the entry. - - This item must be set according to the value set - in wwpLeosFlowSMappingCosType. If wwpLeosFlowSMappingCosType - equals: - none(1): MUST be set to zero(0). - - phb(2): (1..13) - cs0(1),cs1(2),cs2(3),cs3(4),cs4(5),cs5(6),cs6(7),cs7(8), - af1(9),af2(10),af3(11),af4(12),ef(13) - - dscp(3): (0..63) - ipPrec(4): (0..7) - dot1dPri(5): (0..7) - mplsExp(6): (0..7) - - tcpSrcPort(7): (1..65535). - tcpDstPort(8): (1..65535). - udpSrcPort(9): (1..65535). - udpDstPort(10): (1..65535). - - cvlan(12): (1..4094) - - Depending on the platform, the COS type/value may be recognized for certain - frame tag-structures. For example, some platforms can recognize ipPrec, dscp - dot1dPri only for double-tagged frames. Some require untagged or single-tagged - frames to recognize TCP/UDP ports. Operator should consult the software - configuration guide for the specified product. - - This used as index in the table.')
wwpLeosFlowSMappingDstSlid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstSlid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingDstSlid.setDescription('The service level id to apply to the flow at the destination point. Depending on the platform this object may or may not be set to 0 while creating the service-mapping entry. The corresponding destination-port and slid must exist in the service-level table.')
wwpLeosFlowSMappingSrcSlid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcSlid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingSrcSlid.setDescription('The service level ID to apply to the flow at the source-port. Depending on the platform this object may or may not be set to 0 while creating the service-mapping entry. The corresponding source-port and SLID must exist in the service-level table')
wwpLeosFlowSMappingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'.")
wwpLeosFlowSMappingRedCurveOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMappingRedCurveOffset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingRedCurveOffset.setDescription('This object specifies the red curve offset to be used for given service mapping. If this object is not set then the device will choose default red curve offset which is 0.')
wwpLeosFlowSMappingCpuPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 13, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowSMappingCpuPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingCpuPort.setDescription('This object specifies if the CPU port is to be used as the src port.')
wwpLeosFlowSMappingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14), )
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTable.setDescription('A Table of flow service statistics entries.')
wwpLeosFlowSMappingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosValue"))
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsEntry.setDescription('A flow service statistics entry in the wwpLeosFlowSMappingStatsTable.')
wwpLeosFlowSMappingStatsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsRxHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsRxHi.setDescription('The number of bytes received for this flow service entry. This counter represents the upper 32 bits of the counter value')
wwpLeosFlowSMappingStatsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsRxLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsRxLo.setDescription('The number of bytes received for this flow service entry. This counter represents the lower 32 bits of the counter value.')
wwpLeosFlowSMappingStatsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTxHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTxHi.setDescription('The number of bytes transmitted for this flow service entry. This counter represents the upper 32 bits of the counter value.')
wwpLeosFlowSMappingStatsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTxLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsTxLo.setDescription('The number of bytes transmitted for this flow service entry. This counter represents the lower 32 bits of the counter value.')
wwpLeosFlowSMappingStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSMappingStatsType.setDescription('Specifies the type of statistics for given entry.')
wwpLeosFlowCosSync1dToExpTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15), )
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpTable.setDescription('A table of flow cos sync 1d to exp entries. Entries cannot be created or destroyed.')
wwpLeosFlowCosSync1dToExpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSync1dToExpMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpEntry.setDescription('A flow cos sync 1d to 1d entry in the wwpLeosFlowCosSync1dToExpTable.')
wwpLeosFlowCosSync1dToExpMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpMapFrom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpMapFrom.setDescription('This object is used as index in the table and represents cos 1d priority. Any frame coming in with this priority will be synchronized with priority specified by wwpLeosFlowCosSync1dToExpMapTo.')
wwpLeosFlowCosSync1dToExpMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpMapTo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSync1dToExpMapTo.setDescription('This object specifies the remapped exp value of the frame which ingresses with dot1d priority of wwpLeosFlowCosSync1dToExpMapFrom.')
wwpLeosFlowCosSyncExpTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16), )
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dTable.setDescription('A table of flow cos sync 1d to exp entries.')
wwpLeosFlowCosSyncExpTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSyncExpTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dEntry.setDescription('A flow cos sync 1d to 1d entry in the wwpLeosFlowCosSyncExpTo1dTable.')
wwpLeosFlowCosSyncExpTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dMapFrom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dMapFrom.setDescription('This object is used as index in the table and represents cos 1d priority. Any frame coming in with this priority will be synchronized with priority specified by wwpLeosFlowCosSyncExpTo1dMapTo.')
wwpLeosFlowCosSyncExpTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dMapTo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncExpTo1dMapTo.setDescription('This object specifies the remapped exp value of the frame which ingresses with dot1d priority of wwpLeosFlowCosSyncExpTo1dMapFrom.')
wwpLeosFlowCosSyncIpPrecTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17), )
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dTable.setDescription('A table of flow cos sync IP precedence to 1d entries.')
wwpLeosFlowCosSyncIpPrecTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSyncIpPrecTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dEntry.setDescription('A flow cos sync Ip Precedence to 1d entry in the wwpLeosFlowCosSyncIpPrecTo1dTable.')
wwpLeosFlowCosSyncIpPrecTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dMapFrom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dMapFrom.setDescription('This object is used as index in the table and represents ip precedence value. Any frame coming in with wwpLeosFlowCosSyncIpPrecTo1dMapFrom IP precedence will be synchronized with dot1d specified by wwpLeosFlowCosSyncIpPrecTo1dMapTo.')
wwpLeosFlowCosSyncIpPrecTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dMapTo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncIpPrecTo1dMapTo.setDescription('This object specifies the ip precedence value to synchronize with when the frame ingresses with ip precedence value of wwpLeosFlowCosSyncIpPrecTo1dMapFrom.')
wwpLeosFlowCosSyncStdPhbTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18), )
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dTable.setDescription('A table of flow cos sync standard per hop behavior to 1d or Exp entries.')
wwpLeosFlowCosSyncStdPhbTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosSyncStdPhbTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dEntry.setDescription('A flow cos sync standard per hop behavior to 1d entry in the wwpLeosFlowCosSyncStdPhbTo1dTable.')
wwpLeosFlowCosSyncStdPhbTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("cs0", 1), ("cs1", 2), ("cs2", 3), ("cs3", 4), ("cs4", 5), ("cs5", 6), ("cs6", 7), ("cs7", 8), ("af1", 9), ("af2", 10), ("af3", 11), ("af4", 12), ("ef", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dMapFrom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dMapFrom.setDescription('This object is used as index in the table and represents AFx or EF value. Any frame coming in with wwpLeosFlowCosSyncStdPhbTo1dMapFrom AFx or EF value will be synchronized with dot1d priority specified by wwpLeosFlowCosSyncStdPhbTo1dMapTo. If wwpLeosFlowCosSyncStdPhbTo1dValue is not specified then no synchronization will happen.')
wwpLeosFlowCosSyncStdPhbTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 18, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dMapTo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosSyncStdPhbTo1dMapTo.setDescription('This object specifies the AFx or EF dscp value to synchronize with when the frame ingresses with AFx or EF dscp value of wwpLeosFlowCosSyncDscpTo1dMapTo.')
wwpLeosFlowL2SacTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19), )
if mibBuilder.loadTexts: wwpLeosFlowL2SacTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacTable.setDescription('A table of flow l2 sac table.')
wwpLeosFlowL2SacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacPortId"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSacNetValue"))
if mibBuilder.loadTexts: wwpLeosFlowL2SacEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacEntry.setDescription('Represents each entry in the l2 Sac Table')
wwpLeosFlowL2SacPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacPortId.setDescription("This mib object is index in the table. If port is not involved in L2 SAC then set this value to 0. 0 represents don't care.")
wwpLeosFlowL2SacNetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("vlan", 2), ("vsiEth", 3), ("vsiMpls", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacNetType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacNetType.setDescription('This mib object is used as index in the table. This object specifies how wwpLeosFlowSacValue should be interpreted. If this object is set to none then the wwpLeosFlowSacValue must be set to 0.')
wwpLeosFlowSacNetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowSacNetValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowSacNetValue.setDescription('This mib object is used as index in the table. This object is only meaningful if wwpLeosFlowL2SacNetType is not set to none.')
wwpLeosFlowL2SacLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowL2SacLimit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacLimit.setDescription('This mib object specifies the l2 SAC limit. Device will not learn any mac greater than the limit specified by this object.')
wwpLeosFlowL2SacCurMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacCurMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacCurMac.setDescription('This mib object specifies the current mac count for the given l2 SAC entry.')
wwpLeosFlowL2SacCurFilteredMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacCurFilteredMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacCurFilteredMac.setDescription('This mib object specifies the current number of filtered macs for the given l2 SAC entry.')
wwpLeosFlowL2SacOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowL2SacOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacOperState.setDescription('This mib object specifies the current operation state for the given l2 SAC entry.')
wwpLeosFlowL2SacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 19, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowL2SacRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'.")
wwpLeosFlowL2SacTrapState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowL2SacTrapState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacTrapState.setDescription('Specifies if device should send L2 sac traps.')
wwpLeosFlowStrictQueuingState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowStrictQueuingState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowStrictQueuingState.setDescription('Specifies if device should adjust queues to support strict queuing.')
wwpLeosFlowBwCalcMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("transport", 1), ("payload", 2))).clone('transport')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBwCalcMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBwCalcMode.setDescription('Specifies if the device should operate in transport or payload mode. In transport mode the frame length of an Ethernet frame used in measuring CIR will be from IFG through FCS. In payload mode the frame length of an Ethernet frame used in measuring CIR will be from the MAC DA through FCS.')
wwpLeosFlowGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23))
wwpLeosFlowServiceLevelFlowGroupState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelFlowGroupState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelFlowGroupState.setDescription('This object specifies the current state of service level flow groups.')
wwpLeosFlowServiceMappingCosRedMappingState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingCosRedMappingState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceMappingCosRedMappingState.setDescription('This object specifies the current state of service mapping dot1d to Red offset mapping table(wwpLeosFlowCos1dToRedCurveOffsetTable). If this object is set to disable then wwpLeosFlowCos1dToRedCurveOffsetTable will not be used for dot1d to red offset mapping else it will be used.')
wwpLeosFlowServiceAllRedCurveUnset = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 23, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceAllRedCurveUnset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceAllRedCurveUnset.setDescription('Setting this object to true will reset all the red curves in wwpLeosFlowServiceRedCurveTable table to factory default settings.')
wwpLeosFlowServiceRedCurveTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24), )
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveTable.setDescription('A table to configure flow service red curve table.')
wwpLeosFlowServiceRedCurveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceRedCurveIndex"))
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveEntry.setDescription('Represents each entry in the flow service RED curve table.')
wwpLeosFlowServiceRedCurveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveIndex.setDescription('This object is used as index in the red curve table.')
wwpLeosFlowServiceRedCurveName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveName.setDescription('This object specifies the name of the red curve.')
wwpLeosFlowServiceRedCurveState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveState.setDescription('This object specifies the current state of the red curve. This object can be set to enable or disable.')
wwpLeosFlowServiceRedCurveMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveMinThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveMinThreshold.setDescription('This represents the minimum threshold in KBytes. When the queue length associated with this service reaches this number, RED begins to drop packets matching this Service-Mappings traffic classification. The valid range is between 0 and 65535 Kbytes. The actual number varies depending on the platform.')
wwpLeosFlowServiceRedCurveMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('kbps').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveMaxThreshold.setDescription('This represents the maximum threshold in KBytes. When the queue length associated with this service reaches this number, RED drops packets matching this Service-Mappings traffic classification at the rate specified in wwpLeosFlowServiceRedCurveDropProbability.')
wwpLeosFlowServiceRedCurveDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveDropProbability.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveDropProbability.setDescription('This object specifies the drop probability of a packet (matching this Service-Mapping classification) of being dropped when the queue length associated with this Service-Level reaches the value configured in wwpLeosFlowServiceMaxThreshold. The value represents a percentage (0-100).')
wwpLeosFlowServiceRedCurveUnset = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 24, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveUnset.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceRedCurveUnset.setDescription('Setting this object to true will reset the red curve settings to factory defaults.')
wwpLeosFlowCos1dToRedCurveOffsetTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25), )
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetTable.setDescription('A table of flow cos 1d to red curve offset entries.')
wwpLeosFlowCos1dToRedCurveOffsetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCos1dToRedCurveOffset1dValue"))
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetEntry.setDescription('A table entry of flow cos 1d to red curve offset.')
wwpLeosFlowCos1dToRedCurveOffset1dValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffset1dValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffset1dValue.setDescription('This object is used as index in the table and represents cos 1d priority. Any frame coming in with this priority will be mapped to red cos offset value specified by wwpLeosFlowCos1dToRedCurveOffsetValue.')
wwpLeosFlowCos1dToRedCurveOffsetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCos1dToRedCurveOffsetValue.setDescription('This object specifies the red curve offset value to be used when frame which ingresses with dot1d priority specified by wwpLeosFlowCos1dToRedCurveOffset1dValue.')
wwpLeosFlowCosMapPCPTo1dTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26), )
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dTable.setDescription('A table of flow cos mapping of PCP to .1d Pri.')
wwpLeosFlowCosMapPCPTo1dEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosMapPCPTo1dMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dEntry.setDescription('A flow cos sync standard per hop behavior to 1d entry in the wwpLeosFlowCosSyncStdPhbTo1dTable.')
wwpLeosFlowCosMapPCPTo1dMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dMapFrom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dMapFrom.setDescription('This object is used as index in the table and represents PCP priority. Any frame coming in with wwpLeosFlowCosMapPCPTo1dMapFrom priority will be mapped to .1d priority specified by wwpLeosFlowCosMapPCPTo1dMapTo. ')
wwpLeosFlowCosMapPCPTo1dMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 26, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dMapTo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMapPCPTo1dMapTo.setDescription('This object specifies the .1d priority to map with when the frame ingresses with PCP priority specified by wwpLeosFlowCosMapPCPTo1dMapFrom.')
wwpLeosFlowCosMap1dToPCPTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27), )
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPTable.setDescription('A table of flow cos mapping of PCP to .1d Pri.')
wwpLeosFlowCosMap1dToPCPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCosMap1dToPCPMapFrom"))
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPEntry.setDescription('A flow cos sync standard per hop behavior to 1d entry in the wwpLeosFlowCosSyncStdPhbTo1dTable.')
wwpLeosFlowCosMap1dToPCPMapFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPMapFrom.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPMapFrom.setDescription('This object is used as index in the table and represents PCP priority. Any frame coming in with wwpLeosFlowCosMap1dToPCPMapFrom priority will be mapped to .1d priority specified by wwpLeosFlowCosMap1dToPCPMapTo. ')
wwpLeosFlowCosMap1dToPCPMapTo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 27, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPMapTo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCosMap1dToPCPMapTo.setDescription('This object specifies the .1d priority to map with when the frame ingresses with PCP priority specified by wwpLeosFlowCosMap1dToPCPMapFrom.')
wwpLeosFlowMacMotionEventsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionEventsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionEventsEnable.setDescription('Specifies whether MAC Motion traps and syslog messages will be generated when a MAC shifts from one port/vlan to another port/vlan.')
wwpLeosFlowMacMotionEventsInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionEventsInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionEventsInterval.setDescription('The minimum time in seconds that must elapse between each MAC Motion trap and syslog message that is generated.')
wwpLeosFlowCpuRateLimitsEnable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitsEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitsEnable.setDescription('Enable is used to activate the port-associated rate-limits.')
wwpLeosFlowCpuRateLimitTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31), )
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTable.setDescription('A table of flow rate limit entries. ')
wwpLeosFlowCpuRateLimitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCpuRateLimitPort"))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEntry.setDescription('The flow service level entry in the Table.')
wwpLeosFlowCpuRateLimitPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPort.setDescription('Port id used as index in the rate limit entry.')
wwpLeosFlowCpuRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEnable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEnable.setDescription('Enable is used to activate the port-associated rate-limits.')
wwpLeosFlowCpuRateLimitBootp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitBootp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitBootp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitCfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCfm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCfm.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitCft = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCft.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCft.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitDot1x = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitDot1x.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitDot1x.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitOam = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitOam.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitOam.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitEprArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEprArp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitEprArp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitIgmp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIgmp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIgmp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitInet = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitInet.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitInet.setDescription('Port packet-per-second rate limit for packet type .')
wwpLeosFlowCpuRateLimitLacp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLacp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLacp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitLldp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLldp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLldp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitMpls = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMpls.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMpls.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitMstp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMstp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMstp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitPeArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPeArp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPeArp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitPvst = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPvst.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitPvst.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitRstp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRstp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRstp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLpbk.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitLpbk.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitRmtLpbk = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRmtLpbk.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRmtLpbk.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitCxeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCxeRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCxeRx.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitCxeTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCxeTx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitCxeTx.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitTwamp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTwamp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTwamp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitDflt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitDflt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitDflt.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitTwampRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTwampRsp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTwampRsp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitMultiCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMultiCast.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitMultiCast.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitBroadCast.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitBroadCast.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitArp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitArp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitArp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIcmp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIcmp.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitTcpSyn = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTcpSyn.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitTcpSyn.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitRaps = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRaps.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitRaps.setDescription('Port packet-per-second rate limit for packet type. Not supported on 4.x')
wwpLeosFlowCpuRateLimitIpMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpMgmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpMgmt.setDescription('Port packet-per-second rate limit for packet type. Not supported on 4.x')
wwpLeosFlowCpuRateLimitIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpControl.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpControl.setDescription('Port packet-per-second rate limit for packet type. Not supported on 4.x')
wwpLeosFlowCpuRateLimitIpV6Mgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpV6Mgmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitIpV6Mgmt.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitInet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 31, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitInet6.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitInet6.setDescription('Port packet-per-second rate limit for packet type.')
wwpLeosFlowCpuRateLimitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32), )
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTable.setDescription('A table of flow rate limit statistics entries. ')
wwpLeosFlowCpuRateLimitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCpuRateLimitStatsPort"))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEntry.setDescription('The rate limit statistics entry in the Table.')
wwpLeosFlowCpuRateLimitStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPort.setDescription('Port id used as index in the rate limit entry.')
wwpLeosFlowCpuRateLimitStatsBootpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBootpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBootpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCfmPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCfmPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCfmPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCftPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCftPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCftPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsDot1xPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDot1xPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDot1xPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsOamPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsOamPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsOamPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsEprArpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEprArpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEprArpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsIgmpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIgmpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIgmpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsInetPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInetPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInetPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsLacpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLacpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLacpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsLldpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLldpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLldpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsMplsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMplsPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMplsPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsMstpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMstpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMstpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsPeArpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPeArpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPeArpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsPvstPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPvstPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPvstPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsRstpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRstpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRstpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsLpbkPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLpbkPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLpbkPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCxeRxPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeRxPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeRxPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCxeTxPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeTxPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeTxPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsTwampPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsDfltPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDfltPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDfltPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsBootpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBootpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBootpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCfmDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCfmDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCfmDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCftDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCftDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCftDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsDot1xDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDot1xDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDot1xDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsOamDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsOamDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsOamDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsEprArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEprArpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsEprArpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsIgmpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIgmpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIgmpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsInetDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInetDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInetDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsLacpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLacpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLacpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsLldpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLldpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLldpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsMplsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMplsDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMplsDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsMstpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMstpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMstpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsPeArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPeArpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPeArpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsPvstDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPvstDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsPvstDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsRstpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRstpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRstpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsLpbkDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLpbkDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsLpbkDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCxeRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeRxDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeRxDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsCxeTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeTxDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsCxeTxDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsTwampDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsDfltDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDfltDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsDfltDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsTwampRspPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampRspPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampRspPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsTwampRspDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampRspDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTwampRspDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsMultiCastPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMultiCastPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMultiCastPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsMultiCastDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMultiCastDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsMultiCastDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsBroadCastPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBroadCastPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBroadCastPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsBroadCastDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBroadCastDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsBroadCastDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsArpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsArpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsArpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsArpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsArpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsArpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsIcmpPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIcmpPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIcmpPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsIcmpDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIcmpDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIcmpDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsTcpSynPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTcpSynPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTcpSynPassed.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsTcpSynDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTcpSynDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsTcpSynDropped.setDescription('Port packet type counts.')
wwpLeosFlowCpuRateLimitStatsRapsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRapsPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRapsPassed.setDescription('Port packet type counts.Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsRapsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRapsDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsRapsDropped.setDescription('Port packet type counts.Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsIpMgmtPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpMgmtPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpMgmtPassed.setDescription('Port packet type counts.Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsIpMgmtDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpMgmtDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpMgmtDropped.setDescription('Port packet type counts.Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsIpControlPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 60), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpControlPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpControlPassed.setDescription('Port packet type counts. Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsIpControlDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 61), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpControlDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpControlDropped.setDescription('Port packet type counts. Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 62), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed.setDescription('Port packet type counts. Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped.setDescription('Port packet type counts. Not supported on 4.x')
wwpLeosFlowCpuRateLimitStatsInet6Passed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInet6Passed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInet6Passed.setDescription('Port packet type counts for Ipv6. Not supported on 6.x')
wwpLeosFlowCpuRateLimitStatsInet6Dropped = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 32, 1, 65), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInet6Dropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsInet6Dropped.setDescription('Port packet type counts for Ipv6. Not supported on 6.x')
wwpLeosFlowCpuRateLimitStatsClearTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33), )
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearTable.setDescription('A table of flow rate limit entries. ')
wwpLeosFlowCpuRateLimitStatsClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowCpuRateLimitStatsClearPort"))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearEntry.setDescription('The flow service level entry in the Table.')
wwpLeosFlowCpuRateLimitStatsClearPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClearPort.setDescription('Port id used as index in the rate limit statistics clear entry.')
wwpLeosFlowCpuRateLimitStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 33, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowCpuRateLimitStatsClear.setDescription('Flag indicating whether to clear port packet statistics.')
wwpLeosFlowServiceLevelPortOverProvisionedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 1)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelPort"))
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPortOverProvisionedTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPortOverProvisionedTrap.setDescription('A wwpLeosFlowServiceLevelPortOverProvisionedTrap notification is sent when the provisioned bandwidth exceeds the total bandwidth available for a port. This situation may also occur when changes in a link aggregation group (such as deleting a port from the group) decrease the total bandwidth or at the bootTime when the link aggregation groups are formed.')
wwpLeosFlowServiceLevelPortUnderProvisionedTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 2)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowServiceLevelPort"))
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPortUnderProvisionedTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceLevelPortUnderProvisionedTrap.setDescription('A wwpLeosFlowServiceLevelPortUnderProvisionedTrap notification is sent when the previously over-provisioned situation is resolved for a port.')
wwpLeosFlowL2SacHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 3)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacPortId"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacNetType"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowSacNetValue"))
if mibBuilder.loadTexts: wwpLeosFlowL2SacHighThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacHighThreshold.setDescription('A wwpLeosFlowL2SacHighThreshold notification is sent whenever Macs learned exceeds SAC threshold limit.')
wwpLeosFlowL2SacNormalThreshold = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 4)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacPortId"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowL2SacNetType"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowSacNetValue"))
if mibBuilder.loadTexts: wwpLeosFlowL2SacNormalThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowL2SacNormalThreshold.setDescription('A wwpLeosFlowL2SacNormalThreshold notification is sent whenever Macs learned gets back to normal after exceeding the SAC threshold limit.')
wwpLeosFlowMacMotionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 2, 0, 5)).setObjects(("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrOldPort"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrOldVlan"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrNewPort"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrNewVlan"), ("WWP-LEOS-FLOW-MIB", "wwpLeosFlowMacMotionAttrMacAddr"))
if mibBuilder.loadTexts: wwpLeosFlowMacMotionNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionNotification.setDescription('A wwpLeosFlowMacMotionNotification is sent whenever a learned MAC moves from one port/vlan to a new port/vlan, at a rate defined by wwpLeosFlowMacMotionEventsInterval. The five objects returned by this trap are the MAC address that moved, the original port/vlan the MAC was learned on, and the new port/vlan the MAC has moved to.')
wwpLeosFlowMacMotionAttrOldPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrOldPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrOldPort.setDescription('The port number associated with the MAC that moved.')
wwpLeosFlowMacMotionAttrOldVlan = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrOldVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrOldVlan.setDescription('The vlan number associated with the MAC that moved.')
wwpLeosFlowMacMotionAttrNewPort = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrNewPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrNewPort.setDescription('The port number associated with the MAC that moved.')
wwpLeosFlowMacMotionAttrNewVlan = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrNewVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrNewVlan.setDescription('The vlan number associated with the MAC that moved.')
wwpLeosFlowMacMotionAttrMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 2, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowMacMotionAttrMacAddr.setDescription('The MAC address that moved.')
wwpLeosFlowServiceTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34), )
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTable.setDescription('A table of flow service statistics entries.')
wwpLeosFlowServiceTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingNetValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingSrcValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingDstValue"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosType"), (0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowSMappingCosValue"))
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsEntry.setDescription('A flow service statistics entry in the wwpLeosFlowServiceTotalStatsTable.')
wwpLeosFlowServiceTotalStatsRxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsRxHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsRxHi.setDescription('The number of bytes received for this flow service entry. This counter represents the upper 32 bits of the counter value')
wwpLeosFlowServiceTotalStatsRxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsRxLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsRxLo.setDescription('The number of bytes received for this flow service entry. This counter represents the lower 32 bits of the counter value.')
wwpLeosFlowServiceTotalStatsTxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTxHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTxHi.setDescription('The number of bytes transmitted for this flow service entry. This counter represents the upper 32 bits of the counter value.')
wwpLeosFlowServiceTotalStatsTxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTxLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsTxLo.setDescription('The number of bytes transmitted for this flow service entry. This counter represents the lower 32 bits of the counter value.')
wwpLeosFlowServiceTotalStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 34, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("drop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowServiceTotalStatsType.setDescription('Specifies the type of statistics for given entry.')
wwpLeosFlowPortServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40), )
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelTable.setDescription('A Table of flow Port Service Level entries.')
wwpLeosFlowPortServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1), ).setIndexNames((0, "WWP-LEOS-FLOW-MIB", "wwpLeosFlowPortServiceLevelPort"))
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelEntry.setDescription('A flow service statistics entry in the wwpLeosFlowPortServiceLevelTable.')
wwpLeosFlowPortServiceLevelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelPort.setDescription('Port id used as index in the port service level entry. ')
wwpLeosFlowPortServiceLevelMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelMaxBandwidth.setDescription('Sets the max egress bandwidth on a port. ')
wwpLeosFlowPortServiceLevelQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("size0KB", 0), ("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4), ("size256KB", 5), ("size512KB", 6), ("size1MB", 7), ("size2MB", 8), ("size4MB", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSize.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSize.setDescription('The size of the traffic queue provisioned for this port service level entry. This may also be referred to as Latency Tolerance.')
wwpLeosFlowPortServiceLevelQueueSizeYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSizeYellow.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSizeYellow.setDescription('The size of the yellow traffic queue provisioned for this service level entry. Also known as the discard preferred queue size. ')
wwpLeosFlowPortServiceLevelQueueSizeRed = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("size16KB", 1), ("size32KB", 2), ("size64KB", 3), ("size128KB", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSizeRed.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelQueueSizeRed.setDescription('The size of the red traffic queue provisioned for this service level entry. Also known as the discard wanted queue size')
wwpLeosFlowPortServiceLevelFlowGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelFlowGroup.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelFlowGroup.setDescription('Service level Id direction used as index in the service level entry.')
wwpLeosFlowPortServiceLevelRedCurve = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 40, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelRedCurve.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowPortServiceLevelRedCurve.setDescription('This object is used to specifies the red curve index to be used for the given port service level. If this OID is not specified, the system will use the default value of this object which is the default port red-curve (zero). Valid values for this OID are 0, 5-64')
wwpLeosFlowBurstConfigBacklogLimit = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigBacklogLimit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigBacklogLimit.setDescription('Sets the queue backlog-limit')
wwpLeosFlowBurstConfigMulticastLimit = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 131072))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigMulticastLimit.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigMulticastLimit.setDescription('Sets the multicast backlog-limit')
wwpLeosFlowBurstConfigVlanPriFltrOnThld = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrOnThld.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrOnThld.setDescription('The threshold of buffer use at which Vlan Priority Filtering is activated if enabled')
wwpLeosFlowBurstConfigVlanPriFltrOffThld = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrOffThld.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrOffThld.setDescription('The threshold of buffer use at which Vlan Priority Filtering is deactivated if enabled')
wwpLeosFlowBurstConfigVlanPriFltrPriMatch = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrPriMatch.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrPriMatch.setDescription('when the Vlan Priority filter is activated all priorities less than this are dropped')
wwpLeosFlowBurstConfigVlanPriFltrState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 6, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosFlowBurstConfigVlanPriFltrState.setDescription('Globaly enables or disabled the Flow Vlan Priority Filter')
mibBuilder.exportSymbols("WWP-LEOS-FLOW-MIB", wwpLeosFlowMacFindMacAddr=wwpLeosFlowMacFindMacAddr, wwpLeosFlowCpuRateLimitStatsTable=wwpLeosFlowCpuRateLimitStatsTable, wwpLeosFlowSMappingEntry=wwpLeosFlowSMappingEntry, wwpLeosFlowCpuRateLimitStatsDfltDropped=wwpLeosFlowCpuRateLimitStatsDfltDropped, wwpLeosFlowCosMap1dToPCPEntry=wwpLeosFlowCosMap1dToPCPEntry, wwpLeosFlowCpuRateLimitStatsPvstDropped=wwpLeosFlowCpuRateLimitStatsPvstDropped, wwpLeosFlowCosSyncIpPrecTo1dMapTo=wwpLeosFlowCosSyncIpPrecTo1dMapTo, wwpLeosFlowServiceMapProtocolPortNum=wwpLeosFlowServiceMapProtocolPortNum, wwpLeosFlowLearnAddr=wwpLeosFlowLearnAddr, wwpLeosFlowServiceACEntry=wwpLeosFlowServiceACEntry, wwpLeosFlowPortServiceLevelMaxBandwidth=wwpLeosFlowPortServiceLevelMaxBandwidth, wwpLeosFlowServiceACDynamicFilteredMacCount=wwpLeosFlowServiceACDynamicFilteredMacCount, wwpLeosFlowCpuRateLimitStatsClear=wwpLeosFlowCpuRateLimitStatsClear, wwpLeosFlowSMappingStatsRxLo=wwpLeosFlowSMappingStatsRxLo, wwpLeosFlowSMappingCpuPort=wwpLeosFlowSMappingCpuPort, wwpLeosFlowCpuRateLimitStatsBroadCastPassed=wwpLeosFlowCpuRateLimitStatsBroadCastPassed, wwpLeosFlowNotifAttrs=wwpLeosFlowNotifAttrs, wwpLeosFlowServiceMapSrcPri=wwpLeosFlowServiceMapSrcPri, wwpLeosFlowServiceTotalStatsEntry=wwpLeosFlowServiceTotalStatsEntry, wwpLeosFlowServiceTotalStatsTxLo=wwpLeosFlowServiceTotalStatsTxLo, wwpLeosFlowCosSync1dToExpEntry=wwpLeosFlowCosSync1dToExpEntry, wwpLeosFlowServiceStatus=wwpLeosFlowServiceStatus, wwpLeosFlowCpuRateLimitStatsMplsDropped=wwpLeosFlowCpuRateLimitStatsMplsDropped, wwpLeosFlowCpuRateLimitStatsRapsPassed=wwpLeosFlowCpuRateLimitStatsRapsPassed, wwpLeosFlowCpuRateLimitStatsIcmpPassed=wwpLeosFlowCpuRateLimitStatsIcmpPassed, wwpLeosFlowCpuRateLimitStatsLacpPassed=wwpLeosFlowCpuRateLimitStatsLacpPassed, wwpLeosFlowServiceLevelPirBW=wwpLeosFlowServiceLevelPirBW, wwpLeosFlowCosSyncIpPrecTo1dTable=wwpLeosFlowCosSyncIpPrecTo1dTable, wwpLeosFlowServiceACVid=wwpLeosFlowServiceACVid, wwpLeosFlowCpuRateLimitStatsPeArpDropped=wwpLeosFlowCpuRateLimitStatsPeArpDropped, wwpLeosFlowPortServiceLevelTable=wwpLeosFlowPortServiceLevelTable, wwpLeosFlowServiceMapRemarkPri=wwpLeosFlowServiceMapRemarkPri, wwpLeosFlowSMappingDstValue=wwpLeosFlowSMappingDstValue, wwpLeosFlowCpuRateLimitPeArp=wwpLeosFlowCpuRateLimitPeArp, wwpLeosFlowServiceStatsTable=wwpLeosFlowServiceStatsTable, wwpLeosFlowBurstConfigVlanPriFltrState=wwpLeosFlowBurstConfigVlanPriFltrState, wwpLeosFlowCpuRateLimitBootp=wwpLeosFlowCpuRateLimitBootp, wwpLeosFlowL2SacCurFilteredMac=wwpLeosFlowL2SacCurFilteredMac, wwpLeosFlowMIBCompliances=wwpLeosFlowMIBCompliances, wwpLeosFlowCosMapPCPTo1dTable=wwpLeosFlowCosMapPCPTo1dTable, wwpLeosFlowCpuRateLimitBroadCast=wwpLeosFlowCpuRateLimitBroadCast, wwpLeosFlowMacMotionEventsEnable=wwpLeosFlowMacMotionEventsEnable, wwpLeosFlowCpuRateLimitStatsClearPort=wwpLeosFlowCpuRateLimitStatsClearPort, wwpLeosFlowLearnType=wwpLeosFlowLearnType, wwpLeosFlowCosMapPCPTo1dMapFrom=wwpLeosFlowCosMapPCPTo1dMapFrom, wwpLeosFlowMacMotionAttrNewVlan=wwpLeosFlowMacMotionAttrNewVlan, wwpLeosFlowLearnSrcPri=wwpLeosFlowLearnSrcPri, wwpLeosFlowBurstConfigMulticastLimit=wwpLeosFlowBurstConfigMulticastLimit, wwpLeosFlowLearnVid=wwpLeosFlowLearnVid, wwpLeosFlowServiceLevelCirBW=wwpLeosFlowServiceLevelCirBW, wwpLeosFlowCpuRateLimitStatsDot1xPassed=wwpLeosFlowCpuRateLimitStatsDot1xPassed, wwpLeosFlowLearnDstTag=wwpLeosFlowLearnDstTag, wwpLeosFlowCpuRateLimitStatsRstpDropped=wwpLeosFlowCpuRateLimitStatsRstpDropped, wwpLeosFlowSMappingSrcType=wwpLeosFlowSMappingSrcType, wwpLeosFlowCpuRateLimitEntry=wwpLeosFlowCpuRateLimitEntry, wwpLeosFlowServiceLevelShareEligibility=wwpLeosFlowServiceLevelShareEligibility, wwpLeosFlowCpuRateLimitStatsLldpDropped=wwpLeosFlowCpuRateLimitStatsLldpDropped, wwpLeosFlowL2SacNetType=wwpLeosFlowL2SacNetType, wwpLeosFlowL2SacEntry=wwpLeosFlowL2SacEntry, wwpLeosFlowLearnTable=wwpLeosFlowLearnTable, wwpLeosFlowSacNetValue=wwpLeosFlowSacNetValue, wwpLeosFlowMacMotionAttrOldVlan=wwpLeosFlowMacMotionAttrOldVlan, wwpLeosFlowServiceRedCurveEntry=wwpLeosFlowServiceRedCurveEntry, PYSNMP_MODULE_ID=wwpLeosFlowMIB, wwpLeosFlowCpuRateLimitPvst=wwpLeosFlowCpuRateLimitPvst, wwpLeosFlowServiceLevelPortOverProvisionedTrap=wwpLeosFlowServiceLevelPortOverProvisionedTrap, wwpLeosFlowMacMotionAttrOldPort=wwpLeosFlowMacMotionAttrOldPort, wwpLeosFlowServiceLevelQueueSizeYellow=wwpLeosFlowServiceLevelQueueSizeYellow, wwpLeosFlowMacFindPort=wwpLeosFlowMacFindPort, wwpLeosFlowServiceACPortId=wwpLeosFlowServiceACPortId, wwpLeosFlowBurstConfigVlanPriFltrPriMatch=wwpLeosFlowBurstConfigVlanPriFltrPriMatch, wwpLeosFlowServiceRedCurveTable=wwpLeosFlowServiceRedCurveTable, wwpLeosFlowCos1dToRedCurveOffset1dValue=wwpLeosFlowCos1dToRedCurveOffset1dValue, wwpLeosFlowCpuRateLimitStatsLldpPassed=wwpLeosFlowCpuRateLimitStatsLldpPassed, wwpLeosFlowServiceLevelQueueSize=wwpLeosFlowServiceLevelQueueSize, wwpLeosFlowCpuRateLimitStatsEprArpPassed=wwpLeosFlowCpuRateLimitStatsEprArpPassed, wwpLeosFlowLearnAddrType=wwpLeosFlowLearnAddrType, wwpLeosFlowServiceLevelPort=wwpLeosFlowServiceLevelPort, wwpLeosFlowLearnIsFiltered=wwpLeosFlowLearnIsFiltered, wwpLeosFlowServiceTotalStatsType=wwpLeosFlowServiceTotalStatsType, wwpLeosFlowPortServiceLevelFlowGroup=wwpLeosFlowPortServiceLevelFlowGroup, wwpLeosFlow=wwpLeosFlow, wwpLeosFlowCosMap1dToPCPMapTo=wwpLeosFlowCosMap1dToPCPMapTo, wwpLeosFlowServiceMappingCosRedMappingState=wwpLeosFlowServiceMappingCosRedMappingState, wwpLeosFlowCosSyncIpPrecTo1dMapFrom=wwpLeosFlowCosSyncIpPrecTo1dMapFrom, wwpLeosFlowCpuRateLimitCxeTx=wwpLeosFlowCpuRateLimitCxeTx, wwpLeosFlowCpuRateLimitStatsMplsPassed=wwpLeosFlowCpuRateLimitStatsMplsPassed, wwpLeosFlowSMappingDstType=wwpLeosFlowSMappingDstType, wwpLeosFlowSMappingSrcValue=wwpLeosFlowSMappingSrcValue, wwpLeosFlowCpuRateLimitOam=wwpLeosFlowCpuRateLimitOam, wwpLeosFlowGlobal=wwpLeosFlowGlobal, wwpLeosFlowCpuRateLimitStatsDot1xDropped=wwpLeosFlowCpuRateLimitStatsDot1xDropped, wwpLeosFlowCpuRateLimitInet=wwpLeosFlowCpuRateLimitInet, wwpLeosFlowSMStatus=wwpLeosFlowSMStatus, wwpLeosFlowServiceRedCurveDropProbability=wwpLeosFlowServiceRedCurveDropProbability, wwpLeosFlowLearnSrcPort=wwpLeosFlowLearnSrcPort, wwpLeosFlowPortServiceLevelQueueSize=wwpLeosFlowPortServiceLevelQueueSize, wwpLeosFlowCpuRateLimitStatsTcpSynDropped=wwpLeosFlowCpuRateLimitStatsTcpSynDropped, wwpLeosFlowCpuRateLimitCft=wwpLeosFlowCpuRateLimitCft, wwpLeosFlowServiceTotalStatsTable=wwpLeosFlowServiceTotalStatsTable, wwpLeosFlowLearnSrcTag=wwpLeosFlowLearnSrcTag, wwpLeosFlowCos1dToRedCurveOffsetTable=wwpLeosFlowCos1dToRedCurveOffsetTable, wwpLeosFlowPortServiceLevelQueueSizeYellow=wwpLeosFlowPortServiceLevelQueueSizeYellow, wwpLeosFlowCpuRateLimitStatsIpControlPassed=wwpLeosFlowCpuRateLimitStatsIpControlPassed, wwpLeosFlowL2SacCurMac=wwpLeosFlowL2SacCurMac, wwpLeosFlowCpuRateLimitArp=wwpLeosFlowCpuRateLimitArp, wwpLeosFlowCpuRateLimitStatsTwampDropped=wwpLeosFlowCpuRateLimitStatsTwampDropped, wwpLeosFlowServiceLevelPortUnderProvisionedTrap=wwpLeosFlowServiceLevelPortUnderProvisionedTrap, wwpLeosFlowMIBConformance=wwpLeosFlowMIBConformance, wwpLeosFlowServiceACForwardLearning=wwpLeosFlowServiceACForwardLearning, wwpLeosFlowServiceRedCurveIndex=wwpLeosFlowServiceRedCurveIndex, wwpLeosFlowSMappingStatsRxHi=wwpLeosFlowSMappingStatsRxHi, wwpLeosFlowCpuRateLimitStatsArpDropped=wwpLeosFlowCpuRateLimitStatsArpDropped, wwpLeosFlowPortServiceLevelEntry=wwpLeosFlowPortServiceLevelEntry, PriorityMapping=PriorityMapping, wwpLeosFlowServiceLevelId=wwpLeosFlowServiceLevelId, wwpLeosFlowL2SacHighThreshold=wwpLeosFlowL2SacHighThreshold, wwpLeosFlowServiceMapSrcSlidId=wwpLeosFlowServiceMapSrcSlidId, wwpLeosFlowCpuRateLimitStatsCxeTxPassed=wwpLeosFlowCpuRateLimitStatsCxeTxPassed, wwpLeosFlowServiceACStatus=wwpLeosFlowServiceACStatus, wwpLeosFlowNotifications=wwpLeosFlowNotifications, wwpLeosFlowL2SacRowStatus=wwpLeosFlowL2SacRowStatus, wwpLeosFlowCpuRateLimitStatsIpControlDropped=wwpLeosFlowCpuRateLimitStatsIpControlDropped, wwpLeosFlowBwCalcMode=wwpLeosFlowBwCalcMode, wwpLeosFlowCpuRateLimitStatsEprArpDropped=wwpLeosFlowCpuRateLimitStatsEprArpDropped, wwpLeosFlowCpuRateLimitStatsLpbkDropped=wwpLeosFlowCpuRateLimitStatsLpbkDropped, wwpLeosFlowServiceLevelDropEligibility=wwpLeosFlowServiceLevelDropEligibility, wwpLeosFlowSMappingStatus=wwpLeosFlowSMappingStatus, wwpLeosFlowCpuRateLimitStatsInet6Passed=wwpLeosFlowCpuRateLimitStatsInet6Passed, wwpLeosFlowCpuRateLimitStatsCftDropped=wwpLeosFlowCpuRateLimitStatsCftDropped, wwpLeosFlowStaticMacTable=wwpLeosFlowStaticMacTable, wwpLeosFlowCpuRateLimitCxeRx=wwpLeosFlowCpuRateLimitCxeRx, wwpLeosFlowCpuRateLimitEnable=wwpLeosFlowCpuRateLimitEnable, wwpLeosFlowSMappingSrcSlid=wwpLeosFlowSMappingSrcSlid, wwpLeosFlowSMPortId=wwpLeosFlowSMPortId, wwpLeosFlowCpuRateLimitStatsBootpPassed=wwpLeosFlowCpuRateLimitStatsBootpPassed, wwpLeosFlowCosSyncExpTo1dMapTo=wwpLeosFlowCosSyncExpTo1dMapTo, wwpLeosFlowSMMacAddr=wwpLeosFlowSMMacAddr, wwpLeosFlowCpuRateLimitRmtLpbk=wwpLeosFlowCpuRateLimitRmtLpbk, wwpLeosFlowCpuRateLimitStatsLacpDropped=wwpLeosFlowCpuRateLimitStatsLacpDropped, wwpLeosFlowCosSyncExpTo1dEntry=wwpLeosFlowCosSyncExpTo1dEntry, wwpLeosFlowServiceStatsEntry=wwpLeosFlowServiceStatsEntry, wwpLeosFlowPortServiceLevelPort=wwpLeosFlowPortServiceLevelPort, wwpLeosFlowCpuRateLimitRaps=wwpLeosFlowCpuRateLimitRaps, wwpLeosFlowMIBObjects=wwpLeosFlowMIBObjects, wwpLeosFlowCosSyncStdPhbTo1dTable=wwpLeosFlowCosSyncStdPhbTo1dTable, wwpLeosFlowServiceTotalStatsRxLo=wwpLeosFlowServiceTotalStatsRxLo, wwpLeosFlowNotificationPrefix=wwpLeosFlowNotificationPrefix, wwpLeosFlowMacFindTable=wwpLeosFlowMacFindTable, wwpLeosFlowL2SacNormalThreshold=wwpLeosFlowL2SacNormalThreshold, wwpLeosFlowSMappingNetType=wwpLeosFlowSMappingNetType, wwpLeosFlowL2SacTable=wwpLeosFlowL2SacTable, wwpLeosFlowCpuRateLimitStatsCxeTxDropped=wwpLeosFlowCpuRateLimitStatsCxeTxDropped, wwpLeosFlowServiceTotalStatsTxHi=wwpLeosFlowServiceTotalStatsTxHi, wwpLeosFlowServiceRedCurveMinThreshold=wwpLeosFlowServiceRedCurveMinThreshold, wwpLeosFlowCpuRateLimitIgmp=wwpLeosFlowCpuRateLimitIgmp, wwpLeosFlowServiceMapVid=wwpLeosFlowServiceMapVid, wwpLeosFlowCosSync1dToExpMapFrom=wwpLeosFlowCosSync1dToExpMapFrom, wwpLeosFlowBurstConfigVlanPriFltrOnThld=wwpLeosFlowBurstConfigVlanPriFltrOnThld, wwpLeosFlowCosSyncIpPrecTo1dEntry=wwpLeosFlowCosSyncIpPrecTo1dEntry, wwpLeosFlowCpuRateLimitStatsBootpDropped=wwpLeosFlowCpuRateLimitStatsBootpDropped, wwpLeosFlowCpuRateLimitStatsIgmpPassed=wwpLeosFlowCpuRateLimitStatsIgmpPassed, wwpLeosFlowCpuRateLimitStatsMultiCastPassed=wwpLeosFlowCpuRateLimitStatsMultiCastPassed, wwpLeosFlowServiceMappingTable=wwpLeosFlowServiceMappingTable, wwpLeosFlowSMappingStatsEntry=wwpLeosFlowSMappingStatsEntry, wwpLeosFlowPortServiceLevelRedCurve=wwpLeosFlowPortServiceLevelRedCurve, wwpLeosFlowCpuRateLimitLldp=wwpLeosFlowCpuRateLimitLldp, wwpLeosFlowMacMotionAttrNewPort=wwpLeosFlowMacMotionAttrNewPort, wwpLeosFlowServiceACMaxDynamicMacCount=wwpLeosFlowServiceACMaxDynamicMacCount, wwpLeosFlowCpuRateLimitTwamp=wwpLeosFlowCpuRateLimitTwamp, wwpLeosFlowServiceMapDstSlidId=wwpLeosFlowServiceMapDstSlidId, wwpLeosFlowServiceLevelPriority=wwpLeosFlowServiceLevelPriority, wwpLeosFlowCpuRateLimitsEnable=wwpLeosFlowCpuRateLimitsEnable, wwpLeosFlowServiceMapDstPort=wwpLeosFlowServiceMapDstPort, wwpLeosFlowCpuRateLimitStatsRapsDropped=wwpLeosFlowCpuRateLimitStatsRapsDropped, wwpLeosFlowCpuRateLimitStatsPort=wwpLeosFlowCpuRateLimitStatsPort, wwpLeosFlowCpuRateLimitStatsPvstPassed=wwpLeosFlowCpuRateLimitStatsPvstPassed, wwpLeosFlowCpuRateLimitCfm=wwpLeosFlowCpuRateLimitCfm, wwpLeosFlowServiceLevelFlowGroupState=wwpLeosFlowServiceLevelFlowGroupState, wwpLeosFlowCpuRateLimitStatsDfltPassed=wwpLeosFlowCpuRateLimitStatsDfltPassed, wwpLeosFlowSMappingTable=wwpLeosFlowSMappingTable, wwpLeosFlowCpuRateLimitStatsInet6Dropped=wwpLeosFlowCpuRateLimitStatsInet6Dropped, wwpLeosFlowCpuRateLimitStatsMultiCastDropped=wwpLeosFlowCpuRateLimitStatsMultiCastDropped, wwpLeosFlowCpuRateLimitStatsCfmDropped=wwpLeosFlowCpuRateLimitStatsCfmDropped, wwpLeosFlowStrictQueuingState=wwpLeosFlowStrictQueuingState, wwpLeosFlowCpuRateLimitStatsTwampPassed=wwpLeosFlowCpuRateLimitStatsTwampPassed, wwpLeosFlowServiceLevelTable=wwpLeosFlowServiceLevelTable, wwpLeosFlowCpuRateLimitDot1x=wwpLeosFlowCpuRateLimitDot1x, wwpLeosFlowServiceRedCurveMaxThreshold=wwpLeosFlowServiceRedCurveMaxThreshold, wwpLeosFlowServiceStatsTxLo=wwpLeosFlowServiceStatsTxLo, wwpLeosFlowCpuRateLimitStatsCxeRxPassed=wwpLeosFlowCpuRateLimitStatsCxeRxPassed, wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped=wwpLeosFlowCpuRateLimitStatsIpV6MgmtDropped, wwpLeosFlowPriRemapTable=wwpLeosFlowPriRemapTable, wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed=wwpLeosFlowCpuRateLimitStatsRmtLpbkPassed, wwpLeosFlowSMappingDstSlid=wwpLeosFlowSMappingDstSlid, wwpLeosFlowCos1dToRedCurveOffsetValue=wwpLeosFlowCos1dToRedCurveOffsetValue, wwpLeosFlowServiceLevelName=wwpLeosFlowServiceLevelName, wwpLeosFlowSMappingCosType=wwpLeosFlowSMappingCosType, wwpLeosFlowCosSyncStdPhbTo1dMapTo=wwpLeosFlowCosSyncStdPhbTo1dMapTo, wwpLeosFlowServiceMapStatus=wwpLeosFlowServiceMapStatus, wwpLeosFlowServiceLevelQueueSizeRed=wwpLeosFlowServiceLevelQueueSizeRed, wwpLeosFlowCpuRateLimitStatsIgmpDropped=wwpLeosFlowCpuRateLimitStatsIgmpDropped, wwpLeosFlowCpuRateLimitLpbk=wwpLeosFlowCpuRateLimitLpbk, wwpLeosFlowCosSyncExpTo1dTable=wwpLeosFlowCosSyncExpTo1dTable, wwpLeosFlowServiceAllRedCurveUnset=wwpLeosFlowServiceAllRedCurveUnset, wwpLeosFlowMacMotionNotification=wwpLeosFlowMacMotionNotification, wwpLeosFlowServiceRedCurveState=wwpLeosFlowServiceRedCurveState, wwpLeosFlowServiceStatsRxHi=wwpLeosFlowServiceStatsRxHi, wwpLeosFlowCosSyncStdPhbTo1dEntry=wwpLeosFlowCosSyncStdPhbTo1dEntry, wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped=wwpLeosFlowCpuRateLimitStatsRmtLpbkDropped, wwpLeosFlowCpuRateLimitStatsIpMgmtPassed=wwpLeosFlowCpuRateLimitStatsIpMgmtPassed, wwpLeosFlowPriRemapEntry=wwpLeosFlowPriRemapEntry, wwpLeosFlowCpuRateLimitRstp=wwpLeosFlowCpuRateLimitRstp, wwpLeosFlowCpuRateLimitStatsIcmpDropped=wwpLeosFlowCpuRateLimitStatsIcmpDropped, wwpLeosFlowCpuRateLimitPort=wwpLeosFlowCpuRateLimitPort, wwpLeosFlowSMappingStatsTxHi=wwpLeosFlowSMappingStatsTxHi, wwpLeosFlowMIBGroups=wwpLeosFlowMIBGroups, wwpLeosFlowUserPri=wwpLeosFlowUserPri, wwpLeosFlowServiceMapSrcPort=wwpLeosFlowServiceMapSrcPort, wwpLeosFlowStaticMacEntry=wwpLeosFlowStaticMacEntry, wwpLeosFlowServiceStatsRxLo=wwpLeosFlowServiceStatsRxLo, wwpLeosFlowMIB=wwpLeosFlowMIB, wwpLeosFlowCpuRateLimitMpls=wwpLeosFlowCpuRateLimitMpls, wwpLeosFlowCpuRateLimitStatsClearEntry=wwpLeosFlowCpuRateLimitStatsClearEntry, wwpLeosFlowCpuRateLimitStatsTwampRspDropped=wwpLeosFlowCpuRateLimitStatsTwampRspDropped, wwpLeosFlowL2SacPortId=wwpLeosFlowL2SacPortId, wwpLeosFlowCpuRateLimitStatsIpMgmtDropped=wwpLeosFlowCpuRateLimitStatsIpMgmtDropped, wwpLeosFlowSMTag=wwpLeosFlowSMTag, wwpLeosFlowMacMotionAttrMacAddr=wwpLeosFlowMacMotionAttrMacAddr, wwpLeosFlowServiceLevelDirection=wwpLeosFlowServiceLevelDirection, wwpLeosFlowLearnEntry=wwpLeosFlowLearnEntry, wwpLeosFlowBurstConfigBacklogLimit=wwpLeosFlowBurstConfigBacklogLimit, wwpLeosFlowCpuRateLimitMultiCast=wwpLeosFlowCpuRateLimitMultiCast, wwpLeosFlowCosMap1dToPCPTable=wwpLeosFlowCosMap1dToPCPTable, wwpLeosFlowCosMapPCPTo1dEntry=wwpLeosFlowCosMapPCPTo1dEntry, wwpLeosFlowCpuRateLimitStatsEntry=wwpLeosFlowCpuRateLimitStatsEntry, wwpLeosFlowCosSync1dToExpTable=wwpLeosFlowCosSync1dToExpTable, wwpLeosFlowMacFindVlanId=wwpLeosFlowMacFindVlanId, wwpLeosFlowMacMotionEventsInterval=wwpLeosFlowMacMotionEventsInterval, wwpLeosFlowCpuRateLimitStatsLpbkPassed=wwpLeosFlowCpuRateLimitStatsLpbkPassed, wwpLeosFlowCpuRateLimitStatsRstpPassed=wwpLeosFlowCpuRateLimitStatsRstpPassed, wwpLeosFlowSMappingNetValue=wwpLeosFlowSMappingNetValue, wwpLeosFlowAgeTime=wwpLeosFlowAgeTime, wwpLeosFlowSMappingStatsTxLo=wwpLeosFlowSMappingStatsTxLo, wwpLeosFlowCpuRateLimitStatsMstpDropped=wwpLeosFlowCpuRateLimitStatsMstpDropped, wwpLeosFlowSMappingCosValue=wwpLeosFlowSMappingCosValue, wwpLeosFlowCpuRateLimitIpControl=wwpLeosFlowCpuRateLimitIpControl, wwpLeosFlowSMVid=wwpLeosFlowSMVid, wwpLeosFlowMacFindVlanTag=wwpLeosFlowMacFindVlanTag, wwpLeosFlowServiceStatsTxHi=wwpLeosFlowServiceStatsTxHi, wwpLeosFlowServiceLevelEntry=wwpLeosFlowServiceLevelEntry, wwpLeosFlowCosSyncStdPhbTo1dMapFrom=wwpLeosFlowCosSyncStdPhbTo1dMapFrom, wwpLeosFlowCpuRateLimitStatsInetDropped=wwpLeosFlowCpuRateLimitStatsInetDropped, wwpLeosFlowCosSyncExpTo1dMapFrom=wwpLeosFlowCosSyncExpTo1dMapFrom)
mibBuilder.exportSymbols("WWP-LEOS-FLOW-MIB", wwpLeosFlowCpuRateLimitDflt=wwpLeosFlowCpuRateLimitDflt, wwpLeosFlowCpuRateLimitInet6=wwpLeosFlowCpuRateLimitInet6, wwpLeosFlowSMappingStatsTable=wwpLeosFlowSMappingStatsTable, wwpLeosFlowCpuRateLimitLacp=wwpLeosFlowCpuRateLimitLacp, wwpLeosFlowCpuRateLimitTwampRsp=wwpLeosFlowCpuRateLimitTwampRsp, wwpLeosFlowCpuRateLimitStatsTwampRspPassed=wwpLeosFlowCpuRateLimitStatsTwampRspPassed, wwpLeosFlowServiceStatsType=wwpLeosFlowServiceStatsType, wwpLeosFlowSMappingStatsType=wwpLeosFlowSMappingStatsType, wwpLeosFlowCpuRateLimitStatsOamPassed=wwpLeosFlowCpuRateLimitStatsOamPassed, wwpLeosFlowCos1dToRedCurveOffsetEntry=wwpLeosFlowCos1dToRedCurveOffsetEntry, wwpLeosFlowL2SacTrapState=wwpLeosFlowL2SacTrapState, wwpLeosFlowCpuRateLimitIpMgmt=wwpLeosFlowCpuRateLimitIpMgmt, wwpLeosFlowCosMapPCPTo1dMapTo=wwpLeosFlowCosMapPCPTo1dMapTo, wwpLeosFlowCpuRateLimitTable=wwpLeosFlowCpuRateLimitTable, wwpLeosFlowCpuRateLimitIpV6Mgmt=wwpLeosFlowCpuRateLimitIpV6Mgmt, wwpLeosFlowServiceMappingEntry=wwpLeosFlowServiceMappingEntry, wwpLeosFlowL2SacLimit=wwpLeosFlowL2SacLimit, wwpLeosFlowServiceLevelFlowGroup=wwpLeosFlowServiceLevelFlowGroup, wwpLeosFlowMacFindEntry=wwpLeosFlowMacFindEntry, wwpLeosFlowCpuRateLimitStatsInetPassed=wwpLeosFlowCpuRateLimitStatsInetPassed, wwpLeosFlowServiceMapSrcTag=wwpLeosFlowServiceMapSrcTag, wwpLeosFlowCosSync1dToExpMapTo=wwpLeosFlowCosSync1dToExpMapTo, wwpLeosFlowLearnDstPort=wwpLeosFlowLearnDstPort, wwpLeosFlowCpuRateLimitStatsPeArpPassed=wwpLeosFlowCpuRateLimitStatsPeArpPassed, wwpLeosFlowCpuRateLimitStatsBroadCastDropped=wwpLeosFlowCpuRateLimitStatsBroadCastDropped, wwpLeosFlowSMappingRedCurveOffset=wwpLeosFlowSMappingRedCurveOffset, wwpLeosFlowAgeTimeState=wwpLeosFlowAgeTimeState, wwpLeosFlowCpuRateLimitStatsClearTable=wwpLeosFlowCpuRateLimitStatsClearTable, wwpLeosFlowServiceACTable=wwpLeosFlowServiceACTable, wwpLeosFlowCpuRateLimitTcpSyn=wwpLeosFlowCpuRateLimitTcpSyn, wwpLeosFlowPortServiceLevelQueueSizeRed=wwpLeosFlowPortServiceLevelQueueSizeRed, wwpLeosFlowCpuRateLimitEprArp=wwpLeosFlowCpuRateLimitEprArp, wwpLeosFlowCpuRateLimitStatsArpPassed=wwpLeosFlowCpuRateLimitStatsArpPassed, wwpLeosFlowServiceMapProtocolType=wwpLeosFlowServiceMapProtocolType, wwpLeosFlowRemappedPri=wwpLeosFlowRemappedPri, wwpLeosFlowBurstConfigVlanPriFltrOffThld=wwpLeosFlowBurstConfigVlanPriFltrOffThld, wwpLeosFlowServiceMapPriRemarkStatus=wwpLeosFlowServiceMapPriRemarkStatus, wwpLeosFlowServiceRedCurveId=wwpLeosFlowServiceRedCurveId, wwpLeosFlowServiceRedCurveUnset=wwpLeosFlowServiceRedCurveUnset, wwpLeosFlowCpuRateLimitIcmp=wwpLeosFlowCpuRateLimitIcmp, wwpLeosFlowCpuRateLimitStatsCxeRxDropped=wwpLeosFlowCpuRateLimitStatsCxeRxDropped, wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed=wwpLeosFlowCpuRateLimitStatsIpV6MgmtPassed, wwpLeosFlowCosMap1dToPCPMapFrom=wwpLeosFlowCosMap1dToPCPMapFrom, wwpLeosFlowServiceACDynamicNonFilteredMacCount=wwpLeosFlowServiceACDynamicNonFilteredMacCount, wwpLeosFlowServiceTotalStatsRxHi=wwpLeosFlowServiceTotalStatsRxHi, wwpLeosFlowCpuRateLimitMstp=wwpLeosFlowCpuRateLimitMstp, wwpLeosFlowL2SacOperState=wwpLeosFlowL2SacOperState, wwpLeosFlowServiceRedCurveName=wwpLeosFlowServiceRedCurveName, wwpLeosFlowServiceMapDstTag=wwpLeosFlowServiceMapDstTag, wwpLeosFlowCpuRateLimitStatsCfmPassed=wwpLeosFlowCpuRateLimitStatsCfmPassed, wwpLeosFlowCpuRateLimitStatsOamDropped=wwpLeosFlowCpuRateLimitStatsOamDropped, wwpLeosFlowCpuRateLimitStatsMstpPassed=wwpLeosFlowCpuRateLimitStatsMstpPassed, wwpLeosFlowCpuRateLimitStatsTcpSynPassed=wwpLeosFlowCpuRateLimitStatsTcpSynPassed, wwpLeosFlowCpuRateLimitStatsCftPassed=wwpLeosFlowCpuRateLimitStatsCftPassed)
