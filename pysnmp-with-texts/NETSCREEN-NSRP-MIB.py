#
# PySNMP MIB module NETSCREEN-NSRP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-NSRP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
netscreenNsrp, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenNsrp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, ObjectIdentity, Gauge32, Counter64, Unsigned32, Bits, IpAddress, Integer32, iso, ModuleIdentity, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "ObjectIdentity", "Gauge32", "Counter64", "Unsigned32", "Bits", "IpAddress", "Integer32", "iso", "ModuleIdentity", "Counter32", "MibIdentifier")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
netscreenNsrpMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 6, 0))
netscreenNsrpMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-14 00:00', '2003-06-04 00:00', '2001-01-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenNsrpMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'no comment', 'no comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenNsrpMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenNsrpMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenNsrpMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenNsrpMibModule.setDescription('This module defines the object that are200 used for netscreen redundancy protocol')
netscreenNsrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 1))
nsrpGeneralClusterId = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralClusterId.setStatus('current')
if mibBuilder.loadTexts: nsrpGeneralClusterId.setDescription('The cluster ID')
nsrpGeneralLocalUnitId = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralLocalUnitId.setStatus('current')
if mibBuilder.loadTexts: nsrpGeneralLocalUnitId.setDescription("local device's unit ID")
nsrpGeneralEncrypEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralEncrypEnable.setStatus('current')
if mibBuilder.loadTexts: nsrpGeneralEncrypEnable.setDescription('NSRP encryption enabled')
nsrpGeneralAuthEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralAuthEnable.setStatus('current')
if mibBuilder.loadTexts: nsrpGeneralAuthEnable.setDescription('NSRP authentication enabled')
nsrpGeneralIfMonitor = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralIfMonitor.setStatus('current')
if mibBuilder.loadTexts: nsrpGeneralIfMonitor.setDescription('interface being monitored')
nsrpGeneralGratArps = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpGeneralGratArps.setStatus('current')
if mibBuilder.loadTexts: nsrpGeneralGratArps.setDescription('number of gratuitious arps')
netscreenNsrpVSD = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 2))
nsrpVsdGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1), )
if mibBuilder.loadTexts: nsrpVsdGroupTable.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupTable.setDescription('A list of VSD groups on the device.')
nsrpVsdGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpVsdGroupID"))
if mibBuilder.loadTexts: nsrpVsdGroupEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupEntry.setDescription('An entry containing attributes for a track ip')
nsrpVsdGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupID.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupID.setDescription('one group ID the device belongs to.')
nsrpVsdGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupPriority.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupPriority.setDescription("local unit in current group's priority.")
nsrpVsdGroupPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupPreempt.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupPreempt.setDescription("local unit in current group's preempt.")
nsrpVsdGroupHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupHoldDownTime.setDescription('TBD')
nsrpVsdGroupNumberOfUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupNumberOfUnit.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupNumberOfUnit.setDescription('unit quantity in this group.')
nsrpVsdGroupCntStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntStateChange.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntStateChange.setDescription('total number of state transition events')
nsrpVsdGroupCntToInit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToInit.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntToInit.setDescription('number of state transition into init state, which is as out of ineligible state`')
nsrpVsdGroupCntToMaster = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToMaster.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntToMaster.setDescription('number of state transition into master state')
nsrpVsdGroupCntToPBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToPBackup.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntToPBackup.setDescription('number of state transition into primary backup state')
nsrpVsdGroupCntToBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToBackup.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntToBackup.setDescription('number of state transition into backup state.')
nsrpVsdGroupCntToIneligible = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToIneligible.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntToIneligible.setDescription('number of state transition into ineligible state.')
nsrpVsdGroupCntToInoperable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntToInoperable.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntToInoperable.setDescription('number of state transition into inoperable state.')
nsrpVsdGroupCntMasterConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntMasterConflict.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntMasterConflict.setDescription('number of times multiple masters exist while the local unit is in master state.')
nsrpVsdGroupCntPbConfilict = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntPbConfilict.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntPbConfilict.setDescription('number of times multiple primary backups exist while the local unit is in primary backup state.')
nsrpVsdGroupCntHeartbeatTx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntHeartbeatTx.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntHeartbeatTx.setDescription('number of heart beat transfered by a group.')
nsrpVsdGroupCntHeartbeatRx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGroupCntHeartbeatRx.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGroupCntHeartbeatRx.setDescription('number of heart beat received by a group.')
nsrpVsdMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2), )
if mibBuilder.loadTexts: nsrpVsdMemberTable.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberTable.setDescription('A list of devices within the VSD group.')
nsrpVsdMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpVsdMemberGroupId"), (0, "NETSCREEN-NSRP-MIB", "nsrpVsdMemberUnitId"))
if mibBuilder.loadTexts: nsrpVsdMemberEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberEntry.setDescription('A entry containing attributes of one device in a group')
nsrpVsdMemberGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberGroupId.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberGroupId.setDescription('indicate the Group it belong to')
nsrpVsdMemberUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberUnitId.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberUnitId.setDescription("VSD group member's unit id")
nsrpVsdMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("undefined", 0), ("init", 1), ("master", 2), ("primary-backup", 3), ("backup", 4), ("ineligible", 5), ("inoperable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberStatus.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberStatus.setDescription('0 Undefined 1 init 2 Master 3 Primary Backup 4 Backup 5 ineligible 6 inoperable')
nsrpVsdMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberPriority.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberPriority.setDescription('Priority of unit in this group')
nsrpVsdMemberPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdMemberPreempt.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdMemberPreempt.setDescription("unit in current group's preempt")
nsrpVsdInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3), )
if mibBuilder.loadTexts: nsrpVsdInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdInterfaceTable.setDescription('A list of VSD interfaces on the device.')
nsrpVsdInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpVsdIfIndex"))
if mibBuilder.loadTexts: nsrpVsdInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdInterfaceEntry.setDescription('A track entry containing attributes for a track ip')
nsrpVsdIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfIndex.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfIndex.setDescription('A index.')
nsrpVsdIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("down", 0), ("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfStatus.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfStatus.setDescription('indicate the status of this vsi interface')
nsrpVsdIfGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfGroupId.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfGroupId.setDescription('indicate the group it belong to')
nsrpVsdIfIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfIp.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfIp.setDescription('ip ADDRESS')
nsrpVsdIfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfNetmask.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfNetmask.setDescription('subnet mask')
nsrpVsdIfGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfGateway.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfGateway.setDescription('gateway')
nsrpVsdIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfName.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfName.setDescription('trust/untrust/DMZ')
nsrpVsdIfVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfVLAN.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfVLAN.setDescription('vlan -1 means no vlan')
nsrpVsdIfMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMAC.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMAC.setDescription('mac address')
nsrpVsdIfVSys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfVSys.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfVSys.setDescription('virtual system')
nsrpVsdIfMngTelnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngTelnet.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngTelnet.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngSCS = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngSCS.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngSCS.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngWEB = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngWEB.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngWEB.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngSSL = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngSSL.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngSSL.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngSNMP = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngSNMP.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngSNMP.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngGlobal = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngGlobal.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngGlobal.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngGlobalPro = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngGlobalPro.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngGlobalPro.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngPing = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngPing.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngPing.setDescription('0 Disable 1 Enable')
nsrpVsdIfMngIdentReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 2, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdIfMngIdentReset.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdIfMngIdentReset.setDescription('0 Disable 1 Enable')
nsrpVsdGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4))
nsrpVsdGeneralInitHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGeneralInitHoldTime.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGeneralInitHoldTime.setDescription('VSD group init hold time (in second)')
nsrpVsdGeneralHbInterval = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGeneralHbInterval.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGeneralHbInterval.setDescription('VSD heart beat interval.(in milisecond)')
nsrpVsdGeneralHbLostThres = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpVsdGeneralHbLostThres.setStatus('current')
if mibBuilder.loadTexts: nsrpVsdGeneralHbLostThres.setDescription('vsd heartbeat lost threshold')
netscreenNsrpRTO = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 3))
nsrpRtoGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1), )
if mibBuilder.loadTexts: nsrpRtoGroupTable.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoGroupTable.setDescription('A list of RTO groups on the device.')
nsrpRtoGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpRtoGroupId"))
if mibBuilder.loadTexts: nsrpRtoGroupEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoGroupEntry.setDescription('An entry containing attributes for RTO group')
nsrpRtoGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGroupId.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoGroupId.setDescription('A RTO group ID.also used as table index')
nsrpRtoNumOfUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoNumOfUnit.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoNumOfUnit.setDescription('how many units in this RTO group')
nsrpRtoUnitTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2), )
if mibBuilder.loadTexts: nsrpRtoUnitTable.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitTable.setDescription('A list of device status within a RTO group.')
nsrpRtoUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpRtoUnitGroupId"), (0, "NETSCREEN-NSRP-MIB", "nsrpRtoUnitId"))
if mibBuilder.loadTexts: nsrpRtoUnitEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitEntry.setDescription('A track entry containing attributes for a track ip')
nsrpRtoUnitGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitGroupId.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitGroupId.setDescription('The RTO group id, a unit belongs to')
nsrpRtoUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitId.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitId.setDescription("device's unit id.")
nsrpRtoUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("undefined", 0), ("set", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitStatus.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitStatus.setDescription('The RTO group id, a unit belongs to')
nsrpRtoUnitDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("out", 1), ("in", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitDirection.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitDirection.setDescription("The RTO uint's dirction in the group")
nsrpRtoUnitLostHeartbeat = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitLostHeartbeat.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitLostHeartbeat.setDescription('counter of heartbeat')
nsrpRtoUnitToActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitToActive.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitToActive.setDescription('counter of active')
nsrpRtoUnitToSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitToSet.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitToSet.setDescription('counter of set')
nsrpRtoUnitLostPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitLostPeer.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitLostPeer.setDescription('counter of lost peer')
nsrpRtoUnitGroupDetach = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoUnitGroupDetach.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoUnitGroupDetach.setDescription('counter of rto group detach')
nsrpRtoCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3))
nsrpRtoCounterPakForwarded = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterPakForwarded.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterPakForwarded.setDescription('packets forwarded by rto.')
nsrpRtoCounterPakReceived = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterPakReceived.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterPakReceived.setDescription('packets received by rto.')
nsrpRtoCounterTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3), )
if mibBuilder.loadTexts: nsrpRtoCounterTable.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterTable.setDescription('A list of rto counter object entry.')
nsrpRtoCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpRtoCounterIdx"))
if mibBuilder.loadTexts: nsrpRtoCounterEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterEntry.setDescription('A rto counter entry containing attributes for a rto counter obj.')
nsrpRtoCounterIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterIdx.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterIdx.setDescription('counter index.')
nsrpRtoCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterName.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterName.setDescription('Name of a rto counter object.')
nsrpRtoCounterSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterSend.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterSend.setDescription('Total number of message sent.')
nsrpRtoCounterReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterReceive.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterReceive.setDescription('Total number of message received.')
nsrpRtoCounterDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 3, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoCounterDrop.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoCounterDrop.setDescription('Total number of message dropped.')
nsrpRtoGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4))
nsrpRtoGeneralHbInterval = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGeneralHbInterval.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoGeneralHbInterval.setDescription('rto heart beat interval.')
nsrpRtoGeneralHbLostThres = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGeneralHbLostThres.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoGeneralHbLostThres.setDescription('rto heartbeat lost threshold')
nsrpRtoGeneralSessSyncEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpRtoGeneralSessSyncEnable.setStatus('current')
if mibBuilder.loadTexts: nsrpRtoGeneralSessSyncEnable.setDescription('session sync enabled.')
netscreenNsrpTrack = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 4))
nsrpTrackEnable = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackEnable.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackEnable.setDescription('0 means disable, 1 meams enable')
nsrpTrackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackThreshold.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackThreshold.setDescription('Failover Threshold')
nsrpTrackFailoverEnalble = MibScalar((1, 3, 6, 1, 4, 1, 3224, 6, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackFailoverEnalble.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackFailoverEnalble.setDescription('Failover enable switch')
nsrpTrackTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4), )
if mibBuilder.loadTexts: nsrpTrackTable.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackTable.setDescription('A list of track ip entries.')
nsrpTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpTrackIpIndex"))
if mibBuilder.loadTexts: nsrpTrackEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackEntry.setDescription('A track entry containing attributes for a track ip')
nsrpTrackIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpIndex.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpIndex.setDescription('A unique value for each track ip. Its value ranges between 1 and 65535 and may not be contigous. It has no other meaning but a pure index.')
nsrpTrackIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpAddr.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpAddr.setDescription('The IP address of the monitored device.')
nsrpTrackIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("success", 0), ("fail", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpStatus.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpStatus.setDescription('Status')
nsrpTrackIpTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpTimestamp.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpTimestamp.setDescription('Timestamp of status change. Reference 1970/1/1 0:0')
nsrpTrackIpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpInterval.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpInterval.setDescription('A frequecy how the track ip is checked. It is in unit of seconds.')
nsrpTrackIpThreshhold = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpThreshhold.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpThreshhold.setDescription('A number of consective failures to regard the device has failed.')
nsrpTrackIpMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ping", 0), ("arp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpMethod.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpMethod.setDescription('The method to track the device.')
nsrpTrackIpWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpWeight.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpWeight.setDescription('The weight of this failure contributing to the failover.')
nsrpTrackIpIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpIfName.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpIfName.setDescription('The interface the track messages are sent to. Auto means the actual interface is determined by the routing table.')
nsrpTrackIpTotalCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpTotalCheck.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpTotalCheck.setDescription('The number of ping/arp attempts.')
nsrpTrackIpTotalFailedCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 4, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpTrackIpTotalFailedCheck.setStatus('current')
if mibBuilder.loadTexts: nsrpTrackIpTotalFailedCheck.setDescription('The number of total failed attempts.')
netscreenNsrpCluster = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 5))
nsrpClusterTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1), )
if mibBuilder.loadTexts: nsrpClusterTable.setStatus('current')
if mibBuilder.loadTexts: nsrpClusterTable.setDescription('A list of cluster on the device.')
nsrpClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpClusterTblIndex"))
if mibBuilder.loadTexts: nsrpClusterEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpClusterEntry.setDescription('An entry containing attributes for nsrp cluster')
nsrpClusterTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterTblIndex.setStatus('current')
if mibBuilder.loadTexts: nsrpClusterTblIndex.setDescription('table index')
nsrpClusterUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterUnitId.setStatus('current')
if mibBuilder.loadTexts: nsrpClusterUnitId.setDescription('Unit id in this cluster')
nsrpClusterUnitCtrlMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterUnitCtrlMac.setStatus('current')
if mibBuilder.loadTexts: nsrpClusterUnitCtrlMac.setDescription("Unit id's control path mac address")
nsrpClusterUnitDataMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 5, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpClusterUnitDataMac.setStatus('current')
if mibBuilder.loadTexts: nsrpClusterUnitDataMac.setDescription("Unit id's data path mac address")
netscreenNsrpLinkInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 6, 6))
nsrpLinkInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1), )
if mibBuilder.loadTexts: nsrpLinkInfoTable.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoTable.setDescription('A list of NSRP link info')
nsrpLinkInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1), ).setIndexNames((0, "NETSCREEN-NSRP-MIB", "nsrpLinkInfoIndex"))
if mibBuilder.loadTexts: nsrpLinkInfoEntry.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoEntry.setDescription('An entry containing attributes for nsrp link info')
nsrpLinkInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoIndex.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoIndex.setDescription('table index')
nsrpLinkInfoLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("control", 0), ("data", 1), ("unused", 2), ("hapath2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoLinkType.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoLinkType.setDescription('link type')
nsrpLinkInfoChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoChannel.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoChannel.setDescription("link channel's name")
nsrpLinkInfoMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 4), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoMac.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoMac.setDescription("link channel's mac address")
nsrpLinkInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 6, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsrpLinkInfoState.setStatus('current')
if mibBuilder.loadTexts: nsrpLinkInfoState.setDescription("link channel's state")
mibBuilder.exportSymbols("NETSCREEN-NSRP-MIB", nsrpVsdMemberStatus=nsrpVsdMemberStatus, nsrpRtoUnitToSet=nsrpRtoUnitToSet, nsrpVsdGroupCntMasterConflict=nsrpVsdGroupCntMasterConflict, nsrpRtoUnitTable=nsrpRtoUnitTable, nsrpRtoUnitEntry=nsrpRtoUnitEntry, nsrpTrackIpIndex=nsrpTrackIpIndex, nsrpRtoCounterPakReceived=nsrpRtoCounterPakReceived, nsrpVsdGroupCntToIneligible=nsrpVsdGroupCntToIneligible, netscreenNsrpCluster=netscreenNsrpCluster, nsrpTrackTable=nsrpTrackTable, nsrpLinkInfoEntry=nsrpLinkInfoEntry, nsrpVsdIfIndex=nsrpVsdIfIndex, nsrpClusterEntry=nsrpClusterEntry, nsrpRtoGeneralSessSyncEnable=nsrpRtoGeneralSessSyncEnable, nsrpClusterTblIndex=nsrpClusterTblIndex, nsrpVsdIfMngIdentReset=nsrpVsdIfMngIdentReset, nsrpTrackIpTotalCheck=nsrpTrackIpTotalCheck, nsrpRtoCounterPakForwarded=nsrpRtoCounterPakForwarded, nsrpRtoCounterReceive=nsrpRtoCounterReceive, nsrpLinkInfoMac=nsrpLinkInfoMac, netscreenNsrpMibModule=netscreenNsrpMibModule, nsrpVsdGeneralHbLostThres=nsrpVsdGeneralHbLostThres, nsrpVsdGroupPreempt=nsrpVsdGroupPreempt, nsrpVsdIfVLAN=nsrpVsdIfVLAN, netscreenNsrpTrack=netscreenNsrpTrack, PYSNMP_MODULE_ID=netscreenNsrpMibModule, nsrpRtoUnitGroupId=nsrpRtoUnitGroupId, nsrpRtoUnitStatus=nsrpRtoUnitStatus, nsrpRtoGeneralHbLostThres=nsrpRtoGeneralHbLostThres, nsrpVsdIfName=nsrpVsdIfName, nsrpVsdIfMngSNMP=nsrpVsdIfMngSNMP, nsrpRtoGroupTable=nsrpRtoGroupTable, nsrpTrackFailoverEnalble=nsrpTrackFailoverEnalble, nsrpLinkInfoState=nsrpLinkInfoState, nsrpTrackIpTimestamp=nsrpTrackIpTimestamp, nsrpRtoCounterSend=nsrpRtoCounterSend, nsrpRtoCounterTable=nsrpRtoCounterTable, nsrpVsdIfMngGlobal=nsrpVsdIfMngGlobal, nsrpVsdGroupCntHeartbeatRx=nsrpVsdGroupCntHeartbeatRx, nsrpVsdMemberUnitId=nsrpVsdMemberUnitId, nsrpLinkInfoIndex=nsrpLinkInfoIndex, nsrpTrackIpStatus=nsrpTrackIpStatus, nsrpVsdIfMngWEB=nsrpVsdIfMngWEB, nsrpRtoCounter=nsrpRtoCounter, nsrpRtoUnitToActive=nsrpRtoUnitToActive, nsrpVsdIfMngTelnet=nsrpVsdIfMngTelnet, nsrpVsdGroupCntToInit=nsrpVsdGroupCntToInit, nsrpVsdIfMngGlobalPro=nsrpVsdIfMngGlobalPro, nsrpVsdGroupNumberOfUnit=nsrpVsdGroupNumberOfUnit, netscreenNsrpGeneral=netscreenNsrpGeneral, nsrpRtoCounterEntry=nsrpRtoCounterEntry, nsrpTrackIpAddr=nsrpTrackIpAddr, nsrpVsdGroupCntToBackup=nsrpVsdGroupCntToBackup, nsrpTrackIpTotalFailedCheck=nsrpTrackIpTotalFailedCheck, nsrpTrackThreshold=nsrpTrackThreshold, nsrpVsdMemberTable=nsrpVsdMemberTable, nsrpVsdGroupCntHeartbeatTx=nsrpVsdGroupCntHeartbeatTx, nsrpTrackEntry=nsrpTrackEntry, nsrpClusterUnitDataMac=nsrpClusterUnitDataMac, netscreenNsrpRTO=netscreenNsrpRTO, netscreenNsrpVSD=netscreenNsrpVSD, nsrpVsdIfVSys=nsrpVsdIfVSys, nsrpVsdGroupID=nsrpVsdGroupID, nsrpTrackIpIfName=nsrpTrackIpIfName, nsrpClusterTable=nsrpClusterTable, nsrpGeneralClusterId=nsrpGeneralClusterId, nsrpTrackIpWeight=nsrpTrackIpWeight, nsrpVsdGroupCntToInoperable=nsrpVsdGroupCntToInoperable, nsrpTrackIpInterval=nsrpTrackIpInterval, nsrpVsdMemberPreempt=nsrpVsdMemberPreempt, nsrpVsdInterfaceEntry=nsrpVsdInterfaceEntry, nsrpTrackIpMethod=nsrpTrackIpMethod, nsrpLinkInfoTable=nsrpLinkInfoTable, nsrpVsdGroupTable=nsrpVsdGroupTable, nsrpVsdMemberGroupId=nsrpVsdMemberGroupId, nsrpLinkInfoChannel=nsrpLinkInfoChannel, nsrpVsdIfMngSCS=nsrpVsdIfMngSCS, nsrpRtoGroupEntry=nsrpRtoGroupEntry, nsrpRtoUnitLostPeer=nsrpRtoUnitLostPeer, nsrpVsdIfGroupId=nsrpVsdIfGroupId, nsrpVsdGeneralInitHoldTime=nsrpVsdGeneralInitHoldTime, nsrpVsdIfStatus=nsrpVsdIfStatus, nsrpGeneralLocalUnitId=nsrpGeneralLocalUnitId, netscreenNsrpLinkInfo=netscreenNsrpLinkInfo, nsrpRtoUnitId=nsrpRtoUnitId, nsrpGeneralEncrypEnable=nsrpGeneralEncrypEnable, nsrpRtoNumOfUnit=nsrpRtoNumOfUnit, nsrpRtoGeneralHbInterval=nsrpRtoGeneralHbInterval, nsrpVsdGroupCntToPBackup=nsrpVsdGroupCntToPBackup, nsrpClusterUnitCtrlMac=nsrpClusterUnitCtrlMac, nsrpRtoGeneral=nsrpRtoGeneral, nsrpGeneralGratArps=nsrpGeneralGratArps, nsrpRtoUnitLostHeartbeat=nsrpRtoUnitLostHeartbeat, nsrpVsdGeneralHbInterval=nsrpVsdGeneralHbInterval, nsrpVsdInterfaceTable=nsrpVsdInterfaceTable, nsrpClusterUnitId=nsrpClusterUnitId, nsrpRtoCounterDrop=nsrpRtoCounterDrop, nsrpVsdIfMngSSL=nsrpVsdIfMngSSL, nsrpVsdIfMngPing=nsrpVsdIfMngPing, nsrpVsdMemberEntry=nsrpVsdMemberEntry, nsrpVsdGroupEntry=nsrpVsdGroupEntry, nsrpGeneralIfMonitor=nsrpGeneralIfMonitor, nsrpVsdGeneral=nsrpVsdGeneral, nsrpTrackIpThreshhold=nsrpTrackIpThreshhold, nsrpGeneralAuthEnable=nsrpGeneralAuthEnable, nsrpRtoCounterIdx=nsrpRtoCounterIdx, nsrpVsdGroupHoldDownTime=nsrpVsdGroupHoldDownTime, nsrpVsdIfNetmask=nsrpVsdIfNetmask, nsrpRtoGroupId=nsrpRtoGroupId, nsrpVsdGroupCntPbConfilict=nsrpVsdGroupCntPbConfilict, nsrpTrackEnable=nsrpTrackEnable, nsrpVsdMemberPriority=nsrpVsdMemberPriority, nsrpVsdGroupPriority=nsrpVsdGroupPriority, nsrpRtoUnitGroupDetach=nsrpRtoUnitGroupDetach, nsrpVsdIfGateway=nsrpVsdIfGateway, nsrpVsdIfIp=nsrpVsdIfIp, nsrpVsdIfMAC=nsrpVsdIfMAC, nsrpRtoCounterName=nsrpRtoCounterName, nsrpLinkInfoLinkType=nsrpLinkInfoLinkType, nsrpVsdGroupCntToMaster=nsrpVsdGroupCntToMaster, nsrpVsdGroupCntStateChange=nsrpVsdGroupCntStateChange, nsrpRtoUnitDirection=nsrpRtoUnitDirection)
