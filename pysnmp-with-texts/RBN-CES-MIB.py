#
# PySNMP MIB module RBN-CES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RBN-CES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:52:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
RbnAlarmId, = mibBuilder.importSymbols("RBN-ALARM-TC", "RbnAlarmId")
rbnMgmt, = mibBuilder.importSymbols("RBN-SMI", "rbnMgmt")
RbnPercentage, = mibBuilder.importSymbols("RBN-TC", "RbnPercentage")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, TimeTicks, Counter32, Bits, MibIdentifier, Counter64, iso, IpAddress, Unsigned32, Gauge32, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "TimeTicks", "Counter32", "Bits", "MibIdentifier", "Counter64", "iso", "IpAddress", "Unsigned32", "Gauge32", "NotificationType", "ObjectIdentity")
DateAndTime, DisplayString, RowStatus, TextualConvention, TruthValue, TimeInterval = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "RowStatus", "TextualConvention", "TruthValue", "TimeInterval")
rbnCesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2352, 2, 56))
rbnCesMIB.setRevisions(('2010-12-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rbnCesMIB.setRevisionsDescriptions((' Initial Version.',))
if mibBuilder.loadTexts: rbnCesMIB.setLastUpdated('201012020000Z')
if mibBuilder.loadTexts: rbnCesMIB.setOrganization('Ericsson AB.')
if mibBuilder.loadTexts: rbnCesMIB.setContactInfo(' Ericsson, Inc. Postal: 100 Headquarters Drive San Jose, CA 95134-1370 USA Phone: +1 408 750 5000 Fax: +1 408 750 5599')
if mibBuilder.loadTexts: rbnCesMIB.setDescription('This MIB describes objects used for managing Circuit Emulation Service(CES) protocols, including RFC 5086: Structure-Aware Time Division Multiplexed (TDM) Circuit Emulation Service over Packet Switched Network (CESoPSN) and RFC 4553: Structure Agnostic Circuit Emulation Service over Packet Switch Network(SAToP).')
rbnCesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1))
rbnCesMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2))
rbnCesSlaInfoResetAll = MibScalar((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesSlaInfoResetAll.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoResetAll.setDescription("Setting this object to 'true' resets all CES Service Level Agreement(SLA) information objects in the rbnCesSlaInfoTable. This object always returns 'false' value.")
rbnCesCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2), )
if mibBuilder.loadTexts: rbnCesCfgTable.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgTable.setDescription('Configuration table for CES circuits.')
rbnCesCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesCfgIndex"))
if mibBuilder.loadTexts: rbnCesCfgEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgEntry.setDescription('Each entry in this table represents a CES circuit.')
rbnCesCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnCesCfgIndex.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgIndex.setDescription('This object is used to uniquely identify a CES circuit. The value of this object should be the same as the value of ifIndex when they are used to identify the same CES circuit.')
rbnCesCfgPktLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 2), Unsigned32().clone(1000)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgPktLatency.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgPktLatency.setDescription('This object specifies the time of packetizing frames into a packet. The packet latency is calculated by multiplying number of frames by a constant frame packetization time(125 microseconds). The system packetizes 8 frames into a packet by default')
rbnCesCfgJtrBfrDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 3), Unsigned32().clone(5000)).setUnits('microseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgJtrBfrDepth.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgJtrBfrDepth.setDescription('The number of microseconds of expected packet delay variation for this CES PW over PSN. The value must be at least two times the expected packet jitter through the network.')
rbnCesCfgConsecPktsInSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 4), Unsigned32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgConsecPktsInSync.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgConsecPktsInSync.setDescription('The number of consecutive packets that are required to exit loss of packet state(LOPS)')
rbnCesCfgConsecMissPktsOutSync = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 5), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgConsecMissPktsOutSync.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgConsecMissPktsOutSync.setDescription('The number of consecutive missing packets that are required to enter loss of packet state(LOPS)')
rbnCesCfgIdlePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="3F")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgIdlePattern.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgIdlePattern.setDescription('The object determines the value to be used on the TDM channel when packets have over/underflow in the jitter buffer or are missing for any reason at the CES bound. The default value for E1 is 0x54 and T1 is 0x3F.')
rbnCesCfgTrunkCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgTrunkCtl.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgTrunkCtl.setDescription('This object enforces the RFC 5086 requirement that controls at most one CES PW state(AIS or RDI) on the outgoing T1/E1 trunk.')
rbnCesCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgAdminStatus.setDescription("This object controls CES feature on the circuit. Setting this object to 'up' enables CES on the circuit; setting this object to 'down' disables CES on the circuit and removes corresponding entries in the rbnCesStatsTable, rbnCesEplStatsTable, and rbnCesSlaInfoTable. To modify other 'read-create' objects in the conceptual row, this object must be set to 'down'. The value of 'rbnCesCfgRowStatus' must be 'active' in order for this object to be set to 'up'.")
rbnCesCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgRowStatus.setDescription("This object is used to manage the creation and deletion of CES configuration conceptual rows. Except 'rbnCesCfgAdminStatus', 'read-create' objects in the conceptual row cannot be modified when this object is set to active(1). To change this object from 'active' to a different value, the 'rbnCesCfgAdminStatus' object must be 'down'. To create a row in this table, this object could be set to either 'createAndGo(4)' or 'createAndWait(5)'. Until all objects in the conceptual row are appropriately configured, this object will transit to 'notReady(3)'.")
rbnCesStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3), )
if mibBuilder.loadTexts: rbnCesStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsTable.setDescription('CES statistics table.')
rbnCesStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1), )
rbnCesCfgEntry.registerAugmentions(("RBN-CES-MIB", "rbnCesStatsEntry"))
rbnCesStatsEntry.setIndexNames(*rbnCesCfgEntry.getIndexNames())
if mibBuilder.loadTexts: rbnCesStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEntry.setDescription('Each entry in this table represents a CES circuit.')
rbnCesStatsEgressOutOfBfrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressOutOfBfrDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressOutOfBfrDroppedPkts.setDescription('Number of packets dropped due to buffer starvation in the PSN to TDM direction(egress).')
rbnCesStatsEgressMissingPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressMissingPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressMissingPkts.setDescription('Number of missing packets detected via control word sequence number gaps in the PSN to TDM direction(egress).')
rbnCesStatsEgressMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressMalformedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressMalformedPkts.setDescription('Number of malformed packets including unexpected size in the PSN to TDM direction(egress).')
rbnCesStatsEgressJtrBfrOverrunPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressJtrBfrOverrunPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressJtrBfrOverrunPkts.setDescription('Number of packets dropped due to jitter buffer overrun in the PSN to TDM direction(egress).')
rbnCesStatsEgressJtrBfrUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressJtrBfrUnderruns.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressJtrBfrUnderruns.setDescription('Number of times jitter buffer underrun has been detected in the PSN to TDM direction(egress).')
rbnCesStatsEgressMisOrderPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressMisOrderPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressMisOrderPkts.setDescription('Number of out of sequence packets received in the PSN to TDM direction(egress).')
rbnCesStatsEgressRemoteLossPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressRemoteLossPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressRemoteLossPkts.setDescription('Number of packets received with the R bit set in the PSN to TDM direction(egress).')
rbnCesStatsEgressWindowSwitchovers = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressWindowSwitchovers.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressWindowSwitchovers.setDescription('Number of times serial number lost synchronization and was forced to move to a new window in the PSN to TDM direction(egress).')
rbnCesStatsEgressRemoteAcDownPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressRemoteAcDownPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressRemoteAcDownPkts.setDescription("Number of packets received with L bit set to 1, indicating that the far end's attachment circuit is down (in LOF or LOS or AIS) in the PSN to TDM direction(egress). Either AIS or idle pattern was played out on the local access circuit.")
rbnCesStatsEgressDuplicatePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressDuplicatePkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressDuplicatePkts.setDescription('Number of packets dropped due to being duplicated, as determined by the PW codeword sequence number in the PSN to TDM direction(egress).')
rbnCesStatsEgressDeniedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressDeniedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressDeniedPkts.setDescription('Number of packets dropped because they are denied in the PSN to TDM direction(egress).')
rbnCesStatsEgressErrorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressErrorEvents.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressErrorEvents.setDescription('Number of times a packet is replaced with a dummy packet in the PSN to TDM direction(egress) because the system is in underrun mode or the packet was lost.')
rbnCesStatsEgressErrorDataBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsEgressErrorDataBlocks.setReference('ITU-T G.826: Error performance parameters and objectives for international, constant bit rate digital paths at or above the primary rate')
if mibBuilder.loadTexts: rbnCesStatsEgressErrorDataBlocks.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsEgressErrorDataBlocks.setDescription('Block of data transmitted to the TDM attachment circuit and of a size defined in accordance with the [ITU-T G.826] rules for the corresponding TDM service that has experienced at least one CESoPSN/SAToP error event in the PSN to TDM direction(egress). For example, consider a T1/E1 Attachment Circuit Error Data Block for T1 = Error Event * (192 * Packet Latency) Error Data Block for E1 = Error Event * (256 * Packet Latency)')
rbnCesStatsIngressOutOfBfrDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsIngressOutOfBfrDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsIngressOutOfBfrDroppedPkts.setDescription('Number of packets that could not be sent due to buffer starvation in the PSN to TDM direction(egress).')
rbnCesStatsIngressSizeViolationDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsIngressSizeViolationDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsIngressSizeViolationDroppedPkts.setDescription('Number of packets not transmitted because their size is greater than the largest supported in the PSN to TDM direction(egress).')
rbnCesStatsIngressTransmitDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesStatsIngressTransmitDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsIngressTransmitDroppedPkts.setDescription('Number of packets not transmitted due to congestion in the transmit queue in the PSN to TDM direction(egress).')
rbnCesEplCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4), )
if mibBuilder.loadTexts: rbnCesEplCfgTable.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgTable.setDescription('CES excessive packet loss configuration table.')
rbnCesEplCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesEplCfgIndex"))
if mibBuilder.loadTexts: rbnCesEplCfgEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgEntry.setDescription('Each entry in this table represents a set of global CES excessive packet loss configuration.')
rbnCesEplCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: rbnCesEplCfgIndex.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgIndex.setDescription('This object is used to uniquely identify a set of CES excessive packet loss configuration.')
rbnCesEplCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 2), RbnPercentage()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgThreshold.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgThreshold.setDescription('Threshold in percentage representing the upper limits of measurement for excessive packet loss. It is the ratio of (Total Lost Packets) / (Total Transmitted Packets)')
rbnCesEplCfgFaultDeclarationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 3), Unsigned32().clone(2500)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgFaultDeclarationTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgFaultDeclarationTime.setDescription('This object controls fault declaration time of excessive packet loss alarm. It is a successive duration that experience excessive packet loss defect.')
rbnCesEplCfgClearingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 4), Unsigned32().clone(10000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgClearingTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgClearingTime.setDescription('This object controls how excessive packet loss alarms are cleared. It is a successive periods of duration T that do not experience an excessive packet loss defect. Duration T is a system constant value which is 25 milliseconds.')
rbnCesEplCfgStatsResetAll = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesEplCfgStatsResetAll.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgStatsResetAll.setDescription("Setting this object to 'true' resets all CES excessive packet loss statistic objects in the rbnCesEplStatsTable. This object always returns 'false' value.")
rbnCesEplCfgAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgAdminStatus.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgAdminStatus.setDescription("This object controls the CES excessive packet loss configurations. Setting this object to 'up' enables CES excessive packet loss monitoring on all CES circuits in the system; setting this object to 'down' disables the feature and removes all entries in the rbnCesEplStatsTable. There is only one active CES excessive packet loss configuration allowed. To modify other 'read-create' objects in the conceptual row, the 'rbnCesEplCfgAdminStatus' object must be set to 'down'. The value of the 'rbnCesEplCfgRowStatus' object must be 'active' in order for this object to be set to 'up'.")
rbnCesEplCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 4, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rbnCesEplCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgRowStatus.setDescription("This object is used to manage the creation and deletion of CES excessive packet loss configuration conceptual rows. Except 'rbnCesEplCfgAdminStatus', 'read-create' objects in the conceptual row cannot be modified when this object is set to active(1). To change this object from 'active' to a different value, the 'rbnCesEplCfgAdminStatus' object must be 'down'. To create a row in this table, this object could be set to either 'createAndGo(4)' or 'createAndWait(5)'. Until all objects in the conceptual row are appropriately configured, this object will transit to 'notReady(3)'.")
rbnCesEplStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5), )
if mibBuilder.loadTexts: rbnCesEplStatsTable.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsTable.setDescription('CES excessive packet loss statistics table.')
rbnCesEplStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesEplStatsIndex"))
if mibBuilder.loadTexts: rbnCesEplStatsEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsEntry.setDescription('Each entry in this table represents a CES circuit.')
rbnCesEplStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnCesEplStatsIndex.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsIndex.setDescription('This object is used to uniquely identify a CES circuit. The value of this object should be the same as the value of ifIndex when they are used to identify the same CES circuit.')
rbnCesEplStatsEntryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsEntryTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsEntryTime.setDescription('Date and time when the current excessive packet loss snapshot starts.')
rbnCesEplStatsEntryTotalPktLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsEntryTotalPktLossTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsEntryTotalPktLossTime.setDescription('The entry total packet loss time of current excessive packet loss snapshot.')
rbnCesEplStatsExitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 4), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsExitTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsExitTime.setDescription('The exit packet loss time of current excessive packet loss snapshot.')
rbnCesEplStatsExitTotalPktLossTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsExitTotalPktLossTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsExitTotalPktLossTime.setDescription('The exit total packet loss time of current excessive packet loss snapshot.')
rbnCesEplStatsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsCount.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsCount.setDescription('The total number of times when the CES PW was in the excessive packet loss state.')
rbnCesEplStatsTotalCircuitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsTotalCircuitTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsTotalCircuitTime.setDescription('Total CES PW time including CES PW up time and time spent in excessive packet loss state.')
rbnCesEplStatsTotalFailureRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 8), RbnPercentage()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesEplStatsTotalFailureRate.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsTotalFailureRate.setDescription('The percentage of time the CES PW spent in the excessive packet loss state during the total CES PW time.')
rbnCesEplStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 5, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesEplStatsReset.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsReset.setDescription("This object is used to reset CES EPL statistic objects in the entry. Setting this object to 'true' resets 'rbnCesEplStatsEntryTime' to current time and other CES EPL statistic objects to zero. The object always returns 'false' value.")
rbnCesSlaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6), )
if mibBuilder.loadTexts: rbnCesSlaInfoTable.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoTable.setDescription('CES Service Level Agreement information table.')
rbnCesSlaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesSlaInfoIndex"))
if mibBuilder.loadTexts: rbnCesSlaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoEntry.setDescription('Each entry in this table represents a CES circuit that is in its outage state.')
rbnCesSlaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rbnCesSlaInfoIndex.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoIndex.setDescription('This object is used to uniquely identify a CES circuit. The value of this object should be the same as the value of ifIndex when they are used to identify the same CES interface.')
rbnCesSlaInfoLatestOutageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoLatestOutageTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoLatestOutageTime.setDescription('The amount of time during the latest occurrence when the CES PW was in the packet loss or underrun state.')
rbnCesSlaInfoEntryLatestOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoEntryLatestOutage.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoEntryLatestOutage.setDescription('Date and time of the most recent occurrence when the CES PW entered the packet loss or underrun state.')
rbnCesSlaInfoExitLatestOutage = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoExitLatestOutage.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoExitLatestOutage.setDescription('Date and time of the most recent occurrence when the CES PW exited the packet loss or underrun state.')
rbnCesSlaInfoLastOutageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 5), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoLastOutageTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoLastOutageTime.setDescription('The duration of the previous occurrence(the one before the latest occurrence) when the CES PW was in the packet loss or underrun state.')
rbnCesSlaInfoLastUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 6), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoLastUpTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoLastUpTime.setDescription('Total CES PW up time before the latest outage occurred.')
rbnCesSlaInfoTotalOutageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 7), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoTotalOutageTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoTotalOutageTime.setDescription('Total outage time since the CES PW was created.')
rbnCesSlaInfoTotalUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 8), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoTotalUpTime.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoTotalUpTime.setDescription('Total CES PW up time since it was created excluding the cumulative outage time.')
rbnCesSlaInfoOutageCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rbnCesSlaInfoOutageCount.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoOutageCount.setDescription('Number of times a CES PW outage occurred.')
rbnCesSlaInfoReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 6, 1, 10), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesSlaInfoReset.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoReset.setDescription("Setting this object to 'true' resets CES SLA objects to zero. The object always returns 'false' value.")
rbnCesCardAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7), )
if mibBuilder.loadTexts: rbnCesCardAlarmTable.setReference('RBN-CARDMON-MIB and RBN-ALARM-TC.')
if mibBuilder.loadTexts: rbnCesCardAlarmTable.setStatus('current')
if mibBuilder.loadTexts: rbnCesCardAlarmTable.setDescription('This table consists of CES specific card alarms. The alarms are used to indicate CES card level communication errors. Other card alarms are not included in the table.')
rbnCesCardAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7, 1), ).setIndexNames((0, "RBN-CES-MIB", "rbnCesCardAlarmId"))
if mibBuilder.loadTexts: rbnCesCardAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: rbnCesCardAlarmEntry.setDescription('Each entry in this table represents a CES specific card alarm.')
rbnCesCardAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7, 1, 1), RbnAlarmId())
if mibBuilder.loadTexts: rbnCesCardAlarmId.setStatus('current')
if mibBuilder.loadTexts: rbnCesCardAlarmId.setDescription('This object is used to uniquely identify a CES card alarm.')
rbnCesCardAlarmNotificationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2352, 2, 56, 1, 7, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rbnCesCardAlarmNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: rbnCesCardAlarmNotificationEnable.setDescription('This object indicates whether rbnCardAlarm notification is generated. If true, a notification is generated for the card alarm indicated by rbnCesCardAlarmId. Otherwise no notification is generated.')
rbnCesMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 1))
rbnCesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2))
rbnCesMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 1, 1)).setObjects(("RBN-CES-MIB", "rbnCesCfgGroup"), ("RBN-CES-MIB", "rbnCesStatsGroup"), ("RBN-CES-MIB", "rbnCesEplCfgGroup"), ("RBN-CES-MIB", "rbnCesEplStatsGroup"), ("RBN-CES-MIB", "rbnCesSlaInfoGroup"), ("RBN-CES-MIB", "rbnCesCardAlarmGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesMIBCompliance = rbnCesMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: rbnCesMIBCompliance.setDescription('The compliance statement for CES MIB implementations.')
rbnCesCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 1)).setObjects(("RBN-CES-MIB", "rbnCesSlaInfoResetAll"), ("RBN-CES-MIB", "rbnCesCfgPktLatency"), ("RBN-CES-MIB", "rbnCesCfgJtrBfrDepth"), ("RBN-CES-MIB", "rbnCesCfgConsecPktsInSync"), ("RBN-CES-MIB", "rbnCesCfgConsecMissPktsOutSync"), ("RBN-CES-MIB", "rbnCesCfgIdlePattern"), ("RBN-CES-MIB", "rbnCesCfgTrunkCtl"), ("RBN-CES-MIB", "rbnCesCfgAdminStatus"), ("RBN-CES-MIB", "rbnCesCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesCfgGroup = rbnCesCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCesCfgGroup.setDescription('Conformance group for CES configurations.')
rbnCesStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 2)).setObjects(("RBN-CES-MIB", "rbnCesStatsEgressOutOfBfrDroppedPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressMissingPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressMalformedPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressJtrBfrOverrunPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressJtrBfrUnderruns"), ("RBN-CES-MIB", "rbnCesStatsEgressMisOrderPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressRemoteLossPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressWindowSwitchovers"), ("RBN-CES-MIB", "rbnCesStatsEgressRemoteAcDownPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressDuplicatePkts"), ("RBN-CES-MIB", "rbnCesStatsEgressDeniedPkts"), ("RBN-CES-MIB", "rbnCesStatsEgressErrorEvents"), ("RBN-CES-MIB", "rbnCesStatsEgressErrorDataBlocks"), ("RBN-CES-MIB", "rbnCesStatsIngressOutOfBfrDroppedPkts"), ("RBN-CES-MIB", "rbnCesStatsIngressSizeViolationDroppedPkts"), ("RBN-CES-MIB", "rbnCesStatsIngressTransmitDroppedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesStatsGroup = rbnCesStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCesStatsGroup.setDescription('Conformance group for CES statistics.')
rbnCesEplCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 3)).setObjects(("RBN-CES-MIB", "rbnCesEplCfgThreshold"), ("RBN-CES-MIB", "rbnCesEplCfgFaultDeclarationTime"), ("RBN-CES-MIB", "rbnCesEplCfgClearingTime"), ("RBN-CES-MIB", "rbnCesEplCfgStatsResetAll"), ("RBN-CES-MIB", "rbnCesEplCfgAdminStatus"), ("RBN-CES-MIB", "rbnCesEplCfgRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesEplCfgGroup = rbnCesEplCfgGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplCfgGroup.setDescription('Conformance group for CES excessive packet loss configurations.')
rbnCesEplStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 4)).setObjects(("RBN-CES-MIB", "rbnCesEplStatsEntryTime"), ("RBN-CES-MIB", "rbnCesEplStatsEntryTotalPktLossTime"), ("RBN-CES-MIB", "rbnCesEplStatsExitTime"), ("RBN-CES-MIB", "rbnCesEplStatsExitTotalPktLossTime"), ("RBN-CES-MIB", "rbnCesEplStatsCount"), ("RBN-CES-MIB", "rbnCesEplStatsTotalCircuitTime"), ("RBN-CES-MIB", "rbnCesEplStatsTotalFailureRate"), ("RBN-CES-MIB", "rbnCesEplStatsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesEplStatsGroup = rbnCesEplStatsGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCesEplStatsGroup.setDescription('Conformance group for CES excessive packet loss statistics.')
rbnCesSlaInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 5)).setObjects(("RBN-CES-MIB", "rbnCesSlaInfoLatestOutageTime"), ("RBN-CES-MIB", "rbnCesSlaInfoEntryLatestOutage"), ("RBN-CES-MIB", "rbnCesSlaInfoExitLatestOutage"), ("RBN-CES-MIB", "rbnCesSlaInfoLastOutageTime"), ("RBN-CES-MIB", "rbnCesSlaInfoLastUpTime"), ("RBN-CES-MIB", "rbnCesSlaInfoTotalOutageTime"), ("RBN-CES-MIB", "rbnCesSlaInfoTotalUpTime"), ("RBN-CES-MIB", "rbnCesSlaInfoOutageCount"), ("RBN-CES-MIB", "rbnCesSlaInfoReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesSlaInfoGroup = rbnCesSlaInfoGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCesSlaInfoGroup.setDescription('Conformance group for CES service level agreement statistics.')
rbnCesCardAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2352, 2, 56, 2, 2, 6)).setObjects(("RBN-CES-MIB", "rbnCesCardAlarmNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rbnCesCardAlarmGroup = rbnCesCardAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: rbnCesCardAlarmGroup.setDescription('Conformance group for CES card alarms.')
mibBuilder.exportSymbols("RBN-CES-MIB", rbnCesStatsIngressOutOfBfrDroppedPkts=rbnCesStatsIngressOutOfBfrDroppedPkts, rbnCesCfgIdlePattern=rbnCesCfgIdlePattern, rbnCesSlaInfoLastUpTime=rbnCesSlaInfoLastUpTime, rbnCesEplCfgClearingTime=rbnCesEplCfgClearingTime, rbnCesMIBConformance=rbnCesMIBConformance, rbnCesSlaInfoLastOutageTime=rbnCesSlaInfoLastOutageTime, rbnCesCfgConsecMissPktsOutSync=rbnCesCfgConsecMissPktsOutSync, rbnCesEplCfgTable=rbnCesEplCfgTable, rbnCesEplStatsEntry=rbnCesEplStatsEntry, rbnCesSlaInfoGroup=rbnCesSlaInfoGroup, rbnCesEplCfgStatsResetAll=rbnCesEplCfgStatsResetAll, rbnCesStatsEgressErrorDataBlocks=rbnCesStatsEgressErrorDataBlocks, rbnCesCardAlarmId=rbnCesCardAlarmId, rbnCesStatsEgressRemoteAcDownPkts=rbnCesStatsEgressRemoteAcDownPkts, rbnCesCardAlarmGroup=rbnCesCardAlarmGroup, rbnCesStatsEgressJtrBfrUnderruns=rbnCesStatsEgressJtrBfrUnderruns, rbnCesSlaInfoLatestOutageTime=rbnCesSlaInfoLatestOutageTime, rbnCesStatsIngressSizeViolationDroppedPkts=rbnCesStatsIngressSizeViolationDroppedPkts, rbnCesEplStatsExitTime=rbnCesEplStatsExitTime, rbnCesStatsIngressTransmitDroppedPkts=rbnCesStatsIngressTransmitDroppedPkts, rbnCesMIBCompliances=rbnCesMIBCompliances, rbnCesSlaInfoEntry=rbnCesSlaInfoEntry, rbnCesEplCfgFaultDeclarationTime=rbnCesEplCfgFaultDeclarationTime, rbnCesEplCfgThreshold=rbnCesEplCfgThreshold, rbnCesEplCfgRowStatus=rbnCesEplCfgRowStatus, rbnCesStatsEgressErrorEvents=rbnCesStatsEgressErrorEvents, rbnCesCfgConsecPktsInSync=rbnCesCfgConsecPktsInSync, rbnCesCfgPktLatency=rbnCesCfgPktLatency, rbnCesStatsEgressDeniedPkts=rbnCesStatsEgressDeniedPkts, rbnCesSlaInfoTotalOutageTime=rbnCesSlaInfoTotalOutageTime, rbnCesMIBObjects=rbnCesMIBObjects, rbnCesCfgTrunkCtl=rbnCesCfgTrunkCtl, rbnCesCardAlarmNotificationEnable=rbnCesCardAlarmNotificationEnable, rbnCesSlaInfoTotalUpTime=rbnCesSlaInfoTotalUpTime, rbnCesEplStatsGroup=rbnCesEplStatsGroup, rbnCesEplStatsCount=rbnCesEplStatsCount, rbnCesStatsEgressMisOrderPkts=rbnCesStatsEgressMisOrderPkts, rbnCesMIBGroups=rbnCesMIBGroups, rbnCesEplStatsTotalFailureRate=rbnCesEplStatsTotalFailureRate, PYSNMP_MODULE_ID=rbnCesMIB, rbnCesMIB=rbnCesMIB, rbnCesSlaInfoOutageCount=rbnCesSlaInfoOutageCount, rbnCesEplStatsReset=rbnCesEplStatsReset, rbnCesStatsEgressJtrBfrOverrunPkts=rbnCesStatsEgressJtrBfrOverrunPkts, rbnCesEplCfgAdminStatus=rbnCesEplCfgAdminStatus, rbnCesSlaInfoResetAll=rbnCesSlaInfoResetAll, rbnCesMIBCompliance=rbnCesMIBCompliance, rbnCesEplStatsTotalCircuitTime=rbnCesEplStatsTotalCircuitTime, rbnCesCardAlarmEntry=rbnCesCardAlarmEntry, rbnCesEplCfgGroup=rbnCesEplCfgGroup, rbnCesCardAlarmTable=rbnCesCardAlarmTable, rbnCesStatsEgressOutOfBfrDroppedPkts=rbnCesStatsEgressOutOfBfrDroppedPkts, rbnCesCfgAdminStatus=rbnCesCfgAdminStatus, rbnCesEplCfgEntry=rbnCesEplCfgEntry, rbnCesEplStatsEntryTotalPktLossTime=rbnCesEplStatsEntryTotalPktLossTime, rbnCesCfgEntry=rbnCesCfgEntry, rbnCesEplStatsTable=rbnCesEplStatsTable, rbnCesEplStatsEntryTime=rbnCesEplStatsEntryTime, rbnCesStatsGroup=rbnCesStatsGroup, rbnCesStatsTable=rbnCesStatsTable, rbnCesCfgGroup=rbnCesCfgGroup, rbnCesStatsEgressWindowSwitchovers=rbnCesStatsEgressWindowSwitchovers, rbnCesSlaInfoExitLatestOutage=rbnCesSlaInfoExitLatestOutage, rbnCesCfgJtrBfrDepth=rbnCesCfgJtrBfrDepth, rbnCesSlaInfoEntryLatestOutage=rbnCesSlaInfoEntryLatestOutage, rbnCesCfgIndex=rbnCesCfgIndex, rbnCesStatsEgressDuplicatePkts=rbnCesStatsEgressDuplicatePkts, rbnCesStatsEgressMissingPkts=rbnCesStatsEgressMissingPkts, rbnCesCfgRowStatus=rbnCesCfgRowStatus, rbnCesEplStatsExitTotalPktLossTime=rbnCesEplStatsExitTotalPktLossTime, rbnCesSlaInfoReset=rbnCesSlaInfoReset, rbnCesStatsEntry=rbnCesStatsEntry, rbnCesStatsEgressRemoteLossPkts=rbnCesStatsEgressRemoteLossPkts, rbnCesEplStatsIndex=rbnCesEplStatsIndex, rbnCesEplCfgIndex=rbnCesEplCfgIndex, rbnCesSlaInfoTable=rbnCesSlaInfoTable, rbnCesCfgTable=rbnCesCfgTable, rbnCesSlaInfoIndex=rbnCesSlaInfoIndex, rbnCesStatsEgressMalformedPkts=rbnCesStatsEgressMalformedPkts)
