#
# PySNMP MIB module XDLC-OPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XDLC-OPT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:42:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter32, ModuleIdentity, Integer32, ObjectIdentity, enterprises, iso, Bits, NotificationType, Unsigned32, IpAddress, Counter64, TimeTicks, mgmt, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter32", "ModuleIdentity", "Integer32", "ObjectIdentity", "enterprises", "iso", "Bits", "NotificationType", "Unsigned32", "IpAddress", "Counter64", "TimeTicks", "mgmt", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codex = MibIdentifier((1, 3, 6, 1, 4, 1, 449))
cdxProductSpecific = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2))
cdx6500 = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1))
cdx6500Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2))
cdx6500CfgProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1))
cdx6500PCTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1))
cdx6500PCTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3))
cdx6500Statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3))
cdx6500StatProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1))
cdx6500PSTPortProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1))
cdx6500PSTStationProtocolGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3))
cdx6500Controls = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4))
cdx6500ContXDLC = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7))
class Counter16(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class DisplayString(OctetString):
    pass

cdx6500PPCTXDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13), )
if mibBuilder.loadTexts: cdx6500PPCTXDLCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTXDLCPortTable.setDescription('All of the configuration parameters relevant to the XDLC port table.')
cdx6500PPCTXDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcpCfgPortNumber"))
if mibBuilder.loadTexts: cdx6500PPCTXDLCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPCTXDLCPortEntry.setDescription('A row of XDLC Port configuration parameters.')
cdx6500xdlcpCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCfgPortNumber.setDescription('XDLC Port Number.')
cdx6500xdlcpPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPortControl.setDescription('Specify any of the following port control options: NONE - no option specified. MB - raise Pin 22 when the port becomes disabled.')
cdx6500xdlcpTxCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("nrz", 0), ("nrzi", 1), ("newvalNrz", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTxCoding.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpTxCoding.setDescription("This is the data encoding used on the XDLC link. nrz - Non Return to Zero. nrzi - Non Return to Zero Inverted. newvalNrz - same functionality as 'nrz', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcpLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("fdx", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpLineType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpLineType.setDescription('Type of line, indicates whether half duplex or full duplex signals are being generated. fdx - communications occuring in both directions simultaneously between devices. Only Full Duplex operation is currently supported.')
cdx6500xdlcpTxType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("tws", 0), ("twa", 1), ("newvalTws", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTxType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpTxType.setDescription("This is the transmission mode used on the line. twa - Two Way Alternate used by most controllers. tws - Two Way Simultaneous. newvalTws - same functionality as 'tws', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcpClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("int", 0), ("ext", 1), ("newvalInt", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpClockSource.setDescription("int - Internal clock source. ext - External clock source. newvalInt - same functionality as 'int', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcpClockSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1200, 80000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpClockSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpClockSpeed.setDescription('This is the speed of the port in bits per second, when using internal clocking.')
cdx6500xdlcpStationCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpStationCnt.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpStationCnt.setDescription('This is the number of stations on the XDLC line.')
cdx6500xdlcpPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPollTimer.setDescription('Worst case delay for a slave to respond to a poll frame sent by the master, including modem turn around time, etc. Value in 10ths of second ( 30 = 3.0 seconds ).')
cdx6500xdlcpPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 250))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPollPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPollPeriod.setDescription('Time in milliseconds between polls when no data is exchanged.')
cdx6500xdlcpTries = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTries.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpTries.setDescription('Maximum number of attempts to complete a transmission.')
cdx6500xdlcpPortOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPortOptions.setDescription('Select options on this XDLC port as follows: NONE - no option specified.')
cdx6500xdlcpPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPortAddress.setDescription('When an XDLC port makes a call, this address is inserted into the calling address field.')
cdx6500xdlcpRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRestartTimer.setDescription('Restart-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500xdlcpResetTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpResetTimer.setDescription('Reset-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500xdlcpCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCallTimer.setDescription('Call-Request timeout timer in seconds. If timer expires, call is cleared.')
cdx6500xdlcpClearTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpClearTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpClearTimer.setDescription('Clear-Request timeout timer in seconds. If timer expires, request is sent again.')
cdx6500xdlcpMaxFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMaxFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpMaxFrameSize.setDescription('Maximum size (in bytes) of a frame, excluding the frame header and CRC for SDLC frames. This parameter is Not effective on MX25 type stations.')
cdx6500xdlcpElectricalInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("v24", 1), ("v35", 2), ("v36", 3), ("x21", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpElectricalInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpElectricalInterfaceType.setDescription('Specify the Electrical Interface Type: V.24 - V.24 Electrical Interface Type V.35 - V.35 Electrical Interface Type V.36 - V.36 Electrical Interface Type X.21 - X.21 Electrical Interface Type NONE - Electrically disabled')
cdx6500xdlcpV24ElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ri", 1), ("tm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpV24ElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpV24ElectricalInterfaceOption.setDescription('Specify the Pin 22 option: RI - V.24 uses Pin 22 for Ring Indicator output signal TM - V.24 uses Pin 22 for Test Mode input signal')
cdx6500xdlcpHighSpeedElectricalInterfaceOption = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 1, 13, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("xover", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpHighSpeedElectricalInterfaceOption.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpHighSpeedElectricalInterfaceOption.setDescription('Specify the cable type: NONE - V.35/V.36/X.21 DCE with straight through cable XOVER - V.35/V.36/X.21 DCE with crossover adapter cable')
cdx6500PPSTXDLCPortTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13), )
if mibBuilder.loadTexts: cdx6500PPSTXDLCPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTXDLCPortTable.setDescription('All of the statistics parameters relevant to the XDLC Port table.')
cdx6500PPSTXDLCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcpStatsPortNumber"))
if mibBuilder.loadTexts: cdx6500PPSTXDLCPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500PPSTXDLCPortEntry.setDescription('A row of XDLC Port statistics parameters.')
cdx6500xdlcpStatsPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpStatsPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpStatsPortNumber.setDescription('Specifies a specific port (physical port number) in the node.')
cdx6500xdlcpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 50))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("busyOut", 2), ("up", 3), ("down", 4), ("newvalDisabled", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPortStatus.setDescription("Specifies the current port status. disabled : The port is disabled by user. enabled : The port is enabled by user. busyOut : The port is busy outed by user. up : At least one station is responding to polls. down : None of the stations are responding to polls. newvalDisabled : same functionality as 'disabled', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcpPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPortSpeed.setDescription('The measured port speed in bits per second.')
cdx6500xdlcpUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUtilizationIn.setDescription('Indicates a percentage of the port recources that are currently in use from the line to the port.')
cdx6500xdlcpUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUtilizationOut.setDescription('Indicates a percentage of the port recources that are currently in use from the port to the line.')
cdx6500xdlcpCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCharInTotal.setDescription('Total number of characters processed until now, not including header characters.')
cdx6500xdlcpCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCharOutTotal.setDescription('Total number of characters processed until now, not including header characters.')
cdx6500xdlcpCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCharsInPerSec.setDescription('The average number of characters received per second.')
cdx6500xdlcpCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCharsOutPerSec.setDescription('The average number of characters transmitted per second.')
cdx6500xdlcpFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpFrameInTotal.setDescription('Total number of MX25 and SDLC frames processed until now.')
cdx6500xdlcpFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpFrameOutTotal.setDescription('Total number of MX25 and SDLC frames processed until now.')
cdx6500xdlcpFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpFramesInPerSec.setDescription('The average number of frames received per second.')
cdx6500xdlcpFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpFramesOutPerSec.setDescription('The average number of frames transmitted per second.')
cdx6500xdlcpCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 14), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpCRCErrors.setDescription('Total number of CRC errors counted by the I/O driver.')
cdx6500xdlcpOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 15), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpOverrunErrors.setDescription('Total number of overrun errors counted by the I/O driver.')
cdx6500xdlcpUnderrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 16), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUnderrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUnderrunErrors.setDescription('Total number of overrun errors counted by the I/O driver.')
cdx6500xdlcpRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRNRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRNRFramesIn.setDescription('Indicates the total number of RNR frames received.')
cdx6500xdlcpRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRNRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRNRFramesOut.setDescription('Indicates the total number of RNR frames transmitted.')
cdx6500xdlcpRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRRFramesIn.setDescription('Indicates the total number of RR frames received.')
cdx6500xdlcpRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRRFramesOut.setDescription('Indicates the total number of RR frames transmitted.')
cdx6500xdlcpREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpREJFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpREJFramesIn.setDescription('Indicates the total number of REJ frames received.')
cdx6500xdlcpREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpREJFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpREJFramesOut.setDescription('Indicates the total number of REJ frames transmitted.')
cdx6500xdlcpMX25StationsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsUp.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsUp.setDescription('Number of MX.25 stations up.')
cdx6500xdlcpMX25StationsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsDown.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsDown.setDescription('Number of MX.25 stations down.')
cdx6500xdlcpMX25StationsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsDisabled.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpMX25StationsDisabled.setDescription('Number of MX.25 stations disabled.')
cdx6500xdlcpSDLCStationsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsUp.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsUp.setDescription('Number of SDLC stations up.')
cdx6500xdlcpSDLCStationsDown = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsDown.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsDown.setDescription('Number of SDLC stations down.')
cdx6500xdlcpSDLCStationsDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsDisabled.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpSDLCStationsDisabled.setDescription('Number of SDLC stations disabled.')
cdx6500xdlcpStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpStateChange.setDescription('The date and time when the link entered the current state.')
cdx6500xdlcpLinkDowns = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 30), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpLinkDowns.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpLinkDowns.setDescription('Total number of times link has made a transition from the UP state to the DOWN state.')
cdx6500xdlcpPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpPacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpPacketsQueued.setDescription('Total number of packets queued at the XDLC protocol layer by the transmitter.')
cdx6500xdlcpSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSNRMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpSNRMInFrames.setDescription('Total number of SNRM frames received until the present time.')
cdx6500xdlcpSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpSNRMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpSNRMOutFrames.setDescription('Total number of SNRM frames transmitted until the present time.')
cdx6500xdlcpUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUAInFrames.setDescription('Total number of UA frames received until the present time.')
cdx6500xdlcpUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUAOutFrames.setDescription('Total number of UA frames transmitted until the present time.')
cdx6500xdlcpDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpDMInFrames.setDescription('Total number of DM frames received until the present time.')
cdx6500xdlcpDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpDMOutFrames.setDescription('Total number of DM frames transmitted until the present time.')
cdx6500xdlcpXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXIDInFrames.setDescription('Total number of XID frames received until the present time.')
cdx6500xdlcpXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXIDOutFrames.setDescription('Total number of XID frames transmitted until the present time.')
cdx6500xdlcpDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDISCInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpDISCInFrames.setDescription('Total number of DISC frames received until the present time.')
cdx6500xdlcpDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpDISCOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpDISCOutFrames.setDescription('Total number of DISC frames transmitted until the present time.')
cdx6500xdlcpRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRDInFrames.setDescription('Total number of RD frames received until the present time.')
cdx6500xdlcpRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpRDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpRDOutFrames.setDescription('Total number of RD frames transmitted until the present time.')
cdx6500xdlcpFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpFRMRInFrames.setDescription('Total number of FRMR frames received until the present time.')
cdx6500xdlcpFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpFRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpFRMROutFrames.setDescription('Total number of FRMR frames transmitted until the present time.')
cdx6500xdlcpUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUPInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUPInFrames.setDescription('Total number of UP frames received until the present time.')
cdx6500xdlcpUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpUPOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpUPOutFrames.setDescription('Total number of UP frames transmitted until the present time.')
cdx6500xdlcpTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTESTInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpTESTInFrames.setDescription('Total number of TEST frames received until the present time.')
cdx6500xdlcpTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpTESTOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpTESTOutFrames.setDescription('Total number of TEST frames transmitted until the present time.')
cdx6500xdlcpXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDNullInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXIDNullInFrames.setDescription('Total number of XID Null frames received until the present time.')
cdx6500xdlcpXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXIDNullOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXIDNullOutFrames.setDescription('Total number of XID Null frames transmitted until the present time.')
cdx6500xdlcpXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID0InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXID0InFrames.setDescription('Total number of XID Type 0 frames received until the present time.')
cdx6500xdlcpXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID0OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXID0OutFrames.setDescription('Total number of XID Type 0 frames transmitted until the present time.')
cdx6500xdlcpXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID1InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXID1InFrames.setDescription('Total number of XID Type 1 frames received until the present time.')
cdx6500xdlcpXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID1OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXID1OutFrames.setDescription('Total number of XID Type 1 frames transmitted until the present time.')
cdx6500xdlcpXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID3InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXID3InFrames.setDescription('Total number of XID Type 3 frames received until the present time.')
cdx6500xdlcpXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 1, 13, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcpXID3OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcpXID3OutFrames.setDescription('Total number of XID Type 3 frames transmitted until the present time.')
cdx6500SPCTXDLCStationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5))
cdx6500SPCTXDLCStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1), )
if mibBuilder.loadTexts: cdx6500SPCTXDLCStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTXDLCStnTable.setDescription('All of the configuration parameters relevant to the XDLC station table.')
cdx6500SPCTXDLCStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsCfgPortNumber"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsCfgStationNumber"))
if mibBuilder.loadTexts: cdx6500SPCTXDLCStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTXDLCStnEntry.setDescription('A row of XDLC station configuration parameters.')
cdx6500xdlcsCfgPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsCfgPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsCfgPortNumber.setDescription('XDLC Port Number.')
cdx6500xdlcsCfgStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsCfgStationNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsCfgStationNumber.setDescription('The number of the station on the multidrop line. Also used for routing purposes.')
cdx6500xdlcsStationType = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("sdlc", 0), ("mx25", 1), ("newvalSdlc", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsStationType.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsStationType.setDescription("Enter the type of station to configure. sdlc - SDLC Station. mx25 - MX25 Station. newvalSdlc - same functionality as 'sdlc', new enumeration added for RFC1155 compatibility.")
cdx6500SPCTXDLCSDLCStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2), )
if mibBuilder.loadTexts: cdx6500SPCTXDLCSDLCStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTXDLCSDLCStnTable.setDescription('All of the configuration parameters relevant to the XDLC SDLC station table.')
cdx6500SPCTXDLCSDLCStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcCfgPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcCfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTXDLCSDLCStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTXDLCSDLCStnEntry.setDescription('A row of XDLC SDLC station configuration parameters.')
cdx6500xdlcsdlcCfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCfgPortNum.setDescription('XDLC Port Number.')
cdx6500xdlcsdlcCfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCfgStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCfgStationNum.setDescription('The number of the station on the multidrop line. Also used for routing purposes.')
cdx6500xdlcsdlcStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcStationAddress.setDescription('The station address on the multidrop line.')
cdx6500xdlcsdlcFrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameWinSize.setDescription('Frame level window size must be set to the same value in devices at each end of the link.')
cdx6500xdlcsdlcAutocallMnem = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcAutocallMnem.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcAutocallMnem.setDescription('This mnemonic references the remote address which will be called when polling activity is detected on the sdlc line.')
cdx6500xdlcsdlcProtocolID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcProtocolID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcProtocolID.setDescription('The protocol identifier is the first four bytes of the call user data. If not configured the PAD will use C3000000 as the protocol ID in the call.')
cdx6500xdlcsdlcCUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCUG.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCUG.setDescription('The station may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number, separated by a comma. (e.g. 12,34,56,09,02,03). Two hyphens following each other indicate no CUG Membership. 00-99 - CUG Membership.')
cdx6500xdlcsdlcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcOptions.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcOptions.setDescription('Select options on this SDLC station as follows: NONE - no option specified CUG - check closed user group in incoming calls, and insert closed user group facility in outgoing calls. QRRs - HPAD sends QRR after QLLC link comes up XIDs - TPAD responds to QXIDs with XID configured for this station. XIDs are not sent to the Cluster Controller. XID3 - HPAD and TPAD will pass XIDs transparently, This option should not be set if XIDs option is selected. Corresponding station options must be XID3. DISCs - TPAD sends a DISC frame when station goes down. The DISC may be retransmitted up to Tries times, if the Cluster Controller does not respond, before sending a SNRM. RNRs - TPAD initially polls with RNR until a data packet or an QRR is received by the QLLC station on the TPAD side. DFC - the station will wait the amount of time specified by the call timer before placing the first call.')
cdx6500xdlcsdlcXID = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID.setDescription("With this option selected, the TPAD's response to a QXID will contain the XID identification value defined in this parameter instead of from an exchange of identifications with the cluster controller. XIDs are not sent to the cluster controller.")
cdx6500xdlcsdlcStnSubaddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStnSubaddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcStnSubaddress.setDescription('The calling subaddress is appended to the port address to create the calling address in the autocall generated.')
cdx6500xdlcsdlcBillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcBillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcBillingRecords.setDescription("This controls whether billing (accounting) records will be created for calls on this port. newvalOff - same functionality as 'off', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcsdlcProtectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 50))).clone(namedValues=NamedValues(("none", 0), ("cpOnly", 1), ("fullDcp", 2), ("newvalNone", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcProtectionLevel.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcProtectionLevel.setDescription("This specifies the level of data or connection protection which will be applied to calls to or from this port. The actual level for a call will be negotiated to the lesser of this level and the level configured for the other end of the call. none - No protection. cpOnly - Connection protection only. fullDcp - Full data and connection protection. newvalNone - same functionality as 'none', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcsdlcReconnectTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcReconnectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcReconnectTimeout.setDescription('This specifies the number of seconds that DCP on the originating side will wait between reconnection attempts.')
cdx6500xdlcsdlcReconnectLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcReconnectLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcReconnectLimit.setDescription('This specifies the number of times that DCP on the originating side will attempt to reconnect before clearing the call. If 0 is entered, it will not attempt to reconnect.')
cdx6500xdlcsdlcCallTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCallTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCallTimer.setDescription('This specifies the time before the next call is made. If 0 is entered, the time to the next call is handled internally. The time is in seconds.')
cdx6500xdlcsdlcIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcIdleTimer.setDescription('The Link Idle Timer is used by the SNA Dial on Demand feature for determining how long the station should wait for a data frame before bringing the X.25 call down. If a 0 is entered, the call will never be brought down. The time is in seconds.')
cdx6500xdlcsdlcVerConnTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcVerConnTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcVerConnTimer.setDescription('The Verify Connection Timer is used by the SNA Dial on Demand feature for periodically verifying that the connection to the remote station is still active, after the link has been suspended. The timer specifies how long the the station waits before verifying the connection. If a 0 is entered, the connection will never be verified. The time is in seconds.')
cdx6500xdlcsdlcUnsusWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUnsusWaitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUnsusWaitTimer.setDescription('The Unsuspend Wait Timer is used by the SNA Dial on Demand feature for determining how long the station will wait in LINK-UNSUSPENDING state after receiving a call request before bringing the station down. If a 0 is entered, the station waits in LINK-UNSUSPENDED state forever. Time is in seconds.')
cdx6500SPCTXDLCMX25StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3), )
if mibBuilder.loadTexts: cdx6500SPCTXDLCMX25StnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTXDLCMX25StnTable.setDescription('All of the configuration parameters relevant to the XDLC MX.25 station table.')
cdx6500SPCTXDLCMX25StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcmx25CfgPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcmx25CfgStationNum"))
if mibBuilder.loadTexts: cdx6500SPCTXDLCMX25StnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPCTXDLCMX25StnEntry.setDescription('A row of XDLC MX.25 station configuration parameters.')
cdx6500xdlcmx25CfgPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CfgPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CfgPortNum.setDescription('XDLC Port Number.')
cdx6500xdlcmx25CfgStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CfgStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CfgStationNum.setDescription('The number of the station on the multidrop line. Also used for routing purposes.')
cdx6500xdlcmx25StationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25StationAddress.setDescription('The station address on the multidrop line.')
cdx6500xdlcmx25PVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PVCChannels.setDescription('Number of logical channels used for Permanent Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs. PVC connections must be configured in the PVC Table.')
cdx6500xdlcmx25StartingPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StartingPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25StartingPVC.setDescription('This is the starting logical channel number for the Permanent Virtual Circuits on this link. Not used if the number of PVCs = 0.')
cdx6500xdlcmx25SVCChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25SVCChannels.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25SVCChannels.setDescription('Number of logical channels used in Switched Virtual Circuits. The total number of PVC and SVC channels on a link should be kept as small as possible and consistent with needs.')
cdx6500xdlcmx25StartingSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StartingSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25StartingSVC.setDescription('This is the starting logical channel number for the Switched Virtual Circuits on this link. Not used if the number of SVCs = 0.')
cdx6500xdlcmx25FrameWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameWinSize.setDescription('Frame level window size must be set to the same value in devices at each end of the link.')
cdx6500xdlcmx25PacketWinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PacketWinSize.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PacketWinSize.setDescription('Packet level window size must be set to the same value in devices at each end of the link.')
cdx6500xdlcmx25Options = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25Options.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25Options.setDescription('Select options on this MX.25 port as follows: NONE - no option specified. HOLD - hold calls over link restart. CUG - check closed user group; otherwise, CUG passes transparently. INL - inter-node link. Link goes to another 6500 device. DELAY - enable delay path trace on this link. (link must be connected to Rel. 4.xx node) Any combination of the above specified by summing (e.g. HOLD+CUG+. . .).')
cdx6500xdlcmx25RCDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RCDestination.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RCDestination.setDescription('All calls entering this port will be routed to the destination specified in this parameter, irrespective of route selection table entries. For example, to route calls to port 1, use P1. To route calls to port 2, station 4, use P2S4. Blank this field to disable this function.')
cdx6500xdlcmx25CUG = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CUG.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CUG.setDescription('The port may be a member of up to 8 different Closed User Groups (CUGs). Each CUG membership must be a two digit number (except --) and separated by a comma. (e.g. 12,34,56,09,02,03). -- - No CUG Membership 00-99 - CUG Membership')
cdx6500xdlcmx25BillingRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 50))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("newvalOff", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25BillingRecords.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25BillingRecords.setDescription("This controls whether billing (accounting) records will be created for calls on this port. newvalOff - same functionality as 'off', new enumeration added for RFC1155 compatibility.")
cdx6500xdlcmx25UpperQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UpperQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25UpperQueue.setDescription('This is the maximum number of data packets a channel on this port will queue for transmission before invoking flow control to the attached channel.')
cdx6500xdlcmx25LowerQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 2, 1, 3, 5, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LowerQueue.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LowerQueue.setDescription('This is the number of data packets a channel on this port will have queued for transmission when it releases flow control to the attached channel.')
cdx6500SPSTXDLCStationTable = MibIdentifier((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5))
cdx6500SPSTXDLCSDLCStnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1), )
if mibBuilder.loadTexts: cdx6500SPSTXDLCSDLCStnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTXDLCSDLCStnTable.setDescription('All of the statistics parameters relevant to the XDLC SDLC Station table.')
cdx6500SPSTXDLCSDLCStnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcStatsPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsdlcStatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTXDLCSDLCStnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTXDLCSDLCStnEntry.setDescription('A row of XDLC SDLC Station statistics parameters.')
cdx6500xdlcsdlcStatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcStatsPortNum.setDescription('Refers to the physical port number.')
cdx6500xdlcsdlcStatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcStatsStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcStatsStationNum.setDescription('Station reference number.')
cdx6500xdlcsdlcUtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUtilizationIn.setDescription('Indicates the percentage of station resources currently in use from the line to the port.')
cdx6500xdlcsdlcUtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUtilizationOut.setDescription('Indicates the percentage of station resources currently in use from the port to the line.')
cdx6500xdlcsdlcCharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharInTotal.setDescription('Total number of characters processed until now, not including header characters.')
cdx6500xdlcsdlcCharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharOutTotal.setDescription('Total number of characters processed until now, not including header characters.')
cdx6500xdlcsdlcCharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharsInPerSec.setDescription('The average number of characters received per second.')
cdx6500xdlcsdlcCharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcCharsOutPerSec.setDescription('The average number of characters transmitted per second.')
cdx6500xdlcsdlcPacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcPacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcPacketsQueued.setDescription('The total number of packets queued at the SDLC protocol layer.')
cdx6500xdlcsdlcFrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameInTotal.setDescription('Total number of MX25 and SDLC frames processed until now.')
cdx6500xdlcsdlcFrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFrameOutTotal.setDescription('Total number of MX25 and SDLC frames processed until now.')
cdx6500xdlcsdlcFramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFramesInPerSec.setDescription('The average number of frames received per second.')
cdx6500xdlcsdlcFramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFramesOutPerSec.setDescription('The average number of frames transmitted per second.')
cdx6500xdlcsdlcRNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRNRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcRNRFramesIn.setDescription('Indicates the total number of RNR frames received.')
cdx6500xdlcsdlcRNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRNRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcRNRFramesOut.setDescription('Indicates the total number of RNR frames transmitted.')
cdx6500xdlcsdlcRRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcRRFramesIn.setDescription('Indicates the total number of RR frames received.')
cdx6500xdlcsdlcRRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcRRFramesOut.setDescription('Indicates the total number of RR frames transmitted.')
cdx6500xdlcsdlcREJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcREJFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcREJFramesIn.setDescription('Indicates the total number of REJ frames received.')
cdx6500xdlcsdlcREJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcREJFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcREJFramesOut.setDescription('Indicates the total number of REJ frames transmitted.')
cdx6500xdlcsdlcQLLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQLLCState.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQLLCState.setDescription('Indicates the status of the QLLC layer: INOPERATIVE : Noconnection exists with the station. CLOSED : Call connected. OPENING : Setting up session. OPENED : Ready for operation. CLOSING : Disconnect in process.')
cdx6500xdlcsdlcQRRIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 21), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRRIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRRIn.setDescription('Total number of QRR packets received until now.')
cdx6500xdlcsdlcQRROut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 22), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRROut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRROut.setDescription('Total number of QRR packets transmitted until now.')
cdx6500xdlcsdlcSNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcSNRMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcSNRMInFrames.setDescription('Total number of SNRM frames received until the present time.')
cdx6500xdlcsdlcSNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcSNRMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcSNRMOutFrames.setDescription('Total number of SNRM frames transmitted until the present time.')
cdx6500xdlcsdlcUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUAInFrames.setDescription('Total number of UA frames received until the present time.')
cdx6500xdlcsdlcUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUAOutFrames.setDescription('Total number of UA frames transmitted until the present time.')
cdx6500xdlcsdlcDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcDMInFrames.setDescription('Total number of DM frames received until the present time.')
cdx6500xdlcsdlcDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcDMOutFrames.setDescription('Total number of DM frames transmitted until the present time.')
cdx6500xdlcsdlcXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDInFrames.setDescription('Total number of XID frames received until the present time.')
cdx6500xdlcsdlcXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDOutFrames.setDescription('Total number of XID frames transmitted until the present time.')
cdx6500xdlcsdlcDISCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDISCInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcDISCInFrames.setDescription('Total number of DISC frames received until the present time.')
cdx6500xdlcsdlcDISCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcDISCOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcDISCOutFrames.setDescription('Total number of DISC frames transmitted until the present time.')
cdx6500xdlcsdlcRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcRDInFrames.setDescription('Total number of RD frames received until the present time.')
cdx6500xdlcsdlcRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcRDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcRDOutFrames.setDescription('Total number of RD frames transmitted until the present time.')
cdx6500xdlcsdlcFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFRMRInFrames.setDescription('Total number of FRMR frames received until the present time.')
cdx6500xdlcsdlcFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcFRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcFRMROutFrames.setDescription('Total number of FRMR frames transmitted until the present time.')
cdx6500xdlcsdlcUPInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUPInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUPInFrames.setDescription('Total number of UP frames received until the present time.')
cdx6500xdlcsdlcUPOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcUPOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcUPOutFrames.setDescription('Total number of UP frames transmitted until the present time.')
cdx6500xdlcsdlcTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcTESTInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcTESTInFrames.setDescription('Total number of TEST frames received until the present time.')
cdx6500xdlcsdlcTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcTESTOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcTESTOutFrames.setDescription('Total number of TEST frames transmitted until the present time.')
cdx6500xdlcsdlcQSMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 41), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSMInFrames.setDescription('Total number of QSM packets received until the present time.')
cdx6500xdlcsdlcQSMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 42), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSMOutFrames.setDescription('Total number of QSM packets transmitted until the present time.')
cdx6500xdlcsdlcQUAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 43), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQUAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQUAInFrames.setDescription('Total number of QUA packets received until the present time.')
cdx6500xdlcsdlcQUAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 44), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQUAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQUAOutFrames.setDescription('Total number of QUA packets transmitted until the present time.')
cdx6500xdlcsdlcQRDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 45), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRDInFrames.setDescription('Total number of QRD packets received until the present time.')
cdx6500xdlcsdlcQRDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 46), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRDOutFrames.setDescription('Total number of QRD packets transmitted until the present time.')
cdx6500xdlcsdlcQFRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 47), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQFRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQFRMRInFrames.setDescription('Total number of QFRMR packets received until the present time.')
cdx6500xdlcsdlcQFRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 48), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQFRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQFRMROutFrames.setDescription('Total number of QFRMR packets transmitted until the present time.')
cdx6500xdlcsdlcQXIDInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 49), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQXIDInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQXIDInFrames.setDescription('Total number of QXID packets received until the present time.')
cdx6500xdlcsdlcQXIDOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 50), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQXIDOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQXIDOutFrames.setDescription('Total number of QXID packets transmitted until the present time.')
cdx6500xdlcsdlcQDCInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 51), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDCInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDCInFrames.setDescription('Total number of QDC packets received until the present time.')
cdx6500xdlcsdlcQDCOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 52), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDCOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDCOutFrames.setDescription('Total number of QDC packets transmitted until the present time.')
cdx6500xdlcsdlcQDMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 53), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDMInFrames.setDescription('Total number of QDM packets received until the present time.')
cdx6500xdlcsdlcQDMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 54), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQDMOutFrames.setDescription('Total number of QDM packets transmitted until the present time.')
cdx6500xdlcsdlcQTESTInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 55), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQTESTInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQTESTInFrames.setDescription('Total number of QTEST packets received until the present time.')
cdx6500xdlcsdlcQTESTOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 56), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQTESTOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQTESTOutFrames.setDescription('Total number of QTEST packets transmitted until the present time.')
cdx6500xdlcsdlcQSSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 57), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSSInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSSInFrames.setDescription('Total number of QSS packets received until the present time.')
cdx6500xdlcsdlcQSSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 58), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSSOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQSSOutFrames.setDescription('Total number of QSS packets transmitted until the present time.')
cdx6500xdlcsdlcQRSInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 59), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRSInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRSInFrames.setDescription('Total number of QRS packets received until the present time.')
cdx6500xdlcsdlcQRSOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 60), Counter16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRSOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcQRSOutFrames.setDescription('Total number of QRS packets transmitted until the present time.')
cdx6500xdlcsdlcXIDNullInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDNullInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDNullInFrames.setDescription('Total number of XID Null frames received until the present time.')
cdx6500xdlcsdlcXIDNullOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDNullOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXIDNullOutFrames.setDescription('Total number of XID Null frames transmitted until the present time.')
cdx6500xdlcsdlcXID0InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID0InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID0InFrames.setDescription('Total number of XID Type 0 frames received until the present time.')
cdx6500xdlcsdlcXID0OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID0OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID0OutFrames.setDescription('Total number of XID Type 0 frames transmitted until the present time.')
cdx6500xdlcsdlcXID1InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID1InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID1InFrames.setDescription('Total number of XID Type 1 frames received until the present time.')
cdx6500xdlcsdlcXID1OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID1OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID1OutFrames.setDescription('Total number of XID Type 1 frames transmitted until the present time.')
cdx6500xdlcsdlcXID3InFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID3InFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID3InFrames.setDescription('Total number of XID Type 3 frames received until the present time.')
cdx6500xdlcsdlcXID3OutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID3OutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcXID3OutFrames.setDescription('Total number of XID Type 3 frames transmitted until the present time.')
cdx6500xdlcsdlcVSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcVSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcVSNumber.setDescription('Next VS seuqunce number this station expects.')
cdx6500xdlcsdlcVRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcVRNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcVRNumber.setDescription('Next VR seuqunce number this station expects.')
cdx6500xdlcsdlcNRNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcNRNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcNRNumber.setDescription('Next NR seuqunce number this station expects.')
cdx6500xdlcsdlcNSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 1, 1, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcsdlcNSNumber.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsdlcNSNumber.setDescription('Next NS seuqunce number this station expects.')
cdx6500SPSTXDLCMX25StnTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2), )
if mibBuilder.loadTexts: cdx6500SPSTXDLCMX25StnTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTXDLCMX25StnTable.setDescription('All of the statistics parameters relevant to the XDLC MX.25 Station table.')
cdx6500SPSTXDLCMX25StnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcmx25StatsPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcmx25StatsStationNum"))
if mibBuilder.loadTexts: cdx6500SPSTXDLCMX25StnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500SPSTXDLCMX25StnEntry.setDescription('A row of XDLC MX.25 Station statistics parameters.')
cdx6500xdlcmx25StatsPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StatsPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25StatsPortNum.setDescription('Refers to the physical port number.')
cdx6500xdlcmx25StatsStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25StatsStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25StatsStationNum.setDescription('Station reference number.')
cdx6500xdlcmx25UtilizationIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UtilizationIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25UtilizationIn.setDescription('Indicates the percentage of station resources currently in use from the line to the port.')
cdx6500xdlcmx25UtilizationOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UtilizationOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25UtilizationOut.setDescription('Indicates the percentage of station resources currently in use from the port to the line.')
cdx6500xdlcmx25CharInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CharInTotal.setDescription('Total number of characters processed until now, not including frame and packet headers.')
cdx6500xdlcmx25CharOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CharOutTotal.setDescription('Total number of characters processed until now, not including frame and packet headers.')
cdx6500xdlcmx25CharsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CharsInPerSec.setDescription('The average number of characters received per second during the previous minute.')
cdx6500xdlcmx25CharsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CharsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CharsOutPerSec.setDescription('The average number of characters transmitted per second during the previous minute.')
cdx6500xdlcmx25PktInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PktInTotal.setDescription('Total number of data packets passed through the station.')
cdx6500xdlcmx25PktOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PktOutTotal.setDescription('Total number of data packets passed through the station.')
cdx6500xdlcmx25PktsInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktsInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PktsInPerSec.setDescription('The average number of packets received per second during the previous minute.')
cdx6500xdlcmx25PktsOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PktsOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PktsOutPerSec.setDescription('The average number of packets transmitted per second during the previous minute.')
cdx6500xdlcmx25PacketsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25PacketsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25PacketsQueued.setDescription('Total number of packets queued at the MX25 protocol layer.')
cdx6500xdlcmx25FrameInTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameInTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameInTotal.setDescription('Total number of frames processed until now.')
cdx6500xdlcmx25FrameOutTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameOutTotal.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FrameOutTotal.setDescription('Total number of frames processed until now.')
cdx6500xdlcmx25FramesInPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FramesInPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FramesInPerSec.setDescription('The average number of frames received per second during the previous minute.')
cdx6500xdlcmx25FramesOutPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FramesOutPerSec.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FramesOutPerSec.setDescription('The average number of frames transmitted per second during the previous minute.')
cdx6500xdlcmx25RNRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRFramesIn.setDescription('Indicates the total number of RNR frames received.')
cdx6500xdlcmx25RNRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRFramesOut.setDescription('Indicates the total number of RNR frames transmitted.')
cdx6500xdlcmx25RRFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RRFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RRFramesIn.setDescription('Indicates the total number of RR frames received.')
cdx6500xdlcmx25RRFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RRFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RRFramesOut.setDescription('Indicates the total number of RR frames transmitted.')
cdx6500xdlcmx25REJFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25REJFramesIn.setDescription('Indicates the total number of REJ frames received.')
cdx6500xdlcmx25REJFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25REJFramesOut.setDescription('Indicates the total number of REJ frames transmitted.')
cdx6500xdlcmx25DataPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25DataPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25DataPktsIn.setDescription('Indicates the total number of packets received.')
cdx6500xdlcmx25DataPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25DataPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25DataPktsOut.setDescription('Indicates the total number of packets transmitted.')
cdx6500xdlcmx25MaxSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25MaxSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25MaxSVC.setDescription('The maximum number SVC channels used by this station.')
cdx6500xdlcmx25CurrentSVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CurrentSVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CurrentSVC.setDescription('The number of SVC channels currently in use.')
cdx6500xdlcmx25MaxPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25MaxPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25MaxPVC.setDescription('The maximum number PVC channels used by this station.')
cdx6500xdlcmx25CurrentPVC = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25CurrentPVC.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25CurrentPVC.setDescription('The number of PVC channels currently in use.')
cdx6500xdlcmx25InfoInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InfoInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InfoInFrames.setDescription('Indicates the total number of Info frames received.')
cdx6500xdlcmx25InfoOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InfoOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InfoOutFrames.setDescription('Indicates the total number of Info frames transmitted.')
cdx6500xdlcmx25SNRMInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25SNRMInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25SNRMInFrames.setDescription('Indicates the total number of SNRM frames received.')
cdx6500xdlcmx25SNRMOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25SNRMOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25SNRMOutFrames.setDescription('Indicates the total number of SNRM frames transmitted.')
cdx6500xdlcmx25UAInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UAInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25UAInFrames.setDescription('Indicates the total number of UA frames received.')
cdx6500xdlcmx25UAOutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25UAOutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25UAOutFrames.setDescription('Indicates the total number of UA frames transmitted.')
cdx6500xdlcmx25FRMRInFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FRMRInFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FRMRInFrames.setDescription('Indicates the total number of FRMR frames received.')
cdx6500xdlcmx25FRMROutFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25FRMROutFrames.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25FRMROutFrames.setDescription('Indicates the total number of FRMR frames transmitted.')
cdx6500xdlcmx25RRInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RRInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RRInPkts.setDescription('Indicates the total number of RR packets received.')
cdx6500xdlcmx25RROutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RROutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RROutPkts.setDescription('Indicates the total number of RR packets transmitted.')
cdx6500xdlcmx25RNRInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RNRInPkts.setDescription('Indicates the total number of RNR packets received.')
cdx6500xdlcmx25RNROutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25RNROutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25RNROutPkts.setDescription('Indicates the total number of RNR packets transmitted.')
cdx6500xdlcmx25REJInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25REJInPkts.setDescription('Indicates the total number of REJ packets received.')
cdx6500xdlcmx25REJOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25REJOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25REJOutPkts.setDescription('Indicates the total number of REJ packets transmitted.')
cdx6500xdlcmx25InCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InCallReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InCallReqs.setDescription('Indicates the total number of Call Request packets received.')
cdx6500xdlcmx25OutCallReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutCallReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutCallReqs.setDescription('Indicates the total number of Call Request packets transmitted.')
cdx6500xdlcmx25InCallAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InCallAccepts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InCallAccepts.setDescription('Indicates the total number of Call Accept packets received.')
cdx6500xdlcmx25OutCallAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutCallAccepts.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutCallAccepts.setDescription('Indicates the total number of Call Accept packets transmitted.')
cdx6500xdlcmx25InClearReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InClearReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InClearReqs.setDescription('Indicates the total number of Clear Request packets received.')
cdx6500xdlcmx25OutClearReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutClearReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutClearReqs.setDescription('Indicates the total number of Clear Request packets transmitted.')
cdx6500xdlcmx25InClearConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InClearConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InClearConfs.setDescription('Indicates the total number of Clear confirmation packets received.')
cdx6500xdlcmx25OutClearConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutClearConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutClearConfs.setDescription('Indicates the total number of Clear confirmation packets transmitted.')
cdx6500xdlcmx25InInterruptReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InInterruptReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InInterruptReqs.setDescription('Indicates the total number of Interrupt Request packets received.')
cdx6500xdlcmx25OutInterruptReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutInterruptReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutInterruptReqs.setDescription('Indicates the total number of Interrupt Request packets transmitted.')
cdx6500xdlcmx25InInterruptConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InInterruptConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InInterruptConfs.setDescription('Indicates the total number of Interrupt Confimation packets received.')
cdx6500xdlcmx25OutInterruptConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutInterruptConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutInterruptConfs.setDescription('Indicates the total number of Interrupt Confirmation packets transmitted.')
cdx6500xdlcmx25InResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InResetReqs.setDescription('Indicates the total number of Reset Request packets received.')
cdx6500xdlcmx25OutResetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutResetReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutResetReqs.setDescription('Indicates the total number of Reset Request packets transmitted.')
cdx6500xdlcmx25InResetConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InResetConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InResetConfs.setDescription('Indicates the total number of Reset Confimation packets received.')
cdx6500xdlcmx25OutResetConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutResetConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutResetConfs.setDescription('Indicates the total number of Reset Confirmation packets transmitted.')
cdx6500xdlcmx25InRestartReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InRestartReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InRestartReqs.setDescription('Indicates the total number of Restart Request packets received.')
cdx6500xdlcmx25OutRestartReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutRestartReqs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutRestartReqs.setDescription('Indicates the total number of Restart Request packets transmitted.')
cdx6500xdlcmx25InRestartConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InRestartConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InRestartConfs.setDescription('Indicates the total number of Restart Confimation packets received.')
cdx6500xdlcmx25OutRestartConfs = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutRestartConfs.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutRestartConfs.setDescription('Indicates the total number of Restart Confirmation packets transmitted.')
cdx6500xdlcmx25LastInLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LastInLCN.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LastInLCN.setDescription('Channel number of last inbound call.')
cdx6500xdlcmx25InStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25InStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25InStatus.setDescription('Success : Message has been through the network successfully. Process OK, call passed to ROUTE : Inbound call has been processed and passed to Route and is being processed. Failed processing, call cleared : Inbound message was processed, but failed for some reason, and the call has been cleared.')
cdx6500xdlcmx25LICBPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCalledAddr.setDescription('Last inbound call before processing: the X.25 address that was called.')
cdx6500xdlcmx25LICBPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCallingAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCallingAddr.setDescription('Last inbound call before processing: the X.25 address that initiated the call.')
cdx6500xdlcmx25LICBPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPFacilities.setDescription('Last inbound call before processing: the facilities that were requested in the most recent call request packet.')
cdx6500xdlcmx25LICBPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 69), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICBPCUD.setDescription('Last inbound call before processing: Call User Data contains end-user or routing information specific to the network.')
cdx6500xdlcmx25LICAPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCalledAddr.setDescription('Last inbound call after processing: the X.25 address that was called.')
cdx6500xdlcmx25LICAPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCallingAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCallingAddr.setDescription('Last inbound call after processing: the X.25 address that initiated the call.')
cdx6500xdlcmx25LICAPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPFacilities.setDescription('Last inbound call after processing: the facilities that were requested in the most recent call request packet.')
cdx6500xdlcmx25LICAPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LICAPCUD.setDescription('Last inbound call after processing: Call User Data contains end-user or routing information specific to the network.')
cdx6500xdlcmx25LastOutLCN = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LastOutLCN.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LastOutLCN.setDescription('Channel number of last outbound call.')
cdx6500xdlcmx25OutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25OutStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25OutStatus.setDescription('Success : Message has been through the network successfully. Process OK, call passed to ROUTE : Inbound call has been processed and passed to Route and is being processed. Failed processing, call cleared : Inbound message was processed, but failed for some reason, and the call has been cleared.')
cdx6500xdlcmx25LOCBPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCalledAddr.setDescription('Last outbound call before processing: the X.25 address that was called.')
cdx6500xdlcmx25LOCBPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCallingAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCallingAddr.setDescription('Last outbound call before processing: the X.25 address that initiated the call.')
cdx6500xdlcmx25LOCBPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPFacilities.setDescription('Last outbound call before processing: the facilities that were requested in the most recent call request packet.')
cdx6500xdlcmx25LOCBPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCBPCUD.setDescription('Last outbound call before processing: Call User Data contains end-user or routing information specific to the network.')
cdx6500xdlcmx25LOCAPCalledAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCalledAddr.setDescription('Last outbound call after processing: the X.25 address that was called.')
cdx6500xdlcmx25LOCAPCallingAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 81), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCallingAddr.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCallingAddr.setDescription('Last outbound call after processing: the X.25 address that initiated the call.')
cdx6500xdlcmx25LOCAPFacilities = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPFacilities.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPFacilities.setDescription('Last outbound call after processing: the facilities that were requested in the most recent call request packet.')
cdx6500xdlcmx25LOCAPCUD = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 3, 1, 3, 5, 2, 1, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCUD.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcmx25LOCAPCUD.setDescription('Last outbound call after processing: Call User Data contains end-user or routing information specific to the network.')
cdx6500ContXDLCStationTable = MibTable((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1), )
if mibBuilder.loadTexts: cdx6500ContXDLCStationTable.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContXDLCStationTable.setDescription('All of the control parameters relevant to the XDLC Station table.')
cdx6500ContXDLCStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1), ).setIndexNames((0, "XDLC-OPT-MIB", "cdx6500xdlcsContPortNum"), (0, "XDLC-OPT-MIB", "cdx6500xdlcsContStationNum"))
if mibBuilder.loadTexts: cdx6500ContXDLCStationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500ContXDLCStationEntry.setDescription('A row of XDLC Station Control parameters.')
cdx6500xdlcsContPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 54)))
if mibBuilder.loadTexts: cdx6500xdlcsContPortNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsContPortNum.setDescription('XDLC Port Number.')
cdx6500xdlcsContStationNum = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: cdx6500xdlcsContStationNum.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsContStationNum.setDescription('XDLC Station Number')
cdx6500xdlcsContBootStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boot", 1), ("noBoot", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContBootStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsContBootStation.setDescription('Boots the specified XDLC station. boot - Boot Station. noBoot- Do not boot Station.')
cdx6500xdlcsContDisableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("noDisable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContDisableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsContDisableStation.setDescription('Disables the specified XDLC station. disable - Disable Station. noDisable - Do not disable Station.')
cdx6500xdlcsContEnableStation = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("noEnable", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContEnableStation.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsContEnableStation.setDescription('Enables the specified XDLC station. enable - Enable Station noEnable - Not not enable Station')
cdx6500xdlcsContResetStnStats = MibTableColumn((1, 3, 6, 1, 4, 1, 449, 2, 1, 4, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("noReset", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cdx6500xdlcsContResetStnStats.setStatus('mandatory')
if mibBuilder.loadTexts: cdx6500xdlcsContResetStnStats.setDescription('Resets statistics for the specified XDLC station reset - Reset Station Statistics noReset - Do not reset Station Statistics')
mibBuilder.exportSymbols("XDLC-OPT-MIB", cdx6500xdlcpXID1OutFrames=cdx6500xdlcpXID1OutFrames, cdx6500PPSTXDLCPortTable=cdx6500PPSTXDLCPortTable, cdx6500xdlcmx25RNRFramesIn=cdx6500xdlcmx25RNRFramesIn, cdx6500xdlcmx25LICBPCalledAddr=cdx6500xdlcmx25LICBPCalledAddr, cdx6500xdlcpREJFramesIn=cdx6500xdlcpREJFramesIn, cdx6500xdlcpFrameInTotal=cdx6500xdlcpFrameInTotal, cdx6500xdlcsdlcFramesInPerSec=cdx6500xdlcsdlcFramesInPerSec, cdx6500xdlcsdlcQUAInFrames=cdx6500xdlcsdlcQUAInFrames, cdx6500xdlcsdlcQFRMRInFrames=cdx6500xdlcsdlcQFRMRInFrames, cdxProductSpecific=cdxProductSpecific, cdx6500xdlcpFramesOutPerSec=cdx6500xdlcpFramesOutPerSec, cdx6500xdlcmx25PktOutTotal=cdx6500xdlcmx25PktOutTotal, cdx6500xdlcmx25LICAPCUD=cdx6500xdlcmx25LICAPCUD, cdx6500xdlcsdlcFRMROutFrames=cdx6500xdlcsdlcFRMROutFrames, cdx6500xdlcmx25REJFramesOut=cdx6500xdlcmx25REJFramesOut, cdx6500xdlcsdlcDMInFrames=cdx6500xdlcsdlcDMInFrames, cdx6500xdlcmx25SNRMInFrames=cdx6500xdlcmx25SNRMInFrames, cdx6500xdlcsdlcQRSInFrames=cdx6500xdlcsdlcQRSInFrames, cdx6500xdlcmx25OutResetConfs=cdx6500xdlcmx25OutResetConfs, cdx6500xdlcmx25OutInterruptConfs=cdx6500xdlcmx25OutInterruptConfs, cdx6500xdlcmx25REJFramesIn=cdx6500xdlcmx25REJFramesIn, cdx6500xdlcpDISCInFrames=cdx6500xdlcpDISCInFrames, cdx6500xdlcpPortControl=cdx6500xdlcpPortControl, cdx6500xdlcpPacketsQueued=cdx6500xdlcpPacketsQueued, cdx6500SPCTXDLCMX25StnEntry=cdx6500SPCTXDLCMX25StnEntry, cdx6500xdlcpPortAddress=cdx6500xdlcpPortAddress, cdx6500xdlcpRRFramesOut=cdx6500xdlcpRRFramesOut, cdx6500xdlcmx25OutCallReqs=cdx6500xdlcmx25OutCallReqs, cdx6500xdlcsdlcXID1InFrames=cdx6500xdlcsdlcXID1InFrames, cdx6500xdlcmx25LOCAPCallingAddr=cdx6500xdlcmx25LOCAPCallingAddr, cdx6500xdlcpUPOutFrames=cdx6500xdlcpUPOutFrames, cdx6500xdlcsdlcAutocallMnem=cdx6500xdlcsdlcAutocallMnem, cdx6500xdlcmx25UtilizationOut=cdx6500xdlcmx25UtilizationOut, cdx6500xdlcsdlcSNRMInFrames=cdx6500xdlcsdlcSNRMInFrames, cdx6500xdlcsdlcXIDNullOutFrames=cdx6500xdlcsdlcXIDNullOutFrames, cdx6500PSTPortProtocolGroup=cdx6500PSTPortProtocolGroup, cdx6500xdlcsdlcQDMInFrames=cdx6500xdlcsdlcQDMInFrames, cdx6500xdlcpCharsInPerSec=cdx6500xdlcpCharsInPerSec, cdx6500xdlcsdlcStatsStationNum=cdx6500xdlcsdlcStatsStationNum, cdx6500xdlcpCharOutTotal=cdx6500xdlcpCharOutTotal, cdx6500PSTStationProtocolGroup=cdx6500PSTStationProtocolGroup, cdx6500xdlcpUnderrunErrors=cdx6500xdlcpUnderrunErrors, cdx6500SPCTXDLCMX25StnTable=cdx6500SPCTXDLCMX25StnTable, cdx6500xdlcmx25LOCAPFacilities=cdx6500xdlcmx25LOCAPFacilities, cdx6500xdlcmx25FrameOutTotal=cdx6500xdlcmx25FrameOutTotal, cdx6500xdlcsdlcCharsOutPerSec=cdx6500xdlcsdlcCharsOutPerSec, cdx6500xdlcmx25LowerQueue=cdx6500xdlcmx25LowerQueue, cdx6500xdlcpTESTOutFrames=cdx6500xdlcpTESTOutFrames, cdx6500xdlcpFRMRInFrames=cdx6500xdlcpFRMRInFrames, cdx6500xdlcsdlcREJFramesOut=cdx6500xdlcsdlcREJFramesOut, cdx6500xdlcsdlcCharOutTotal=cdx6500xdlcsdlcCharOutTotal, cdx6500xdlcsdlcQSMInFrames=cdx6500xdlcsdlcQSMInFrames, cdx6500xdlcmx25OutClearReqs=cdx6500xdlcmx25OutClearReqs, cdx6500xdlcmx25InInterruptConfs=cdx6500xdlcmx25InInterruptConfs, cdx6500xdlcmx25InfoOutFrames=cdx6500xdlcmx25InfoOutFrames, cdx6500xdlcmx25InResetReqs=cdx6500xdlcmx25InResetReqs, cdx6500xdlcmx25PktInTotal=cdx6500xdlcmx25PktInTotal, cdx6500xdlcsdlcQRROut=cdx6500xdlcsdlcQRROut, cdx6500xdlcmx25UAInFrames=cdx6500xdlcmx25UAInFrames, cdx6500xdlcsdlcQRRIn=cdx6500xdlcsdlcQRRIn, cdx6500xdlcsdlcCfgPortNum=cdx6500xdlcsdlcCfgPortNum, cdx6500SPSTXDLCMX25StnEntry=cdx6500SPSTXDLCMX25StnEntry, cdx6500ContXDLCStationTable=cdx6500ContXDLCStationTable, cdx6500xdlcsdlcUAInFrames=cdx6500xdlcsdlcUAInFrames, cdx6500xdlcmx25OutStatus=cdx6500xdlcmx25OutStatus, cdx6500xdlcmx25InRestartReqs=cdx6500xdlcmx25InRestartReqs, cdx6500xdlcsdlcCharInTotal=cdx6500xdlcsdlcCharInTotal, cdx6500xdlcpMX25StationsUp=cdx6500xdlcpMX25StationsUp, cdx6500xdlcsdlcFrameOutTotal=cdx6500xdlcsdlcFrameOutTotal, cdx6500xdlcsdlcFramesOutPerSec=cdx6500xdlcsdlcFramesOutPerSec, cdx6500xdlcpXIDInFrames=cdx6500xdlcpXIDInFrames, cdx6500xdlcsContStationNum=cdx6500xdlcsContStationNum, cdx6500xdlcsdlcQLLCState=cdx6500xdlcsdlcQLLCState, cdx6500xdlcsdlcQRDInFrames=cdx6500xdlcsdlcQRDInFrames, cdx6500xdlcsdlcQRSOutFrames=cdx6500xdlcsdlcQRSOutFrames, cdx6500xdlcmx25UpperQueue=cdx6500xdlcmx25UpperQueue, cdx6500xdlcpXID3InFrames=cdx6500xdlcpXID3InFrames, cdx6500xdlcmx25RNROutPkts=cdx6500xdlcmx25RNROutPkts, cdx6500xdlcmx25PacketsQueued=cdx6500xdlcmx25PacketsQueued, cdx6500xdlcsdlcRRFramesOut=cdx6500xdlcsdlcRRFramesOut, cdx6500xdlcsdlcQTESTInFrames=cdx6500xdlcsdlcQTESTInFrames, cdx6500SPSTXDLCSDLCStnTable=cdx6500SPSTXDLCSDLCStnTable, cdx6500xdlcmx25LICBPCallingAddr=cdx6500xdlcmx25LICBPCallingAddr, cdx6500xdlcmx25DataPktsIn=cdx6500xdlcmx25DataPktsIn, cdx6500xdlcpSNRMOutFrames=cdx6500xdlcpSNRMOutFrames, cdx6500xdlcsdlcQXIDOutFrames=cdx6500xdlcsdlcQXIDOutFrames, cdx6500xdlcsContPortNum=cdx6500xdlcsContPortNum, cdx6500xdlcpOverrunErrors=cdx6500xdlcpOverrunErrors, cdx6500xdlcsdlcSNRMOutFrames=cdx6500xdlcsdlcSNRMOutFrames, cdx6500xdlcpPortStatus=cdx6500xdlcpPortStatus, cdx6500xdlcpRRFramesIn=cdx6500xdlcpRRFramesIn, cdx6500xdlcpStateChange=cdx6500xdlcpStateChange, cdx6500=cdx6500, cdx6500xdlcsdlcDISCInFrames=cdx6500xdlcsdlcDISCInFrames, cdx6500xdlcpResetTimer=cdx6500xdlcpResetTimer, cdx6500xdlcsdlcUPOutFrames=cdx6500xdlcsdlcUPOutFrames, cdx6500xdlcmx25LastOutLCN=cdx6500xdlcmx25LastOutLCN, cdx6500xdlcmx25OutRestartReqs=cdx6500xdlcmx25OutRestartReqs, cdx6500xdlcmx25RNRInPkts=cdx6500xdlcmx25RNRInPkts, cdx6500xdlcsContBootStation=cdx6500xdlcsContBootStation, cdx6500xdlcsdlcXID0OutFrames=cdx6500xdlcsdlcXID0OutFrames, cdx6500xdlcsdlcCUG=cdx6500xdlcsdlcCUG, cdx6500xdlcsdlcNRNumber=cdx6500xdlcsdlcNRNumber, cdx6500xdlcpTESTInFrames=cdx6500xdlcpTESTInFrames, cdx6500xdlcpClearTimer=cdx6500xdlcpClearTimer, cdx6500xdlcpCharInTotal=cdx6500xdlcpCharInTotal, cdx6500xdlcpMX25StationsDown=cdx6500xdlcpMX25StationsDown, cdx6500xdlcmx25LOCBPCUD=cdx6500xdlcmx25LOCBPCUD, cdx6500xdlcpUtilizationOut=cdx6500xdlcpUtilizationOut, cdx6500xdlcpTxType=cdx6500xdlcpTxType, cdx6500PPSTXDLCPortEntry=cdx6500PPSTXDLCPortEntry, cdx6500xdlcsdlcFrameInTotal=cdx6500xdlcsdlcFrameInTotal, cdx6500xdlcmx25CharOutTotal=cdx6500xdlcmx25CharOutTotal, cdx6500xdlcmx25InResetConfs=cdx6500xdlcmx25InResetConfs, cdx6500xdlcmx25FrameWinSize=cdx6500xdlcmx25FrameWinSize, cdx6500xdlcmx25LOCAPCUD=cdx6500xdlcmx25LOCAPCUD, cdx6500xdlcpStationCnt=cdx6500xdlcpStationCnt, cdx6500xdlcpFRMROutFrames=cdx6500xdlcpFRMROutFrames, cdx6500xdlcpClockSpeed=cdx6500xdlcpClockSpeed, cdx6500xdlcsdlcReconnectLimit=cdx6500xdlcsdlcReconnectLimit, cdx6500xdlcmx25RRFramesIn=cdx6500xdlcmx25RRFramesIn, cdx6500xdlcsdlcQTESTOutFrames=cdx6500xdlcsdlcQTESTOutFrames, cdx6500xdlcsdlcTESTInFrames=cdx6500xdlcsdlcTESTInFrames, cdx6500xdlcsdlcQUAOutFrames=cdx6500xdlcsdlcQUAOutFrames, cdx6500xdlcsdlcQDMOutFrames=cdx6500xdlcsdlcQDMOutFrames, cdx6500xdlcpPollTimer=cdx6500xdlcpPollTimer, cdx6500xdlcmx25OutRestartConfs=cdx6500xdlcmx25OutRestartConfs, cdx6500SPCTXDLCStationTable=cdx6500SPCTXDLCStationTable, cdx6500xdlcsdlcProtocolID=cdx6500xdlcsdlcProtocolID, cdx6500xdlcsdlcXID3OutFrames=cdx6500xdlcsdlcXID3OutFrames, cdx6500SPCTXDLCStnEntry=cdx6500SPCTXDLCStnEntry, cdx6500Controls=cdx6500Controls, cdx6500xdlcpSNRMInFrames=cdx6500xdlcpSNRMInFrames, cdx6500xdlcmx25LICBPCUD=cdx6500xdlcmx25LICBPCUD, cdx6500xdlcmx25CfgPortNum=cdx6500xdlcmx25CfgPortNum, cdx6500xdlcpFrameOutTotal=cdx6500xdlcpFrameOutTotal, cdx6500xdlcsCfgPortNumber=cdx6500xdlcsCfgPortNumber, cdx6500xdlcmx25InClearConfs=cdx6500xdlcmx25InClearConfs, cdx6500xdlcmx25OutInterruptReqs=cdx6500xdlcmx25OutInterruptReqs, cdx6500xdlcpPollPeriod=cdx6500xdlcpPollPeriod, cdx6500xdlcmx25CharInTotal=cdx6500xdlcmx25CharInTotal, cdx6500xdlcsdlcQRDOutFrames=cdx6500xdlcsdlcQRDOutFrames, cdx6500xdlcpCRCErrors=cdx6500xdlcpCRCErrors, cdx6500xdlcpStatsPortNumber=cdx6500xdlcpStatsPortNumber, cdx6500xdlcpCfgPortNumber=cdx6500xdlcpCfgPortNumber, cdx6500xdlcmx25RCDestination=cdx6500xdlcmx25RCDestination, cdx6500xdlcpREJFramesOut=cdx6500xdlcpREJFramesOut, cdx6500xdlcmx25OutResetReqs=cdx6500xdlcmx25OutResetReqs, cdx6500xdlcmx25InClearReqs=cdx6500xdlcmx25InClearReqs, cdx6500xdlcsCfgStationNumber=cdx6500xdlcsCfgStationNumber, cdx6500xdlcsdlcXID=cdx6500xdlcsdlcXID, cdx6500xdlcsdlcRDInFrames=cdx6500xdlcsdlcRDInFrames, cdx6500xdlcmx25RRInPkts=cdx6500xdlcmx25RRInPkts, cdx6500xdlcsdlcReconnectTimeout=cdx6500xdlcsdlcReconnectTimeout, cdx6500CfgProtocolGroup=cdx6500CfgProtocolGroup, cdx6500xdlcpXIDOutFrames=cdx6500xdlcpXIDOutFrames, cdx6500xdlcmx25LICAPFacilities=cdx6500xdlcmx25LICAPFacilities, DisplayString=DisplayString, cdx6500xdlcsdlcXIDNullInFrames=cdx6500xdlcsdlcXIDNullInFrames, cdx6500xdlcmx25CurrentPVC=cdx6500xdlcmx25CurrentPVC, cdx6500PCTPortProtocolGroup=cdx6500PCTPortProtocolGroup, cdx6500xdlcmx25RRFramesOut=cdx6500xdlcmx25RRFramesOut, cdx6500xdlcmx25FramesOutPerSec=cdx6500xdlcmx25FramesOutPerSec, cdx6500xdlcmx25BillingRecords=cdx6500xdlcmx25BillingRecords, cdx6500xdlcpSDLCStationsDisabled=cdx6500xdlcpSDLCStationsDisabled, cdx6500xdlcsdlcDISCOutFrames=cdx6500xdlcsdlcDISCOutFrames, cdx6500xdlcsdlcQSMOutFrames=cdx6500xdlcsdlcQSMOutFrames, cdx6500xdlcsdlcQXIDInFrames=cdx6500xdlcsdlcQXIDInFrames, cdx6500xdlcpRNRFramesIn=cdx6500xdlcpRNRFramesIn, cdx6500Configuration=cdx6500Configuration, cdx6500xdlcmx25StartingSVC=cdx6500xdlcmx25StartingSVC, cdx6500xdlcmx25CharsOutPerSec=cdx6500xdlcmx25CharsOutPerSec, cdx6500xdlcmx25FrameInTotal=cdx6500xdlcmx25FrameInTotal, cdx6500xdlcsdlcPacketsQueued=cdx6500xdlcsdlcPacketsQueued, cdx6500Statistics=cdx6500Statistics, cdx6500xdlcsdlcVSNumber=cdx6500xdlcsdlcVSNumber, cdx6500xdlcpXID3OutFrames=cdx6500xdlcpXID3OutFrames, cdx6500xdlcmx25InInterruptReqs=cdx6500xdlcmx25InInterruptReqs, cdx6500xdlcmx25LICAPCallingAddr=cdx6500xdlcmx25LICAPCallingAddr, cdx6500xdlcmx25FRMROutFrames=cdx6500xdlcmx25FRMROutFrames, cdx6500xdlcsdlcUnsusWaitTimer=cdx6500xdlcsdlcUnsusWaitTimer, cdx6500xdlcsdlcQDCInFrames=cdx6500xdlcsdlcQDCInFrames, cdx6500SPSTXDLCSDLCStnEntry=cdx6500SPSTXDLCSDLCStnEntry, cdx6500xdlcsdlcQDCOutFrames=cdx6500xdlcsdlcQDCOutFrames, cdx6500xdlcsContEnableStation=cdx6500xdlcsContEnableStation, cdx6500xdlcmx25OutCallAccepts=cdx6500xdlcmx25OutCallAccepts, cdx6500xdlcsdlcRNRFramesOut=cdx6500xdlcsdlcRNRFramesOut, cdx6500xdlcsdlcRRFramesIn=cdx6500xdlcsdlcRRFramesIn, cdx6500xdlcpRDInFrames=cdx6500xdlcpRDInFrames, cdx6500xdlcsdlcCharsInPerSec=cdx6500xdlcsdlcCharsInPerSec, cdx6500xdlcmx25InCallReqs=cdx6500xdlcmx25InCallReqs, cdx6500SPCTXDLCSDLCStnTable=cdx6500SPCTXDLCSDLCStnTable, cdx6500xdlcpRDOutFrames=cdx6500xdlcpRDOutFrames, cdx6500StatProtocolGroup=cdx6500StatProtocolGroup, cdx6500xdlcsdlcRDOutFrames=cdx6500xdlcsdlcRDOutFrames, cdx6500xdlcsdlcXID3InFrames=cdx6500xdlcsdlcXID3InFrames, cdx6500xdlcpSDLCStationsDown=cdx6500xdlcpSDLCStationsDown, cdx6500xdlcsdlcFRMRInFrames=cdx6500xdlcsdlcFRMRInFrames, cdx6500xdlcpLineType=cdx6500xdlcpLineType, cdx6500xdlcpRestartTimer=cdx6500xdlcpRestartTimer, cdx6500xdlcpRNRFramesOut=cdx6500xdlcpRNRFramesOut, cdx6500SPSTXDLCMX25StnTable=cdx6500SPSTXDLCMX25StnTable, cdx6500xdlcsdlcOptions=cdx6500xdlcsdlcOptions, cdx6500xdlcsdlcXIDOutFrames=cdx6500xdlcsdlcXIDOutFrames, cdx6500xdlcpMaxFrameSize=cdx6500xdlcpMaxFrameSize, cdx6500xdlcsdlcNSNumber=cdx6500xdlcsdlcNSNumber, cdx6500xdlcsdlcFrameWinSize=cdx6500xdlcsdlcFrameWinSize, cdx6500SPSTXDLCStationTable=cdx6500SPSTXDLCStationTable, cdx6500xdlcpTxCoding=cdx6500xdlcpTxCoding, cdx6500xdlcpDISCOutFrames=cdx6500xdlcpDISCOutFrames, cdx6500xdlcsdlcXID0InFrames=cdx6500xdlcsdlcXID0InFrames, cdx6500xdlcmx25FramesInPerSec=cdx6500xdlcmx25FramesInPerSec, cdx6500xdlcpXID0OutFrames=cdx6500xdlcpXID0OutFrames, cdx6500xdlcsStationType=cdx6500xdlcsStationType, cdx6500xdlcmx25PktsOutPerSec=cdx6500xdlcmx25PktsOutPerSec, Counter16=Counter16, cdx6500xdlcpUAOutFrames=cdx6500xdlcpUAOutFrames, cdx6500xdlcmx25StartingPVC=cdx6500xdlcmx25StartingPVC, cdx6500xdlcmx25UtilizationIn=cdx6500xdlcmx25UtilizationIn, cdx6500xdlcmx25LOCAPCalledAddr=cdx6500xdlcmx25LOCAPCalledAddr, cdx6500xdlcpLinkDowns=cdx6500xdlcpLinkDowns, cdx6500xdlcsdlcBillingRecords=cdx6500xdlcsdlcBillingRecords, cdx6500xdlcmx25PVCChannels=cdx6500xdlcmx25PVCChannels, cdx6500xdlcsdlcUtilizationIn=cdx6500xdlcsdlcUtilizationIn, cdx6500xdlcmx25PacketWinSize=cdx6500xdlcmx25PacketWinSize, cdx6500xdlcmx25CharsInPerSec=cdx6500xdlcmx25CharsInPerSec, cdx6500xdlcmx25StatsStationNum=cdx6500xdlcmx25StatsStationNum, cdx6500xdlcsdlcProtectionLevel=cdx6500xdlcsdlcProtectionLevel, cdx6500xdlcsdlcUAOutFrames=cdx6500xdlcsdlcUAOutFrames, cdx6500xdlcpFramesInPerSec=cdx6500xdlcpFramesInPerSec, cdx6500SPCTXDLCStnTable=cdx6500SPCTXDLCStnTable, cdx6500xdlcpTries=cdx6500xdlcpTries, cdx6500xdlcpUtilizationIn=cdx6500xdlcpUtilizationIn, cdx6500xdlcpHighSpeedElectricalInterfaceOption=cdx6500xdlcpHighSpeedElectricalInterfaceOption, cdx6500xdlcmx25MaxPVC=cdx6500xdlcmx25MaxPVC, cdx6500xdlcmx25CfgStationNum=cdx6500xdlcmx25CfgStationNum, cdx6500xdlcpClockSource=cdx6500xdlcpClockSource, cdx6500xdlcsdlcXID1OutFrames=cdx6500xdlcsdlcXID1OutFrames, cdx6500xdlcmx25CUG=cdx6500xdlcmx25CUG, cdx6500xdlcsdlcQSSOutFrames=cdx6500xdlcsdlcQSSOutFrames, cdx6500xdlcpUPInFrames=cdx6500xdlcpUPInFrames, cdx6500ContXDLCStationEntry=cdx6500ContXDLCStationEntry, cdx6500xdlcpSDLCStationsUp=cdx6500xdlcpSDLCStationsUp, cdx6500PPCTXDLCPortTable=cdx6500PPCTXDLCPortTable, cdx6500SPCTXDLCSDLCStnEntry=cdx6500SPCTXDLCSDLCStnEntry, cdx6500xdlcmx25RNRFramesOut=cdx6500xdlcmx25RNRFramesOut, cdx6500xdlcsdlcDMOutFrames=cdx6500xdlcsdlcDMOutFrames, cdx6500xdlcsdlcXIDInFrames=cdx6500xdlcsdlcXIDInFrames, cdx6500xdlcsdlcQSSInFrames=cdx6500xdlcsdlcQSSInFrames, cdx6500xdlcpXIDNullInFrames=cdx6500xdlcpXIDNullInFrames, cdx6500xdlcpUAInFrames=cdx6500xdlcpUAInFrames, cdx6500xdlcpV24ElectricalInterfaceOption=cdx6500xdlcpV24ElectricalInterfaceOption, cdx6500xdlcsdlcREJFramesIn=cdx6500xdlcsdlcREJFramesIn, cdx6500ContXDLC=cdx6500ContXDLC)
mibBuilder.exportSymbols("XDLC-OPT-MIB", cdx6500xdlcmx25MaxSVC=cdx6500xdlcmx25MaxSVC, cdx6500xdlcsdlcStnSubaddress=cdx6500xdlcsdlcStnSubaddress, cdx6500xdlcpCallTimer=cdx6500xdlcpCallTimer, cdx6500xdlcmx25PktsInPerSec=cdx6500xdlcmx25PktsInPerSec, cdx6500xdlcsContDisableStation=cdx6500xdlcsContDisableStation, cdx6500xdlcpXIDNullOutFrames=cdx6500xdlcpXIDNullOutFrames, cdx6500xdlcsdlcCallTimer=cdx6500xdlcsdlcCallTimer, cdx6500xdlcmx25UAOutFrames=cdx6500xdlcmx25UAOutFrames, cdx6500xdlcpPortOptions=cdx6500xdlcpPortOptions, cdx6500xdlcmx25LOCBPFacilities=cdx6500xdlcmx25LOCBPFacilities, cdx6500xdlcmx25RROutPkts=cdx6500xdlcmx25RROutPkts, cdx6500xdlcmx25InRestartConfs=cdx6500xdlcmx25InRestartConfs, cdx6500xdlcmx25LastInLCN=cdx6500xdlcmx25LastInLCN, cdx6500xdlcmx25InStatus=cdx6500xdlcmx25InStatus, cdx6500xdlcpElectricalInterfaceType=cdx6500xdlcpElectricalInterfaceType, cdx6500xdlcmx25LOCBPCalledAddr=cdx6500xdlcmx25LOCBPCalledAddr, cdx6500xdlcmx25LOCBPCallingAddr=cdx6500xdlcmx25LOCBPCallingAddr, cdx6500xdlcsdlcRNRFramesIn=cdx6500xdlcsdlcRNRFramesIn, cdx6500xdlcpCharsOutPerSec=cdx6500xdlcpCharsOutPerSec, cdx6500xdlcmx25CurrentSVC=cdx6500xdlcmx25CurrentSVC, cdx6500xdlcmx25Options=cdx6500xdlcmx25Options, cdx6500xdlcsdlcCfgStationNum=cdx6500xdlcsdlcCfgStationNum, cdx6500xdlcsdlcTESTOutFrames=cdx6500xdlcsdlcTESTOutFrames, cdx6500xdlcsdlcStationAddress=cdx6500xdlcsdlcStationAddress, cdx6500xdlcmx25REJOutPkts=cdx6500xdlcmx25REJOutPkts, cdx6500xdlcmx25REJInPkts=cdx6500xdlcmx25REJInPkts, cdx6500xdlcmx25StatsPortNum=cdx6500xdlcmx25StatsPortNum, cdx6500xdlcpXID1InFrames=cdx6500xdlcpXID1InFrames, cdx6500xdlcmx25StationAddress=cdx6500xdlcmx25StationAddress, cdx6500xdlcsContResetStnStats=cdx6500xdlcsContResetStnStats, cdx6500xdlcpDMInFrames=cdx6500xdlcpDMInFrames, cdx6500xdlcsdlcStatsPortNum=cdx6500xdlcsdlcStatsPortNum, cdx6500PCTStationProtocolGroup=cdx6500PCTStationProtocolGroup, cdx6500xdlcmx25DataPktsOut=cdx6500xdlcmx25DataPktsOut, cdx6500xdlcpDMOutFrames=cdx6500xdlcpDMOutFrames, cdx6500xdlcmx25FRMRInFrames=cdx6500xdlcmx25FRMRInFrames, codex=codex, cdx6500xdlcpXID0InFrames=cdx6500xdlcpXID0InFrames, cdx6500xdlcmx25OutClearConfs=cdx6500xdlcmx25OutClearConfs, cdx6500xdlcsdlcUtilizationOut=cdx6500xdlcsdlcUtilizationOut, cdx6500xdlcsdlcIdleTimer=cdx6500xdlcsdlcIdleTimer, cdx6500xdlcmx25SVCChannels=cdx6500xdlcmx25SVCChannels, cdx6500PPCTXDLCPortEntry=cdx6500PPCTXDLCPortEntry, cdx6500xdlcpPortSpeed=cdx6500xdlcpPortSpeed, cdx6500xdlcmx25LICAPCalledAddr=cdx6500xdlcmx25LICAPCalledAddr, cdx6500xdlcmx25InCallAccepts=cdx6500xdlcmx25InCallAccepts, cdx6500xdlcsdlcUPInFrames=cdx6500xdlcsdlcUPInFrames, cdx6500xdlcsdlcVerConnTimer=cdx6500xdlcsdlcVerConnTimer, cdx6500xdlcmx25InfoInFrames=cdx6500xdlcmx25InfoInFrames, cdx6500xdlcmx25SNRMOutFrames=cdx6500xdlcmx25SNRMOutFrames, cdx6500xdlcpMX25StationsDisabled=cdx6500xdlcpMX25StationsDisabled, cdx6500xdlcsdlcVRNumber=cdx6500xdlcsdlcVRNumber, cdx6500xdlcmx25LICBPFacilities=cdx6500xdlcmx25LICBPFacilities, cdx6500xdlcsdlcQFRMROutFrames=cdx6500xdlcsdlcQFRMROutFrames)
