#
# PySNMP MIB module SKYCONTROL-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SKYCONTROL-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:04:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, Integer32, MibIdentifier, ObjectIdentity, NotificationType, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, Counter64, Counter32, TimeTicks, enterprises, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "MibIdentifier", "ObjectIdentity", "NotificationType", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "Counter64", "Counter32", "TimeTicks", "enterprises", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
skycontrol = ModuleIdentity((1, 3, 6, 1, 4, 1, 39052))
if mibBuilder.loadTexts: skycontrol.setLastUpdated('200811010000Z')
if mibBuilder.loadTexts: skycontrol.setOrganization('SkyControl s.r.o.')
if mibBuilder.loadTexts: skycontrol.setContactInfo('support@skycontrol.com')
if mibBuilder.loadTexts: skycontrol.setDescription('SkyControl monitoring units')
ctlUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 1))
ctlNotifiers = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 2))
ctlVirtualDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 3))
ctlHardwareDevices = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 4))
ctIInternalSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 5))
ctlCANSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 6))
ctlRsSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 39052, 7))
ctlUnitModulesTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 1), )
if mibBuilder.loadTexts: ctlUnitModulesTable.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModulesTable.setDescription('')
ctlUnitModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitModuleId"))
if mibBuilder.loadTexts: ctlUnitModulesEntry.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModulesEntry.setDescription('Entry of module')
ctlUnitModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleId.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModuleId.setDescription('Id of module')
ctlUnitModulePcode = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModulePcode.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModulePcode.setDescription('Product code of module')
ctlUnitModuleSN = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleSN.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModuleSN.setDescription('Serial number of module')
ctlUnitModuleClass = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleClass.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModuleClass.setDescription('Class of module')
ctlUnitModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleType.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModuleType.setDescription('Type of module')
ctlUnitModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitModuleName.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModuleName.setDescription('Name of module')
ctlUnitModuleState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitModuleState.setStatus('current')
if mibBuilder.loadTexts: ctlUnitModuleState.setDescription('State of module')
ctlUnitGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 2), )
if mibBuilder.loadTexts: ctlUnitGroupsTable.setStatus('current')
if mibBuilder.loadTexts: ctlUnitGroupsTable.setDescription('')
ctlUnitGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitGroupId"))
if mibBuilder.loadTexts: ctlUnitGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlUnitGroupsEntry.setDescription('')
ctlUnitGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitGroupId.setStatus('current')
if mibBuilder.loadTexts: ctlUnitGroupId.setDescription('Id of group')
ctlUnitGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitGroupName.setStatus('current')
if mibBuilder.loadTexts: ctlUnitGroupName.setDescription('Name of group')
ctlUnitGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitGroupDesc.setStatus('current')
if mibBuilder.loadTexts: ctlUnitGroupDesc.setDescription('Description of group')
ctlUnitElementsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 3), )
if mibBuilder.loadTexts: ctlUnitElementsTable.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementsTable.setDescription('')
ctlUnitElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitElementId"))
if mibBuilder.loadTexts: ctlUnitElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementsEntry.setDescription('')
ctlUnitElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementId.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementId.setDescription('Id of element')
ctlUnitElementGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitElementGroup.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementGroup.setDescription('Group of element')
ctlUnitElementModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementModule.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementModule.setDescription('Module of element')
ctlUnitElementNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementNum.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementNum.setDescription("Number of elemnt's in module")
ctlUnitElementClass = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementClass.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementClass.setDescription('Class of element')
ctlUnitElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementType.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementType.setDescription('Type of element')
ctlUnitElementName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitElementName.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementName.setDescription('Name of element')
ctlUnitElementState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementState.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementState.setDescription('State of element')
ctlUnitElementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementValue.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementValue.setDescription('Value of element')
ctlUnitElementSpec = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitElementSpec.setStatus('current')
if mibBuilder.loadTexts: ctlUnitElementSpec.setDescription('Special parameters for element')
ctlUnitLogicsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 1, 4), )
if mibBuilder.loadTexts: ctlUnitLogicsTable.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicsTable.setDescription('')
ctlUnitLogicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlUnitLogicId"))
if mibBuilder.loadTexts: ctlUnitLogicsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicsEntry.setDescription('Entry of logic')
ctlUnitLogicId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlUnitLogicId.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicId.setDescription('Id of logic scheme')
ctlUnitLogicName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicName.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicName.setDescription('Name of logic scheme')
ctlUnitLogicDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicDesc.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicDesc.setDescription('Description of logic scheme')
ctlUnitLogicDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicDisable.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicDisable.setDescription("Disable of logic's in secs, 0 for enable ")
ctlUnitLogicRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 1, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctlUnitLogicRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctlUnitLogicRowStatus.setDescription('')
ctlUnitTrapNotification = NotificationType((1, 3, 6, 1, 4, 1, 39052, 1, 5))
if mibBuilder.loadTexts: ctlUnitTrapNotification.setStatus('current')
if mibBuilder.loadTexts: ctlUnitTrapNotification.setDescription('Skycontrol EMS trap')
ctlUnitSaveToFlash = MibScalar((1, 3, 6, 1, 4, 1, 39052, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlUnitSaveToFlash.setStatus('current')
if mibBuilder.loadTexts: ctlUnitSaveToFlash.setDescription('Save current setting to flash memory')
ctlNotifiersMailersTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 2, 1), )
if mibBuilder.loadTexts: ctlNotifiersMailersTable.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailersTable.setDescription('')
ctlNotifiersMailersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlNotifiersMailerId"))
if mibBuilder.loadTexts: ctlNotifiersMailersEntry.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailersEntry.setDescription('Entry of email notify')
ctlNotifiersMailerId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerId.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerId.setDescription('Id of mailer')
ctlNotifiersMailerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerModule.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerModule.setDescription('Module of mailer')
ctlNotifiersMailerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerNum.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerNum.setDescription('Logical number in module for mailer')
ctlNotifiersMailerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerGroup.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerGroup.setDescription('Group of mailer')
ctlNotifiersMailerType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerType.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerType.setDescription('Type of element')
ctlNotifiersMailerName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerName.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerName.setDescription('Name of mailer')
ctlNotifiersMailerState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersMailerState.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerState.setDescription('State of mailer')
ctlNotifiersMailerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerValue.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerValue.setDescription('Value of mailer')
ctlNotifiersMailerServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerServer.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerServer.setDescription('Mailserver adress')
ctlNotifiersMailerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerPort.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerPort.setDescription('Port of mailserver')
ctlNotifiersMailerLogin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerLogin.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerLogin.setDescription('Login on mailserver')
ctlNotifiersMailerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerPassword.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerPassword.setDescription('Password for mailserver')
ctlNotifiersMailersTo = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailersTo.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailersTo.setDescription('To')
ctlNotifiersMailersFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailersFrom.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailersFrom.setDescription('From')
ctlNotifiersMailerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersMailerMessage.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersMailerMessage.setDescription('Message')
ctlNotifiersTrapsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 2, 2), )
if mibBuilder.loadTexts: ctlNotifiersTrapsTable.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapsTable.setDescription('')
ctlNotifiersTrapsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlNotifiersTrapId"))
if mibBuilder.loadTexts: ctlNotifiersTrapsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapsEntry.setDescription('Entry of trap notify')
ctlNotifiersTrapId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapId.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapId.setDescription('Id of trap')
ctlNotifiersTrapModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapModule.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapModule.setDescription('Module of trap')
ctlNotifiersTrapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapNum.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapNum.setDescription('Logical number in module for trap')
ctlNotifiersTrapGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapGroup.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapGroup.setDescription('Group of trap')
ctlNotifiersTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapType.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapType.setDescription('Type of element')
ctlNotifiersTrapName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapName.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapName.setDescription('Name of trap')
ctlNotifiersTrapState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersTrapState.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapState.setDescription('State of trap')
ctlNotifiersTrapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapValue.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapValue.setDescription('Value of trap')
ctlNotifiersTrapServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapServer.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapServer.setDescription('Receiver address for trap')
ctlNotifiersTrapPort = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapPort.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapPort.setDescription('Port of trap receiver')
ctlNotifiersTrapVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapVersion.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapVersion.setDescription('Version of trap')
ctlNotifiersTrapCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersTrapCommunity.setDescription('Password for mailserver')
ctlNotifiersSMSsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 2, 3), )
if mibBuilder.loadTexts: ctlNotifiersSMSsTable.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSsTable.setDescription('')
ctlNotifiersSMSsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlNotifiersSMSId"))
if mibBuilder.loadTexts: ctlNotifiersSMSsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSsEntry.setDescription('Entry of SMS notify')
ctlNotifiersSMSId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSId.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSId.setDescription('Id of SMS')
ctlNotifiersSMSModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSModule.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSModule.setDescription('Module of SMS')
ctlNotifiersSMSNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSNum.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSNum.setDescription('Logical number in module for SMS')
ctlNotifiersSMSGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSGroup.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSGroup.setDescription('Group of SMS')
ctlNotifiersSMSType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSType.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSType.setDescription('Type of SMS')
ctlNotifiersSMSName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSName.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSName.setDescription('Name of SMS')
ctlNotifiersSMSState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlNotifiersSMSState.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSState.setDescription('State of SMS')
ctlNotifiersSMSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSValue.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSValue.setDescription('Value of SMS')
ctlNotifiersSMSTo = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSTo.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSTo.setDescription('Phone number')
ctlNotifiersSMSMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 2, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlNotifiersSMSMessage.setStatus('current')
if mibBuilder.loadTexts: ctlNotifiersSMSMessage.setDescription('Text of SMS message')
ctlVirtualDevicesTimersTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 3, 1), )
if mibBuilder.loadTexts: ctlVirtualDevicesTimersTable.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimersTable.setDescription('')
ctlVirtualDevicesTimersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlVirtualDevicesTimerId"))
if mibBuilder.loadTexts: ctlVirtualDevicesTimersEntry.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimersEntry.setDescription('Entry of timer')
ctlVirtualDevicesTimerId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerId.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerId.setDescription('Id of timer')
ctlVirtualDevicesTimerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerModule.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerModule.setDescription('Module of tiimer')
ctlVirtualDevicesTimerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerNum.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerNum.setDescription('Logical number in module for timer')
ctlVirtualDevicesTimerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerGroup.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerGroup.setDescription('Group of timer')
ctlVirtualDevicesTimerType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerType.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerType.setDescription('Type of timer')
ctlVirtualDevicesTimerName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerName.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerName.setDescription('Name of timer')
ctlVirtualDevicesTimerState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerState.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerState.setDescription('State of timer')
ctlVirtualDevicesTimerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerValue.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerValue.setDescription('Value of timer')
ctlVirtualDevicesTimerBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerBegin.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerBegin.setDescription('Begin time for timer (Unix timestamp)')
ctlVirtualDevicesTimerEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerEnd.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerEnd.setDescription('End time for timer (Unix timestamp)')
ctlVirtualDevicesTimerDays = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerDays.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerDays.setDescription('Days for timer')
ctlVirtualDevicesTimerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 1, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesTimerMode.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesTimerMode.setDescription('Mode of timer')
ctlVirtualDevicesPingsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 3, 2), )
if mibBuilder.loadTexts: ctlVirtualDevicesPingsTable.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingsTable.setDescription('')
ctlVirtualDevicesPingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlVirtualDevicesPingId"))
if mibBuilder.loadTexts: ctlVirtualDevicesPingsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingsEntry.setDescription('Entry of ping')
ctlVirtualDevicesPingId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingId.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingId.setDescription('Id of ping')
ctlVirtualDevicesPingModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingModule.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingModule.setDescription('Module of ping')
ctlVirtualDevicesPingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingNum.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingNum.setDescription('Logical number in module for ping')
ctlVirtualDevicesPingGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingGroup.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingGroup.setDescription('Group of ping')
ctlVirtualDevicesPingType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingType.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingType.setDescription('Type of element')
ctlVirtualDevicesPingName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingName.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingName.setDescription('Name of ping')
ctlVirtualDevicesPingState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingState.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingState.setDescription('State of ping')
ctlVirtualDevicesPingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingValue.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingValue.setDescription('Value of timer')
ctlVirtualDevicesPingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingPeriod.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingPeriod.setDescription('Period for ping')
ctlVirtualDevicesPingRTT = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingRTT.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingRTT.setDescription('Round Trip Time of ping')
ctlVirtualDevicesPingServer = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlVirtualDevicesPingServer.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingServer.setDescription('Server for ping')
ctlVirtualDevicesPingIP = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingIP.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingIP.setDescription('Resolved IP for ping')
ctlVirtualDevicesPingSent = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingSent.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingSent.setDescription('Number of sent pings')
ctlVirtualDevicesPingReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingReceived.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingReceived.setDescription('Number of received pings')
ctlVirtualDevicesPingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 3, 2, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlVirtualDevicesPingStatus.setStatus('current')
if mibBuilder.loadTexts: ctlVirtualDevicesPingStatus.setDescription('Status of ping')
ctlHardwareDevicesCamerasTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 4, 1), )
if mibBuilder.loadTexts: ctlHardwareDevicesCamerasTable.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCamerasTable.setDescription('')
ctlHardwareDevicesCamerasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlHardwareDevicesCameraId"))
if mibBuilder.loadTexts: ctlHardwareDevicesCamerasEntry.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCamerasEntry.setDescription('Entry of camera')
ctlHardwareDevicesCameraId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraId.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraId.setDescription('Id of camera')
ctlHardwareDevicesCameraModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraModule.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraModule.setDescription('Module of camera')
ctlHardwareDevicesCameraNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraNum.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraNum.setDescription('Logical number in module for camera')
ctlHardwareDevicesCameraGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraGroup.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraGroup.setDescription('Group of camera')
ctlHardwareDevicesCameraType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraType.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraType.setDescription('Type of element')
ctlHardwareDevicesCameraName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraName.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraName.setDescription('Name of camera')
ctlHardwareDevicesCameraState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraState.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraState.setDescription('State of camera')
ctlHardwareDevicesCameraValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraValue.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraValue.setDescription('Value of camera')
ctlHardwareDevicesCameraURL = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraURL.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraURL.setDescription('IP camera URL (or device path for USB)')
ctlHardwareDevicesCameraFPS = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraFPS.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraFPS.setDescription('FPS of camera')
ctlHardwareDevicesCameraResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 4, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlHardwareDevicesCameraResolution.setStatus('current')
if mibBuilder.loadTexts: ctlHardwareDevicesCameraResolution.setDescription('Resolution of camera')
ctlInternalSensorsDiscretsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 5, 1), )
if mibBuilder.loadTexts: ctlInternalSensorsDiscretsTable.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretsTable.setDescription('')
ctlInternalSensorsDiscretsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlInternalSensorsDiscretId"))
if mibBuilder.loadTexts: ctlInternalSensorsDiscretsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretsEntry.setDescription('Entry of discret')
ctlInternalSensorsDiscretId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretId.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretId.setDescription('Id of sensor')
ctlInternalSensorsDiscretModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretModule.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretModule.setDescription('Module of sensor')
ctlInternalSensorsDiscretNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretNum.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretNum.setDescription('Logical number in module for sensor')
ctlInternalSensorsDiscretGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretGroup.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretGroup.setDescription('Group of sensor')
ctlInternalSensorsDiscretType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretType.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretType.setDescription('Type of sensor')
ctlInternalSensorsDiscretName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretName.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretName.setDescription('Name of sensor')
ctlInternalSensorsDiscretState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretState.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretState.setDescription('State of sensor')
ctlInternalSensorsDiscretValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretValue.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretValue.setDescription('Value of sensor')
ctlInternalSensorsDiscretReset = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretReset.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretReset.setDescription('Reset of sensor')
ctlInternalSensorsDiscretLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretLevel.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretLevel.setDescription('Level of sensor')
ctlInternalSensorsDiscretReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretReverse.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretReverse.setDescription('Reverse of sensor')
ctlInternalSensorsDiscretSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretSpecific.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretSpecific.setDescription('Specific parameters for sensor')
ctlInternalSensorsAnalogsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 5, 2), )
if mibBuilder.loadTexts: ctlInternalSensorsAnalogsTable.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogsTable.setDescription('')
ctlInternalSensorsAnalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlInternalSensorsAnalogId"))
if mibBuilder.loadTexts: ctlInternalSensorsAnalogsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogsEntry.setDescription('Entry of analog')
ctlInternalSensorsAnalogId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogId.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogId.setDescription('Id of sensor')
ctlInternalSensorsAnalogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogModule.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogModule.setDescription('Module of sensor')
ctlInternalSensorsAnalogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogNum.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogNum.setDescription('Logical number in module for sensor')
ctlInternalSensorsAnalogGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogGroup.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogGroup.setDescription('Group of sensor')
ctlInternalSensorsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogType.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogType.setDescription('Type of sensor')
ctlInternalSensorsAnalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogName.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogName.setDescription('Name of sensor')
ctlInternalSensorsAnalogState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogState.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogState.setDescription('State of sensor')
ctlInternalSensorsAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogValue.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogValue.setDescription('Value of sensor')
ctlInternalSensorsAnalogMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogMin.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogMin.setDescription('Minimum of sensor value range')
ctlInternalSensorsAnalogMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogMax.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogMax.setDescription('Maximum of sensor value range')
ctlInternalSensorsAnalogLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogLow.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogLow.setDescription('Low level for sensor value')
ctlInternalSensorsAnalogWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogWarning.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogWarning.setDescription('Warning level for sensor value')
ctlInternalSensorsAnalogHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogHigh.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogHigh.setDescription('High level for sensor value')
ctlInternalSensorsAnalogAt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogAt0.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogAt0.setDescription('At0 for sensor value')
ctlInternalSensorsAnalogAt75 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogAt75.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogAt75.setDescription('At75 for sensor value')
ctlInternalSensorsAnalogExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogExpression.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogExpression.setDescription('Expression for sensor value')
ctlInternalSensorsAnalogSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 2, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsAnalogSpecific.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsAnalogSpecific.setDescription('Specific parameters for sensor')
ctlInternalSensorsOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 5, 3), )
if mibBuilder.loadTexts: ctlInternalSensorsOutletsTable.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletsTable.setDescription('')
ctlInternalSensorsOutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlInternalSensorsOutletId"))
if mibBuilder.loadTexts: ctlInternalSensorsOutletsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletsEntry.setDescription('Entry of outlet')
ctlInternalSensorsOutletId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletId.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletId.setDescription('Id of outlet')
ctlInternalSensorsOutletModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletModule.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletModule.setDescription('Module of outlet')
ctlInternalSensorsOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletNum.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletNum.setDescription('Logical number in module for outlet')
ctlInternalSensorsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletGroup.setDescription('Group of outlet')
ctlInternalSensorsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletType.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletType.setDescription('Type of outlet')
ctlInternalSensorsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletName.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletName.setDescription('Name of outlet')
ctlInternalSensorsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlInternalSensorsOutletState.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletState.setDescription('State of outlet')
ctlInternalSensorsOutletValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletValue.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletValue.setDescription('Value of outlet')
ctlInternalSensorsOutletInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsOutletInitial.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsOutletInitial.setDescription('Initial state for outlet')
ctlInternalSensorsDiscretPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlInternalSensorsDiscretPulse.setStatus('current')
if mibBuilder.loadTexts: ctlInternalSensorsDiscretPulse.setDescription('Pulse duration for outlet')
ctlCANSensorsDiscretsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 6, 1), )
if mibBuilder.loadTexts: ctlCANSensorsDiscretsTable.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretsTable.setDescription('')
ctlCANSensorsDiscretsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlCANSensorsDiscretId"))
if mibBuilder.loadTexts: ctlCANSensorsDiscretsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretsEntry.setDescription('Entry of discret sensor')
ctlCANSensorsDiscretId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretId.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretId.setDescription('Id of sensor')
ctlCANSensorsDiscretModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretModule.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretModule.setDescription('Module of sensor')
ctlCANSensorsDiscretNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretNum.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretNum.setDescription('Logical number in module for sensor')
ctlCANSensorsDiscretGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretGroup.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretGroup.setDescription('Group of sensor')
ctlCANSensorsDiscretType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretType.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretType.setDescription("Type of sensor's")
ctlCANSensorsDiscretName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretName.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretName.setDescription('Name of sensor')
ctlCANSensorsDiscretState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretState.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretState.setDescription('State of sensor')
ctlCANSensorsDiscretValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretValue.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretValue.setDescription('Value of sensor')
ctlCANSensorsDiscretReset = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretReset.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretReset.setDescription('Reset of sensor')
ctlCANSensorsDiscretLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretLevel.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretLevel.setDescription('Level of sensor')
ctlCANSensorsDiscretReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretReverse.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretReverse.setDescription('Reverse of sensor')
ctlCANSensorsDiscretSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsDiscretSpecific.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretSpecific.setDescription('Specific parameters for sensor')
ctlCANSensorsAnalogsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 6, 2), )
if mibBuilder.loadTexts: ctlCANSensorsAnalogsTable.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogsTable.setDescription('')
ctlCANSensorsAnalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlCANSensorsAnalogId"))
if mibBuilder.loadTexts: ctlCANSensorsAnalogsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogsEntry.setDescription('Entry of analog sensor')
ctlCANSensorsAnalogId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogId.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogId.setDescription('Id of sensor')
ctlCANSensorsAnalogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogModule.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogModule.setDescription('Module of sensor')
ctlCANSensorsAnalogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogNum.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogNum.setDescription('Logical number in module for sensor')
ctlCANSensorsAnalogGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogGroup.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogGroup.setDescription('Group of sensor')
ctlCANSensorsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogType.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogType.setDescription('Type of sensor')
ctlCANSensorsAnalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogName.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogName.setDescription('Name of sensor')
ctlCANSensorsAnalogState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogState.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogState.setDescription('State of sensor')
ctlCANSensorsAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogValue.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogValue.setDescription('Value of sensor')
ctlCANSensorsAnalogMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogMin.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogMin.setDescription('Minimum of sensor value range')
ctlCANSensorsAnalogMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogMax.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogMax.setDescription('Maximum of sensor value range')
ctlCANSensorsAnalogLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogLow.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogLow.setDescription('Low level for sensor value')
ctlCANSensorsAnalogWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogWarning.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogWarning.setDescription('Warning level for sensor value')
ctlCANSensorsAnalogHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogHigh.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogHigh.setDescription('High level for sensor value')
ctlCANSensorsAnalogAt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogAt0.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogAt0.setDescription('At0 for sensor value')
ctlCANSensorsAnalogAt75 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogAt75.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogAt75.setDescription('At75 for sensor value')
ctlCANSensorsAnalogExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsAnalogExpression.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogExpression.setDescription('Expression for sensor value')
ctlCANSensorsAnalogSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsAnalogSpecific.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsAnalogSpecific.setDescription('Specific parameters for sensor')
ctlCANSensorsOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 6, 3), )
if mibBuilder.loadTexts: ctlCANSensorsOutletsTable.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletsTable.setDescription('')
ctlCANSensorsOutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlCANSensorsOutletId"))
if mibBuilder.loadTexts: ctlCANSensorsOutletsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletsEntry.setDescription('Entry of outlet')
ctlCANSensorsOutletId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletId.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletId.setDescription('Id of outlet')
ctlCANSensorsOutletModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletModule.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletModule.setDescription('Module of outlet')
ctlCANSensorsOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletNum.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletNum.setDescription('Logical number in module for outlet')
ctlCANSensorsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletGroup.setDescription('Group of outlet')
ctlCANSensorsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletType.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletType.setDescription('Type of outlet')
ctlCANSensorsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletName.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletName.setDescription('Name of outlet')
ctlCANSensorsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlCANSensorsOutletState.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletState.setDescription('State of outlet')
ctlCANSensorsOutletValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletValue.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletValue.setDescription('Value of outlet')
ctlCANSensorsOutletInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsOutletInitial.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsOutletInitial.setDescription('Initial state for outlet')
ctlCANSensorsDiscretPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 6, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlCANSensorsDiscretPulse.setStatus('current')
if mibBuilder.loadTexts: ctlCANSensorsDiscretPulse.setDescription('Pulse duration for outlet')
ctlRsSensorsDiscretsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 7, 1), )
if mibBuilder.loadTexts: ctlRsSensorsDiscretsTable.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretsTable.setDescription('')
ctlRsSensorsDiscretsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlRsSensorsDiscretId"))
if mibBuilder.loadTexts: ctlRsSensorsDiscretsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretsEntry.setDescription('Entry of discret sensor')
ctlRsSensorsDiscretId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretId.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretId.setDescription('Id of sensor')
ctlRsSensorsDiscretModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretModule.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretModule.setDescription('Module of sensor')
ctlRsSensorsDiscretNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretNum.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretNum.setDescription('Logical number in module for sensor')
ctlRsSensorsDiscretGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretGroup.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretGroup.setDescription('Group of sensor')
ctlRsSensorsDiscretType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretType.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretType.setDescription("Type of sensor's")
ctlRsSensorsDiscretName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretName.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretName.setDescription('Name of sensor')
ctlRsSensorsDiscretState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretState.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretState.setDescription('State of sensor')
ctlRsSensorsDiscretValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretValue.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretValue.setDescription('Value of sensor')
ctlRsSensorsDiscretReset = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretReset.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretReset.setDescription('Reset of sensor')
ctlRsSensorsDiscretLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretLevel.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretLevel.setDescription('Level of sensor')
ctlRsSensorsDiscretReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretReverse.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretReverse.setDescription('Reverse of sensor')
ctlRsSensorsDiscretSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsDiscretSpecific.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretSpecific.setDescription('Specific parameters for sensor')
ctlRsSensorsAnalogsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 7, 2), )
if mibBuilder.loadTexts: ctlRsSensorsAnalogsTable.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogsTable.setDescription('')
ctlRsSensorsAnalogsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlRsSensorsAnalogId"))
if mibBuilder.loadTexts: ctlRsSensorsAnalogsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogsEntry.setDescription('Entry of analog sensor')
ctlRsSensorsAnalogId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogId.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogId.setDescription('Id of sensor')
ctlRsSensorsAnalogModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogModule.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogModule.setDescription('Module of sensor')
ctlRsSensorsAnalogNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogNum.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogNum.setDescription('Logical number in module for sensor')
ctlRsSensorsAnalogGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogGroup.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogGroup.setDescription('Group of sensor')
ctlRsSensorsAnalogType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogType.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogType.setDescription('Type of sensor')
ctlRsSensorsAnalogName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogName.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogName.setDescription('Name of sensor')
ctlRsSensorsAnalogState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogState.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogState.setDescription('State of sensor')
ctlRsSensorsAnalogValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogValue.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogValue.setDescription('Value of sensor')
ctlRsSensorsAnalogMin = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogMin.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogMin.setDescription('Minimum of sensor value range')
ctlRsSensorsAnalogMax = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogMax.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogMax.setDescription('Maximum of sensor value range')
ctlRsSensorsAnalogLow = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogLow.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogLow.setDescription('Low level for sensor value')
ctlRsSensorsAnalogWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogWarning.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogWarning.setDescription('Warning level for sensor value')
ctlRsSensorsAnalogHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogHigh.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogHigh.setDescription('High level for sensor value')
ctlRsSensorsAnalogAt0 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogAt0.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogAt0.setDescription('At0 for sensor value')
ctlRsSensorsAnalogAt75 = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogAt75.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogAt75.setDescription('At75 for sensor value')
ctlRsSensorsAnalogExpression = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsAnalogExpression.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogExpression.setDescription('Expression for sensor value')
ctlRsSensorsAnalogSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsAnalogSpecific.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsAnalogSpecific.setDescription('Specific parameters for sensor')
ctlRsSensorsOutletsTable = MibTable((1, 3, 6, 1, 4, 1, 39052, 7, 3), )
if mibBuilder.loadTexts: ctlRsSensorsOutletsTable.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletsTable.setDescription('')
ctlRsSensorsOutletsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1), ).setIndexNames((0, "SKYCONTROL-SYSTEM-MIB", "ctlRsSensorsOutletId"))
if mibBuilder.loadTexts: ctlRsSensorsOutletsEntry.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletsEntry.setDescription('Entry of outlet')
ctlRsSensorsOutletId = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletId.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletId.setDescription('Id of outlet')
ctlRsSensorsOutletModule = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletModule.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletModule.setDescription('Module of outlet')
ctlRsSensorsOutletNum = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletNum.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletNum.setDescription('Logical number in module for outlet')
ctlRsSensorsOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletGroup.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletGroup.setDescription('Group of outlet')
ctlRsSensorsOutletType = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletType.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletType.setDescription('Type of outlet')
ctlRsSensorsOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletName.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletName.setDescription('Name of outlet')
ctlRsSensorsOutletState = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctlRsSensorsOutletState.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletState.setDescription('State of outlet')
ctlRsSensorsOutletValue = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletValue.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletValue.setDescription('Value of outlet')
ctlRsSensorsOutletInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsOutletInitial.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsOutletInitial.setDescription('Initial state for outlet')
ctlRsSensorsDiscretPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 39052, 7, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctlRsSensorsDiscretPulse.setStatus('current')
if mibBuilder.loadTexts: ctlRsSensorsDiscretPulse.setDescription('Pulse duration for outlet')
mibBuilder.exportSymbols("SKYCONTROL-SYSTEM-MIB", ctlUnitElementValue=ctlUnitElementValue, ctlUnitLogicsEntry=ctlUnitLogicsEntry, ctlUnitLogicDesc=ctlUnitLogicDesc, ctlInternalSensorsDiscretLevel=ctlInternalSensorsDiscretLevel, ctlInternalSensorsOutletId=ctlInternalSensorsOutletId, ctlVirtualDevicesTimersEntry=ctlVirtualDevicesTimersEntry, ctlInternalSensorsOutletValue=ctlInternalSensorsOutletValue, ctlCANSensorsDiscretPulse=ctlCANSensorsDiscretPulse, ctlInternalSensorsAnalogsTable=ctlInternalSensorsAnalogsTable, ctlRsSensorsDiscretName=ctlRsSensorsDiscretName, ctlInternalSensorsDiscretNum=ctlInternalSensorsDiscretNum, ctlUnitSaveToFlash=ctlUnitSaveToFlash, ctlNotifiersMailerGroup=ctlNotifiersMailerGroup, ctlNotifiersTrapValue=ctlNotifiersTrapValue, ctlHardwareDevicesCameraResolution=ctlHardwareDevicesCameraResolution, ctlRsSensorsDiscretReset=ctlRsSensorsDiscretReset, ctlRsSensorsDiscretValue=ctlRsSensorsDiscretValue, ctlRsSensorsAnalogLow=ctlRsSensorsAnalogLow, ctlNotifiersSMSsEntry=ctlNotifiersSMSsEntry, ctlUnitLogicDisable=ctlUnitLogicDisable, ctlRsSensorsDiscretsTable=ctlRsSensorsDiscretsTable, ctlNotifiersMailerServer=ctlNotifiersMailerServer, ctlUnitLogicId=ctlUnitLogicId, ctlUnitModuleClass=ctlUnitModuleClass, ctlCANSensorsAnalogType=ctlCANSensorsAnalogType, ctlUnitModulesEntry=ctlUnitModulesEntry, ctlUnitElementType=ctlUnitElementType, ctlRsSensorsAnalogId=ctlRsSensorsAnalogId, ctlRsSensorsAnalogWarning=ctlRsSensorsAnalogWarning, ctlVirtualDevicesTimerBegin=ctlVirtualDevicesTimerBegin, ctlCANSensorsDiscretName=ctlCANSensorsDiscretName, ctlRsSensorsDiscretReverse=ctlRsSensorsDiscretReverse, ctlRsSensorsDiscretSpecific=ctlRsSensorsDiscretSpecific, ctlVirtualDevicesTimerName=ctlVirtualDevicesTimerName, ctlRsSensorsAnalogGroup=ctlRsSensorsAnalogGroup, ctlCANSensorsDiscretState=ctlCANSensorsDiscretState, ctlInternalSensorsDiscretReset=ctlInternalSensorsDiscretReset, ctlHardwareDevicesCameraName=ctlHardwareDevicesCameraName, ctlNotifiersTrapNum=ctlNotifiersTrapNum, ctlRsSensorsDiscretState=ctlRsSensorsDiscretState, ctlRsSensorsOutletType=ctlRsSensorsOutletType, ctlInternalSensorsAnalogMax=ctlInternalSensorsAnalogMax, ctlUnitLogicName=ctlUnitLogicName, ctlNotifiersMailerId=ctlNotifiersMailerId, ctlCANSensorsOutletType=ctlCANSensorsOutletType, ctlHardwareDevicesCamerasTable=ctlHardwareDevicesCamerasTable, ctlCANSensorsDiscretId=ctlCANSensorsDiscretId, ctlVirtualDevicesTimerState=ctlVirtualDevicesTimerState, ctlNotifiersMailerNum=ctlNotifiersMailerNum, ctlVirtualDevices=ctlVirtualDevices, ctlInternalSensorsAnalogAt0=ctlInternalSensorsAnalogAt0, ctlRsSensorsAnalogSpecific=ctlRsSensorsAnalogSpecific, ctlVirtualDevicesTimersTable=ctlVirtualDevicesTimersTable, ctlNotifiersSMSType=ctlNotifiersSMSType, ctlNotifiersMailerLogin=ctlNotifiersMailerLogin, ctlInternalSensorsDiscretValue=ctlInternalSensorsDiscretValue, ctlRsSensorsDiscretsEntry=ctlRsSensorsDiscretsEntry, ctlInternalSensorsOutletNum=ctlInternalSensorsOutletNum, ctlCANSensorsDiscretLevel=ctlCANSensorsDiscretLevel, ctlNotifiersTrapVersion=ctlNotifiersTrapVersion, ctlVirtualDevicesPingId=ctlVirtualDevicesPingId, ctlInternalSensorsAnalogSpecific=ctlInternalSensorsAnalogSpecific, ctlNotifiersTrapName=ctlNotifiersTrapName, ctlRsSensorsOutletsTable=ctlRsSensorsOutletsTable, ctlUnitGroupsEntry=ctlUnitGroupsEntry, ctlNotifiersMailerPort=ctlNotifiersMailerPort, ctlInternalSensorsOutletGroup=ctlInternalSensorsOutletGroup, ctlCANSensorsDiscretSpecific=ctlCANSensorsDiscretSpecific, ctlRsSensorsAnalogsEntry=ctlRsSensorsAnalogsEntry, ctlCANSensors=ctlCANSensors, ctlNotifiersMailerValue=ctlNotifiersMailerValue, ctlVirtualDevicesPingName=ctlVirtualDevicesPingName, ctlVirtualDevicesTimerEnd=ctlVirtualDevicesTimerEnd, ctlUnitLogicRowStatus=ctlUnitLogicRowStatus, ctlVirtualDevicesPingModule=ctlVirtualDevicesPingModule, ctlCANSensorsOutletValue=ctlCANSensorsOutletValue, ctlCANSensorsOutletState=ctlCANSensorsOutletState, ctlInternalSensorsAnalogId=ctlInternalSensorsAnalogId, ctlVirtualDevicesPingValue=ctlVirtualDevicesPingValue, ctlNotifiersTrapCommunity=ctlNotifiersTrapCommunity, ctlUnitModuleState=ctlUnitModuleState, ctlUnitTrapNotification=ctlUnitTrapNotification, ctlNotifiersMailerName=ctlNotifiersMailerName, ctlCANSensorsOutletName=ctlCANSensorsOutletName, ctlCANSensorsAnalogMin=ctlCANSensorsAnalogMin, ctlRsSensorsOutletModule=ctlRsSensorsOutletModule, ctlInternalSensorsDiscretsEntry=ctlInternalSensorsDiscretsEntry, ctlRsSensorsDiscretPulse=ctlRsSensorsDiscretPulse, ctlNotifiersSMSsTable=ctlNotifiersSMSsTable, ctlInternalSensorsAnalogName=ctlInternalSensorsAnalogName, ctlUnitElementSpec=ctlUnitElementSpec, ctlNotifiersMailerType=ctlNotifiersMailerType, ctlCANSensorsDiscretGroup=ctlCANSensorsDiscretGroup, ctlCANSensorsOutletsTable=ctlCANSensorsOutletsTable, ctlRsSensorsOutletState=ctlRsSensorsOutletState, ctlUnitGroupName=ctlUnitGroupName, ctlUnitElementsTable=ctlUnitElementsTable, ctlNotifiersSMSValue=ctlNotifiersSMSValue, ctlNotifiersSMSGroup=ctlNotifiersSMSGroup, ctlCANSensorsOutletInitial=ctlCANSensorsOutletInitial, ctlRsSensorsAnalogNum=ctlRsSensorsAnalogNum, ctlVirtualDevicesTimerNum=ctlVirtualDevicesTimerNum, ctlRsSensorsOutletNum=ctlRsSensorsOutletNum, ctlCANSensorsDiscretType=ctlCANSensorsDiscretType, ctlVirtualDevicesPingRTT=ctlVirtualDevicesPingRTT, ctlCANSensorsAnalogNum=ctlCANSensorsAnalogNum, ctlInternalSensorsAnalogWarning=ctlInternalSensorsAnalogWarning, ctlCANSensorsOutletModule=ctlCANSensorsOutletModule, ctlInternalSensorsAnalogType=ctlInternalSensorsAnalogType, ctlRsSensors=ctlRsSensors, ctlVirtualDevicesPingsEntry=ctlVirtualDevicesPingsEntry, ctlRsSensorsAnalogValue=ctlRsSensorsAnalogValue, ctlCANSensorsAnalogSpecific=ctlCANSensorsAnalogSpecific, ctlNotifiersMailerState=ctlNotifiersMailerState, ctlNotifiersTrapType=ctlNotifiersTrapType, ctlUnitGroupsTable=ctlUnitGroupsTable, ctlCANSensorsOutletId=ctlCANSensorsOutletId, ctlHardwareDevicesCameraModule=ctlHardwareDevicesCameraModule, ctlVirtualDevicesPingServer=ctlVirtualDevicesPingServer, ctlHardwareDevicesCameraNum=ctlHardwareDevicesCameraNum, ctlHardwareDevicesCameraValue=ctlHardwareDevicesCameraValue, ctlRsSensorsDiscretId=ctlRsSensorsDiscretId, ctlInternalSensorsDiscretSpecific=ctlInternalSensorsDiscretSpecific, ctIInternalSensors=ctIInternalSensors, ctlHardwareDevicesCameraGroup=ctlHardwareDevicesCameraGroup, ctlHardwareDevicesCameraType=ctlHardwareDevicesCameraType, ctlHardwareDevicesCameraURL=ctlHardwareDevicesCameraURL, ctlUnitGroupDesc=ctlUnitGroupDesc, ctlInternalSensorsOutletModule=ctlInternalSensorsOutletModule, ctlCANSensorsAnalogName=ctlCANSensorsAnalogName, ctlRsSensorsAnalogHigh=ctlRsSensorsAnalogHigh, ctlRsSensorsAnalogAt75=ctlRsSensorsAnalogAt75, ctlUnitElementId=ctlUnitElementId, ctlVirtualDevicesTimerId=ctlVirtualDevicesTimerId, ctlNotifiersMailerModule=ctlNotifiersMailerModule, ctlInternalSensorsAnalogNum=ctlInternalSensorsAnalogNum, ctlNotifiersTrapGroup=ctlNotifiersTrapGroup, ctlNotifiersSMSNum=ctlNotifiersSMSNum, ctlCANSensorsDiscretsTable=ctlCANSensorsDiscretsTable, ctlRsSensorsDiscretLevel=ctlRsSensorsDiscretLevel, ctlRsSensorsAnalogName=ctlRsSensorsAnalogName, ctlNotifiersMailerPassword=ctlNotifiersMailerPassword, ctlVirtualDevicesTimerDays=ctlVirtualDevicesTimerDays, ctlHardwareDevicesCameraId=ctlHardwareDevicesCameraId, ctlNotifiersTrapId=ctlNotifiersTrapId, ctlInternalSensorsOutletsTable=ctlInternalSensorsOutletsTable, ctlCANSensorsAnalogValue=ctlCANSensorsAnalogValue, ctlInternalSensorsDiscretGroup=ctlInternalSensorsDiscretGroup, ctlRsSensorsDiscretGroup=ctlRsSensorsDiscretGroup, ctlRsSensorsOutletValue=ctlRsSensorsOutletValue, ctlInternalSensorsOutletInitial=ctlInternalSensorsOutletInitial, ctlUnitModuleName=ctlUnitModuleName, ctlCANSensorsDiscretReverse=ctlCANSensorsDiscretReverse, ctlRsSensorsAnalogModule=ctlRsSensorsAnalogModule, ctlNotifiersMailersEntry=ctlNotifiersMailersEntry, ctlCANSensorsAnalogLow=ctlCANSensorsAnalogLow, ctlNotifiersTrapPort=ctlNotifiersTrapPort, ctlVirtualDevicesPingStatus=ctlVirtualDevicesPingStatus, ctlNotifiersTrapsTable=ctlNotifiersTrapsTable, ctlInternalSensorsDiscretPulse=ctlInternalSensorsDiscretPulse, ctlUnitLogicsTable=ctlUnitLogicsTable, ctlNotifiersTrapModule=ctlNotifiersTrapModule, ctlNotifiersSMSId=ctlNotifiersSMSId, ctlInternalSensorsAnalogMin=ctlInternalSensorsAnalogMin, ctlHardwareDevices=ctlHardwareDevices, ctlUnit=ctlUnit, ctlRsSensorsDiscretType=ctlRsSensorsDiscretType, ctlCANSensorsAnalogWarning=ctlCANSensorsAnalogWarning, ctlNotifiersSMSMessage=ctlNotifiersSMSMessage, ctlCANSensorsAnalogExpression=ctlCANSensorsAnalogExpression, ctlRsSensorsOutletInitial=ctlRsSensorsOutletInitial, ctlUnitModulePcode=ctlUnitModulePcode, ctlVirtualDevicesTimerMode=ctlVirtualDevicesTimerMode, ctlNotifiersSMSName=ctlNotifiersSMSName, ctlInternalSensorsAnalogsEntry=ctlInternalSensorsAnalogsEntry, ctlInternalSensorsAnalogGroup=ctlInternalSensorsAnalogGroup, ctlRsSensorsAnalogState=ctlRsSensorsAnalogState, ctlVirtualDevicesTimerModule=ctlVirtualDevicesTimerModule, ctlCANSensorsAnalogModule=ctlCANSensorsAnalogModule, ctlHardwareDevicesCameraFPS=ctlHardwareDevicesCameraFPS, ctlCANSensorsDiscretNum=ctlCANSensorsDiscretNum, ctlNotifiersMailersFrom=ctlNotifiersMailersFrom, ctlInternalSensorsOutletName=ctlInternalSensorsOutletName, ctlUnitElementModule=ctlUnitElementModule, ctlCANSensorsAnalogGroup=ctlCANSensorsAnalogGroup, ctlNotifiersSMSModule=ctlNotifiersSMSModule, ctlCANSensorsAnalogAt0=ctlCANSensorsAnalogAt0, ctlRsSensorsAnalogMin=ctlRsSensorsAnalogMin, ctlInternalSensorsDiscretsTable=ctlInternalSensorsDiscretsTable, ctlCANSensorsAnalogId=ctlCANSensorsAnalogId, ctlVirtualDevicesPingIP=ctlVirtualDevicesPingIP, ctlInternalSensorsAnalogState=ctlInternalSensorsAnalogState, ctlCANSensorsAnalogHigh=ctlCANSensorsAnalogHigh, ctlRsSensorsOutletGroup=ctlRsSensorsOutletGroup, ctlUnitElementClass=ctlUnitElementClass, ctlVirtualDevicesTimerGroup=ctlVirtualDevicesTimerGroup, ctlInternalSensorsDiscretReverse=ctlInternalSensorsDiscretReverse, ctlVirtualDevicesPingPeriod=ctlVirtualDevicesPingPeriod, ctlRsSensorsDiscretNum=ctlRsSensorsDiscretNum, ctlCANSensorsDiscretModule=ctlCANSensorsDiscretModule, ctlCANSensorsOutletNum=ctlCANSensorsOutletNum, ctlUnitModuleSN=ctlUnitModuleSN, ctlNotifiersTrapState=ctlNotifiersTrapState, ctlNotifiers=ctlNotifiers, ctlNotifiersMailersTo=ctlNotifiersMailersTo, ctlRsSensorsAnalogType=ctlRsSensorsAnalogType, ctlInternalSensorsDiscretName=ctlInternalSensorsDiscretName, ctlCANSensorsDiscretReset=ctlCANSensorsDiscretReset, ctlRsSensorsAnalogMax=ctlRsSensorsAnalogMax, ctlVirtualDevicesTimerType=ctlVirtualDevicesTimerType, ctlInternalSensorsAnalogLow=ctlInternalSensorsAnalogLow, ctlNotifiersSMSTo=ctlNotifiersSMSTo, ctlInternalSensorsDiscretState=ctlInternalSensorsDiscretState, ctlInternalSensorsAnalogExpression=ctlInternalSensorsAnalogExpression, ctlUnitElementState=ctlUnitElementState, ctlInternalSensorsOutletsEntry=ctlInternalSensorsOutletsEntry, ctlInternalSensorsDiscretModule=ctlInternalSensorsDiscretModule, skycontrol=skycontrol, ctlVirtualDevicesTimerValue=ctlVirtualDevicesTimerValue, ctlCANSensorsAnalogAt75=ctlCANSensorsAnalogAt75, ctlCANSensorsOutletsEntry=ctlCANSensorsOutletsEntry, ctlCANSensorsAnalogsTable=ctlCANSensorsAnalogsTable, ctlCANSensorsAnalogState=ctlCANSensorsAnalogState, ctlUnitElementsEntry=ctlUnitElementsEntry, ctlCANSensorsOutletGroup=ctlCANSensorsOutletGroup, ctlUnitModuleType=ctlUnitModuleType, ctlVirtualDevicesPingState=ctlVirtualDevicesPingState, PYSNMP_MODULE_ID=skycontrol, ctlUnitModulesTable=ctlUnitModulesTable, ctlUnitElementNum=ctlUnitElementNum, ctlVirtualDevicesPingReceived=ctlVirtualDevicesPingReceived, ctlInternalSensorsDiscretType=ctlInternalSensorsDiscretType, ctlRsSensorsAnalogsTable=ctlRsSensorsAnalogsTable, ctlRsSensorsOutletName=ctlRsSensorsOutletName, ctlCANSensorsDiscretsEntry=ctlCANSensorsDiscretsEntry, ctlInternalSensorsAnalogAt75=ctlInternalSensorsAnalogAt75, ctlInternalSensorsAnalogValue=ctlInternalSensorsAnalogValue, ctlInternalSensorsAnalogModule=ctlInternalSensorsAnalogModule, ctlVirtualDevicesPingGroup=ctlVirtualDevicesPingGroup, ctlRsSensorsOutletsEntry=ctlRsSensorsOutletsEntry, ctlCANSensorsAnalogMax=ctlCANSensorsAnalogMax, ctlInternalSensorsAnalogHigh=ctlInternalSensorsAnalogHigh, ctlInternalSensorsOutletState=ctlInternalSensorsOutletState, ctlRsSensorsDiscretModule=ctlRsSensorsDiscretModule, ctlUnitElementName=ctlUnitElementName, ctlVirtualDevicesPingSent=ctlVirtualDevicesPingSent, ctlRsSensorsAnalogExpression=ctlRsSensorsAnalogExpression, ctlHardwareDevicesCamerasEntry=ctlHardwareDevicesCamerasEntry, ctlInternalSensorsOutletType=ctlInternalSensorsOutletType, ctlNotifiersMailersTable=ctlNotifiersMailersTable, ctlNotifiersTrapsEntry=ctlNotifiersTrapsEntry, ctlCANSensorsAnalogsEntry=ctlCANSensorsAnalogsEntry, ctlVirtualDevicesPingNum=ctlVirtualDevicesPingNum, ctlHardwareDevicesCameraState=ctlHardwareDevicesCameraState)
mibBuilder.exportSymbols("SKYCONTROL-SYSTEM-MIB", ctlUnitGroupId=ctlUnitGroupId, ctlVirtualDevicesPingType=ctlVirtualDevicesPingType, ctlUnitModuleId=ctlUnitModuleId, ctlNotifiersMailerMessage=ctlNotifiersMailerMessage, ctlNotifiersSMSState=ctlNotifiersSMSState, ctlRsSensorsAnalogAt0=ctlRsSensorsAnalogAt0, ctlCANSensorsDiscretValue=ctlCANSensorsDiscretValue, ctlNotifiersTrapServer=ctlNotifiersTrapServer, ctlVirtualDevicesPingsTable=ctlVirtualDevicesPingsTable, ctlRsSensorsOutletId=ctlRsSensorsOutletId, ctlUnitElementGroup=ctlUnitElementGroup, ctlInternalSensorsDiscretId=ctlInternalSensorsDiscretId)
