#
# PySNMP MIB module CISCO-ATM-CELL-LAYER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-CELL-LAYER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:28 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, TimeTicks, Unsigned32, Counter32, ModuleIdentity, iso, Gauge32, MibIdentifier, NotificationType, Counter64, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "TimeTicks", "Unsigned32", "Counter32", "ModuleIdentity", "iso", "Gauge32", "MibIdentifier", "NotificationType", "Counter64", "ObjectIdentity", "Bits")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
ciscoAtmCellLayerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 133))
ciscoAtmCellLayerMIB.setRevisions(('2002-06-28 00:00', '2000-05-02 00:00', '1999-05-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setRevisionsDescriptions(('1. Added following objects to caclStatsTable, as upper 32-bits for 64-bit wide counters: caclHighInRcvCLP0Cells, caclHighInRcvCLP1Cells, caclHighInValidOAMCells, caclHighInVpiVciErrCells, caclHighInXmtCLP0Cells, caclHighInXmtCLP1Cells, caclHighInHecErrDiscCells, caclHighInHecErrCorrectedCells, caclHighOutXmtCLP0Cells, caclHighOutXmtCLP1Cells, caclHighOutValidOAMCells, caclHighOutRcvCLP0Cells, caclHighOutRcvCLP1Cells. 2. Added caclXStatsTable which contains 64-bits wide counters. 3. Added following objects to caclIntervalStatsTable, as upper 32-bits for 64-bit wide counters: caclHighIntervalInRcvCLP0Cells, caclHighIntervalInRcvCLP1Cells, caclHighIntervalInVpiVciErrCells, caclHighIntervalInXmtCLP0Cells, caclHighIntervalInXmtCLP1Cells, caclHighIntervalInHecErrDiscCells, caclHighIntervalInHecErrCorrCells, caclHighIntervalOutXmtCLP0Cells, caclHighIntervalOutXmtCLP1Cells, caclHighIntervalOutVpiVciErrCells, caclHighIntervalOutRcvCLP0Cells, caclHighIntervalOutRcvCLP1Cells. 4. Added caclXIntervalStatsTable which contains 64-bits wide counters. 5. Changed IMPORT for Unsigned32 to SNMPv2-SMI, instead of CISCO-TC.', 'Changes made to this MIB module are as follows (1) Added interval statistic table. (2) Corrected some of the typographical errors in description of certain published objects.', 'The initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setLastUpdated('200206280000Z')
if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setContactInfo('Cisco Systems Customer Service Postal : 170 W Tasman Drive San Jose, CA 95134 USA Tel : +1 800 553-NETS E-mail : cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmCellLayerMIB.setDescription('The MIB module to describe ATM cell layer objects and statistics of a physical line.')
ciscoAtmCellLayerMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1))
caclConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1))
caclStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2))
caclConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1), )
if mibBuilder.loadTexts: caclConfigTable.setStatus('current')
if mibBuilder.loadTexts: caclConfigTable.setDescription('The Atm cell layer configuration table. An entry in this table is automatically created for each entry in the ifTable which has an ifType of atm(37), and which is layered on top of a SONET,DS3 or DS1 interface on the ATM switch.')
caclConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caclConfigEntry.setStatus('current')
if mibBuilder.loadTexts: caclConfigEntry.setDescription('An entry in the caclConfigTable. The table is indexed by the ifIndex of the atm(37) interface.')
caclNullCellHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclNullCellHeader.setReference('ITU-T Recomendation I.432')
if mibBuilder.loadTexts: caclNullCellHeader.setStatus('current')
if mibBuilder.loadTexts: caclNullCellHeader.setDescription('The first four bytes of the ATM header to be used for Null cells. Generally, idle cells are inserted into a cell stream as a mechanism for rate adaptation between the ATM data link layer and the physical layer. The header fields: Generic flow control,Payload type and Cell Loss Priority can be specified in the value of this object. It applies to both transmitted as well as received cells.')
caclNullCellPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(106)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclNullCellPayload.setReference('ITU-T Recomendation I.432')
if mibBuilder.loadTexts: caclNullCellPayload.setStatus('current')
if mibBuilder.loadTexts: caclNullCellPayload.setDescription('Null cell Payload definition. The idle cell information field can be specified in this object. It applies to both transmitted as well as received cells. The default value is 0x6A.')
caclHecCosetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclHecCosetEnable.setReference('ITU-T Recomendation I.432')
if mibBuilder.loadTexts: caclHecCosetEnable.setStatus('current')
if mibBuilder.loadTexts: caclHecCosetEnable.setDescription('If enabled, the algorithm of Coset Polynomial Addition is applied to do header error check calculations. It applies to transmitted as well as received cells.')
caclPayloadScramblingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caclPayloadScramblingEnable.setReference('ITU-T Recomendation I.432')
if mibBuilder.loadTexts: caclPayloadScramblingEnable.setStatus('current')
if mibBuilder.loadTexts: caclPayloadScramblingEnable.setDescription('An indication of whether Payload Scrambling is enabled.')
caclTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: caclTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the near end current error- measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
caclValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclValidIntervals.setStatus('current')
if mibBuilder.loadTexts: caclValidIntervals.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
caclInvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: caclInvalidIntervals.setDescription('The number of near end intervals in the range from 0 to caclValidIntervals for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
caclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1), )
if mibBuilder.loadTexts: caclStatsTable.setStatus('current')
if mibBuilder.loadTexts: caclStatsTable.setDescription('The ATM Cell layer stats table is for the cell layer over a physical line. There is an entry for each SONET, DS3 or DS1 line. The table maintains objects that apply to ATM end-systems, as well as objects that apply only to ATM switches. In all the following descriptions of objects, CLP-0 means Cell Loss Priority = 0, and CLP-1 means Cell Loss Priority = 1. ATM cells with CLP=0 have a higher priority in regard to cell loss than ATM cells with CLP=1. Therefore, during resource congestions, CLP=1 cells are dropped before any CLP=0 cell is dropped. Ingress direction means coming from network to the switch. Egress direction means going from switch to the network.')
caclStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: caclStatsEntry.setStatus('current')
if mibBuilder.loadTexts: caclStatsEntry.setDescription('An entry for the ATM Cell layer statistics for a physical line. These are realtime statistics which are collected per cell layer over a physical line. Entries are created automatically for each line. The table is indexed by the ifIndex value of the atm(37) interface.')
caclInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclInRcvCLP0Cells.setDescription('The number of cells received on the interface with CLP0 bit set.')
caclInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclInRcvCLP1Cells.setDescription('The number of cells received on the interface with CLP1 bit set.')
caclInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclInValidOAMCells.setDescription('The number of valid Operation and Maintainance(OAM) cells received on the interface.')
caclInErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInErrOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclInErrOAMCells.setDescription('The number of errored OAM cells received on the interface.')
caclInGfcCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInGfcCells.setStatus('current')
if mibBuilder.loadTexts: caclInGfcCells.setDescription('The number of non-zero GFC cells received on the interface.')
caclInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclInVpiVciErrCells.setDescription('The number of cells received from the interface with unknown Vpi/Vci values.')
caclInLastUnknVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInLastUnknVpi.setStatus('current')
if mibBuilder.loadTexts: caclInLastUnknVpi.setDescription("The last unknown Vpi value. This object is valid only if 'caclInVpiVciErrCells' is non-zero.")
caclInLastUnknVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInLastUnknVci.setStatus('current')
if mibBuilder.loadTexts: caclInLastUnknVci.setDescription("The last unknown Vci value. This object is valid only if 'caclInVpiVciErrCells' is non-zero.")
caclInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclInXmtCLP0Cells.setDescription('The number of CLP0 cells received from the interface and transmitted to the switch fabric.')
caclInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclInXmtCLP1Cells.setDescription('The number of CLP1 cells received from the interface and transmitted to the switch fabric.')
caclInValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInValidRMCells.setStatus('current')
if mibBuilder.loadTexts: caclInValidRMCells.setDescription('The number of Valid RM cells received from the interface.')
caclInRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInRcvIdleCells.setStatus('current')
if mibBuilder.loadTexts: caclInRcvIdleCells.setDescription('The number of idle cells received from the interface.')
caclInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInHecErrDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclInHecErrDiscCells.setDescription('Header Error Check (HEC) calculation is used to provide error detection and correction from the ATM cell header. This object is the number of received cells which were discarded because they had HEC errors.')
caclInHecErrCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInHecErrCorrectedCells.setStatus('current')
if mibBuilder.loadTexts: caclInHecErrCorrectedCells.setDescription('The number of received cells which had HEC errors that were corrected.')
caclInUpcCLP0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInUpcCLP0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caclInUpcCLP0DiscCells.setDescription('In order to allocate resources fairly among different users, networks police traffic at resource access points. The traffic enforcement or policing taken at a UNI is called Usage Parameter Control (UPC). This is the counter associated with the number of CLP0 cells discarded due to policing.')
caclInUpcTotalDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInUpcTotalDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclInUpcTotalDiscCells.setDescription('The total number of cells(CLP0+1) discarded due to policing.')
caclInUpcTotalNonCompCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclInUpcTotalNonCompCells.setStatus('current')
if mibBuilder.loadTexts: caclInUpcTotalNonCompCells.setDescription('The number of non-compliant cells (cells that are not compliant to a specific traffic profile) discarded due to policing.')
caclOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclOutXmtCLP0Cells.setDescription('The number of CLP0 cells transmitted to interface.')
caclOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclOutXmtCLP1Cells.setDescription('The number of CLP1 cells transmitted to interface.')
caclOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclOutValidOAMCells.setDescription('The number of Operartion and Maintainance(OAM) cells received by the interface from the switch fabric.')
caclOutErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutErrOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclOutErrOAMCells.setDescription('The number of errored OAM cells received by the interface from the switch fabric.')
caclOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclOutVpiVciErrCells.setDescription('The number of cells with unknown vpi vci value in received by the interface from the switch fabric.')
caclOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclOutRcvCLP0Cells.setDescription('The number of CLP0 cells received by the interface from the switch fabric.')
caclOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclOutRcvCLP1Cells.setDescription('The number of CLP1 cells received by the interface from the switch fabric.')
caclOutRcvValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvValidRMCells.setStatus('current')
if mibBuilder.loadTexts: caclOutRcvValidRMCells.setDescription('The number of Valid RM cells received by the interface from the switch fabric.')
caclOutRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclOutRcvIdleCells.setStatus('current')
if mibBuilder.loadTexts: caclOutRcvIdleCells.setDescription('The number of idle cells received by the interface from the switch fabric.')
caclHInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHInRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHInRcvCLP0Cells.setDescription('The 64-bit version of caclInRcvCLP0Cells.')
caclHInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHInRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHInRcvCLP1Cells.setDescription('The 64-bit version of caclnRcvCLP1Cells.')
caclHOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHOutXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHOutXmtCLP0Cells.setDescription('The 64-bit version of caclOutXmtCLP0Cells.')
caclHOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHOutXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHOutXmtCLP1Cells.setDescription('The 64-bit version of caclOutXmtCLP1Cells.')
caclHighInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighInRcvCLP0Cells.setDescription('The upper 32 bit of the number of cells received on the interface with CLP0 bit set.')
caclHighInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighInRcvCLP1Cells.setDescription('The upper 32 bit of the number of cells received on the interface with CLP1 bit set.')
caclHighInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclHighInValidOAMCells.setDescription('The upper 32 bit of the number of valid Operation and Maintainance(OAM) cells received on the interface.')
caclHighInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclHighInVpiVciErrCells.setDescription('The upper 32 bit of the number of cells received from the interface with unknown Vpi/Vci values.')
caclHighInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighInXmtCLP0Cells.setDescription('The upper 32 bit of the number of CLP0 cells received from the interface and transmitted to the switch fabric.')
caclHighInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighInXmtCLP1Cells.setDescription('The upper 32 bit of the number of CLP1 cells received from the interface and transmitted to the switch fabric.')
caclHighInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInHecErrDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclHighInHecErrDiscCells.setDescription('Header Error Check (HEC) calculation is used to provide error detection and correction from the ATM cell header. This object is the upper 32 bit of the number of received cells which were discarded because they had HEC errors.')
caclHighInHecErrCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighInHecErrCorrectedCells.setStatus('current')
if mibBuilder.loadTexts: caclHighInHecErrCorrectedCells.setDescription('The upper 32 bit of the number of received cells which had HEC errors that were corrected.')
caclHighOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighOutXmtCLP0Cells.setDescription('The upper 32 bit of the number of CLP0 cells transmitted to interface.')
caclHighOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighOutXmtCLP1Cells.setDescription('The upper 32 bit of the number of CLP1 cells transmitted to interface.')
caclHighOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclHighOutValidOAMCells.setDescription('The upper 32 bit of the number of Operartion and Maintainance(OAM) cells received by the interface from the switch fabric.')
caclHighOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighOutRcvCLP0Cells.setDescription('The upper 32 bit of the number of CLP0 cells received by the interface from the switch fabric.')
caclHighOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighOutRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighOutRcvCLP1Cells.setDescription('The upper 32 bit of the number of CLP1 cells received by the interface from the switch fabric.')
caclIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2), )
if mibBuilder.loadTexts: caclIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: caclIntervalStatsTable.setDescription('The ATM Cell layer interval stats table. This table contains statistics for the current (incomplete) interval and upto 96 previous (completed) 15-minute intervals.')
caclIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-CELL-LAYER-MIB", "caclIntervalNumber"))
if mibBuilder.loadTexts: caclIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: caclIntervalStatsEntry.setDescription('An entry for the ATM Cell layer interval statistics for a physical line. Entries are created automatically for each line. The table is indexed by the ifIndex and interval number. Interval number 0 is the current interval being collected.')
caclIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96)))
if mibBuilder.loadTexts: caclIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: caclIntervalNumber.setDescription('A number between 0 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1. 0 means the current interval being collected.')
caclIntervalInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInRcvCLP0Cells.setDescription('The number of cells received on the interface with CLP0 bit set during 15 minute interval.')
caclIntervalInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInRcvCLP1Cells.setDescription('The number of cells received on the interface with CLP1 bit set during 15 minute interval.')
caclIntervalInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInValidOAMCells.setDescription('The number of valid Operation and Maintainance(OAM) cells received on the interface during 15 minute interval.')
caclIntervalInErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInErrOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInErrOAMCells.setDescription('The number of errored OAM cells received on the interface during 15 minute interval.')
caclIntervalInGfcCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInGfcCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInGfcCells.setDescription('The number of non-zero GFC cells received on the interface during 15 minute interval.')
caclIntervalInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInVpiVciErrCells.setDescription('The number of cells received from the interface with unknown Vpi/Vci values during 15 minute interval.')
caclIntervalInLastUnknVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInLastUnknVpi.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInLastUnknVpi.setDescription("The last unknown Vpi value during 15 minute interval. This object is valid only if the value of 'caclIntervalInVpiVciErrCells' for the same interval is non-zero.")
caclIntervalInLastUnknVci = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInLastUnknVci.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInLastUnknVci.setDescription("The last unknown Vci value during 15 minute interval. This object is valid only if the value of 'caclIntervalInVpiVciErrCells' for the same interval is non-zero.")
caclIntervalInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInXmtCLP0Cells.setDescription('The number of CLP0 cells received from the interface and transmitted to the switch fabric during 15 minute interval.')
caclIntervalInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInXmtCLP1Cells.setDescription('The number of CLP1 cells received from the interface and transmitted to the switch fabric during 15 minute interval.')
caclIntervalInValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInValidRMCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInValidRMCells.setDescription('The number of Valid RM cells received from the interface during 15 minute interval.')
caclIntervalInRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInRcvIdleCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInRcvIdleCells.setDescription('The number of idle cells received from the interface during 15 minute interval.')
caclIntervalInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInHecErrDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInHecErrDiscCells.setDescription('This object is the number of received cells which were discarded because they had HEC errors during 15 minute interval.')
caclIntervalInHecErrCorrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInHecErrCorrCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInHecErrCorrCells.setDescription('The number of received cells which had HEC errors that were corrected during 15 minute interval.')
caclIntervalInUpcCLP0DiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInUpcCLP0DiscCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInUpcCLP0DiscCells.setDescription('This is the counter associated with the number of CLP0 cells discarded due to policing during 15 minute interval.')
caclIntervalInUpcTotalDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInUpcTotalDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInUpcTotalDiscCells.setDescription('The total number of cells(CLP0+1) discarded due to policing during 15 minute interval.')
caclIntervalInUpcTotNonCmpCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalInUpcTotNonCmpCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalInUpcTotNonCmpCells.setDescription('The number of non-compliant cells (cells that are not compliant to a specific traffic profile) discarded due to policing during 15 minute interval.')
caclIntervalOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutXmtCLP0Cells.setDescription('The number of CLP0 cells transmitted to interface during 15 minute interval.')
caclIntervalOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutXmtCLP1Cells.setDescription('The number of CLP1 cells transmitted to interface during 15 minute interval.')
caclIntervalOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutValidOAMCells.setDescription('The number of Operartion and Maintainance(OAM) cells received by the interface from the switch fabric during 15 minute interval.')
caclIntervalOutErrOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutErrOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutErrOAMCells.setDescription('The number of errored OAM cells received by the interface from the switch fabric during 15 minute interval.')
caclIntervalOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutVpiVciErrCells.setDescription('The number of cells with unknown vpi vci value in received by the interface from the switch fabric during 15 minute interval.')
caclIntervalOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutRcvCLP0Cells.setDescription('The number of CLP0 cells received by the interface from the switch fabric during 15 minute interval.')
caclIntervalOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutRcvCLP1Cells.setDescription('The number of CLP1 cells received by the interface from the switch fabric during 15 minute interval.')
caclIntervalOutRcvValidRMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvValidRMCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutRcvValidRMCells.setDescription('The number of Valid RM cells received by the interface from the switch fabric during 15 minute interval.')
caclIntervalOutRcvIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclIntervalOutRcvIdleCells.setStatus('current')
if mibBuilder.loadTexts: caclIntervalOutRcvIdleCells.setDescription('The number of idle cells received by the interface from the switch fabric during 15 minute interval.')
caclHighIntervalInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInRcvCLP0Cells.setDescription('The Upper 32 bit of the number of cells received on the interface with CLP0 bit set during 15 minute interval.')
caclHighIntervalInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInRcvCLP1Cells.setDescription('The Upper 32 bit of the number of cells received on the interface with CLP1 bit set during 15 minute interval.')
caclHighIntervalInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInVpiVciErrCells.setDescription('The Upper 32 bit of the number of cells received from the interface with unknown Vpi/Vci values during 15 minute interval.')
caclHighIntervalInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInXmtCLP0Cells.setDescription('The Upper 32 bit of the number of CLP0 cells received from the interface and transmitted to the switch fabric during 15 minute interval.')
caclHighIntervalInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInXmtCLP1Cells.setDescription('The Upper 32 bit of the number of CLP1 cells received from the interface and transmitted to the switch fabric during 15 minute interval.')
caclHighIntervalInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInHecErrDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInHecErrDiscCells.setDescription('This object is the Upper 32 bit of the number of received cells which were discarded because they had HEC errors during 15 minute interval.')
caclHighIntervalInHecErrCorrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalInHecErrCorrCells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalInHecErrCorrCells.setDescription('The number of received cells which had HEC errors that were corrected during 15 minute interval.')
caclHighIntervalOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalOutXmtCLP0Cells.setDescription('The number of CLP0 cells transmitted to interface during 15 minute interval.')
caclHighIntervalOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalOutXmtCLP1Cells.setDescription('The number of CLP1 cells transmitted to interface during 15 minute interval.')
caclHighIntervalOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalOutVpiVciErrCells.setDescription('The number of cells with unknown vpi vci value in received by the interface from the switch fabric during 15 minute interval.')
caclHighIntervalOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalOutRcvCLP0Cells.setDescription('The number of CLP0 cells received by the interface from the switch fabric during 15 minute interval.')
caclHighIntervalOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHighIntervalOutRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHighIntervalOutRcvCLP1Cells.setDescription('The number of CLP1 cells received by the interface from the switch fabric during 15 minute interval.')
caclXStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3), )
if mibBuilder.loadTexts: caclXStatsTable.setStatus('current')
if mibBuilder.loadTexts: caclXStatsTable.setDescription('The ATM Cell layer stats table is for the cell layer over a physical line. There is an entry for each SONET, DS3 or DS1 line. The table maintains objects that apply to ATM end-systems, as well as objects that apply only to ATM switches. In all the following descriptions of objects, CLP-0 means Cell Loss Priority = 0, and CLP-1 means Cell Loss Priority = 1. ATM cells with CLP=0 have a higher priority in regard to cell loss than ATM cells with CLP=1. Therefore, during resource congestions, CLP=1 cells are dropped before any CLP=0 cell is dropped. Ingress direction means coming from network to the switch. Egress direction means going from switch to the network.')
caclXStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1), )
caclStatsEntry.registerAugmentions(("CISCO-ATM-CELL-LAYER-MIB", "caclXStatsEntry"))
caclXStatsEntry.setIndexNames(*caclStatsEntry.getIndexNames())
if mibBuilder.loadTexts: caclXStatsEntry.setStatus('current')
if mibBuilder.loadTexts: caclXStatsEntry.setDescription('An entry for the ATM Cell layer statistics for a physical line. These are realtime statistics which are collected per cell layer over a physical line. Entries are created automatically for each line. The table is indexed by the ifIndex value of the atm(37) interface.')
caclHCInValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclHCInValidOAMCells.setDescription('The 64 bit version of the number of valid Operation and Maintainance(OAM) cells received on the interface.')
caclHCInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclHCInVpiVciErrCells.setDescription('The 64 bit version of the number of cells received from the interface with unknown Vpi/Vci values.')
caclHCInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCInXmtCLP0Cells.setDescription('The 64 bit version of the number of CLP0 cells received from the interface and transmitted to the switch fabric.')
caclHCInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCInXmtCLP1Cells.setDescription('The 64 bit version of the number of CLP1 cells received from the interface and transmitted to the switch fabric.')
caclHCInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInHecErrDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclHCInHecErrDiscCells.setDescription('Header Error Check (HEC) calculation is used to provide error detection and correction from the ATM cell header. This object is 64 bit version of the the number of received cells which were discarded because they had HEC errors.')
caclHCInHecErrCorrectedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCInHecErrCorrectedCells.setStatus('current')
if mibBuilder.loadTexts: caclHCInHecErrCorrectedCells.setDescription('The 64 bit version of thenumber of received cells which had HEC errors that were corrected.')
caclHCOutValidOAMCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCOutValidOAMCells.setStatus('current')
if mibBuilder.loadTexts: caclHCOutValidOAMCells.setDescription('The 64 bit version of the number of Operartion and Maintainance(OAM) cells received by the interface from the switch fabric.')
caclHCOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCOutRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCOutRcvCLP0Cells.setDescription('The 64 bit version of the number of CLP0 cells received by the interface from the switch fabric.')
caclHCOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCOutRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCOutRcvCLP1Cells.setDescription('The 64 bit version of the number of CLP1 cells received by the interface from the switch fabric.')
caclXIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4), )
if mibBuilder.loadTexts: caclXIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: caclXIntervalStatsTable.setDescription('The ATM Cell layer interval stats table. This table contains statistics for the current (incomplete) interval and upto 96 previous (completed) 15-minute intervals.')
caclXIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-ATM-CELL-LAYER-MIB", "caclIntervalNumber"))
if mibBuilder.loadTexts: caclXIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: caclXIntervalStatsEntry.setDescription('An entry for the ATM Cell layer interval statistics for a physical line. Entries are created automatically for each line. The table is indexed by the ifIndex and interval number. Interval number 0 is the current interval being collected.')
caclHCIntervalInRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInRcvCLP0Cells.setDescription('The 64 bit version of the number of cells received on the interface with CLP0 bit set during 15 minute interval.')
caclHCIntervalInRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInRcvCLP1Cells.setDescription('The 64 bit version of the number of cells received on the interface with CLP1 bit set during 15 minute interval.')
caclHCIntervalInVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInVpiVciErrCells.setDescription('The 64 bit version of the number of cells received from the interface with unknown Vpi/Vci values during 15 minute interval.')
caclHCIntervalInXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInXmtCLP0Cells.setDescription('The 64 bit version of the number of CLP0 cells received from the interface and transmitted to the switch fabric during 15 minute interval.')
caclHCIntervalInXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInXmtCLP1Cells.setDescription('The 64 bit version of the number of CLP1 cells received from the interface and transmitted to the switch fabric during 15 minute interval.')
caclHCIntervalInHecErrDiscCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInHecErrDiscCells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInHecErrDiscCells.setDescription('This object is the 64 bit version of the number of received cells which were discarded because they had HEC errors during 15 minute interval.')
caclHCIntervalInHecErrCorrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalInHecErrCorrCells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalInHecErrCorrCells.setDescription('The 64 bit version of the number of received cells which had HEC errors that were corrected during 15 minute interval.')
caclHCIntervalOutXmtCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutXmtCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalOutXmtCLP0Cells.setDescription('The 64 bit version of the number of CLP0 cells transmitted to interface during 15 minute interval.')
caclHCIntervalOutXmtCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutXmtCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalOutXmtCLP1Cells.setDescription('The 64 bit version of the number of CLP1 cells transmitted to interface during 15 minute interval.')
caclHCIntervalOutVpiVciErrCells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutVpiVciErrCells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalOutVpiVciErrCells.setDescription('The 64 bit version of the number of cells with unknown vpi vci value in received by the interface from the switch fabric during 15 minute interval.')
caclHCIntervalOutRcvCLP0Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutRcvCLP0Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalOutRcvCLP0Cells.setDescription('The 64 bit version of the number of CLP0 cells received by the interfacefrom the switch fabric during 15 minute interval.')
caclHCIntervalOutRcvCLP1Cells = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 2, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: caclHCIntervalOutRcvCLP1Cells.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalOutRcvCLP1Cells.setDescription('The 64 bit version of the number of CLP1 cells received by the interface from the switch fabric during 15 minute interval.')
caclMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3))
caclMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 1))
caclMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2))
caclMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 1, 1)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMSwitchStatsMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMEndSyatemStatsMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighSpeedATMMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclMIBCompliance = caclMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: caclMIBCompliance.setDescription('The Compliance statement for the Cisco ATM Cell layer MIB.')
caclMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 1, 2)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMSwitchStatsMIBGroup1"), ("CISCO-ATM-CELL-LAYER-MIB", "caclATMStatsMIBGroup"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighSpeedATMMIBGroup1"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalStatsMIBGroup1"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalStatsMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclMIBCompliance1 = caclMIBCompliance1.setStatus('current')
if mibBuilder.loadTexts: caclMIBCompliance1.setDescription('The Compliance statement for the Cisco ATM Cell layer MIB.')
caclMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 1)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclNullCellHeader"), ("CISCO-ATM-CELL-LAYER-MIB", "caclNullCellPayload"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHecCosetEnable"), ("CISCO-ATM-CELL-LAYER-MIB", "caclPayloadScramblingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclMIBGroup = caclMIBGroup.setStatus('current')
if mibBuilder.loadTexts: caclMIBGroup.setDescription('A collection of objects which provide ATM cell layer configuration parmeters.')
caclATMSwitchStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 2)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalNonCompCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvIdleCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMSwitchStatsMIBGroup = caclATMSwitchStatsMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caclATMSwitchStatsMIBGroup.setDescription('A collection of objects which provide statistics for ATM switch interfaces.')
caclATMEndSyatemStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 3)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalNonCompCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutVpiVciErrCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMEndSyatemStatsMIBGroup = caclATMEndSyatemStatsMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caclATMEndSyatemStatsMIBGroup.setDescription('A collection of objects which provide statistics for ATM end-system interfaces.')
caclHighSpeedATMMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 4)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclHighSpeedATMMIBGroup = caclHighSpeedATMMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caclHighSpeedATMMIBGroup.setDescription('These statistics apply to ATM interfaces with speed of OC12 or higher.')
caclIntervalStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 5)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclTimeElapsed"), ("CISCO-ATM-CELL-LAYER-MIB", "caclValidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInvalidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotNonCmpCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvIdleCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclIntervalStatsMIBGroup = caclIntervalStatsMIBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: caclIntervalStatsMIBGroup.setDescription('A collection of interval statistics.')
caclATMSwitchStatsMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 6)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMSwitchStatsMIBGroup1 = caclATMSwitchStatsMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caclATMSwitchStatsMIBGroup1.setDescription('A collection of objects which provide statistics for ATM switch interfaces.')
caclATMStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 7)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInUpcTotalNonCompCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighOutValidOAMCells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclATMStatsMIBGroup = caclATMStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: caclATMStatsMIBGroup.setDescription('A collection of objects which provide statistics for ATM switch and ATM end-system interfaces.')
caclHighSpeedATMMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 8)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCInHecErrCorrectedCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclHighSpeedATMMIBGroup1 = caclHighSpeedATMMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caclHighSpeedATMMIBGroup1.setDescription('These statistics apply to ATM interfaces with speed of OC12 or higher.')
caclIntervalStatsMIBGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 9)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclTimeElapsed"), ("CISCO-ATM-CELL-LAYER-MIB", "caclValidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclInvalidIntervals"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInGfcCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVpi"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInLastUnknVci"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcCLP0DiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotalDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalInUpcTotNonCmpCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutValidOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutErrOAMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvValidRMCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclIntervalOutRcvIdleCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHighIntervalOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclIntervalStatsMIBGroup1 = caclIntervalStatsMIBGroup1.setStatus('current')
if mibBuilder.loadTexts: caclIntervalStatsMIBGroup1.setDescription('A collection of interval statistics.')
caclHCIntervalStatsMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 133, 1, 3, 2, 10)).setObjects(("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInRcvCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInHecErrDiscCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalInHecErrCorrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutXmtCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutXmtCLP1Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutVpiVciErrCells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutRcvCLP0Cells"), ("CISCO-ATM-CELL-LAYER-MIB", "caclHCIntervalOutRcvCLP1Cells"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    caclHCIntervalStatsMIBGroup = caclHCIntervalStatsMIBGroup.setStatus('current')
if mibBuilder.loadTexts: caclHCIntervalStatsMIBGroup.setDescription('A collection of interval statistics.')
mibBuilder.exportSymbols("CISCO-ATM-CELL-LAYER-MIB", caclConfig=caclConfig, caclIntervalInXmtCLP0Cells=caclIntervalInXmtCLP0Cells, caclHighSpeedATMMIBGroup1=caclHighSpeedATMMIBGroup1, caclMIBGroups=caclMIBGroups, caclInGfcCells=caclInGfcCells, caclInVpiVciErrCells=caclInVpiVciErrCells, caclATMEndSyatemStatsMIBGroup=caclATMEndSyatemStatsMIBGroup, caclNullCellPayload=caclNullCellPayload, caclStats=caclStats, caclHighIntervalOutXmtCLP0Cells=caclHighIntervalOutXmtCLP0Cells, caclXIntervalStatsTable=caclXIntervalStatsTable, caclHighInRcvCLP0Cells=caclHighInRcvCLP0Cells, caclMIBCompliance1=caclMIBCompliance1, caclHOutXmtCLP0Cells=caclHOutXmtCLP0Cells, caclHighIntervalInHecErrCorrCells=caclHighIntervalInHecErrCorrCells, caclInHecErrDiscCells=caclInHecErrDiscCells, caclInUpcTotalNonCompCells=caclInUpcTotalNonCompCells, caclHCIntervalOutRcvCLP0Cells=caclHCIntervalOutRcvCLP0Cells, caclHCIntervalOutXmtCLP1Cells=caclHCIntervalOutXmtCLP1Cells, caclIntervalInVpiVciErrCells=caclIntervalInVpiVciErrCells, caclStatsTable=caclStatsTable, caclIntervalOutErrOAMCells=caclIntervalOutErrOAMCells, caclXIntervalStatsEntry=caclXIntervalStatsEntry, caclIntervalOutRcvValidRMCells=caclIntervalOutRcvValidRMCells, ciscoAtmCellLayerMIBObjects=ciscoAtmCellLayerMIBObjects, caclXStatsTable=caclXStatsTable, caclInLastUnknVpi=caclInLastUnknVpi, caclHighInHecErrDiscCells=caclHighInHecErrDiscCells, caclHighOutXmtCLP0Cells=caclHighOutXmtCLP0Cells, caclInUpcTotalDiscCells=caclInUpcTotalDiscCells, caclHighIntervalInRcvCLP1Cells=caclHighIntervalInRcvCLP1Cells, caclHCIntervalOutRcvCLP1Cells=caclHCIntervalOutRcvCLP1Cells, caclIntervalInHecErrCorrCells=caclIntervalInHecErrCorrCells, caclHCIntervalInRcvCLP0Cells=caclHCIntervalInRcvCLP0Cells, caclInValidOAMCells=caclInValidOAMCells, caclIntervalInUpcTotNonCmpCells=caclIntervalInUpcTotNonCmpCells, caclMIBCompliance=caclMIBCompliance, caclIntervalInUpcCLP0DiscCells=caclIntervalInUpcCLP0DiscCells, caclIntervalOutVpiVciErrCells=caclIntervalOutVpiVciErrCells, caclOutValidOAMCells=caclOutValidOAMCells, caclIntervalOutRcvCLP0Cells=caclIntervalOutRcvCLP0Cells, caclIntervalInXmtCLP1Cells=caclIntervalInXmtCLP1Cells, caclHighOutValidOAMCells=caclHighOutValidOAMCells, caclHighIntervalOutXmtCLP1Cells=caclHighIntervalOutXmtCLP1Cells, caclHighIntervalInXmtCLP1Cells=caclHighIntervalInXmtCLP1Cells, caclHighIntervalInVpiVciErrCells=caclHighIntervalInVpiVciErrCells, caclHCIntervalInVpiVciErrCells=caclHCIntervalInVpiVciErrCells, caclHCIntervalInHecErrCorrCells=caclHCIntervalInHecErrCorrCells, caclHCInVpiVciErrCells=caclHCInVpiVciErrCells, caclOutRcvCLP0Cells=caclOutRcvCLP0Cells, caclHCInHecErrCorrectedCells=caclHCInHecErrCorrectedCells, caclHCInHecErrDiscCells=caclHCInHecErrDiscCells, caclIntervalInRcvCLP1Cells=caclIntervalInRcvCLP1Cells, caclHCInValidOAMCells=caclHCInValidOAMCells, caclInUpcCLP0DiscCells=caclInUpcCLP0DiscCells, caclInLastUnknVci=caclInLastUnknVci, caclHighInXmtCLP1Cells=caclHighInXmtCLP1Cells, caclHighIntervalOutRcvCLP1Cells=caclHighIntervalOutRcvCLP1Cells, caclHInRcvCLP0Cells=caclHInRcvCLP0Cells, caclATMStatsMIBGroup=caclATMStatsMIBGroup, caclIntervalInHecErrDiscCells=caclIntervalInHecErrDiscCells, caclHighInRcvCLP1Cells=caclHighInRcvCLP1Cells, caclIntervalStatsTable=caclIntervalStatsTable, caclXStatsEntry=caclXStatsEntry, caclHCOutRcvCLP0Cells=caclHCOutRcvCLP0Cells, caclPayloadScramblingEnable=caclPayloadScramblingEnable, caclStatsEntry=caclStatsEntry, caclHighOutRcvCLP1Cells=caclHighOutRcvCLP1Cells, caclIntervalOutRcvCLP1Cells=caclIntervalOutRcvCLP1Cells, caclHighOutXmtCLP1Cells=caclHighOutXmtCLP1Cells, caclIntervalInUpcTotalDiscCells=caclIntervalInUpcTotalDiscCells, caclHCIntervalInHecErrDiscCells=caclHCIntervalInHecErrDiscCells, caclIntervalOutXmtCLP0Cells=caclIntervalOutXmtCLP0Cells, caclHInRcvCLP1Cells=caclHInRcvCLP1Cells, caclInXmtCLP1Cells=caclInXmtCLP1Cells, caclHighIntervalOutVpiVciErrCells=caclHighIntervalOutVpiVciErrCells, caclConfigTable=caclConfigTable, caclInErrOAMCells=caclInErrOAMCells, caclIntervalInValidOAMCells=caclIntervalInValidOAMCells, caclHecCosetEnable=caclHecCosetEnable, caclOutRcvValidRMCells=caclOutRcvValidRMCells, caclMIBConformance=caclMIBConformance, caclIntervalInRcvCLP0Cells=caclIntervalInRcvCLP0Cells, caclHCIntervalInXmtCLP1Cells=caclHCIntervalInXmtCLP1Cells, caclNullCellHeader=caclNullCellHeader, caclIntervalInGfcCells=caclIntervalInGfcCells, caclHCInXmtCLP0Cells=caclHCInXmtCLP0Cells, caclOutRcvIdleCells=caclOutRcvIdleCells, caclInValidRMCells=caclInValidRMCells, caclTimeElapsed=caclTimeElapsed, caclHighIntervalOutRcvCLP0Cells=caclHighIntervalOutRcvCLP0Cells, caclHighInHecErrCorrectedCells=caclHighInHecErrCorrectedCells, caclIntervalOutXmtCLP1Cells=caclIntervalOutXmtCLP1Cells, caclATMSwitchStatsMIBGroup1=caclATMSwitchStatsMIBGroup1, caclInvalidIntervals=caclInvalidIntervals, caclHCIntervalStatsMIBGroup=caclHCIntervalStatsMIBGroup, caclHCIntervalOutVpiVciErrCells=caclHCIntervalOutVpiVciErrCells, caclIntervalStatsMIBGroup1=caclIntervalStatsMIBGroup1, PYSNMP_MODULE_ID=ciscoAtmCellLayerMIB, caclHighInValidOAMCells=caclHighInValidOAMCells, caclHCOutRcvCLP1Cells=caclHCOutRcvCLP1Cells, caclMIBCompliances=caclMIBCompliances, caclIntervalInRcvIdleCells=caclIntervalInRcvIdleCells, caclConfigEntry=caclConfigEntry, caclIntervalInValidRMCells=caclIntervalInValidRMCells, caclOutRcvCLP1Cells=caclOutRcvCLP1Cells, caclIntervalNumber=caclIntervalNumber, caclIntervalStatsEntry=caclIntervalStatsEntry, caclHCIntervalInRcvCLP1Cells=caclHCIntervalInRcvCLP1Cells, caclHighOutRcvCLP0Cells=caclHighOutRcvCLP0Cells, caclOutXmtCLP1Cells=caclOutXmtCLP1Cells, caclIntervalInLastUnknVpi=caclIntervalInLastUnknVpi, caclInRcvCLP0Cells=caclInRcvCLP0Cells, caclHighIntervalInRcvCLP0Cells=caclHighIntervalInRcvCLP0Cells, caclIntervalOutValidOAMCells=caclIntervalOutValidOAMCells, ciscoAtmCellLayerMIB=ciscoAtmCellLayerMIB, caclOutXmtCLP0Cells=caclOutXmtCLP0Cells, caclHighIntervalInHecErrDiscCells=caclHighIntervalInHecErrDiscCells, caclATMSwitchStatsMIBGroup=caclATMSwitchStatsMIBGroup, caclHighSpeedATMMIBGroup=caclHighSpeedATMMIBGroup, caclHCOutValidOAMCells=caclHCOutValidOAMCells, caclIntervalStatsMIBGroup=caclIntervalStatsMIBGroup, caclIntervalOutRcvIdleCells=caclIntervalOutRcvIdleCells, caclIntervalInLastUnknVci=caclIntervalInLastUnknVci, caclValidIntervals=caclValidIntervals, caclInHecErrCorrectedCells=caclInHecErrCorrectedCells, caclHCIntervalInXmtCLP0Cells=caclHCIntervalInXmtCLP0Cells, caclHCInXmtCLP1Cells=caclHCInXmtCLP1Cells, caclOutErrOAMCells=caclOutErrOAMCells, caclHighInVpiVciErrCells=caclHighInVpiVciErrCells, caclInXmtCLP0Cells=caclInXmtCLP0Cells, caclInRcvIdleCells=caclInRcvIdleCells, caclOutVpiVciErrCells=caclOutVpiVciErrCells, caclMIBGroup=caclMIBGroup, caclHOutXmtCLP1Cells=caclHOutXmtCLP1Cells, caclInRcvCLP1Cells=caclInRcvCLP1Cells, caclHighInXmtCLP0Cells=caclHighInXmtCLP0Cells, caclHCIntervalOutXmtCLP0Cells=caclHCIntervalOutXmtCLP0Cells, caclHighIntervalInXmtCLP0Cells=caclHighIntervalInXmtCLP0Cells, caclIntervalInErrOAMCells=caclIntervalInErrOAMCells)
