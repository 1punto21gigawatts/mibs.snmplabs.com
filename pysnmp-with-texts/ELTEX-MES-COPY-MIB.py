#
# PySNMP MIB module ELTEX-MES-COPY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ELTEX-MES-COPY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:01:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
eltMesCopy, = mibBuilder.importSymbols("ELTEX-MES", "eltMesCopy")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
RlCopyLocationType, = mibBuilder.importSymbols("RADLAN-COPY-MIB", "RlCopyLocationType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, Integer32, NotificationType, ObjectIdentity, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, IpAddress, iso, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Integer32", "NotificationType", "ObjectIdentity", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "IpAddress", "iso", "ModuleIdentity", "Counter64")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
eltCopyAutoBackupEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyAutoBackupEnable.setStatus('current')
if mibBuilder.loadTexts: eltCopyAutoBackupEnable.setDescription('Enabling on automatic backup configuration.')
eltCopyAutoBackupTimeout = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyAutoBackupTimeout.setStatus('current')
if mibBuilder.loadTexts: eltCopyAutoBackupTimeout.setDescription(' This MIB should be used in order to change the time-interval of automatic copy of running-config to external server. The value should be the number of minutes for the interval of time from the backup.')
eltCopyAutoBackupFilePath = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyAutoBackupFilePath.setStatus('current')
if mibBuilder.loadTexts: eltCopyAutoBackupFilePath.setDescription('The name of the destination file.')
eltCopyAutoBackupServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyAutoBackupServerAddress.setStatus('current')
if mibBuilder.loadTexts: eltCopyAutoBackupServerAddress.setDescription('The Inet address of the destination remote host')
eltCopyAutoBackupOnWrite = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyAutoBackupOnWrite.setStatus('current')
if mibBuilder.loadTexts: eltCopyAutoBackupOnWrite.setDescription('Performing automatic backups every time you write configuration in memory.')
class EltCopyUserBackupStatus(TextualConvention, Integer32):
    description = 'Starting backup manually.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("starting", 1), ("stopped", 2))

eltCopyUserBackupStart = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 6), EltCopyUserBackupStatus().clone('stopped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyUserBackupStart.setStatus('current')
if mibBuilder.loadTexts: eltCopyUserBackupStart.setDescription('Starting backup manually.')
eltCopyBackupHistoryEnable = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryEnable.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryEnable.setDescription('Performing automatic backups every time you write configuration in memory.')
eltCopyBackupHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8), )
if mibBuilder.loadTexts: eltCopyBackupHistoryTable.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryTable.setDescription('A DHCP interface configuration table.')
eltCopyBackupHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1), ).setIndexNames((0, "ELTEX-MES-COPY-MIB", "eltCopyBackupHistoryIndex"))
if mibBuilder.loadTexts: eltCopyBackupHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryEntry.setDescription('A DHCP interface configuration entry.')
eltCopyBackupHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: eltCopyBackupHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryIndex.setDescription('An arbitrary incremental index for the profiles table. Zero for next free index.')
eltCopyBackupHistoryDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryDateTime.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryDateTime.setDescription('Name of profile.')
eltCopyBackupHistoryDstLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1, 3), RlCopyLocationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryDstLocation.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryDstLocation.setDescription('Destination File Location')
eltCopyBackupHistoryServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryServerAddr.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryServerAddr.setDescription('Name of profile.')
eltCopyBackupHistoryFilePath = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryFilePath.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryFilePath.setDescription('Name of profile.')
eltCopyBackupHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 8, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryStatus.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryStatus.setDescription('The status of a table entry. Only three statuses are aceptable: CreateAndGo to create, Active to update,Destroy to delete. All other values cause error.')
eltCopyBackupHistoryAction = MibScalar((1, 3, 6, 1, 4, 1, 35265, 1, 23, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("clearNow", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eltCopyBackupHistoryAction.setStatus('current')
if mibBuilder.loadTexts: eltCopyBackupHistoryAction.setDescription('Used to clear backup Table.')
mibBuilder.exportSymbols("ELTEX-MES-COPY-MIB", eltCopyBackupHistoryFilePath=eltCopyBackupHistoryFilePath, eltCopyAutoBackupOnWrite=eltCopyAutoBackupOnWrite, eltCopyBackupHistoryDateTime=eltCopyBackupHistoryDateTime, eltCopyBackupHistoryServerAddr=eltCopyBackupHistoryServerAddr, eltCopyBackupHistoryTable=eltCopyBackupHistoryTable, eltCopyBackupHistoryDstLocation=eltCopyBackupHistoryDstLocation, eltCopyBackupHistoryEntry=eltCopyBackupHistoryEntry, EltCopyUserBackupStatus=EltCopyUserBackupStatus, eltCopyAutoBackupEnable=eltCopyAutoBackupEnable, eltCopyBackupHistoryEnable=eltCopyBackupHistoryEnable, eltCopyBackupHistoryAction=eltCopyBackupHistoryAction, eltCopyBackupHistoryIndex=eltCopyBackupHistoryIndex, eltCopyAutoBackupTimeout=eltCopyAutoBackupTimeout, eltCopyAutoBackupFilePath=eltCopyAutoBackupFilePath, eltCopyUserBackupStart=eltCopyUserBackupStart, eltCopyBackupHistoryStatus=eltCopyBackupHistoryStatus, eltCopyAutoBackupServerAddress=eltCopyAutoBackupServerAddress)
