#
# PySNMP MIB module DGS-6600-VPLS-GENERIC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DGS-6600-VPLS-GENERIC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:45:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
dgs6600_mpls, = mibBuilder.importSymbols("DGS-6600-ID-MIB", "dgs6600-mpls")
pwIndex, = mibBuilder.importSymbols("PW-STD-MIB", "pwIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, ModuleIdentity, Unsigned32, Counter32, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, transmission, Counter64, ObjectIdentity, IpAddress, Bits, MibIdentifier, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Unsigned32", "Counter32", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "transmission", "Counter64", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier", "iso", "NotificationType")
TruthValue, TextualConvention, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString", "StorageType")
VPNIdOrZero, = mibBuilder.importSymbols("VPN-TC-STD-MIB", "VPNIdOrZero")
dgs6600VplsGenericMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1))
dgs6600VplsGenericMIB.setRevisions(('2012-09-29 12:00', '2006-06-04 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: dgs6600VplsGenericMIB.setRevisionsDescriptions(('Changes from previous version: 1) Moved LDP Specific information to VPLS-LDP-MIB 2) Created the vplsStatusTable to store status information. 3) ', 'Initial version published as part of RFC YYYY.',))
if mibBuilder.loadTexts: dgs6600VplsGenericMIB.setLastUpdated('201208261200Z')
if mibBuilder.loadTexts: dgs6600VplsGenericMIB.setOrganization('Layer 2 Virtual Private Networks (L2VPN) Working Group')
if mibBuilder.loadTexts: dgs6600VplsGenericMIB.setContactInfo(' Thomas D. Nadeau Email: tnadeau@juniper.net The L2VPN Working Group (email distribution l2vpn@ietf.org, http://www.ietf.org/html.charters/l2vpn-charter.html) ')
if mibBuilder.loadTexts: dgs6600VplsGenericMIB.setDescription('Copyright (C) The IETF Trust (2012). The initial version of this MIB module was published in RFC XXXX. -- RFC Editor: Please replace XXXX with RFC number & remove -- this note. For full legal notices see the RFC itself or see: http://www.ietf.org/copyrights/ianamib.html This MIB module contains generic managed object definitions for Virtual Private LAN Services as define in [RFC4762] and [RFC4761] This MIB module enables the use of any underlying Pseudowire network.')
class VplsBgpRouteDistinguisher(TextualConvention, OctetString):
    reference = '[RFC4364]'
    description = 'Syntax for a route distinguisher. For a complete definition of a route distinguisher, see [RFC4364]. For more details on use of a route distinguisher for a VPLS service, see [RFC4761]'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class VplsBgpRouteTarget(TextualConvention, OctetString):
    reference = '[RFC4364]'
    description = 'Syntax for a route target. For a complete definition of a route target, see [RFC4364].'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 256)

class VplsBgpRouteTargetType(TextualConvention, Integer32):
    reference = '[RFC4364]'
    description = 'Used to define the type of a route target usage. Route targets can be specified to be imported, exported, or both. For a complete definition of a route target, see [RFC4364].'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("import", 1), ("export", 2), ("both", 3))

vplsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 0))
vplsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1))
vplsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2))
vplsConfigIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vplsConfigIndexNext.setStatus('current')
if mibBuilder.loadTexts: vplsConfigIndexNext.setDescription('This object contains an appropriate value to be used for vplsConfigIndex when creating entries in the vplsConfigTable. The value 0 indicates that no unassigned entries are available. To obtain the value of vplsConfigIndex for a new entry in the vplsConfigTable, the manager issues a management protocol retrieval operation to obtain the current value of vplsConfigIndex. After each retrieval operation, the agent should modify the value to reflect the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
vplsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2), )
if mibBuilder.loadTexts: vplsConfigTable.setStatus('current')
if mibBuilder.loadTexts: vplsConfigTable.setDescription('This table specifies information for configuring and monitoring Virtual Private Lan Services(VPLS). ')
vplsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1), ).setIndexNames((0, "DGS-6600-VPLS-GENERIC-MIB", "vplsConfigIndex"))
if mibBuilder.loadTexts: vplsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vplsConfigEntry.setDescription('A row in this table represents a Virtual Private Lan Service(VPLS) in a packet network. It is indexed by vplsConfigIndex, which uniquely identifies a single VPLS. A row is created by the operator or by the agent if a VPLS service is created by a non-SNMP application or due to the Auto-Discovery process. None of the read-create objects values can be changed when vplsConfigRowStatus is in the active(1) state. Changes are allowed when the vplsConfigRowStatus is in notInService(2) or notReady(3) states only. If the operator needs to change one of the values for an active row the vplsConfigRowStatus should be first changed to notInService(2), the objects may then be changed, and finally the vplsConfigRowStatus should be changed to active(1) in order to re-initiate the signaling process with the new values in effect. ')
vplsConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: vplsConfigIndex.setStatus('current')
if mibBuilder.loadTexts: vplsConfigIndex.setDescription('Unique index for the conceptual row identifying a VPLS service.')
vplsConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 2), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigName.setStatus('current')
if mibBuilder.loadTexts: vplsConfigName.setDescription('A textual name of the VPLS. If there is no local name, or this object is otherwise not applicable, then this object MUST contain a zero-length octet string.')
vplsConfigDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigDescr.setStatus('current')
if mibBuilder.loadTexts: vplsConfigDescr.setDescription('A textual string containing information about the VPLS service. If there is no information for this VPLS service, then this object MUST contain a zero-length octet string.')
vplsConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: vplsConfigAdminStatus.setDescription('The desired administrative state of the VPLS service. If the administrative status of the VPLS service is changed to enabled then this service is able to utilize pseudowires to perform the tasks of a VPLS service. The testing(3) state indicates that no operational packets can be passed. ')
vplsConfigMacLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 6), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigMacLearning.setStatus('current')
if mibBuilder.loadTexts: vplsConfigMacLearning.setDescription('This object specifies if MAC Learning is enabled in this service. If this object is true then MAC Learning is enabled. If false, then MAC Learning is disabled.')
vplsConfigDiscardUnknownDest = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigDiscardUnknownDest.setStatus('current')
if mibBuilder.loadTexts: vplsConfigDiscardUnknownDest.setDescription("If the value of this object is 'true', then frames received with an unknown destination MAC are discarded in this VPLS. If 'false', then the packets are processed.")
vplsConfigMacAging = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 8), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigMacAging.setStatus('current')
if mibBuilder.loadTexts: vplsConfigMacAging.setDescription("If the value of this object is 'true' then the MAC ageing process is enabled in this VPLS. If 'false', then the MAC ageing process is disabled")
vplsConfigFwdFullHighWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigFwdFullHighWatermark.setStatus('current')
if mibBuilder.loadTexts: vplsConfigFwdFullHighWatermark.setDescription('This object specifies the utilization of the forwarding database for this VPLS instance at which the vplsFwdFullAlarmRaised notification will be sent.')
vplsConfigFwdFullLowWatermark = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setUnits('percentage').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigFwdFullLowWatermark.setStatus('current')
if mibBuilder.loadTexts: vplsConfigFwdFullLowWatermark.setDescription('This object specifies the utilization of the forwarding database for this VPLS instance at which the vplsFwdFullAlarmCleared notification will be sent.')
vplsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: vplsConfigRowStatus.setDescription('For creating, modifying, and deleting this row. None of the read-create objects in the conceptual rows may be changed when this object is in the active(1) state.')
vplsConfigMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(64, 9192)).clone(1518)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigMtu.setStatus('current')
if mibBuilder.loadTexts: vplsConfigMtu.setDescription('The value of this object specifies the MTU of this vpls instance. This can be used to limit the MTU to a value lower than the MTU supported by the associated Pseudowires')
vplsConfigVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 14), VPNIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vplsConfigVpnId.setStatus('current')
if mibBuilder.loadTexts: vplsConfigVpnId.setDescription('This objects indicates the IEEE 802-1990 VPN ID of the associated VPLS service.')
vplsConfigStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 2, 1, 15), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: vplsConfigStorageType.setDescription('This variable indicates the storage type for this row.')
vplsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 3), )
if mibBuilder.loadTexts: vplsStatusTable.setStatus('current')
if mibBuilder.loadTexts: vplsStatusTable.setDescription('This table provides information for monitoring Virtual Private Lan Services (VPLS). ')
vplsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 3, 1), ).setIndexNames((0, "DGS-6600-VPLS-GENERIC-MIB", "vplsConfigIndex"))
if mibBuilder.loadTexts: vplsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: vplsStatusEntry.setDescription('A row in this table represents a Virtual Private Lan Service(VPLS) in a packet network. It is indexed by vplsConfigIndex, which uniquely identifies a single VPLS. A row in this table is automatically created by the agent when a VPLS service is configured. ')
vplsStatusOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vplsStatusOperStatus.setStatus('current')
if mibBuilder.loadTexts: vplsStatusOperStatus.setDescription('The current operational state of this VPLS Service.')
vplsStatusPeerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vplsStatusPeerCount.setStatus('current')
if mibBuilder.loadTexts: vplsStatusPeerCount.setDescription('This objects specifies the number of peers (pseudowires) present in this VPLS instance.')
vplsPwBindTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 4), )
if mibBuilder.loadTexts: vplsPwBindTable.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindTable.setDescription('This table provides an association between a VPLS service and the corresponding pseudowires. A service can have more than one pseudowire association. Pseudowires are defined in the pwTable')
vplsPwBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 4, 1), ).setIndexNames((0, "DGS-6600-VPLS-GENERIC-MIB", "vplsConfigIndex"), (0, "PW-STD-MIB", "pwIndex"))
if mibBuilder.loadTexts: vplsPwBindEntry.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindEntry.setDescription('Each row represents an association between a VPLS instance and one or more pseudowires defined in the pwTable. Each index is unique in describing an entry in this table. However both indexes are required to define the one to many association of service to pseudowire.')
vplsPwBindConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("autodiscovery", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsPwBindConfigType.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindConfigType.setDescription('The value of this object indicates whether the Pseudo Wire binding was created manually or via Auto-Discovery. The value of this object must be specifed when the row is created and cannot be changed while the row status is active(1)')
vplsPwBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mesh", 1), ("spoke", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsPwBindType.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindType.setDescription('The value of this object indicates whether the pseudowire binding is of type mesh or spoke. The value of this object must be specified when the row is created and cannot be changed while the row status is active(1)')
vplsPwBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsPwBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindRowStatus.setDescription('For creating, modifying, and deleting this row. None of the read-create objects in the conceptual rows may be changed when this object is in the active(1) state')
vplsPwBindStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 4, 1, 4), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsPwBindStorageType.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindStorageType.setDescription('This variable indicates the storage type for this row.')
vplsBgpADConfigTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 5), )
if mibBuilder.loadTexts: vplsBgpADConfigTable.setStatus('current')
if mibBuilder.loadTexts: vplsBgpADConfigTable.setDescription('This table specifies information for configuring BGP Auto-Discovery parameters for a given VPLS service. ')
vplsBgpADConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 5, 1), ).setIndexNames((0, "DGS-6600-VPLS-GENERIC-MIB", "vplsConfigIndex"))
if mibBuilder.loadTexts: vplsBgpADConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vplsBgpADConfigEntry.setDescription('A row in this table indicates that BGP based Auto- Discovery is in use for this instance of VPLS. A row in this table is indexed by vplsConfigIndex, which uniquely identifies a single VPLS. None of the read-create objects can be changed when vplsBGPADConfigRowStatus is in active(1) state. Changes are allowed when the vplsBGPADConfigRowStatus is in notInService(2) or notReady(3) states only. If the operator needs to change one of the values for an active row the vplsConfigRowStatus should be first changed to notInService(2), the objects may then be changed, and finally the vplsConfigRowStatus should be changed to active(1) in order to re-initiate the signaling process with the new values in effect. ')
vplsBgpADConfigRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 5, 1, 1), VplsBgpRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpADConfigRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: vplsBgpADConfigRouteDistinguisher.setDescription(' The route distinguisher for this VPLS. See [RFC4364] for a complete definition of a route distinguisher. for more details on use of a route distinguisher for a VPLS service, see [RFC4761]. When not configured, the value is derived from the lower 6 bytes of vplsBgpADConfigVplsId. ')
vplsBgpADConfigPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpADConfigPrefix.setStatus('current')
if mibBuilder.loadTexts: vplsBgpADConfigPrefix.setDescription(' In case of auto-discovery the default prefix advertised is the IP address of the loopback. In case the user wants to override the loopback address, vplsBgpADConfigPrefix should be set. When this value is non-zero this value is used along with vplsBgpADConfigRouteDistinguisher in the NLRI, see [RFC 6074] ')
vplsBgpADConfigVplsId = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 5, 1, 3), VplsBgpRouteDistinguisher()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpADConfigVplsId.setStatus('current')
if mibBuilder.loadTexts: vplsBgpADConfigVplsId.setDescription(' VplsId is a unique identifier for all VSIs belonging to the same VPLS. It is advertised as an extended community. ')
vplsBgpADConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vplsBgpADConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: vplsBgpADConfigRowStatus.setDescription(' For creating, modifying, and deleting this row. None of the read-create objects in the conceptual rows may be changed when this object is in the active(1) state. ')
vplsStatusNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vplsStatusNotifEnable.setReference('See also [RFC3413] for explanation that notifications are under the ultimate control of the MIB module in this document.')
if mibBuilder.loadTexts: vplsStatusNotifEnable.setStatus('current')
if mibBuilder.loadTexts: vplsStatusNotifEnable.setDescription('If this object is set to true(1), then it enables the emission of vplsStatusChanged notification; otherwise this notification is not emitted.')
vplsNotificationMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vplsNotificationMaxRate.setStatus('current')
if mibBuilder.loadTexts: vplsNotificationMaxRate.setDescription('This object indicates the maximum number of notifications issued per second. If events occur more rapidly, the implementation may simply fail to emit these notifications during that period, or may queue them until an appropriate time. A value of 0 means no throttling is applied and events may be notified at the rate at which they occur.')
vplsStatusChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 0, 1)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigVpnId"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigAdminStatus"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsStatusOperStatus"))
if mibBuilder.loadTexts: vplsStatusChanged.setStatus('current')
if mibBuilder.loadTexts: vplsStatusChanged.setDescription('The vplsStatusChanged notification is generated when there is a change in the administrative or operating status of a VPLS service.')
vplsFwdFullAlarmRaised = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 0, 2)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigVpnId"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigFwdFullHighWatermark"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigFwdFullLowWatermark"))
if mibBuilder.loadTexts: vplsFwdFullAlarmRaised.setStatus('current')
if mibBuilder.loadTexts: vplsFwdFullAlarmRaised.setDescription('The vplsFwdFullAlarmRaised notification is generated when the utilization of the Forwarding database is above the value specified by vplsConfigFwdFullHighWatermark.')
vplsFwdFullAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 0, 3)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigVpnId"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigFwdFullHighWatermark"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigFwdFullLowWatermark"))
if mibBuilder.loadTexts: vplsFwdFullAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: vplsFwdFullAlarmCleared.setDescription('The vplsFwdFullAlarmCleared notification is generated when the utilization of the Forwarding database is below the value specified by vplsConfigFwdFullLowWatermark.')
vplsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 1))
vplsModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 1, 1)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsGroup"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsPwBindGroup"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsModuleFullCompliance = vplsModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: vplsModuleFullCompliance.setDescription('Compliance requirement for implementations that provide full support for VPLS-GENERIC-MIB. Such devices can then be monitored and configured using this MIB module.')
vplsModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 1, 2)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsGroup"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsPwBindGroup"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsModuleReadOnlyCompliance = vplsModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: vplsModuleReadOnlyCompliance.setDescription('Compliance requirement for implementations that only provide read-only support for VPLS-GENERIC-MIB. Such devices can then be monitored but cannot be configured using this MIB modules.')
vplsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 2))
vplsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 2, 1)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigName"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigDescr"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigAdminStatus"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigMacLearning"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigDiscardUnknownDest"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigMacAging"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigVpnId"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigFwdFullHighWatermark"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigFwdFullLowWatermark"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigRowStatus"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigIndexNext"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigMtu"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsConfigStorageType"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsStatusOperStatus"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsStatusPeerCount"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsStatusNotifEnable"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsNotificationMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsGroup = vplsGroup.setStatus('current')
if mibBuilder.loadTexts: vplsGroup.setDescription('The group of objects supporting management of L2VPN VPLS services')
vplsPwBindGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 2, 2)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsPwBindConfigType"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsPwBindType"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsPwBindRowStatus"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsPwBindStorageType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsPwBindGroup = vplsPwBindGroup.setStatus('current')
if mibBuilder.loadTexts: vplsPwBindGroup.setDescription('The group of objects supporting management of Pseudo Wire (PW) Binding to VPLS.')
vplsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 171, 10, 120, 100, 4, 1, 2, 2, 3)).setObjects(("DGS-6600-VPLS-GENERIC-MIB", "vplsStatusChanged"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsFwdFullAlarmRaised"), ("DGS-6600-VPLS-GENERIC-MIB", "vplsFwdFullAlarmCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vplsNotificationGroup = vplsNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: vplsNotificationGroup.setDescription('The group of notifications supporting the Notifications generated for VPLS Services')
mibBuilder.exportSymbols("DGS-6600-VPLS-GENERIC-MIB", vplsModuleReadOnlyCompliance=vplsModuleReadOnlyCompliance, VplsBgpRouteTargetType=VplsBgpRouteTargetType, vplsConfigIndexNext=vplsConfigIndexNext, vplsStatusChanged=vplsStatusChanged, vplsCompliances=vplsCompliances, vplsBgpADConfigRowStatus=vplsBgpADConfigRowStatus, vplsPwBindStorageType=vplsPwBindStorageType, vplsConfigMacLearning=vplsConfigMacLearning, vplsConfigStorageType=vplsConfigStorageType, vplsPwBindRowStatus=vplsPwBindRowStatus, vplsPwBindGroup=vplsPwBindGroup, vplsConfigVpnId=vplsConfigVpnId, vplsPwBindEntry=vplsPwBindEntry, vplsPwBindTable=vplsPwBindTable, vplsStatusNotifEnable=vplsStatusNotifEnable, vplsStatusTable=vplsStatusTable, vplsConfigName=vplsConfigName, vplsNotificationMaxRate=vplsNotificationMaxRate, vplsConfigFwdFullLowWatermark=vplsConfigFwdFullLowWatermark, vplsModuleFullCompliance=vplsModuleFullCompliance, vplsBgpADConfigEntry=vplsBgpADConfigEntry, vplsStatusOperStatus=vplsStatusOperStatus, vplsConfigMtu=vplsConfigMtu, vplsConfigEntry=vplsConfigEntry, vplsPwBindType=vplsPwBindType, VplsBgpRouteTarget=VplsBgpRouteTarget, vplsConfigRowStatus=vplsConfigRowStatus, vplsFwdFullAlarmRaised=vplsFwdFullAlarmRaised, vplsConfigTable=vplsConfigTable, vplsNotificationGroup=vplsNotificationGroup, dgs6600VplsGenericMIB=dgs6600VplsGenericMIB, vplsBgpADConfigVplsId=vplsBgpADConfigVplsId, vplsGroups=vplsGroups, vplsNotifications=vplsNotifications, vplsBgpADConfigPrefix=vplsBgpADConfigPrefix, vplsConformance=vplsConformance, vplsConfigFwdFullHighWatermark=vplsConfigFwdFullHighWatermark, vplsObjects=vplsObjects, vplsConfigAdminStatus=vplsConfigAdminStatus, vplsConfigDiscardUnknownDest=vplsConfigDiscardUnknownDest, vplsConfigMacAging=vplsConfigMacAging, vplsBgpADConfigRouteDistinguisher=vplsBgpADConfigRouteDistinguisher, VplsBgpRouteDistinguisher=VplsBgpRouteDistinguisher, PYSNMP_MODULE_ID=dgs6600VplsGenericMIB, vplsConfigIndex=vplsConfigIndex, vplsStatusEntry=vplsStatusEntry, vplsBgpADConfigTable=vplsBgpADConfigTable, vplsGroup=vplsGroup, vplsFwdFullAlarmCleared=vplsFwdFullAlarmCleared, vplsStatusPeerCount=vplsStatusPeerCount, vplsConfigDescr=vplsConfigDescr, vplsPwBindConfigType=vplsPwBindConfigType)
