#
# PySNMP MIB module HP-SWITCH-FIPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SWITCH-FIPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:36:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, Integer32, TimeTicks, iso, ObjectIdentity, Counter32, Gauge32, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter64, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "TimeTicks", "iso", "ObjectIdentity", "Counter32", "Gauge32", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter64", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
hpSwitchFipSnoopingMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78))
hpSwitchFipSnoopingMib.setRevisions(('2010-06-03 15:39',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setRevisionsDescriptions(('Initial version, added objects for FIP snooping.',))
if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setLastUpdated('201006031539Z')
if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setOrganization('HP ProCurve Networking')
if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpSwitchFipSnoopingMib.setDescription('This MIB module describes objects for management of FIP (FCoE Initialization Protocol) snooping in the HP Integrated Communication Facility product line.')
hpSwitchFipsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1))
hpSwitchFipsStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2))
hpSwitchFipsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3))
hpSwitchFipsScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 1))
hpSwitchFipsAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFipsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsAdminStatus.setDescription('This object is used to enable or disable FIP Snooping on an ethernet bridge.')
hpSwitchFipsTables = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2))
hpSwitchFipsFcMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1), )
if mibBuilder.loadTexts: hpSwitchFipsFcMapTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcMapTable.setDescription('This table is used to configure the list of FC-MAP values. These FC-MAPS will be used to program ACLs that ensure no MAC Address used for non-FCoE traffic shall have the prefix(first 3 bytes) equal to any of the FC-MAP value.')
hpSwitchFipsFcMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcMapIndex"))
if mibBuilder.loadTexts: hpSwitchFipsFcMapEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcMapEntry.setDescription('An entry in the table specifying the FC-MAP.')
hpSwitchFipsFcMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: hpSwitchFipsFcMapIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcMapIndex.setDescription('The index of the Fiber Channel MAC Address prefix table.')
hpSwitchFipsFcMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpSwitchFipsFcMap.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcMap.setDescription('This object configures the FC MAP value associated with the FIP snooping bridge')
hpSwitchFipsFcfMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2), )
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddressTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddressTable.setDescription('This table is used to configure the list of FCF MAC addresses to which ENodes will perform FIP FLOGI and FIP NPIV FDISC operations. This table will be indexed by the VLAN ID. Appropriate ACL entries will be programmed to allow FCoE traffic to these MACs.')
hpSwitchFipsFcfMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsVirtualFabricInterfaceIndex"), (0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfMacAddress"))
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddressEntry.setDescription('An entry in the table specifying the FCF MAC connected to the Virtual Fabric (VF) interface.')
hpSwitchFipsVirtualFabricInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchFipsVirtualFabricInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsVirtualFabricInterfaceIndex.setDescription('Interface index of the VF port connected to FCF')
hpSwitchFipsFcfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfMacAddress.setDescription('This object configures the MAC address of the Fibre Channel Forwarder(FCF) attached to the VF port accepting Fabric logins. This MAC Address will be used as the DA MAC by Enodes requesting FLOGI or NPIV FDISC.Configuring this MAC address will result in some ACL rules to be programmed in the hardware.')
hpSwitchFipsFcoeVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcoeVlanId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcoeVlanId.setDescription('The FCoE VLAN ID advertised by FCF')
hpSwitchFipsFcfFcMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcfFcMap.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfFcMap.setDescription('The Fiber Channel MAC address prefix used by the FCF to assign fabric provided MAC addresses(FPMA).')
hpSwitchFipsFcfEnodeLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcfEnodeLoginCount.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfEnodeLoginCount.setDescription('This objects represents the number of Enodes that have logged into this FCF.')
hpSwitchFipsFcfNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcfNameId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfNameId.setDescription('The World Wide Node Name of the fabric port as advertised by the FCF.')
hpSwitchFipsFabricName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFabricName.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFabricName.setDescription('The Fabric name identifier of Fabric as advertised by FCF.')
hpSwitchFipsFcfMacTableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpSwitchFipsFcfMacTableRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcfMacTableRowStatus.setDescription('Row Status of the FCF MAC Address table.')
hpSwitchFipsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3), )
if mibBuilder.loadTexts: hpSwitchFipsSessionTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessionTable.setDescription('This table stores the currently active FLOGI or NPIV FDISC sessions. This table is meant for reporting only.')
hpSwitchFipsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeInterfaceIndex"), (0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeFPMAMacAddress"))
if mibBuilder.loadTexts: hpSwitchFipsSessionEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessionEntry.setDescription('An entry in the table specifying the details pertaing to a session.')
hpSwitchFipsSessEnodeInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeInterfaceIndex.setDescription('The object specifies the interface index connected to the Enode initiator.')
hpSwitchFipsSessEnodeFPMAMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeFPMAMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeFPMAMacAddress.setDescription('The Fabric provided MAC Address of the Enode. This MAC is assigned by FCF as a result of succcessful FLOGI or NPIV FDISC and is used as the SA MAC for FCoE traffic originating from Enode.')
hpSwitchFipsSessEnodeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeMacAddress.setDescription('This object represents the server provided MAC address of the Enode. This MAC is used as the SA MAC in FIP frames originating from Enode.')
hpSwitchFipsSessEnodeNportId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeNportId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeNportId.setDescription('This object represents the N_Port ID of the Enode. It is assigned by the FCF after a successful FLOGI or NPIV FDISC. It is equivalent to FC ID in native Fibre channel. This ID is used in the S_ID or D_ID fields of the encapsulated Fibre Channel Frames.')
hpSwitchFipsSessEnodeNportIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flogi", 1), ("npivfdisc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeNportIdType.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessEnodeNportIdType.setDescription('This object represents the method by which N_Port obtained the FC ID from FCF.')
hpSwitchFipsSessFcfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessFcfMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessFcfMacAddress.setDescription('This object represents the MAC Address of the Fibre Channel Forwarder to which the session is established.')
hpSwitchFipsSessFcMap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessFcMap.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessFcMap.setDescription('This object represents the FC MAP.')
hpSwitchFipsSessVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessVlanId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessVlanId.setDescription('The VLAN ID on which FCoE traffic is being pumped.')
hpSwitchFipsSessFcfNameId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 1, 2, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsSessFcfNameId.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessFcfNameId.setDescription('The Name Identifier advertised by the FCF with which this session is established.')
hpSwitchFipsGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 1))
hpSwitchFipsFipDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFipDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFipDropPkts.setDescription('Global counter to indicate the number of FIP frames dropped.')
hpSwitchFipsFcoeDropPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsFcoeDropPkts.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsFcoeDropPkts.setDescription('Global counter to indicate the number of FCoE frames dropped.')
hpSwitchFipsSessStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2))
hpSwitchFipsSessStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1), )
if mibBuilder.loadTexts: hpSwitchFipsSessStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessStatsTable.setDescription('A table for per session FIPs statistics.')
hpSwitchFipsSessStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1), ).setIndexNames((0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessEnodeIfIndex"), (0, "HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessFPMAMacAddress"))
if mibBuilder.loadTexts: hpSwitchFipsSessStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessStatsEntry.setDescription('An Entry in the session statistics table.')
hpSwitchFipsStatsSessEnodeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hpSwitchFipsStatsSessEnodeIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsStatsSessEnodeIfIndex.setDescription('Interface index of the Enode.')
hpSwitchFipsStatsSessFPMAMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFPMAMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFPMAMacAddress.setDescription('FPMA Mac address being used for this session.')
hpSwitchFipsStatsSessFcfMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFcfMacAddress.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFcfMacAddress.setDescription('FCF Mac address being used for this session.')
hpSwitchFipsStatsSessFcoePermitPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 2, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFcoePermitPkts.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsStatsSessFcoePermitPkts.setDescription('Counter indicating the number of FCoE frames permitted for this session.')
hpSwitchFipsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 1))
hpSwitchFipsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2))
hpSwitchFipsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 1, 1)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsConfigGroup"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessionGroup"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsCompliance = hpSwitchFipsCompliance.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsCompliance.setDescription('The compliance statement for SNMP entities which implement the FIP Snooping MIB.')
hpSwitchFipsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2, 1)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsAdminStatus"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcMap"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcoeVlanId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfFcMap"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfEnodeLoginCount"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfNameId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFabricName"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcfMacTableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsConfigGroup = hpSwitchFipsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsConfigGroup.setDescription('The collection of objects for Fip Snooping configuration.')
hpSwitchFipsSessionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2, 2)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeMacAddress"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeNportId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessEnodeNportIdType"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessFcfMacAddress"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessFcMap"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessVlanId"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsSessFcfNameId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsSessionGroup = hpSwitchFipsSessionGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsSessionGroup.setDescription('The collection of objects representing the FIP sessions.')
hpSwitchFipsStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 78, 3, 2, 3)).setObjects(("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFipDropPkts"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsFcoeDropPkts"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessFcfMacAddress"), ("HP-SWITCH-FIPS-MIB", "hpSwitchFipsStatsSessFcoePermitPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpSwitchFipsStatisticsGroup = hpSwitchFipsStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hpSwitchFipsStatisticsGroup.setDescription('The collection of objects representing the FIP Statistics.')
mibBuilder.exportSymbols("HP-SWITCH-FIPS-MIB", hpSwitchFipsSessFcMap=hpSwitchFipsSessFcMap, hpSwitchFipsSessEnodeFPMAMacAddress=hpSwitchFipsSessEnodeFPMAMacAddress, hpSwitchFipsVirtualFabricInterfaceIndex=hpSwitchFipsVirtualFabricInterfaceIndex, hpSwitchFipsFcfMacAddress=hpSwitchFipsFcfMacAddress, hpSwitchFipsSessFcfNameId=hpSwitchFipsSessFcfNameId, hpSwitchFipsConfigGroup=hpSwitchFipsConfigGroup, hpSwitchFipsStatisticsGroup=hpSwitchFipsStatisticsGroup, hpSwitchFipsSessEnodeInterfaceIndex=hpSwitchFipsSessEnodeInterfaceIndex, hpSwitchFipsFcoeVlanId=hpSwitchFipsFcoeVlanId, hpSwitchFipsFcoeDropPkts=hpSwitchFipsFcoeDropPkts, hpSwitchFipsSessionGroup=hpSwitchFipsSessionGroup, hpSwitchFipsFcfMacTableRowStatus=hpSwitchFipsFcfMacTableRowStatus, hpSwitchFipsCompliance=hpSwitchFipsCompliance, hpSwitchFipsSessFcfMacAddress=hpSwitchFipsSessFcfMacAddress, hpSwitchFipsFcMapTable=hpSwitchFipsFcMapTable, hpSwitchFipsFcMapEntry=hpSwitchFipsFcMapEntry, hpSwitchFipsTables=hpSwitchFipsTables, hpSwitchFipsSessStatsEntry=hpSwitchFipsSessStatsEntry, hpSwitchFipsConfigObjects=hpSwitchFipsConfigObjects, hpSwitchFipsSessionTable=hpSwitchFipsSessionTable, hpSwitchFipsFcfMacAddressTable=hpSwitchFipsFcfMacAddressTable, hpSwitchFipsGlobalStats=hpSwitchFipsGlobalStats, hpSwitchFipsSessStatsTable=hpSwitchFipsSessStatsTable, hpSwitchFipsFipDropPkts=hpSwitchFipsFipDropPkts, hpSwitchFipSnoopingMib=hpSwitchFipSnoopingMib, hpSwitchFipsFcfEnodeLoginCount=hpSwitchFipsFcfEnodeLoginCount, hpSwitchFipsFabricName=hpSwitchFipsFabricName, hpSwitchFipsSessionEntry=hpSwitchFipsSessionEntry, hpSwitchFipsSessEnodeNportId=hpSwitchFipsSessEnodeNportId, hpSwitchFipsStatsSessFPMAMacAddress=hpSwitchFipsStatsSessFPMAMacAddress, hpSwitchFipsSessEnodeNportIdType=hpSwitchFipsSessEnodeNportIdType, hpSwitchFipsStatsSessFcoePermitPkts=hpSwitchFipsStatsSessFcoePermitPkts, hpSwitchFipsFcMap=hpSwitchFipsFcMap, hpSwitchFipsStatsSessFcfMacAddress=hpSwitchFipsStatsSessFcfMacAddress, PYSNMP_MODULE_ID=hpSwitchFipSnoopingMib, hpSwitchFipsFcMapIndex=hpSwitchFipsFcMapIndex, hpSwitchFipsFcfMacAddressEntry=hpSwitchFipsFcfMacAddressEntry, hpSwitchFipsSessVlanId=hpSwitchFipsSessVlanId, hpSwitchFipsSessEnodeMacAddress=hpSwitchFipsSessEnodeMacAddress, hpSwitchFipsScalars=hpSwitchFipsScalars, hpSwitchFipsCompliances=hpSwitchFipsCompliances, hpSwitchFipsAdminStatus=hpSwitchFipsAdminStatus, hpSwitchFipsStatsSessEnodeIfIndex=hpSwitchFipsStatsSessEnodeIfIndex, hpSwitchFipsFcfFcMap=hpSwitchFipsFcfFcMap, hpSwitchFipsStatistics=hpSwitchFipsStatistics, hpSwitchFipsFcfNameId=hpSwitchFipsFcfNameId, hpSwitchFipsConformance=hpSwitchFipsConformance, hpSwitchFipsSessStats=hpSwitchFipsSessStats, hpSwitchFipsGroups=hpSwitchFipsGroups)
