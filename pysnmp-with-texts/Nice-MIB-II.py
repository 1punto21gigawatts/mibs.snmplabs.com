#
# PySNMP MIB module Nice-MIB-II (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nice-MIB-II
# Produced by pysmi-0.3.4 at Wed May  1 14:26:09 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, Counter32, Gauge32, Unsigned32, NotificationType, IpAddress, ObjectIdentity, NotificationType, Counter64, ModuleIdentity, MibIdentifier, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises", "Counter32", "Gauge32", "Unsigned32", "NotificationType", "IpAddress", "ObjectIdentity", "NotificationType", "Counter64", "ModuleIdentity", "MibIdentifier", "Bits", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class HostLocalTime(TextualConvention, OctetString):
    description = 'A date-time specification. field octets contents range ----- ------ -------- ----- YY 1-2 year 00..99 MM 3-4 month 01..12 DD 5-6 day 01..31 HH 7-8 hour 00..23 MM 9-10 minutes 00..59 SS 11-12 seconds 00..60 For example, Tuesday May 26, 1992 at 1:30:15 PM would be displayed as: 920526133015'
    status = 'current'
    displayHint = 'YYMMDDHHMMSS'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(12, 12)
    fixedLength = 12

class YesNo(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("no", 0), ("yes", 1))

class SeverityType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noError", 1), ("warning", 2), ("error", 3), ("criticalError", 4))

class ClsErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))
    namedValues = NamedValues(("callServerIsDown", 1), ("rcmIsDown", 2), ("schedulerServerIsDown", 3), ("dBServerIsDown", 4), ("dispatchIsDown", 5), ("callServerLinkIsDown", 6), ("recordingOnDemandIsNotEnabled", 7), ("schedulerServerIsNotInitializedProperly", 8), ("failureConnectionToDB", 9), ("dBServerIsNotInitializedProperly", 10), ("dBSpaceIsFull", 11), ("communicationProblemWithLogger", 12), ("problematicClockDifferencesWithLogger", 13), ("noAvailableResources", 14), ("loggerIsNotInitializedProperly", 15), ("rcmIsNotInitializedProperly", 16), ("problemWithNPLUS1Loggers", 17), ("callServerTableIsFull", 18), ("allCLSModulesInitFailed", 19), ("clsModuleRestartFailed", 20), ("osDiskFailure", 21))

class RecordedMediaType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("voice", 1), ("screen", 2), ("voiceAndScreen", 3))

class LoggerInitializationStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("rcmInternalComponentsError", 1), ("noLoggerWasFound", 2), ("noConnectionToSwitch", 3), ("channelWasNotInitialized", 4))

class OsDiskFailureType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("faileDisk", 1), ("fixStarted", 2), ("shutdownDirty", 3), ("missingDisk", 4), ("unknownFailure", 5))

class ClsTableType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("dbRecordsTable", 1), ("callsTable", 2), ("loginTable", 3))

class ApplicationErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("hostIsDown", 1), ("applicationServerIsDown", 2), ("sysAdminHostConnectionIsDown", 3), ("dataBaseConnectionIsDown", 4), ("userAdminHostConnectionIsDown", 5), ("storageCenterHostConnectionIsDown", 6), ("playbackServerHostConnectionIsDown", 7), ("queryExecuterHostConnectionIsDown", 8), ("loggerWasNotAttachedToACLS", 9), ("clsConnectionIsDown", 10), ("loggerConnectionIsDown", 11), ("scConnectionIsDown", 12), ("ctiDbConnectionIsDown", 13), ("caDbConnectionIsDown", 14), ("nifDBConnectionIsDown", 15), ("interactionDBConnectionIsDown", 16), ("ruleEngineEventProviderFailed", 17), ("ruleEngineEventProviderIdle", 18), ("ruleEngineRuleGeneratorFailed", 19), ("ruleEngineRuleGeneratorIdle", 20), ("ruleEngineActionExecuterFailed", 21), ("ruleEngineActionExecuterIdle", 22), ("ruleEngineConfigurationError", 23))

class DriverErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("driverIsUp", 1), ("driverIsDown", 2), ("configurationFileIsMissing", 3))

class CTIEventsDBServerErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ctiDBServerIsNotInitializedProperly", 1), ("ctiDBSpaceIsFull", 2), ("ctiDBLogSpaceIsFull", 3), ("ctiFailureConnectionToCTIDB", 4), ("ctiMissingLookUpTable", 5), ("ctiFailureInsertCTIEvent", 6), ("ctiInvalidMessageReceived", 7), ("ctiRetentionFailure", 8))

class LoggingInstanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("general", 0), ("audioManagerModule", 1), ("dataBaseModule", 2), ("diskModule", 3), ("channelsModule", 4), ("autoDeletionModule", 5), ("hardwareDriverModule", 6), ("voipDriverModule", 7), ("dliDriverModule", 8), ("nPlus1Module", 9), ("dongleModule", 10), ("checkSumModule", 11))

class LoggingErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("communicationFailure", 1), ("loggerQueryFailure", 2), ("initializationFailure", 3), ("diskProblem", 4), ("nplus1RobMalfunction", 5), ("nplus1RobPowerFailure", 6), ("lowFreeDiskSpace", 7), ("noFreeDiskSpace", 8), ("lowKeptDiskSpace", 9), ("noKeptDiskSpace", 10), ("dongleProblem", 11), ("invalidChecksum", 12), ("lineErrorOnChannels", 13), ("someChannelsNotRecording", 14), ("lowStatisticsAlarmOnChannels", 15), ("highStatisticslarmOnChannels", 16))

class CaptureInstanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("adifBoard", 0), ("adif3Board", 1), ("apaBoard", 2), ("isdnBoard", 3), ("etaiBoard", 4), ("etai2Board", 5), ("ntcmBoard", 6), ("tdaBoard", 7), ("natiBoard", 8), ("nati2Board", 9), ("isacBoard", 10), ("isac2Board", 11), ("dliBoard", 12), ("lafBoard", 13), ("udaBoard", 14), ("lmopBoard", 15), ("aliBoard", 16), ("ali4Board", 17), ("btai2Board", 18))

class CaptureErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("dspProblemInRecordingBoard", 1), ("dspProblemInAlgorithmsBoard", 2), ("dspProblemInInterfaceBoard", 3), ("dspProblemInPlaybackBoard", 4), ("internalProblemInRecordingBoard", 5), ("internalProblemInAlgorithmsBoard", 6), ("internalProblemInInterfaceBoard", 7), ("internalProblemInPlaybackBoard", 8), ("lineProblemInRecordingBoard", 9), ("lineProblemInAlgorithmsBoard", 10), ("lineProblemInInterfaceBoard", 11), ("lineProblemInPlaybackBoard", 12))

class BackupErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("mediaError", 1), ("deviceError", 2), ("retrievalError", 3), ("communicationError", 4), ("hardDiskError", 5), ("recoveryFailed", 6), ("archivingSuspended", 7))

class BackupInstanceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 49, 50, 51, 52, 53, 54, 55))
    namedValues = NamedValues(("hpDatDDS2Device", 0), ("hpDatDDS3Device", 1), ("hpDatDDS3AutoLoaderDevice", 2), ("sonyDatDDS2Device", 3), ("sonyDatDDS3Device", 4), ("sonyMo1Device", 5), ("sonyAit1Device", 6), ("hpMo1Device", 7), ("sonyMo2Device", 8), ("hpDatDDS2AutoLoaderDevice", 9), ("sonyDatDDS3AutoLoaderDevice", 10), ("sonyait1autoloaderDevice", 11), ("srvsonyDatDDS2sdt7000Device", 12), ("hpDDS4Device", 13), ("seaGateDatDDS4Device", 49), ("sonyDatDDS4Device", 50), ("sonyAit2Device", 51), ("matsushitaDVDRam1Device", 52), ("hitachiDVDRam1Device", 53), ("hitachiDVDRam2Device", 54), ("matsushitaDVDRam2Device", 55))

class BackupErrorBSRVErrorCode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1310732, -983028, -1441780, -1048563, -3735539, 720909, 14, 15, -2424816, -1507312, -458735, -655343, -720879, -786415, -1114095, -1638383, -2818031, -65518, -131054, -196590, -262126, -327662, -393198, -524270, -851950, -917486, -1179630, 1835026, -1572846, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))
    namedValues = NamedValues(("bsrv-ErrCode-DeviceOk", 0), ("bsrv-ErrCode-NoFreeTokens", 1), ("bsrv-ErrCode-DiskIsFull", 2), ("bsrv-ErrCode-WrongFileSize", 3), ("bsrv-ErrCode-CannotAppendToMedia", 4), ("bsrv-ErrCode-MediaHasNotYetExpired", 5), ("bsrv-ErrCode-DeviceHasTimedOut", 6), ("bsrv-ErrCode-MediaHasBadHeader", 7), ("bsrv-ErrCode-TapeHasNoData", 8), ("bsrv-ErrCode-WrongLoggerId", 9), ("bsrv-ErrCode-RecoveryFailed", 10), ("bsrv-ErrCode-DeviceNotConnected", 11), ("bsrv-ErrCode-MediaWasManualyEjected-NoMagazine", 1310732), ("bsrv-ErrCode-MediaWasManualyEjected-NotReady", -983028), ("bsrv-ErrCode-MediaWasManualyEjected-TargetAbort", -1441780), ("bsrv-ErrCode-MediumError-Medium", -1048563), ("bsrv-ErrCode-MediumError-CRCError", -3735539), ("bsrv-ErrCode-MediumError-ReadFromPbuFailed", 720909), ("bsrv-ErrCode-MediaIsWriteProtected", 14), ("bsrv-ErrCode-MediaIsBlank", 15), ("bsrv-ErrCode-EndOfMediumWasReached-PBUEOMEarlyWarn", -2424816), ("bsrv-ErrCode-EndOfMediumWasReached-PBUVolOverflow", -1507312), ("bsrv-ErrCode-GeneralHardwareError-NoAdapter", -458735), ("bsrv-ErrCode-GeneralHardwareError-DataOverrun", -655343), ("bsrv-ErrCode-GeneralHardwareError-BusFree", -720879), ("bsrv-ErrCode-GeneralHardwareError-BusFail", -786415), ("bsrv-ErrCode-GeneralHardwareError-Hardware", -1114095), ("bsrv-ErrCode-GeneralHardwareError-PBUIOErr", -1638383), ("bsrv-ErrCode-GeneralHardwareError-PBUHostBusReset", -2818031), ("bsrv-ErrCode-InternalError-NoAspi", -65518), ("bsrv-ErrCode-InternalError-Busy", -131054), ("bsrv-ErrCode-InternalError-AspiErr", -196590), ("bsrv-ErrCode-InternalError-NoMem", -262126), ("bsrv-ErrCode-InternalError-NoDevice", -327662), ("bsrv-ErrCode-InternalError-AspiInval", -393198), ("bsrv-ErrCode-InternalError-Abort", -524270), ("bsrv-ErrCode-InternalError-TargetBusy", -851950), ("bsrv-ErrCode-InternalError-Reservation", -917486), ("bsrv-ErrCode-InternalError-IllegalReq", -1179630), ("bsrv-ErrCode-InternalError-InternalError", 1835026), ("bsrv-ErrCode-InternalError-Miscompare", -1572846), ("bsrv-ErrCode-NoInitHeader", 19), ("bsrv-ErrCode-BadMediaType", 20), ("bsrv-ErrCode-DiskFailure", 21), ("bsrv-ErrCode-BadCassette", 22), ("bsrv-ErrCode-CleaningCartridge", 23), ("bsrv-ErrCode-DeviceCleaningRequired", 24), ("bsrv-ErrCode-OldVersionCassette", 25), ("bsrv-ErrCode-AccessDeniedToMedia", 26), ("bsrv-ErrCode-AutoloaderHardware", 27), ("bsrv-ErrCode-CommToRemoteTapeErr", 28), ("bsrv-ErrCode-LoadCountExceeded", 29), ("bsrv-ErrCode-CannotEjectMedia", 30), ("bsrv-ErrCode-TablesSizeMismatch", 31), ("bsrv-ErrCode-FatNotSupported", 32), ("bsrv-ErrCode-DeviceStillWorking", 33), ("bsrv-ErrCode-NewMediaWasDetected", 34))

class BackupConfig(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 0, 100, 101, 102, 110, 111, 112, 120, 121, 122, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("bsrv-conf-null", -1), ("bsrv-conf-not-used", 0), ("bsrv-conf-autoarch-pool-continousmode", 100), ("bsrv-conf-autoarch-pool-periodicbackupmode", 101), ("bsrv-conf-autoarch-pool-periodicejectmode", 102), ("bsrv-conf-autoarch-mirroring-continousmode", 110), ("bsrv-conf-autoarch-mirroring-periodicbackupmode", 111), ("bsrv-conf-autoarch-mirroring-periodicejectmode", 112), ("bsrv-conf-autoarch-channalization-continousmode", 120), ("bsrv-conf-autoarch-channalization-periodicbackupmode", 121), ("bsrv-conf-autoarch-channalizationperiodicejectmode", 122), ("bsrv-conf-manual-archiving", 2), ("bsrv-conf-retrieval", 3), ("bsrv-conf-init", 4), ("bsrv-conf-erase", 5), ("bsrv-conf-retrieve-while-archiving", 6))

class BackupDeviceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 25, 26))
    namedValues = NamedValues(("deviceEmpty", 1), ("deviceLoadingForWrite", 2), ("deviceReadyForWrite", 3), ("deviceArchiving", 4), ("deviceFull", 5), ("deviceError", 6), ("deviceLoadingForReading", 7), ("deviceReadyForReading", 8), ("deviceRetrieving", 9), ("deviceClosing", 10), ("deviceRecovering", 11), ("deviceMirroringSuspended", 12), ("deviceCleaning", 13), ("deviceMagazineIsExhausted", 14), ("deviceErasing", 15), ("deviceVerifyingMagazine", 16), ("deviceConnectingToRTS", 19), ("deviceWaitingForBSRVRestart", 20), ("deviceConnectionToRTSFailed", 21), ("occupiedRemoteDevice", 22), ("cannotAppendOldMedia", 25), ("deviceWaitingForUserEject", 26))

class LineErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("fer", 1), ("mlos", 2), ("pra", 3), ("flos", 4), ("ais", 5), ("nos", 6), ("los", 7), ("ubal", 8), ("lsig", 9), ("mfas", 10), ("ito", 11), ("swf", 12), ("rai", 13), ("voipErr", 14))

class BoardType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, -1, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("hc-adif3-board", 0), ("hc-etai2-board", 1), ("hc-isac2-board", 2), ("hc-btai2-board", 3), ("hc-nati2-board", 4), ("hc-ali4-board", 5), ("board-type-none", -1), ("board-type-adif", 6), ("board-type-etai", 7), ("board-type-dli", 8), ("board-type-ali", 9), ("board-type-isdn", 10), ("board-type-ntcm", 11), ("board-type-isac", 12), ("board-type-nati", 13), ("board-type-external", 14))

class RdTaskType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(8, 9))
    namedValues = NamedValues(("totalCompare", 8), ("sampleCompare", 9))

class TaskState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notActive", 0), ("active", 1), ("endingDueTime", 2), ("stuck", 3))

class RdErrorType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("exceptionWhileProcessing", 0), ("failedToInitializeApplication", 1), ("keepAliveHearbeatFailure", 2), ("connectionToCLSLost", 3), ("connectionToLoggerLost", 4), ("clsAddressingGeneralError", 5))

class RdConnStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("connectionNotActive", 0), ("connectionIsActive", 1), ("connectionLost", 2))

nice = MibIdentifier((1, 3, 6, 1, 4, 1, 3167))
niceMib_2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1)).setLabel("niceMib-2")
storageCenter = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 6))
trapsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 1))
trapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 1), SeverityType())
if mibBuilder.loadTexts: trapSeverity.setStatus('mandatory')
if mibBuilder.loadTexts: trapSeverity.setDescription('The trap severity level.')
trapLoggerId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 2), DisplayString())
if mibBuilder.loadTexts: trapLoggerId.setStatus('mandatory')
if mibBuilder.loadTexts: trapLoggerId.setDescription('A logger ID.')
trapRecordedMedia = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 3), RecordedMediaType())
if mibBuilder.loadTexts: trapRecordedMedia.setStatus('mandatory')
if mibBuilder.loadTexts: trapRecordedMedia.setDescription('A recorded media type.')
trapLoggerInitialization = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 4), LoggerInitializationStatus())
if mibBuilder.loadTexts: trapLoggerInitialization.setStatus('mandatory')
if mibBuilder.loadTexts: trapLoggerInitialization.setDescription('A status in the logger initialization phases.')
trapDBErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: trapDBErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: trapDBErrorCode.setDescription('An error code retrieved fron the SQL server.')
trapOsDiskFailure = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 6), OsDiskFailureType())
if mibBuilder.loadTexts: trapOsDiskFailure.setStatus('mandatory')
if mibBuilder.loadTexts: trapOsDiskFailure.setDescription('An Operating system Disk Failure type.')
trapClsTableType = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 7), ClsTableType())
if mibBuilder.loadTexts: trapClsTableType.setStatus('mandatory')
if mibBuilder.loadTexts: trapClsTableType.setDescription('A type of a CLS table.')
trapDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 8), Integer32())
if mibBuilder.loadTexts: trapDiskUsage.setStatus('mandatory')
if mibBuilder.loadTexts: trapDiskUsage.setDescription('Disk usage in Mega-Bytes.')
trapLoggerInitializationStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 9), LoggerInitializationStatus())
if mibBuilder.loadTexts: trapLoggerInitializationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapLoggerInitializationStatus.setDescription('Logger Initialization status reported to CLS.')
trapHostTime = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 10), HostLocalTime())
if mibBuilder.loadTexts: trapHostTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapHostTime.setDescription("The Host's time stamp at the time the trap was sent (local time).")
trapCLSId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 11), DisplayString())
if mibBuilder.loadTexts: trapCLSId.setStatus('mandatory')
if mibBuilder.loadTexts: trapCLSId.setDescription('A CLS ID.')
trapSCId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 12), DisplayString())
if mibBuilder.loadTexts: trapSCId.setStatus('mandatory')
if mibBuilder.loadTexts: trapSCId.setDescription('A SC ID.')
trapDBId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 13), DisplayString())
if mibBuilder.loadTexts: trapDBId.setStatus('mandatory')
if mibBuilder.loadTexts: trapDBId.setDescription('A DB ID.')
trapFileName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 14), DisplayString())
if mibBuilder.loadTexts: trapFileName.setStatus('mandatory')
if mibBuilder.loadTexts: trapFileName.setDescription('A File name.')
trapDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 15), DisplayString())
if mibBuilder.loadTexts: trapDeviceId.setStatus('mandatory')
if mibBuilder.loadTexts: trapDeviceId.setDescription('A device Id .')
trapRegistryKey = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 16), DisplayString())
if mibBuilder.loadTexts: trapRegistryKey.setStatus('mandatory')
if mibBuilder.loadTexts: trapRegistryKey.setDescription('Registry key.')
trapVLModuleName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 17), DisplayString())
if mibBuilder.loadTexts: trapVLModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: trapVLModuleName.setDescription('The name of the Voice Logger module.')
trapVLModuleStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 18), SeverityType())
if mibBuilder.loadTexts: trapVLModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: trapVLModuleStatus.setDescription('The status of the Voice Logger module.')
trapDiskDrive = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 19), DisplayString())
if mibBuilder.loadTexts: trapDiskDrive.setStatus('mandatory')
if mibBuilder.loadTexts: trapDiskDrive.setDescription('Disk Drive.')
trapLoggerIdInChain = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 20), Integer32())
if mibBuilder.loadTexts: trapLoggerIdInChain.setStatus('mandatory')
if mibBuilder.loadTexts: trapLoggerIdInChain.setDescription('Logger ID in chain.')
trapFreeSpacePercentage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 21), Integer32())
if mibBuilder.loadTexts: trapFreeSpacePercentage.setStatus('mandatory')
if mibBuilder.loadTexts: trapFreeSpacePercentage.setDescription('The percentage of available free space.')
trapKeptSpacePercentage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 22), Integer32())
if mibBuilder.loadTexts: trapKeptSpacePercentage.setStatus('mandatory')
if mibBuilder.loadTexts: trapKeptSpacePercentage.setDescription('The Percentage of kept space.')
trapChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 23), Integer32())
if mibBuilder.loadTexts: trapChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapChannelNumber.setDescription('Channel number.')
trapBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 24), Integer32())
if mibBuilder.loadTexts: trapBoardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapBoardNumber.setDescription('Board number.')
trapDspNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 25), Integer32())
if mibBuilder.loadTexts: trapDspNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapDspNumber.setDescription('DSP number.')
trapLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 26), Integer32())
if mibBuilder.loadTexts: trapLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapLineNumber.setDescription('Line Number.')
trapLineProblem = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 27), DisplayString())
if mibBuilder.loadTexts: trapLineProblem.setStatus('mandatory')
if mibBuilder.loadTexts: trapLineProblem.setDescription('Description of the line problem.')
trapDataLineNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 28), Integer32())
if mibBuilder.loadTexts: trapDataLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapDataLineNumber.setDescription('Data Line number.')
trapDaughterBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 29), Integer32())
if mibBuilder.loadTexts: trapDaughterBoardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapDaughterBoardNumber.setDescription('Daughter Board Number.')
trapSQLTableName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 30), DisplayString())
if mibBuilder.loadTexts: trapSQLTableName.setStatus('mandatory')
if mibBuilder.loadTexts: trapSQLTableName.setDescription('Name of SQL Table.')
trapEventProviderId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 31), Integer32())
if mibBuilder.loadTexts: trapEventProviderId.setStatus('mandatory')
if mibBuilder.loadTexts: trapEventProviderId.setDescription('Rule engine event provider Id.')
trapRuleGeneratorId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 32), Integer32())
if mibBuilder.loadTexts: trapRuleGeneratorId.setStatus('mandatory')
if mibBuilder.loadTexts: trapRuleGeneratorId.setDescription('Rule engine rule generator Id.')
trapActionExecuterId = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 33), Integer32())
if mibBuilder.loadTexts: trapActionExecuterId.setStatus('mandatory')
if mibBuilder.loadTexts: trapActionExecuterId.setDescription('Rule engine action executer Id.')
trapLineErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 34), LineErrorType())
if mibBuilder.loadTexts: trapLineErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: trapLineErrorType.setDescription('The Line Error Type.')
trapRecordingChannel = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 35), Integer32())
if mibBuilder.loadTexts: trapRecordingChannel.setStatus('mandatory')
if mibBuilder.loadTexts: trapRecordingChannel.setDescription('A recording channel.')
trapRecordingStartTime = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 36), HostLocalTime())
if mibBuilder.loadTexts: trapRecordingStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapRecordingStartTime.setDescription('A recording start time .')
trapRecordingStopTime = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 37), HostLocalTime())
if mibBuilder.loadTexts: trapRecordingStopTime.setStatus('mandatory')
if mibBuilder.loadTexts: trapRecordingStopTime.setDescription('A recording stop time .')
trapNumOfChannels = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 38), Integer32())
if mibBuilder.loadTexts: trapNumOfChannels.setStatus('mandatory')
if mibBuilder.loadTexts: trapNumOfChannels.setDescription('Number of channels.')
trapBoardOrLogicalTrunk = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 39), Integer32())
if mibBuilder.loadTexts: trapBoardOrLogicalTrunk.setStatus('mandatory')
if mibBuilder.loadTexts: trapBoardOrLogicalTrunk.setDescription('Board number or Logical Trunk number.')
trapChannelOrTimeslot = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 40), Integer32())
if mibBuilder.loadTexts: trapChannelOrTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: trapChannelOrTimeslot.setDescription('Channel number or Timeslot number.')
trapMateLogicalTrunk = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 41), Integer32())
if mibBuilder.loadTexts: trapMateLogicalTrunk.setStatus('mandatory')
if mibBuilder.loadTexts: trapMateLogicalTrunk.setDescription('Mate Trunk Number.')
trapMateTimeslot = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 42), Integer32())
if mibBuilder.loadTexts: trapMateTimeslot.setStatus('mandatory')
if mibBuilder.loadTexts: trapMateTimeslot.setDescription('Mate Timeslot Number.')
trapBoardType = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 43), BoardType())
if mibBuilder.loadTexts: trapBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: trapBoardType.setDescription('Type of board.')
trapLogicalStreamNumber = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 44), Integer32())
if mibBuilder.loadTexts: trapLogicalStreamNumber.setStatus('mandatory')
if mibBuilder.loadTexts: trapLogicalStreamNumber.setDescription('Logical Stream Number.')
trapBackupConfig = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 45), BackupConfig())
if mibBuilder.loadTexts: trapBackupConfig.setStatus('mandatory')
if mibBuilder.loadTexts: trapBackupConfig.setDescription('The configuration of the backup device.')
trapBackupDeviceState = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 1, 46), BackupDeviceState())
if mibBuilder.loadTexts: trapBackupDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: trapBackupDeviceState.setDescription('The state of the backup device.')
cls = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2))
clsRcm = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1))
rcmName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmName.setStatus('mandatory')
if mibBuilder.loadTexts: rcmName.setDescription('The Module name.')
rcmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rcmStatus.setDescription('The Resource Manager current status')
rcmPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3), )
if mibBuilder.loadTexts: rcmPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rcmPendingErrorsTable.setDescription("A list of pending errors for the CLS's Resource Manager.")
rcmPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "rcmErrorIndex"))
if mibBuilder.loadTexts: rcmPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rcmPendingErrorsEntry.setDescription("A pending error for the CLS's Resource Manager.")
rcmErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: rcmErrorType.setDescription('The specific error type pending for the Resource Manager.')
rcmErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rcmErrorReflectedStatus.setDescription('The specific error status reflected on the Resource Manager as a result of the pending error.')
rcmErrorLoggerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorLoggerId.setStatus('optional')
if mibBuilder.loadTexts: rcmErrorLoggerId.setDescription('The logger ID related to the pending error (if any)')
rcmErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rcmErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rcmErrorIndex.setDescription('The error index in the table.')
clsCallServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2))
callServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerName.setStatus('mandatory')
if mibBuilder.loadTexts: callServerName.setDescription('The Module name.')
callServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: callServerStatus.setDescription('The Call server current status')
callServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3), )
if mibBuilder.loadTexts: callServerPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: callServerPendingErrorsTable.setDescription("A list of pending errors for the CLS's Call Server.")
callServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "callServerErrorIndex"))
if mibBuilder.loadTexts: callServerPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: callServerPendingErrorsEntry.setDescription("A pending error for the CLS's Call Server.")
callServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: callServerErrorType.setDescription('The specific error type pending for the Module.')
callServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: callServerErrorReflectedStatus.setDescription('The specific error status reflected on the Module as a result of the pending error.')
callServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: callServerErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: callServerErrorIndex.setDescription('The error index in the table.')
clsSchedulerServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3))
schedulerServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerName.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerName.setDescription('The Module name.')
schedulerServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerStatus.setDescription('The Scheduler Server current status')
schedulerServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3), )
if mibBuilder.loadTexts: schedulerServerPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerPendingErrorsTable.setDescription("A list of pending errors for the CLS's Scheduler Server.")
schedulerServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "schedulerServerErrorIndex"))
if mibBuilder.loadTexts: schedulerServerPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerPendingErrorsEntry.setDescription("A pending error for the CLS's Scheduler Server.")
schedulerServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerErrorType.setDescription('The specific error type pending for the Module.')
schedulerServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerErrorReflectedStatus.setDescription('The specific error status reflected on the Module as a result of the pending error.')
schedulerServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerServerErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: schedulerServerErrorIndex.setDescription('The error index in the table.')
clsDbServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4))
dbServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerName.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerName.setDescription('The Module name.')
dbServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerStatus.setDescription('The Database Server current status')
dbServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3), )
if mibBuilder.loadTexts: dbServerPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerPendingErrorsTable.setDescription("A list of pending errors for the CLS's Database Server.")
dbServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "dbServerErrorIndex"))
if mibBuilder.loadTexts: dbServerPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerPendingErrorsEntry.setDescription("A pending error for the CLS's Database Server.")
dbServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerErrorType.setDescription('The specific error type pending for the Module.')
dbServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerErrorReflectedStatus.setDescription('The specific error status reflected on the Module as a result of the pending error.')
dbServerDBErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerDBErrorCode.setStatus('optional')
if mibBuilder.loadTexts: dbServerDBErrorCode.setDescription('The SQL error code ID related to the pending error (if any)')
dbServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbServerErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dbServerErrorIndex.setDescription('The error index in the table.')
clsDispatcher = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5))
clsDispatcherName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherName.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherName.setDescription('The Module name.')
clsDispatcherStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherStatus.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherStatus.setDescription('The CLS Dispatcher current status')
clsDispatcherPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3), )
if mibBuilder.loadTexts: clsDispatcherPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherPendingErrorsTable.setDescription("A list of pending errors for the CLS's Dispatcher Server.")
clsDispatcherPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "clsDispatcherErrorIndex"))
if mibBuilder.loadTexts: clsDispatcherPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherPendingErrorsEntry.setDescription("A pending error for the CLS's Dispatcher Server.")
clsDispatcherErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1, 1), ClsErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherErrorType.setDescription('The specific error type pending for the Module.')
clsDispatcherErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherErrorReflectedStatus.setDescription('The specific error status reflected on the Module as a result of the pending error.')
clsDispatcherErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsDispatcherErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: clsDispatcherErrorIndex.setDescription('The error index in the table.')
clsAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6))
clsAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsAgentIsRepeatingTraps.setStatus('mandatory')
if mibBuilder.loadTexts: clsAgentIsRepeatingTraps.setDescription("Defining whether the agent will repeat sending traps for each pending error of it's modules.")
clsAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clsAgentTrapsRepeatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: clsAgentTrapsRepeatInterval.setDescription('Defining the interval between repeated traps in minutes.')
clsAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clsAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: clsAgentVersion.setDescription("the agent version number as a sequence of 4 numbers (in the following format 'a.b.c.d').")
clsRcmIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRcmIsDown.setDescription('RCM Is DownRule Engine Action Executer Failed. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsRcmIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRcmIsUp.setDescription('RCM Is Up. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsCallServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCallServerIsDown.setDescription('Call Server Is Down. Trap Severity = {1}, Call Server Name = {2}, Call Server Status = {3}, Trap Host Time = {4}')
clsCallServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCallServerIsUp.setDescription('Call Server Is Up. Trap Severity = {1}, Call Server Name = {2}, Call Server Status = {3}, Trap Host Time = {4}')
clsSchedulerServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsSchedulerServerIsDown.setDescription('Scheduler Server Is Down. Trap Severity = {1}, Scheduler Server Name = {2}, Scheduler Server Status = {3}, Trap Host Time = {4}')
clsSchedulerServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsSchedulerServerIsUp.setDescription('Scheduler Server Is Up. Trap Severity = {1}, Scheduler Server Name = {2}, Scheduler Server Status = {3}, Trap Host Time = {4}')
clsDBServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDBServerIsDown.setDescription('DB Server Is Down. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}')
clsDBServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDBServerIsUp.setDescription('DB Server Is Up. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}')
clsDispatchIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDispatchIsDown.setDescription('Dispatch Is Down. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsDispatchIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDispatchIsUp.setDescription('Dispatch Is Up. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsCallServerLinkIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCallServerLinkIsDown.setDescription('Call Server Link Is Down. Trap Severity = {1}, Call Server Name = {2}, Call Server Status = {3}, Trap Host Time = {4}')
clsCallServerLinkIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCallServerLinkIsUp.setDescription('Call Server Link Is Up. Trap Severity = {1}, Call Server Name = {2}, Call Server Status = {3}, Trap Host Time = {4}')
clsRecordingOnDemandIsNotEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRecordingOnDemandIsNotEnabled.setDescription('CLS RecordingOnDemand Is Not Enabled. Trap Severity = {1}, Scheduler Server Name = {2}, Scheduler Server Status = {3}, Trap Host Time = {4}')
clsRecordingOnDemandIsEnabled = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRecordingOnDemandIsEnabled.setDescription('CLS RecordingOnDemand Is Enabled. Trap Severity = {1}, Scheduler Server Name = {2}, Scheduler Server Status = {3}, Trap Host Time = {4}')
clsSchedulerServerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1015)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsSchedulerServerIsNotInitializedProperly.setDescription('CLS Scheduler Server Is Not Initialized Properly. Trap Severity = {1}, Scheduler Server Name = {2}, Scheduler Server Status = {3}, Trap Host Time = {4}')
clsSchedulerServerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 3) + (0,1016)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "schedulerServerName"), ("Nice-MIB-II", "schedulerServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsSchedulerServerIsInitializedProperly.setDescription('CLS Scheduler Server Is Initialized Properly. Trap Severity = {1}, Scheduler Server Name = {2}, Scheduler Server Status = {3}, Trap Host Time = {4}')
clsFailureConnectionToDB = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1017)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: clsFailureConnectionToDB.setDescription('CLS Failure Connection To DB. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}, Database Error Code = {5}')
clsConnectionToDBIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1018)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsConnectionToDBIsOK.setDescription('CLS Connection To DB Is OK. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}')
clsDBServerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1019)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDBServerIsNotInitializedProperly.setDescription('DB Server Is Not Initialized Properly. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}')
clsDBServerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1020)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDBServerIsInitializedProperly.setDescription('DB Server Is Initialized Properly. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}')
clsDBSpaceIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1021)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: clsDBSpaceIsFull.setDescription('DB Space Is Full. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}, Database Error code = {5}')
clsDBSpaceIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1022)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsDBSpaceIsOK.setDescription('DB Space Is OK. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}')
clsRecordIsNotInsertedToDBTheRecordIsLost = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 4) + (0,1023)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "dbServerName"), ("Nice-MIB-II", "dbServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: clsRecordIsNotInsertedToDBTheRecordIsLost.setDescription('Record Is Not Inserted To DB, The Record Is Lost. Trap Severity = {1}, Database Server Name = {2}, Database Server Status = {3}, Trap Host Time = {4}, Database Error code = {5}')
clsRecordIsInsertedToDB = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1024)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRecordIsInsertedToDB.setDescription('Record Is Inserted To DB. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsCommunicationProblemWithLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1025)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
if mibBuilder.loadTexts: clsCommunicationProblemWithLogger.setDescription('Communication Problem With Logger. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}, Logger ID = {5}')
clsCommunicationToLoggerIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1026)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCommunicationToLoggerIsOK.setDescription('Communication To Logger Is OK. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsProblematicClockDifferencesWithLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1027)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
if mibBuilder.loadTexts: clsProblematicClockDifferencesWithLogger.setDescription('Problematic Clock Differences With Logger. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}, Logger ID = {5}')
clsNoClockDifferencesWithLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1028)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsNoClockDifferencesWithLogger.setDescription('No Clock Differences With Logger. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsNoAvailableResources = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1029)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRecordedMedia"))
if mibBuilder.loadTexts: clsNoAvailableResources.setDescription('No Available Resources. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}, Recorded Media Type = {5}')
clsResourcesAreAvailable = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1030)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsResourcesAreAvailable.setDescription('Resources Are Available. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsLoggerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1031)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerInitializationStatus"))
if mibBuilder.loadTexts: clsLoggerIsNotInitializedProperly.setDescription('Logger Is Not Initialized Properly. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}, Logger Inititalization Status = {5}')
clsLoggerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1032)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsLoggerIsInitializedProperly.setDescription('Logger Is Initialized Properly. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsRCMIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1033)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRCMIsNotInitializedProperly.setDescription('RCM Is Not Initialized Properly. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsRCMIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1034)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsRCMIsInitializedProperly.setDescription('RCM Is Initialized Properly. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsProblemWithNPLUS1Loggers = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1035)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
if mibBuilder.loadTexts: clsProblemWithNPLUS1Loggers.setDescription('Problem With NPLUS1 Loggers. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}, Logger ID = {5}')
clsNPLUS1LoggersAreOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 1) + (0,1036)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rcmName"), ("Nice-MIB-II", "rcmStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsNPLUS1LoggersAreOK.setDescription('NPLUS1 Loggers Are OK. Trap Severity = {1}, RCM Name = {2}, RCM Status = {3}, Trap Host Time = {4}')
clsCallServerTableIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1037)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapClsTableType"))
if mibBuilder.loadTexts: clsCallServerTableIsFull.setDescription('Call Server Table Is Full. Trap Severity = {1}, Call Server Name = {2}, Call Server Status = {3}, Trap Host Time = {4}, CLS Table Type = {5}')
clsCallServerTableIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 2) + (0,1038)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "callServerName"), ("Nice-MIB-II", "callServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCallServerTableIsOK.setDescription('Call Server Table Is OK. Trap Severity = {1}, Call Server Name = {2}, Call Server Status = {3}, Trap Host Time = {4}')
clsALLCLSModulesInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1039)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsALLCLSModulesInitFailed.setDescription('ALL CLS Modules Init Failed. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsALLCLSModulesInitOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1040)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsALLCLSModulesInitOK.setDescription('ALL CLS Modules Init OK. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsCLSModuleRestartFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1041)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCLSModuleRestartFailed.setDescription('CLS Module Restart Failed. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsCLSModuleRestartOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1042)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsCLSModuleRestartOK.setDescription('CLS Module Restart OK. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsOSDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1043)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapOsDiskFailure"))
if mibBuilder.loadTexts: clsOSDiskFailure.setDescription('OS Disk Failure. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
clsOSDiskOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 2, 5) + (0,1044)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "clsDispatcherName"), ("Nice-MIB-II", "clsDispatcherStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: clsOSDiskOK.setDescription('OS Disk OK. Trap Severity = {1}, CLS Dispatcher Name = {2}, CLS Dispatcher Status = {3}, Trap Host Time = {4}')
applicationsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 5))
applicationsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1), )
if mibBuilder.loadTexts: applicationsTable.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsTable.setDescription('A list of all application servers availiable on this machine.')
applicationsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1), ).setIndexNames((0, "Nice-MIB-II", "applicationsTableIndex"))
if mibBuilder.loadTexts: applicationsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsEntry.setDescription('An application server entry.')
applicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationName.setStatus('mandatory')
if mibBuilder.loadTexts: applicationName.setDescription('The application server name.')
applicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applicationStatus.setDescription('The application server status.')
applicationsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsTableIndex.setDescription('The table index.')
applicationsPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2), )
if mibBuilder.loadTexts: applicationsPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsPendingErrorsTable.setDescription('A list of all pending errors for application servers.')
applicationsPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1), ).setIndexNames((0, "Nice-MIB-II", "applicationsErrorsTableApplicationIndex"), (0, "Nice-MIB-II", "applicationsErrorsTableErrorIndex"))
if mibBuilder.loadTexts: applicationsPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsPendingErrorsEntry.setDescription('An application server pending error entry.')
applicationErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 1), ApplicationErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: applicationErrorType.setDescription('The error type.')
applicationErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: applicationErrorReflectedStatus.setDescription("The error's severity type.")
applicationsErrorsTableApplicationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsErrorsTableApplicationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsErrorsTableApplicationIndex.setDescription('The first table index.')
applicationsErrorsTableErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsErrorsTableErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsErrorsTableErrorIndex.setDescription('The second table index.')
applicationsNumberLoggedInUsers = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsNumberLoggedInUsers.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsNumberLoggedInUsers.setDescription('The number of users currently logged in to the application.')
applicationsSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4))
applicationsAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applicationsAgentIsRepeatingTraps.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsAgentIsRepeatingTraps.setDescription("Defining whether the agent will repeat sending traps for each pending error of it's modules.")
applicationsAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: applicationsAgentTrapsRepeatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsAgentTrapsRepeatInterval.setDescription('Defining the interval between repeated traps in minutes. -1 means no repeating traps')
applicationsAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 5, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: applicationsAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: applicationsAgentVersion.setDescription("the agent version number as a sequence of 4 numbers (in the following format 'a.b.c.d').")
ctiEventsDbServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 8))
ctiDBServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerName.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerName.setDescription('The Module name.')
ctiDBServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerStatus.setDescription('The CTI Events Database Server current status')
ctiDBServerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3), )
if mibBuilder.loadTexts: ctiDBServerPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerPendingErrorsTable.setDescription('A list of pending errors for the CTI Events Database Server.')
ctiDBServerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "ctiDBServerErrorIndex"))
if mibBuilder.loadTexts: ctiDBServerPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerPendingErrorsEntry.setDescription('A pending error for the CTI Events Database Server.')
ctiDBServerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 1), CTIEventsDBServerErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerErrorType.setDescription('The specific error type pending for the Module.')
ctiDBServerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerErrorReflectedStatus.setDescription('The specific error status reflected on the Module as a result of the pending error.')
ctiDBServerDBErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerDBErrorCode.setStatus('optional')
if mibBuilder.loadTexts: ctiDBServerDBErrorCode.setDescription('The SQL error code ID related to the pending error (if any)')
ctiDBServerErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerErrorIndex.setDescription('The error index in the table.')
ctiDBServerSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4))
ctiDBServerAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctiDBServerAgentIsRepeatingTraps.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerAgentIsRepeatingTraps.setDescription("Defining whether the agent will repeat sending traps for each pending error of it's modules.")
ctiDBServerAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctiDBServerAgentTrapsRepeatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerAgentTrapsRepeatInterval.setDescription('Defining the interval between repeated traps in minutes.')
ctiDBServerAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 8, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctiDBServerAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: ctiDBServerAgentVersion.setDescription("the agent version number as a sequence of 4 numbers (in the following format 'a.b.c.d').")
appsServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsServerIsDown.setDescription('Application server is down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsServerIsUp.setDescription('Application server is up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsSystemAdminHostConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsSystemAdminHostConnectionIsDown.setDescription('System Admin Host Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsSystemAdminHostConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsSystemAdminHostConnectionIsUp.setDescription('System Admin Host Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsAdminDataBaseConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsAdminDataBaseConnectionIsDown.setDescription('Data Base Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsAdminDataBaseConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsAdminDataBaseConnectionIsUp.setDescription('Data Base Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsLoggerIsNotAttachToACLS = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
if mibBuilder.loadTexts: appsLoggerIsNotAttachToACLS.setDescription('Logger Is Not Attach To A CLS. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Logger ID = {5}')
appsCLSConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapCLSId"))
if mibBuilder.loadTexts: appsCLSConnectionIsDown.setDescription('CLS Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, CLS ID = {5}')
appsCLSConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapCLSId"))
if mibBuilder.loadTexts: appsCLSConnectionIsUp.setDescription('CLS Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, CLS ID = {5}')
appsLoggerConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
if mibBuilder.loadTexts: appsLoggerConnectionIsDown.setDescription('Logger Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Logger ID = {5}')
appsLoggerConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerId"))
if mibBuilder.loadTexts: appsLoggerConnectionIsUp.setDescription('Logger Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Logger ID = {5}')
appsSCConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapSCId"))
if mibBuilder.loadTexts: appsSCConnectionIsDown.setDescription('SC Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Storage Center ID = {5}')
appsSCConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapSCId"))
if mibBuilder.loadTexts: appsSCConnectionIsUp.setDescription('SC Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Storage Center ID = {5}')
appsCTIDBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsCTIDBConnectionIsDown.setDescription('CTI DB Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsCTIDBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5015)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsCTIDBConnectionIsUp.setDescription('CTI DB Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsCADBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5016)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsCADBConnectionIsDown.setDescription('CA DB Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsCADBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5017)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsCADBConnectionIsUp.setDescription('CA DB Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsNIFDBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5018)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsNIFDBConnectionIsDown.setDescription('NIF DB Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsNIFDBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5019)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsNIFDBConnectionIsUp.setDescription('NIF DB Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsInteractionDBConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5020)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsInteractionDBConnectionIsDown.setDescription('Interaction DB Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsInteractionDBConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5021)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsInteractionDBConnectionIsUp.setDescription('Interaction DB Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsUserAdminHostConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5022)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsUserAdminHostConnectionIsDown.setDescription('User admin Connection Is Down. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsUserAdminHostConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5023)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: appsUserAdminHostConnectionIsUp.setDescription('User Admin Connection Is Up. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
appsRuleEngineEventProviderFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5024)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
if mibBuilder.loadTexts: appsRuleEngineEventProviderFailed.setDescription('Rule Engine Event Provider Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Event Provider ID = {5}')
appsRuleEngineEventProviderSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5025)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
if mibBuilder.loadTexts: appsRuleEngineEventProviderSucceeded.setDescription('Rule Engine Event Provider Succeeded. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Event Provider ID = {5}')
appsRuleEngineEventProviderIdle = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5026)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
if mibBuilder.loadTexts: appsRuleEngineEventProviderIdle.setDescription('Rule Engine Event Provider Idle. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Event Provider ID = {5}')
appsRuleEngineEventProviderActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5027)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapEventProviderId"))
if mibBuilder.loadTexts: appsRuleEngineEventProviderActive.setDescription('Rule Engine Event Provider Active. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Event Provider ID = {5}')
appsRuleEngineRuleGeneratorFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5028)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
if mibBuilder.loadTexts: appsRuleEngineRuleGeneratorFailed.setDescription('Rule Engine Rule Generator Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Rule Generator ID = {5}')
appsRuleEngineRuleGeneratorSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5029)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
if mibBuilder.loadTexts: appsRuleEngineRuleGeneratorSucceeded.setDescription('Rule Engine Rule Generator Succeeded. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Rule Generator ID = {5}')
appsRuleEngineRuleGeneratorIdle = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5030)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
if mibBuilder.loadTexts: appsRuleEngineRuleGeneratorIdle.setDescription('Rule Engine Rule Generator Idle. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Rule Generator ID = {5}')
appsRuleEngineRuleGeneratorActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5031)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRuleGeneratorId"))
if mibBuilder.loadTexts: appsRuleEngineRuleGeneratorActive.setDescription('Rule Engine Rule Generator Active. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Rule Generator ID = {5}')
appsRuleEngineActionExecuterFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5032)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
if mibBuilder.loadTexts: appsRuleEngineActionExecuterFailed.setDescription('Rule Engine Action Executer Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Action Executer ID = {5}')
appsRuleEngineActionExecuterSucceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5033)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
if mibBuilder.loadTexts: appsRuleEngineActionExecuterSucceeded.setDescription('Rule Engine Action Executer SucceededRule Engine Action Executer Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Action Executer ID = {5}')
appsRuleEngineActionExecuterIdle = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5034)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
if mibBuilder.loadTexts: appsRuleEngineActionExecuterIdle.setDescription('Rule Engine Action Executer IdleRule Engine Action Executer Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Action Executer ID = {5}')
appsRuleEngineActionExecuterActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5035)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapActionExecuterId"))
if mibBuilder.loadTexts: appsRuleEngineActionExecuterActive.setDescription('Rule Engine Action Executer ActiveRule Engine Action Executer Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Action Executer ID = {5}')
appsRuleMngrDataBaseConnectionIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5036)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsRuleMngrDataBaseConnectionIsDown.setDescription('Rule Mngr Data Base Connection Is DownRule Engine Action Executer Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
appsRuleMngrDataBaseConnectionIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 5, 1) + (0,5037)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "applicationName"), ("Nice-MIB-II", "applicationStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBId"))
if mibBuilder.loadTexts: appsRuleMngrDataBaseConnectionIsUp.setDescription('Rule Mngr Data Base Connection Is UpRule Engine Action Executer Failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Database ID = {5}')
drivers = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 4))
driversTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1), )
if mibBuilder.loadTexts: driversTable.setStatus('mandatory')
if mibBuilder.loadTexts: driversTable.setDescription('A list of all NICE drivers availiable on this machine.')
driversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1), ).setIndexNames((0, "Nice-MIB-II", "driverId"))
if mibBuilder.loadTexts: driversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driversEntry.setDescription('A NICE driver entry.')
driverName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverName.setStatus('mandatory')
if mibBuilder.loadTexts: driverName.setDescription('The NICE driver name.')
driverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverStatus.setStatus('mandatory')
if mibBuilder.loadTexts: driverStatus.setDescription('The NICE driver status.')
driverId = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverId.setStatus('mandatory')
if mibBuilder.loadTexts: driverId.setDescription('The NICE driver ID.')
driverNumberOfDevicesMonitored = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverNumberOfDevicesMonitored.setStatus('mandatory')
if mibBuilder.loadTexts: driverNumberOfDevicesMonitored.setDescription("The NICE driver's number of devices monitored.")
driverNumberOfSegments = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverNumberOfSegments.setStatus('mandatory')
if mibBuilder.loadTexts: driverNumberOfSegments.setDescription("The NICE driver's number of segments.")
driverNumberOfCompound = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverNumberOfCompound.setStatus('mandatory')
if mibBuilder.loadTexts: driverNumberOfCompound.setDescription("The NICE driver's number of current compund calls.")
driverModulesTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2), )
if mibBuilder.loadTexts: driverModulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: driverModulesTable.setDescription('A list of all modules within the NICE drivers availiable on this machine.')
driverModulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1), ).setIndexNames((0, "Nice-MIB-II", "driverIdInModulesTable"), (0, "Nice-MIB-II", "driverModuleId"))
if mibBuilder.loadTexts: driverModulesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driverModulesEntry.setDescription('A NICE driver module entry.')
driverModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: driverModuleName.setDescription('The NICE driver module name.')
driverModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: driverModuleStatus.setDescription('The NICE driver module status.')
driverIdInModulesTable = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIdInModulesTable.setStatus('mandatory')
if mibBuilder.loadTexts: driverIdInModulesTable.setDescription('The NICE driver ID.')
driverModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleId.setStatus('mandatory')
if mibBuilder.loadTexts: driverModuleId.setDescription('The NICE driver module ID.')
driversPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3), )
if mibBuilder.loadTexts: driversPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: driversPendingErrorsTable.setDescription('A list of all pending errors for drivers.')
driversPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "driverIdInDriversErrors"), (0, "Nice-MIB-II", "driverErrorIndex"))
if mibBuilder.loadTexts: driversPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driversPendingErrorsEntry.setDescription("A driver's pending error entry.")
driverErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 1), DriverErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: driverErrorType.setDescription('The error type.')
driverErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: driverErrorReflectedStatus.setDescription("The error's severity type.")
driverIdInDriversErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIdInDriversErrors.setStatus('mandatory')
if mibBuilder.loadTexts: driverIdInDriversErrors.setDescription('The first table index.')
driverErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: driverErrorIndex.setDescription('The second table index.')
driversModulePendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4), )
if mibBuilder.loadTexts: driversModulePendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: driversModulePendingErrorsTable.setDescription("A list of all pending errors for a driver's module.")
driversModulePendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "driverIdInDriversErrors"), (0, "Nice-MIB-II", "driverErrorIndex"))
if mibBuilder.loadTexts: driversModulePendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: driversModulePendingErrorsEntry.setDescription("A driver's pending error entry.")
driverModuleErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 1), DriverErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: driverModuleErrorType.setDescription('The error type.')
driverModuleErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: driverModuleErrorReflectedStatus.setDescription("The error's severity type.")
driverIdInDriverModulesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverIdInDriverModulesErrors.setStatus('mandatory')
if mibBuilder.loadTexts: driverIdInDriverModulesErrors.setDescription('The first table index.')
moduleIdInModulesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: moduleIdInModulesErrors.setStatus('mandatory')
if mibBuilder.loadTexts: moduleIdInModulesErrors.setDescription('The second table index.')
driverModuleErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverModuleErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: driverModuleErrorIndex.setDescription('The third table index.')
driversSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5))
driversAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: driversAgentIsRepeatingTraps.setStatus('mandatory')
if mibBuilder.loadTexts: driversAgentIsRepeatingTraps.setDescription("Defining whether the agent will repeat sending traps for each pending error of it's modules.")
driversAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: driversAgentTrapsRepeatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: driversAgentTrapsRepeatInterval.setDescription('Defining the interval between repeated traps in minutes.')
driversAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 4, 5, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: driversAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: driversAgentVersion.setDescription("the agent version number as a sequence of 4 numbers (in the following format 'a.b.c.d').")
driverIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4) + (0,4001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverIsUp.setDescription('Driver is up. Trap Severity = {1}, Driver Name = {2}, Driver Status = {3}, Trap Host Time = {4}')
driverIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverIsDown.setDescription('Driver is down. Trap Severity = {1}, Driver Name = {2}, Driver Status = {3}, Trap Host Time = {4}')
driverConfigurationFileIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFileName"))
if mibBuilder.loadTexts: driverConfigurationFileIsMissing.setDescription('Configuration file is missing. Trap Severity = {1}, Driver Name = {2}, Driver Status = {3}, Trap Host Time = {4}, File Name = {5}')
driverSignificantConfigurationFileDataIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFileName"))
if mibBuilder.loadTexts: driverSignificantConfigurationFileDataIsMissing.setDescription('Significant configuration file data is missing. Trap Severity = {1}, Driver Name = {2}, Driver Status = {3}, Trap Host Time = {4}, File Name = {5}')
driverConfigurationFileDataIsMissing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 1) + (0,4005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverName"), ("Nice-MIB-II", "driverStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFileName"))
if mibBuilder.loadTexts: driverConfigurationFileDataIsMissing.setDescription('Configuration file data is missing. Trap Severity = {1}, Driver Name = {2}, Driver Status = {3}, Trap Host Time = {4}, File Name = {5}')
driverConnectionToCapiIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverConnectionToCapiIsDown.setDescription('Connection to CAPI is down. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverConnectionToCapiIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverConnectionToCapiIsUp.setDescription('Connection to CAPI is up. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverConnectionToSwitchIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverConnectionToSwitchIsDown.setDescription('Connection to switch is down. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverConnectionToSwitchIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverConnectionToSwitchIsUp.setDescription('Connection to switch is up. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverInternalEngineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverInternalEngineError.setDescription('Internal engine error. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverInternalEngineOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverInternalEngineOK.setDescription('Internal engine OK. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverCapiError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverCapiError.setDescription('Capi error. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverCapiOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverCapiOK.setDescription('Capi OK. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverCTIEngineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverCTIEngineError.setDescription('CTI engine error. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverCTIEngineWarning = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4015)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverCTIEngineWarning.setDescription('CTI engine warning. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverCTIEngineOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4016)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: driverCTIEngineOK.setDescription('CTI engine OK. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}')
driverMonitorEnd = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4, 2) + (0,4017)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDeviceId"))
if mibBuilder.loadTexts: driverMonitorEnd.setDescription('Monitor end. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}, Extension = {5}')
driverRegistryError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4) + (0,4018)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRegistryKey"))
if mibBuilder.loadTexts: driverRegistryError.setDescription('Registry error. Trap Severity = {1}, Driver Module Name = {2}, Driver Module Status = {3}, Trap Host Time = {4}, Registry Key = {5}')
driverRegistryWarning = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 4) + (0,4019)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "driverModuleName"), ("Nice-MIB-II", "driverModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapRegistryKey"))
if mibBuilder.loadTexts: driverRegistryWarning.setDescription('Registry warning. Trap Severity = {1}, Driver Module Name = {2}, Driver MOdule Status = {3}, Trap Host Time = {4}, Registry Key = {5}')
logger = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3))
multiMediaLogger = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1))
mmlName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlName.setStatus('mandatory')
if mibBuilder.loadTexts: mmlName.setDescription('The Multi Media logger internal ID.')
mmlStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mmlStatus.setDescription('The Multi Media logger status.')
mmlStorageSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3))
mmlStorageSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStorageSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: mmlStorageSystemName.setDescription("The Multi Media logger's storage system name.")
mmlStorageSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStorageSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mmlStorageSystemStatus.setDescription('The Multi Media logger storage system status.')
mmlStorageSystemDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlStorageSystemDiskUsage.setStatus('mandatory')
if mibBuilder.loadTexts: mmlStorageSystemDiskUsage.setDescription('The Multi Media total disk usage (percentage).')
mmlDataSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4))
mmlDataSystemName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlDataSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: mmlDataSystemName.setDescription("The Multi Media logger's data system name.")
mmlDataSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlDataSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mmlDataSystemStatus.setDescription('The Multi Media logger data system status.')
mmlAutoDeletion = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5))
mmlAutoDeletionName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlAutoDeletionName.setStatus('mandatory')
if mibBuilder.loadTexts: mmlAutoDeletionName.setDescription("The Multi Media logger's auto deletion mechanism name.")
mmlAutoDeletionStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlAutoDeletionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mmlAutoDeletionStatus.setDescription('The Multi Media logger auto deletion mechanism status.')
mmlAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6))
mmlAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmlAgentIsRepeatingTraps.setStatus('mandatory')
if mibBuilder.loadTexts: mmlAgentIsRepeatingTraps.setDescription("Defining whether the agent will repeat sending traps for each pending error of it's modules.")
mmlAgentTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mmlAgentTrapsRepeatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: mmlAgentTrapsRepeatInterval.setDescription('Defining the interval between repeated traps in minutes.')
mmlAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mmlAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: mmlAgentVersion.setDescription("the agent version number as a sequence of 4 numbers (in the following format 'a.b.c.d').")
mmlSnmpAgentConnectedToLogger = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlSnmpAgentConnectedToLogger.setDescription('MML SNMP Agent Connected to logger. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlConnectionToLoggerNotEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlConnectionToLoggerNotEstablished.setDescription('MML SNMP Agent tried to connect to logger but not established. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3100)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlInvalidConfiguration.setDescription('Invalid configuration. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3101)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlPersistentMismatch.setDescription('Persistent mismatch. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlAbnormalPlaybackTermination = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3102)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlAbnormalPlaybackTermination.setDescription('Abnormal playback termination. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlAbnormalRecordTermination = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3103)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlAbnormalRecordTermination.setDescription('Abnormal record termination. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlUnableToReplyDueToConnectionLoss = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3104)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlUnableToReplyDueToConnectionLoss.setDescription('Unable to reply due to connection loss. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlFailToInitializeStorageDevice = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3105)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlFailToInitializeStorageDevice.setDescription('The MML failed to initialize storage device. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlFailToInitializeDataSystem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3106)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlFailToInitializeDataSystem.setDescription('The MML failed to initialize data system. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlFailToInitializeMemoryManager = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3107)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlFailToInitializeMemoryManager.setDescription('The MML failed to initialize memory manager. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlUnexpectedDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3108)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlUnexpectedDisconnect.setDescription('The MML got Unexpected disconnect. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlConnectionCanNotBeEstablished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3109)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlConnectionCanNotBeEstablished.setDescription('The MML failed to open connection. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlAllConnectionResourcesInUse = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3110)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlAllConnectionResourcesInUse.setDescription('All MML connection resources in use. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlConnectionTimeoutExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3111)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlConnectionTimeoutExceeded.setDescription('Connection timeout exceeded. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlMemoryManagerOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3112)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlMemoryManagerOverflow.setDescription('The MML Memory manager got overflow. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3113)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlAllocationFailure.setDescription('The MML got allocation failure. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlResourceAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3114)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlResourceAllocationFailure.setDescription('The MML got resource allocation failure. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlOutputChannelAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3115)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlOutputChannelAllocationFailure.setDescription('The MML got output channel allocation failure. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlInputChannelAllocationFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3116)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlInputChannelAllocationFailure.setDescription('The MML got input channel allocation failure. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlResourceAccessFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3117)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlResourceAccessFailure.setDescription('The MML got resource access failure. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlLoggerIsShuttingDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3118)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlLoggerIsShuttingDown.setDescription('The MML is shutting down. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlLoggerIsReady = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1) + (0,3119)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlName"), ("Nice-MIB-II", "mmlStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlLoggerIsReady.setDescription('The MML is ready. Trap Severity = {1}, mml Name = {2}, mml Status = {3}, Trap Host Time = {4}')
mmlStorageSystemInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3200)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlStorageSystemInvalidConfiguration.setDescription('Storage system invalid configuration. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}')
mmlStorageSystemPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3201)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlStorageSystemPersistentMismatch.setDescription('Storage system persistent mismatch. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}')
mmlConsistentDiskWriteFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3202)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlConsistentDiskWriteFailure.setDescription('The MML is repeatedly failing to write to disk. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}')
mmlConsistentDiskReadFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3203)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlConsistentDiskReadFailure.setDescription('The MML is repeatedly failing to read from disk. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}')
mmlDiskUsage = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3204)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDiskUsage"))
if mibBuilder.loadTexts: mmlDiskUsage.setDescription('The MML Disk usage notification. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}, Trap Disk Usage = {5}')
mmlDiskIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3205)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlDiskIsFull.setDescription('The MML Disk is full. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}')
mmlDiskIOFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 3) + (0,3206)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlStorageSystemName"), ("Nice-MIB-II", "mmlStorageSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlDiskIOFailure.setDescription('The MML has Disk IO failure. Trap Severity = {1}, mml Storage System Name = {2}, mml Storage System Status = {3}, Trap Host Time = {4}')
mmlDataSystemInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3300)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlDataSystemInvalidConfiguration.setDescription('Storage system invalid configuration. Trap Severity = {1}, mml Data System Name = {2}, mml Data System Status = {3}, Trap Host Time = {4}')
mmlDataSystemPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3301)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlDataSystemPersistentMismatch.setDescription('Storage system persistent mismatch. Trap Severity = {1}, mml Data System Name = {2}, mml Data System Status = {3}, Trap Host Time = {4}')
mmlDataBaseConsistencyMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3302)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlDataBaseConsistencyMismatch.setDescription('The MML database has Consistency mismatch. Trap Severity = {1}, mml Data System Name = {2}, mml Data System Status = {3}, Trap Host Time = {4}')
mmlCriticalDataSystemError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3303)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlCriticalDataSystemError.setDescription('General error at the MML data systen. Trap Severity = {1}, mml Data System Name = {2}, mml Data System Status = {3}, Trap Host Time = {4}')
mmlTableAccessFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 4) + (0,3304)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlDataSystemName"), ("Nice-MIB-II", "mmlDataSystemStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlTableAccessFailure.setDescription('Table access failure in the MML data system. Trap Severity = {1}, mml Data System Name = {2}, mml Data System Status = {3}, Trap Host Time = {4}')
mmlAutoDeletionInvalidConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3400)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlAutoDeletionInvalidConfiguration.setDescription('Storage system invalid configuration. Trap Severity = {1}, mml Auto Deletion Name = {2}, mml Auto Deletion Status = {3}, Trap Host Time = {4}')
mmlAutoDeletionPersistentMismatch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3401)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlAutoDeletionPersistentMismatch.setDescription('Storage system persistent mismatch. Trap Severity = {1}, mml Auto Deletion Name = {2}, mml Auto Deletion Status = {3}, Trap Host Time = {4}')
mmlStartingAutoDeletionJob = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3402)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlStartingAutoDeletionJob.setDescription('Starting auto deletion job. Trap Severity = {1}, mml Auto Deletion Name = {2}, mml Auto Deletion Status = {3}, Trap Host Time = {4}')
mmlFinishedNormal = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3403)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlFinishedNormal.setDescription('The MML Finished normal. Trap Severity = {1}, mml Auto Deletion Name = {2}, mml Auto Deletion Status = {3}, Trap Host Time = {4}')
mmlDeletionCapacityNotReached = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 1, 5) + (0,3404)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "mmlAutoDeletionName"), ("Nice-MIB-II", "mmlAutoDeletionStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: mmlDeletionCapacityNotReached.setDescription('Deletion capacity not reached. Trap Severity = {1}, mml Auto Deletion Name = {2}, mml Auto Deletion Status = {3}, Trap Host Time = {4}')
voiceLogger = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2))
voiceLoggerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLoggerName.setStatus('mandatory')
if mibBuilder.loadTexts: voiceLoggerName.setDescription('The Voice Logger Name\\Id.')
voiceLoggerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLoggerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: voiceLoggerStatus.setDescription('The Voice Logger current status.')
voiceLoggerLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3))
loggingName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingName.setStatus('mandatory')
if mibBuilder.loadTexts: loggingName.setDescription('The Module Name.')
loggingStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingStatus.setStatus('mandatory')
if mibBuilder.loadTexts: loggingStatus.setDescription('The Logging current status.')
loggingInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3), )
if mibBuilder.loadTexts: loggingInstanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceTable.setDescription('A list of all logging instances.')
loggingInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "loggingInstanceIndex"))
if mibBuilder.loadTexts: loggingInstanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceEntry.setDescription('A logging instance entry.')
loggingInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceName.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceName.setDescription('The logging instance name.')
loggingInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceStatus.setDescription('The logging instance status.')
loggingInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 3), LoggingInstanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceType.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceType.setDescription('The logging instance Type. For Example: Adif3')
loggingInstanceNumberInType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceNumberInType.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceNumberInType.setDescription('The logging instance number of a certain Type.')
loggingInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: loggingInstanceIndex.setDescription('The logging instance index.')
loggingPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4), )
if mibBuilder.loadTexts: loggingPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: loggingPendingErrorsTable.setDescription('A list of pending errors for Logging instances.')
loggingPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "loggingErrorInstanceIndex"), (0, "Nice-MIB-II", "loggingErrorIndex"))
if mibBuilder.loadTexts: loggingPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: loggingPendingErrorsEntry.setDescription('A pending error for Logging instances.')
loggingErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 1), LoggingErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: loggingErrorType.setDescription('The specific error type pending for Logging instances.')
loggingErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: loggingErrorReflectedStatus.setDescription('The specific error status reflected on the Logging instances as a result of the pending error.')
loggingErrorInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: loggingErrorInstanceIndex.setDescription('The logging instance index related to the pending error (if any)')
loggingErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: loggingErrorIndex.setDescription('The error index in the table.')
loggingErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loggingErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: loggingErrorCode.setDescription('Error Code that match the code in the Traps Technical Description.')
voiceLoggerCapture = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4))
captureName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureName.setStatus('mandatory')
if mibBuilder.loadTexts: captureName.setDescription('The Module Name.')
captureStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureStatus.setStatus('mandatory')
if mibBuilder.loadTexts: captureStatus.setDescription('The Capture current status.')
captureInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3), )
if mibBuilder.loadTexts: captureInstanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceTable.setDescription('A list of all capture boards.')
captureInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "captureInstanceIndex"))
if mibBuilder.loadTexts: captureInstanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceEntry.setDescription('A capture instance entry.')
captureInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceName.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceName.setDescription('The capture instance name.')
captureInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceStatus.setDescription('The capture instance status.')
captureInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 3), CaptureInstanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceType.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceType.setDescription('The capture instance Type. For Example: Adif3')
captureInstanceNumberInType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceNumberInType.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceNumberInType.setDescription('The capture instance number of a certain Type.')
captureInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: captureInstanceIndex.setDescription('The internal capture instance index.')
capturePendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4), )
if mibBuilder.loadTexts: capturePendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: capturePendingErrorsTable.setDescription('A list of pending errors for Capture Instances.')
capturePendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "captureErrorInstanceIndex"), (0, "Nice-MIB-II", "captureErrorIndex"))
if mibBuilder.loadTexts: capturePendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: capturePendingErrorsEntry.setDescription('A pending error for a capture instance.')
captureErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 1), CaptureErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: captureErrorType.setDescription('The specific error type pending for a Capture Board.')
captureErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: captureErrorReflectedStatus.setDescription('The specific error status reflected on the Capture board as a result of the pending error.')
captureErrorInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: captureErrorInstanceIndex.setDescription('The capture instance index related to the pending error (if any) Eli - the index in the capture instance table')
captureErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: captureErrorIndex.setDescription('The error index in the table.')
captureErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: captureErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: captureErrorCode.setDescription('Error Code that match the code in the Traps Technical Description.')
voiceLoggerBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5))
backupName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupName.setStatus('mandatory')
if mibBuilder.loadTexts: backupName.setDescription('The Module Name.')
backupStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: backupStatus.setDescription('The Backup current status.')
backupInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3), )
if mibBuilder.loadTexts: backupInstanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceTable.setDescription('A list of all backup instances with in the Voice Logger.')
backupInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1), ).setIndexNames((0, "Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: backupInstanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceEntry.setDescription('A backup instance entry.')
backupInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceName.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceName.setDescription('The device name.')
backupInstanceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceStatus.setDescription('The device status.')
backupInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceNumber.setDescription('The device number, which is also the index in the instance table.')
backupInstanceRemoteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceRemoteNumber.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceRemoteNumber.setDescription('The remote device index in RTS Server.')
backupInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 3, 1, 5), BackupInstanceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupInstanceType.setStatus('mandatory')
if mibBuilder.loadTexts: backupInstanceType.setDescription('The device type.')
backupPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4), )
if mibBuilder.loadTexts: backupPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: backupPendingErrorsTable.setDescription('A list of pending errors for Backup Instances.')
backupPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1), ).setIndexNames((0, "Nice-MIB-II", "backupErrorInstanceIndex"), (0, "Nice-MIB-II", "backupErrorIndex"))
if mibBuilder.loadTexts: backupPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: backupPendingErrorsEntry.setDescription('A pending error for a backup Instances.')
backupErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 1), BackupErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: backupErrorType.setDescription('The specific error type pending for a Backup device.')
backupErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: backupErrorReflectedStatus.setDescription('The specific error status reflected on the Backup device as a result of the pending error.')
backupErrorBSRVErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 3), BackupErrorBSRVErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorBSRVErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: backupErrorBSRVErrorCode.setDescription('The device bsrv error.')
backupErrorInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorInstanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: backupErrorInstanceIndex.setDescription('The backup instance index related to the pending error (if any)')
backupErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: backupErrorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: backupErrorIndex.setDescription('The backup error index in the table.')
voiceLoggerSnmpAgentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6))
voiceLoggerAgentIsRepeatingTraps = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6, 1), YesNo()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceLoggerAgentIsRepeatingTraps.setStatus('mandatory')
if mibBuilder.loadTexts: voiceLoggerAgentIsRepeatingTraps.setDescription("Defining whether the agent will repeat sending traps for each pending error of it's modules.")
voiceLoggerTrapsRepeatInterval = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceLoggerTrapsRepeatInterval.setStatus('mandatory')
if mibBuilder.loadTexts: voiceLoggerTrapsRepeatInterval.setDescription('Defining the interval between repeated traps in minutes.')
voiceLoggerAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 6, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceLoggerAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: voiceLoggerAgentVersion.setDescription("the agent version number as a sequence of 4 numbers (in the following format 'a.b.c.d').")
vlLoggerNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2) + (0,6002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlLoggerNotResponding.setDescription('Communication Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlApiQueryError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2) + (0,6003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlApiQueryError.setDescription('Failed to Query the Logger. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDbmConsistencyFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6100)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDbmConsistencyFailed.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDbmInitPartitionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6101)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDbmInitPartitionFailed.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlKernerHWDriverInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6102)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlKernerHWDriverInitFailed.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlVoipDriverInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6103)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlVoipDriverInitFailed.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDliDriverInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6104)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDliDriverInitFailed.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlAumGeneralInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6105)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlAumGeneralInitFailure.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDiskOpenPartitionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6106)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDiskDrive"))
if mibBuilder.loadTexts: vlDiskOpenPartitionFailed.setDescription('Initialization Failure. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Trap Disk Drive = {5}')
vlDiskDriveProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6107)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDiskDriveProblem.setDescription('Disk Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlNPlus1ManualSwitch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6108)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlNPlus1ManualSwitch.setDescription('NPLUS1 - logger was switched due to manual switch. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlNPlus1SpareIsBackingUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6109)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapLoggerIdInChain"))
if mibBuilder.loadTexts: vlNPlus1SpareIsBackingUp.setDescription('NPLUS1 - Spare is backing up logger X. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Logger ID in Chain = {5}')
vlNPlus1ROBMalfunction = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6110)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlNPlus1ROBMalfunction.setDescription('Nplus1 redundancy Malfunction [ROB]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlNPlus1ROBPowerFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6111)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlNPlus1ROBPowerFailure.setDescription('Nplus1 redundancy Power Failure [ROB]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlNPlus1SpareNeedLongUpdate = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6112)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlNPlus1SpareNeedLongUpdate.setDescription('NPLUS1 - Spare Needs Long Update. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlAutoDeleteUnder3PercSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6113)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFreeSpacePercentage"))
if mibBuilder.loadTexts: vlAutoDeleteUnder3PercSpace.setDescription('Low Free Disk Space. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Free Space = {5}')
vlAutoDeleteNofreeSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6114)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapFreeSpacePercentage"))
if mibBuilder.loadTexts: vlAutoDeleteNofreeSpace.setDescription('No Free Disk Space. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Free Space = {5}')
vlAutoDeleteLowKeptSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6115)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapKeptSpacePercentage"))
if mibBuilder.loadTexts: vlAutoDeleteLowKeptSpace.setDescription('Low Kept Disk Space. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Kept Space = {5}')
vlAutoDeleteNoKeptSpace = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6116)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlAutoDeleteNoKeptSpace.setDescription('No Kept Disk Space. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleNotInitialized = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6117)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleNotInitialized.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleAlreadyInitialized = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6118)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleAlreadyInitialized.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleDeviceNotSupported = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6119)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleDeviceNotSupported.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleInitFailed_function = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6120)).setLabel("vlDongleInitFailed-function").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleInitFailed_function.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleConnectFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6121)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleConnectFailed.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleInitFailed_network = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6122)).setLabel("vlDongleInitFailed-network").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleInitFailed_network.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleNoDevice = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6123)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleNoDevice.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleInitFailed_parameter = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6124)).setLabel("vlDongleInitFailed-parameter").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleInitFailed_parameter.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleInitFailed_HLApi = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6125)).setLabel("vlDongleInitFailed-HLApi").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleInitFailed_HLApi.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleInitFailed_memory = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6126)).setLabel("vlDongleInitFailed-memory").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleInitFailed_memory.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDongleInitFailed_HLVDD = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6127)).setLabel("vlDongleInitFailed-HLVDD").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlDongleInitFailed_HLVDD.setDescription('Dongle Problem. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlCheckSumInvalid = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6128)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlCheckSumInvalid.setDescription('Invalid Checksum. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlChannelsLineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6129)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapChannelNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapBoardType"), ("Nice-MIB-II", "trapBoardOrLogicalTrunk"), ("Nice-MIB-II", "trapChannelOrTimeslot"), ("Nice-MIB-II", "trapMateLogicalTrunk"), ("Nice-MIB-II", "trapMateTimeslot"))
if mibBuilder.loadTexts: vlChannelsLineError.setDescription('Line Error On Channels. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Channel Number = {5}, Line Error Type = {6}, Board Type = {7}, Board Or Logical Trunk = {8}, Channel Or Timeslot = {9}, Mate Logical Trunk = {10}, Mate Timeslot = {11}')
vlChannelsSomeNotRecording = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6130)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapNumOfChannels"))
if mibBuilder.loadTexts: vlChannelsSomeNotRecording.setDescription('Some Input channels are not recording. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Num Of Channels = {5}')
vlChannelsLowStatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6131)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapNumOfChannels"))
if mibBuilder.loadTexts: vlChannelsLowStatAlarm.setDescription('Low statistics alarm on some input channels. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Num Of Channels = {5}')
vlChannelsHighStatAlarm = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 3) + (0,6132)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapNumOfChannels"))
if mibBuilder.loadTexts: vlChannelsHighStatAlarm.setDescription('High statistics alarm on some input channels. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Num Of Channels = {5}')
vlAdifDspIllegalCommand = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6300)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspIllegalCommand.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspNoSynch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6301)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspNoSynch.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspSSIRXError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6302)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspSSIRXError.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspCodecError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6303)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspCodecError.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspIllegalParameter = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6304)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspIllegalParameter.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspMPMLQError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6305)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspMPMLQError.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspStackOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6306)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspStackOverflow.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifDspIllegalInstruction = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6307)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifDspIllegalInstruction.setDescription('Dsp Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifNoInterrupts = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6308)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifNoInterrupts.setDescription('Internal Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifInternalBoardError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6309)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifInternalBoardError.setDescription('Internal Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifNoSignal = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6310)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifNoSignal.setDescription('Line Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifAlarmIndicationSignal = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6311)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifAlarmIndicationSignal.setDescription('Line Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifLossOfSynch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6312)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifLossOfSynch.setDescription('Line Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifRemoteAlarmIndication = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6313)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifRemoteAlarmIndication.setDescription('Line Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdifFramingError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6314)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdifFramingError.setDescription('Line Problem In Recording Board [ADIF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlApaInternalSelfTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6315)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlApaInternalSelfTestFailed.setDescription('Line Problem In Algorithms Board [APA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlApaCommBoardDspError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6316)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlApaCommBoardDspError.setDescription('Dsp Problem In Algorithms Board [APA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlApaIOError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6317)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlApaIOError.setDescription('Line Problem In Algorithms Board [APA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlApaDspFirmwareLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6318)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlApaDspFirmwareLoadFailed.setDescription('Dsp Problem In Algorithms Board [APA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}')
vlApaDspRuntimeError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6319)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlApaDspRuntimeError.setDescription('Dsp Problem In Algorithms Board [APA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}')
vlIsdnDspCommFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6320)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlIsdnDspCommFailed.setDescription('Dsp Problem In interface Board [ISDN]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}')
vlIsdnIniterror = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6321)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsdnIniterror.setDescription('Internal Problem In Interface Board [ISDN]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsdnBSError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6322)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsdnBSError.setDescription('Internal Problem In Interface Board [ISDN]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsdnLogicConnectError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6323)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsdnLogicConnectError.setDescription('Internal Problem In Interface Board [ISDN]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsdnBoardSelfTestFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6324)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsdnBoardSelfTestFailed.setDescription('Internal Problem In Interface Board [ISDN]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsdnLineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6325)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsdnLineError.setDescription('Line Problem In Interface Board [ISDN]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlEtaiInitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6326)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlEtaiInitBoardFailed.setDescription('Internal Problem In Interface Board [ETAI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlEtaiLineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6327)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineProblem"))
if mibBuilder.loadTexts: vlEtaiLineError.setDescription('Line Problem In Interface Board [ETAI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Line Number = {6}, Line Problem = {7}')
vlEtaiMatrixSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6328)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlEtaiMatrixSwitchError.setDescription('Internal Problem In Interface Board [ETAI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlEtaiDspError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6329)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlEtaiDspError.setDescription('Dsp Problem In interface Board [ETAI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNtcmLoopError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6330)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNtcmLoopError.setDescription('Internal Problem In Interface Board [NTCM]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNtcmInitError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6331)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNtcmInitError.setDescription('Internal Problem In Interface Board [NTCM]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNtcmMatrixSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6332)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNtcmMatrixSwitchError.setDescription('Internal Problem In Interface Board [NTCM]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlTdaMatrizSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6333)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlTdaMatrizSwitchError.setDescription('Internal Problem In Algorithms Board [TDA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlTdaDspError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6334)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlTdaDspError.setDescription('Dsp Problem In Algorithms Board [TDA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlTdaGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6335)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlTdaGeneralError.setDescription('Internal Problem In Algorithms Board [TDA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNatiChannelError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6336)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNatiChannelError.setDescription('line Problem In Interface Board [NATI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNatiInitBoardError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6337)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNatiInitBoardError.setDescription('Internal Problem In Interface Board [NATI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNatiMatrixSwitchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6338)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNatiMatrixSwitchError.setDescription('Internal Problem In Interface Board [NATI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNatiDspA3mError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6339)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNatiDspA3mError.setDescription('Dsp Problem In Interface Board [NATI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacSelectedClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6340)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsacSelectedClockError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacRightClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6341)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsacRightClockError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacLeftClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6342)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsacLeftClockError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacRightFameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6343)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsacRightFameSynchError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacLeftFrameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6344)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsacLeftFrameSynchError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacBoardError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6345)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsacBoardError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsacTestToneError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6346)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDataLineNumber"))
if mibBuilder.loadTexts: vlIsacTestToneError.setDescription('Line Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Data Line Number = {6}')
vlIsacCriticalSystemError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6347)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: vlIsacCriticalSystemError.setDescription('Internal Problem In Interface Board [ISAC]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}')
vlDliBoardCommError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6348)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlDliBoardCommError.setDescription('Internal Problem In Interface Board [DLI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlDliChannelError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6349)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlDliChannelError.setDescription('Line Problem In Interface Board [DLI]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafDspCommError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6350)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafDspCommError.setDescription('Dsp Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafFirmwareLoadError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6351)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafFirmwareLoadError.setDescription('Dsp Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafinitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6352)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafinitFailed.setDescription('Internal Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6353)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafConfigError.setDescription('Internal Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafInvalidTime = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6354)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafInvalidTime.setDescription('Internal Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafLostSynch = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6355)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafLostSynch.setDescription('Internal Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafPowerProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6356)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafPowerProblem.setDescription('Internal Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLafMirrorFault = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6357)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLafMirrorFault.setDescription('Internal Problem In Playback Board [LAF]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdif3InitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6358)).setLabel("vlAdif3InitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlAdif3InitFailed_Dsp.setDescription('Dsp Problem In Recording Board [ADIF3]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}')
vlAdif3InitFailed_timing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6359)).setLabel("vlAdif3InitFailed-timing").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdif3InitFailed_timing.setDescription('Internal Problem In Recording Board [ADIF3]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdif3InitFailed_ADPCM = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6360)).setLabel("vlAdif3InitFailed-ADPCM").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdif3InitFailed_ADPCM.setDescription('Internal Problem In Recording Board [ADIF3]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdif3InitFailed_HW = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6361)).setLabel("vlAdif3InitFailed-HW").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdif3InitFailed_HW.setDescription('Internal Problem In Recording Board [ADIF3]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAdif3ExternalClockSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6362)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAdif3ExternalClockSynchError.setDescription('Internal Problem In Recording Board [ADIF3]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlUdaInitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6363)).setLabel("vlUdaInitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"), ("Nice-MIB-II", "trapDaughterBoardNumber"))
if mibBuilder.loadTexts: vlUdaInitFailed_Dsp.setDescription('Dsp Problem In Algorithms Board [UDA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}, Daughter Board Number = {7}')
vlUdaMatrixInitFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6364)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlUdaMatrixInitFailed.setDescription('Internal Problem In Algorithms Board [UDA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlUdaInitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6365)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlUdaInitBoardFailed.setDescription('Internal Problem In Algorithms Board [UDA]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlEtai2InitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6366)).setLabel("vlEtai2InitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlEtai2InitFailed_Dsp.setDescription('Dsp Problem In Interface Board [ETAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}')
vlEtai2MatrixInitError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6367)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlEtai2MatrixInitError.setDescription('Internal Problem In Interface Board [ETAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlEtai2InitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6368)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlEtai2InitBoardFailed.setDescription('Internal Problem In Interface Board [ETAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlEtai2LineProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6369)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
if mibBuilder.loadTexts: vlEtai2LineProblem.setDescription('Line Problem In Interface Board [ETAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Line Number = {6}, Error Type = {7}, Logical Stream Number = {8}')
vlBtai2InitFailed_Dsp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6370)).setLabel("vlBtai2InitFailed-Dsp").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlBtai2InitFailed_Dsp.setDescription('Dsp Problem In Interface Board [BTAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, DSP Number = {6}')
vlBtai2MatrixInitError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6371)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlBtai2MatrixInitError.setDescription('Internal Problem In Algorithms Board [BTAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlBtai2InitBoardFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6372)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlBtai2InitBoardFailed.setDescription('Internal Problem In Algorithms Board [BTAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlBtai2FpgaError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6373)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlBtai2FpgaError.setDescription('Internal Problem In Algorithms Board [BTAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlBtai2LineError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6374)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
if mibBuilder.loadTexts: vlBtai2LineError.setDescription('Line Problem In Interface Board [BTAI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Line Number = {6}, Error Type = {7}, Logical Stream Number = {8}')
vlIsac2RightClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6375)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsac2RightClockError.setDescription('Internal Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsac2LeftClockError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6376)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsac2LeftClockError.setDescription('Internal Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsac2RightFrameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6377)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsac2RightFrameSynchError.setDescription('Internal Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsac2LeftFrameSynchError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6378)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsac2LeftFrameSynchError.setDescription('Internal Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsac2BoardProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6379)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsac2BoardProblem.setDescription('Internal Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlIsac2TestToneProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6380)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDataLineNumber"))
if mibBuilder.loadTexts: vlIsac2TestToneProblem.setDescription('Line Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Data Line Number = {6}')
vlIsac2SystemCriticalError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6381)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlIsac2SystemCriticalError.setDescription('Internal Problem In Interface Board [ISAC2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLmopRedunPowerProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6382)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLmopRedunPowerProblem.setDescription('Internal Problem In Playback Board [LMOP ]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLmopRedunDiskMirrorProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6383)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLmopRedunDiskMirrorProblem.setDescription('Internal Problem In Playback Board [LMOP]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlLmopGeneralHWProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6384)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlLmopGeneralHWProblem.setDescription('Internal Problem In Playback Board [LMOP]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNati2A3mDspInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6385)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapDspNumber"))
if mibBuilder.loadTexts: vlNati2A3mDspInitProblem.setDescription('Dsp Problem In Interface Board [NATI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Dsp Number = {6}')
vlNati2McvpDspProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6386)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNati2McvpDspProblem.setDescription('Dsp Problem In Interface Board [NATI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNati2MatrixInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6387)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNati2MatrixInitProblem.setDescription('Internal Problem In Interface Board [NATI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNati2InitBoardProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6388)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNati2InitBoardProblem.setDescription('Internal Problem In Interface Board [NATI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNati2FpgaProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6389)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlNati2FpgaProblem.setDescription('Internal Problem In Interface Board [NATI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlNati2LineProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6390)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
if mibBuilder.loadTexts: vlNati2LineProblem.setDescription('Line Problem In Interface Board [NATI2]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Line Number = {6}, Error Type = {7}, Logical Stream Number = {8}')
vlAli4DspInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6391)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAli4DspInitProblem.setDescription('Dsp Problem In Interface Board [ALI4]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAli4MatrixInitProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6392)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAli4MatrixInitProblem.setDescription('Internal Problem In Interface Board [ALI4]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAli4CpldProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6393)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAli4CpldProblem.setDescription('Internal Problem In Interface Board [ALI4]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAli4InitBoardProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6394)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAli4InitBoardProblem.setDescription('Internal Problem In Interface Board [ALI4]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlAli4LineProblem = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6395)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"), ("Nice-MIB-II", "trapLineNumber"), ("Nice-MIB-II", "trapLineErrorType"), ("Nice-MIB-II", "trapLogicalStreamNumber"))
if mibBuilder.loadTexts: vlAli4LineProblem.setDescription('Line Problem In Interface Board [ALI4]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}, Line Number = {6}, Error Type = {7}, Logical Stream Number = {8}')
vlAli4ExtSqlshDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 4) + (0,6396)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapBoardNumber"))
if mibBuilder.loadTexts: vlAli4ExtSqlshDisconnected.setDescription('External Squelch Disconnected In Interface Board [ALI4]. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Board Number = {5}')
vlBsvrNoMediaRetrieval = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6700)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrNoMediaRetrieval.setDescription('No media inserted in deck for retrieval. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrNoMediaManualArchive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6701)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrNoMediaManualArchive.setDescription('No media inserted in deck for manual archiving. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrAutoArchiveSuspend = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6702)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrAutoArchiveSuspend.setDescription('No media inserted in deck. Automatic archiving suspended. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrRetrievalFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6703)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
if mibBuilder.loadTexts: vlBsvrRetrievalFailed.setDescription('Retrieval failed. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrOverwMediaFailedrite = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6704)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
if mibBuilder.loadTexts: vlBsvrOverwMediaFailedrite.setDescription('Failed to overwrite media. Media retention period has not expired yet. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlDeviceNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6705)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
if mibBuilder.loadTexts: vlDeviceNotResponding.setDescription('Media device error. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrNoMediaRecognized = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6706)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"))
if mibBuilder.loadTexts: vlBsvrNoMediaRecognized.setDescription('Device does not recognize any media. Operation cancelled. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrMediaError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6707)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
if mibBuilder.loadTexts: vlBsvrMediaError.setDescription('The device encountered an error on this media. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrMediaWriteProtected = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6708)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrMediaWriteProtected.setDescription('Media is write-protected. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrCannotAppend = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6709)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
if mibBuilder.loadTexts: vlBsvrCannotAppend.setDescription('Data cannot be appended to this media. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrNoMediaDataFound = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6710)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrNoMediaDataFound.setDescription('No data found on media. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrDeviceOperationFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6711)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
if mibBuilder.loadTexts: vlBsvrDeviceOperationFailed.setDescription('Media device operation failed. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrRecoveryFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6712)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrRecoveryFailed.setDescription('Recovery process failed. Media is unreadable. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrArchivingFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6713)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "backupErrorBSRVErrorCode"))
if mibBuilder.loadTexts: vlBsvrArchivingFailed.setDescription('Archiving Failed. Failed to copy data from disk to media. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}, Backup Error Code = {6}')
vlBsvrOverwriteUsageExceeded = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6714)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrOverwriteUsageExceeded.setDescription('Cannot overwrite media - overwrite usage is exceeded. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrMediaAccessDenied = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6715)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
if mibBuilder.loadTexts: vlBsvrMediaAccessDenied.setDescription('Cannot read media - access authorization is denied. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrDeviceShouldBeCleaned = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6716)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
if mibBuilder.loadTexts: vlBsvrDeviceShouldBeCleaned.setDescription('Media device should be cleaned. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrConnectRTSFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6717)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
if mibBuilder.loadTexts: vlBsvrConnectRTSFailed.setDescription('Failed to connect to RTS. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrAppendFailed_version = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6718)).setLabel("vlBsvrAppendFailed-version").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsvrAppendFailed_version.setDescription('Data cannot be appended to this media. Media version not compatible with Logger version. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrAutoArchiveSuspended_Retrieval = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6719)).setLabel("vlBsvrAutoArchiveSuspended-Retrieval").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
if mibBuilder.loadTexts: vlBsvrAutoArchiveSuspended_Retrieval.setDescription('Automatic archiving suspended for retrieval operation. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrAutoArchiveSuspended_Manual = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6720)).setLabel("vlBsvrAutoArchiveSuspended-Manual").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
if mibBuilder.loadTexts: vlBsvrAutoArchiveSuspended_Manual.setDescription('Automatic archiving suspended for manual archiving. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsvrAutoArchiveSuspended_Erase = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6721)).setLabel("vlBsvrAutoArchiveSuspended-Erase").setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"))
if mibBuilder.loadTexts: vlBsvrAutoArchiveSuspended_Erase.setDescription('Automatic archiving suspended for erase operation. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsrvDvdArchiveCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6722)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"))
if mibBuilder.loadTexts: vlBsrvDvdArchiveCompleted.setDescription('Archiving on DVD media completed. Open the logger backup device door and replace the media to continue archiving. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
vlBsrvBackupServerError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 3, 2, 5) + (0,6723)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "trapVLModuleName"), ("Nice-MIB-II", "trapVLModuleStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "backupInstanceNumber"), ("Nice-MIB-II", "trapBackupConfig"), ("Nice-MIB-II", "trapBackupDeviceState"))
if mibBuilder.loadTexts: vlBsrvBackupServerError.setDescription('Backup server error. Trap Severity = {1}, VL Module Name = {2}, VL Module Status = {3}, Trap Host Time = {4}, Backup Instance Number = {5}')
dbCallsBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7001)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbCallsBackupFinished.setDescription('NICE Database calls Backup finished successfully. Trap Severity = {1}')
dbCallsBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7002)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbCallsBackupFailed.setDescription('NICE Database Calls backup has failed. Trap Severity = {1}')
dbAdminBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7003)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAdminBackupFinished.setDescription('NICE Database admin Backup finished successfully. Trap Severity = {1}')
dbAdminBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7004)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAdminBackupFailed.setDescription('NICE Database admin backup has failed. Trap Severity = {1}')
dbAuditBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7005)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAuditBackupFinished.setDescription('NICE Database audit Backup finished successfully. Trap Severity = {1}')
dbAuditBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7006)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAuditBackupFailed.setDescription('NICE Database audit backup has failed. Trap Severity = {1}')
dbReindexJobFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7007)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbReindexJobFinished.setDescription('NICE Database Reindex job finished successfully. Trap Severity = {1}')
dbReindexJobFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7008)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbReindexJobFailed.setDescription('NICE Database Reindex job has failed. Trap Severity = {1}')
dbAuditAutoDeletionFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7009)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAuditAutoDeletionFinished.setDescription('NICE Database AuditAutoDeletion job finished successfully. Trap Severity = {1}')
dbAuditAutoDeletionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7010)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAuditAutoDeletionFailed.setDescription('NICE Database AuditAutoDeletion job has failed. Trap Severity = {1}')
dbCallsDbSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7011)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbCallsDbSpaceIsLow.setDescription('NICE Database Calls database free space is low. Trap Severity = {1}')
dbCallsDbFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7012)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbCallsDbFull.setDescription('NICE Database Calls database is full. Trap Severity = {1}')
dbAuditDbSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7013)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAuditDbSpaceIsLow.setDescription('NICE Database Audit database free space is low. Trap Severity = {1}')
dbAuditDbFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7014)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAuditDbFull.setDescription('NICE Database Audit database is full. Trap Severity = {1}')
dbAdminDbSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7015)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAdminDbSpaceIsLow.setDescription('NICE Database Administrative database free space is low. Trap Severity = {1}')
dbAdminDbFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7016)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbAdminDbFull.setDescription('NICE Database Administrative database is full. Trap Severity = {1}')
dbInserterMissingCalls = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7017)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbInserterMissingCalls.setDescription('NICE Database Inserter has inserted missing calls into the calls database. Trap Severity = {1}')
dbReplicationFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7018)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbReplicationFailed.setDescription('NICE Database Replication has failed. Trap Severity = {1}')
dbRuleBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7019)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbRuleBackupFinished.setDescription('NICE Database Rule backup has finished succesfully. Trap Severity = {1}')
dbRuleBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7020)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbRuleBackupFailed.setDescription('NICE Database Rule backup failed. Trap Severity = {1}')
dbMsdbBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7021)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbMsdbBackupFinished.setDescription('Database Msdb backup has finished succesfully. Trap Severity = {1}')
dbMsdbBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7022)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbMsdbBackupFailed.setDescription('Database Msdb backup has failed. Trap Severity = {1}')
dbMasterBackupFinished = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7023)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbMasterBackupFinished.setDescription('Database Master backup has finished succesfully. Trap Severity = {1}')
dbMasterBackupFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7024)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbMasterBackupFailed.setDescription('Database Master backup has failed. Trap Severity = {1}')
dbRuleDBFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7025)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbRuleDBFull.setDescription('NICE Database Rule database is full. Trap Severity = {1}')
dbRuleDBSpaceIsLow = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2) + (0,7026)).setObjects(("Nice-MIB-II", "trapSeverity"))
if mibBuilder.loadTexts: dbRuleDBSpaceIsLow.setDescription('NICE Database Rule database free space is low. Trap Severity = {1}')
ctiDBServerIsUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiDBServerIsUp.setDescription('CTI DB Server Is Up. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiDBServerIsDown = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiDBServerIsDown.setDescription('CTI DB Server Is Down. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiDBServerIsNotInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiDBServerIsNotInitializedProperly.setDescription('CTI DB Server Is Not Initialized Properly. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiDBServerIsInitializedProperly = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiDBServerIsInitializedProperly.setDescription('CTI DB Server Is Initialized Properly. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiDBSpaceIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: ctiDBSpaceIsFull.setDescription('CTI DB Space Is Full. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}, DB Error Code = {5}')
ctiDBSpaceIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiDBSpaceIsOK.setDescription('CTI DB Space Is OK. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiDBLogSpaceIsFull = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: ctiDBLogSpaceIsFull.setDescription('CTI DB Log Space Is Full. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}, DB Error Code = {5}')
ctiDBLogSpaceIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiDBLogSpaceIsOK.setDescription('CTI DB Log Space Is OK. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiConnectionToDBIsOK = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiConnectionToDBIsOK.setDescription('Connection to the CTI DB Is OK. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
ctiFailedConnectToDB = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: ctiFailedConnectToDB.setDescription('Failed to connect to the CTI DB. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}, DB Error Code = {5}')
ctiMissingLookUpTable = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapSQLTableName"))
if mibBuilder.loadTexts: ctiMissingLookUpTable.setDescription('CTI DB Is Missing A LookUp Table. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}, SQL Table Name = {5}')
ctiFailedToInsertCTIEvent = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: ctiFailedToInsertCTIEvent.setDescription('Failed To Insert CTI Event Into CTI DB. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}, DB Error Code = {5}')
ctiDBRetentionFailure = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "trapDBErrorCode"))
if mibBuilder.loadTexts: ctiDBRetentionFailure.setDescription('Failed To Perform Retention On The CTI DB. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}, DB Error Code = {5}')
ctiInvalidMessageReceived = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 8) + (0,8014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "ctiDBServerName"), ("Nice-MIB-II", "ctiDBServerStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: ctiInvalidMessageReceived.setDescription('Invalid CTI Event Received. Trap Severity = {1}, CTI DB Server Name = {2}, CTI DB Server Status = {3}, Trap Host Time = {4}')
systemTools = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 7))
recordingsDiagnostic = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1))
rdName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdName.setStatus('mandatory')
if mibBuilder.loadTexts: rdName.setDescription('The application name.')
rdStatus = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rdStatus.setDescription('The application status.')
rdVersion = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdVersion.setStatus('mandatory')
if mibBuilder.loadTexts: rdVersion.setDescription('The application version.')
rdServerName = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdServerName.setStatus('mandatory')
if mibBuilder.loadTexts: rdServerName.setDescription('The name of the server running the application.')
rdServerAddress = MibScalar((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdServerAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rdServerAddress.setDescription('The address of the server running the application.')
rdCLSConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6), )
if mibBuilder.loadTexts: rdCLSConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSConnectionTable.setDescription('A list of all CLS Connection exist in the application.')
rdCLSConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1), ).setIndexNames((0, "Nice-MIB-II", "rdCLSConnectionTableIndex"))
if mibBuilder.loadTexts: rdCLSConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSConnectionEntry.setDescription('A CLS Connection entry.')
rdCLSID = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSID.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSID.setDescription('The CLS ID.')
rdCLSIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSIpAddress.setDescription('The CLS Ip address.')
rdCLSConnectionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSConnectionTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSConnectionTableIndex.setDescription('The table index.')
rdLoggerConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7), )
if mibBuilder.loadTexts: rdLoggerConnectionTable.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerConnectionTable.setDescription('A list of all logger Connections exist in the application.')
rdLoggerConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1), ).setIndexNames((0, "Nice-MIB-II", "rdLoggerConnectionTableIndex"))
if mibBuilder.loadTexts: rdLoggerConnectionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerConnectionEntry.setDescription('A logger Connection entry.')
rdLoggerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerID.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerID.setDescription('The logger ID.')
rdLoggerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerIpAddress.setDescription('The logger Ip address.')
rdLoggerSpareloggerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerSpareloggerID.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerSpareloggerID.setDescription('The Spare logger ID.')
rdLoggerConnectionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerConnectionTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerConnectionTableIndex.setDescription('The table index.')
rdTasksTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8), )
if mibBuilder.loadTexts: rdTasksTable.setStatus('mandatory')
if mibBuilder.loadTexts: rdTasksTable.setDescription('A list of recordings diagnostics tasks.')
rdTasksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1), ).setIndexNames((0, "Nice-MIB-II", "rdTasksTableIndex"))
if mibBuilder.loadTexts: rdTasksEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rdTasksEntry.setDescription('A recordings diagnostics task entry.')
rdTaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 1), RdTaskType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskType.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskType.setDescription('The Type of the task executed.')
rdTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskName.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskName.setDescription('The name of the task.')
rdTaskDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskDescription.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskDescription.setDescription('A short description of the task.')
rdTaskCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 4), HostLocalTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskCreationTime.setDescription('The time when the task was created.')
rdTaskStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 5), HostLocalTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskStartTime.setDescription('The time when the task started.')
rdTaskQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskQuery.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskQuery.setDescription('The SQL query used by the task .')
rdTaskExecElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskExecElements.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskExecElements.setDescription('The number of processed elements.')
rdTaskExecFailElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskExecFailElements.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskExecFailElements.setDescription('The number of processed elements that failed.')
rdTaskCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 9), TaskState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskCurrentState.setDescription('The current task State.')
rdTaskLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTaskLastError.setStatus('mandatory')
if mibBuilder.loadTexts: rdTaskLastError.setDescription('The last error occured while executing the task.')
rdTasksTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 8, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdTasksTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdTasksTableIndex.setDescription('The table index.')
rdCLSPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9), )
if mibBuilder.loadTexts: rdCLSPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSPendingErrorsTable.setDescription('A list of CLS pending errors for the recordings diagnostics.')
rdCLSPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1), ).setIndexNames((0, "Nice-MIB-II", "rdCLSPendingErrorsTableIndex"))
if mibBuilder.loadTexts: rdCLSPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSPendingErrorsEntry.setDescription('A Recording Diagnostics CLS pending error entry.')
rdCLSErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 1), RdErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSErrorType.setDescription('The error type.')
rdCLSErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSErrorReflectedStatus.setDescription("The error's severity type.")
rdCLSExtendedErrorinformation = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSExtendedErrorinformation.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSExtendedErrorinformation.setDescription("The error's extanded information .")
rdCLSErrorCLSTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSErrorCLSTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSErrorCLSTableIndex.setDescription('The index of the Errornours CLS in the CLS connection table.')
rdCLSPendingErrorsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdCLSPendingErrorsTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdCLSPendingErrorsTableIndex.setDescription('The first table index.')
rdLoggerPendingErrorsTable = MibTable((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10), )
if mibBuilder.loadTexts: rdLoggerPendingErrorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerPendingErrorsTable.setDescription('A list of Logger pending errors for the recordings diagnostics.')
rdLoggerPendingErrorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1), ).setIndexNames((0, "Nice-MIB-II", "rdLoggerPendingErrorsTableIndex"))
if mibBuilder.loadTexts: rdLoggerPendingErrorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerPendingErrorsEntry.setDescription('A Recording Diagnostics Logger pending error entry.')
rdLoggerErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 1), RdErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerErrorType.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerErrorType.setDescription('The error type.')
rdLoggerErrorReflectedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 2), SeverityType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerErrorReflectedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerErrorReflectedStatus.setDescription("The error's severity type.")
rdLoggerExtendedErrorinformation = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerExtendedErrorinformation.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerExtendedErrorinformation.setDescription("The error's extanded information .")
rdLoggerErrorLoggerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerErrorLoggerTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerErrorLoggerTableIndex.setDescription('The index of the Errornours Logger in the Logger connection table.')
rdLoggerPendingErrorsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rdLoggerPendingErrorsTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rdLoggerPendingErrorsTableIndex.setDescription('The first table index.')
rdExceptionWhileProcessing = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8000)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: rdExceptionWhileProcessing.setDescription('Recordings Diagnostics encountered an exception while processing. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
rdApplicationFailedToInitialize = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8001)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: rdApplicationFailedToInitialize.setDescription('Recordings Diagnostics failed to initialize. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
rdApplicationStartUp = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8002)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: rdApplicationStartUp.setDescription('Recordings Diagnostics startup. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
rdKeepAliveHeartBeatFail = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8003)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"))
if mibBuilder.loadTexts: rdKeepAliveHeartBeatFail.setDescription('Recordings Diagnostics keep alive heartbeat failed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}')
rdConnectionToCLSIsActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8004)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
if mibBuilder.loadTexts: rdConnectionToCLSIsActive.setDescription('Recordings Diagnostics connection to CLS is active. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, CLS server id = {5}, CLS server IP address = {6}')
rdConnectionToCLSIsNotActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8005)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
if mibBuilder.loadTexts: rdConnectionToCLSIsNotActive.setDescription('Recordings Diagnostics connection to CLS is not active. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, CLS server id = {5}, CLS server IP address = {6}')
rdConnectionToCLSLost = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8006)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
if mibBuilder.loadTexts: rdConnectionToCLSLost.setDescription('Recordings Diagnostics connection to CLS is lost. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, CLS server id = {5}, CLS server IP address = {6}')
rdConnectionToLoggerIsActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8007)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdLoggerID"), ("Nice-MIB-II", "rdLoggerIpAddress"))
if mibBuilder.loadTexts: rdConnectionToLoggerIsActive.setDescription('Recordings Diagnostics connection to logger is active. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Logger id = {5}, Logger IP address = {6}')
rdConnectionToLoggerIsNotActive = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8008)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdLoggerID"), ("Nice-MIB-II", "rdLoggerIpAddress"))
if mibBuilder.loadTexts: rdConnectionToLoggerIsNotActive.setDescription('Recordings Diagnostics connection to logger is not active. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Logger id = {5}, Logger IP address = {6}')
rdConnectionToLoggerLost = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8009)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdLoggerID"), ("Nice-MIB-II", "rdLoggerIpAddress"))
if mibBuilder.loadTexts: rdConnectionToLoggerLost.setDescription('Recordings Diagnostics connection to logger is lost. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Logger id = {5}, Logger IP address = {6}')
rdTaskStarted = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8010)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "rdTaskType"))
if mibBuilder.loadTexts: rdTaskStarted.setDescription('Recordings Diagnostics Task started. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Task Name = {5}, Task Type = {6}')
rdTaskCompleted = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8011)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "rdTaskType"), ("Nice-MIB-II", "rdTaskCurrentState"), ("Nice-MIB-II", "rdTaskExecElements"), ("Nice-MIB-II", "rdTaskExecFailElements"), ("Nice-MIB-II", "rdTaskLastError"))
if mibBuilder.loadTexts: rdTaskCompleted.setDescription('Recordings Diagnostics Task completed. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Task Name = {5}, Task Type = {6}, Task Current State = {7}, Executed elements = {8}, Failed Elements = {9}, Last Error = {10}')
rdMatchingSessionFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8012)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "trapCLSId"), ("Nice-MIB-II", "trapLoggerId"), ("Nice-MIB-II", "trapRecordingChannel"), ("Nice-MIB-II", "trapRecordingStartTime"), ("Nice-MIB-II", "trapRecordingStopTime"))
if mibBuilder.loadTexts: rdMatchingSessionFailed.setDescription('Recordings Diagnostics failed to locate a matching session for the time period. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Task Name = {5}, CLS Server id = {6}, Logger id = {7}, Recording Channel = {8}, Recording Start Time = {9}, Recording Stop Time = {10}')
rdMatchingPerdiodFailed = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8013)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdTaskName"), ("Nice-MIB-II", "trapCLSId"), ("Nice-MIB-II", "trapLoggerId"), ("Nice-MIB-II", "trapRecordingChannel"), ("Nice-MIB-II", "trapRecordingStartTime"), ("Nice-MIB-II", "trapRecordingStopTime"))
if mibBuilder.loadTexts: rdMatchingPerdiodFailed.setDescription('Recordings Diagnostics failed to locate sessions for the entire time period. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, Task Name = {5}, CLS Server id = {6}, Logger id = {7}, Recording Channel = {8}, Recording Start Time = {9}, Recording Stop Time = {10}')
rdCLSGeneralError = NotificationType((1, 3, 6, 1, 4, 1, 3167, 1, 7, 1) + (0,8014)).setObjects(("Nice-MIB-II", "trapSeverity"), ("Nice-MIB-II", "rdName"), ("Nice-MIB-II", "rdStatus"), ("Nice-MIB-II", "trapHostTime"), ("Nice-MIB-II", "rdCLSID"), ("Nice-MIB-II", "rdCLSIpAddress"))
if mibBuilder.loadTexts: rdCLSGeneralError.setDescription('Recordings Diagnostics connection to CLS is lost. Trap Severity = {1}, Application Name = {2}, Application Status = {3}, Trap Host Time = {4}, CLS server id = {5}, CLS server IP address = {6}')
databaseUtilities = MibIdentifier((1, 3, 6, 1, 4, 1, 3167, 1, 7, 2))
mibBuilder.exportSymbols("Nice-MIB-II", clsRecordingOnDemandIsEnabled=clsRecordingOnDemandIsEnabled, backupInstanceEntry=backupInstanceEntry, ctiDBServerPendingErrorsEntry=ctiDBServerPendingErrorsEntry, clsNoClockDifferencesWithLogger=clsNoClockDifferencesWithLogger, mmlAgentConfig=mmlAgentConfig, schedulerServerErrorIndex=schedulerServerErrorIndex, callServerErrorType=callServerErrorType, trapRecordingChannel=trapRecordingChannel, mmlDataSystemName=mmlDataSystemName, RdErrorType=RdErrorType, vlAutoDeleteNofreeSpace=vlAutoDeleteNofreeSpace, mmlUnableToReplyDueToConnectionLoss=mmlUnableToReplyDueToConnectionLoss, clsALLCLSModulesInitOK=clsALLCLSModulesInitOK, vlBsvrRetrievalFailed=vlBsvrRetrievalFailed, trapBoardNumber=trapBoardNumber, logger=logger, clsNoAvailableResources=clsNoAvailableResources, trapFileName=trapFileName, driverConfigurationFileIsMissing=driverConfigurationFileIsMissing, captureInstanceEntry=captureInstanceEntry, vlIsacSelectedClockError=vlIsacSelectedClockError, appsInteractionDBConnectionIsDown=appsInteractionDBConnectionIsDown, vlIsacLeftFrameSynchError=vlIsacLeftFrameSynchError, driverModuleErrorType=driverModuleErrorType, applicationsTableIndex=applicationsTableIndex, vlLafMirrorFault=vlLafMirrorFault, dbMasterBackupFinished=dbMasterBackupFinished, driversModulePendingErrorsTable=driversModulePendingErrorsTable, dbAuditAutoDeletionFinished=dbAuditAutoDeletionFinished, vlIsdnIniterror=vlIsdnIniterror, trapBoardOrLogicalTrunk=trapBoardOrLogicalTrunk, vlBsvrOverwMediaFailedrite=vlBsvrOverwMediaFailedrite, ctiMissingLookUpTable=ctiMissingLookUpTable, mmlAbnormalRecordTermination=mmlAbnormalRecordTermination, applicationStatus=applicationStatus, mmlStorageSystemDiskUsage=mmlStorageSystemDiskUsage, rdLoggerPendingErrorsTable=rdLoggerPendingErrorsTable, mmlConnectionToLoggerNotEstablished=mmlConnectionToLoggerNotEstablished, ClsTableType=ClsTableType, dbServerName=dbServerName, driverConfigurationFileDataIsMissing=driverConfigurationFileDataIsMissing, appsRuleEngineActionExecuterActive=appsRuleEngineActionExecuterActive, vlAdif3InitFailed_HW=vlAdif3InitFailed_HW, voiceLoggerAgentVersion=voiceLoggerAgentVersion, callServerName=callServerName, ctiDBLogSpaceIsFull=ctiDBLogSpaceIsFull, trapDiskUsage=trapDiskUsage, databaseUtilities=databaseUtilities, clsDispatcherErrorType=clsDispatcherErrorType, vlAdifNoInterrupts=vlAdifNoInterrupts, ctiDBServerSnmpAgentConfig=ctiDBServerSnmpAgentConfig, driversPendingErrorsTable=driversPendingErrorsTable, rdLoggerSpareloggerID=rdLoggerSpareloggerID, mmlAutoDeletionPersistentMismatch=mmlAutoDeletionPersistentMismatch, loggingErrorType=loggingErrorType, vlBsvrAutoArchiveSuspended_Manual=vlBsvrAutoArchiveSuspended_Manual, clsCommunicationProblemWithLogger=clsCommunicationProblemWithLogger, captureInstanceStatus=captureInstanceStatus, vlAdifAlarmIndicationSignal=vlAdifAlarmIndicationSignal, dbInserterMissingCalls=dbInserterMissingCalls, driversTable=driversTable, applicationsPendingErrorsTable=applicationsPendingErrorsTable, driverModuleErrorReflectedStatus=driverModuleErrorReflectedStatus, vlBtai2MatrixInitError=vlBtai2MatrixInitError, vlDeviceNotResponding=vlDeviceNotResponding, clsLoggerIsInitializedProperly=clsLoggerIsInitializedProperly, vlLoggerNotResponding=vlLoggerNotResponding, vlNati2FpgaProblem=vlNati2FpgaProblem, mmlConnectionCanNotBeEstablished=mmlConnectionCanNotBeEstablished, vlEtaiDspError=vlEtaiDspError, vlLafConfigError=vlLafConfigError, clsDBServerIsDown=clsDBServerIsDown, ctiDBServerErrorReflectedStatus=ctiDBServerErrorReflectedStatus, YesNo=YesNo, trapRecordingStopTime=trapRecordingStopTime, dbAdminDbSpaceIsLow=dbAdminDbSpaceIsLow, vlAli4DspInitProblem=vlAli4DspInitProblem, vlIsacRightFameSynchError=vlIsacRightFameSynchError, vlNatiDspA3mError=vlNatiDspA3mError, dbMsdbBackupFinished=dbMsdbBackupFinished, driverErrorReflectedStatus=driverErrorReflectedStatus, trapRecordingStartTime=trapRecordingStartTime, trapVLModuleStatus=trapVLModuleStatus, voiceLoggerTrapsRepeatInterval=voiceLoggerTrapsRepeatInterval, vlAdif3InitFailed_ADPCM=vlAdif3InitFailed_ADPCM, driverCapiOK=driverCapiOK, vlDongleConnectFailed=vlDongleConnectFailed, vlNati2InitBoardProblem=vlNati2InitBoardProblem, drivers=drivers, vlIsdnDspCommFailed=vlIsdnDspCommFailed, mmlAbnormalPlaybackTermination=mmlAbnormalPlaybackTermination, vlIsdnBSError=vlIsdnBSError, vlDbmConsistencyFailed=vlDbmConsistencyFailed, rdLoggerExtendedErrorinformation=rdLoggerExtendedErrorinformation, mmlConnectionTimeoutExceeded=mmlConnectionTimeoutExceeded, mmlResourceAccessFailure=mmlResourceAccessFailure, vlAdifRemoteAlarmIndication=vlAdifRemoteAlarmIndication, loggingPendingErrorsTable=loggingPendingErrorsTable, dbRuleBackupFinished=dbRuleBackupFinished, clsRcmIsDown=clsRcmIsDown, backupName=backupName, vlLmopRedunPowerProblem=vlLmopRedunPowerProblem, rcmErrorType=rcmErrorType, ctiDBLogSpaceIsOK=ctiDBLogSpaceIsOK, rdTaskQuery=rdTaskQuery, clsRCMIsInitializedProperly=clsRCMIsInitializedProperly, applicationsAgentIsRepeatingTraps=applicationsAgentIsRepeatingTraps, CaptureErrorType=CaptureErrorType, vlIsdnLogicConnectError=vlIsdnLogicConnectError, rdCLSGeneralError=rdCLSGeneralError, rdTasksEntry=rdTasksEntry, RecordedMediaType=RecordedMediaType, appsNIFDBConnectionIsUp=appsNIFDBConnectionIsUp, vlDliChannelError=vlDliChannelError, vlDiskOpenPartitionFailed=vlDiskOpenPartitionFailed, clsProblemWithNPLUS1Loggers=clsProblemWithNPLUS1Loggers, captureInstanceType=captureInstanceType, vlAdifDspIllegalInstruction=vlAdifDspIllegalInstruction, driverModuleErrorIndex=driverModuleErrorIndex, trapDeviceId=trapDeviceId, vlNati2LineProblem=vlNati2LineProblem, vlBtai2LineError=vlBtai2LineError, vlIsdnLineError=vlIsdnLineError, trapDBId=trapDBId, vlBsvrConnectRTSFailed=vlBsvrConnectRTSFailed, rdConnectionToLoggerIsActive=rdConnectionToLoggerIsActive, trapMateTimeslot=trapMateTimeslot, ctiFailedConnectToDB=ctiFailedConnectToDB, dbReplicationFailed=dbReplicationFailed, vlIsdnBoardSelfTestFailed=vlIsdnBoardSelfTestFailed, rdMatchingSessionFailed=rdMatchingSessionFailed, clsRecordingOnDemandIsNotEnabled=clsRecordingOnDemandIsNotEnabled, LoggerInitializationStatus=LoggerInitializationStatus, dbMsdbBackupFailed=dbMsdbBackupFailed, trapLoggerInitializationStatus=trapLoggerInitializationStatus, clsProblematicClockDifferencesWithLogger=clsProblematicClockDifferencesWithLogger, ctiDBServerPendingErrorsTable=ctiDBServerPendingErrorsTable, mmlDataSystemPersistentMismatch=mmlDataSystemPersistentMismatch, appsCADBConnectionIsDown=appsCADBConnectionIsDown, dbMasterBackupFailed=dbMasterBackupFailed, vlChannelsHighStatAlarm=vlChannelsHighStatAlarm, mmlName=mmlName, vlIsacRightClockError=vlIsacRightClockError, vlIsacLeftClockError=vlIsacLeftClockError, applicationsErrorsTableErrorIndex=applicationsErrorsTableErrorIndex, rdLoggerIpAddress=rdLoggerIpAddress, loggingInstanceEntry=loggingInstanceEntry, vlDongleInitFailed_network=vlDongleInitFailed_network, driverErrorType=driverErrorType, voiceLoggerBackup=voiceLoggerBackup, applicationsSnmpAgentConfig=applicationsSnmpAgentConfig, driverCTIEngineError=driverCTIEngineError, appsRuleEngineRuleGeneratorSucceeded=appsRuleEngineRuleGeneratorSucceeded, vlAutoDeleteNoKeptSpace=vlAutoDeleteNoKeptSpace, CTIEventsDBServerErrorType=CTIEventsDBServerErrorType, driversAgentVersion=driversAgentVersion, appsRuleEngineEventProviderIdle=appsRuleEngineEventProviderIdle, captureName=captureName, ctiDBServerName=ctiDBServerName, appsRuleEngineEventProviderSucceeded=appsRuleEngineEventProviderSucceeded, driversModulePendingErrorsEntry=driversModulePendingErrorsEntry, loggingPendingErrorsEntry=loggingPendingErrorsEntry, clsCLSModuleRestartFailed=clsCLSModuleRestartFailed, rdCLSIpAddress=rdCLSIpAddress, driverRegistryError=driverRegistryError, trapActionExecuterId=trapActionExecuterId, vlIsacTestToneError=vlIsacTestToneError, applicationsPendingErrorsEntry=applicationsPendingErrorsEntry, appsSCConnectionIsDown=appsSCConnectionIsDown, trapBackupDeviceState=trapBackupDeviceState, vlBsvrOverwriteUsageExceeded=vlBsvrOverwriteUsageExceeded, vlIsac2LeftFrameSynchError=vlIsac2LeftFrameSynchError, BackupErrorBSRVErrorCode=BackupErrorBSRVErrorCode, backupInstanceStatus=backupInstanceStatus, RdTaskType=RdTaskType, clsDBServerIsUp=clsDBServerIsUp, clsCallServerLinkIsDown=clsCallServerLinkIsDown, dbAuditBackupFinished=dbAuditBackupFinished, dbCallsBackupFailed=dbCallsBackupFailed, vlAdifDspIllegalParameter=vlAdifDspIllegalParameter, mmlStorageSystemStatus=mmlStorageSystemStatus, driverName=driverName, applicationsServer=applicationsServer, driverCapiError=driverCapiError, vlEtaiLineError=vlEtaiLineError, appsCTIDBConnectionIsUp=appsCTIDBConnectionIsUp, dbAdminBackupFailed=dbAdminBackupFailed, ctiInvalidMessageReceived=ctiInvalidMessageReceived, vlApaInternalSelfTestFailed=vlApaInternalSelfTestFailed, callServerStatus=callServerStatus, vlBsvrDeviceOperationFailed=vlBsvrDeviceOperationFailed, vlBsvrMediaWriteProtected=vlBsvrMediaWriteProtected, backupInstanceName=backupInstanceName, ctiDBSpaceIsOK=ctiDBSpaceIsOK, rdStatus=rdStatus, applicationsNumberLoggedInUsers=applicationsNumberLoggedInUsers, driverInternalEngineError=driverInternalEngineError, schedulerServerPendingErrorsTable=schedulerServerPendingErrorsTable, dbServerPendingErrorsTable=dbServerPendingErrorsTable, schedulerServerStatus=schedulerServerStatus, trapLoggerId=trapLoggerId, mmlDiskIOFailure=mmlDiskIOFailure, ctiFailedToInsertCTIEvent=ctiFailedToInsertCTIEvent, clsAgentIsRepeatingTraps=clsAgentIsRepeatingTraps, trapBoardType=trapBoardType, vlBsvrNoMediaManualArchive=vlBsvrNoMediaManualArchive, rdLoggerConnectionTable=rdLoggerConnectionTable, trapChannelNumber=trapChannelNumber, multiMediaLogger=multiMediaLogger, schedulerServerErrorReflectedStatus=schedulerServerErrorReflectedStatus, rdName=rdName, appsNIFDBConnectionIsDown=appsNIFDBConnectionIsDown, vlAli4ExtSqlshDisconnected=vlAli4ExtSqlshDisconnected, vlAdifDspNoSynch=vlAdifDspNoSynch, SeverityType=SeverityType, dbCallsDbFull=dbCallsDbFull, dbAdminBackupFinished=dbAdminBackupFinished, rdConnectionToLoggerIsNotActive=rdConnectionToLoggerIsNotActive, mmlAllConnectionResourcesInUse=mmlAllConnectionResourcesInUse, loggingInstanceNumberInType=loggingInstanceNumberInType, driversAgentTrapsRepeatInterval=driversAgentTrapsRepeatInterval, captureInstanceNumberInType=captureInstanceNumberInType, clsDBServerIsNotInitializedProperly=clsDBServerIsNotInitializedProperly, applicationName=applicationName, mmlFailToInitializeDataSystem=mmlFailToInitializeDataSystem, trapBackupConfig=trapBackupConfig, mmlUnexpectedDisconnect=mmlUnexpectedDisconnect, mmlTableAccessFailure=mmlTableAccessFailure, vlIsac2SystemCriticalError=vlIsac2SystemCriticalError, clsFailureConnectionToDB=clsFailureConnectionToDB, ctiDBServerDBErrorCode=ctiDBServerDBErrorCode, mmlFinishedNormal=mmlFinishedNormal, trapLogicalStreamNumber=trapLogicalStreamNumber, mmlAutoDeletionInvalidConfiguration=mmlAutoDeletionInvalidConfiguration, driverIdInModulesTable=driverIdInModulesTable, trapCLSId=trapCLSId, captureStatus=captureStatus, vlNati2McvpDspProblem=vlNati2McvpDspProblem, vlBsvrAppendFailed_version=vlBsvrAppendFailed_version, mmlDataSystemStatus=mmlDataSystemStatus, loggingErrorIndex=loggingErrorIndex, cls=cls, rdVersion=rdVersion, driverRegistryWarning=driverRegistryWarning, rdLoggerErrorReflectedStatus=rdLoggerErrorReflectedStatus, vlNtcmInitError=vlNtcmInitError, capturePendingErrorsEntry=capturePendingErrorsEntry, vlAdifDspCodecError=vlAdifDspCodecError, captureErrorInstanceIndex=captureErrorInstanceIndex, clsCallServerTableIsOK=clsCallServerTableIsOK, vlNatiMatrixSwitchError=vlNatiMatrixSwitchError, vlIsac2LeftClockError=vlIsac2LeftClockError, trapLoggerInitialization=trapLoggerInitialization, appsCLSConnectionIsDown=appsCLSConnectionIsDown)
mibBuilder.exportSymbols("Nice-MIB-II", vlDongleInitFailed_HLVDD=vlDongleInitFailed_HLVDD, vlAdifFramingError=vlAdifFramingError, appsCLSConnectionIsUp=appsCLSConnectionIsUp, ctiDBServerErrorType=ctiDBServerErrorType, clsDispatcherPendingErrorsTable=clsDispatcherPendingErrorsTable, trapSQLTableName=trapSQLTableName, rdConnectionToCLSIsNotActive=rdConnectionToCLSIsNotActive, captureErrorReflectedStatus=captureErrorReflectedStatus, dbRuleDBFull=dbRuleDBFull, mmlResourceAllocationFailure=mmlResourceAllocationFailure, rdCLSConnectionTableIndex=rdCLSConnectionTableIndex, trapMateLogicalTrunk=trapMateLogicalTrunk, rdTaskCurrentState=rdTaskCurrentState, vlEtai2InitFailed_Dsp=vlEtai2InitFailed_Dsp, appsAdminDataBaseConnectionIsUp=appsAdminDataBaseConnectionIsUp, vlTdaMatrizSwitchError=vlTdaMatrizSwitchError, mmlDataSystemInvalidConfiguration=mmlDataSystemInvalidConfiguration, mmlDataBaseConsistencyMismatch=mmlDataBaseConsistencyMismatch, vlKernerHWDriverInitFailed=vlKernerHWDriverInitFailed, dbAdminDbFull=dbAdminDbFull, vlApiQueryError=vlApiQueryError, vlNtcmMatrixSwitchError=vlNtcmMatrixSwitchError, dbServerStatus=dbServerStatus, clsDbServer=clsDbServer, rdTaskLastError=rdTaskLastError, ApplicationErrorType=ApplicationErrorType, driverIsUp=driverIsUp, appsRuleEngineEventProviderActive=appsRuleEngineEventProviderActive, dbRuleDBSpaceIsLow=dbRuleDBSpaceIsLow, driverInternalEngineOK=driverInternalEngineOK, vlIsac2RightClockError=vlIsac2RightClockError, appsRuleMngrDataBaseConnectionIsDown=appsRuleMngrDataBaseConnectionIsDown, trapRuleGeneratorId=trapRuleGeneratorId, rdCLSPendingErrorsTable=rdCLSPendingErrorsTable, vlEtai2MatrixInitError=vlEtai2MatrixInitError, rdTaskCreationTime=rdTaskCreationTime, ctiDBServerIsInitializedProperly=ctiDBServerIsInitializedProperly, mmlMemoryManagerOverflow=mmlMemoryManagerOverflow, BackupErrorType=BackupErrorType, vlDongleAlreadyInitialized=vlDongleAlreadyInitialized, trapDBErrorCode=trapDBErrorCode, ctiDBServerIsUp=ctiDBServerIsUp, ctiDBServerAgentIsRepeatingTraps=ctiDBServerAgentIsRepeatingTraps, rdCLSErrorType=rdCLSErrorType, voiceLoggerCapture=voiceLoggerCapture, vlEtai2LineProblem=vlEtai2LineProblem, applicationErrorType=applicationErrorType, vlIsac2RightFrameSynchError=vlIsac2RightFrameSynchError, clsSchedulerServerIsNotInitializedProperly=clsSchedulerServerIsNotInitializedProperly, backupPendingErrorsTable=backupPendingErrorsTable, trapDspNumber=trapDspNumber, vlLafDspCommError=vlLafDspCommError, clsRCMIsNotInitializedProperly=clsRCMIsNotInitializedProperly, rdTaskType=rdTaskType, dbRuleBackupFailed=dbRuleBackupFailed, vlIsacBoardError=vlIsacBoardError, ctiDBServerAgentVersion=ctiDBServerAgentVersion, appsServerIsUp=appsServerIsUp, rdConnectionToCLSIsActive=rdConnectionToCLSIsActive, rdTaskCompleted=rdTaskCompleted, applicationErrorReflectedStatus=applicationErrorReflectedStatus, driverCTIEngineWarning=driverCTIEngineWarning, vlNPlus1ManualSwitch=vlNPlus1ManualSwitch, vlCheckSumInvalid=vlCheckSumInvalid, vlVoipDriverInitFailed=vlVoipDriverInitFailed, vlBsvrCannotAppend=vlBsvrCannotAppend, ctiDBSpaceIsFull=ctiDBSpaceIsFull, vlBsvrNoMediaRecognized=vlBsvrNoMediaRecognized, clsDBSpaceIsFull=clsDBSpaceIsFull, vlBsrvBackupServerError=vlBsrvBackupServerError, BackupDeviceState=BackupDeviceState, mmlInvalidConfiguration=mmlInvalidConfiguration, loggingInstanceStatus=loggingInstanceStatus, vlBsvrRecoveryFailed=vlBsvrRecoveryFailed, appsRuleEngineEventProviderFailed=appsRuleEngineEventProviderFailed, trapKeptSpacePercentage=trapKeptSpacePercentage, dbServerErrorReflectedStatus=dbServerErrorReflectedStatus, rdServerAddress=rdServerAddress, appsUserAdminHostConnectionIsUp=appsUserAdminHostConnectionIsUp, dbServerPendingErrorsEntry=dbServerPendingErrorsEntry, dbServerDBErrorCode=dbServerDBErrorCode, appsSystemAdminHostConnectionIsDown=appsSystemAdminHostConnectionIsDown, vlNPlus1ROBPowerFailure=vlNPlus1ROBPowerFailure, moduleIdInModulesErrors=moduleIdInModulesErrors, mmlStorageSystemPersistentMismatch=mmlStorageSystemPersistentMismatch, vlLafInvalidTime=vlLafInvalidTime, clsSchedulerServer=clsSchedulerServer, schedulerServerPendingErrorsEntry=schedulerServerPendingErrorsEntry, mmlStorageSystem=mmlStorageSystem, ctiConnectionToDBIsOK=ctiConnectionToDBIsOK, vlAdifDspStackOverflow=vlAdifDspStackOverflow, mmlAgentIsRepeatingTraps=mmlAgentIsRepeatingTraps, backupErrorInstanceIndex=backupErrorInstanceIndex, rdExceptionWhileProcessing=rdExceptionWhileProcessing, vlBtai2InitBoardFailed=vlBtai2InitBoardFailed, backupErrorIndex=backupErrorIndex, ctiDBRetentionFailure=ctiDBRetentionFailure, vlLafinitFailed=vlLafinitFailed, driverStatus=driverStatus, rdCLSID=rdCLSID, vlBsvrMediaError=vlBsvrMediaError, vlAdif3InitFailed_timing=vlAdif3InitFailed_timing, rdTaskExecFailElements=rdTaskExecFailElements, driverCTIEngineOK=driverCTIEngineOK, vlAli4InitBoardProblem=vlAli4InitBoardProblem, vlBsvrAutoArchiveSuspend=vlBsvrAutoArchiveSuspend, mmlConsistentDiskWriteFailure=mmlConsistentDiskWriteFailure, mmlAutoDeletion=mmlAutoDeletion, DriverErrorType=DriverErrorType, dbAuditAutoDeletionFailed=dbAuditAutoDeletionFailed, appsSCConnectionIsUp=appsSCConnectionIsUp, backupInstanceRemoteNumber=backupInstanceRemoteNumber, clsDispatcherName=clsDispatcherName, clsCallServerIsDown=clsCallServerIsDown, recordingsDiagnostic=recordingsDiagnostic, vlAli4MatrixInitProblem=vlAli4MatrixInitProblem, trapFreeSpacePercentage=trapFreeSpacePercentage, vlBtai2FpgaError=vlBtai2FpgaError, vlAdifDspMPMLQError=vlAdifDspMPMLQError, driverModulesEntry=driverModulesEntry, trapSCId=trapSCId, captureErrorCode=captureErrorCode, mmlOutputChannelAllocationFailure=mmlOutputChannelAllocationFailure, LoggingErrorType=LoggingErrorType, vlNtcmLoopError=vlNtcmLoopError, rcmErrorReflectedStatus=rcmErrorReflectedStatus, appsCTIDBConnectionIsDown=appsCTIDBConnectionIsDown, rdLoggerConnectionTableIndex=rdLoggerConnectionTableIndex, vlNatiChannelError=vlNatiChannelError, mmlFailToInitializeStorageDevice=mmlFailToInitializeStorageDevice, loggingErrorInstanceIndex=loggingErrorInstanceIndex, ctiDBServerStatus=ctiDBServerStatus, rcmPendingErrorsEntry=rcmPendingErrorsEntry, rcmPendingErrorsTable=rcmPendingErrorsTable, clsResourcesAreAvailable=clsResourcesAreAvailable, driversEntry=driversEntry, vlAdif3InitFailed_Dsp=vlAdif3InitFailed_Dsp, backupErrorType=backupErrorType, rcmErrorIndex=rcmErrorIndex, capturePendingErrorsTable=capturePendingErrorsTable, rdCLSErrorReflectedStatus=rdCLSErrorReflectedStatus, clsOSDiskFailure=clsOSDiskFailure, loggingInstanceIndex=loggingInstanceIndex, CaptureInstanceType=CaptureInstanceType, vlNati2A3mDspInitProblem=vlNati2A3mDspInitProblem, vlLafFirmwareLoadError=vlLafFirmwareLoadError, vlBsvrNoMediaDataFound=vlBsvrNoMediaDataFound, rdMatchingPerdiodFailed=rdMatchingPerdiodFailed, rdCLSPendingErrorsEntry=rdCLSPendingErrorsEntry, vlBsvrAutoArchiveSuspended_Erase=vlBsvrAutoArchiveSuspended_Erase, vlAdifNoSignal=vlAdifNoSignal, vlApaCommBoardDspError=vlApaCommBoardDspError, driverMonitorEnd=driverMonitorEnd, rdServerName=rdServerName, mmlDiskIsFull=mmlDiskIsFull, trapNumOfChannels=trapNumOfChannels, vlDiskDriveProblem=vlDiskDriveProblem, clsSchedulerServerIsUp=clsSchedulerServerIsUp, vlBtai2InitFailed_Dsp=vlBtai2InitFailed_Dsp, clsCLSModuleRestartOK=clsCLSModuleRestartOK, driverId=driverId, driverNumberOfSegments=driverNumberOfSegments, vlEtaiMatrixSwitchError=vlEtaiMatrixSwitchError, ctiDBServerIsNotInitializedProperly=ctiDBServerIsNotInitializedProperly, appsRuleEngineRuleGeneratorActive=appsRuleEngineRuleGeneratorActive, driverNumberOfDevicesMonitored=driverNumberOfDevicesMonitored, trapLoggerIdInChain=trapLoggerIdInChain, rdApplicationFailedToInitialize=rdApplicationFailedToInitialize, rdCLSConnectionEntry=rdCLSConnectionEntry, rdCLSExtendedErrorinformation=rdCLSExtendedErrorinformation, vlChannelsSomeNotRecording=vlChannelsSomeNotRecording, vlAdifDspSSIRXError=vlAdifDspSSIRXError, trapChannelOrTimeslot=trapChannelOrTimeslot, clsRcm=clsRcm, rdTaskDescription=rdTaskDescription, rdTasksTableIndex=rdTasksTableIndex, vlLafPowerProblem=vlLafPowerProblem, vlNati2MatrixInitProblem=vlNati2MatrixInitProblem, driverSignificantConfigurationFileDataIsMissing=driverSignificantConfigurationFileDataIsMissing, clsOSDiskOK=clsOSDiskOK, loggingInstanceName=loggingInstanceName, niceMib_2=niceMib_2, appsRuleEngineActionExecuterIdle=appsRuleEngineActionExecuterIdle, vlBsvrDeviceShouldBeCleaned=vlBsvrDeviceShouldBeCleaned, rdConnectionToCLSLost=rdConnectionToCLSLost, appsRuleEngineRuleGeneratorFailed=appsRuleEngineRuleGeneratorFailed, TaskState=TaskState, storageCenter=storageCenter, vlAdif3ExternalClockSynchError=vlAdif3ExternalClockSynchError, driverIsDown=driverIsDown, voiceLogger=voiceLogger, clsCallServerIsUp=clsCallServerIsUp, trapRecordedMedia=trapRecordedMedia, vlEtai2InitBoardFailed=vlEtai2InitBoardFailed, ctiDBServerErrorIndex=ctiDBServerErrorIndex, appsLoggerConnectionIsUp=appsLoggerConnectionIsUp, loggingName=loggingName, appsCADBConnectionIsUp=appsCADBConnectionIsUp, RdConnStatus=RdConnStatus, trapClsTableType=trapClsTableType, vlBsvrNoMediaRetrieval=vlBsvrNoMediaRetrieval, vlTdaGeneralError=vlTdaGeneralError, mmlDeletionCapacityNotReached=mmlDeletionCapacityNotReached, dbServerErrorIndex=dbServerErrorIndex, callServerPendingErrorsTable=callServerPendingErrorsTable, appsSystemAdminHostConnectionIsUp=appsSystemAdminHostConnectionIsUp, vlIsacCriticalSystemError=vlIsacCriticalSystemError, ctiDBServerIsDown=ctiDBServerIsDown, clsDBServerIsInitializedProperly=clsDBServerIsInitializedProperly, loggingErrorReflectedStatus=loggingErrorReflectedStatus, clsCallServerTableIsFull=clsCallServerTableIsFull, driversAgentIsRepeatingTraps=driversAgentIsRepeatingTraps, mmlStartingAutoDeletionJob=mmlStartingAutoDeletionJob, dbCallsBackupFinished=dbCallsBackupFinished, mmlAgentTrapsRepeatInterval=mmlAgentTrapsRepeatInterval, BackupInstanceType=BackupInstanceType, clsAgentTrapsRepeatInterval=clsAgentTrapsRepeatInterval, captureErrorIndex=captureErrorIndex, loggingInstanceTable=loggingInstanceTable, vlDongleNotInitialized=vlDongleNotInitialized, driverConnectionToSwitchIsUp=driverConnectionToSwitchIsUp, mmlAllocationFailure=mmlAllocationFailure, trapEventProviderId=trapEventProviderId, vlDongleInitFailed_memory=vlDongleInitFailed_memory, vlAli4CpldProblem=vlAli4CpldProblem, rdTaskExecElements=rdTaskExecElements, clsDispatcherPendingErrorsEntry=clsDispatcherPendingErrorsEntry, applicationsErrorsTableApplicationIndex=applicationsErrorsTableApplicationIndex, driverConnectionToCapiIsUp=driverConnectionToCapiIsUp, mmlStorageSystemInvalidConfiguration=mmlStorageSystemInvalidConfiguration, vlDongleDeviceNotSupported=vlDongleDeviceNotSupported, vlAli4LineProblem=vlAli4LineProblem, trapSeverity=trapSeverity, vlUdaInitBoardFailed=vlUdaInitBoardFailed, driversSnmpAgentConfig=driversSnmpAgentConfig, vlAutoDeleteUnder3PercSpace=vlAutoDeleteUnder3PercSpace, vlDongleNoDevice=vlDongleNoDevice, trapLineErrorType=trapLineErrorType, applicationsTable=applicationsTable, mmlStorageSystemName=mmlStorageSystemName, driverConnectionToSwitchIsDown=driverConnectionToSwitchIsDown, mmlStatus=mmlStatus, callServerErrorIndex=callServerErrorIndex, mmlAutoDeletionName=mmlAutoDeletionName, callServerErrorReflectedStatus=callServerErrorReflectedStatus, LineErrorType=LineErrorType, clsDispatcherErrorReflectedStatus=clsDispatcherErrorReflectedStatus, voiceLoggerLogging=voiceLoggerLogging, backupInstanceTable=backupInstanceTable, clsDispatchIsDown=clsDispatchIsDown, vlLmopGeneralHWProblem=vlLmopGeneralHWProblem, rdApplicationStartUp=rdApplicationStartUp, ctiEventsDbServer=ctiEventsDbServer, vlAdifLossOfSynch=vlAdifLossOfSynch)
mibBuilder.exportSymbols("Nice-MIB-II", vlBsvrMediaAccessDenied=vlBsvrMediaAccessDenied, vlApaIOError=vlApaIOError, rcmStatus=rcmStatus, rdTaskStartTime=rdTaskStartTime, vlNPlus1ROBMalfunction=vlNPlus1ROBMalfunction, vlIsac2BoardProblem=vlIsac2BoardProblem, appsAdminDataBaseConnectionIsDown=appsAdminDataBaseConnectionIsDown, clsAgentConfig=clsAgentConfig, clsSchedulerServerIsInitializedProperly=clsSchedulerServerIsInitializedProperly, vlBsrvDvdArchiveCompleted=vlBsrvDvdArchiveCompleted, appsLoggerConnectionIsDown=appsLoggerConnectionIsDown, vlBsvrAutoArchiveSuspended_Retrieval=vlBsvrAutoArchiveSuspended_Retrieval, rcmName=rcmName, schedulerServerName=schedulerServerName, dbReindexJobFinished=dbReindexJobFinished, systemTools=systemTools, dbReindexJobFailed=dbReindexJobFailed, mmlAgentVersion=mmlAgentVersion, appsRuleEngineActionExecuterSucceeded=appsRuleEngineActionExecuterSucceeded, applicationsAgentTrapsRepeatInterval=applicationsAgentTrapsRepeatInterval, captureInstanceTable=captureInstanceTable, BoardType=BoardType, mmlPersistentMismatch=mmlPersistentMismatch, trapsInfo=trapsInfo, vlApaDspRuntimeError=vlApaDspRuntimeError, clsDispatcher=clsDispatcher, driverNumberOfCompound=driverNumberOfCompound, trapHostTime=trapHostTime, ctiDBServerAgentTrapsRepeatInterval=ctiDBServerAgentTrapsRepeatInterval, vlNPlus1SpareNeedLongUpdate=vlNPlus1SpareNeedLongUpdate, LoggingInstanceType=LoggingInstanceType, applicationsAgentVersion=applicationsAgentVersion, driversPendingErrorsEntry=driversPendingErrorsEntry, voiceLoggerSnmpAgentConfig=voiceLoggerSnmpAgentConfig, clsNPLUS1LoggersAreOK=clsNPLUS1LoggersAreOK, BackupConfig=BackupConfig, mmlSnmpAgentConnectedToLogger=mmlSnmpAgentConnectedToLogger, backupInstanceType=backupInstanceType, rdTaskStarted=rdTaskStarted, mmlInputChannelAllocationFailure=mmlInputChannelAllocationFailure, trapLineProblem=trapLineProblem, vlLafLostSynch=vlLafLostSynch, vlBsvrArchivingFailed=vlBsvrArchivingFailed, driverErrorIndex=driverErrorIndex, vlNPlus1SpareIsBackingUp=vlNPlus1SpareIsBackingUp, vlEtaiInitBoardFailed=vlEtaiInitBoardFailed, clsDispatchIsUp=clsDispatchIsUp, dbAuditDbSpaceIsLow=dbAuditDbSpaceIsLow, rdLoggerErrorLoggerTableIndex=rdLoggerErrorLoggerTableIndex, callServerPendingErrorsEntry=callServerPendingErrorsEntry, dbServerErrorType=dbServerErrorType, driverConnectionToCapiIsDown=driverConnectionToCapiIsDown, mmlFailToInitializeMemoryManager=mmlFailToInitializeMemoryManager, dbAuditBackupFailed=dbAuditBackupFailed, backupInstanceNumber=backupInstanceNumber, rdCLSPendingErrorsTableIndex=rdCLSPendingErrorsTableIndex, trapVLModuleName=trapVLModuleName, vlAumGeneralInitFailure=vlAumGeneralInitFailure, clsALLCLSModulesInitFailed=clsALLCLSModulesInitFailed, vlAutoDeleteLowKeptSpace=vlAutoDeleteLowKeptSpace, vlAdifDspIllegalCommand=vlAdifDspIllegalCommand, voiceLoggerName=voiceLoggerName, vlUdaInitFailed_Dsp=vlUdaInitFailed_Dsp, appsLoggerIsNotAttachToACLS=appsLoggerIsNotAttachToACLS, rdTaskName=rdTaskName, clsAgentVersion=clsAgentVersion, clsSchedulerServerIsDown=clsSchedulerServerIsDown, dbCallsDbSpaceIsLow=dbCallsDbSpaceIsLow, vlDbmInitPartitionFailed=vlDbmInitPartitionFailed, mmlCriticalDataSystemError=mmlCriticalDataSystemError, OsDiskFailureType=OsDiskFailureType, clsRcmIsUp=clsRcmIsUp, ClsErrorType=ClsErrorType, vlTdaDspError=vlTdaDspError, clsDispatcherErrorIndex=clsDispatcherErrorIndex, mmlDiskUsage=mmlDiskUsage, clsConnectionToDBIsOK=clsConnectionToDBIsOK, vlDongleInitFailed_function=vlDongleInitFailed_function, loggingInstanceType=loggingInstanceType, vlAdifInternalBoardError=vlAdifInternalBoardError, driverModuleName=driverModuleName, vlLmopRedunDiskMirrorProblem=vlLmopRedunDiskMirrorProblem, driverIdInDriversErrors=driverIdInDriversErrors, loggingErrorCode=loggingErrorCode, trapLineNumber=trapLineNumber, trapDaughterBoardNumber=trapDaughterBoardNumber, clsLoggerIsNotInitializedProperly=clsLoggerIsNotInitializedProperly, clsRecordIsNotInsertedToDBTheRecordIsLost=clsRecordIsNotInsertedToDBTheRecordIsLost, rdLoggerErrorType=rdLoggerErrorType, backupPendingErrorsEntry=backupPendingErrorsEntry, schedulerServerErrorType=schedulerServerErrorType, rdLoggerPendingErrorsTableIndex=rdLoggerPendingErrorsTableIndex, trapDataLineNumber=trapDataLineNumber, rdLoggerPendingErrorsEntry=rdLoggerPendingErrorsEntry, rdKeepAliveHeartBeatFail=rdKeepAliveHeartBeatFail, backupErrorReflectedStatus=backupErrorReflectedStatus, vlIsac2TestToneProblem=vlIsac2TestToneProblem, mmlConsistentDiskReadFailure=mmlConsistentDiskReadFailure, appsUserAdminHostConnectionIsDown=appsUserAdminHostConnectionIsDown, driverModuleId=driverModuleId, clsCallServerLinkIsUp=clsCallServerLinkIsUp, appsInteractionDBConnectionIsUp=appsInteractionDBConnectionIsUp, loggingStatus=loggingStatus, rdLoggerID=rdLoggerID, captureInstanceName=captureInstanceName, appsServerIsDown=appsServerIsDown, voiceLoggerStatus=voiceLoggerStatus, HostLocalTime=HostLocalTime, clsCommunicationToLoggerIsOK=clsCommunicationToLoggerIsOK, mmlLoggerIsShuttingDown=mmlLoggerIsShuttingDown, trapOsDiskFailure=trapOsDiskFailure, rdCLSErrorCLSTableIndex=rdCLSErrorCLSTableIndex, trapDiskDrive=trapDiskDrive, appsRuleEngineActionExecuterFailed=appsRuleEngineActionExecuterFailed, mmlAutoDeletionStatus=mmlAutoDeletionStatus, driverIdInDriverModulesErrors=driverIdInDriverModulesErrors, backupStatus=backupStatus, appsRuleEngineRuleGeneratorIdle=appsRuleEngineRuleGeneratorIdle, clsCallServer=clsCallServer, rdCLSConnectionTable=rdCLSConnectionTable, vlDliBoardCommError=vlDliBoardCommError, mmlLoggerIsReady=mmlLoggerIsReady, rdLoggerConnectionEntry=rdLoggerConnectionEntry, rdTasksTable=rdTasksTable, appsRuleMngrDataBaseConnectionIsUp=appsRuleMngrDataBaseConnectionIsUp, clsRecordIsInsertedToDB=clsRecordIsInsertedToDB, vlDongleInitFailed_HLApi=vlDongleInitFailed_HLApi, trapRegistryKey=trapRegistryKey, vlChannelsLineError=vlChannelsLineError, vlDongleInitFailed_parameter=vlDongleInitFailed_parameter, clsDBSpaceIsOK=clsDBSpaceIsOK, vlApaDspFirmwareLoadFailed=vlApaDspFirmwareLoadFailed, mmlDataSystem=mmlDataSystem, dbAuditDbFull=dbAuditDbFull, clsDispatcherStatus=clsDispatcherStatus, vlDliDriverInitFailed=vlDliDriverInitFailed, vlNatiInitBoardError=vlNatiInitBoardError, driverModulesTable=driverModulesTable, driverModuleStatus=driverModuleStatus, voiceLoggerAgentIsRepeatingTraps=voiceLoggerAgentIsRepeatingTraps, captureErrorType=captureErrorType, rcmErrorLoggerId=rcmErrorLoggerId, nice=nice, vlUdaMatrixInitFailed=vlUdaMatrixInitFailed, rdConnectionToLoggerLost=rdConnectionToLoggerLost, vlChannelsLowStatAlarm=vlChannelsLowStatAlarm, backupErrorBSRVErrorCode=backupErrorBSRVErrorCode, captureInstanceIndex=captureInstanceIndex, applicationsEntry=applicationsEntry)
