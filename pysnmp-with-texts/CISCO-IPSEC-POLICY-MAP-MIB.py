#
# PySNMP MIB module CISCO-IPSEC-POLICY-MAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPSEC-POLICY-MAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Bits, IpAddress, NotificationType, TimeTicks, Counter32, MibIdentifier, Counter64, Integer32, iso, Gauge32, ModuleIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Bits", "IpAddress", "NotificationType", "TimeTicks", "Counter32", "MibIdentifier", "Counter64", "Integer32", "iso", "Gauge32", "ModuleIdentity", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoIpSecPolMapMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 172))
if mibBuilder.loadTexts: ciscoIpSecPolMapMIB.setLastUpdated('200008171257Z')
if mibBuilder.loadTexts: ciscoIpSecPolMapMIB.setOrganization('Tivoli Systems and Cisco Systems')
if mibBuilder.loadTexts: ciscoIpSecPolMapMIB.setContactInfo('Tivoli Systems Research Triangle Park, NC Cisco Systems Enterprise Business Management Unit Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ipsecurity@cisco.com')
if mibBuilder.loadTexts: ciscoIpSecPolMapMIB.setDescription("The MIB module maps the IPSec entities created dynamically to the policy entities that caused them. This is an appendix to the IPSEC-MONITOR-MIB that has been proposed to IETF for monitoring IPSec based Virtual Private Networks. Overview of Cisco IPsec Policy Map MIB MIB description There are two components to this MIB: #1 a table that maps an IPSec Phase-1 tunnel to the Internet Security Association and Key Exchange (ISAKMP) Policy and #2 a table that maps an IPSec Phase-2 tunnel to the corresponding IPSec Policy element - called 'cryptomaps' - in IOS (Internet Operating System) The first mappin (also called Internet Key Exchange or IKE mapping) yields, given the index of the IKE tunnel in the ikeTunnelTable (IPSEC-MONITOR-MIB), the ISAKMP policy definition defined using the CLI on the managed entity. The IPSec mapping yields, given the index of the IPSec tunnel in the ipSecTunnelTable (IPSEC-MONITOR-MIB), the IPSec transform and the cryptomap definition that gave rise to this tunnel. In implementation and usage, this MIB cannot exist independent of the IPSEC-MONITOR-MIB. ")
ciscoIpSecPolMapMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 1))
ciscoIpSecPolMapMIBNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 2))
ciscoIpSecPolMapMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 3))
ipSecPhaseOnePolMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 1))
ipSecPhaseTwoPolMap = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2))
ikePolMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 1, 1), )
if mibBuilder.loadTexts: ikePolMapTable.setStatus('current')
if mibBuilder.loadTexts: ikePolMapTable.setDescription('The IPSec Phase-1 Internet Key Exchange Tunnel to Policy Mapping Table. There is one entry in this table for each active IPSec Phase-1 Tunnel.')
ikePolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-POLICY-MAP-MIB", "ikePolMapTunIndex"))
if mibBuilder.loadTexts: ikePolMapEntry.setStatus('current')
if mibBuilder.loadTexts: ikePolMapEntry.setDescription("Each entry contains the attributes associated with mapping an active IPSec Phase-1 IKE Tunnel to it's configured Policy definition.")
ikePolMapTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ikePolMapTunIndex.setStatus('current')
if mibBuilder.loadTexts: ikePolMapTunIndex.setDescription('The index of the IPSec Phase-1 Tunnel to Policy Map Table. The value of the index is the number used to represent this IPSec Phase-1 Tunnel in the IPSec MIB (ikeTunIndex in the ikeTunnelTable).')
ikePolMapPolicyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ikePolMapPolicyNum.setStatus('current')
if mibBuilder.loadTexts: ikePolMapPolicyNum.setDescription('The number of the locally defined ISAKMP policy used to establish the IPSec IKE Phase-1 Tunnel. This is the number which was used on the crypto command. For example, if the configuration command was: ==> crypto isakmp policy 15 then the value of this object would be 15. If ISAKMP was not used to establish this tunnel, then the value of this object will be zero.')
ipSecPolMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1), )
if mibBuilder.loadTexts: ipSecPolMapTable.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapTable.setDescription('The IPSec Phase-2 Tunnel to Policy Mapping Table. There is one entry in this table for each active IPSec Phase-2 Tunnel.')
ipSecPolMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPolMapTunIndex"))
if mibBuilder.loadTexts: ipSecPolMapEntry.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapEntry.setDescription('Each entry contains the attributes associated with mapping an active IPSec Phase-2 Tunnel to its configured Policy definition.')
ipSecPolMapTunIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: ipSecPolMapTunIndex.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapTunIndex.setDescription('The index of the IPSec Phase-2 Tunnel to Policy Map Table. The value of the index is the number used to represent this IPSec Phase-2 Tunnel in the IPSec MIB (ipSecTunIndex in the ipSecTunnelTable).')
ipSecPolMapCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecPolMapCryptoMapName.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapCryptoMapName.setDescription("The value of this object should be the name of the IPSec Policy (cryptomap) as assigned by the operator while configuring the policy of the IPSec traffic. For instance, on an IOS router, the if the command entered to configure the IPSec policy was ==> crypto map ftpPolicy 10 ipsec-isakmp then the value of this object would be 'ftpPolicy'.")
ipSecPolMapCryptoMapNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecPolMapCryptoMapNum.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapCryptoMapNum.setDescription('The value of this object should be the priority of the IPSec Policy (cryptomap) assigned by the operator while configuring the policy of this IPSec tunnel. For instance, on an IOS router, the if the command entered to configure the IPSec policy was ==> crypto map ftpPolicy 10 ipsec-isakmp then the value of this object would be 10.')
ipSecPolMapAclString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecPolMapAclString.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapAclString.setDescription("The value of this object is the number or the name of the access control string (ACL) that caused this IPSec tunnel to be established. The ACL that causes an IPSec tunnel to be established is referenced by the cryptomap of the tunnel. The ACL identifies the traffic that requires protection as defined by the policy. For instance, the ACL that requires FTP traffic between local subnet 172.16.14.0 and a remote subnet 172.16.16.0 to be protected is defined as ==>access-list 101 permit tcp 172.16.14.0 0.0.0.255 172.16.16.0 0.0.0.255 eq ftp When this command causes an IPSec tunnel to be established, the object 'ipSecPolMapAclString' assumes the string value '101'. If the ACL is a named list such as ==> ip access-list standard myAcl permit 172.16.16.8 0.0.0.0 then the value of this MIB element corresponding to IPSec tunnel that was created by this ACL would be 'myAcl'.")
ipSecPolMapAceString = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 172, 1, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSecPolMapAceString.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapAceString.setDescription("The value of this object is the access control entry (ACE) within the ACL that caused this IPSec tunnel to be established. For instance, if an ACL defines access for two traffic streams (FTP and SNMP) as follows: access-list 101 permit tcp 172.16.14.0 0.0.0.255 172.16.16.0 0.0.0.255 eq ftp access-list 101 permit udp 172.16.14.0 0.0.0.255 host 172.16.16.1 eq 161 When associated with an IPSec policy, the second element of the ACL gives rise to an IPSec tunnel in the wake of SNMP traffic. The value of the object 'ipSecPolMapAceString' for the IPSec tunnel would be then the string 'access-list 101 permit udp 172.16.14.0 0.0.0.255 host 172.16.16.1 eq 161'")
ipSecPolMapMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 3, 1))
ipSecPolMapMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 172, 3, 2))
ipSecPolMapMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 172, 3, 2, 1)).setObjects(("CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPhaseOnePolMapGroup"), ("CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPhaseTwoPolMapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipSecPolMapMIBCompliance = ipSecPolMapMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ipSecPolMapMIBCompliance.setDescription('The compliance statement for SNMP entities for IP Security Protocol Tunnels to Policy definition mappings.')
ipSecPhaseOnePolMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 172, 3, 1, 1)).setObjects(("CISCO-IPSEC-POLICY-MAP-MIB", "ikePolMapPolicyNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipSecPhaseOnePolMapGroup = ipSecPhaseOnePolMapGroup.setStatus('current')
if mibBuilder.loadTexts: ipSecPhaseOnePolMapGroup.setDescription('This group consists of a: 1) IPSec Phase-1 Policy Map Table')
ipSecPhaseTwoPolMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 172, 3, 1, 2)).setObjects(("CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPolMapCryptoMapName"), ("CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPolMapCryptoMapNum"), ("CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPolMapAclString"), ("CISCO-IPSEC-POLICY-MAP-MIB", "ipSecPolMapAceString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ipSecPhaseTwoPolMapGroup = ipSecPhaseTwoPolMapGroup.setStatus('current')
if mibBuilder.loadTexts: ipSecPhaseTwoPolMapGroup.setDescription('This group consists of a: 1) IPSec Phase-2 Policy Map Table')
mibBuilder.exportSymbols("CISCO-IPSEC-POLICY-MAP-MIB", ikePolMapTable=ikePolMapTable, ipSecPolMapMIBCompliances=ipSecPolMapMIBCompliances, ipSecPolMapCryptoMapName=ipSecPolMapCryptoMapName, ikePolMapEntry=ikePolMapEntry, ciscoIpSecPolMapMIBObjects=ciscoIpSecPolMapMIBObjects, ikePolMapTunIndex=ikePolMapTunIndex, ciscoIpSecPolMapMIBNotifPrefix=ciscoIpSecPolMapMIBNotifPrefix, ipSecPolMapTable=ipSecPolMapTable, ipSecPolMapAceString=ipSecPolMapAceString, PYSNMP_MODULE_ID=ciscoIpSecPolMapMIB, ipSecPhaseOnePolMapGroup=ipSecPhaseOnePolMapGroup, ipSecPhaseOnePolMap=ipSecPhaseOnePolMap, ikePolMapPolicyNum=ikePolMapPolicyNum, ipSecPhaseTwoPolMap=ipSecPhaseTwoPolMap, ipSecPhaseTwoPolMapGroup=ipSecPhaseTwoPolMapGroup, ipSecPolMapAclString=ipSecPolMapAclString, ciscoIpSecPolMapMIB=ciscoIpSecPolMapMIB, ipSecPolMapEntry=ipSecPolMapEntry, ipSecPolMapTunIndex=ipSecPolMapTunIndex, ciscoIpSecPolMapMIBConformance=ciscoIpSecPolMapMIBConformance, ipSecPolMapMIBCompliance=ipSecPolMapMIBCompliance, ipSecPolMapCryptoMapNum=ipSecPolMapCryptoMapNum, ipSecPolMapMIBGroups=ipSecPolMapMIBGroups)
