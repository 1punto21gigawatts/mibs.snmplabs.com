#
# PySNMP MIB module GDCMP7002-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDCMP7002-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:19:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, ModuleIdentity, ObjectIdentity, enterprises, NotificationType, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, MibIdentifier, iso, Unsigned32, Bits, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ModuleIdentity", "ObjectIdentity", "enterprises", "NotificationType", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "MibIdentifier", "iso", "Unsigned32", "Bits", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gdc = MibIdentifier((1, 3, 6, 1, 4, 1, 498))
dsx1 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6))
mp7002System = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6))
mp7002Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9))
mp7002Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 1))
mp7002Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 2))
mp7002Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 3))
mp7002Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 4))
mp7002Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 5))
mp7002SysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 6, 7))
mp7002MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002MIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002MIBversion.setDescription("Identifies the version of the MIB. The format of the version is x.yzT, where 'x' identifies the major revision number, 'y' identifies the minor revision number, 'z' identifies the typographical revision, and T identifies the test revision. Acceptable values for the individual revision components are as follows: x: 1 - 9 y: 0 - 9 z: 0 - 9 T: A - Z Upon formal release, no designation for the test revision will be present.")
mp7002VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2), )
if mibBuilder.loadTexts: mp7002VersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002VersionTable.setDescription(' ')
mp7002VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002VersionIndex"))
if mibBuilder.loadTexts: mp7002VersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002VersionEntry.setDescription('An entry in the GDC Mp7002System Version Table.')
mp7002VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002VersionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002VersionIndex.setDescription('This object identifies Version parameters associated with the managed object.')
mp7002FirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FirmwareRev.setDescription('The version number of the firmware, to allow products to know which revision is installed. The released version number is sequenced from --, A-, ... AA, ... ZZ. Test versions are numerical from 01 to 99.')
mp7002ModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002ModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ModelNumber.setDescription('This variable is used to determine the type of card family installed ex. MP7002.')
mp7002E1x = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("installed", 1), ("notPresent", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002E1x.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002E1x.setDescription('Indicates if the E1X Cascade Interface is installed.')
mp7002MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1), )
if mibBuilder.loadTexts: mp7002MaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002MaintenanceTable.setDescription('The table describes the maintenance objects for the unit and references the unit interface (cc = 00).')
mp7002MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002MaintenanceLineIndex"))
if mibBuilder.loadTexts: mp7002MaintenanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002MaintenanceEntry.setDescription('An entry in the GDC E1 Maintenance Table.')
mp7002MaintenanceLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002MaintenanceLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002MaintenanceLineIndex.setDescription('This object identifies Maintenance parameters associated with the managed object.')
mp7002SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SoftReset.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SoftReset.setDescription('Supports the action of soft resetting the unit. When this object is set to reset(2), then the unit performs a soft reset, whose meaning is specific to the type of unit being managed. The value of norm(1) will be returned when the reset is complete. The value of norm(1) can not be set by management.')
mp7002SysUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002SysUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SysUpTime.setDescription('This variable is used to report the elapsed system tick time for conversion to real time at the controller and is not related to the sysUpTime referenced in MIB-II. Upon power-up of the unit, the elapsed time is cleared. The elapsed time counter rolls over upon reaching the maximum count.')
mp7002DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002DefaultInit.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DefaultInit.setDescription('This is used to allow the NonVolatile Configuration to be set to a factory default state. When this value is set to factoryDefault(1) the unit will perform a reset to make the default configuration take affect. The value of normal(2) will be returned when the initialization is complete. The value of normal(2) can not be set by management.')
mp7002ResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ResetStats.setDescription('Supports the action of soft resetting the mp7002NearEndValidIntervals object. When this object is set to reset(2), then the unit will reset the mp7002NearEndValidIntervals object to zero. The value of norm(1) can not be set by management.')
mp7002LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002LedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LedStatus.setDescription('Returns a bitwise snapshot of the front panel LED state. Octet 1 bit 7 - not used bit 6 - ON bit 5 - INSV bit 4 - RSP bit 3 - TMG bit 2 - NIU bit 1 - D_I bit 0 - future use Octet 2 bit 7 - not used bit 6 - future use bit 5 - NTWK AIS bit 4 - NTWK LCV bit 3 - NTWK LOS bit 2 - NTWK OOF bit 1 - ALM bit 0 - TM Octet 3 bit 7 - not used bit 6 - ST- future use bit 5 - LT- future use bit 4 - RL- future use bit 3 - future use bit 2 - future use bit 1 - future use bit 0 - future use')
mp7002E1Circuit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002E1Circuit.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002E1Circuit.setDescription('Circuit name E1 is connected to.')
mp7002E1XCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002E1XCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002E1XCircuit.setDescription('Circuit Name E1X is connected to')
mp7002TSBundle1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TSBundle1Name.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TSBundle1Name.setDescription('Name first Time Slot Bundle is assigned to. Only used when unit is configured for drop side interface')
mp7002TSBundle2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TSBundle2Name.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TSBundle2Name.setDescription('Name second Time Slot Bundle is assigned to. Only used when unit is configured for drop side interface.')
mp7002SetRealTime = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SetRealTime.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SetRealTime.setDescription('Number of seconds from midnight Dec 31, 1969.')
mp7002AlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002AlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002AlarmStatus.setDescription('Returns a bit-wise Status of alarms Octet 1 bit 7 - not used bit 6 - NWTK_LOS bit 5 - NWTK_LOF bit 4 - NWTK_AIS bit 3 - NTWK_LCV bit 2 - TIMING LOSS bit 1 - NTWK_NE_ES bit 0 - NTWK_NE_BBE Octet 2 bit 7 - not used bit 6 - NTWK_NE_SES bit 5 - NTWK_NE_UAS bit 4 - NTWK_FE_ES bit 3 - NTWK_FE_BBE bit 2 - NTWK_FE_SES bit 1 - NTWK_FE_UAS bit 0 - NTWK_RAI Octet 3 bit 7 - not used bit 6 - E1X_LOS bit 5 - E1X_LOF bit 4 - E1X_AIS bit 3 - E1X_NE_ES bit 2 - E1X_NE_BBE bit 1 - E1X_NE_SES bit 0 - E1X_NE_UAS Octet 4 bit 7 - not used bit 6 - E1X_FE_ES bit 5 - E1X_FE_BBE bit 4 - E1X_FE_SES bit 3 - E1X_FE_UAS bit 2 - NVRAM corrupted bit 1 - unit failure bit 0 - Power-up Alarm')
mp7002SystemTimingGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("clk8khz", 2), ("clk4mhz", 3), ("clk8khzand4mhz", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002SystemTimingGenStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SystemTimingGenStatus.setDescription('Indicates if the units configured for primary or secondary system clock are actually supplying clock and if it is the 8hkz, 4mhz, or both.')
mp7002FarEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FarEndResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndResetStats.setDescription('Supports the action of soft resetting the mp7002FarEndValidIntervals object. When this object is set to reset(2), then the unit will reset the mp7002FarEndValidIntervals object to zero. The value of norm(1) can not be set by management.')
mp7002NearEndStatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndStatLastInitialized.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndStatLastInitialized.setDescription('Number of seconds from midnight Dec 31, 1969 up until mp7002NearEndValidIntervals was last initialized to zero')
mp7002FarEndStatLastInitialized = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndStatLastInitialized.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndStatLastInitialized.setDescription('Number of seconds from midnight Dec 31, 1969 up until mp7002FarEndValidIntervals was last initialized to zero')
mp7002ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1), )
if mibBuilder.loadTexts: mp7002ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ConfigTable.setDescription('The GDC E1 Configuration table.')
mp7002ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002ConfigIndex"))
if mibBuilder.loadTexts: mp7002ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ConfigEntry.setDescription('The GDC E1 Configuration table entry.')
mp7002ConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002ConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002InterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("diu", 1), ("niu", 2), ("notAssigned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002InterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002InterfaceType.setDescription('The operating mode of the interface to be either Network Side, Drop Side or not assigned.')
mp7002RcvrRange = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002RcvrRange.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002RcvrRange.setDescription('Sets the receiver range to short (6dB) or long (36dB)')
mp7002TransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TransmitClockSource.setDescription('Sets the transmit clock source.')
mp7002FallbackClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system", 1), ("recovered", 2), ("internal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FallbackClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FallbackClockSource.setDescription('Identifies the fallback transmit clock source.')
mp7002FacilityDataLink = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("active", 2), ("notActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FacilityDataLink.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FacilityDataLink.setDescription('')
mp7002NearEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 16 unless the interface was brought on-line within the last 4 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online. This object is only valid for the E1 interface.')
mp7002FarEndValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 16 unless the interface was brought on-line within the last 4 hours, in which case the value will be the number of complete 15 minute intervals the since interface has been online. This object is only valid for the E1 interface.')
mp7002NetworkConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onLine", 1), ("standBy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NetworkConnection.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NetworkConnection.setDescription('Sets whether the network interface is standby or online. This only applies to the Network Interface.')
mp7002Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("cCSwithoutCRC4", 1), ("pCS0withoutCRC4", 2), ("pCS1withoutCRC4", 3), ("cCSwithCRC4", 4), ("pCS0withCRC4", 5), ("pCS1withCRC4", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002Framing.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002Framing.setDescription('Set the framing for the interface. Abbreviations are as follows: CCS - common-channel signaling PCS0 - per channel signaling phase 0 PCS1 - per channel signaling phase 1')
mp7002LineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("hdb3", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LineCoding.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LineCoding.setDescription('Sets the line coding for the interface.')
mp7002SysTimingTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1), )
if mibBuilder.loadTexts: mp7002SysTimingTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SysTimingTable.setDescription('The GDC System Timing table. These are unit options at the system level.')
mp7002SysTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002SysTimingIndex"))
if mibBuilder.loadTexts: mp7002SysTimingEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SysTimingEntry.setDescription('The GDC E1 Configuration table entry.')
mp7002SysTimingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002SysTimingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SysTimingIndex.setDescription('Index value into the system configuration table.')
mp7002SysTimingGen = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("primary", 2), ("secondary", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SysTimingGen.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SysTimingGen.setDescription('Selects if the unit provides system timing. none(1) - does not provide Timing Generator primary(2) - unit is primary Timing Generator for the shelf. secondary(3) - unit is secondary Timig Generator for the shelf. Only 1 unit in the shelf can the primary or secondary timing generator. All other must be none.')
mp7002DCCConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2), )
if mibBuilder.loadTexts: mp7002DCCConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DCCConfigurationTable.setDescription('The GDC DCC Configuration table. These are Diagnostic Channel configuration options.')
mp7002DCCConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002DCCConfigurationIndex"))
if mibBuilder.loadTexts: mp7002DCCConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DCCConfigurationEntry.setDescription('The GDC Diagnostic Configuration table entry.')
mp7002DCCConfigurationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002DCCConfigurationIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DCCConfigurationIndex.setDescription('Index value into the DCC Configuration table.')
mp7002TimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TimeSlot.setDescription('Time Slot DCC goes in')
mp7002Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("kbps8", 1), ("kbps56", 2), ("kbps64", 3), ("notAssigned", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002Bandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002Bandwidth.setDescription('Bandwidth to use: 8 kbps - bit 7 only 56 kbps - bits 0 - 6 64 kbps - all 8 bits')
mp7002HighwayAssignTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2), )
if mibBuilder.loadTexts: mp7002HighwayAssignTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002HighwayAssignTable.setDescription('The GDC System Configuration table. These are unit options at the system level.')
mp7002HighwayAssignEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002HighwayAssignIndex"), (0, "GDCMP7002-MIB", "mp7002TimeSlotBundle"))
if mibBuilder.loadTexts: mp7002HighwayAssignEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002HighwayAssignEntry.setDescription('The GDC E1 Highway Assign table entry.')
mp7002HighwayAssignIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002HighwayAssignIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002HighwayAssignIndex.setDescription('Index value into the Highway Assignment table.')
mp7002TimeSlotBundle = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bundle1", 1), ("bundle2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TimeSlotBundle.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TimeSlotBundle.setDescription('Index for the bundle being assigned. A time slot bundle can be assigned to 1 or 2 of the 4 backplane highways. Bundle 1 is asigned in the Aggregate starting at Time Slot 1. Bundle 2 starts at the next available Time Slot. If only one bundle is needed, it must be bundle 1. The execute object should be sent only after acknowlegement of al assignment PDUs.')
mp7002StartTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002StartTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002StartTimeSlot.setDescription('Starting time slot of the bundle. If only 1 bundle is being assigned, or the first of 2 is being assigned, it must start at 1. The second of 2 must start at the next available time slot after the first bundle.')
mp7002NumberOfTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NumberOfTimeSlots.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NumberOfTimeSlots.setDescription('Number of time slots assigned to the bundle.')
mp7002BundleDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notAssigned", 1), ("highway1", 2), ("highway2", 3), ("highway3", 4), ("highway4", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002BundleDestination.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002BundleDestination.setDescription('Defines the destination of the bundle.')
mp7002ExecuteAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ExecuteAssign.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ExecuteAssign.setDescription('Causes the MP7002 to execute configuration of the assigned highway configuration. This object should be sent in a separate PDU after acknowlegement of the assign PDU(s) has been recieved.')
mp7002DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1), )
if mibBuilder.loadTexts: mp7002DiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DiagTable.setDescription('The GDC E1 Diagnostics table. Information in the entries of this table support diagnostics testing via loopbacks. Diagnostics are only supported when mp7002InterfaceType is set to niu(2). This table applies to the Network Interface only.')
mp7002DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002DiagIndex"))
if mibBuilder.loadTexts: mp7002DiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DiagEntry.setDescription('The GDC E1 Diagnostics table entry.')
mp7002DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002DiagIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DiagIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002TestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noCode", 1), ("pat511", 2), ("pat2047", 3), ("pat1in4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TestPattern.setStatus('obsolete')
if mibBuilder.loadTexts: mp7002TestPattern.setDescription('Test pattern for tests that use the pattern generator. The value of this object is used when mp7002DiagConfig.unitTest(5) or mp7002DiagConfig.patGenOn(6) is selected. NOT SUPPORTED BY THE MP7002.')
mp7002DiagConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoopback", 2), ("payloadLoopback", 3), ("localTest", 4), ("unitTest", 5), ("patGenOn", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002DiagConfig.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002DiagConfig.setDescription('Selects the test to run. noLoop(1) ends the test. Interoperates with mp7002TestPattern. When unitTest(2) or patGenOn(3) is selected, the pattern in mp7002TestPattern is used. payloadLoopback(4) and lineLoopback(5) are only valid when the unit is configured for a Network Side interface. localTest(6) is only valid when the unit is configured for a Drop Side interface.')
mp7002TestLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("testTime10Mins", 1), ("testTime20Mins", 2), ("noLimit", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TestLimit.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TestLimit.setDescription('Selects the duration to run a diagnostic test. The value(1) noLimit signifies that the test should run indefinitely until explicitly terminated. Default value: testTime10Mins(1)')
mp7002TestExecutionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("notInTest", 1), ("testInProgress", 2), ("testCompleted", 4), ("testCompletedNotInTest", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TestExecutionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TestExecutionStatus.setDescription('This variable reports the status of a test. notInTest(1) indicates a test is not running. testInProgress(2) indicates that a test is currently running. testCompleted(4) indicates that a test has run and is completed. testCompletedNotInTest(5) indicates that a test has completed and it is no longer in test.')
mp7002TestExceptions = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TestExceptions.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TestExceptions.setDescription('Indicates exceptions that have occurred that may affect interpretation of the test results. The value of this object is a sum. This sum initially take the value zero. Then, for each exception, the value associated with the exception is added to the sum. The exception values are: value exception 1 a timed test was preempted so the result cannot be viewed in relation to the test duration 2 the results overflowed so the result cannot be viewed as an absolute value 4 the test was performed while synchronization could not be performed so the result may not be accurate.')
mp7002TestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002TestResults.setStatus('obsolete')
if mibBuilder.loadTexts: mp7002TestResults.setDescription('The results of the last diagnostic test. This can be the current test running or the last completed test. Note that the interpretation of these results may be affected by the value of the mp7002TestExceptions object. Not supported by MP7002 since no pattern generating tests are supported.')
mp7002ResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ResetTestResults.setStatus('obsolete')
if mibBuilder.loadTexts: mp7002ResetTestResults.setDescription('Resets the diagnostic error count. Not supported by MP7002 since no pattern generating tests are supported.')
mp7002NearEndCurrent15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1), )
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinTable.setDescription('The mp7002 Current table.')
mp7002NearEndCurrent15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndCurrent15MinIndex"))
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinEntry.setDescription('An entry in the mp7002 NearEnd Current table.')
mp7002NearEndCurrent15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002NearEndCurrent15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent15MinStat.setDescription('Returns a bitwise snapshot of the current 15Min statistics. 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 2^9 ES . 1.0 2^7 2.7 f/u 2.6 2^6 . 2.0 2^0 3.7 f/u 3.6 f/u 3.5 f/u 3.4 f/u 3.3 f/u 3.2 2^9 SES . 3.0 2^7 4.7 f/u 4.6 2^6 SES . 4.0 2^0 5.7 f/u 5.6 f/u 5.5 f/u 5.4 f/u 5.3 f/u 5.2 Counter Overflow (>65535) BBE 5.1 2^15 5.0 2^14 6.7 f/u 6.6 2^13 BBE . 6.0 2^7 7.7 f/u 7.6 2^6 BBE . 7.0 2^0 8.7 f/u 8.6 f/u 8.5 f/u 8.4 f/u 8.3 f/u 8.2 2^9 UAS . 8.0 2^7 9.7 f/u 9.6 2^6 UAS . 9.0 2^0 10.7 f/u 10.6 f/u 10.5 f/u 10.4 f/u 10.3 f/u 10.2 Counter Overflow (>65535) LCV 10.1 2^15 10.0 2^14 11.7 f/u 11.6 2^13 LCV . 11.0 2^7 12.7 f/u 12.6 2^6 LCV . 12.0 2^0 ')
mp7002NearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2), )
if mibBuilder.loadTexts: mp7002NearEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndIntervalTable.setDescription('The mp7002 Interval table.')
mp7002NearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndIntervalIndex"), (0, "GDCMP7002-MIB", "mp7002NearEndIntervalNumber"))
if mibBuilder.loadTexts: mp7002NearEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndIntervalEntry.setDescription('An entry in the E1 Interval table.')
mp7002NearEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndIntervalIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002NearEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndIntervalNumber.setDescription('The number of Errored Seconds encountered by an E1 interface in one of the previous 16, individual 15 minute, intervals.')
mp7002NearEndIntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndIntervalStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndIntervalStat.setDescription('Returns a bitwise map of the interface in one of the previous 16, individual 15 minute, intervals. 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 2^9 ES . 1.0 2^7 2.7 f/u 2.6 2^6 . 2.0 2^0 3.7 f/u 3.6 f/u 3.5 f/u 3.4 f/u 3.3 f/u 3.2 2^9 SES . 3.0 2^7 4.7 f/u 4.6 2^6 SES . 4.0 2^0 5.7 f/u 5.6 f/u 5.5 f/u 5.4 f/u 5.3 f/u 5.2 Counter Overflow (>65535) BBE 5.1 2^15 5.0 2^14 6.7 f/u 6.6 2^13 BBE . 6.0 2^7 7.7 f/u 7.6 2^6 BBE . 7.0 2^0 8.7 f/u 8.6 f/u 8.5 f/u 8.4 f/u 8.3 f/u 8.2 2^9 UAS . 8.0 2^7 9.7 f/u 9.6 2^6 UAS . 9.0 2^0 10.7 f/u 10.6 f/u 10.5 f/u 10.4 f/u 10.3 f/u 10.2 Counter Overflow (>65535) LCV 10.1 2^15 10.0 2^14 11.7 f/u 11.6 2^13 LCV . 11.0 2^7 12.7 f/u 12.6 2^6 LCV . 12.0 2^0 ')
mp7002NearEndCurrent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3), )
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrTable.setDescription('The E1 Current24Hr table. 4 hour interval.')
mp7002NearEndCurrent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndCurrent24HrIndex"))
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrEntry.setDescription('An entry in the E1 Total table.')
mp7002NearEndCurrent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002NearEndCurrent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndCurrent24HrStat.setDescription('Returns a bitwise map of the current 24 hour table 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 1: Counter Overflow (>65535) ES 1.1 2^15 1.0 2^14 2.7 f/u 2.6 2^13 ES . 2.0 2^7 3.7 f/u 3.6 2^6 ES . 3.0 2^0 4.7 f/u 4.6 f/u 4.5 f/u 4.4 f/u 4.3 f/u 4.2 1: Counter Overflow (>65535) SES 4.1 2^15 4.0 2^14 5.7 f/u 5.6 2^13 SES . 5.0 2^7 6.7 f/u 6.6 2^6 SES . 6.0 2^0 7.7 f/u 7.6 f/u 7.5 f/u 7.4 f/u 7.3 f/u 7.2 1: Counter Overflow (>65535) BBE 7.1 2^15 7.0 2^14 8.7 f/u 8.6 2^13 BBE . 8.0 2^7 9.7 f/u 9.6 2^6 BBE . 9.0 2^0 10.7 f/u 10.6 f/u 10.5 f/u 10.4 f/u 10.3 f/u 10.2 1: Counter Overflow (>65535) UAS 10.1 2^15 10.0 2^14 11.7 f/u 11.6 2^13 UAS . 11.0 2^7 12.7 f/u 12.6 2^6 UAS . 12.0 2^0 13.7 f/u 13.6 f/u 13.5 f/u 13.4 f/u 13.3 f/u 13.2 1: Counter Overflow (>65535) LCV 13.1 2^15 13.0 2^14 14.7 f/u 14.6 2^13 LCV . 14.0 2^7 15.7 f/u 15.6 2^6 LCV . 15.0 2^0 ')
mp7002NearEndRecent24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4), )
if mibBuilder.loadTexts: mp7002NearEndRecent24HrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndRecent24HrTable.setDescription('The E1 Recent24Hr table. 4 hour interval.')
mp7002NearEndRecent24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndRecent24HrIndex"))
if mibBuilder.loadTexts: mp7002NearEndRecent24HrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndRecent24HrEntry.setDescription('An entry in the E1 Total table.')
mp7002NearEndRecent24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndRecent24HrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndRecent24HrIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002NearEndRecent24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndRecent24HrStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndRecent24HrStat.setDescription('Returns a bitwise map of the current 24 hour table 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 1: Counter Overflow (>65535) ES 1.1 2^15 1.0 2^14 2.7 f/u 2.6 2^13 ES . 2.0 2^7 3.7 f/u 3.6 2^6 ES . 3.0 2^0 4.7 f/u 4.6 f/u 4.5 f/u 4.4 f/u 4.3 f/u 4.2 1: Counter Overflow (>65535) SES 4.1 2^15 4.0 2^14 5.7 f/u 5.6 2^13 SES . 5.0 2^7 6.7 f/u 6.6 2^6 SES . 6.0 2^0 7.7 f/u 7.6 f/u 7.5 f/u 7.4 f/u 7.3 f/u 7.2 1: Counter Overflow (>65535) BBE 7.1 2^15 7.0 2^14 8.7 f/u 8.6 2^13 BBE . 8.0 2^7 9.7 f/u 9.6 2^6 BBE . 9.0 2^0 10.7 f/u 10.6 f/u 10.5 f/u 10.4 f/u 10.3 f/u 10.2 1: Counter Overflow (>65535) UAS 10.1 2^15 10.0 2^14 11.7 f/u 11.6 2^13 UAS . 11.0 2^7 12.7 f/u 12.6 2^6 UAS . 12.0 2^0 13.7 f/u 13.6 f/u 13.5 f/u 13.4 f/u 13.3 f/u 13.2 1: Counter Overflow (>65535) LCV 13.1 2^15 13.0 2^14 14.7 f/u 14.6 2^13 LCV . 14.0 2^7 15.7 f/u 15.6 2^6 LCV . 15.0 2^0 ')
mp7002FarEndCurrent15MinTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5), )
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinTable.setDescription('The mp7002FarEnd Current 15 minute table.')
mp7002FarEndCurrent15MinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndCurrent15MinIndex"))
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinEntry.setDescription('An entry in the mp7002FarEnd Current 15 Minute table.')
mp7002FarEndCurrent15MinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002FarEndCurrent15MinStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndCurrent15MinStat.setDescription('Returns a bitwise map of the far end interface in one of the previous 16, individual 15 minute, intervals. 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 2^9 ES . 1.0 2^7 2.7 f/u 2.6 2^6 . 2.0 2^0 3.7 f/u 3.6 f/u 3.5 f/u 3.4 f/u 3.3 f/u 3.2 2^9 SES . 3.0 2^7 4.7 f/u 4.6 2^6 SES . 4.0 2^0 5.7 f/u 5.6 f/u 5.5 f/u 5.4 f/u 5.3 f/u 5.2 Counter Overflow (>65535) BBE 5.1 2^15 5.0 2^14 6.7 f/u 6.6 2^13 BBE . 6.0 2^7 7.7 f/u 7.6 2^6 BBE . 7.0 2^0 8.7 f/u 8.6 f/u 8.5 f/u 8.4 f/u 8.3 f/u 8.2 2^9 UAS . 8.0 2^7 9.7 f/u 9.6 2^6 UAS . 9.0 2^0 ')
mp7002FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6), )
if mibBuilder.loadTexts: mp7002FarEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndIntervalTable.setDescription('The mp7002FarEnd Interval table.')
mp7002FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndIntervalIndex"), (0, "GDCMP7002-MIB", "mp7002FarEndIntervalNumber"))
if mibBuilder.loadTexts: mp7002FarEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndIntervalEntry.setDescription('An entry in the Interval table.')
mp7002FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndIntervalIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndIntervalNumber.setDescription('A number between 1 and 16, where 1 is the most recently completed 15 minute interval and 16 is the least recently completed 15 minutes interval (assuming that all 16 intervals are valid).')
mp7002FarEndIntervalStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndIntervalStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndIntervalStat.setDescription('Returns a bitwise map of statistics for the far end interface in the current 15 minute interval. 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 2^9 ES . 1.0 2^7 2.7 f/u 2.6 2^6 . 2.0 2^0 3.7 f/u 3.6 f/u 3.5 f/u 3.4 f/u 3.3 f/u 3.2 2^9 SES . 3.0 2^7 4.7 f/u 4.6 2^6 SES . 4.0 2^0 5.7 f/u 5.6 f/u 5.5 f/u 5.4 f/u 5.3 f/u 5.2 Counter Overflow (>65535) BBE 5.1 2^15 5.0 2^14 6.7 f/u 6.6 2^13 BBE . 6.0 2^7 7.7 f/u 7.6 2^6 BBE . 7.0 2^0 8.7 f/u 8.6 f/u 8.5 f/u 8.4 f/u 8.3 f/u 8.2 2^9 UAS . 8.0 2^7 9.7 f/u 9.6 2^6 UAS . 9.0 2^0 ')
mp7002CurrentFarEnd24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7), )
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrTable.setDescription('The Current 24 Hour table.')
mp7002CurrentFarEnd24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002CurrentFarEnd24HrIndex"))
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrEntry.setDescription('An entry in the Current 24 Hr table.')
mp7002CurrentFarEnd24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002CurrentFarEnd24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002CurrentFarEnd24HrStat.setDescription('Returns a bitwise map of statistics for the interface in the current 24 hour interval. 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 1: Counter Overflow (>65535) ES 1.1 2^15 1.0 2^14 2.7 f/u 2.6 2^13 ES . 2.0 2^7 3.7 f/u 3.6 2^6 ES . 3.0 2^0 4.7 f/u 4.6 f/u 4.5 f/u 4.4 f/u 4.3 f/u 4.2 1: Counter Overflow (>65535) SES 4.1 2^15 4.0 2^14 5.7 f/u 5.6 2^13 SES . 5.0 2^7 6.7 f/u 6.6 2^6 SES . 6.0 2^0 7.7 f/u 7.6 f/u 7.5 f/u 7.4 f/u 7.3 f/u 7.2 1: Counter Overflow (>65535) BBE 7.1 2^15 7.0 2^14 8.7 f/u 8.6 2^13 BBE . 8.0 2^7 9.7 f/u 9.6 2^6 BBE . 9.0 2^0 10.7 f/u 10.6 f/u 10.5 f/u 10.4 f/u 10.3 f/u 10.2 1: Counter Overflow (>65535) UAS 10.1 2^15 10.0 2^14 11.7 f/u 11.6 2^13 UAS . 11.0 2^7 12.7 f/u 12.6 2^6 UAS . 12.0 2^0 ')
mp7002RecentFarEnd24HrTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8), )
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrTable.setDescription('The Recent 24 Hour table.')
mp7002RecentFarEnd24HrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002RecentFarEnd24HrIndex"))
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrEntry.setDescription('An entry in the Recent 24 Hr table.')
mp7002RecentFarEnd24HrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002RecentFarEnd24HrStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrStat.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002RecentFarEnd24HrStat.setDescription('Returns a bitwise map of statistics for the interface in the Recent 24 hour interval. 1.7 f/u 1.6 f/u 1.5 f/u 1.4 f/u 1.3 f/u 1.2 1: Counter Overflow (>65535) ES 1.1 2^15 1.0 2^14 2.7 f/u 2.6 2^13 ES . 2.0 2^7 3.7 f/u 3.6 2^6 ES . 3.0 2^0 4.7 f/u 4.6 f/u 4.5 f/u 4.4 f/u 4.3 f/u 4.2 1: Counter Overflow (>65535) SES 4.1 2^15 4.0 2^14 5.7 f/u 5.6 2^13 SES . 5.0 2^7 6.7 f/u 6.6 2^6 SES . 6.0 2^0 7.7 f/u 7.6 f/u 7.5 f/u 7.4 f/u 7.3 f/u 7.2 1: Counter Overflow (>65535) BBE 7.1 2^15 7.0 2^14 8.7 f/u 8.6 2^13 BBE . 8.0 2^7 9.7 f/u 9.6 2^6 BBE . 9.0 2^0 10.7 f/u 10.6 f/u 10.5 f/u 10.4 f/u 10.3 f/u 10.2 1: Counter Overflow (>65535) UAS 10.1 2^15 10.0 2^14 11.7 f/u 11.6 2^13 UAS . 11.0 2^7 12.7 f/u 12.6 2^6 UAS . 12.0 2^0 ')
mp7002UnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9), )
if mibBuilder.loadTexts: mp7002UnavailableTimeRegTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UnavailableTimeRegTable.setDescription('The mp7002 Near End Unavailable Time Register table.')
mp7002UnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002UnavailableTimeRegIndex"), (0, "GDCMP7002-MIB", "mp7002UnavailableTimeRegNumber"))
if mibBuilder.loadTexts: mp7002UnavailableTimeRegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UnavailableTimeRegEntry.setDescription('An entry in the Unavailable Time Register table.')
mp7002UnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UnavailableTimeRegIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002UnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UnavailableTimeRegNumber.setDescription('A number between 1 and 6, where the number is the number of the Unavailable Time Register.')
mp7002UnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegStart.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UnavailableTimeRegStart.setDescription('Start time of one of the Unavailable Time Registers.')
mp7002UnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002UnavailableTimeRegStop.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UnavailableTimeRegStop.setDescription('Stop time of one of the Unavailable Time Registers.')
mp7002FarEndUnavailableTimeRegTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10), )
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegTable.setDescription('The mp7002 Unavailable Time Register table.')
mp7002FarEndUnavailableTimeRegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndUnavailableTimeRegIndex"), (0, "GDCMP7002-MIB", "mp7002FarEndUnavailableTimeRegNumber"))
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegEntry.setDescription('An entry in the Unavailable Time Register table.')
mp7002FarEndUnavailableTimeRegIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. This has the form of a SCinstance which defines the slot, line, drop, and interface. Interface can be Network or, when supported, E1X.')
mp7002FarEndUnavailableTimeRegNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegNumber.setDescription('A number between 1 and 6, where the number is the number of the Unavailable Time Register.')
mp7002FarEndUnavailableTimeRegStart = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegStart.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegStart.setDescription('Start time of one of the Unavailable Time Registers.')
mp7002FarEndUnavailableTimeRegStop = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 6, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegStop.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndUnavailableTimeRegStop.setDescription('Stop time of one of the Unavailable Time Registers.')
mp7002AlarmData = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1))
mp7002NoResponseAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 1))
mp7002DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 2))
mp7002PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 3))
mp7002NvRamCorrupt = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 4))
mp7002UnitFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 5))
mp7002TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 6))
mp7002LCV = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 7))
mp7002LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 8))
mp7002LossOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 9))
mp7002AlarmIndSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 10))
mp7002NEES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 11))
mp7002NEBBE = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 12))
mp7002NESES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 13))
mp7002NEUAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 14))
mp7002FEES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 15))
mp7002FEBBE = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 16))
mp7002FESES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 17))
mp7002FEUAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 18))
mp7002RAI = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 6, 9, 1, 19))
mp7002NearEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 9, 2), )
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigTable.setDescription('The mp7002NearEndAlarmConfigTable contains entries that configure alarm reporting. The structure of the table is such that alarm configuration is supported on a unit and interface basis, and then on an alarm type basis within the interface. For simplicity sake alarms, be they unit or interface related, are represented in one table.')
mp7002NearEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002NearEndAlarmConfigIndex"), (0, "GDCMP7002-MIB", "mp7002NearEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigEntry.setDescription('An entry in the MP7002 Alarm Configuration table.')
mp7002NearEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
mp7002NearEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndAlarmConfigIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
mp7002NearEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NearEndAlarmCountWindow.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndAlarmCountWindow.setDescription('This variable sets/reads the alarm window. This window is used with the alarm threshold to determine how long the alarm should be active before reporting. Default: disabled(1)')
mp7002NearEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NearEndAlarmCountThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NearEndAlarmCountThreshold.setDescription('This function sets/reads the alarm threshold criteria. This threshold is used along with the the alarm window to determine the number of instances in a given time frame for an alarm to occur before the alarm is considered active. Default: thresGT1(1)')
mp7002FarEndAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 9, 3), )
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigTable.setDescription('The mp7002FarEndAlarmConfigTable contains entries that configure alarm reporting. The structure of the table is such that alarm configuration is supported on a unit and interface basis, and then on an alarm type basis within the interface. For simplicity sake alarms, be they unit or interface related, are represented in one table.')
mp7002FarEndAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002FarEndAlarmConfigIndex"), (0, "GDCMP7002-MIB", "mp7002FarEndAlarmConfigIdentifier"))
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigEntry.setDescription('An entry in the MP7002 Alarm Configuration table.')
mp7002FarEndAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
mp7002FarEndAlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndAlarmConfigIdentifier.setDescription('The unique alarm identifier assigned to this alarm type. The format of this identifier is an OBJECT IDENTIFIER that has the following format: {iso(1) org(3) dod(6) internet(1) private(4) enterprises(1) gdc(498) xxx(x) alarm(z) yyy(y) where xxx(x) is the administratively assigned family object identifier (z) is the object identifier for alarms in the family defined MIB and yyy(y) is the administratively assigned alarm type identifier for this alarm.')
mp7002FarEndAlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 1), ("last1sec", 2), ("last10sec", 3), ("last30sec", 4), ("last1min", 5), ("last15min", 6), ("last1hr", 7), ("last24hr", 8), ("infinite", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FarEndAlarmCountWindow.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndAlarmCountWindow.setDescription('This variable sets/reads the alarm window. This window is used with the alarm threshold to determine how long the alarm should be active before reporting. Default: disabled(1)')
mp7002FarEndAlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT1", 1), ("thresGT3", 2), ("thresGT10", 3), ("thresGT100", 4), ("thresGT1000", 5), ("thresGT10000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002FarEndAlarmCountThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002FarEndAlarmCountThreshold.setDescription('This function sets/reads the alarm threshold criteria. This threshold is used along with the the alarm window to determine the number of instances in a given time frame for an alarm to occur before the alarm is considered active. Default: thresGT1(1)')
mp7002LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 6, 9, 4), )
if mibBuilder.loadTexts: mp7002LocalAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LocalAlarmConfigTable.setDescription('The mp7002LocalAlarmConfigTable contains entries that configure alarm reporting. The structure of the table is such that alarm configuration is supported on a unit and interface basis, and then on an alarm type basis within the interface. For simplicity sake alarms, be they unit or interface related, are represented in one table.')
mp7002LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1), ).setIndexNames((0, "GDCMP7002-MIB", "mp7002LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: mp7002LocalAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LocalAlarmConfigEntry.setDescription('An entry in the GDC Local Alarm Configuration table.')
mp7002LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mp7002LocalAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LocalAlarmConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
mp7002UASNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002UASNE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UASNE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002SESNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SESNE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SESNE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002BBENE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002BBENE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002BBENE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002ESNE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ESNE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ESNE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002UASFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002UASFE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002UASFE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002SESFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002SESFE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002SESFE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002BBEFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002BBEFE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002BBEFE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002ESFE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002ESFE.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002ESFE.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LOS.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002LOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LOF.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LOF.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002AIS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002AIS.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002AIS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002TmgLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002TmgLoss.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002TmgLoss.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002LCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002LCVs.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002LCVs.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mp7002NtwkRAI = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 6, 9, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mp7002NtwkRAI.setStatus('mandatory')
if mibBuilder.loadTexts: mp7002NtwkRAI.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mibBuilder.exportSymbols("GDCMP7002-MIB", mp7002NearEndCurrent24HrTable=mp7002NearEndCurrent24HrTable, mp7002ResetStats=mp7002ResetStats, mp7002ConfigEntry=mp7002ConfigEntry, mp7002DiagConfig=mp7002DiagConfig, mp7002NearEndRecent24HrEntry=mp7002NearEndRecent24HrEntry, mp7002SysUpTime=mp7002SysUpTime, mp7002FarEndCurrent15MinStat=mp7002FarEndCurrent15MinStat, mp7002TransmitClockSource=mp7002TransmitClockSource, mp7002AlarmData=mp7002AlarmData, mp7002NearEndAlarmConfigEntry=mp7002NearEndAlarmConfigEntry, mp7002LOS=mp7002LOS, mp7002UASFE=mp7002UASFE, mp7002Performance=mp7002Performance, mp7002LossOfSignal=mp7002LossOfSignal, mp7002Diagnostics=mp7002Diagnostics, mp7002AlarmIndSignal=mp7002AlarmIndSignal, mp7002NearEndIntervalIndex=mp7002NearEndIntervalIndex, mp7002RecentFarEnd24HrTable=mp7002RecentFarEnd24HrTable, mp7002SESFE=mp7002SESFE, mp7002NearEndStatLastInitialized=mp7002NearEndStatLastInitialized, mp7002NearEndCurrent24HrStat=mp7002NearEndCurrent24HrStat, mp7002FarEndAlarmConfigIndex=mp7002FarEndAlarmConfigIndex, mp7002FarEndUnavailableTimeRegStart=mp7002FarEndUnavailableTimeRegStart, mp7002DiagRxErrAlm=mp7002DiagRxErrAlm, mp7002TestLimit=mp7002TestLimit, mp7002NumberOfTimeSlots=mp7002NumberOfTimeSlots, mp7002RecentFarEnd24HrIndex=mp7002RecentFarEnd24HrIndex, mp7002VersionIndex=mp7002VersionIndex, mp7002UnavailableTimeRegEntry=mp7002UnavailableTimeRegEntry, mp7002LCVs=mp7002LCVs, mp7002FarEndIntervalIndex=mp7002FarEndIntervalIndex, mp7002FarEndIntervalTable=mp7002FarEndIntervalTable, mp7002CurrentFarEnd24HrEntry=mp7002CurrentFarEnd24HrEntry, mp7002FarEndIntervalEntry=mp7002FarEndIntervalEntry, mp7002DCCConfigurationIndex=mp7002DCCConfigurationIndex, mp7002LOF=mp7002LOF, mp7002DCCConfigurationTable=mp7002DCCConfigurationTable, mp7002SysTimingIndex=mp7002SysTimingIndex, mp7002FarEndCurrent15MinTable=mp7002FarEndCurrent15MinTable, mp7002FEBBE=mp7002FEBBE, mp7002FarEndAlarmConfigTable=mp7002FarEndAlarmConfigTable, mp7002LedStatus=mp7002LedStatus, mp7002TSBundle1Name=mp7002TSBundle1Name, mp7002FarEndUnavailableTimeRegStop=mp7002FarEndUnavailableTimeRegStop, mp7002E1x=mp7002E1x, mp7002NearEndCurrent24HrIndex=mp7002NearEndCurrent24HrIndex, mp7002NearEndAlarmCountThreshold=mp7002NearEndAlarmCountThreshold, mp7002UnavailableTimeRegStop=mp7002UnavailableTimeRegStop, mp7002NearEndAlarmConfigIndex=mp7002NearEndAlarmConfigIndex, mp7002HighwayAssignIndex=mp7002HighwayAssignIndex, mp7002SoftReset=mp7002SoftReset, mp7002LocalAlarmConfigEntry=mp7002LocalAlarmConfigEntry, mp7002FarEndUnavailableTimeRegNumber=mp7002FarEndUnavailableTimeRegNumber, mp7002Version=mp7002Version, mp7002TSBundle2Name=mp7002TSBundle2Name, mp7002BBEFE=mp7002BBEFE, mp7002MaintenanceTable=mp7002MaintenanceTable, mp7002Alarms=mp7002Alarms, mp7002MaintenanceEntry=mp7002MaintenanceEntry, mp7002TestExceptions=mp7002TestExceptions, mp7002E1XCircuit=mp7002E1XCircuit, mp7002HighwayAssignTable=mp7002HighwayAssignTable, mp7002SysTimingTable=mp7002SysTimingTable, mp7002UnitFailure=mp7002UnitFailure, mp7002FirmwareRev=mp7002FirmwareRev, mp7002UnavailableTimeRegNumber=mp7002UnavailableTimeRegNumber, mp7002DiagTable=mp7002DiagTable, mp7002System=mp7002System, mp7002SysConfig=mp7002SysConfig, mp7002ModelNumber=mp7002ModelNumber, mp7002BBENE=mp7002BBENE, mp7002SetRealTime=mp7002SetRealTime, mp7002AlarmStatus=mp7002AlarmStatus, mp7002FarEndIntervalNumber=mp7002FarEndIntervalNumber, mp7002NearEndAlarmConfigIdentifier=mp7002NearEndAlarmConfigIdentifier, mp7002ESNE=mp7002ESNE, mp7002RcvrRange=mp7002RcvrRange, mp7002FEUAS=mp7002FEUAS, mp7002TmgLoss=mp7002TmgLoss, mp7002RAI=mp7002RAI, mp7002CurrentFarEnd24HrStat=mp7002CurrentFarEnd24HrStat, mp7002MIBversion=mp7002MIBversion, mp7002DiagIndex=mp7002DiagIndex, mp7002UnavailableTimeRegIndex=mp7002UnavailableTimeRegIndex, mp7002NearEndAlarmConfigTable=mp7002NearEndAlarmConfigTable, mp7002NESES=mp7002NESES, mp7002LocalAlarmConfigIndex=mp7002LocalAlarmConfigIndex, mp7002UnavailableTimeRegStart=mp7002UnavailableTimeRegStart, mp7002FarEndAlarmCountThreshold=mp7002FarEndAlarmCountThreshold, mp7002TimeSlot=mp7002TimeSlot, mp7002Framing=mp7002Framing, mp7002DCCConfigurationEntry=mp7002DCCConfigurationEntry, mp7002NEUAS=mp7002NEUAS, mp7002LocalAlarmConfigTable=mp7002LocalAlarmConfigTable, mp7002UnavailableTimeRegTable=mp7002UnavailableTimeRegTable, mp7002RecentFarEnd24HrEntry=mp7002RecentFarEnd24HrEntry, mp7002DefaultInit=mp7002DefaultInit, mp7002FarEndResetStats=mp7002FarEndResetStats, mp7002FarEndCurrent15MinEntry=mp7002FarEndCurrent15MinEntry, mp7002LCV=mp7002LCV, mp7002NearEndValidIntervals=mp7002NearEndValidIntervals, mp7002NEBBE=mp7002NEBBE, mp7002NearEndCurrent15MinTable=mp7002NearEndCurrent15MinTable, mp7002NearEndCurrent24HrEntry=mp7002NearEndCurrent24HrEntry, mp7002NvRamCorrupt=mp7002NvRamCorrupt, mp7002TestResults=mp7002TestResults, mp7002RecentFarEnd24HrStat=mp7002RecentFarEnd24HrStat, mp7002FarEndUnavailableTimeRegEntry=mp7002FarEndUnavailableTimeRegEntry, mp7002PowerUpAlm=mp7002PowerUpAlm, mp7002NetworkConnection=mp7002NetworkConnection, mp7002SESNE=mp7002SESNE, mp7002FarEndValidIntervals=mp7002FarEndValidIntervals, mp7002NearEndRecent24HrTable=mp7002NearEndRecent24HrTable, mp7002TimingLoss=mp7002TimingLoss, mp7002NearEndCurrent15MinEntry=mp7002NearEndCurrent15MinEntry, mp7002NearEndIntervalTable=mp7002NearEndIntervalTable, mp7002NearEndRecent24HrStat=mp7002NearEndRecent24HrStat, mp7002Maintenance=mp7002Maintenance, mp7002FacilityDataLink=mp7002FacilityDataLink, mp7002FarEndUnavailableTimeRegIndex=mp7002FarEndUnavailableTimeRegIndex, mp7002CurrentFarEnd24HrIndex=mp7002CurrentFarEnd24HrIndex, mp7002FallbackClockSource=mp7002FallbackClockSource, mp7002AIS=mp7002AIS, dsx1=dsx1, mp7002MaintenanceLineIndex=mp7002MaintenanceLineIndex, mp7002FarEndCurrent15MinIndex=mp7002FarEndCurrent15MinIndex, mp7002LossOfFrame=mp7002LossOfFrame, mp7002TestPattern=mp7002TestPattern, mp7002NearEndAlarmCountWindow=mp7002NearEndAlarmCountWindow, mp7002ESFE=mp7002ESFE, mp7002ConfigTable=mp7002ConfigTable, mp7002NearEndIntervalStat=mp7002NearEndIntervalStat, gdc=gdc, mp7002SysTimingGen=mp7002SysTimingGen, mp7002NearEndCurrent15MinIndex=mp7002NearEndCurrent15MinIndex, mp7002TestExecutionStatus=mp7002TestExecutionStatus, mp7002NEES=mp7002NEES, mp7002BundleDestination=mp7002BundleDestination, mp7002NearEndRecent24HrIndex=mp7002NearEndRecent24HrIndex, mp7002SysTimingEntry=mp7002SysTimingEntry, mp7002NtwkRAI=mp7002NtwkRAI, mp7002VersionTable=mp7002VersionTable, mp7002E1Circuit=mp7002E1Circuit, mp7002FarEndUnavailableTimeRegTable=mp7002FarEndUnavailableTimeRegTable, mp7002NoResponseAlm=mp7002NoResponseAlm, mp7002FESES=mp7002FESES, mp7002UASNE=mp7002UASNE, mp7002ResetTestResults=mp7002ResetTestResults, mp7002FarEndAlarmConfigIdentifier=mp7002FarEndAlarmConfigIdentifier, mp7002TimeSlotBundle=mp7002TimeSlotBundle, mp7002VersionEntry=mp7002VersionEntry, mp7002CurrentFarEnd24HrTable=mp7002CurrentFarEnd24HrTable, mp7002ConfigIndex=mp7002ConfigIndex, mp7002LineCoding=mp7002LineCoding, mp7002FarEndAlarmConfigEntry=mp7002FarEndAlarmConfigEntry, mp7002NearEndIntervalEntry=mp7002NearEndIntervalEntry, mp7002FarEndStatLastInitialized=mp7002FarEndStatLastInitialized, mp7002Bandwidth=mp7002Bandwidth, mp7002HighwayAssignEntry=mp7002HighwayAssignEntry, mp7002StartTimeSlot=mp7002StartTimeSlot, mp7002ExecuteAssign=mp7002ExecuteAssign, mp7002NearEndCurrent15MinStat=mp7002NearEndCurrent15MinStat, mp7002NearEndIntervalNumber=mp7002NearEndIntervalNumber, mp7002Configuration=mp7002Configuration, mp7002DiagEntry=mp7002DiagEntry, mp7002FEES=mp7002FEES, mp7002InterfaceType=mp7002InterfaceType, mp7002FarEndIntervalStat=mp7002FarEndIntervalStat, mp7002SystemTimingGenStatus=mp7002SystemTimingGenStatus, mp7002FarEndAlarmCountWindow=mp7002FarEndAlarmCountWindow)
