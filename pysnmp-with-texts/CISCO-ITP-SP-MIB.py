#
# PySNMP MIB module CISCO-ITP-SP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ITP-SP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:03:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
CItpTcTimerMtp3T28, CItpTcTimerLinkActRetry, CItpTcTimerMtp3T06, CItpTcTimerMtp3T20, CItpTcAclId, CItpTcTimerMtp3T18, CItpTcQos, CItpTcTimerMtp3T13, CItpTcDisplayPC, CItpTcTimerMtp3T16, CItpTcTimerMtp3T29, CItpTcTimerMtp3T01, CItpTcTimerMtp3T07, CItpTcTimerMtp2T06, CItpTcTimerMtp2T02, CItpTcLinkType, CItpTcTimerMtp3T08, CItpTcTimerMtp3T11, CItpTcTimerMtp3T12, CItpTcTimerLinkTest, CItpTcCLLI, CItpTcTimerMtp3T02, CItpTcPointCode, CItpTcRouteTableName, CItpTcTimerLinkMessage, CItpTcTimerMtp3T03, CItpTcTimerMtp2T05, CItpTcTimerMtp3T14, CItpTcTimerMtp2T04N, CItpTcTimerMtp2T03, CItpTcTimerMtp2T01, CItpTcTimerMtp3T25, CItpTcTimerMtp3T30, CItpTcTimerMtp2T04E, CItpTcTimerMtp3T10, CItpTcTimerMtp3T22, CItpTcTimerMtp3T32, CItpTcTimerMtp3T21, CItpTcTimerMtp3T04, CItpTcTimerMtp3T24, CItpTcTimerMtp3T17, CItpTcTimerMtp3T34, CItpTcLinkSLC, CItpTcTimerMtp3T15, CItpTcTimerMtp3T33, CItpTcPointCodeType, CItpTcSs7Variant, CItpTcTimerMtp3T27, CItpTcTimerMtp3T31, CItpTcLinksetId, CItpTcTimerMtp3T05, CItpTcTimerMtp3T26, CItpTcTimerMtp3T19, CItpTcNetworkIndicator, CItpTcTimerMtp3T23, CItpTcTimerMtp2T07 = mibBuilder.importSymbols("CISCO-ITP-TC-MIB", "CItpTcTimerMtp3T28", "CItpTcTimerLinkActRetry", "CItpTcTimerMtp3T06", "CItpTcTimerMtp3T20", "CItpTcAclId", "CItpTcTimerMtp3T18", "CItpTcQos", "CItpTcTimerMtp3T13", "CItpTcDisplayPC", "CItpTcTimerMtp3T16", "CItpTcTimerMtp3T29", "CItpTcTimerMtp3T01", "CItpTcTimerMtp3T07", "CItpTcTimerMtp2T06", "CItpTcTimerMtp2T02", "CItpTcLinkType", "CItpTcTimerMtp3T08", "CItpTcTimerMtp3T11", "CItpTcTimerMtp3T12", "CItpTcTimerLinkTest", "CItpTcCLLI", "CItpTcTimerMtp3T02", "CItpTcPointCode", "CItpTcRouteTableName", "CItpTcTimerLinkMessage", "CItpTcTimerMtp3T03", "CItpTcTimerMtp2T05", "CItpTcTimerMtp3T14", "CItpTcTimerMtp2T04N", "CItpTcTimerMtp2T03", "CItpTcTimerMtp2T01", "CItpTcTimerMtp3T25", "CItpTcTimerMtp3T30", "CItpTcTimerMtp2T04E", "CItpTcTimerMtp3T10", "CItpTcTimerMtp3T22", "CItpTcTimerMtp3T32", "CItpTcTimerMtp3T21", "CItpTcTimerMtp3T04", "CItpTcTimerMtp3T24", "CItpTcTimerMtp3T17", "CItpTcTimerMtp3T34", "CItpTcLinkSLC", "CItpTcTimerMtp3T15", "CItpTcTimerMtp3T33", "CItpTcPointCodeType", "CItpTcSs7Variant", "CItpTcTimerMtp3T27", "CItpTcTimerMtp3T31", "CItpTcLinksetId", "CItpTcTimerMtp3T05", "CItpTcTimerMtp3T26", "CItpTcTimerMtp3T19", "CItpTcNetworkIndicator", "CItpTcTimerMtp3T23", "CItpTcTimerMtp2T07")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, Integer32, Counter32, Bits, Gauge32, TimeTicks, ModuleIdentity, Counter64, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "Integer32", "Counter32", "Bits", "Gauge32", "TimeTicks", "ModuleIdentity", "Counter64", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType")
RowStatus, TextualConvention, DisplayString, TimeStamp, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TimeStamp", "TruthValue")
ciscoItpSpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 232))
ciscoItpSpMIB.setRevisions(('2003-02-18 00:00', '2002-03-07 00:00', '2002-01-23 00:00', '2001-08-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoItpSpMIB.setRevisionsDescriptions(('The ability to allow multiple instances of Signalling Points to run in the same device has introduce a new index structure. All objects in this MIB will be deprecated and replaced by objects in the CISCO-ITP-GSP-MIB.my MIB.', 'Added support for notification on link utilization. Textual conventions: CItpSpSampleInterval CItpSpPercentThreshold CItpSpLinkUtilization CItpSpLinkCapacity CItpSpLinkUtilizationState Scalars: cItpSpUtilSampleInterval cItpSpUtilThreshold cItpSpUtilAbateDelta Linkset table: cItpSpLinksetPlanCapacity - deprecated. Link table: cItpSpLinkPlanCapacityRcvd cItpSpLinkUtilThresholdRcvd cItpSpLinkUtilizationRcvd cItpSpLinkUtilStateRcvd cItpSpLinkL2BytesRcvd cItpSpLinkPlanCapacitySent cItpSpLinkUtilThresholdSent cItpSpLinkUtilizationSent cItpSpLinkUtilStateSent cItpSpLinkL2BytesSent Notification enable: cItpSpLinkUtilNotifEnabled Notification: cItpSpLinkRcvdUtilChange cItpSpLinkSentUtilChange', 'Modified the following objects: cItpSpLinkType: Added new high speed link type to textual convention CItpTcLinkType. cItpSpVariant: Added new China SS7 variant to textual convention CItpTcSs7Variant. Add new enumerate Added the following objects: cItpSpDistSccpUnseq cItpSpSummaryRoutingException cItpSpLinksetVariant cItpSpLinkDroppedPkts cItpSpLinkTransmittedLssu cItpSpLinkReceivedLssu cItpSpLinkProtocolDetails cItpSpLinkLsacState cItpSpLinkTsrcState cItpSpLinkTcocState cItpSpLinkTcocLocalBSNT cItpSpLinkTcocRemoteBSNT cItpSpLinkTcbcState cItpSpLinkReceivedSIB cItpSpLinkTransmittedSIB cItpSpLinkMtp2ExpiredT01 cItpSpLinkMtp2ExpiredT02 cItpSpLinkMtp2ExpiredT03 cItpSpLinkMtp2ExpiredT04 cItpSpLinkMtp2ExpiredT05 cItpSpLinkMtp2ExpiredT06 cItpSpLinkMtp2ExpiredT07 cItpSpLinkOMAERMCount cItpSpLinkOMAERMFailCount cItpSpLinkOMSURMCount cItpSpLinkOMSURMFailCount', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoItpSpMIB.setLastUpdated('200302180000Z')
if mibBuilder.loadTexts: ciscoItpSpMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoItpSpMIB.setContactInfo(' Cisco Systems, Inc Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ss7@cisco.com')
if mibBuilder.loadTexts: ciscoItpSpMIB.setDescription("The MIB for managing Signalling Points and its associated messages transported over Signalling System No. 7 (SS7) Network via Cisco IP Transfer Point. The Cisco IP Transfer Point (ITP) is a hardware and software solution that transports SS7 traffic using IP. Each ITP node provides function similar to SS7 Signalling point. The relevant ITU documents describing this technology is the ITU Q series, including ITU Q.700: Introduction to CCITT Signalling System No. 7 and ITU Q.701 Functional description of the message transfer part (MTP) of Signalling System No. 7. This MIB models the SP as follows: The SP is associated with one or more point codes. Each pointcode is associated with: an SS7 variant, timers, and linksets. Linksets contain: destination point code linkset byte/packet statistics, accounting information per Destination Point Code(DPC) and Originating Point Code (OPC) violation accounting information per DPC and OPC links, reference to incoming and outgoing ACL reference to a routing table for each SS7 packet type Links contain: timers, and byte/packet statistics. The figure below provides a diagrammatic representation of the relationships. Each box may be replicated providing multiple instances of the object. '--->' indicates that the object to the left contains a reference to the object to the right. '###>' indicates that the object to the left contains an instance of the object to the right. The down arrow indicates that the object being pointed to contains snmp indices of the objects above it. ________________ | | | Sp |###> point code, timers |________________| | V ________________ | | | |---> Accounting | Linkset |---> Violation Accounting | |---> Incoming ACL | |---> Outgoing ACL |________________|---> Routing Tables. | V ________________ | Link |###> timers |________________|---> statistics Abbreviations: AERM - Alignment Error Rate Monitor CLLI - Common Language Location Codes HSL - High Speed Link (ATM based) LLSC - link set control LSAC - Signalling link activity control LSDA - Signalling data link allocation LSLA - Signalling link activation LSLD - Signalling link deactivation LSLR - Signalling link restoration LSSU - Link Status Signal Unit LSTA - Signalling terminal allocation MTP - Message Transport Protocol MTP2 - Layer 2 of Message Transport Protocol MTP3 - Layer 3 of Message Transport Protocol PC - Point Code RTN - RouteTableName SCTP - Stream Transmission Protocol(RFC 2960) SIB - Status Indicator Busy SP - Signalling Point SS7 - System No. 7 (SS7) Network SUERM - Signal Unit Error Rate Monitor TCBC - Changeback control TCOC - Changeover control TCRC - Controlled rerouting control TFRC - Forced rerouting control TLAC - Link availability control TPRC - Signalling point restart control TRCC - Signalling route set congestion control TSFC - Signalling traffic flow control TSRC - Signalling routing control ")
cItpSpMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 0))
cItpSpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 1))
cItpSpMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 2))
cItpSpScalars = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1))
cItpSpPointCode = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2))
cItpSpLinkset = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3))
cItpSpLink = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4))
cItpSpNotificationsEnable = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 5))
class CItpSpSequenceNumber(TextualConvention, Unsigned32):
    description = 'This textual convention defines all of the allowed values for a sequence of integers used by the SS7 protocol to transmit and acknowledge packets. The range is specified from 0 to maximum allowed value for extended sequence numbers. The actual range will depend on the type of link and the variant. The value will increase and then wrap to the zero value. The following are examples of valid sequences. 0..126,127,0.. 0..254,255,0.. 0..32766,32767,0.. 0..65534,65535,0..'
    status = 'deprecated'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class CItpSpSampleInterval(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values for a sample interval. This value is specified in seconds and ranges from 1 minute to 1 hour.'
    status = 'deprecated'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(60, 3600)

class CItpSpPercentThreshold(TextualConvention, Unsigned32):
    description = 'This textual convention defines the allowed values for a thresholds specified as percentage of link utilization. A value of zero indicates that this specific threshold is to be ignored.'
    status = 'deprecated'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

class CItpSpLinkUtilization(TextualConvention, Unsigned32):
    description = 'This textual convention defines a range of percentages that represent the utilization of a link. Any value over 999 will be represented as 999. For SS7 links based on IP/SCTP the link capacity is not directly related to the interface speed used to transmit packets. This is different from serial and HSL links. The capacity of these types of links depend on the amount of resources available in the IP cloud. The IP cloud must be provisioned to support traffic for all SS7 links. In order to monitor link utilization on IP/SCTP based SS7 links a planned capacity must be specified. If this value is incorrectly estimated or traffic exceeds this expected value link utilization may exceed 100 percent. This is possible because the IP cloud may be provisioned with additional capacity or may discard less important traffic based on Qos parameters. When a SS7 link has not be configured for link utilization monitoring this value object will have a value of zero.'
    status = 'deprecated'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 999)

class CItpSpLinkCapacity(TextualConvention, Unsigned32):
    description = 'This textual convention defines the planned capacity of a SS7 link in bit per second. If the link type is serial or HSL the link capacity can be obtained from information in the IF-MIB. If the link type is sctp/ip a value of zero indicates that link utilization should not be calculated for this SS7 link.'
    status = 'deprecated'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(56000, 2147483647), )
class CItpSpLinkUtilizationState(TextualConvention, Integer32):
    description = "Link Utilization State as follows: 'unMonitored(0)' - traffic for a specified direction is not being monitored. 'underThreshold(1)' - traffic for a specified direction on a link is below the specified threshold. 'overThreshold(2)' - traffic for a specified direction on a link is above to or exceeds the specified threshold."
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unMonitored", 0), ("underThreshold", 1), ("overThreshold", 2))

cItpSpVariant = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 1), CItpTcSs7Variant()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpVariant.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpVariant.setDescription('The SS7 variant implemented in this SP.')
cItpSpCLLICode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 2), CItpTcCLLI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpCLLICode.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpCLLICode.setDescription('Common Language Location Codes (CLLI Codes).')
cItpSpDisplayName = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpDisplayName.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpDisplayName.setDescription('A short identifier for the Signalling point. This value can be set by system administrator or defaults to the local point code formatted as an ASCII string.')
cItpSpDescription = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpDescription.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpDescription.setDescription('A textual description for the Signalling point.')
cItpSpMtp2T01 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 5), CItpTcTimerMtp2T01()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T01.setDescription('Alignment ready timer.')
cItpSpMtp2T02 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 6), CItpTcTimerMtp2T02()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T02.setDescription('Not aligned timer.')
cItpSpMtp2T03 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 7), CItpTcTimerMtp2T03()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T03.setDescription('Aligned timer.')
cItpSpMtp2T04E = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 8), CItpTcTimerMtp2T04E()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T04E.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T04E.setDescription('Proving period timer emergency timer. ')
cItpSpMtp2T04N = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 9), CItpTcTimerMtp2T04N()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T04N.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T04N.setDescription('Proving period timer normal timer.')
cItpSpMtp2T05 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 10), CItpTcTimerMtp2T05()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T05.setDescription('Sending SIB timer.')
cItpSpMtp2T06 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 11), CItpTcTimerMtp2T06()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T06.setDescription('Remote congestion timer. ')
cItpSpMtp2T07 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 12), CItpTcTimerMtp2T07()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp2T07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp2T07.setDescription('Excessive delay of acknowledgement timer.')
cItpSpMtp3T01 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 13), CItpTcTimerMtp3T01()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T01.setDescription('Delay to avoid message mis-sequencing on changeover.')
cItpSpMtp3T02 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 14), CItpTcTimerMtp3T02()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T02.setDescription('Waiting for changeover acknowledgement.')
cItpSpMtp3T03 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 15), CItpTcTimerMtp3T03()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T03.setDescription('Time controlled diversion-delay to avoid mis-sequencing on change back.')
cItpSpMtp3T04 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 16), CItpTcTimerMtp3T04()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T04.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T04.setDescription('Waiting for change back acknowledgement (first attempt).')
cItpSpMtp3T05 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 17), CItpTcTimerMtp3T05()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T05.setDescription('Waiting for change back acknowledgement (second attempt).')
cItpSpMtp3T06 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 18), CItpTcTimerMtp3T06()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T06.setDescription('Delay to avoid message mis-sequencing on controlled rerouting.')
cItpSpMtp3T07 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 19), CItpTcTimerMtp3T07()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T07.setDescription('Waiting for Signalling data link connection acknowledgement.')
cItpSpMtp3T08 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 20), CItpTcTimerMtp3T08()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T08.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T08.setDescription('Transfer prohibited inhibition timer (transient solution).')
cItpSpMtp3T10 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 21), CItpTcTimerMtp3T10()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T10.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T10.setDescription('Waiting to repeat Signalling routeset test message.')
cItpSpMtp3T11 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 22), CItpTcTimerMtp3T11()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T11.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T11.setDescription('Transfer restricted timer. (This is one way of implementing the function described in 13.4/Q.704 and mainly intended to simplify SPs.).')
cItpSpMtp3T12 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 23), CItpTcTimerMtp3T12()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T12.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T12.setDescription('Waiting for uninhibit acknowledgement.')
cItpSpMtp3T13 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 24), CItpTcTimerMtp3T13()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T13.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T13.setDescription('Waiting for force uninhibit.')
cItpSpMtp3T14 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 25), CItpTcTimerMtp3T14()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T14.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T14.setDescription('Waiting for inhibition acknowledgement.')
cItpSpMtp3T15 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 26), CItpTcTimerMtp3T15()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T15.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T15.setDescription('Waiting to start Signalling routeset congestion test.')
cItpSpMtp3T16 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 27), CItpTcTimerMtp3T16()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T16.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T16.setDescription('Waiting for routeset congestion status update.')
cItpSpMtp3T17 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 28), CItpTcTimerMtp3T17()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T17.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T17.setDescription('Delay to avoid oscillation of initial alignment failure and link restart.')
cItpSpMtp3T18 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 29), CItpTcTimerMtp3T18()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T18.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T18.setDescription('This timers servers different function based on the variant. ANSI: Repeat TFR once by response method ITU: MTP restart link supervision')
cItpSpMtp3T19 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 30), CItpTcTimerMtp3T19()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T19.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T19.setDescription('This timers servers different function based on the variant. ANSI: failed craft timer referral timer ITU: supervision timer during MTP restart')
cItpSpMtp3T20 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 31), CItpTcTimerMtp3T20()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T20.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T20.setDescription('This timers servers different function based on the variant. ANSI: waiting to repeat local inhibit test ITU: MTP restart timer at the Signalling point')
cItpSpMtp3T21 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 32), CItpTcTimerMtp3T21()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T21.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T21.setDescription('This timers servers different function based on the variant. ANSI: waiting to repeat remote inhibit test) ITU: MTP restart timer at adjacent Signalling point')
cItpSpMtp3T22 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 33), CItpTcTimerMtp3T22()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T22.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T22.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting for Signalling links avail ITU: local inhibit test timer')
cItpSpMtp3T23 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 34), CItpTcTimerMtp3T23()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T23.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T23.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting to receive all TRA msgs ITU: remote inhibit test timer')
cItpSpMtp3T24 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 35), CItpTcTimerMtp3T24()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T24.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T24.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting to broadcast all TRA msgs ITU: stabilizing timer after local processor outage')
cItpSpMtp3T25 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 36), CItpTcTimerMtp3T25()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T25.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T25.setDescription('Timer at Signalling point (SP) adjacent to restarting SP, waiting for traffic restart allowed message.')
cItpSpMtp3T26 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 37), CItpTcTimerMtp3T26()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T26.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T26.setDescription('Timer at restarting SP waiting to repeat traffic restart waiting message.')
cItpSpMtp3T27 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 38), CItpTcTimerMtp3T27()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T27.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T27.setDescription('Minimum duration of unavailability for full restart.')
cItpSpMtp3T28 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 39), CItpTcTimerMtp3T28()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T28.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T28.setDescription('Timer at SP adjacent to restarting SP waiting for traffic restart waiting message.')
cItpSpMtp3T29 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 40), CItpTcTimerMtp3T29()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T29.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T29.setDescription('Timer started when TRA sent in response to unexpected TRA or TRW.')
cItpSpMtp3T30 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 41), CItpTcTimerMtp3T30()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T30.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T30.setDescription('Timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW.')
cItpSpMtp3T31 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 42), CItpTcTimerMtp3T31()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T31.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T31.setDescription('False link congestion detection timer.')
cItpSpMtp3T32 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 43), CItpTcTimerMtp3T32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T32.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T32.setDescription('Link oscillation timer - Procedure A.')
cItpSpMtp3T33 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 44), CItpTcTimerMtp3T33()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T33.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T33.setDescription('Probation timer for link oscillation - Procedure B.')
cItpSpMtp3T34 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 45), CItpTcTimerMtp3T34()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpMtp3T34.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMtp3T34.setDescription('Suspension timer for link oscillation - Procedure B.')
cItpSpTimerLinkTest = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 46), CItpTcTimerLinkTest()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpTimerLinkTest.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpTimerLinkTest.setDescription('Signalling Link test acknowledgement timer.')
cItpSpTimerLinkMessage = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 47), CItpTcTimerLinkMessage()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpTimerLinkMessage.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpTimerLinkMessage.setDescription('Interval timer for sending test messages.')
cItpSpTimerLinkActRetry = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 48), CItpTcTimerLinkActRetry()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpTimerLinkActRetry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpTimerLinkActRetry.setDescription('Link activation retry timer.')
cItpSpTFR = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 49), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpTFR.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpTFR.setDescription("Allow transfer restricted messages. 'true' TFR are allowed. 'false' TFR are disabled.")
cItpSpCongestionsLevels = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 50), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpCongestionsLevels.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpCongestionsLevels.setDescription("Allow multiple congestion levels. 'true' multiple congestion levels are allowed. 'false' multiple congestion levels are disabled.")
cItpSpFastRestart = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 51), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpFastRestart.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpFastRestart.setDescription("The support for fast restarts as follows. 'true' fast restart is enabled. 'false' fast restart is disabled.")
cItpSpDistSccpUnseq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 52), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpDistSccpUnseq.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpDistSccpUnseq.setDescription("Evenly distribute Class 0 SCCP messages as follows. 'true' Evenly distribute 0 SCCP messages is enabled. 'false' Evenly distribute 0 SCCP messages is disabled.")
cItpSpSummaryRoutingException = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 53), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpSummaryRoutingException.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpSummaryRoutingException.setDescription("This object is used to control the usage of the summary route when both a summary route (or ANSI cluster route) and a full point-code route (within that summary) are configured. The object is used to indicate whether the summary route is to be used when the full point-code destination is inaccessible as follows. 'true' Use summary routing. 'false' Do not use summary routing.")
cItpSpUtilSampleInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 54), CItpSpSampleInterval().clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpUtilSampleInterval.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpUtilSampleInterval.setDescription('This object specifies the time interval used to monitor the utilization of SS7 links. This object in combination with cItpSpUtilThreshold, cItpSpLinkPlanCapacitySent and cItpSpLinkPlanCapacityRcvd will be used to calculate utilization of SS7 links. Changes to the polling interval will take effect after the completion of the current sample interval.')
cItpSpUtilThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 55), CItpSpPercentThreshold().clone(40)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpUtilThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpUtilThreshold.setDescription('This object specifies the threshold of usage for all SS7 links in SP. This object is used to determine when to generate the cItpSpLinkRcvdUtilChange or cItpSpLinkSentUtilChange notifications. A value of zero indicates that no default threshold is specified. Therefore, only links with non-zero values for cItpSpLinkUtilThresholdRcvd or cItpSpLinkUtilThresholdSent will generate notifications based on link utilization. Changes to the utilization threshold will take effect at the end of the current interval.')
cItpSpUtilAbateDelta = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 1, 56), CItpSpPercentThreshold()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpUtilAbateDelta.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpUtilAbateDelta.setDescription('This object allows the falling threshold to be lower than the rising theshold when calculating whether to generate the cItpSpLinkUtilThresholdRcvd or cItpSpLinkUtilThresholdSent notifications. This is done to prevent generating notifications for slight changes in traffic.')
cItpSpPointCodeTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1), )
if mibBuilder.loadTexts: cItpSpPointCodeTable.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeTable.setDescription("A table that contain the varies types of point code defined for this Signalling point.' Entries are added to this table via cItpSpRowStatus in accordance with the RowStatus convention.")
cItpSpPointCodeTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-ITP-SP-MIB", "cItpSpPointCodeNi"), (0, "CISCO-ITP-SP-MIB", "cItpSpPointCodeBin"))
if mibBuilder.loadTexts: cItpSpPointCodeTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeTableEntry.setDescription('A list of SP attributes.')
cItpSpPointCodeNi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1, 1, 1), CItpTcNetworkIndicator())
if mibBuilder.loadTexts: cItpSpPointCodeNi.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeNi.setDescription('The network Indicator for this pointcode.')
cItpSpPointCodeBin = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1, 1, 2), CItpTcPointCode())
if mibBuilder.loadTexts: cItpSpPointCodeBin.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeBin.setDescription('The point code for this SP.')
cItpSpPointCodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1, 1, 3), CItpTcPointCodeType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpPointCodeType.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeType.setDescription('The function of this point code')
cItpSpPointCodeDisplay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1, 1, 4), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpPointCodeDisplay.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeDisplay.setDescription('The point code for this SP.')
cItpSpPointCodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 2, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpPointCodeRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpSpPointCodeTable following the RowStatus textual convention.')
cItpSpLinksetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1), )
if mibBuilder.loadTexts: cItpSpLinksetTable.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetTable.setDescription('A table of linksets for this SP. ')
cItpSpLinksetTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-ITP-SP-MIB", "cItpSpLinksetName"))
if mibBuilder.loadTexts: cItpSpLinksetTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetTableEntry.setDescription('A list of SP linkset attributes for a particular SP entity.')
cItpSpLinksetName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 1), CItpTcLinksetId())
if mibBuilder.loadTexts: cItpSpLinksetName.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetName.setDescription('The name of the linkset.')
cItpSpLinksetSourcePointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 2), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSourcePointCode.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSourcePointCode.setDescription('The point code to which this linkset is connected.')
cItpSpLinksetSourceDisplayPC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 3), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinksetSourceDisplayPC.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSourceDisplayPC.setDescription('The point code to which this linkset is connected.')
cItpSpLinksetAdjacentPointCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 4), CItpTcPointCode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetAdjacentPointCode.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetAdjacentPointCode.setDescription('The point code to which this linkset is connected.')
cItpSpLinksetAdjacentDisplayPC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 5), CItpTcDisplayPC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinksetAdjacentDisplayPC.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetAdjacentDisplayPC.setDescription('The point code to which this linkset is connected.')
cItpSpLinksetState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("shutdown", 2), ("unavailable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinksetState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetState.setDescription("The list of possible linkset states. 'available' : Traffic may flow over this linkset 'shutdown' : This linkset has been forced to an unavailable state by an administrative action. 'unavailable': The linkset is currently unable to support traffic. Activation of this linkset will occur as required by protocol.")
cItpSpLinksetInboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 7), CItpTcAclId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetInboundAcl.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetInboundAcl.setDescription('Packets are filtered against this access control list before they are passed to the routing function. A value of zero indicates that no access control list is present.')
cItpSpLinksetOutboundAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 8), CItpTcAclId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetOutboundAcl.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetOutboundAcl.setDescription('Packets are filtered against this access control list after they have passed through the routing function. A value of zero indicates that no access control list is present.')
cItpSpLinksetSnmmRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 9), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSnmmRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSnmmRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSnmmRTN.setDescription('The routing table for Signalling network management messages.')
cItpSpLinksetSntmRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 10), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSntmRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSntmRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSntmRTN.setDescription('The routing table for Signalling network test and maintenance messages.')
cItpSpLinksetSpare2RTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 11), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSpare2RTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSpare2RTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSpare2RTN.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cItpSpLinksetSccpRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 12), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSccpRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSccpRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSccpRTN.setDescription('The routing table for SS7 Signalling Connection Control Part(SCCP) messages.')
cItpSpLinksetTupRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 13), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetTupRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetTupRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetTupRTN.setDescription('The routing table for Telephone User Part(TUP) messages.')
cItpSpLinksetIsupRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 14), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetIsupRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetIsupRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetIsupRTN.setDescription('The routing table for ISDN User Part messages.')
cItpSpLinksetDupcRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 15), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetDupcRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetDupcRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetDupcRTN.setDescription('The routing table for Data User Part (call and circuit-related messages).')
cItpSpLinksetDupfRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 16), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetDupfRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetDupfRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetDupfRTN.setDescription('The routing table for Data User Part (facility registration and cancellation messages).')
cItpSpLinksetMtupRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 17), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtupRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetMtupRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtupRTN.setDescription('The routing table for MTP Testing User Part messages.')
cItpSpLinksetBisupRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 18), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetBisupRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetBisupRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetBisupRTN.setDescription('The routing table for Broadband ISDN User Part(BISUP) messages.')
cItpSpLinksetSisupRTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 19), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSisupRTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSisupRTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSisupRTN.setDescription('The routing table for Satellite ISDN User Part(SISUP) messages.')
cItpSpLinksetSpare11RTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 20), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSpare11RTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSpare11RTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSpare11RTN.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cItpSpLinksetSpare12RTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 21), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSpare12RTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSpare12RTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSpare12RTN.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cItpSpLinksetSpare13RTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 22), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSpare13RTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSpare13RTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSpare13RTN.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cItpSpLinksetSpare14RTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 23), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSpare14RTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSpare14RTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSpare14RTN.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cItpSpLinksetSpare15RTN = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 24), CItpTcRouteTableName()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetSpare15RTN.setReference('ITU Q.704 Signalling network functions and messages, section 14.2.1.')
if mibBuilder.loadTexts: cItpSpLinksetSpare15RTN.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetSpare15RTN.setDescription('This routing table has been defined as a spare routing table by the standards committee.')
cItpSpLinksetAccountingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetAccountingEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetAccountingEnabled.setDescription("This indicates if accounting for this linkset is enabled. 'true' Indicates that the accounting function is enabled for this linkset and is being accumulated in cItpSpAccountingTable. 'false' Indicates that the accounting function is disabled.")
cItpSpLinksetNumLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinksetNumLinks.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetNumLinks.setDescription('The number of links in this linkset.')
cItpSpLinksetDurationInService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 27), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinksetDurationInService.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetDurationInService.setDescription('Time linkset was providing service related to Q752/Table 4.2.')
cItpSpLinksetDurationOutService = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 28), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinksetDurationOutService.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetDurationOutService.setDescription('Time linkset was Out-of-Service as required for Q752/Table 4.2.')
cItpSpLinksetMtp2T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 29), CItpTcTimerMtp2T01()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T01.setDescription('Alignment ready timer.')
cItpSpLinksetMtp2T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 30), CItpTcTimerMtp2T02()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T02.setDescription('Not aligned timer.')
cItpSpLinksetMtp2T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 31), CItpTcTimerMtp2T03()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T03.setDescription('Aligned timer.')
cItpSpLinksetMtp2T04E = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 32), CItpTcTimerMtp2T04E()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T04E.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T04E.setDescription('Proving period timer emergency timer. ')
cItpSpLinksetMtp2T04N = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 33), CItpTcTimerMtp2T04N()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T04N.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T04N.setDescription('Proving period timer normal timer.')
cItpSpLinksetMtp2T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 34), CItpTcTimerMtp2T05()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T05.setDescription('Sending SIB timer.')
cItpSpLinksetMtp2T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 35), CItpTcTimerMtp2T06()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T06.setDescription('Remote congestion timer. ')
cItpSpLinksetMtp2T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 36), CItpTcTimerMtp2T07()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp2T07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp2T07.setDescription('Excessive delay of acknowledgement timer.')
cItpSpLinksetMtp3T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 37), CItpTcTimerMtp3T01()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T01.setDescription('Delay to avoid message mis-sequencing on changeover.')
cItpSpLinksetMtp3T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 38), CItpTcTimerMtp3T02()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T02.setDescription('Waiting for changeover acknowledgement.')
cItpSpLinksetMtp3T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 39), CItpTcTimerMtp3T03()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T03.setDescription('Time controlled diversion-delay to avoid mis-sequencing on change back.')
cItpSpLinksetMtp3T04 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 40), CItpTcTimerMtp3T04()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T04.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T04.setDescription('Waiting for change back acknowledgement (first attempt).')
cItpSpLinksetMtp3T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 41), CItpTcTimerMtp3T05()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T05.setDescription('Waiting for change back acknowledgement (second attempt).')
cItpSpLinksetMtp3T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 42), CItpTcTimerMtp3T06()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T06.setDescription('Delay to avoid message mis-sequencing on controlled rerouting.')
cItpSpLinksetMtp3T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 43), CItpTcTimerMtp3T07()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T07.setDescription('Waiting for Signalling data link connection acknowledgement.')
cItpSpLinksetMtp3T08 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 44), CItpTcTimerMtp3T08()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T08.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T08.setDescription('Transfer prohibited inhibition timer (transient solution).')
cItpSpLinksetMtp3T10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 45), CItpTcTimerMtp3T10()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T10.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T10.setDescription('Waiting to repeat Signalling routeset test message.')
cItpSpLinksetMtp3T11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 46), CItpTcTimerMtp3T11()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T11.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T11.setDescription('Transfer restricted timer. (This is one way of implementing the function described in 13.4/Q.704 and mainly intended to simplify SPs.).')
cItpSpLinksetMtp3T12 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 47), CItpTcTimerMtp3T12()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T12.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T12.setDescription('Waiting for uninhibit acknowledgement.')
cItpSpLinksetMtp3T13 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 48), CItpTcTimerMtp3T13()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T13.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T13.setDescription('Waiting for force uninhibit.')
cItpSpLinksetMtp3T14 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 49), CItpTcTimerMtp3T14()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T14.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T14.setDescription('Waiting for inhibition acknowledgement.')
cItpSpLinksetMtp3T15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 50), CItpTcTimerMtp3T15()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T15.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T15.setDescription('Waiting to start Signalling routeset congestion test.')
cItpSpLinksetMtp3T16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 51), CItpTcTimerMtp3T16()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T16.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T16.setDescription('Waiting for routeset congestion status update.')
cItpSpLinksetMtp3T17 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 52), CItpTcTimerMtp3T17()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T17.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T17.setDescription('Delay to avoid oscillation of initial alignment failure and link restart.')
cItpSpLinksetMtp3T18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 53), CItpTcTimerMtp3T18()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T18.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T18.setDescription('This timers servers different function based on the variant. ANSI: Repeat TFR once by response method ITU: MTP restart link supervision')
cItpSpLinksetMtp3T19 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 54), CItpTcTimerMtp3T19()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T19.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T19.setDescription('This timers servers different function based on the variant. ANSI: failed craft timer referral timer ITU: supervision timer during MTP restart')
cItpSpLinksetMtp3T20 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 55), CItpTcTimerMtp3T20()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T20.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T20.setDescription('This timers servers different function based on the variant. ANSI: waiting to repeat local inhibit test ITU: MTP restart timer at the Signalling point')
cItpSpLinksetMtp3T21 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 56), CItpTcTimerMtp3T21()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T21.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T21.setDescription('This timers servers different function based on the variant. ANSI: waiting to repeat remote inhibit test) ITU: MTP restart timer at adjacent Signalling point')
cItpSpLinksetMtp3T22 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 57), CItpTcTimerMtp3T22()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T22.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T22.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting for Signalling links avail ITU: local inhibit test timer')
cItpSpLinksetMtp3T23 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 58), CItpTcTimerMtp3T23()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T23.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T23.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting to receive all TRA msgs ITU: remote inhibit test timer')
cItpSpLinksetMtp3T24 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 59), CItpTcTimerMtp3T24()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T24.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T24.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting to broadcast all TRA msgs ITU: stabilizing timer after local processor outage')
cItpSpLinksetMtp3T25 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 60), CItpTcTimerMtp3T25()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T25.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T25.setDescription('Timer at Signalling Point (SP) adjacent to restarting SP, waiting for traffic restart allowed message.')
cItpSpLinksetMtp3T26 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 61), CItpTcTimerMtp3T26()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T26.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T26.setDescription('Timer at restarting SP waiting to repeat traffic restart waiting message.')
cItpSpLinksetMtp3T27 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 62), CItpTcTimerMtp3T27()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T27.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T27.setDescription('Minimum duration of unavailability for full restart.')
cItpSpLinksetMtp3T28 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 63), CItpTcTimerMtp3T28()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T28.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T28.setDescription('Timer at SP adjacent to restarting SP waiting for traffic restart waiting message.')
cItpSpLinksetMtp3T29 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 64), CItpTcTimerMtp3T29()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T29.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T29.setDescription('Timer started when TRA sent in response to unexpected TRA or TRW.')
cItpSpLinksetMtp3T30 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 65), CItpTcTimerMtp3T30()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T30.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T30.setDescription('Timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW.')
cItpSpLinksetMtp3T31 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 66), CItpTcTimerMtp3T31()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T31.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T31.setDescription('False link congestion detection timer.')
cItpSpLinksetMtp3T32 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 67), CItpTcTimerMtp3T32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T32.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T32.setDescription('Link oscillation timer - Procedure A.')
cItpSpLinksetMtp3T33 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 68), CItpTcTimerMtp3T33()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T33.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T33.setDescription('Probation timer for link oscillation - Procedure B.')
cItpSpLinksetMtp3T34 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 69), CItpTcTimerMtp3T34()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetMtp3T34.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetMtp3T34.setDescription('Suspension timer for link oscillation - Procedure B.')
cItpSpLinksetTimerLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 70), CItpTcTimerLinkTest()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetTimerLinkTest.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetTimerLinkTest.setDescription('Signalling Link test acknowledgement timer.')
cItpSpLinksetTimerLinkMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 71), CItpTcTimerLinkMessage()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetTimerLinkMessage.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetTimerLinkMessage.setDescription('Interval timer for sending test messages.')
cItpSpLinksetTimerLinkActRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 72), CItpTcTimerLinkActRetry()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetTimerLinkActRetry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetTimerLinkActRetry.setDescription('Link activation retry timer.')
cItpSpLinksetPlanCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(56000, 2147483647), ))).setUnits('bps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetPlanCapacity.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetPlanCapacity.setDescription('An estimate of the number of bits per second that is expected to be transmitted over a linkset. This attribute will be used by network management stations to generate traps and maintain statistics on linksets based on Stream Control Transmission Protocol. The information for this attribute is specified via CLI by the system administrator. A value of zero for this object indicates that a planning capacity has not been specified. This objects has been deprecated and replaced by cItpSpLinkPlanCapacityRcvd and cItpSpLinkPlanCapacitySent objects. ')
cItpSpLinksetActPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 74), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetActPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetActPriority.setDescription('Defines the activation priority for linksets. Each linkset can be defined a priority. The linkset with the lowest values will be activated first. If two linksets share the same values they will be activated in the order they were defined.')
cItpSpLinksetType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("access", 1), ("bridge", 2), ("cross", 3), ("diagonal", 4), ("fullyAssoc", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetType.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetType.setDescription("The list of possible Signalling link types. All links in the same linkset will be of the same type. 'A-link' : Access link 'B-link' : Bridge link 'C-link' : Cross link 'D-link' : Diagonal link 'E-link' : Fully associated link")
cItpSpLinksetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 76), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpSpLinksetTable following the RowStatus textual convention.')
cItpSpLinksetNi = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 77), CItpTcNetworkIndicator()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetNi.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetNi.setDescription('The Network Indicator in which the Linkset resides.')
cItpSpLinksetDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 78), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetDisplayName.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetDisplayName.setDescription('A short identifier for each linkset. This value can be set by system administrator or defaults to the linkset name.')
cItpSpLinksetDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 79), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetDescription.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetDescription.setDescription('A textual description for the Signalling point.')
cItpSpLinksetVariant = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 3, 1, 1, 80), CItpTcSs7Variant()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinksetVariant.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetVariant.setDescription('The SS7 variant used to format data transmitted on this linkset.')
cItpSpLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1), )
if mibBuilder.loadTexts: cItpSpLinkTable.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTable.setDescription('A table of SP links for this SP.')
cItpSpLinkTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-ITP-SP-MIB", "cItpSpLinksetName"), (0, "CISCO-ITP-SP-MIB", "cItpSpLinkSlc"))
if mibBuilder.loadTexts: cItpSpLinkTableEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTableEntry.setDescription('A list of SP link attributes.')
cItpSpLinkSlc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 1), CItpTcLinkSLC())
if mibBuilder.loadTexts: cItpSpLinkSlc.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signalling system No. 7 (SS7)-Message Transfer Part (MTP).')
if mibBuilder.loadTexts: cItpSpLinkSlc.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkSlc.setDescription('The Signalling Link Code for this link.')
cItpSpLinkDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkDescription.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkDescription.setDescription('A textual description for this link.')
cItpSpLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("available", 1), ("failed", 2), ("shutdown", 3), ("unavailable", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkState.setDescription("The list of possible links states. 'available' : Traffic may flow over this linkset 'failed' : Traffic management has detected a failure that prevents activating this linkset. 'shutdown' : This linkset has been forced to an unavailable state by an administrative action. 'unavailable': The linkset is currently unable to support traffic. Activation of this linkset will occur as required by protocol.")
cItpSpLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 4), CItpTcLinkType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkType.setReference('For SCTP see RFC 2960.')
if mibBuilder.loadTexts: cItpSpLinkType.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkType.setDescription('The link type.')
cItpSpLinkifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkifIndex.setReference('RFC1213.txt')
if mibBuilder.loadTexts: cItpSpLinkifIndex.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkifIndex.setDescription('If the link type specified by cItpSpLinkType is serial or hsl, this is the ifIndex specified in IF-MIB, otherwise no significance is to be placed on this value.')
cItpSpLinkSctpAssociation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkSctpAssociation.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkSctpAssociation.setDescription("If the link type specified by cItpSpLinkType is 'sctpIp', this is the association identifier defined in the Stream Control Transmission Protocol(SCTP) MIB. Where value greater than zero indicates a valid association and zero one indicates an invalid association. This value will always be set to zero one when cItpSpLinkType is not equal to the 'sctpIp' value.")
cItpSpLinkMtp3PacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp3PacketsRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3PacketsRcvd.setDescription('The number of MTP3 packets received by this link. This measurement is specified in Q752/3.5')
cItpSpLinkMtp3PacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp3PacketsSent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3PacketsSent.setDescription('The number of MTP3 packets sent by this link. This measurement is specified in Q752/3.3')
cItpSpLinkMtp3BytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 9), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp3BytesRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3BytesRcvd.setDescription('The number of MTP3 bytes received by this link. This measurement is specified in Q752/3.4')
cItpSpLinkMtp3BytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp3BytesSent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3BytesSent.setDescription('The number of MTP3 bytes sent by this link. This measurement is specified in Q752/3.1')
cItpSpLinkMtp2T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 11), CItpTcTimerMtp2T01()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T01.setDescription('Alignment ready timer.')
cItpSpLinkMtp2T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 12), CItpTcTimerMtp2T02()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T02.setDescription('Not aligned timer.')
cItpSpLinkMtp2T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 13), CItpTcTimerMtp2T03()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T03.setDescription('Aligned timer.')
cItpSpLinkMtp2T04E = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 14), CItpTcTimerMtp2T04E()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T04E.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T04E.setDescription('Proving period timer emergency timer. ')
cItpSpLinkMtp2T04N = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 15), CItpTcTimerMtp2T04N()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T04N.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T04N.setDescription('Proving period timer normal timer.')
cItpSpLinkMtp2T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 16), CItpTcTimerMtp2T05()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T05.setDescription('Sending SIB timer.')
cItpSpLinkMtp2T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 17), CItpTcTimerMtp2T06()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T06.setDescription('Remote congestion timer. ')
cItpSpLinkMtp2T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 18), CItpTcTimerMtp2T07()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp2T07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2T07.setDescription('Excessive delay of acknowledgement timer.')
cItpSpLinkMtp3T01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 19), CItpTcTimerMtp3T01()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T01.setDescription('Delay to avoid message mis-sequencing on changeover.')
cItpSpLinkMtp3T02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 20), CItpTcTimerMtp3T02()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T02.setDescription('Waiting for changeover acknowledgement.')
cItpSpLinkMtp3T03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 21), CItpTcTimerMtp3T03()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T03.setDescription('Time controlled diversion-delay to avoid mis-sequencing on change back.')
cItpSpLinkMtp3T04 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 22), CItpTcTimerMtp3T04()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T04.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T04.setDescription('Waiting for change back acknowledgement (first attempt).')
cItpSpLinkMtp3T05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 23), CItpTcTimerMtp3T05()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T05.setDescription('Waiting for change back acknowledgement (second attempt).')
cItpSpLinkMtp3T06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 24), CItpTcTimerMtp3T06()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T06.setDescription('Delay to avoid message mis-sequencing on controlled rerouting.')
cItpSpLinkMtp3T07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 25), CItpTcTimerMtp3T07()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T07.setDescription('Waiting for Signalling data link connection acknowledgement.')
cItpSpLinkMtp3T08 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 26), CItpTcTimerMtp3T08()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T08.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T08.setDescription('Transfer prohibited inhibition timer (transient solution).')
cItpSpLinkMtp3T10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 27), CItpTcTimerMtp3T10()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T10.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T10.setDescription('Waiting to repeat Signalling routeset test message.')
cItpSpLinkMtp3T11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 28), CItpTcTimerMtp3T11()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T11.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T11.setDescription('Transfer restricted timer. (This is one way of implementing the function described in 13.4/Q.704 and mainly intended to simplify SPs.).')
cItpSpLinkMtp3T12 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 29), CItpTcTimerMtp3T12()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T12.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T12.setDescription('Waiting for uninhibit acknowledgement.')
cItpSpLinkMtp3T13 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 30), CItpTcTimerMtp3T13()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T13.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T13.setDescription('Waiting for force uninhibit.')
cItpSpLinkMtp3T14 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 31), CItpTcTimerMtp3T14()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T14.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T14.setDescription('Waiting for inhibition acknowledgement.')
cItpSpLinkMtp3T15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 32), CItpTcTimerMtp3T15()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T15.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T15.setDescription('Waiting to start Signalling routeset congestion test.')
cItpSpLinkMtp3T16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 33), CItpTcTimerMtp3T16()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T16.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T16.setDescription('Waiting for routeset congestion status update.')
cItpSpLinkMtp3T17 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 34), CItpTcTimerMtp3T17()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T17.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T17.setDescription('Delay to avoid oscillation of initial alignment failure and link restart.')
cItpSpLinkMtp3T18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 35), CItpTcTimerMtp3T18()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T18.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T18.setDescription('This timers servers different function based on the variant. ANSI: Repeat TFR once by response method ITU: MTP restart link supervision')
cItpSpLinkMtp3T19 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 36), CItpTcTimerMtp3T19()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T19.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T19.setDescription('This timers servers different function based on the variant. ANSI: failed craft timer referral timer ITU: supervision timer during MTP restart')
cItpSpLinkMtp3T20 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 37), CItpTcTimerMtp3T20()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T20.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T20.setDescription('This timers servers different function based on the variant. ANSI: waiting to repeat local inhibit test ITU: MTP restart timer at the Signalling point')
cItpSpLinkMtp3T21 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 38), CItpTcTimerMtp3T21()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T21.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T21.setDescription('This timers servers different function based on the variant. ANSI: waiting to repeat remote inhibit test) ITU: MTP restart timer at adjacent Signalling point')
cItpSpLinkMtp3T22 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 39), CItpTcTimerMtp3T22()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T22.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T22.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting for Signalling links avail ITU: local inhibit test timer')
cItpSpLinkMtp3T23 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 40), CItpTcTimerMtp3T23()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T23.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T23.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting to receive all TRA msgs ITU: remote inhibit test timer')
cItpSpLinkMtp3T24 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 41), CItpTcTimerMtp3T24()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T24.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T24.setDescription('This timers servers different function based on the variant. ANSI: restarting SP waiting to broadcast all TRA msgs ITU: stabilizing timer after local processor outage')
cItpSpLinkMtp3T25 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 42), CItpTcTimerMtp3T25()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T25.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T25.setDescription('Timer at Signalling Point (SP) adjacent to restarting SP, waiting for traffic restart allowed message.')
cItpSpLinkMtp3T26 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 43), CItpTcTimerMtp3T26()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T26.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T26.setDescription('Timer at restarting SP waiting to repeat traffic restart waiting message.')
cItpSpLinkMtp3T27 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 44), CItpTcTimerMtp3T27()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T27.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T27.setDescription('Minimum duration of unavailability for full restart.')
cItpSpLinkMtp3T28 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 45), CItpTcTimerMtp3T28()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T28.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T28.setDescription('Timer at SP adjacent to restarting SP waiting for traffic restart waiting message.')
cItpSpLinkMtp3T29 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 46), CItpTcTimerMtp3T29()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T29.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T29.setDescription('Timer started when TRA sent in response to unexpected TRA or TRW.')
cItpSpLinkMtp3T30 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 47), CItpTcTimerMtp3T30()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T30.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T30.setDescription('Timer to limit sending of TFPs and TFRs in response to unexpected TRA or TRW.')
cItpSpLinkMtp3T31 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 48), CItpTcTimerMtp3T31()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T31.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T31.setDescription('False link congestion detection timer.')
cItpSpLinkMtp3T32 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 49), CItpTcTimerMtp3T32()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T32.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T32.setDescription('Link oscillation timer - Procedure A.')
cItpSpLinkMtp3T33 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 50), CItpTcTimerMtp3T33()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T33.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T33.setDescription('Probation timer for link oscillation - Procedure B.')
cItpSpLinkMtp3T34 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 51), CItpTcTimerMtp3T34()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkMtp3T34.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3T34.setDescription('Suspension timer for link oscillation - Procedure B.')
cItpSpLinkTimerLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 52), CItpTcTimerLinkTest()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkTimerLinkTest.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTimerLinkTest.setDescription('Signalling Link test acknowledgement timer.')
cItpSpLinkTimerLinkMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 53), CItpTcTimerLinkMessage()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkTimerLinkMessage.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTimerLinkMessage.setDescription('Interval timer for sending test messages.')
cItpSpLinkTimerLinkActRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 54), CItpTcTimerLinkActRetry()).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkTimerLinkActRetry.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTimerLinkActRetry.setDescription('Link activation retry timer.')
cItpSpLinkXmitQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkXmitQueueDepth.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkXmitQueueDepth.setDescription('Number of packets waiting to be sent over this link.')
cItpSpLinkXmitQueueDepthHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 56), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkXmitQueueDepthHigh.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkXmitQueueDepthHigh.setDescription('This is the maximum number of packets waiting to be sent over this link since the last time this value was reset as indicated by cItpSpLinkXmitQueueDepthHighReset. Resetting this object is achieved by setting this object to 0. Attempting to set this object to any other value will result in a wrongValue error.')
cItpSpLinkXmitQueueDepthHighRT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 57), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkXmitQueueDepthHighRT.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkXmitQueueDepthHighRT.setDescription('This indicates when cItpSpLinkXmitQueueDepthHigh was set to 0.')
cItpSpLinkCongestionState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkCongestionState.setReference('ITU Q.704 Signalling network functions and messages. ANSI T1.111 Telecommunications - Signalling system No. 7 (SS7)-Signalling network functions and messages 2.3.5.2.')
if mibBuilder.loadTexts: cItpSpLinkCongestionState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionState.setDescription('The Signalling link congestion status of this link. 0 is the least congestion level, 3 is the highest congestion level.')
cItpSpLinkCongestionAbate1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkCongestionAbate1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionAbate1.setDescription('Threshold used to abate congestion level 1.')
cItpSpLinkCongestionAbate2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkCongestionAbate2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionAbate2.setDescription('Threshold used to abate congestion level 2.')
cItpSpLinkCongestionAbate3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 61), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkCongestionAbate3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionAbate3.setDescription('Threshold used to abate congestion level 3.')
cItpSpLinkCongestionOnset1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 62), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkCongestionOnset1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionOnset1.setDescription('Threshold used to mark onset of congestion level 1.')
cItpSpLinkCongestionOnset2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 63), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkCongestionOnset2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionOnset2.setDescription('Threshold used to mark onset of congestion level 2.')
cItpSpLinkCongestionOnset3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 64), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkCongestionOnset3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkCongestionOnset3.setDescription('Threshold used to mark onset of congestion level 3.')
cItpSpLinkSigLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 65), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkSigLinkTest.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkSigLinkTest.setDescription('Indicated if Signalling link test is enabled on this link. true : Signalling link test is enabled. false : Signalling link test not enabled.')
cItpSpLinkQ752T1E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 66), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E1.setDescription('Duration of link in the In-Service state Q752/1.1.')
cItpSpLinkQ752T1E2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E2.setDescription('Count of Signalling Link failures - All reasons Q752/1.2.')
cItpSpLinkQ752T1E3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 68), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E3.setDescription('Count of Signalling Link failures - Abnormal FIBR/BSNR Q752/1.3.')
cItpSpLinkQ752T1E4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 69), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E4.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E4.setDescription('Count of Signalling Link failures - Excessive delay of acknowledgement Q752/1.4.')
cItpSpLinkQ752T1E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 70), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E5.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E5.setDescription('Count of Signalling Link failures - Excessive error rate Q752/1.5.')
cItpSpLinkQ752T1E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 71), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E6.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E6.setDescription('Count of Signalling Link failures - Excessive duration of congestion Q752/1.6.')
cItpSpLinkQ752T1E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 72), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E7.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E7.setDescription('Count of alignment or proving errors Q752/1.7.')
cItpSpLinkQ752T1E8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 73), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E8.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E8.setDescription('Count of signal units received in error Q752/1.8.')
cItpSpLinkQ752T1E9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 74), Counter32()).setUnits('negative acknowledgements').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E9.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E9.setDescription('Count of negative acknowledgements received Q752/1.9.')
cItpSpLinkQ752T1E10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 75), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E10.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E10.setDescription("Count of 'local automatic changeover' events Q752/1.10.")
cItpSpLinkQ752T1E11 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 76), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T1E11.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T1E11.setDescription("Count of 'local automatic changeback' events Q752/1.11.")
cItpSpLinkQ752T2E1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 77), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E1.setDescription('Duration of Signalling Link unavailable(for any reason) Q752/2.1.')
cItpSpLinkQ752T2E5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 78), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E5.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E5.setDescription('Duration of Signalling Link unavailable due to local management actions Q752/2.5.')
cItpSpLinkQ752T2E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 79), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E6.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E6.setDescription('Duration of Signalling Link unavailable due to remote management actions Q752/2.6.')
cItpSpLinkQ752T2E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 80), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E7.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E7.setDescription('Duration of Signalling Link unavailable due to link failure Q752/2.7.')
cItpSpLinkQ752T2E9 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 81), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E9.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E9.setDescription('Duration of Signalling Link unavailable due to remote processor outage Q752/2.9.')
cItpSpLinkQ752T2E10 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 82), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E10.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E10.setDescription("Count of 'remote processor outage' events Q752/2.10 and Q752/2.11. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.")
cItpSpLinkQ752T2E15 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 83), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E15.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E15.setDescription('Duration of local busy Q752/2.15.')
cItpSpLinkQ752T2E16 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 84), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E16.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E16.setDescription('Count of local inhibition Q752/2.16 and Q752/2.17. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.')
cItpSpLinkQ752T2E18 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 85), Counter32()).setUnits('occurrences').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T2E18.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T2E18.setDescription('Count of remote inhibition Q752/2.18 and Q752/2.19. The standard only requires that events are issued. The entries have been combined into a single entry to track all occurrences of these event types.')
cItpSpLinkMtp3PacketsRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 86), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp3PacketsRetrans.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3PacketsRetrans.setDescription('The number of MTP3 packets retransmitted on this link. This measurement is specified in Q752/3.2')
cItpSpLinkMtp3BytesRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 87), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp3BytesRetrans.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp3BytesRetrans.setDescription('The number of MTP3 bytes retransmitted on this link. This measurement is specified in Q752/3.2')
cItpSpLinkQ752T3E6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 88), Counter32()).setUnits('events').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E6.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E6.setDescription('The number times this Signalling link was marked congested. This measurement is specified in Q752/3.6')
cItpSpLinkQ752T3E7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 89), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E7.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E7.setDescription('Cumulative duration of Signalling link congestion Q752/3.7.')
cItpSpLinkQ752T3E10L1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 90), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E10L1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E10L1.setDescription('The number of packets(MSUs) discarded due to Signalling link level 1 congestion Q752/3.10')
cItpSpLinkQ752T3E10L2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 91), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E10L2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E10L2.setDescription('The number of packets(MSUs) discard due to Signalling link level 2 congestion Q752/3.10')
cItpSpLinkQ752T3E10L3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 92), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E10L3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E10L3.setDescription('The number of packets(MSUs) discard due to Signalling link level 3 congestion Q752/3.10')
cItpSpLinkQ752T3E11L1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 93), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E11L1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E11L1.setDescription('The number times this Signalling link entered congestion level 1 and packets were discarded. This measurement is specified in Q752/3.11')
cItpSpLinkQ752T3E11L2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 94), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E11L2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E11L2.setDescription('The number times this Signalling link entered congestion level 2 and packets were discarded. This measurement is specified in Q752/3.11')
cItpSpLinkQ752T3E11L3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 95), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkQ752T3E11L3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQ752T3E11L3.setDescription('The number times this Signalling link entered congestion level 3 and packets were discarded. This measurement is specified in Q752/3.11')
cItpSpLinkIPType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 96), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPType1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPType1.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the type of the first of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 97), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPType2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPType2.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the type of the second of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 98), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPType3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPType3.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the type of the third of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 99), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPType4.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPType4.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the type of the fourth of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 100), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPAddr1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPAddr1.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the first of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 101), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPAddr2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPAddr2.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the second of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 102), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPAddr3.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPAddr3.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the third of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkIPAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 103), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkIPAddr4.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkIPAddr4.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the fourth of four possible local IP addresses used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 104), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkLocalPort.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkLocalPort.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the local port number used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 105), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkRemotePort.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkRemotePort.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the remote port number used to create the association supporting this link. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkQosClass = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 106), CItpTcQos()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkQosClass.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkQosClass.setDescription('When cItpSpLinkType is set to sctpIp then this object contains the quality of service class to be assigned to packets sent on this association. When cItpSpLinkType is not set to sctpIp then no significance is to be placed on this value.')
cItpSpLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 107), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkRowStatus.setDescription('The object is used by a management station to create or delete the row entry in cItpSpLinkTable following the RowStatus textual convention.')
cItpSpLinkStateReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 108), Bits().clone(namedValues=NamedValues(("localInhibit", 0), ("remoteInhibit", 1), ("blocked", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkStateReason.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkStateReason.setDescription("This object provides additional information on the state of a link as follows. 'localInhibit' : Link has been inhibited by a local management operation. 'remoteInhibit' : LInk has been inhibited by a remote management operation. 'blocked' : Link is blocked because of a remote processor outage.")
cItpSpLinkDisplayName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 109), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkDisplayName.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkDisplayName.setDescription('A short identifier for each link linkset. This value can be set by system administrator or defaults to the linkset name and SLC formatted as an ASCII string.')
cItpSpLinkDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 110), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkDroppedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkDroppedPkts.setDescription('The number of packets that were dropped by this link.')
cItpSpLinkTransmittedLssu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 111), Counter32()).setUnits('LSSU').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTransmittedLssu.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTransmittedLssu.setDescription('The number of Link Status Signal Units sent on this link.')
cItpSpLinkReceivedLssu = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 112), Counter32()).setUnits('LSSU').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkReceivedLssu.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkReceivedLssu.setDescription('The number of Link Status Signal Units received on this link.')
cItpSpLinkProtocolDetails = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 113), Bits().clone(namedValues=NamedValues(("tcbcBuffering", 0), ("tcocBuffering", 1), ("tlacAdjacentSpRestarting", 2), ("tlacEmergencyCoInProgress", 3), ("tlacChangebackInProgress", 4), ("tlacChangeoverInProgress", 5), ("tlacChangeoverFailed", 6), ("tlacInhibitRetry", 7), ("tlacManagementRequest", 8), ("tlacSpRestarting", 9), ("tsrcChangeOverComplete", 10), ("tsrcAdjacentSpRestart", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkProtocolDetails.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkProtocolDetails.setDescription("This object provide details on the protocol states for this link as follows. Changeback control(TCBC) 'tcbcBuffering': Changeback control is buffering data on this link. Changeover control(TCOC) 'tcocBuffering': Changeover control is buffering data on this link Link availability control(TLAC) 'tlacAdjacentSpRestarting': Adjacent Signalling point is restarting. 'tlacEmergencyCoInProgress': Emergency changeover is in progress on this link. 'tlacChangebackInProgress': Changeback is in progress on this link. 'tlacChangeoverInProgress': Changeover is in progress on this link. 'tlacChangeoverFailed': The last changeover operation failed on this link. 'tlacInhibitRetry': Inhibit command will be retried. 'tlacManagementRequest': Management request in progress for this link. 'tlacSpRestarting': Signalling point is in the process of a restart. Signalling routing control(TSRC) 'tsrcChangeOverComplete': Changeove request is complete. 'tsrcAdjacentSpRestart': Adjacent Signalling Point is restarting.")
cItpSpLinkLsacState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 114), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("inactive", 2), ("active", 3), ("activatingRestoring", 4), ("failed", 5), ("actT17wait", 6), ("actAnsiWaitDeloaded", 7), ("actItuWaitStmReady", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkLsacState.setReference('Figure 37/Q.704 - Signalling link management; Signalling link activity control (LSAC)')
if mibBuilder.loadTexts: cItpSpLinkLsacState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkLsacState.setDescription("Signalling link activity control state: 'undefined(1)' - link is an undefined state 'inactive(2)' - A Signalling link that is not in operation. 'active(3)' - A Signalling link that is in operation. 'activatingRestoring(4)' - A Signalling that is not operational and is being activated or restored. 'failed(5)' - A Signalling link which is available (not blocked) is marked by level 3 as failed when a changeover order is received. 'actT17wait(6)' - Link activation has failed. Link is placed into this state to wait for timer T17 to expire in order to avoid the oscillation of initial alignment failure and link restart. 'actAnsiWaitDeloaded(7) - Waiting for change back acknowledgement (second attempt). 'actItuWaitStmReady(8)' Wait for Signalling Traffic Management ready event.")
cItpSpLinkTsrcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 115), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("idle", 2), ("wait5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTsrcState.setReference('Figure 29/Q.704 - Signalling traffic management; Signalling routing control (TSRC)')
if mibBuilder.loadTexts: cItpSpLinkTsrcState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTsrcState.setDescription("Signalling traffic management routing control state: 'undefined(1)' - link is an undefined state 'idle(2)' - traffic mangement is idle 'wait5(3)' - traffic management is active and in the sending status phase")
cItpSpLinkTcocState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 116), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("idle", 2), ("wait2", 3), ("waitForAck", 4), ("retrieving", 5), ("wait5", 6), ("wait7", 7), ("wait8", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTcocState.setReference(' Figure 30/Q.704 - Signalling traffic management; changeover control (TCOC)')
if mibBuilder.loadTexts: cItpSpLinkTcocState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTcocState.setDescription(" Changeover control State: 'undefined(1)' - Link is an undefined state. 'idle(2)' - Link is available and idle. 'wait2(3)' - Wait for MTP2 to initialize link. 'waitForAck(4)' - Waiting for changeover acknowledgement. 'retrieving(5)' - Packets are being retrieved from link. 'wait5(6)' - Wait state when transitioning from idle state. 'wait7(7)' - Delay to avoid message mis-sequencing on changeover 'wait8(8)' - Wait state prior to processing changeover order or emergency changeover order events.")
cItpSpLinkTcocLocalBSNT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 117), CItpSpSequenceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTcocLocalBSNT.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTcocLocalBSNT.setDescription('The local backward sequence number to be transmitted.')
cItpSpLinkTcocRemoteBSNT = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 118), CItpSpSequenceNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTcocRemoteBSNT.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTcocRemoteBSNT.setDescription('The remote backward sequence number to be transmitted.')
cItpSpLinkTcbcState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 119), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("undefined", 1), ("idle", 2), ("firstAttempt", 3), ("secondAttempt", 4), ("timeControlledDiversion", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTcbcState.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTcbcState.setDescription(" Changeback control State: 'undefined(1)' - link is an undefined state. 'idle(2)' - Link is available and idle. 'firstAttempt(3)' - First attempt at changeback. 'secondAttempt(4)' - Second attempt at changeback 'timeControlledDiversion(5)' - Changeback using time controlled Diversion.")
cItpSpLinkReceivedSIB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 120), Counter32()).setUnits('SIB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkReceivedSIB.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkReceivedSIB.setDescription("The number of status indicator 'busy' link status signal units received on this link. The SIB indicates that level two is congested at the transmitting Signalling point.")
cItpSpLinkTransmittedSIB = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 121), Counter32()).setUnits('SIB').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkTransmittedSIB.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkTransmittedSIB.setDescription("The number of status indicator 'busy' link status signal units transmitted on this link. The SIB indicates that level two is congested at the transmitting Signalling point.")
cItpSpLinkMtp2ExpiredT01 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 122), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT01.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT01.setDescription('The number of times the alignment ready timer has expired on this link.')
cItpSpLinkMtp2ExpiredT02 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 123), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT02.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT02.setDescription('The number of times the not alignment ready timer has expired on this link.')
cItpSpLinkMtp2ExpiredT03 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 124), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT03.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT03.setDescription('The number of times the aligned timer has expired on this link.')
cItpSpLinkMtp2ExpiredT04 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 125), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT04.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT04.setDescription('The number of times the proving period timer has expired on this link.')
cItpSpLinkMtp2ExpiredT05 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 126), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT05.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT05.setDescription('The number of times the sending status indicator busy timer has expired on this link.')
cItpSpLinkMtp2ExpiredT06 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT06.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT06.setDescription('The number of times the remote congestion timer has expired on this link.')
cItpSpLinkMtp2ExpiredT07 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT07.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkMtp2ExpiredT07.setDescription('The number of times the excessive delay of acknowledgement timer has expired on this link.')
cItpSpLinkOMAERMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 129), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkOMAERMCount.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkOMAERMCount.setDescription('The number of times the Alignment Error Rate Monitor procedure was started on this link.')
cItpSpLinkOMAERMFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 130), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkOMAERMFailCount.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkOMAERMFailCount.setDescription('The number of times the Alignment Error Rate Monitor procedure failed on this link.')
cItpSpLinkOMSURMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 131), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkOMSURMCount.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkOMSURMCount.setDescription('The number of times the Signal Unit Error Rate Monitor procedure was started on this link.')
cItpSpLinkOMSURMFailCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 132), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkOMSURMFailCount.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkOMSURMFailCount.setDescription('The number of times the Signal Unit Error Rate Monitor procedure failed on this link.')
cItpSpLinkPlanCapacityRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 133), CItpSpLinkCapacity()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkPlanCapacityRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkPlanCapacityRcvd.setDescription('An estimate of the number of bits per second that is expected to be received from this link. This object will be used in combination with cItpSpUtilSampleInterval, cItpSpUtilThreshold, cItpSpUtilThreshold and cItpSpLinkUtilThresholdRcvd to generate the cItpSpLinkRcvdUtilChange notification.')
cItpSpLinkUtilThresholdRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 134), CItpSpPercentThreshold()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkUtilThresholdRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilThresholdRcvd.setDescription('This object specifies the threshold used to to generate the cItpSpLinkRcvdUtilChange notification. The value of zero indicates the threshold has not been defined at the link level and the value from the cItpSpUtilThreshold object will be used to generate the cItpSpLinkRcvdUtilChange notification.')
cItpSpLinkUtilizationRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 135), CItpSpLinkUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkUtilizationRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilizationRcvd.setDescription('An estimate of the utilization of this link for traffic received on this link in the prior time period defined by the cItpSpUtilSampleInterval object.')
cItpSpLinkUtilStateRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 136), CItpSpLinkUtilizationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkUtilStateRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilStateRcvd.setDescription('Link Utilization State for in bound traffic.')
cItpSpLinkL2BytesRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 137), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkL2BytesRcvd.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkL2BytesRcvd.setDescription('A count of the bytes received on the link including the additional bytes required by underlying protocols. This provides a transport independent mechanism for collection information on link utilization.')
cItpSpLinkPlanCapacitySent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 138), CItpSpLinkCapacity()).setUnits('bits per second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkPlanCapacitySent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkPlanCapacitySent.setDescription('An estimate of the number of bits per second that is expected to be sent on this link. This object will be used in combination with cItpSpUtilSampleInterval, cItpSpUtilThreshold and cItpSpLinkUtilThresholdRcvd to generate the cItpSpLinkSentUtilChange notification.')
cItpSpLinkUtilThresholdSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 139), CItpSpPercentThreshold()).setUnits('percent').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cItpSpLinkUtilThresholdSent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilThresholdSent.setDescription('This object specifies the threshold used to generate the cItpSpLinkRcvdUtilChange notification. The value of zero indicates the threshold has not been defined at the link level and the value from the cItpSpUtilThreshold object will be used to generate the cItpSpLinkRcvdUtilChange notification.')
cItpSpLinkUtilizationSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 140), CItpSpLinkUtilization()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkUtilizationSent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilizationSent.setDescription('An estimate of the utilization of this link for traffic sent on this link in the prior time period defined by the cItpSpUtilSampleInterval object.')
cItpSpLinkUtilStateSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 141), CItpSpLinkUtilizationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkUtilStateSent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilStateSent.setDescription('Link Utilization State for out bound traffic.')
cItpSpLinkL2BytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 4, 1, 1, 142), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cItpSpLinkL2BytesSent.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkL2BytesSent.setDescription('A count of the bytes sent on the link including the additional bytes required by underlying protocols. This provides a transport independent mechanism for collection information on link utilization.')
cItpSpLsStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 5, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpLsStateChangeNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLsStateChangeNotifEnabled.setDescription("The SP linkset notification truth value. 'true' Indicates that cItpSpLinksetStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that cItpSpLinksetStateChange notification generation is disabled.")
cItpSpLnkStateChangeNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 5, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpLnkStateChangeNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLnkStateChangeNotifEnabled.setDescription("The SP link notification truth value. 'true' Indicates that cItpSpLinkStateChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that cItpSpLinkStateChange notification generation is disabled.")
cItpSpCongestionNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 5, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpCongestionNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpCongestionNotifEnabled.setDescription("The SP Congestion notification truth value. 'true' Indicates that cItpSpCongestionChange notification is to be generated when the state changes. That is, the notification generation is enabled. 'false' Indicates that cItpSpCongestionChange notification generation is disabled.")
cItpSpLinkUtilNotifEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 232, 1, 5, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cItpSpLinkUtilNotifEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkUtilNotifEnabled.setDescription("The SP link utilization notification truth value. 'true' Indicates that the notification of link utilization has been enabled. That is, the notification generation is enabled. 'false' Indicates that the notification link utilization has been disabled.")
cItpSpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 0, 0))
cItpSpLinksetStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 232, 0, 0, 1)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetState"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"))
if mibBuilder.loadTexts: cItpSpLinksetStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetStateChange.setDescription('The notification generated when a linkset changes to a new state. The value of cItpSpLinksetState indicates the new state.')
cItpSpLinkStateChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 232, 0, 0, 2)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpLinkState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinkStateReason"))
if mibBuilder.loadTexts: cItpSpLinkStateChange.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkStateChange.setDescription('The notification generated when a link changes to a new state. The value of cItpSpLinkState indicates the new state.')
cItpSpCongestionChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 232, 0, 0, 3)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"))
if mibBuilder.loadTexts: cItpSpCongestionChange.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpCongestionChange.setDescription('The notification generated when a link changes to a new congestion level as specified by cItpSpLinkCongestionState object.')
cItpSpLinkRcvdUtilChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 232, 0, 0, 4)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilStateRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilizationRcvd"))
if mibBuilder.loadTexts: cItpSpLinkRcvdUtilChange.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkRcvdUtilChange.setDescription('The notification provide is generated when the cItpSpLinkUtilStateRcvd changes states.')
cItpSpLinkSentUtilChange = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 232, 0, 0, 5)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilStateSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilizationSent"))
if mibBuilder.loadTexts: cItpSpLinkSentUtilChange.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkSentUtilChange.setDescription('The notification provide is generated when the cItpSpLinkUtilStateSent changes states.')
cItpSpMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 1))
cItpSpMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2))
cItpSpMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 1, 1)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpScalarsGroup"), ("CISCO-ITP-SP-MIB", "cItpSpPointCodeGroup"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetGroup"), ("CISCO-ITP-SP-MIB", "cItpSpLinkGroup"), ("CISCO-ITP-SP-MIB", "cItpSpNotificationsEnableGroup"), ("CISCO-ITP-SP-MIB", "cItpSpNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpMIBCompliance = cItpSpMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco SP MIB')
cItpSpMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 1, 2)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpScalarsGroup"), ("CISCO-ITP-SP-MIB", "cItpSpPointCodeGroup"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetGroup"), ("CISCO-ITP-SP-MIB", "cItpSpLinkGroup"), ("CISCO-ITP-SP-MIB", "cItpSpNotificationsEnableGroup"), ("CISCO-ITP-SP-MIB", "cItpSpNotificationsGroup"), ("CISCO-ITP-SP-MIB", "cItpSpStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpMIBComplianceRev1 = cItpSpMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco SP MIB')
cItpSpMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 1, 3)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpPointCodeGroup"), ("CISCO-ITP-SP-MIB", "cItpSpScalarsGroupRev2"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetGroupRev2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkGroupRev2"), ("CISCO-ITP-SP-MIB", "cItpSpNotificationsEnableGroupRev2"), ("CISCO-ITP-SP-MIB", "cItpSpNotificationsGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpMIBComplianceRev2 = cItpSpMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco SP MIB')
cItpSpScalarsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 1)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpVariant"), ("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpDescription"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T01"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T02"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T03"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T04E"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T04N"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T05"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T06"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T07"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T01"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T02"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T03"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T04"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T05"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T06"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T07"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T08"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T10"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T11"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T12"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T13"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T14"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T15"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T16"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T17"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T18"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T19"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T20"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T21"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T22"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T23"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T24"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T25"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T26"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T27"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T28"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T29"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T30"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T31"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T32"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T33"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T34"), ("CISCO-ITP-SP-MIB", "cItpSpTimerLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpTimerLinkMessage"), ("CISCO-ITP-SP-MIB", "cItpSpTimerLinkActRetry"), ("CISCO-ITP-SP-MIB", "cItpSpTFR"), ("CISCO-ITP-SP-MIB", "cItpSpCongestionsLevels"), ("CISCO-ITP-SP-MIB", "cItpSpFastRestart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpScalarsGroup = cItpSpScalarsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpScalarsGroup.setDescription('SP main objects.')
cItpSpPointCodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 2)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpPointCodeType"), ("CISCO-ITP-SP-MIB", "cItpSpPointCodeDisplay"), ("CISCO-ITP-SP-MIB", "cItpSpPointCodeRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpPointCodeGroup = cItpSpPointCodeGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpPointCodeGroup.setDescription('SP main objects.')
cItpSpLinksetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 3)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLinksetSourcePointCode"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentPointCode"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetState"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetInboundAcl"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetOutboundAcl"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSnmmRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSntmRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare2RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSccpRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetIsupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDupcRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDupfRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetBisupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSisupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare11RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare12RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare13RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare14RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare15RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAccountingEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetNumLinks"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDurationInService"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDurationOutService"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T04E"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T04N"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T04"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T08"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T10"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T11"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T12"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T13"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T14"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T15"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T16"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T17"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T18"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T19"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T20"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T21"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T22"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T23"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T24"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T25"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T26"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T27"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T28"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T29"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T30"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T31"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T32"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T33"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T34"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTimerLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTimerLinkMessage"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTimerLinkActRetry"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetPlanCapacity"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetActPriority"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetType"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetRowStatus"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetNi"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpLinksetGroup = cItpSpLinksetGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetGroup.setDescription('SP linkset objects.')
cItpSpLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 4)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLinkDescription"), ("CISCO-ITP-SP-MIB", "cItpSpLinkState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkType"), ("CISCO-ITP-SP-MIB", "cItpSpLinkifIndex"), ("CISCO-ITP-SP-MIB", "cItpSpLinkSctpAssociation"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3PacketsRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3PacketsSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3BytesRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3BytesSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T04E"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T04N"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T04"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T08"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T10"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T11"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T12"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T13"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T14"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T15"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T16"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T17"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T18"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T19"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T20"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T21"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T22"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T23"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T24"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T25"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T26"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T27"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T28"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T29"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T30"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T31"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T32"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T33"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T34"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTimerLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTimerLinkMessage"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTimerLinkActRetry"), ("CISCO-ITP-SP-MIB", "cItpSpLinkXmitQueueDepth"), ("CISCO-ITP-SP-MIB", "cItpSpLinkXmitQueueDepthHigh"), ("CISCO-ITP-SP-MIB", "cItpSpLinkXmitQueueDepthHighRT"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionAbate1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionAbate2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionAbate3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionOnset1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionOnset2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionOnset3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkSigLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E4"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E5"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E6"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E7"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E8"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E9"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E10"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E11"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E5"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E6"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E7"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E9"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E10"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E15"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E16"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E18"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3PacketsRetrans"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3BytesRetrans"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E6"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E7"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E10L1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E10L2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E10L3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E11L1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E11L2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E11L3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType4"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr4"), ("CISCO-ITP-SP-MIB", "cItpSpLinkLocalPort"), ("CISCO-ITP-SP-MIB", "cItpSpLinkRemotePort"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQosClass"), ("CISCO-ITP-SP-MIB", "cItpSpLinkRowStatus"), ("CISCO-ITP-SP-MIB", "cItpSpLinkStateReason"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDisplayName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpLinkGroup = cItpSpLinkGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkGroup.setDescription('SP link objects.')
cItpSpNotificationsEnableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 5)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLsStateChangeNotifEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpLnkStateChangeNotifEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpCongestionNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpNotificationsEnableGroup = cItpSpNotificationsEnableGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpNotificationsEnableGroup.setDescription('SP enable notification objects.')
cItpSpNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 6)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLinksetStateChange"), ("CISCO-ITP-SP-MIB", "cItpSpLinkStateChange"), ("CISCO-ITP-SP-MIB", "cItpSpCongestionChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpNotificationsGroup = cItpSpNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpNotificationsGroup.setDescription('SP notification objects.')
cItpSpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 7)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpDistSccpUnseq"), ("CISCO-ITP-SP-MIB", "cItpSpSummaryRoutingException"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetVariant"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDroppedPkts"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTransmittedLssu"), ("CISCO-ITP-SP-MIB", "cItpSpLinkReceivedLssu"), ("CISCO-ITP-SP-MIB", "cItpSpLinkProtocolDetails"), ("CISCO-ITP-SP-MIB", "cItpSpLinkLsacState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTsrcState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcocState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcocLocalBSNT"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcocRemoteBSNT"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcbcState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkReceivedSIB"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTransmittedSIB"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT01"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT02"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT03"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT04"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT05"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT06"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT07"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMAERMCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMAERMFailCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMSURMCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMSURMFailCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpStatsGroup = cItpSpStatsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpStatsGroup.setDescription('SP protocol statistics objects.')
cItpSpScalarsGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 8)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpVariant"), ("CISCO-ITP-SP-MIB", "cItpSpCLLICode"), ("CISCO-ITP-SP-MIB", "cItpSpDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpDescription"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T01"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T02"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T03"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T04E"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T04N"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T05"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T06"), ("CISCO-ITP-SP-MIB", "cItpSpMtp2T07"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T01"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T02"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T03"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T04"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T05"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T06"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T07"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T08"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T10"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T11"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T12"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T13"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T14"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T15"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T16"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T17"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T18"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T19"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T20"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T21"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T22"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T23"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T24"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T25"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T26"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T27"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T28"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T29"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T30"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T31"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T32"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T33"), ("CISCO-ITP-SP-MIB", "cItpSpMtp3T34"), ("CISCO-ITP-SP-MIB", "cItpSpTimerLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpTimerLinkMessage"), ("CISCO-ITP-SP-MIB", "cItpSpTimerLinkActRetry"), ("CISCO-ITP-SP-MIB", "cItpSpTFR"), ("CISCO-ITP-SP-MIB", "cItpSpCongestionsLevels"), ("CISCO-ITP-SP-MIB", "cItpSpFastRestart"), ("CISCO-ITP-SP-MIB", "cItpSpDistSccpUnseq"), ("CISCO-ITP-SP-MIB", "cItpSpSummaryRoutingException"), ("CISCO-ITP-SP-MIB", "cItpSpUtilSampleInterval"), ("CISCO-ITP-SP-MIB", "cItpSpUtilThreshold"), ("CISCO-ITP-SP-MIB", "cItpSpUtilAbateDelta"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpScalarsGroupRev2 = cItpSpScalarsGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpScalarsGroupRev2.setDescription('SP main objects.')
cItpSpLinksetGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 9)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLinksetSourcePointCode"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSourceDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentPointCode"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAdjacentDisplayPC"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetState"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetInboundAcl"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetOutboundAcl"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSnmmRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSntmRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare2RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSccpRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetIsupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDupcRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDupfRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetBisupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSisupRTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare11RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare12RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare13RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare14RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetSpare15RTN"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetAccountingEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetNumLinks"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDurationInService"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDurationOutService"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T04E"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T04N"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp2T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T04"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T08"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T10"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T11"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T12"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T13"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T14"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T15"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T16"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T17"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T18"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T19"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T20"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T21"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T22"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T23"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T24"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T25"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T26"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T27"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T28"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T29"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T30"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T31"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T32"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T33"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetMtp3T34"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTimerLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTimerLinkMessage"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetTimerLinkActRetry"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetActPriority"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetType"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetRowStatus"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetNi"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetDescription"), ("CISCO-ITP-SP-MIB", "cItpSpLinksetVariant"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpLinksetGroupRev2 = cItpSpLinksetGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinksetGroupRev2.setDescription('SP linkset objects.')
cItpSpLinkGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 10)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLinkDescription"), ("CISCO-ITP-SP-MIB", "cItpSpLinkState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkType"), ("CISCO-ITP-SP-MIB", "cItpSpLinkifIndex"), ("CISCO-ITP-SP-MIB", "cItpSpLinkSctpAssociation"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3PacketsRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3PacketsSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3BytesRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3BytesSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T04E"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T04N"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T01"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T02"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T03"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T04"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T05"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T06"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T07"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T08"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T10"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T11"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T12"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T13"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T14"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T15"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T16"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T17"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T18"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T19"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T20"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T21"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T22"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T23"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T24"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T25"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T26"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T27"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T28"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T29"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T30"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T31"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T32"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T33"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3T34"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTimerLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTimerLinkMessage"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTimerLinkActRetry"), ("CISCO-ITP-SP-MIB", "cItpSpLinkXmitQueueDepth"), ("CISCO-ITP-SP-MIB", "cItpSpLinkXmitQueueDepthHigh"), ("CISCO-ITP-SP-MIB", "cItpSpLinkXmitQueueDepthHighRT"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionAbate1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionAbate2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionAbate3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionOnset1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionOnset2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkCongestionOnset3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkSigLinkTest"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E4"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E5"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E6"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E7"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E8"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E9"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E10"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T1E11"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E5"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E6"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E7"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E9"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E10"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E15"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E16"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T2E18"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3PacketsRetrans"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp3BytesRetrans"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E6"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E7"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E10L1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E10L2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E10L3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E11L1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E11L2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQ752T3E11L3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPType4"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr1"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr2"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr3"), ("CISCO-ITP-SP-MIB", "cItpSpLinkIPAddr4"), ("CISCO-ITP-SP-MIB", "cItpSpLinkLocalPort"), ("CISCO-ITP-SP-MIB", "cItpSpLinkRemotePort"), ("CISCO-ITP-SP-MIB", "cItpSpLinkQosClass"), ("CISCO-ITP-SP-MIB", "cItpSpLinkRowStatus"), ("CISCO-ITP-SP-MIB", "cItpSpLinkStateReason"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDisplayName"), ("CISCO-ITP-SP-MIB", "cItpSpLinkDroppedPkts"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTransmittedLssu"), ("CISCO-ITP-SP-MIB", "cItpSpLinkReceivedLssu"), ("CISCO-ITP-SP-MIB", "cItpSpLinkProtocolDetails"), ("CISCO-ITP-SP-MIB", "cItpSpLinkLsacState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTsrcState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcocState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcocLocalBSNT"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcocRemoteBSNT"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTcbcState"), ("CISCO-ITP-SP-MIB", "cItpSpLinkReceivedSIB"), ("CISCO-ITP-SP-MIB", "cItpSpLinkTransmittedSIB"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT01"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT02"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT03"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT04"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT05"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT06"), ("CISCO-ITP-SP-MIB", "cItpSpLinkMtp2ExpiredT07"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMAERMCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMAERMFailCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMSURMCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkOMSURMFailCount"), ("CISCO-ITP-SP-MIB", "cItpSpLinkPlanCapacityRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilThresholdRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilizationRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilStateRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkL2BytesRcvd"), ("CISCO-ITP-SP-MIB", "cItpSpLinkPlanCapacitySent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilThresholdSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilizationSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilStateSent"), ("CISCO-ITP-SP-MIB", "cItpSpLinkL2BytesSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpLinkGroupRev2 = cItpSpLinkGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpLinkGroupRev2.setDescription('SP link objects.')
cItpSpNotificationsEnableGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 11)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLsStateChangeNotifEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpLnkStateChangeNotifEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpCongestionNotifEnabled"), ("CISCO-ITP-SP-MIB", "cItpSpLinkUtilNotifEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpNotificationsEnableGroupRev2 = cItpSpNotificationsEnableGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpNotificationsEnableGroupRev2.setDescription('SP enable notification objects.')
cItpSpNotificationsGroupRev2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 232, 2, 2, 12)).setObjects(("CISCO-ITP-SP-MIB", "cItpSpLinksetStateChange"), ("CISCO-ITP-SP-MIB", "cItpSpLinkStateChange"), ("CISCO-ITP-SP-MIB", "cItpSpCongestionChange"), ("CISCO-ITP-SP-MIB", "cItpSpLinkRcvdUtilChange"), ("CISCO-ITP-SP-MIB", "cItpSpLinkSentUtilChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cItpSpNotificationsGroupRev2 = cItpSpNotificationsGroupRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cItpSpNotificationsGroupRev2.setDescription('SP notification objects.')
mibBuilder.exportSymbols("CISCO-ITP-SP-MIB", cItpSpMtp3T30=cItpSpMtp3T30, cItpSpLinkIPType1=cItpSpLinkIPType1, cItpSpLinksetName=cItpSpLinksetName, cItpSpLinkPlanCapacityRcvd=cItpSpLinkPlanCapacityRcvd, cItpSpLinkState=cItpSpLinkState, cItpSpLinkSctpAssociation=cItpSpLinkSctpAssociation, cItpSpMIBNotifs=cItpSpMIBNotifs, cItpSpLinkMtp3T17=cItpSpLinkMtp3T17, cItpSpLinkTransmittedSIB=cItpSpLinkTransmittedSIB, cItpSpMIBCompliance=cItpSpMIBCompliance, cItpSpLinkTcbcState=cItpSpLinkTcbcState, cItpSpLinkOMSURMCount=cItpSpLinkOMSURMCount, cItpSpLinksetSpare15RTN=cItpSpLinksetSpare15RTN, cItpSpLinksetSccpRTN=cItpSpLinksetSccpRTN, cItpSpLinksetSourcePointCode=cItpSpLinksetSourcePointCode, cItpSpLinksetMtp3T30=cItpSpLinksetMtp3T30, cItpSpLinksetMtp3T07=cItpSpLinksetMtp3T07, cItpSpCLLICode=cItpSpCLLICode, cItpSpLinkXmitQueueDepthHigh=cItpSpLinkXmitQueueDepthHigh, PYSNMP_MODULE_ID=ciscoItpSpMIB, cItpSpLinksetNumLinks=cItpSpLinksetNumLinks, cItpSpLinkTsrcState=cItpSpLinkTsrcState, cItpSpLinksetMtp3T20=cItpSpLinksetMtp3T20, cItpSpLinksetActPriority=cItpSpLinksetActPriority, cItpSpLinksetDescription=cItpSpLinksetDescription, cItpSpMtp3T22=cItpSpMtp3T22, cItpSpLinkTableEntry=cItpSpLinkTableEntry, cItpSpLinkUtilThresholdSent=cItpSpLinkUtilThresholdSent, cItpSpLinkMtp3BytesSent=cItpSpLinkMtp3BytesSent, cItpSpLinkQ752T1E2=cItpSpLinkQ752T1E2, cItpSpTimerLinkActRetry=cItpSpTimerLinkActRetry, cItpSpLinksetMtp3T26=cItpSpLinksetMtp3T26, cItpSpLinkMtp3T04=cItpSpLinkMtp3T04, CItpSpPercentThreshold=CItpSpPercentThreshold, cItpSpMtp3T23=cItpSpMtp3T23, cItpSpLinkMtp2T06=cItpSpLinkMtp2T06, cItpSpLinksetMtp3T33=cItpSpLinksetMtp3T33, cItpSpLinkQ752T1E1=cItpSpLinkQ752T1E1, cItpSpLinksetMtp3T05=cItpSpLinksetMtp3T05, cItpSpLinkXmitQueueDepthHighRT=cItpSpLinkXmitQueueDepthHighRT, cItpSpMtp2T06=cItpSpMtp2T06, cItpSpLinkMtp3T06=cItpSpLinkMtp3T06, cItpSpLinkQ752T1E7=cItpSpLinkQ752T1E7, cItpSpLinkDroppedPkts=cItpSpLinkDroppedPkts, cItpSpLinksetMtp3T34=cItpSpLinksetMtp3T34, cItpSpDisplayName=cItpSpDisplayName, cItpSpUtilAbateDelta=cItpSpUtilAbateDelta, cItpSpLinkQ752T2E18=cItpSpLinkQ752T2E18, cItpSpMtp3T33=cItpSpMtp3T33, cItpSpLinkMtp2ExpiredT07=cItpSpLinkMtp2ExpiredT07, cItpSpLinksetMtp3T22=cItpSpLinksetMtp3T22, cItpSpLinksetMtp3T02=cItpSpLinksetMtp3T02, cItpSpLinksetSpare13RTN=cItpSpLinksetSpare13RTN, cItpSpLinkMtp2ExpiredT02=cItpSpLinkMtp2ExpiredT02, cItpSpLinkCongestionState=cItpSpLinkCongestionState, cItpSpLinkMtp3T21=cItpSpLinkMtp3T21, cItpSpCongestionNotifEnabled=cItpSpCongestionNotifEnabled, cItpSpNotificationsGroupRev2=cItpSpNotificationsGroupRev2, cItpSpLinkMtp3PacketsRetrans=cItpSpLinkMtp3PacketsRetrans, cItpSpScalars=cItpSpScalars, cItpSpLinkQ752T3E10L3=cItpSpLinkQ752T3E10L3, cItpSpLinkMtp3T07=cItpSpLinkMtp3T07, CItpSpSampleInterval=CItpSpSampleInterval, CItpSpSequenceNumber=CItpSpSequenceNumber, cItpSpLinksetSpare14RTN=cItpSpLinksetSpare14RTN, cItpSpLinkMtp2T04N=cItpSpLinkMtp2T04N, cItpSpLinkTimerLinkTest=cItpSpLinkTimerLinkTest, cItpSpMIBGroups=cItpSpMIBGroups, cItpSpLinksetGroup=cItpSpLinksetGroup, cItpSpLinkMtp3T19=cItpSpLinkMtp3T19, cItpSpMtp3T25=cItpSpMtp3T25, cItpSpLinkMtp2ExpiredT03=cItpSpLinkMtp2ExpiredT03, cItpSpLinkIPAddr3=cItpSpLinkIPAddr3, cItpSpLinksetAdjacentPointCode=cItpSpLinksetAdjacentPointCode, cItpSpLinksetTupRTN=cItpSpLinksetTupRTN, cItpSpLinksetInboundAcl=cItpSpLinksetInboundAcl, cItpSpPointCodeType=cItpSpPointCodeType, cItpSpLinkMtp2ExpiredT06=cItpSpLinkMtp2ExpiredT06, cItpSpLinksetSntmRTN=cItpSpLinksetSntmRTN, cItpSpLinkMtp3T12=cItpSpLinkMtp3T12, cItpSpMtp2T02=cItpSpMtp2T02, cItpSpNotificationsEnableGroupRev2=cItpSpNotificationsEnableGroupRev2, cItpSpLinksetIsupRTN=cItpSpLinksetIsupRTN, cItpSpMtp3T05=cItpSpMtp3T05, cItpSpMtp3T03=cItpSpMtp3T03, cItpSpLinkMtp3T34=cItpSpLinkMtp3T34, cItpSpLinksetMtp3T14=cItpSpLinksetMtp3T14, cItpSpMtp3T19=cItpSpMtp3T19, cItpSpLinkMtp3T02=cItpSpLinkMtp3T02, cItpSpLinkMtp3T15=cItpSpLinkMtp3T15, cItpSpLinksetMtp3T25=cItpSpLinksetMtp3T25, cItpSpMtp3T28=cItpSpMtp3T28, cItpSpLinkMtp3T27=cItpSpLinkMtp3T27, cItpSpPointCodeDisplay=cItpSpPointCodeDisplay, cItpSpMtp3T11=cItpSpMtp3T11, cItpSpLinksetOutboundAcl=cItpSpLinksetOutboundAcl, cItpSpLinkMtp2T05=cItpSpLinkMtp2T05, cItpSpCongestionsLevels=cItpSpCongestionsLevels, cItpSpMtp2T04N=cItpSpMtp2T04N, cItpSpLinkMtp3T16=cItpSpLinkMtp3T16, cItpSpLinksetMtp3T29=cItpSpLinksetMtp3T29, cItpSpLinksetMtp3T28=cItpSpLinksetMtp3T28, cItpSpCongestionChange=cItpSpCongestionChange, cItpSpPointCodeGroup=cItpSpPointCodeGroup, cItpSpLinkMtp3T01=cItpSpLinkMtp3T01, cItpSpPointCodeNi=cItpSpPointCodeNi, cItpSpLinksetMtp3T21=cItpSpLinksetMtp3T21, cItpSpLinkMtp3T28=cItpSpLinkMtp3T28, cItpSpLinkMtp3T14=cItpSpLinkMtp3T14, cItpSpLinksetTimerLinkTest=cItpSpLinksetTimerLinkTest, cItpSpScalarsGroupRev2=cItpSpScalarsGroupRev2, cItpSpLinkQ752T1E8=cItpSpLinkQ752T1E8, cItpSpLinksetMtp3T32=cItpSpLinksetMtp3T32, cItpSpLinkQ752T2E10=cItpSpLinkQ752T2E10, cItpSpLinkCongestionAbate3=cItpSpLinkCongestionAbate3, cItpSpMtp3T24=cItpSpMtp3T24, cItpSpLinkMtp2ExpiredT01=cItpSpLinkMtp2ExpiredT01, cItpSpLinksetMtp3T27=cItpSpLinksetMtp3T27, cItpSpLinkMtp3T03=cItpSpLinkMtp3T03, cItpSpLinkQ752T3E11L1=cItpSpLinkQ752T3E11L1, cItpSpSummaryRoutingException=cItpSpSummaryRoutingException, cItpSpLinksetMtp3T04=cItpSpLinksetMtp3T04, cItpSpLinksetStateChange=cItpSpLinksetStateChange, cItpSpLinksetMtp2T01=cItpSpLinksetMtp2T01, cItpSpLinksetMtp2T05=cItpSpLinksetMtp2T05, cItpSpLinkGroupRev2=cItpSpLinkGroupRev2, cItpSpMtp3T15=cItpSpMtp3T15, cItpSpLinkMtp2T04E=cItpSpLinkMtp2T04E, cItpSpLinksetMtp3T17=cItpSpLinksetMtp3T17, cItpSpLinkMtp2T01=cItpSpLinkMtp2T01, cItpSpLinkset=cItpSpLinkset, cItpSpLink=cItpSpLink, cItpSpLinkXmitQueueDepth=cItpSpLinkXmitQueueDepth, cItpSpLinkMtp2T03=cItpSpLinkMtp2T03, cItpSpLinkIPAddr2=cItpSpLinkIPAddr2, cItpSpPointCodeBin=cItpSpPointCodeBin, cItpSpPointCodeTable=cItpSpPointCodeTable, cItpSpLinkQ752T1E5=cItpSpLinkQ752T1E5, cItpSpLinkQ752T2E16=cItpSpLinkQ752T2E16, cItpSpMIBComplianceRev2=cItpSpMIBComplianceRev2, cItpSpTimerLinkTest=cItpSpTimerLinkTest, cItpSpLinksetMtp3T13=cItpSpLinksetMtp3T13, cItpSpLinkQ752T3E7=cItpSpLinkQ752T3E7, cItpSpLinkMtp3T26=cItpSpLinkMtp3T26, cItpSpLinkTcocState=cItpSpLinkTcocState, cItpSpLinkQ752T1E4=cItpSpLinkQ752T1E4, cItpSpLinkifIndex=cItpSpLinkifIndex, cItpSpMtp3T07=cItpSpMtp3T07, cItpSpLinkQ752T2E7=cItpSpLinkQ752T2E7, cItpSpLinkType=cItpSpLinkType, CItpSpLinkUtilization=CItpSpLinkUtilization, cItpSpLsStateChangeNotifEnabled=cItpSpLsStateChangeNotifEnabled, cItpSpLinksetMtp3T15=cItpSpLinksetMtp3T15, cItpSpLinkMtp3T32=cItpSpLinkMtp3T32, cItpSpLinkOMAERMFailCount=cItpSpLinkOMAERMFailCount, cItpSpLinkReceivedSIB=cItpSpLinkReceivedSIB, cItpSpLinkQ752T2E15=cItpSpLinkQ752T2E15, cItpSpLinkStateReason=cItpSpLinkStateReason, cItpSpLinkCongestionOnset3=cItpSpLinkCongestionOnset3, cItpSpMtp3T13=cItpSpMtp3T13, cItpSpLinkQ752T3E10L1=cItpSpLinkQ752T3E10L1, cItpSpMtp3T17=cItpSpMtp3T17, cItpSpLinkUtilStateSent=cItpSpLinkUtilStateSent, cItpSpLinkUtilStateRcvd=cItpSpLinkUtilStateRcvd, cItpSpMtp3T01=cItpSpMtp3T01, cItpSpLinkTimerLinkActRetry=cItpSpLinkTimerLinkActRetry, cItpSpLinksetSpare11RTN=cItpSpLinksetSpare11RTN, cItpSpUtilThreshold=cItpSpUtilThreshold, cItpSpLinkTcocRemoteBSNT=cItpSpLinkTcocRemoteBSNT, cItpSpLinkCongestionAbate1=cItpSpLinkCongestionAbate1, cItpSpLinkUtilizationSent=cItpSpLinkUtilizationSent, cItpSpMtp3T06=cItpSpMtp3T06, cItpSpNotificationsEnable=cItpSpNotificationsEnable, cItpSpMtp3T08=cItpSpMtp3T08, cItpSpLinksetDurationOutService=cItpSpLinksetDurationOutService, cItpSpLinkQ752T1E9=cItpSpLinkQ752T1E9, cItpSpMtp3T12=cItpSpMtp3T12, cItpSpLinkLsacState=cItpSpLinkLsacState, cItpSpLinksetMtp3T12=cItpSpLinksetMtp3T12, cItpSpLinksetType=cItpSpLinksetType, cItpSpLinksetMtp3T06=cItpSpLinksetMtp3T06, cItpSpLinkQ752T3E11L2=cItpSpLinkQ752T3E11L2, cItpSpPointCodeRowStatus=cItpSpPointCodeRowStatus, cItpSpLinksetSisupRTN=cItpSpLinksetSisupRTN, cItpSpLinksetMtp2T06=cItpSpLinksetMtp2T06, cItpSpLinkMtp3PacketsRcvd=cItpSpLinkMtp3PacketsRcvd, cItpSpUtilSampleInterval=cItpSpUtilSampleInterval, cItpSpLinkL2BytesSent=cItpSpLinkL2BytesSent, cItpSpLinkQ752T1E3=cItpSpLinkQ752T1E3, cItpSpMtp3T16=cItpSpMtp3T16, cItpSpLinkReceivedLssu=cItpSpLinkReceivedLssu, cItpSpLinksetBisupRTN=cItpSpLinksetBisupRTN, CItpSpLinkCapacity=CItpSpLinkCapacity, cItpSpLinkMtp3T22=cItpSpLinkMtp3T22, cItpSpMtp3T10=cItpSpMtp3T10, cItpSpLinkIPAddr1=cItpSpLinkIPAddr1, cItpSpLinkL2BytesRcvd=cItpSpLinkL2BytesRcvd, cItpSpLinksetTimerLinkActRetry=cItpSpLinksetTimerLinkActRetry, cItpSpLinkIPType4=cItpSpLinkIPType4, cItpSpLinksetMtupRTN=cItpSpLinksetMtupRTN, cItpSpLinkMtp3T25=cItpSpLinkMtp3T25, cItpSpMtp3T20=cItpSpMtp3T20, cItpSpLinkTable=cItpSpLinkTable, cItpSpLinksetDupfRTN=cItpSpLinksetDupfRTN, cItpSpLinkUtilNotifEnabled=cItpSpLinkUtilNotifEnabled, cItpSpLinkCongestionAbate2=cItpSpLinkCongestionAbate2, cItpSpLinkProtocolDetails=cItpSpLinkProtocolDetails, cItpSpLinkQ752T2E9=cItpSpLinkQ752T2E9, cItpSpTFR=cItpSpTFR, cItpSpLinksetTable=cItpSpLinksetTable, cItpSpPointCode=cItpSpPointCode, cItpSpMtp2T05=cItpSpMtp2T05, cItpSpTimerLinkMessage=cItpSpTimerLinkMessage, cItpSpLinkIPType3=cItpSpLinkIPType3, cItpSpLinkQ752T2E5=cItpSpLinkQ752T2E5, cItpSpLinksetMtp3T24=cItpSpLinksetMtp3T24, cItpSpLinksetMtp2T04N=cItpSpLinksetMtp2T04N, cItpSpLinkGroup=cItpSpLinkGroup, cItpSpLinkIPAddr4=cItpSpLinkIPAddr4, cItpSpLinkStateChange=cItpSpLinkStateChange, cItpSpLinksetMtp3T03=cItpSpLinksetMtp3T03, cItpSpStatsGroup=cItpSpStatsGroup, cItpSpLinksetDurationInService=cItpSpLinksetDurationInService, cItpSpLinkQ752T1E6=cItpSpLinkQ752T1E6, cItpSpLinkQ752T2E1=cItpSpLinkQ752T2E1, cItpSpLinkMtp2ExpiredT04=cItpSpLinkMtp2ExpiredT04, cItpSpMtp3T18=cItpSpMtp3T18, cItpSpLinksetMtp2T03=cItpSpLinksetMtp2T03, cItpSpLinkSigLinkTest=cItpSpLinkSigLinkTest, cItpSpLinkMtp3T29=cItpSpLinkMtp3T29, cItpSpLinkTransmittedLssu=cItpSpLinkTransmittedLssu, cItpSpLinksetNi=cItpSpLinksetNi, cItpSpLinkMtp3BytesRetrans=cItpSpLinkMtp3BytesRetrans, cItpSpLinkTcocLocalBSNT=cItpSpLinkTcocLocalBSNT, cItpSpFastRestart=cItpSpFastRestart, cItpSpScalarsGroup=cItpSpScalarsGroup, cItpSpLinkMtp3T31=cItpSpLinkMtp3T31, cItpSpLinkMtp3T33=cItpSpLinkMtp3T33, cItpSpMtp3T31=cItpSpMtp3T31, cItpSpLinkMtp3PacketsSent=cItpSpLinkMtp3PacketsSent, cItpSpLinksetMtp3T31=cItpSpLinksetMtp3T31, cItpSpVariant=cItpSpVariant, cItpSpLinksetSpare2RTN=cItpSpLinksetSpare2RTN, cItpSpMtp3T14=cItpSpMtp3T14, cItpSpLinksetMtp2T07=cItpSpLinksetMtp2T07, cItpSpLinksetRowStatus=cItpSpLinksetRowStatus, cItpSpLinkQ752T3E10L2=cItpSpLinkQ752T3E10L2, cItpSpMtp2T01=cItpSpMtp2T01, cItpSpLinkMtp3T05=cItpSpLinkMtp3T05, cItpSpMtp3T26=cItpSpMtp3T26, cItpSpLinkQ752T1E10=cItpSpLinkQ752T1E10, cItpSpLinkRemotePort=cItpSpLinkRemotePort, cItpSpLinkMtp3T13=cItpSpLinkMtp3T13, cItpSpMtp3T27=cItpSpMtp3T27)
mibBuilder.exportSymbols("CISCO-ITP-SP-MIB", cItpSpLinksetMtp3T01=cItpSpLinksetMtp3T01, cItpSpLinkCongestionOnset2=cItpSpLinkCongestionOnset2, cItpSpMIBConformance=cItpSpMIBConformance, cItpSpMtp3T32=cItpSpMtp3T32, cItpSpLinksetAdjacentDisplayPC=cItpSpLinksetAdjacentDisplayPC, cItpSpLinksetState=cItpSpLinksetState, cItpSpMtp2T07=cItpSpMtp2T07, cItpSpLinkSentUtilChange=cItpSpLinkSentUtilChange, cItpSpLinkOMSURMFailCount=cItpSpLinkOMSURMFailCount, cItpSpLinksetSourceDisplayPC=cItpSpLinksetSourceDisplayPC, cItpSpLinkMtp3T10=cItpSpLinkMtp3T10, cItpSpLinksetMtp3T19=cItpSpLinksetMtp3T19, cItpSpLinksetMtp3T10=cItpSpLinksetMtp3T10, cItpSpLinkIPType2=cItpSpLinkIPType2, cItpSpMIBComplianceRev1=cItpSpMIBComplianceRev1, cItpSpNotifications=cItpSpNotifications, cItpSpMtp3T29=cItpSpMtp3T29, cItpSpLinksetSnmmRTN=cItpSpLinksetSnmmRTN, cItpSpLinkPlanCapacitySent=cItpSpLinkPlanCapacitySent, cItpSpMtp3T04=cItpSpMtp3T04, cItpSpLinksetMtp3T18=cItpSpLinksetMtp3T18, cItpSpLinkTimerLinkMessage=cItpSpLinkTimerLinkMessage, cItpSpLinkMtp2ExpiredT05=cItpSpLinkMtp2ExpiredT05, cItpSpLinkMtp3T20=cItpSpLinkMtp3T20, cItpSpLinksetPlanCapacity=cItpSpLinksetPlanCapacity, cItpSpLinkMtp2T07=cItpSpLinkMtp2T07, cItpSpMtp2T03=cItpSpMtp2T03, cItpSpLinkMtp3T11=cItpSpLinkMtp3T11, cItpSpMtp3T34=cItpSpMtp3T34, cItpSpNotificationsEnableGroup=cItpSpNotificationsEnableGroup, cItpSpLinkRcvdUtilChange=cItpSpLinkRcvdUtilChange, cItpSpLinksetTimerLinkMessage=cItpSpLinksetTimerLinkMessage, cItpSpMtp3T02=cItpSpMtp3T02, ciscoItpSpMIB=ciscoItpSpMIB, cItpSpLinksetMtp3T16=cItpSpLinksetMtp3T16, cItpSpLinkLocalPort=cItpSpLinkLocalPort, cItpSpMtp3T21=cItpSpMtp3T21, CItpSpLinkUtilizationState=CItpSpLinkUtilizationState, cItpSpLinkCongestionOnset1=cItpSpLinkCongestionOnset1, cItpSpLinkMtp3T08=cItpSpLinkMtp3T08, cItpSpLinkRowStatus=cItpSpLinkRowStatus, cItpSpLinksetVariant=cItpSpLinksetVariant, cItpSpLinkQ752T3E6=cItpSpLinkQ752T3E6, cItpSpLinksetDisplayName=cItpSpLinksetDisplayName, cItpSpLinkDisplayName=cItpSpLinkDisplayName, cItpSpLinksetMtp3T23=cItpSpLinksetMtp3T23, cItpSpLinksetMtp2T02=cItpSpLinksetMtp2T02, cItpSpLinkOMAERMCount=cItpSpLinkOMAERMCount, cItpSpLinksetGroupRev2=cItpSpLinksetGroupRev2, cItpSpLinkMtp3T18=cItpSpLinkMtp3T18, cItpSpDescription=cItpSpDescription, cItpSpLinkUtilizationRcvd=cItpSpLinkUtilizationRcvd, cItpSpLinksetMtp3T08=cItpSpLinksetMtp3T08, cItpSpLnkStateChangeNotifEnabled=cItpSpLnkStateChangeNotifEnabled, cItpSpLinksetDupcRTN=cItpSpLinksetDupcRTN, cItpSpLinkMtp3T30=cItpSpLinkMtp3T30, cItpSpLinksetSpare12RTN=cItpSpLinksetSpare12RTN, cItpSpLinkMtp2T02=cItpSpLinkMtp2T02, cItpSpNotificationsGroup=cItpSpNotificationsGroup, cItpSpLinkQ752T2E6=cItpSpLinkQ752T2E6, cItpSpDistSccpUnseq=cItpSpDistSccpUnseq, cItpSpPointCodeTableEntry=cItpSpPointCodeTableEntry, cItpSpLinksetMtp3T11=cItpSpLinksetMtp3T11, cItpSpLinksetTableEntry=cItpSpLinksetTableEntry, cItpSpLinkMtp3BytesRcvd=cItpSpLinkMtp3BytesRcvd, cItpSpMIBObjects=cItpSpMIBObjects, cItpSpMIBCompliances=cItpSpMIBCompliances, cItpSpLinkMtp3T23=cItpSpLinkMtp3T23, cItpSpMtp2T04E=cItpSpMtp2T04E, cItpSpLinkUtilThresholdRcvd=cItpSpLinkUtilThresholdRcvd, cItpSpLinkSlc=cItpSpLinkSlc, cItpSpLinksetMtp2T04E=cItpSpLinksetMtp2T04E, cItpSpLinkQ752T1E11=cItpSpLinkQ752T1E11, cItpSpLinkDescription=cItpSpLinkDescription, cItpSpLinksetAccountingEnabled=cItpSpLinksetAccountingEnabled, cItpSpLinkQ752T3E11L3=cItpSpLinkQ752T3E11L3, cItpSpLinkMtp3T24=cItpSpLinkMtp3T24, cItpSpLinkQosClass=cItpSpLinkQosClass)
