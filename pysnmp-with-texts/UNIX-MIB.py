#
# PySNMP MIB module UNIX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/UNIX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:28:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Unsigned32, Counter64, Integer32, iso, ModuleIdentity, IpAddress, Bits, TimeTicks, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, experimental, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "Counter64", "Integer32", "iso", "ModuleIdentity", "IpAddress", "Bits", "TimeTicks", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "experimental", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
host = MibIdentifier((1, 3, 6, 1, 3, 999))
machine = MibIdentifier((1, 3, 6, 1, 3, 999, 1))
network = MibIdentifier((1, 3, 6, 1, 3, 999, 2))
processor = MibIdentifier((1, 3, 6, 1, 3, 999, 3))
adapter = MibIdentifier((1, 3, 6, 1, 3, 999, 4))
controller = MibIdentifier((1, 3, 6, 1, 3, 999, 5))
printer = MibIdentifier((1, 3, 6, 1, 3, 999, 6))
disk = MibIdentifier((1, 3, 6, 1, 3, 999, 7))
diskPartition = MibIdentifier((1, 3, 6, 1, 3, 999, 8))
tape = MibIdentifier((1, 3, 6, 1, 3, 999, 9))
queue = MibIdentifier((1, 3, 6, 1, 3, 999, 10))
group = MibIdentifier((1, 3, 6, 1, 3, 999, 11))
user = MibIdentifier((1, 3, 6, 1, 3, 999, 12))
installedsw = MibIdentifier((1, 3, 6, 1, 3, 999, 13))
license = MibIdentifier((1, 3, 6, 1, 3, 999, 14))
filesystem = MibIdentifier((1, 3, 6, 1, 3, 999, 15))
mountinfo = MibIdentifier((1, 3, 6, 1, 3, 999, 16))
machineOsType = MibScalar((1, 3, 6, 1, 3, 999, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineOsType.setStatus('mandatory')
if mibBuilder.loadTexts: machineOsType.setDescription('The operating system that the agent is running on')
machineName = MibScalar((1, 3, 6, 1, 3, 999, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineName.setStatus('mandatory')
if mibBuilder.loadTexts: machineName.setDescription('The name of the machine ')
machineTime = MibScalar((1, 3, 6, 1, 3, 999, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineTime.setStatus('mandatory')
if mibBuilder.loadTexts: machineTime.setDescription('The time the machine was queried')
machineOsVersion = MibScalar((1, 3, 6, 1, 3, 999, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineOsVersion.setStatus('mandatory')
if mibBuilder.loadTexts: machineOsVersion.setDescription('The operating system version of the machine')
machineBootRoot = MibScalar((1, 3, 6, 1, 3, 999, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineBootRoot.setStatus('mandatory')
if mibBuilder.loadTexts: machineBootRoot.setDescription('The boot root of the machine')
machineBootTime = MibScalar((1, 3, 6, 1, 3, 999, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineBootTime.setStatus('mandatory')
if mibBuilder.loadTexts: machineBootTime.setDescription('The boot time of the machine')
machineHwModel = MibScalar((1, 3, 6, 1, 3, 999, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineHwModel.setStatus('mandatory')
if mibBuilder.loadTexts: machineHwModel.setDescription('The model name of the machine')
machineHwType = MibScalar((1, 3, 6, 1, 3, 999, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineHwType.setStatus('mandatory')
if mibBuilder.loadTexts: machineHwType.setDescription('The hardware type of the machine')
machineHwVersion = MibScalar((1, 3, 6, 1, 3, 999, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineHwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: machineHwVersion.setDescription('The hardware version of the machine')
machineVendor = MibScalar((1, 3, 6, 1, 3, 999, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineVendor.setStatus('mandatory')
if mibBuilder.loadTexts: machineVendor.setDescription('The hardware vendor of the machine')
machineMemorySize = MibScalar((1, 3, 6, 1, 3, 999, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: machineMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: machineMemorySize.setDescription('The memory of the machine')
networkTable = MibTable((1, 3, 6, 1, 3, 999, 2), )
if mibBuilder.loadTexts: networkTable.setStatus('mandatory')
if mibBuilder.loadTexts: networkTable.setDescription('This table describes the network')
networkEntry = MibTableRow((1, 3, 6, 1, 3, 999, 2, 1), ).setIndexNames((0, "UNIX-MIB", "networkIndex"))
if mibBuilder.loadTexts: networkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: networkEntry.setDescription('An entry in the network table')
networkIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: networkIndex.setDescription('The index ')
networkAddress = MibTableColumn((1, 3, 6, 1, 3, 999, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAddress.setStatus('mandatory')
if mibBuilder.loadTexts: networkAddress.setDescription('The network address of the machine')
networkNodeName = MibTableColumn((1, 3, 6, 1, 3, 999, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: networkNodeName.setDescription('The name of the machine as defined in the protocol')
networkType = MibTableColumn((1, 3, 6, 1, 3, 999, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkType.setStatus('mandatory')
if mibBuilder.loadTexts: networkType.setDescription('The protocol of the network')
processorTable = MibTable((1, 3, 6, 1, 3, 999, 3), )
if mibBuilder.loadTexts: processorTable.setStatus('mandatory')
if mibBuilder.loadTexts: processorTable.setDescription('This table describes the processor')
processorEntry = MibTableRow((1, 3, 6, 1, 3, 999, 3, 1), ).setIndexNames((0, "UNIX-MIB", "processorIndex"))
if mibBuilder.loadTexts: processorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: processorEntry.setDescription('An entry in the processor table')
processorIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 3, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: processorIndex.setDescription('The index ')
processorActiveState = MibTableColumn((1, 3, 6, 1, 3, 999, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorActiveState.setStatus('mandatory')
if mibBuilder.loadTexts: processorActiveState.setDescription('The state of processor')
processorPrimary = MibTableColumn((1, 3, 6, 1, 3, 999, 3, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: processorPrimary.setStatus('mandatory')
if mibBuilder.loadTexts: processorPrimary.setDescription('whether the processor is primary')
adapterTable = MibTable((1, 3, 6, 1, 3, 999, 4), )
if mibBuilder.loadTexts: adapterTable.setStatus('mandatory')
if mibBuilder.loadTexts: adapterTable.setDescription('This table describes the adapters')
adapterEntry = MibTableRow((1, 3, 6, 1, 3, 999, 4, 1), ).setIndexNames((0, "UNIX-MIB", "adapterIndex"))
if mibBuilder.loadTexts: adapterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adapterEntry.setDescription('An entry in the adapter table')
adapterIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: adapterIndex.setDescription('The index ')
adapterName = MibTableColumn((1, 3, 6, 1, 3, 999, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterName.setStatus('mandatory')
if mibBuilder.loadTexts: adapterName.setDescription('The name of the adapter')
adapterType = MibScalar((1, 3, 6, 1, 3, 999, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterType.setStatus('mandatory')
if mibBuilder.loadTexts: adapterType.setDescription('The type of the adapter')
adapterUnitNumber = MibTableColumn((1, 3, 6, 1, 3, 999, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adapterUnitNumber.setDescription('The unit number of the adapter')
adapterNexusNumber = MibTableColumn((1, 3, 6, 1, 3, 999, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterNexusNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adapterNexusNumber.setDescription('The nexus number of the adapter')
adapterRevLevel = MibTableColumn((1, 3, 6, 1, 3, 999, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adapterRevLevel.setStatus('mandatory')
if mibBuilder.loadTexts: adapterRevLevel.setDescription('The revision level of the adapter')
controllerTable = MibTable((1, 3, 6, 1, 3, 999, 5), )
if mibBuilder.loadTexts: controllerTable.setStatus('mandatory')
if mibBuilder.loadTexts: controllerTable.setDescription('This table describes the controller')
controllerEntry = MibTableRow((1, 3, 6, 1, 3, 999, 5, 1), ).setIndexNames((0, "UNIX-MIB", "controllerIndex"))
if mibBuilder.loadTexts: controllerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: controllerEntry.setDescription('An entry in the controller table')
controllerIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: controllerIndex.setDescription('The index ')
controllerName = MibTableColumn((1, 3, 6, 1, 3, 999, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerName.setStatus('mandatory')
if mibBuilder.loadTexts: controllerName.setDescription('The name of the controller')
controllerType = MibTableColumn((1, 3, 6, 1, 3, 999, 5, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerType.setStatus('mandatory')
if mibBuilder.loadTexts: controllerType.setDescription('The type of the controller')
controllerUnitNumber = MibTableColumn((1, 3, 6, 1, 3, 999, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controllerUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: controllerUnitNumber.setDescription('The unit number of the controller')
printerTable = MibTable((1, 3, 6, 1, 3, 999, 6), )
if mibBuilder.loadTexts: printerTable.setStatus('mandatory')
if mibBuilder.loadTexts: printerTable.setDescription('This table describes the printer')
printerEntry = MibTableRow((1, 3, 6, 1, 3, 999, 6, 1), ).setIndexNames((0, "UNIX-MIB", "printerIndex"))
if mibBuilder.loadTexts: printerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: printerEntry.setDescription('An entry in the printer table')
printerIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: printerIndex.setDescription('The index ')
printerName = MibTableColumn((1, 3, 6, 1, 3, 999, 6, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerName.setStatus('mandatory')
if mibBuilder.loadTexts: printerName.setDescription('The name of the printer')
printerQueue = MibTableColumn((1, 3, 6, 1, 3, 999, 6, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerQueue.setStatus('mandatory')
if mibBuilder.loadTexts: printerQueue.setDescription('The queue of the printer')
printerDeviceDriver = MibTableColumn((1, 3, 6, 1, 3, 999, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerDeviceDriver.setStatus('mandatory')
if mibBuilder.loadTexts: printerDeviceDriver.setDescription('The device driver of the printer')
printerDeviceType = MibTableColumn((1, 3, 6, 1, 3, 999, 6, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: printerDeviceType.setDescription('The device type of the printer')
printerUnitNumber = MibTableColumn((1, 3, 6, 1, 3, 999, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: printerUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: printerUnitNumber.setDescription('The unit number of the printer')
diskTable = MibTable((1, 3, 6, 1, 3, 999, 7), )
if mibBuilder.loadTexts: diskTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskTable.setDescription('This table describes the disks')
diskEntry = MibTableRow((1, 3, 6, 1, 3, 999, 7, 1), ).setIndexNames((0, "UNIX-MIB", "diskIndex"))
if mibBuilder.loadTexts: diskEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskEntry.setDescription('An entry in the disk table')
diskIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskIndex.setStatus('mandatory')
if mibBuilder.loadTexts: diskIndex.setDescription('The index ')
diskDeviceName = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: diskDeviceName.setDescription('The name of the disk')
diskPrimaryHost = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPrimaryHost.setStatus('mandatory')
if mibBuilder.loadTexts: diskPrimaryHost.setDescription('The primary host of the disk')
diskUnitNumber = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: diskUnitNumber.setDescription('The unit number of the disk')
diskDeviceDriver = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDeviceDriver.setStatus('mandatory')
if mibBuilder.loadTexts: diskDeviceDriver.setDescription('The device driver of the disk')
diskDeviceType = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: diskDeviceType.setDescription('The device type of the disk')
diskPhysicalCapacity = MibTableColumn((1, 3, 6, 1, 3, 999, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPhysicalCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: diskPhysicalCapacity.setDescription('The formatted capacity of the disk')
diskPartitionTable = MibTable((1, 3, 6, 1, 3, 999, 8), )
if mibBuilder.loadTexts: diskPartitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionTable.setDescription('This table describes the disk partition')
diskPartitionEntry = MibTableRow((1, 3, 6, 1, 3, 999, 8, 1), ).setIndexNames((0, "UNIX-MIB", "diskPartitionIndex"))
if mibBuilder.loadTexts: diskPartitionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionEntry.setDescription('An entry in the disk table')
diskPartitionIndex = MibScalar((1, 3, 6, 1, 3, 999, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionIndex.setDescription('The index ')
diskPartitionName = MibTableColumn((1, 3, 6, 1, 3, 999, 8, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionName.setDescription('The name of the disk partition')
diskPartitionPrimaryHost = MibTableColumn((1, 3, 6, 1, 3, 999, 8, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionPrimaryHost.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionPrimaryHost.setDescription('The primary host of the disk partition')
diskPartitionSize = MibScalar((1, 3, 6, 1, 3, 999, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionSize.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionSize.setDescription('The size of the disk partition')
diskPartitionDeviceName = MibScalar((1, 3, 6, 1, 3, 999, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionDeviceName.setDescription('The device of the disk partition')
diskPartitionStartSector = MibTableColumn((1, 3, 6, 1, 3, 999, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionStartSector.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionStartSector.setDescription('The start sector of the disk partition')
diskPartitionEndSector = MibTableColumn((1, 3, 6, 1, 3, 999, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diskPartitionEndSector.setStatus('mandatory')
if mibBuilder.loadTexts: diskPartitionEndSector.setDescription('The end sector of the diskPartition')
tapeTable = MibTable((1, 3, 6, 1, 3, 999, 9), )
if mibBuilder.loadTexts: tapeTable.setStatus('mandatory')
if mibBuilder.loadTexts: tapeTable.setDescription('This table describes the tapes')
tapeEntry = MibTableRow((1, 3, 6, 1, 3, 999, 9, 1), ).setIndexNames((0, "UNIX-MIB", "tapeIndex"))
if mibBuilder.loadTexts: tapeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tapeEntry.setDescription('An entry in the tape table')
tapeIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 9, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: tapeIndex.setDescription('The index')
tapeDeviceName = MibTableColumn((1, 3, 6, 1, 3, 999, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDeviceName.setDescription('The name of the tape')
tapeTapeUnitNumber = MibScalar((1, 3, 6, 1, 3, 999, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeTapeUnitNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tapeTapeUnitNumber.setDescription('The unit number of the tape')
tapeDeviceDriver = MibTableColumn((1, 3, 6, 1, 3, 999, 9, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDeviceDriver.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDeviceDriver.setDescription('The Device driver of the tape')
tapeDeviceType = MibTableColumn((1, 3, 6, 1, 3, 999, 9, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: tapeDeviceType.setDescription('The Device type of the tape')
tapeMountPoint = MibTableColumn((1, 3, 6, 1, 3, 999, 9, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tapeMountPoint.setStatus('mandatory')
if mibBuilder.loadTexts: tapeMountPoint.setDescription('The mount status of tape')
queueTable = MibTable((1, 3, 6, 1, 3, 999, 10), )
if mibBuilder.loadTexts: queueTable.setStatus('mandatory')
if mibBuilder.loadTexts: queueTable.setDescription('This table describes the queue')
queueEntry = MibTableRow((1, 3, 6, 1, 3, 999, 10, 1), ).setIndexNames((0, "UNIX-MIB", "queueIndex"))
if mibBuilder.loadTexts: queueEntry.setStatus('mandatory')
if mibBuilder.loadTexts: queueEntry.setDescription('An entry in the queue table')
queueIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueIndex.setStatus('mandatory')
if mibBuilder.loadTexts: queueIndex.setDescription('The Index')
queueName = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueName.setStatus('mandatory')
if mibBuilder.loadTexts: queueName.setDescription('The Name of the queue')
queueType = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueType.setStatus('mandatory')
if mibBuilder.loadTexts: queueType.setDescription('The Type of the queue')
queueState = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueState.setStatus('mandatory')
if mibBuilder.loadTexts: queueState.setDescription('The state of the queue - runnable, stopped, halted')
queueDestinationList = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueDestinationList.setStatus('mandatory')
if mibBuilder.loadTexts: queueDestinationList.setDescription('The Destination list of the queue ')
queueCapacity = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: queueCapacity.setDescription('The capacity of the queue')
queuePriority = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePriority.setStatus('mandatory')
if mibBuilder.loadTexts: queuePriority.setDescription('The Priority of the queue')
queueProtection = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueProtection.setStatus('mandatory')
if mibBuilder.loadTexts: queueProtection.setDescription('The protection of the queue')
queueUserComment = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queueUserComment.setStatus('mandatory')
if mibBuilder.loadTexts: queueUserComment.setDescription('The user comment of the queue')
queuePrintServer = MibTableColumn((1, 3, 6, 1, 3, 999, 10, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePrintServer.setStatus('mandatory')
if mibBuilder.loadTexts: queuePrintServer.setDescription('The print server of the queue')
groupTable = MibTable((1, 3, 6, 1, 3, 999, 11), )
if mibBuilder.loadTexts: groupTable.setStatus('mandatory')
if mibBuilder.loadTexts: groupTable.setDescription('This table describes the swGroup ')
groupEntry = MibTableRow((1, 3, 6, 1, 3, 999, 11, 1), ).setIndexNames((0, "UNIX-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: groupEntry.setDescription('An entry in the group table')
groupIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 11, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: groupIndex.setDescription('The index of the group')
groupId = MibTableColumn((1, 3, 6, 1, 3, 999, 11, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupId.setStatus('mandatory')
if mibBuilder.loadTexts: groupId.setDescription('The Id of the group')
groupName = MibTableColumn((1, 3, 6, 1, 3, 999, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupName.setStatus('mandatory')
if mibBuilder.loadTexts: groupName.setDescription('The name of the group')
userTable = MibTable((1, 3, 6, 1, 3, 999, 12), )
if mibBuilder.loadTexts: userTable.setStatus('mandatory')
if mibBuilder.loadTexts: userTable.setDescription('This table describes the User')
userEntry = MibTableRow((1, 3, 6, 1, 3, 999, 12, 1), ).setIndexNames((0, "UNIX-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('mandatory')
if mibBuilder.loadTexts: userEntry.setDescription('An entry in the user table')
userIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userIndex.setStatus('mandatory')
if mibBuilder.loadTexts: userIndex.setDescription('The index')
userName = MibTableColumn((1, 3, 6, 1, 3, 999, 12, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userName.setStatus('mandatory')
if mibBuilder.loadTexts: userName.setDescription('The name of the user')
userId = MibTableColumn((1, 3, 6, 1, 3, 999, 12, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userId.setStatus('mandatory')
if mibBuilder.loadTexts: userId.setDescription('The id of the user')
userFullName = MibTableColumn((1, 3, 6, 1, 3, 999, 12, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userFullName.setStatus('mandatory')
if mibBuilder.loadTexts: userFullName.setDescription('The Full name list of the user ')
userLoginShellCli = MibTableColumn((1, 3, 6, 1, 3, 999, 12, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginShellCli.setStatus('mandatory')
if mibBuilder.loadTexts: userLoginShellCli.setDescription('The Login shell of the user')
userLoginDirectory = MibTableColumn((1, 3, 6, 1, 3, 999, 12, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userLoginDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: userLoginDirectory.setDescription('The login directory of the user')
installedSwTable = MibTable((1, 3, 6, 1, 3, 999, 13), )
if mibBuilder.loadTexts: installedSwTable.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwTable.setDescription('This table describes the installedSw')
installedSwEntry = MibTableRow((1, 3, 6, 1, 3, 999, 13, 1), ).setIndexNames((0, "UNIX-MIB", "installedSwIndex"))
if mibBuilder.loadTexts: installedSwEntry.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwEntry.setDescription('An entry in the installedSw table')
installedSwIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwIndex.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwIndex.setDescription('The index')
installedSwName = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwName.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwName.setDescription('The name of the installedSw')
installedSwVendorAuthor = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwVendorAuthor.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwVendorAuthor.setDescription('The vendor authorization of the installedSw')
installedSwVersion = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwVersion.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwVersion.setDescription('The version of the installedSw')
installedSwVendorPatches = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwVendorPatches.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwVendorPatches.setDescription('The vendor patches list of the installedSw ')
installedSwUserPatches = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwUserPatches.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwUserPatches.setDescription('The user patches of the installedSw')
installedSwLicInstalled = MibTableColumn((1, 3, 6, 1, 3, 999, 13, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: installedSwLicInstalled.setStatus('mandatory')
if mibBuilder.loadTexts: installedSwLicInstalled.setDescription('The license of the installedSw')
licenseTable = MibTable((1, 3, 6, 1, 3, 999, 14), )
if mibBuilder.loadTexts: licenseTable.setStatus('mandatory')
if mibBuilder.loadTexts: licenseTable.setDescription('This table describes the license')
licenseEntry = MibTableRow((1, 3, 6, 1, 3, 999, 14, 1), ).setIndexNames((0, "UNIX-MIB", "licenseIndex"))
if mibBuilder.loadTexts: licenseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: licenseEntry.setDescription('An entry in the license table')
licenseIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 14, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseIndex.setStatus('mandatory')
if mibBuilder.loadTexts: licenseIndex.setDescription('The index')
licenseProductName = MibScalar((1, 3, 6, 1, 3, 999, 14, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseProductName.setStatus('mandatory')
if mibBuilder.loadTexts: licenseProductName.setDescription('The product name of the license')
licenseVendorAuthor = MibTableColumn((1, 3, 6, 1, 3, 999, 14, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVendorAuthor.setStatus('mandatory')
if mibBuilder.loadTexts: licenseVendorAuthor.setDescription('The vendor authorization of the license')
licenseExpirationDate = MibTableColumn((1, 3, 6, 1, 3, 999, 14, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseExpirationDate.setStatus('mandatory')
if mibBuilder.loadTexts: licenseExpirationDate.setDescription('The Expiry date of the license')
licenseVersion = MibTableColumn((1, 3, 6, 1, 3, 999, 14, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseVersion.setStatus('mandatory')
if mibBuilder.loadTexts: licenseVersion.setDescription('The Version of the license ')
licenseCapacity = MibTableColumn((1, 3, 6, 1, 3, 999, 14, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: licenseCapacity.setDescription('The capacity of the license')
licenseAuthorization = MibTableColumn((1, 3, 6, 1, 3, 999, 14, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseAuthorization.setStatus('mandatory')
if mibBuilder.loadTexts: licenseAuthorization.setDescription('The authorization of the license')
filesystemTable = MibTable((1, 3, 6, 1, 3, 999, 15), )
if mibBuilder.loadTexts: filesystemTable.setStatus('mandatory')
if mibBuilder.loadTexts: filesystemTable.setDescription('This table describes the filesystem')
filesystemEntry = MibTableRow((1, 3, 6, 1, 3, 999, 15, 1), ).setIndexNames((0, "UNIX-MIB", "filesystemIndex"))
if mibBuilder.loadTexts: filesystemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: filesystemEntry.setDescription('An entry in the filesystem table')
filesystemIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesystemIndex.setStatus('mandatory')
if mibBuilder.loadTexts: filesystemIndex.setDescription('The Os type of the filesystem')
filesystemName = MibTableColumn((1, 3, 6, 1, 3, 999, 15, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesystemName.setStatus('mandatory')
if mibBuilder.loadTexts: filesystemName.setDescription('The name of the filesystem')
filesystemFreeCapacity = MibTableColumn((1, 3, 6, 1, 3, 999, 15, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesystemFreeCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: filesystemFreeCapacity.setDescription('The free capatity of the filesystem ')
filesystemFormattedCap = MibTableColumn((1, 3, 6, 1, 3, 999, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filesystemFormattedCap.setStatus('mandatory')
if mibBuilder.loadTexts: filesystemFormattedCap.setDescription('The formatted capacity of the filesystem')
mountInfoTable = MibTable((1, 3, 6, 1, 3, 999, 16), )
if mibBuilder.loadTexts: mountInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoTable.setDescription('This table describes the mountInfo')
mountInfoEntry = MibTableRow((1, 3, 6, 1, 3, 999, 16, 1), ).setIndexNames((0, "UNIX-MIB", "mountInfoIndex"))
if mibBuilder.loadTexts: mountInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoEntry.setDescription('An entry in the mountInfo table')
mountInfoIndex = MibTableColumn((1, 3, 6, 1, 3, 999, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountInfoIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoIndex.setDescription('The file system name of the mountInfo')
mountInfoFileSystemName = MibScalar((1, 3, 6, 1, 3, 999, 16, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountInfoFileSystemName.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoFileSystemName.setDescription('The file system name of the mountInfo')
mountInfoDeviceName = MibTableColumn((1, 3, 6, 1, 3, 999, 16, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountInfoDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoDeviceName.setDescription('The Device name of the mountInfo')
mountInfoMountPoint = MibTableColumn((1, 3, 6, 1, 3, 999, 16, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountInfoMountPoint.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoMountPoint.setDescription('The mount point of the mountInfo')
mountInfoMountType = MibTableColumn((1, 3, 6, 1, 3, 999, 16, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountInfoMountType.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoMountType.setDescription('The Mount type list of the mountInfo ')
mountInfoRelVolNum = MibTableColumn((1, 3, 6, 1, 3, 999, 16, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mountInfoRelVolNum.setStatus('mandatory')
if mibBuilder.loadTexts: mountInfoRelVolNum.setDescription('The rel volume number of the mountInfo')
mibBuilder.exportSymbols("UNIX-MIB", userTable=userTable, adapterName=adapterName, mountInfoTable=mountInfoTable, disk=disk, diskPartitionEntry=diskPartitionEntry, diskPartition=diskPartition, networkType=networkType, controllerType=controllerType, installedSwIndex=installedSwIndex, tape=tape, filesystemName=filesystemName, tapeDeviceName=tapeDeviceName, tapeEntry=tapeEntry, installedSwVendorAuthor=installedSwVendorAuthor, printerDeviceType=printerDeviceType, processorActiveState=processorActiveState, processorTable=processorTable, processor=processor, tapeMountPoint=tapeMountPoint, licenseTable=licenseTable, queueCapacity=queueCapacity, host=host, installedSwEntry=installedSwEntry, groupTable=groupTable, machineTime=machineTime, controllerUnitNumber=controllerUnitNumber, installedSwUserPatches=installedSwUserPatches, licenseCapacity=licenseCapacity, group=group, machineOsType=machineOsType, printer=printer, queueName=queueName, machineHwModel=machineHwModel, machineHwVersion=machineHwVersion, filesystemTable=filesystemTable, mountInfoMountPoint=mountInfoMountPoint, installedSwVersion=installedSwVersion, printerDeviceDriver=printerDeviceDriver, diskPhysicalCapacity=diskPhysicalCapacity, mountInfoEntry=mountInfoEntry, groupIndex=groupIndex, diskPartitionIndex=diskPartitionIndex, diskDeviceDriver=diskDeviceDriver, tapeTable=tapeTable, controllerName=controllerName, diskUnitNumber=diskUnitNumber, printerUnitNumber=printerUnitNumber, machineOsVersion=machineOsVersion, machineVendor=machineVendor, filesystemFormattedCap=filesystemFormattedCap, userFullName=userFullName, adapterType=adapterType, diskPartitionPrimaryHost=diskPartitionPrimaryHost, diskTable=diskTable, licenseVendorAuthor=licenseVendorAuthor, networkEntry=networkEntry, licenseEntry=licenseEntry, adapterTable=adapterTable, installedSwLicInstalled=installedSwLicInstalled, printerQueue=printerQueue, diskDeviceName=diskDeviceName, groupEntry=groupEntry, diskPartitionTable=diskPartitionTable, mountinfo=mountinfo, queueDestinationList=queueDestinationList, user=user, filesystem=filesystem, licenseIndex=licenseIndex, userIndex=userIndex, machineBootTime=machineBootTime, adapterEntry=adapterEntry, tapeTapeUnitNumber=tapeTapeUnitNumber, processorEntry=processorEntry, machineMemorySize=machineMemorySize, licenseVersion=licenseVersion, userId=userId, userName=userName, diskPartitionStartSector=diskPartitionStartSector, tapeIndex=tapeIndex, queueTable=queueTable, processorIndex=processorIndex, adapterNexusNumber=adapterNexusNumber, networkNodeName=networkNodeName, adapter=adapter, tapeDeviceType=tapeDeviceType, userEntry=userEntry, groupId=groupId, mountInfoIndex=mountInfoIndex, installedsw=installedsw, networkAddress=networkAddress, adapterIndex=adapterIndex, controllerTable=controllerTable, machineHwType=machineHwType, diskPartitionName=diskPartitionName, machineName=machineName, diskEntry=diskEntry, groupName=groupName, printerName=printerName, machine=machine, installedSwName=installedSwName, diskPartitionEndSector=diskPartitionEndSector, filesystemFreeCapacity=filesystemFreeCapacity, diskPartitionSize=diskPartitionSize, printerIndex=printerIndex, network=network, license=license, tapeDeviceDriver=tapeDeviceDriver, filesystemEntry=filesystemEntry, licenseExpirationDate=licenseExpirationDate, mountInfoMountType=mountInfoMountType, diskDeviceType=diskDeviceType, printerEntry=printerEntry, userLoginShellCli=userLoginShellCli, adapterUnitNumber=adapterUnitNumber, licenseAuthorization=licenseAuthorization, mountInfoDeviceName=mountInfoDeviceName, machineBootRoot=machineBootRoot, processorPrimary=processorPrimary, networkTable=networkTable, diskPartitionDeviceName=diskPartitionDeviceName, queuePrintServer=queuePrintServer, queueState=queueState, diskIndex=diskIndex, queueProtection=queueProtection, filesystemIndex=filesystemIndex, userLoginDirectory=userLoginDirectory, networkIndex=networkIndex, queueUserComment=queueUserComment, mountInfoFileSystemName=mountInfoFileSystemName, controller=controller, queueIndex=queueIndex, queueType=queueType, mountInfoRelVolNum=mountInfoRelVolNum, queueEntry=queueEntry, queuePriority=queuePriority, licenseProductName=licenseProductName, adapterRevLevel=adapterRevLevel, controllerEntry=controllerEntry, queue=queue, installedSwTable=installedSwTable, installedSwVendorPatches=installedSwVendorPatches, controllerIndex=controllerIndex, printerTable=printerTable, diskPrimaryHost=diskPrimaryHost)
