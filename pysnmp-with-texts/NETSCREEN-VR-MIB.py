#
# PySNMP MIB module NETSCREEN-VR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-VR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
netscreenVR, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVR")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibIdentifier, ModuleIdentity, Counter64, NotificationType, Gauge32, IpAddress, Integer32, ObjectIdentity, iso, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibIdentifier", "ModuleIdentity", "Counter64", "NotificationType", "Gauge32", "IpAddress", "Integer32", "ObjectIdentity", "iso", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenVRMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 18, 0))
netscreenVRMibModule.setRevisions(('2004-05-03 00:00', '2001-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenVRMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Creation Date',))
if mibBuilder.loadTexts: netscreenVRMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenVRMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenVRMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenVRMibModule.setDescription('This module defines the object that are used to monitor VR info')
vrTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 18, 1), )
if mibBuilder.loadTexts: vrTable.setStatus('current')
if mibBuilder.loadTexts: vrTable.setDescription('VR table. This table contains VR info.')
vrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1), ).setIndexNames((0, "NETSCREEN-VR-MIB", "vrId"))
if mibBuilder.loadTexts: vrEntry.setStatus('current')
if mibBuilder.loadTexts: vrEntry.setDescription("Entry containing information about the BGP's Version, LocalAs and Identifier")
vrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrName.setStatus('current')
if mibBuilder.loadTexts: vrName.setDescription('Name of the VR.')
vrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrId.setStatus('current')
if mibBuilder.loadTexts: vrId.setDescription('Id for the VR. It will be used in all other private MIBs so that cross reference can be made.')
vrVsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrVsysName.setStatus('current')
if mibBuilder.loadTexts: vrVsysName.setDescription('Id of the vsys which owns this VR.')
vrRouteId = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrRouteId.setStatus('current')
if mibBuilder.loadTexts: vrRouteId.setDescription('Router id, used by OSFP and BGP.')
vrMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: vrMaxRoutes.setDescription('Maximum routes allowed for this VR.')
vrNumRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrNumRoutes.setStatus('current')
if mibBuilder.loadTexts: vrNumRoutes.setDescription('The number of routes currently the VR has.')
vrSharable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrSharable.setStatus('current')
if mibBuilder.loadTexts: vrSharable.setDescription('The VR is sharable or not.')
vrOspfRipBgpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrOspfRipBgpEnabled.setStatus('current')
if mibBuilder.loadTexts: vrOspfRipBgpEnabled.setDescription('Enable OSPF, RIP, BGP.')
vrTrapPrivate = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 18, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrTrapPrivate.setStatus('current')
if mibBuilder.loadTexts: vrTrapPrivate.setDescription("0 private, 1 public. This only applies to root system' default VR. If private trap is enabled, a private trap is sent, otherwise, the standard trap is sent. For other VRs, By default, the public trap is supported.")
mibBuilder.exportSymbols("NETSCREEN-VR-MIB", vrName=vrName, vrNumRoutes=vrNumRoutes, vrTable=vrTable, vrOspfRipBgpEnabled=vrOspfRipBgpEnabled, vrTrapPrivate=vrTrapPrivate, vrVsysName=vrVsysName, PYSNMP_MODULE_ID=netscreenVRMibModule, vrSharable=vrSharable, vrEntry=vrEntry, vrRouteId=vrRouteId, netscreenVRMibModule=netscreenVRMibModule, vrMaxRoutes=vrMaxRoutes, vrId=vrId)
