#
# PySNMP MIB module APPIAN-BUFFERS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/APPIAN-BUFFERS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:23:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
acOsap, AcAdminStatus, AcNodeId = mibBuilder.importSymbols("APPIAN-SMI-MIB", "acOsap", "AcAdminStatus", "AcNodeId")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, NotificationType, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, iso, MibIdentifier, Counter64, Counter32, Bits, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "NotificationType", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "iso", "MibIdentifier", "Counter64", "Counter32", "Bits", "TimeTicks", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
acBuffers = ModuleIdentity((1, 3, 6, 1, 4, 1, 2785, 2, 10))
acBuffers.setRevisions(('1900-10-16 11:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acBuffers.setRevisionsDescriptions(('Initial version of MIB.',))
if mibBuilder.loadTexts: acBuffers.setLastUpdated('0010161130Z')
if mibBuilder.loadTexts: acBuffers.setOrganization('Appian Communications, Inc.')
if mibBuilder.loadTexts: acBuffers.setContactInfo('Douglas Theriault')
if mibBuilder.loadTexts: acBuffers.setDescription('Appian Communications OSAP buffers MIB contains the definitions for buffer management related configuration objects.')
acSwitchBuffStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1), )
if mibBuilder.loadTexts: acSwitchBuffStatsTable.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsTable.setDescription('This table contains switch buffer statistics. Switch buffers are used by the switch forwarding logic on the services card to enqueue packets.')
acSwitchBuffStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1), ).setIndexNames((0, "APPIAN-BUFFERS-MIB", "acSwitchBuffStatsNodeId"))
if mibBuilder.loadTexts: acSwitchBuffStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsEntry.setDescription('A row within the switch buffer statistics table.')
acSwitchBuffStatsNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSwitchBuffStatsNodeId.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsNodeId.setDescription("The unique node identification number representing a chassis within a ring of OSAP's.")
acSwitchBuffStatsBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffStatsBuffSize.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsBuffSize.setDescription('The size of a switch buffer in bytes (octets).')
acSwitchBuffStatsTotalBuffs = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffStatsTotalBuffs.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsTotalBuffs.setDescription('The total number of physical switch buffers available for general use.')
acSwitchBuffStatsTotalBuffCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffStatsTotalBuffCredits.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsTotalBuffCredits.setDescription('The total number of buffer credits available for general use. The number of buffer credits is a function of acSwitchBuffStatsBuffSize, acSwitchBuffStatsTotalBuffs, and acSwitchBuffCfgOversubRate.')
acSwitchBuffStatsTotalLocalServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffStatsTotalLocalServices.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsTotalLocalServices.setDescription('The total number of local services configured on this system.')
acSwitchBuffStatsTotalRemoteServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffStatsTotalRemoteServices.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsTotalRemoteServices.setDescription('The total number of remote services configured on this system.')
acSwitchBuffStatsTotalRemPoolMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffStatsTotalRemPoolMisses.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffStatsTotalRemPoolMisses.setDescription('The total number of remote services that are in the acSwitchBuffCfgRemoteServicesBP buffer pool because the buffer pool associated with that remote service does not exist or is disabled.')
acSwitchBuffCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2), )
if mibBuilder.loadTexts: acSwitchBuffCfgTable.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgTable.setDescription('This table contains switch buffer configuration parameters. Switch buffers are used by the switch forwarding logic on the services card to enqueue packets.')
acSwitchBuffCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1), ).setIndexNames((0, "APPIAN-BUFFERS-MIB", "acSwitchBuffCfgNodeId"))
if mibBuilder.loadTexts: acSwitchBuffCfgEntry.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgEntry.setDescription('A row within the switch buffer configuration table.')
acSwitchBuffCfgNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSwitchBuffCfgNodeId.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgNodeId.setDescription("The unique node identification number representing a chassis within a ring of OSAP's.")
acSwitchBuffCfgOversubRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgOversubRate.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgOversubRate.setDescription('A percentage indicating how much the system should oversubscribe buffers to queues. By oversubscribing buffers to queues, a statistical gain can be achieved with respect to system throughput. For example, to oversubscribe buffer utilization by 50%, set acSwitchBuffCfgOversubRate to 50. This means that if some queues encounter bursty traffic, they will be less likely to drop data. Using oversubscription involves risking that all traffic flows do not burst at the same time. If this were to happen, some high priority traffic could be dropped in favor of lower priority traffic. Since this may be undesirable, the default value for this object is 0 (indicating a zero percent oversubscription rate). A setting of 0 implies the total number of buffer credits in the system equals the total number of physical buffers.')
acSwitchBuffCfgMinDefaultBPSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgMinDefaultBPSize.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgMinDefaultBPSize.setDescription('A percentage indicating how much of the total system buffer credits should be reserved for the default buffer pool. Since user defined buffer pools take buffers from the default buffer pool, setting acSwitchBuffCfgMinDefaultBPSize to a value greater that 0 ensures that the default buffer pool will never have 0 buffer credits. For example, setting acSwitchBuffCfgMinDefaultBPSize to 37 will reserve 37% of the total system buffer credits (acSwitchBuffStatsTotalBuffCredits) for the default buffer pool.')
acSwitchBuffCfgRemoteServicesBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 131072)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgRemoteServicesBP.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgRemoteServicesBP.setDescription('A buffer pool associated with remote services. All remote services on this system will share this buffer pool if the buffer pool associated with the remote service does not exist or is diabled. The default buffer pool (buffer pool #1) is the default setting for this attribute.')
acSwitchBuffCfgUpBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgUpBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgUpBuffCapWeight.setDescription('The system level buffering capacity weight for upstream traffic. Upstream traffic is defined as traffic that enters the system on an access port and exits the system on a trunk. A value of 1 provides the least amount of buffering capacity while a value of 10 provides the most buffering capacity. This value is relative in that the number of buffers actually assigned to hardware queues depends on how many services are configured on any given buffer pool.')
acSwitchBuffCfgDownBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgDownBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgDownBuffCapWeight.setDescription('The system level buffering capacity weight for downstream traffic. Downstream traffic is defined as traffic that enters the system on a trunk and exits the system on an access port. A value of 1 provides the least amount of buffering capacity while a value of 10 provides the most buffering capacity. This value is relative in that the number of buffers actually assigned to hardware queues depends on how many services are configured on any given buffer pool.')
acSwitchBuffCfgLocalBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgLocalBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgLocalBuffCapWeight.setDescription('The system level buffering capacity weight for local traffic. Local traffic is defined as traffic that enters the system on an access port and exits the system on an access port. Local traffic only exists on systems which have multiple ports configured on the same transparent LAN service. A value of 1 provides the least amount of buffering capacity while a value of 10 provides the most buffering capacity. This value is relative in that the number of buffers actually assigned to hardware queues depends on how many services are configured on any given buffer pool.')
acSwitchBuffCfgRemoteBuffCapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 2, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffCfgRemoteBuffCapWeight.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffCfgRemoteBuffCapWeight.setDescription('The system level buffering capacity weight for remote services traffic. Remote services traffic enters the system on a trunk and exits the system on a trunk. A value of 1 provides the least amount of buffering capacity while a value of 10 provides the most buffering capacity. This value is relative in that the number of buffers actually assigned to hardware queues depends on how many services are configured on any given buffer pool.')
acSwitchBuffPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3), )
if mibBuilder.loadTexts: acSwitchBuffPoolTable.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolTable.setDescription('This table contains switch logical buffer pool configuration parameters. Switch buffers are used by the switch forwarding logic on the services card to enqueue packets. Logical switch buffer pools can be assigned/associated with OSAP services.')
acSwitchBuffPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1), ).setIndexNames((0, "APPIAN-BUFFERS-MIB", "acSwitchBuffPoolNodeId"), (0, "APPIAN-BUFFERS-MIB", "acSwitchBuffPoolID"))
if mibBuilder.loadTexts: acSwitchBuffPoolEntry.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolEntry.setDescription('A row within the switch logical buffer pool table.')
acSwitchBuffPoolNodeId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 1), AcNodeId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSwitchBuffPoolNodeId.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolNodeId.setDescription("The unique node identification number representing a chassis within a ring of OSAP's.")
acSwitchBuffPoolID = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 131072))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: acSwitchBuffPoolID.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolID.setDescription('The buffer pool identifier. Also known as the buffer pool number. Buffer pool number 1 is reserved as the default buffer pool (which always exists and cannot be deleted or disabled).')
acSwitchBuffPoolAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 3), AcAdminStatus().clone('activate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffPoolAdminStatus.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolAdminStatus.setDescription('Appian Administrative Status attribute used to set the provisioning state as either activate(1), inactivate(2) or delete(3). Refer to the Appian-SMI.mib file for additional information. Note that the default buffer pool cannot be deleted or disabled.')
acSwitchBuffPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffPoolName.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolName.setDescription('A user defined string. This allows users to assign a descriptive name to a buffer pool.')
acSwitchBuffPoolCfgBuffCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffPoolCfgBuffCredits.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolCfgBuffCredits.setDescription('Allocate the specified percentage of the total switch buffer credits to this buffer pool. Note that if the request cannot be met, the system will allocate as high a percentage as possible and report that value in acSwitchBuffPoolActualBuffCredits.')
acSwitchBuffPoolActualBuffCredits = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffPoolActualBuffCredits.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolActualBuffCredits.setDescription('The actual percentage of the total switch buffer credits allocated to this buffer pool.')
acSwitchBuffPoolTotalLocalServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffPoolTotalLocalServices.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolTotalLocalServices.setDescription('The number of local services associated with this buffer pool.')
acSwitchBuffPoolTotalRemoteServices = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acSwitchBuffPoolTotalRemoteServices.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolTotalRemoteServices.setDescription('The number of remote services associated with this buffer pool.')
acSwitchBuffPoolResellerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffPoolResellerId.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolResellerId.setDescription('A unique number assigned by the EMS that uniquely identifies the reseller which supplies this buffer pool.')
acSwitchBuffPoolResellerName = MibTableColumn((1, 3, 6, 1, 4, 1, 2785, 2, 10, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acSwitchBuffPoolResellerName.setStatus('current')
if mibBuilder.loadTexts: acSwitchBuffPoolResellerName.setDescription('An ASCII string which represents the reseller in a readable form. The string can be up to 64 characters in length.')
mibBuilder.exportSymbols("APPIAN-BUFFERS-MIB", acSwitchBuffPoolCfgBuffCredits=acSwitchBuffPoolCfgBuffCredits, acSwitchBuffStatsTotalLocalServices=acSwitchBuffStatsTotalLocalServices, acSwitchBuffCfgEntry=acSwitchBuffCfgEntry, acBuffers=acBuffers, acSwitchBuffCfgMinDefaultBPSize=acSwitchBuffCfgMinDefaultBPSize, acSwitchBuffPoolAdminStatus=acSwitchBuffPoolAdminStatus, acSwitchBuffStatsNodeId=acSwitchBuffStatsNodeId, acSwitchBuffStatsTable=acSwitchBuffStatsTable, acSwitchBuffPoolResellerId=acSwitchBuffPoolResellerId, PYSNMP_MODULE_ID=acBuffers, acSwitchBuffCfgTable=acSwitchBuffCfgTable, acSwitchBuffPoolEntry=acSwitchBuffPoolEntry, acSwitchBuffCfgUpBuffCapWeight=acSwitchBuffCfgUpBuffCapWeight, acSwitchBuffCfgNodeId=acSwitchBuffCfgNodeId, acSwitchBuffPoolID=acSwitchBuffPoolID, acSwitchBuffStatsEntry=acSwitchBuffStatsEntry, acSwitchBuffPoolNodeId=acSwitchBuffPoolNodeId, acSwitchBuffPoolTotalRemoteServices=acSwitchBuffPoolTotalRemoteServices, acSwitchBuffCfgOversubRate=acSwitchBuffCfgOversubRate, acSwitchBuffCfgRemoteBuffCapWeight=acSwitchBuffCfgRemoteBuffCapWeight, acSwitchBuffCfgLocalBuffCapWeight=acSwitchBuffCfgLocalBuffCapWeight, acSwitchBuffPoolResellerName=acSwitchBuffPoolResellerName, acSwitchBuffStatsTotalRemPoolMisses=acSwitchBuffStatsTotalRemPoolMisses, acSwitchBuffStatsTotalBuffs=acSwitchBuffStatsTotalBuffs, acSwitchBuffPoolTable=acSwitchBuffPoolTable, acSwitchBuffStatsTotalRemoteServices=acSwitchBuffStatsTotalRemoteServices, acSwitchBuffPoolActualBuffCredits=acSwitchBuffPoolActualBuffCredits, acSwitchBuffPoolTotalLocalServices=acSwitchBuffPoolTotalLocalServices, acSwitchBuffCfgDownBuffCapWeight=acSwitchBuffCfgDownBuffCapWeight, acSwitchBuffStatsTotalBuffCredits=acSwitchBuffStatsTotalBuffCredits, acSwitchBuffPoolName=acSwitchBuffPoolName, acSwitchBuffStatsBuffSize=acSwitchBuffStatsBuffSize, acSwitchBuffCfgRemoteServicesBP=acSwitchBuffCfgRemoteServicesBP)
