#
# PySNMP MIB module HP-ICF-DHCPV4-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-DHCPV4-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:33:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
VidList, = mibBuilder.importSymbols("HP-ICF-FTRCO", "VidList")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifName, = mibBuilder.importSymbols("IF-MIB", "ifName")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Gauge32, ObjectIdentity, Unsigned32, Integer32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Bits, NotificationType, Counter32, IpAddress, TimeTicks, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ObjectIdentity", "Unsigned32", "Integer32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Bits", "NotificationType", "Counter32", "IpAddress", "TimeTicks", "Counter64", "ModuleIdentity")
DateAndTime, DisplayString, MacAddress, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "MacAddress", "TextualConvention", "RowStatus", "TruthValue")
hpicfDhcpv4ServerMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99))
hpicfDhcpv4ServerMIB.setRevisions(('2015-10-15 00:00', '2015-01-28 00:00', '2014-03-07 00:00', '2013-04-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setRevisionsDescriptions(('Added hpicfDhcpv4ServerOperStatus', 'Added hpicfDhcpv4ServerDBFTPort, hpicfDhcpv4ServerDBSFTPUsername, hpicfDhcpv4ServerDBSFTPPassword, hpicfDhcpv4ServerDBValidateSFTPServer', 'Added hpicfDhcpv4ServerPoolIsAuthoritative', 'The initial version of this MIB module',))
if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setLastUpdated('201510150000Z')
if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfDhcpv4ServerMIB.setDescription('This MIB module is for entities implementing the server side of the Bootstrap Protocol (BOOTP) and the Dynamic Host Configuration protocol (DHCP) for Internet Protocol version 4(IPv4).')
hpicfDhcpv4ServerNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0))
hpicfDhcpv4ServerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1))
hpicfDhcpv4LeaseDataBase = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1))
hpicfDhcpv4BootpCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 2))
hpicfDhcpv4Counters = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3))
hpicfDhcpv4IpPool = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4))
hpicfDhcpv4PoolIpRange = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5))
hpicfDhcpv4PoolOption = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6))
hpicfDhcpv4PoolDynamicBind = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7))
hpicfDhcpv4ServerConflicts = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8))
hpicfDhcpv4ServerConform = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2))
class InetAddressIPv4(TextualConvention, OctetString):
    description = 'Represents an IPv4 network address: octets contents encoding 1-4 IPv4 address network-byte order The corresponding InetAddressType value is ipv4(1). This textual convention SHOULD NOT be used directly in object definitions since it restricts addresses to a specific format. However, if it is used, it MAY be used either on its own or in conjunction with InetAddressType as a pair.'
    status = 'current'
    displayHint = '1d.1d.1d.1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

hpicfDhcpv4ServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("disableWithClearConfig", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerEnable.setDescription("Global configuration to enable or disable DHCPv4 server on the device. The 'disableWithClearConfig' enum disables DHCPv4 Server along with removing all the DHCPv4 Server related configuration.")
hpicfDhcpv4PingPktNumber = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4PingPktNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4PingPktNumber.setDescription('This object specifies the number of ping packets sent by DHCP server to an IP address before assigning this address to a requesting client.')
hpicfDhcpv4PingTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4PingTimeOut.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4PingTimeOut.setDescription('This object specifies the amount of time the DHCPv4 server must wait before timing out a ping packet.')
hpicfDhcpv4ClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ClearStatistics.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ClearStatistics.setDescription("All the DHCPv4 server and BOOTP statistics will be cleared when this object is set to 'true'. An SNMP 'get' on this object will always return 'false'.")
hpicfDhcpv4ClearBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 14), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ClearBindings.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ClearBindings.setDescription("When the IP address of this object is set to 0.0.0.0, all IP bindings will be cleared. Specific IP binding will be cleared when IP address is provided. An SNMP 'get' on this object will always return 0.0.0.0 .")
hpicfDhcpv4ClearConflictIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 15), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ClearConflictIP.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ClearConflictIP.setDescription("When the value of this object is set to 0.0.0.0, all conflicts will be cleared. Specific IP conflict will be cleared when IP address is provided. An SNMP 'get' on this object will always return 0.0.0.0 .")
hpicfDhcpv4ConflictsLog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ConflictsLog.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ConflictsLog.setDescription('Global configuration to enable or disable DHCPv4 server conflicting address logging.')
hpicfDhcpv4TrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 17), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4TrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4TrapEnable.setDescription('This object will enables or disables the DHCPv4 server traps.')
hpicfDhcpv4ServerVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 18), VidList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerVlanEnable.setDescription('Specifies the VLANs on which DHCPv4 server is enabled.')
hpicfDhcpv4ServerOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("paused", 2), ("inprogress", 3), ("shuttingdown", 4))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerOperStatus.setDescription('Specifies operational status of DHCPv4 protocol.')
hpicfDhcpv4ServerDBFile = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBFile.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBFile.setDescription('A location to store the lease database, to retrieve it after a reboot. The location must be given in the form of a URL as defined in RFC 2396. The allowed character sets and the encoding rules defined in RFC 2396 section 2 apply.')
hpicfDhcpv4ServerDBWriteDelay = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBWriteDelay.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBWriteDelay.setDescription('The number of seconds to delay writing the DHCP lease database file after a database change. This potentially allows grouping multiple database changes into a single write. The default is 300 seconds.')
hpicfDhcpv4ServerDBWriteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBWriteTimeout.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBWriteTimeout.setDescription('The number of seconds to wait for the database file transfer to finish before giving up and declaring a failure. A value of 0 means continue retrying indefinitely.')
hpicfDhcpServerDBFileWriteAttempts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteAttempts.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteAttempts.setDescription('Number of attempts that have been made to write the DHCP lease database to a configured file location.')
hpicfDhcpServerDBFileWriteFailures = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteFailures.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteFailures.setDescription('Number of times that an attempt to write the DHCP lease database to a configured file location has failed.')
hpicfDhcpServerDBFileReadStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notConfigured", 1), ("inProgress", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileReadStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpServerDBFileReadStatus.setDescription('This object indicates whether we were able to successfully load the DHCP lease database from the configured location after the last reboot.')
hpicfDhcpServerDBFileWriteStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notConfigured", 1), ("delaying", 2), ("inProgress", 3), ("succeeded", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpServerDBFileWriteStatus.setDescription("This object indicates whether the DHCP lease database is currently synchronized with the configured file server. 'notConfigured' means that we have not been configured with a server location. 'delaying' means that we are waiting for the write delay to expire before writing the current database. 'inProgress' means that a lease database transfer is active. 'succeeded' means that all leases in our database have been written to the server. 'failed' means that the last attempt to write our lease database failed.")
hpicfDhcpServerDBFileLastWriteTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpServerDBFileLastWriteTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpServerDBFileLastWriteTime.setDescription('The time that we last successfully wrote our lease database to the server. This object will contain a value of all zeroes if we have not written our lease database since the last reboot.')
hpicfDhcpv4ServerDBFTPort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBFTPort.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBFTPort.setDescription('A location to store the port value of the FT Server. The default port value will be 69 for TFTP and 22 for SFTP')
hpicfDhcpv4ServerDBSFTPUsername = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBSFTPUsername.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBSFTPUsername.setDescription('A location to store the Username of the SFTP Server. The default value of username is root.')
hpicfDhcpv4ServerDBSFTPPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBSFTPPassword.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBSFTPPassword.setDescription('A location to store the Password of the SFTP Server.')
hpicfDhcpv4ServerDBValidateSFTPServer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBValidateSFTPServer.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDBValidateSFTPServer.setDescription('This object sets the validate-sftp-server flag. When enabled, the user must login to the SFTP server to verify and accept the public key of the server. When disabled, the public key is accepted automatically.')
hpicfBootpCountRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBootpCountRequests.setReference('RFC-2131.')
if mibBuilder.loadTexts: hpicfBootpCountRequests.setStatus('current')
if mibBuilder.loadTexts: hpicfBootpCountRequests.setDescription('The number of packets received that contain a message type of 1 (BOOTREQUEST) in the first octet and do not contain option number 53 (DHCP Message Type) in the options.')
hpicfBootpCountReplies = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfBootpCountReplies.setReference('RFC-2131.')
if mibBuilder.loadTexts: hpicfBootpCountReplies.setStatus('current')
if mibBuilder.loadTexts: hpicfBootpCountReplies.setDescription('The number of packets sent that contain a message type of 2 (BOOTREPLY) in the first octet and do not contain option number 53 (DHCP Message Type) in the options.')
hpicfDhcpv4CountDiscovers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountDiscovers.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountDiscovers.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountDiscovers.setDescription('The number of DHCPDISCOVER (option 53 with value 1) packets received.')
hpicfDhcpv4CountOffers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountOffers.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountOffers.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountOffers.setDescription('The number of DHCPOFFER (option 53 with value 2) packets sent.')
hpicfDhcpv4CountRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountRequests.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountRequests.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountRequests.setDescription('The number of DHCPREQUEST (option 53 with value 3) packets received.')
hpicfDhcpv4CountDeclines = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountDeclines.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountDeclines.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountDeclines.setDescription('The number of DHCPDECLINE (option 53 with value 4) packets received.')
hpicfDhcpv4CountAcks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountAcks.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountAcks.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountAcks.setDescription('The number of DHCPACK (option 53 with value 5) packets sent.')
hpicfDhcpv4CountNaks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountNaks.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountNaks.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountNaks.setDescription('The number of DHCPNACK (option 53 with value 6) packets sent.')
hpicfDhcpv4CountReleases = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountReleases.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountReleases.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountReleases.setDescription('The number of DHCPRELEASE (option 53 with value 7) packets received.')
hpicfDhcpv4CountInforms = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountInforms.setReference('RFC2131; RFC2132, section 9.6.')
if mibBuilder.loadTexts: hpicfDhcpv4CountInforms.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountInforms.setDescription('The number of DHCPINFORM (option 53 with value 8) packets received.')
hpicfDhcpv4CountBadMsgs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountBadMsgs.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountBadMsgs.setDescription('The number of malformed messages.')
hpicfDhcpv4CountPools = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountPools.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountPools.setDescription('The number of DHCP server IP pools.')
hpicfDhcpv4CountAutoBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountAutoBindings.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountAutoBindings.setDescription('The number of DHCP server dynamic bindings.')
hpicfDhcpv4CountStaticBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountStaticBindings.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountStaticBindings.setDescription('The number of DHCP server manual bindings.')
hpicfDhcpv4CountExpiredOrFreeBindings = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4CountExpiredOrFreeBindings.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4CountExpiredOrFreeBindings.setDescription('The number of DHCP server lease bindings that have expired or free.')
hpicfDhcpv4ServerPoolTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolTable.setDescription('Table that contains objects for DHCPv4 server pool information.')
hpicfDhcpv4ServerPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolEntry.setDescription('A set of objects that are used to support DHCPv4 server pool information.')
hpicfDhcpv4ServerPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolName.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolName.setDescription('The name of this pool entry.')
hpicfDhcpv4ServerPoolNetworkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetworkAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetworkAddress.setDescription('The network address of this DHCP pool entry.')
hpicfDhcpv4ServerPoolNetworkAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 3), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetworkAddressMask.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetworkAddressMask.setDescription('The network address mask of this DHCP pool entry.')
hpicfDhcpv4ServerPoolDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolDomainName.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolDomainName.setDescription('The domain name for the client if the server allocates the address for the client from this pool.')
hpicfDhcpv4ServerPoolNetBIOSNodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("broadcast", 1), ("peerTopeer", 2), ("mixed", 3), ("hybrid", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetBIOSNodeType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolNetBIOSNodeType.setDescription('The NetBIOS node type for a Microsoft DHCP client.')
hpicfDhcpv4ServerPoolLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 6), Unsigned32().clone(86400)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolLeaseTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolLeaseTime.setDescription('The number of seconds remaining until this DHCP lease times out. A value of 0xffffffff indicates an infinite lease.')
hpicfDhcpv4ServerPoolBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolBootFile.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolBootFile.setDescription('The name of the file that is used as a boot image.')
hpicfDhcpv4ServerPoolLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolLowThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolLowThreshold.setDescription('The low threshold for available free addresses in this pool. If the value for available free addresses in this pool becomes equal to or less than this value, a dhcpv4ServerFreeAddressLow event is generated for this pool. No more dhcpv4ServerFreeAddressLow events will be generated for this subnet during this execution of the DHCP server until the value for available free addresses has exceeded the value of hpicfDhcpv4ServerPoolHighThreshold.')
hpicfDhcpv4ServerPoolHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolHighThreshold.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolHighThreshold.setDescription('The high threshold for available free addresses in this pool. If a dhcpv4ServerFreeAddressLow event was generated for this pool, and the value for available free addresses has exceeded the value of hpicfDhcpv4ServerPoolHighThreshold, then a hpicfDhcpv4ServerFreeAddressHigh event will be generated. No more hpicfDhcpv4ServerFreeAddressHigh events will be generated for this pool during this execution of the DHCP server until the value for available free addresses becomes equal to or less than the value of hpicfDhcpv4ServerPoolLowThreshold.')
hpicfDhcpv4ServerPoolFreeAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolFreeAddresses.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolFreeAddresses.setDescription('The number of IPv4 addresses which are available within this pool.')
hpicfDhcpv4ServerDNSServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDNSServerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDNSServerAddress.setDescription('The IP address of DNS IP servers that are available to a DHCP client. One IP address is required and supports up to eight IP addresses. Each IP address is separated by a comma and the list is terminated by a semicolon.')
hpicfDhcpv4ServerNetBIOSNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNetBIOSNameServer.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerNetBIOSNameServer.setDescription('The NetBIOS WINS servers that are available to a DHCP client. One IP address is required and supports up to eight IP addresses. Each IP address is separated by a comma and the list is terminated by a semicolon.')
hpicfDhcpv4ServerDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDefaultRouter.setDescription('The default routers that are available to a DHCP client. One IP address is required and supports up to eight IP addresses. Each IP address is separated by a comma and the list is terminated by a semicolon.')
hpicfDhcpv4ServerTFTPServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerTFTPServerName.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerTFTPServerName.setDescription('The TFTP server name of this DHCP pool entry.')
hpicfDhcpv4ServerTFTPServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 15), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerTFTPServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerTFTPServerIpAddress.setDescription('The TFTP server IP address of this DHCP pool entry.')
hpicfDhcpv4ServerStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 16), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticIpAddress.setDescription('The manual IP address of this DHCP pool entry.')
hpicfDhcpv4ServerStaticIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 17), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticIpAddressMask.setDescription('The manual IP address mask of this DHCP pool entry.')
hpicfDhcpv4ServerStaticHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 18), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerStaticHardwareAddress.setDescription('The ethernet MAC address of a client.')
hpicfDhcpv4ServerPoolIsAuthoritative = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolIsAuthoritative.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolIsAuthoritative.setDescription('This object indicates whether this DHCP server is the sole authority for the IP subnet configured in this pool. When configured as authoriative, the server will actively respond with DHCP ACK or NACK appropriately for all the received DHCP REQUEST and INFORM packets from the clients belonging to this subnet. DHCP INFORM packets received from the clients on a non-authoritative pool will always be ignored.')
hpicfDhcpv4ServerPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 4, 1, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolStatus.setDescription('RowStatus for this table.')
hpicfDhcpv4ServerRangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeTable.setDescription('Table that contains objects for the range of IP addresses in the pool.')
hpicfDhcpv4ServerRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"), (0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeStartAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeEntry.setDescription('A set of objects that are used to support pool IP range.')
hpicfDhcpv4ServerRangeStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeStartAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeStartAddress.setDescription('The start address of the range. The value of hpicfDhcpv4ServerRangeStartAddress must be less than or equal to the value of hpicfDhcpv4ServerRangeEndAddress and should be within the pool subnet.')
hpicfDhcpv4ServerRangeEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1, 2), InetAddressIPv4()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeEndAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeEndAddress.setDescription('The last address in the range. The value of hpicfDhcpv4ServerRangeEndAddress must be greater than or equal to the value of hpicfDhcpv4ServerRangeStartAddress and should be within the pool subnet.')
hpicfDhcpv4ServerRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeStatus.setDescription('RowStatus for this table.')
hpicfDhcpv4ServerPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionTable.setDescription('Table that contains objects for DHCPv4 Server options.')
hpicfDhcpv4ServerPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"), (0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionCode"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionEntry.setDescription('A set of objects that are used to support DHCPv4 server options.')
hpicfDhcpv4ServerPoolOptionCode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 254)))
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionCode.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionCode.setDescription('The DHCP option code as per RFC 2132.')
hpicfDhcpv4ServerPoolOptionType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("hexString", 1), ("asciiString", 2), ("ipAddresses", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionType.setDescription('This specifies the type of pool option data.')
hpicfDhcpv4ServerPoolOptionData = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionData.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionData.setDescription('This specifies data in dotted hexadecimal or ASCII character string or IP addresses format based on hpicfDhcpv4ServerPoolOptionType value. Each byte in hexadecimal character strings is two hexadecimal digits. Each byte can be separated by a period, colon, or white space. ASCII strings that contain white spaces must be enclosed within quotation marks. One IP address is required and supports up to eight IP addresses. Each IP address is separated by a comma and the list is terminated by a semicolon.')
hpicfDhcpv4ServerPoolOptionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 6, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolOptionStatus.setDescription('RowStatus for this table.')
hpicfDhcpv4BindingTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4BindingTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4BindingTable.setDescription('Table that contains objects for DHCPv4 server dynamic lease bindings.')
hpicfDhcpv4BindingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolName"), (0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingIpAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4BindingEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4BindingEntry.setDescription('A set of objects that are used to support DHCPv4 server dynamic lease bindings.')
hpicfDhcpv4BindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpicfDhcpv4BindingIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4BindingIpAddress.setDescription('The IP address assigned to a specific client.')
hpicfDhcpv4BindingHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4BindingHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4BindingHardwareAddress.setDescription('The ethernet MAC address of a client.')
hpicfDhcpv4BindingType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("dynamic", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4BindingType.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4BindingType.setDescription('The type of this binding.')
hpicfDhcpv4BindingLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 7, 1, 1, 4), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4BindingLifeTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4BindingLifeTime.setDescription('The life time of the binding entry in seconds. A value of 0xffffffff indicates an infinite life time.')
hpicfDhcpv4ConflictIPTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1), )
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPTable.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPTable.setDescription('Table that contains objects for DHCPv4 server address conflicts.')
hpicfDhcpv4ConflictIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1), ).setIndexNames((0, "HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictIPAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPEntry.setDescription('A set of objects that are used to support DHCPv4 server conflicting address (use of the same IP address by two hosts) entry.')
hpicfDhcpv4ConflictIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1, 1), InetAddressIPv4())
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPAddress.setDescription('IP address which is duplicated and used by two hosts.')
hpicfDhcpv4ConflictIPDetectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ping", 1), ("gratuitousArp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPDetectionMethod.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPDetectionMethod.setDescription('The server detects conflicts using ping. The client detects conflicts using gratuitous Address Resolution Protocol (ARP).')
hpicfDhcpv4ConflictIPDetectionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 1, 8, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPDetectionTime.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ConflictIPDetectionTime.setDescription('The system time at which a DHCP address conflict happens. If there has been no change since the last re-initialization of the local system, this object contains the date and time of local system initialization. If there has been no change since the entity was added to the local system, this object contains the date and time of the insertion.')
hpicfDhcpv4ServerNotifyDuplicateIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 1), InetAddressIPv4()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyDuplicateIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyDuplicateIpAddr.setDescription('The IPv4 address found to be a duplicate. Duplicates are detected by servers, which issue an ICMP ECHOREQUEST prior to offering an IPv4 address lease, or by a client issuing a gratuitous ARP message and reported through a DHCPDECLINE message.')
hpicfDhcpv4ServerNotifyDuplicateMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 2), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyDuplicateMac.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyDuplicateMac.setDescription('The offending MAC address which caused a duplicate IPv4 address to be detected, if captured by the server, else 00-00-00-00-00-00.')
hpicfDhcpv4ServerNotifyClientOrServerDetected = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("client", 1), ("server", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyClientOrServerDetected.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyClientOrServerDetected.setDescription('Duplicate IPv4 addresses can be detected either by a server, using an ICMP ECHO message, or by a client using ARP. This object is set by the server to (1) if the client used DHCPDECLINE to mark the offered address as in use, or to (2) if the server discovered the address in use by some client before offering it.')
hpicfDhcpv4ServerClientPhysicalAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfDhcpv4ServerClientPhysicalAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerClientPhysicalAddress.setDescription('The hardware address of the client that requested the IP lease.')
hpicfDhcpv4ServerFreeAddressLow = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 5)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLowThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerFreeAddressLow.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerFreeAddressLow.setDescription('This notification signifies that the number of available IPv4 addresses for a particular shared network has fallen below the value of hpicfDhcpv4ServerPoolLowThreshold for that shared network.')
hpicfDhcpv4ServerFreeAddressHigh = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 6)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolHighThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerFreeAddressHigh.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerFreeAddressHigh.setDescription('This notification signifies that the number of available IPv4 addresses for a particular shared network has risen above the value of hpicfDhcpv4ServerPoolHighThreshold for that shared network.')
hpicfDhcpv4ServerDuplicateAddress = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 7)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateIpAddr"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateMac"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyClientOrServerDetected"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerDuplicateAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerDuplicateAddress.setDescription('This notification signifies that a duplicate IPv4 address has been detected. The DHCP server can detect this condition through the ping-before-offer mechanism. Alternatively, the client may have sent a DHCPDECLINE back to the server; this is assumed to be the result of the client detecting that the address was in use. In either case, the DHCP server marks the IPv4 address as unavailable for leasing to clients. The hpicfDhcpv4ServerNotifyClientOrServerDetected object indicates whether the client or server detected this condition.')
hpicfDhcpv4ServerIfLeaseLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 0, 8)).setObjects(("IF-MIB", "ifName"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerClientPhysicalAddress"))
if mibBuilder.loadTexts: hpicfDhcpv4ServerIfLeaseLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerIfLeaseLimitExceeded.setDescription('This notification indicates that there are no more IP leases available to offer on the receiving interface.')
hpicfDhcpv4ServerCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1))
hpicfDhcpv4ServerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2))
hpicfDhcpv4ServerCompliances1 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 3))
hpicfDhcpv4ServerCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1, 1)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBaseGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerLeaseDataBaseGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBootpCountersGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerCounterGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOptionGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBindingGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerConflictGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyObjectsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCompliance = hpicfDhcpv4ServerCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpv4ServerCompliance.setDescription('The compliance statement for HP routing switches that support DHCP server.')
hpicfDhcpv4ServerCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1, 2)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBaseGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBootpCountersGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerCounterGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOptionGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBindingGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerConflictGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyObjectsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotificationsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerLeaseDataBaseGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCompliance1 = hpicfDhcpv4ServerCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpv4ServerCompliance1.setDescription('The compliance statement for HP routing switches that support DHCP server.')
hpicfDhcpv4ServerCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 1, 3)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBootpCountersGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerCounterGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOptionGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBindingGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerConflictGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyObjectsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotificationsGroup"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerLeaseDataBaseGroup1"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerBaseGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCompliance2 = hpicfDhcpv4ServerCompliance2.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerCompliance2.setDescription('The compliance statement for HP routing switches that support DHCP server.')
hpicfDhcpv4ServerBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 1)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingPktNumber"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingTimeOut"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictsLog"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearStatistics"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearConflictIP"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4TrapEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerVlanEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBaseGroup = hpicfDhcpv4ServerBaseGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpv4ServerBaseGroup.setDescription('Controls the global configuration of the DHCPv4 server.')
hpicfDhcpv4ServerLeaseDataBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 2)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBFile"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteDelay"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteTimeout"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteAttempts"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteFailures"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileReadStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileLastWriteTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerLeaseDataBaseGroup = hpicfDhcpv4ServerLeaseDataBaseGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfDhcpv4ServerLeaseDataBaseGroup.setDescription('Group of objects to support lease database parameters.')
hpicfDhcpv4ServerBootpCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 3)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfBootpCountRequests"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfBootpCountReplies"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBootpCountersGroup = hpicfDhcpv4ServerBootpCountersGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerBootpCountersGroup.setDescription('Group of objects that count various BOOTP events.')
hpicfDhcpv4ServerCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 4)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountDiscovers"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountOffers"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountRequests"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountDeclines"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountAcks"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountNaks"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountReleases"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountInforms"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountBadMsgs"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountPools"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountAutoBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountStaticBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4CountExpiredOrFreeBindings"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerCounterGroup = hpicfDhcpv4ServerCounterGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerCounterGroup.setDescription('Group of objects that count various DHCPv4 events.')
hpicfDhcpv4ServerPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 5)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolNetworkAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolNetworkAddressMask"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolDomainName"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolNetBIOSNodeType"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLeaseTime"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolBootFile"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLowThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolHighThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDNSServerAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNetBIOSNameServer"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDefaultRouter"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerTFTPServerName"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerTFTPServerIpAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerStaticIpAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerStaticIpAddressMask"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerStaticHardwareAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolIsAuthoritative"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerPoolGroup = hpicfDhcpv4ServerPoolGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerPoolGroup.setDescription('Group of objects to support DHCPv4 server pool parameters.')
hpicfDhcpv4ServerRangeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 6)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeEndAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerRangeStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerRangeGroup = hpicfDhcpv4ServerRangeGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerRangeGroup.setDescription('Group of objects to support DHCPv4 server IP range parameters.')
hpicfDhcpv4ServerOptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 7)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionType"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionData"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolOptionStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerOptionGroup = hpicfDhcpv4ServerOptionGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerOptionGroup.setDescription('Group of objects to support DHCPv4 server raw option parameters.')
hpicfDhcpv4ServerBindingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 8)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingHardwareAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingType"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4BindingLifeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBindingGroup = hpicfDhcpv4ServerBindingGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerBindingGroup.setDescription('Group of objects to support DHCPv4 server dynamic binding parameters.')
hpicfDhcpv4ServerConflictGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 9)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictIPDetectionMethod"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictIPDetectionTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerConflictGroup = hpicfDhcpv4ServerConflictGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerConflictGroup.setDescription('Group of objects to support DHCPv4 server conflict parameters.')
hpicfDhcpv4ServerNotifyObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 10)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolLowThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolFreeAddresses"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerPoolHighThreshold"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateIpAddr"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyDuplicateMac"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerNotifyClientOrServerDetected"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerClientPhysicalAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerNotifyObjectsGroup = hpicfDhcpv4ServerNotifyObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotifyObjectsGroup.setDescription('Group of objects required for notifications.')
hpicfDhcpv4ServerNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 11)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerFreeAddressLow"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerFreeAddressHigh"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDuplicateAddress"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerIfLeaseLimitExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerNotificationsGroup = hpicfDhcpv4ServerNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerNotificationsGroup.setDescription('Group of notifications.')
hpicfDhcpv4ServerLeaseDataBaseGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 12)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBFile"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteDelay"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBWriteTimeout"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteAttempts"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteFailures"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileReadStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileWriteStatus"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpServerDBFileLastWriteTime"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBFTPort"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBSFTPUsername"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBSFTPPassword"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerDBValidateSFTPServer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerLeaseDataBaseGroup1 = hpicfDhcpv4ServerLeaseDataBaseGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerLeaseDataBaseGroup1.setDescription('Group of objects to support lease database parameters.')
hpicfDhcpv4ServerBaseGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 99, 2, 2, 13)).setObjects(("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingPktNumber"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4PingTimeOut"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ConflictsLog"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearStatistics"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearBindings"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ClearConflictIP"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4TrapEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerVlanEnable"), ("HP-ICF-DHCPV4-SERVER-MIB", "hpicfDhcpv4ServerOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfDhcpv4ServerBaseGroup1 = hpicfDhcpv4ServerBaseGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfDhcpv4ServerBaseGroup1.setDescription('Controls the global configuration of the DHCPv4 server.')
mibBuilder.exportSymbols("HP-ICF-DHCPV4-SERVER-MIB", hpicfDhcpv4ServerCompliances=hpicfDhcpv4ServerCompliances, hpicfDhcpv4ServerDBFTPort=hpicfDhcpv4ServerDBFTPort, hpicfDhcpv4ServerRangeStatus=hpicfDhcpv4ServerRangeStatus, hpicfDhcpv4ServerFreeAddressLow=hpicfDhcpv4ServerFreeAddressLow, hpicfDhcpv4ServerNotifyObjectsGroup=hpicfDhcpv4ServerNotifyObjectsGroup, hpicfDhcpv4BindingHardwareAddress=hpicfDhcpv4BindingHardwareAddress, hpicfDhcpv4ServerPoolFreeAddresses=hpicfDhcpv4ServerPoolFreeAddresses, hpicfDhcpv4ConflictsLog=hpicfDhcpv4ConflictsLog, hpicfDhcpv4ServerPoolEntry=hpicfDhcpv4ServerPoolEntry, hpicfDhcpv4CountDeclines=hpicfDhcpv4CountDeclines, hpicfDhcpv4ServerPoolNetworkAddressMask=hpicfDhcpv4ServerPoolNetworkAddressMask, hpicfDhcpv4ServerDBFile=hpicfDhcpv4ServerDBFile, hpicfDhcpv4PoolDynamicBind=hpicfDhcpv4PoolDynamicBind, hpicfDhcpv4ServerEnable=hpicfDhcpv4ServerEnable, hpicfDhcpServerDBFileLastWriteTime=hpicfDhcpServerDBFileLastWriteTime, hpicfDhcpv4ServerDNSServerAddress=hpicfDhcpv4ServerDNSServerAddress, hpicfDhcpv4ServerPoolHighThreshold=hpicfDhcpv4ServerPoolHighThreshold, hpicfDhcpv4ServerConflicts=hpicfDhcpv4ServerConflicts, hpicfDhcpv4ServerPoolOptionData=hpicfDhcpv4ServerPoolOptionData, hpicfDhcpv4ServerStaticIpAddress=hpicfDhcpv4ServerStaticIpAddress, hpicfDhcpv4BootpCounters=hpicfDhcpv4BootpCounters, hpicfDhcpv4Counters=hpicfDhcpv4Counters, hpicfDhcpv4ServerPoolLeaseTime=hpicfDhcpv4ServerPoolLeaseTime, hpicfDhcpv4ServerDBWriteTimeout=hpicfDhcpv4ServerDBWriteTimeout, hpicfDhcpv4ServerBindingGroup=hpicfDhcpv4ServerBindingGroup, hpicfDhcpv4CountPools=hpicfDhcpv4CountPools, hpicfDhcpv4ServerPoolBootFile=hpicfDhcpv4ServerPoolBootFile, hpicfDhcpServerDBFileReadStatus=hpicfDhcpServerDBFileReadStatus, hpicfDhcpv4CountAcks=hpicfDhcpv4CountAcks, hpicfDhcpv4ServerCompliance1=hpicfDhcpv4ServerCompliance1, hpicfDhcpv4ServerCompliance=hpicfDhcpv4ServerCompliance, hpicfDhcpv4ServerOptionGroup=hpicfDhcpv4ServerOptionGroup, hpicfDhcpv4IpPool=hpicfDhcpv4IpPool, hpicfDhcpv4ServerDBValidateSFTPServer=hpicfDhcpv4ServerDBValidateSFTPServer, hpicfDhcpv4ServerIfLeaseLimitExceeded=hpicfDhcpv4ServerIfLeaseLimitExceeded, hpicfDhcpv4CountStaticBindings=hpicfDhcpv4CountStaticBindings, hpicfDhcpv4ConflictIPDetectionMethod=hpicfDhcpv4ConflictIPDetectionMethod, hpicfDhcpv4ServerLeaseDataBaseGroup1=hpicfDhcpv4ServerLeaseDataBaseGroup1, hpicfDhcpv4ServerBootpCountersGroup=hpicfDhcpv4ServerBootpCountersGroup, hpicfDhcpv4CountBadMsgs=hpicfDhcpv4CountBadMsgs, PYSNMP_MODULE_ID=hpicfDhcpv4ServerMIB, hpicfDhcpv4CountInforms=hpicfDhcpv4CountInforms, hpicfDhcpv4TrapEnable=hpicfDhcpv4TrapEnable, hpicfDhcpv4ServerTFTPServerIpAddress=hpicfDhcpv4ServerTFTPServerIpAddress, hpicfDhcpv4ServerNotifs=hpicfDhcpv4ServerNotifs, hpicfDhcpv4ServerMIB=hpicfDhcpv4ServerMIB, hpicfDhcpv4ConflictIPEntry=hpicfDhcpv4ConflictIPEntry, hpicfDhcpv4ServerRangeTable=hpicfDhcpv4ServerRangeTable, hpicfDhcpv4BindingIpAddress=hpicfDhcpv4BindingIpAddress, hpicfDhcpv4ServerDuplicateAddress=hpicfDhcpv4ServerDuplicateAddress, hpicfDhcpv4ServerStaticIpAddressMask=hpicfDhcpv4ServerStaticIpAddressMask, hpicfDhcpv4ServerTFTPServerName=hpicfDhcpv4ServerTFTPServerName, hpicfDhcpv4ServerRangeGroup=hpicfDhcpv4ServerRangeGroup, hpicfBootpCountRequests=hpicfBootpCountRequests, hpicfDhcpv4ServerVlanEnable=hpicfDhcpv4ServerVlanEnable, hpicfDhcpv4ServerPoolOptionTable=hpicfDhcpv4ServerPoolOptionTable, hpicfDhcpv4ClearConflictIP=hpicfDhcpv4ClearConflictIP, hpicfDhcpv4ServerDBSFTPPassword=hpicfDhcpv4ServerDBSFTPPassword, hpicfDhcpv4PoolIpRange=hpicfDhcpv4PoolIpRange, hpicfDhcpv4ServerConform=hpicfDhcpv4ServerConform, hpicfDhcpv4ServerRangeEntry=hpicfDhcpv4ServerRangeEntry, hpicfDhcpv4ServerPoolNetBIOSNodeType=hpicfDhcpv4ServerPoolNetBIOSNodeType, InetAddressIPv4=InetAddressIPv4, hpicfDhcpv4LeaseDataBase=hpicfDhcpv4LeaseDataBase, hpicfDhcpv4ServerPoolStatus=hpicfDhcpv4ServerPoolStatus, hpicfDhcpv4ServerFreeAddressHigh=hpicfDhcpv4ServerFreeAddressHigh, hpicfDhcpv4ServerCompliance2=hpicfDhcpv4ServerCompliance2, hpicfDhcpv4ServerDBWriteDelay=hpicfDhcpv4ServerDBWriteDelay, hpicfDhcpv4ConflictIPDetectionTime=hpicfDhcpv4ConflictIPDetectionTime, hpicfDhcpv4ServerBaseGroup=hpicfDhcpv4ServerBaseGroup, hpicfDhcpv4ServerBaseGroup1=hpicfDhcpv4ServerBaseGroup1, hpicfDhcpv4PoolOption=hpicfDhcpv4PoolOption, hpicfDhcpServerDBFileWriteFailures=hpicfDhcpServerDBFileWriteFailures, hpicfDhcpv4ServerNetBIOSNameServer=hpicfDhcpv4ServerNetBIOSNameServer, hpicfDhcpv4ServerPoolIsAuthoritative=hpicfDhcpv4ServerPoolIsAuthoritative, hpicfDhcpv4ConflictIPAddress=hpicfDhcpv4ConflictIPAddress, hpicfDhcpv4BindingTable=hpicfDhcpv4BindingTable, hpicfDhcpv4ServerLeaseDataBaseGroup=hpicfDhcpv4ServerLeaseDataBaseGroup, hpicfDhcpv4ServerPoolOptionStatus=hpicfDhcpv4ServerPoolOptionStatus, hpicfDhcpv4CountRequests=hpicfDhcpv4CountRequests, hpicfDhcpv4ServerPoolGroup=hpicfDhcpv4ServerPoolGroup, hpicfDhcpServerDBFileWriteAttempts=hpicfDhcpServerDBFileWriteAttempts, hpicfDhcpv4CountAutoBindings=hpicfDhcpv4CountAutoBindings, hpicfDhcpv4CountExpiredOrFreeBindings=hpicfDhcpv4CountExpiredOrFreeBindings, hpicfDhcpv4ConflictIPTable=hpicfDhcpv4ConflictIPTable, hpicfDhcpv4ServerCompliances1=hpicfDhcpv4ServerCompliances1, hpicfDhcpv4ServerPoolOptionCode=hpicfDhcpv4ServerPoolOptionCode, hpicfDhcpv4ServerDBSFTPUsername=hpicfDhcpv4ServerDBSFTPUsername, hpicfDhcpv4BindingType=hpicfDhcpv4BindingType, hpicfDhcpv4CountDiscovers=hpicfDhcpv4CountDiscovers, hpicfDhcpv4ServerNotificationsGroup=hpicfDhcpv4ServerNotificationsGroup, hpicfDhcpv4PingPktNumber=hpicfDhcpv4PingPktNumber, hpicfDhcpv4ServerConflictGroup=hpicfDhcpv4ServerConflictGroup, hpicfDhcpv4ServerClientPhysicalAddress=hpicfDhcpv4ServerClientPhysicalAddress, hpicfDhcpv4ServerNotifyClientOrServerDetected=hpicfDhcpv4ServerNotifyClientOrServerDetected, hpicfDhcpv4ServerGroups=hpicfDhcpv4ServerGroups, hpicfDhcpv4ServerPoolOptionEntry=hpicfDhcpv4ServerPoolOptionEntry, hpicfDhcpv4ServerPoolOptionType=hpicfDhcpv4ServerPoolOptionType, hpicfDhcpServerDBFileWriteStatus=hpicfDhcpServerDBFileWriteStatus, hpicfDhcpv4ServerDefaultRouter=hpicfDhcpv4ServerDefaultRouter, hpicfDhcpv4CountOffers=hpicfDhcpv4CountOffers, hpicfDhcpv4ClearStatistics=hpicfDhcpv4ClearStatistics, hpicfDhcpv4ServerRangeEndAddress=hpicfDhcpv4ServerRangeEndAddress, hpicfDhcpv4ServerRangeStartAddress=hpicfDhcpv4ServerRangeStartAddress, hpicfDhcpv4ServerObjects=hpicfDhcpv4ServerObjects, hpicfDhcpv4CountNaks=hpicfDhcpv4CountNaks, hpicfDhcpv4ServerCounterGroup=hpicfDhcpv4ServerCounterGroup, hpicfDhcpv4ServerPoolLowThreshold=hpicfDhcpv4ServerPoolLowThreshold, hpicfDhcpv4ServerPoolName=hpicfDhcpv4ServerPoolName, hpicfDhcpv4ServerPoolNetworkAddress=hpicfDhcpv4ServerPoolNetworkAddress, hpicfDhcpv4ServerPoolDomainName=hpicfDhcpv4ServerPoolDomainName, hpicfDhcpv4PingTimeOut=hpicfDhcpv4PingTimeOut, hpicfDhcpv4BindingEntry=hpicfDhcpv4BindingEntry, hpicfDhcpv4BindingLifeTime=hpicfDhcpv4BindingLifeTime, hpicfDhcpv4ServerOperStatus=hpicfDhcpv4ServerOperStatus, hpicfDhcpv4ClearBindings=hpicfDhcpv4ClearBindings, hpicfDhcpv4ServerPoolTable=hpicfDhcpv4ServerPoolTable, hpicfDhcpv4ServerStaticHardwareAddress=hpicfDhcpv4ServerStaticHardwareAddress, hpicfDhcpv4ServerNotifyDuplicateIpAddr=hpicfDhcpv4ServerNotifyDuplicateIpAddr, hpicfDhcpv4CountReleases=hpicfDhcpv4CountReleases, hpicfBootpCountReplies=hpicfBootpCountReplies, hpicfDhcpv4ServerNotifyDuplicateMac=hpicfDhcpv4ServerNotifyDuplicateMac)
