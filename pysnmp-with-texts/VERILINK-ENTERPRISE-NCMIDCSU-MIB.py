#
# PySNMP MIB module VERILINK-ENTERPRISE-NCMIDCSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VERILINK-ENTERPRISE-NCMIDCSU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, ObjectIdentity, Unsigned32, Counter32, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Gauge32, Bits, MibIdentifier, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ObjectIdentity", "Unsigned32", "Counter32", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Gauge32", "Bits", "MibIdentifier", "Integer32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ncm_idcsu, = mibBuilder.importSymbols("VERILINK-ENTERPRISE-NCMALARM-MIB", "ncm-idcsu")
ncmidcsuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000), )
if mibBuilder.loadTexts: ncmidcsuConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuConfigTable.setDescription('The ncm idcsu configuration table.')
ncmidcsuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsucfgNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuLineIndex"))
if mibBuilder.loadTexts: ncmidcsuConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuConfigEntry.setDescription('An entry in the ncmidcsu configuration table.')
ncmidcsucfgNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsucfgNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsucfgNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmidcsuLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuLineIndex.setStatus('mandatory')
ncmidcsuNetLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("db-Zero", 1), ("db-Seven-point-five", 2), ("db-Fifteen", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetLineBuildOut.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuNetLineBuildOut.setDescription('The ncmidcsu net line build out.')
ncmidcsuNetworkKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("loop", 2), ("ais", 3), ("framed-all-ones", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetworkKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuNetworkKeepAlive.setDescription('The ncmidcsu network keep alive varaible .')
ncmidcsuExcessiveError = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuExcessiveError.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuExcessiveError.setDescription('The Net/Eq has excessive errors.')
ncmidcsuOutOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signal", 1), ("ais", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuOutOfFrame.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuOutOfFrame.setDescription('The ncmidcsu Eq is out of frame (OOF).')
ncmidcsuFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unframed", 1), ("sf", 2), ("esf", 3), ("zbtsi", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuFormat.setDescription('The ncmidcsu Net/Eq format.')
ncmidcsuNetDensityEnforcement = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("fcc-part-68", 2), ("pub-62411", 3), ("eighty-zeroes", 4), ("fifteen-zeroes", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetDensityEnforcement.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuNetDensityEnforcement.setDescription('The ncmidcsu net density enforcement.')
ncmidcsuNetLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuNetLossOfSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuNetLossOfSignal.setDescription('The ncmidcsu Net/Eq uas interval.')
ncmidcsuJitterBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("eq-Net-16-16", 1), ("eq-Net-40-16", 2), ("eq-Net-16-40", 3), ("eq-Net-40-40", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuJitterBuf.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuJitterBuf.setDescription('The ncmidcsu Net/Eq Jitter buffer in bits.')
ncmidcsuTestSigCfgEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestSigCfgEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestSigCfgEnable.setDescription('bit 1 of MSGOUT+47 for read or of MSGIN+47 for write is test signal enable in this test signal configuration message.')
ncmidcsuTestSigCfgFrameSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestSigCfgFrameSignal.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestSigCfgFrameSignal.setDescription('bit 7 of MSGOUT+47 for read or of MSGIN+47 for write is frame test signal in this test signal configuration message.')
ncmidcsuCfgRptSendPRM = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptSendPRM.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgRptSendPRM.setDescription('bit 0 of MSGOUT+52 for read or MSGIN+52 for write is send prm in this configure report message.')
ncmidcsuCfgRptPollFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptPollFarEnd.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgRptPollFarEnd.setDescription('bit 1 of MSGOUT+52 for read or MSGIN+52 for write is poll far end in this configure report message.')
ncmidcsuCfgRptDataLinkUnsolicit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptDataLinkUnsolicit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgRptDataLinkUnsolicit.setDescription('bit 2 of MSGOUT+52 for read or MSGIN+52 for write is data link unsolicited report in this configure report message.')
ncmidcsuCfgRptAlmReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptAlmReporting.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgRptAlmReporting.setDescription('bit 3 of MSGOUT+52 for read or MSGIN+52 for write is alarm reporting in this configure report message.')
ncmidcsuCfgRptPRMType = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tELCO", 1), ("uSER", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgRptPRMType.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgRptPRMType.setDescription('bit 4,5 of MSGOUT+52 for read or of MSGIN+52 for write is PRM type in this configure report message.')
ncmidcsuCfgCodeRegenCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pass", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeRegenCRC.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgCodeRegenCRC.setDescription('bit 0,1 of MSGOUT+53 for read or MSGIN+53 for write is regenerate crc from net to dte or eq to net in this configure coding message. ')
ncmidcsuCfgCodeXYellowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("net-to-Eq", 2), ("eq-to-Net", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeXYellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgCodeXYellowAlarm.setDescription('bit 2,3 of MSGOUT+53 for read or MSGIN+53 for write is transcode yellow alarm from net to dte or eq to net in this configure coding message. ')
ncmidcsuCfgCodeEQFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeEQFIFO.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgCodeEQFIFO.setDescription('bit 4 of MSGOUT+53 for read or MSGIN+53 for write is eq fifo in this configure coding message. ')
ncmidcsuCfgCodeNETFIFO = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fifteen-bits", 1), ("forty-bits", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeNETFIFO.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgCodeNETFIFO.setDescription('bit 5 of MSGOUT+53 for read or MSGIN+53 for write is net fifo in this configure coding message. ')
ncmidcsuCfgCodeTranMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeTranMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgCodeTranMode.setDescription('bit 6 of MSGOUT+53 for read or MSGIN+53 for write is transparent mode in this configure report message.')
ncmidcsuCfgCodeSend1sLnkIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgCodeSend1sLnkIdle.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgCodeSend1sLnkIdle.setDescription('bit 7 of MSGOUT+53 for read or MSGIN+53 for write is send ones data link idle code in this configure report message.')
ncmidcsuCfgAlmSelfTest = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmSelfTest.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgAlmSelfTest.setDescription('bit 0 of MSGOUT+54 for read or MSGIN+54 for write is enable power up self test in this configure alarm message.')
ncmidcsuCfgAlmEnableTestState = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmEnableTestState.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgAlmEnableTestState.setDescription('bit 1 of MSGOUT+54 for read or MSGIN+54 for write is enable alarms in test state in this configure alarm message.')
ncmidcsuCfgAlmUnframedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmUnframedMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgAlmUnframedMode.setDescription('bit 2 of MSGOUT+54 for read or MSGIN+54 for write is alarms in unframe mode in this configure alarm message.')
ncmidcsuCfgAlmOnEqLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnEqLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnEqLoop.setDescription('bit 3 of MSGOUT+54 for read or MSGIN+54 for write is alarm on eq loop loop in this configure alarm message.')
ncmidcsuCfgAlmOnNetLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnNetLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnNetLoop.setDescription('bit 4 of MSGOUT+54 for read or MSGIN+54 for write is alarm on net loop in this configure alarm message.')
ncmidcsuCfgAlmOnPowerUpLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnPowerUpLoop.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgAlmOnPowerUpLoop.setDescription('bit 5 of MSGOUT+54 for read or MSGIN+54 for write is alarm power up loop in this configure alarm message.')
ncmidcsuCfgLoopRespLLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespLLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespLLB.setDescription('bit 0 of MSGOUT+55 for read or MSGIN+55 for respond to LLB in this configure Loop Response Message.')
ncmidcsuCfgLoopRespPLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespPLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespPLB.setDescription('bit 1 of MSGOUT+55 for read or MSGIN+55 for respond to PLB in this configure Loop Response Message.')
ncmidcsuCfgLoopRespELB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespELB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespELB.setDescription('bit 2 of MSGOUT+55 for read or MSGIN+55 for respond to ELB in this configure Loop Response Message.')
ncmidcsuCfgLoopRespRLB = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespRLB.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespRLB.setDescription('bit 3 of MSGOUT+55 for read or MSGIN+55 for respond to RLB in this configure Loop Response Message.')
ncmidcsuCfgLoopRespLLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespLLBTONE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespLLBTONE.setDescription('bit 4 of MSGOUT+55 for read or MSGIN+55 for respond to LLB (T1.403) in this configure Loop Response Message.')
ncmidcsuCfgLoopRespPLBTONE = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespPLBTONE.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgLoopRespPLBTONE.setDescription('bit 5 of MSGOUT+55 for read or MSGIN+55 for respond to PLB (T1.403) in this configure Loop Response Message.')
ncmidcsuCfgSendReceiveInBandCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10000, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuCfgSendReceiveInBandCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuCfgSendReceiveInBandCode.setDescription('bit 6 of MSGOUT+55 for read or MSGIN+55 for enable to Send/Receive of in-band code.')
ncmidcsuThresholdIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001), )
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalTable.setDescription('The ncm idcsu threshold interval table.')
ncmidcsuThresholdIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuThresholdNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuThresholdIntervalIndex"))
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalEntry.setDescription('An entry in the ncmidcsu threshold interval table.')
ncmidcsuThresholdNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuThresholdNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuThresholdNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmidcsuThresholdIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuThresholdIntervalIndex.setStatus('mandatory')
ncmidcsuBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("disable", 1), ("ten-to-Four", 2), ("ten-to-Five", 3), ("ten-to-Six", 4), ("ten-to-Seven", 5), ("ten-to-Eight", 6), ("ten-to-Nine", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuBERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuBERThreshold.setDescription('The ncmidcsu Net/Eq ber threshold.')
ncmidcsubpvSecThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsubpvSecThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsubpvSecThreshold.setDescription('The ncmidcsu Net/Eq bpv sec threshold.')
ncmidcsubpvSecInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsubpvSecInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsubpvSecInterval.setDescription('The ncmidcsu Net/Eq bpv sec interval.')
ncmidcsuESThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuESThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuESThreshold.setDescription('The ncmidcsu Net/Eq es threshold.')
ncmidcsuESInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuESInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuESInterval.setDescription('The ncmidcsu Net/Eq es interval.')
ncmidcsuUASThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuUASThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuUASThreshold.setDescription('The ncmidcsu Net/Eq uas threshold.')
ncmidcsuUASInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10001, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuUASInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuUASInterval.setDescription('The ncmidcsu Net/Eq uas interval.')
ncmidcsuConfigOneTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002), )
if mibBuilder.loadTexts: ncmidcsuConfigOneTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuConfigOneTable.setDescription('The ncm idcsu configuration table1.')
ncmidcsuConfigOneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsucfg1NIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuLineIndex1"))
if mibBuilder.loadTexts: ncmidcsuConfigOneEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuConfigOneEntry.setDescription('An entry in the ncmidcsu configuration table1.')
ncmidcsucfg1NIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsucfg1NIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsucfg1NIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmidcsuLineIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuLineIndex1.setStatus('mandatory')
ncmidcsuDS0Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuDS0Channel.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuDS0Channel.setDescription('This variable indicates the channel assignment for the dsu for the port.')
ncmidcsuRLBTimeoutIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuRLBTimeoutIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuRLBTimeoutIndex.setDescription('The ncmidcsu rlb timeout index.')
ncmidcsuNetLofcIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetLofcIndexTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuNetLofcIndexTime.setDescription('The net lofc index time .')
ncmidcsuTiming = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("timing", 1), ("internal", 2), ("external-422", 3), ("reserved", 4), ("net", 5), ("eq", 6), ("reserved-two", 7), ("dsu", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTiming.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTiming.setDescription('The ncmidcsu timing.')
ncmidcsuLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuLineCode.setDescription('The ncmidcsu net/eq Line Code.')
ncmidcsuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mode-56k", 1), ("mode-64k", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuMode.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuMode.setDescription('The ncmidcsu data transmission mode for the DS-0s channel.')
ncmidcsuClock = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sT", 1), ("iNVST", 2), ("tT", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuClock.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuClock.setDescription('The ncmidcsu clock for the data port.')
ncmidcsuScramble = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuScramble.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuScramble.setDescription('The ncmidcsu data scrambling option .')
ncmidcsuLosLead = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuLosLead.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuLosLead.setDescription('This variable indicates the DTE lead bits for port. The DTE leads can be set by setting the relevant bit to 1 and reset by setting the relevant bit to zero. Bit Value Name Description 0 set the dsu port configuration to zero 0 1 DTR set uses DTR 1 2 RTS set uses RTS 2 4 DSR set uses DSR 3 8 CTS set uses CTS 4 16 DCD set uses DCD 5 32 LOS use both bits: bits set to use for alarm 6 64 LOS 0 = Disable LOS detect, 1=use RTS , 2 = DTR 7 128 DDSMode set for 56k DDS .')
ncmidcsuPortLoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuPortLoopEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuPortLoopEnable.setDescription('The Port Loop Enable of the dsu of idscsu .')
ncmidcsuDataInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuDataInvert.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuDataInvert.setDescription('This variable specifies the data invert for idscsu .')
ncmidcsuTimingUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTimingUnit.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTimingUnit.setDescription('This variable specifies if the DSU port is configured as timing unit for idscsu .')
ncmidcsuAlarmReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10002, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmReporting.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuAlarmReporting.setDescription('This variable specifies if the DSU port has to report Alarm to the SAM for ncmidcsu.')
ncmidcsuDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003), )
if mibBuilder.loadTexts: ncmidcsuDiagnosticTable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuDiagnosticTable.setDescription('The ncm idcsu diagnostic table.')
ncmidcsuDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1), ).setIndexNames((0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuDiagNIDIndex"), (0, "VERILINK-ENTERPRISE-NCMIDCSU-MIB", "ncmidcsuDiagnosticIndex"))
if mibBuilder.loadTexts: ncmidcsuDiagnosticEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuDiagnosticEntry.setDescription('An entry in the ncmidcsu diagnostic table.')
ncmidcsuDiagNIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuDiagNIDIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuDiagNIDIndex.setDescription('This variable indicates the node id value of the node.')
ncmidcsuDiagnosticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuDiagnosticIndex.setStatus('mandatory')
ncmidcsuAlarmSetDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmSetDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuAlarmSetDelay.setDescription('The ncmidcsu alarm set delay.')
ncmidcsuAlarmClearDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmClearDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuAlarmClearDelay.setDescription('The ncmidcsu alarm clear delay.')
ncmidcsuAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuAlarmEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuAlarmEnable.setDescription('The ncmidcsu alarm reporting.')
ncmidcsuLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("csu-Payload-Loop-Back", 1), ("line-Loop-Back", 2), ("repeater-Loop-Back", 3), ("csu-Equip-Loop-Back", 4), ("csu-No-Loop-Back", 5), ("deactivate-LLB-and-PLB", 6), ("deactivate-ELB-and-RLB", 7), ("deactivate-Payload-Loop-Back", 8), ("send-Inband-Loop-Up", 9), ("send-Inband-Loop-Down", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuLoopback.setDescription(' The ncmidcsu loop back config. ')
ncmdteloops = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("no-loop", 1), ("near-on", 2), ("near-off", 3), ("far-on", 4), ("far-off", 5), ("repeater-loopback", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmdteloops.setStatus('mandatory')
if mibBuilder.loadTexts: ncmdteloops.setDescription('The dte loops of the ncmidcsu .')
ncmidcsuTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("no-test", 1), ("qrss", 2), ("one-in-eight", 3), ("three-in-twenty-four", 4), ("all-ones", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestPattern.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestPattern.setDescription(' The ncmidcsu test pattern config. ')
ncmidcsuResetPerfReg = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuResetPerfReg.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuResetPerfReg.setDescription(' The ncmcsu reset performance monitoring register ')
ncmidcsuTestErrorCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuTestErrorCounter.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestErrorCounter.setDescription(' The ncm idcsu test error counter in the test status ')
ncmidcsuTestSecondsRemain = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ncmidcsuTestSecondsRemain.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestSecondsRemain.setDescription(' The ncm idcsu test seconds remaining in the test status ')
ncmidcsuTestTimeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestTimeSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestTimeSeconds.setDescription(' The idcsu test time duration. Enter Value (0-142, 255) 0 corresponds to 0 Sec (Default) 1 - 59 corresponds to 1-59 Seconds 60 - 118 corresponds to 1-59 Min 119 - 142 corresponds to 1-24 HR 255 corresponds to (Forever) option ')
ncmidcsuNetLOFCIndexTime = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuNetLOFCIndexTime.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuNetLOFCIndexTime.setDescription(' The idcsu net lofc index time ')
ncmidcsuChannelMask = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuChannelMask.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuChannelMask.setDescription(' The idcsu channel mask for the 24 channels ')
ncmidcsuApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("csu", 2), ("smds", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuApplication.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuApplication.setDescription(' The idcsu application mode ')
ncmidcsuTestIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 321, 1, 3027, 10003, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ncmidcsuTestIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ncmidcsuTestIntervalIndex.setDescription('The idcsu Test Inteval Index value used for test pattern (0 - config default).')
mibBuilder.exportSymbols("VERILINK-ENTERPRISE-NCMIDCSU-MIB", ncmidcsuCfgLoopRespELB=ncmidcsuCfgLoopRespELB, ncmidcsuLosLead=ncmidcsuLosLead, ncmidcsuCfgLoopRespLLBTONE=ncmidcsuCfgLoopRespLLBTONE, ncmidcsucfg1NIDIndex=ncmidcsucfg1NIDIndex, ncmidcsuCfgRptPRMType=ncmidcsuCfgRptPRMType, ncmidcsubpvSecThreshold=ncmidcsubpvSecThreshold, ncmidcsuApplication=ncmidcsuApplication, ncmidcsuRLBTimeoutIndex=ncmidcsuRLBTimeoutIndex, ncmidcsuAlarmReporting=ncmidcsuAlarmReporting, ncmidcsuDiagNIDIndex=ncmidcsuDiagNIDIndex, ncmidcsuAlarmEnable=ncmidcsuAlarmEnable, ncmidcsuDataInvert=ncmidcsuDataInvert, ncmidcsucfgNIDIndex=ncmidcsucfgNIDIndex, ncmidcsuConfigOneTable=ncmidcsuConfigOneTable, ncmidcsuTestPattern=ncmidcsuTestPattern, ncmidcsuTiming=ncmidcsuTiming, ncmidcsuMode=ncmidcsuMode, ncmidcsuFormat=ncmidcsuFormat, ncmidcsuCfgAlmOnPowerUpLoop=ncmidcsuCfgAlmOnPowerUpLoop, ncmidcsuNetLOFCIndexTime=ncmidcsuNetLOFCIndexTime, ncmidcsuBERThreshold=ncmidcsuBERThreshold, ncmidcsuTestTimeSeconds=ncmidcsuTestTimeSeconds, ncmidcsuNetLossOfSignal=ncmidcsuNetLossOfSignal, ncmidcsuTestSecondsRemain=ncmidcsuTestSecondsRemain, ncmidcsuCfgLoopRespLLB=ncmidcsuCfgLoopRespLLB, ncmidcsuConfigTable=ncmidcsuConfigTable, ncmidcsuNetLineBuildOut=ncmidcsuNetLineBuildOut, ncmidcsuDiagnosticTable=ncmidcsuDiagnosticTable, ncmidcsuCfgLoopRespRLB=ncmidcsuCfgLoopRespRLB, ncmidcsuCfgCodeXYellowAlarm=ncmidcsuCfgCodeXYellowAlarm, ncmidcsuTestErrorCounter=ncmidcsuTestErrorCounter, ncmidcsuConfigEntry=ncmidcsuConfigEntry, ncmidcsuCfgAlmEnableTestState=ncmidcsuCfgAlmEnableTestState, ncmidcsuCfgCodeNETFIFO=ncmidcsuCfgCodeNETFIFO, ncmidcsuLineIndex1=ncmidcsuLineIndex1, ncmidcsuCfgLoopRespPLBTONE=ncmidcsuCfgLoopRespPLBTONE, ncmidcsuThresholdIntervalIndex=ncmidcsuThresholdIntervalIndex, ncmidcsuPortLoopEnable=ncmidcsuPortLoopEnable, ncmidcsuCfgCodeRegenCRC=ncmidcsuCfgCodeRegenCRC, ncmidcsuCfgCodeEQFIFO=ncmidcsuCfgCodeEQFIFO, ncmdteloops=ncmdteloops, ncmidcsuTestSigCfgFrameSignal=ncmidcsuTestSigCfgFrameSignal, ncmidcsuDiagnosticEntry=ncmidcsuDiagnosticEntry, ncmidcsuCfgAlmOnNetLoop=ncmidcsuCfgAlmOnNetLoop, ncmidcsuLineIndex=ncmidcsuLineIndex, ncmidcsuCfgAlmSelfTest=ncmidcsuCfgAlmSelfTest, ncmidcsuChannelMask=ncmidcsuChannelMask, ncmidcsuResetPerfReg=ncmidcsuResetPerfReg, ncmidcsuCfgRptDataLinkUnsolicit=ncmidcsuCfgRptDataLinkUnsolicit, ncmidcsuUASThreshold=ncmidcsuUASThreshold, ncmidcsuAlarmSetDelay=ncmidcsuAlarmSetDelay, ncmidcsuExcessiveError=ncmidcsuExcessiveError, ncmidcsuScramble=ncmidcsuScramble, ncmidcsuThresholdIntervalEntry=ncmidcsuThresholdIntervalEntry, ncmidcsuTestIntervalIndex=ncmidcsuTestIntervalIndex, ncmidcsuThresholdIntervalTable=ncmidcsuThresholdIntervalTable, ncmidcsuTestSigCfgEnable=ncmidcsuTestSigCfgEnable, ncmidcsuLineCode=ncmidcsuLineCode, ncmidcsuJitterBuf=ncmidcsuJitterBuf, ncmidcsuOutOfFrame=ncmidcsuOutOfFrame, ncmidcsuCfgCodeTranMode=ncmidcsuCfgCodeTranMode, ncmidcsuUASInterval=ncmidcsuUASInterval, ncmidcsuTimingUnit=ncmidcsuTimingUnit, ncmidcsuNetLofcIndexTime=ncmidcsuNetLofcIndexTime, ncmidcsuCfgRptAlmReporting=ncmidcsuCfgRptAlmReporting, ncmidcsuCfgRptSendPRM=ncmidcsuCfgRptSendPRM, ncmidcsuCfgSendReceiveInBandCode=ncmidcsuCfgSendReceiveInBandCode, ncmidcsuClock=ncmidcsuClock, ncmidcsuNetDensityEnforcement=ncmidcsuNetDensityEnforcement, ncmidcsuDS0Channel=ncmidcsuDS0Channel, ncmidcsuESThreshold=ncmidcsuESThreshold, ncmidcsuCfgCodeSend1sLnkIdle=ncmidcsuCfgCodeSend1sLnkIdle, ncmidcsuCfgRptPollFarEnd=ncmidcsuCfgRptPollFarEnd, ncmidcsuConfigOneEntry=ncmidcsuConfigOneEntry, ncmidcsuESInterval=ncmidcsuESInterval, ncmidcsuNetworkKeepAlive=ncmidcsuNetworkKeepAlive, ncmidcsuDiagnosticIndex=ncmidcsuDiagnosticIndex, ncmidcsuLoopback=ncmidcsuLoopback, ncmidcsuAlarmClearDelay=ncmidcsuAlarmClearDelay, ncmidcsuThresholdNIDIndex=ncmidcsuThresholdNIDIndex, ncmidcsuCfgAlmUnframedMode=ncmidcsuCfgAlmUnframedMode, ncmidcsuCfgAlmOnEqLoop=ncmidcsuCfgAlmOnEqLoop, ncmidcsubpvSecInterval=ncmidcsubpvSecInterval, ncmidcsuCfgLoopRespPLB=ncmidcsuCfgLoopRespPLB)
