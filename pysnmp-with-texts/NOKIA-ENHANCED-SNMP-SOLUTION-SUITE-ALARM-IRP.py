#
# PySNMP MIB module NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP
# Produced by pysmi-0.3.4 at Wed May  1 14:23:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NoiAdditionalText, NoiEventTime, NoiAlarmId, NoiAlarmLogControl, NoiEventType, NoiNotificationId, NoiSpecificProblem, NoiPerceivedSeverity, NoiAcknowledgementUserId, NoiAlarmLogCount, NoiProbableCause, NoiSystemDistinguishedName, NoiLogFullAction, NoiAcknowledgementTime, NoiAcknowledgementState, NoiNotificationType, NoiAlarmTableCount, NoiAlarmText = mibBuilder.importSymbols("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-COMMON-DEFINITION", "NoiAdditionalText", "NoiEventTime", "NoiAlarmId", "NoiAlarmLogControl", "NoiEventType", "NoiNotificationId", "NoiSpecificProblem", "NoiPerceivedSeverity", "NoiAcknowledgementUserId", "NoiAlarmLogCount", "NoiProbableCause", "NoiSystemDistinguishedName", "NoiLogFullAction", "NoiAcknowledgementTime", "NoiAcknowledgementState", "NoiNotificationType", "NoiAlarmTableCount", "NoiAlarmText")
noiAlarmTables, noiFMCompliance, noiFaultManagementVariable, noiAlarmLog, noiOpenInterfaceModule, noiAlarmNotification = mibBuilder.importSymbols("NOKIA-NE3S-REGISTRATION-MIB", "noiAlarmTables", "noiFMCompliance", "noiFaultManagementVariable", "noiAlarmLog", "noiOpenInterfaceModule", "noiAlarmNotification")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Integer32, ObjectIdentity, Counter64, Unsigned32, MibIdentifier, Gauge32, Counter32, IpAddress, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Integer32", "ObjectIdentity", "Counter64", "Unsigned32", "MibIdentifier", "Gauge32", "Counter32", "IpAddress", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
noiSnmpAlarmIrp = ModuleIdentity((1, 3, 6, 1, 4, 1, 94, 7, 1, 1, 2))
noiSnmpAlarmIrp.setRevisions(('2002-11-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: noiSnmpAlarmIrp.setRevisionsDescriptions(('Version 1.2.6',))
if mibBuilder.loadTexts: noiSnmpAlarmIrp.setLastUpdated('200211010000Z')
if mibBuilder.loadTexts: noiSnmpAlarmIrp.setOrganization('Nokia Networks')
if mibBuilder.loadTexts: noiSnmpAlarmIrp.setContactInfo('e-mail: NET-OSS-OPEN-SNMP DL')
if mibBuilder.loadTexts: noiSnmpAlarmIrp.setDescription("This SNMP MIB-module specifies the SNMP Solution Set of the 3GPP Alarm Integration Reference Point (IRP) also known as NE3S Interface. The purpose of this IRP is to define an interface though which a network element manager or a network element) can communicate alarm information for its managed objects to Nokia OS, NetAct. An alarm is a kind of object that represents an abnormal condition for a managed object. An alarm is active as long as the corresponding abnormal condition remains. The EMS or NE maintains an 'alarm table' and containing all currently active alarms for its managed objects. When an alarm is cleared and acknowledged, it is removed from the alarm table and no longer accessible. The 'Alarm Log' contains history information on the occurred fault situations and emitted alarms notifications.")
noiAlarmIrpVersion = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 2, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmIrpVersion.setStatus('current')
if mibBuilder.loadTexts: noiAlarmIrpVersion.setDescription("This object represents the version of the Alarm IRP supported by the agent. The format is 'nn.m', where 'nn' is the main version number of the interface model and 'm' the release number within the main version. This version is 1.2.6")
noiAlarmLastSendNotificationId = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 2, 2), NoiNotificationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLastSendNotificationId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLastSendNotificationId.setDescription('This object represent the notification identifier of last send notification ( noiAlarmNew, noiAlarmCleared, noiAlarmAckStateChanged or noiAlarmChanged) The agent shall store the notification identifier of the last send FM notification in this object immediately after sending the notification. The manager can retrieve the current value of this object to detect lost notifications. This mechanism can be used by the manager when no notification is received for a certain time (e.g. 30 minutes) to evaluate whether an alarm upload or a retrieval of alarms from the alarm log shall be performed')
noiAlarmTableCount = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 1), NoiAlarmTableCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmTableCount.setStatus('current')
if mibBuilder.loadTexts: noiAlarmTableCount.setDescription('Contains the number or current active alarms accessible in the alarm table. When the alarm table is empty, the value of this object is zero (0).')
noiAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2), )
if mibBuilder.loadTexts: noiAlarmTable.setStatus('current')
if mibBuilder.loadTexts: noiAlarmTable.setDescription("Table with information about the alarms that are currently active in the Network Element and accessible for the manager. An Active alarm is characterised by a severity other than cleared. New Alarm When a new alarm is inserted into the alarm table, - acknowledgement user Id shall be an empty string - acknowledgement time shall be the event time, - acknowledgement state shall be set to 'unacknowledged' If the agent does not support the concept of acknowledgement, the value of acknowledgement state will be set to 'indeterminate'. The object noiAlarmLastSendNotificationId is updated according to the value of the notification identifier of the notication 'noiAlarmNew' A notification 'noiAlarmNew' is send by the agent. Clear Alarm When an active alarm is cleared it will be removed from the alarm table, if the acknowledgement state is 'acknowledged'. Otherwise, the alarm will remain in the alarm table and the severity and event time are updated according to the values in the notification 'noiAlarmCleared' If the agent does not support the concept of acknowledgement, than the alarm will be removed from the alarm table when it is cleared. The object noiAlarmLastSendNotificationId is updated according to the value of the notification identifier of the notification 'noiAlarmCleared' A notification 'noiAlarmCleared' is send by agent. Changed Alarm When the severity of an active alarm is changed the severity of the alarm in the alarm table is changed accordingly. If the alarm has a different additional text than the value is changed in the alarm table also. The acknowledgement state will be set to unacknowledged implicitly. The acknowledgement user id will be set to default value, empty string, the acknowledgement time shall have same value as the event time. Although the value of the acknowledgement state is implicitly changed, the agent must not emit the 'noiAlarmAckStateChanged' notification. The event time of the alarm in the alarm table will be changed according to the value of the event. If the agent does not support the concept of acknowledgement than the value of acknowledgement state, -time and -user id remains unchanged. The alarm is not removed from the alarm table and a notification 'noiAlarmChanged' is send by agent. The object noiAlarmLastSendNotificationId is updated according to the value of the notification identifier of the notification 'noiAlarmChanged' Acknowledged Alarm When the state of an alarm is changed the acknowledge- ment state of an alarm in the alarm table is changed accordingly. The acknowledgement used id will be set according to the user. The acknowledgement time is changed also. The event time of the alarm in the alarm table will be changed according to the value of the event. The alarm is removed from the alarm table, when it is already cleared e.g. severity of the alarm in the alarm table is 'cleared'. Otherwise, the alarm will remain in the alarm table. The object noiAlarmLastSendNotificationId is updated according to the value of the notification identifier of the notification 'noiAlarmAckStateChanged' A notification 'noiAlarmAckStateChanged' is send by agent.")
noiAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1), ).setIndexNames((0, "NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmId"))
if mibBuilder.loadTexts: noiAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: noiAlarmEntry.setDescription('One entry in the alarm table holds one active alarm.')
noiAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 1), NoiAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmId.setDescription('This object represents the alarm identifier of an alarm in the alarm table It uniquely identifies an entry in the alarm table. The alarmId object is read-only even though it is used as index in the alarm table')
noiAlarmSystemDN = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 2), NoiSystemDistinguishedName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmSystemDN.setStatus('current')
if mibBuilder.loadTexts: noiAlarmSystemDN.setDescription('This object represents the System Distinguished Name (SDN) of the managed object detecting the fault.')
noiAlarmEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 3), NoiEventTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmEventTime.setStatus('current')
if mibBuilder.loadTexts: noiAlarmEventTime.setDescription('This object represents the event time, time of occurrence of the event in the Network Element.')
noiAlarmSpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 4), NoiSpecificProblem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmSpecificProblem.setStatus('current')
if mibBuilder.loadTexts: noiAlarmSpecificProblem.setDescription('This object represents the specific problem assigned to the fault situation.')
noiAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 5), NoiAlarmText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmText.setStatus('current')
if mibBuilder.loadTexts: noiAlarmText.setDescription('This object represents the alarm text and contains basic information on the fault')
noiAlarmPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 6), NoiPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: noiAlarmPerceivedSeverity.setDescription('This object represents the perceived severity of the fault.')
noiAlarmAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 7), NoiAdditionalText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmAdditionalText.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAdditionalText.setDescription('This object represents the additional text and provides further qualification on the fault.')
noiAlarmProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 8), NoiProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmProbableCause.setStatus('current')
if mibBuilder.loadTexts: noiAlarmProbableCause.setDescription('This object represents the probable cause of the alarm')
noiAlarmEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 9), NoiEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmEventType.setStatus('current')
if mibBuilder.loadTexts: noiAlarmEventType.setDescription('This object represents the event type')
noiAlarmNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 10), NoiNotificationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmNotificationId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmNotificationId.setDescription('This object represent the notification identifier. It is a unique value for a notification.')
noiAlarmAckState = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 11), NoiAcknowledgementState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiAlarmAckState.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAckState.setDescription("This object represents the acknowledgement status of the of the alarm If the agent does not support the concept of acknowledgement, than the value 'indeterminate' shall be used")
noiAlarmAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 12), NoiAcknowledgementTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiAlarmAckTime.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAckTime.setDescription('This object represent the time of the last modification of the acknowledgement state of an alarm in the alarm table.')
noiAlarmAckUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 4, 2, 1, 13), NoiAcknowledgementUserId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiAlarmAckUserId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAckUserId.setDescription('This object represent the user who made the last modification of the acknowledgement state of an alarm in the alarm table.')
noiAlarmNew = NotificationType((1, 3, 6, 1, 4, 1, 94, 7, 1, 3, 0, 1)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSpecificProblem"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmPerceivedSeverity"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAdditionalText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmProbableCause"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventType"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"))
if mibBuilder.loadTexts: noiAlarmNew.setStatus('current')
if mibBuilder.loadTexts: noiAlarmNew.setDescription("This notification is used when a fault situation occurs in the NE and the agent send the alarm notification to inform the OS about the fault. The value 'cleared' for the noiAlarmPerceivedSeverity is not allowed for an alarm notification.")
noiAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 94, 7, 1, 3, 0, 2)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSpecificProblem"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmPerceivedSeverity"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAdditionalText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmProbableCause"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventType"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"))
if mibBuilder.loadTexts: noiAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: noiAlarmCleared.setDescription("This notification is used when an alarm is cleared. The only permitted value for the 'noiAlarmPerceivedSeverity' is 'cleared' The value of noiAlarmId must be equal to the value Of the noiAlarmId must of the correlated alarm notification. The noiAlarmSystemDN , noiAlarmSpecificProblem , noiAlarmProbableCause, noiAlarmEventType must be equal to the values of the correlated alarm. The agent might use empty string for noiAlarmText and NoiAlarmAdditionalText, otherwise the values must be equal to the values of the correlated alarm. The active alarm is cleared and removed from the alarm table, if the acknowledgement state is 'acknowledged'. otherwise, the alarm will remain in the alarm table. If the agent does not support the concept of acknowledgement, than the alarm will be removed from the alarm table when this notification is send by the agent")
noiAlarmListRebuild = NotificationType((1, 3, 6, 1, 4, 1, 94, 7, 1, 3, 0, 3)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"))
if mibBuilder.loadTexts: noiAlarmListRebuild.setStatus('current')
if mibBuilder.loadTexts: noiAlarmListRebuild.setDescription("This notification is used when the alarm table in the agent has been rebuild. The notification will be emitted after a successful rebuild. On reception of this notification, the manager will synchronise the alarm table in the agent with it's internal alarm table by retrieving the content of the alarm table in the agent. While re-build the alarm table, the agent shall not emit notifications, when entering new alarms into the alarm table. The agent can decide to log this notification in the alarm log like any other notification. The objects, which are not used for this notification shall remain empty (strings) or use default value (0) for integer types.")
noiAlarmListRebuildInitiated = NotificationType((1, 3, 6, 1, 4, 1, 94, 7, 1, 3, 0, 4)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"))
if mibBuilder.loadTexts: noiAlarmListRebuildInitiated.setStatus('current')
if mibBuilder.loadTexts: noiAlarmListRebuildInitiated.setDescription('This notification is used when the alarm table in the agent is about the be rebuild. The notification will be emitted prior to the rebuild, immediately after dropping the content of the alarm table. On reception of this notification, the manager shall clean the internal alarm table to be in snyc with the agent. The agent can decide to log this notification in the alarm log like any other notification. The objects, which are not used for this notification shall remain empty (strings) or use default value (0) for integer types ')
noiAlarmChanged = NotificationType((1, 3, 6, 1, 4, 1, 94, 7, 1, 3, 0, 5)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSpecificProblem"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmPerceivedSeverity"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAdditionalText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmProbableCause"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventType"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"))
if mibBuilder.loadTexts: noiAlarmChanged.setStatus('current')
if mibBuilder.loadTexts: noiAlarmChanged.setDescription("This notification is used when the severity of an alarm has changed. The value 'cleared' is not allowed in conjunction with this notification. The value of noiAlarmID must be equal to the value of the noiAlarmId of the correlated alarm notification. The noiAlarmSystemDN , noiAlarmSpecificProblem , NoiAlarmText, noiAlarmProbableCause, noiAlarmEventType must be equal to the values of the correlated alarm. The agent may use a different noiAlarmAdditionalText than the original alarm. The noiAlarmEventTime is naturally different from the original alarm")
noiAlarmAckStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 94, 7, 1, 3, 0, 6)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSpecificProblem"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmPerceivedSeverity"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAdditionalText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmProbableCause"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventType"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckState"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckUserId"))
if mibBuilder.loadTexts: noiAlarmAckStateChanged.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAckStateChanged.setDescription("This notification is used when the acknowledgement state of an alarm has changed. The value of noiAlarmID must be equal to the value ff the noiAlarmId of the correlated alarm notification. The alarm information carried in this notification shall contain identical set of parameters as the correlated alarm notification. The alarm is removed from the alarm table when the alarm has been cleared before (e.g. severity of the alarm is 'cleared' and this notification has been send by the agent. If the alarm in the alarm table is not cleared, it remains in the table. Values of noiAlarmAckState , noiAlarmAckTime, noiAlarmAckUserId are updated. If the agent does not support the concept of acknowledgment for alarms, than this notification shall not be supported.")
noiAlarmLogFullAction = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 1), NoiLogFullAction().clone('wrap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiAlarmLogFullAction.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogFullAction.setDescription('Note that this object does not affect to the behaviour of alarm identifier, i.e. when log is in halt mode, alarm identifier continues to be incremented by 1 for each notification emitted by the NE.')
noiAlarmLogControl = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 2), NoiAlarmLogControl().clone('logging')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: noiAlarmLogControl.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogControl.setDescription('This object controls the activity of the log. Initially this object is set to logging (0) which indicate that the log functionality is operational and all emitted notifications are stored in the log table. This shall be the initial value after restart of the Network Element. When manager sets this object to flush(1), the NE shall empty the current log table. All entries in the alarm table at the time of setting this object are removed. After the completion of the flushing the agent shall set this object to logging(0) and start immediately logging all emitted notification (normal mode of operation) When the manager sets this object to suspend (2), the NE shall interrupt logging of emitted notifications. The manager has to explicitly activate logging for a suspended log by setting this object to logging (0).')
noiAlarmLogCount = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 3), NoiAlarmLogCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogCount.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogCount.setDescription('This object contains the number of current records in the alarm Log. When the alarm log is empty , the value of this object is 0.')
noiAlarmLogMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 4), NoiAlarmLogCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogMaxCount.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogMaxCount.setDescription('This object contains the maximum number of records in the alarm Log. The value is implementation dependent.')
noiAlarmLogTable = MibTable((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5), )
if mibBuilder.loadTexts: noiAlarmLogTable.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogTable.setDescription('Log with information about the alarms that are currently active in the Network Element. An Active alarm is characterised by a severity other than cleared. ')
noiAlarmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1), ).setIndexNames((0, "NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryNotificationId"))
if mibBuilder.loadTexts: noiAlarmLogEntry.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntry.setDescription('One entry in the alarm Log holds one current active alarm.')
noiAlarmLogEntryNotificationId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 1), NoiNotificationId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryNotificationId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryNotificationId.setDescription('This object represents the notification identifier of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryAlarmId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 2), NoiAlarmId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryAlarmId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryAlarmId.setDescription('This object represents the alarm identifier of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntrySystemDN = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 3), NoiSystemDistinguishedName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntrySystemDN.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntrySystemDN.setDescription('This object represents the System Distinguished name of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 4), NoiEventTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryEventTime.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryEventTime.setDescription('This object represents the event time of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntrySpecificProblem = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 5), NoiSpecificProblem()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntrySpecificProblem.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntrySpecificProblem.setDescription('This object represents the specific problem of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryAlarmText = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 6), NoiAlarmText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryAlarmText.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryAlarmText.setDescription('This object represents the alarm text of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryPerceivedSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 7), NoiPerceivedSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryPerceivedSeverity.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryPerceivedSeverity.setDescription('This object represents the perceived severity of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryAdditionalText = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 8), NoiAdditionalText()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryAdditionalText.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryAdditionalText.setDescription('This object represents the additional text of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryProbableCause = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 9), NoiProbableCause()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryProbableCause.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryProbableCause.setDescription('This object represents the probable cause of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 10), NoiEventType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryEventType.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryEventType.setDescription('This object represents the event type of a logged notification The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryAckState = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 11), NoiAcknowledgementState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryAckState.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryAckState.setDescription('This object represents the acknowledgement status of the of the logged alarm If the agent does not support the concept of acknowledgement, than the value indeterminate shall be used')
noiAlarmLogEntryAckTime = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 12), NoiAcknowledgementTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryAckTime.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryAckTime.setDescription('This object represent the time of the last modification of the acknowledgement of a logged notification. The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryAckUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 13), NoiAcknowledgementUserId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryAckUserId.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryAckUserId.setDescription('This object represent the user who made the last modification of the acknowledgement state of logged notification. The value of this field shall equal to the value of correlated field in the alarm- or clear alarm notification.')
noiAlarmLogEntryNotificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 94, 7, 1, 5, 5, 1, 14), NoiNotificationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noiAlarmLogEntryNotificationType.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogEntryNotificationType.setDescription('This object represents the type of the logged notification')
noiAlarmIRPompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 1)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAdministrationMandatoryGroup"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationMandatoryGroup"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationOptionalGroup"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmTableOptionalGroup"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmTableRebuildOptionalGroup"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAcknwledgementOptionalGroup"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogOptionalGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmIRPompliance = noiAlarmIRPompliance.setStatus('current')
if mibBuilder.loadTexts: noiAlarmIRPompliance.setDescription('This specifies the objects that are required to claim compliance to Nokia NE3S Interface.')
noiAlarmAdministrationMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 2)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmIrpVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmAdministrationMandatoryGroup = noiAlarmAdministrationMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAdministrationMandatoryGroup.setDescription('A collection of objects that represents mandatory administrative attributes for the Alarm IRP.')
noiAlarmNotificationMandatoryGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 4)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNew"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmNotificationMandatoryGroup = noiAlarmNotificationMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmNotificationMandatoryGroup.setDescription('A collection of mandatory alarm notifications.')
noiAlarmNotificationOptionalGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 5)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmNotificationOptionalGroup = noiAlarmNotificationOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmNotificationOptionalGroup.setDescription('A collection of optional alarm related notifications.')
noiAlarmTableOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 6)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmTableCount"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLastSendNotificationId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmSpecificProblem"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmPerceivedSeverity"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAdditionalText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmProbableCause"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmEventType"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmNotificationId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckState"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckUserId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmTableOptionalGroup = noiAlarmTableOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmTableOptionalGroup.setDescription('A collection of objects that represents optional functionality to store active alarms in the alarm table.')
noiAlarmTableRebuildOptionalGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 7)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmListRebuild"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmListRebuildInitiated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmTableRebuildOptionalGroup = noiAlarmTableRebuildOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmTableRebuildOptionalGroup.setDescription('A collection of optional alarm notifications, to be used in conjunction with the concept of rebuilding the alarm table. Depening on the selected strategy, either the noiAlarmListRebuild noptification or noiAlarmListRebuildInitiated noification shall be implemented..')
noiAlarmAcknwledgementOptionalGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 8)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmAckStateChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmAcknwledgementOptionalGroup = noiAlarmAcknwledgementOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmAcknwledgementOptionalGroup.setDescription('A collection of optional alarm related notifications.')
noiAlarmLogOptionalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 94, 7, 1, 6, 9)).setObjects(("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogFullAction"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogControl"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogCount"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogMaxCount"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryAlarmId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntrySystemDN"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryEventTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntrySpecificProblem"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryAlarmText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryPerceivedSeverity"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryAdditionalText"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryProbableCause"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryEventType"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryNotificationId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryAckState"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryAckTime"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryAckUserId"), ("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", "noiAlarmLogEntryNotificationType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    noiAlarmLogOptionalGroup = noiAlarmLogOptionalGroup.setStatus('current')
if mibBuilder.loadTexts: noiAlarmLogOptionalGroup.setDescription('A collection of objects that represents optional functionality to store a history of emitted notifications.')
mibBuilder.exportSymbols("NOKIA-ENHANCED-SNMP-SOLUTION-SUITE-ALARM-IRP", noiAlarmLogEntryEventTime=noiAlarmLogEntryEventTime, noiAlarmAcknwledgementOptionalGroup=noiAlarmAcknwledgementOptionalGroup, noiAlarmNotificationId=noiAlarmNotificationId, noiAlarmEntry=noiAlarmEntry, noiAlarmNew=noiAlarmNew, noiAlarmLogEntryNotificationId=noiAlarmLogEntryNotificationId, noiAlarmListRebuildInitiated=noiAlarmListRebuildInitiated, noiAlarmLogEntryNotificationType=noiAlarmLogEntryNotificationType, noiAlarmLogEntryAdditionalText=noiAlarmLogEntryAdditionalText, noiAlarmTableCount=noiAlarmTableCount, noiAlarmLogEntryPerceivedSeverity=noiAlarmLogEntryPerceivedSeverity, noiAlarmAckState=noiAlarmAckState, noiAlarmLogEntryAckTime=noiAlarmLogEntryAckTime, noiAlarmLogEntryAlarmText=noiAlarmLogEntryAlarmText, noiAlarmTableRebuildOptionalGroup=noiAlarmTableRebuildOptionalGroup, noiAlarmLogEntryProbableCause=noiAlarmLogEntryProbableCause, noiAlarmNotificationOptionalGroup=noiAlarmNotificationOptionalGroup, noiAlarmIRPompliance=noiAlarmIRPompliance, noiAlarmLogFullAction=noiAlarmLogFullAction, noiAlarmLogEntrySystemDN=noiAlarmLogEntrySystemDN, noiAlarmLogControl=noiAlarmLogControl, noiAlarmAdministrationMandatoryGroup=noiAlarmAdministrationMandatoryGroup, noiAlarmTableOptionalGroup=noiAlarmTableOptionalGroup, noiAlarmId=noiAlarmId, noiAlarmLogTable=noiAlarmLogTable, noiAlarmPerceivedSeverity=noiAlarmPerceivedSeverity, noiAlarmLogEntry=noiAlarmLogEntry, noiAlarmLogEntryEventType=noiAlarmLogEntryEventType, noiAlarmLogCount=noiAlarmLogCount, noiAlarmNotificationMandatoryGroup=noiAlarmNotificationMandatoryGroup, noiAlarmLogEntryAlarmId=noiAlarmLogEntryAlarmId, noiAlarmText=noiAlarmText, noiAlarmLogEntryAckState=noiAlarmLogEntryAckState, noiAlarmSystemDN=noiAlarmSystemDN, noiAlarmLogEntrySpecificProblem=noiAlarmLogEntrySpecificProblem, noiAlarmAckStateChanged=noiAlarmAckStateChanged, PYSNMP_MODULE_ID=noiSnmpAlarmIrp, noiAlarmChanged=noiAlarmChanged, noiAlarmEventType=noiAlarmEventType, noiAlarmListRebuild=noiAlarmListRebuild, noiSnmpAlarmIrp=noiSnmpAlarmIrp, noiAlarmProbableCause=noiAlarmProbableCause, noiAlarmLogEntryAckUserId=noiAlarmLogEntryAckUserId, noiAlarmLogMaxCount=noiAlarmLogMaxCount, noiAlarmLastSendNotificationId=noiAlarmLastSendNotificationId, noiAlarmAckTime=noiAlarmAckTime, noiAlarmCleared=noiAlarmCleared, noiAlarmTable=noiAlarmTable, noiAlarmAdditionalText=noiAlarmAdditionalText, noiAlarmLogOptionalGroup=noiAlarmLogOptionalGroup, noiAlarmSpecificProblem=noiAlarmSpecificProblem, noiAlarmIrpVersion=noiAlarmIrpVersion, noiAlarmEventTime=noiAlarmEventTime, noiAlarmAckUserId=noiAlarmAckUserId)
