#
# PySNMP MIB module XYLAN-HREX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-HREX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, ModuleIdentity, iso, Gauge32, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks, Integer32, Bits, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "iso", "Gauge32", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks", "Integer32", "Bits", "MibIdentifier", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanHrexArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanHrexArch")
xylanHrexRegisterTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 31, 1), )
if mibBuilder.loadTexts: xylanHrexRegisterTable.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexRegisterTable.setDescription('Entry for an HRE-X Router Port MAC register.')
xylanHrexRegisterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1), ).setIndexNames((0, "XYLAN-HREX-MIB", "xylanHrexRegisterNumber"))
if mibBuilder.loadTexts: xylanHrexRegisterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexRegisterEntry.setDescription('Each entry corresponds to a single register.')
xylanHrexRegisterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexRegisterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexRegisterNumber.setDescription('The number of the HRE-X Router Port MAC register.')
xylanHrexRegisterAllowType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("any", 1), ("cip", 2), ("m013", 3), ("mpoa", 4), ("routing", 5), ("vrrp", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xylanHrexRegisterAllowType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexRegisterAllowType.setDescription('The service type that is permitted for the HRE-X Router Router Port MAC register.')
xylanHrexRegisterUseType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 31, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 0), ("unused", 1), ("cip", 2), ("m013", 3), ("mpoa", 4), ("routing", 5), ("vrrp", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexRegisterUseType.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexRegisterUseType.setDescription('The service type to which the register has been allocated.')
xylanHrexStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 31, 2))
xylanHrexIpPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexIpPacketsReceived.setDescription('The count of IP packets received by the HRE-Xs.')
xylanHrexIpPacketsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpPacketsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexIpPacketsForwarded.setDescription('The count of IP packets forwarded by the HRE-Xs.')
xylanHrexIpPacketsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexIpPacketsDiscarded.setDescription('The count of IP packets discarded by the HRE-Xs.')
xylanHrexIpxPacketsReceived = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpxPacketsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexIpxPacketsReceived.setDescription('The count of IPX packets received by the HRE-Xs.')
xylanHrexIpxPacketsForwarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpxPacketsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexIpxPacketsForwarded.setDescription('The count of IPX packets forwarded by the HRE-Xs.')
xylanHrexIpxPacketsDiscarded = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexIpxPacketsDiscarded.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexIpxPacketsDiscarded.setDescription('The count of IPX packets discarded by the HRE-Xs.')
xylanHrexUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 31, 3))
xylanHrexPseudoCamHashTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamHashTotal.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexPseudoCamHashTotal.setDescription('The total number of HRE-X PseudoCAM hash entries that are configured for use.')
xylanHrexPseudoCamHashFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamHashFree.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexPseudoCamHashFree.setDescription('The total number of HRE-X PseudoCAM hash entries that are currently not in use.')
xylanHrexPseudoCamCollisionTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamCollisionTotal.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexPseudoCamCollisionTotal.setDescription('The total number of HRE-X PseudoCAM collision entries that are configured for use.')
xylanHrexPseudoCamCollisionFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexPseudoCamCollisionFree.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexPseudoCamCollisionFree.setDescription('The total number of HRE-X PseudoCAM collision entries that are currently not in use.')
xylanHrexCacheTotal = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCacheTotal.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexCacheTotal.setDescription('The total number of HRE-X Cache entries that are configured for use.')
xylanHrexCacheFree = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCacheFree.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexCacheFree.setDescription('The total number of HRE-X cache entries that are currently not in use.')
xylanHrexCollisionLengthMax = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCollisionLengthMax.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexCollisionLengthMax.setDescription('The longest collision chain currently in use in the HRE-X.')
xylanHrexCollisionLengthAvg = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xylanHrexCollisionLengthAvg.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexCollisionLengthAvg.setDescription('The average collision chain length currently in use in the HRE-X.')
xylanHrexHash = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 31, 4))
xylanHrexHashOptimize = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 4, 1), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanHrexHashOptimize.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexHashOptimize.setDescription('Causes the switch to compute an optimized hash function for the HRE-X PseudoCAM and to program this into the HRE-X(s).')
xylanHrexHashDefault = MibScalar((1, 3, 6, 1, 4, 1, 800, 2, 31, 4, 2), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: xylanHrexHashDefault.setStatus('mandatory')
if mibBuilder.loadTexts: xylanHrexHashDefault.setDescription('Causes the switch to restore the hash function for the HRE-X PseudoCAM to the default value and to program this into the HRE-X(s).')
mibBuilder.exportSymbols("XYLAN-HREX-MIB", xylanHrexRegisterNumber=xylanHrexRegisterNumber, xylanHrexUtilization=xylanHrexUtilization, xylanHrexRegisterEntry=xylanHrexRegisterEntry, xylanHrexIpPacketsDiscarded=xylanHrexIpPacketsDiscarded, xylanHrexCollisionLengthMax=xylanHrexCollisionLengthMax, xylanHrexHashOptimize=xylanHrexHashOptimize, xylanHrexStatistics=xylanHrexStatistics, xylanHrexPseudoCamHashTotal=xylanHrexPseudoCamHashTotal, xylanHrexIpPacketsForwarded=xylanHrexIpPacketsForwarded, xylanHrexCacheTotal=xylanHrexCacheTotal, xylanHrexPseudoCamHashFree=xylanHrexPseudoCamHashFree, xylanHrexCacheFree=xylanHrexCacheFree, xylanHrexPseudoCamCollisionFree=xylanHrexPseudoCamCollisionFree, xylanHrexIpxPacketsReceived=xylanHrexIpxPacketsReceived, xylanHrexRegisterUseType=xylanHrexRegisterUseType, xylanHrexRegisterTable=xylanHrexRegisterTable, xylanHrexIpxPacketsForwarded=xylanHrexIpxPacketsForwarded, xylanHrexCollisionLengthAvg=xylanHrexCollisionLengthAvg, xylanHrexHash=xylanHrexHash, xylanHrexHashDefault=xylanHrexHashDefault, xylanHrexIpPacketsReceived=xylanHrexIpPacketsReceived, xylanHrexPseudoCamCollisionTotal=xylanHrexPseudoCamCollisionTotal, xylanHrexIpxPacketsDiscarded=xylanHrexIpxPacketsDiscarded, xylanHrexRegisterAllowType=xylanHrexRegisterAllowType)
