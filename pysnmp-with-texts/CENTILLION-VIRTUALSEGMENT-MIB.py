#
# PySNMP MIB module CENTILLION-VIRTUALSEGMENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CENTILLION-VIRTUALSEGMENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:31:29 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
BridgeGroupId, = mibBuilder.importSymbols("CENTILLION-BRIDGEGROUP-MIB", "BridgeGroupId")
StatusIndicator, sysConfig, Boolean = mibBuilder.importSymbols("CENTILLION-ROOT-MIB", "StatusIndicator", "sysConfig", "Boolean")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Counter32, Gauge32, iso, TimeTicks, Unsigned32, Counter64, Integer32, NotificationType, Bits, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter32", "Gauge32", "iso", "TimeTicks", "Unsigned32", "Counter64", "Integer32", "NotificationType", "Bits", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class VirtualSegmentTypeId(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("token-ring", 2), ("ethernet", 3))

virtualSegmentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23))
virtualSegmentConfigNumber = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentConfigNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentConfigNumber.setDescription('The total number of configured virtual segments in the system.')
virtualSegmentActiveNumber = MibScalar((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentActiveNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentActiveNumber.setDescription('The total number of active virtual segments in the system.')
virtualSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3), )
if mibBuilder.loadTexts: virtualSegmentTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentTable.setDescription('The Virtual Segment table. The virtual segment table contains information pertaining the each virtual segment in the system.')
virtualSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1), ).setIndexNames((0, "CENTILLION-VIRTUALSEGMENT-MIB", "virtualSegmentType"), (0, "CENTILLION-VIRTUALSEGMENT-MIB", "virtualSegmentId"))
if mibBuilder.loadTexts: virtualSegmentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentEntry.setDescription('A single entry in the virtual segment table. Virtual segments may be added by specifying a valid status for a non-existant entry in the table. Note that if no other values are specified in the set request, they are defaulted to a value as appropriate to the type of virtual Segment.')
virtualSegmentType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 1), VirtualSegmentTypeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentType.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentType.setDescription('The virtual segment type. When the type is ethernet, a MLT group will be created. When the type is token ring, a token ring vsegment is created.')
virtualSegmentId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentId.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentId.setDescription('The virtual segment identifier. The identifier is interpreted based upon the virtualSegmentType object. For example, the virtualSegmentIdentifier for a token-ring VSegment is the ring number. This identifier must be unique across local VSegments within the specific virtualSegmentType.')
virtualSegmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 3), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentStatus.setDescription('The current status of the virtual Segment entry. VSegments may be added by specifiying a valid status, and removed by specifying an invalid status.')
virtualSegmentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentIfIndex.setDescription('The value of the instance of the ifIndex object, defined in MIB-II, for the interface corresponding to this VSegment.')
virtualSegmentConfiguredPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentConfiguredPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentConfiguredPortNumber.setDescription('The number of ports configured in this VSegment.')
virtualSegmentActivePortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentActivePortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentActivePortNumber.setDescription('The number of active ports in this VSegment.')
virtualSegmentSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 7), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentSpecific.setDescription('The object identifier to reference the corresponding instance in a VSegment specific MIB. If this information is not present, its value is set to the OBJECT IDENTIFIER { 0 0 }.')
virtualSegmentAdminEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("iso88025-tokenRing", 2), ("ethernet-iso88023", 3), ("ethernet-csmacd", 4), ("iso88023-csmacd", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentAdminEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentAdminEncapsulation.setDescription('The encapulation used for generating management frames for multicast, broadcast and unknown destinations. The default values are specific to the virtualSemgentTypeId and are assigned as follows: token-ring: iso88025-tokenRing, ethernet: ethernet-iso88023 Allowable values are also dependant on the virtualSegmentTypeId.')
virtualSegmentBridgeGroupIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 9), BridgeGroupId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentBridgeGroupIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentBridgeGroupIdentifier.setDescription('The spanning tree group identifier corresponding to this virtual segment.')
virtualSegmentGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentGroupName.setDescription('The MLT group name corresponding to this virtual segment. This value is used for ethernet vsegment type and is ignored for a token ring vsegment type.')
virtualSegmentGroupServer = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 3, 1, 11), Boolean().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentGroupServer.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentGroupServer.setDescription('Used to indicate a server is attached to this MLT group. Default condition is false (no server attached to this MLT group).')
virtualSegmentPortTable = MibTable((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4), )
if mibBuilder.loadTexts: virtualSegmentPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortTable.setDescription('The Virtual Segment port configuration table. This table contains information pertaining to the ports belonging to a virtual segment.')
virtualSegmentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1), ).setIndexNames((0, "CENTILLION-VIRTUALSEGMENT-MIB", "virtualSegmentPortType"), (0, "CENTILLION-VIRTUALSEGMENT-MIB", "virtualSegmentPortId"), (0, "CENTILLION-VIRTUALSEGMENT-MIB", "virtualSegmentPortCardNumber"), (0, "CENTILLION-VIRTUALSEGMENT-MIB", "virtualSegmentPortPortNumber"))
if mibBuilder.loadTexts: virtualSegmentPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortEntry.setDescription('An entry in the virtual Segment port table. Entries are added by specifying the virtualSegmentPortType, virtualSegmentPortIdentifier, virtualSegmentPortCardNumber, and virtualSegmentPortPortNumber. Entries may be deleted simply by invalidating the virtualSegmentPortStatus object.')
virtualSegmentPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1, 1), VirtualSegmentTypeId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentPortType.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortType.setDescription('The virtual segment type of which this port is a member.')
virtualSegmentPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentPortId.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortId.setDescription('The virtual segment identifier of which this port is a member.')
virtualSegmentPortCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentPortCardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortCardNumber.setDescription('The card number for this port in the virtual Segment.')
virtualSegmentPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentPortPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortPortNumber.setDescription('The port number for this port in the virtual Segment.')
virtualSegmentPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1, 5), StatusIndicator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualSegmentPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortStatus.setDescription('The current status of the entry. Entries may be added by specifying a value of valid, and removed by setting the status to invalid.')
virtualSegmentPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 930, 2, 1, 2, 23, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualSegmentPortIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: virtualSegmentPortIfIndex.setDescription('The value for this object identifies the instance of the ifIndex object defined in MIB-II, for the interface corresponding to this port. If no such entry exists, the value 0 may be returned.')
mibBuilder.exportSymbols("CENTILLION-VIRTUALSEGMENT-MIB", virtualSegmentConfiguredPortNumber=virtualSegmentConfiguredPortNumber, virtualSegmentPortId=virtualSegmentPortId, virtualSegmentTable=virtualSegmentTable, virtualSegmentId=virtualSegmentId, virtualSegmentSpecific=virtualSegmentSpecific, virtualSegmentGroup=virtualSegmentGroup, virtualSegmentActiveNumber=virtualSegmentActiveNumber, virtualSegmentBridgeGroupIdentifier=virtualSegmentBridgeGroupIdentifier, virtualSegmentPortTable=virtualSegmentPortTable, virtualSegmentGroupName=virtualSegmentGroupName, virtualSegmentPortIfIndex=virtualSegmentPortIfIndex, virtualSegmentStatus=virtualSegmentStatus, virtualSegmentIfIndex=virtualSegmentIfIndex, virtualSegmentPortType=virtualSegmentPortType, virtualSegmentPortStatus=virtualSegmentPortStatus, virtualSegmentPortEntry=virtualSegmentPortEntry, VirtualSegmentTypeId=VirtualSegmentTypeId, virtualSegmentGroupServer=virtualSegmentGroupServer, virtualSegmentPortPortNumber=virtualSegmentPortPortNumber, virtualSegmentPortCardNumber=virtualSegmentPortCardNumber, virtualSegmentEntry=virtualSegmentEntry, virtualSegmentActivePortNumber=virtualSegmentActivePortNumber, virtualSegmentAdminEncapsulation=virtualSegmentAdminEncapsulation, virtualSegmentType=virtualSegmentType, virtualSegmentConfigNumber=virtualSegmentConfigNumber)
