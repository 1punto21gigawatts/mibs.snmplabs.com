#
# PySNMP MIB module BAY-STACK-LLDP-X-AVAYA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BAY-STACK-LLDP-X-AVAYA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:35:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
InetAddress, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressPrefixLength", "InetAddressType")
lldpRemLocalPortNum, lldpPortConfigEntry, lldpLocPortNum, lldpRemTimeMark, lldpRemIndex = mibBuilder.importSymbols("LLDP-MIB", "lldpRemLocalPortNum", "lldpPortConfigEntry", "lldpLocPortNum", "lldpRemTimeMark", "lldpRemIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, Bits, MibIdentifier, TimeTicks, Counter64, Integer32, Gauge32, Unsigned32, Counter32, IpAddress, iso, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Bits", "MibIdentifier", "TimeTicks", "Counter64", "Integer32", "Gauge32", "Unsigned32", "Counter32", "IpAddress", "iso", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
bayStackMibs, = mibBuilder.importSymbols("SYNOPTICS-ROOT-MIB", "bayStackMibs")
bayStackLldpXAvayaMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 5, 39))
bayStackLldpXAvayaMib.setRevisions(('2015-02-24 00:00', '2014-10-01 00:00', '2014-09-10 00:00', '2014-02-25 00:00', '2013-07-05 00:00', '2010-10-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: bayStackLldpXAvayaMib.setRevisionsDescriptions(('Ver 6: Fabric Attach (FA) update. Removed unsupported objects/enumerations. Updated FA element types.', 'Ver 5: Fabric Attach (FA) update. Zero Touch TLV support.', 'Ver 4: Fabric Attach (FA) update.', 'Ver 3: Fabric Attach (FA) update.', 'Ver 2: Fabric Attach (FA) extension.', 'Ver 1: Initial version.',))
if mibBuilder.loadTexts: bayStackLldpXAvayaMib.setLastUpdated('201502240000Z')
if mibBuilder.loadTexts: bayStackLldpXAvayaMib.setOrganization('Nortel Ltd.')
if mibBuilder.loadTexts: bayStackLldpXAvayaMib.setContactInfo('nortel.com')
if mibBuilder.loadTexts: bayStackLldpXAvayaMib.setDescription('This MIB module is an extension to the standard LLDP-EXT-MED MIB.')
bsLldpXAvayaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 39, 0))
bsLldpXAvayaObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 39, 1))
bsLldpXAvayaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 1))
bsLldpXAvayaLocalData = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2))
bsLldpXAvayaRemoteData = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3))
bsLldpXAvayaPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 1, 1), )
if mibBuilder.loadTexts: bsLldpXAvayaPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaPortConfigTable.setDescription('A table that controls selection of LLDP TLVs to be transmitted on individual ports.')
bsLldpXAvayaPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaPortConfigEntry"))
bsLldpXAvayaPortConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: bsLldpXAvayaPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaPortConfigEntry.setDescription('LLDP configuration information that controls the transmission of Avaya vendor specific TLVs on LLDP transmission capable ports. This configuration object augments the lldpPortConfigEntry of the LLDP-MIB, therefore it is only present along with the port configuration defined by the associated lldpPortConfigEntry entry. Each active bsLldpXAvayaPortConfigEntry must be from non-volatile storage (along with the corresponding lldpPortConfigEntry) after a re-initialization of the management system.')
bsLldpXAvayaPortConfigTLVsTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 1, 1, 1, 1), Bits().clone(namedValues=NamedValues(("poeConservationLevel", 0), ("callServer", 1), ("fileServer", 2), ("framingTlv", 3), ("faElementType", 4), ("faIsidVlanAsgns", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsLldpXAvayaPortConfigTLVsTxEnable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaPortConfigTLVsTxEnable.setDescription("The bsLldpXAvayaPortConfigTLVsTxEnable, defined as a bitmap, includes the basic set of LLDP Avaya TLVs whose transmission is allowed on the local LLDP agent by the network management. Each bit in the bitmap corresponds to a TLV type associated with a specific optional TLV. The bit 'poeConservationLevel(0)' indicates that LLDP agent should transmit 'Poe Conservation Level TLV'. The bit 'callServer(1)' indicates that LLDP agent should transmit 'Call Server TLV'. The bit 'fileServer(2)' indicates that LLDP agent should transmit 'File Server TLV'. The bit 'framingTlv(3)' indicates that LLDP agent should transmit '802.1q Framing TLV'. The bit 'faElementType(4)' indicates that LLDP agent should transmit the 'Fabric Attach Element Type TLV'. The bit 'faIsidVlanAsgns(5)' indicates that LLDP agent should transmit the 'Fabric Attach I-SID/VLAN Assignments TLV'. The default value for lldpPortConfigTLVsTxEnable object is empty set, which means no enumerated values are set. The value of this object must be restored from non-volatile storage after a re-initialization of the management system.")
bsLldpXAvayaLocPortTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 1), )
if mibBuilder.loadTexts: bsLldpXAvayaLocPortTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocPortTable.setDescription('This table contains one row per port with information about the Poe conservation level and layer 2 priority tagging between PSE and PD.')
bsLldpXAvayaLocPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: bsLldpXAvayaLocPortEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocPortEntry.setDescription('Information about a particular port component.')
bsLldpXAvayaLocPortPoeConsLevelRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsLldpXAvayaLocPortPoeConsLevelRequest.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocPortPoeConsLevelRequest.setDescription('Information about requested poe conservation level advertised to the PD device.')
bsLldpXAvayaLocPortDot1QFramingRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsLldpXAvayaLocPortDot1QFramingRequest.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocPortDot1QFramingRequest.setDescription('Information about layer2 priority tagging between the switch and ip phone')
bsLldpXAvayaLocCallServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 2), )
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerTable.setDescription('This table contains one row per call server address. All the call server ip addresses are used to be advertised to Avaya IP Phones.')
bsLldpXAvayaLocCallServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 2, 1), ).setIndexNames((0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaLocCallServerNum"))
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerEntry.setDescription('Information about call servers.')
bsLldpXAvayaLocCallServerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerNum.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerNum.setDescription('This object represents the call server id.')
bsLldpXAvayaLocCallServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerAddressType.setDescription('Call Server Ip Address Type.')
bsLldpXAvayaLocCallServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 2, 1, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocCallServerAddress.setDescription('Call Server Ip Address.')
bsLldpXAvayaLocFileServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 3), )
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerTable.setDescription('This table contains one row per file server address. All the file server ip addresses are used to be advertised to Avaya IP Phones.')
bsLldpXAvayaLocFileServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 3, 1), ).setIndexNames((0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaLocFileServerNum"))
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerEntry.setDescription('Information about file server ip address')
bsLldpXAvayaLocFileServerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerNum.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerNum.setDescription('This object represents the file server id.')
bsLldpXAvayaLocFileServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 3, 1, 2), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerAddressType.setDescription('File Server ip address Type ')
bsLldpXAvayaLocFileServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 3, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFileServerAddress.setDescription('File Server ip address')
bsLldpXAvayaLocFaService = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaService.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaService.setDescription('Exports the status of the Fabric Attach service.')
bsLldpXAvayaLocFaElementType = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("faServer", 2), ("faProxy", 3), ("faServerNoAuth", 4), ("faProxyNoAuth", 5), ("faClientWapType1", 6), ("faClientWapType2", 7), ("faClientSwitch", 8), ("faClientRouter", 9), ("faClientIpPhone", 10), ("faClientIpCamera", 11), ("faClientIpVideo", 12), ("faClientSecurityDev", 13), ("faClientVirtSwitch", 14), ("faClientSrvrEndpt", 15), ("faClientOnaSdn", 16), ("faClientOnaSpbOIp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaElementType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaElementType.setDescription('Exports the Fabric Attach element type indicating the services supported by the system.')
bsLldpXAvayaLocFaElementMgmtVlan = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaElementMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaElementMgmtVlan.setDescription('Exports the Fabric Attach element management VLAN information. A zero value indicates that the current management VLAN is not being exported.')
bsLldpXAvayaLocFaElementPrimaryServerId = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaElementPrimaryServerId.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaElementPrimaryServerId.setDescription('Exports the Fabric Attach element primary server ID if available.')
bsLldpXAvayaLocFaIsidVlanAsgnsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 8), )
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsTable.setDescription('This table contains the I-SID <--> VLAN assignments for the Fabric Attach application.')
bsLldpXAvayaLocFaIsidVlanAsgnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 8, 1), ).setIndexNames((0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaLocFaIsidVlanAsgnsIfIndex"), (0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaLocFaIsidVlanAsgnsIsid"), (0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaLocFaIsidVlanAsgnsVlan"))
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsEntry.setDescription('Information about the I-SID <--> VLAN assignments for the Fabric Attach application.')
bsLldpXAvayaLocFaIsidVlanAsgnsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsIfIndex.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsIfIndex.setDescription('Interface identifier component of the I-SID <-> VLAN assignment.')
bsLldpXAvayaLocFaIsidVlanAsgnsIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsIsid.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsIsid.setDescription('I-SID component of the I-SID <-> VLAN assignment.')
bsLldpXAvayaLocFaIsidVlanAsgnsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsVlan.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsVlan.setDescription('VLAN ID component of the I-SID <-> VLAN assignment.')
bsLldpXAvayaLocFaIsidVlanAsgnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("pending", 2), ("active", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsStatus.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaIsidVlanAsgnsStatus.setDescription('The current status of the Fabric Attach I-SID <-> VLAN assignment.')
bsLldpXAvayaLocFaZeroTouchService = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaZeroTouchService.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaZeroTouchService.setDescription('Exports the status of the Fabric Attach Zero Touch service.')
bsLldpXAvayaLocFaMsgAuthStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaMsgAuthStatus.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaMsgAuthStatus.setDescription('Exports the Fabric Attach message authentication status.')
bsLldpXAvayaLocFaClientProxyService = MibScalar((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaLocFaClientProxyService.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaLocFaClientProxyService.setDescription('Exports the status of the Fabric Attach Client Proxy service.')
bsLldpXAvayaRemTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 1), )
if mibBuilder.loadTexts: bsLldpXAvayaRemTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemTable.setDescription('This table contains one or more rows per physical network connection known to this agent.')
bsLldpXAvayaRemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: bsLldpXAvayaRemEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemEntry.setDescription('Information about a particular remote device component.')
bsLldpXAvayaRemCurrentConsLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 243))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemCurrentConsLevel.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemCurrentConsLevel.setDescription('This object represents the current conservation level configured on the remote device.')
bsLldpXAvayaRemTypicalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemTypicalPower.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemTypicalPower.setDescription('This object represents the typical power on the remote device.')
bsLldpXAvayaRemMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemMaxPower.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemMaxPower.setDescription('This object represents the max power on the remote device.')
bsLldpXAvayaRemCallServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 2), )
if mibBuilder.loadTexts: bsLldpXAvayaRemCallServerTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemCallServerTable.setDescription('This table contains one or more rows per physical network connection known to this agent. ')
bsLldpXAvayaRemCallServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 2, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: bsLldpXAvayaRemCallServerEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemCallServerEntry.setDescription('Information about a particular remote device component.')
bsLldpXAvayaRemPortCallServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortCallServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortCallServerAddressType.setDescription('This object represents the in use call server ip address type')
bsLldpXAvayaRemPortCallServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortCallServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortCallServerAddress.setDescription('This object represents the in use call server ip address ')
bsLldpXAvayaRemFileServerTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 3), )
if mibBuilder.loadTexts: bsLldpXAvayaRemFileServerTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFileServerTable.setDescription(' This table contains one or more rows per physical network connection known to this agent.')
bsLldpXAvayaRemFileServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 3, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: bsLldpXAvayaRemFileServerEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFileServerEntry.setDescription('Information about a particular remote device component.')
bsLldpXAvayaRemPortFileServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortFileServerAddressType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortFileServerAddressType.setDescription('This object represents the in use file server ip address type')
bsLldpXAvayaRemPortFileServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortFileServerAddress.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortFileServerAddress.setDescription('This object represents the in use file server ip address')
bsLldpXAvayaRemPoeConsLevelTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 4), )
if mibBuilder.loadTexts: bsLldpXAvayaRemPoeConsLevelTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPoeConsLevelTable.setDescription(' This table contains one or more rows per physical network connection known to this agent.')
bsLldpXAvayaRemPoeConsLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 4, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"), (0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaRemPoeConsLevelValue"))
if mibBuilder.loadTexts: bsLldpXAvayaRemPoeConsLevelEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPoeConsLevelEntry.setDescription('Information about a particular remote device component.')
bsLldpXAvayaRemPoeConsLevelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPoeConsLevelValue.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPoeConsLevelValue.setDescription('This object represents the conservation level supported by remote device.')
bsLldpXAvayaRemDot1QTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 5), )
if mibBuilder.loadTexts: bsLldpXAvayaRemDot1QTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemDot1QTable.setDescription(' This table contains one or more rows per physical network connection known to this agent.')
bsLldpXAvayaRemDot1QEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 5, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: bsLldpXAvayaRemDot1QEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemDot1QEntry.setDescription('Information about a particular remote device component.')
bsLldpXAvayaRemDot1QFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("untagged", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemDot1QFraming.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemDot1QFraming.setDescription('This object contains information about Layer 2 priority tagging ')
bsLldpXAvayaRemPhoneIpTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 6), )
if mibBuilder.loadTexts: bsLldpXAvayaRemPhoneIpTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPhoneIpTable.setDescription('This table contains one or more rows per physical network connection known to this agent. ')
bsLldpXAvayaRemPhoneIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 6, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: bsLldpXAvayaRemPhoneIpEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPhoneIpEntry.setDescription('Information about a particular remote device component.')
bsLldpXAvayaRemPortPhoneAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 6, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneAddressType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneAddressType.setDescription('This object contains phone ip address type of the remote device.')
bsLldpXAvayaRemPortPhoneAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 6, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneAddress.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneAddress.setDescription('This object contains phone ip address of the remote device.')
bsLldpXAvayaRemPortPhoneAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 6, 1, 3), InetAddressPrefixLength()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneAddressMask.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneAddressMask.setDescription('This object contains phone ip address mask of the remote device.')
bsLldpXAvayaRemPortPhoneGatewayAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 6, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemPortPhoneGatewayAddress.setDescription('This object contains phone gateway ip address of the remote device.')
bsLldpXAvayaRemFaElementTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 7), )
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementTable.setDescription('This table contains one or more rows per physical network connection known to this agent.')
bsLldpXAvayaRemFaElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 7, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementEntry.setDescription('Information about a particular remote FA device component.')
bsLldpXAvayaRemFaElementType = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("other", 1), ("faServer", 2), ("faProxy", 3), ("faServerNoAuth", 4), ("faProxyNoAuth", 5), ("faClientWapType1", 6), ("faClientWapType2", 7), ("faClientSwitch", 8), ("faClientRouter", 9), ("faClientIpPhone", 10), ("faClientIpCamera", 11), ("faClientIpVideo", 12), ("faClientSecurityDev", 13), ("faClientVirtSwitch", 14), ("faClientSrvrEndpt", 15), ("faClientOnaSdn", 16), ("faClientOnaSpbOIp", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementType.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementType.setDescription('This object represents the Fabric Attach agent capabilities on the remote device.')
bsLldpXAvayaRemFaElementMgmtVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementMgmtVlan.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementMgmtVlan.setDescription('This object represents the management VLAN on the remote device. A zero value indicates non- exported data.')
bsLldpXAvayaRemFaElementId = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementId.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementId.setDescription('This object represents the FA System ID exported by the remote device. A zero value indicates non- exported data.')
bsLldpXAvayaRemFaElementState = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 7, 1, 4), Bits().clone(namedValues=NamedValues(("trafficTagged", 0), ("trafficTaggedAndUntagged", 1), ("provisionModeDisabled", 2), ("provisionModeSpbm", 3), ("provisionModeVlan", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementState.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaElementState.setDescription('This object represents the state flag data on the remote device. A zero value indicates non- exported data.')
bsLldpXAvayaRemFaIsidVlanAsgnsTable = MibTable((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 8), )
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsTable.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsTable.setDescription('This table contains zero or more rows per physical network connection known to this agent. Each row contains the remote I-SID/VLAN assignments from the associated Fabric Attach element.')
bsLldpXAvayaRemFaIsidVlanAsgnsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 8, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"), (0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaRemFaIsidVlanAsgnsIsid"), (0, "BAY-STACK-LLDP-X-AVAYA-MIB", "bsLldpXAvayaRemFaIsidVlanAsgnsVlan"))
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsEntry.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsEntry.setDescription('Information about remote I-SID/VLAN assignments from Fabric Attach elements.')
bsLldpXAvayaRemFaIsidVlanAsgnsIsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsIsid.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsIsid.setDescription('I-SID component of the I-SID <-> VLAN assignment.')
bsLldpXAvayaRemFaIsidVlanAsgnsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsVlan.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsVlan.setDescription('VLAN ID component of the I-SID <-> VLAN assignment.')
bsLldpXAvayaRemFaIsidVlanAsgnsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 5, 39, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("pending", 2), ("active", 3), ("rejected", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsStatus.setStatus('current')
if mibBuilder.loadTexts: bsLldpXAvayaRemFaIsidVlanAsgnsStatus.setDescription('The current status of the remote Fabric Attach I-SID/VLAN assignment.')
mibBuilder.exportSymbols("BAY-STACK-LLDP-X-AVAYA-MIB", bsLldpXAvayaLocFileServerEntry=bsLldpXAvayaLocFileServerEntry, bsLldpXAvayaRemPortPhoneAddressType=bsLldpXAvayaRemPortPhoneAddressType, bsLldpXAvayaLocPortPoeConsLevelRequest=bsLldpXAvayaLocPortPoeConsLevelRequest, bsLldpXAvayaLocCallServerAddress=bsLldpXAvayaLocCallServerAddress, bsLldpXAvayaRemTypicalPower=bsLldpXAvayaRemTypicalPower, bsLldpXAvayaRemPortPhoneGatewayAddress=bsLldpXAvayaRemPortPhoneGatewayAddress, PYSNMP_MODULE_ID=bayStackLldpXAvayaMib, bsLldpXAvayaRemCallServerEntry=bsLldpXAvayaRemCallServerEntry, bsLldpXAvayaRemEntry=bsLldpXAvayaRemEntry, bsLldpXAvayaRemPortFileServerAddressType=bsLldpXAvayaRemPortFileServerAddressType, bsLldpXAvayaRemPortFileServerAddress=bsLldpXAvayaRemPortFileServerAddress, bsLldpXAvayaRemPoeConsLevelEntry=bsLldpXAvayaRemPoeConsLevelEntry, bsLldpXAvayaRemPhoneIpTable=bsLldpXAvayaRemPhoneIpTable, bsLldpXAvayaRemDot1QEntry=bsLldpXAvayaRemDot1QEntry, bsLldpXAvayaLocFaService=bsLldpXAvayaLocFaService, bsLldpXAvayaRemFaElementTable=bsLldpXAvayaRemFaElementTable, bsLldpXAvayaRemPhoneIpEntry=bsLldpXAvayaRemPhoneIpEntry, bsLldpXAvayaLocFaClientProxyService=bsLldpXAvayaLocFaClientProxyService, bsLldpXAvayaRemFaElementState=bsLldpXAvayaRemFaElementState, bsLldpXAvayaRemTable=bsLldpXAvayaRemTable, bsLldpXAvayaRemPortCallServerAddressType=bsLldpXAvayaRemPortCallServerAddressType, bsLldpXAvayaLocFaIsidVlanAsgnsIsid=bsLldpXAvayaLocFaIsidVlanAsgnsIsid, bsLldpXAvayaRemDot1QFraming=bsLldpXAvayaRemDot1QFraming, bsLldpXAvayaRemCallServerTable=bsLldpXAvayaRemCallServerTable, bsLldpXAvayaRemFaElementMgmtVlan=bsLldpXAvayaRemFaElementMgmtVlan, bsLldpXAvayaLocFileServerAddress=bsLldpXAvayaLocFileServerAddress, bsLldpXAvayaLocalData=bsLldpXAvayaLocalData, bsLldpXAvayaPortConfigTable=bsLldpXAvayaPortConfigTable, bayStackLldpXAvayaMib=bayStackLldpXAvayaMib, bsLldpXAvayaLocCallServerNum=bsLldpXAvayaLocCallServerNum, bsLldpXAvayaLocFaIsidVlanAsgnsIfIndex=bsLldpXAvayaLocFaIsidVlanAsgnsIfIndex, bsLldpXAvayaRemFaElementId=bsLldpXAvayaRemFaElementId, bsLldpXAvayaPortConfigEntry=bsLldpXAvayaPortConfigEntry, bsLldpXAvayaRemMaxPower=bsLldpXAvayaRemMaxPower, bsLldpXAvayaLocFaZeroTouchService=bsLldpXAvayaLocFaZeroTouchService, bsLldpXAvayaRemFileServerEntry=bsLldpXAvayaRemFileServerEntry, bsLldpXAvayaRemDot1QTable=bsLldpXAvayaRemDot1QTable, bsLldpXAvayaRemFaIsidVlanAsgnsStatus=bsLldpXAvayaRemFaIsidVlanAsgnsStatus, bsLldpXAvayaLocPortDot1QFramingRequest=bsLldpXAvayaLocPortDot1QFramingRequest, bsLldpXAvayaLocFaIsidVlanAsgnsEntry=bsLldpXAvayaLocFaIsidVlanAsgnsEntry, bsLldpXAvayaLocFaIsidVlanAsgnsStatus=bsLldpXAvayaLocFaIsidVlanAsgnsStatus, bsLldpXAvayaLocFaElementPrimaryServerId=bsLldpXAvayaLocFaElementPrimaryServerId, bsLldpXAvayaLocFaElementType=bsLldpXAvayaLocFaElementType, bsLldpXAvayaRemFileServerTable=bsLldpXAvayaRemFileServerTable, bsLldpXAvayaRemoteData=bsLldpXAvayaRemoteData, bsLldpXAvayaLocFaElementMgmtVlan=bsLldpXAvayaLocFaElementMgmtVlan, bsLldpXAvayaLocPortTable=bsLldpXAvayaLocPortTable, bsLldpXAvayaConfig=bsLldpXAvayaConfig, bsLldpXAvayaLocCallServerTable=bsLldpXAvayaLocCallServerTable, bsLldpXAvayaLocFaMsgAuthStatus=bsLldpXAvayaLocFaMsgAuthStatus, bsLldpXAvayaLocCallServerEntry=bsLldpXAvayaLocCallServerEntry, bsLldpXAvayaLocFileServerTable=bsLldpXAvayaLocFileServerTable, bsLldpXAvayaLocCallServerAddressType=bsLldpXAvayaLocCallServerAddressType, bsLldpXAvayaRemPoeConsLevelValue=bsLldpXAvayaRemPoeConsLevelValue, bsLldpXAvayaLocPortEntry=bsLldpXAvayaLocPortEntry, bsLldpXAvayaRemFaIsidVlanAsgnsEntry=bsLldpXAvayaRemFaIsidVlanAsgnsEntry, bsLldpXAvayaLocFileServerAddressType=bsLldpXAvayaLocFileServerAddressType, bsLldpXAvayaPortConfigTLVsTxEnable=bsLldpXAvayaPortConfigTLVsTxEnable, bsLldpXAvayaRemFaElementEntry=bsLldpXAvayaRemFaElementEntry, bsLldpXAvayaRemFaIsidVlanAsgnsVlan=bsLldpXAvayaRemFaIsidVlanAsgnsVlan, bsLldpXAvayaRemFaIsidVlanAsgnsIsid=bsLldpXAvayaRemFaIsidVlanAsgnsIsid, bsLldpXAvayaLocFaIsidVlanAsgnsTable=bsLldpXAvayaLocFaIsidVlanAsgnsTable, bsLldpXAvayaObjects=bsLldpXAvayaObjects, bsLldpXAvayaRemPortPhoneAddress=bsLldpXAvayaRemPortPhoneAddress, bsLldpXAvayaRemPoeConsLevelTable=bsLldpXAvayaRemPoeConsLevelTable, bsLldpXAvayaRemPortCallServerAddress=bsLldpXAvayaRemPortCallServerAddress, bsLldpXAvayaRemFaIsidVlanAsgnsTable=bsLldpXAvayaRemFaIsidVlanAsgnsTable, bsLldpXAvayaRemFaElementType=bsLldpXAvayaRemFaElementType, bsLldpXAvayaLocFileServerNum=bsLldpXAvayaLocFileServerNum, bsLldpXAvayaNotifications=bsLldpXAvayaNotifications, bsLldpXAvayaLocFaIsidVlanAsgnsVlan=bsLldpXAvayaLocFaIsidVlanAsgnsVlan, bsLldpXAvayaRemCurrentConsLevel=bsLldpXAvayaRemCurrentConsLevel, bsLldpXAvayaRemPortPhoneAddressMask=bsLldpXAvayaRemPortPhoneAddressMask)
