#
# PySNMP MIB module AISYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AISYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:16:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, ObjectIdentity, Gauge32, MibIdentifier, Counter64, IpAddress, Bits, Integer32, iso, ModuleIdentity, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ObjectIdentity", "Gauge32", "MibIdentifier", "Counter64", "IpAddress", "Bits", "Integer32", "iso", "ModuleIdentity", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "TimeTicks")
TruthValue, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime")
class PositiveInteger(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

aii = MibIdentifier((1, 3, 6, 1, 4, 1, 539))
aiSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 539, 8))
aiSystem.setRevisions(('2001-08-15 10:00', '2001-06-28 15:00', '2001-05-22 20:00', '1999-10-25 00:00', '1998-10-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: aiSystem.setRevisionsDescriptions(('Added switchedEthernetPort1000 to the AIIHwIntType types and SFP to the AIIConnType types.', 'Increased adherence to SMIv2. Deprecated copperGBIC in favor of more appropriate generic GBIC type.', 'Added aiSystemCmdReboot and aiSystemStatusLastConfig.', 'Corrected the descriptions for aiSystemLastTrapMsg and aiSystemLastTrapSequenceNum. Added aiSystemModuleTable and aiSystemStatumTable.', 'The initial revision of this module.',))
if mibBuilder.loadTexts: aiSystem.setLastUpdated('200108151000Z')
if mibBuilder.loadTexts: aiSystem.setOrganization('Applied Innovation Incorporated')
if mibBuilder.loadTexts: aiSystem.setContactInfo(' Engineering MIB Administrator Postal: Applied Innovation Inc. 5800 Innovation Drive Dublin, OH 43016 Tel: 614/798-2000 Fax: 614/798-1770 E-mail: snmp@aiinet.com')
if mibBuilder.loadTexts: aiSystem.setDescription('The System MIB Module for AI Equipment')
class AIIHwIntType(TextualConvention, Integer32):
    description = 'This data type is used as the syntax of the hardware interface type object(aiSysSTHwIntType) of the AII Statum Discovery Table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30))
    namedValues = NamedValues(("noHwIfType", 0), ("serialSyncAsync", 1), ("serialSync", 2), ("serialAsync", 3), ("discreteIn", 4), ("discreteOut", 5), ("ethernetPort10", 6), ("ethernetPort100", 7), ("ethernetPort10-100", 8), ("hubbedEthernetPort10", 9), ("hubbedEthernetPort100", 10), ("hubbedEthernetPort10-100", 11), ("modem56K", 12), ("hubbedFiber1310", 13), ("hubbedFiber1550", 14), ("temperatureProbe", 15), ("power", 16), ("fan", 17), ("ethernetPort1000", 18), ("fiber850", 19), ("fiber1310", 20), ("analogIn", 21), ("switchedEthernetPort10", 22), ("switchedEthernetPort100", 23), ("switchedEthernetPort10-100", 24), ("switchedFiber1310", 25), ("switchedFiber1550", 26), ("luxChannel10G", 27), ("switchedEthernetPort1000", 28), ("serialSyncAsyncnoDSR", 29), ("serialAsyncnoDSR", 30))

class AIIConnType(TextualConvention, Integer32):
    description = 'This data type is used as the syntax of the connector type object(aiSysSTConnType) of the AII Statum Discovery Table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("noConnType", 0), ("propConnType", 1), ("db9", 2), ("db25", 3), ("rj11", 4), ("rj45", 5), ("coax", 6), ("aui", 7), ("sc", 8), ("vhdci", 9), ("scsi2", 10), ("copperGBIC", 11), ("gbic", 12), ("sfp", 13))

aiSystemSendsStatusTraps = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemSendsStatusTraps.setStatus('current')
if mibBuilder.loadTexts: aiSystemSendsStatusTraps.setDescription('This flag indicates whether or not this agent sends traps when its ports change status. The TruthValue syntax defines values of true(1) and false(2).')
aiSystemLastTrapSequenceNum = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemLastTrapSequenceNum.setStatus('current')
if mibBuilder.loadTexts: aiSystemLastTrapSequenceNum.setDescription('This is the sequence number of the last trap sent by this agent. The sequence number starts at zero following a hardware reset or power-up. When the sequence number reaches 0xffffffff, it rolls over to 0 on the next trap. If the agent supports trap sequence numbers, it must include the trap sequence number when it sends traps and it must notify the CLC via a window transaction after each trap. When this varbind appears in a trap, this is the sequence number of that trap.')
aiSystemLastTrapMsg = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemLastTrapMsg.setStatus('current')
if mibBuilder.loadTexts: aiSystemLastTrapMsg.setDescription('The message text which was inserted in the last trap sent by this agent. If this agent does not support traps, the string is blank. When this varbind appears in a trap, the value is the message for that trap.')
aiSystemDisc = MibIdentifier((1, 3, 6, 1, 4, 1, 539, 8, 4))
aiSystemDiscVersion = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemDiscVersion.setStatus('current')
if mibBuilder.loadTexts: aiSystemDiscVersion.setDescription('The version of the aiSystem discovery tables supported by the SNMP agent. Each time modifications are made to the syntax of any part of this MIB under the aiSystemDisc branch, the version number must be incremented. For example, if a new column is added to a table or a new value is added to an enum object, the version must be incremented. If a description is changed or an object name is changed, the version is not incremented.')
aiSystemDiscLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 4, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemDiscLastChanged.setStatus('current')
if mibBuilder.loadTexts: aiSystemDiscLastChanged.setDescription('The date and time of the last change to any object under the aiSystemDisc branch of this MIB. The DateAndTime type is a structured OCTET STRING, defined in v2-tc.my (SNMPv2 Textual Conventions).')
aiSysDiscModuleTable = MibTable((1, 3, 6, 1, 4, 1, 539, 8, 4, 3), )
if mibBuilder.loadTexts: aiSysDiscModuleTable.setStatus('current')
if mibBuilder.loadTexts: aiSysDiscModuleTable.setDescription('A table of modules in the system.')
aiSysModuleTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1), ).setIndexNames((1, "AISYSTEM-MIB", "aiSysMTIndex"))
if mibBuilder.loadTexts: aiSysModuleTableEntry.setStatus('current')
if mibBuilder.loadTexts: aiSysModuleTableEntry.setDescription('Information unique to a particular module.')
aiSysMTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTIndex.setStatus('current')
if mibBuilder.loadTexts: aiSysMTIndex.setDescription("The index for the module or submodule described in this row. The top-level module's oid is always 1.1. Submodules nest within the top-level module (e.g. 1.1.1, 1.1.2,...) and may have submodules nested within them to an arbitrary level(e.g. 1.1.1.1, 1.1.1.2,...). Each hardware component which has a product code that can be read or inferred by the SNMP agent may appear as a row in this table. The nesting of modules within modules describes the hierarchy of the hardware components that make up the top-level module.")
aiSysMTProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTProductName.setStatus('current')
if mibBuilder.loadTexts: aiSysMTProductName.setDescription("The product name of the module. This is the name from the module's auto-id part, if it has one.")
aiSysMTSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTSerialNumber.setStatus('current')
if mibBuilder.loadTexts: aiSysMTSerialNumber.setDescription("The serial number of the module. This is the serial number from the module's auto-id part, if it has one.")
aiSysMTManufDate = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysMTManufDate.setStatus('current')
if mibBuilder.loadTexts: aiSysMTManufDate.setDescription("The date of manufacture of the module. This is the manufacture date from the module's auto-id part, if it has one.")
aiSysDiscStatumTable = MibTable((1, 3, 6, 1, 4, 1, 539, 8, 4, 4), )
if mibBuilder.loadTexts: aiSysDiscStatumTable.setStatus('current')
if mibBuilder.loadTexts: aiSysDiscStatumTable.setDescription('A table of statums in the system.')
aiSysStatumTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1), ).setIndexNames((1, "AISYSTEM-MIB", "aiSysSTIndex"))
if mibBuilder.loadTexts: aiSysStatumTableEntry.setStatus('current')
if mibBuilder.loadTexts: aiSysStatumTableEntry.setDescription('Information unique to a particular statum.')
aiSysSTIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTIndex.setStatus('current')
if mibBuilder.loadTexts: aiSysSTIndex.setDescription('The index for the statum described in this row. This is a module table index (aiSysMTIndex) with a unique statum number appended (e.g. 1.1.1.2.1, 1.1.1.2.2,... where 1.1.1.2 is the module table index and 1, 2,... are statum numbers). The module table identifier is from the parent module that contains the port or point associated with this entry, or the top-level module, if this statum is not associated with a specific hardware assembly.')
aiSysSTLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTLabel.setStatus('current')
if mibBuilder.loadTexts: aiSysSTLabel.setDescription('A label that uniquely identifies this statum within its faceplate.')
aiSysSTFaceplateModule = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTFaceplateModule.setStatus('current')
if mibBuilder.loadTexts: aiSysSTFaceplateModule.setDescription("The module table index (aiSysMTIndex) of the module table entry associated with the faceplate that this statum's connector extends from. This may be the module this statum is nested under or any other module, including the top-level module of the system.")
aiSysSTFaceplateOpening = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTFaceplateOpening.setStatus('current')
if mibBuilder.loadTexts: aiSysSTFaceplateOpening.setDescription("The identifier of the faceplate opening that this statum's connector extends from. Each opening in a given faceplate must have a unique numeric identifier.")
aiSysSTOpeningIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTOpeningIndex.setStatus('current')
if mibBuilder.loadTexts: aiSysSTOpeningIndex.setDescription("A number that identifies the index of the statum in its opening identified in aiSysSTFaceplateOpening. If only one statum is accessible from an opening then that statum has an opening index of 1. If more than one statum is accessible through an opening, then the first statum is given the index of 1. Each successive statum for an opening has an index of one greater than the previous statum's opening index.")
aiSysSTHwIntType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 6), AIIHwIntType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTHwIntType.setStatus('current')
if mibBuilder.loadTexts: aiSysSTHwIntType.setDescription('Identifies the hardware interface type for the statum.')
aiSysSTConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 7), AIIConnType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTConnType.setStatus('current')
if mibBuilder.loadTexts: aiSysSTConnType.setDescription("Identifies the connector type for the statum. If a statum is internal to the device, aiSysSTFaceplateOpening equal to 0, then its connector type should be 'noConnType'. If a statum has a proprietary connector then its connector type should be 'propConnType'.")
aiSysSTMonTabIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 4, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSysSTMonTabIndex.setStatus('current')
if mibBuilder.loadTexts: aiSysSTMonTabIndex.setDescription('The index into the table which is used to monitor the status of the statum (e.g. statums of type serialSync should have their aiLinkTable index identified).')
aiSystemManagerTable = MibTable((1, 3, 6, 1, 4, 1, 539, 8, 5), )
if mibBuilder.loadTexts: aiSystemManagerTable.setStatus('current')
if mibBuilder.loadTexts: aiSystemManagerTable.setDescription('Table of IP addresses to which SNMP traps will be sent, indexed by an integer.')
aiSystemManagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 539, 8, 5, 1), ).setIndexNames((0, "AISYSTEM-MIB", "aisysManagerIndex"))
if mibBuilder.loadTexts: aiSystemManagerTableEntry.setStatus('current')
if mibBuilder.loadTexts: aiSystemManagerTableEntry.setDescription('Entry of aiSystemManagerTable.')
aisysManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 5, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aisysManagerIndex.setStatus('current')
if mibBuilder.loadTexts: aisysManagerIndex.setDescription('Index into this table of SNMP managers.')
aisysManagerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 539, 8, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aisysManagerAddress.setStatus('current')
if mibBuilder.loadTexts: aisysManagerAddress.setDescription('SNMP manager IP address. 0.0.0.0 indicates an unused entry.')
aiSystemCmdReboot = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("boot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aiSystemCmdReboot.setStatus('current')
if mibBuilder.loadTexts: aiSystemCmdReboot.setDescription('Configured boot status of the system. A write of boot(2) when this object is in up(1) state will cause the system to reboot. Any other write will have no effect.')
aiSystemStatusLastConfig = MibScalar((1, 3, 6, 1, 4, 1, 539, 8, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: aiSystemStatusLastConfig.setStatus('current')
if mibBuilder.loadTexts: aiSystemStatusLastConfig.setDescription('An md5sum hash of the current configuration file. This will be used as a timestamp of a sort by the management station.')
mibBuilder.exportSymbols("AISYSTEM-MIB", aiSystemDisc=aiSystemDisc, aiSysMTIndex=aiSysMTIndex, aiSysStatumTableEntry=aiSysStatumTableEntry, aiSysSTOpeningIndex=aiSysSTOpeningIndex, aiSystem=aiSystem, aiSysSTIndex=aiSysSTIndex, aiSystemCmdReboot=aiSystemCmdReboot, aiSystemLastTrapMsg=aiSystemLastTrapMsg, aiSysDiscModuleTable=aiSysDiscModuleTable, aiSystemManagerTableEntry=aiSystemManagerTableEntry, aiSystemDiscLastChanged=aiSystemDiscLastChanged, aiSysMTSerialNumber=aiSysMTSerialNumber, PositiveInteger=PositiveInteger, aiSysDiscStatumTable=aiSysDiscStatumTable, aiSysSTLabel=aiSysSTLabel, aiSystemStatusLastConfig=aiSystemStatusLastConfig, AIIHwIntType=AIIHwIntType, PYSNMP_MODULE_ID=aiSystem, aii=aii, aiSystemLastTrapSequenceNum=aiSystemLastTrapSequenceNum, aiSysSTConnType=aiSysSTConnType, AIIConnType=AIIConnType, aiSysModuleTableEntry=aiSysModuleTableEntry, aiSysMTManufDate=aiSysMTManufDate, aiSystemDiscVersion=aiSystemDiscVersion, aiSysSTFaceplateModule=aiSysSTFaceplateModule, aiSysSTFaceplateOpening=aiSysSTFaceplateOpening, aiSysSTMonTabIndex=aiSysSTMonTabIndex, aisysManagerIndex=aisysManagerIndex, aiSystemSendsStatusTraps=aiSystemSendsStatusTraps, aiSysSTHwIntType=aiSysSTHwIntType, aisysManagerAddress=aisysManagerAddress, aiSystemManagerTable=aiSystemManagerTable, aiSysMTProductName=aiSysMTProductName)
