#
# PySNMP MIB module ECHANNEL (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECHANNEL
# Produced by pysmi-0.3.4 at Wed May  1 12:59:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, iso, Bits, Counter64, Integer32, ObjectIdentity, NotificationType, Unsigned32, Gauge32, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "iso", "Bits", "Counter64", "Integer32", "ObjectIdentity", "NotificationType", "Unsigned32", "Gauge32", "ModuleIdentity", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
xylanVportArch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanVportArch")
virtualPort = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 3, 1))
logicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 3, 2))
physicalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 3, 3))
mirrorPort = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 3, 4))
echannelPort = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 3, 5))
ethChnlPriPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 1), )
if mibBuilder.loadTexts: ethChnlPriPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ethChnlPriPortTable.setDescription('A list of Ether Channel Primary Port Table instances in this physical OmniSwitch.')
ethChnlPriPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 1, 1), ).setIndexNames((0, "ECHANNEL", "ethChannelId"))
if mibBuilder.loadTexts: ethChnlPriPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ethChnlPriPortEntry.setDescription('An Ether Channel Primary Port entry.')
ethChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: ethChannelId.setDescription('A unique number that identifies this Ether Channel within the physical OmniSwitch.')
priPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: priPortSlot.setDescription('The physical slot on which the Primary Port (first_port) is configured.')
priPortPhysIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: priPortPhysIntf.setStatus('mandatory')
if mibBuilder.loadTexts: priPortPhysIntf.setDescription('The physical port number that is associated with the Primary Port (first_port).')
adminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: adminStatus.setDescription('This object indicates whether to add(1) or delete(2) the Ether Channel Primary Port Entry.')
ethChnlSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 2), )
if mibBuilder.loadTexts: ethChnlSecPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ethChnlSecPortTable.setDescription('A list of Ether Channel Secondary Port Table instances in this physical OmniSwitch.')
ethChnlSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 2, 1), ).setIndexNames((0, "ECHANNEL", "secethChannelId"), (0, "ECHANNEL", "secPortSlot"), (0, "ECHANNEL", "secPortPhysIntf"))
if mibBuilder.loadTexts: ethChnlSecPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ethChnlSecPortEntry.setDescription('An Ether Channel Secondary Port entry.')
secethChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secethChannelId.setStatus('mandatory')
if mibBuilder.loadTexts: secethChannelId.setDescription('A unique number that identifies this Ether Channel within the physical OmniSwitch.')
secPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: secPortSlot.setDescription('The physical slot on which the Secondary Port is configured.')
secPortPhysIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secPortPhysIntf.setStatus('mandatory')
if mibBuilder.loadTexts: secPortPhysIntf.setDescription('The physical port number that is associated with the Secondary Port.')
secadminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secadminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: secadminStatus.setDescription('This object indicates whether to add(1) or delete(2) the Ether Channel Secondary Port Entry.')
mibBuilder.exportSymbols("ECHANNEL", secadminStatus=secadminStatus, priPortSlot=priPortSlot, adminStatus=adminStatus, secethChannelId=secethChannelId, priPortPhysIntf=priPortPhysIntf, mirrorPort=mirrorPort, ethChnlSecPortEntry=ethChnlSecPortEntry, ethChnlPriPortEntry=ethChnlPriPortEntry, secPortPhysIntf=secPortPhysIntf, ethChannelId=ethChannelId, virtualPort=virtualPort, echannelPort=echannelPort, ethChnlPriPortTable=ethChnlPriPortTable, physicalPort=physicalPort, ethChnlSecPortTable=ethChnlSecPortTable, logicalPort=logicalPort, secPortSlot=secPortSlot)
