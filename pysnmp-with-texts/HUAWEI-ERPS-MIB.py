#
# PySNMP MIB module HUAWEI-ERPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-ERPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:44:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Gauge32, iso, Bits, TimeTicks, Counter32, IpAddress, MibIdentifier, ModuleIdentity, Counter64, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "iso", "Bits", "TimeTicks", "Counter32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Counter64", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
hwErpsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256))
if mibBuilder.loadTexts: hwErpsMIB.setLastUpdated('201107051557Z')
if mibBuilder.loadTexts: hwErpsMIB.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwErpsMIB.setContactInfo('8090 Team Huawei Technologies Co.,Ltd. Huawei Bld.,NO.3 Xinxi Rd., Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei.com Zip:100085 ')
if mibBuilder.loadTexts: hwErpsMIB.setDescription('The private mib file includes the general extent information of the device.hwDatacomm(25).hwErpsMIB. ')
hwErpsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1))
hwErpsGlobalResetRapsPktCnt = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwErpsGlobalResetRapsPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwErpsGlobalResetRapsPktCnt.setDescription('Reset the RAPS packets counter of all running ERPS ports. The value is unused(65535) when it is read. And it must be clear(1) when it is set.')
hwErpsRingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2), )
if mibBuilder.loadTexts: hwErpsRingConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwErpsRingConfigTable.setDescription('The table includes the configurtion of ERPS rings.')
hwErpsRingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1), ).setIndexNames((0, "HUAWEI-ERPS-MIB", "hwConfigRingId"))
if mibBuilder.loadTexts: hwErpsRingConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwErpsRingConfigEntry.setDescription('The table includes the configurtion of ERPS rings. The index of the table is ERPS ring id.')
hwConfigRingId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: hwConfigRingId.setStatus('current')
if mibBuilder.loadTexts: hwConfigRingId.setDescription('ERPS ring Identifier.')
hwConfigRingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigRingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwConfigRingRowStatus.setDescription('Operation of CreateAndGo can be used to create a new ERPS ring, and operation of Destroy be used to destroy an existent ERPS ring.')
hwConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigDescription.setStatus('current')
if mibBuilder.loadTexts: hwConfigDescription.setDescription('A textual description of the ERPS ring. It is mandatory that this only contain no more than 80 printable ASCII characters.')
hwConfigControlVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigControlVlanId.setStatus('current')
if mibBuilder.loadTexts: hwConfigControlVlanId.setDescription('The control VLAN identifier of the ERPS ring. If the value of the object is set 0, the operation is to delete configuration.')
hwConfigProtectedInstanceList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigProtectedInstanceList.setStatus('current')
if mibBuilder.loadTexts: hwConfigProtectedInstanceList.setDescription(' The protected instance list of the ERPS ring.')
hwConfigWtrTimerSettingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)).clone(5)).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigWtrTimerSettingValue.setStatus('current')
if mibBuilder.loadTexts: hwConfigWtrTimerSettingValue.setDescription("The setting value of the ring's wait to restore timer.")
hwConfigGuardTimerSettingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('centiseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigGuardTimerSettingValue.setStatus('current')
if mibBuilder.loadTexts: hwConfigGuardTimerSettingValue.setDescription("The setting value of the ring's guard timer.")
hwConfigHoldoffTimerSettingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('deciseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigHoldoffTimerSettingValue.setStatus('current')
if mibBuilder.loadTexts: hwConfigHoldoffTimerSettingValue.setDescription("The setting value of the ring's hold-off timer.")
hwConfigResetRapsPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 65535))).clone(namedValues=NamedValues(("clear", 1), ("unused", 65535)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigResetRapsPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwConfigResetRapsPktCnt.setDescription("Reset the RAPS packets counter of the ERPS ring's ports. The value is unused(65535) when it is read. And it must be clear(1) when it is set.")
hwConfigRapsMel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigRapsMel.setStatus('current')
if mibBuilder.loadTexts: hwConfigRapsMel.setDescription('The MEL is the maintenance entity group(MEG) level providing a communication channel for the ring RAPS information.')
hwErpsRingStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3), )
if mibBuilder.loadTexts: hwErpsRingStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwErpsRingStatusTable.setDescription('The table includes the status of ERPS rings.')
hwErpsRingStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3, 1), ).setIndexNames((0, "HUAWEI-ERPS-MIB", "hwConfigRingId"))
if mibBuilder.loadTexts: hwErpsRingStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwErpsRingStatusEntry.setDescription('The table includes the status of ERPS rings. The index of the table is ERPS ring id.')
hwStatusWtrTimerRunningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatusWtrTimerRunningValue.setStatus('current')
if mibBuilder.loadTexts: hwStatusWtrTimerRunningValue.setDescription("The running value of the ring's wait to restore timer.")
hwStatusGuardTimerRunningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setUnits('centiseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatusGuardTimerRunningValue.setStatus('current')
if mibBuilder.loadTexts: hwStatusGuardTimerRunningValue.setDescription("The running value of the ring's guard timer.")
hwStatusHoldoffTimerRunningValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('deciseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatusHoldoffTimerRunningValue.setStatus('current')
if mibBuilder.loadTexts: hwStatusHoldoffTimerRunningValue.setDescription("The running value of the ring's hold-off timer.")
hwStatusMachineState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("protection", 2), ("manualSwitch", 3), ("forcedSwitch", 4), ("pending", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatusMachineState.setStatus('current')
if mibBuilder.loadTexts: hwStatusMachineState.setDescription("The Finite-state machine's state of the ERPS ring. state value idle 1 protection 2 manualSwitch 3 forcedSwitch 4 pending 5 ")
hwStatusTopoLastChangeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 3, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStatusTopoLastChangeTime.setStatus('current')
if mibBuilder.loadTexts: hwStatusTopoLastChangeTime.setDescription('The time since last topology change of the ring.')
hwErpsPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4), )
if mibBuilder.loadTexts: hwErpsPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortConfigTable.setDescription('The table includes the configuration of ERPS ports.')
hwErpsPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1), ).setIndexNames((0, "HUAWEI-ERPS-MIB", "hwConfigRingId"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortType"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId1"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId2"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId3"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId4"))
if mibBuilder.loadTexts: hwErpsPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortConfigEntry.setDescription('The table includes the configuration of ERPS ports. The index of the table is ERPS ring identifier, port type, port identifier1, port identifier2, port identifier3, port identifier4. If it is an ethernet port including fast ethernet/gigabit ethernet/eth-trunk, the port type is 1, the port identifier1 is the IfIndex of the ethernet port. the other port identifier is for extension and not used currently, should be set 0.')
hwConfigPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hwConfigPortType.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortType.setDescription('The port type.Currently ERPS just supports ethernet port and the value is 1.')
hwConfigPortId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwConfigPortId1.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortId1.setDescription('The port identifier1, when the hwConfigPortType is 1, the value of the object is the IfIndex of the port.')
hwConfigPortId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwConfigPortId2.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortId2.setDescription('The port identifier2, Currently it is not used and only for extension, should be set 0.')
hwConfigPortId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwConfigPortId3.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortId3.setDescription('The port identifier3, Currently it is not used and only for extension, should be set 0.')
hwConfigPortId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hwConfigPortId4.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortId4.setDescription('The port identifier4, Currently it is not used and only for extension, should be set 0.')
hwConfigPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortRowStatus.setDescription('Operation of CreateAndGo can be used to have a port join the ERPS ring. and operation of Destroy be used to have a port leave the ERPS ring.')
hwConfigPortConfigRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 4, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwConfigPortConfigRole.setStatus('current')
if mibBuilder.loadTexts: hwConfigPortConfigRole.setDescription('The configued port role: role value common 0x10 rplOwner 0x21')
hwErpsPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 5), )
if mibBuilder.loadTexts: hwErpsPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortStatusTable.setDescription('The table includes the status of ERPS ports.')
hwErpsPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 5, 1), ).setIndexNames((0, "HUAWEI-ERPS-MIB", "hwConfigRingId"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortType"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId1"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId2"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId3"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId4"))
if mibBuilder.loadTexts: hwErpsPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortStatusEntry.setDescription('The table includes the status of ERPS ports. The index of the table is ERPS ring identifier, port type, port identifier1, port identifier2, port identifier3, port identifier4. If it is an ethernet port including fast ethernet/gigabit ethernet/eth-trunk, the port type is 1, the port identifier1 is the IfIndex of the ethernet port. the other port identifier is for extension and not used currently, should be set 0.')
hwPortStatusActiveRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortStatusActiveRole.setStatus('current')
if mibBuilder.loadTexts: hwPortStatusActiveRole.setDescription('The active port role: role value common 0x10 rplOwner 0x21')
hwPortStatusSignalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("failed", 1), ("nonFailed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortStatusSignalStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortStatusSignalStatus.setDescription('The signal status of the port: state value failed 1 nonFailed 2')
hwPortStatusFwdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discarding", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPortStatusFwdStatus.setStatus('current')
if mibBuilder.loadTexts: hwPortStatusFwdStatus.setDescription('The forwarding status of the port: state value discarding 1 forwarding 2')
hwErpsPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6), )
if mibBuilder.loadTexts: hwErpsPortStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortStatisticsTable.setDescription('The table includes the statistics of ERPS ports.')
hwErpsPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1), ).setIndexNames((0, "HUAWEI-ERPS-MIB", "hwConfigRingId"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortType"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId1"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId2"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId3"), (0, "HUAWEI-ERPS-MIB", "hwConfigPortId4"))
if mibBuilder.loadTexts: hwErpsPortStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortStatisticsEntry.setDescription('The table includes the Statistics of ERPS ports. The index of the table is ERPS ring identifier, port type, port identifier1, port identifier2, port identifier3, port identifier4. If it is an ethernet port including fast ethernet/gigabit ethernet/eth-trunk, the port type is 1, the port identifier1 is the IfIndex of the ethernet port. the other port identifier is for extension and not used currently, should be set 0.')
hwRxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRxRapsSfPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwRxRapsSfPktCnt.setDescription('The number of received RAPS SF packets.')
hwTxRapsSfPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTxRapsSfPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwTxRapsSfPktCnt.setDescription('The number of transmitted RAPS SF packets.')
hwRxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRxRapsNrPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwRxRapsNrPktCnt.setDescription('The number of received RAPS NR packets.')
hwTxRapsNrPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTxRapsNrPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwTxRapsNrPktCnt.setDescription('The number of transmitted RAPS NR packets.')
hwRxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRxRapsNrRbPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwRxRapsNrRbPktCnt.setDescription('The number of received RAPS NRRB packets.')
hwTxRapsNrRbPktCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 1, 6, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTxRapsNrRbPktCnt.setStatus('current')
if mibBuilder.loadTexts: hwTxRapsNrRbPktCnt.setDescription('The number of transmitted RAPS NRRB packets.')
hwErpsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2))
hwErpsGlobalInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2, 1)).setObjects(("HUAWEI-ERPS-MIB", "hwErpsGlobalResetRapsPktCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwErpsGlobalInfoGroup = hwErpsGlobalInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwErpsGlobalInfoGroup.setDescription('The group of global information.')
hwErpsRingConfigInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2, 2)).setObjects(("HUAWEI-ERPS-MIB", "hwConfigRingRowStatus"), ("HUAWEI-ERPS-MIB", "hwConfigDescription"), ("HUAWEI-ERPS-MIB", "hwConfigControlVlanId"), ("HUAWEI-ERPS-MIB", "hwConfigProtectedInstanceList"), ("HUAWEI-ERPS-MIB", "hwConfigWtrTimerSettingValue"), ("HUAWEI-ERPS-MIB", "hwConfigGuardTimerSettingValue"), ("HUAWEI-ERPS-MIB", "hwConfigHoldoffTimerSettingValue"), ("HUAWEI-ERPS-MIB", "hwConfigResetRapsPktCnt"), ("HUAWEI-ERPS-MIB", "hwConfigRapsMel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwErpsRingConfigInfoGroup = hwErpsRingConfigInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwErpsRingConfigInfoGroup.setDescription('The group of ring configuration.')
hwErpsRingStatusInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2, 3)).setObjects(("HUAWEI-ERPS-MIB", "hwStatusWtrTimerRunningValue"), ("HUAWEI-ERPS-MIB", "hwStatusGuardTimerRunningValue"), ("HUAWEI-ERPS-MIB", "hwStatusHoldoffTimerRunningValue"), ("HUAWEI-ERPS-MIB", "hwStatusMachineState"), ("HUAWEI-ERPS-MIB", "hwStatusTopoLastChangeTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwErpsRingStatusInfoGroup = hwErpsRingStatusInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwErpsRingStatusInfoGroup.setDescription('The group of ring status.')
hwErpsPortConfigInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2, 4)).setObjects(("HUAWEI-ERPS-MIB", "hwConfigPortRowStatus"), ("HUAWEI-ERPS-MIB", "hwConfigPortConfigRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwErpsPortConfigInfoGroup = hwErpsPortConfigInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortConfigInfoGroup.setDescription('The group of port configuration.')
hwErpsPortStatusInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2, 5)).setObjects(("HUAWEI-ERPS-MIB", "hwPortStatusActiveRole"), ("HUAWEI-ERPS-MIB", "hwPortStatusSignalStatus"), ("HUAWEI-ERPS-MIB", "hwPortStatusFwdStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwErpsPortStatusInfoGroup = hwErpsPortStatusInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortStatusInfoGroup.setDescription('The group of port status.')
hwErpsPortStatisticsInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 256, 2, 6)).setObjects(("HUAWEI-ERPS-MIB", "hwRxRapsSfPktCnt"), ("HUAWEI-ERPS-MIB", "hwTxRapsSfPktCnt"), ("HUAWEI-ERPS-MIB", "hwRxRapsNrPktCnt"), ("HUAWEI-ERPS-MIB", "hwTxRapsNrPktCnt"), ("HUAWEI-ERPS-MIB", "hwRxRapsNrRbPktCnt"), ("HUAWEI-ERPS-MIB", "hwTxRapsNrRbPktCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwErpsPortStatisticsInfoGroup = hwErpsPortStatisticsInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwErpsPortStatisticsInfoGroup.setDescription('The group of port information.')
mibBuilder.exportSymbols("HUAWEI-ERPS-MIB", hwErpsGroups=hwErpsGroups, hwConfigRapsMel=hwConfigRapsMel, hwErpsPortStatusInfoGroup=hwErpsPortStatusInfoGroup, hwConfigDescription=hwConfigDescription, hwStatusTopoLastChangeTime=hwStatusTopoLastChangeTime, hwConfigPortId1=hwConfigPortId1, hwConfigPortId3=hwConfigPortId3, hwRxRapsNrPktCnt=hwRxRapsNrPktCnt, hwConfigPortType=hwConfigPortType, hwStatusHoldoffTimerRunningValue=hwStatusHoldoffTimerRunningValue, hwConfigWtrTimerSettingValue=hwConfigWtrTimerSettingValue, hwConfigProtectedInstanceList=hwConfigProtectedInstanceList, hwConfigGuardTimerSettingValue=hwConfigGuardTimerSettingValue, hwConfigPortId2=hwConfigPortId2, hwErpsPortStatisticsInfoGroup=hwErpsPortStatisticsInfoGroup, hwStatusWtrTimerRunningValue=hwStatusWtrTimerRunningValue, hwConfigPortRowStatus=hwConfigPortRowStatus, hwErpsPortConfigInfoGroup=hwErpsPortConfigInfoGroup, hwTxRapsNrPktCnt=hwTxRapsNrPktCnt, hwErpsPortStatisticsEntry=hwErpsPortStatisticsEntry, hwErpsRingStatusEntry=hwErpsRingStatusEntry, hwErpsPortStatusTable=hwErpsPortStatusTable, hwPortStatusActiveRole=hwPortStatusActiveRole, hwTxRapsSfPktCnt=hwTxRapsSfPktCnt, hwErpsRingConfigInfoGroup=hwErpsRingConfigInfoGroup, hwErpsPortStatusEntry=hwErpsPortStatusEntry, hwConfigResetRapsPktCnt=hwConfigResetRapsPktCnt, hwPortStatusFwdStatus=hwPortStatusFwdStatus, hwErpsGlobalResetRapsPktCnt=hwErpsGlobalResetRapsPktCnt, hwErpsGlobalInfoGroup=hwErpsGlobalInfoGroup, hwTxRapsNrRbPktCnt=hwTxRapsNrRbPktCnt, hwErpsRingConfigTable=hwErpsRingConfigTable, hwConfigControlVlanId=hwConfigControlVlanId, hwErpsPortConfigEntry=hwErpsPortConfigEntry, hwPortStatusSignalStatus=hwPortStatusSignalStatus, hwErpsPortStatisticsTable=hwErpsPortStatisticsTable, hwErpsRingStatusInfoGroup=hwErpsRingStatusInfoGroup, PYSNMP_MODULE_ID=hwErpsMIB, hwStatusMachineState=hwStatusMachineState, hwConfigRingId=hwConfigRingId, hwErpsRingStatusTable=hwErpsRingStatusTable, hwErpsObjects=hwErpsObjects, hwRxRapsSfPktCnt=hwRxRapsSfPktCnt, hwStatusGuardTimerRunningValue=hwStatusGuardTimerRunningValue, hwConfigPortId4=hwConfigPortId4, hwErpsPortConfigTable=hwErpsPortConfigTable, hwErpsMIB=hwErpsMIB, hwConfigRingRowStatus=hwConfigRingRowStatus, hwConfigPortConfigRole=hwConfigPortConfigRole, hwRxRapsNrRbPktCnt=hwRxRapsNrRbPktCnt, hwConfigHoldoffTimerSettingValue=hwConfigHoldoffTimerSettingValue, hwErpsRingConfigEntry=hwErpsRingConfigEntry)
