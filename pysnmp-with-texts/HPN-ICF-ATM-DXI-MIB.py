#
# PySNMP MIB module HPN-ICF-ATM-DXI-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-ATM-DXI-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, NotificationType, iso, Counter64, TimeTicks, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, MibIdentifier, ModuleIdentity, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "NotificationType", "iso", "Counter64", "TimeTicks", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Counter32")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hpnicfAtmDxi = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49))
hpnicfAtmDxi.setRevisions(('2005-04-14 15:18',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfAtmDxi.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfAtmDxi.setLastUpdated('200504141518Z')
if mibBuilder.loadTexts: hpnicfAtmDxi.setOrganization('')
if mibBuilder.loadTexts: hpnicfAtmDxi.setContactInfo('')
if mibBuilder.loadTexts: hpnicfAtmDxi.setDescription('This MIB contains objects to manage configuration of ATM-DXI. There are no constraints on this MIB.')
hpnicfAtmDxiScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 1))
hpnicfAtmDxiConfMode = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mode1a", 1), ("mode1b", 2), ("mode2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfAtmDxiConfMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiConfMode.setDescription('This node identifies the ATM-DXI mode being used at the ATM-DXI port.')
hpnicfAtmDxiIfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2))
hpnicfAtmDxiPvcTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1), )
if mibBuilder.loadTexts: hpnicfAtmDxiPvcTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcTable.setDescription('This table describes information of PVC in ATM-DXI interface.')
hpnicfAtmDxiPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcVpi"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcVci"))
if mibBuilder.loadTexts: hpnicfAtmDxiPvcEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcEntry.setDescription('The entry of hpnicfAtmDxiPvcTable.')
hpnicfAtmDxiPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hpnicfAtmDxiPvcVpi.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcVpi.setDescription("The value of VPI. It can't be 0 if hpnicfAtmDxiPvcVci is 0.")
hpnicfAtmDxiPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfAtmDxiPvcVci.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcVci.setDescription("The value of VCI. It can't be 0 if hpnicfAtmDxiPvcVpi is 0.")
hpnicfAtmDxiPvcDFA = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcDFA.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcDFA.setDescription('The index of PVC. It is equal with vci and VPI. And this node value is correlate with hpnicfAtmDxiPvcVpi and hpnicfAtmDxiPvcVci. ')
hpnicfAtmDxiPvcEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("snap", 1), ("nlpid", 2), ("mux", 3))).clone('snap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcEncType.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcEncType.setDescription('Encapsulation type of the frame.')
hpnicfAtmDxiPvcMapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcMapCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcMapCount.setDescription('The number of map. One map can only associate with one PVC, but one PVC can associate with 32 maps. This node is the map count which one PVC associated with.')
hpnicfAtmDxiPvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiPvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiPvcRowStatus.setDescription("Only support 'destroy' 'createAndGo' and 'active'.")
hpnicfAtmDxiMapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2), )
if mibBuilder.loadTexts: hpnicfAtmDxiMapTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapTable.setDescription('This table describes PVC map information.')
hpnicfAtmDxiMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPeerIpType"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPeerIp"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPvcVpi"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapPvcVci"), (0, "HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapType"))
if mibBuilder.loadTexts: hpnicfAtmDxiMapEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapEntry.setDescription('The entry of hpnicfAtmDxiMapTable.')
hpnicfAtmDxiMapPeerIpType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: hpnicfAtmDxiMapPeerIpType.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapPeerIpType.setDescription('The type of ip address: IPv4 or IPv6.')
hpnicfAtmDxiMapPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: hpnicfAtmDxiMapPeerIp.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapPeerIp.setDescription('The peer ip address. This ip address is the peer ip address which the frame will arrive.')
hpnicfAtmDxiMapPvcVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: hpnicfAtmDxiMapPvcVpi.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapPvcVpi.setDescription("The VPI of PVC. It can't be 0 if hpnicfAtmDxiMapPvcVci is 0.")
hpnicfAtmDxiMapPvcVci = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfAtmDxiMapPvcVci.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapPvcVci.setDescription("The VCI of PVC. It can't be 0 if hpnicfAtmDxiMapPvcVpi is 0.")
hpnicfAtmDxiMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("address", 1), ("inarp", 2), ("default", 3))))
if mibBuilder.loadTexts: hpnicfAtmDxiMapType.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapType.setDescription('Pvc map type.')
hpnicfAtmDxiMapInarpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 10), )).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiMapInarpTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapInarpTime.setDescription("The interval time of inarp request. This node describes the interval time inarp request frame sent. If the hpnicfAtmDxiMapType isn't inarp, this value is 0. Its unit is minute.")
hpnicfAtmDxiMapBroEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiMapBroEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapBroEnable.setDescription('Whether ATM-DXI map enable broadcast or not.')
hpnicfAtmDxiMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfAtmDxiMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiMapRowStatus.setDescription("Only support 'destroy', 'createAndGo' and 'active'.")
hpnicfAtmDxiConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3))
hpnicfAtmDxiCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 1))
hpnicfAtmDxiCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 1, 1)).setObjects(("HPN-ICF-ATM-DXI-MIB", "hpnicfPVCMAPGroup"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiGeneralGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAtmDxiCompliance = hpnicfAtmDxiCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiCompliance.setDescription('The compliance statement.')
hpnicfAtmDxiGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 2))
hpnicfPVCMAPGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 2, 1)).setObjects(("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcDFA"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcEncType"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcMapCount"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiPvcRowStatus"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapBroEnable"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapInarpTime"), ("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfPVCMAPGroup = hpnicfPVCMAPGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfPVCMAPGroup.setDescription('This group includes nodes which are associated with interface.')
hpnicfAtmDxiGeneralGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 49, 3, 2, 2)).setObjects(("HPN-ICF-ATM-DXI-MIB", "hpnicfAtmDxiConfMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfAtmDxiGeneralGroup = hpnicfAtmDxiGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfAtmDxiGeneralGroup.setDescription('This group includes the general nodes about ATM-DXI.')
mibBuilder.exportSymbols("HPN-ICF-ATM-DXI-MIB", hpnicfAtmDxiGroup=hpnicfAtmDxiGroup, hpnicfAtmDxiPvcRowStatus=hpnicfAtmDxiPvcRowStatus, hpnicfPVCMAPGroup=hpnicfPVCMAPGroup, hpnicfAtmDxiMapEntry=hpnicfAtmDxiMapEntry, hpnicfAtmDxiCompliances=hpnicfAtmDxiCompliances, hpnicfAtmDxiPvcDFA=hpnicfAtmDxiPvcDFA, hpnicfAtmDxiPvcVpi=hpnicfAtmDxiPvcVpi, hpnicfAtmDxiPvcEncType=hpnicfAtmDxiPvcEncType, hpnicfAtmDxiMapType=hpnicfAtmDxiMapType, hpnicfAtmDxi=hpnicfAtmDxi, hpnicfAtmDxiConformance=hpnicfAtmDxiConformance, hpnicfAtmDxiGeneralGroup=hpnicfAtmDxiGeneralGroup, hpnicfAtmDxiCompliance=hpnicfAtmDxiCompliance, PYSNMP_MODULE_ID=hpnicfAtmDxi, hpnicfAtmDxiMapPvcVci=hpnicfAtmDxiMapPvcVci, hpnicfAtmDxiMapInarpTime=hpnicfAtmDxiMapInarpTime, hpnicfAtmDxiIfObjects=hpnicfAtmDxiIfObjects, hpnicfAtmDxiMapPeerIpType=hpnicfAtmDxiMapPeerIpType, hpnicfAtmDxiPvcVci=hpnicfAtmDxiPvcVci, hpnicfAtmDxiMapTable=hpnicfAtmDxiMapTable, hpnicfAtmDxiMapPeerIp=hpnicfAtmDxiMapPeerIp, hpnicfAtmDxiPvcTable=hpnicfAtmDxiPvcTable, hpnicfAtmDxiPvcEntry=hpnicfAtmDxiPvcEntry, hpnicfAtmDxiMapRowStatus=hpnicfAtmDxiMapRowStatus, hpnicfAtmDxiMapPvcVpi=hpnicfAtmDxiMapPvcVpi, hpnicfAtmDxiPvcMapCount=hpnicfAtmDxiPvcMapCount, hpnicfAtmDxiMapBroEnable=hpnicfAtmDxiMapBroEnable, hpnicfAtmDxiScalarGroup=hpnicfAtmDxiScalarGroup, hpnicfAtmDxiConfMode=hpnicfAtmDxiConfMode)
