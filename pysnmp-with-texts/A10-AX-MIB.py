#
# PySNMP MIB module A10-AX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A10-AX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:03:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
a10Mgmt, = mibBuilder.importSymbols("A10-COMMON-MIB", "a10Mgmt")
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, ModuleIdentity, Integer32, Unsigned32, TimeTicks, IpAddress, MibIdentifier, Gauge32, NotificationType, ObjectIdentity, iso, Counter64, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "Integer32", "Unsigned32", "TimeTicks", "IpAddress", "MibIdentifier", "Gauge32", "NotificationType", "ObjectIdentity", "iso", "Counter64", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
axMgmt = ModuleIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4))
if mibBuilder.loadTexts: axMgmt.setLastUpdated('200705071327Z')
if mibBuilder.loadTexts: axMgmt.setOrganization('A10 Networks, Inc.')
if mibBuilder.loadTexts: axMgmt.setContactInfo('Address: A10 Networks, Inc. 2309 Bering Drive San Jose, CA 95131 Phone: +1-888-822-7210 (USA/Canada) +1-408-325-8676 (International) E-mail: support@A10Networks.com')
if mibBuilder.loadTexts: axMgmt.setDescription('Management root OID for the application acceleration family appliance')
axSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1))
axLogging = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2))
axApp = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3))
axSysVersion = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1))
axSysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2))
axSysCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3))
axSysDisk = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4))
axSysHwInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5))
axSysInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6))
axNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7))
axSysPrimaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnDisk.setStatus('current')
if mibBuilder.loadTexts: axSysPrimaryVersionOnDisk.setDescription('The primary system image version on hard disk.')
axSysSecondaryVersionOnDisk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnDisk.setStatus('current')
if mibBuilder.loadTexts: axSysSecondaryVersionOnDisk.setDescription('The secondary system image version on hard disk.')
axSysPrimaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysPrimaryVersionOnCF.setStatus('current')
if mibBuilder.loadTexts: axSysPrimaryVersionOnCF.setDescription('The primary system image version on Compact Flash.')
axSysSecondaryVersionOnCF = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSecondaryVersionOnCF.setStatus('current')
if mibBuilder.loadTexts: axSysSecondaryVersionOnCF.setDescription('The secondary system image version on Compact Flash.')
axSysMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: axSysMemoryTotal.setDescription('The total memory(KB).')
axSysMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: axSysMemoryUsage.setDescription('The usage memory(KB).')
axSysCpuNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuNumber.setStatus('current')
if mibBuilder.loadTexts: axSysCpuNumber.setDescription('The cpu number in a10System')
axSysCpuTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2), )
if mibBuilder.loadTexts: axSysCpuTable.setStatus('current')
if mibBuilder.loadTexts: axSysCpuTable.setDescription('The cpu information table.')
axSysCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndex"))
if mibBuilder.loadTexts: axSysCpuEntry.setStatus('current')
if mibBuilder.loadTexts: axSysCpuEntry.setDescription('The cpu entry')
axSysCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axSysCpuIndex.setDescription('The index of the CPU.')
axSysCpuUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsage.setDescription('The CPU Usage.')
axSysCpuUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValue.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageValue.setDescription('The CPU usage value.')
axSysAverageCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysAverageCpuUsage.setDescription('The average CPU usage in last 5 seconds.')
axSysAverageControlCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageControlCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysAverageControlCpuUsage.setDescription('The average control CPU usage in last 5 seconds.')
axSysAverageDataCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAverageDataCpuUsage.setStatus('current')
if mibBuilder.loadTexts: axSysAverageDataCpuUsage.setDescription('The average data CPU usage in last 5 seconds.')
axSysCpuUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6), )
if mibBuilder.loadTexts: axSysCpuUsageTable.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageTable.setDescription('The cpu usage information table.')
axSysCpuUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSysCpuIndexInUsage"), (0, "A10-AX-MIB", "axSysCpuUsagePeriodIndex"))
if mibBuilder.loadTexts: axSysCpuUsageEntry.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageEntry.setDescription('The CPU Usage entry')
axSysCpuIndexInUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuIndexInUsage.setStatus('current')
if mibBuilder.loadTexts: axSysCpuIndexInUsage.setDescription('The index of the CPU. The value, 0, is for the control CPU.')
axSysCpuUsagePeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsagePeriodIndex.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsagePeriodIndex.setDescription('The CPU usage sampling period: 1: 1-second sampling, 2: 5-second sampling, 3: 10-second sampling, 4: 30-second sampling, 5: 60-second sampling.')
axSysCpuUsageValueAtPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 3, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysCpuUsageValueAtPeriod.setStatus('current')
if mibBuilder.loadTexts: axSysCpuUsageValueAtPeriod.setDescription('The CPU usage value at given period, 1-sec, 5-sec, 10-sec, 30-sec, and 60-sec.')
axSysDiskTotalSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskTotalSpace.setStatus('current')
if mibBuilder.loadTexts: axSysDiskTotalSpace.setDescription('The total space of the disk in MB.')
axSysDiskFreeSpace = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysDiskFreeSpace.setStatus('current')
if mibBuilder.loadTexts: axSysDiskFreeSpace.setDescription('The free space of the disk in MB.')
axSysHwPhySystemTemp = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwPhySystemTemp.setStatus('current')
if mibBuilder.loadTexts: axSysHwPhySystemTemp.setDescription('The physical system temperature in Celsius.')
axSysHwFan1Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan1Speed.setStatus('current')
if mibBuilder.loadTexts: axSysHwFan1Speed.setDescription("The fan1's speed")
axSysHwFan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan2Speed.setStatus('current')
if mibBuilder.loadTexts: axSysHwFan2Speed.setDescription("The fan2's speed")
axSysHwFan3Speed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysHwFan3Speed.setStatus('current')
if mibBuilder.loadTexts: axSysHwFan3Speed.setDescription("The fan3's speed")
axSysLowerPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysLowerPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: axSysLowerPowerSupplyStatus.setDescription('The lower power supply status.')
axSysUpperPowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, -1))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysUpperPowerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: axSysUpperPowerSupplyStatus.setDescription('The upper power supply status.')
axSysFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9), )
if mibBuilder.loadTexts: axSysFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: axSysFanStatusTable.setDescription('The table contains system fan status for AX 2500/2600/3000/5100/5200 only.')
axSysFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axFanIndex"))
if mibBuilder.loadTexts: axSysFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: axSysFanStatusEntry.setDescription('Columns in the axSysFanStatusTable')
axFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanIndex.setStatus('current')
if mibBuilder.loadTexts: axFanIndex.setDescription('The system fan index.')
axFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanName.setStatus('current')
if mibBuilder.loadTexts: axFanName.setDescription('The system fan name.')
axFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 5, 6, 7, -2, -1))).clone(namedValues=NamedValues(("failed", 0), ("okFixedHigh", 4), ("okLowMed", 5), ("okMedMed", 6), ("okMedHigh", 7), ("notReady", -2), ("unknown", -1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFanStatus.setStatus('current')
if mibBuilder.loadTexts: axFanStatus.setDescription('Fan status: 0: Failed, 4: OK-fixed/high, 5: OK-low/med, 6: OK-med/med, 7: OK-med/high, -2: not ready, -1: unknown.')
axSysStartupMode = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("primaryDisk", 1), ("secondaryDisk", 2), ("primaryCF", 3), ("secondaryCF", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysStartupMode.setStatus('current')
if mibBuilder.loadTexts: axSysStartupMode.setDescription('The startup mode.')
axSysSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysSerialNumber.setStatus('current')
if mibBuilder.loadTexts: axSysSerialNumber.setDescription('The system serial number.')
axSysFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: axSysFirmwareVersion.setDescription('The system firmware version.')
axSysAFleXEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 6, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSysAFleXEngineVersion.setStatus('current')
if mibBuilder.loadTexts: axSysAFleXEngineVersion.setDescription('The system aFlex engine version.')
axInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1))
axVlans = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2))
axInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1))
axInterfaceStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2))
axInterfaceCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceCount.setStatus('current')
if mibBuilder.loadTexts: axInterfaceCount.setDescription('The number of axInterface entries in the table.')
axInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2), )
if mibBuilder.loadTexts: axInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: axInterfaceTable.setDescription('A table containing information of the physical interfaces.')
axInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceIndex"))
if mibBuilder.loadTexts: axInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: axInterfaceEntry.setDescription('Columns in the axInterface Table')
axInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceIndex.setDescription('The index value of the interface.')
axInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceName.setStatus('current')
if mibBuilder.loadTexts: axInterfaceName.setDescription('The name of the interface.')
axInterfaceMediaMaxSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxSpeed.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaMaxSpeed.setDescription('The best possible media speed in MBPS for the interface.')
axInterfaceMediaMaxDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaMaxDuplex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaMaxDuplex.setDescription('The best possible media duplex mode for the interface. half - Force half duplex; full - Force full duplex; none - All media is deselected.')
axInterfaceMediaActiveSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveSpeed.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaActiveSpeed.setDescription('The current active media speed for the interface.')
axInterfaceMediaActiveDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("half", 1), ("full", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMediaActiveDuplex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMediaActiveDuplex.setDescription('The active media duplex mode for the specified interface. half - Half duplex; full - Full duplex; auto - Auto duplex; none - All media is disabled.')
axInterfaceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 7), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMacAddr.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMacAddr.setDescription('The MAC address of the specified interface.')
axInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceMtu.setStatus('current')
if mibBuilder.loadTexts: axInterfaceMtu.setDescription('The maximum transmission unit size of datagram which can be sent/received on the specified interface.')
axInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceAdminStatus.setDescription('The state of this interface, whether it is enabled.')
axInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("up", 0), ("down", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatus.setDescription('The current state of the interface. up - has link and is initialized; down - has no link and is initialized; disabled - has been forced down ')
axInterfaceAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceAlias.setStatus('current')
if mibBuilder.loadTexts: axInterfaceAlias.setDescription('The alias name of the interface if defined.')
axInterfaceFlowCtrlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceFlowCtrlAdminStatus.setDescription('The control flow of this interface is enabled or disabled.')
axInterfaceFlowCtrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceFlowCtrlOperStatus.setStatus('current')
if mibBuilder.loadTexts: axInterfaceFlowCtrlOperStatus.setDescription('The control flow state of this interface.')
axInterfaceStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1), )
if mibBuilder.loadTexts: axInterfaceStatTable.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatTable.setDescription('A table containing statistic information of the physical interfacess.')
axInterfaceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axInterfaceStatIndex"))
if mibBuilder.loadTexts: axInterfaceStatEntry.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatEntry.setDescription('Columns in the axInterfaceStat Table')
axInterfaceStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatIndex.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatIndex.setDescription('The index value of the interface.')
axInterfaceStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatPktsIn.setDescription('The number of packets received on this interface.')
axInterfaceStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatBytesIn.setDescription('The number of bytes received on this interface.')
axInterfaceStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatPktsOut.setDescription('The number of packets transmitted out of this interface.')
axInterfaceStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatBytesOut.setDescription('The number of bytes transmitted out of this interface.')
axInterfaceStatMcastIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatMcastIn.setDescription('The number of multicast packets received on this interface.')
axInterfaceStatMcastOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatMcastOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatMcastOut.setDescription('The number of multicast packets transmitted out of this interface.')
axInterfaceStatErrorsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatErrorsIn.setDescription('The number of received packets that are either undersized, oversized, or have FCS errors.')
axInterfaceStatErrorsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatErrorsOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatErrorsOut.setDescription('The number of excessive collisions, incremented for each frame that experienced 16 collisions during transmission and was aborted.')
axInterfaceStatDropsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsIn.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatDropsIn.setDescription('The number of packets dropped on ingress for various reasons.')
axInterfaceStatDropsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatDropsOut.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatDropsOut.setDescription('The number of packets aged out or with excessive transmission delays due to multiple deferrals.')
axInterfaceStatCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 1, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axInterfaceStatCollisions.setStatus('current')
if mibBuilder.loadTexts: axInterfaceStatCollisions.setDescription('The number of collisions on this interface, incremented by the number of collisions experienced during transmissions of a frame')
axVlanCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1))
axVlanCfgTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1), )
if mibBuilder.loadTexts: axVlanCfgTable.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgTable.setDescription('The table contains VLAN configuration.')
axVlanCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanId"))
if mibBuilder.loadTexts: axVlanCfgEntry.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgEntry.setDescription('Columns in the axVlanCfgTable')
axVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanId.setStatus('current')
if mibBuilder.loadTexts: axVlanId.setDescription('The VLAN id.')
axVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanName.setStatus('current')
if mibBuilder.loadTexts: axVlanName.setDescription('The VLAN name.')
axVlanRouterInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanRouterInterface.setStatus('current')
if mibBuilder.loadTexts: axVlanRouterInterface.setDescription('VLAN router interface (ve) if configured. If a SNMP-Get value is zero, that means this object is not configured.')
axVlanCfgMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2), )
if mibBuilder.loadTexts: axVlanCfgMemberTable.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgMemberTable.setDescription('The table contains VLAN member configuration.')
axVlanCfgMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVlanMemberVlanId"), (0, "A10-AX-MIB", "axVlanMemberIntfId"))
if mibBuilder.loadTexts: axVlanCfgMemberEntry.setStatus('current')
if mibBuilder.loadTexts: axVlanCfgMemberEntry.setDescription('Columns in the axVlanCfgMemberTable')
axVlanMemberVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberVlanId.setStatus('current')
if mibBuilder.loadTexts: axVlanMemberVlanId.setDescription('The VLAN id.')
axVlanMemberIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberIntfId.setStatus('current')
if mibBuilder.loadTexts: axVlanMemberIntfId.setDescription('The interface id configures as the VLAN member.')
axVlanMemberTagged = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 1, 7, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVlanMemberTagged.setStatus('current')
if mibBuilder.loadTexts: axVlanMemberTagged.setDescription('The tagged/untagged state of the specific VLAN member.')
axLogBufferSize = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 1), Integer32().clone(100000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferSize.setStatus('current')
if mibBuilder.loadTexts: axLogBufferSize.setDescription('The logging database size.')
axLogBufferPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogBufferPri.setStatus('current')
if mibBuilder.loadTexts: axLogBufferPri.setDescription('The logging buffer priority, logging messages which levels above that value must be output to internal database.')
axLogConsolePri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogConsolePri.setStatus('current')
if mibBuilder.loadTexts: axLogConsolePri.setDescription('The logging console priority, logging messages which levels above that value must be output to console.')
axLogEmailPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailPri.setStatus('current')
if mibBuilder.loadTexts: axLogEmailPri.setDescription('The logging email priority, logging messages which levels above that value must be output to email address.')
axLogEmailAddr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogEmailAddr.setStatus('current')
if mibBuilder.loadTexts: axLogEmailAddr.setDescription('The email address that receive the logging messages.')
axLogSyslogPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPri.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogPri.setDescription('The logging syslog priority, logging messages which levels above that value must be output to syslog host.')
axLogSyslogHostTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9), )
if mibBuilder.loadTexts: axLogSyslogHostTable.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHostTable.setDescription('The syslog host table.')
axLogSyslogHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1), ).setIndexNames((0, "A10-AX-MIB", "axLogSyslogHostIndex"))
if mibBuilder.loadTexts: axLogSyslogHostEntry.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHostEntry.setDescription('The syslog host entry')
axLogSyslogHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHostIndex.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHostIndex.setDescription('The index of the syslog host list.')
axLogSyslogHost = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogHost.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogHost.setDescription('The syslog host IP address or DNS name.')
axLogSyslogPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767)).clone(514)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogSyslogPort.setStatus('current')
if mibBuilder.loadTexts: axLogSyslogPort.setDescription('The logging syslog host port.')
axLogMonitorPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, -1))).clone(namedValues=NamedValues(("emergency", 0), ("alert", 1), ("critical", 2), ("error", 3), ("warning", 4), ("notice", 5), ("info", 6), ("debug", 7), ("notDefined", -1))).clone(-1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axLogMonitorPri.setStatus('current')
if mibBuilder.loadTexts: axLogMonitorPri.setDescription('The logging monitor priority, logging messages which levels above that value must be output to snmp trap host.')
axSyslogTrapPrefix = ObjectIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 100))
if mibBuilder.loadTexts: axSyslogTrapPrefix.setStatus('current')
if mibBuilder.loadTexts: axSyslogTrapPrefix.setDescription('prefix of A10 logging traps')
axSyslogTrap = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 100, 1)).setObjects(("A10-AX-MIB", "axSyslogModuleName"), ("A10-AX-MIB", "axSyslogPriority"), ("A10-AX-MIB", "axSyslogMsg"))
if mibBuilder.loadTexts: axSyslogTrap.setStatus('current')
if mibBuilder.loadTexts: axSyslogTrap.setDescription('the syslog messages sent through snmp trap')
axSyslogTrapObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101))
if mibBuilder.loadTexts: axSyslogTrapObjects.setStatus('current')
if mibBuilder.loadTexts: axSyslogTrapObjects.setDescription('Objects of AX syslog trap')
axSyslogModuleName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogModuleName.setStatus('current')
if mibBuilder.loadTexts: axSyslogModuleName.setDescription('The module name sent the syslog message.')
axSyslogPriority = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogPriority.setStatus('current')
if mibBuilder.loadTexts: axSyslogPriority.setDescription('The syslog message priority.')
axSyslogMsg = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 2, 101, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1023))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: axSyslogMsg.setStatus('current')
if mibBuilder.loadTexts: axSyslogMsg.setDescription('The syslog message.')
axAppGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1))
axServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2))
axServiceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3))
axVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4))
axConnReuseStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5))
axFastHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6))
axHttpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7))
axTcpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8))
axSslStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9))
axFtpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10))
axNetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11))
axNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12))
axSmtpProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13))
axSslProxyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14))
axPersistentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15))
axSwitchStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16))
axHA = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17))
axIpNatStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18))
axSessionStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19))
axAppGlobalSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1))
axAppGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2))
axGlobalAppBuffer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3))
axServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1))
axServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2))
axServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3))
axServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4))
axServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1))
axServiceGroupStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2))
axServiceGroupMember = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3))
axServiceGroupMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4))
axVirtualServer = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1))
axVirtualServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2))
axVirtualServerPort = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3))
axVirtualServerPortStat = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4))
axHAGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1))
axHAGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2))
axHAFloatingIP = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3))
axAppGlobalSystemResourceUsageTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1), )
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageTable.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageTable.setDescription("A table has information of the system resource usages, it should contains the results as the CLI command, 'show system resouce-usage' Resource Current Default Minimum Maximum -------------------------------------------------------------------------- l4-session-count 1048576 1048576 131072 8388608 nat-pool-addr-count 500 500 500 4000 real-server-count 1024 1024 512 2048 real-port-count 2048 2048 512 4096 service-group-count 512 512 512 1024 virtual-port-count 512 512 256 1024 virtual-server-count 512 512 512 1024 http-template-count 256 256 32 1024 proxy-template-count 256 256 32 1024 conn-reuse-template-count 256 256 32 1024 fast-tcp-template-count 256 256 32 1024 fast-udp-template-count 256 256 32 1024 client-ssl-template-count 256 256 32 1024 server-ssl-template-count 256 256 32 1024 stream-template-count 256 256 32 1024 persist-cookie-template-count 256 256 32 1024 persist-srcip-template-count 256 256 32 1024 nalloc-mem-val 0 0 0 5120 ")
axAppGlobalSystemResourceUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axAppGlobalSystemResourceIndex"))
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageEntry.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceUsageEntry.setDescription('Columns in the axAppGlobalSystemResourceUsage Table')
axAppGlobalSystemResourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceIndex.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceIndex.setDescription('The system resource usage table index.')
axAppGlobalSystemResourceName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalSystemResourceName.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalSystemResourceName.setDescription('The system resource name.')
axAppGlobalAllowedCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedCurrentValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedCurrentValue.setDescription('The current value for the allowed system resource.')
axAppGlobalAllowedDefaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedDefaultValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedDefaultValue.setDescription('The default value for the allowed system resource.')
axAppGlobalAllowedMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMinValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedMinValue.setDescription('The minimum value for the allowed system resource.')
axAppGlobalAllowedMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalAllowedMaxValue.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalAllowedMaxValue.setDescription('The maximum value for the allowed system resource.')
axAppGlobalTotalCurrentConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalCurrentConnections.setDescription('Total current connections')
axAppGlobalTotalNewConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewConnections.setDescription('Total new connections')
axAppGlobalTotalNewL4Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL4Connections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewL4Connections.setDescription('Total new L4 connections')
axAppGlobalTotalNewL7Connections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewL7Connections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewL7Connections.setDescription('Total new L7 connections')
axAppGlobalTotalNewIPNatConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalNewIPNatConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalNewIPNatConnections.setDescription('Total new IP-NAT connections')
axAppGlobalTotalSSLConnections = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalSSLConnections.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalSSLConnections.setDescription('Total new SSL connections')
axAppGlobalTotalL7Requests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalTotalL7Requests.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalTotalL7Requests.setDescription('Total L7 requests')
axGlobalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalAppPacketDrop.setStatus('current')
if mibBuilder.loadTexts: axGlobalAppPacketDrop.setDescription('Total number of buffer drops in the last 10 seconds.')
axGlobalTotalAppPacketDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalAppPacketDrop.setStatus('current')
if mibBuilder.loadTexts: axGlobalTotalAppPacketDrop.setDescription('Total number of accumulative buffer drops.')
axGlobalTotalL4Session = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axGlobalTotalL4Session.setStatus('current')
if mibBuilder.loadTexts: axGlobalTotalL4Session.setDescription('Total number of L4 sessions.')
axAppGlobalBufferConfigLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferConfigLimit.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalBufferConfigLimit.setDescription('Application buffer configured limit.')
axAppGlobalBufferCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axAppGlobalBufferCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: axAppGlobalBufferCurrentUsage.setDescription('Application buffer current usage.')
axServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerCount.setStatus('current')
if mibBuilder.loadTexts: axServerCount.setDescription('The total count of axServer entries in the table.')
axServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2), )
if mibBuilder.loadTexts: axServerTable.setStatus('current')
if mibBuilder.loadTexts: axServerTable.setDescription('A table has information of the servers.')
axServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerName"))
if mibBuilder.loadTexts: axServerEntry.setStatus('current')
if mibBuilder.loadTexts: axServerEntry.setDescription('Columns in the axServer Table')
axServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerName.setStatus('current')
if mibBuilder.loadTexts: axServerName.setDescription('The name of the server.')
axServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddress.setStatus('current')
if mibBuilder.loadTexts: axServerAddress.setDescription('The IP address of the server.')
axServerEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerEnabledState.setStatus('current')
if mibBuilder.loadTexts: axServerEnabledState.setDescription('The monitor state for this node address.')
axServerHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerHealthMonitor.setStatus('current')
if mibBuilder.loadTexts: axServerHealthMonitor.setDescription('The health monitor name assigned to the server')
axServerMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerMonitorState.setStatus('current')
if mibBuilder.loadTexts: axServerMonitorState.setDescription('The server monitor status is in 0: Disabled (administrative disabled) 1: Up (administrative enabled) 2: Down (administrative enabled)')
axServerStatCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatCount.setStatus('current')
if mibBuilder.loadTexts: axServerStatCount.setDescription('The total count of axServerStat entries in the table.')
axServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2), )
if mibBuilder.loadTexts: axServerStatTable.setStatus('current')
if mibBuilder.loadTexts: axServerStatTable.setDescription('A table containing statistic information of node addresses.')
axServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddress"))
if mibBuilder.loadTexts: axServerStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServerStatEntry.setDescription('Columns in the axServerStat Table')
axServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddress.setStatus('current')
if mibBuilder.loadTexts: axServerStatAddress.setDescription('The ip address of this server.')
axServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatName.setStatus('current')
if mibBuilder.loadTexts: axServerStatName.setDescription('The server name.')
axServerStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerPktsIn.setDescription('The number of packets received from client to server.')
axServerStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerBytesIn.setDescription('The number of bytes received from client to server.')
axServerStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerPktsOut.setDescription('The number of packets sent for server to client.')
axServerStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerBytesOut.setDescription('The number of bytes sent from server to client.')
axServerStatServerTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalConns.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalConns.setDescription('The total connections from server side.')
axServerStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerCurConns.setDescription('The current connections from server side.')
axServerStatServerPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServerStatServerPersistConns.setDescription('The persistent connections from server side.')
axServerStatServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerStatus.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerStatus.setDescription('The server status is in 0: Disabled (administrative disabled) 1: Up (administrative enabled) 2: Down (administrative enabled)')
axServerStatServerTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServerStatServerTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServerStatServerTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatServerTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerStatServerTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1), )
if mibBuilder.loadTexts: axServerPortTable.setStatus('current')
if mibBuilder.loadTexts: axServerPortTable.setDescription('A table has information of real servers.')
axServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerNameInPort"), (0, "A10-AX-MIB", "axServerPortType"), (0, "A10-AX-MIB", "axServerPortNum"))
if mibBuilder.loadTexts: axServerPortEntry.setStatus('current')
if mibBuilder.loadTexts: axServerPortEntry.setDescription('Columns in the axServer Port Table')
axServerNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInPort.setStatus('current')
if mibBuilder.loadTexts: axServerNameInPort.setDescription('The server name.')
axServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortType.setStatus('current')
if mibBuilder.loadTexts: axServerPortType.setDescription('The port type of the server port.')
axServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNum.setStatus('current')
if mibBuilder.loadTexts: axServerPortNum.setDescription('The port number of the server.')
axServerAddressInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerAddressInPort.setStatus('current')
if mibBuilder.loadTexts: axServerAddressInPort.setDescription('The IP address of the server.')
axServerPortEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortEnabledState.setStatus('current')
if mibBuilder.loadTexts: axServerPortEnabledState.setDescription('The monitor state for this node address.')
axServerPortHealthMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortHealthMonitor.setStatus('current')
if mibBuilder.loadTexts: axServerPortHealthMonitor.setDescription('The health monitor name assigned to the server')
axServerPortConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortConnLimit.setStatus('current')
if mibBuilder.loadTexts: axServerPortConnLimit.setDescription('The connection limit of the server port.')
axServerPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortWeight.setStatus('current')
if mibBuilder.loadTexts: axServerPortWeight.setDescription('The weight of the server port.')
axServerPortMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortMonitorState.setStatus('current')
if mibBuilder.loadTexts: axServerPortMonitorState.setDescription('The server port status is in 0: Disabled (administrative disabled) 1: Up (administrative enabled) 2: Down (administrative enabled)')
axServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1), )
if mibBuilder.loadTexts: axServerPortStatTable.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTable.setDescription('A table containing statistic information of node addresses.')
axServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServerStatAddrInPort"), (0, "A10-AX-MIB", "axServerStatPortType"), (0, "A10-AX-MIB", "axServerStatPortNum"))
if mibBuilder.loadTexts: axServerPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatEntry.setDescription('Columns in the axServerStat Table')
axServerStatAddrInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatAddrInPort.setStatus('current')
if mibBuilder.loadTexts: axServerStatAddrInPort.setDescription('The ip address of this server.')
axServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortType.setStatus('current')
if mibBuilder.loadTexts: axServerStatPortType.setDescription('The server port type.')
axServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatPortNum.setStatus('current')
if mibBuilder.loadTexts: axServerStatPortNum.setDescription('The server port number.')
axServerStatNameInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerStatNameInPort.setStatus('current')
if mibBuilder.loadTexts: axServerStatNameInPort.setDescription('The ip address of this server.')
axServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatPktsIn.setDescription('The number of packets received from client to server.')
axServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatBytesIn.setDescription('The number of bytes received from client to server.')
axServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatPktsOut.setDescription('The number of packets sent from server to client.')
axServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatBytesOut.setDescription('The number of bytes sent from server to client.')
axServerPortStatTotalConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalConns.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalConns.setDescription('The maximum connections from server side.')
axServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatCurConns.setDescription('The current connections from server side.')
axServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServerPortStatPersistConns.setDescription('The persistent connections from server side.')
axServerPortStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatStatus.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatStatus.setDescription('The server port status is in 0: Disabled (administrative disabled) 1: Up (administrative enabled) 2: Down (administrative enabled)')
axServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 2, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServiceGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupCount.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupCount.setDescription('The number of axServiceGroup entries in the table.')
axServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2), )
if mibBuilder.loadTexts: axServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupTable.setDescription('A table containing information of service groups.')
axServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupName"))
if mibBuilder.loadTexts: axServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupEntry.setDescription('Columns in the axServiceGroup Table')
axServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupName.setDescription('The service group name.')
axServiceGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupType.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupType.setDescription('The type of the service group.')
axServiceGroupLbAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("roundRobin", 0), ("weightRoundRobin", 1), ("leastConnection", 2), ("weightLeastConnection", 3), ("serviceLeastConnection", 4), ("serviceWeightLeastConnection", 5), ("fastResponseTime", 6), ("leastRequest", 7), ("roundRobinStrict", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupLbAlgorithm.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupLbAlgorithm.setDescription('The load balance method for the service group')
axServiceGroupDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupDisplayStatus.setDescription('The display status of the service group: AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axServiceGroupStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1), )
if mibBuilder.loadTexts: axServiceGroupStatTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTable.setDescription('A table containing statistic information of service groups.')
axServiceGroupStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupStatName"))
if mibBuilder.loadTexts: axServiceGroupStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatEntry.setDescription('Columns in the axServiceGroupStat Table')
axServiceGroupStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatName.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatName.setDescription('The service group name.')
axServiceGroupStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatPktsIn.setDescription('The number of packets received from client to server.')
axServiceGroupStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatBytesIn.setDescription('The number of bytes received from client to server.')
axServiceGroupStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatPktsOut.setDescription('The number of packets sent from server to client.')
axServiceGroupStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatBytesOut.setDescription('The number of bytes sent from server to client.')
axServiceGroupStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotConns.setDescription('The total connections from server side.')
axServiceGroupStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatCurConns.setDescription('The current connections from server side.')
axServiceGroupStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServiceGroupStatPersistConns.setDescription('The persistent connections from server side.')
axServiceGroupStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatDisplayStatus.setDescription('The display status of the service group: AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axServiceGroupStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServiceGroupStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServiceGroupStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServiceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberTable.setDescription('A table containing information of service group members.')
axServiceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupNameInMember"), (0, "A10-AX-MIB", "axServiceGroupMemberAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMember"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMember"))
if mibBuilder.loadTexts: axServiceGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberEntry.setDescription('Columns in the axServiceGroupMember Table')
axServiceGroupNameInMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupNameInMember.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupNameInMember.setDescription('The name of axServiceGroup.')
axServiceGroupMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberAddrType.setDescription('The type of service group')
axServerNameInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerNameInServiceGroupMember.setDescription('The server name in the service group member.')
axServerPortNumInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMember.setDescription('The port number of this member.')
axServerPortPriorityInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortPriorityInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerPortPriorityInServiceGroupMember.setDescription('The priority value of a service group member.')
axServerPortStatusInServiceGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMember.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMember.setDescription('The server port status of the service group member: Disabled(0), Up(1), Down(2).')
axServiceGroupMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1), )
if mibBuilder.loadTexts: axServiceGroupMemberStatTable.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTable.setDescription('A table containing statistic information of service group members.')
axServiceGroupMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axServiceGroupMemberStatName"), (0, "A10-AX-MIB", "axServiceGroupMemberStatAddrType"), (0, "A10-AX-MIB", "axServerNameInServiceGroupMemberStat"), (0, "A10-AX-MIB", "axServerPortNumInServiceGroupMemberStat"))
if mibBuilder.loadTexts: axServiceGroupMemberStatEntry.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatEntry.setDescription('Columns in the axServiceGroupMemberStat Table')
axServiceGroupMemberStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatName.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatName.setDescription('The service group name.')
axServiceGroupMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatAddrType.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatAddrType.setDescription('The type of service group')
axServerNameInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerNameInServiceGroupMemberStat.setStatus('current')
if mibBuilder.loadTexts: axServerNameInServiceGroupMemberStat.setDescription('The ip address of this member in the service group.')
axServerPortNumInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMemberStat.setStatus('current')
if mibBuilder.loadTexts: axServerPortNumInServiceGroupMemberStat.setDescription('The port number of this member.')
axServiceGroupMemberStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsIn.setDescription('The number of packets received from client to server.')
axServiceGroupMemberStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesIn.setDescription('The number of bytes received from client to server.')
axServiceGroupMemberStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatPktsOut.setDescription('The number of packets sent from server to client.')
axServiceGroupMemberStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatBytesOut.setDescription('The number of bytes sent from server to client.')
axServiceGroupMemberStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axServiceGroupMemberStatPersistConns.setDescription('The persistent connections from server side.')
axServiceGroupMemberStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotConns.setDescription('The total connections from server side.')
axServiceGroupMemberStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatCurConns.setDescription('The current connections from server side.')
axServerPortStatusInServiceGroupMemberStat = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMemberStat.setStatus('current')
if mibBuilder.loadTexts: axServerPortStatusInServiceGroupMemberStat.setDescription('The server port status of the service group member: Disabled(0), Up(1), Down(2)')
axServiceGroupMemberStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axServiceGroupMemberStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axServiceGroupMemberStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axServiceGroupMemberStatResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 3, 4, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axServiceGroupMemberStatResponseTime.setStatus('current')
if mibBuilder.loadTexts: axServiceGroupMemberStatResponseTime.setDescription('The service group member response time in millisecond.')
axVirtualServerCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerCount.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerCount.setDescription('The number of axVirtualServer entries in the table.')
axVirtualServerTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2), )
if mibBuilder.loadTexts: axVirtualServerTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerTable.setDescription('A table containing information of virtual servers.')
axVirtualServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerName"))
if mibBuilder.loadTexts: axVirtualServerEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerEntry.setDescription('Columns in the axVirtualServer Table')
axVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerName.setDescription('The name of this virtual server.')
axVirtualServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerAddress.setDescription('The ip address of this virtual server.')
axVirtualServerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerEnabled.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerEnabled.setDescription('Whether this virtual server is enabled.')
axVirtualServerHAGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerHAGroup.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerHAGroup.setDescription('HA group name configured for the virtual server.')
axVirtualServerDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerDisplayStatus.setDescription('The display status of this virtual server port: Disabled(0), AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axVirtualServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1), )
if mibBuilder.loadTexts: axVirtualServerStatTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTable.setDescription('A table containing statistic information of virtual servers.')
axVirtualServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerStatAddress"))
if mibBuilder.loadTexts: axVirtualServerStatEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatEntry.setDescription('Columns in the axVirtualServerStat Table')
axVirtualServerStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatAddress.setDescription('The address of this virtual server.')
axVirtualServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatName.setDescription('The name of this virtual server.')
axVirtualServerStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPktsIn.setDescription('The number of packets received from client to server.')
axVirtualServerStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatBytesIn.setDescription('The number of bytes received from client to server.')
axVirtualServerStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPktsOut.setDescription('The number of packets sent from server to client.')
axVirtualServerStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatBytesOut.setDescription('The number of bytes sent from server to client.')
axVirtualServerStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axVirtualServerStatPersistConns.setDescription('The persistent connections from client side.')
axVirtualServerStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotConns.setDescription('The total connections from client side.')
axVirtualServerStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatCurConns.setDescription('The current connections from client side.')
axVirtualServerStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatStatus.setDescription('The current virtual server status.')
axVirtualServerStatDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("partialUp", 3), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatDisplayStatus.setDescription('The display status of this virtual server: Disabled(0), AllUp(1), FunctionalUp(2), PartialUp(3), Stopped(4).')
axVirtualServerStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axVirtualServerStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axVirtualServerStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axVirtualServerPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1), )
if mibBuilder.loadTexts: axVirtualServerPortTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTable.setDescription('A table containing information of virtual server port configuration.')
axVirtualServerPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortName"), (0, "A10-AX-MIB", "axVirtualServerPortType"), (0, "A10-AX-MIB", "axVirtualServerPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortEntry.setDescription('Columns in the axVirtualServerPort Table')
axVirtualServerPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortName.setDescription('The name of the virtual server. ')
axVirtualServerPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortType.setDescription('The port type of a virtual server port.')
axVirtualServerPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortNum.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortNum.setDescription('The virtual server port number.')
axVirtualServerPortAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortAddress.setDescription('The ip address of this virtual server. ')
axVirtualServerPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortEnabled.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortEnabled.setDescription('The status of this virtual server port is enabled.')
axVirtualServerPortServiceGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServiceGroup.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortServiceGroup.setDescription('The service group is assigned to the virtual server port.')
axVirtualServerPortHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHaGroupID.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortHaGroupID.setDescription('The HA group ID assigned to the virtual service port.')
axVirtualServerPortPersistTemplateType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 0))).clone(namedValues=NamedValues(("cookiePersist", 1), ("sourcIPPersist", 2), ("destinationIPPersist", 3), ("sslIDPersist", 4), ("unknown", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTemplateType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortPersistTemplateType.setDescription('The persistent template type if applicable.')
axVirtualServerPortPersistTempl = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPersistTempl.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortPersistTempl.setDescription('The persistent template dependent on the axVirtualServerPortPersistTemplateType value.')
axVirtualServerPortTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTemplate.setDescription('The virtual server port template for all port types except for Firewall.')
axVirtualServerPortPolicyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortPolicyTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortPolicyTemplate.setDescription('The policy template for all port types except for Firewall.')
axVirtualServerPortTCPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTCPTemplate.setDescription('The TCP template for TPC/FastHTTP/RTSP/FTP/MMS/Others port types.')
axVirtualServerPortHTTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortHTTPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortHTTPTemplate.setDescription('The HTTP template for HTTP/HTTPS/FastHTTP port types.')
axVirtualServerPortRamCacheTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRamCacheTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortRamCacheTemplate.setDescription('The RAM cache template for HTTP/HTTPS port types.')
axVirtualServerPortConnReuseTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortConnReuseTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortConnReuseTemplate.setDescription('The connection reuse template for HTTP/HTTPS/FastHTTP port types.')
axVirtualServerPortTCPProxyTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortTCPProxyTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortTCPProxyTemplate.setDescription('The TCP proxy template for HTTP/HTTPS/SSLProxy/SMTP port types.')
axVirtualServerPortClientSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortClientSSLTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortClientSSLTemplate.setDescription('The Client-SSL template for HTTPS/SSLProxy/SMTP port types.')
axVirtualServerPortServerSSLTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortServerSSLTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortServerSSLTemplate.setDescription('The Server-SSL template for HTTPS port type only.')
axVirtualServerPortRTSPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortRTSPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortRTSPTemplate.setDescription('The RTSP template for RTSP port type only.')
axVirtualServerPortSMTPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSMTPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortSMTPTemplate.setDescription('The SMTP template for SMTP port type only.')
axVirtualServerPortSIPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortSIPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortSIPTemplate.setDescription('The SIP template for SIP port type only.')
axVirtualServerPortUDPTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortUDPTemplate.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortUDPTemplate.setDescription('The UDP template for UDP port type only.')
axVirtualServerPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortDisplayStatus.setDescription('The display status of this virtual server port: Disabled(0), AllUp(1), FunctionalUp(2), Stopped(4).')
axVirtualServerPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1), )
if mibBuilder.loadTexts: axVirtualServerPortStatTable.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTable.setDescription('A table containing statistic information of virtual server service ports.')
axVirtualServerPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axVirtualServerPortStatAddress"), (0, "A10-AX-MIB", "axVirtualServerStatPortType"), (0, "A10-AX-MIB", "axVirtualServerStatPortNum"))
if mibBuilder.loadTexts: axVirtualServerPortStatEntry.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatEntry.setDescription('Columns in the axVirtualServerPortStat Table')
axVirtualServerPortStatAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatAddress.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatAddress.setDescription('The ip address of this virtual address.')
axVirtualServerStatPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-tcp", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortType.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortType.setDescription('The port type of a virtual server port')
axVirtualServerStatPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortNum.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortNum.setDescription('The service port number.')
axVirtualServerPortStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatName.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatName.setDescription('The name of the virtual server')
axVirtualServerStatPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortStatus.setDescription('The status of this virtual server port.')
axVirtualServerPortStatPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatPktsIn.setDescription('The number of packets received from client to server.')
axVirtualServerPortStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatBytesIn.setDescription('The number of bytes received from client to server.')
axVirtualServerPortStatPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPktsOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatPktsOut.setDescription('The number of packets sent from server to client.')
axVirtualServerPortStatBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatBytesOut.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatBytesOut.setDescription('The number of bytes sent from server to client.')
axVirtualServerPortStatPersistConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatPersistConns.setStatus('deprecated')
if mibBuilder.loadTexts: axVirtualServerPortStatPersistConns.setDescription('Persistent connections from client side.')
axVirtualServerPortStatTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotConns.setDescription('Total connections from client side.')
axVirtualServerPortStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatCurConns.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatCurConns.setDescription('Current connections from client side.')
axVirtualServerStatPortDisplayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("disabled", 0), ("allUp", 1), ("functionalUp", 2), ("stopped", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerStatPortDisplayStatus.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerStatPortDisplayStatus.setDescription('The display status of this virtual server port: Disabled(0), AllUp(1), FunctionalUp(2), Stopped(4).')
axVirtualServerPortStatTotalL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotalL7Reqs.setDescription('The total number of L7 requests if applicable')
axVirtualServerPortStatTotalCurrL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalCurrL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotalCurrL7Reqs.setDescription('The number of current L7 requests if applicable')
axVirtualServerPortStatTotalSuccL7Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 4, 4, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axVirtualServerPortStatTotalSuccL7Reqs.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortStatTotalSuccL7Reqs.setDescription('The number of successful L7 requests if applicable')
axConnReuseStatTotalOpenPersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalOpenPersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalOpenPersist.setDescription('The total count of open persistent connection-reuse sessions.')
axConnReuseStatTotalActivePersist = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalActivePersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalActivePersist.setDescription('The total count of active persistent connection-reuse sessions.')
axConnReuseStatTotalEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEstablished.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalEstablished.setDescription('The total count of established connection-reuse sessions.')
axConnReuseStatTotalTerminated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerminated.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalTerminated.setDescription('The total count of terminated connection-reuse sessions.')
axConnReuseStatTotalBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBound.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalBound.setDescription('The total count of bound connection-reuse sessions.')
axConnReuseStatTotalUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBound.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalUNBound.setDescription('The total count of unbound connection-reuse sessions.')
axConnReuseStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7), )
if mibBuilder.loadTexts: axConnReuseStatTable.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTable.setDescription('The connection-reuse status table.')
axConnReuseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1), ).setIndexNames((0, "A10-AX-MIB", "axConnReuseStatCpuIndex"))
if mibBuilder.loadTexts: axConnReuseStatEntry.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatEntry.setDescription('The connection-reuse entry.')
axConnReuseStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatCpuIndex.setDescription('Cpu Index to the connection-reuse STAT.')
axConnReuseStatOpenPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatOpenPersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatOpenPersist.setDescription('The count of open persistent connection-reuse sessions.')
axConnReuseStatActivePersist = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatActivePersist.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatActivePersist.setDescription('The count of active persistent connection-reuse sessions.')
axConnReuseStatTotalEst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalEst.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalEst.setDescription('The count of established connection-reuse sessions.')
axConnReuseStatTotalTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalTerm.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalTerm.setDescription('The count of terminated connection-reuse sessions.')
axConnReuseStatTotalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalBind.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalBind.setDescription('The count of bound connection-reuse sessions.')
axConnReuseStatTotalUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalUNBind.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalUNBind.setDescription('The count of unbound connection-reuse sessions')
axConnReuseStatTotalDelayedUNBind = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBind.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBind.setDescription('Number of connections whose unbinding was delayed.')
axConnReuseStatTotalLongRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongRes.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalLongRes.setDescription('Number of responses that took too long.')
axConnReuseStatTotalMissedRes = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedRes.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalMissedRes.setDescription('Number of missed responses to HTTP requests.')
axConnReuseStatTotalDelayedUNBound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBound.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalDelayedUNBound.setDescription('Number of connections whose unbinding was delayed.')
axConnReuseStatTotalLongResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalLongResponse.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalLongResponse.setDescription('Number of responses that took too long.')
axConnReuseStatTotalMissedResponse = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axConnReuseStatTotalMissedResponse.setStatus('current')
if mibBuilder.loadTexts: axConnReuseStatTotalMissedResponse.setDescription('Number of missed responses to HTTP requests.')
axFastHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalConn.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalConn.setDescription('The total count of proxy connections.')
axFastHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReq.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReq.setDescription('The total count of http requests.')
axFastHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSuccReq.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSuccReq.setDescription('The total count of http requests which connected successful.')
axFastHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoProxy.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoProxy.setDescription('The total count of no proxy fail.')
axFastHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalCRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalCRst.setDescription('The total count of http connections reset by client.')
axFastHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSRst.setDescription('The total count of http connections reset by server.')
axFastHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoTuple.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalNoTuple.setDescription('The total count of no tuple fail.')
axFastHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqErr.setDescription('The total count of request parse failed.')
axFastHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrSelErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrSelErr.setDescription('The total count of server select failed.')
axFastHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdReqErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdReqErr.setDescription('The total count of firewall request fail.')
axFastHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdDataReqErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalFwdDataReqErr.setDescription('The total count of firewall data request failed.')
axFastHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqReXmit.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqReXmit.setDescription('The total count of retransmitted http request.')
axFastHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalReqPktOutOrder.setDescription('The total count of request packet out of order.')
axFastHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrReSel.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrReSel.setDescription('The total count of server reselect.')
axFastHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalPreMatureClose.setDescription('The total count of server premature closed connections.')
axFastHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrConn.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSvrConn.setDescription('The total count of server connections made.')
axFastHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSNATErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalSNATErr.setDescription('The total count of Source NAT failed.')
axFastHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18), )
if mibBuilder.loadTexts: axFastHttpProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTable.setDescription('The fast http proxy status table.')
axFastHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axFastHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axFastHttpProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatEntry.setDescription('The fast http proxy status entry.')
axFastHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatCpuIndex.setDescription('The cpu index of fast http proxy STAT table')
axFastHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatCurrProxyConns.setDescription('The count of current fast http proxy connections')
axFastHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatTotalProxyConns.setDescription('The total count of fast http proxy connections of current cpu.')
axFastHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReq.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReq.setDescription('The count of http requests.')
axFastHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReqSucc.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatHttpReqSucc.setDescription('The count of http reqests which connected successfully.')
axFastHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoProxyErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatNoProxyErr.setDescription('The count of no proxy error.')
axFastHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatClientRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatClientRst.setDescription('The count of http connections reset by client.')
axFastHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerRst.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerRst.setDescription('The count of http connections reset by server.')
axFastHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatNoTupleErr.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatNoTupleErr.setDescription('The count of no tuple fail.')
axFastHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatParseReqFail.setDescription('The count of request parse failed.')
axFastHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerSelFail.setDescription('The count of server select failed.')
axFastHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqFail.setDescription('The count of firewall request fail.')
axFastHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatFwdReqDataFail.setDescription('The count of firewall data request failed.')
axFastHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqReTran.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatReqReTran.setDescription('The count of retransmitted http request.')
axFastHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatReqPktOutOrder.setDescription('The count of request packet out of order.')
axFastHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerReSel.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerReSel.setDescription('The count of server reselect.')
axFastHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerPreMatureClose.setDescription('The count of server premature closed connections.')
axFastHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 6, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFastHttpProxyStatServerConnMade.setStatus('current')
if mibBuilder.loadTexts: axFastHttpProxyStatServerConnMade.setDescription('The count of server connections made.')
axHttpProxyStatTotalConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalConn.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalConn.setDescription('The total count of proxy connections.')
axHttpProxyStatTotalReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReq.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReq.setDescription('The total count of http requests.')
axHttpProxyStatTotalSuccReq = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSuccReq.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSuccReq.setDescription('The total count of http requests which connected successful.')
axHttpProxyStatTotalNoProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoProxy.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalNoProxy.setDescription('The total count of no proxy fail.')
axHttpProxyStatTotalCRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalCRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalCRst.setDescription('The total count of http connections reset by client.')
axHttpProxyStatTotalSRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSRst.setDescription('The total count of http connections reset by server.')
axHttpProxyStatTotalNoTuple = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalNoTuple.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalNoTuple.setDescription('The total count of no tuple fail.')
axHttpProxyStatTotalReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReqErr.setDescription('The total count of request parse failed.')
axHttpProxyStatTotalSvrSelErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrSelErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrSelErr.setDescription('The total count of server select failed.')
axHttpProxyStatTotalFwdReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdReqErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdReqErr.setDescription('The total count of firewall request fail.')
axHttpProxyStatTotalFwdDataReqErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdDataReqErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalFwdDataReqErr.setDescription('The total count of firewall data request failed.')
axHttpProxyStatTotalReqReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqReXmit.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReqReXmit.setDescription('The total count of retransmitted http request.')
axHttpProxyStatTotalReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalReqPktOutOrder.setDescription('The total count of request packet out of order.')
axHttpProxyStatTotalSvrReSel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrReSel.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrReSel.setDescription('The total count of server reselect.')
axHttpProxyStatTotalPreMatureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalPreMatureClose.setDescription('The total count of server premature closed connections.')
axHttpProxyStatTotalSvrConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrConn.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSvrConn.setDescription('The total count of server connections made.')
axHttpProxyStatTotalSNATErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalSNATErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalSNATErr.setDescription('The total count of Source NAT failed.')
axHttpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18), )
if mibBuilder.loadTexts: axHttpProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTable.setDescription('The http proxy STAT table.')
axHttpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1), ).setIndexNames((0, "A10-AX-MIB", "axHttpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axHttpProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatEntry.setDescription('The http proxy STAT entry.')
axHttpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatCpuIndex.setDescription('The cpu Index of http proxy STAT table.')
axHttpProxyStatCurrProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatCurrProxyConns.setDescription('The count of current http proxy connections')
axHttpProxyStatTotalProxyConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatTotalProxyConns.setDescription('The total count of http proxy connections of current cpu.')
axHttpProxyStatHttpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReq.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatHttpReq.setDescription('The count of http requests.')
axHttpProxyStatHttpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatHttpReqSucc.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatHttpReqSucc.setDescription('The count of http reqests which connected successfully.')
axHttpProxyStatNoProxyErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoProxyErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatNoProxyErr.setDescription('The count of no proxy error.')
axHttpProxyStatClientRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatClientRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatClientRst.setDescription('The count of http connections reset by client.')
axHttpProxyStatServerRst = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerRst.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerRst.setDescription('The count of http connections reset by server.')
axHttpProxyStatNoTupleErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatNoTupleErr.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatNoTupleErr.setDescription('The count of no tuple fail.')
axHttpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatParseReqFail.setDescription('The count of request parse failed.')
axHttpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerSelFail.setDescription('he count of server select failed.')
axHttpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatFwdReqFail.setDescription('The count of firewall request fail.')
axHttpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatFwdReqDataFail.setDescription('The count of firewall data request failed.')
axHttpProxyStatReqReTran = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqReTran.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatReqReTran.setDescription('The count of retransmitted http request.')
axHttpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatReqPktOutOrder.setDescription('The count of request packet out of order.')
axHttpProxyStatServerReSel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerReSel.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerReSel.setDescription('The count of server reselect.')
axHttpProxyStatServerPreMatureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerPreMatureClose.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerPreMatureClose.setDescription('The count of server premature closed connections.')
axHttpProxyStatServerConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 7, 18, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHttpProxyStatServerConnMade.setStatus('current')
if mibBuilder.loadTexts: axHttpProxyStatServerConnMade.setDescription('The count of server connections made.')
axTcpProxyStatTotalCurrEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalCurrEstConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalCurrEstConn.setDescription('The total count of currently established tcp Connections.')
axTcpProxyStatTotalActiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalActiveOpenConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalActiveOpenConn.setDescription('The total count of actively opened tcp Connections.')
axTcpProxyStatTotalPassiveOpenConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalPassiveOpenConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalPassiveOpenConn.setDescription('The total count of passively opened tcp connections.')
axTcpProxyStatTotalConnAttemptFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalConnAttemptFail.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalConnAttemptFail.setDescription('The total count of connectting attempt fails.')
axTcpProxyStatTotalInTCPPacket = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPacket.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPacket.setDescription('The total count of received tcp packets.')
axTcpProxyStatTotalOutTCPPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutTCPPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalOutTCPPkt.setDescription('The total count of sent tcp packets.')
axTcpProxyStatTotalReXmitPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalReXmitPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalReXmitPkt.setDescription('The total count of re-transmitted packets.')
axTcpProxyStatTotalRstRcvOnEstConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstRcvOnEstConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalRstRcvOnEstConn.setDescription('The total count of reset received on established connection.')
axTcpProxyStatTotalRstSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRstSent.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalRstSent.setDescription('The total count of reset sent.')
axTCPProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10), )
if mibBuilder.loadTexts: axTCPProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axTCPProxyStatTable.setDescription('The TCP proxy STAT table.')
axTCPProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1), ).setIndexNames((0, "A10-AX-MIB", "axTcpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axTCPProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axTCPProxyStatEntry.setDescription('The TCP proxy STAT entry.')
axTcpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatCpuIndex.setDescription('The cpu index of TCP proxy STAT table.')
axTcpProxyStatCurrEstConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatCurrEstConns.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatCurrEstConns.setDescription('The count of currently established connections.')
axTcpProxyStatActiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatActiveOpenConns.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatActiveOpenConns.setDescription('The count of active open connections.')
axTcpProxyStatPassiveOpenConns = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatPassiveOpenConns.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatPassiveOpenConns.setDescription('The count of passive open connections.')
axTcpProxyStatConnAttempFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatConnAttempFail.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatConnAttempFail.setDescription('The count of connecting attempt fail.')
axTcpProxyStatTotalInTCPPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalInTCPPkt.setDescription('The total count of packet received.')
axTcpProxyStatTotalOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalOutPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalOutPkt.setDescription('The total count of packets sent.')
axTcpProxyStatReTranPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatReTranPkt.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatReTranPkt.setDescription('The count of re-transmit packets.')
axTcpProxyStatRstRvdEstConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstRvdEstConn.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatRstRvdEstConn.setDescription('The count of reset received on established connections.')
axTcpProxyStatRstSent = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatRstSent.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatRstSent.setDescription('The count of Reset Sent.')
axTcpProxyStatInputErr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatInputErr.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatInputErr.setDescription('The count of Input Error.')
axTcpProxyStatSocketAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatSocketAlloc.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatSocketAlloc.setDescription('The count of socket allocated.')
axTcpProxyStatOrphanSocket = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatOrphanSocket.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatOrphanSocket.setDescription('The count of orphan sockets.')
axTcpProxyStatMemAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatMemAlloc.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatMemAlloc.setDescription('The size of allocated memory used by tcp proxy.')
axTcpProxyStatTotalRxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalRxBuf.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalRxBuf.setDescription('The size of Rx buffer.')
axTcpProxyStatTotalTxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTotalTxBuf.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTotalTxBuf.setDescription('The size of TX buffer.')
axTcpProxyStatTCPSYNSNTState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNSNTState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNSNTState.setDescription('The count of TCP connections in SYN-SNT state.')
axTcpProxyStatTCPSYNRCVState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNRCVState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPSYNRCVState.setDescription('The count of TCP connections in SYN-RCV state.')
axTcpProxyStatTCPFINW1State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW1State.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW1State.setDescription('The count of TCP connections in FIN-W1 state.')
axTcpProxyStatTCPFINW2State = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW2State.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPFINW2State.setDescription('The count of TCP connections in FIN-W2 state.')
axTcpProxyStatTimeWstate = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTimeWstate.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTimeWstate.setDescription('The count of TCP connections in TCP TimeW state.')
axTcpProxyStatTCPCloseState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseState.setDescription('The count of TCP connections in close state.')
axTcpProxyStatTCPCloseWState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseWState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPCloseWState.setDescription('The count of TCP connections in closeW state.')
axTcpProxyStatTCPLastACKState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPLastACKState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPLastACKState.setDescription('The count of TCP connections in lastACK state.')
axTcpProxyStatTCPListenState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPListenState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPListenState.setDescription('The count of TCP connections in listen state.')
axTcpProxyStatTCPClosingState = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 8, 10, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axTcpProxyStatTCPClosingState.setStatus('current')
if mibBuilder.loadTexts: axTcpProxyStatTCPClosingState.setDescription('The count of TCP connections in closing state.')
axSslStatSSLModNum = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLModNum.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLModNum.setDescription('The number of SSL modules.')
axSslStatCurrSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatCurrSSLConn.setStatus('current')
if mibBuilder.loadTexts: axSslStatCurrSSLConn.setDescription('Current SSL Connections.')
axSslStatTotalSSLConn = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatTotalSSLConn.setStatus('current')
if mibBuilder.loadTexts: axSslStatTotalSSLConn.setDescription('Total SSL connections.')
axSslStatFailSSLHandshake = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatFailSSLHandshake.setStatus('current')
if mibBuilder.loadTexts: axSslStatFailSSLHandshake.setDescription('Failed SSL handshake.')
axSslStatSSLMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLMemUsage.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLMemUsage.setDescription('The SSL Memory usage(Byte).')
axSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6), )
if mibBuilder.loadTexts: axSslStatTable.setStatus('current')
if mibBuilder.loadTexts: axSslStatTable.setDescription('The SSL STAT table.')
axSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1), ).setIndexNames((0, "A10-AX-MIB", "axSslStatModuleIndex"))
if mibBuilder.loadTexts: axSslStatEntry.setStatus('current')
if mibBuilder.loadTexts: axSslStatEntry.setDescription('The SSL STAT entry.')
axSslStatModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatModuleIndex.setStatus('current')
if mibBuilder.loadTexts: axSslStatModuleIndex.setDescription('The Module Index of SSL STAT table')
axSslStatEnableCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 2), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatEnableCryptoEngine.setStatus('current')
if mibBuilder.loadTexts: axSslStatEnableCryptoEngine.setDescription('The number of enabled crypto engines.')
axSslStatAvailCryptoEngine = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 6, 1, 3), Counter32().clone(22)).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatAvailCryptoEngine.setStatus('current')
if mibBuilder.loadTexts: axSslStatAvailCryptoEngine.setDescription('The number of available crypto engines.')
axSslStatSSLFailedCAVfy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCAVfy.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLFailedCAVfy.setDescription('Number of times an SSL session was terminated due to a certificate verification failure.')
axSslStatSSLNoHWContextMem = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLNoHWContextMem.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLNoHWContextMem.setDescription('Number of times the encryption processor was unable to allocate memory.')
axSslStatSSLHWRingFull = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLHWRingFull.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLHWRingFull.setDescription('Number of times the AX software was unable to enqueue an SSL record to the SSL processor for encryption/decryption.(Number of times the processor reached its performance limit.)')
axSslStatSSLFailedCryptoOperation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 9, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslStatSSLFailedCryptoOperation.setStatus('current')
if mibBuilder.loadTexts: axSslStatSSLFailedCryptoOperation.setDescription('Number of times when the crypto opertion fails.')
axFtpStatTotalCtrlSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalCtrlSession.setStatus('current')
if mibBuilder.loadTexts: axFtpStatTotalCtrlSession.setDescription('The total count of control sessions.')
axFtpStatTotalALGPkt = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalALGPkt.setStatus('current')
if mibBuilder.loadTexts: axFtpStatTotalALGPkt.setDescription('The total count of ALG packets.')
axFtpStatALGPktReXmit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatALGPktReXmit.setStatus('current')
if mibBuilder.loadTexts: axFtpStatALGPktReXmit.setDescription('The count of ALG packets rexmitted.')
axFtpStatOutConnCtrl = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnCtrl.setStatus('current')
if mibBuilder.loadTexts: axFtpStatOutConnCtrl.setDescription('The count of out of control connections.')
axFtpStatTotalDataSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatTotalDataSession.setStatus('current')
if mibBuilder.loadTexts: axFtpStatTotalDataSession.setDescription('The total count of data sessions.')
axFtpStatOutConnData = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 10, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axFtpStatOutConnData.setStatus('current')
if mibBuilder.loadTexts: axFtpStatOutConnData.setDescription('The total count of out of data connections.')
axNetStatIPOutNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRoute.setStatus('current')
if mibBuilder.loadTexts: axNetStatIPOutNoRoute.setDescription('The count of IP out no route.')
axNetStatTCPOutRst = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRst.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRst.setDescription('The count of TCP out Reset.')
axNetStatTCPSynRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRcv.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynRcv.setDescription('The count of TCP SYN packets received.')
axNetStatTCPSYNCookieSent = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSent.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSent.setDescription('The count of TCP SYN cookie sent.')
axNetStatTCPSYNCookieSentFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSentFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSentFail.setDescription('The count of TCP SYN cookie sent fail.')
axNetStatTCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPReceive.setDescription('Number of TCP packets received.')
axNetStatUDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPReceive.setDescription('Number of UDP packets received.')
axNetStatServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSelFail.setDescription('Number of times selection of a real server failed.')
axNetStatSourceNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatSourceNATFail.setDescription('Number of times a source NAT failure occurred.')
axNetStatTCPSynCookieFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynCookieFail.setDescription('Number of times a TCP SYN cookie failure occurred.')
axNetStatNoVportDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoVportDrop.setDescription('Number of times traffic was dropped because the requested virtual port was not available.')
axNetStatNoSynPktDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSynPktDrop.setDescription('Number of SYN packets dropped.')
axNetStatConnLimitDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitDrop.setDescription('Number of packets dropped because the server connection limit had been reached.')
axNetStatConnLimitReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitReset.setDescription('Number of connections reset because the server connection limit had been reached.')
axNetStatProxyNoSockDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStatProxyNoSockDrop.setDescription('Number of packets dropped because the proxy did not have an available socket.')
axNetStataFlexDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrop.setStatus('current')
if mibBuilder.loadTexts: axNetStataFlexDrop.setDescription('Number of packets dropped due to an aFlex.')
axNetStatSessionAgingOut = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionAgingOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatSessionAgingOut.setDescription('Number of sessions that have aged out.')
axNetStatTCPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPNoSLB.setDescription('Total number of TCP packets in non SLB processing.')
axNetStatUDPNoSLB = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPNoSLB.setDescription('Total number of UDP packets in non SLB processing.')
axNetStatTCPOutRSTNoSYN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTNoSYN.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTNoSYN.setDescription('Total number of TCP out RST no SYN.')
axNetStatTCPOutRSTL4Proxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTL4Proxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTL4Proxy.setDescription('Total number of TCP out RST L4 proxy.')
axNetStatTCPOutRSTACKattack = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTACKattack.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTACKattack.setDescription('Total number of TCP out RST ACK attack.')
axNetStatTCPOutRSTAFleX = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTAFleX.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTAFleX.setDescription('Total number of TCP out RST aFlex.')
axNetStatTCPOutRSTStaleSess = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTStaleSess.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTStaleSess.setDescription('Total number of TCP out RST stale session.')
axNetStatTCPOutRSTProxy = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutRSTProxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutRSTProxy.setDescription('Total number of TCP out RST TCP proxy.')
axNetStatNoSYNPktDropFIN = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropFIN.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSYNPktDropFIN.setDescription('Total number of No SYN pkt drops - FIN.')
axNetStatNoSYNPktDropRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropRST.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSYNPktDropRST.setDescription('Total number of No SYN pkt drops - RST.')
axNetStatNoSYNPktDropACK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSYNPktDropACK.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSYNPktDropACK.setDescription('Total number of No SYN pkt drops - ACK.')
axNetStatSYNThrotte = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSYNThrotte.setStatus('current')
if mibBuilder.loadTexts: axNetStatSYNThrotte.setDescription('Total number of SYN Throttle.')
axNetStatSSLSIDPersistSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatSSLSIDPersistSucc.setDescription('Total number of SSL SID persist successful.')
axNetStatSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatSSLSIDPersistFail.setDescription('Total number of SSL SID persist failed.')
axNetStatClientSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotFound.setDescription('Total number of Client SSL SID not found.')
axNetStatClientSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatClientSSLSIDMatch.setDescription('Total number of Client SSL SID match')
axNetStatClientSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatClientSSLSIDNotMatch.setDescription('Total number of Client SSL SID not match.')
axNetStatServerSSLSIDNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotFound.setDescription('Total number of Server SSL SID not found.')
axNetStatServerSSLSIDReset = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDReset.setDescription('Total number of Server SSL SID reset.')
axNetStatServerSSLSIDMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDMatch.setDescription('Total number of Server SSL SID match.')
axNetStatServerSSLSIDNotMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSSLSIDNotMatch.setDescription('Total number of Server SSL SID not match.')
axNetStatCreateSSLSIDSucc = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatCreateSSLSIDSucc.setDescription('Total number of Create SSL SID successfully.')
axNetStatCreateSSLSIDFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCreateSSLSIDFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatCreateSSLSIDFail.setDescription('Total number of Create SSL SID failed.')
axNetStatConnRateLimitDrops = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnRateLimitDrops.setDescription('Total number of Conn rate limit drops.')
axNetStatConnRateLimitResets = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnRateLimitResets.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnRateLimitResets.setDescription('Total number of Conn rate limit resets.')
axNetStatInbandHMRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMRetry.setStatus('current')
if mibBuilder.loadTexts: axNetStatInbandHMRetry.setDescription('Total number of Inband HM retry.')
axNetStatInbandHMReassign = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatInbandHMReassign.setStatus('current')
if mibBuilder.loadTexts: axNetStatInbandHMReassign.setDescription('Total number of Inband HM reassign.')
axNetStat2TCPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2TCPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStat2TCPReceive.setDescription('Number of TCP packets received in the 64-bit counter.')
axNetStat2UDPReceive = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStat2UDPReceive.setStatus('current')
if mibBuilder.loadTexts: axNetStat2UDPReceive.setDescription('Number of UDP packets received in the 64-bit counter.')
axNetStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100), )
if mibBuilder.loadTexts: axNetStatTable.setStatus('current')
if mibBuilder.loadTexts: axNetStatTable.setDescription('The Net STAT table.')
axNetStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1), ).setIndexNames((0, "A10-AX-MIB", "axNetStatCpuIndex"))
if mibBuilder.loadTexts: axNetStatEntry.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntry.setDescription('The Net STAT entry.')
axNetStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axNetStatCpuIndex.setDescription('The Module Index of Net STAT table')
axNetStatIPOutNoRt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatIPOutNoRt.setStatus('current')
if mibBuilder.loadTexts: axNetStatIPOutNoRt.setDescription('Number of IP packets that could not be routed.')
axNetStatTCPOutReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPOutReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPOutReset.setDescription('Number of TCP Resets sent.')
axNetStatTCPSynRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynRecv.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynRecv.setDescription('Number of TCP SYN packets received.')
axNetStatTCPSYNCookieSnt = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSnt.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSnt.setDescription('Number of TCP SYN cookies sent.')
axNetStatTCPSYNCookieSntFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSntFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSYNCookieSntFail.setDescription('Number of TCP SYN cookie send attempts that failed.')
axNetStatTCPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPRcv.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPRcv.setDescription('Number of TCP packets received.')
axNetStatUDPRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPRcv.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPRcv.setDescription('Number of UDP packets received.')
axNetStatServerSelFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatServerSelFails.setStatus('current')
if mibBuilder.loadTexts: axNetStatServerSelFails.setDescription('Number of times selection of a real server failed.')
axNetStatSourceNATFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSourceNATFails.setStatus('current')
if mibBuilder.loadTexts: axNetStatSourceNATFails.setDescription('Number of times a source NAT failure occurred.')
axNetStatTCPSynCookieFails = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPSynCookieFails.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPSynCookieFails.setDescription('Number of times a TCP SYN cookie failure occurred.')
axNetStatNoVportDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoVportDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoVportDrops.setDescription('Number of times traffic was dropped because the requested virtual port was not available.')
axNetStatNoSynPktDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatNoSynPktDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatNoSynPktDrops.setDescription('Number of SYN packets dropped.')
axNetStatConnLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitDrops.setDescription('Number of packets dropped because the server connection limit had been reached.')
axNetStatConnLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatConnLimitResets.setStatus('current')
if mibBuilder.loadTexts: axNetStatConnLimitResets.setDescription('Number of connections reset because the server connection limit had been reached.')
axNetStatProxyNoSockDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatProxyNoSockDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatProxyNoSockDrops.setDescription('Number of packets dropped because the proxy did not have an available socket.')
axNetStataFlexDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStataFlexDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStataFlexDrops.setDescription('Number of packets dropped due to an aFlex.')
axNetStatSessionsAgingOut = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatSessionsAgingOut.setStatus('current')
if mibBuilder.loadTexts: axNetStatSessionsAgingOut.setDescription('Number of sessions that have aged out.')
axNetStatTCPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatTCPsNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatTCPsNoSLB.setDescription('Number of TCP packets in non SLB processing.')
axNetStatUDPsNoSLB = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatUDPsNoSLB.setStatus('current')
if mibBuilder.loadTexts: axNetStatUDPsNoSLB.setDescription('Number of UDP packets in non SLB processing.')
axNetStatEntryTCPOutRSTNoSYN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTNoSYN.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTNoSYN.setDescription('Number of TCP out RST no SYN.')
axNetStatEntryTCPOutRSTL4Proxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTL4Proxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTL4Proxy.setDescription('Number of TCP out RST L4 proxy.')
axNetStatEntryTCPOutRSTACKattack = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTACKattack.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTACKattack.setDescription('Number of TCP out RST ACK attack.')
axNetStatEntryTCPOutRSTAFleX = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTAFleX.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTAFleX.setDescription('Number of TCP out RST aFlex.')
axNetStatEntryTCPOutRSTStaleSess = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTStaleSess.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTStaleSess.setDescription('Number of TCP out RST stale session.')
axNetStatEntryTCPOutRSTProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTProxy.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryTCPOutRSTProxy.setDescription('Number of TCP out RST TCP proxy.')
axNetStatEntryNoSYNPktDropFIN = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropFIN.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropFIN.setDescription('Number of No SYN pkt drops - FIN.')
axNetStatEntryNoSYNPktDropRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropRST.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropRST.setDescription('Number of No SYN pkt drops - RST.')
axNetStatEntryNoSYNPktDropACK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropACK.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryNoSYNPktDropACK.setDescription('Number of No SYN pkt drops - ACK.')
axNetStatEntrySYNThrotte = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySYNThrotte.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntrySYNThrotte.setDescription('Number of SYN Throttle.')
axNetStatEntrySSLSIDPersistSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistSucc.setDescription('Total number of SSL SID persist successful.')
axNetStatEntrySSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntrySSLSIDPersistFail.setDescription('Total number of SSL SID persist failed.')
axNetStatEntryClientSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotFound.setDescription('Total number of Client SSL SID not found.')
axNetStatEntryClientSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDMatch.setDescription('Total number of Client SSL SID match')
axNetStatEntryClientSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryClientSSLSIDNotMatch.setDescription('Total number of Client SSL SID not match.')
axNetStatEntryServerSSLSIDNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotFound.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotFound.setDescription('Total number of Server SSL SID not found.')
axNetStatEntryServerSSLSIDReset = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDReset.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDReset.setDescription('Total number of Server SSL SID reset.')
axNetStatEntryServerSSLSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDMatch.setDescription('Total number of Server SSL SID match.')
axNetStatEntryServerSSLSIDNotMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotMatch.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryServerSSLSIDNotMatch.setDescription('Total number of Server SSL SID not match.')
axNetStatEntryCreateSSLSIDSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDSucc.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDSucc.setDescription('Total number of Create SSL SID successfully.')
axNetStatEntryCreateSSLSIDFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDFail.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryCreateSSLSIDFail.setDescription('Total number of Create SSL SID failed.')
axNetStatEntryConnRateLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitDrops.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitDrops.setDescription('Number of Conn rate limit drops.')
axNetStatEntryConnRateLimitResets = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitResets.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryConnRateLimitResets.setDescription('Number of Conn rate limit resets.')
axNetStatEntryInbandHMRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMRetry.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryInbandHMRetry.setDescription('Number of Inband HM retry.')
axNetStatEntryInbandHMReassign = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 11, 100, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNetStatEntryInbandHMReassign.setStatus('current')
if mibBuilder.loadTexts: axNetStatEntryInbandHMReassign.setDescription('Number of Inband HM reassign.')
axNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1))
axNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2))
axSystemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1))
axAppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2))
axNetworkNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 3))
axNotificationMsg = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationMsg.setStatus('current')
if mibBuilder.loadTexts: axNotificationMsg.setDescription('The information about the related notification.')
axNotificationSLBServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBServer.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBServer.setDescription('The address or host name of the server.')
axNotificationSLBPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBPort.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBPort.setDescription('The service port.')
axNotificationSLBCurConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationSLBCurConns.setStatus('current')
if mibBuilder.loadTexts: axNotificationSLBCurConns.setDescription('The current total of connections.')
axNotificationVirtualServer = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServer.setStatus('current')
if mibBuilder.loadTexts: axNotificationVirtualServer.setDescription('The address or host name of the virtual server.')
axNotificationVirtualServerPort = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServerPort.setStatus('current')
if mibBuilder.loadTexts: axNotificationVirtualServerPort.setDescription('The virtual server port.')
axNotificationVirtualServerPortType = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 8, 9, 10, 12, 14, 15, 16, 17, 11, 19, 18, 5))).clone(namedValues=NamedValues(("firewall", 1), ("tcp", 2), ("udp", 3), ("rtsp", 8), ("ftp", 9), ("mms", 10), ("fastHTTP", 12), ("http", 14), ("https", 15), ("sslProxy", 16), ("smtp", 17), ("sip", 11), ("sips", 19), ("sip-TCP", 18), ("others", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationVirtualServerPortType.setStatus('current')
if mibBuilder.loadTexts: axNotificationVirtualServerPortType.setDescription('The virtual server port type.')
axNotificationDropEventReason = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationDropEventReason.setStatus('current')
if mibBuilder.loadTexts: axNotificationDropEventReason.setDescription('The event indicator type, such as Firmware, HighPerformanceDriver, L2, L3, .etc')
axNotificationConfiguredThreshold = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConfiguredThreshold.setStatus('current')
if mibBuilder.loadTexts: axNotificationConfiguredThreshold.setDescription('The configured threshold value.')
axNotificationCurrentUsage = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCurrentUsage.setStatus('current')
if mibBuilder.loadTexts: axNotificationCurrentUsage.setDescription('The current usage value.')
axNotificationConnLimit = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationConnLimit.setStatus('current')
if mibBuilder.loadTexts: axNotificationConnLimit.setDescription('The conn-limit.')
axNotificationTrunkID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationTrunkID.setStatus('current')
if mibBuilder.loadTexts: axNotificationTrunkID.setDescription('The trunk ID')
axNotificationPortThreshold = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPortThreshold.setStatus('current')
if mibBuilder.loadTexts: axNotificationPortThreshold.setDescription('The port threshold')
axNotificationCurrentUpPorts = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationCurrentUpPorts.setStatus('current')
if mibBuilder.loadTexts: axNotificationCurrentUpPorts.setDescription('The current up ports')
axNotificationFanName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationFanName.setStatus('current')
if mibBuilder.loadTexts: axNotificationFanName.setDescription('The system fan name.')
axNotificationPowerSupplyName = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axNotificationPowerSupplyName.setStatus('current')
if mibBuilder.loadTexts: axNotificationPowerSupplyName.setDescription('The system power supply name.')
axSystemStart = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 1))
if mibBuilder.loadTexts: axSystemStart.setStatus('current')
if mibBuilder.loadTexts: axSystemStart.setDescription('Notify that the system has started running.')
axSystemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 2))
if mibBuilder.loadTexts: axSystemShutdown.setStatus('current')
if mibBuilder.loadTexts: axSystemShutdown.setDescription('Notify that the system is in the process of being shut down.')
axSystemTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 3))
if mibBuilder.loadTexts: axSystemTempHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemTempHigh.setDescription('The system tempature is high.')
axFan1Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 4))
if mibBuilder.loadTexts: axFan1Failure.setStatus('deprecated')
if mibBuilder.loadTexts: axFan1Failure.setDescription('The system fan1 is failed.')
axFan2Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 5))
if mibBuilder.loadTexts: axFan2Failure.setStatus('deprecated')
if mibBuilder.loadTexts: axFan2Failure.setDescription('The system fan2 is failed.')
axFan3Failure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 6))
if mibBuilder.loadTexts: axFan3Failure.setStatus('deprecated')
if mibBuilder.loadTexts: axFan3Failure.setDescription('The system fan3 is failed.')
axUpperPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 9))
if mibBuilder.loadTexts: axUpperPowerSupplyFailure.setStatus('deprecated')
if mibBuilder.loadTexts: axUpperPowerSupplyFailure.setDescription('The system upper power supply is failed.')
axLowerPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 10))
if mibBuilder.loadTexts: axLowerPowerSupplyFailure.setStatus('deprecated')
if mibBuilder.loadTexts: axLowerPowerSupplyFailure.setDescription('The system lower power supply is failed.')
axPrimaryHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 11))
if mibBuilder.loadTexts: axPrimaryHardDiskFailure.setStatus('current')
if mibBuilder.loadTexts: axPrimaryHardDiskFailure.setDescription('The primary hard disk is failed.')
axSecondaryHardDiskFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 12))
if mibBuilder.loadTexts: axSecondaryHardDiskFailure.setStatus('current')
if mibBuilder.loadTexts: axSecondaryHardDiskFailure.setDescription('The secondary hard disk is failed.')
axHardDiskUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 13))
if mibBuilder.loadTexts: axHardDiskUsageHigh.setStatus('current')
if mibBuilder.loadTexts: axHardDiskUsageHigh.setDescription('The hard disk usage is high.')
axMemoryUsageHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 14))
if mibBuilder.loadTexts: axMemoryUsageHigh.setStatus('current')
if mibBuilder.loadTexts: axMemoryUsageHigh.setDescription('The memory usage is high.')
axSystemRestart = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 15))
if mibBuilder.loadTexts: axSystemRestart.setStatus('current')
if mibBuilder.loadTexts: axSystemRestart.setDescription('Notify that the agent has been restarted.')
axSystemDropPacketEvent = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 16)).setObjects(("A10-AX-MIB", "axNotificationDropEventReason"))
if mibBuilder.loadTexts: axSystemDropPacketEvent.setStatus('current')
if mibBuilder.loadTexts: axSystemDropPacketEvent.setDescription('The AX experiences the packet dropped in the reason of axNotificationDropEventReason.')
axSystemRelieveDropPacketEvent = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 17)).setObjects(("A10-AX-MIB", "axNotificationDropEventReason"))
if mibBuilder.loadTexts: axSystemRelieveDropPacketEvent.setStatus('current')
if mibBuilder.loadTexts: axSystemRelieveDropPacketEvent.setDescription('The AX recovers from the packet dropped of the reason, axNotificationDropEventReason, before.')
axSystemControlCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 18)).setObjects(("A10-AX-MIB", "axNotificationConfiguredThreshold"), ("A10-AX-MIB", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemControlCpuHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemControlCpuHigh.setDescription('The AX control CPU usage is high.')
axSystemDataCpuHigh = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 19)).setObjects(("A10-AX-MIB", "axNotificationConfiguredThreshold"), ("A10-AX-MIB", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axSystemDataCpuHigh.setStatus('current')
if mibBuilder.loadTexts: axSystemDataCpuHigh.setDescription('The AX data CPU usage is high.')
axSystemFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 20)).setObjects(("A10-AX-MIB", "axNotificationFanName"))
if mibBuilder.loadTexts: axSystemFanFailure.setStatus('current')
if mibBuilder.loadTexts: axSystemFanFailure.setDescription('The system fan is failed.')
axSystemPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 1, 21)).setObjects(("A10-AX-MIB", "axNotificationPowerSupplyName"))
if mibBuilder.loadTexts: axSystemPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: axSystemPowerSupplyFailure.setDescription('The system power supply is failed.')
axHAStandby = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 1)).setObjects(("A10-AX-MIB", "axNotificationMsg"))
if mibBuilder.loadTexts: axHAStandby.setStatus('current')
if mibBuilder.loadTexts: axHAStandby.setDescription('The system is going into standby mode.')
axHAActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 2)).setObjects(("A10-AX-MIB", "axNotificationMsg"))
if mibBuilder.loadTexts: axHAActive.setStatus('current')
if mibBuilder.loadTexts: axHAActive.setDescription('The system is going into active mode.')
axHAActiveActive = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 3)).setObjects(("A10-AX-MIB", "axNotificationMsg"))
if mibBuilder.loadTexts: axHAActiveActive.setStatus('current')
if mibBuilder.loadTexts: axHAActiveActive.setDescription('The system is going into active-active mode.')
axServiceDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 4)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceDown.setStatus('current')
if mibBuilder.loadTexts: axServiceDown.setDescription('A service is detected DOWN.')
axServiceUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 5)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"))
if mibBuilder.loadTexts: axServiceUp.setStatus('current')
if mibBuilder.loadTexts: axServiceUp.setDescription('A SLB service is up.')
axServerDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 6)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"))
if mibBuilder.loadTexts: axServerDown.setStatus('current')
if mibBuilder.loadTexts: axServerDown.setDescription('A SLB server is down.')
axServerUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 7)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"))
if mibBuilder.loadTexts: axServerUp.setStatus('current')
if mibBuilder.loadTexts: axServerUp.setDescription('A SLB server is up.')
axServerConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 8)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnLimit.setStatus('current')
if mibBuilder.loadTexts: axServerConnLimit.setDescription('A SLB server has reached the configured connection limits.')
axServerConnResume = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 9)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnResume.setStatus('current')
if mibBuilder.loadTexts: axServerConnResume.setDescription('A SLB server has reached the configured connection-resume value.')
axServiceConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 10)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnLimit.setStatus('current')
if mibBuilder.loadTexts: axServiceConnLimit.setDescription('A SLB service has reached the configured connection limits.')
axServiceConnResume = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 11)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnResume.setStatus('current')
if mibBuilder.loadTexts: axServiceConnResume.setDescription('A SLB service has reached the configured connection-resume value.')
axVirtualServerPortDown = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 12)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationVirtualServer"), ("A10-AX-MIB", "axNotificationVirtualServerPort"), ("A10-AX-MIB", "axNotificationVirtualServerPortType"))
if mibBuilder.loadTexts: axVirtualServerPortDown.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortDown.setDescription("A SLB virtual server's service is down when all members of the service group belonging to the virtual server port are down.")
axVirtualServerPortUp = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 13)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationVirtualServer"), ("A10-AX-MIB", "axNotificationVirtualServerPort"), ("A10-AX-MIB", "axNotificationVirtualServerPortType"))
if mibBuilder.loadTexts: axVirtualServerPortUp.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortUp.setDescription("A SLB virtual server's service port is up when at least one member of the service group belonging to the virtual server port are up.")
axApplicationBufferReachLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 14)).setObjects(("A10-AX-MIB", "axNotificationConfiguredThreshold"), ("A10-AX-MIB", "axNotificationCurrentUsage"))
if mibBuilder.loadTexts: axApplicationBufferReachLimit.setStatus('current')
if mibBuilder.loadTexts: axApplicationBufferReachLimit.setDescription('The AX SLB application buffer usage execeeded the configured threshold.')
axVirtualServerPortReachConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 15)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerPortReachConnLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortReachConnLimit.setDescription('A virtual service port has reached the configured connection limits.')
axVirtualServerPortReachConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 16)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerPortReachConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerPortReachConnRateLimit.setDescription('A virtual service port has reached the configured connection rate-limits.')
axVirtualServerReachConnLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 17)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerReachConnLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerReachConnLimit.setDescription('A virtual server has reached the configured connection limits.')
axVirtualServerReachConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 18)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationConnLimit"))
if mibBuilder.loadTexts: axVirtualServerReachConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axVirtualServerReachConnRateLimit.setDescription('A virtual server has reached the configured connection rate-limits.')
axServerConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 19)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServerConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axServerConnRateLimit.setDescription('A SLB server has reached the configured conn-rate-limits.')
axServiceConnRateLimit = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 2, 20)).setObjects(("A10-AX-MIB", "axNotificationMsg"), ("A10-AX-MIB", "axNotificationSLBServer"), ("A10-AX-MIB", "axNotificationSLBPort"), ("A10-AX-MIB", "axNotificationSLBCurConns"))
if mibBuilder.loadTexts: axServiceConnRateLimit.setStatus('current')
if mibBuilder.loadTexts: axServiceConnRateLimit.setDescription('A SLB service gropu member has reached the configured conn-rate-limits.')
axNetworkTrunkPortsThreshold = NotificationType((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 12, 2, 3, 1)).setObjects(("A10-AX-MIB", "axNotificationTrunkID"), ("A10-AX-MIB", "axNotificationPortThreshold"), ("A10-AX-MIB", "axNotificationCurrentUpPorts"))
if mibBuilder.loadTexts: axNetworkTrunkPortsThreshold.setStatus('current')
if mibBuilder.loadTexts: axNetworkTrunkPortsThreshold.setDescription('The trunk ports threshold trap.')
axSmtpProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsCurrProxyConns.setDescription('Number of currently active SMTP connections using the AX Series device as an SMTP proxy.')
axSmtpProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsTotalProxyConns.setDescription('Total number of SMTP connections that have used the AX Series device as an SMTP proxy.')
axSmtpProxyStatsSmtpRequests = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpRequests.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpRequests.setDescription('Total number of SMTP requests received by the SMTP proxy.')
axSmtpProxyStatsSmtpReqSuccs = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpReqSuccs.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSmtpReqSuccs.setDescription('Number of SMTP requests received by the AX Series device that were successfully fulfilled (by connection to a real server).')
axSmtpProxyStatsNoProxyError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoProxyError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsNoProxyError.setDescription('Number of proxy errors.')
axSmtpProxyStatsClientRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsClientRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsClientRST.setDescription('Number of times TCP connections with clients were reset.')
axSmtpProxyStatsServerRST = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsServerRST.setDescription('Number of times TCP connections with servers were reset.')
axSmtpProxyStatsNoTupleError = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsNoTupleError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsNoTupleError.setDescription('Number of tuple errors.')
axSmtpProxyStatsParseReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsParseReqFail.setDescription('Number of times parsing of an SMTP request failed.')
axSmtpProxyStatsServerSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsServerSelFail.setDescription('Number of times selection of a real server failed.')
axSmtpProxyStatsFwdReqFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqFail.setDescription('Number of forward request failures.')
axSmtpProxyStatsFwdReqDataFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsFwdReqDataFail.setDescription('Number of forward request data failures.')
axSmtpProxyStatsReqRetrans = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqRetrans.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsReqRetrans.setDescription('Number of retransmitted requests.')
axSmtpProxyStatsReqPktOutOrder = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsReqPktOutOrder.setDescription('Number of request packets received from clients out of sequence.')
axSmtpProxyStatsServerResel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsServerResel.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsServerResel.setDescription('Number of times a request was forwarded to another server because the current server was failing.')
axSmtpProxyStatsSvrPrematureClose = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrPrematureClose.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSvrPrematureClose.setDescription('Number of times the connection with a server closed prematurely.')
axSmtpProxyStatsSvrConnMade = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSvrConnMade.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSvrConnMade.setDescription('Number of connections made with servers.')
axSmtpProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatsSNATFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatsSNATFail.setDescription('Number of source NAT failures.')
axSmtpProxyStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19), )
if mibBuilder.loadTexts: axSmtpProxyStatTable.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatTable.setDescription('The Smtp proxy STAT table.')
axSmtpProxyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1), ).setIndexNames((0, "A10-AX-MIB", "axSmtpProxyStatCpuIndex"))
if mibBuilder.loadTexts: axSmtpProxyStatEntry.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatEntry.setDescription('The Smtp proxy STAT entry.')
axSmtpProxyStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatCpuIndex.setDescription('The Module Index of Smtp Proxy STAT table')
axSmtpProxyStatCurrProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatCurrProxyConn.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatCurrProxyConn.setDescription('Number of currently active SMTP connections using the AX Series device as an SMTP proxy.')
axSmtpProxyStatTotalProxyConn = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatTotalProxyConn.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatTotalProxyConn.setDescription('Total number of SMTP connections that have used the AX Series device as an SMTP proxy.')
axSmtpProxyStatSmtpReq = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReq.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReq.setDescription('Total number of SMTP requests received by the SMTP proxy.')
axSmtpProxyStatSmtpReqSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReqSucc.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSmtpReqSucc.setDescription('Number of SMTP requests received by the AX Series device that were successfully fulfilled (by connection to a real server).')
axSmtpProxyStatNoProxyError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoProxyError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatNoProxyError.setDescription('Number of proxy errors.')
axSmtpProxyStatClientRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatClientRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatClientRST.setDescription('Number of times TCP connections with clients were reset.')
axSmtpProxyStatServerRST = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerRST.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatServerRST.setDescription('Number of times TCP connections with servers were reset.')
axSmtpProxyStatNoTupleError = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatNoTupleError.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatNoTupleError.setDescription('Number of tuple errors.')
axSmtpProxyStatParseReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatParseReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatParseReqFail.setDescription('Number of times parsing of an SMTP request failed.')
axSmtpProxyStatServerSelFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerSelFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatServerSelFail.setDescription('Number of times selection of a real server failed.')
axSmtpProxyStatFwdReqFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqFail.setDescription('Number of forward request failures.')
axSmtpProxyStatFwdReqDataFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqDataFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatFwdReqDataFail.setDescription('Number of forward request data failures.')
axSmtpProxyStatReqRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqRetrans.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatReqRetrans.setDescription('Number of retransmitted requests.')
axSmtpProxyStatReqPktOutOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatReqPktOutOrder.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatReqPktOutOrder.setDescription('Number of request packets received from clients out of sequence.')
axSmtpProxyStatServerResel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatServerResel.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatServerResel.setDescription('Number of times a request was forwarded to another server because the current server was failing.')
axSmtpProxyStatSvrPrematureClose = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrPrematureClose.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSvrPrematureClose.setDescription('TNumber of times the connection with a server closed prematurely.')
axSmtpProxyStatSvrConnMade = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSvrConnMade.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSvrConnMade.setDescription('Number of connections made with servers.')
axSmtpProxyStatSNATFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 13, 19, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSmtpProxyStatSNATFail.setStatus('current')
if mibBuilder.loadTexts: axSmtpProxyStatSNATFail.setDescription('Number of source NAT failures.')
axSslProxyStatsCurrProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsCurrProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsCurrProxyConns.setDescription('Number of currently active connections using the AX device as an SSL proxy.')
axSslProxyStatsTotalProxyConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsTotalProxyConns.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsTotalProxyConns.setDescription('Total number of connections using the AX device as an SSL proxy.')
axSslProxyStatsClientErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsClientErr.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsClientErr.setDescription('Number of client errors.')
axSslProxyStatsServerErr = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsServerErr.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsServerErr.setDescription('Number of server errors.')
axSslProxyStatsSessNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSessNotFound.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsSessNotFound.setDescription('Number of times a session was not found.')
axSslProxyStatsNoRoute = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsNoRoute.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsNoRoute.setDescription('Number of times no route was available.')
axSslProxyStatsSvrSelFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSvrSelFail.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsSvrSelFail.setDescription('Number of times selection or a real server failed.')
axSslProxyStatsSNATFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 14, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSslProxyStatsSNATFail.setStatus('current')
if mibBuilder.loadTexts: axSslProxyStatsSNATFail.setDescription('Number of occurrences of source NAT failure.')
axPersistentStatsUrlHashPersistOKPri = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKPri.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKPri.setDescription('Number of requests successfully sent to the primary server selected by URL hashing. The primary server is the one that was initially selected and then re-used based on the hash value.')
axPersistentStatsUrlHashPersistOKSec = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKSec.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistOKSec.setDescription('Number of requests that were sent to another server (a secondary server) because the primary server selected by URL hashing was unavailable.')
axPersistentStatsUrlHashPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsUrlHashPersistFail.setDescription('Number of requests that could not be fulfilled using URL hashing.')
axPersistentStatsSIPPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSIPPersistOK.setDescription('Number of requests successfully sent to the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatsSIPPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSIPPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSIPPersistFail.setDescription('Number of requests that could not be fulfilled by the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatsSSLSIDPersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistOK.setDescription('Total number of SSL session ID persistent success.')
axPersistentStatsSSLSIDPersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsSSLSIDPersistFail.setDescription('Total number of SSL session ID persistent failure.')
axPersistentStatsCookiePersistOK = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsCookiePersistOK.setDescription('Total number of cookie persistent success.')
axPersistentStatsCookiePersistFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsCookiePersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsCookiePersistFail.setDescription('Total number of cookie persistent failure.')
axPersistentStatsPersistCookieNotFound = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatsPersistCookieNotFound.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatsPersistCookieNotFound.setDescription('Total number of cookie persistent failure in not-found cases.')
axPersistentStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11), )
if mibBuilder.loadTexts: axPersistentStatTable.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatTable.setDescription('The Persistent STAT table.')
axPersistentStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1), ).setIndexNames((0, "A10-AX-MIB", "axPersistentStatCpuIndex"))
if mibBuilder.loadTexts: axPersistentStatEntry.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatEntry.setDescription('The Persistent STAT entry.')
axPersistentStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatCpuIndex.setDescription('The cpu index of Persistent STAT table')
axPersistentStatUrlHashPersistOKPri = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKPri.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKPri.setDescription('Number of requests successfully sent to the primary server selected by URL hashing. The primary server is the one that was initially selected and then re-used based on the hash value.')
axPersistentStatUrlHashPersistOKSec = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKSec.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistOKSec.setDescription('Number of requests that were sent to another server (a secondary server) because the primary server selected by URL hashing was unavailable.')
axPersistentStatUrlHashPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatUrlHashPersistFail.setDescription('Number of requests that could not be fulfilled using URL hashing.')
axPersistentStatSIPPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSIPPersistOK.setDescription('Number of requests successfully sent to the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatSIPPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSIPPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSIPPersistFail.setDescription('Number of requests that could not be fulfilled by the same server as previous requests from the same client, based on source-IP persistence.')
axPersistentStatSSLSIDPersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistOK.setDescription('Number of SSL session ID persistent success.')
axPersistentStatSSLSIDPersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatSSLSIDPersistFail.setDescription('Number of SSL session ID persistent failure.')
axPersistentStatCookiePersistOK = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistOK.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatCookiePersistOK.setDescription('Number of cookie persistent success.')
axPersistentStatCookiePersistFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatCookiePersistFail.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatCookiePersistFail.setDescription('Number of cookie persistent failure.')
axPersistentStatPersistCookieNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 15, 11, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axPersistentStatPersistCookieNotFound.setStatus('current')
if mibBuilder.loadTexts: axPersistentStatPersistCookieNotFound.setDescription('Number of cookie persistent failure in not-found cases.')
axSwitchStatsL2Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL2Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL2Forward.setDescription('Number of packets that have been Layer 2 switched.')
axSwitchStatsL3IPForward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPForward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL3IPForward.setDescription('Number of packets that have been Layer 3 routed.')
axSwitchStatsIPv4NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv4NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPv4NoRouteDrop.setDescription('Number of IPv4 packets that were dropped due to routing failures.')
axSwitchStatsL3IPv6Forward = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL3IPv6Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL3IPv6Forward.setDescription('Number of IPv6 packets that have been Layer 3 routed.')
axSwitchStatsIPv6NoRouteDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPv6NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPv6NoRouteDrop.setDescription('Number of IPv6 packets that were dropped due to routing failures.')
axSwitchStatsL4Process = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsL4Process.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsL4Process.setDescription('Number of packets that went to a VIP or NAT for processing.')
axSwitchStatsIncorrectLenDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIncorrectLenDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIncorrectLenDrop.setDescription('Number of packets dropped due to incorrect protocol length.A high value for this counter can indicate a packet length attack.')
axSwitchStatsProtoDownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsProtoDownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsProtoDownDrop.setDescription('Number of packets dropped because the corresponding protocol was disabled.')
axSwitchStatsUnknownProtoDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsUnknownProtoDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsUnknownProtoDrop.setDescription('Number of packets dropped because the protocol was unknown.')
axSwitchStatsTTLExceedDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsTTLExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsTTLExceedDrop.setDescription('Number of packets dropped due to TTL expiration.')
axSwitchStatsLinkdownDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsLinkdownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsLinkdownDrop.setDescription('Number of packets dropped because the outgoing link was down.')
axSwitchStatsSRCPortSuppress = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsSRCPortSuppress.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsSRCPortSuppress.setDescription('Packet drops because of source port suppression.')
axSwitchStatsVLANFlood = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsVLANFlood.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsVLANFlood.setDescription('Number of packets that have been broadcast to a VLAN.')
axSwitchStatsIPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragRcv.setDescription('Number of IPv4 fragments that have been received.')
axSwitchStatsARPReqRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPReqRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsARPReqRcv.setDescription('Number of ARP requests that have been received.')
axSwitchStatsARPRespRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsARPRespRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsARPRespRcv.setDescription('Number of ARP responses that have been received.')
axSwitchStatsFwdKernel = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsFwdKernel.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsFwdKernel.setDescription('Number of packets received by the kernel from data interfaces.')
axSwitchStatsIPTCPFragRcv = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPTCPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPTCPFragRcv.setDescription('Number of IP TCP fragments received.')
axSwitchStatsIPFragOverlap = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlap.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlap.setDescription('Number of overlapping fragments received.')
axSwitchStatsIPFragOverlapDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlapDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragOverlapDrop.setDescription('Number of fragments dropped due to overload.')
axSwitchStatsIPFragReasmOk = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmOk.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmOk.setDescription('Number of successfully reassembled IP fragments.')
axSwitchStatsIPFragReasmFail = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmFail.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsIPFragReasmFail.setDescription('Number of fragment reassembly failures.')
axSwitchStatsAnomLanAttackDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomLanAttackDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomLanAttackDrop.setDescription('Number of packets dropped by an IP land attack filter.This statistic and the other Anomaly statistics show how many packets were dropped by DDoS protection filters. For the AX device to drop these packets, the corresponding DDoS protection options must be enabled.')
axSwitchStatsAnomIPOptionDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomIPOptionDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomIPOptionDrop.setDescription('Number of packets dropped by an IP option filter.')
axSwitchStatsAnomPingDeathDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomPingDeathDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomPingDeathDrop.setDescription('Number of packets dropped by a ping-of-death filter.')
axSwitchStatsAnomAllFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAllFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomAllFragDrop.setDescription('Number of packets dropped by a frag filter.')
axSwitchStatsAnomTCPNoFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPNoFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomTCPNoFragDrop.setDescription('Number of packets dropped by a tcp-no-flag filter.')
axSwitchStatsAnomSYNFragDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomSYNFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomSYNFragDrop.setDescription('Number of packets dropped by a tcp-syn-frag filter.')
axSwitchStatsAnomTCPSynFinDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomTCPSynFinDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomTCPSynFinDrop.setDescription('Number of packets dropped by a tcp-syn-fin filter.')
axSwitchStatsAnomAnyDrop = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatsAnomAnyDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatsAnomAnyDrop.setDescription('Number of packets dropped by any type of hardware-based DDoS protection filter.')
axSwitchStatTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31), )
if mibBuilder.loadTexts: axSwitchStatTable.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatTable.setDescription('The switch status table.')
axSwitchStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1), ).setIndexNames((0, "A10-AX-MIB", "axSwitchStatCpuIndex"))
if mibBuilder.loadTexts: axSwitchStatEntry.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatEntry.setDescription('The Switch status entry.')
axSwitchStatCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatCpuIndex.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatCpuIndex.setDescription('The cpu index of Switch STAT table')
axSwitchStatL2Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL2Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL2Forward.setDescription('Number of packets that have been Layer 2 switched.')
axSwitchStatL3IPForward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPForward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL3IPForward.setDescription('Number of packets that have been Layer 3 routed.')
axSwitchStatIPv4NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv4NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPv4NoRouteDrop.setDescription('Number of IPv4 packets that were dropped due to routing failures.')
axSwitchStatL3IPv6Forward = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL3IPv6Forward.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL3IPv6Forward.setDescription('Number of IPv6 packets that have been Layer 3 routed.')
axSwitchStatIPv6NoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPv6NoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPv6NoRouteDrop.setDescription('Number of IPv6 packets that were dropped due to routing failures.')
axSwitchStatL4Process = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatL4Process.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatL4Process.setDescription('Number of packets that went to a VIP or NAT for processing.')
axSwitchStatIncorrectLenDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIncorrectLenDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIncorrectLenDrop.setDescription('Number of packets dropped due to incorrect protocol length.A high value for this counter can indicate a packet length attack.')
axSwitchStatProtoDownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatProtoDownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatProtoDownDrop.setDescription('Number of packets dropped because the corresponding protocol was disabled.')
axSwitchStatUnknownProtoDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatUnknownProtoDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatUnknownProtoDrop.setDescription('Number of packets dropped because the protocol was unknown.')
axSwitchStatTTLExceedDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatTTLExceedDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatTTLExceedDrop.setDescription('Number of packets dropped due to TTL expiration.')
axSwitchStatLinkdownDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatLinkdownDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatLinkdownDrop.setDescription('Number of packets dropped because the outgoing link was down.')
axSwitchStatSRCPortSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatSRCPortSuppress.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatSRCPortSuppress.setDescription('Packet drops because of source port suppression.')
axSwitchStatVLANFlood = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatVLANFlood.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatVLANFlood.setDescription('Number of packets that have been broadcast to a VLAN.')
axSwitchStatIPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragRcv.setDescription('Number of IPv4 fragments that have been received.')
axSwitchStatARPReqRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPReqRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatARPReqRcv.setDescription('Number of ARP requests that have been received.')
axSwitchStatARPRespRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatARPRespRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatARPRespRcv.setDescription('Number of ARP responses that have been received.')
axSwitchStatFwdKernel = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatFwdKernel.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatFwdKernel.setDescription('Number of packets received by the kernel from data interfaces.')
axSwitchStatIPTCPFragRcv = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPTCPFragRcv.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPTCPFragRcv.setDescription('Number of IP TCP fragments received.')
axSwitchStatIPFragOverlap = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlap.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragOverlap.setDescription('Number of overlapping fragments received.')
axSwitchStatIPFragOverlapDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragOverlapDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragOverlapDrop.setDescription('Number of fragments dropped due to overload.')
axSwitchStatIPFragReasmOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmOk.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragReasmOk.setDescription('Number of successfully reassembled IP fragments.')
axSwitchStatIPFragReasmFail = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatIPFragReasmFail.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatIPFragReasmFail.setDescription('Number of fragment reassembly failures.')
axSwitchStatAnomLanAttackDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomLanAttackDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomLanAttackDrop.setDescription('Number of packets dropped by an IP land attack filter.This statistic and the other Anomaly statistics show how many packets were dropped by DDoS protection filters. For the AX device to drop these packets, the corresponding DDoS protection options must be enabled.')
axSwitchStatAnomIPOptionDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomIPOptionDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomIPOptionDrop.setDescription('Number of packets dropped by an IP option filter.')
axSwitchStatAnomPingDeathDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomPingDeathDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomPingDeathDrop.setDescription('Number of packets dropped by a ping-of-death filter.')
axSwitchStatAnomAllFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAllFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomAllFragDrop.setDescription('Number of packets dropped by a frag filter.')
axSwitchStatAnomTCPNoFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPNoFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomTCPNoFragDrop.setDescription('Number of packets dropped by a tcp-no-flag filter.')
axSwitchStatAnomSYNFragDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomSYNFragDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomSYNFragDrop.setDescription('Number of packets dropped by a tcp-syn-frag filter.')
axSwitchStatAnomTCPSynFinDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomTCPSynFinDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomTCPSynFinDrop.setDescription('Number of packets dropped by a tcp-syn-fin filter.')
axSwitchStatAnomAnyDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 16, 31, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSwitchStatAnomAnyDrop.setStatus('current')
if mibBuilder.loadTexts: axSwitchStatAnomAnyDrop.setDescription('Number of packets dropped by any type of hardware-based DDoS protection filter.')
axHAConfigEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: axHAConfigEnabled.setDescription('The HA configuration enabled flag.')
axHAID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAID.setStatus('current')
if mibBuilder.loadTexts: axHAID.setDescription('Local configured HA group ID.')
axHASetID = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHASetID.setStatus('current')
if mibBuilder.loadTexts: axHASetID.setDescription('Local configured HA group set-id')
axHAPreemptStatusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAPreemptStatusEnabled.setStatus('current')
if mibBuilder.loadTexts: axHAPreemptStatusEnabled.setDescription('The HA preempt enabled flag')
axHATimeoutInterval = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutInterval.setStatus('current')
if mibBuilder.loadTexts: axHATimeoutInterval.setDescription('The HA time interval.')
axHATimeoutRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHATimeoutRetry.setStatus('current')
if mibBuilder.loadTexts: axHATimeoutRetry.setDescription('The HA retries when time out.')
axHAARPRetry = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAARPRetry.setStatus('current')
if mibBuilder.loadTexts: axHAARPRetry.setDescription('The ARP retries.')
axHAGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupCount.setStatus('current')
if mibBuilder.loadTexts: axHAGroupCount.setDescription('The number of valid HA groups.')
axHAGroupStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2), )
if mibBuilder.loadTexts: axHAGroupStatusTable.setStatus('current')
if mibBuilder.loadTexts: axHAGroupStatusTable.setDescription('A table contains the HA group status information.')
axHAGroupStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAGroupID"))
if mibBuilder.loadTexts: axHAGroupStatusEntry.setStatus('current')
if mibBuilder.loadTexts: axHAGroupStatusEntry.setDescription('Columns in the axHAGroupStatus Table')
axHAGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupID.setStatus('current')
if mibBuilder.loadTexts: axHAGroupID.setDescription('The HA group ID.')
axHAGroupLocalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalStatus.setStatus('current')
if mibBuilder.loadTexts: axHAGroupLocalStatus.setDescription('The local status of this HA group.')
axHAGroupLocalPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupLocalPriority.setStatus('current')
if mibBuilder.loadTexts: axHAGroupLocalPriority.setDescription('The local priority of this HA group.')
axHAGroupPeerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 9))).clone(namedValues=NamedValues(("standby", 0), ("active", 1), ("notConfigured", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerStatus.setStatus('current')
if mibBuilder.loadTexts: axHAGroupPeerStatus.setDescription('The peer status of this HA group.')
axHAGroupPeerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAGroupPeerPriority.setStatus('current')
if mibBuilder.loadTexts: axHAGroupPeerPriority.setDescription('The peer priority of this HA group.')
axHAFloatingIPCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPCount.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPCount.setDescription('The number of HA floating-IP entries.')
axHAFloatingIPTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2), )
if mibBuilder.loadTexts: axHAFloatingIPTable.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPTable.setDescription('A table contains the HA floating-IP information.')
axHAFloatingIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1), ).setIndexNames((0, "A10-AX-MIB", "axHAFloatingIPIndex"))
if mibBuilder.loadTexts: axHAFloatingIPEntry.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPEntry.setDescription('The index column in the axHAFloatingIP Table')
axHAFloatingIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPIndex.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPIndex.setDescription('The index column.')
axHAFloatingIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPAddress.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPAddress.setDescription('HA floating-IP address (either IPv4 or IPv6).')
axHAFloatingIPHaGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 17, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axHAFloatingIPHaGroupID.setStatus('current')
if mibBuilder.loadTexts: axHAFloatingIPHaGroupID.setDescription('The HA group ID for the HA floating-IP entry.')
axIpNatStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1))
axIpNatStatsIntfInsideOutside = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2))
axIpNatStatsDynamicMapping = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3))
axIpNatLsnStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4))
axIpNatStatsGlobalHits = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalHits.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsGlobalHits.setDescription('Total hits in the IP source NAT.')
axIpNatStatsGlobalMisses = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsGlobalMisses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsGlobalMisses.setDescription('Total misses in the IP source NAT')
axIpNatStatsIntfInsideOutsideTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1), )
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideTable.setDescription('A table has information of IP NAT interface inside/outside')
axIpNatStatsIntfInsideOutsideEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsInsideOutsideIntfIndex"))
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsIntfInsideOutsideEntry.setDescription('Columns in the axIpNatStatsIntfInsideOutside Table')
axIpNatStatsInsideOutsideIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfIndex.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfIndex.setDescription('The index of the AxIpNatStatsIntfInsideOutside table.')
axIpNatStatsInsideOutsideIntfName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfName.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfName.setDescription('The interface name, such as ethernet1, ethernet2, ve3, ...')
axIpNatStatsInsideOutsideIntfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inside", 0), ("outside", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfDirection.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsInsideOutsideIntfDirection.setDescription('The interface bind direction, inside or outside.')
axIpNatStatsDynamicMappingTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1), )
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTable.setDescription('A table has information of IP NAT interface inside/outside')
axIpNatStatsDynamicMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatStatsDynamicMappingAccessListID"))
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEntry.setDescription('Columns in the axIpNatStatsDynamicMapping Table')
axIpNatStatsDynamicMappingAccessListID = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAccessListID.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAccessListID.setDescription('The access list id.')
axIpNatStatsDynamicMappingPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingPoolName.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingPoolName.setDescription('The IP source NAT pool name')
axIpNatStatsDynamicMappingStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddress.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingStartAddress.setDescription('The start adddress of the pool')
axIpNatStatsDynamicMappingEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddress.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingEndAddress.setDescription('The end address of the pool')
axIpNatStatsDynamicMappingTotalAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTotalAddresses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingTotalAddresses.setDescription('The total addresses in the pool.')
axIpNatStatsDynamicMappingAllocAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAllocAddresses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingAllocAddresses.setDescription('The total allocated addresses in the pool')
axIpNatStatsDynamicMappingMissAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingMissAddresses.setStatus('current')
if mibBuilder.loadTexts: axIpNatStatsDynamicMappingMissAddresses.setDescription('The total misses in the pool')
axIpNatLsnGobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1))
axIpNatLsnTop5PrivateIpAddrTotSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2))
axIpNatLsnTop5PrivateIpAddrTotTcpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3))
axIpNatLsnTop5PrivateIpAddrTotUdpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4))
axIpNatLsnTop5PrivateIpAddrTotIcmpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5))
axIpNatLsnTop5UserPrivateIpAddrTotSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6))
axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7))
axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8))
axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9))
axIpNatLsnTop5GlobalPoolIpAddrTotUsers = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10))
axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11))
axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12))
axIpNatLsnTotalUserQuotaSessions = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTotalUserQuotaSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTotalUserQuotaSessions.setDescription('The total number of user-quota sessions.')
axIpNatLsnTotalIpAddrTranslated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTotalIpAddrTranslated.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTotalIpAddrTranslated.setDescription('The total number of global (translated) Ip addresses which has at least 1 users.')
axIpNatLsnTotalFullConeSessions = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTotalFullConeSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTotalFullConeSessions.setDescription('The total number of full cone sessions.')
axIpNatLsnTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4))
axIpNatLsnTrafficFullConeSessionCreated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFullConeSessionCreated.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficFullConeSessionCreated.setDescription('The total number of full-cone session created.')
axIpNatLsnTrafficFullConeSessionFreed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFullConeSessionFreed.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficFullConeSessionFreed.setDescription('The total number of full-cone session freed.')
axIpNatLsnTrafficFailsInFullConeSessionCreation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFailsInFullConeSessionCreation.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficFailsInFullConeSessionCreation.setDescription('The total number of full-cone session creation failure.')
axIpNatLsnTrafficHairpinSessionCreated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficHairpinSessionCreated.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficHairpinSessionCreated.setDescription('The total number of hairpin session created.')
axIpNatLsnTrafficEndpointIndepMapMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficEndpointIndepMapMatch.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficEndpointIndepMapMatch.setDescription('The total number of endpoint independent mapping match.')
axIpNatLsnTrafficEndpointIndepFilterMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficEndpointIndepFilterMatch.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficEndpointIndepFilterMatch.setDescription('The total number of endpoint independent filtering match.')
axIpNatLsnTrafficUserQuotasCreated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficUserQuotasCreated.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficUserQuotasCreated.setDescription('The total number of user-quotas created.')
axIpNatLsnTrafficUserQuotasFreed = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficUserQuotasFreed.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficUserQuotasFreed.setDescription('The total number of user-quotas freed.')
axIpNatLsnTrafficFailsInUserQuotasCreation = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficFailsInUserQuotasCreation.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficFailsInUserQuotasCreation.setDescription('The total number of user-quotas creation failure.')
axIpNatLsnTrafficIcmpUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficIcmpUserQuotasExceeded.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficIcmpUserQuotasExceeded.setDescription('The total number of ICMP user-quotas exceeded.')
axIpNatLsnTrafficUdpUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficUdpUserQuotasExceeded.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficUdpUserQuotasExceeded.setDescription('The total number of UDP user-quotas exceeded.')
axIpNatLsnTrafficTcpUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficTcpUserQuotasExceeded.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficTcpUserQuotasExceeded.setDescription('The total number of TCP user-quotas exceeded.')
axIpNatLsnTrafficExtendedUserQuotasMatch = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficExtendedUserQuotasMatch.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficExtendedUserQuotasMatch.setDescription('The total number of extended user-quotas matches.')
axIpNatLsnTrafficExtendedUserQuotasExceeded = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficExtendedUserQuotasExceeded.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficExtendedUserQuotasExceeded.setDescription('The total number of extended user-quotas exceeded.')
axIpNatLsnTrafficNatPortUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficNatPortUnavailable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficNatPortUnavailable.setDescription('The total number of NAT port unavailable.')
axIpNatLsnTrafficNewUserResourceUnavailable = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 1, 4, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTrafficNewUserResourceUnavailable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTrafficNewUserResourceUnavailable.setDescription('The total number of NAT resource unavailable for new users.')
axIpNatLsnTop5PrivateIpAddrTotSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotSessionTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotSessionTable.setDescription('A table containing Top 5 private IPs and total number of sessions(ports).')
axIpNatLsnTop5PrivateIpAddrTotSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddr"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotSessionEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotSessionEntry.setDescription('Columns in the axIpNatLsnTop5PrivateIpAddrTotSessions Table')
axIpNatLsnTop5PrivateIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddr.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddr.setDescription('The private IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumSessions.setDescription('The total number of sessions in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddr.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddr.setDescription('The global IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotTcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotTcpPortTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotTcpPortTable.setDescription('A table containing Top 5 private IPs and total number of TCP ports.')
axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddrInTcpPort"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry.setDescription('Columns in the axIpNatLsnTop5PrivateIpAddrTotTcpPorts Table')
axIpNatLsnTop5PrivateIpAddrInTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInTcpPort.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInTcpPort.setDescription('The private IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts.setDescription('The total number of TCP sessions in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 3, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort.setDescription('The global IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotUdpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotUdpPortTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotUdpPortTable.setDescription('A table containing Top 5 private IPs and total number of UDP ports.')
axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddrInUdpPort"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry.setDescription('Columns in the axIpNatLsnTop5PrivateIpAddrTotUdpPorts Table')
axIpNatLsnTop5PrivateIpAddrInUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInUdpPort.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInUdpPort.setDescription('The private IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts.setDescription('The total number of UDP sessions in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 4, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort.setDescription('The global IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable.setDescription('A table containing Top 5 private IPs and total number of ICMP ports.')
axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5PrivateIpAddrInIcmpPort"))
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry.setDescription('Columns in the axIpNatLsnTop5PrivateIpAddrTotIcmpPorts Table')
axIpNatLsnTop5PrivateIpAddrInIcmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInIcmpPort.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrInIcmpPort.setDescription('The private IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts.setDescription('The total number of ICMP sessions in the Top 5 private IP address entry.')
axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort.setDescription('The global IP address in the Top 5 private IP address entry.')
axIpNatLsnTop5UserPrivateIpAddrTotSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotSessionTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotSessionTable.setDescription('A table containing Top 5 users private IPs and total number of sessions. To monitor users who use most of resources: pick up global pool IP which ports are most used total of TCP/UDP/ICMP sessions; then, find out the top 5 users who use the global pool most used total of TCP/UDP/ICMP sessions.')
axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddr"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry.setDescription('Columns in the axIpNatLsnTop5UserPrivateIpAddrTotSessions Table')
axIpNatLsnTop5UserPrivateIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddr.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddr.setDescription('The private IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotNumSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumSessions.setDescription('The total number of TCP/UDP/ICMP sessions in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr.setDescription('The global IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable.setDescription('A table containing Top 5 users private IPs and total number of sessions. To monitor users who use most of resources: pick up global pool IP which ports are most used total of TCP/UDP/ICMP sessions; then, find out the top 5 users who use the global pool most used total of TCP sessions.')
axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddrInTcp"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry.setDescription('Columns in the axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions Table')
axIpNatLsnTop5UserPrivateIpAddrInTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInTcp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInTcp.setDescription('The private IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions.setDescription('The total number of TCP sessions in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp.setDescription('The global IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable.setDescription('A table containing Top 5 users private IPs and total number of sessions. To monitor users who use most of resources: pick up global pool IP which ports are most used total of TCP/UDP/ICMP sessions; then, find out the top 5 users who use the global pool most used total of UDP sessions.')
axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddrInUdp"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry.setDescription('Columns in the axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions Table')
axIpNatLsnTop5UserPrivateIpAddrInUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInUdp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInUdp.setDescription('The private IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions.setDescription('The total number of UDP sessions in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 8, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp.setDescription('The global IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable.setDescription('A table containing Top 5 users private IPs and total number of sessions. To monitor users who use most of resources: pick up global pool IP which ports are most used total of TCP/UDP/ICMP sessions; then, find out the top 5 users who use the global pool most used total of ICMP sessions.')
axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5UserPrivateIpAddrInIcmp"))
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry.setDescription('Columns in the axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions Table')
axIpNatLsnTop5UserPrivateIpAddrInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInIcmp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrInIcmp.setDescription('The private IP address in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions.setDescription('The total number of ICMP sessions in the Top 5 user entry.')
axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp.setDescription('The global IP address in the Top 5 user entry.')
axIpNatLsnTop5GlobalPoolIpAddrTotUserTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUserTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUserTable.setDescription('A table containing Top 5 global pool IPs and total number of users.')
axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5GlobalPoolIpAddr"))
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry.setDescription('Columns in the axIpNatLsnTop5GlobalPoolIpAddrTotUsers Table')
axIpNatLsnTop5GlobalPoolIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddr.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddr.setDescription('The global pool IP address in the Top 5 global pool IPs entry.')
axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers.setDescription('The total number of users in the Top 5 global pool IPs entry.')
axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable.setDescription('A table containing Top 5 global pool IPs and total number of TCP ports.')
axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5GlobalPoolIpAddrInTcp"))
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry.setDescription('Columns in the axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts Table')
axIpNatLsnTop5GlobalPoolIpAddrInTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrInTcp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrInTcp.setDescription('The global pool IP address in the Top 5 global pool IPs entry.')
axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts.setDescription('The total number of TCP ports in the Top 5 global pool IPs entry.')
axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable = MibTable((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1), )
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable.setDescription('A table containing Top 5 global pool IPs and total number of UDP ports.')
axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1, 1), ).setIndexNames((0, "A10-AX-MIB", "axIpNatLsnTop5GlobalPoolIpAddrInUdp"))
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry.setDescription('Columns in the axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts Table')
axIpNatLsnTop5GlobalPoolIpAddrInUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrInUdp.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrInUdp.setDescription('The global pool IP address in the Top 5 global pool IPs entry.')
axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 18, 4, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts.setStatus('current')
if mibBuilder.loadTexts: axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts.setDescription('The total number of UDP ports in the Top 5 global pool IPs entry.')
axSessionStatsGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1))
axSessionGlobalStatTCPEstablished = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPEstablished.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatTCPEstablished.setDescription('The count of TCP established.')
axSessionGlobalStatTCPHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPHalfOpen.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatTCPHalfOpen.setDescription('The count of TCP half open.')
axSessionGlobalStatUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatUDP.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatUDP.setDescription('The count of UDP connections.')
axSessionGlobalStatNonTcpUdpIPSession = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatNonTcpUdpIPSession.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatNonTcpUdpIPSession.setDescription('The count of non TCP/UDP IP sessions.')
axSessionGlobalStatOther = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatOther.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatOther.setDescription('The count of others.')
axSessionGlobalStatReverseNATTCP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATTCP.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATTCP.setDescription('The count of reverse NAT TCP.')
axSessionGlobalStatReverseNATUDP = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATUDP.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatReverseNATUDP.setDescription('The count of reverse NAT UDP.')
axSessionGlobalStatFreeBufferCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeBufferCount.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatFreeBufferCount.setDescription('The count of free buffer.')
axSessionGlobalStatFreeCurrentConns = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatFreeCurrentConns.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatFreeCurrentConns.setDescription('The count of free current connections.')
axSessionGlobalStatConnCount = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnCount.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnCount.setDescription('The count of current connections.')
axSessionGlobalStatConnFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnFree.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnFree.setDescription('The count of freed connections.')
axSessionGlobalStatTCPSynHalfOpen = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatTCPSynHalfOpen.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatTCPSynHalfOpen.setDescription('The count of TCP SYN half open.')
axSessionGlobalStatConnSMPAllocated = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPAllocated.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPAllocated.setDescription('The count of allocated SMP connections.')
axSessionGlobalStatConnSMPFree = MibScalar((1, 3, 6, 1, 4, 1, 22610, 2, 4, 3, 19, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPFree.setStatus('current')
if mibBuilder.loadTexts: axSessionGlobalStatConnSMPFree.setDescription('The count of free SMP connections.')
mibBuilder.exportSymbols("A10-AX-MIB", axTcpProxyStatMemAlloc=axTcpProxyStatMemAlloc, axServerAddressInPort=axServerAddressInPort, axTCPProxyStatTable=axTCPProxyStatTable, axSystemShutdown=axSystemShutdown, axHAFloatingIPTable=axHAFloatingIPTable, axServerNameInPort=axServerNameInPort, axLogSyslogPort=axLogSyslogPort, axServiceGroupMemberStatTotConns=axServiceGroupMemberStatTotConns, axVirtualServerPortName=axVirtualServerPortName, axNetStatTCPSynCookieFail=axNetStatTCPSynCookieFail, axIpNatLsnTop5PrivateIpAddrInTcpPort=axIpNatLsnTop5PrivateIpAddrInTcpPort, axNetStatCreateSSLSIDFail=axNetStatCreateSSLSIDFail, axHAFloatingIPEntry=axHAFloatingIPEntry, axTcpProxyStats=axTcpProxyStats, axTcpProxyStatTotalRstSent=axTcpProxyStatTotalRstSent, axServerEnabledState=axServerEnabledState, axNotificationCurrentUpPorts=axNotificationCurrentUpPorts, axHAGroupLocalStatus=axHAGroupLocalStatus, axSystemStart=axSystemStart, axNetStatProxyNoSockDrops=axNetStatProxyNoSockDrops, axInterfaceAlias=axInterfaceAlias, axNetStatTCPSYNCookieSent=axNetStatTCPSYNCookieSent, axNetworkNotifications=axNetworkNotifications, axVirtualServerPortStatBytesOut=axVirtualServerPortStatBytesOut, axVirtualServerPortRTSPTemplate=axVirtualServerPortRTSPTemplate, axSmtpProxyStatSmtpReq=axSmtpProxyStatSmtpReq, axVirtualServerPortReachConnLimit=axVirtualServerPortReachConnLimit, axVlans=axVlans, axServiceGroupStatPktsOut=axServiceGroupStatPktsOut, axVirtualServerPortNum=axVirtualServerPortNum, axInterfaceName=axInterfaceName, axInterfaceMacAddr=axInterfaceMacAddr, axSessionGlobalStatTCPSynHalfOpen=axSessionGlobalStatTCPSynHalfOpen, axSysAFleXEngineVersion=axSysAFleXEngineVersion, axInterfaceStatDropsOut=axInterfaceStatDropsOut, axServerPortNumInServiceGroupMember=axServerPortNumInServiceGroupMember, axIpNatLsnTop5GlobalPoolIpAddr=axIpNatLsnTop5GlobalPoolIpAddr, axVirtualServerPortPersistTemplateType=axVirtualServerPortPersistTemplateType, axHttpProxyStatTotalSNATErr=axHttpProxyStatTotalSNATErr, axVirtualServerHAGroup=axVirtualServerHAGroup, axApplicationBufferReachLimit=axApplicationBufferReachLimit, axNetStatTCPSYNCookieSnt=axNetStatTCPSYNCookieSnt, axServerConnResume=axServerConnResume, axSwitchStatARPRespRcv=axSwitchStatARPRespRcv, axTcpProxyStatConnAttempFail=axTcpProxyStatConnAttempFail, axNotificationVirtualServerPort=axNotificationVirtualServerPort, axSwitchStatEntry=axSwitchStatEntry, axHttpProxyStatServerPreMatureClose=axHttpProxyStatServerPreMatureClose, axSystemRestart=axSystemRestart, axConnReuseStatTotalTerminated=axConnReuseStatTotalTerminated, axServerDown=axServerDown, axConnReuseStatTotalMissedResponse=axConnReuseStatTotalMissedResponse, axSmtpProxyStats=axSmtpProxyStats, axIpNatStats=axIpNatStats, axTcpProxyStatActiveOpenConns=axTcpProxyStatActiveOpenConns, axInterfaceStatIndex=axInterfaceStatIndex, axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry=axIpNatLsnTop5PrivateIpAddrTotTcpPortEntry, axSwitchStatsAnomLanAttackDrop=axSwitchStatsAnomLanAttackDrop, axServerPortStat=axServerPortStat, axConnReuseStatOpenPersist=axConnReuseStatOpenPersist, axAppGlobalTotalCurrentConnections=axAppGlobalTotalCurrentConnections, axConnReuseStatTotalDelayedUNBind=axConnReuseStatTotalDelayedUNBind, axPersistentStatPersistCookieNotFound=axPersistentStatPersistCookieNotFound, axSessionGlobalStatConnSMPFree=axSessionGlobalStatConnSMPFree, axPersistentStatCookiePersistOK=axPersistentStatCookiePersistOK, axSslProxyStatsSessNotFound=axSslProxyStatsSessNotFound, axNetStatServerSSLSIDMatch=axNetStatServerSSLSIDMatch, axFastHttpProxyStatTotalNoProxy=axFastHttpProxyStatTotalNoProxy, axPersistentStatsCookiePersistFail=axPersistentStatsCookiePersistFail, axSysCpuTable=axSysCpuTable, axVirtualServerStatName=axVirtualServerStatName, axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionEntry, axVirtualServerStatPktsOut=axVirtualServerStatPktsOut, axSessionGlobalStatOther=axSessionGlobalStatOther, axGlobalTotalAppPacketDrop=axGlobalTotalAppPacketDrop, axServerPortStatTotalConns=axServerPortStatTotalConns, axConnReuseStatTotalOpenPersist=axConnReuseStatTotalOpenPersist, axSessionGlobalStatNonTcpUdpIPSession=axSessionGlobalStatNonTcpUdpIPSession, axVirtualServerPortTCPProxyTemplate=axVirtualServerPortTCPProxyTemplate, axSmtpProxyStatsCurrProxyConns=axSmtpProxyStatsCurrProxyConns, axSwitchStatAnomTCPNoFragDrop=axSwitchStatAnomTCPNoFragDrop, axNetStatEntrySSLSIDPersistFail=axNetStatEntrySSLSIDPersistFail, axIpNatLsnTop5PrivateIpAddrTotSessionEntry=axIpNatLsnTop5PrivateIpAddrTotSessionEntry, axVirtualServerDisplayStatus=axVirtualServerDisplayStatus, axSystemFanFailure=axSystemFanFailure, axVirtualServerPortStatBytesIn=axVirtualServerPortStatBytesIn, axServerPortStatCurConns=axServerPortStatCurConns, axVlanRouterInterface=axVlanRouterInterface, axHA=axHA, axSslStatAvailCryptoEngine=axSslStatAvailCryptoEngine, axSessionGlobalStatFreeBufferCount=axSessionGlobalStatFreeBufferCount, axSwitchStatsAnomSYNFragDrop=axSwitchStatsAnomSYNFragDrop, axSslStatTable=axSslStatTable, axConnReuseStatTable=axConnReuseStatTable, axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry=axIpNatLsnTop5PrivateIpAddrTotUdpPortEntry, axSysCpuIndex=axSysCpuIndex, axSwitchStatCpuIndex=axSwitchStatCpuIndex, axTcpProxyStatTotalOutTCPPkt=axTcpProxyStatTotalOutTCPPkt, axSmtpProxyStatsSvrConnMade=axSmtpProxyStatsSvrConnMade, axInterfaceStatDropsIn=axInterfaceStatDropsIn, axIpNatStatsDynamicMappingAccessListID=axIpNatStatsDynamicMappingAccessListID, axInterfaceIndex=axInterfaceIndex, axSysVersion=axSysVersion, axServerPortStatPktsIn=axServerPortStatPktsIn, axSslStatSSLHWRingFull=axSslStatSSLHWRingFull, axSysSerialNumber=axSysSerialNumber, axSmtpProxyStatSmtpReqSucc=axSmtpProxyStatSmtpReqSucc, axFastHttpProxyStatTotalReqPktOutOrder=axFastHttpProxyStatTotalReqPktOutOrder, axSwitchStatsARPRespRcv=axSwitchStatsARPRespRcv, axSyslogTrap=axSyslogTrap, axSwitchStatIncorrectLenDrop=axSwitchStatIncorrectLenDrop, axSysMemory=axSysMemory, axServerHealthMonitor=axServerHealthMonitor, axSmtpProxyStatCurrProxyConn=axSmtpProxyStatCurrProxyConn, axNetwork=axNetwork, axNetStatEntryNoSYNPktDropRST=axNetStatEntryNoSYNPktDropRST, axAppNotifications=axAppNotifications, axServiceGroupMemberEntry=axServiceGroupMemberEntry, axAppGlobals=axAppGlobals, axNetStatNoVportDrop=axNetStatNoVportDrop, axLogSyslogHostIndex=axLogSyslogHostIndex, axNetStatSourceNATFail=axNetStatSourceNATFail, axSwitchStatAnomAnyDrop=axSwitchStatAnomAnyDrop, axHAGroupStatusTable=axHAGroupStatusTable, axIpNatLsnStats=axIpNatLsnStats, axSslStats=axSslStats, axServerPortStatTotalL7Reqs=axServerPortStatTotalL7Reqs, axSslStatSSLFailedCAVfy=axSslStatSSLFailedCAVfy, axSwitchStatsProtoDownDrop=axSwitchStatsProtoDownDrop, axFastHttpProxyStatTotalSvrSelErr=axFastHttpProxyStatTotalSvrSelErr, axNetStatEntryClientSSLSIDMatch=axNetStatEntryClientSSLSIDMatch, axServiceGroupStatPersistConns=axServiceGroupStatPersistConns, axIpNatStatsDynamicMappingEntry=axIpNatStatsDynamicMappingEntry, axHttpProxyStatTotalReqErr=axHttpProxyStatTotalReqErr, axServiceConnLimit=axServiceConnLimit, axNotificationMsg=axNotificationMsg, axSwitchStatAnomSYNFragDrop=axSwitchStatAnomSYNFragDrop, axHAGroup=axHAGroup, axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts=axIpNatLsnTop5PrivateIpAddrTotNumTcpPorts, axFastHttpProxyStatNoTupleErr=axFastHttpProxyStatNoTupleErr, axInterfaceStatTable=axInterfaceStatTable, axSwitchStatsAnomAnyDrop=axSwitchStatsAnomAnyDrop, axVirtualServerPortStatPktsOut=axVirtualServerPortStatPktsOut, axSysFanStatusTable=axSysFanStatusTable, axSessionStats=axSessionStats, axSwitchStatsIPFragReasmFail=axSwitchStatsIPFragReasmFail, axNotificationVirtualServerPortType=axNotificationVirtualServerPortType, axNetStatIPOutNoRoute=axNetStatIPOutNoRoute, axInterfaceStatBytesIn=axInterfaceStatBytesIn, axServiceGroupMemberStatAddrType=axServiceGroupMemberStatAddrType, axNetStatConnRateLimitDrops=axNetStatConnRateLimitDrops, axNetStat2TCPReceive=axNetStat2TCPReceive, axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotUdpPorts, axSystem=axSystem, axIpNatStatsDynamicMappingTable=axIpNatStatsDynamicMappingTable, axTcpProxyStatTCPLastACKState=axTcpProxyStatTCPLastACKState, axPersistentStatCpuIndex=axPersistentStatCpuIndex, axInterfaceStatEntry=axInterfaceStatEntry, axVirtualServerPortStatTotConns=axVirtualServerPortStatTotConns, axAppGlobalTotalL7Requests=axAppGlobalTotalL7Requests, axTcpProxyStatTotalOutPkt=axTcpProxyStatTotalOutPkt, axServerStatServerCurConns=axServerStatServerCurConns, axHAGroupPeerPriority=axHAGroupPeerPriority, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInIcmp, axInterfaceMtu=axInterfaceMtu, axAppGlobalAllowedMinValue=axAppGlobalAllowedMinValue, axServiceGroupType=axServiceGroupType, axSysCpuUsageValue=axSysCpuUsageValue, axNetStatNoVportDrops=axNetStatNoVportDrops, axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable=axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortTable, axTcpProxyStatTCPCloseWState=axTcpProxyStatTCPCloseWState, axServerPortMonitorState=axServerPortMonitorState, axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers=axIpNatLsnTop5GlobalPoolIpAddrTotNumUsers, axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable=axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortTable, axTcpProxyStatTotalActiveOpenConn=axTcpProxyStatTotalActiveOpenConn, axNotificationSLBPort=axNotificationSLBPort, axSysCpuNumber=axSysCpuNumber, axConnReuseStatTotalUNBound=axConnReuseStatTotalUNBound, axNetStatTCPNoSLB=axNetStatTCPNoSLB, axSslProxyStatsTotalProxyConns=axSslProxyStatsTotalProxyConns, axHttpProxyStatTotalPreMatureClose=axHttpProxyStatTotalPreMatureClose, axIpNatLsnTop5PrivateIpAddrTotTcpPortTable=axIpNatLsnTop5PrivateIpAddrTotTcpPortTable, axHttpProxyStatTotalFwdDataReqErr=axHttpProxyStatTotalFwdDataReqErr, axVirtualServerPortStatEntry=axVirtualServerPortStatEntry, axSwitchStatsIPFragOverlap=axSwitchStatsIPFragOverlap, axServiceGroupNameInMember=axServiceGroupNameInMember, axHttpProxyStatParseReqFail=axHttpProxyStatParseReqFail, axConnReuseStatCpuIndex=axConnReuseStatCpuIndex, axServerStatServerBytesOut=axServerStatServerBytesOut, axHAFloatingIPCount=axHAFloatingIPCount, axNetStats=axNetStats, axAppGlobalAllowedMaxValue=axAppGlobalAllowedMaxValue, axServiceGroupCount=axServiceGroupCount, axSwitchStatsAnomAllFragDrop=axSwitchStatsAnomAllFragDrop, axServerPortStatStatus=axServerPortStatStatus, axHttpProxyStatHttpReqSucc=axHttpProxyStatHttpReqSucc, axFastHttpProxyStatTotalConn=axFastHttpProxyStatTotalConn, axIpNatStatsDynamicMapping=axIpNatStatsDynamicMapping, axLogSyslogPri=axLogSyslogPri, axIpNatLsnTrafficNewUserResourceUnavailable=axIpNatLsnTrafficNewUserResourceUnavailable, axHATimeoutRetry=axHATimeoutRetry, axSwitchStatsL4Process=axSwitchStatsL4Process, axSslStatSSLMemUsage=axSslStatSSLMemUsage, axSysInfo=axSysInfo, axSslStatCurrSSLConn=axSslStatCurrSSLConn, axServiceGroupMemberStatTotalSuccL7Reqs=axServiceGroupMemberStatTotalSuccL7Reqs, axNetStatProxyNoSockDrop=axNetStatProxyNoSockDrop, axVirtualServerPortStatPktsIn=axVirtualServerPortStatPktsIn, axSslStatTotalSSLConn=axSslStatTotalSSLConn, axVirtualServerPortConnReuseTemplate=axVirtualServerPortConnReuseTemplate, axFastHttpProxyStatReqReTran=axFastHttpProxyStatReqReTran, axSwitchStatVLANFlood=axSwitchStatVLANFlood, axFastHttpProxyStatTotalSRst=axFastHttpProxyStatTotalSRst, axInterfaceStatMcastOut=axInterfaceStatMcastOut, axServerPortStatBytesOut=axServerPortStatBytesOut, axGlobalTotalL4Session=axGlobalTotalL4Session, axSysCpuUsageEntry=axSysCpuUsageEntry, axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotNumTcpPorts, axVirtualServerPortStatTotalL7Reqs=axVirtualServerPortStatTotalL7Reqs, PYSNMP_MODULE_ID=axMgmt, axServerPort=axServerPort, axSyslogMsg=axSyslogMsg, axLogBufferSize=axLogBufferSize, axHttpProxyStatServerReSel=axHttpProxyStatServerReSel, axLogEmailPri=axLogEmailPri, axSessionGlobalStatUDP=axSessionGlobalStatUDP, axVirtualServerPortPersistTempl=axVirtualServerPortPersistTempl, axSslStatEntry=axSslStatEntry, axHttpProxyStatTable=axHttpProxyStatTable, axIpNatLsnTrafficIcmpUserQuotasExceeded=axIpNatLsnTrafficIcmpUserQuotasExceeded, axVirtualServerStatTable=axVirtualServerStatTable, axConnReuseStatTotalDelayedUNBound=axConnReuseStatTotalDelayedUNBound, axIpNatStatsGlobalHits=axIpNatStatsGlobalHits, axNotificationConfiguredThreshold=axNotificationConfiguredThreshold, axServerNameInServiceGroupMember=axServerNameInServiceGroupMember, axHttpProxyStatTotalSvrSelErr=axHttpProxyStatTotalSvrSelErr, axIpNatStatsInsideOutsideIntfName=axIpNatStatsInsideOutsideIntfName, axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionEntry, axSyslogTrapPrefix=axSyslogTrapPrefix, axPersistentStatsUrlHashPersistOKSec=axPersistentStatsUrlHashPersistOKSec, axSwitchStatAnomIPOptionDrop=axSwitchStatAnomIPOptionDrop, axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort=axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInTcpPort, axFastHttpProxyStatTotalSNATErr=axFastHttpProxyStatTotalSNATErr, axHAActiveActive=axHAActiveActive, axSwitchStatsIPFragReasmOk=axSwitchStatsIPFragReasmOk, axServiceGroupStatBytesOut=axServiceGroupStatBytesOut, axServiceGroupMemberStatName=axServiceGroupMemberStatName, axHttpProxyStatTotalSvrConn=axHttpProxyStatTotalSvrConn, axFastHttpProxyStatServerReSel=axFastHttpProxyStatServerReSel, axVirtualServerAddress=axVirtualServerAddress, axNetStatTable=axNetStatTable, axSystemPowerSupplyFailure=axSystemPowerSupplyFailure, axLogConsolePri=axLogConsolePri, axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort=axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInIcmpPort)
mibBuilder.exportSymbols("A10-AX-MIB", axHAGroupPeerStatus=axHAGroupPeerStatus, axVirtualServerStatPortNum=axVirtualServerStatPortNum, axNetStatUDPReceive=axNetStatUDPReceive, axFtpStatTotalDataSession=axFtpStatTotalDataSession, axServerStatServerPktsOut=axServerStatServerPktsOut, axSessionGlobalStatReverseNATUDP=axSessionGlobalStatReverseNATUDP, axFastHttpProxyStatFwdReqDataFail=axFastHttpProxyStatFwdReqDataFail, axIpNatLsnTop5PrivateIpAddrInUdpPort=axIpNatLsnTop5PrivateIpAddrInUdpPort, axAppGlobalTotalNewIPNatConnections=axAppGlobalTotalNewIPNatConnections, axNetStatNoSynPktDrop=axNetStatNoSynPktDrop, axVlanCfg=axVlanCfg, axHttpProxyStatTotalSuccReq=axHttpProxyStatTotalSuccReq, axSysCpuUsagePeriodIndex=axSysCpuUsagePeriodIndex, axVirtualServerPortUDPTemplate=axVirtualServerPortUDPTemplate, axServiceGroupStatPktsIn=axServiceGroupStatPktsIn, axFastHttpProxyStatReqPktOutOrder=axFastHttpProxyStatReqPktOutOrder, axSmtpProxyStatsServerRST=axSmtpProxyStatsServerRST, axSslProxyStatsSvrSelFail=axSslProxyStatsSvrSelFail, axVirtualServerPortEnabled=axVirtualServerPortEnabled, axNetStatEntryServerSSLSIDReset=axNetStatEntryServerSSLSIDReset, axSystemControlCpuHigh=axSystemControlCpuHigh, axSslProxyStatsNoRoute=axSslProxyStatsNoRoute, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInTcp, axHATimeoutInterval=axHATimeoutInterval, axSslProxyStats=axSslProxyStats, axServerPortStatusInServiceGroupMemberStat=axServerPortStatusInServiceGroupMemberStat, axConnReuseStatTotalTerm=axConnReuseStatTotalTerm, axSmtpProxyStatNoTupleError=axSmtpProxyStatNoTupleError, axTcpProxyStatTCPFINW1State=axTcpProxyStatTCPFINW1State, axSwitchStatIPFragReasmOk=axSwitchStatIPFragReasmOk, axFastHttpProxyStatTotalSvrConn=axFastHttpProxyStatTotalSvrConn, axLogBufferPri=axLogBufferPri, axNetStatServerSelFails=axNetStatServerSelFails, axSysCpuUsageTable=axSysCpuUsageTable, axPersistentStatUrlHashPersistOKSec=axPersistentStatUrlHashPersistOKSec, axInterfaceStatErrorsIn=axInterfaceStatErrorsIn, axVirtualServerPortTCPTemplate=axVirtualServerPortTCPTemplate, axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionEntry, axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts=axIpNatLsnTop5PrivateIpAddrTotNumUdpPorts, axIpNatLsnTop5PrivateIpAddrTotSessionTable=axIpNatLsnTop5PrivateIpAddrTotSessionTable, axSysHwInfo=axSysHwInfo, axServiceGroups=axServiceGroups, axIpNatLsnTrafficUserQuotasFreed=axIpNatLsnTrafficUserQuotasFreed, axSmtpProxyStatServerResel=axSmtpProxyStatServerResel, axServiceGroupEntry=axServiceGroupEntry, axPersistentStatsCookiePersistOK=axPersistentStatsCookiePersistOK, axServerPortStatTotalCurrL7Reqs=axServerPortStatTotalCurrL7Reqs, axSecondaryHardDiskFailure=axSecondaryHardDiskFailure, axVirtualServer=axVirtualServer, axGlobalAppBuffer=axGlobalAppBuffer, axSwitchStatsL2Forward=axSwitchStatsL2Forward, axMemoryUsageHigh=axMemoryUsageHigh, axVlanCfgMemberEntry=axVlanCfgMemberEntry, axTcpProxyStatTotalConnAttemptFail=axTcpProxyStatTotalConnAttemptFail, axSmtpProxyStatsReqPktOutOrder=axSmtpProxyStatsReqPktOutOrder, axServiceGroupStatTable=axServiceGroupStatTable, axTcpProxyStatTotalCurrEstConn=axTcpProxyStatTotalCurrEstConn, axNetStatTCPOutRSTACKattack=axNetStatTCPOutRSTACKattack, axIpNatStatsDynamicMappingPoolName=axIpNatStatsDynamicMappingPoolName, axNetStatServerSSLSIDReset=axNetStatServerSSLSIDReset, axLogEmailAddr=axLogEmailAddr, axPersistentStats=axPersistentStats, axTcpProxyStatCurrEstConns=axTcpProxyStatCurrEstConns, axSmtpProxyStatServerRST=axSmtpProxyStatServerRST, axInterfaceStatPktsOut=axInterfaceStatPktsOut, axPersistentStatsSIPPersistOK=axPersistentStatsSIPPersistOK, axPersistentStatsPersistCookieNotFound=axPersistentStatsPersistCookieNotFound, axHttpProxyStatTotalNoTuple=axHttpProxyStatTotalNoTuple, axSmtpProxyStatServerSelFail=axSmtpProxyStatServerSelFail, axSmtpProxyStatClientRST=axSmtpProxyStatClientRST, axInterfaceStatus=axInterfaceStatus, axServerStatEntry=axServerStatEntry, axNotificationVirtualServer=axNotificationVirtualServer, axNetStatEntryCreateSSLSIDSucc=axNetStatEntryCreateSSLSIDSucc, axVirtualServerStatTotalL7Reqs=axVirtualServerStatTotalL7Reqs, axFastHttpProxyStatTotalCRst=axFastHttpProxyStatTotalCRst, axNetStat2UDPReceive=axNetStat2UDPReceive, axSysMemoryUsage=axSysMemoryUsage, axIpNatLsnTop5PrivateIpAddrTotSessions=axIpNatLsnTop5PrivateIpAddrTotSessions, axSwitchStatsIPv4NoRouteDrop=axSwitchStatsIPv4NoRouteDrop, axIpNatLsnTrafficExtendedUserQuotasMatch=axIpNatLsnTrafficExtendedUserQuotasMatch, axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions=axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessions, axVlanName=axVlanName, axSyslogPriority=axSyslogPriority, axVirtualServerPortStatName=axVirtualServerPortStatName, axFastHttpProxyStatTotalReqErr=axFastHttpProxyStatTotalReqErr, axFastHttpProxyStatServerConnMade=axFastHttpProxyStatServerConnMade, axTcpProxyStatTCPCloseState=axTcpProxyStatTCPCloseState, axNetStatEntryConnRateLimitResets=axNetStatEntryConnRateLimitResets, axIpNatLsnTrafficUdpUserQuotasExceeded=axIpNatLsnTrafficUdpUserQuotasExceeded, axSwitchStatAnomPingDeathDrop=axSwitchStatAnomPingDeathDrop, axIpNatLsnTop5GlobalPoolIpAddrTotUserTable=axIpNatLsnTop5GlobalPoolIpAddrTotUserTable, axTcpProxyStatPassiveOpenConns=axTcpProxyStatPassiveOpenConns, axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotNumUdpPorts, axNotifications=axNotifications, axPersistentStatSIPPersistOK=axPersistentStatSIPPersistOK, axSessionGlobalStatConnFree=axSessionGlobalStatConnFree, axPersistentStatSSLSIDPersistOK=axPersistentStatSSLSIDPersistOK, axNotificationDropEventReason=axNotificationDropEventReason, axTcpProxyStatInputErr=axTcpProxyStatInputErr, axIpNatLsnTrafficFailsInFullConeSessionCreation=axIpNatLsnTrafficFailsInFullConeSessionCreation, axVirtualServerReachConnRateLimit=axVirtualServerReachConnRateLimit, axIpNatLsnTop5PrivateIpAddrTotUdpPortTable=axIpNatLsnTop5PrivateIpAddrTotUdpPortTable, axInterfaceStatErrorsOut=axInterfaceStatErrorsOut, axHttpProxyStatTotalSRst=axHttpProxyStatTotalSRst, axServerStatPortNum=axServerStatPortNum, axSmtpProxyStatNoProxyError=axSmtpProxyStatNoProxyError, axVirtualServerPortServerSSLTemplate=axVirtualServerPortServerSSLTemplate, axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions=axIpNatLsnTop5UserPrivateIpAddrTotTcpSessions, axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry=axIpNatLsnTop5UserPrivateIpAddrTotSessionEntry, axVirtualServerPortStatPersistConns=axVirtualServerPortStatPersistConns, axSmtpProxyStatsSmtpRequests=axSmtpProxyStatsSmtpRequests, axHttpProxyStatTotalConn=axHttpProxyStatTotalConn, axSslStatFailSSLHandshake=axSslStatFailSSLHandshake, axVirtualServerPortUp=axVirtualServerPortUp, axSwitchStatsIPFragRcv=axSwitchStatsIPFragRcv, axServiceConnResume=axServiceConnResume, axServerStatCount=axServerStatCount, axSysHwFan1Speed=axSysHwFan1Speed, axNetStatTCPOutRSTNoSYN=axNetStatTCPOutRSTNoSYN, axIpNatLsnTrafficHairpinSessionCreated=axIpNatLsnTrafficHairpinSessionCreated, axServerPortStatEntry=axServerPortStatEntry, axSmtpProxyStatSvrConnMade=axSmtpProxyStatSvrConnMade, axSwitchStatIPTCPFragRcv=axSwitchStatIPTCPFragRcv, axFastHttpProxyStatTotalReq=axFastHttpProxyStatTotalReq, axAppGlobalTotalSSLConnections=axAppGlobalTotalSSLConnections, axSysMemoryTotal=axSysMemoryTotal, axSwitchStatsIPFragOverlapDrop=axSwitchStatsIPFragOverlapDrop, axConnReuseStatTotalBound=axConnReuseStatTotalBound, axServerPortStatPersistConns=axServerPortStatPersistConns, axSmtpProxyStatsServerSelFail=axSmtpProxyStatsServerSelFail, axIpNatLsnTrafficExtendedUserQuotasExceeded=axIpNatLsnTrafficExtendedUserQuotasExceeded, axNetStatEntrySSLSIDPersistSucc=axNetStatEntrySSLSIDPersistSucc, axServiceGroupStatCurConns=axServiceGroupStatCurConns, axNetStatConnLimitReset=axNetStatConnLimitReset, axSystemNotifications=axSystemNotifications, axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry=axIpNatLsnTop5PrivateIpAddrTotIcmpPortEntry, axServiceGroupMemberStatPktsIn=axServiceGroupMemberStatPktsIn, axVlanCfgEntry=axVlanCfgEntry, axHAGroupStatusEntry=axHAGroupStatusEntry, axConnReuseStatTotalEst=axConnReuseStatTotalEst, axSwitchStatIPFragReasmFail=axSwitchStatIPFragReasmFail, axSystemDataCpuHigh=axSystemDataCpuHigh, axSwitchStatTable=axSwitchStatTable, axHttpProxyStats=axHttpProxyStats, axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotTcpSessionTable, axSwitchStatsAnomTCPNoFragDrop=axSwitchStatsAnomTCPNoFragDrop, axNetStatServerSelFail=axNetStatServerSelFail, axHAARPRetry=axHAARPRetry, axUpperPowerSupplyFailure=axUpperPowerSupplyFailure, axServerPortType=axServerPortType, axPersistentStatsSIPPersistFail=axPersistentStatsSIPPersistFail, axServerStatServerTotalConns=axServerStatServerTotalConns, axSslProxyStatsCurrProxyConns=axSslProxyStatsCurrProxyConns, axInterfaceEntry=axInterfaceEntry, axSwitchStatsSRCPortSuppress=axSwitchStatsSRCPortSuppress, axHttpProxyStatTotalNoProxy=axHttpProxyStatTotalNoProxy, axAppGlobalSystemResourceUsageTable=axAppGlobalSystemResourceUsageTable, axServerStatName=axServerStatName, axLogMonitorPri=axLogMonitorPri, axSmtpProxyStatEntry=axSmtpProxyStatEntry, axSmtpProxyStatFwdReqFail=axSmtpProxyStatFwdReqFail, axSysAverageCpuUsage=axSysAverageCpuUsage, axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumIcmpSessions, axNotificationFanName=axNotificationFanName, axInterfaceTable=axInterfaceTable, axNetStatClientSSLSIDMatch=axNetStatClientSSLSIDMatch, axHASetID=axHASetID, axIpNatStatsDynamicMappingMissAddresses=axIpNatStatsDynamicMappingMissAddresses, axIpNatLsnTop5PrivateIpAddrTotNumSessions=axIpNatLsnTop5PrivateIpAddrTotNumSessions, axIpNatLsnTop5UserPrivateIpAddrInUdp=axIpNatLsnTop5UserPrivateIpAddrInUdp, axSysSecondaryVersionOnCF=axSysSecondaryVersionOnCF, axServerStatTable=axServerStatTable, axIpNatLsnTop5PrivateIpAddrTotIcmpPorts=axIpNatLsnTop5PrivateIpAddrTotIcmpPorts, axIpNatStatsGlobal=axIpNatStatsGlobal, axTcpProxyStatTotalRstRcvOnEstConn=axTcpProxyStatTotalRstRcvOnEstConn, axIpNatLsnTop5PrivateIpAddrInIcmpPort=axIpNatLsnTop5PrivateIpAddrInIcmpPort, axTcpProxyStatTCPFINW2State=axTcpProxyStatTCPFINW2State, axServerTable=axServerTable, axNetStatInbandHMRetry=axNetStatInbandHMRetry, axServerPortWeight=axServerPortWeight, axSmtpProxyStatsSNATFail=axSmtpProxyStatsSNATFail, axHttpProxyStatTotalCRst=axHttpProxyStatTotalCRst, axNetStatUDPsNoSLB=axNetStatUDPsNoSLB, axHAFloatingIPIndex=axHAFloatingIPIndex, axFastHttpProxyStatEntry=axFastHttpProxyStatEntry, axIpNatStatsDynamicMappingStartAddress=axIpNatStatsDynamicMappingStartAddress, axSmtpProxyStatTotalProxyConn=axSmtpProxyStatTotalProxyConn, axLogSyslogHost=axLogSyslogHost, axSwitchStatL2Forward=axSwitchStatL2Forward, axIpNatLsnTop5PrivateIpAddrTotTcpPorts=axIpNatLsnTop5PrivateIpAddrTotTcpPorts, axFastHttpProxyStatTotalReqReXmit=axFastHttpProxyStatTotalReqReXmit, axSysCpuUsage=axSysCpuUsage, axNetStatEntryTCPOutRSTL4Proxy=axNetStatEntryTCPOutRSTL4Proxy, axIpNatLsnTop5PrivateIpAddrTotUdpPorts=axIpNatLsnTop5PrivateIpAddrTotUdpPorts, axIpNatLsnTrafficFullConeSessionFreed=axIpNatLsnTrafficFullConeSessionFreed, axNetStatNoSYNPktDropRST=axNetStatNoSYNPktDropRST, axNetStatEntryNoSYNPktDropFIN=axNetStatEntryNoSYNPktDropFIN, axSessionStatsGlobal=axSessionStatsGlobal, axVirtualServerStatTotalSuccL7Reqs=axVirtualServerStatTotalSuccL7Reqs, axServerUp=axServerUp, axServerPortStatTable=axServerPortStatTable, axHAPreemptStatusEnabled=axHAPreemptStatusEnabled, axFastHttpProxyStatParseReqFail=axFastHttpProxyStatParseReqFail, axServiceGroupStat=axServiceGroupStat, axServiceGroupMemberStatResponseTime=axServiceGroupMemberStatResponseTime, axNetStatTCPOutRSTL4Proxy=axNetStatTCPOutRSTL4Proxy, axServerMonitorState=axServerMonitorState, axSwitchStatTTLExceedDrop=axSwitchStatTTLExceedDrop, axVirtualServerStatPortType=axVirtualServerStatPortType, axVirtualServerPortStatTable=axVirtualServerPortStatTable, axFastHttpProxyStatTotalPreMatureClose=axFastHttpProxyStatTotalPreMatureClose, axNetStatEntrySYNThrotte=axNetStatEntrySYNThrotte, axMgmt=axMgmt, axNetStatTCPOutReset=axNetStatTCPOutReset, axPersistentStatsUrlHashPersistOKPri=axPersistentStatsUrlHashPersistOKPri, axNetStatIPOutNoRt=axNetStatIPOutNoRt, axSysHwFan3Speed=axSysHwFan3Speed, axNetStatEntryTCPOutRSTStaleSess=axNetStatEntryTCPOutRSTStaleSess, axHttpProxyStatNoProxyErr=axHttpProxyStatNoProxyErr, axSessionGlobalStatConnSMPAllocated=axSessionGlobalStatConnSMPAllocated, axSysPrimaryVersionOnDisk=axSysPrimaryVersionOnDisk, axNotificationObjects=axNotificationObjects, axVirtualServerStatDisplayStatus=axVirtualServerStatDisplayStatus, axIpNatLsnTrafficStats=axIpNatLsnTrafficStats, axAppGlobalAllowedCurrentValue=axAppGlobalAllowedCurrentValue, axFanName=axFanName, axIpNatLsnTrafficEndpointIndepFilterMatch=axIpNatLsnTrafficEndpointIndepFilterMatch, axSysSecondaryVersionOnDisk=axSysSecondaryVersionOnDisk, axServiceGroupMemberAddrType=axServiceGroupMemberAddrType, axInterfaceStatBytesOut=axInterfaceStatBytesOut, axHardDiskUsageHigh=axHardDiskUsageHigh, axFastHttpProxyStatServerPreMatureClose=axFastHttpProxyStatServerPreMatureClose, axSslProxyStatsClientErr=axSslProxyStatsClientErr, axVirtualServerName=axVirtualServerName, axVirtualServerStatAddress=axVirtualServerStatAddress, axAppGlobalSystemResourceName=axAppGlobalSystemResourceName, axSysCpu=axSysCpu, axServiceGroupStatDisplayStatus=axServiceGroupStatDisplayStatus, axSmtpProxyStatsSmtpReqSuccs=axSmtpProxyStatsSmtpReqSuccs, axHttpProxyStatFwdReqDataFail=axHttpProxyStatFwdReqDataFail, axNetStatTCPSynRecv=axNetStatTCPSynRecv, axSwitchStatUnknownProtoDrop=axSwitchStatUnknownProtoDrop, axInterfaceAdminStatus=axInterfaceAdminStatus, axServiceGroupName=axServiceGroupName, axFastHttpProxyStatServerRst=axFastHttpProxyStatServerRst, axServiceGroupStatName=axServiceGroupStatName, axFastHttpProxyStatTotalSuccReq=axFastHttpProxyStatTotalSuccReq, axSystemTempHigh=axSystemTempHigh, axNetStatConnLimitDrops=axNetStatConnLimitDrops, axServerEntry=axServerEntry, axInterfaceStatPktsIn=axInterfaceStatPktsIn, axLogSyslogHostTable=axLogSyslogHostTable, axHttpProxyStatServerConnMade=axHttpProxyStatServerConnMade)
mibBuilder.exportSymbols("A10-AX-MIB", axSystemRelieveDropPacketEvent=axSystemRelieveDropPacketEvent, axSslStatSSLNoHWContextMem=axSslStatSSLNoHWContextMem, axSwitchStatsIPv6NoRouteDrop=axSwitchStatsIPv6NoRouteDrop, axTcpProxyStatTCPSYNSNTState=axTcpProxyStatTCPSYNSNTState, axSmtpProxyStatSvrPrematureClose=axSmtpProxyStatSvrPrematureClose, axSysAverageControlCpuUsage=axSysAverageControlCpuUsage, axServiceGroupStatTotalCurrL7Reqs=axServiceGroupStatTotalCurrL7Reqs, axSwitchStatLinkdownDrop=axSwitchStatLinkdownDrop, axVirtualServerPort=axVirtualServerPort, axInterfaceMediaActiveSpeed=axInterfaceMediaActiveSpeed, axNetStatTCPReceive=axNetStatTCPReceive, axIpNatLsnTop5GlobalPoolIpAddrInTcp=axIpNatLsnTop5GlobalPoolIpAddrInTcp, axNetStatClientSSLSIDNotMatch=axNetStatClientSSLSIDNotMatch, axSmtpProxyStatsTotalProxyConns=axSmtpProxyStatsTotalProxyConns, axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry=axIpNatLsnTop5GlobalPoolIpAddrTotTcpPortEntry, axServiceGroupStatEntry=axServiceGroupStatEntry, axSslStatSSLModNum=axSslStatSSLModNum, axNetStatTCPSynRcv=axNetStatTCPSynRcv, axVirtualServerStatPortStatus=axVirtualServerStatPortStatus, axIpNatLsnTop5UserPrivateIpAddrTotSessions=axIpNatLsnTop5UserPrivateIpAddrTotSessions, axSessionGlobalStatTCPHalfOpen=axSessionGlobalStatTCPHalfOpen, axVirtualServerPortStat=axVirtualServerPortStat, axSysHwPhySystemTemp=axSysHwPhySystemTemp, axFan2Failure=axFan2Failure, axServerName=axServerName, axNetStatEntryInbandHMRetry=axNetStatEntryInbandHMRetry, axNotificationTrunkID=axNotificationTrunkID, axVirtualServerPortSIPTemplate=axVirtualServerPortSIPTemplate, axNotification=axNotification, axSwitchStatsIPTCPFragRcv=axSwitchStatsIPTCPFragRcv, axVirtualServerReachConnLimit=axVirtualServerReachConnLimit, axFtpStatTotalALGPkt=axFtpStatTotalALGPkt, axVirtualServerStatBytesOut=axVirtualServerStatBytesOut, axHAFloatingIP=axHAFloatingIP, axServerPortStatBytesIn=axServerPortStatBytesIn, axVirtualServerEntry=axVirtualServerEntry, axTcpProxyStatTotalRxBuf=axTcpProxyStatTotalRxBuf, axIpNatStatsDynamicMappingAllocAddresses=axIpNatStatsDynamicMappingAllocAddresses, axIpNatLsnTrafficFailsInUserQuotasCreation=axIpNatLsnTrafficFailsInUserQuotasCreation, axInterfaceMediaMaxDuplex=axInterfaceMediaMaxDuplex, axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable=axIpNatLsnTop5PrivateIpAddrTotIcmpPortTable, axIpNatLsnTop5UserPrivateIpAddrInIcmp=axIpNatLsnTop5UserPrivateIpAddrInIcmp, axTcpProxyStatTCPSYNRCVState=axTcpProxyStatTCPSYNRCVState, axNotificationSLBServer=axNotificationSLBServer, axIpNatLsnTop5UserPrivateIpAddr=axIpNatLsnTop5UserPrivateIpAddr, axTcpProxyStatOrphanSocket=axTcpProxyStatOrphanSocket, axSmtpProxyStatsClientRST=axSmtpProxyStatsClientRST, axVirtualServerPortPolicyTemplate=axVirtualServerPortPolicyTemplate, axNetStatCreateSSLSIDSucc=axNetStatCreateSSLSIDSucc, axVirtualServerStat=axVirtualServerStat, axIpNatStatsGlobalMisses=axIpNatStatsGlobalMisses, axSwitchStatL3IPv6Forward=axSwitchStatL3IPv6Forward, axTcpProxyStatRstRvdEstConn=axTcpProxyStatRstRvdEstConn, axIpNatStatsDynamicMappingTotalAddresses=axIpNatStatsDynamicMappingTotalAddresses, axSysDiskFreeSpace=axSysDiskFreeSpace, axServerPortStatPktsOut=axServerPortStatPktsOut, axIpNatStatsIntfInsideOutsideEntry=axIpNatStatsIntfInsideOutsideEntry, axIpNatLsnTop5UserPrivateIpAddrTotSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotSessionTable, axLogging=axLogging, axSmtpProxyStatsNoTupleError=axSmtpProxyStatsNoTupleError, axIpNatLsnTop5UserPrivateIpAddrInTcp=axIpNatLsnTop5UserPrivateIpAddrInTcp, axServiceGroup=axServiceGroup, axNetStatConnLimitDrop=axNetStatConnLimitDrop, axHAStandby=axHAStandby, axSmtpProxyStatsServerResel=axSmtpProxyStatsServerResel, axSwitchStatIPFragRcv=axSwitchStatIPFragRcv, axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts=axIpNatLsnTop5PrivateIpAddrTotNumIcmpPorts, axServiceGroupMemberStat=axServiceGroupMemberStat, axServerPortStatusInServiceGroupMember=axServerPortStatusInServiceGroupMember, axFastHttpProxyStatTotalFwdDataReqErr=axFastHttpProxyStatTotalFwdDataReqErr, axSwitchStatIPv4NoRouteDrop=axSwitchStatIPv4NoRouteDrop, axNetworkTrunkPortsThreshold=axNetworkTrunkPortsThreshold, axSwitchStats=axSwitchStats, axIpNatStatsInsideOutsideIntfDirection=axIpNatStatsInsideOutsideIntfDirection, axVirtualServerStatStatus=axVirtualServerStatStatus, axNetStatEntryClientSSLSIDNotFound=axNetStatEntryClientSSLSIDNotFound, axNotificationPortThreshold=axNotificationPortThreshold, axConnReuseStats=axConnReuseStats, axIpNatLsnTrafficFullConeSessionCreated=axIpNatLsnTrafficFullConeSessionCreated, axNetStatTCPSYNCookieSentFail=axNetStatTCPSYNCookieSentFail, axServerStatServerPersistConns=axServerStatServerPersistConns, axNetStatTCPSYNCookieSntFail=axNetStatTCPSYNCookieSntFail, axSwitchStatsVLANFlood=axSwitchStatsVLANFlood, axTcpProxyStatTotalTxBuf=axTcpProxyStatTotalTxBuf, axServiceGroupMemberStatTable=axServiceGroupMemberStatTable, axVlanMemberVlanId=axVlanMemberVlanId, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddrInUdp, axSwitchStatsFwdKernel=axSwitchStatsFwdKernel, axServerPortNumInServiceGroupMemberStat=axServerPortNumInServiceGroupMemberStat, axSmtpProxyStatTable=axSmtpProxyStatTable, axNetStatSSLSIDPersistSucc=axNetStatSSLSIDPersistSucc, axNetStatEntryServerSSLSIDNotMatch=axNetStatEntryServerSSLSIDNotMatch, axServerPortHealthMonitor=axServerPortHealthMonitor, axFan3Failure=axFan3Failure, axVlanCfgTable=axVlanCfgTable, axFastHttpProxyStatTotalFwdReqErr=axFastHttpProxyStatTotalFwdReqErr, axSslStatModuleIndex=axSslStatModuleIndex, axServerPortNum=axServerPortNum, axSmtpProxyStatReqPktOutOrder=axSmtpProxyStatReqPktOutOrder, axIpNatLsnTotalUserQuotaSessions=axIpNatLsnTotalUserQuotaSessions, axHttpProxyStatReqPktOutOrder=axHttpProxyStatReqPktOutOrder, axNetStatEntryNoSYNPktDropACK=axNetStatEntryNoSYNPktDropACK, axGlobalAppPacketDrop=axGlobalAppPacketDrop, axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumTcpSessions, axFastHttpProxyStatClientRst=axFastHttpProxyStatClientRst, axVirtualServerStatTotConns=axVirtualServerStatTotConns, axSwitchStatsUnknownProtoDrop=axSwitchStatsUnknownProtoDrop, axConnReuseStatActivePersist=axConnReuseStatActivePersist, axServiceGroupMemberStatBytesIn=axServiceGroupMemberStatBytesIn, axHttpProxyStatTotalReqPktOutOrder=axHttpProxyStatTotalReqPktOutOrder, axTcpProxyStatRstSent=axTcpProxyStatRstSent, axNetStatTCPOutRst=axNetStatTCPOutRst, axSwitchStatL4Process=axSwitchStatL4Process, axVirtualServerPortHaGroupID=axVirtualServerPortHaGroupID, axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts=axIpNatLsnTop5GlobalPoolIpAddrTotTcpPorts, axAppGlobalBufferCurrentUsage=axAppGlobalBufferCurrentUsage, axVirtualServerStatEntry=axVirtualServerStatEntry, axVirtualServerStatPortDisplayStatus=axVirtualServerStatPortDisplayStatus, axLogSyslogHostEntry=axLogSyslogHostEntry, axSmtpProxyStatsFwdReqFail=axSmtpProxyStatsFwdReqFail, axSmtpProxyStatsReqRetrans=axSmtpProxyStatsReqRetrans, axSwitchStatsLinkdownDrop=axSwitchStatsLinkdownDrop, axServiceGroupMember=axServiceGroupMember, axHttpProxyStatTotalReq=axHttpProxyStatTotalReq, axSmtpProxyStatCpuIndex=axSmtpProxyStatCpuIndex, axVirtualServers=axVirtualServers, axNetStatTCPOutRSTStaleSess=axNetStatTCPOutRSTStaleSess, axIpNatLsnTop5PrivateIpAddrGlobalIpAddr=axIpNatLsnTop5PrivateIpAddrGlobalIpAddr, axPersistentStatUrlHashPersistFail=axPersistentStatUrlHashPersistFail, axSyslogTrapObjects=axSyslogTrapObjects, axFastHttpProxyStatTotalSvrReSel=axFastHttpProxyStatTotalSvrReSel, axServiceGroupLbAlgorithm=axServiceGroupLbAlgorithm, axVirtualServerCount=axVirtualServerCount, axVirtualServerPortClientSSLTemplate=axVirtualServerPortClientSSLTemplate, axPersistentStatSIPPersistFail=axPersistentStatSIPPersistFail, axServerStatServerTotalL7Reqs=axServerStatServerTotalL7Reqs, axFastHttpProxyStatHttpReqSucc=axFastHttpProxyStatHttpReqSucc, axHttpProxyStatFwdReqFail=axHttpProxyStatFwdReqFail, axServerStatServerStatus=axServerStatServerStatus, axNetStatEntryClientSSLSIDNotMatch=axNetStatEntryClientSSLSIDNotMatch, axNetStatUDPNoSLB=axNetStatUDPNoSLB, axIpNatLsnTrafficEndpointIndepMapMatch=axIpNatLsnTrafficEndpointIndepMapMatch, axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry=axIpNatLsnTop5GlobalPoolIpAddrTotUserEntry, axSysAverageDataCpuUsage=axSysAverageDataCpuUsage, axVlanMemberTagged=axVlanMemberTagged, axConnReuseStatEntry=axConnReuseStatEntry, axSwitchStatProtoDownDrop=axSwitchStatProtoDownDrop, axInterfaceStatCollisions=axInterfaceStatCollisions, axAppGlobalSystemResourceUsageEntry=axAppGlobalSystemResourceUsageEntry, axHttpProxyStatHttpReq=axHttpProxyStatHttpReq, axServiceGroupMemberStatPktsOut=axServiceGroupMemberStatPktsOut, axSmtpProxyStatsParseReqFail=axSmtpProxyStatsParseReqFail, axIpNatLsnTop5GlobalPoolIpAddrTotUsers=axIpNatLsnTop5GlobalPoolIpAddrTotUsers, axPersistentStatsSSLSIDPersistOK=axPersistentStatsSSLSIDPersistOK, axPersistentStatEntry=axPersistentStatEntry, axServerAddress=axServerAddress, axIpNatLsnTotalFullConeSessions=axIpNatLsnTotalFullConeSessions, axConnReuseStatTotalLongRes=axConnReuseStatTotalLongRes, axAppGlobalTotalNewL4Connections=axAppGlobalTotalNewL4Connections, axTcpProxyStatReTranPkt=axTcpProxyStatReTranPkt, axSslStatSSLFailedCryptoOperation=axSslStatSSLFailedCryptoOperation, axSessionGlobalStatTCPEstablished=axSessionGlobalStatTCPEstablished, axServerNameInServiceGroupMemberStat=axServerNameInServiceGroupMemberStat, axServerPortTable=axServerPortTable, axTcpProxyStatTotalReXmitPkt=axTcpProxyStatTotalReXmitPkt, axAppGlobalBufferConfigLimit=axAppGlobalBufferConfigLimit, axSmtpProxyStatsFwdReqDataFail=axSmtpProxyStatsFwdReqDataFail, axPersistentStatCookiePersistFail=axPersistentStatCookiePersistFail, axNotificationPowerSupplyName=axNotificationPowerSupplyName, axSystemDropPacketEvent=axSystemDropPacketEvent, axNetStatSSLSIDPersistFail=axNetStatSSLSIDPersistFail, axServiceGroupTable=axServiceGroupTable, axServerCount=axServerCount, axFtpStatTotalCtrlSession=axFtpStatTotalCtrlSession, axSwitchStatsL3IPForward=axSwitchStatsL3IPForward, axIpNatLsnTrafficUserQuotasCreated=axIpNatLsnTrafficUserQuotasCreated, axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions=axIpNatLsnTop5UserPrivateIpAddrTotUdpSessions, axServerPortStatTotalSuccL7Reqs=axServerPortStatTotalSuccL7Reqs, axIpNatLsnTrafficNatPortUnavailable=axIpNatLsnTrafficNatPortUnavailable, axNetStatConnLimitResets=axNetStatConnLimitResets, axTcpProxyStatTCPClosingState=axTcpProxyStatTCPClosingState, axNetStatNoSYNPktDropACK=axNetStatNoSYNPktDropACK, axServiceGroupStatTotConns=axServiceGroupStatTotConns, axHttpProxyStatClientRst=axHttpProxyStatClientRst, axSysHwFan2Speed=axSysHwFan2Speed, axInterfaceStat=axInterfaceStat, axVirtualServerStatPersistConns=axVirtualServerStatPersistConns, axSmtpProxyStatFwdReqDataFail=axSmtpProxyStatFwdReqDataFail, axSwitchStatsTTLExceedDrop=axSwitchStatsTTLExceedDrop, axNetStatClientSSLSIDNotFound=axNetStatClientSSLSIDNotFound, axInterface=axInterface, axSwitchStatsL3IPv6Forward=axSwitchStatsL3IPv6Forward, axServerStat=axServerStat, axNetStatSYNThrotte=axNetStatSYNThrotte, axSysDiskTotalSpace=axSysDiskTotalSpace, axNetStatEntry=axNetStatEntry, axNetStatSourceNATFails=axNetStatSourceNATFails, axSwitchStatsIncorrectLenDrop=axSwitchStatsIncorrectLenDrop, axServiceGroupMemberStatEntry=axServiceGroupMemberStatEntry, axSysCpuIndexInUsage=axSysCpuIndexInUsage, axHttpProxyStatServerRst=axHttpProxyStatServerRst, axVirtualServerPortHTTPTemplate=axVirtualServerPortHTTPTemplate, axHAID=axHAID, axFastHttpProxyStatNoProxyErr=axFastHttpProxyStatNoProxyErr, axFtpStatALGPktReXmit=axFtpStatALGPktReXmit, axServerStatServerBytesIn=axServerStatServerBytesIn, axVirtualServerPortStatTotalCurrL7Reqs=axVirtualServerPortStatTotalCurrL7Reqs, axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotIcmpSessionTable, axNetStatServerSSLSIDNotFound=axNetStatServerSSLSIDNotFound, axServers=axServers, axHttpProxyStatServerSelFail=axHttpProxyStatServerSelFail, axSysLowerPowerSupplyStatus=axSysLowerPowerSupplyStatus, axAppGlobalSetting=axAppGlobalSetting, axFastHttpProxyStatHttpReq=axFastHttpProxyStatHttpReq, axNetStatServerSSLSIDNotMatch=axNetStatServerSSLSIDNotMatch, axNetStatEntryServerSSLSIDNotFound=axNetStatEntryServerSSLSIDNotFound, axHAGroupID=axHAGroupID, axSwitchStatSRCPortSuppress=axSwitchStatSRCPortSuppress, axSwitchStatAnomAllFragDrop=axSwitchStatAnomAllFragDrop, axApp=axApp, axFtpStats=axFtpStats, axServerStatServerTotalCurrL7Reqs=axServerStatServerTotalCurrL7Reqs, axInterfaceFlowCtrlOperStatus=axInterfaceFlowCtrlOperStatus, axVlanCfgMemberTable=axVlanCfgMemberTable, axServiceGroupMemberStatBytesOut=axServiceGroupMemberStatBytesOut, axVirtualServerPortSMTPTemplate=axVirtualServerPortSMTPTemplate, axInterfaces=axInterfaces, axHttpProxyStatCurrProxyConns=axHttpProxyStatCurrProxyConns, axIpNatLsnTop5UserPrivateIpAddrTotNumSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumSessions, axIpNatStatsIntfInsideOutsideTable=axIpNatStatsIntfInsideOutsideTable, axAppGlobalTotalNewL7Connections=axAppGlobalTotalNewL7Connections, axServiceGroupMemberStatCurConns=axServiceGroupMemberStatCurConns, axSmtpProxyStatsSvrPrematureClose=axSmtpProxyStatsSvrPrematureClose, axSessionGlobalStatFreeCurrentConns=axSessionGlobalStatFreeCurrentConns, axVirtualServerPortTable=axVirtualServerPortTable, axSessionGlobalStatConnCount=axSessionGlobalStatConnCount, axVirtualServerPortServiceGroup=axVirtualServerPortServiceGroup, axVirtualServerStatTotalCurrL7Reqs=axVirtualServerStatTotalCurrL7Reqs, axInterfaceMediaActiveDuplex=axInterfaceMediaActiveDuplex, axServerStatServerPktsIn=axServerStatServerPktsIn, axServerConnLimit=axServerConnLimit, axVirtualServerPortDisplayStatus=axVirtualServerPortDisplayStatus, axHAFloatingIPHaGroupID=axHAFloatingIPHaGroupID, axLowerPowerSupplyFailure=axLowerPowerSupplyFailure, axInterfaceFlowCtrlAdminStatus=axInterfaceFlowCtrlAdminStatus, axServiceGroupMemberStatTotalL7Reqs=axServiceGroupMemberStatTotalL7Reqs, axVirtualServerPortTemplate=axVirtualServerPortTemplate, axServiceUp=axServiceUp, axVirtualServerPortRamCacheTemplate=axVirtualServerPortRamCacheTemplate, axServerStatAddress=axServerStatAddress, axVirtualServerPortStatTotalSuccL7Reqs=axVirtualServerPortStatTotalSuccL7Reqs, axVirtualServerTable=axVirtualServerTable, axHttpProxyStatTotalReqReXmit=axHttpProxyStatTotalReqReXmit, axHAActive=axHAActive)
mibBuilder.exportSymbols("A10-AX-MIB", axSmtpProxyStatsNoProxyError=axSmtpProxyStatsNoProxyError, axServiceGroupStatBytesIn=axServiceGroupStatBytesIn, axSwitchStatFwdKernel=axSwitchStatFwdKernel, axNetStatEntryServerSSLSIDMatch=axNetStatEntryServerSSLSIDMatch, axTcpProxyStatTotalInTCPPkt=axTcpProxyStatTotalInTCPPkt, axServiceDown=axServiceDown, axIpNatLsnTop5GlobalPoolIpAddrInUdp=axIpNatLsnTop5GlobalPoolIpAddrInUdp, axHAConfigEnabled=axHAConfigEnabled, axNetStatNoSynPktDrops=axNetStatNoSynPktDrops, axNetStatTCPRcv=axNetStatTCPRcv, axHAGlobalConfig=axHAGlobalConfig, axHttpProxyStatTotalSvrReSel=axHttpProxyStatTotalSvrReSel, axSwitchStatIPFragOverlapDrop=axSwitchStatIPFragOverlapDrop, axServerPortPriorityInServiceGroupMember=axServerPortPriorityInServiceGroupMember, axServerStatPortType=axServerStatPortType, axServiceConnRateLimit=axServiceConnRateLimit, axPersistentStatTable=axPersistentStatTable, axVirtualServerStatBytesIn=axVirtualServerStatBytesIn, axVirtualServerPortStatAddress=axVirtualServerPortStatAddress, axConnReuseStatTotalEstablished=axConnReuseStatTotalEstablished, axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort=axIpNatLsnTop5PrivateIpAddrGlobalIpAddrInUdpPort, axInterfaceCount=axInterfaceCount, axTcpProxyStatSocketAlloc=axTcpProxyStatSocketAlloc, axSwitchStatAnomTCPSynFinDrop=axSwitchStatAnomTCPSynFinDrop, axHttpProxyStatEntry=axHttpProxyStatEntry, axConnReuseStatTotalActivePersist=axConnReuseStatTotalActivePersist, axPrimaryHardDiskFailure=axPrimaryHardDiskFailure, axSysCpuEntry=axSysCpuEntry, axTcpProxyStatTCPListenState=axTcpProxyStatTCPListenState, axNetStatConnRateLimitResets=axNetStatConnRateLimitResets, axNetStatEntryTCPOutRSTAFleX=axNetStatEntryTCPOutRSTAFleX, axNetStatEntryConnRateLimitDrops=axNetStatEntryConnRateLimitDrops, axNetStatEntryTCPOutRSTACKattack=axNetStatEntryTCPOutRSTACKattack, axNotificationSLBCurConns=axNotificationSLBCurConns, axVirtualServerPortReachConnRateLimit=axVirtualServerPortReachConnRateLimit, axServerStatNameInPort=axServerStatNameInPort, axNotificationConnLimit=axNotificationConnLimit, axServiceGroupStatTotalSuccL7Reqs=axServiceGroupStatTotalSuccL7Reqs, axNetStatEntryCreateSSLSIDFail=axNetStatEntryCreateSSLSIDFail, axServerStatAddrInPort=axServerStatAddrInPort, axVirtualServerStatPktsIn=axVirtualServerStatPktsIn, axNetStatCpuIndex=axNetStatCpuIndex, axSessionGlobalStatReverseNATTCP=axSessionGlobalStatReverseNATTCP, axNotificationCurrentUsage=axNotificationCurrentUsage, axServerPortConnLimit=axServerPortConnLimit, axSysStartupMode=axSysStartupMode, axVirtualServerEnabled=axVirtualServerEnabled, axSwitchStatsAnomPingDeathDrop=axSwitchStatsAnomPingDeathDrop, axIpNatStatsDynamicMappingEndAddress=axIpNatStatsDynamicMappingEndAddress, axVlanMemberIntfId=axVlanMemberIntfId, axFastHttpProxyStatServerSelFail=axFastHttpProxyStatServerSelFail, axFtpStatOutConnData=axFtpStatOutConnData, axVirtualServerPortDown=axVirtualServerPortDown, axTCPProxyStatEntry=axTCPProxyStatEntry, axConnReuseStatTotalMissedRes=axConnReuseStatTotalMissedRes, axFtpStatOutConnCtrl=axFtpStatOutConnCtrl, axServiceGroupMemberStatPersistConns=axServiceGroupMemberStatPersistConns, axNetStataFlexDrops=axNetStataFlexDrops, axFastHttpProxyStatTable=axFastHttpProxyStatTable, axSwitchStatsAnomTCPSynFinDrop=axSwitchStatsAnomTCPSynFinDrop, axHttpProxyStatNoTupleErr=axHttpProxyStatNoTupleErr, axNetStataFlexDrop=axNetStataFlexDrop, axSmtpProxyStatReqRetrans=axSmtpProxyStatReqRetrans, axPersistentStatsSSLSIDPersistFail=axPersistentStatsSSLSIDPersistFail, axVirtualServerPortType=axVirtualServerPortType, axInterfaceMediaMaxSpeed=axInterfaceMediaMaxSpeed, axServiceGroupMemberTable=axServiceGroupMemberTable, axPersistentStatSSLSIDPersistFail=axPersistentStatSSLSIDPersistFail, axHAGroupLocalPriority=axHAGroupLocalPriority, axSwitchStatIPFragOverlap=axSwitchStatIPFragOverlap, axSysFanStatusEntry=axSysFanStatusEntry, axNetStatTCPOutRSTProxy=axNetStatTCPOutRSTProxy, axVlanId=axVlanId, axServerStatServerTotalSuccL7Reqs=axServerStatServerTotalSuccL7Reqs, axNetStatEntryTCPOutRSTProxy=axNetStatEntryTCPOutRSTProxy, axServerPortEnabledState=axServerPortEnabledState, axFastHttpProxyStatTotalProxyConns=axFastHttpProxyStatTotalProxyConns, axNetStatUDPRcv=axNetStatUDPRcv, axIpNatLsnGobalStats=axIpNatLsnGobalStats, axFastHttpProxyStatTotalNoTuple=axFastHttpProxyStatTotalNoTuple, axFan1Failure=axFan1Failure, axSwitchStatL3IPForward=axSwitchStatL3IPForward, axVirtualServerPortAddress=axVirtualServerPortAddress, axConnReuseStatTotalLongResponse=axConnReuseStatTotalLongResponse, axSyslogModuleName=axSyslogModuleName, axPersistentStatsUrlHashPersistFail=axPersistentStatsUrlHashPersistFail, axIpNatLsnTop5PrivateIpAddr=axIpNatLsnTop5PrivateIpAddr, axIpNatStatsIntfInsideOutside=axIpNatStatsIntfInsideOutside, axNetStatTCPOutRSTAFleX=axNetStatTCPOutRSTAFleX, axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry=axIpNatLsnTop5GlobalPoolIpAddrTotUdpPortEntry, axHAFloatingIPAddress=axHAFloatingIPAddress, axNetStatTCPsNoSLB=axNetStatTCPsNoSLB, axSysUpperPowerSupplyStatus=axSysUpperPowerSupplyStatus, axSysPrimaryVersionOnCF=axSysPrimaryVersionOnCF, axSwitchStatsARPReqRcv=axSwitchStatsARPReqRcv, axConnReuseStatTotalBind=axConnReuseStatTotalBind, axServiceGroupMemberStatTotalCurrL7Reqs=axServiceGroupMemberStatTotalCurrL7Reqs, axConnReuseStatTotalUNBind=axConnReuseStatTotalUNBind, axNetStatSessionsAgingOut=axNetStatSessionsAgingOut, axInterfaceStatMcastIn=axInterfaceStatMcastIn, axServerPortEntry=axServerPortEntry, axSysFirmwareVersion=axSysFirmwareVersion, axServiceGroupDisplayStatus=axServiceGroupDisplayStatus, axFastHttpProxyStatCurrProxyConns=axFastHttpProxyStatCurrProxyConns, axTcpProxyStatTotalInTCPPacket=axTcpProxyStatTotalInTCPPacket, axFastHttpProxyStats=axFastHttpProxyStats, axSmtpProxyStatParseReqFail=axSmtpProxyStatParseReqFail, axSysDisk=axSysDisk, axVirtualServerPortEntry=axVirtualServerPortEntry, axServiceGroupStatTotalL7Reqs=axServiceGroupStatTotalL7Reqs, axSslProxyStatsSNATFail=axSslProxyStatsSNATFail, axIpNatLsnTrafficTcpUserQuotasExceeded=axIpNatLsnTrafficTcpUserQuotasExceeded, axFanIndex=axFanIndex, axNetStatSessionAgingOut=axNetStatSessionAgingOut, axFastHttpProxyStatFwdReqFail=axFastHttpProxyStatFwdReqFail, axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr=axIpNatLsnTop5UserPrivateIpAddrGlobalIpAddr, axServerConnRateLimit=axServerConnRateLimit, axIpNatLsnTotalIpAddrTranslated=axIpNatLsnTotalIpAddrTranslated, axHttpProxyStatCpuIndex=axHttpProxyStatCpuIndex, axServer=axServer, axNetStatInbandHMReassign=axNetStatInbandHMReassign, axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions=axIpNatLsnTop5UserPrivateIpAddrTotNumUdpSessions, axNetStatTCPSynCookieFails=axNetStatTCPSynCookieFails, axNetStatEntryTCPOutRSTNoSYN=axNetStatEntryTCPOutRSTNoSYN, axAppGlobalTotalNewConnections=axAppGlobalTotalNewConnections, axTcpProxyStatCpuIndex=axTcpProxyStatCpuIndex, axPersistentStatUrlHashPersistOKPri=axPersistentStatUrlHashPersistOKPri, axSysCpuUsageValueAtPeriod=axSysCpuUsageValueAtPeriod, axSwitchStatARPReqRcv=axSwitchStatARPReqRcv, axSwitchStatAnomLanAttackDrop=axSwitchStatAnomLanAttackDrop, axVirtualServerPortStatCurConns=axVirtualServerPortStatCurConns, axHttpProxyStatTotalProxyConns=axHttpProxyStatTotalProxyConns, axAppGlobalStats=axAppGlobalStats, axVirtualServerStatCurConns=axVirtualServerStatCurConns, axTcpProxyStatTotalPassiveOpenConn=axTcpProxyStatTotalPassiveOpenConn, axNetStatNoSYNPktDropFIN=axNetStatNoSYNPktDropFIN, axHttpProxyStatReqReTran=axHttpProxyStatReqReTran, axSwitchStatIPv6NoRouteDrop=axSwitchStatIPv6NoRouteDrop, axTcpProxyStatTimeWstate=axTcpProxyStatTimeWstate, axNetStatEntryInbandHMReassign=axNetStatEntryInbandHMReassign, axFastHttpProxyStatCpuIndex=axFastHttpProxyStatCpuIndex, axFanStatus=axFanStatus, axSslStatEnableCryptoEngine=axSslStatEnableCryptoEngine, axHAGroupCount=axHAGroupCount, axAppGlobalAllowedDefaultValue=axAppGlobalAllowedDefaultValue, axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable=axIpNatLsnTop5UserPrivateIpAddrTotUdpSessionTable, axAppGlobalSystemResourceIndex=axAppGlobalSystemResourceIndex, axSwitchStatsAnomIPOptionDrop=axSwitchStatsAnomIPOptionDrop, axSslProxyStatsServerErr=axSslProxyStatsServerErr, axHttpProxyStatTotalFwdReqErr=axHttpProxyStatTotalFwdReqErr, axSmtpProxyStatSNATFail=axSmtpProxyStatSNATFail, axIpNatStatsInsideOutsideIntfIndex=axIpNatStatsInsideOutsideIntfIndex)
