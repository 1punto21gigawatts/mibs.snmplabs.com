#
# PySNMP MIB module EdgeSwitch-CAPTIVE-PORTAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EdgeSwitch-CAPTIVE-PORTAL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:10:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
fastPath, = mibBuilder.importSymbols("EdgeSwitch-REF-MIB", "fastPath")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, iso, IpAddress, Unsigned32, Counter64, ModuleIdentity, Gauge32, ObjectIdentity, NotificationType, Bits, MibIdentifier, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "iso", "IpAddress", "Unsigned32", "Counter64", "ModuleIdentity", "Gauge32", "ObjectIdentity", "NotificationType", "Bits", "MibIdentifier", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "MacAddress", "TextualConvention")
fastPathCaptivePortal = ModuleIdentity((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38))
fastPathCaptivePortal.setRevisions(('2011-01-26 00:00', '2007-07-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fastPathCaptivePortal.setRevisionsDescriptions(('Postal address updated.', 'Initial version.',))
if mibBuilder.loadTexts: fastPathCaptivePortal.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: fastPathCaptivePortal.setOrganization('Broadcom Inc')
if mibBuilder.loadTexts: fastPathCaptivePortal.setContactInfo('')
if mibBuilder.loadTexts: fastPathCaptivePortal.setDescription('Private MIB for Captive Portal')
class CpCaptivePortalIntfCapabilitiesMap(TextualConvention, Bits):
    description = "Description of the interface capabilities. The bit 'other(0)' indicates that the interface has capabilities other than those listed below. The bit 'sessionTimeout(1)' indicates that the interface supports timeout when traffic is not received or sent within the idle timeout period. The bit 'idleTimeout(2)' indicates that the interface supports timeout when traffic is not received or sent within the idle timeout period. The bit 'maxBytesReceivedCounter(3)' indicates that the interface supports displaying the number of bytes received from each client. The bit 'maxBytesTransmittedCounter(4)' indicates that the interface supports displaying the number of bytes transmittted from each client. The bit 'maxPacketsReceivedCounter(5)' indicates that the interface supports displaying the number of packets received from each client. The bit 'maxPacketsTransmittedCounter(6)' indicates that the interface supports displaying the number of packets transmitted from each client. The bit 'clientRoaming(7)' indicates that the interfacesupports client roaming. This is supported by wireless interfaces only"
    status = 'current'
    namedValues = NamedValues(("other", 0), ("sessionTimeout", 1), ("idleTimeout", 2), ("maxBytesReceivedCounter", 3), ("maxBytesTransmittedCounter", 4), ("maxPacketsReceivedCounter", 5), ("maxPacketsTransmittedCounter", 6), ("clientRoaming", 7))

cpConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1))
cpGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 1))
cpAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpAdminMode.setStatus('current')
if mibBuilder.loadTexts: cpAdminMode.setDescription('Enable or disable the captive portal feature on the system.')
cpAdditionalHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpAdditionalHttpPort.setStatus('current')
if mibBuilder.loadTexts: cpAdditionalHttpPort.setDescription('The additional captive portal authentication server port for HTTP web connection. The HTTP port default is 0 which denotes no specific port and the default port (80) is used.')
cpAdditionalHttpSecurePort = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpAdditionalHttpSecurePort.setStatus('current')
if mibBuilder.loadTexts: cpAdditionalHttpSecurePort.setDescription('The additional captive portal authentication server secure port for HTTPS web connection. This additional HTTPS port default is 0 which denotes no specific port and the default port (443) is used.')
cpPeerStatsReportingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(15, 3600), )).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpPeerStatsReportingInterval.setStatus('current')
if mibBuilder.loadTexts: cpPeerStatsReportingInterval.setDescription('The time interval between statistics reports to the cluster controller. A value of 0 indicates reporting is disabled. The value is represented in seconds.')
cpAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: cpAuthTimeout.setDescription('The length of time to maintain an authentication session from a client. This time is measured from when a client initiates an authentication request. The value is represented in seconds.')
cpCaptivePortalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2))
cpCaptivePortalTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1), )
if mibBuilder.loadTexts: cpCaptivePortalTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalTable.setDescription('A table of config parms for instances of captive portal.')
cpCaptivePortalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalInstanceId"))
if mibBuilder.loadTexts: cpCaptivePortalEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalEntry.setDescription('Captive Portal instance entry.')
cpCaptivePortalInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceId.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceId.setDescription('The identifier associated with this instance of captive portal.')
cpCaptivePortalConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalConfigName.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalConfigName.setDescription('The name, in alpha-numeric characters, assigned to this captive portal configuration.')
cpCaptivePortalAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalAdminMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalAdminMode.setDescription('Enable or disable this instance of captive portal on the system.')
cpCaptivePortalProtocolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("https", 0), ("http", 1))).clone('http')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalProtocolMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalProtocolMode.setDescription('The protocol mode to be used.')
cpCaptivePortalVerificationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("guest", 0), ("local", 1), ("radius", 2))).clone('guest')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalVerificationMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalVerificationMode.setDescription('The type of user verification to perform.')
cpCaptivePortalUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalUserGroup.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalUserGroup.setDescription('The group ID for this captive portal user database.')
cpCaptivePortalURLRedirectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalURLRedirectMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalURLRedirectMode.setDescription('Whether the captive portal should redirect newly authenticated clients to the configured URL. If this mode is disabled, the default locale specific welcome page is used. If enabled, the client is redirected to a configured URL.')
cpCaptivePortalRedirectURL = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalRedirectURL.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalRedirectURL.setDescription('The URL to which the newly authenticated client is redirected if cpCaptivePortalURLRedirectMode is enabled.')
cpCaptivePortalSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalSessionTimeout.setDescription('The session timeout. After this limit has been reached the user will be disconnected. If this value is set to 0, no timeout is enforced. This value is represented in seconds.')
cpCaptivePortalIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIdleTimeout.setDescription('The idle timeout of the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no timeout is enforced. This value is represented in seconds.')
cpCaptivePortalRadiusAuthServer = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalRadiusAuthServer.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalRadiusAuthServer.setDescription('The RADIUS authentication server name assigned to this captive portal configuration. RADIUS server name may only contain alphanumeric plus dash, underline, and space characters.')
cpCaptivePortalMaxBandwidthUp = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 536870911))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalMaxBandwidthUp.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalMaxBandwidthUp.setDescription('The maximum bandwidth, in bytes per second, that a client can transmit traffic when using Captive Portal. This setting limits the bandwidth at which the client can send data into the network. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes (however; converted & stored as bits/sec).')
cpCaptivePortalMaxBandwidthDown = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 536870911))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalMaxBandwidthDown.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalMaxBandwidthDown.setDescription('The maximum bandwidth, in bytes per second, that a client can receive traffic when using Captive Portal. This setting limits the bandwidth at which the client can receive data from the network. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes (however; converted & stored as bits/sec).')
cpCaptivePortalMaxInputOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalMaxInputOctets.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalMaxInputOctets.setDescription('The maximum input octets (bytes) allowed for the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes.')
cpCaptivePortalMaxOutputOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalMaxOutputOctets.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalMaxOutputOctets.setDescription('The maximum Output octets (bytes) allowed for the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes.')
cpCaptivePortalMaxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalMaxTotalOctets.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalMaxTotalOctets.setDescription('The maximum input/output octets (bytes) allowed for the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes.')
cpCaptivePortalUserLogoutMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalUserLogoutMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalUserLogoutMode.setDescription('Provides the captive portal authenticated user the ability to logout of their session through the use of a logout page. The connection will be terminated as a result of submitting the logout request.')
cpCaptivePortalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 2, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpCaptivePortalRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalRowStatus.setDescription('The captive portal instance status. Supported values: active(1) - This status is displayed after a valid Captive Portal instance is created. createAndGo(4) - Set to this value to create a new Captive Portal instance. destroy(6) - Set to this value to remove an existing Captive Portal instance.')
cpLocalUserDatabaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3))
cpLocalUserGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 1), )
if mibBuilder.loadTexts: cpLocalUserGroupTable.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupTable.setDescription('A table of group definitions for the local users. This database is used by captive portal instances and local users if the verification mode is set to LOCAL.')
cpLocalUserGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpLocalUserGroupIndex"))
if mibBuilder.loadTexts: cpLocalUserGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupEntry.setDescription('The user group entry.')
cpLocalUserGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpLocalUserGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupIndex.setDescription('The user group entry index.')
cpLocalUserGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserGroupName.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupName.setDescription("The user group name, limited to alpha-numeric strings (including the '-' and '_' characters).")
cpLocalUserGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpLocalUserGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupRowStatus.setDescription('The user group entry status. Supported values: active(1) - This status is displayed after a valid user group is created. createAndGo(4) - Set to this value to create a new user group. destroy(6) - Set to this value to remove an existing user group.')
cpLocalUserTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2), )
if mibBuilder.loadTexts: cpLocalUserTable.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserTable.setDescription('A table of user definitions for the local database. This database is used by a captive portal instance if its verification mode is set to LOCAL.')
cpLocalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpLocalUserIndex"))
if mibBuilder.loadTexts: cpLocalUserEntry.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserEntry.setDescription('The local user entry.')
cpLocalUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpLocalUserIndex.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserIndex.setDescription('The local user entry index.')
cpLocalUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserName.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserName.setDescription("The user name, limited to alpha-numeric strings (including the '-' and '_' characters).")
cpLocalUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserPassword.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserPassword.setDescription('The user password. This object will return an empty string even if a password is set.')
cpLocalUserSessionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserSessionTimeout.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserSessionTimeout.setDescription('The session timeout in seconds. After this limit is reached, the user is disconnected. If this value is set to 0, the default value for the captive portal is used.')
cpLocalUserIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserIdleTimeout.setDescription('The idle timeout of the session in seconds. After this limit is reached, the user is disconnected. If this value is set to 0, the default value for the captive portal is used.')
cpLocalUserMaxBandwidthUp = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 536870911))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserMaxBandwidthUp.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserMaxBandwidthUp.setDescription('The maximum bandwidth, in bytes per second, that the user can transmit traffic when using Captive Portal. This setting limits the bandwidth at which the user can send data into the network. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes (however; converted & stored as bits/sec).')
cpLocalUserMaxBandwidthDown = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 536870911))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserMaxBandwidthDown.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserMaxBandwidthDown.setDescription('The maximum bandwidth, in bytes per second, that the user can receive traffic when using Captive Portal. This setting limits the bandwidth at which the user can receive data from the network. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes (however; converted & stored as bits/sec).')
cpLocalUserMaxInputOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserMaxInputOctets.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserMaxInputOctets.setDescription('The maximum input octets (bytes) allowed for the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes.')
cpLocalUserMaxOutputOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserMaxOutputOctets.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserMaxOutputOctets.setDescription('The maximum Output octets (bytes) allowed for the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes.')
cpLocalUserMaxTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpLocalUserMaxTotalOctets.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserMaxTotalOctets.setDescription('The maximum input/output octets (bytes) allowed for the session. After this limit has been reached the user will be disconnected. If this value is set to 0, no rate limiting is enforced. This value is represented in bytes.')
cpLocalUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpLocalUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserRowStatus.setDescription('The user entry status. Supported values: active(1) - This status is displayed after a valid user is created. createAndGo(4) - Set to this value to create a new user. destroy(6) - Set to this value to remove an existing user.')
cpLocalUserGroupAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 3), )
if mibBuilder.loadTexts: cpLocalUserGroupAssociationTable.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupAssociationTable.setDescription('The mapping of local user assignments to a user group.')
cpLocalUserGroupAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 3, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpLocalUserGroupAssociationUserIndex"), (0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpLocalUserGroupAssociationGroupIndex"))
if mibBuilder.loadTexts: cpLocalUserGroupAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupAssociationEntry.setDescription('The local user group association entry.')
cpLocalUserGroupAssociationUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpLocalUserGroupAssociationUserIndex.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupAssociationUserIndex.setDescription('The local user entry index associated with a user group.')
cpLocalUserGroupAssociationGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cpLocalUserGroupAssociationGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupAssociationGroupIndex.setDescription('The user group entry index associated with a local user.')
cpLocalUserGroupAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 3, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpLocalUserGroupAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpLocalUserGroupAssociationRowStatus.setDescription('The local user to user group association entry status. Supported values: active(1) - This status is displayed after a valid association between a local user and a user group is created. createAndGo(4) - Set to this value to create a new association between a local user and a user group. destroy(6) - Set to this value to remove an existing association between a local user and a user group.')
cpInterfaceAssociationGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 4))
cpInterfaceAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 4, 1), )
if mibBuilder.loadTexts: cpInterfaceAssociationTable.setStatus('current')
if mibBuilder.loadTexts: cpInterfaceAssociationTable.setDescription('The mapping of interface assignments to a captive portal instance.')
cpInterfaceAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 4, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpIntfAssociationCPID"), (0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpIntfAssociationIfIndex"))
if mibBuilder.loadTexts: cpInterfaceAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: cpInterfaceAssociationEntry.setDescription('The Captive Portal interface association entry.')
cpIntfAssociationCPID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cpIntfAssociationCPID.setStatus('current')
if mibBuilder.loadTexts: cpIntfAssociationCPID.setDescription('The Captive Portal instance identifier associated with an interface.')
cpIntfAssociationIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 4, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cpIntfAssociationIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpIntfAssociationIfIndex.setDescription('The interface ifIndex to which the Captive Portal instance is associated.')
cpIntfAssociationRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 1, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpIntfAssociationRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpIntfAssociationRowStatus.setDescription('The Captive Portal instance to interface association status. Supported values: active(1) - This status is displayed after a valid association between a Captive Portal instance and an interface is created. createAndGo(4) - Set to this value to create a new association between a Captive Portal instance and an interface. destroy(6) - Set to this value to remove an existing association between a Captive Portal instance and an interface.')
cpStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2))
cpCaptivePortalGlobalStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1))
cpCaptivePortalOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("enablePending", 0), ("enabled", 1), ("disablePending", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalOperStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalOperStatus.setDescription('Indication of the current operational state of the captive portal feature.')
cpCaptivePortalOperDisabledReason = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("adminDisabled", 1), ("noIPAddress", 2), ("noIPRoutingIntf", 3), ("routingDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalOperDisabledReason.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalOperDisabledReason.setDescription('The reason for the captive portal feature being operationally disabled.')
cpCaptivePortalIpv4Address = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIpv4Address.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIpv4Address.setDescription('The IP address of this captive portal.')
cpCaptivePortalInstanceMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceMaxCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceMaxCount.setDescription('The maximum number of captive portal instances supported by the system.')
cpCaptivePortalInstanceConfiguredCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceConfiguredCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceConfiguredCount.setDescription('The number of captive portal instances currently configured in the system.')
cpCaptivePortalInstanceActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceActiveCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceActiveCount.setDescription('The number of captive portal instances currently active in the system.')
cpCaptivePortalAuthenUserMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalAuthenUserMaxCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalAuthenUserMaxCount.setDescription('The maximum number of authenticated users that the system can support.')
cpCaptivePortalLocalUserMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalLocalUserMaxCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalLocalUserMaxCount.setDescription('The maximum number of local users that the system can support.')
cpCaptivePortalConfiguredLocalUserCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalConfiguredLocalUserCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalConfiguredLocalUserCount.setDescription('The number of local users currently configured in the system.')
cpCaptivePortalAuthenUserCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalAuthenUserCurrentCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalAuthenUserCurrentCount.setDescription('The number of currently authenticated users across all captive portal instances.')
cpCaptivePortalInstanceStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2))
cpCaptivePortalInstanceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2, 1), )
if mibBuilder.loadTexts: cpCaptivePortalInstanceStatusTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceStatusTable.setDescription('This database is used to report status for a captive portal instance.')
cpCaptivePortalInstanceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalInstanceId"))
if mibBuilder.loadTexts: cpCaptivePortalInstanceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceStatusEntry.setDescription('Captive portal instance status entry.')
cpCaptivePortalInstanceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceOperStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceOperStatus.setDescription('Indication of the current operational state of the captive portal instance.')
cpCaptivePortalInstanceOperDisabledReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("adminDisabled", 1), ("noRadiusServer", 2), ("noAccountingServer", 3), ("noIntfAssociation", 4), ("noActiveIntf", 5), ("noValidCert", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceOperDisabledReason.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceOperDisabledReason.setDescription('The reason the captive portal instance is not currently operational.')
cpCaptivePortalInstanceBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("blockPending", 0), ("blocked", 1), ("notBlockPending", 2), ("notBlocked", 3))).clone('notBlocked')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalInstanceBlockStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceBlockStatus.setDescription('Block or unblock the captive portal instance for authentications using the following values: blockPending(0) - Set to this value to block the captive portal instance for authentications. After setting this value, the status displayed is blocked(1). notBlockPending(2) - Set to this value to unblock the captive portal instance for authentications. After setting this value, the status displayed is notBlocked(3).')
cpCaptivePortalInstanceAuthUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceAuthUserCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceAuthUserCount.setDescription('The number of currently authenticated users for this captive portal.')
cpCaptivePortalIntfStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3))
cpCaptivePortalIntfStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1), )
if mibBuilder.loadTexts: cpCaptivePortalIntfStatusTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfStatusTable.setDescription('This database is used to report status for a captive portal instance interface.')
cpCaptivePortalIntfStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalInstanceId"), (0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalIntfIfIndex"))
if mibBuilder.loadTexts: cpCaptivePortalIntfStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfStatusEntry.setDescription('Captive portal instance interface status entry.')
cpCaptivePortalIntfIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfIfIndex.setDescription('The ifIndex of the interface associated with this entry.')
cpCaptivePortalIntfActivationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfActivationStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfActivationStatus.setDescription('Indication of whether captive portal instance is active on the interface.')
cpCaptivePortalIntfActivationDisabledReason = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("intfNotAttached", 1), ("adminDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfActivationDisabledReason.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfActivationDisabledReason.setDescription('The reason for the captive portal instance interface not being currently active.')
cpCaptivePortalIntfBlockStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("blocked", 0), ("notBlocked", 1))).clone('notBlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfBlockStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfBlockStatus.setDescription('Indication of whether the captive portal instance interface is currently blocked for authentications.')
cpCaptivePortalIntfAuthUserCount = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfAuthUserCount.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfAuthUserCount.setDescription('The number of currently authenticated users for this captive portal instance interface.')
cpCaptivePortalIntfDatabaseGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 4))
cpCaptivePortalIntfDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 4, 1), )
if mibBuilder.loadTexts: cpCaptivePortalIntfDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfDatabaseTable.setDescription('A table of definitions for interfaces that are captive portal capable. This table identifies services that are provided on this interface.')
cpCaptivePortalIntfDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 4, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalIntfIfIndex"))
if mibBuilder.loadTexts: cpCaptivePortalIntfDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfDatabaseEntry.setDescription('')
cpCaptivePortalIntfCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 4, 1, 1, 1), CpCaptivePortalIntfCapabilitiesMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfCapabilities.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfCapabilities.setDescription('The bitmap value used to identify which capabilities are available on the interface.')
cpCaptivePortalClientStatusGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5))
cpCaptivePortalClientStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1), )
if mibBuilder.loadTexts: cpCaptivePortalClientStatusTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientStatusTable.setDescription('This database is used to report status of authenticated clients.')
cpCaptivePortalClientStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientMacAddress"))
if mibBuilder.loadTexts: cpCaptivePortalClientStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientStatusEntry.setDescription('Captive portal client status entry.')
cpCaptivePortalClientMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientMacAddress.setDescription('The MAC address of the workstation from which the client is authenticated.')
cpCaptivePortalClientIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientIpAddress.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientIpAddress.setDescription('The IP address of the workstation from which the client is authenticated.')
cpCaptivePortalClientUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientUserName.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientUserName.setDescription('User name (or Guest ID) of the connected client.')
cpCaptivePortalClientProtocolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("https", 0), ("http", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientProtocolMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientProtocolMode.setDescription('Protocol mode used for the client authentication.')
cpCaptivePortalClientVerificationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("guest", 0), ("local", 1), ("radius", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientVerificationMode.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientVerificationMode.setDescription('Type of user verification performed for the client authentication.')
cpCaptivePortalClientAssocIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientAssocIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientAssocIfIndex.setDescription('The interface on which the client was authenticated.')
cpCaptivePortalClientCPID = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientCPID.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientCPID.setDescription('The captive portal instance on which the client was authenticated.')
cpCaptivePortalClientSessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientSessionTime.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientSessionTime.setDescription('The time (in seconds) since the client was authenticated.')
cpCaptivePortalClientSwitchMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientSwitchMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientSwitchMacAddress.setDescription('The MAC address of the switch to which the client is authenticated.')
cpCaptivePortalClientSwitchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientSwitchIpAddress.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientSwitchIpAddress.setDescription('The IP address of the switch to which the client is authenticated.')
cpCaptivePortalClientSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("peer", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientSwitchType.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientSwitchType.setDescription('The switch (peer or local) to which the client is authenticated.')
cpCaptivePortalClientDeauthAction = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpCaptivePortalClientDeauthAction.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientDeauthAction.setDescription('This is an action object. Setting this object to start will initiate the deauthentication of authenticated client. Read on this object will always return none.')
cpCaptivePortalClientStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 2), )
if mibBuilder.loadTexts: cpCaptivePortalClientStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientStatisticsTable.setDescription('A table of statistics for each active session.')
cpCaptivePortalClientStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 2, 1), )
cpCaptivePortalClientStatusEntry.registerAugmentions(("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientStatisticsEntry"))
cpCaptivePortalClientStatisticsEntry.setIndexNames(*cpCaptivePortalClientStatusEntry.getIndexNames())
if mibBuilder.loadTexts: cpCaptivePortalClientStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientStatisticsEntry.setDescription('Captive portal client statistics entry.')
cpCaptivePortalClientBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientBytesReceived.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientBytesReceived.setDescription('Number of bytes received by this client.')
cpCaptivePortalClientBytesTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientBytesTransmitted.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientBytesTransmitted.setDescription('Number of bytes transmitted by this client.')
cpCaptivePortalClientPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientPacketsReceived.setDescription('Number of packets received by this client.')
cpCaptivePortalClientPacketsTransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 5, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalClientPacketsTransmitted.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalClientPacketsTransmitted.setDescription('Number of packets transmitted by this client.')
cpCaptivePortalIntfClientAssocGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 6))
cpCaptivePortalIntfClientAssocTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 6, 1), )
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocTable.setDescription('This database is used to report clients associated with a particular captive portal interface.')
cpCaptivePortalIntfClientAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 6, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalIntfClientIfIndex"), (0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalIntfClientAssocMacAddress"))
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocEntry.setDescription('Captive portal interface client status entry.')
cpCaptivePortalIntfClientIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 6, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfClientIfIndex.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfClientIfIndex.setDescription('The interface on which the client was authenticated.')
cpCaptivePortalIntfClientAssocMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 6, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocMacAddress.setDescription('The MAC address of the workstation from which the client is authenticated.')
cpCaptivePortalIntfClientAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 6, 1, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalIntfClientAssocRowStatus.setDescription('This specifies the row-status of this entry. For a valid entry, the row-status will return active(1). This is the only supported value.')
cpCaptivePortalInstanceClientAssocGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 7))
cpCaptivePortalInstanceClientAssocTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 7, 1), )
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocTable.setDescription('This database is used to report clients associated with a particular captive portal instance.')
cpCaptivePortalInstanceClientAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 7, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalInstanceClientAssocInstanceId"), (0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalInstanceClientAssocMacAddress"))
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocEntry.setDescription('Captive Portal instance client status entry.')
cpCaptivePortalInstanceClientAssocInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocInstanceId.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocInstanceId.setDescription('The instance ID associated with this client.')
cpCaptivePortalInstanceClientAssocMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 7, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocMacAddress.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocMacAddress.setDescription('The MAC address of the workstation from which the client is authenticated.')
cpCaptivePortalInstanceClientAssocRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 2, 7, 1, 1, 3), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocRowStatus.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalInstanceClientAssocRowStatus.setDescription('This specifies the row-status of this entry. For a valid entry, the row-status will return active(1). This is the only supported value.')
cpTrapsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 3))
cpTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpTrapMode.setStatus('current')
if mibBuilder.loadTexts: cpTrapMode.setDescription('This object enables/disables the global Captive Portal trap mode. If this object is disabled, the Captive Portal Client Authentication Failure traps, Client Connection traps, Client Database Full traps, and Client Disconnection traps are not sent regardless of their setting.')
cpClientAuthenticationFailureTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpClientAuthenticationFailureTrapMode.setStatus('current')
if mibBuilder.loadTexts: cpClientAuthenticationFailureTrapMode.setDescription('Flag to enable/disable client authentication failure SNMP traps.')
cpClientConnectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpClientConnectTrapMode.setStatus('current')
if mibBuilder.loadTexts: cpClientConnectTrapMode.setDescription('Flag to enable/disable client connection SNMP traps.')
cpClientDatabaseFullTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpClientDatabaseFullTrapMode.setStatus('current')
if mibBuilder.loadTexts: cpClientDatabaseFullTrapMode.setDescription('Flag to enable/disable client database full SNMP traps.')
cpClientDisconnectTrapMode = MibScalar((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpClientDisconnectTrapMode.setStatus('current')
if mibBuilder.loadTexts: cpClientDisconnectTrapMode.setDescription('Flag to enable/disable client disconnection SNMP traps.')
cpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 4))
cpClientAuthenticationFailure = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 4, 1)).setObjects(("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientMacAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientIpAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientCPID"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientAssocIfIndex"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientSwitchMacAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientUserName"))
if mibBuilder.loadTexts: cpClientAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: cpClientAuthenticationFailure.setDescription('A cpClientAuthenticationFailure trap signifies that the SNMP entity, acting in an agent role, has detected a client authentication failure.')
cpClientConnect = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 4, 2)).setObjects(("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientMacAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientAssocIfIndex"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientIpAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientCPID"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientSwitchMacAddress"))
if mibBuilder.loadTexts: cpClientConnect.setStatus('current')
if mibBuilder.loadTexts: cpClientConnect.setDescription('A cpClientConnect trap signifies that the SNMP entity, acting in an agent role, has detected a client connection.')
cpClientDatabaseFull = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 4, 3)).setObjects(("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientMacAddress"))
if mibBuilder.loadTexts: cpClientDatabaseFull.setStatus('current')
if mibBuilder.loadTexts: cpClientDatabaseFull.setDescription('A cpClientDatabaseFull trap signifies that the SNMP entity, acting in an agent role, has detected that client authentication database is full.')
cpClientDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 4, 4)).setObjects(("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientMacAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientAssocIfIndex"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientIpAddress"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientCPID"), ("EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalClientSwitchMacAddress"))
if mibBuilder.loadTexts: cpClientDisconnect.setStatus('current')
if mibBuilder.loadTexts: cpClientDisconnect.setDescription('A cpClientDisconnect trap signifies that the SNMP entity, acting in an agent role, has detected a client disconnection.')
cpCaptivePortalConfigWebGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 5))
cpCaptivePortalConfigWebTable = MibTable((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 5, 1), )
if mibBuilder.loadTexts: cpCaptivePortalConfigWebTable.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalConfigWebTable.setDescription('This database is used to web config.')
cpCaptivePortalConfigWebEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 5, 1, 1), ).setIndexNames((0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalConfigWebInstanceId"), (0, "EdgeSwitch-CAPTIVE-PORTAL-MIB", "cpCaptivePortalConfigWebWebId"))
if mibBuilder.loadTexts: cpCaptivePortalConfigWebEntry.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalConfigWebEntry.setDescription('Captive Portal instance client status entry.')
cpCaptivePortalConfigWebInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalConfigWebInstanceId.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalConfigWebInstanceId.setDescription('TThe identifier associated with instance of Captive Portal.')
cpCaptivePortalConfigWebWebId = MibTableColumn((1, 3, 6, 1, 4, 1, 4413, 1, 1, 38, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpCaptivePortalConfigWebWebId.setStatus('current')
if mibBuilder.loadTexts: cpCaptivePortalConfigWebWebId.setDescription('The Web ID associated with this client.')
mibBuilder.exportSymbols("EdgeSwitch-CAPTIVE-PORTAL-MIB", cpCaptivePortalMaxBandwidthDown=cpCaptivePortalMaxBandwidthDown, cpCaptivePortalClientSessionTime=cpCaptivePortalClientSessionTime, cpCaptivePortalClientIpAddress=cpCaptivePortalClientIpAddress, cpCaptivePortalIntfStatusEntry=cpCaptivePortalIntfStatusEntry, cpCaptivePortalClientSwitchIpAddress=cpCaptivePortalClientSwitchIpAddress, cpCaptivePortalClientStatusGroup=cpCaptivePortalClientStatusGroup, cpLocalUserGroupAssociationRowStatus=cpLocalUserGroupAssociationRowStatus, cpIntfAssociationCPID=cpIntfAssociationCPID, cpCaptivePortalInstanceClientAssocGroup=cpCaptivePortalInstanceClientAssocGroup, cpCaptivePortalSessionTimeout=cpCaptivePortalSessionTimeout, cpCaptivePortalRadiusAuthServer=cpCaptivePortalRadiusAuthServer, cpCaptivePortalInstanceClientAssocInstanceId=cpCaptivePortalInstanceClientAssocInstanceId, cpCaptivePortalMaxOutputOctets=cpCaptivePortalMaxOutputOctets, cpLocalUserRowStatus=cpLocalUserRowStatus, cpCaptivePortalClientProtocolMode=cpCaptivePortalClientProtocolMode, cpClientConnect=cpClientConnect, cpAdditionalHttpSecurePort=cpAdditionalHttpSecurePort, cpLocalUserGroupAssociationUserIndex=cpLocalUserGroupAssociationUserIndex, cpInterfaceAssociationEntry=cpInterfaceAssociationEntry, cpCaptivePortalInstanceClientAssocEntry=cpCaptivePortalInstanceClientAssocEntry, cpCaptivePortalRowStatus=cpCaptivePortalRowStatus, cpCaptivePortalProtocolMode=cpCaptivePortalProtocolMode, cpCaptivePortalInstanceAuthUserCount=cpCaptivePortalInstanceAuthUserCount, cpClientAuthenticationFailureTrapMode=cpClientAuthenticationFailureTrapMode, cpLocalUserGroupIndex=cpLocalUserGroupIndex, cpCaptivePortalInstanceConfiguredCount=cpCaptivePortalInstanceConfiguredCount, cpCaptivePortalAuthenUserMaxCount=cpCaptivePortalAuthenUserMaxCount, cpLocalUserGroupName=cpLocalUserGroupName, cpCaptivePortalInstanceActiveCount=cpCaptivePortalInstanceActiveCount, cpCaptivePortalClientSwitchMacAddress=cpCaptivePortalClientSwitchMacAddress, cpAuthTimeout=cpAuthTimeout, cpTrapsConfig=cpTrapsConfig, cpLocalUserPassword=cpLocalUserPassword, cpCaptivePortalOperStatus=cpCaptivePortalOperStatus, cpCaptivePortalConfigWebInstanceId=cpCaptivePortalConfigWebInstanceId, CpCaptivePortalIntfCapabilitiesMap=CpCaptivePortalIntfCapabilitiesMap, cpCaptivePortalClientStatusTable=cpCaptivePortalClientStatusTable, cpCaptivePortalIntfCapabilities=cpCaptivePortalIntfCapabilities, cpClientDatabaseFull=cpClientDatabaseFull, cpCaptivePortalMaxBandwidthUp=cpCaptivePortalMaxBandwidthUp, cpCaptivePortalLocalUserMaxCount=cpCaptivePortalLocalUserMaxCount, cpCaptivePortalClientVerificationMode=cpCaptivePortalClientVerificationMode, cpLocalUserGroupTable=cpLocalUserGroupTable, cpLocalUserDatabaseGroup=cpLocalUserDatabaseGroup, PYSNMP_MODULE_ID=fastPathCaptivePortal, cpAdditionalHttpPort=cpAdditionalHttpPort, cpCaptivePortalIntfIfIndex=cpCaptivePortalIntfIfIndex, cpCaptivePortalInstanceOperDisabledReason=cpCaptivePortalInstanceOperDisabledReason, cpCaptivePortalInstanceMaxCount=cpCaptivePortalInstanceMaxCount, cpCaptivePortalIntfActivationStatus=cpCaptivePortalIntfActivationStatus, cpIntfAssociationIfIndex=cpIntfAssociationIfIndex, cpCaptivePortalIntfActivationDisabledReason=cpCaptivePortalIntfActivationDisabledReason, cpCaptivePortalIntfBlockStatus=cpCaptivePortalIntfBlockStatus, cpLocalUserEntry=cpLocalUserEntry, cpCaptivePortalIpv4Address=cpCaptivePortalIpv4Address, cpCaptivePortalInstanceStatusEntry=cpCaptivePortalInstanceStatusEntry, cpCaptivePortalConfigWebGroup=cpCaptivePortalConfigWebGroup, cpCaptivePortalConfigWebWebId=cpCaptivePortalConfigWebWebId, cpCaptivePortalClientUserName=cpCaptivePortalClientUserName, cpCaptivePortalConfigWebEntry=cpCaptivePortalConfigWebEntry, cpCaptivePortalIntfClientIfIndex=cpCaptivePortalIntfClientIfIndex, cpCaptivePortalInstanceClientAssocMacAddress=cpCaptivePortalInstanceClientAssocMacAddress, cpCaptivePortalIntfStatusGroup=cpCaptivePortalIntfStatusGroup, cpCaptivePortalClientDeauthAction=cpCaptivePortalClientDeauthAction, cpClientConnectTrapMode=cpClientConnectTrapMode, cpCaptivePortalClientStatisticsEntry=cpCaptivePortalClientStatisticsEntry, cpCaptivePortalIntfClientAssocMacAddress=cpCaptivePortalIntfClientAssocMacAddress, cpClientDatabaseFullTrapMode=cpClientDatabaseFullTrapMode, cpCaptivePortalAdminMode=cpCaptivePortalAdminMode, cpCaptivePortalClientCPID=cpCaptivePortalClientCPID, cpCaptivePortalVerificationMode=cpCaptivePortalVerificationMode, cpCaptivePortalClientPacketsReceived=cpCaptivePortalClientPacketsReceived, cpIntfAssociationRowStatus=cpIntfAssociationRowStatus, cpCaptivePortalMaxTotalOctets=cpCaptivePortalMaxTotalOctets, cpClientAuthenticationFailure=cpClientAuthenticationFailure, cpCaptivePortalInstanceId=cpCaptivePortalInstanceId, cpCaptivePortalConfigGroup=cpCaptivePortalConfigGroup, cpLocalUserMaxTotalOctets=cpLocalUserMaxTotalOctets, cpCaptivePortalAuthenUserCurrentCount=cpCaptivePortalAuthenUserCurrentCount, cpLocalUserIdleTimeout=cpLocalUserIdleTimeout, cpLocalUserGroupAssociationGroupIndex=cpLocalUserGroupAssociationGroupIndex, cpCaptivePortalIdleTimeout=cpCaptivePortalIdleTimeout, cpCaptivePortalUserLogoutMode=cpCaptivePortalUserLogoutMode, cpStatusGroup=cpStatusGroup, cpCaptivePortalEntry=cpCaptivePortalEntry, cpLocalUserGroupEntry=cpLocalUserGroupEntry, cpCaptivePortalInstanceOperStatus=cpCaptivePortalInstanceOperStatus, cpClientDisconnect=cpClientDisconnect, cpCaptivePortalClientStatusEntry=cpCaptivePortalClientStatusEntry, cpCaptivePortalOperDisabledReason=cpCaptivePortalOperDisabledReason, cpCaptivePortalURLRedirectMode=cpCaptivePortalURLRedirectMode, cpAdminMode=cpAdminMode, cpCaptivePortalIntfDatabaseEntry=cpCaptivePortalIntfDatabaseEntry, cpCaptivePortalUserGroup=cpCaptivePortalUserGroup, cpCaptivePortalInstanceClientAssocRowStatus=cpCaptivePortalInstanceClientAssocRowStatus, cpTrapMode=cpTrapMode, cpCaptivePortalClientSwitchType=cpCaptivePortalClientSwitchType, cpCaptivePortalClientBytesReceived=cpCaptivePortalClientBytesReceived, cpLocalUserMaxBandwidthDown=cpLocalUserMaxBandwidthDown, cpLocalUserName=cpLocalUserName, cpCaptivePortalClientMacAddress=cpCaptivePortalClientMacAddress, cpLocalUserGroupAssociationEntry=cpLocalUserGroupAssociationEntry, cpTraps=cpTraps, cpCaptivePortalRedirectURL=cpCaptivePortalRedirectURL, cpCaptivePortalClientPacketsTransmitted=cpCaptivePortalClientPacketsTransmitted, cpCaptivePortalTable=cpCaptivePortalTable, cpLocalUserGroupAssociationTable=cpLocalUserGroupAssociationTable, cpConfigGroup=cpConfigGroup, cpLocalUserSessionTimeout=cpLocalUserSessionTimeout, cpCaptivePortalIntfClientAssocEntry=cpCaptivePortalIntfClientAssocEntry, cpCaptivePortalConfiguredLocalUserCount=cpCaptivePortalConfiguredLocalUserCount, cpCaptivePortalInstanceStatusGroup=cpCaptivePortalInstanceStatusGroup, cpCaptivePortalInstanceStatusTable=cpCaptivePortalInstanceStatusTable, cpCaptivePortalGlobalStatusGroup=cpCaptivePortalGlobalStatusGroup, cpCaptivePortalIntfDatabaseGroup=cpCaptivePortalIntfDatabaseGroup, cpCaptivePortalConfigName=cpCaptivePortalConfigName, cpCaptivePortalIntfClientAssocGroup=cpCaptivePortalIntfClientAssocGroup, fastPathCaptivePortal=fastPathCaptivePortal, cpCaptivePortalInstanceBlockStatus=cpCaptivePortalInstanceBlockStatus, cpClientDisconnectTrapMode=cpClientDisconnectTrapMode, cpLocalUserMaxInputOctets=cpLocalUserMaxInputOctets, cpCaptivePortalConfigWebTable=cpCaptivePortalConfigWebTable, cpInterfaceAssociationGroup=cpInterfaceAssociationGroup, cpLocalUserIndex=cpLocalUserIndex, cpCaptivePortalIntfDatabaseTable=cpCaptivePortalIntfDatabaseTable, cpCaptivePortalIntfClientAssocRowStatus=cpCaptivePortalIntfClientAssocRowStatus, cpCaptivePortalClientAssocIfIndex=cpCaptivePortalClientAssocIfIndex, cpPeerStatsReportingInterval=cpPeerStatsReportingInterval, cpCaptivePortalInstanceClientAssocTable=cpCaptivePortalInstanceClientAssocTable, cpLocalUserMaxOutputOctets=cpLocalUserMaxOutputOctets, cpGlobalConfigGroup=cpGlobalConfigGroup, cpLocalUserGroupRowStatus=cpLocalUserGroupRowStatus, cpLocalUserMaxBandwidthUp=cpLocalUserMaxBandwidthUp, cpInterfaceAssociationTable=cpInterfaceAssociationTable, cpCaptivePortalIntfAuthUserCount=cpCaptivePortalIntfAuthUserCount, cpCaptivePortalClientBytesTransmitted=cpCaptivePortalClientBytesTransmitted, cpCaptivePortalClientStatisticsTable=cpCaptivePortalClientStatisticsTable, cpCaptivePortalIntfClientAssocTable=cpCaptivePortalIntfClientAssocTable, cpCaptivePortalMaxInputOctets=cpCaptivePortalMaxInputOctets, cpCaptivePortalIntfStatusTable=cpCaptivePortalIntfStatusTable, cpLocalUserTable=cpLocalUserTable)
