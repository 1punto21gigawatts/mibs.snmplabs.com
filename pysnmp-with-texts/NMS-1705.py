#
# PySNMP MIB module NMS-1705 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-1705
# Produced by pysmi-0.3.4 at Wed May  1 14:21:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
nmsMgmt, = mibBuilder.importSymbols("NMS-SMI", "nmsMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Unsigned32, iso, Gauge32, Counter64, Integer32, IpAddress, NotificationType, Counter32, ModuleIdentity, MibIdentifier, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "iso", "Gauge32", "Counter64", "Integer32", "IpAddress", "NotificationType", "Counter32", "ModuleIdentity", "MibIdentifier", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nms1705MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175))
if mibBuilder.loadTexts: nms1705MIB.setLastUpdated('200604111300Z')
if mibBuilder.loadTexts: nms1705MIB.setOrganization('')
if mibBuilder.loadTexts: nms1705MIB.setContactInfo('')
if mibBuilder.loadTexts: nms1705MIB.setDescription('This MIB module defines the generic managed objects for NAT.')
nms1705Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1))
adslLineTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 1), )
if mibBuilder.loadTexts: adslLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: adslLineTable.setDescription('A list of terminal server line entries.')
adslLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 1, 1), ).setIndexNames((0, "NMS-1705", "adslLineNumber"))
if mibBuilder.loadTexts: adslLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adslLineEntry.setDescription('A collection of adsl objects in the nms Terminal Server implementation.')
adslLineUser = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineUser.setStatus('mandatory')
if mibBuilder.loadTexts: adslLineUser.setDescription('line user name, if line enabled, of user on this line.')
adslProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslProductID.setStatus('mandatory')
if mibBuilder.loadTexts: adslProductID.setDescription('this is product id of the device.')
adslConfigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslConfigAddr.setStatus('mandatory')
if mibBuilder.loadTexts: adslConfigAddr.setDescription('this is the alloced ip address of the device.')
adslLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adslLineNumber.setDescription('this is the online port number.')
adslPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2), )
if mibBuilder.loadTexts: adslPeriodTable.setStatus('mandatory')
if mibBuilder.loadTexts: adslPeriodTable.setDescription('A list of terminal server line entries.')
adslPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1), ).setIndexNames((0, "NMS-1705", "adslLineNumber"))
if mibBuilder.loadTexts: adslPeriodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: adslPeriodEntry.setDescription('A collection of adsl objects in the nms Terminal Server implementation.')
adslMemLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslMemLoad.setStatus('mandatory')
if mibBuilder.loadTexts: adslMemLoad.setDescription('This is the memory load infomation. it could assign the identifier 1.3.6.1.4.1.3320.9.48.1')
adslCPULoad = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslCPULoad.setStatus('mandatory')
if mibBuilder.loadTexts: adslCPULoad.setDescription('This is the CPU load infomation. it could assign the identifier 1.3.6.1.4.1.3320.9.109.1.1.1.1.5')
adslPtInCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtInCRC.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtInCRC.setDescription('The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space)')
adslPtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adslPtStatus.setStatus('current')
if mibBuilder.loadTexts: adslPtStatus.setDescription('The desired state of the port.')
adslPtSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second.it could assign the identifier 1.3.6.1.2.1.2.2.1.5ifSpeed ")
adslPtOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtOutPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
adslPtInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtInPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer')
adslPtOutError = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 8), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtOutError.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtOutError.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.it could assign the identifier 1.3.6.1.2.1.2.2.1.20ifOutErrors ')
adslPtInError = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtInError.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtInError.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.it could assign the identifier 1.3.6.1.2.1.2.2.1.14ifInErrors ')
adslPtOutSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 10), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtOutSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtOutSpeed.setDescription('it could assign the identifier 1.3.6.1.4.1.3320.2.2.1.1.9nmslocIfOutPktsSec ')
adslPtInSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 11), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtInSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtInSpeed.setDescription('it could assign the identifier 1.3.6.1.4.1.3320.2.2.1.1.7nmslocIfInPktsSec ')
adslPtOutDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtOutDrop.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtOutDrop.setDescription('it could assign the identifier 1.3.6.1.4.1.3320.2.2.1.1.27nmslocIfOutputQueueDrops ')
adslPtInDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 175, 1, 2, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adslPtInDrop.setStatus('mandatory')
if mibBuilder.loadTexts: adslPtInDrop.setDescription('it could assign the identifier 1.3.6.1.4.1.3320.2.2.1.1.26nmslocIfInputQueueDrops')
mibBuilder.exportSymbols("NMS-1705", adslPtOutError=adslPtOutError, adslPtInPkts=adslPtInPkts, adslLineTable=adslLineTable, adslPtInCRC=adslPtInCRC, adslLineUser=adslLineUser, adslPeriodEntry=adslPeriodEntry, nms1705MIB=nms1705MIB, adslLineEntry=adslLineEntry, adslPtOutPkts=adslPtOutPkts, adslPtOutSpeed=adslPtOutSpeed, PYSNMP_MODULE_ID=nms1705MIB, adslProductID=adslProductID, adslCPULoad=adslCPULoad, adslPtStatus=adslPtStatus, adslMemLoad=adslMemLoad, adslPtInError=adslPtInError, adslLineNumber=adslLineNumber, adslPtInDrop=adslPtInDrop, adslPtOutDrop=adslPtOutDrop, nms1705Objects=nms1705Objects, adslPtInSpeed=adslPtInSpeed, adslPtSpeed=adslPtSpeed, adslConfigAddr=adslConfigAddr, adslPeriodTable=adslPeriodTable)
