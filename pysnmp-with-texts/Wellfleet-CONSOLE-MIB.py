#
# PySNMP MIB module Wellfleet-CONSOLE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-CONSOLE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:39:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ModuleIdentity, Gauge32, Unsigned32, iso, Counter32, Bits, ObjectIdentity, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Integer32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Gauge32", "Unsigned32", "iso", "Counter32", "Bits", "ObjectIdentity", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Integer32", "NotificationType", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfServices, wfSerialPortGroup = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfServices", "wfSerialPortGroup")
wfConsole = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1))
wfBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 1), Integer32().clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBaudRate.setStatus('obsolete')
if mibBuilder.loadTexts: wfBaudRate.setDescription('Baud rate configured on the Technician Interface console')
wfDataBits = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 2), Integer32().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfDataBits.setStatus('obsolete')
if mibBuilder.loadTexts: wfDataBits.setDescription('Number of data bits configured on the Technician Interface console')
wfParity = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfParity.setStatus('obsolete')
if mibBuilder.loadTexts: wfParity.setDescription('Type of parity configured on the Technician Interface console')
wfStopBits = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s1bit", 1), ("s15bit", 2), ("s2bit", 3))).clone('s1bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfStopBits.setStatus('obsolete')
if mibBuilder.loadTexts: wfStopBits.setDescription('Number of stop bits configured on the Technician Interface console')
wfModemEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfModemEnable.setStatus('obsolete')
if mibBuilder.loadTexts: wfModemEnable.setDescription('Enable the Technician Interface console to run over a modem')
wfLinesPerScreen = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 6), Integer32().clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLinesPerScreen.setStatus('obsolete')
if mibBuilder.loadTexts: wfLinesPerScreen.setDescription('Number of lines which can be displayed in one screen on the Technician Interface console')
wfMoreEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfMoreEnable.setStatus('obsolete')
if mibBuilder.loadTexts: wfMoreEnable.setDescription("Enable the 'more' feature on the Technician Interface console")
wfPrompt = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPrompt.setStatus('obsolete')
if mibBuilder.loadTexts: wfPrompt.setDescription('Character string which will be used as the system prompt on the Technician Interface console')
wfLoginTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLoginTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: wfLoginTimeOut.setDescription('IF MODEM_ENABLED then time out in minutes to HUP when at the login prompt')
wfPasswordTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPasswordTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: wfPasswordTimeOut.setDescription('Timout on Password entry')
wfCommandTimeOut = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfCommandTimeOut.setStatus('obsolete')
if mibBuilder.loadTexts: wfCommandTimeOut.setDescription('IF MODEM_ENABLED then time out in minutes to HUP when at the command prompt')
wfLoginRetries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfLoginRetries.setStatus('obsolete')
if mibBuilder.loadTexts: wfLoginRetries.setDescription('IF MODEM_ENABLED then limit # of login attempts then HUP')
wfTotalLogins = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTotalLogins.setStatus('obsolete')
if mibBuilder.loadTexts: wfTotalLogins.setDescription('Total number of TI login attempts')
wfUserLoginErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfUserLoginErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfUserLoginErrors.setDescription('Total number of FAILED User login attempts')
wfManagerLoginErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfManagerLoginErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfManagerLoginErrors.setDescription('Total number of FAILED Manager login attempts')
wfOtherLoginErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfOtherLoginErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfOtherLoginErrors.setDescription('Total number of FAILED Other login attempts')
wfTtyFrameErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTtyFrameErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfTtyFrameErrors.setDescription('Count of TTY Frame errors')
wfTtyOverrunErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTtyOverrunErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfTtyOverrunErrors.setDescription('Count of TTY Overrun errors')
wfTtyParityErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTtyParityErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfTtyParityErrors.setDescription('Count of TTY Parity errors')
wfTtyInfifoErrors = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfTtyInfifoErrors.setStatus('obsolete')
if mibBuilder.loadTexts: wfTtyInfifoErrors.setDescription('Count of TTY Input Fifo errors')
wfSerialPortTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1), )
if mibBuilder.loadTexts: wfSerialPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortTable.setDescription('Configuration of system serial port(s)')
wfSerialPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1), ).setIndexNames((0, "Wellfleet-CONSOLE-MIB", "wfSerialPortNumber"))
if mibBuilder.loadTexts: wfSerialPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortEntry.setDescription('Information for each serial port.')
wfSerialPortDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortDelete.setDescription('Flag to indicate Serial Port instance deletion')
wfSerialPortDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortDisable.setDescription('Enable or disable this Serial Port')
wfSerialPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortState.setDescription('The state of this Serial Port')
wfSerialPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortNumber.setDescription('Serial Port number')
wfSerialPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortName.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortName.setDescription('Serial Port name')
wfSerialPortSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortSlot.setDescription('Slot number of Serial Port session')
wfSerialPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ti", 1), ("printer", 2), ("rtelnet", 3))).clone('ti')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortType.setDescription('Type of Serial Port')
wfSerialPortBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 8), Integer32().clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortBaudRate.setDescription('Baud rate configured on this Serial Port')
wfSerialPortDataBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 9), Integer32().clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortDataBits.setDescription('Number of data bits configured on this Serial Port')
wfSerialPortParity = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortParity.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortParity.setDescription('Type of parity configured on this Serial Port')
wfSerialPortStopBits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("s1bit", 1), ("s15bit", 2), ("s2bit", 3))).clone('s1bit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortStopBits.setDescription('Number of stop bits configured on this Serial Port')
wfSerialPortModemEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortModemEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemEnable.setDescription('Enable the Serial Port to run with modem leads enabled')
wfSerialPortLinesPerScreen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 13), Integer32().clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortLinesPerScreen.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortLinesPerScreen.setDescription('Number of lines which can be displayed in one screen on the Serial Port')
wfSerialPortMoreEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortMoreEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortMoreEnable.setDescription("Enable the 'more' feature on the Serial Port")
wfSerialPortPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortPrompt.setDescription('Character string which will be used as the system prompt on the Serial Port')
wfSerialPortLoginTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortLoginTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortLoginTimeOut.setDescription('IF MODEM_ENABLED then time out in minutes to HUP when at the login prompt')
wfSerialPortPasswordTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortPasswordTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortPasswordTimeOut.setDescription('Timout on Password entry')
wfSerialPortCommandTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortCommandTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortCommandTimeOut.setDescription('IF MODEM_ENABLED then time out in minutes to HUP when at the command prompt')
wfSerialPortLoginRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortLoginRetries.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortLoginRetries.setDescription('IF MODEM_ENABLED then limit # of login attempts then HUP')
wfSerialPortTotalLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortTotalLogins.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortTotalLogins.setDescription('Total number of TI login attempts on Serial Port')
wfSerialPortUserLoginErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortUserLoginErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortUserLoginErrors.setDescription('Total number of FAILED User login attempts on Serial Port')
wfSerialPortManagerLoginErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortManagerLoginErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortManagerLoginErrors.setDescription('Total number of FAILED Manager login attempts on Serial Port')
wfSerialPortOtherLoginErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortOtherLoginErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortOtherLoginErrors.setDescription('Total number of FAILED Other login attempts on Serial Port')
wfSerialPortTtyFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortTtyFrameErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortTtyFrameErrors.setDescription('Count of TTY Frame errors on Serial Port')
wfSerialPortTtyOverrunErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortTtyOverrunErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortTtyOverrunErrors.setDescription('Count of TTY Overrun errors on Serial Port')
wfSerialPortTtyParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortTtyParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortTtyParityErrors.setDescription('Count of TTY Parity errors on Serial Port')
wfSerialPortTtyInfifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortTtyInfifoErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortTtyInfifoErrors.setDescription('Count of TTY Input Fifo errors on Serial Port')
wfSerialPortInitialSearchPath = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortInitialSearchPath.setStatus('obsolete')
if mibBuilder.loadTexts: wfSerialPortInitialSearchPath.setDescription("Example: 'A:;1:;2:' or '2:;4:6:;9:")
wfSerialPortManagerAutoScript = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortManagerAutoScript.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortManagerAutoScript.setDescription('for each login.')
wfSerialPortUserAutoScript = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortUserAutoScript.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortUserAutoScript.setDescription('for each login.')
wfSerialPortUserAbortLogoutDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortUserAbortLogoutDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortUserAbortLogoutDisable.setDescription('a USER from escaping out of the User Autoscript')
wfSerialPortHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)).clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortHistoryDepth.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortHistoryDepth.setDescription('TI command history table size')
wfSerialPortAutoSaveNumFiles = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortAutoSaveNumFiles.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortAutoSaveNumFiles.setDescription('Number of times AutoSave will save the log 0 - disable the AutoSave log')
wfSerialPortAutoSaveVolume = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 34), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortAutoSaveVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortAutoSaveVolume.setDescription("Volume, to which AutoSave will save logs Example: 'A:' or '2:'")
wfSerialPortModemIdSwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortModemIdSwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemIdSwRev.setDescription("A textual description of the modem's firmware version number.")
wfSerialPortModemIdHwRev = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortModemIdHwRev.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemIdHwRev.setDescription('A textual description of the revision number of the modem daughter card.')
wfSerialPortModemLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("onHook", 2), ("offHook", 3), ("connected", 4), ("busiedOut", 5), ("reset", 6))).clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortModemLineState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemLineState.setDescription('Indicates the state of the modem.')
wfSerialPortModemCfgFactoryDefaults = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortModemCfgFactoryDefaults.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemCfgFactoryDefaults.setDescription('This object indicates if factory defaults are to be loaded. If set to enabled(1), factory defaults are loaded. If set to disabled(2), the initialization string in wfModemCfgInitString is not sent to the modem.')
wfSerialPortModemCfgInitString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 39), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortModemCfgInitString.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemCfgInitString.setDescription('An initialization string that will be sent to the modem each time the modem is rebooted.')
wfSerialPortModemCfgDefaultString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortModemCfgDefaultString.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemCfgDefaultString.setDescription('The string contains AT comands for initializing the modem every time the modem comes up, regardless of configuration.')
wfSerialPortModemCfgResultCodeString = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortModemCfgResultCodeString.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemCfgResultCodeString.setDescription('The ASCII response string returned by the modem. Response strings will be returned in response to last command to the modem and in response to activity on the line.')
wfSerialPortModemCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cfgIdle", 1), ("cfgInProgress", 2), ("cfgResponseReturned", 3))).clone('cfgIdle')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortModemCfgState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemCfgState.setDescription('Indicates the state of AT command processing. When a new initialization string is to be sent to the modem, the sender sets the state to cfgInProgress(2). After the command has been sent to the modem, and a result code has been returned, the state is set to cfgResponseReturned(3). Once the sender has received the return code, the sender sets the state to cfgIdle(1).')
wfSerialPortModemCfgCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("northAmerica", 1), ("japan", 2), ("uk", 3), ("germany", 4))).clone('northAmerica')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSerialPortModemCfgCountry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemCfgCountry.setDescription('Identifies the country the modem is designed to operate in. This object is not read from the modem directly. It must be entered manually when configuring the modem.')
wfSerialPortModemInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 3, 2, 11, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 8))).clone(namedValues=NamedValues(("startup", 1), ("getInfo", 3), ("setDefaults", 4), ("initialization", 5), ("initComplete", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSerialPortModemInitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSerialPortModemInitState.setDescription('Indictes the state of the modem initialization sequence. The state will freeze in the state that fails when a failure is detected. Otherwise, the state will be set to initComplete when initialization completes successfully. The state number correspond to those for the COM port modems. Some of the states are not valid for the console modem.')
mibBuilder.exportSymbols("Wellfleet-CONSOLE-MIB", wfTtyInfifoErrors=wfTtyInfifoErrors, wfUserLoginErrors=wfUserLoginErrors, wfSerialPortOtherLoginErrors=wfSerialPortOtherLoginErrors, wfTtyOverrunErrors=wfTtyOverrunErrors, wfSerialPortBaudRate=wfSerialPortBaudRate, wfSerialPortLinesPerScreen=wfSerialPortLinesPerScreen, wfSerialPortStopBits=wfSerialPortStopBits, wfSerialPortCommandTimeOut=wfSerialPortCommandTimeOut, wfSerialPortManagerAutoScript=wfSerialPortManagerAutoScript, wfSerialPortHistoryDepth=wfSerialPortHistoryDepth, wfSerialPortModemEnable=wfSerialPortModemEnable, wfSerialPortModemCfgResultCodeString=wfSerialPortModemCfgResultCodeString, wfSerialPortPasswordTimeOut=wfSerialPortPasswordTimeOut, wfSerialPortEntry=wfSerialPortEntry, wfSerialPortUserLoginErrors=wfSerialPortUserLoginErrors, wfSerialPortUserAutoScript=wfSerialPortUserAutoScript, wfTtyParityErrors=wfTtyParityErrors, wfSerialPortAutoSaveNumFiles=wfSerialPortAutoSaveNumFiles, wfSerialPortAutoSaveVolume=wfSerialPortAutoSaveVolume, wfSerialPortModemCfgFactoryDefaults=wfSerialPortModemCfgFactoryDefaults, wfDataBits=wfDataBits, wfSerialPortDelete=wfSerialPortDelete, wfSerialPortState=wfSerialPortState, wfSerialPortInitialSearchPath=wfSerialPortInitialSearchPath, wfManagerLoginErrors=wfManagerLoginErrors, wfSerialPortModemCfgCountry=wfSerialPortModemCfgCountry, wfParity=wfParity, wfSerialPortName=wfSerialPortName, wfTotalLogins=wfTotalLogins, wfSerialPortLoginRetries=wfSerialPortLoginRetries, wfSerialPortNumber=wfSerialPortNumber, wfSerialPortSlot=wfSerialPortSlot, wfBaudRate=wfBaudRate, wfSerialPortTable=wfSerialPortTable, wfSerialPortMoreEnable=wfSerialPortMoreEnable, wfSerialPortDataBits=wfSerialPortDataBits, wfModemEnable=wfModemEnable, wfSerialPortLoginTimeOut=wfSerialPortLoginTimeOut, wfSerialPortTtyOverrunErrors=wfSerialPortTtyOverrunErrors, wfPrompt=wfPrompt, wfTtyFrameErrors=wfTtyFrameErrors, wfSerialPortModemCfgState=wfSerialPortModemCfgState, wfLinesPerScreen=wfLinesPerScreen, wfSerialPortTtyFrameErrors=wfSerialPortTtyFrameErrors, wfSerialPortModemIdHwRev=wfSerialPortModemIdHwRev, wfSerialPortUserAbortLogoutDisable=wfSerialPortUserAbortLogoutDisable, wfConsole=wfConsole, wfLoginTimeOut=wfLoginTimeOut, wfCommandTimeOut=wfCommandTimeOut, wfSerialPortModemLineState=wfSerialPortModemLineState, wfOtherLoginErrors=wfOtherLoginErrors, wfStopBits=wfStopBits, wfSerialPortTotalLogins=wfSerialPortTotalLogins, wfSerialPortModemCfgDefaultString=wfSerialPortModemCfgDefaultString, wfMoreEnable=wfMoreEnable, wfSerialPortDisable=wfSerialPortDisable, wfSerialPortManagerLoginErrors=wfSerialPortManagerLoginErrors, wfSerialPortModemCfgInitString=wfSerialPortModemCfgInitString, wfSerialPortPrompt=wfSerialPortPrompt, wfSerialPortTtyInfifoErrors=wfSerialPortTtyInfifoErrors, wfPasswordTimeOut=wfPasswordTimeOut, wfSerialPortModemInitState=wfSerialPortModemInitState, wfSerialPortType=wfSerialPortType, wfSerialPortTtyParityErrors=wfSerialPortTtyParityErrors, wfLoginRetries=wfLoginRetries, wfSerialPortParity=wfSerialPortParity, wfSerialPortModemIdSwRev=wfSerialPortModemIdSwRev)
