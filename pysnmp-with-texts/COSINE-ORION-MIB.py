#
# PySNMP MIB module COSINE-ORION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COSINE-ORION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:27:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
csOrionMIB, csModules = mibBuilder.importSymbols("COSINE-GLOBAL-REG", "csOrionMIB", "csModules")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, Counter32, Integer32, ObjectIdentity, MibIdentifier, Gauge32, iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ModuleIdentity, Bits, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Integer32", "ObjectIdentity", "MibIdentifier", "Gauge32", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ModuleIdentity", "Bits", "NotificationType", "IpAddress")
MacAddress, StorageType, PhysAddress, TimeInterval, DisplayString, TruthValue, TestAndIncr, RowStatus, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "StorageType", "PhysAddress", "TimeInterval", "DisplayString", "TruthValue", "TestAndIncr", "RowStatus", "TimeStamp", "TextualConvention")
cosineOrionMod = ModuleIdentity((1, 3, 6, 1, 4, 1, 3085, 1, 1, 2))
if mibBuilder.loadTexts: cosineOrionMod.setLastUpdated('0107121701Z')
if mibBuilder.loadTexts: cosineOrionMod.setOrganization('CoSine Communications, Inc.')
if mibBuilder.loadTexts: cosineOrionMod.setContactInfo(' CoSine Communications, Inc. 1200 Bridge Parkway Redwood City, California 94065 USA 650-637-4777 info@cosinecom.com www.cosinecom.com')
if mibBuilder.loadTexts: cosineOrionMod.setDescription('The MIB module to describe generic objects for IPNOS system. ')
class LongDisplayString(TextualConvention, OctetString):
    description = 'Use this instead of DisplayString for ASCII string that is longer than 255.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 1024)

class OperStatus(TextualConvention, Integer32):
    description = 'Available operational states for the object (e.g. VPN, Virtual Router, Virtual Interface, etc.). This is used to provide additional granularity beyond that provided by RowStatus.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("operationallyDown", 1), ("initializing", 2), ("operationallyUp", 3), ("faultRecovery", 4), ("testing", 5), ("unknown", 6))

class OperState(TextualConvention, Integer32):
    description = 'Type used in enabling and disabling a row.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("off", 1), ("on", 2))

class PerfCurrentCount(TextualConvention, Gauge32):
    description = 'A counter associated with a performance measurement in a current 15 minute measurement interval. The value of this counter starts from zero and is increased when associated events occur, until the end of the 15 minute interval. At that time the value of the counter is stored in the first 15 minute history interval, and the CurrentCount is restarted at zero. In the case where the agent has no valid data available for the current interval the corresponding object instance is not available and upon a retrieval request a corresponding error message shall be returned to indicate that this instance does not exist (for example, a noSuchName error for SNMPv1 and a noSuchInstance for SNMPv2 GET operation).'
    status = 'current'

class PerfIntervalCount(TextualConvention, Gauge32):
    description = 'A counter associated with a performance measurement in a previous 15 minute measurement interval. In the case where the agent has no valid data available for a particular interval the corresponding object instance is not available and upon a retrieval request a corresponding error message shall be returned to indicate that this instance does not exist (for example, a noSuchName error for SNMPv1 and a noSuchInstance for SNMPv2 GET operation). In a system supporting a history of n intervals with IntervalCount(1) and IntervalCount(n) the most and least recent intervals respectively, the following applies at the end of a 15 minute interval: - discard the value of IntervalCount(n) - the value of IntervalCount(i) becomes that of IntervalCount(i-1) for n >= i > 1 - the value of IntervalCount(1) becomes that of CurrentCount - the TotalCount, if supported, is adjusted.'
    status = 'current'

class PerfTotalCount(TextualConvention, Gauge32):
    description = 'A counter associated with a performance measurements aggregating the previous valid 15 minute measurement intervals. (Intervals for which no valid data was available are not counted)'
    status = 'current'

class OrionIfIndex(TextualConvention, Integer32):
    description = "ifIndex for the interface table of the mib-2 is redefined here. The 32-bit integer is organized as below to easily locate an interface in an Orion box. +---------+----------+-------------+-----------------+----------------------+ |Reserved | | | | | |(always0)| slot # |port # | channel # | subif # | |1-bit | 5-bits |6-bits | 8-bits | 12-bits | +---------+----------+-------------+-----------------+----------------------+ In the case of channelized and un-channelized DS3 blades, subif #4095, refers to the PPP/CiscoHDLC interfaces encapsulted on a channel/port. If the encpsulation is Frame Relay, subif 16-4094 refers to Dlcis' an the subid #4095 refers to the Dlcmi on a channel. Whereever one of those components of ifIndex(slot/port/chan/subif) doesn't make sense, it should be Zero. For example, in the case of an ethernet blade, only the slot and port are the valid fields. Other will be zero. So, the interfeaces in an Orion box are sorted in their order of presence with respect to the slot,port,channel and subif compoinents."
    status = 'current'

class AtmVcIdentifier(TextualConvention, Integer32):
    description = 'The VCI value for a VCL. The maximum VCI value cannot exceed the value allowable by atmInterfaceMaxVciBits defined in ATM-MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class AtmVpIdentifier(TextualConvention, Integer32):
    description = 'The VPI value for a VPL or VCL. The value VPI=0 is only allowed for a VCL. For ATM UNIs supporting VPCs the VPI value ranges from 0 to 255. The VPI value 0 is supported for ATM UNIs conforming to the ATM Forum UNI 4.0 Annex 8 (Virtual UNIs) specification. For ATM UNIs supporting VCCs the VPI value ranges from 0 to 255. For ATM NNIs the VPI value ranges from 0 to 4095. The maximum VPI value cannot exceed the value allowable by atmInterfaceMaxVpiBits defined in ATM-MIB.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4095)

class AtmServiceCategory(TextualConvention, Integer32):
    reference = 'ATM Forum Traffic Management Specification, Version 4.0, af-tm-0056.000, June 1996.'
    description = 'The service category for a connection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("other", 1), ("cbr", 2), ("rtVbr", 3), ("nrtVbr", 4), ("abr", 5), ("ubr", 6))

class SPPBaudRate(TextualConvention, Integer32):
    reference = 'None'
    description = 'The baud rate of a Status Panel port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))
    namedValues = NamedValues(("baud50", 1), ("baud75", 2), ("baud110", 3), ("baud134Dot5", 4), ("baud150", 5), ("baud300", 6), ("baud600", 7), ("baud1200", 8), ("baud1800", 9), ("baud2000", 10), ("baud2400", 11), ("baud3600", 12), ("baud3800", 13), ("baud7200", 14), ("baud9600", 15), ("baud19200", 16), ("baud38400", 17), ("baud56000", 18), ("baud128000", 19))

class SPPLoopbackStatus(TextualConvention, Integer32):
    reference = 'None'
    description = 'The loopback status of a Status Panel port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("noLoop", 1), ("ccmLoop", 2), ("spLoop", 3))

class SPPModemStatus(TextualConvention, Integer32):
    reference = 'None'
    description = 'Indicates whether a modem is connected to a Service Panel port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("modemConnected", 1), ("modemNotConnected", 2))

class SPPRedundantStatus(TextualConvention, Integer32):
    reference = 'None'
    description = '???? Ask Bev ????'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("master", 1), ("standby", 2))

class EvLogLevel(TextualConvention, Integer32):
    description = 'This specifies the level of detail for the event log.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 100, 200, 300, 400, 500))
    namedValues = NamedValues(("none", 0), ("critical", 100), ("major", 200), ("minor", 300), ("informational", 400), ("debug", 500))

class EvLogArea(TextualConvention, Integer32):
    description = 'This is a bitmap where each bit represents the area that the event log belongs to. area bit ------------------------------------------------------ trap 0 emergency 1 system 2 authentication 3 application 4 protocol 5 ipsec/ike 6 link 7 configuration 8 '
    status = 'current'

class MplsLabel(TextualConvention, Integer32):
    reference = '1. MPLS Label Stack Encoding, Rosen et al, draft- ietf-mpls-label-encaps-04.txt, April 1999. 2. Use of Label Switching on Frame Relay Networks, Conta et al, draft-ietf-mpls-fr-03.txt, Nov. 1998.'
    description = 'Represents an MPLS label. Note that the contents of a label field are interpreted in an interface-type specific fashion. For example, the label carried in the MPLS shim header is 20 bits wide and the top 12 bits must be zero. The frame relay label can be either 10, 17 or 23 bits wide depending on the size of the DLCI field size and the top 22, 15, or 9 bits must be zero, respectively. For an ATM interface, the lowermost 16 bits are interpreted as the VCI, the next 8 bits as the VPI and the remaining bits must be zero. Also note the permissible label values are also a function of the interface type. For example, the value 3 has special semantics in the control plane for an MPLS shim header label and is not a valid label value in the datapath.'
    status = 'current'

class MplsLsrIdentifier(TextualConvention, OctetString):
    description = 'The Label Switch Router (LSR) identifier is the first 4 bytes or the Router Id component of the Label Distribution Protocol (LDP) identifier.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

class MplsLdpIdentifier(TextualConvention, OctetString):
    description = 'The LDP identifier is a six octet quantity which is used to identify an Label Switch Router (LSR) label space. The first four octets encode an IP address assigned to the LSR, and the last two octets identify a specific label space within the LSR.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

class MplsLdpLabelTypes(TextualConvention, Integer32):
    description = 'The Layer 2 label types which are defined for MPLS LDP are generic(1), atm(2), or frameRelay(3).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("generic", 1), ("atm", 2), ("frameRelay", 3))

class MplsLdpGenAddr(TextualConvention, OctetString):
    description = 'The value of an network layer or data link layer address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 64)

class MplsAtmVcIdentifier(TextualConvention, Integer32):
    description = 'The VCI value for a VCL. The maximum VCI value cannot exceed the value allowable by atmInterfaceMaxVciBits defined in ATM-MIB. The minimum value is 32, values 0 to 31 are reserved for other uses by the ITU and ATM Forum. 32 is typically the default value for the Control VC.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(32, 65535)

class InterfaceIndexOrZero(TextualConvention, Integer32):
    reference = 'RFC 2933: Internet Group Management Protocol MIB'
    description = 'Represents an interface index'
    status = 'current'

class PwVcIndex(TextualConvention, Unsigned32):
    description = 'Virtual Circuit Index. Locally unique index for indexing one of several MIB tables associated with a particular VC.'
    status = 'current'

class PwVcInstance(TextualConvention, Unsigned32):
    description = 'Virtual Circuit Instance. Use in conjunction with PwVcIndex when it is required to have more than one instance of a particular VC. The primary application for instances is APS where there are primary and backup VCs.'
    status = 'current'

class PwVcID(TextualConvention, Unsigned32):
    description = 'Virtual Circuit Identifier. Uniquely identifies a VC locally. Also uniquely identifies a VC at its end points.'
    status = 'current'

class PwGroupID(TextualConvention, Unsigned32):
    description = 'An administrative identification mechanism for grouping a set of service-specific pseudo-wire services. May only have local significance'
    status = 'current'

class SnmpAdminString(TextualConvention, OctetString):
    description = 'An octet string containing administrative information, preferably in human-readable form. To facilitate internationalization, this information is represented using the ISO/IEC IS 10646-1 character set, encoded as an octet string using the UTF-8 transformation format described in [RFC2279]. Since additional code points are added by amendments to the 10646 standard from time to time, implementations must be prepared to encounter any code point from 0x00000000 to 0x7fffffff. Byte sequences that do not correspond to the valid UTF-8 encoding of a code point or are outside this range are prohibited. The use of control codes should be avoided. When it is necessary to represent a newline, the control code sequence CR LF should be used. The use of leading or trailing white space should be avoided. For code points not directly supported by user interface hardware or software, an alternative means of entry and display, such as hexadecimal, may be provided. For information encoded in 7-bit US-ASCII, the UTF-8 encoding is identical to the US-ASCII encoding. UTF-8 may require multiple bytes to represent a single character / code point; thus the length of this object in octets may be different from the number of characters encoded. Similarly, size constraints refer to the number of encoded octets, not the number of characters represented by an encoding. Note that when this TC is used for an object that is used or envisioned to be used as an index, then a SIZE restriction MUST be specified so that the number of sub-identifiers for any object instance does not exceed the limit of 128, as defined by [RFC1905]. Note that the size of an SnmpAdminString object is measured in octets, not characters. '
    status = 'current'
    displayHint = '255a'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class IKERadiusAcctUserType(TextualConvention, Integer32):
    description = 'Specifies the type of information included in the RADIUS accounting-request user-name attribute sent by IKE.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("xauthUserId", 1), ("subjectAltName", 2), ("distinguishedName", 3), ("assignedIPAddress", 4))

csOrionEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1))
csOrionSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2))
csOrionGeneralSys = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1))
csOrionBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2))
csOrionLogin = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3))
csOrionModem = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4))
csOrionConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5))
csOrionConfigSave = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1))
csOrionConfigLoad = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 2))
csOrionFileSys = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6))
csOrionChassisInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7))
csOrionPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3))
csOrionEthInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1))
csOrionDs3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2))
csOrionOc3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3))
csOrionFrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4))
csAtmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5))
csPOSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6))
csOrionVPNInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4))
csOrionBladeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5))
csOrionServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6))
csOrionAccessListInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1))
csOrionFWInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2))
csOrionPktFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3))
csOrionNatInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4))
csOrionEncryptInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5))
csOrionQueueInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6))
csOrionPppInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7))
csOrionPptpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8))
csOrionRadiusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9))
csOrionDNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10))
csOrionCiscoHdlcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11))
csOrionFRoIPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12))
csOrionL2tpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13))
csOrionQosInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14))
csOrionDHCPInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15))
csOrionDHCPRelayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1))
csOrionMlpppInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16))
csOrionPppoeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17))
csOrionServiceSelectionInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18))
csOrionNBNSInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19))
csOrionSpfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20))
csOrionAAAServiceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21))
csOrionMeter = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22))
csOrionHWControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7))
csOrionPowerSupplyControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3))
csOrionStatusPanelControlInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6))
csOrionTemperatureAirFlowCardInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7))
csOrionBackplaneInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 8))
csOrionSnmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9))
csOrionGenSnmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1))
csOrionTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2))
csOrionAcctInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10))
csOrionStaticConn = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1))
csOrionDynamicConn = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2))
csTelnetSvrInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11))
csOrionSyslogd = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12))
csOrionHWNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13))
csOrionStatusPanelInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14))
csOrionSystemIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemIpAddress.setDescription('A system Ip address.')
csOrionSystemNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemNetMask.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemNetMask.setDescription('A system network mask.')
csOrionSystemGatewayAddress = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemGatewayAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemGatewayAddress.setDescription('A system default gateway address.')
csOrionSystemFwVer = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemFwVer.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemFwVer.setDescription(' The fw version used by Orion')
csOrionSystemMajorVer = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemMajorVer.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemMajorVer.setDescription(' The version for a Orion as a system.')
csOrionSystemNumberOfBlades = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemNumberOfBlades.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemNumberOfBlades.setDescription('')
csOrionSystemTempStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("hot", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemTempStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemTempStatus.setDescription('This object identifies the current temperature status within the Orion system. If this object has the value normal(1), the temperature is within the normal range. If the status is hot(2), the temperature is above the normal range and measures should be taken to bring the temperature down.')
csOrionSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemReset.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemReset.setDescription("The software reset. It is an action object such that when set to 'reset' will reset all the blades. Setting it to 'none' has no effect, and when it is retrieved the value will always be 'none' . ")
csOrionSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemTime.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemTime.setDescription("To set the system date & time with the standard format specified by RFC 2579. Below is the date-time specification. (Display Format: YYYY-MM-DD,HH:MM:SS.ss,+/-:HH:MM) field contents range ----- -------- ----- 1 year* 1999..2098 2 month 1..12 3 day 1..31 4 hour 0..23 5 minutes 0..59 6 seconds 0..60 (use 60 for leap-second) 7 deci-seconds 0..9 8 direction from UTC '+' / '-' 9 hours from UTC* 0..13 10 minutes from UTC 0..59 * Notes: - the value of year is in network-byte order - daylight saving time in New Zealand is +13 For example, Tuesday May 26, 2000 at 1:30:15 PM EDT would be displayed as: 2000-5-26,13:30:15.0,-4:0 Note that if only local time is known, then timezone information (fields 8-10) is not present. ")
csOrionSystemVersionNum = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemVersionNum.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemVersionNum.setDescription("The system version number applies to the IPSX system as a whole. This number has the format: a.b.c.d where 'a.b' is major release number, 'c' is the patch nubmer, and 'd' is the internal release number.")
csOrionSystemShutdown = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemShutdown.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemShutdown.setDescription("The software shutdown. It is an action object such that when set to 'shutdown' will stop the file-system of all the blades. that when set to 'shutdown' will stop the file-system of all the blades. Setting it to 'none' has no effect, and when it is retrieved the value will always be 'none' . ")
csOrionSystemControlBladeFailOver = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("failover", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemControlBladeFailOver.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemControlBladeFailOver.setDescription("When set to 'failover', the master control blade switches over to stand-by control blade. Setting it to 'none' has no effect, and when it is retrieved the value will always be 'none' . ")
csOrionSystemCLIRadiusAuthentication = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("radius", 1), ("localDatabase", 2))).clone('localDatabase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemCLIRadiusAuthentication.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionSystemCLIRadiusAuthentication.setDescription('NOTE: This object has been replaced by csOrionSystemLoginServer. When this object is set to radius, radius server will be used to authenticate a user logging into a CLI session. When this object is set to localDatabase, the password file resided locally will be used to authenticate the CLI user.')
csOrionSystemBootTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1), )
if mibBuilder.loadTexts: csOrionSystemBootTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootTable.setDescription('A list of Sources from which this Orion will boot.')
csOrionSystemBootEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemBootIndex"))
if mibBuilder.loadTexts: csOrionSystemBootEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootEntry.setDescription('An entry containing Boot information applicable to this Orion System. Note, currently there is only one entry in this table. More entries may be added in future releases.')
csOrionSystemBootIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionSystemBootIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootIndex.setDescription('A unique value, greater than zero, for each boot record.')
csOrionSystemBootImageName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName1.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootImageName1.setDescription("The absolute path and file name for the boot image. If this string is prefaced with 'FLSH', tftp will be used to boot over the network. This applies to all 6 images.")
csOrionSystemBootImageName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName2.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootImageName2.setDescription(' The 2nd absolute path and file name for the boot image. This will be used only if the previous boot images fail.')
csOrionSystemBootImageName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName3.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootImageName3.setDescription(' The 3rd absolute path and file name for the boot image. This will be used only if the previous boot images fail.')
csOrionSystemBootImageName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName4.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootImageName4.setDescription(' The 4th absolute path and file name for the boot image. This will be used only if the previous boot images fail.')
csOrionSystemBootImageName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName5.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootImageName5.setDescription(' The 5th absolute path and file name for the boot image. This will be used only if the previous boot images fail.')
csOrionSystemBootImageName6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootImageName6.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootImageName6.setDescription(' The 6th absolute path and file name for the boot image. This will be used only if the previous boot images fail.')
csOrionSystemBootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootPort.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootPort.setDescription('When booting over the network, the port used to load the image')
csOrionSystemBootServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootServerAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootServerAddress.setDescription(' A boot server Ip Address. Note, this only applies if this entry specifies booting over the network.')
csOrionSystemBootLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootLocalIpAddr.setDescription(' When booting over the network using a boot protocol that does not supply a source IP address, This object specifies the local IP address to use when booting via the network.')
csOrionSystemBootLocalIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootLocalIpMask.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootLocalIpMask.setDescription(' When booting over the network using a boot protocol that does not supply a source IP address, This object specifies the local IP address mask to use when booting via the network.')
csOrionSystemBootDefGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootDefGw.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootDefGw.setDescription(' When booting over the network, this object is used to identify the gateway to use in communicating with the boot server.')
csOrionSystemBootConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootConfig.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootConfig.setDescription('The absolute path and file name for the configuration file. Note, the configuration file must be on the local flash.')
csOrionSystemBootSaveImage = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootSaveImage.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootSaveImage.setDescription('This object specifies whether the IPSX system will save the boot image in local flash. Note this applies only if the csOrionSystemBootProtocol is tftp(2).')
csOrionSystemBootUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootUserName.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootUserName.setDescription('User Name to use if the download is via FTP')
csOrionSystemBootUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootUserPassword.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootUserPassword.setDescription('Password to use if the download is via FTP')
csOrionSystemBootInternalNwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootInternalNwAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootInternalNwAddr.setDescription('All the blades in the system make a internal network. This attribute defines the network part (255.255.0.0) of this subnet. Default is 172.168.0.0')
csOrionSystemBootConcurrentDownloads = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemBootConcurrentDownloads.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemBootConcurrentDownloads.setDescription('Maximum number of downloads that can occur concurrently. if configured to 0, then there is no limit to number of simultaneous download sessions. This is useful if the TFTP/FTP server cannot handle a large number of TFTP/FTP sessions')
csOrionSystemLoginUserTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1), )
if mibBuilder.loadTexts: csOrionSystemLoginUserTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserTable.setDescription('A login information for Orion, using console or telnet.')
csOrionSystemLoginUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginUserName"))
if mibBuilder.loadTexts: csOrionSystemLoginUserEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserEntry.setDescription('An entry contains information for one CLI login user.')
csOrionSystemLoginUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSystemLoginUserName.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserName.setDescription(' The login user name.')
csOrionSystemLoginUserDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginUserDesc.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserDesc.setDescription(' User information')
csOrionSystemLoginUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginUserPassword.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserPassword.setDescription('A sequence of alphabetical and numerical characters, MUST not be less than 8 characters.')
csOrionSystemLoginUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserRowStatus.setDescription('A row status type for the table entry.')
csOrionSystemLoginUserOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSystemLoginUserOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginUserOperStatus.setDescription('A operational status for this table entry.')
csOrionSystemLoginRoleTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2), )
if mibBuilder.loadTexts: csOrionSystemLoginRoleTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginRoleTable.setDescription('A role for a login user.')
csOrionSystemLoginRoleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginRoleName"))
if mibBuilder.loadTexts: csOrionSystemLoginRoleEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginRoleEntry.setDescription('An entry contains information for one role type. A role is a group of feature access permissions. Each login user is associated with a single role.')
csOrionSystemLoginRoleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSystemLoginRoleName.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginRoleName.setDescription(' The name of a role. ')
csOrionSystemLoginRoleDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginRoleDesc.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginRoleDesc.setDescription(' Information about the role. ')
csOrionSystemLoginRoleAccessRights = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 65535)).clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginRoleAccessRights.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginRoleAccessRights.setDescription("Access rights of a role are a list of feature-wise permissions. The permissions of a feature are represented by a 4-byte tuple {rights (1-byte),featureid(3-bytes)}. The features in this list are in the ascending order of their feature-id. rights: Access rights are classified into the following categories (given below along with the mapping to unix-style read,write and execute permissions): 0 : none (rwx-style = ---) 1 : all (rwx-style = rwx) 2 : view (rwx-style = r--) 3 : config (rwx-style = rw-) 4 : monitor (rwx-style = r-x) Feature-id's: A feature is a set of commands which are grouped into a read, write or execute command-type. all (1), access (2), clear (3), device (4), dialup (5), diff_serve (6), event_log (7), field (8), firewall (9), froip (10), nat (11), routing (12), service_selection (13), show (14), tunnel (15), vpnvr (16) ")
csOrionSystemLoginRoleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginRoleRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginRoleRowStatus.setDescription('A row status type for the table entry.')
csOrionSystemLoginDomainTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3), )
if mibBuilder.loadTexts: csOrionSystemLoginDomainTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainTable.setDescription('A domain for a login user.')
csOrionSystemLoginDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginDomainName"))
if mibBuilder.loadTexts: csOrionSystemLoginDomainEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainEntry.setDescription('An entry contains information for one domain. A domain is a group of object instances which defines the scope a role for for a user. Each login user is associated with a single domain.')
csOrionSystemLoginDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSystemLoginDomainName.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainName.setDescription(' The name of an access domain. ')
csOrionSystemLoginDomainDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainDesc.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainDesc.setDescription(' Information about the access domain. ')
csOrionSystemLoginDomainVRList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 3), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainVRList.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainVRList.setDescription('A list of VPN/VRs a user can access. A VPN/VR is represented as /. The VPN/VRs in the list are separated either by a space(s). The following are valid wildcards for a VR: /* : All VRs with the given VPN. */* : All VRs. If it used then it should be the only entry in the list. ')
csOrionSystemLoginDomainInterfaceList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 4), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainInterfaceList.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainInterfaceList.setDescription("List of interfaces which an user can access. The interfaces in the list are separated either by space(s). Each interface is represented as follows: [/[:channel-range>[:]]] where each range above has the follog syntax: = { * | | - } If the optional elements (,,etc) are not specified they default to '*', which denotes all values. is always less than . If '*' or range is specified for an element then all following elements MUST be wildcard enrtries The chassis as an interface can also be included in the list and is represented by the key-word 'chassis' Valid interface examples: * - same as */*/*/* 5-6/* chassis 5/3-5/* 5/3/2-4 Invalid interface Eg: 5/*/3 ")
csOrionSystemLoginDomainRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginDomainRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginDomainRowStatus.setDescription('A row status type for the table entry.')
csOrionSystemLoginPermTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 4), )
if mibBuilder.loadTexts: csOrionSystemLoginPermTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginPermTable.setDescription('Access permissions for a login user. A permission id represented as a :. A user can have multiple permissions.')
csOrionSystemLoginPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSystemLoginUserName"), (0, "COSINE-ORION-MIB", "csOrionSystemLoginRoleName"), (0, "COSINE-ORION-MIB", "csOrionSystemLoginDomainName"))
if mibBuilder.loadTexts: csOrionSystemLoginPermEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginPermEntry.setDescription('An entry contains information for one login user permission.')
csOrionSystemLoginPermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 4, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSystemLoginPermRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginPermRowStatus.setDescription('A row status type for the table entry.')
csOrionSystemLoginServer = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("localDatabase", 2))).clone('localDatabase')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemLoginServer.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginServer.setDescription('When this object is set to remote, a remote authentication server (csOrionSystemLoginServerListName) will be used to authenticate a user logging into a CLI session. When this object is set to localDatabase, the password file residing locally will be used to authenticate the CLI user.')
csOrionSystemLoginServerListName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 3, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSystemLoginServerListName.setStatus('current')
if mibBuilder.loadTexts: csOrionSystemLoginServerListName.setDescription('The name of the server list to use for remote authentication, if no list is specified then the server specified in the default server list is used. Cli authentication uses the server list and default servers configured on the system virtual router. ')
csOrionModemControl = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemControl.setStatus('current')
if mibBuilder.loadTexts: csOrionModemControl.setDescription('This object controls access to this device via Dial In modem.')
csOrionModemBaud = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemBaud.setStatus('current')
if mibBuilder.loadTexts: csOrionModemBaud.setDescription('This object sets the target baud rate of the modem connection.')
csOrionModemFlowCtl = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hardware", 1), ("software", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemFlowCtl.setStatus('current')
if mibBuilder.loadTexts: csOrionModemFlowCtl.setDescription('This object specifies the type of flow control used by the modem.')
csOrionModemConnectWait = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionModemConnectWait.setStatus('current')
if mibBuilder.loadTexts: csOrionModemConnectWait.setDescription('This object sets the length of time, in seconds, the modem will wait for a connection.')
csOrionConfigSaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionConfigSaveFileName.setStatus('current')
if mibBuilder.loadTexts: csOrionConfigSaveFileName.setDescription('This object is used when the save configuration is launched on an Orion box by setting the csOrionConfigSave object. The device handle the default value for this object. When this object is not set, the device look for the csOrionSystemBootConfig of the csOrionSystemBootTable. If that is not NULL, that name is used as the file name. Otherwise the default filename of config.dat is used.')
csOrionConfigSaveStart = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("save", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionConfigSaveStart.setStatus('current')
if mibBuilder.loadTexts: csOrionConfigSaveStart.setDescription('This object triggers the configuration saving on the divice. The result of this action is stored in csOrionConfigSaveStatus.')
csOrionConfigSaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("saveInProgress", 2), ("saveSuccess", 3), ("saveFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionConfigSaveStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionConfigSaveStatus.setDescription('This object triggers the configuration saving on the divice. The result of this action is stored in csOrionConfigSaveStatus.')
csOrionConfigLoadOutputEnable = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionConfigLoadOutputEnable.setStatus('current')
if mibBuilder.loadTexts: csOrionConfigLoadOutputEnable.setDescription('This object controls whether output from loading configuration file should be printed out to the console. Loading configuration will be quicker if this object is disabled.')
csOrionFileSysReqTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1), )
if mibBuilder.loadTexts: csOrionFileSysReqTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqTable.setDescription('File System Request Table.')
csOrionFileSysReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFileSysReqIndex"))
if mibBuilder.loadTexts: csOrionFileSysReqEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqEntry.setDescription('An entry of File System Request Table.')
csOrionFileSysReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFileSysReqIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqIndex.setDescription('This object identifies a specific File System request entry. NMSs are expected to come up with a unique ID each request. This ID will also be used to index the File System result entry.')
csOrionFileSysReqType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("dir", 2), ("delete", 3), ("copy", 4), ("rename", 5), ("load", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqType.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqType.setDescription('This object specifies the filesystem operation stated in the enumeration above. We will add entries as we support additional filesystem commands. Objects that hold the parameters must also be set for commands that requires some arguments.')
csOrionFileSysReqSrcFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqSrcFile.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqSrcFile.setDescription("This object is used to hold the source file for the file system operation. Must be set for 'delete', 'copy' and 'rename' requests. For 'load' request, the file to be loaded should be set using this object. If not set, the default file defined in csOrionSystemBootConfig will be loaded.")
csOrionFileSysReqDestFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqDestFile.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqDestFile.setDescription('This object is used to hold the source file for the file system operation. Must be set for copy and rename requests.')
csOrionFileSysReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("opInProgress", 2), ("opSuccess", 3), ("opFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFileSysReqStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqStatus.setDescription("This object is used to store the status of the File System request. operation. For 'dir' operation, csOrionFileSysResultTable should only be evaluated after this object yields opSuccess(3).")
csOrionFileSysReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFileSysReqRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysReqRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csOrionFileSysResultTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2), )
if mibBuilder.loadTexts: csOrionFileSysResultTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysResultTable.setDescription('File System Result Table. The object csOrionFileSysReqStatus should be evaluated before acquiring the results from this table.')
csOrionFileSysResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFileSysResultIndex"), (0, "COSINE-ORION-MIB", "csOrionFileSysResultFilename"))
if mibBuilder.loadTexts: csOrionFileSysResultEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysResultEntry.setDescription("An entry of File System Result Table. Each file returned from 'dir' request corresponds to an entry in csOrionFileSysResultEntry. Additional 'getnext' is expected to obtain the succeeding files. We will add objects in this table as we expose more file attributes.")
csOrionFileSysResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFileSysResultIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysResultIndex.setDescription('This object identifies a specific File System result entry. This index corresponds to the ID provided by NMSs on File System request.')
csOrionFileSysResultFilename = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionFileSysResultFilename.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysResultFilename.setDescription("This object is used to hold the filename from the 'dir' request.")
csOrionFileSysResultFilesize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFileSysResultFilesize.setStatus('current')
if mibBuilder.loadTexts: csOrionFileSysResultFilesize.setDescription("This object is used to hold the filesize from the 'dir' request.")
csOrionChassisMidplaneID = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(7, 7)).setFixedLength(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisMidplaneID.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisMidplaneID.setDescription('Midplane laser ID for this chassis.')
csOrionChassisType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ipsx3500", 1), ("ipsx9000", 2), ("ipsx9500", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisType.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisType.setDescription('Chassis type.')
csOrionChassisPacketRingStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noProtection", 1), ("onProtection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisPacketRingStatus.setDescription('Status of the packet ring. noProtection means protection ring is inactive. onProtection means protection ring is active.')
csOrionChassisPacketRingPrimToProtEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingPrimToProtEndpoint.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisPacketRingPrimToProtEndpoint.setDescription('Slot number of the primary to protection endpoint. If csOrionChassisPacketRingStatus is noProtection, this object will have a value of 0.')
csOrionChassisPacketRingProtToPrimEndpoint = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingProtToPrimEndpoint.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisPacketRingProtToPrimEndpoint.setDescription('Slot number of the protection to primary endpoint. If csOrionChassisPacketRingStatus is noProtection, this object will have a value of 0.')
csOrionChassisPacketRingPrimaryCRC = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingPrimaryCRC.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisPacketRingPrimaryCRC.setDescription('CRC count on the primary packet ring.')
csOrionChassisPacketRingProtectionCRC = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 2, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChassisPacketRingProtectionCRC.setStatus('current')
if mibBuilder.loadTexts: csOrionChassisPacketRingProtectionCRC.setDescription('CRC count on the protection packet ring.')
csEthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1), )
if mibBuilder.loadTexts: csEthTable.setStatus('current')
if mibBuilder.loadTexts: csEthTable.setDescription('The Orion Ethernet Table.')
csEthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csEthSlotIndex"), (0, "COSINE-ORION-MIB", "csEthModuleIndex"), (0, "COSINE-ORION-MIB", "csEthPortIndex"))
if mibBuilder.loadTexts: csEthEntry.setStatus('current')
if mibBuilder.loadTexts: csEthEntry.setDescription('An entry in the Ethernet Table.')
csEthSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csEthSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csEthSlotIndex.setDescription('This object identifies the slot in which the blade that supports this port is installed.')
csEthModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csEthModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csEthModuleIndex.setDescription('This object identifies a specific module on the blade installed in csEthSlotIndex.')
csEthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csEthPortIndex.setStatus('current')
if mibBuilder.loadTexts: csEthPortIndex.setDescription('This object identifies a specific port on the module installed in csEthModuleIndex.')
csEthEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("eth", 1), ("ieee", 2), ("snap", 3))).clone('eth')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthEncapType.setStatus('current')
if mibBuilder.loadTexts: csEthEncapType.setDescription('This object identifies the encapsulation method used on this Ethernet port.')
csEthAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthAutoneg.setStatus('current')
if mibBuilder.loadTexts: csEthAutoneg.setDescription('This object is used to enable or disable the autonegotiation feature of this Ethernet port. This feature is used to automatically negotiate the Speed and Duplex mode for 10/100 Mbps Ethernet ports.')
csEthDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthDuplex.setStatus('current')
if mibBuilder.loadTexts: csEthDuplex.setDescription('This object is used to specify the Duplex mode of this Ethernet port. This is used only if csEthAutoneg is disabled. Note: The default value is removed because it is not fixed in the system after reboot when autonegotiation enabled. It is hardware configuration dependent.')
csEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1000", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthSpeed.setStatus('current')
if mibBuilder.loadTexts: csEthSpeed.setDescription('This object is used to specify the speed of this Ethernet port. This is used only if csEthAutoneg is disabled. Note: The default value is removed because it is not fixed in the system after reboot when autonegotiation enabled. It is hardware configuration dependent.')
csEthLinkTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthLinkTestInterval.setStatus('current')
if mibBuilder.loadTexts: csEthLinkTestInterval.setDescription('This object is used to specify the interval, in seconds, between Link Test packet transmissions. If this object is set to 0, no Link Test packets are sent.')
csEthAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csEthAdminStatus.setDescription('This object is used to enable/disable thie Ethernet port.')
csEthOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 10), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthOperStatus.setStatus('current')
if mibBuilder.loadTexts: csEthOperStatus.setDescription('This object indicates the current operational status of this Ethernet port.')
csEthPppoeService = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthPppoeService.setStatus('current')
if mibBuilder.loadTexts: csEthPppoeService.setDescription('This object is used to enable or disable PPPoE service on Ethernet Ports.')
csEthSubIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2), )
if mibBuilder.loadTexts: csEthSubIfTable.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfTable.setDescription('The Orion Ethernet Sub-Interface Table.')
csEthSubIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csEthSlotIndex"), (0, "COSINE-ORION-MIB", "csEthModuleIndex"), (0, "COSINE-ORION-MIB", "csEthPortIndex"), (0, "COSINE-ORION-MIB", "csEthSubIfChannelIndex"), (0, "COSINE-ORION-MIB", "csEthSubIfIndex"))
if mibBuilder.loadTexts: csEthSubIfEntry.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfEntry.setDescription('The Parameters for a VLAN Interface.')
csEthSubIfChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csEthSubIfChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfChannelIndex.setDescription('Channel ID of this VLAN connection. Currently, it will always be 0.')
csEthSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: csEthSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfIndex.setDescription('The Sub Interface Id of the Logical Interface.')
csEthSubIfVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfVlanId.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfVlanId.setDescription('The unipue number between 0 and 4095 that identifies a particular VLAN. The range of VLAN IDs supported per port is from 2 to 4094. The null VLAN Id (0) indicates that the tag header contains only user priority information. The VLAN Id 1, 4095 is reserved for implementation use.')
csEthSubIfUserPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfUserPriority.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfUserPriority.setDescription('The user priority for this VLAN')
csEthSubIfVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfVlanName.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfVlanName.setDescription('The name for this VLAN')
csEthSubIfAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfAdmStatus.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfAdmStatus.setDescription('This object is used to enable/disable this VLAN.')
csEthSubIfOpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthSubIfOpStatus.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfOpStatus.setDescription('The operational status for this VLAN.')
csEthSubIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csEthSubIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csEthSubIfRowStatus.setDescription('This object is used to create a new row or modify or destroy an existing row in the manner described in the definition of the RowStatus textual convention. Writable objects in the table may be written in any RowStatus state.')
csEthSubifPppoeService = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csEthSubifPppoeService.setStatus('current')
if mibBuilder.loadTexts: csEthSubifPppoeService.setDescription('This object is used to enable or disable PPPoE service on VLAN.')
csDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1), )
if mibBuilder.loadTexts: csDs3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigTable.setDescription('The DS3 configuration table.')
csDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csDs3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigEntry.setDescription('An entry in the DS3 Configuration table.')
csDs3ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csDs3ConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigSlotIndex.setDescription('This object identifies the blade to which this Ds3 Port is attached. Together with csDs3ConfigModuleIndex, csDs3ConfigPortIndex, it uniquely identifies a physical port.')
csDs3ConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csDs3ConfigModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigModuleIndex.setDescription('This object identifies the type of of the Ds3 Module on the blade identified by csChDs3SlotIndex.')
csDs3ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csDs3ConfigPortIndex.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigPortIndex.setDescription('This object identifies the location of the Ds3 Port on the module identified by csChDs3ModuleIndex. Together with csDs3ConfigSlotIndex, csDs3ConfigModuleIndex, it uniquely identifies a physical port.')
csDs3ConfigCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigCableLength.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigCableLength.setDescription('The length of the DS3 cable. NOTE: This is applicable only for DS3.')
csDs3ConfigFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("auto", 3), ("e3Framed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigFraming.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigFraming.setDescription('The framing format used on this Ds3 Interface. The default value is cbit if the interface is DS3. If the interface is E3, e3Framed will be used, and cannot be configured to any other types.')
csDs3ConfigMdlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlPath.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlPath.setDescription('This object controls the transmission of the MDL Path message. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlIdleSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlIdleSig.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlIdleSig.setDescription('This object controls the transmission of the MDL Idle Signal message. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlTestSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlTestSig.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlTestSig.setDescription('This object controls the transmission of the MDL Test Signal message. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlEic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlEic.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlEic.setDescription('This object specifies the Equipment Identification Code. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlLic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlLic.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlLic.setDescription('This object specifies the Location Identification Code. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlFic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlFic.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlFic.setDescription('This object specifies the Frame Identification Code. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlUnit.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlUnit.setDescription('This object specifies the Unit Identification Code. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlPfi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlPfi.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlPfi.setDescription('This object specifies the Facility Identification Code sent in the MDL Path message. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlPort.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlPort.setDescription('This object specifies the Port number string sent in the MDL Idle Signal message. NOTE: This is applicable only for DS3.')
csDs3ConfigMdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigMdlGenerator.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigMdlGenerator.setDescription('This object specifies the Generator number string sent in the MDL Test Signal message. NOTE: This is applicable only for DS3.')
csDs3ConfigTestT1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigTestT1Id.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigTestT1Id.setDescription("This object identifies which of the 28 T1's within this DS3 are to be broken out into the Test T1 port. If none of the T1's are to be broken out, this object should be set to 0. NOTE: This is applicable only for DS3.")
csDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigAdminStatus.setDescription('This object is used to enable/disable this Ds3 port.')
csDs3ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 18), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigOperStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigOperStatus.setDescription('This object indicates the current operational status of this Ds3 port.')
csDs3ConfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigClockSource.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigClockSource.setDescription('This object specifies the source of the Transmit Clock used on this (unchannelized) DS3. If this object is set to internal(1), a local clock source is used. If this object is set to line(2), the recovered received clock is used as the transmit clock. NOTE: This is applicable only for DS3.')
csDs3ConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigDeviceType.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigDeviceType.setDescription('This object indicates whether the interface is DS3 or E3.')
csDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendPayloadCode", 3), ("ds3SendResetCode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigSendCode.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigSendCode.setDescription('This variable indicates what type of code is being sent across the DS3 interface by the device. Setting this variable causes the interface to begin sending the code requested. The values mean: sendNoCode sending looped or normal data sendLineCode sending a request for a line loopback sendPayloadCode sending a request for a payload loopback (i.e., all DS1/E1s in a DS3/E3 frame) sendResetCode sending a loopback deactivation request NOTE: This is applicable only for DS3.')
csDs3ConfigLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("payloadLoop", 2), ("lineLoop", 3), ("otherLoop", 4), ("inwardLoop", 5), ("dualLoop", 6))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigLoopbackType.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigLoopbackType.setDescription("This object represents the desired loopback configuration of the DS3 interface. The values mean: noLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. It is the default value. payloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. lineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. otherLoop Loopbacks that are not defined here. Currently not used in the IPSX system. inwardLoop The sent signal at this interface is looped back through the device. dualLoop Both lineLoop and inwardLoop will be active simultaneously.")
csDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigLoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS3 interface. It contains information about loopbacks established by a manager and remotely from the far end. The csDs3ConfigLoopbackStatus is a bit map represented as a sum, therefore is can represent multiple loopbacks simultaneously. The various bit positions are: 1 ds3NoLoopback 2 ds3NearEndPayloadLoopback 4 ds3NearEndLineLoopback 8 ds3NearEndOtherLoopback 16 ds3NearEndInwardLoopback 32 ds3FarEndPayloadLoopback 64 ds3FarEndLineLoopback ')
csDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigLineStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigLineStatus.setDescription('This variable indicates the Line Status of the interface. It contains loopback state information and failure state information. The csDs3ConfigLineStatus is a bit map represented as a sum, therefore, it can represent multiple failures and a loopback (see csDs3ConfigLoopbackStatus object for the type of loopback) simultaneously. The ds3NoAlarm must be set if and only if no other flag is set. If the ds3LoopbackState bit is set, the loopback in effect can be determined from the csDs3ConfigLoopbackStatus object. The various bit positions are: 0 ds3NoAlarm No alarm present 1 ds3RcvRAIFailure Receiving Yellow/Remote Alarm Indication 2 ds3XmitRAIAlarm Transmitting Yellow/Remote Alarm Indication 3 ds3RcvAIS Receiving AIS failure state 4 ds3XmitAIS Transmitting AIS 5 ds3LOF Receiving LOF failure state 6 ds3LOS Receiving LOS failure state 7 ds3LoopbackState Looping the received signal 8 ds3RcvTestCode Receiving a Test Pattern 9 ds3OtherFailure any line status not defined here 10 ds3UnavailSigState Near End in Unavailable Signal State 11 ds3NetEquipOOS Carrier Equipment Out of Service')
csDs3ConfigTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the near end current error-measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
csDs3ConfigValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigValidInterval.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigValidInterval.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
csDs3ConfigInvalidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3ConfigInvalidInterval.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigInvalidInterval.setDescription('The number of intervals in the range from 0 to csDs3ConfigValidInterval for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
csDs3ConfigLineCoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds3Other", 1), ("ds3B3ZS", 2), ("e3HDB3", 3), ("e3NRZ", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigLineCoding.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigLineCoding.setDescription('This variable describes the variety of Zero Code Suppression used on this interface, which in turn affects a number of its characteristics. ds3B3ZS and e3HDB3 refer to the use of specified patterns of normal bits and bipolar violations which are used to replace sequences of zero bits of a specified length. NOTE: This is applicable only for E3 for now.')
csDs3ConfigNationalBit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3ConfigNationalBit.setStatus('current')
if mibBuilder.loadTexts: csDs3ConfigNationalBit.setDescription('Bit 12 of the E3 G.751 frame. NOTE: This is applicable only for E3.')
csDs3Ds1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2), )
if mibBuilder.loadTexts: csDs3Ds1ConfigTable.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1ConfigTable.setDescription('The DS3 DS1 configuration table. This is used to configure each of the DS1 connections within a complete DS3.')
csDs3Ds1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"))
if mibBuilder.loadTexts: csDs3Ds1ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1ConfigEntry.setDescription('An entry in the DS3 DS1 Configuration table.')
csDs3Ds1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28)))
if mibBuilder.loadTexts: csDs3Ds1Id.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1Id.setDescription('This identifies a single DS1 within a complete DS3.')
csDs3Ds1Framing = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("esf", 1), ("sf", 2), ("e1CrcMultiframe", 3), ("e1CrcMultiframeFebe", 4), ("e1FrameAlignSignal", 5), ("e1UnFramed", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1Framing.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1Framing.setDescription('This object specifies the framing used on the DS1 assigned to this channel.')
csDs3Ds1YellowAlarmDetect = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1YellowAlarmDetect.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1YellowAlarmDetect.setDescription('This object specifies whether Yellow Alarm detection is active on the DS1 assigned to this channel.')
csDs3Ds1YellowAlarmGen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1YellowAlarmGen.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1YellowAlarmGen.setDescription('This object specifies whether Yellow Alarm generation is active on the DS1 assigned to this channel. NOTE: This is applicable only for T1.')
csDs3Ds1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ami", 1), ("b8zs", 2))).clone('b8zs')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1LineCode.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1LineCode.setDescription('This object specifies the variety of Zero Code Suppression used on the on the DS1 assigned to this channel. NOTE: This is applicable only for T1.')
csDs3Ds1InvertData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1InvertData.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1InvertData.setDescription("This object specifies whether the 'invert data' feature is enabled on the DS1 assigned to this channel. This feature must be enabled if the Line Code parameter (csDs3Ds1LineCode) is set to ami. NOTE: This is applicable only for T1.")
csDs3Ds1ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1ClockSource.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1ClockSource.setDescription('This object specifies the source of the Transmit Clock used on the DS1 assigned to this channel. If this object is set to internal(1), a local clock source is used. If this object is set to line(2), the recovered received clock is used as the transmit clock. NOTE: This is applicable only for T1.')
csDs3Ds1Fdl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1Fdl.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1Fdl.setDescription('This is used to enable/disable 1 second transmission of performance reports via ANSI 403 FDL. If this is disabled, the AT&T 54016 version of FDL is used. Note, FDL is available only for ESF framing. And so it is only applicable for T1.')
csDs3Ds1OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1OperStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1OperStatus.setDescription('This object indicates the current operational status of this DS1.')
csDs3Ds1SendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds1SendNoCode", 1), ("ds1SendLineCode", 2), ("ds1SendPayloadCode", 3), ("ds1SendResetCode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1SendCode.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1SendCode.setDescription('This variable indicates what type of code is being sent across the DS1 interface by the device. Setting this variable causes the interface to send the code requested. NOTE: This is applicable only for T1.. The values mean: ds1SendNoCode sending looped or normal data ds1SendLineCode sending a request for a line loopback ds1SendPayloadCode sending a request for a payload loopback ds1SendResetCode sending a loopback termination request ')
csDs3Ds1LoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noLoop", 1), ("payloadLoop", 2), ("lineLoop", 3), ("otherLoop", 4), ("inwardLoop", 5), ("dualLoop", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1LoopbackType.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1LoopbackType.setDescription("This object represents the desired loopback configuration of the DS1 interface. This variable will be interpreted only when csDs3Ds1LoopbackDestination is set to a valid value. NOTE: This is applicable only for T1. noLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. payloadLoop The received signal at this interface is looped through the device. Typically the received signal is looped back for retransmission after it has passed through the device's framing function. lineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. otherLoop Loopbacks that are not defined here. Currently not used in the IPSX system inwardLoop The transmitted signal at this interface is looped back and received by the same interface. What is transmitted onto the line is product dependent. Cannot be applied to far end. dualLoop Both dsx1LineLoop and dsx1InwardLoop will be active simultaneously. Cannot be applied to far end.")
csDs3Ds1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1LoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1LoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS1 interface. It contains information about loopbacks established by a manager and remotely from the far end. NOTE: This is applicable only for T1. The csDs3Ds1LoopbackStatus is a bit map represented as a sum, therefore is can represent multiple loopbacks simultaneously. The various bit positions are: 1 ds1NoLoopback 2 ds1NearEndPayloadLoopback 4 ds1NearEndLineLoopback 8 ds1NearEndOtherLoopback 16 ds1NearEndInwardLoopback 32 ds1FarEndPayloadLoopback 64 ds1FarEndLineLoopback ')
csDs3Ds1LineConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3Ds1LineConfig.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1LineConfig.setDescription('This variable represents DS1/E1 transmit line configuration. This is normally used for dignostic or service purpose, it is not supposed for user to configure. The various bit positions are: BIT(0) not used BIT(1) ds1NoAlarm BIT(2) ds1RcvFarEndLOF BIT(3) ds1XmtFarEndLOF BIT(4) ds1RcvAIS BIT(5) ds1XmtAIS BIT(6) ds1LossOfFrame BIT(7) ds1LossOfSignal BIT(8) ds1LoopbackState BIT(9) ds1T16AIS BIT(10) ds1RcvFarEndLOMF BIT(11) ds1XmtFarEndLOMF BIT(12) ds1RcvTestCode BIT(13) ds1OtherFailure BIT(14) ds1UnavailSigState BIT(15) ds1NetEquipOOS BIT(16) ds1RcvPayloadAIS BIT(17) ds1Ds2PerfThreshold BIT(18) ds1XmtTrnkCond ')
csDs3Ds1LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1LineStatus.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1LineStatus.setDescription('This variable represents DS1/E1 transmit and receive line status. The various bit positions are: BIT(0) not used BIT(1) ds1NoAlarm BIT(2) ds1RcvFarEndLOF BIT(3) ds1XmtFarEndLOF BIT(4) ds1RcvAIS BIT(5) ds1XmtAIS BIT(6) ds1LossOfFrame BIT(7) ds1LossOfSignal BIT(8) ds1LoopbackState BIT(9) ds1T16AIS BIT(10) ds1RcvFarEndLOMF BIT(11) ds1XmtFarEndLOMF BIT(12) ds1RcvTestCode BIT(13) ds1OtherFailure BIT(14) ds1UnavailSigState BIT(15) ds1NetEquipOOS BIT(16) ds1RcvPayloadAIS BIT(17) ds1Ds2PerfThreshold BIT(18) ds1XmtTrnkCond ')
csDs3E1IntBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3E1IntBits.setStatus('current')
if mibBuilder.loadTexts: csDs3E1IntBits.setDescription('This variable is used to configure the 2-bits international bits for the E1 interface. NOTE: This is applicable only for E1.')
csDs3E1NatBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDs3E1NatBits.setStatus('current')
if mibBuilder.loadTexts: csDs3E1NatBits.setDescription('This 4-bit object is added for the E1 sub-multiframe aligned national bit codeword configuration. NOTE: This is applicable only for E1.')
csChDs3Table = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3), )
if mibBuilder.loadTexts: csChDs3Table.setStatus('current')
if mibBuilder.loadTexts: csChDs3Table.setDescription('The Channelized DS3 Channel configuration table.')
csChDs3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csChDs3SlotIndex"), (0, "COSINE-ORION-MIB", "csChDs3ModuleIndex"), (0, "COSINE-ORION-MIB", "csChDs3PortIndex"), (0, "COSINE-ORION-MIB", "csChDs3ChNumber"))
if mibBuilder.loadTexts: csChDs3Entry.setStatus('current')
if mibBuilder.loadTexts: csChDs3Entry.setDescription('An entry in the DS3 Fractional table.')
csChDs3SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: csChDs3SlotIndex.setStatus('current')
if mibBuilder.loadTexts: csChDs3SlotIndex.setDescription('This object identifies the blade to which this Ds3 Port is attached. Together with csChDs3ModuleIndex, csChDs3PortIndex, it uniquely identifies a physical port.')
csChDs3ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: csChDs3ModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csChDs3ModuleIndex.setDescription('This object identifies the module of the Ds3 Blade')
csChDs3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: csChDs3PortIndex.setStatus('current')
if mibBuilder.loadTexts: csChDs3PortIndex.setDescription('This object identifies the location of the Ds3 Port on the blade identified by csChDs3SlotIndex. Together with csChDs3SlotIndex, it uniquely identifies a physical port.')
csChDs3ChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: csChDs3ChNumber.setStatus('current')
if mibBuilder.loadTexts: csChDs3ChNumber.setDescription('The channel number for this entry.')
csChDs3T1Number = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3T1Number.setStatus('current')
if mibBuilder.loadTexts: csChDs3T1Number.setDescription('This object identifies the DS1 number that is assigned to this channel. This number for E1 is 1 to 16. NOTE: This object can only be set during row creation. Once the row is created, this object cannot be modified.')
csChDs3TimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3TimeSlots.setStatus('current')
if mibBuilder.loadTexts: csChDs3TimeSlots.setDescription('This object specifies the individual DS0 time slots within the DS1(T1 or E1, identified by csChDs3T1Number) that are assigned to this channel. The format can be a range of slots (1-8), a list of slots (1, 3, 7), or a mix of both. NOTE: This object can only be set during row creation. Once the row is created, this object cannot be modified.')
csChDs3Speed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kbps64", 1), ("kbps56", 2))).clone('kbps64')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3Speed.setStatus('current')
if mibBuilder.loadTexts: csChDs3Speed.setDescription('This object specifies the speed (and, hence the signaling mode) of the DS1 assigned to this channel.')
csChDs3Encap = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("frameRelay", 2), ("ciscoHdlc", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3Encap.setStatus('current')
if mibBuilder.loadTexts: csChDs3Encap.setDescription('This object specifies the encapsulation used on this DS3 channel. If the encapsulation type is frameRelay(2), use the csFrameRelayTable to configure the Frame Relay specific parameters.')
csChDs3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csChDs3RowStatus.setStatus('current')
if mibBuilder.loadTexts: csChDs3RowStatus.setDescription('A row status type for this Channel.')
csChDs3OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 3, 1, 10), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csChDs3OperStatus.setStatus('current')
if mibBuilder.loadTexts: csChDs3OperStatus.setDescription('A operational status for this Channel.')
csEthStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3), )
if mibBuilder.loadTexts: csEthStatsTable.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTable.setDescription('The Orion Ethernet Table.')
csEthStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csEthSlotIndex"), (0, "COSINE-ORION-MIB", "csEthModuleIndex"), (0, "COSINE-ORION-MIB", "csEthPortIndex"))
if mibBuilder.loadTexts: csEthStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csEthStatsEntry.setDescription('An entry in the Ethernet Statistic Table.')
csEthStatsTxDeferPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxDeferPktsOk.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxDeferPktsOk.setDescription(' The counter associated with the number of packets deferred upon the first transmit attempt due to a busy line .')
csEthStatsTxColCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxColCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxColCounts.setDescription(' The counter associated with the number of Regular collisions during transmission.')
csEthStatsTxScolPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxScolPktsOk.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxScolPktsOk.setDescription(' The counter associated with the number of packets transmitted without any errors following a single collisions.')
csEthStatsTxMulticCollisionPktsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxMulticCollisionPktsOK.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxMulticCollisionPktsOK.setDescription(' The counter associated with the number of packets transmitted without any errors following multiple collisions.')
csEthStatsTx16CollisionCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx16CollisionCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx16CollisionCounts.setDescription(' The counter associated with the number of packets that have experienced 16 consecutive collisions or more.')
csEthStatsTxLateCollisionCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxLateCollisionCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxLateCollisionCounts.setDescription(' The counter associated with the number of transmission abortions due to a collision occurring after the transmission of packets that are 64 bytes in length.')
csEthStatsTx64Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx64Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx64Pkts.setDescription(' The counter associated with the number of transmitted packets 64 bytes in length, including bad packets.')
csEthStatsTx65To127Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx65To127Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx65To127Pkts.setDescription(' The counter associated with the number of packets 64 to 127 bytes in length, including bad packets.')
csEthStatsTx128To255Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx128To255Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx128To255Pkts.setDescription(' The counter associated with the number of packets 128 to 255 bytes in length, including bad packets.')
csEthStatsTx256To511Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx256To511Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx256To511Pkts.setDescription(' The counter associated with the number of packets 256 to 511 bytes in length, including bad packets.')
csEthStatsTx512To1023Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx512To1023Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx512To1023Pkts.setDescription(' The counter associated with the number of transmitted packets 512 to 1023 bytes in length, including bad packets.')
csEthStatsTx1024To1518Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx1024To1518Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx1024To1518Pkts.setDescription(' The counter associated with the number of transmitted packets 1024 to 1518 bytes in length, including bad packets.')
csEthStatsTx1519Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx1519Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx1519Pkts.setDescription(' The counter associated with the number of transmitted packets with length larger than 1518 bytes, including bad packets.')
csEthStatsTxPausePktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxPausePktsOk.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxPausePktsOk.setDescription(' The counter associated with the number of correct transmitted flow-control packets.')
csEthStatsTxErrCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxErrCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxErrCounts.setDescription(' The counter associated with the number of packets transmitted with an error due to transmit FIFO underflow or txerr signal assertion.')
csEthStatsTxOctetsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTxOctetsBad.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTxOctetsBad.setDescription(' The counter associated with the number of bytes transmitted in packets with errors.')
csEthStatsRxRuntCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxRuntCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxRuntCounts.setDescription(' The counter associated with the number of frames received without SFD detection but with carrier assertion .')
csEthStatsRxOvfCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxOvfCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxOvfCounts.setDescription(' The counter associated with the number of received packets not fully accepted due to receive FIFO overflow .')
csEthStatsRxShortPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxShortPktsOk.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxShortPktsOk.setDescription(' The counter associated with the number of received packets without error, less than 64 bytes length .')
csEthStatsRxNormCrcCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxNormCrcCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxNormCrcCounts.setDescription(' The counter associated with the number of packets received with an integral number of bytes and a CRC error with lengths between 64 bytes and maximum packet size .')
csEthStatsRxNormAliCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxNormAliCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxNormAliCounts.setDescription(' The counter associated with the number of packets received with an nonintegral number of bytes and a CRC error with lengths between 64 bytes and maximum packet size.')
csEthStatsRxLongPktsCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxLongPktsCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxLongPktsCounts.setDescription(' The counter associated with the number ofpackets larger than maximum packet size received without any error .')
csEthStatsRxLongCrcCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxLongCrcCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxLongCrcCounts.setDescription(' The counter associated with the number of packets larger than maximum packet size received with a CRC error')
csEthStatsRx64Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx64Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx64Pkts.setDescription(' The counter associated with the number of received packets 64 bytes in length, including bad packets.')
csEthStatsRx65To127Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx65To127Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx65To127Pkts.setDescription(' The counter associated with the number of received packets 65 to 127 bytes in length, including bad packets.')
csEthStatsRx128To255Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx128To255Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx128To255Pkts.setDescription(' The counter associated with the number of packets 128 to 255 bytes in length, including bad packetsO.')
csEthStatsRx256To511Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx256To511Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx256To511Pkts.setDescription(' The counter associated with the number of packets 256 to 511 bytes in length, including bad packets')
csEthStatsRx512To1023Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx512To1023Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx512To1023Pkts.setDescription(' The counter associated with the number of packets 512 to 1023 bytes in length, including bad packets.')
csEthStatsRx1024To1518Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx1024To1518Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx1024To1518Pkts.setDescription(' The counter associated with the number of packets 1024 to 1518 bytes in length, including bad packets.')
csEthStatsRx1519Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx1519Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx1519Pkts.setDescription(' The counter associated with the number of packets with length larger than 1518 bytes and the maximum packet size, including bad packets.')
csEthStatsRxPausePktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxPausePktsOk.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxPausePktsOk.setDescription(' The counter associated with the number of correct received flow-control packets.')
csEthStatsRxFalsCrcCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxFalsCrcCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxFalsCrcCounts.setDescription(' The counter associated with the number of false carrier events detected')
csEthStatsRxOctsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxOctsBad.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxOctsBad.setDescription(' The counter associated with the number of bytes received in packets with errors.')
csEthStatsRxSysErrCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRxSysErrCounts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRxSysErrCounts.setDescription(' The counter associated with the number of received packets during which PHY symbol errors were detected.')
csEthStatsTx1024Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsTx1024Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsTx1024Pkts.setDescription(" The counter associated with the number of transmitted packets 1024 bytes or more in length, including bad packets. It's only for Giga bit Ethernet card.")
csEthStatsRx1024Pkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csEthStatsRx1024Pkts.setStatus('current')
if mibBuilder.loadTexts: csEthStatsRx1024Pkts.setDescription(" The counter associated with the number of packets 1024 bytes or more in length, including bad packets. It's only for Giga bit Ethernet card.")
csDs3StatCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4), )
if mibBuilder.loadTexts: csDs3StatCurrentTable.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentTable.setDescription('The DS3/E3 current table contains various statistics being collected for the current 15 minute interval.')
csDs3StatCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csDs3StatCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentEntry.setDescription('An entry in the DS3/E3 Current table.')
csDs3StatCurrentPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentPESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentPESs.setDescription('The counter associated with the number of P-bit Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatCurrentPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentPSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentPSESs.setDescription('The counter associated with the number of P-bit Severely Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds. NOTE: This is applicable only for DS3.')
csDs3StatCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds. NOTE: This is applicable only for DS3.')
csDs3StatCurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentLCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentLCVs.setDescription('The counter associated with the number of Line Coding Violations. NOTE: This is applicable for both E3 and DS3.')
csDs3StatCurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentPCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentPCVs.setDescription('The counter associated with the number of P-bit Coding Violations. NOTE: This is applicable only for DS3.')
csDs3StatCurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentLESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentLESs.setDescription('The number of Line Errored Seconds. NOTE: This is applicable for both E3 and DS3.')
csDs3StatCurrentCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentCCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentCCVs.setDescription('The number of C-bit Coding Violations. NOTE: This is applicable only for DS3.')
csDs3StatCurrentCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentCESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentCESs.setDescription('The number of C-bit Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatCurrentCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentCSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentCSESs.setDescription('The number of C-bit Severely Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatCurrentLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 4, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatCurrentLSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatCurrentLSESs.setDescription('The number of Line Severely Errored Seconds. NOTE: This is applicable for both E3 and DS3.')
csDs3StatIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5), )
if mibBuilder.loadTexts: csDs3StatIntervalTable.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalTable.setDescription('The DS3/E3 Interval Table contains various statistics collected by each DS3/E3 Interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by csDs3StatIntervalNumber) and for one specific DS3 port (identifed by csDs3ConfigPortIndex).')
csDs3StatIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3StatIntervalNumber"))
if mibBuilder.loadTexts: csDs3StatIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalEntry.setDescription('An entry in the DS3/E3 Interval table.')
csDs3StatIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csDs3StatIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
csDs3StatIntervalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalPESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalPESs.setDescription('The counter associated with the number of P-bit Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatIntervalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalPSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalPSESs.setDescription('The counter associated with the number of P-bit Severely Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds. NOTE: This is applicable for both DS3 and E3.')
csDs3StatIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary. NOTE: This is applicable only for DS3.')
csDs3StatIntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalLCVs.setDescription('The counter associated with the number of Line Coding Violations. NOTE: This is applicable for both E3 and DS3.')
csDs3StatIntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalPCVs.setDescription('The counter associated with the number of P-bit Coding Violations. NOTE: This is applicable only for DS3.')
csDs3StatIntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalLESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalLESs.setDescription('The number of Line Errored Seconds (BPVs or illegal zero sequences). NOTE: This is applicable for both E3 and DS3.')
csDs3StatIntervalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalCCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalCCVs.setDescription('The number of C-bit Coding Violations. NOTE: This is applicable only for DS3.')
csDs3StatIntervalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalCESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalCESs.setDescription('The number of C-bit Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatIntervalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalCSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalCSESs.setDescription('The number of C-bit Severely Errored Seconds. NOTE: This is applicable only for DS3.')
csDs3StatIntervalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalLSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalLSESs.setDescription('The number of Line Severely Errored Seconds. NOTE: This is applicable for both E3 and DS3.')
csDs3StatIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 5, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: csDs3StatIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
csDs3StatTotalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6), )
if mibBuilder.loadTexts: csDs3StatTotalTable.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalTable.setDescription('The DS3/E3 Total Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval.')
csDs3StatTotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csDs3StatTotalEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalEntry.setDescription('An entry in the DS3/E3 Total table.')
csDs3StatTotalPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalPESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalPESs.setDescription('The counter associated with the number of P-bit Errored Seconds, encountered by a DS3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalPSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalPSESs.setDescription('The counter associated with the number of P-bit Severely Errored Seconds, encountered by a DS3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalSEFSs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, encountered by a DS3/E3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalUASs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalUASs.setDescription('The counter associated with the number of Unavailable Seconds, encountered by a DS3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalLCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalLCVs.setDescription('The counter associated with the number of Line Coding Violations encountered by a DS3/E3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable for both E3 and DS3.')
csDs3StatTotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalPCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalPCVs.setDescription('The counter associated with the number of P-bit Coding Violations, encountered by a DS3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalLESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalLESs.setDescription('The number of Line Errored Seconds (BPVs or illegal zero sequences) encountered by a DS3/E3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable for both E3 and DS3.')
csDs3StatTotalCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalCCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalCCVs.setDescription('The number of C-bit Coding Violations encountered by a DS3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalCESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalCESs.setDescription('The number of C-bit Errored Seconds encountered by a DS3 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalCSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalCSESs.setDescription('The number of C-bit Severely Errored Seconds encountered by a DS3 interface in the previous 24-hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable only for DS3.')
csDs3StatTotalLSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 6, 1, 11), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3StatTotalLSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3StatTotalLSESs.setDescription('The number of Line Severely Errored Seconds encountered by a DS3 interface in the previous 24-hour interval. Invalid 15 minute intervals count as 0. NOTE: This is applicable for both E3 and DS3.')
csDs3Ds1CurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7), )
if mibBuilder.loadTexts: csDs3Ds1CurrentTable.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentTable.setDescription('The DS1 current table contains various statistics being collected for the current 15 minute interval.')
csDs3Ds1CurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"))
if mibBuilder.loadTexts: csDs3Ds1CurrentEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentEntry.setDescription('An entry in the DS1 Current table.')
csDs3Ds1CurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentESs.setDescription('The number of Errored Seconds.')
csDs3Ds1CurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentSESs.setDescription('The number of Severely Errored Seconds.')
csDs3Ds1CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentSEFSs.setDescription('The number of Severely Errored Framing Seconds.')
csDs3Ds1CurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentUASs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentUASs.setDescription('The number of Unavailable Seconds.')
csDs3Ds1CurrentCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentCSSs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentCSSs.setDescription('The number of Controlled Slip Seconds.')
csDs3Ds1CurrentPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentPCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentPCVs.setDescription('The number of Path Coding Violations.')
csDs3Ds1CurrentLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentLESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentLESs.setDescription('The number of Line Errored Seconds.')
csDs3Ds1CurrentBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentBESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentBESs.setDescription('The number of Bursty Errored Seconds.')
csDs3Ds1CurrentDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentDMs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentDMs.setDescription('The number of Degraded Minutes.')
csDs3Ds1CurrentLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 7, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1CurrentLCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1CurrentLCVs.setDescription('The number of Line Code Violations (LCVs).')
csDs3Ds1IntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8), )
if mibBuilder.loadTexts: csDs3Ds1IntervalTable.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalTable.setDescription('The DS1 Interval Table contains various statistics collected by each DS1 Interface over the previous 24 hours of operation. The past 24 hours are broken into 96 completed 15 minute intervals. Each row in this table represents one such interval (identified by csDs3Ds1IntervalNumber) for one specific instance (identified by csDs3Ds1Id).')
csDs3Ds1IntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"), (0, "COSINE-ORION-MIB", "csDs3Ds1IntervalNumber"))
if mibBuilder.loadTexts: csDs3Ds1IntervalEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalEntry.setDescription('An entry in the DS1 Interval table.')
csDs3Ds1IntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csDs3Ds1IntervalNumber.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the 15 minutes interval completed 23 hours and 45 minutes prior to interval 1.')
csDs3Ds1IntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalESs.setDescription('The number of Errored Seconds.')
csDs3Ds1IntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalSESs.setDescription('The number of Severely Errored Seconds.')
csDs3Ds1IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalSEFSs.setDescription('The number of Severely Errored Framing Seconds.')
csDs3Ds1IntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalUASs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalUASs.setDescription('The number of Unavailable Seconds. This object may decrease if the occurance of unavailable seconds occurs across an inteval boundary.')
csDs3Ds1IntervalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalCSSs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalCSSs.setDescription('The number of Controlled Slip Seconds.')
csDs3Ds1IntervalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalPCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalPCVs.setDescription('The number of Path Coding Violations.')
csDs3Ds1IntervalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalLESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalLESs.setDescription('The number of Line Errored Seconds.')
csDs3Ds1IntervalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalBESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalBESs.setDescription('The number of Bursty Errored Seconds.')
csDs3Ds1IntervalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalDMs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalDMs.setDescription('The number of Degraded Minutes.')
csDs3Ds1IntervalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalLCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalLCVs.setDescription('The number of Line Code Violations.')
csDs3Ds1IntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1IntervalValidData.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1IntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
csDs3Ds1TotalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9), )
if mibBuilder.loadTexts: csDs3Ds1TotalTable.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalTable.setDescription('The DS1 Total Table contains the cumulative sum of the various statistics for the 24 hour period preceding the current interval.')
csDs3Ds1TotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csDs3ConfigPortIndex"), (0, "COSINE-ORION-MIB", "csDs3Ds1Id"))
if mibBuilder.loadTexts: csDs3Ds1TotalEntry.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalEntry.setDescription('An entry in the DS1 Total table.')
csDs3Ds1TotalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 1), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalESs.setDescription('The sum of Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 2), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalSESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalSESs.setDescription('The number of Severely Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 3), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalSEFSs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalSEFSs.setDescription('The number of Severely Errored Framing Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 4), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalUASs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalUASs.setDescription('The number of Unavailable Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalCSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 5), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalCSSs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalCSSs.setDescription('The number of Controlled Slip Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 6), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalPCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalPCVs.setDescription('The number of Path Coding Violations encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalLESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 7), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalLESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalLESs.setDescription('The number of Line Errored Seconds encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalBESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 8), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalBESs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalBESs.setDescription('The number of Bursty Errored Seconds (BESs) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalDMs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 9), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalDMs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalDMs.setDescription('The number of Degraded Minutes (DMs) encountered by a DS1 interface in the previous 24 hour interval. Invalid 15 minute intervals count as 0.')
csDs3Ds1TotalLCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 9, 1, 10), PerfTotalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDs3Ds1TotalLCVs.setStatus('current')
if mibBuilder.loadTexts: csDs3Ds1TotalLCVs.setDescription('The number of Line Code Violations (LCVs) encountered by a DS1 interface in the current 15 minute interval. Invalid 15 minute intervals count as 0.')
csUnchanDs3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10), )
if mibBuilder.loadTexts: csUnchanDs3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigTable.setDescription('The Unchannelized DS3 configuration table.')
csUnchanDs3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csUnchanDs3ConfigSlotIndex"), (0, "COSINE-ORION-MIB", "csUnchanDs3ConfigModuleIndex"), (0, "COSINE-ORION-MIB", "csUnchanDs3ConfigPortIndex"))
if mibBuilder.loadTexts: csUnchanDs3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigEntry.setDescription('An entry in the Unchannelized DS3 Configuration table.')
csUnchanDs3ConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csUnchanDs3ConfigSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigSlotIndex.setDescription('This object identifies the blade to which this Unchannelized Ds3 Port is attached. Together with csUnchanDs3ConfigPortIndex, it uniquely identifies a physical port.')
csUnchanDs3ConfigModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csUnchanDs3ConfigModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigModuleIndex.setDescription('This object identifies the module on the Unchannelized Ds3 Blade.')
csUnchanDs3ConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csUnchanDs3ConfigPortIndex.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigPortIndex.setDescription('This object identifies the location of the Unchannelized Ds3 Port on the blade identified by csUnchanDs3SlotIndex. Together with csUnchanDs3ConfigSlotIndex, it uniquely identifies a physical port.')
csUnchanDs3ConfigCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 450)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigCableLength.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigCableLength.setDescription('The length of the DS3 cable.')
csUnchanDs3ConfigFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cbit", 1), ("m23", 2), ("auto", 3), ("e3Framed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigFraming.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigFraming.setDescription('The framing format used on this Ds3 Interface. The default value is cbit if the interface is DS3. If the interface is E3, e3Framed will be used, and cannot be configured to any other types.')
csUnchanDs3ConfigMdlPath = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPath.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPath.setDescription('This object controls the transmission of the MDL Path message. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlIdleSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlIdleSig.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlIdleSig.setDescription('This object controls the transmission of the MDL Idle Signal message. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlTestSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlTestSig.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlTestSig.setDescription('This object controls the transmission of the MDL Test Signal message. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlEic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlEic.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlEic.setDescription('This object specifies the Equipment Identification Code. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlLic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlLic.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlLic.setDescription('This object specifies the Location Identification Code. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlFic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlFic.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlFic.setDescription('This object specifies the Frame Identification Code. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlUnit.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlUnit.setDescription('This object specifies the Unit Identification Code. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlPfi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPfi.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPfi.setDescription('This object specifies the Facility Identification Code sent in the MDL Path message. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPort.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlPort.setDescription('This object specifies the Port number string sent in the MDL Idle Signal message. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigMdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlGenerator.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigMdlGenerator.setDescription('This object specifies the Generator number string sent in the MDL Test Signal message. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigAdminStatus.setDescription('This object is used to enable/disable this Ds3/E3 port.')
csUnchanDs3ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 17), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigOperStatus.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigOperStatus.setDescription('This object indicates the current operational status of this Ds3/E3 port.')
csUnchanDs3ConfigClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigClockSource.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigClockSource.setDescription('This object specifies the source of the Transmit Clock used on this (unchannelized) DS3. If this object is set to internal(1), a local clock source is used. If this object is set to line(2), the recovered received clock is used as the transmit clock. NOTE: This is applicable only for DS3.')
csUnchanDs3ConfigEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("frameRelay", 2), ("ciscoHdlc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigEncap.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigEncap.setDescription('This object specifies the encapsulation used on this DS3/E3 port. If the encapsulation type is frameRelay(2), use the csFrameRelayTable to configure the Frame Relay specific parameters.')
csUnchanDs3ConfigSendCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds3SendNoCode", 1), ("ds3SendLineCode", 2), ("ds3SendResetCode", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigSendCode.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigSendCode.setDescription('This variable indicates what type of code is being sent across the DS3 interface by the device. Setting this variable causes the interface to begin sending the code requested. NOTE: This is applicable only for DS3. The values mean: sendNoCode sending looped or normal data sendLineCode sending a request for a line loopback sendResetCode sending a loopback deactivation request ')
csUnchanDs3ConfigLoopbackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noLoop", 1), ("lineLoop", 2), ("otherLoop", 3), ("inwardLoop", 4), ("dualLoop", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csUnchanDs3ConfigLoopbackType.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigLoopbackType.setDescription('This object represents the desired loopback configuration of the DS3 interface. The values mean: noLoop Not in the loopback state. A device that is not capable of performing a loopback on the interface shall always return this as its value. lineLoop The received signal at this interface does not go through the device (minimum penetration) but is looped back out. otherLoop Loopbacks that are not defined here. Currently not used in the IPSX system. inwardLoop The sent signal at this interface is looped back through the device. dualLoop Both lineLoop and inwardLoop will be active simultaneously.')
csUnchanDs3ConfigLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigLoopbackStatus.setDescription('This variable represents the current state of the loopback on the DS3 interface. It contains information about loopbacks established by a manager and remotely from the far end. The csUnchanDs3ConfigLoopbackStatus is a bit map represented as a sum, therefore is can represent multiple loopbacks simultaneously. The various bit positions are: 1 ds3NoLoopback 2 ds3NearEndPayloadLoopback 4 ds3NearEndLineLoopback 8 ds3NearEndOtherLoopback 16 ds3NearEndInwardLoopback 32 ds3FarEndPayloadLoopback 64 ds3FarEndLineLoopback ')
csUnchanDs3ConfigLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigLineStatus.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigLineStatus.setDescription('This variable indicates the Line Status of the interface. It contains loopback state information and failure state information. The csUnchanDs3ConfigLineStatus is a bit map represented as a sum, therefore, it can represent multiple failures and a loopback (see csUnchanDs3ConfigLoopbackStatus object for the type of loopback) simultaneously. The ds3NoAlarm must be set if and only if no other flag is set. If the ds3LoopbackState bit is set, the loopback in effect can be determined from the csUnchanDs3ConfigLoopbackStatus object. The various bit positions are: 0 ds3NoAlarm No alarm present 1 ds3RcvRAIFailure Receiving Yellow/Remote Alarm Indication 2 ds3XmitRAIAlarm Transmitting Yellow/Remote Alarm Indication 3 ds3RcvAIS Receiving AIS failure state 4 ds3XmitAIS Transmitting AIS 5 ds3LOF Receiving LOF failure state 6 ds3LOS Receiving LOS failure state 7 ds3LoopbackState Looping the received signal 8 ds3RcvTestCode Receiving a Test Pattern 9 ds3OtherFailure any line status not defined here 10 ds3UnavailSigState Near End in Unavailable Signal State 11 ds3NetEquipOOS Carrier Equipment Out of Service')
csUnchanDs3ConfigTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigTimeElapsed.setDescription("The number of seconds that have elapsed since the beginning of the near end current error-measurement period. If, for some reason, such as an adjustment in the system's time-of-day clock, the current interval exceeds the maximum value, the agent will return the maximum value.")
csUnchanDs3ConfigValidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigValidInterval.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigValidInterval.setDescription('The number of previous near end intervals for which data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online. In the case where the agent is a proxy, it is possible that some intervals are unavailable. In this case, this interval is the maximum interval number for which data is available.')
csUnchanDs3ConfigInvalidInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigInvalidInterval.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigInvalidInterval.setDescription('The number of intervals in the range from 0 to csDs3ConfigValidInterval for which no data is available. This object will typically be zero except in cases where the data for some intervals are not available (e.g., in proxy situations).')
csUnchanDs3ConfigDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 2, 10, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3", 1), ("e3", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csUnchanDs3ConfigDeviceType.setStatus('current')
if mibBuilder.loadTexts: csUnchanDs3ConfigDeviceType.setDescription('This object indicates whether the interface is DS3 or E3.')
csOrionOc3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1))
csOrionOc3Section = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2))
csOrionOc3Line = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3))
csOrionOc3FarEndLine = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 4))
csOrionOc3Path = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5))
csOrionOc3FarEndPath = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 6))
csOrionOc3PosStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7))
csOrionOc3AtmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8))
csOc3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1), )
if mibBuilder.loadTexts: csOc3ConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOc3ConfigTable.setDescription('The OC3 configuration table.')
csOc3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3ConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3ConfigEntry.setDescription('An entry in the DS3 Configuration table.')
csOc3SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOc3SlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOc3SlotIndex.setDescription('This object identifies the blade to which this OC3 Port is attached. Together with csOc3ModuleIndex, csOc3PortIndex, it uniquely identifies a physical port.')
csOc3ModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOc3ModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csOc3ModuleIndex.setDescription('This object identifies the module on the OC3 blade ')
csOc3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOc3PortIndex.setStatus('current')
if mibBuilder.loadTexts: csOc3PortIndex.setDescription('This object identifies the location of the OC3 Port on the blade identified by csOc3SlotIndex, csOc3ModuleIndex. Together with csOc3SlotIndex, it uniquely identifies a physical port.')
csOc3ClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("line", 2))).clone('internal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3ClockSource.setStatus('current')
if mibBuilder.loadTexts: csOc3ClockSource.setDescription('This object identifies the source of the clock signal for this OC3 port.')
csOc3CrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("crc16", 1), ("crc32", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3CrcType.setStatus('current')
if mibBuilder.loadTexts: csOc3CrcType.setDescription('This object identifies the type of CRC used on this OC3 port. This is only used by Packet Over Sonet.')
csOc3SectionJ0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hex01", 1), ("hexCC", 2))).clone('hexCC')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3SectionJ0.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionJ0.setDescription('This object identifies the section trace byte (j0) used on this OC3 port. If this object is set to hex01(1), the value sent within the j0 (section trace byte) element of the frame header is 0x01. This value should be set for interoperability with some SDH devices in Japan. If this object is set to hexCC(2), the value of the j0 element is 0xcc. This is the default value and should be used in the majority of cases.')
csOc3LineS1S0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("oc3c", 1), ("au4", 2))).clone('oc3c')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3LineS1S0.setStatus('current')
if mibBuilder.loadTexts: csOc3LineS1S0.setDescription('This object identifies the payload pointer byte (s1s0) used on this OC3 port. If this object is set to oc3c(1), the value sent within the s1s0 (payload pointer byte) element of the frame header is 0. If this object is set to au4(2), the value of the s1s0 element is 2.')
csOc3PathC2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pos", 1), ("atm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathC2.setStatus('current')
if mibBuilder.loadTexts: csOc3PathC2.setDescription('This object identifies the path signal identifier used on this OC3 port. If this object is set to pppOrHdlc(1), the value sent within the c2 (path signal identifier) element of the frame header is 0xCF. If this object is set to atm(2), the value of the c2 element is 0x13.')
csOc3PathJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PathJ1.setStatus('current')
if mibBuilder.loadTexts: csOc3PathJ1.setDescription('This object is the path trace sent in the J1 byte of path overhead. It is padded by the OC3 driver with and to make up the 64-byte length.')
csOc3FarEndJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3FarEndJ1.setStatus('current')
if mibBuilder.loadTexts: csOc3FarEndJ1.setDescription('The expected path trace of the far end interface.')
csOc3Scramble = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3Scramble.setStatus('current')
if mibBuilder.loadTexts: csOc3Scramble.setDescription('This object controls the scrambling feature on this OC3 port. If this object is enabled, the SPE payload will be scrambled. If this object is diabled, the SPE payload will not be scrambled. SPE payload refers to that of either ATM or POS depending on the value of csOc3PathC2.')
csOc3NearEndPerfMonControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3NearEndPerfMonControl.setStatus('current')
if mibBuilder.loadTexts: csOc3NearEndPerfMonControl.setDescription('')
csOc3FarEndPerfMonControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3FarEndPerfMonControl.setStatus('current')
if mibBuilder.loadTexts: csOc3FarEndPerfMonControl.setDescription('')
csOc3ApsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3ApsControl.setStatus('current')
if mibBuilder.loadTexts: csOc3ApsControl.setDescription('')
csOc3ApsForce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("forceToSwitch", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3ApsForce.setStatus('current')
if mibBuilder.loadTexts: csOc3ApsForce.setDescription("Force protection switch. When set to 'forceToSwitch' it switches the active port between the two internal ports indicated by csOc3ApsActivePort object. NOTE: This is an action object. Read operation returns 'none'. ")
csOc3ApsActivePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("portOne", 1), ("portTwo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3ApsActivePort.setStatus('current')
if mibBuilder.loadTexts: csOc3ApsActivePort.setDescription('This object indicates which of the internal port is currently active. The non-active one is used for protection.')
csOc3AlarmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3AlarmControl.setStatus('current')
if mibBuilder.loadTexts: csOc3AlarmControl.setDescription('')
csOc3Loopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noLoop", 1), ("facilityLoop", 2), ("terminalLoop", 3))).clone('noLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3Loopback.setStatus('current')
if mibBuilder.loadTexts: csOc3Loopback.setDescription('The current loopback state of the SONET/SDH interface. The values mean: noLoop Not in the loopback state. A device that is not capable of performing a loopback on this interface shall always return this value. facilityLoop The received signal at this interface is looped back out through the corresponding transmitter in the return direction. terminalLoop The signal that is about to be transmitted is connected to the associated incoming receiver.')
csOc3AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3AdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOc3AdminStatus.setDescription('This object is used to enable/disable this Ds3 port.')
csOc3OperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 20), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3OperStatus.setStatus('current')
if mibBuilder.loadTexts: csOc3OperStatus.setDescription('This object indicates the current operational status of this Ds3 port.')
csOc3TimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3TimeElapsed.setStatus('current')
if mibBuilder.loadTexts: csOc3TimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current measurement period.')
csOc3ValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3ValidIntervals.setStatus('current')
if mibBuilder.loadTexts: csOc3ValidIntervals.setDescription('This object indicates the number of previous 15-minute intervals for which data was collected.')
csOc3InvalidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3InvalidIntervals.setStatus('current')
if mibBuilder.loadTexts: csOc3InvalidIntervals.setDescription('This object indicates the number of previous 15-minute intervals for which data was not able to be collected.')
csOc3PosEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ppp", 1), ("frameRelay", 2), ("ciscoHdlc", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PosEncapType.setStatus('current')
if mibBuilder.loadTexts: csOc3PosEncapType.setDescription('This object specifies the encapsulation used on this port. If the encapsulation type is frameRelay(2), use the csFrameRelayTable to configure the Frame Relay specific parameters.')
csOc3PosEmptyCellType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PosEmptyCellType.setStatus('deprecated')
if mibBuilder.loadTexts: csOc3PosEmptyCellType.setDescription('This object is used to select the type of empty cell to be transmitted. It is deprecated due to not being supported in POS.')
csOc3PosMaxPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOc3PosMaxPacketSize.setStatus('current')
if mibBuilder.loadTexts: csOc3PosMaxPacketSize.setDescription('This object specifies the maximum packet size required for this port. This object applies to POS only.')
csOc3PosOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 27), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosOperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csOc3PosOperStatus.setDescription('This object indicates the current operational status of this channel. It is deprecated in favor of using csOc3AdminStatus instead. ')
csOc3MediumLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ocNOther", 1), ("ocNShortSingleMode", 2), ("ocNLongSingleMode", 3), ("ocNMultiMode", 4), ("ocNCoax", 5), ("ocNUTP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3MediumLineType.setStatus('current')
if mibBuilder.loadTexts: csOc3MediumLineType.setDescription('This object describes the line type for this interface. The line types are Short and Long Range Single Mode fiber or Multi-Mode fiber interfaces, and coax and UTP for electrical interfaces. The value sonetOther should be used when the Line Type is not one of the listed values.')
csOc3ReceivedPathJ1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3ReceivedPathJ1.setStatus('current')
if mibBuilder.loadTexts: csOc3ReceivedPathJ1.setDescription('The actual received path trace of the far end interface.')
csOcNSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mbps155", 1), ("mbps622", 2))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOcNSpeed.setStatus('current')
if mibBuilder.loadTexts: csOcNSpeed.setDescription('The speed of OCn interface.')
csOc3SectionCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1), )
if mibBuilder.loadTexts: csOc3SectionCurrentTable.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentTable.setDescription('The SONET/SDH Section Current table.')
csOc3SectionCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3SectionCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentEntry.setDescription('An entry in the SONET/SDH Section Current table.')
csOc3SectionCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetSectionCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The csOc3SectionNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 csOc3SectionNoDefect 2 csOc3SectionLOS 4 csOc3SectionLOF')
csOc3SectionCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in the current 15-minute interval.')
csOc3SectionCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in the current 15-minute interval.')
csOc3SectionCurrentSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentSEFSs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in the current 15 minute interval.')
csOc3SectionCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in the current 15 minute interval.')
csOc3SectionIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2), )
if mibBuilder.loadTexts: csOc3SectionIntervalTable.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalTable.setDescription('The SONET/SDH Section Interval table.')
csOc3SectionIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3SectionIntervalNumber"))
if mibBuilder.loadTexts: csOc3SectionIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalEntry.setDescription('An entry in the SONET/SDH Section Interval table.')
csOc3SectionIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3SectionIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
csOc3SectionIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
csOc3SectionIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
csOc3SectionIntervalSEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalSEFSs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
csOc3SectionIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section in a particular 15-minute interval in the past 24 hours.')
csOc3SectionIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
csOc3SectionDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3), )
if mibBuilder.loadTexts: csOc3SectionDayTable.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionDayTable.setDescription('The SONET/SDH Section Day table.')
csOc3SectionDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3SectionDayEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionDayEntry.setDescription('An entry in the SONET/SDH Section Day table.')
csOc3SectionDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDayESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section for the day.')
csOc3SectionDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDaySESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section for the day.')
csOc3SectionDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionDaySEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section for the day.')
csOc3SectionDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionDayCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section for the day.')
csOc3SectionPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4), )
if mibBuilder.loadTexts: csOc3SectionPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionPrevDayTable.setDescription('The SONET/SDH Section Previous Day table.')
csOc3SectionPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3SectionPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionPrevDayEntry.setDescription('An entry in the SONET/SDH Section Day table.')
csOc3SectionPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDayESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionPrevDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Section for the previous day.')
csOc3SectionPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDaySESs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionPrevDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Section for the previous day.')
csOc3SectionPrevDaySEFSs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDaySEFSs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionPrevDaySEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds encountered by a SONET/SDH Section for the previous day.')
csOc3SectionPrevDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 2, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3SectionPrevDayCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3SectionPrevDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Section for the previous day.')
csOc3LineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1), )
if mibBuilder.loadTexts: csOc3LineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentTable.setDescription('The SONET/SDH Line Current table.')
csOc3LineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3LineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentEntry.setDescription('An entry in the SONET/SDH Line Current table.')
csOc3LineCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetLineCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetLineNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 csOc3LineNoDefect 2 csOc3LineAIS 4 csOc3LineRDI')
csOc3LineCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
csOc3LineCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
csOc3LineCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in the current 15 minute interval.')
csOc3LineCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in the current 15 minute interval.')
csOc3LineCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineCurrentFCs.setDescription('The counter associated with the number of failure counts encountered by a SONET/SDH Line in the current 15 minute interval.')
csOc3LineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2), )
if mibBuilder.loadTexts: csOc3LineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalTable.setDescription('The SONET/SDH Line Interval table.')
csOc3LineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3LineIntervalNumber"))
if mibBuilder.loadTexts: csOc3LineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalEntry.setDescription('An entry in the SONET/SDH Line Interval table.')
csOc3LineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3LineIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
csOc3LineIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
csOc3LineIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
csOc3LineIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
csOc3LineIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
csOc3LineIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
csOc3LineIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineIntervalFCs.setDescription('The counter associated with the number of failure counts encountered by a SONET/SDH Line in a particular 15-minute interval in the past 24 hours.')
csOc3LineDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3), )
if mibBuilder.loadTexts: csOc3LineDayTable.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDayTable.setDescription('The SONET/SDH Line Day table.')
csOc3LineDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3LineDayEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDayEntry.setDescription('An entry in the SONET/SDH Line Day table.')
csOc3LineDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line for the day.')
csOc3LineDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDaySESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line for the day.')
csOc3LineDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line for the day.')
csOc3LineDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDayUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line for the day.')
csOc3LineDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LineDayFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3LineDayFCs.setDescription('The counter associated with the number of failure counts encountered by a SONET/SDH Line for the day.')
csOc3LinePrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4), )
if mibBuilder.loadTexts: csOc3LinePrevDayTable.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDayTable.setDescription('The SONET/SDH Line Day table.')
csOc3LinePrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3LinePrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDayEntry.setDescription('An entry in the SONET/SDH Line Previous Day table.')
csOc3LinePrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Line for the previous day.')
csOc3LinePrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDaySESs.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Line for the previous day.')
csOc3LinePrevDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Line for the previous day.')
csOc3LinePrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDayUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a SONET/SDH Line for the previous day.')
csOc3LinePrevDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 3, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3LinePrevDayFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3LinePrevDayFCs.setDescription('The counter associated with the number of failure counts encountered by a SONET/SDH Line for the previous day.')
csOc3PathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1), )
if mibBuilder.loadTexts: csOc3PathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentTable.setDescription('The SONET/SDH Path Current table.')
csOc3PathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentEntry.setDescription('An entry in the SONET/SDH Path Current table.')
csOc3PathCurrentWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sts1", 1), ("sts3cSTM1", 2), ("sts12cSTM4", 3), ("sts24c", 4), ("sts48cSTM16", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentWidth.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentWidth.setDescription('A value that indicates the type of the SONET/SDH Path. For SONET, the assigned types are the STS-Nc SPEs, where N = 1, 3, 12, 24, and 48. STS-1 is equal to 51.84 Mbps. For SDH, the assigned types are the STM-Nc VCs, where N = 1, 4, and 16.')
csOc3PathCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentStatus.setDescription('This variable indicates the status of the interface. The sonetPathCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sonetPathNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sonetPathNoDefect 2 sonetPathSTSLOP 4 sonetPathSTSAIS 8 sonetPathSTSRDI 16 sonetPathUnequipped 32 sonetPathSignalLabelMismatch')
csOc3PathCurrentESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
csOc3PathCurrentSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentSESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in the current 15 minute interval.')
csOc3PathCurrentCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in the current 15 minute interval.')
csOc3PathCurrentUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in the current 15 minute interval.')
csOc3PathCurrentFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathCurrentFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathCurrentFCs.setDescription('The counter associated with the number of failure counts encountered by a Path in the current 15 minute interval.')
csOc3PathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2), )
if mibBuilder.loadTexts: csOc3PathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalTable.setDescription('The SONET/SDH Path Interval table.')
csOc3PathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3PathIntervalNumber"))
if mibBuilder.loadTexts: csOc3PathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalEntry.setDescription('An entry in the SONET/SDH Path Interval table.')
csOc3PathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3PathIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
csOc3PathIntervalESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
csOc3PathIntervalSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalSESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
csOc3PathIntervalCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path in a particular 15-minute interval in the past 24 hours.')
csOc3PathIntervalUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path in a particular 15-minute interval in the past 24 hours.')
csOc3PathIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
csOc3PathIntervalFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathIntervalFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathIntervalFCs.setDescription('The counter associated with the number of failure counts encountered by a Path in a particular 15-minute interval in the past 24 hours.')
csOc3PathDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3), )
if mibBuilder.loadTexts: csOc3PathDayTable.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDayTable.setDescription('The SONET/SDH Path Day table.')
csOc3PathDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PathDayEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDayEntry.setDescription('An entry in the SONET/SDH Path Day table.')
csOc3PathDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path for the day.')
csOc3PathDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDaySESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path for the day.')
csOc3PathDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path for the day.')
csOc3PathDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDayUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path for the day.')
csOc3PathDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 3, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathDayFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathDayFCs.setDescription('The counter associated with the number of failure counts encountered by a Path for the day.')
csOc3PathPrevDayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4), )
if mibBuilder.loadTexts: csOc3PathPrevDayTable.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDayTable.setDescription('The SONET/SDH Path Previous Day table.')
csOc3PathPrevDayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PathPrevDayEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDayEntry.setDescription('An entry in the SONET/SDH Path Day table.')
csOc3PathPrevDayESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDayESs.setDescription('The counter associated with the number of Errored Seconds encountered by a SONET/SDH Path for the previous day.')
csOc3PathPrevDaySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDaySESs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDaySESs.setDescription('The counter associated with the number of Severely Errored Seconds encountered by a SONET/SDH Path for the previous day.')
csOc3PathPrevDayCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayCVs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDayCVs.setDescription('The counter associated with the number of Coding Violations encountered by a SONET/SDH Path for the previous day.')
csOc3PathPrevDayUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayUASs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDayUASs.setDescription('The counter associated with the number of Unavailable Seconds encountered by a Path for the previous day.')
csOc3PathPrevDayFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 5, 4, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PathPrevDayFCs.setStatus('current')
if mibBuilder.loadTexts: csOc3PathPrevDayFCs.setDescription('The counter associated with the number of failure counts encountered by a Path for the previous day.')
csOc3PosStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1), )
if mibBuilder.loadTexts: csOc3PosStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOc3PosStatsTable.setDescription('The OC3/POS statistics counter table.')
csOc3PosStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3PosStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3PosStatsEntry.setDescription('An entry in the OC3/POS statistics counter table.')
csOc3PosRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvBytes.setStatus('current')
if mibBuilder.loadTexts: csOc3PosRcvBytes.setDescription(' The counter associated with the number of bytes written to receive FIFO.')
csOc3PosRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrames.setStatus('current')
if mibBuilder.loadTexts: csOc3PosRcvFrames.setDescription(' The counter indicates the number of frames successfully received in a 15 minute interval.')
csOc3PosRcvAbortedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvAbortedFrames.setStatus('current')
if mibBuilder.loadTexts: csOc3PosRcvAbortedFrames.setDescription(' The counter indicates the number of aborted frames received.')
csOc3PosRcvFrameFCSError = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrameFCSError.setStatus('current')
if mibBuilder.loadTexts: csOc3PosRcvFrameFCSError.setDescription(' The counter indicates the number of received frames with FCS error.')
csOc3PosRcvFrameMinPacketError = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrameMinPacketError.setStatus('current')
if mibBuilder.loadTexts: csOc3PosRcvFrameMinPacketError.setDescription(' The counter indicates the number of received frames violating the minimal packet length.')
csOc3PosRcvFrameMaxPacketError = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosRcvFrameMaxPacketError.setStatus('current')
if mibBuilder.loadTexts: csOc3PosRcvFrameMaxPacketError.setDescription(' The counter indicates the number of received frames violating the maximum packet length.')
csOc3PosSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentBytes.setStatus('current')
if mibBuilder.loadTexts: csOc3PosSentBytes.setDescription(' The counter indicates the number of bytes trasmitted.')
csOc3PosSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentFrames.setStatus('current')
if mibBuilder.loadTexts: csOc3PosSentFrames.setDescription(' The counter indicates the number of frames trasmitted.')
csOc3PosSentFrameUserAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentFrameUserAborted.setStatus('current')
if mibBuilder.loadTexts: csOc3PosSentFrameUserAborted.setDescription(' The counter indicates the number of transmit frames aborted by the user.')
csOc3PosSentFrameUnderrunAborted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3PosSentFrameUnderrunAborted.setStatus('current')
if mibBuilder.loadTexts: csOc3PosSentFrameUnderrunAborted.setDescription(' The counter indicates the number of transmit frames aborted due to FIFO underrun.')
csOrionOc3PosStatsEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionOc3PosStatsEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionOc3PosStatsEnd.setDescription('End of this group. value undefined')
csOc3AtmCurrentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1), )
if mibBuilder.loadTexts: csOc3AtmCurrentStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentStatsTable.setDescription('The OC3 ATM statistics counter table.')
csOc3AtmCurrentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"))
if mibBuilder.loadTexts: csOc3AtmCurrentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentStatsEntry.setDescription('An entry in the OC3 statistics counter table.')
csOc3AtmCurrentTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentTransmittedCells.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentTransmittedCells.setDescription(' The counter indicates the number of transmitted cells at OC3-ATM interface')
csOc3AtmCurrentRecievedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentRecievedCells.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentRecievedCells.setDescription(' The counter indicates the number of received cells at OC3-ATM interface')
csOc3AtmCurrentIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentIdleCells.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentIdleCells.setDescription(' The counter indicates the number of idle cells at OC3-ATM interface')
csOc3AtmCurrentCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentCorrectedHEC.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentCorrectedHEC.setDescription(' The counter indicates the number of corrected HEC cells at OC3-ATM interface')
csOc3AtmCurrentUnCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentUnCorrectedHEC.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentUnCorrectedHEC.setDescription(' The counter indicates the number of uncorrected HEC cells at OC3-ATM interface')
csOc3AtmCurrentStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmCurrentStatsTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmCurrentStatsTableEnd.setDescription('End of this group. value undefined')
csOc3AtmIntervalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3), )
if mibBuilder.loadTexts: csOc3AtmIntervalStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalStatsTable.setDescription('The OC3 ATM Interval statistics counter table.')
csOc3AtmIntervalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOc3SlotIndex"), (0, "COSINE-ORION-MIB", "csOc3ModuleIndex"), (0, "COSINE-ORION-MIB", "csOc3PortIndex"), (0, "COSINE-ORION-MIB", "csOc3AtmIntervalNumber"))
if mibBuilder.loadTexts: csOc3AtmIntervalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalStatsEntry.setDescription('An entry in the OC3 ATM Interval statistics counter table.')
csOc3AtmIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: csOc3AtmIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
csOc3AtmIntervalTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalTransmittedCells.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalTransmittedCells.setDescription(' The counter indicates the number of transmitted cells at OC3-ATM interface in a given interval number')
csOc3AtmIntervalRecievedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalRecievedCells.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalRecievedCells.setDescription(' The counter indicates the number of received cells at OC3-ATM interface in a given interval number')
csOc3AtmIntervalIdleCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalIdleCells.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalIdleCells.setDescription(' The counter indicates the number of idle cells at OC3-ATM interface in a given interval number')
csOc3AtmIntervalCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalCorrectedHEC.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalCorrectedHEC.setDescription(' The counter indicates the number of corrected HEC cells at OC3-ATM interface in a given interval number')
csOc3AtmIntervalUnCorrectedHEC = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalUnCorrectedHEC.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalUnCorrectedHEC.setDescription(' The counter indicates the number of uncorrected HEC cells at OC3-ATM interface in a given interval number')
csOc3AtmIntervalValidData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 3, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalValidData.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalValidData.setDescription('This variable indicates if the data for this interval is valid.')
csOc3AtmIntervalStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 3, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOc3AtmIntervalStatsTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOc3AtmIntervalStatsTableEnd.setDescription('End of this group. value undefined')
class DLCI(TextualConvention, Integer32):
    description = 'The range of DLCI values. Note that this varies by interface configuration; normally, interfaces may use 0..1023, but may be configured to use ranges as large as 0..2^23.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 8388607)

csFrDlcmiTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1), )
if mibBuilder.loadTexts: csFrDlcmiTable.setReference('American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: csFrDlcmiTable.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiTable.setDescription('The Parameters for the Data Link Connection Management Interface for the frame relay service on this interface.')
csFrDlcmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"))
if mibBuilder.loadTexts: csFrDlcmiEntry.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiEntry.setDescription('The Parameters for a particular Data Link Connection Management Interface.')
csFrDlcmiSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiSlot.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiSlot.setDescription('This table entry configures Frame Relay Dlcmi-specific parameters for a single interface. The interface is identified by the slot its blade resides in, the physical port on that blade that contains the interface, and (if applicable) the specific DS3 channel on that port. This object is used to identify the Slot.')
csFrDlcmiModule = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiModule.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiModule.setDescription('This table entry configures Frame Relay Dlcmi-specific parameters for a single interface. The interface is identified by the slot its blade resides in, the moduel, the port on that blade that contains the interface, and (if applicable) the specific DS3 channel on that port. This object is used to identify the Port.')
csFrDlcmiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiPort.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiPort.setDescription('This table entry configures Frame Relay Dlcmi-specific parameters for a single interface. The interface is identified by the slot its blade resides in, the physical port on that blade that contains the interface, and (if applicable) the specific DS3 channel on that port. This object is used to identify the Port.')
csFrDlcmiChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csFrDlcmiChannel.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiChannel.setDescription('This table entry configures Frame Relay Dlcmi-specific parameters for a single interface. The interface is identified by the slot its blade resides in, the physical port on that blade that contains the interface, and (if applicable) the specific DS3 channel on that port. This object is used to identify the Channel. If there is no DS3 channel (or unchannelized), this object should have the value 0.')
csFrDlcmiState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("noLmiConfigured", 1), ("lmiRev1", 2), ("ansiT1617D", 3), ("ansiT1617B", 4), ("itut933A", 5), ("ansiT1617D1994", 6), ("cisco", 7))).clone('ansiT1617D')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiState.setReference('American National Standard T1.617-1991, American National Standard T1.617a-1994, ITU-T Recommendation Q.933 (03/93).')
if mibBuilder.loadTexts: csFrDlcmiState.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiState.setDescription('This variable states which Data Link Connection Management scheme is active (and by implication, what DLCI it uses) on the Frame Relay interface.')
csFrDlcmiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("q921", 1), ("q922March90", 2), ("q922November90", 3), ("q922", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiAddress.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiAddress.setDescription('This variable states which address format is in use on the Frame Relay interface.')
csFrDlcmiAddressLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("twoOctets", 2), ("threeOctets", 3), ("fourOctets", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiAddressLen.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiAddressLen.setDescription('This variable states the address length in octets. In the case of Q922 format, the length indicates the entire length of the address including the control portion.')
csFrDlcmiPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiPollingInterval.setReference('American National Standard T1.617-1991, Section D.7 Timer T391.')
if mibBuilder.loadTexts: csFrDlcmiPollingInterval.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiPollingInterval.setDescription('This is the number of seconds between successive status enquiry messages.')
csFrDlcmiFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiFullEnquiryInterval.setReference('American National Standard T1.617-1991, Section D.7 Counter N391.')
if mibBuilder.loadTexts: csFrDlcmiFullEnquiryInterval.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiFullEnquiryInterval.setDescription('Number of status enquiry intervals that pass before issuance of a full status enquiry message.')
csFrDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiErrorThreshold.setReference('American National Standard T1.617-1991, Section D.5.1 Counter N392.')
if mibBuilder.loadTexts: csFrDlcmiErrorThreshold.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiErrorThreshold.setDescription('This is the maximum number of unanswered Status Enquiries the equipment shall accept before declaring the interface down.')
csFrDlcmiMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiMonitoredEvents.setReference('American National Standard T1.617-1991, Section D.5.2 Counter N393.')
if mibBuilder.loadTexts: csFrDlcmiMonitoredEvents.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiMonitoredEvents.setDescription("This is the number of status polling intervals over which the error threshold is counted. For example, if within 'MonitoredEvents' number of events the station receives 'ErrorThreshold' number of errors, the interface is marked as down.")
csFrDlcmiMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 12), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiMaxSupportedVCs.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiMaxSupportedVCs.setDescription("The maximum number of Virtual Circuits allowed for this interface. Usually dictated by the Frame Relay network. In response to a SET, if a value less than zero or higher than the agent's maximal capability is configured, the agent should respond badValue")
csFrDlcmiMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonBroadcast", 1), ("broadcast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: csFrDlcmiMulticast.setDescription('This indicates whether the Frame Relay interface is using a multicast service.')
csFrDlcmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("running", 1), ("fault", 2), ("initializing", 3), ("up", 4), ("down", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatus.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatus.setDescription('This indicates the status of the Frame Relay interface as determined by the performance of the dlcmi. If no dlcmi is running, the Frame Relay interface will stay in the running state indefinitely.')
csFrDlcmiIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dce", 1), ("dte", 2))).clone('dte')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiIfType.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiIfType.setDescription('This indicates the type of interface.')
csFrDlcmiBECNFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiBECNFlowControl.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiBECNFlowControl.setDescription('This object enables or disables the BECN flow control.')
csFrDlcmiInjectionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forced", 1), ("buffered", 2), ("standard", 3))).clone('forced')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiInjectionManagement.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiInjectionManagement.setDescription('.')
csFrDlcmiName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiName.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiName.setDescription('.')
csFrDlcmiLmiDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 19), DLCI()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiLmiDlci.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiLmiDlci.setDescription('The DLCI of the LMI for this interface.')
csFrDlcmiDceN392 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiDceN392.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiDceN392.setDescription('LMI error threshold. For DCE IF Type. This is the maximum number of unanswered unreceived Status Enquiries the equipment shall accept before declaring the interface down.')
csFrDlcmiDceN393 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiDceN393.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiDceN393.setDescription('LMI monitored event count. For DCE IF Type. This is the number of status polling intervals over which the error threshold is counted.')
csFrDlcmiDceT392 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiDceT392.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiDceT392.setDescription('LMI monitored event count. For DCE IF Type. This indicates the expected number of seconds between heartbeat polls.')
csFrDlcmiAsyncEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csFrDlcmiAsyncEnabled.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiAsyncEnabled.setDescription('.')
csFrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2), )
if mibBuilder.loadTexts: csFrCircuitTable.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitTable.setDescription('A table containing information about specific Data Link Connections (DLC) or virtual circuits.')
csFrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"), (0, "COSINE-ORION-MIB", "csFrCircuitSubIf"))
if mibBuilder.loadTexts: csFrCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitEntry.setDescription('The information regarding a single Data Link Connection. Discontinuities in the counters contained in this table are indicated by the value in csFrCircuitCreationTime.')
csFrCircuitSubIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 65535)))
if mibBuilder.loadTexts: csFrCircuitSubIf.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitSubIf.setDescription("The identifier for this Frame Relay Circuit. This corresponds to the 'subinterface' entered via the CLI.")
csFrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 2), DLCI()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitDlci.setReference('American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: csFrCircuitDlci.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitDlci.setDescription('The Data Link Connection Identifier for this virtual circuit. Note, this impelemtation supports only values between 16 and 1023 (inclusive).')
csFrCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitState.setStatus('obsolete')
if mibBuilder.loadTexts: csFrCircuitState.setDescription("Indicates whether the particular virtual circuit is operational. In the absence of a Data Link Connection Management Interface, virtual circuit entries (rows) may be created by setting virtual circuit state to 'active', or deleted by changing Circuit state to 'invalid'. Whether or not the row actually disappears is left to the implementation, so this object may actually read as 'invalid' for some arbitrary length of time. It is also legal to set the state of a virtual circuit to 'inactive' to temporarily disable a given circuit. The use of 'invalid' is deprecated in this SNMP Version 2 MIB, in favor of csFrCircuitRowStatus.")
csFrCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedFECNs.setReference('American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: csFrCircuitReceivedFECNs.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitReceivedFECNs.setDescription('Number of frames received from the network indicating forward congestion since the virtual circuit was created. This occurs when the remote DTE sets the FECN flag, or when a switch in the network enqueues the frame to a trunk whose transmission queue is congested.')
csFrCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedBECNs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: csFrCircuitReceivedBECNs.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitReceivedBECNs.setDescription('Number of frames received from the network indicating backward congestion since the virtual circuit was created. This occurs when the remote DTE sets the BECN flag, or when a switch in the network receives the frame from a trunk whose transmission queue is congested.')
csFrCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitSentFrames.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitSentFrames.setDescription('The number of frames sent from this virtual circuit since it was created.')
csFrCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitSentOctets.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created. Octets counted are the full frame relay header and the payload, but do not include the flag characters or CRC.')
csFrCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitReceivedFrames.setDescription('Number of frames received over this virtual circuit since it was created.')
csFrCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitReceivedOctets.setDescription('Number of octets received over this virtual circuit since it was created. Octets counted include the full frame relay header, but do not include the flag characters or the CRC.')
csFrCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitCreationTime.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitCreationTime.setDescription('The value of sysUpTime when the virtual circuit was created, whether by the Data Link Connection Management Interface or by a SetRequest.')
csFrCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitLastTimeChange.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitLastTimeChange.setDescription('The value of sysUpTime when last there was a change in the virtual circuit state')
csFrCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitCommittedBurst.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: csFrCircuitCommittedBurst.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval.')
csFrCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(1024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitExcessBurst.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: csFrCircuitExcessBurst.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will attempt to deliver over the measurement interval.')
csFrCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitThroughput.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: csFrCircuitThroughput.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitThroughput.setDescription("Throughput is the average number of 'Frame Relay Information Field' bits transferred per second across a user network interface in one direction, measured over the measurement interval. If the configured committed burst size and throughput are both non-zero, the measurement interval, T, is T=csFrCircuitCommittedBurst/csFrCircuitThroughput. If the configured committed burst size and throughput are both zero, the measurement interval, T, is T=csFrCircuitExcessBurst/ifSpeed.")
csFrCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("nWay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitMulticast.setReference('Frame Relay PVC Multicast Service and Protocol Description Implementation: FRF.7 Frame Relay Forum Technical Committe October 21, 1994')
if mibBuilder.loadTexts: csFrCircuitMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: csFrCircuitMulticast.setDescription('This indicates whether this VC is used as a unicast VC (i.e. not multicast) or the type of multicast service subscribed to')
csFrCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitType.setStatus('obsolete')
if mibBuilder.loadTexts: csFrCircuitType.setDescription('Indication of whether the VC was manually created (static), or dynamically created (dynamic) via the data link control management interface.')
csFrCircuitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitDiscards.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitDiscards.setDescription('The number of inbound frames dropped because of format errors, or because the VC is inactive.')
csFrCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitReceivedDEs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: csFrCircuitReceivedDEs.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitReceivedDEs.setDescription("Number of frames received from the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the remote DTE sets the DE flag, or when in remote DTE's switch detects that the frame was received as Excess Burst data.")
csFrCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitSentDEs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: csFrCircuitSentDEs.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitSentDEs.setDescription('Number of frames sent to the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the local DTE sets the DE flag, indicating that during Network congestion situations those frames should be discarded in preference of other frames sent without the DE bit set.')
csFrCircuitRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitRemoteIpAddress.setStatus('obsolete')
if mibBuilder.loadTexts: csFrCircuitRemoteIpAddress.setDescription('The remote IP address mapped to this VC.')
csFrCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitRowStatus.setDescription('This object is used to create a new row or modify or destroy an existing row in the manner described in the definition of the RowStatus textual convention. Writable objects in the table may be written in any RowStatus state.')
csFrCircuitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 22), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrCircuitOperStatus.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitOperStatus.setDescription('The operational status of this circuit.')
csFrCircitFwdDlciType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frDlci", 1), ("froipDlci", 2))).clone('frDlci')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircitFwdDlciType.setStatus('current')
if mibBuilder.loadTexts: csFrCircitFwdDlciType.setDescription('Indication of whether the DLCI corresponding to the forward link of this DLCI, is a Frame Relay DLCI or Frame over IP DLCI. Depending on this the csFrCircuitFwdLink object is interpreted differently. When setting a csFrCircuitFwdLink object, this object also must be set.')
csFrCircuitFwdLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitFwdLink.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitFwdLink.setDescription('The forwarding link of this DLCI. This is a switching parameters for intra blade and inter-blade switching. It takes the following format: If csFrCircitFwdDlciType is frDlci byte #0 to #3 : Slot number (csFrDlcmiSlot) byte #4 to #7 : Port number (csFrDlcmiPort) byte #8 to #11 : Channel number (csFrDlcmiChannel, zero for unchannelized blade) byte #12 to #15: DLCI number (csFrCircuitDlci) If csFrCircitFwdDlciType is froipDlci byte #0 to #3 : VPN Id (csOrionGlobalVPNIndex) byte #4 to #7 : VR Id (csOrionVPNVRouterIndex) byte #8 to #11 : Transport Id (csOrionFRoIPTransportPeer) byte #12 to #15: DLCI number (csFroIPCircuitDlci) NOTE: all zero indicates that this DLCI is not connected to any link.')
csFrCircuitRatePolice = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitRatePolice.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitRatePolice.setDescription('This object enables or disables ingress traffic rate-policing. Ingress rate-policing is controlled by the values configured for csFrCircuitThroughput, csFrCircuitCommitedBurst and CsFrCircuitExcessBurst. If the number of bits received in the measurement interval is less than or equal to the committed burst size, the frame is forwared for further processing. If the number of bits received in the measurement interval is greater than the commited burst size but less than the sum of commited burst size and excess burst size, the DE bit is set in the frame and then forwared for further processing. If the number of bits received in the measurement interval is greater than the sum of commited burst size and excess burst size, the frame is dropped.')
csFrCircuitUpperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ppp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFrCircuitUpperProtocol.setStatus('current')
if mibBuilder.loadTexts: csFrCircuitUpperProtocol.setDescription("This object is used to set the upper protocol. For PPP over FR this is set to 'ppp'. NOTE: This object cannot be set to 'ip'. Only when a VI is connected to this interface that it becomes 'ip'.")
csFrErrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3), )
if mibBuilder.loadTexts: csFrErrTable.setStatus('current')
if mibBuilder.loadTexts: csFrErrTable.setDescription('A table containing information about Errors on the Frame Relay interface. Discontinuities in the counters contained in this table are the same as apply to the ifEntry associated with the Interface.')
csFrErrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"))
if mibBuilder.loadTexts: csFrErrEntry.setStatus('current')
if mibBuilder.loadTexts: csFrErrEntry.setDescription('The error information for a single frame relay interface.')
csFrErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("unknownError", 1), ("receiveShort", 2), ("receiveLong", 3), ("illegalAddress", 4), ("unknownAddress", 5), ("dlcmiProtoErr", 6), ("dlcmiUnknownIE", 7), ("dlcmiSequenceErr", 8), ("dlcmiUnknownRpt", 9), ("noErrorSinceReset", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrType.setStatus('current')
if mibBuilder.loadTexts: csFrErrType.setDescription('The type of error that was last seen on this interface: receiveShort: frame was not long enough to allow demultiplexing - the address field was incomplete, or for virtual circuits using Multiprotocol over Frame Relay, the protocol identifier was missing or incomplete. receiveLong: frame exceeded maximum length configured for this interface. illegalAddress: address field did not match configured format. unknownAddress: frame received on a virtual circuit which was not active or administratively disabled. dlcmiProtoErr: unspecified error occurred when attempting to interpret link maintenance frame. dlcmiUnknownIE: link maintenance frame contained an Information Element type which is not valid for the configured link maintenance protocol. dlcmiSequenceErr: link maintenance frame contained a sequence number other than the expected value. dlcmiUnknownRpt: link maintenance frame contained a Report Type Information Element whose value was not valid for the configured link maintenance protocol. noErrorSinceReset: no errors have been detected since the last cold start or warm start.')
csFrErrData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrData.setStatus('current')
if mibBuilder.loadTexts: csFrErrData.setDescription('An octet string containing as much of the error packet as possible. As a minimum, it must contain the Q.922 Address or as much as was delivered. It is desirable to include all header and demultiplexing information.')
csFrErrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrTime.setStatus('current')
if mibBuilder.loadTexts: csFrErrTime.setDescription('The value of sysUpTime at which the error was detected.')
csFrErrFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrFaults.setStatus('current')
if mibBuilder.loadTexts: csFrErrFaults.setDescription('The number of times the interface has gone down since it was initialized.')
csFrErrFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrErrFaultTime.setStatus('current')
if mibBuilder.loadTexts: csFrErrFaultTime.setDescription('The value of sysUpTime at the time when the interface was taken down due to excessive errors. Excessive errors is defined as the time when a DLCMI exceeds the frDlcmiErrorThreshold number of errors within frDlcmiMonitoredEvents. See FrDlcmiEntry for further details.')
csFrDlcmiStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4), )
if mibBuilder.loadTexts: csFrDlcmiStatTable.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatTable.setDescription('A table containing information about the statistics on every DLCMI.')
csFrDlcmiStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csFrDlcmiSlot"), (0, "COSINE-ORION-MIB", "csFrDlcmiModule"), (0, "COSINE-ORION-MIB", "csFrDlcmiPort"), (0, "COSINE-ORION-MIB", "csFrDlcmiChannel"))
if mibBuilder.loadTexts: csFrDlcmiStatEntry.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatEntry.setDescription('The statistics information for a single frame relay interface.')
csFrDlcmiStatStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatStatusEnquiries.setDescription('Number of times the Status Equiry is sent.')
csFrDlcmiStatFullStatusEnquiries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatFullStatusEnquiries.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatFullStatusEnquiries.setDescription('Number of times the Full Status Equiry is sent.')
csFrDlcmiStatStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatStatusResponses.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatStatusResponses.setDescription('Number of times the Status Response is received.')
csFrDlcmiStatFullStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatFullStatusResponses.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatFullStatusResponses.setDescription('Number of times the Full Status Response is received.')
csFrDlcmiStatAsyncUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatAsyncUpdates.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatAsyncUpdates.setDescription('Number of times the Asyn Update is made.')
csFrDlcmiStatUnknownMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatUnknownMessages.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatUnknownMessages.setDescription('Number of times the Unknown Messages is encountered.')
csFrDlcmiStatLostSequences = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatLostSequences.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatLostSequences.setDescription('Number of times the Lost Sequence is encountered.')
csFrDlcmiStatMissingResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatMissingResponses.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatMissingResponses.setDescription('Number of times the Missing Response is encountered.')
csFrDlcmiStatLocalSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatLocalSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatLocalSequenceNumber.setDescription('The local sequence number.')
csFrDlcmiStatNetSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 4, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFrDlcmiStatNetSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: csFrDlcmiStatNetSequenceNumber.setDescription('The network sequence number.')
csAtmInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1), )
if mibBuilder.loadTexts: csAtmInterfaceConfTable.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTable.setDescription('This table contains ATM local interface configuration parameters, one entry per ATM interface port.')
csAtmInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"))
if mibBuilder.loadTexts: csAtmInterfaceConfEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfEntry.setDescription('This list contains ATM interface configuration parameters and state variables.')
csAtmInterfaceConfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csAtmInterfaceConfSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfSlotIndex.setDescription('This object identifies the blade to which this ATM Port is attached. Together with csAtmInterfaceConfModuleIndex, csAtmInterfaceConfPortIndex, it uniquely identifies a physical port.')
csAtmInterfaceConfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csAtmInterfaceConfModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfModuleIndex.setDescription('This object identifies the module to which this ATM Port is attached.')
csAtmInterfaceConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csAtmInterfaceConfPortIndex.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfPortIndex.setDescription('This object identifies the blade to which this ATM Port is attached. Together with csAtmInterfaceConfSlotIndex, it uniquely identifies a physical port.')
csAtmInterfaceConfMaxVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxVpcs.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMaxVpcs.setDescription('The maximum number of VPCs (PVPCs and SVPCs) supported at this ATM interface. At the ATM UNI, the maximum number of VPCs (PVPCs and SVPCs) ranges from 0 to 256 only.')
csAtmInterfaceConfMaxVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)).clone(16384)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxVccs.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMaxVccs.setDescription('The maximum number of VCCs (PVCCs and SVCCs) supported at this ATM interface.')
csAtmInterfaceConfVpcs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfVpcs.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfVpcs.setDescription('The number of VPCs (PVPC, Soft PVPC and SVPC) currently in use at this ATM interface. It includes the number of PVPCs and Soft PVPCs that are configured at the interface, plus the number of SVPCs that are currently established at the interface. At the ATM UNI, the configured number of VPCs (PVPCs and SVPCs) can range from 0 to 256 only.')
csAtmInterfaceConfVccs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfVccs.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfVccs.setDescription('The number of VCCs (PVCC, Soft PVCC and SVCC) currently in use at this ATM interface. It includes the number of PVCCs and Soft PVCCs that are configured at the interface, plus the number of SVCCs that are currently established at the interface.')
csAtmInterfaceConfMaxActiveVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxActiveVpiBits.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMaxActiveVpiBits.setDescription('The maximum number of active VPI bits configured for use at the ATM interface. At the ATM UNI, the maximum number of active VPI bits configured for use ranges from 0 to 8 only.')
csAtmInterfaceConfCurrentMaxVpiBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfCurrentMaxVpiBits.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfCurrentMaxVpiBits.setDescription("The maximum number of VPI Bits that may currently be used at this ATM interface. The value is the minimum of AtmInterfaceMaxActiveVpiBits, and the AtmInterfaceMaxActiveVpiBits of the interface's UNI/NNI peer. If the interface does not negotiate with its peer to determine the number of VPI Bits that can be used on the interface, then the value of this object must equal AtmInterfaceMaxActiveVpiBits.")
csAtmInterfaceConfMaxActiveVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(14)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMaxActiveVciBits.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMaxActiveVciBits.setDescription('The maximum number of active VCI bits configured for use at this ATM interface.')
csAtmInterfaceConfCurrentMaxVciBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfCurrentMaxVciBits.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfCurrentMaxVciBits.setDescription("The maximum number of VCI Bits that may currently be used at this ATM interface. The value is the minimum of AtmInterfaceMaxActiveVciBits, and the AtmInterfaceMaxActiveVciBits of the interface's UNI/NNI peer. If the interface does not negotiate with its peer to determine the number of VCI Bits that can be used on the interface, then the value of this object must equal AtmInterfaceMaxActiveVciBits.")
csAtmInterfaceConfIlmiVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 12), AtmVpIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVpi.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVpi.setDescription('The VPI value of the VCC supporting the ILMI at this ATM interface. If the values of AtmInterfaceIlmiVpi and AtmInterfaceIlmiVci are both equal to zero then the ILMI is not supported at this ATM interface.')
csAtmInterfaceConfIlmiVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 13), AtmVcIdentifier().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVci.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVci.setDescription('The VCI value of the VCC supporting the ILMI at this ATM interface. If the values of AtmInterfaceIlmiVpi and AtmInterfaceIlmiVci are both equal to zero then the ILMI is not supported at this ATM interface.')
csAtmInterfaceConfMyIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMyIfName.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMyIfName.setDescription('A textual name of this interface. if this system is manageable through SNMP, and supports the object ifName, the value of this object must be identical with that of ifName for the ifEntry of the lowest level physical interface for this port. This interface must be uniquely named on this system to distinguish parallel links with a neighboring system. if this interface does not have a textual name, the value of this object is a zero length strin.')
csAtmInterfaceConfMyNeighbourIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 15), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMyNeighbourIpAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMyNeighbourIpAddress.setDescription('The IP address of the neighbor system connected to the far end of this interface, to which a Network Management Station can send SNMP messages, as IP datagrams sent to UDP port 161, in order to access network management information concerning the operation of that system. Note that the value of this object may be obtained in different ways, e.g., by manual configuration, or through ILMI interaction with the neighbor system.')
csAtmInterfaceConfMyNeighbourIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfMyNeighbourIfName.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfMyNeighbourIfName.setDescription('The textual name of the interface on the neighbor system on the far end of this interface, and to which this interface connects. If the neighbor system is manageable through SNMP and supports the object ifName, the value of this object must be identical with that of ifName for the ifEntry of the lowest level physical interface for this port. If this interface does not have a textual name, the value of this object is a zero length string. Note that the value of this object may be obtained in different ways, e.g., by manual configuration, or through ILMI interaction with the neighbor system.')
csAtmInterfaceConfIlmiVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unsupported", 1), ("version4point0", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVersion.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiVersion.setDescription("An indication of the latest version of the ATM Forum ILMI specification that is supported on this ATM interface. If the peer IME's value of this object is the same as, or later than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise, compatibility of the two IMEs cannot be assumed. If this object is not present, a version of the ILMI earlier than 4.0 is supported.")
csAtmInterfaceConfUniType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfUniType.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfUniType.setDescription('The type of the ATM device, either public or private.')
csAtmInterfaceConfUniVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("version2point0", 1), ("version3point0", 2), ("version3point1", 3), ("version4point0", 4), ("unsupported", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfUniVersion.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfUniVersion.setDescription("An indication of the latest version of the ATM Forum UNI Signalling Specification that is supported on this ATM Interface. if this value is not present, a version of the UNI earlier than 3.1 is supported. If the peer IME's value of this object is the same as, or earlier than the local IME's value, then the version corresponding to the local IME's value should be attempted. Otherwise, if the peer IME's value of this object is earlier, and supported locally, then the local IME should attempt the version corresponding to the peer IME's value. Otherwise compatibility of the two IMEs cannot be assumed.")
csAtmInterfaceConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfAdminStatus.setDescription('The object used to enable/disable this ATM interface.')
csAtmInterfaceConfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 21), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfOperStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfOperStatus.setDescription('The operational status of this ATM interface.')
csAtmInterfaceConfIlmiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiControl.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiControl.setDescription('The object is used to enable/disable the ILMI on this ATM interface.')
csAtmInterfaceConfIlmiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfIlmiStatus.setDescription('The object is used to monitor the status of the ILMI on this ATM interface.')
csAtmInterfaceConfEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 24), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfEvLogLevel.setDescription('This object is used to set the level for details for event logs for ATM port. This value will not be applied to VCCs. Events with level higher than this object will not be logged. ')
csAtmInterfaceConfEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 1, 1, 25), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmInterfaceConfEvLogArea.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfEvLogArea.setDescription('This object is used to set the area of event logs for ATM Port. This value will not be applied to VCCs. Events which area is not specified in this object will not be logged.')
csAtmConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2), )
if mibBuilder.loadTexts: csAtmConnTable.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTable.setDescription('This table can be used to creata virtual connections in this ATM interface.')
csAtmConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"))
if mibBuilder.loadTexts: csAtmConnEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmConnEntry.setDescription('This list contains ATM virtual connections.')
csAtmConnChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csAtmConnChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csAtmConnChannelIndex.setDescription('Channel ID of this ATM connection. Currently, it will always be 0.')
csAtmConnSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csAtmConnSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: csAtmConnSubIfIndex.setDescription("The identifier for this ATM connection. This corresponds to the 'subinterface' entered via the CLI.")
csAtmConnVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 3), AtmVpIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnVpi.setStatus('current')
if mibBuilder.loadTexts: csAtmConnVpi.setDescription('Virtual Path ID of this connection. This is mandatory in creating a connection.')
csAtmConnVci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 4), AtmVcIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnVci.setStatus('current')
if mibBuilder.loadTexts: csAtmConnVci.setDescription('Virtual Channel ID of this connection. This is mandatory in creating a connection.')
csAtmConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 5), AtmServiceCategory().clone('ubr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnType.setStatus('current')
if mibBuilder.loadTexts: csAtmConnType.setDescription('The ATM service category. NOTE : The type other(1) is not implemented for write operation. Setting to this type will default to ubr(6).')
csAtmConnPvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pvpc", 1), ("pvcc", 2))).clone('pvcc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnPvcType.setStatus('current')
if mibBuilder.loadTexts: csAtmConnPvcType.setDescription('')
csAtmConnPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnPCR.setStatus('current')
if mibBuilder.loadTexts: csAtmConnPCR.setDescription('Peak Cell rate for the connection.')
csAtmConnSCR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnSCR.setStatus('current')
if mibBuilder.loadTexts: csAtmConnSCR.setDescription('Sustain Cell rate for the connection. NOTE: This value is applicable for VBR service categories.')
csAtmConnMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnMBS.setStatus('current')
if mibBuilder.loadTexts: csAtmConnMBS.setDescription('Maximum Burst Size for the connection. NOTE: This value is applicable for VBR service categories.')
csAtmConnICR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnICR.setStatus('current')
if mibBuilder.loadTexts: csAtmConnICR.setDescription('Inital Cell rate for the connection. NOTE: This value is applicable for ABR service category.')
csAtmConnMCR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(175)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnMCR.setStatus('current')
if mibBuilder.loadTexts: csAtmConnMCR.setDescription('Minimum Cell rate for the connection. NOTE: This value is applicable for ABR service category.')
csAtmConnOamLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnOamLoopback.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopback.setDescription('This object is used to enable/disable the loopback.')
csAtmConnOamContinuity = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnOamContinuity.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamContinuity.setDescription('This object is used to enable/disable the continuity.')
csAtmConnAal5CpcsTransmitSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1744)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnAal5CpcsTransmitSduSize.setStatus('current')
if mibBuilder.loadTexts: csAtmConnAal5CpcsTransmitSduSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. The maximum AAL5 CPCS SDU size in octets that is supported on the transmit direction of this VCC. NOTE : For now, a maximum of 1744 is supported. ')
csAtmConnAal5CpcsReceiveSduSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1744)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnAal5CpcsReceiveSduSize.setStatus('current')
if mibBuilder.loadTexts: csAtmConnAal5CpcsReceiveSduSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 is in use. The maximum AAL5 CPCS SDU size in octets that is supported on the receive direction of this VCC.')
csAtmConnEncapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("llcRoutedEncapsulation", 2), ("vcMultiplexRoutedProtocol", 3), ("llcBridgedEncapsulation", 4), ("vcMultiplexedBridged802dot3", 5))).clone('llcRoutedEncapsulation')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnEncapType.setStatus('current')
if mibBuilder.loadTexts: csAtmConnEncapType.setDescription('The use of call control.')
csAtmConnKind = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pvc", 1), ("svc", 2), ("spvc", 3))).clone('pvc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnKind.setStatus('current')
if mibBuilder.loadTexts: csAtmConnKind.setDescription('The use of call control.')
csAtmConnAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnAdminStatus.setDescription('This object is instanciated only for a connection which terminates a VCC (i.e., one which is NOT cross-connected to other connections). Its value specifies the desired administrative state of the connection.')
csAtmConnOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 19), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnOperStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOperStatus.setDescription('The current operational status of the connection.')
csAtmConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnRowStatus.setDescription('This object is used to create, delete or modify a row in this table.')
csAtmConnUpperProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("ppp", 3), ("pppoe", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnUpperProtocol.setStatus('current')
if mibBuilder.loadTexts: csAtmConnUpperProtocol.setDescription("This object is used to set the upper protocol. For PPP over ATM this is set to 'ppp'. For PPP over Ethernet this is set to 'pppoe'. NOTE: This object cannot be set to 'ip'. Only when a VI is connected to this interface that it becomes 'ip'.")
csAtmConnArpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 60)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: csAtmConnArpAgingTime.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports Bridging format. This objects specifies aging time (in minutes) for ARP Cache entries and it takes effect when ATM ARP module restarts.')
csAtmConnArpCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 64)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnArpCacheSize.setStatus('current')
if mibBuilder.loadTexts: csAtmConnArpCacheSize.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports Bridging format. This objects specifies the size of ARP Cache and it takes effect when ATM ARP module restarts.')
csAtmConnEthernetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnEthernetMacAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmConnEthernetMacAddress.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports Bridging format. This objects specifies the active MAC Address on the VCC end-point.')
csAtmConnEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 25), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: csAtmConnEvLogLevel.setDescription('This object is used to set the level for details for event logs forATM VCC. Events with level higher than this object will not be logged. ')
csAtmConnEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 26), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnEvLogArea.setStatus('current')
if mibBuilder.loadTexts: csAtmConnEvLogArea.setDescription('This object is used to set the area of event logs for ATM VCC. Events which area is not specified in this object will not be logged.')
csAtmConnInArpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnInArpAgingTime.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpAgingTime.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports LLC-SNAP format. This objects specifies aging time (in minutes) for InARP entries and it takes effect immediately. Also this object is active when IP protocol is enabled on VC')
csAtmConnInArpManageVc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnInArpManageVc.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpManageVc.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports LLC-SNAP format. This objects specifies whether PVC services to layer 3 is managed by InArp status in addition to PVC opertional status and it takes immediate effect . Also this object is active when IP protocol is enabled on VC')
csAtmConnInArpManageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpManageStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpManageStatus.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports LLC-SNAP format. This objects specifies the PVC InARP status and thus will be used to control services to l3, when AtmConnInArpManageVc is enabled. Also this object is meaning full when IP protocol is enabled on VC')
csAtmConnInArpAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnInArpAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpAdminStatus.setDescription('An instance of this object only exists when the local VCL end-point is also the VCC end-point, and AAL5 Encapsulation type supports LLC-SNAP format. This objects specifies whether InARP services can be enabled or disbaled. Operation on this object takes immediate effect. Also this object is active when IP protocol is enabled on VC')
csAtmConnOamLoopbackRetryPvcUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpCount.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpCount.setDescription('OAM retry count before declaring the PVC up.')
csAtmConnOamLoopbackRetryPvcUpRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpRetryDelay.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpRetryDelay.setDescription('OAM retry Frequency in seconds.')
csAtmConnOamLoopbackRetryPvcUpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1440)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpAge.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcUpAge.setDescription('OAM Time to wait before transmitting OAM requests for UP status(in minutes)')
csAtmConnOamLoopbackRetryPvcDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownCount.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownCount.setDescription('OAM retry count before declaring the PVC down.')
csAtmConnOamLoopbackRetryPvcDownRetryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownRetryDelay.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownRetryDelay.setDescription('OAM retry Frequency in seconds (for down status).')
csAtmConnOamLoopbackRetryPvcDownAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 1440)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownAge.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackRetryPvcDownAge.setDescription('OAM Time to wait before transmitting OAM requests (in minutes)')
csAtmConnOamLoopbackManageVc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnOamLoopbackManageVc.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackManageVc.setDescription('This object is used to enable/disable the oam loopback manage vc.')
csAtmConnOamLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnOamLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopbackStatus.setDescription('The current loopback status of the connection.')
csAtmConnDynamicArpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3), )
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheTable.setStatus('current')
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheTable.setDescription('')
csAtmConnDynamicArpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"), (0, "COSINE-ORION-MIB", "csAtmConnDynamicArpCacheIpAddress"))
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheEntry.setDescription('This list contains Dynamic ARP Entries for ATM virtual connections.')
csAtmConnDynamicArpCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheIpAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheIpAddress.setDescription('This object holds IP address associated with MAC Address.')
csAtmConnDynamicArpCacheMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheMacAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheMacAddress.setDescription('This object holds MAC address associated with IP Address.')
csAtmConnDynamicArpCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheRowStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnDynamicArpCacheRowStatus.setDescription('This object is used to delete a row in this table.')
csAtmConnStaticArpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4), )
if mibBuilder.loadTexts: csAtmConnStaticArpCacheTable.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStaticArpCacheTable.setDescription('')
csAtmConnStaticArpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"), (0, "COSINE-ORION-MIB", "csAtmConnStaticArpCacheIpAddress"))
if mibBuilder.loadTexts: csAtmConnStaticArpCacheEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStaticArpCacheEntry.setDescription('This list contains Static (configured) ARP Entries for ATM virtual connections. ')
csAtmConnStaticArpCacheIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: csAtmConnStaticArpCacheIpAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStaticArpCacheIpAddress.setDescription('This object holds IP address associated with MAC Address.')
csAtmConnStaticArpCacheMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnStaticArpCacheMacAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStaticArpCacheMacAddress.setDescription('This object holds MAC address associated with IP Address.')
csAtmConnStaticArpCacheRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnStaticArpCacheRowStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStaticArpCacheRowStatus.setDescription('This object is used to create, delete or modify a row in this table.')
csAtmConnIpAddressTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5), )
if mibBuilder.loadTexts: csAtmConnIpAddressTable.setStatus('current')
if mibBuilder.loadTexts: csAtmConnIpAddressTable.setDescription('')
csAtmConnIpAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"), (0, "COSINE-ORION-MIB", "csAtmConnIpAddressIpAddress"))
if mibBuilder.loadTexts: csAtmConnIpAddressEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmConnIpAddressEntry.setDescription('This list contains ARP Entries for ATM virtual connections.')
csAtmConnIpAddressIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: csAtmConnIpAddressIpAddress.setStatus('current')
if mibBuilder.loadTexts: csAtmConnIpAddressIpAddress.setDescription('This object holds IP address for which ATM ARP module responds positively.')
csAtmConnIpAddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csAtmConnIpAddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: csAtmConnIpAddressRowStatus.setDescription('This object is used to create, delete or modify a row in this table.')
csAtmConnIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonProxyIp", 1), ("proxyIp", 2), ("none", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnIpAddressType.setStatus('current')
if mibBuilder.loadTexts: csAtmConnIpAddressType.setDescription('This object specifies the type of IP address, i.e.,NON-PROXY-IP, or PROXY IP.')
csAtmConnIpAddressTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnIpAddressTableEnd.setStatus('current')
if mibBuilder.loadTexts: csAtmConnIpAddressTableEnd.setDescription('End of this group. value undefined')
csAtmInterfaceConfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7), )
if mibBuilder.loadTexts: csAtmInterfaceConfStatsTable.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfStatsTable.setDescription('')
csAtmInterfaceConfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"))
if mibBuilder.loadTexts: csAtmInterfaceConfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfStatsEntry.setDescription('This list contains statistics entries for ATM interfaces.')
csAtmInterfaceConfTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedPackets.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedPackets.setDescription(' The counter indicates the number of packets transmitted on ATM interface')
csAtmInterfaceConfTransmittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedBytes.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedBytes.setDescription(' The counter indicates the number of bytes transmitted on ATM interface')
csAtmInterfaceConfTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitErrors.setDescription(' The counter indicates the number of packets dropped due to transmit path errors on ATM interface caused by buffer operation failures, and invalid protocol types')
csAtmInterfaceConfTransmitOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitOperationallyDown.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitOperationallyDown.setDescription(' The counter indicates the number of packets dropped in transmit path on ATM interface, because of inactive PVCs')
csAtmInterfaceConfTransmitQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitQueueFull.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitQueueFull.setDescription(' The counter indicates the number of packets dropped due to transmit queue is full on driver interface')
csAtmInterfaceConfTransmitBadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitBadLength.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitBadLength.setDescription(' The counter indicates the number of packets dropped in transmit path due to bad length on driver interface')
csAtmInterfaceConfTransmitIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitIncomplete.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitIncomplete.setDescription(' The counter indicates the number of packets transmitted incompletely on driver interface')
csAtmInterfaceConfTransmitVcNotOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitVcNotOpened.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitVcNotOpened.setDescription(' The counter indicates the number of packets dropped in transmit path due to non-existing VCCs on driver interface')
csAtmInterfaceConfReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedPackets.setDescription(' The counter indicates the number of packets Received on ATM interface')
csAtmInterfaceConfReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBytes.setDescription(' The counter indicates the number of bytes Received on ATM interface')
csAtmInterfaceConfReceivedEncapsulationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedEncapsulationErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedEncapsulationErrors.setDescription(' The counter indicates the number of packets dropped due to LLC/SNAP errors in Receive path on ATM interface')
csAtmInterfaceConfReceivedUnknownProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedUnknownProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedUnknownProtocolErrors.setDescription(' The counter indicates the number of packets dropped due to unknown protocols errors in Receive path on ATM interface')
csAtmInterfaceConfReceivedGenericErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedGenericErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedGenericErrors.setDescription(' The counter indicates the number of packets dropped due to Receive path errors on ATM interface')
csAtmInterfaceConfReceivedOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedOperationallyDown.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedOperationallyDown.setDescription(' The counter indicates the number of packets dropped in Receive path on ATM interface, because of inactive PVCs')
csAtmInterfaceConfReceivedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedDroppedPkts.setDescription(' The counter indicates the number of received packets dropped due to buffer allocation on Driver interface')
csAtmInterfaceConfReceivedBufferAllocationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBufferAllocationFail.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBufferAllocationFail.setDescription(' The counter indicates the number of received packets dropped due to buffer allocation on Driver interface')
csAtmInterfaceConfReceivedBadVc = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadVc.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadVc.setDescription(' The counter indicates the number of received packets dropped due to non-existing VCs on Driver interface')
csAtmInterfaceConfReceivedBadAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadAalType.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadAalType.setDescription(' The counter indicates the number of received packets dropped due to unsupported AAL type on Driver interface')
csAtmInterfaceConfReceivedBadAalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadAalLength.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedBadAalLength.setDescription(' The counter indicates the number of received packets dropped due to bad PDU length on Driver interface')
csAtmInterfaceConfReceivedCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedCRCErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedCRCErrors.setDescription(' The counter indicates the number of received packets dropped due to CRC errors on Driver interface')
csAtmInterfaceConfReceivedDroppedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedDroppedCells.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedDroppedCells.setDescription(' The counter indicates the number of cells dropped on Driver interface')
csAtmInterfaceConfReceivedInvalidVpiVciCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedInvalidVpiVciCells.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedInvalidVpiVciCells.setDescription(' The counter indicates the number of received cells dropped due to invalid VPI/VCI values on Driver interface')
csAtmInterfaceConfTransmittedOamLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedOamLoopBackRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedOamLoopBackRequests.setDescription(' The counter indicates the number of OAM loop-back requests transmitted on ATM interface')
csAtmInterfaceConfReceivedOamLoopBackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedOamLoopBackResponses.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfReceivedOamLoopBackResponses.setDescription(' The counter indicates the number of OAM loop-back responses received on ATM interface')
csAtmInterfaceConfRespondedOAMLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfRespondedOAMLoopBackRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfRespondedOAMLoopBackRequests.setDescription(' The counter indicates the number of responded OAM loop-back requests on driver interface')
csAtmInterfaceConfOamLoopBackTransmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfOamLoopBackTransmitFail.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfOamLoopBackTransmitFail.setDescription(' The counter indicates the number of OAM loop-back requests/responses failed to transmit on ATM/driver interface')
csAtmInterfaceConfTransmitCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitCollisions.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmitCollisions.setDescription(' The counter indicates the number of packets (data and OAM) aborted due collisions at driver interface')
csAtmInterfaceConfTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedCells.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfTransmittedCells.setDescription(' The counter indicates the number of total number of cells transmitted on driver interface')
csAtmInterfaceReceivedBadAAL5HdrTrailers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceReceivedBadAAL5HdrTrailers.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceReceivedBadAAL5HdrTrailers.setDescription(' The counter indicates the number of packets (OAM & data) failed in reassemble path in ATM/driver interface due bad AAL5 trailer length')
csAtmInterfaceReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 7, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceReceivedCells.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceReceivedCells.setDescription(' The counter indicates the total number of received on open channels at ATM/driver interface')
csAtmInterfaceConfStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmInterfaceConfStatsTableEnd.setStatus('current')
if mibBuilder.loadTexts: csAtmInterfaceConfStatsTableEnd.setDescription('End of this group. value undefined')
csAtmConnStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9), )
if mibBuilder.loadTexts: csAtmConnStatsTable.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStatsTable.setDescription('')
csAtmConnStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"))
if mibBuilder.loadTexts: csAtmConnStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStatsEntry.setDescription('This list contains statistics entries for ATM interfaces.')
csAtmConnTransmittedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedPackets.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmittedPackets.setDescription(' The counter indicates the number of packets transmitted on ATM VC')
csAtmConnTransmittedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedBytes.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmittedBytes.setDescription(' The counter indicates the number of bytes transmitted on ATM VC')
csAtmConnTransmitErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmitErrors.setDescription(' The counter indicates the number of packets dropped due to transmit path errors on ATM VC')
csAtmConnTransmitOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitOperationallyDown.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmitOperationallyDown.setDescription(' The counter indicates the number of packets dropped in transmit path on ATM VC, because of inactivity')
csAtmConnTransmitQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitQueueFull.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmitQueueFull.setDescription(' The counter indicates the number of packets dropped due to transmit queue is full on driver interface')
csAtmConnTransmitBadLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitBadLength.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmitBadLength.setDescription(' The counter indicates the number of packets dropped in transmit path due to bad length on driver interface')
csAtmConnReceivedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedPackets.setDescription(' The counter indicates the number of packets Received on ATM VC')
csAtmConnReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBytes.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedBytes.setDescription(' The counter indicates the number of bytes Received on ATM VC')
csAtmConnReceivedEncapsulationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedEncapsulationErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedEncapsulationErrors.setDescription(' The counter indicates the number of packets dropped due to encapsulation errors in Receive path errors on ATM VC')
csAtmConnReceivedUnknownProtocolErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedUnknownProtocolErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedUnknownProtocolErrors.setDescription(' The counter indicates the number of packets dropped due to unknown protocol in r eceive path errors on ATM VC')
csAtmConnReceivedGenericErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedGenericErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedGenericErrors.setDescription(' The counter indicates the number of packets dropped due to Receive path generic errors on ATM VC. These errors includes, when protocol is none, or any other operations failed while accessing LLC/SNAP header')
csAtmConnReceivedOperationallyDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedOperationallyDown.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedOperationallyDown.setDescription(' The counter indicates the number of packets dropped in Receive path on ATM VC, because of inactivity')
csAtmConnReceivedDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedDroppedPkts.setDescription(' The counter indicates the number of received packets dropped due to buffer allocation on Driver interface')
csAtmConnReceivedBufferAllocationFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBufferAllocationFail.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedBufferAllocationFail.setDescription(' The counter indicates the number of received packets dropped due to buffer allocation on Driver interface')
csAtmConnReceivedBadAalType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBadAalType.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedBadAalType.setDescription(' The counter indicates the number of received packets dropped due to unsupported AAL type on Driver interface')
csAtmConnReceivedBadAalLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedBadAalLength.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedBadAalLength.setDescription(' The counter indicates the number of received packets dropped due to bad PDU length on Driver interface')
csAtmConnReceivedCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedCRCErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedCRCErrors.setDescription(' The counter indicates the number of received packets dropped due to CRC errors on Driver interface')
csAtmConnTransmittedOamLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedOamLoopBackRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmittedOamLoopBackRequests.setDescription(' The counter indicates the number of OAM loop-back requests transmitted on ATM VC')
csAtmConnReceivedOamLoopBackResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedOamLoopBackResponses.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedOamLoopBackResponses.setDescription(' The counter indicates the number of OAM loop-back responses received on ATM VC')
csAtmConnRespondedOAMLoopBackRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnRespondedOAMLoopBackRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmConnRespondedOAMLoopBackRequests.setDescription(' The counter indicates the number of responded OAM loop-back requests on driver interface')
csAtmConnOamLoopBackTransmitFail = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnOamLoopBackTransmitFail.setStatus('current')
if mibBuilder.loadTexts: csAtmConnOamLoopBackTransmitFail.setDescription(' The counter indicates the number of OAM loop-back requests failed to transmit on ATM VC')
csAtmConnTransmittedArpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedArpRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmittedArpRequests.setDescription(' The counter indicates the number of transmitted ARP requests on ATM VC')
csAtmConnTransmittedArpResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedArpResponses.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmittedArpResponses.setDescription(' The counter indicates the number of transmitted ARP responses on ATM VC')
csAtmConnReceivedArpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedArpRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedArpRequests.setDescription(' The counter indicates the number of received ARP requests on ATM VC')
csAtmConnReceivedArpResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedArpResponses.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedArpResponses.setDescription(' The counter indicates the number of received ARP responses on ATM VC')
csAtmConnUnRespondedArpRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnUnRespondedArpRequests.setStatus('current')
if mibBuilder.loadTexts: csAtmConnUnRespondedArpRequests.setDescription(' The counter indicates the number of received ARP requests for which, no ARP responses send due to non-existing IP address on ATM VC')
csAtmConnArpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnArpErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnArpErrors.setDescription(' The counter indicates the number of ARP requests/responses failed due other reasons, on ATM VC')
csAtmConnTransmittedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmittedCells.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmittedCells.setDescription(' The counter indicates the total number of data cells transmitted on ATM VC')
csAtmConnTransmitDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnTransmitDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: csAtmConnTransmitDroppedPkts.setDescription(' The counter indicates the total number of packets (OAM/RAW/data) packets dropped or aborted on ATM VC')
csAtmConnReceivedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 9, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnReceivedCells.setStatus('current')
if mibBuilder.loadTexts: csAtmConnReceivedCells.setDescription(' The counter indicates the total number of cells received on ATM VC')
csAtmConnStatsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnStatsTableEnd.setStatus('current')
if mibBuilder.loadTexts: csAtmConnStatsTableEnd.setDescription('End of this group. value undefined')
csAtmConnInArpStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11), )
if mibBuilder.loadTexts: csAtmConnInArpStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpStatisticsTable.setDescription('')
csAtmConnInArpStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csAtmInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csAtmInterfaceConfPortIndex"), (0, "COSINE-ORION-MIB", "csAtmConnChannelIndex"), (0, "COSINE-ORION-MIB", "csAtmConnSubIfIndex"))
if mibBuilder.loadTexts: csAtmConnInArpStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpStatisticsEntry.setDescription('This list contains ARP Entries for ATM virtual connections.')
csAtmConnInArpInReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInReqs.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpInReqs.setDescription('The number of InATMARP requests received on the PVC.')
csAtmConnInArpOutReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpOutReqs.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpOutReqs.setDescription('The number of InATMARP requests sent on the PVC.')
csAtmConnInArpInReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInReplies.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpInReplies.setDescription('The number of InATMARP replies received on the PVC.')
csAtmConnInArpOutReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpOutReplies.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpOutReplies.setDescription('The number of InATMARP replies sent on the PVC.')
csAtmConnInArpInvalidInReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInvalidInReqs.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpInvalidInReqs.setDescription('The number of Invalid InATMARP requests received on the PVC.')
csAtmConnInArpInvalidOutReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpInvalidOutReqs.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpInvalidOutReqs.setDescription('The number of InATMARP requests for which replies did not received on the PVC.')
csAtmConnInArpGenericErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpGenericErrors.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpGenericErrors.setDescription('The number of generic errors encountered while processing InATMARP requests and replies on the PVC.')
csAtmConnInArpStatisticsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csAtmConnInArpStatisticsTableEnd.setStatus('current')
if mibBuilder.loadTexts: csAtmConnInArpStatisticsTableEnd.setDescription('End of this group. value undefined')
csPosInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1), )
if mibBuilder.loadTexts: csPosInterfaceConfTable.setStatus('deprecated')
if mibBuilder.loadTexts: csPosInterfaceConfTable.setDescription('')
csPosInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPosInterfaceConfSlotIndex"), (0, "COSINE-ORION-MIB", "csPosInterfaceConfModuleIndex"), (0, "COSINE-ORION-MIB", "csPosInterfaceConfPortIndex"))
if mibBuilder.loadTexts: csPosInterfaceConfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csPosInterfaceConfEntry.setDescription('')
csPosInterfaceConfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csPosInterfaceConfSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: csPosInterfaceConfSlotIndex.setDescription('This object identifies the blade to which this POS Port is attached. Together with csPosInterfaceConfPortIndex, it uniquely identifies a physical port.')
csPosInterfaceConfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csPosInterfaceConfModuleIndex.setStatus('deprecated')
if mibBuilder.loadTexts: csPosInterfaceConfModuleIndex.setDescription('This object identifies the specific module of this POS blade.')
csPosInterfaceConfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csPosInterfaceConfPortIndex.setStatus('deprecated')
if mibBuilder.loadTexts: csPosInterfaceConfPortIndex.setDescription('This object identifies the blade to which this POS Port is attached. Together with csPosInterfaceConfPortIndex, it uniquely identifies a physical port.')
csPosEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("hdlc", 2), ("ppp", 3), ("frameRelay", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPosEncapsulation.setStatus('deprecated')
if mibBuilder.loadTexts: csPosEncapsulation.setDescription('This object identifies the encapsulation format used on this Packet Over Sonet port.')
csPosAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPosAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csPosAdminStatus.setDescription('This object is used to enable/disable this POS interface.')
csPosOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 3, 6, 1, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPosOperStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csPosOperStatus.setDescription('This object indicates the current operational status of this POS interface.')
csOrionVPNGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1))
csOrionVPNVRouterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2))
csOrionVPNNotifyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3))
csOrionVPNServerInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 4))
csOrionVPNTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1), )
if mibBuilder.loadTexts: csOrionVPNTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNTable.setDescription('A list of VPNs which belong to Orion box.')
csOrionVPNEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"))
if mibBuilder.loadTexts: csOrionVPNEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNEntry.setDescription('An entry containing management information applicable to a particular interface or management Blade.')
csOrionGlobalVPNIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGlobalVPNIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionGlobalVPNIndex.setDescription('A globally unique value, greater than zero, for each VPN, configured across all existing Orion boxes.')
csOrionVPNName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNName.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNName.setDescription("A textual string containing information about the VPN. By default this is set to 'VPN x', where x is the VPN ID.")
csOrionVPNRadiusSvrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNRadiusSvrList.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVPNRadiusSvrList.setDescription('This object identifies a prioritized list of RADIUS servers (from the csRadiusSvrTable) that will be used when a packet needing RADIUS services is processed. NOTE: This object has been obsoleted. Each VR has its own Radius server list. see csOrionRadiusInfo')
csOrionVPNDNSSvrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNDNSSvrList.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVPNDNSSvrList.setDescription('This object identifies a prioritized list of DNS servers (from the csDnsSvrTable) that will be used when a packet needing DNS services is processed. NOTE: This object has been obsoleted.')
csOrionVPNRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNRowStatus.setDescription('A row status type for the VPN.')
csOrionVPNOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 1, 1, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNOperStatus.setDescription('A operational status for the VPN.')
csOrionVrGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1))
csRtgPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2))
csOrionPing = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3))
csOrionPingCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1))
csOrionPingResults = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2))
csOrionTraceRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4))
csOrionVIfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2))
csOrionIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3))
csOrionOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4))
csOspfConf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1))
csOspfTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2))
csOrionRip = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5))
csRipStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1))
csRipConf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2))
csOrionTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6))
csOrionUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7))
csOrionBgp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8))
csBgpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 1))
csBgpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2))
csBgpGen = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1))
csBgpNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2))
csBgpPol = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 3))
csBgpConfed = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4))
csBgpNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5))
csBgpNbrGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6))
csOrionIsis = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9))
csIsisSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1))
csIsisCirc = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2))
csIsisISAdj = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3))
csIsisReachAdddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 4))
csIsisIPReachAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5))
csOrionMpls = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10))
csTeRsvpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1))
csTeMplsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2))
csTeLdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3))
csOrionPPVpn = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11))
csOrionPPVpnObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1))
csOrionPbf = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12))
csOrionIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13))
csIgmpMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1))
csOrionPWE3 = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14))
csOrionPWE3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1))
csOrionVPNVRouterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTable.setDescription('A list of Virtual Routers, configured for the VPN.')
csOrionVPNVRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterEntry.setDescription('An entry containing management information applicable to a particular virtual router, configured for the VPN.')
csOrionVPNVRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIndex.setDescription('A unique value, greater than zero, for each VPN Virtual Router. ')
csOrionVPNVRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterName.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterName.setDescription('A textual string containing information about the Virtual Router, configured to the particular VPN. ')
csOrionVPNVRouterIpForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forwarding", 1), ("not-forwarding", 2))).clone('forwarding')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpForwarding.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpForwarding.setDescription("The indication of whether this entity is acting as an IP gateway in respect to the forwarding of datagrams received by, but not addressed to, this entity. IP gateways forward datagrams. IP hosts do not (except those source-routed via the host). Note that for some managed nodes, this object may take on only a subset of the values possible. Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to change this object to an inappropriate value.")
csOrionVPNVRouterIpDefaultTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpDefaultTTL.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpDefaultTTL.setDescription('The default value inserted into the Time-To-Live field of the IP header of datagrams originated at this entity, whenever a TTL value is not supplied by the transport layer protocol.')
csOrionVPNVRouterIpReasmTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmTimeout.setDescription('The maximum number of seconds which received fragments are held while they are awaiting reassembly at this entity.')
csOrionVPNVRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterRowStatus.setDescription('A row status type for the VPN Virtual Router.')
csOrionVPNVRouterOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 9), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterOperStatus.setDescription('A operational status for the Virtual Router of the VPN.')
csOrionVPNVRouterLocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterLocations.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterLocations.setDescription("This object contains an ascii string which is used to identify possible address locations for the various elements of a Virtual Router. The format of the string is 'a/x, b/y, c/z', where 'a', 'b' and 'c' denote the blade numbers and are integers (1..26); 'x', 'y' and 'z' denote the processor engine (PE) ID and are integers (0..3). Specification of PE is optional. Note, this object can only be set when the Virtual Router is being created. If nothing is entered, the Resource Manager will decide where to place the Virtual Router elements. If the blade is specified but not the PE ID, the Resource Manager will decide which PE(s) to place the various Virtual Router objects on.")
csOrionVPNVRouterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("customerVr", 1), ("controlVr", 2), ("serviceProviderVr", 3))).clone('customerVr')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterType.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterType.setDescription('This identifies whether this Virtual Router is a data VR or the Control VR. Note, there can be only one control VR on the entire IPSX system and it must be located entirely on the control blade. Further, this object can only be set when the Virtual Router is being created.')
csOrionVPNVRouterIpDecTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpDecTtl.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpDecTtl.setDescription('')
csOrionVPNVRouterIpDsByte = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpDsByte.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpDsByte.setDescription('This object defines the values to be placed in the TypeOfService octet of each IP packet sent out or forwarded by the VR. The valid range covers both 7-bit configurations recommended in RFC 1349 (Precedence and TOS bits) and 6-bit configurations recommended in RFC 2474 (Differentiated Services). If the value selected is 256, the DsByte is not changed and packets are forwarded with their existing TypeOfService byte value. This object can be an IPv4 TOS octet: 0 1 2 3 4 5 6 7 +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TOS | MBZ | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ Precedence (from RFC 791) 111 - Network Control 110 - Internetwork Control 101 - CRITIC/ECP 100 - Flash Override 011 - Flash 010 - Immediate 001 - Priority 000 - Routine TOS (from RFC 1349) 1000 -- minimize delay 0100 -- maximize throughput 0010 -- maximize reliability 0001 -- minimize monetary cost 0000 -- normal service MBZ (must be zero) is unused. Or this object can be a DS field (from RFC 2474): 0 1 2 3 4 5 6 7 +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | DSCP | CU | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ DSCP: differentiated services codepoint CU: currently unused DSCP is used to select the PHB (per-hop behavior) a packet experiences at each node. It is recommended that bits 0-2 of the DSCP field be employed in a manner similar to, or subsuming, the deployed uses of the IP Precedence field of an IPv4 TOS octet to maintain some form of backward compatibility. ')
csOrionVPNVRouterOperLocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterOperLocations.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterOperLocations.setDescription("This object contains an ascii string which is used to identify the operational address locations for the various elements of a Virtual Router. The format of the string is 'a/x, b/y, c/z', where 'a', 'b' and 'c' denote the blade numbers and are integers (1..26); 'x', 'y' and 'z' denote the processor engine ID and are integers (0..3).")
csOrionVPNVRouterDenyPktFilterEvlogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterDenyPktFilterEvlogStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterDenyPktFilterEvlogStatus.setDescription('If enabled, event logs will be sent when a packet hits a packet filter on the VR or on any VI in the VR with a DENY action.')
csOrionVPNVRouterBackupPEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterBackupPEs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterBackupPEs.setDescription("This object contains an ascii string which is used to identify backup Pes for the various elements of a Virtual Router. The format of the string is 'a/x, b/y, c/z', where 'a', 'b' and 'c' denote the blade numbers and are integers (1..26); 'x', 'y' and 'z' denote the processor engine (PE) ID and are integers (0..3). Specification of PE is optional.")
csOrionVPNVRouterFailOver = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterFailOver.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterFailOver.setDescription("If the attribute is 'true' then the the VR will be failed over to the backup PE. VR failover actually starts after the the fail-over timer has expired")
csOrionVPNVRouterAbortFailOver = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 18), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterAbortFailOver.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterAbortFailOver.setDescription("If the attribute is 'true' then the the VR will be failed over to the backup PE. VR failover actually starts after the the fail-over timer has expired")
csOrionVPNVRouterFailbackToPrimary = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterFailbackToPrimary.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterFailbackToPrimary.setDescription("If the attribute is 'true' then the the VR will be failback to the Primary PE. Setting this attribute makes sense ONLY when manual VR fail-over failed")
csOrionVPNVRouterCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterCreationTime.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterCreationTime.setDescription("If the attribute is 'true' then the the VR will be failed over to the backup PE immediately. Setting this attribute makes sense ONLY when csOrionVPNVRouterFailOver is also set")
csOrionVPNVRouterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUpTime.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUpTime.setDescription("If the attribute is 'true' then the the VR will be failed over to the backup PE immediately. Setting this attribute makes sense ONLY when csOrionVPNVRouterFailOver is also set")
csImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1), )
if mibBuilder.loadTexts: csImpPolTable.setStatus('current')
if mibBuilder.loadTexts: csImpPolTable.setDescription('This table is used to configure the import policies stored on a virtual router. Once configured, these policies can be applied to any routing protocol.')
csImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csImpPolId"))
if mibBuilder.loadTexts: csImpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csImpPolEntry.setDescription('Each entry contains information about a single import policy.')
csImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csImpPolId.setStatus('current')
if mibBuilder.loadTexts: csImpPolId.setDescription('This object identifies a specific Import Policy entry.')
csImpPolGenAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolGenAclId.setStatus('current')
if mibBuilder.loadTexts: csImpPolGenAclId.setDescription('The identifier of General Access List entry that this Policy uses. The value -1 represents a wildcard for this Import Policy parameter.')
csImpPolPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolPeerAS.setStatus('current')
if mibBuilder.loadTexts: csImpPolPeerAS.setDescription('Used by BGP, the autonomous system number of the remote peer. The value -1 represents a wildcard for this Import Policy parameter.')
csImpPolHomeAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolHomeAS.setStatus('current')
if mibBuilder.loadTexts: csImpPolHomeAS.setDescription('Used by BGP, the home autonomous system number of the BGP system originating the update. The value -1 represents a wildcard for this Import Policy parameter.')
csImpPolOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("igp", 2), ("egp", 3), ("any", 4))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolOrigin.setStatus('current')
if mibBuilder.loadTexts: csImpPolOrigin.setDescription('Used by BGP, the origin type as placed in the AS path by the originator of the update. The origin could be IGP (the route was learned from an internal gateway protocol), EGP (the route was learned via an exterior gateway protocol) or unknown (the origin of the route cannot be determined). any (signal policy module to ignore this value) The value egp is deprecated.')
csImpPolAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolAction.setStatus('current')
if mibBuilder.loadTexts: csImpPolAction.setDescription('The action to take on routes that match this policy.')
csImpPolPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolPreference.setStatus('current')
if mibBuilder.loadTexts: csImpPolPreference.setDescription("The preference to apply to routes that match this policy. Note, this object only applies to import policies that have a 'permit' action. The value -1 indicates this parameter has not been set.")
csImpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csImpPolRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csImpPolBgpCommunity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csImpPolBgpCommunity1.setStatus('current')
if mibBuilder.loadTexts: csImpPolBgpCommunity1.setDescription('The BGP Community parameter 1. Refer to RFC1997. The following values are not allowed in the configuration: 0 through 0x0000FFFF and 0xFFFF0000 through 0xFFFFFFFF. ')
csExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2), )
if mibBuilder.loadTexts: csExpPolTable.setStatus('current')
if mibBuilder.loadTexts: csExpPolTable.setDescription('This table is used to configure the export policies stored on a virtual router. Once configured, these policies can be applied to any routing protocol.')
csExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csExpPolId"))
if mibBuilder.loadTexts: csExpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csExpPolEntry.setDescription('Each entry contains information about a single import policy.')
csExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csExpPolId.setStatus('current')
if mibBuilder.loadTexts: csExpPolId.setDescription('This object identifies a specific Export Policy entry.')
csExpPolGenAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolGenAclId.setStatus('current')
if mibBuilder.loadTexts: csExpPolGenAclId.setDescription('The identifier of General Access List entry that this Policy uses. The value -1 represents a wildcard for this Import Policy parameter.')
csExpPolPeerAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolPeerAS.setStatus('current')
if mibBuilder.loadTexts: csExpPolPeerAS.setDescription("The target system's autonomous system number. The value -1 represents a wildcard for this Import Policy parameter.")
csExpPolProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("all", 1), ("local", 2), ("bgp", 3), ("rip", 4), ("ospf", 5), ("static", 6), ("i-bgp", 7), ("ospf-ext", 8), ("isis", 9), ("aggregate", 10), ("dial-ppp", 11), ("dial-ipsec", 12))).clone('all')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolProtocol.setStatus('current')
if mibBuilder.loadTexts: csExpPolProtocol.setDescription('The protocol that has added the route to the routing table.')
csExpPolEgpAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolEgpAS.setStatus('obsolete')
if mibBuilder.loadTexts: csExpPolEgpAS.setDescription('If a route was added via EGP, this object is the AS number of the EGP peer. The value -1 represents a wildcard for this Import Policy parameter.')
csExpPolBgpAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolBgpAS.setStatus('current')
if mibBuilder.loadTexts: csExpPolBgpAS.setDescription('If a route was added via BGP, this object is the AS number of the BGP peer. The value -1 represents a wildcard for this Import Policy parameter.')
csExpPolExtRteTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 7), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolExtRteTag.setStatus('current')
if mibBuilder.loadTexts: csExpPolExtRteTag.setDescription('If the route was added via OSPF External, this is the eter The value -1 represents a wildcard for this Import Policy parameter.')
csExpPolRipIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRipIp.setStatus('current')
if mibBuilder.loadTexts: csExpPolRipIp.setDescription('The value 0.0.0.0 represents a wildcard for this Import Policy parameter.')
csExpPolRipNbrIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRipNbrIp.setStatus('current')
if mibBuilder.loadTexts: csExpPolRipNbrIp.setDescription('The value 0.0.0.0 represents a wildcard for this Import Policy parameter.')
csExpPolAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("export", 1), ("block", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolAction.setStatus('current')
if mibBuilder.loadTexts: csExpPolAction.setDescription('The action to perform on packets matching this policy.')
csExpPolMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolMetric.setStatus('current')
if mibBuilder.loadTexts: csExpPolMetric.setDescription('The metric to assign to packets matching this policy. The value -1 indicates this parameter has not been set.')
csExpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csExpPolRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csExpPolBgpCommunity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolBgpCommunity1.setStatus('current')
if mibBuilder.loadTexts: csExpPolBgpCommunity1.setDescription('The BGP Community parameter 1. Refer to RFC1997. The following values are not allowed in the configuration: 0 through 0x0000FFFF and 0xFFFF0000 through 0xFFFFFFFF. But the following values are allowed within that range: 0xFFFF FF01 (NO-EXPORT) 0xFFFF FF02 (NO-ADVERTISE) 0xFFFF FF03 (NO-EXPORT-SUB) Note that this value can not be set to 0 unless csExpPolBgpCommunity2 is set to 0. ')
csExpPolBgpCommunity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolBgpCommunity2.setStatus('current')
if mibBuilder.loadTexts: csExpPolBgpCommunity2.setDescription('Same description as csExpPolBgpCommunity1')
csExpPolRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("any", 0), ("isislevel1", 1), ("isislevel2", 2), ("isislevel12", 3), ("ospfinternal", 4), ("ospfexternal", 5), ("ospfexternal1", 6), ("ospfexternal2", 7))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolRouteType.setStatus('current')
if mibBuilder.loadTexts: csExpPolRouteType.setDescription('RouteType to be matched when exporting ISIS/OSPF route into another protocol. ISISlevel1, ISISlevel2 and ISISlevel12 can be set if csExpPolProtocol is set to ISIS. OSPFinternal, OSPFexternal, OSPFexternal1 and OSPFexternal2 can be set if csExpPolProtocol is set to OSPF')
csExpPolMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("any", 0), ("ospftype1", 1), ("ospftype2", 2), ("isisinternal", 3), ("isisexternal", 4))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolMetricType.setStatus('current')
if mibBuilder.loadTexts: csExpPolMetricType.setDescription('Metric type to be set when exporting route into a protocol. OSPFtype1 and OSPFtype2 are only applicable for OSPF. ISISinternal and ISISexternal are only applicable for ISIS.')
csExpPolLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 0), ("isislevel1", 1), ("isislevel2", 2), ("isislevel12", 3), ("ospfstubarea", 4), ("ospfbackbone", 5))).clone('any')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpPolLevel.setStatus('current')
if mibBuilder.loadTexts: csExpPolLevel.setDescription('To indicate where to import routes, applicable to ISIS and OSPF only. ISISlevel1, ISISlevel2, ISISlevel3 are applicable when you apply export policy for ISIS. OSPFstubarea and OSPFbackbone are applicable when you apply export policy for OSPF.')
csExpPolTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csExpPolTableEnd.setStatus('current')
if mibBuilder.loadTexts: csExpPolTableEnd.setDescription('End of this group. value undefined')
csRtPolicyTermTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4), )
if mibBuilder.loadTexts: csRtPolicyTermTable.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermTable.setDescription("This table is used to configure route policies. Each route policy is referred by a name 'csRtPolicyName'. A route policy consists of multiple named terms which are referred by 'csRtPolicyTermName'. A route term constitues a set of match conditions, modifiers (set attributes) and a flow action for the policy execution.")
csRtPolicyTermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyName"), (0, "COSINE-ORION-MIB", "csRtPolicyTermName"))
if mibBuilder.loadTexts: csRtPolicyTermEntry.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermEntry.setDescription('Each entry contains information about a single policy term. The policy name along with the term name identifies an entry.')
csRtPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyName.setDescription('This object identifies a specific route policy. A policy name can contain alphanumeric characters and hyphens (-).')
csRtPolicyTermName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyTermName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermName.setDescription('This object along with the csRtPolicyName identifies a unique policy term table entry. A csRtPolicyAction table entry is also associated with a policy term. A policy term name can contain alphanumeric characters and hyphens (-).')
csRtPolicyTermSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermSeqNum.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermSeqNum.setDescription('The sequence number of this policy term. Policy terms are evaluated in the ascending order of thier sequence numbers. If more than one term has the same sequence number then the order of their evaluation relative to each other may be abribtrary.')
csRtPolicyTermFromBgpASPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpASPathName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromBgpASPathName.setDescription('The identifier for a BGP AS path regular expression. It is used to locate an AS path entry in csRtPolicyExpTable. A NULL string indicates that this object is note used in this table entry.')
csRtPolicyTermFromVpnRouteTargetNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 5), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromVpnRouteTargetNamesListFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromVpnRouteTargetNamesListFlag.setDescription("If the attribute is 'true' then the VPN Route Target names list is specified as a match condition. The VPN Route Target names list can be accessed from csRtPolicyStrTable using the the following index attributes: csRtPolicyStrType = term-from-vpn-route-target-names-list csRtPolicyStrName = 'csRtPolicyName/csRtPolicyTermName' ")
csRtPolicyTermFromVpnSoo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromVpnSoo.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromVpnSoo.setDescription('A site-of-origin value to match the SOO of a VPN route. If this attribute is set then this attribute is a string of upto 32 bytes Value is absolute value or in regular expression format. If this attribute is not set then it is of zero length.')
csRtPolicyTermFromVpnRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromVpnRd.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromVpnRd.setDescription('A list of route distinguisher values to match the RD of a VPN route. If this attribute is set then this attribute is a string of upto 32 bytes Value is absolute value or in regular expression format. If this attribute is not set then it is of zero length.')
csRtPolicyTermFromBgpCommNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpCommNamesListFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromBgpCommNamesListFlag.setDescription("If the attribute is 'true' then the BGP community names list is specified specified as a match condition. The BGP community names list can be accessed from csRtPolicyStrTable using the the following index attributes: csRtPolicyStrType = term-from-community-names-list csRtPolicyStrName = 'csRtPolicyName/csRtPolicyTermName' ")
csRtPolicyTermFromBgpLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpLocalPref.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromBgpLocalPref.setDescription('The BGP local preference attribute. [Check ranges and default]')
csRtPolicyTermFromBgpOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("incomplete", 1), ("igp", 2), ("egp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromBgpOrigin.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromBgpOrigin.setDescription('Used by BGP, the origin type as placed in the AS path by the originator of the update. The origin could be IGP (the route was learned from an internal gateway protocol), EGP (the route was learned via an exterior gateway protocol) or incomplete (the origin of the route cannot be determined). none (signal policy module to ignore this value) The value egp is deprecated.')
csRtPolicyTermFromIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIntfIndex.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromIntfIndex.setDescription('The index of the interface from which this route was learnt. This condition should not be used for protocols which are not interface specific, eg. IBGP. The value -1 indicates that this attribute is not used.')
csRtPolicyTermFromIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 12), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIntfAddr.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromIntfAddr.setDescription('The IP address of the interface from which this route was learnt. This condition should not be used for protocols which are not interface specific, eg. IBGP. The value 0.0.0.0 represents that this attribute is not used.')
csRtPolicyTermFromIsisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1", 1), ("level2", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIsisLevel.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromIsisLevel.setDescription('ISIS level of the route.')
csRtPolicyTermFromIsisMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("internal", 3), ("external", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromIsisMetricType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromIsisMetricType.setDescription('ISIS Metric type to match for the policy.')
csRtPolicyTermFromMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromMetric1.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromMetric1.setDescription('The route metric to match for this policy. The value -1 indicates this parameter has not been set.')
csRtPolicyTermFromMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromMetric2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromMetric2.setDescription('The route metric2 to match for this policy. The value -1 indicates this parameter has not been set.')
csRtPolicyTermFromNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 17), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromNbrAddr.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromNbrAddr.setDescription('The value 0.0.0.0 represents that this attribute is not used.')
csRtPolicyTermFromNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromNbrGroupName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromNbrGroupName.setDescription('The Name of the BGP Neighbor Group')
csRtPolicyTermFromNextHopAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 19), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromNextHopAddrIndex.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromNextHopAddrIndex.setDescription('The value 0.0.0.0 represents a wildcard for this parameter.')
csRtPolicyTermFromOspfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 20), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfArea.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromOspfArea.setDescription('The OSPF area identifier.')
csRtPolicyTermFromOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 8, 16, 32))).clone(namedValues=NamedValues(("none", 0), ("nssa", 4), ("backbone", 8), ("normal", 16), ("stub", 32))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromOspfAreaType.setDescription('OSPF area type to match for the policy.')
csRtPolicyTermFromOspfMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("type1", 1), ("type2", 2), ("internal", 3), ("external", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfMetricType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromOspfMetricType.setDescription('OSPF metric type to match for the policy.')
csRtPolicyTermFromOspfTag1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 23), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfTag1.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromOspfTag1.setDescription('The 32-bit tag filed in OSPF external LSA packets')
csRtPolicyTermFromOspfTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 24), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromOspfTag2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromOspfTag2.setDescription('The 32-bit tag filed in OSPF external LSA packets')
csRtPolicyTermFromPolicyNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 25), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromPolicyNamesListFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromPolicyNamesListFlag.setDescription("If the attribute is 'true' then a list of policy names is specified as a match condition. Each name in the list represents a route policy. The policy names list can be accessed from csRtPolicyStrTable using the the following index attributes: csRtPolicyStrType = term-from-policy-names-list csRtPolicyStrName = 'csRtPolicyName/csRtPolicyTermName' csRtPolicyStrFragId = ")
csRtPolicyTermFromPreference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromPreference1.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromPreference1.setDescription("The preference to apply to routes that match this policy. Note, this object only applies to import policies that have a 'permit' action. The value -1 indicates this parameter has not been set.")
csRtPolicyTermFromPreference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromPreference2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromPreference2.setDescription("The preference to apply to routes that match this policy. Note, this object only applies to import policies that have a 'permit' action. The value -1 indicates this parameter has not been set.")
csRtPolicyTermFromPrefixNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 28), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromPrefixNamesListFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromPrefixNamesListFlag.setDescription("If the attribute is 'true' then a list of prefix-list names is specified as a match condition. Each name in the list represents a prefix-list. The prefix names list can be accessed from csRtPolicyStrTable using the the following index attributes: csRtPolicyStrType = term-from-prefix-names-list csRtPolicyStrName = 'csRtPolicyName/csRtPolicyTermName' csRtPolicyStrFragId = ")
csRtPolicyTermFromRouteFilterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 29), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermFromRouteFilterFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromRouteFilterFlag.setDescription("If the attribute is 'true' then a list of route-filters are specified as a match condition.")
csRtPolicyTermFromProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 30), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermFromProtocol.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermFromProtocol.setDescription('The protocol that has added the route to the routing table. Each bit within this object specifies protocol added the route. Below is a list of the protocols and their corresponding bits identifiers. options bit -------------------------------------- none 0 local 1 bgp 2 rip 4 ospf 8 static 16 isis 32 aggregate 64 vpn 128 dial-ppp 256 dial-ipsec 512 End of description.')
csRtPolicyTermToIsisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("level1", 1), ("level2", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToIsisLevel.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermToIsisLevel.setDescription('ISIS level for the routing instance. This attribute is used in policies to redistribute routes into ISIS.')
csRtPolicyTermToOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4, 8))).clone(namedValues=NamedValues(("none", 0), ("nssa", 4), ("backbone", 8))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermToOspfAreaType.setDescription('OSPF area type for the policy.')
csRtPolicyTermToNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 33), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToNbrAddr.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermToNbrAddr.setDescription('The value 0.0.0.0 represents a wildcard for this parameter.')
csRtPolicyTermToNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermToNbrGroupName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermToNbrGroupName.setDescription('The Name of the BGP Neighbor Group')
csRtPolicyTermActionFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 35), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermActionFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionFlag.setDescription("If the attribute is 'true' then a action is specified.")
csRtPolicyTermActionBgpASPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpASPathName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpASPathName.setDescription('The AS Path to prepend. This object is a list of AS numbers. A NULL string indicates that this object is note used in this entry.')
csRtPolicyTermActionBgpASPathOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("none", 0), ("prepend", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpASPathOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpASPathOp.setDescription("The operation to perform on the associated route attribute. none: no operation is performed, i.e., the AS path attribute is not modified. prepend: prepend the route's AS path attribute with the AS path list specified by csRtPolicyTermActionBgpASPathName.")
csRtPolicyTermActionVpnRouteTargetNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 38), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRouteTargetNamesListFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRouteTargetNamesListFlag.setDescription("If the attribute is 'true' then the VPN Route Target names list is specified as an action condition. The VPN Route Target names list can be accessed from csRtPolicyStrTable using the following index attributes: csRtPolicyStrType = term-action-vpn-route-target-names-list csRtPolicyStrName = 'csRtPolicyName/csRtPolicyTermName' csRtPolicyStrFragId = ")
csRtPolicyTermActionVpnRouteTargetOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRouteTargetOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRouteTargetOp.setDescription("The operation to perform on the associated route attribute. none: no operation is performed, i.e., the route target is not modified. set: replace the route's route target with the members of route targets list specified add: add the route's route target with the members of route targets list specified subtract: remove the members of route targets list specified from route's route target")
csRtPolicyTermActionVpnSooOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("delete", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnSooOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionVpnSooOp.setDescription("The operation to perform on the associated route attribute. none: no operation is performed, i.e., the site of origin is not modified. set: replace the route's site of origin with the site of origin value specified in action. delete: delete the route's site of origin ")
csRtPolicyTermActionVpnSoo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnSoo.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionVpnSoo.setDescription('The site of origin to use for a VPN route. If this attribute is set then this attribute is a string of upto 32 bytes absolute value or in regular expression format otherwise it is of zero length.')
csRtPolicyTermActionVpnRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRd.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionVpnRd.setDescription('The route distinguisher to use for a VPN route. If this attribute is set then this attribute is a string of upto 32 bytes absolute value or in regular expression format otherwise it is of zero length.')
csRtPolicyTermActionBgpCommNamesListFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 43), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpCommNamesListFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpCommNamesListFlag.setDescription("If the attribute is 'true' then the BGP community names list is specified as an action condition. The BGP community names list can be accessed from csRtPolicyStrTable using the the following index attributes: csRtPolicyStrType = term-action-community-names-list csRtPolicyStrName = 'csRtPolicyName/csRtPolicyTermName' csRtPolicyStrFragId = ")
csRtPolicyTermActionBgpCommOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpCommOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpCommOp.setDescription("The operation to perform on the associated route attribute. none: no operation is performed, i.e., the community attribute is not modified. set: replace the route's community attribute with the communities specified by csRtPolicyTermActionBgpCommIndex. add: add the communities specified by csRtPolicyTermActionBgpCommIndex to the route's community attribute. subtract: remove the communities specified by csRtPolicyTermActionBgpCommIndex from the route's community attribute.")
csRtPolicyTermActionBgpLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpLocalPref.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpLocalPref.setDescription('The BGP local preference attribute. [Check ranges and default]')
csRtPolicyTermActionBgpLocalPrefOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpLocalPrefOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpLocalPrefOp.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionBgpOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("incomplete", 1), ("igp", 2), ("egp", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpOrigin.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpOrigin.setDescription('Used by BGP, the origin type as placed in the AS path by the originator of the update. The origin could be IGP (the route was learned from an internal gateway protocol), EGP (the route was learned via an exterior gateway protocol) or incomplete (the origin of the route cannot be determined). any (signal policy module to ignore this value) The value egp is deprecated.')
csRtPolicyTermActionBgpMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("none", 0), ("internal", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionBgpMetricType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionBgpMetricType.setDescription('BGP metric type to set for the route. none: this action object is not used internal: use the IGP metric.')
csRtPolicyTermActionMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetric.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionMetric.setDescription('The route metric to match for this policy. The value -1 indicates this parameter has not been set.')
csRtPolicyTermActionMetricOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetricOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionMetricOp.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetric2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionMetric2.setDescription('The route metric2 to match for this policy. The value -1 indicates this parameter has not been set.')
csRtPolicyTermActionMetric2Op = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionMetric2Op.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionMetric2Op.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionIsisMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("internal", 3), ("external", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionIsisMetricType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionIsisMetricType.setDescription('ISIS metric type to set for the route. Value none indicates that this action object is not used.')
csRtPolicyTermActionNextHopAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("nh-self", 1), ("nh-address", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionNextHopAddrType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionNextHopAddrType.setDescription("The next hop address type. If the value is set to 'nh-address' then the IP-address specified in csRtPolicyTermActionNextHopAddr should be used. Value none indicates that this action object is not used.")
csRtPolicyTermActionNextHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 55), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionNextHopAddr.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionNextHopAddr.setDescription("The nexthop address to set for the route. This attribute is valid only if the csRtPolicyTermActionNextHopAddrType is set to 'nh-address'. If value is 0.0.0.0 then this object is not set.")
csRtPolicyTermActionOspfMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("type1", 1), ("type2", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfMetricType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionOspfMetricType.setDescription('OSPF Metric type to set for the route. Value none indicates that this action object is not used.')
csRtPolicyTermActionOspfTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 57), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag.setDescription('The 32-bit tag filed in OSPF external LSA packets')
csRtPolicyTermActionOspfTagOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTagOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTagOp.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionOspfTag2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 59), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag2.setDescription('The 32-bit tag filed in OSPF external LSA packets')
csRtPolicyTermActionOspfTag2Op = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag2Op.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionOspfTag2Op.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreference.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionPreference.setDescription("The preference to apply to routes that match this policy. Note, this object only applies to import policies that have a 'permit' action. The value -1 indicates this parameter has not been set.")
csRtPolicyTermActionPreferenceOp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreferenceOp.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionPreferenceOp.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionPreference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreference2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionPreference2.setDescription("The preference to apply to routes that match this policy. Note, this object only applies to import policies that have a 'permit' action. The value -1 indicates this parameter has not been set.")
csRtPolicyTermActionPreference2Op = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("set", 1), ("add", 2), ("subtract", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionPreference2Op.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionPreference2Op.setDescription('The operation to perform on the associated route attribute.')
csRtPolicyTermActionFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("accept", 1), ("reject", 2), ("nextPolicy", 3), ("nextTerm", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionFlow.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionFlow.setDescription('The policy flow control actions. This action is applied after all the other action objects are processed. none: use default behavior accept: accept the route. No other terms or policies are evaluated. All other action objects in this entry are processed before this action. reject: reject the route. No other terms or policies are evaluated. Other action objects are not used in combination with it. next-term: skip to and evaluate the next term in the same policy. All other action objects in this entry are processed before this action. next-policy: skip to and evaluate the first term of the next policy. All other action objects in this entry are processed before this action.')
csRtPolicyTermActionLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 66), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermActionLogFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermActionLogFlag.setDescription(' Enable/disable logging this policy action.')
csRtPolicyTermRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 4, 1, 67), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyTermRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csRtPolicyTermTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyTermTableEnd.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyTermTableEnd.setDescription('End of this group. value undefined')
csPolicyRouteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6), )
if mibBuilder.loadTexts: csPolicyRouteFilterTable.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterTable.setDescription('This table holds policy related route filter entries. A route filter is a prefix or prefix-range with an associated action. A route filter may have action attributes associtaed with it. A route filter is identified by the isame csRtPolicyName and csRtPolicyTermName attributes constitute the route-filter list of a policy term. Route-filters within a list are processed in the ascending order of csPolicyRouteFilterSeqNum attribute if the prefix/mask are the same; otherwise the longest prefix match first rule is used.')
csPolicyRouteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyName"), (0, "COSINE-ORION-MIB", "csRtPolicyTermName"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefix"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefixLen"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterMatchType"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefix2"), (0, "COSINE-ORION-MIB", "csPolicyRouteFilterPrefixLen2"))
if mibBuilder.loadTexts: csPolicyRouteFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterEntry.setDescription('Each table entry contains information about a single route filter.')
csPolicyRouteFilterPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 1), IpAddress())
if mibBuilder.loadTexts: csPolicyRouteFilterPrefix.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterPrefix.setDescription('The IP prefix for this route-filter entry.')
csPolicyRouteFilterPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: csPolicyRouteFilterPrefixLen.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterPrefixLen.setDescription('The prefix length for this entry.')
csPolicyRouteFilterMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("exact", 1), ("longer", 2), ("orlonger", 3), ("upto", 4), ("through", 5))).clone('exact'))
if mibBuilder.loadTexts: csPolicyRouteFilterMatchType.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterMatchType.setDescription("The match type for this entry. exact: the route prefix should match csPolicyRouteFilterPrefix and prefix-length should be equal to csPolicyRouteFilterPrefixLen. longer: csPolicyRouteFilterPrefix matches the route-prefix exactly and csPolicyRouteFilterPrefixLen is greater than prefix-length. orlonger: csPolicyRouteFilterPrefix matches the route-prefix exactly and csPolicyRouteFilterPrefixLen is greater than prefix-length. upto: the most significant bits of csPolicyRouteFilterPrefix and the route-prefix match for csPolicyRouteFilterPrefixLen bits; the route's prefix length is between csPolicyRouteFilterPrefixLen and csPolicyRouteFilterPrefixLen2 (inclusive). through: the following condition should match. - prefix matches csPolicyRouteFilterPrefix - prefix matches csPolicyRouteFilterPrefix2 for route's prefix length bits (most significant) - prefix length is less than or equal to csPolicyRouteFilterPrefixLen2.")
csPolicyRouteFilterPrefix2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 4), IpAddress())
if mibBuilder.loadTexts: csPolicyRouteFilterPrefix2.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterPrefix2.setDescription("The second prefix for this entry. This is used to specify the route range. This object is valid only if csPolicyRouteFilterMatchType value is 'through'. Otherwise the value should be set to 0.0.0.0")
csPolicyRouteFilterPrefixLen2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: csPolicyRouteFilterPrefixLen2.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterPrefixLen2.setDescription("The second prefix length for this entry. This is used specify the prefix-length range. This object is valid only if csPolicyRouteFilterMatchType value is 'upto' or 'through'. Otherwise the value should be set to 0.")
csPolicyRouteFilterSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 6), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPolicyRouteFilterSeqNum.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterSeqNum.setDescription('The sequence number of the prefix entry. The entries within a route-filter list are evaluated using the longest prefix match rule. If more than one entry have the same prefixe i.e., csPolicyRouteFilterPrefix and csPolicyRouteFilterPrefixLen match then they are evaluated in the ascending order of sequence numbers.')
csRtPolicyRouteFilterActionFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("accept", 1), ("reject", 2), ("nextPolicy", 3), ("nextTerm", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyRouteFilterActionFlow.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyRouteFilterActionFlow.setDescription('The policy flow control actions. This action is applied after all the other action objects are processed. none: use default behavior accept: accept the route. No other terms or policies are evaluated. All other action objects in this entry are processed before this action. reject: reject the route. No other terms or policies are evaluated. Other action objects are not used in combination with it. next-term: skip to and evaluate the next term in the same policy. All other action objects in this entry are processed before this action. next-policy: skip to and evaluate the first term of the next policy. All other action objects in this entry are processed before this action.')
csRtPolicyRouteFilterActionLogFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyRouteFilterActionLogFlag.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyRouteFilterActionLogFlag.setDescription('Enable/disable logging this policy action.')
csPolicyRouteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPolicyRouteFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csPolicyRouteFilterTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPolicyRouteFilterTableEnd.setStatus('current')
if mibBuilder.loadTexts: csPolicyRouteFilterTableEnd.setDescription('End of this group. value undefined')
csRtPolicyPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8), )
if mibBuilder.loadTexts: csRtPolicyPrefixListTable.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListTable.setDescription('This table holds IP prefix entries for prefix-lists. A prefix-list is a named list of IP prefixes. A prefix can be specified as an IP address and mask for exact match or can be specified as a range of IP addresses for other match conditions. Each table entry constitutes a single prefix.')
csRtPolicyPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListName"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefix"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefixLen"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListMatchType"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefix2"), (0, "COSINE-ORION-MIB", "csRtPolicyPrefixListPrefixLen2"))
if mibBuilder.loadTexts: csRtPolicyPrefixListEntry.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListEntry.setDescription('Each entry contains information about a single route prefix or range')
csRtPolicyPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyPrefixListName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListName.setDescription('The name of the prefix-list. A name can contain alphanumeric characters and hyphens (-).')
csRtPolicyPrefixListPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 2), IpAddress())
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefix.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefix.setDescription('The IP prefix for this entry.')
csRtPolicyPrefixListPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefixLen.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefixLen.setDescription('The prefix length for this entry.')
csRtPolicyPrefixListMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("exact", 1), ("longer", 2), ("orlonger", 3), ("upto", 4), ("through", 5))).clone('exact'))
if mibBuilder.loadTexts: csRtPolicyPrefixListMatchType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListMatchType.setDescription("The match type for this entry. exact: the route prefix should match csRtPolicyPrefixListPrefix and prefix-length should be equal to csRtPolicyPrefixListPrefixLen. longer: csRtPolicyPrefixListPrefix matches the route-prefix exactly and csRtPolicyPrefixListPrefixLen is greater than prefix-length. orlonger: csRtPolicyPrefixListPrefix matches the route-prefix exactly and csRtPolicyPrefixListPrefixLen is greater than prefix-length. upto: the most significant bits of csRtPolicyPrefixListPrefix and the route-prefix match for csRtPolicyPrefixListPrefixLen bits; the route's prefix length is between csRtPolicyPrefixListPrefixLen and csRtPolicyPrefixListPrefixLen2 (inclusive). through: the following condition should match. - prefix matches csRtPolicyPrefixListPrefix - prefix matches csRtPolicyPrefixListPrefix2 for route's prefix length bits (most significant) - prefix length is less than or equal to csRtPolicyPrefixListPrefixLen2.")
csRtPolicyPrefixListPrefix2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 5), IpAddress())
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefix2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefix2.setDescription("The second prefix for this entry. This is used to specify the route range. This object is valid only if csRtPolicyPrefixListMatchType value is 'through'.")
csRtPolicyPrefixListPrefixLen2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefixLen2.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListPrefixLen2.setDescription("The second prefix length for this entry. This is used specify the prefix-length range. This object is valid only if csRtPolicyPrefixListMatchType value is 'upto' or 'through'. ")
csRtPolicyPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 8, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyPrefixListRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csRtPolicyPrefixListTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyPrefixListTableEnd.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyPrefixListTableEnd.setDescription('End of this group. value undefined')
csRtPolicyStrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10), )
if mibBuilder.loadTexts: csRtPolicyStrTable.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrTable.setDescription('This is a generic table to hold all the policy related string attributes. These could be lists of names, logical or regular expressions related to policy configuration. Eg: AS Path regular expressions, BGP community. The csRtPolicyStrType attribute holds the type of the policy string. Strings larger than 255 bytes are fragmented into 255 bytes segments with each fragment stored as a single table entry.')
csRtPolicyStrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyStrType"), (0, "COSINE-ORION-MIB", "csRtPolicyStrName"))
if mibBuilder.loadTexts: csRtPolicyStrEntry.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrEntry.setDescription('Each entry contains information about a single policy string fragment.')
csRtPolicyStrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("asPath", 1), ("bgpCommunity", 2), ("termFromCommunityNamesList", 3), ("termFromPolicyNamesList", 4), ("termFromPrefixNamesList", 5), ("termActionCommunityNamesList", 6), ("rtFilterActionCommunityNamesList", 7), ("vpnAccessCustomerList", 8), ("bgpExtCommunity", 9), ("termFromExtCommunityNamesList", 10), ("termActionExtCommunityNamesList", 11))))
if mibBuilder.loadTexts: csRtPolicyStrType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrType.setDescription('Type of policy related logical or regular expression. Regular expressions are used by AS Paths and BGP communityies. Logical expressions are used to create conditional policy statements for use by import/export policies.')
csRtPolicyStrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 65)))
if mibBuilder.loadTexts: csRtPolicyStrName.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrName.setDescription('The name for the policy string. A name can contain alphanumeric charachers and hyphens (-). The name is unique for a given type.')
csRtPolicyStrData = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyStrData.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrData.setDescription('The policy expression.')
csRtPolicyStrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyStrRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csRtPolicyStrTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtPolicyStrTableEnd.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyStrTableEnd.setDescription('End of this group. value undefined')
csRtPolicyUserTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12), )
if mibBuilder.loadTexts: csRtPolicyUserTable.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserTable.setDescription('This table hold routing policy usage configuration for all protocols/components in the router. It is normally the import-policy/export-policy configuration statements in a protocol context. The index is specified as a {Type,Value} to account for the differences between protocols. For example, if protocol type is BGP then the index identifies also identifies the BGP peer or group for which the configuration is applicable.')
csRtPolicyUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRtPolicyUserType"), (0, "COSINE-ORION-MIB", "csRtPolicyUserIndexValue"), (0, "COSINE-ORION-MIB", "csRtPolicyUserPolicyType"))
if mibBuilder.loadTexts: csRtPolicyUserEntry.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserEntry.setDescription('Each entry contains information about a single policy usage configuration. It represents an import-policy or export-policy statement for a ptotocol.')
csRtPolicyUserType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("rip", 2), ("ospf", 3), ("isis", 4), ("bgpPeer", 5), ("bgpGroup", 6), ("vpnVrf", 7), ("vpnVrm", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserType.setDescription('The route policy user type. It is the protocol configuration element using the import/export policy.')
csRtPolicyUserIndexValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('0'))
if mibBuilder.loadTexts: csRtPolicyUserIndexValue.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserIndexValue.setDescription('The value field is specific to each protocol user. Most protocols will be using this field. The encoding of this attruibute for protocols using it is specified below. It should be specified as defined below for the following csRtPolicyUserType values: RIP : not used OSPF : not used ISIS : not used BGP-PEER: 7-15 char ipaddress dotted-decimal string (BGPNbrAddress) BGP-GROUP: 1-32 byte peer-group name (BGPGroupName) VPN-VRF: not used VPN-VRM: not used ')
csRtPolicyUserPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("import", 2), ("export", 3), ("vpnAccess", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserPolicyType.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserPolicyType.setDescription('The type of policy: import: import route policy export: export route policy vpn-access: Access policy used by a bGP-peer when a Customer VR requests a join operation.')
csRtPolicyUserPolicyString = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserPolicyString.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserPolicyString.setDescription('The list of policy names. Policies are evaluated in the order of thier apperiance in the list. This string could be a logical expression of polices if supported.')
csRtPolicyUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRtPolicyUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRtPolicyUserRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csRtgPolicyEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRtgPolicyEnd.setStatus('current')
if mibBuilder.loadTexts: csRtgPolicyEnd.setDescription('End of this group. value undefined')
csOrionPingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1), )
if mibBuilder.loadTexts: csOrionPingCtlTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlTable.setDescription('Defines the ping Control Table for provide, via SNMP, the capability of performing ping operations at a remote host. The results of these operations are stored in the csOrionPingResultsTable.')
csOrionPingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPingCtlTestName"))
if mibBuilder.loadTexts: csOrionPingCtlEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlEntry.setDescription('Defines an entry in the csOrionPingCtlTable. The 3rd index, csOrionPingCtlTestName, must have the following format when used for Tunnel Keepalives: TUNNEL vi-id.')
csOrionPingCtlTestName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionPingCtlTestName.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlTestName.setDescription('The name of the ping test. This is locally unique, within the scope of a Virtual Router. This must have the following format when used for Tunnel Keepalives: TUNNEL vi-id')
csOrionPingCtlTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTargetAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlTargetAddress.setDescription('Specifies the host address to be used at a remote host for performing a ping operation. A value for this object MUST be set prior to transitioning its corresponding csOrionPingCtlEntry to active(1) via csOrionPingCtlRowStatus.')
csOrionPingCtlTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTimeOut.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlTimeOut.setDescription('Specifies the time-out value, in seconds, for a remote ping operation.')
csOrionPingCtlProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlProbeCount.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlProbeCount.setDescription('Specifies the number of times to perform a ping operation at a remote host.')
csOrionPingCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlAdminStatus.setDescription('Reflects the desired state that a csOrionPingCtlEntry should be in: enabled(1) - Attempt to activate the test as defined by this csOrionPingCtlEntry. disabled(2) - Deactivate the test as defined by this csOrionPingCtlEntry. Refer to the corresponding csOrionPingResultsOperStatus to determine the operational state of the test defined by this entry.')
csOrionPingCtlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlFrequency.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlFrequency.setDescription('The number of seconds to wait before repeating a ping test as defined by the value of the various objects in the corresponding row. A single ping test consists of a series of ping probes. The number of probes is determined by the value of the corresponding csOrionPingCtlProbeCount object. After a single test completes the number of seconds as defined by the value of csOrionPingCtlFrequency MUST elapse before the next ping test is started. A value of 0 for this object implies that the test as defined by the corresponding entry will not be repeated.')
csOrionPingCtlTrapFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTrapFilter.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlTrapFilter.setDescription('The value of this object is used to determine when a Ping Test fails. If the number of unanswered Ping requests within a test is greater that the value of this object within, then the test has failed.')
csOrionPingCtlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlRowStatus.setReference("RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: csOrionPingCtlRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlRowStatus.setDescription('This object allows entries to be created and deleted in the csOrionPingCtlTable. Deletion of an entry in this table results in all corresponding (same csOrionPingCtlTestName index values) csOrionPingResultsTable entries being deleted. A value MUST be specified for csOrionPingCtlTargetAddress prior to a transition to active(1) state being accepted. This object only supports the createAndGo method of row creation. Remove an entry in this table by setting its RowStatus object to destroy(6).')
csOrionPingCtlSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlSourceAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlSourceAddress.setDescription('Specifies the Source IP address to be used when performing a ping operation. If this object has the value 0.0.0.0, the Source IP Address will be determined automatically by the IP layer.')
csOrionPingCtlLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1600)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlLength.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlLength.setDescription('Specifies the length of the data portion of the ICMP Echo Request packet.')
csOrionPingCtlTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPingCtlTtl.setStatus('current')
if mibBuilder.loadTexts: csOrionPingCtlTtl.setDescription('Specifies the Time-To-Live value used in the IP Header when performing a ping operation. Note, if this object has the value 0, the IP layer will set the TTL value to its default.')
csOrionPingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2), )
if mibBuilder.loadTexts: csOrionPingResultsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsTable.setDescription('Defines the Ping Results Table for providing the capability of performing ping operations at a remote host. The results of these operations are stored in the csOrionPingResultsTable and the pingPastProbeTable. An entry is added to the csOrionPingResultsTable when an csOrionPingCtlEntry is started by successful transition of its csOrionPingCtlAdminStatus object to enabled(1). An entry is removed from the csOrionPingResultsTable when its corresponding csOrionPingCtlEntry is deleted.')
csOrionPingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPingCtlTestName"))
if mibBuilder.loadTexts: csOrionPingResultsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsEntry.setDescription('Defines an entry in the csOrionPingResultsTable. The csOrionPingResultsTable has the same indexing as the csOrionPingCtlTable in order for a csOrionPingResultsEntry to correspond to the csOrionPingCtlEntry that caused it to be created.')
csOrionPingResultsIpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsIpTargetAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsIpTargetAddress.setDescription('This objects reports the IP address associated with a csOrionPingCtlTargetAddress.')
csOrionPingResultsMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsMinRtt.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsMinRtt.setDescription('The minimum ping round-trip-time (RTT) received.')
csOrionPingResultsMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsMaxRtt.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsMaxRtt.setDescription('The maximum ping round-trip-time (RTT) received.')
csOrionPingResultsAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsAverageRtt.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsAverageRtt.setDescription('The current average ping round-trip-time (RTT).')
csOrionPingResultsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsProbeResponses.setDescription('Number of responses received for the corresponding csOrionPingCtlEntry and csOrionPingResultsEntry. The value of this object MUST be reported as 0 when no probe responses have been received.')
csOrionPingResultsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsSentProbes.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsSentProbes.setDescription('The value of this object reflects the number of probes sent for the corresponding csOrionPingCtlEntry and csOrionPingResultsEntry. The value of this object MUST be reported as 0 when no probes have been sent.')
csOrionPingResultsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsErrors.setDescription('The value of this object reflects the number of times errors were encountered while attempting to send a probe.')
csOrionPingResultsTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsTimeOuts.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsTimeOuts.setDescription('The value of this object reflects the number of times a probe was sent and more than csOrionPingCtlTimeOut seconds was spent waiting for the response.')
csOrionPingResultsLates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsLates.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsLates.setDescription("The value of this object reflects the number of times a probe was sent and a response was received more than csOrionPingCtlTimeOut seconds later. Note, responses that are marked 'late' are not reflected in the csOrionPingCtlTimeOut counter.")
csOrionPingResultsUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsUnreachables.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsUnreachables.setDescription('The value of this object reflects the number of times a probe was sent and an ICMP Destination Unreachable message was received.')
csOrionPingResultsCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("successful", 1), ("failed", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingResultsCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPingResultsCurrentStatus.setDescription('This object has the results of the most recently completed ping test. If no test has yet been completed, this object will have the value: unknown(1).')
csOrionPingEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPingEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionPingEnd.setDescription('End of this group. value undefined')
csOrionTraceRouteReqTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1), )
if mibBuilder.loadTexts: csOrionTraceRouteReqTable.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqTable.setDescription('Trace Route Request Table.')
csOrionTraceRouteReqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTraceRouteReqIndex"))
if mibBuilder.loadTexts: csOrionTraceRouteReqEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqEntry.setDescription('An entry of Trace Route Request Table.')
csOrionTraceRouteReqIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionTraceRouteReqIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqIndex.setDescription('This object identifies a specific Trace Route request entry. NMSs are expected to come up with a unique ID each request. This ID will also be used to index the Trace Route result entry.')
csOrionTraceRouteReqDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqDestAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqDestAddr.setDescription('The destination host for the Trace Route operation. Must be set for request to be processed.')
csOrionTraceRouteReqHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqHops.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqHops.setDescription('Maximum number of hops to reach destination host.')
csOrionTraceRouteReqSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqSrcAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqSrcAddr.setDescription('The source host for the Trace Route operation.')
csOrionTraceRouteReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("opInProgress", 2), ("opSuccess", 3), ("opFailed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteReqStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqStatus.setDescription('This object is used to store the status of the Trace Route request. operation. The csOrionTraceRouteResultTable should only be evaluated after this object yields opSuccess(3).')
csOrionTraceRouteReqRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTraceRouteReqRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteReqRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csOrionTraceRouteResultTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2), )
if mibBuilder.loadTexts: csOrionTraceRouteResultTable.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultTable.setDescription('Trace Route Result Table. The object csOrionTraceRouteReqStatus should be evaluated before obtaing the results from this table.')
csOrionTraceRouteResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTraceRouteResultIndex"), (0, "COSINE-ORION-MIB", "csOrionTraceRouteResultHopNum"))
if mibBuilder.loadTexts: csOrionTraceRouteResultEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultEntry.setDescription("An entry of Trace Route Result Table. Each hop taken during the trace route operation corresponds to an entry in csOrionTraceRouteResultEntry. Additional 'getnext' is expected to obtain the succeeding hops. We will add objects in this table as we expose more trace route info.")
csOrionTraceRouteResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionTraceRouteResultIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultIndex.setDescription('This object identifies a specific File System result entry. This index corresponds to the ID provided by NMSs on File System request.')
csOrionTraceRouteResultHopNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultHopNum.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultHopNum.setDescription('Hop number for this result.')
csOrionTraceRouteResultRtt1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt1.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt1.setDescription('This is the round trip time for the 1st probe on this hop.')
csOrionTraceRouteResultRtt2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt2.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt2.setDescription('This is the round trip time for the 2nd probe on this hop.')
csOrionTraceRouteResultRtt3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt3.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultRtt3.setDescription('This is the round trip time for the 3rd probe on this hop.')
csOrionTraceRouteResultHopAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultHopAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultHopAddr.setDescription('The host address of this hop.')
csOrionTraceRouteResultMplsLabelStackInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteResultMplsLabelStackInfo.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteResultMplsLabelStackInfo.setDescription('Returns mpls label stack information that was encoded in the icmp error message. The values returned in this string are formatted to include mpls-label, exp-bits, s-bit, and ttl values for the entire label stack. If the router generating icmp message does not support icmp extensions for mpls, then this string will not contain any information (null string)')
csOrionTraceRouteEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTraceRouteEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionTraceRouteEnd.setDescription('End of this group. value undefined')
csOrionVIfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1), )
if mibBuilder.loadTexts: csOrionVIfaceTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfaceTable.setDescription('A list of Virtual Interfaces, configured for the Virtual Router.')
csOrionVIfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionVIfaceEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfaceEntry.setDescription('An entry containing management information applicable to a particular virtual router, configured for the VPN.')
csOrionVIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfIndex.setDescription('A unique value, greater than zero, for each VPN Virtual Interface. ')
csOrionVIfRemoteEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('DISCONNECTED')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRemoteEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfRemoteEnd.setDescription("This object is used to identify the entity to which this Virtual Interface maps. That is, the remote end of this Virtual Interface. The format used for this ascii-string valued object is as follows: 'V|L VPNID|SlotID/VRID|PortID/VIID|LLID' Where 'V' indicates the other end of this Virtual Interface is another Virtual Interface. 'L' indicates this Virtual Interface maps to a Logical Link. 'VPNID' is a Virtual Private Network ID. 'SlotID' identifies a specific slot on the Orion Box. 'VRID' is a Virtual Router ID for the VPN specified by VPNID. 'PortID' identifies a specific Port on the blade installed in the previously identified slot. 'VIID' is a Virtual Interface on the VR identified by VRID. 'LLID' is a Logical Link ID on PortID. For example, if this Virtual Interface maps to another Virtual Interface (VI number 1 on VR 1.2.3.4 on VPN 4), this object might be set to this value: 'V 4/1.2.3.4/1' If this Virtual Interface maps to Logical Link 100 on Port 2 of Slot 2, this object might be set to this value: 'L 2/2:100' If this Virtual Interface has not been mapped, this object will have the value 'DISCONNECTED'.")
csOrionVIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfIpAddress.setDescription('The primary IP Address assigned to this Virtual Interface')
csOrionVIfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfIpMask.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfIpMask.setDescription('The primary IP Address Mask assigned to this Virtual Interface')
csOrionVIfBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfBcastAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on this Virtual Interface. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
csOrionVIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 4470)).clone(1500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfMtu.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
csOrionVIfFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("frameRelay", 1), ("ppp", 2), ("ipSec", 3), ("ethernet", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfFrameType.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfFrameType.setDescription('The frame type used on this Virtual Interface.')
csOrionVIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("public", 1), ("private", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfType.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfType.setDescription('This indicates whether this Virtual Interface is of type public or private.')
csOrionVIfSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 11), Gauge32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfSpeed.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. If the remote end of this Virtual Interface is a Logical Link, the speed is based on the Logical Link's speed and does not need to be configured. If the remote end is another Virtual Interface, the speed is based on SLA agreements and needs to be configured. NOTE: This object is currently not supported and will always contain the value 0.")
csOrionVIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfLastChange.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
csOrionVIfCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfCryptoMapName.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfCryptoMapName.setDescription('A Crypto Map name for the Virtual Interface.')
csOrionVIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfRowStatus.setDescription('A row status type for the Virtual Interface.')
csOrionVIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfOperStatus.setDescription('A operational status for the Virtual Iface.')
csOrionVIfRateLimitNumBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitNumBytes.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVIfRateLimitNumBytes.setDescription("The number of bytes that may be forwarded on this interface in the interval specified by 'csOrionVIfRateLimitInterval'. A value of 0 indicates that no rate-limiting is done. When this field is specified, 'csOrionVIfRateLimit- Interval' must also be specified.")
csOrionVIfRateLimitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitInterval.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVIfRateLimitInterval.setDescription("The interval, in milliseconds, over which the number of bytes forwared over this interface is measured when rate-limiting is being done. The rate-limit interval is always a multiple of 10. This field has no meaning when 'csOrionVIfRate LimitNumBytes' is '0'. When 'csOrionVIfRateLimit- NumBytes' is specified, this field must also be specified.")
csOrionVIfRateLimitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitRate.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfRateLimitRate.setDescription('Long term data throughput, in bytes per second, that the VI commits to support under normal network conditions.')
csOrionVIfRateLimitBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRateLimitBurstSize.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfRateLimitBurstSize.setDescription('The largest burst of data above the commited rate that will be allowed temporarily by the VI, even if it exceeds the maximum rate. This amount of traffic will be allowed only temporarily; on average, the traffice source need to be within the committed rate.')
csOrionVIfRemIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRemIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfRemIpAddress.setDescription('The remote IP Address assigned to this Virtual Interface')
csOrionVIfRemIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("configured", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVIfRemIpAddressType.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfRemIpAddressType.setDescription('If value is configured, it means csOrionVIfRemIpAddress is configured , else, it is dynamically learned.')
csOrionVIfMtuOperational = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVIfMtuOperational.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfMtuOperational.setDescription('Operational size of the largest datagram which can be sent/received on the interface, specified in octets.')
csOrionViStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2), )
if mibBuilder.loadTexts: csOrionViStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsTable.setDescription('A list of Virtual Interfaces Statistics')
csOrionViStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionViStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsEntry.setDescription('A Set of statistics for a single Virtual Interface.')
csOrionViStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
csOrionViStatsInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
csOrionViStatsInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsInNUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a non-unicast address at this sub-layer.')
csOrionViStatsInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInDiscards.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
csOrionViStatsInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
csOrionViStatsInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
csOrionViStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
csOrionViStatsOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
csOrionViStatsOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a non-unicast address at this sub-layer, including those that were discarded or not sent.')
csOrionViStatsOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutDiscards.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
csOrionViStatsOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsOutErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
csOrionViStatsRateLimitTxBytesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxBytesSubmitted.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxBytesSubmitted.setDescription('When rate limiting is enabled, the number of transmit bytes submitted...')
csOrionViStatsRateLimitTxPktsSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxPktsSubmitted.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxPktsSubmitted.setDescription('When rate limiting is enabled, the number of transmit packets submitted...')
csOrionViStatsRateLimitTxBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxBytesDropped.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxBytesDropped.setDescription('When rate limiting is enabled, the number of transmit bytes dropped...')
csOrionViStatsRateLimitTxPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxPktsDropped.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitTxPktsDropped.setDescription('When rate limiting is enabled, the number of transmit packets dropped...')
csOrionViStatsRateLimitRxBytesSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxBytesSubmitted.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxBytesSubmitted.setDescription('When rate limiting is enabled, the number of receive packets submitted...')
csOrionViStatsRateLimitRxPktsSubmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxPktsSubmitted.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxPktsSubmitted.setDescription('When rate limiting is enabled, the number of receive packets submitted...')
csOrionViStatsRateLimitRxBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxBytesDropped.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxBytesDropped.setDescription('When rate limiting is enabled, the number of receive packets dropped...')
csOrionViStatsRateLimitRxPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxPktsDropped.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitRxPktsDropped.setDescription('When rate limiting is enabled, the number of receive packets dropped...')
csOrionViStatsRateLimitTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViStatsRateLimitTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: csOrionViStatsRateLimitTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the current rate-limiting measurement period.')
csOrionGreConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3), )
if mibBuilder.loadTexts: csOrionGreConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionGreConfigTable.setDescription('The GRE Tunneling configuration table.')
csOrionGreConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionGreConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionGreConfigEntry.setDescription('An entry containing configuration information applicable to a GRE Tunnel associated with this Virtual Interface.')
csOrionGreKeyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreKeyEnable.setStatus('current')
if mibBuilder.loadTexts: csOrionGreKeyEnable.setDescription('This object is used to enable/disable the GRE Key. When this object is disable, csOrionGreKey has no meaning')
csOrionGreKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreKey.setStatus('current')
if mibBuilder.loadTexts: csOrionGreKey.setDescription('The value of a key carried in the GRE header.')
csOrionGreSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreSequence.setStatus('current')
if mibBuilder.loadTexts: csOrionGreSequence.setDescription('This object is used to enable/disable the sequencing info carried in a GRE header.')
csOrionGreCheckSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreCheckSum.setStatus('current')
if mibBuilder.loadTexts: csOrionGreCheckSum.setDescription('This object is used to enable/disable the checksum mechanism for this GRE Tunnel.')
csOrionGreAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGreAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionGreAdminStatus.setDescription('This object controls whether the GRE Tunnel is to be created or not.')
csOrionGreStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4), )
if mibBuilder.loadTexts: csOrionGreStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionGreStatsTable.setDescription('The GRE Tunneling Statistics table.')
csOrionGreStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionGreStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionGreStatsEntry.setDescription('An entry containing statistics information applicable to a GRE Tunnel associated with this Virtual Interface.')
csOrionGreStatsKeyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsKeyErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionGreStatsKeyErrors.setDescription('The total number of packets with GRE Key errors received on this GRE tunnel.')
csOrionGreStatsSequenceErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsSequenceErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionGreStatsSequenceErrors.setDescription('The total number of packets with out of sequence received on this GRE tunnel.')
csOrionGreStatsUnknownProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsUnknownProto.setStatus('current')
if mibBuilder.loadTexts: csOrionGreStatsUnknownProto.setDescription('The number of packets with unknown protocols received on this GRE tunnel.')
csOrionGreStatsHeaderErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGreStatsHeaderErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionGreStatsHeaderErrors.setDescription('The total number of packets with header error received on this GRE tunnel.')
csOrionVPNVRouterIpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpStatsTable.setDescription('The table of IP related statistics for each Virtual Router.')
csOrionVPNVRouterIpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpStatsEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterIpInReceives = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInReceives.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpInReceives.setDescription('The total number of input datagrams received from interfaces, including those received in error.')
csOrionVPNVRouterIpInHdrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInHdrErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpInHdrErrors.setDescription('The number of input datagrams discarded due to errors in their IP headers, including bad checksums, version number mismatch, other format errors, time-to-live exceeded, errors discovered in processing their IP options, etc.')
csOrionVPNVRouterIpInAddrErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInAddrErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpInAddrErrors.setDescription("The number of input datagrams discarded because the IP address in their IP header's destination field was not a valid address to be received at this entity. This count includes invalid addresses (e.g., 0.0.0.0) and addresses of unsupported Classes (e.g., Class E). For entities which are not IP Gateways and therefore do not forward datagrams, this counter includes datagrams discarded because the destination address was not a local address.")
csOrionVPNVRouterIpForwDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpForwDatagrams.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpForwDatagrams.setDescription('The number of input datagrams for which this entity was not their final IP destination, as a result of which an attempt was made to find a route to forward them to that final destination. In entities which do not act as IP Gateways, this Counter32 will include only those packets which were Source-Routed via this entity, and the Source- Route option processing was successful.')
csOrionVPNVRouterIpInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpInUnknownProtos.setDescription('The number of locally-addressed datagrams received successfully but discarded because of an unknown or unsupported protocol.')
csOrionVPNVRouterIpInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInDiscards.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpInDiscards.setDescription('The number of input IP datagrams for which no problems were encountered to prevent their continued processing, but which were discarded (e.g., for lack of buffer space). Note that this counter does not include any datagrams discarded while awaiting re-assembly.')
csOrionVPNVRouterIpInDelivers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpInDelivers.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpInDelivers.setDescription('The total number of input datagrams successfully delivered to IP user-protocols (including ICMP).')
csOrionVPNVRouterIpOutRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutRequests.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutRequests.setDescription('The total number of IP datagrams which local IP user-protocols (including ICMP) supplied to IP in requests for transmission. Note that this counter does not include any datagrams counted in ipForwDatagrams.')
csOrionVPNVRouterIpOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutDiscards.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutDiscards.setDescription('The number of output IP datagrams for which no problem was encountered to prevent their transmission to their destination, but which were discarded (e.g., for lack of buffer space). Note that this counter would include datagrams counted in ipForwDatagrams if any such packets met this (discretionary) discard criterion.')
csOrionVPNVRouterIpOutNoRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutNoRoutes.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpOutNoRoutes.setDescription("The number of IP datagrams discarded because no route could be found to transmit them to their destination. Note that this counter includes any packets counted in ipForwDatagrams which meet this `no-route' criterion. Note that this includes any datagarms which a host cannot route because all of its default gateways are down.")
csOrionVPNVRouterIpReasmReqds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmReqds.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmReqds.setDescription('The number of IP fragments received which needed to be reassembled at this entity.')
csOrionVPNVRouterIpReasmOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmOKs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmOKs.setDescription('The number of IP datagrams successfully re- assembled.')
csOrionVPNVRouterIpReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmFails.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpReasmFails.setDescription('The number of failures detected by the IP re- assembly algorithm (for whatever reason: timed out, errors, etc). Note that this is not necessarily a count of discarded IP fragments since some algorithms (notably the algorithm in RFC 815) can lose track of the number of fragments by combining them as they are received.')
csOrionVPNVRouterIpFragOKs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragOKs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragOKs.setDescription('The number of IP datagrams that have been successfully fragmented at this entity.')
csOrionVPNVRouterIpFragFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragFails.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragFails.setDescription("The number of IP datagrams that have been discarded because they needed to be fragmented at this entity but could not be, e.g., because their Don't Fragment flag was set.")
csOrionVPNVRouterIpFragCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragCreates.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpFragCreates.setDescription('The number of IP datagram fragments that have been generated as a result of fragmentation at this entity.')
csOrionVPNVRouterIpAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpAddrTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAddrTable.setDescription("The table of addressing information relevant to Orion's IP addresses.")
csOrionVPNVRouterIpAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpAdEntAddr"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpAddrEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAddrEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterIpAdEntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntAddr.setDescription("The IP address to which this entry's addressing information pertains.")
csOrionVPNVRouterIpAdEntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
csOrionVPNVRouterIpAdEntNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntNetMask.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntNetMask.setDescription('The subnet mask associated with the IP address of this entry. The value of the mask is an IP address with all the network bits set to 1 and all the hosts bits set to 0.')
csOrionVPNVRouterIpAdEntBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntBcastAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntBcastAddr.setDescription('The value of the least-significant bit in the IP broadcast address used for sending datagrams on the (logical) interface associated with the IP address of this entry. For example, when the Internet standard all-ones broadcast address is used, the value will be 1. This value applies to both the subnet and network broadcasts addresses used by the entity on this (logical) interface.')
csOrionVPNVRouterIpAdEntReasmMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntReasmMaxSize.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntReasmMaxSize.setDescription('The size of the largest IP datagram which this entity can re-assemble from incoming IP fragmented datagrams received on this interface.')
csOrionVPNVRouterIpAdEntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntRowStatus.setDescription('This object is used to add a row to the IP address table.')
csOrionVPNVRouterIpAdEntOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 2, 1, 7), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpAdEntOperStatus.setDescription('This object is used to get the current operational status of this row in the IP address table.')
csOrionVPNVRouterIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteTable.setDescription("The table of addressing information relevant to Orion's IP addresses.")
csOrionVPNVRouterIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteDest"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteMask"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteTos"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpRouteNextHop"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteDest.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteDest.setDescription('The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
csOrionVPNVRouterIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMask.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the csOrionVPNVRouterIpRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the csOrionVPNVRouterIpRouteMask by determining whether the value of the correspondent csOrionVPNVRouterIpRouteDest field belong to a class-A, B, or C network, and then using one of: mask network 255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the csOrionVPNVRouterIpRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. It should be noted that all IP routing subsystems implicitly use this mechanism.')
csOrionVPNVRouterIpRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteTos.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteTos.setDescription('The policy specifier is the IP TOS Field. The encoding of IP TOS is as specified by the following convention. Zero indicates the default path if no more specific policy applies. +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30')
csOrionVPNVRouterIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 4), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteNextHop.setDescription("The IP address of the next hop of this route. (In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)")
csOrionVPNVRouterIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
csOrionVPNVRouterIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteType.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteType.setDescription('The type of route. Note that local(3) refers to a route for which the next hop is the final destination; remote(4) refers to a route for which the next hop is not the final destina- tion. Routes which do not result in traffic forwarding or rejection should not be displayed even if the implementation keeps them stored internally. reject (2) refers to a route which, if matched, discards the message as unreachable. This is used in some protocols as a means of correctly aggregating routes.')
csOrionVPNVRouterIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("other", 1), ("local", 2), ("netmgmt", 3), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteProto.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
csOrionVPNVRouterIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteAge.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteAge.setDescription("The number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
csOrionVPNVRouterIpRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 9), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteInfo.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol which is responsible for this route, as determined by the value specified in the route's csOrionVPNVRouterIpRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntatically valid object identifier, and any conformant implementation of ASN.1 and BER must be able to generate and recognize this value.")
csOrionVPNVRouterIpRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteNextHopAS.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteNextHopAS.setDescription("The Autonomous System Number of the Next Hop. The semantics of this object are determined by the routing-protocol specified in the route's ipCidrRouteProto value. When this object is unknown or not relevant its value should be set to zero.")
csOrionVPNVRouterIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterIpRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterIpRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric3.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterIpRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric4.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterIpRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric5.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterIpRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteRowStatus.setDescription('A row status type for the VPN Virtual Router.')
csOrionVPNVRouterIpRouteOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 3, 1, 17), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpRouteOperStatus.setDescription('A operational status for the Virtual Router of the VPN.')
csOrionVPNVRouterIpNetToMediaTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4), )
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaTable.setDescription("The table of addressing information relevant to Orion's IP addresses.")
csOrionVPNVRouterIpNetToMediaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpNetToMediaIfIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIpNetToMediaNetAddress"))
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterIpNetToMediaIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaIfIndex.setDescription("The interface on which this entry's equivalence is effective. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.")
csOrionVPNVRouterIpNetToMediaPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 2), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaPhysAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaPhysAddress.setDescription("The media-dependent `physical' address.")
csOrionVPNVRouterIpNetToMediaNetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaNetAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaNetAddress.setDescription("The IpAddress corresponding to the media- dependent `physical' address.")
csOrionVPNVRouterIpNetToMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("dynamic", 3), ("static", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaType.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterIpNetToMediaType.setDescription('The type of mapping. Setting this object to the value invalid(2) has the effect of invalidating the corresponding entry in the csOrionVPNVRouterIpNetToMediaTable. That is, it effectively dissasociates the interface identified with said entry from the mapping identified with said entry. It is an implementation-specific matter as to whether the agent removes an invalidated entry from the table. Accordingly, management stations must be prepared to receive tabular information from agents that corresponds to entries not currently in use. Proper interpretation of such entries requires examination of the relevant csOrionVPNVRouterIpNetToMediaType object.')
csOrionIpLocalAddrPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5), )
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolTable.setDescription('This table contains pools of IP addresses. Clients can dynamically take addresses from a pool as they need them (and return them when finished).')
csOrionIpLocalAddrPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIpLocalAddrPoolName"))
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolEntry.setDescription('Each entry represents a single pool of IP addresses.')
csOrionIpLocalAddrPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolName.setStatus('current')
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolName.setDescription('The name of this address pool. This is used to identify a specific address pool.')
csOrionIpLocalAddrPoolStartRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolStartRange.setStatus('current')
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolStartRange.setDescription('The start of the range of IP addresses in this pool.')
csOrionIpLocalAddrPoolEndRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolEndRange.setStatus('current')
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolEndRange.setDescription('The end of the range of IP addresses in this pool.')
csOrionIpLocalAddrPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIpLocalAddrPoolRowStatus.setDescription('The RowStatus object for this table.')
csOrionIpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionIpEnd.setDescription('End of this group. value undefined')
csOrionVPNVRouterManagedIpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6), )
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteTable.setDescription("The table of addressing information relevant to Orion's managed IP addresses.")
csOrionVPNVRouterManagedIpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteOwner"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteDest"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteMask"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteTos"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteNextHop"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterManagedIpRouteIfIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteEntry.setDescription("The addressing information for one of this Orion's managed IP addresses.")
csOrionVPNVRouterManagedIpRouteOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("aggregate", 3), ("generated", 4), ("rib", 5), ("fib", 6), ("dial-ppp", 7), ("dial-ipsec", 8))))
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteOwner.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteOwner.setDescription('The owner/manager of this route. The well known route examples for managed routes are static and generated route managers which manage the routes of the respective types.')
csOrionVPNVRouterManagedIpRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteDest.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteDest.setDescription('The destination IP address of this route. An entry with a value of 0.0.0.0 is considered a default route. Multiple routes to a single destination can appear in the table, but access to such multiple entries is dependent on the table- access mechanisms defined by the network management protocol in use.')
csOrionVPNVRouterManagedIpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMask.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMask.setDescription('Indicate the mask to be logical-ANDed with the destination address before being compared to the value in the csOrionVPNVRouterManagedIpRouteDest field. For those systems that do not support arbitrary subnet masks, an agent constructs the value of the csOrionVPNVRouterManagedIpRouteMask by determining whether the value of the correspondent csOrionVPNVRouterManagedIpRouteDest field belong to a class-A, B, or C network, and then using one of: mask network 255.0.0.0 class-A 255.255.0.0 class-B 255.255.255.0 class-C If the value of the csOrionVPNVRouterManagedIpRouteDest is 0.0.0.0 (a default route), then the mask value is also 0.0.0.0. It should be noted that all IP routing subsystems implicitly use this mechanism.')
csOrionVPNVRouterManagedIpRouteTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 4), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteTos.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteTos.setDescription('The policy specifier is the IP TOS Field. The encoding of IP TOS is as specified by the following convention. Zero indicates the default path if no more specific policy applies. +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30')
csOrionVPNVRouterManagedIpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 5), IpAddress())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteNextHop.setDescription("The IP address of the next hop of this route. (In the case of a route bound to an interface which is realized via a broadcast media, the value of this field is the agent's IP address on that interface.)")
csOrionVPNVRouterManagedIpRouteIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 6), Integer32())
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteIfIndex.setDescription('The index value which uniquely identifies the local interface through which the next hop of this route should be reached. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex.')
csOrionVPNVRouterManagedIpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 1001, 1002))).clone(namedValues=NamedValues(("other", 1), ("reject", 2), ("local", 3), ("remote", 4), ("discard", 1001), ("receive", 1002)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteType.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteType.setDescription('The type of route. Note that local(3) refers to a route for which the next hop is the final destination; remote(4) refers to a route for which the next hop is not the final destina- tion. reject (2) refers to a route which, if matched, discards the message as unreachable. An ICMP unreachable message is sent to the originator of the packet. discard (1001) refers to the case where an ICMP message is not sent to the originator. These route types are used by protocols as a means of correctly aggregating routes.')
csOrionVPNVRouterManagedIpRouteProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("other", 1), ("netmgmt", 3), ("local", 2), ("icmp", 4), ("egp", 5), ("ggp", 6), ("hello", 7), ("rip", 8), ("isIs", 9), ("esIs", 10), ("ciscoIgrp", 11), ("bbnSpfIgp", 12), ("ospf", 13), ("bgp", 14), ("idpr", 15), ("ciscoEigrp", 16), ("dial-ppp", 17), ("dial-ipsec", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteProto.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteProto.setDescription('The routing mechanism via which this route was learned. Inclusion of values for gateway routing protocols is not intended to imply that hosts should support those protocols.')
csOrionVPNVRouterManagedIpRouteAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteAge.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteAge.setDescription("If the route is added to the routing table, this field indicates the number of seconds since this route was last updated or otherwise determined to be correct. Note that no semantics of `too old' can be implied except through knowledge of the routing protocol by which the route was learned.")
csOrionVPNVRouterManagedIpRouteInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 10), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteInfo.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteInfo.setDescription("A reference to MIB definitions specific to the particular routing protocol/owner which is responsi- ble for this route, as determined by the value specified in the route's ipCidrRouteProto value. If this information is not present, its value should be set to the OBJECT IDENTIFIER { 0 0 }, which is a syntactically valid object identif- ier, and any implementation conforming to ASN.1 and the Basic Encoding Rules must be able to generate and recognize this value.")
csOrionVPNVRouterManagedIpRouteNextHopAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteNextHopAS.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteNextHopAS.setDescription("The Autonomous System Number of the Next Hop. The semantics of this object are determined by the routing-protocol specified in the route's csOrionVPNVRouterManagedIpRouteProto value. When this object is unknown or not relevant its value should be set to zero.")
csOrionVPNVRouterManagedIpRouteMetric1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric1.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric1.setDescription("The primary routing metric for this route. The semantics of this metric are determined by the routing-protocol/owner specified in the route's csOrionVPNVRouterManagedIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterManagedIpRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric2.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterManagedIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterManagedIpRouteMetric3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric3.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric3.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterManagedIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterManagedIpRouteMetric4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric4.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric4.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterManagedIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterManagedIpRouteMetric5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 16), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric5.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteMetric5.setDescription("An alternate routing metric for this route. The semantics of this metric are determined by the routing-protocol specified in the route's csOrionVPNVRouterManagedIpRouteProto value. If this metric is not used, its value should be set to -1.")
csOrionVPNVRouterManagedIpRoutePreference1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 17), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRoutePreference1.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRoutePreference1.setDescription('The primary preference value for this route. The route preference value which is also referred to as the Adminstrative Distance is used for selecting a route when multiple routes from different routing protocols exist. The route with a lower preference value is preferred. Valid range is 1 through 255.')
csOrionVPNVRouterManagedIpRoutePreference2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 18), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRoutePreference2.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRoutePreference2.setDescription('The secondary preference value for this route. The route preference value which is also referred to as the Adminstrative Distance is used for selecting a route when multiple routes from different routing protocols exist. The route with a lower preference value is preferred. Valid range is 1 through 255.')
csOrionVPNVRouterManagedIpRouteColor1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 19), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteColor1.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteColor1.setDescription('The primary color value for this route. The color is used a finer grain preference value. It should be applied for route select if preference1 and preference2 values match.')
csOrionVPNVRouterManagedIpRouteColor2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteColor2.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteColor2.setDescription('The secondary color value for this route. The color is used a finer grain preference value. It should be applied for route select if preference1 and preference2 values match.')
csOrionVPNVRouterManagedIpRouteActiveOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("active", 2), ("passive", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteActiveOption.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteActiveOption.setDescription('Additional information for managed routes which is included with the route when it is installed in the routing table. unspecified (1) implies the default option for the route protocol should be used. active (2) routes are removed from the routing and forwarding table if they become inactive. passive (3) routes remain installed in the routing and forwarding tables it the route becomes inactive. They are marked with reject next-hops when they are inactive.')
csOrionVPNVRouterManagedIpRouteInstallOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("install", 2), ("no-install", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteInstallOption.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteInstallOption.setDescription('Additional information for managed routes which is included with the route when it is installed in the routing table. unspecified (1) implies the default option for the route protocol should be used. install (2) routes are eligibled to be installed into the roting and forwarding tables if selected. no-install (3) routes are not considered for selection of active routes and hence not installed in the forwarding table.')
csOrionVPNVRouterManagedIpRouteAdvertiseOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("readvertise", 2), ("no-readvertise", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteAdvertiseOption.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteAdvertiseOption.setDescription('Additional information for managed routes which is included with the route when it is installed in the routing table. unspecified (1) implies the default option for the route protocol should be used. readvertise (2) routes are eligibled to be readvertised by by other routing protocols if the route is active. no-readvertise (3) routes are not considered for readverisement by other protocols.')
csOrionVPNVRouterManagedIpRouteRetainOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unspecified", 1), ("retain", 2), ("no-retain", 3))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteRetainOption.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteRetainOption.setDescription('Additional information for managed routes which is included with the route when it is installed in the routing table. unspecified (1) implies the default option for the route protocol should be used. retain (2) routes are retained in the forwarding table if the route manager shuts down. no-retain (3) routes are removed from the routing table if the route manager shuts down.')
csOrionVPNVRouterManagedIpRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 25), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteRowStatus.setDescription('A row status type for the VPN Virtual Router.')
csOrionVPNVRouterManagedIpRouteOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 3, 6, 1, 26), OperState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteOperState.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterManagedIpRouteOperState.setDescription('The operational state of this route. The state is ON if the route is selecetd to the IP forwarding table. Otherwise, the operational state is OFF.')
class AreaID(TextualConvention, IpAddress):
    description = 'An OSPF Area Identifier.'
    status = 'current'

class RouterID(TextualConvention, IpAddress):
    description = 'A OSPF Router Identifier.'
    status = 'current'

class Metric(TextualConvention, Integer32):
    description = 'The OSPF Internal Metric.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

class BigMetric(TextualConvention, Integer32):
    description = 'The OSPF External Metric.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 16777215)

class Status(TextualConvention, Integer32):
    description = "The status of an interface: 'enabled' indicates that it is willing to communicate with other OSPF Routers, while 'disabled' indicates that it is not."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class PositiveInteger(TextualConvention, Integer32):
    description = 'A positive integer. Values in excess are precluded as unnecessary and prone to interoperability issues.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

class HelloRange(TextualConvention, Integer32):
    description = 'The range of intervals on which hello messages are exchanged.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 65535)

class UpToMaxAge(TextualConvention, Integer32):
    description = 'The values that one might find or configure for variables bounded by the maximum age of an LSA.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 3600)

class InterfaceIndex(TextualConvention, Integer32):
    description = 'The range of ifIndex.'
    status = 'current'

class DesignatedRouterPriority(TextualConvention, Integer32):
    description = 'The values defined for the priority of a system for becoming the designated router.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class TOSType(TextualConvention, Integer32):
    description = 'Type of Service is defined as a mapping to the IP Type of Service Flags as defined in the IP Forwarding Table MIB +-----+-----+-----+-----+-----+-----+-----+-----+ | | | | | PRECEDENCE | TYPE OF SERVICE | 0 | | | | | +-----+-----+-----+-----+-----+-----+-----+-----+ IP TOS IP TOS Field Policy Field Policy Contents Code Contents Code 0 0 0 0 ==> 0 0 0 0 1 ==> 2 0 0 1 0 ==> 4 0 0 1 1 ==> 6 0 1 0 0 ==> 8 0 1 0 1 ==> 10 0 1 1 0 ==> 12 0 1 1 1 ==> 14 1 0 0 0 ==> 16 1 0 0 1 ==> 18 1 0 1 0 ==> 20 1 0 1 1 ==> 22 1 1 0 0 ==> 24 1 1 0 1 ==> 26 1 1 1 0 ==> 28 1 1 1 1 ==> 30 The remaining values are left for future definition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 30)

csOspfGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1), )
if mibBuilder.loadTexts: csOspfGeneralTable.setReference('OSPF Version 2, Section 6 The Area Data Struc- ture')
if mibBuilder.loadTexts: csOspfGeneralTable.setStatus('current')
if mibBuilder.loadTexts: csOspfGeneralTable.setDescription("Information describing the configured parame- ters and cumulative statistics of the router's attached areas.")
csOspfGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOspfGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfGeneralEntry.setDescription("Information describing the configured parame- ters and cumulative statistics of one of the router's attached areas.")
csOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 1), RouterID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfRouterId.setReference('OSPF Version 2, C.1 Global parameters')
if mibBuilder.loadTexts: csOspfRouterId.setStatus('current')
if mibBuilder.loadTexts: csOspfRouterId.setDescription("A 32-bit integer uniquely identifying the router in the Autonomous System. By convention, to ensure uniqueness, this should default to the value of one of the router's IP interface addresses.")
csOspfAdminStat = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 2), Status()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAdminStat.setStatus('current')
if mibBuilder.loadTexts: csOspfAdminStat.setDescription("The administrative status of OSPF in the router. The value 'enabled' denotes that the OSPF process is active on the Virtual Router. 'disabled' disables it on all interfaces on the Virtual Router.")
csOspfVersionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVersionNumber.setReference('OSPF Version 2, Title')
if mibBuilder.loadTexts: csOspfVersionNumber.setStatus('current')
if mibBuilder.loadTexts: csOspfVersionNumber.setDescription('The current version number of the OSPF protocol is 2.')
csOspfAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaBdrRtrStatus.setReference('OSPF Version 2, Section 3 Splitting the AS into Areas')
if mibBuilder.loadTexts: csOspfAreaBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaBdrRtrStatus.setDescription('A flag to note whether this router is an area border router.')
csOspfASBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfASBdrRtrStatus.setReference('OSPF Version 2, Section 3.3 Classification of routers')
if mibBuilder.loadTexts: csOspfASBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfASBdrRtrStatus.setDescription('A flag to note whether this router is config- ured as an Autonomous System border router.')
csOspfExternLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExternLsaCount.setReference('OSPF Version 2, Appendix A.4.5 AS external link advertisements')
if mibBuilder.loadTexts: csOspfExternLsaCount.setStatus('current')
if mibBuilder.loadTexts: csOspfExternLsaCount.setDescription('The number of external (LS type 5) link-state advertisements in the link-state database.')
csOspfExternLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExternLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: csOspfExternLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of the external link-state advertisements con- tained in the link-state database. This sum can be used to determine if there has been a change in a router's link state database, and to compare the link-state database of two routers.")
csOspfTOSSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfTOSSupport.setReference('OSPF Version 2, Appendix F.1.2 Optional TOS support')
if mibBuilder.loadTexts: csOspfTOSSupport.setStatus('current')
if mibBuilder.loadTexts: csOspfTOSSupport.setDescription("The router's support for type-of-service rout- ing.")
csOspfOriginateNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfOriginateNewLsas.setStatus('current')
if mibBuilder.loadTexts: csOspfOriginateNewLsas.setDescription('The number of new link-state advertisements that have been originated. This number is in- cremented each time the router originates a new LSA.')
csOspfRxNewLsas = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfRxNewLsas.setStatus('current')
if mibBuilder.loadTexts: csOspfRxNewLsas.setDescription('The number of link-state advertisements re- ceived determined to be new instantiations. This number does not include newer instantia- tions of self-originated link-state advertise- ments.')
csOspfExtLsdbLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfExtLsdbLimit.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbLimit.setDescription("The maximum number of non-default AS- external-LSAs entries that can be stored in the link-state database. If the value is -1, then there is no limit. When the number of non-default AS-external-LSAs in a router's link-state database reaches csOspfExtLsdbLimit, the router enters Overflow- State. The router never holds more than csOspfExtLsdbLimit non-default AS-external-LSAs in its database. csOspfExtLsdbLimit MUST be set identically in all routers attached to the OSPF backbone and/or any regular OSPF area. (i.e., OSPF stub areas and NSSAs are excluded).")
csOspfMulticastExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfMulticastExtensions.setStatus('current')
if mibBuilder.loadTexts: csOspfMulticastExtensions.setDescription("A Bit Mask indicating whether the router is forwarding IP multicast (Class D) datagrams based on the algorithms defined in the Multi- cast Extensions to OSPF. Bit 0, if set, indicates that the router can forward IP multicast datagrams in the router's directly attached areas (called intra-area mul- ticast routing). Bit 1, if set, indicates that the router can forward IP multicast datagrams between OSPF areas (called inter-area multicast routing). Bit 2, if set, indicates that the router can forward IP multicast datagrams between Auto- nomous Systems (called inter-AS multicast rout- ing). Only certain combinations of bit settings are allowed, namely: 0 (no multicast forwarding is enabled), 1 (intra-area multicasting only), 3 (intra-area and inter-area multicasting), 5 (intra-area and inter-AS multicasting) and 7 (multicasting everywhere). By default, no mul- ticast forwarding is enabled.")
csOspfExitOverflowInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 13), PositiveInteger()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfExitOverflowInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfExitOverflowInterval.setDescription('The number of seconds that, after entering OverflowState, a router will attempt to leave OverflowState. This allows the router to again originate non-default AS-external-LSAs. When set to 0, the router will not leave Overflow- State until restarted.')
csOspfDemandExtensions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfDemandExtensions.setReference('OSPF Version 2, Appendix on Demand Routing')
if mibBuilder.loadTexts: csOspfDemandExtensions.setStatus('current')
if mibBuilder.loadTexts: csOspfDemandExtensions.setDescription("The router's support for demand routing.")
csOspfGeneralEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfGeneralEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfGeneralEntryRowStatus.setDescription('A row status type for the OSPF General Table.')
csOspfSpfDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfSpfDelay.setStatus('current')
if mibBuilder.loadTexts: csOspfSpfDelay.setDescription('The time delay between an OSPF topology change and an SPF calculation.')
csOspfSpfHold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfSpfHold.setStatus('current')
if mibBuilder.loadTexts: csOspfSpfHold.setDescription('The time between two consecutive SPF calculations.')
csOspfRefBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfRefBw.setStatus('current')
if mibBuilder.loadTexts: csOspfRefBw.setDescription('The reference bandwidth used to calculate the default interface metric.')
csOspfPrefInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfPrefInt.setStatus('current')
if mibBuilder.loadTexts: csOspfPrefInt.setDescription('The route preference given to a route internal to an Autonomous System.')
csOspfPrefExt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfPrefExt.setStatus('current')
if mibBuilder.loadTexts: csOspfPrefExt.setDescription('The route preference given to a route external to an Autonomous System.')
csOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2), )
if mibBuilder.loadTexts: csOspfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data Structure')
if mibBuilder.loadTexts: csOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaTable.setDescription("Information describing the configured parame- ters of the router's attached areas.")
csOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfAreaId"))
if mibBuilder.loadTexts: csOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaEntry.setDescription("Information describing the configured parame- ters and cumulative statistics of one of the router's attached areas.")
csOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 1), AreaID())
if mibBuilder.loadTexts: csOspfAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0.0.0.0 is used for the OSPF backbone.')
csOspfAreaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaName.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaName.setDescription('A descriptive name for this area.')
csOspfImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfImportAsExtern.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfImportAsExtern.setStatus('current')
if mibBuilder.loadTexts: csOspfImportAsExtern.setDescription("The area's support for importing AS external link- state advertisements.")
csOspfSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfSpfRuns.setStatus('current')
if mibBuilder.loadTexts: csOspfSpfRuns.setDescription("The number of times that the intra-area route table has been calculated using this area's link-state database. This is typically done using Dijkstra's algorithm.")
csOspfAreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaBdrRtrCount.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaBdrRtrCount.setDescription('The total number of area border routers reach- able within this area. This is initially zero, and is calculated in each SPF Pass.')
csOspfAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAsBdrRtrCount.setStatus('current')
if mibBuilder.loadTexts: csOspfAsBdrRtrCount.setDescription('The total number of Autonomous System border routers reachable within this area. This is initially zero, and is calculated in each SPF Pass.')
csOspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaLsaCount.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaLsaCount.setDescription("The total number of link-state advertisements in this area's link-state database, excluding AS External LSA's.")
csOspfAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaLsaCksumSum.setDescription("The 32-bit unsigned sum of the link-state ad- vertisements' LS checksums contained in this area's link-state database. This sum excludes external (LS type 5) link-state advertisements. The sum can be used to determine if there has been a change in a router's link state data- base, and to compare the link-state database of two routers.")
csOspfAreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2))).clone('noAreaSummary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaSummary.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaSummary.setDescription('The variable csOspfAreaSummary controls the im- port of summary LSAs into stub areas. It has no effect on other areas. If it is noAreaSummary, the router will neither originate nor propagate summary LSAs into the stub area. It will rely entirely on its de- fault route. If it is sendAreaSummary, the router will both summarize and propagate summary LSAs.')
csOspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simplePassword", 1), ("md5", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: csOspfAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAuthType.setDescription('The authentication type specified for this area.')
csOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaRowStatus.setDescription('A row status type for the OSPF Area Table.')
csOspfAreaOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 2, 1, 12), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAreaOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaOperStatus.setDescription('A operational status for the OSPF Area Table.')
csOspfStubAreaTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3), )
if mibBuilder.loadTexts: csOspfStubAreaTable.setReference('OSPF Version 2, Appendix C.2, Area Parameters')
if mibBuilder.loadTexts: csOspfStubAreaTable.setStatus('current')
if mibBuilder.loadTexts: csOspfStubAreaTable.setDescription('The set of metrics that will be advertised by a default Area Border Router into a stub area.')
csOspfStubAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfStubAreaId"), (0, "COSINE-ORION-MIB", "csOspfStubTOS"))
if mibBuilder.loadTexts: csOspfStubAreaEntry.setReference('OSPF Version 2, Appendix C.2, Area Parameters')
if mibBuilder.loadTexts: csOspfStubAreaEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfStubAreaEntry.setDescription('The metric for a given Type of Service that will be advertised by a default Area Border Router into a stub area.')
csOspfStubAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 1), AreaID())
if mibBuilder.loadTexts: csOspfStubAreaId.setStatus('current')
if mibBuilder.loadTexts: csOspfStubAreaId.setDescription('The 32 bit identifier for the Stub Area. On creation, this can be derived from the in- stance.')
csOspfStubTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 2), TOSType())
if mibBuilder.loadTexts: csOspfStubTOS.setStatus('current')
if mibBuilder.loadTexts: csOspfStubTOS.setDescription('The Type of Service associated with the metric. On creation, this can be derived from the instance.')
csOspfStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 3), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfStubMetric.setStatus('current')
if mibBuilder.loadTexts: csOspfStubMetric.setDescription('The metric value applied at the indicated type of service. By default, this equals the least metric at the type of service among the inter- faces to other areas.')
csOspfStubStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfStubStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfStubStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfStubMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ospfMetric", 1), ("comparableCost", 2), ("nonComparable", 3))).clone('ospfMetric')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfStubMetricType.setStatus('current')
if mibBuilder.loadTexts: csOspfStubMetricType.setDescription('This variable displays the type of metric ad- vertised as a default route.')
csOspfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4), )
if mibBuilder.loadTexts: csOspfLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: csOspfLsdbTable.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbTable.setDescription("The OSPF Process's Link State Database.")
csOspfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfLsdbAreaId"), (0, "COSINE-ORION-MIB", "csOspfLsdbType"), (0, "COSINE-ORION-MIB", "csOspfLsdbLsid"), (0, "COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOspfLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbEntry.setDescription('A single Link State Advertisement.')
csOspfLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbAreaId.setDescription('The 32 bit identifier of the Area from which the LSA was received.')
csOspfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("routerLink", 1), ("networkLink", 2), ("summaryLink", 3), ("asSummaryLink", 4), ("asExternalLink", 5), ("multicastLink", 6), ("nssaExternalLink", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: csOspfLsdbType.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
csOspfLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: csOspfLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
csOspfLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: csOspfLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
csOspfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: csOspfLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
csOspfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: csOspfLsdbAge.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
csOspfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: csOspfLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
csOspfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: csOspfLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: csOspfLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
csOspfHostTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5), )
if mibBuilder.loadTexts: csOspfHostTable.setReference('OSPF Version 2, Appendix C.6 Host route param- eters')
if mibBuilder.loadTexts: csOspfHostTable.setStatus('current')
if mibBuilder.loadTexts: csOspfHostTable.setDescription('The list of Hosts, and their metrics, that the router will advertise as host routes.')
csOspfHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfHostIpAddress"), (0, "COSINE-ORION-MIB", "csOspfHostTOS"))
if mibBuilder.loadTexts: csOspfHostEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfHostEntry.setDescription('A metric to be advertised, for a given type of service, when a given host is reachable.')
csOspfHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOspfHostIpAddress.setReference('OSPF Version 2, Appendix C.6 Host route parame- ters')
if mibBuilder.loadTexts: csOspfHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOspfHostIpAddress.setDescription('The IP Address of the Host.')
csOspfHostTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 2), TOSType())
if mibBuilder.loadTexts: csOspfHostTOS.setReference('OSPF Version 2, Appendix C.6 Host route parame- ters')
if mibBuilder.loadTexts: csOspfHostTOS.setStatus('current')
if mibBuilder.loadTexts: csOspfHostTOS.setDescription('The Type of Service of the route being config- ured.')
csOspfHostMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 3), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfHostMetric.setReference('OSPF Version 2, Appendix C.6 Host route parame- ters')
if mibBuilder.loadTexts: csOspfHostMetric.setStatus('current')
if mibBuilder.loadTexts: csOspfHostMetric.setDescription('The Metric to be advertised.')
csOspfHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfHostStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfHostStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfHostAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 5, 1, 5), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfHostAreaID.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfHostAreaID.setStatus('current')
if mibBuilder.loadTexts: csOspfHostAreaID.setDescription('The Area the Host Entry is to be found within. By default, the area that a subsuming OSPF in- terface is in, or 0.0.0.0')
csOspfIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6), )
if mibBuilder.loadTexts: csOspfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: csOspfIfTable.setStatus('current')
if mibBuilder.loadTexts: csOspfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF.')
csOspfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfIfIpAddress"), (0, "COSINE-ORION-MIB", "csOspfAddressLessIf"))
if mibBuilder.loadTexts: csOspfIfEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF.')
csOspfIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOspfIfIpAddress.setDescription('The IP address of this OSPF interface.')
csOspfAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: csOspfAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the corresponding value of ifIndex for interfaces having no IP Address.')
csOspfIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 3), AreaID().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAreaId.setStatus('current')
if mibBuilder.loadTexts: csOspfIfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0.0.0.0 is used for the OSPF backbone.')
csOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 6))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5), ("loopback", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfType.setStatus('current')
if mibBuilder.loadTexts: csOspfIfType.setDescription("The OSPF interface type. By way of a default, this field may be intuited from the corresponding value of ifType. Broad- cast LANs, such as Ethernet and IEEE 802.5, take the value 'broadcast', X.25 and similar technologies take the value 'nbma', and links that are definitively point to point take the value 'pointToPoint'.")
csOspfIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfIfAdminStatus.setDescription("The OSPF interface's administrative status. The value formed on the interface, and the in- terface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPF.")
csOspfIfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: csOspfIfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligi- ble to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
csOspfIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 7), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: csOspfIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface.')
csOspfIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 8), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets.')
csOspfIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 9), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the routers within this area send on the interface. This value must be the same for all routers attached to a common network.')
csOspfIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 10), PositiveInteger().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
csOspfIfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 11), PositiveInteger().clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfPollInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfIfPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an inactive non- broadcast multi- access neighbor.')
csOspfIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfState.setStatus('current')
if mibBuilder.loadTexts: csOspfIfState.setDescription('The OSPF Interface State.')
csOspfIfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 13), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: csOspfIfDesignatedRouter.setDescription('The IP Address of the Designated Router.')
csOspfIfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 14), IpAddress().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: csOspfIfBackupDesignatedRouter.setDescription('The IP Address of the Backup Designated Router.')
csOspfIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfIfEvents.setStatus('current')
if mibBuilder.loadTexts: csOspfIfEvents.setDescription('The number of times this OSPF interface has changed its state, or an error has occurred.')
csOspfIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("simplePassword", 1), ("md5", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: csOspfIfAuthType.setStatus('current')
if mibBuilder.loadTexts: csOspfIfAuthType.setDescription('The authentication type specified for this area.')
csOspfIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: csOspfIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: csOspfIfAuthKey.setDescription("The Authentication Key. If the Area's Author- ization Type is simplePassword, and the key length is shorter than 8 octets, the agent will left adjust and zero fill to 8 octets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment. When read, csOspfIfAuthKey always returns an Oc- tet String of length zero.")
csOspfIfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMulticastForwarding.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMulticastForwarding.setDescription('The way multicasts should forwarded on this interface; not forwarded, forwarded as data link multicasts, or forwarded as data link uni- casts. Data link multicasting is not meaning- ful on point to point and NBMA interfaces, and setting csOspfMulticastForwarding to 0 effective- ly disables all multicast forwarding.')
csOspfIfDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfDemand.setStatus('current')
if mibBuilder.loadTexts: csOspfIfDemand.setDescription('Indicates whether Demand OSPF procedures (hel- lo supression to FULL neighbors and setting the DoNotAge flag on proogated LSAs) should be per- formed on this interface.')
csOspfIfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 20), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMetric.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetric.setDescription('The metric of using this type of service on this interface. The default value of the TOS 0 Metric is 10^8 / ifSpeed. Note: this is added for the support of TOS 0 Metric value, It will be deprecated later when TOS is supported and the csOspfIfMetricTable is being used.')
csOspfIfAdvertiseSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfAdvertiseSubnet.setStatus('current')
if mibBuilder.loadTexts: csOspfIfAdvertiseSubnet.setDescription(' Enable/Disable advertise-subnet capability.')
csOspfIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfIfStatus.setDescription('A row status type for the OSPF Interface Table.')
csOspfIfPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 6, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfPassive.setStatus('current')
if mibBuilder.loadTexts: csOspfIfPassive.setDescription('Indicates whether OSPF interface is passive. OSPF Hello packets not sent on this interface.')
csOspfIfMd5Table = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15), )
if mibBuilder.loadTexts: csOspfIfMd5Table.setReference('OSPF Version 2, Appendix D.3 Cryptographic authentication')
if mibBuilder.loadTexts: csOspfIfMd5Table.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMd5Table.setDescription('The OSPF Interface MD5 table contains a list of MD5 authentication structures and the corresponding MD5 authentication IDs for the inter- faces from the viewpoint of OSPF.')
csOspfIfMd5Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfIfIpAddress"), (0, "COSINE-ORION-MIB", "csOspfAddressLessIf"), (0, "COSINE-ORION-MIB", "csOspfIfMd5MessageDigestKeyId"))
if mibBuilder.loadTexts: csOspfIfMd5Entry.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMd5Entry.setDescription('The OSPF Interface Entry contains the MD5 authentication structure corresponding to one inter-face from the viewpoint of OSPF.')
csOspfIfMd5MessageDigestKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1, 1), Integer32())
if mibBuilder.loadTexts: csOspfIfMd5MessageDigestKeyId.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMd5MessageDigestKeyId.setDescription('Message-digest authentication key. A shared secret key that is configured on all routers to specify the decryption algorithm to be used.')
csOspfIfMd5Key = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMd5Key.setReference('OSPF Version 2, Section D.3 Cryptographic authentication')
if mibBuilder.loadTexts: csOspfIfMd5Key.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMd5Key.setDescription('Message-digest authentication string for this interface. The string is encrypted using an algorithm specified by a shared secret key.')
csOspfIfMd5RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 15, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMd5RowStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMd5RowStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfIfMetricTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7), )
if mibBuilder.loadTexts: csOspfIfMetricTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: csOspfIfMetricTable.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricTable.setDescription('The TOS metrics for a non-virtual interface identified by the interface index.')
csOspfIfMetricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfIfMetricIpAddress"), (0, "COSINE-ORION-MIB", "csOspfIfMetricAddressLessIf"), (0, "COSINE-ORION-MIB", "csOspfIfMetricTOS"))
if mibBuilder.loadTexts: csOspfIfMetricEntry.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: csOspfIfMetricEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricEntry.setDescription('A particular TOS metric for a non-virtual in- terface identified by the interface index.')
csOspfIfMetricIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOspfIfMetricIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricIpAddress.setDescription('The IP address of this OSPF interface. On row creation, this can be derived from the in- stance.')
csOspfIfMetricAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: csOspfIfMetricAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricAddressLessIf.setDescription('For the purpose of easing the instancing of addressed and addressless interfaces; This variable takes the value 0 on interfaces with IP Addresses, and the value of ifIndex for in- terfaces having no IP Address. On row crea- tion, this can be derived from the instance.')
csOspfIfMetricTOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 3), TOSType())
if mibBuilder.loadTexts: csOspfIfMetricTOS.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricTOS.setDescription('The type of service metric being referenced. On row creation, this can be derived from the instance.')
csOspfIfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 4), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMetricValue.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricValue.setDescription('The metric of using this type of service on this interface. The default value of the TOS 0 Metric is 10^8 / ifSpeed.')
csOspfIfMetricStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfIfMetricStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfIfMetricStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8), )
if mibBuilder.loadTexts: csOspfVirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: csOspfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfTable.setDescription("Information about this router's virtual inter- faces.")
csOspfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfVirtIfAreaId"), (0, "COSINE-ORION-MIB", "csOspfVirtIfNeighbor"))
if mibBuilder.loadTexts: csOspfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfEntry.setDescription('Information about a single Virtual Interface.')
csOspfVirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfAreaId.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
csOspfVirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfNeighbor.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
csOspfVirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 3), UpToMaxAge().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link- state update packet over this interface.')
csOspfVirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfRetransInterval.setDescription('The number of seconds between link-state ad- vertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database descrip- tion and link-state request packets. This value should be well over the expected round- trip time.')
csOspfVirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 5), HelloRange().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the in- terface. This value must be the same for the virtual neighbor.')
csOspfVirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 6), PositiveInteger().clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neigh- bors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neigh- bor.")
csOspfVirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfState.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfState.setDescription('OSPF virtual interface states.')
csOspfVirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtIfEvents.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfEvents.setDescription('The number of state changes or error events on this Virtual Link')
csOspfVirtIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfAuthType.setReference('OSPF Version 2, Appendix E Authentication')
if mibBuilder.loadTexts: csOspfVirtIfAuthType.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfAuthType.setDescription('The authentication type specified for a virtu- al interface. Additional authentication types may be assigned locally.')
csOspfVirtIfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)).clone(hexValue="0000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfAuthKey.setReference('OSPF Version 2, Section 9 The Interface Data Structure')
if mibBuilder.loadTexts: csOspfVirtIfAuthKey.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfAuthKey.setDescription('If Authentication Type is simplePassword, the device will left adjust and zero fill to 8 oc- tets. Note that unauthenticated interfaces need no authentication key, and simple password authen- tication cannot use a key of more than 8 oc- tets. Larger keys are useful only with authen- tication mechanisms not specified in this docu- ment. When read, csOspfVifAuthKey always returns a string of length zero.')
csOspfVirtIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 8, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfVirtIfStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtIfStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9), )
if mibBuilder.loadTexts: csOspfNbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: csOspfNbrTable.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrTable.setDescription('A table of non-virtual neighbor information.')
csOspfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfNbrIpAddr"), (0, "COSINE-ORION-MIB", "csOspfNbrAddressLessIndex"))
if mibBuilder.loadTexts: csOspfNbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: csOspfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrEntry.setDescription('The information regarding a single neighbor.')
csOspfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrIpAddr.setDescription("The IP address this neighbor is using in its IP Source Address. Note that, on addressless links, this will not be 0.0.0.0, but the ad- dress of another of the neighbor's interfaces.")
csOspfNbrAddressLessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrAddressLessIndex.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrAddressLessIndex.setDescription('On an interface having an IP Address, zero. On addressless interfaces, the corresponding value of ifIndex in the Internet Standard MIB. On row creation, this can be derived from the instance.')
csOspfNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 3), RouterID().clone(hexValue="00000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrRtrId.setDescription('A 32-bit integer (represented as a type IpAd- dress) uniquely identifying the neighboring router in the Autonomous System.')
csOspfNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrOptions.setReference('OSPF Version 2, Section 12.1.2 Options')
if mibBuilder.loadTexts: csOspfNbrOptions.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op- tions field. Bit 0, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 1, if set, indicates that the associated area accepts and operates on external informa- tion; if zero, it is a stub area. Bit 2, if set, indicates that the system is ca- pable of routing IP Multicast datagrams; i.e., that it implements the Multicast Extensions to OSPF. Bit 3, if set, indicates that the associated area is an NSSA. These areas are capable of carrying type 7 external advertisements, which are translated into type 5 external advertise- ments at NSSA borders.")
csOspfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 5), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfNbrPriority.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrPriority.setDescription('The priority of this neighbor in the designat- ed router election algorithm. The value 0 sig- nifies that the neighbor is not eligible to be- come the designated router on this particular network.')
csOspfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrState.setReference('OSPF Version 2, Section 10.1 Neighbor States')
if mibBuilder.loadTexts: csOspfNbrState.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrState.setDescription('The State of the relationship with this Neigh- bor.')
csOspfNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrEvents.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrEvents.setDescription('The number of times this neighbor relationship has changed state, or an error has occurred.')
csOspfNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
csOspfNbmaNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfNbmaNbrStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfNbmaNbrStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfNbmaNbrPermanence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("permanent", 2))).clone('permanent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbmaNbrPermanence.setStatus('current')
if mibBuilder.loadTexts: csOspfNbmaNbrPermanence.setDescription("This variable displays the status of the en- try. 'dynamic' and 'permanent' refer to how the neighbor became known.")
csOspfNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: csOspfNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor')
csOspfVirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10), )
if mibBuilder.loadTexts: csOspfVirtNbrTable.setReference('OSPF Version 2, Section 15 Virtual Links')
if mibBuilder.loadTexts: csOspfVirtNbrTable.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrTable.setDescription('A table of virtual neighbor information.')
csOspfVirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfVirtNbrArea"), (0, "COSINE-ORION-MIB", "csOspfVirtNbrRtrId"))
if mibBuilder.loadTexts: csOspfVirtNbrEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrEntry.setDescription('Virtual neighbor information.')
csOspfVirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 1), AreaID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrArea.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrArea.setDescription('The Transit Area Identifier.')
csOspfVirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 2), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrRtrId.setDescription('A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.')
csOspfVirtNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrIpAddr.setDescription('The IP address this Virtual Neighbor is us- ing.')
csOspfVirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrOptions.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's op- tions field. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 2, if set, indicates that the system is Network Multicast capable; ie, that it imple- ments OSPF Multicast Routing.")
csOspfVirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrState.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrState.setDescription('The state of the Virtual Neighbor Relation- ship.')
csOspfVirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrEvents.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrEvents.setDescription('The number of times this virtual link has changed its state, or an error has occurred.')
csOspfVirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
csOspfVirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 10, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfVirtNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: csOspfVirtNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor')
csOspfExtLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11), )
if mibBuilder.loadTexts: csOspfExtLsdbTable.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: csOspfExtLsdbTable.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbTable.setDescription("The OSPF Process's Links State Database.")
csOspfExtLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfExtLsdbType"), (0, "COSINE-ORION-MIB", "csOspfExtLsdbLsid"), (0, "COSINE-ORION-MIB", "csOspfExtLsdbRouterId"))
if mibBuilder.loadTexts: csOspfExtLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbEntry.setDescription('A single Link State Advertisement.')
csOspfExtLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(5))).clone(namedValues=NamedValues(("asExternalLink", 5))))
if mibBuilder.loadTexts: csOspfExtLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: csOspfExtLsdbType.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertise- ment format.')
csOspfExtLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOspfExtLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: csOspfExtLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing either a Router ID or an IP Address; it identifies the piece of the routing domain that is being described by the advertisement.')
csOspfExtLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 3), RouterID())
if mibBuilder.loadTexts: csOspfExtLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: csOspfExtLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
csOspfExtLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: csOspfExtLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and dupli- cate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
csOspfExtLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: csOspfExtLsdbAge.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbAge.setDescription('This field is the age of the link state adver- tisement in seconds.')
csOspfExtLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: csOspfExtLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connec- tionless datagrams; it is commonly referred to as the Fletcher checksum.")
csOspfExtLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(36, 36)).setFixedLength(36)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfExtLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adver- tisements')
if mibBuilder.loadTexts: csOspfExtLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: csOspfExtLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
csOspfAreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12), )
if mibBuilder.loadTexts: csOspfAreaAggregateTable.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfAreaAggregateTable.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateTable.setDescription('A range of IP addresses specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255. Note that if ranges are configured such that one range sub- sumes another range (e.g., 10.0.0.0 mask 255.0.0.0 and 10.1.0.0 mask 255.255.0.0), the most specific match is the preferred one.')
csOspfAreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateAreaID"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateLsdbType"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateNet"), (0, "COSINE-ORION-MIB", "csOspfAreaAggregateMask"))
if mibBuilder.loadTexts: csOspfAreaAggregateEntry.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfAreaAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateEntry.setDescription('A range of IP addresses specified by an IP address/IP network mask pair. For example, class B address range of X.X.X.X with a network mask of 255.255.0.0 includes all IP addresses from X.X.0.0 to X.X.255.255. Note that if ranges are range configured such that one range subsumes another range (e.g., 10.0.0.0 mask 255.0.0.0 and 10.1.0.0 mask 255.255.0.0), the most specific match is the preferred one.')
csOspfAreaAggregateAreaID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 1), AreaID())
if mibBuilder.loadTexts: csOspfAreaAggregateAreaID.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfAreaAggregateAreaID.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateAreaID.setDescription('The Area the Address Aggregate is to be found within.')
csOspfAreaAggregateLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 7))).clone(namedValues=NamedValues(("summaryLink", 3), ("nssaExternalLink", 7))))
if mibBuilder.loadTexts: csOspfAreaAggregateLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: csOspfAreaAggregateLsdbType.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateLsdbType.setDescription('The type of the Address Aggregate. This field specifies the Lsdb type that this Address Ag- gregate applies to.')
csOspfAreaAggregateNet = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOspfAreaAggregateNet.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfAreaAggregateNet.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateNet.setDescription('The IP Address of the Net or Subnet indicated by the range.')
csOspfAreaAggregateMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 4), IpAddress())
if mibBuilder.loadTexts: csOspfAreaAggregateMask.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: csOspfAreaAggregateMask.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateMask.setDescription('The Subnet Mask that pertains to the Net or Subnet.')
csOspfAreaAggregateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaAggregateStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateStatus.setDescription("This variable displays the status of the en- try. Setting it to 'invalid' has the effect of rendering it inoperative. The internal effect (row removal) is implementation dependent.")
csOspfAreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfAreaAggregateEffect.setStatus('current')
if mibBuilder.loadTexts: csOspfAreaAggregateEffect.setDescription("Subnets subsumed by ranges either trigger the advertisement of the indicated aggregate (ad- vertiseMatching), or result in the subnet's not being advertised at all outside the area.")
csOspfImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13), )
if mibBuilder.loadTexts: csOspfImpPolTable.setStatus('current')
if mibBuilder.loadTexts: csOspfImpPolTable.setDescription('A set of Import Policies (see csImpPolTable) that are applied by ospf.')
csOspfImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfImpPolId"))
if mibBuilder.loadTexts: csOspfImpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfImpPolEntry.setDescription('Each entry represents a single import policy applied by the ospf layer on a Virtual Router.')
csOspfImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: csOspfImpPolId.setStatus('current')
if mibBuilder.loadTexts: csOspfImpPolId.setDescription('The Import Policy (see the corresponding entry in csImpPolTable) that is applied to this Virtual Router.')
csOspfImpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfImpPolStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfImpPolStatus.setDescription('The RowStatus object for this table. This is used to add and delete entries from this table.')
csOspfExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14), )
if mibBuilder.loadTexts: csOspfExpPolTable.setStatus('current')
if mibBuilder.loadTexts: csOspfExpPolTable.setDescription('A set of Export Policies (see csExpPolTable) that are applied by ospf.')
csOspfExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOspfExpPolId"))
if mibBuilder.loadTexts: csOspfExpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csOspfExpPolEntry.setDescription('Each entry represents a single import policy applied by the ospf layer on a Virtual Router.')
csOspfExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14, 1, 1), Integer32())
if mibBuilder.loadTexts: csOspfExpPolId.setStatus('current')
if mibBuilder.loadTexts: csOspfExpPolId.setDescription('The Export Policy (see the corresponding entry in csExpPolTable) that is applied to this Virtual Router.')
csOspfExpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 1, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOspfExpPolStatus.setStatus('current')
if mibBuilder.loadTexts: csOspfExpPolStatus.setDescription('The RowStatus object for this table. This is used to add and delete entries from this table.')
csOspfTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1))
csOspfSetTrap = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOspfSetTrap.setStatus('current')
if mibBuilder.loadTexts: csOspfSetTrap.setDescription('A four-octet string serving as a bit map for the trap events defined by the OSPF traps. This object is used to enable and disable specific OSPF traps where a 1 in the bit field represents enabled. The right-most bit (least significant) represents trap 0.')
csOspfConfigErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("badVersion", 1), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("authTypeMismatch", 5), ("authFailure", 6), ("netMaskMismatch", 7), ("helloIntervalMismatch", 8), ("deadIntervalMismatch", 9), ("optionMismatch", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfConfigErrorType.setStatus('current')
if mibBuilder.loadTexts: csOspfConfigErrorType.setDescription('Potential types of configuration conflicts. Used by the csOspfConfigError and csOspfConfigVir- tError traps.')
csOspfPacketType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfPacketType.setStatus('current')
if mibBuilder.loadTexts: csOspfPacketType.setDescription('OSPF packet types.')
csOspfPacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOspfPacketSrc.setStatus('current')
if mibBuilder.loadTexts: csOspfPacketSrc.setDescription('The IP address of an inbound packet that can- not be identified by a neighbor instance.')
csOrionOspfEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionOspfEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfEnd.setDescription('End of this group. value undefined')
csRipGlobalStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1), )
if mibBuilder.loadTexts: csRipGlobalStatTable.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalStatTable.setDescription('This table contains per-VR level stats for RIP. These counters are intended to facilitate debugging quickly changing routes or failing neighbors.')
csRipGlobalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csRipGlobalStatEntry.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalStatEntry.setDescription('Each entry contains a set of statistics for a specific Virtual Router.')
csRipGlobalRouteChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipGlobalRouteChanges.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalRouteChanges.setDescription("The number of route changes made to the IP Route Database by RIP. This does not include the refresh of a route's age.")
csRipGlobalQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipGlobalQueries.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalQueries.setDescription('The number of responses sent to RIP queries from other systems.')
csRipIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2), )
if mibBuilder.loadTexts: csRipIfStatTable.setStatus('current')
if mibBuilder.loadTexts: csRipIfStatTable.setDescription('A list of subnets which require separate status monitoring in RIP.')
csRipIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csRipIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: csRipIfStatEntry.setDescription('A Single Routing Domain in a single Subnet.')
csRipIfStatRcvBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatRcvBadPackets.setStatus('current')
if mibBuilder.loadTexts: csRipIfStatRcvBadPackets.setDescription('The number of RIP response packets received by the RIP process which were subsequently discarded for any reason (e.g. a version 0 packet, or an unknown command type).')
csRipIfStatRcvBadRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatRcvBadRoutes.setStatus('current')
if mibBuilder.loadTexts: csRipIfStatRcvBadRoutes.setDescription('The number of routes, in valid RIP packets, which were ignored for any reason (e.g. unknown address family, or invalid metric).')
csRipIfStatSentUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatSentUpdates.setStatus('current')
if mibBuilder.loadTexts: csRipIfStatSentUpdates.setDescription('The number of triggered RIP updates actually sent on this interface. This explicitly does NOT include full updates sent containing new information.')
csRipIfStatTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRipIfStatTableEnd.setStatus('current')
if mibBuilder.loadTexts: csRipIfStatTableEnd.setDescription('End of this group. value undefined')
csRipGlobalConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1), )
if mibBuilder.loadTexts: csRipGlobalConfTable.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfTable.setDescription('A table of virtual router-specific configuration parameters.')
csRipGlobalConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csRipGlobalConfEntry.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfEntry.setDescription('Each entry contains a set of configuration specific to a single virtual router.')
csRipGlobalConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfStatus.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfStatus.setDescription('Enable/Disable the use of RIP on this Virtual Router.')
csRipGlobalConfAgeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfAgeTime.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfAgeTime.setDescription('')
csRipGlobalConfPerUpdateInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfPerUpdateInt.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfPerUpdateInt.setDescription('')
csRipGlobalConfJitterUpdateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfJitterUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfJitterUpdateStatus.setDescription('Enable/Disable the use of the Jitter Update feature')
csRipGlobalConfRfc1058CalcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfRfc1058CalcStatus.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfRfc1058CalcStatus.setDescription('Enable/Disable the use of the route metric calculation defined in rfc1058.')
csRipGlobalConfReqOnStartup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfReqOnStartup.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfReqOnStartup.setDescription('Enable/Disable the use of the request on startup feature.')
csRipGlobalConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfRowStatus.setDescription('The RowStatus object for this object. This is used to add/delete rows from this table. Setting it to create and go creates RIP on this Virtual Router. Setting it to destroy removes RIP from this Virtual Router.')
csRipGlobalConfLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within RIP. Below is a list of the different areas available for logging within RIP and their corresponding bits identifiers. area bit ------------------------------------------------------ packet 0 policy 1 end of description.')
csRipGlobalConfLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipGlobalConfLogLevelFlag.setStatus('current')
if mibBuilder.loadTexts: csRipGlobalConfLogLevelFlag.setDescription('Each bit within this object enables logging at a specific level for RIP. Below is a list of the different log levels available and their corresponding bits identifiers. area bit ------------------------------------------------------ critical 0 error 1 warning 2 information 3 debug 4 end of description.')
csRipIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2), )
if mibBuilder.loadTexts: csRipIfConfTable.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfTable.setDescription('A list of virtual interfaces which require separate configuration in RIP.')
csRipIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csRipIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfEntry.setDescription('A Single Routing Domain in a single Subnet.')
csRipIfConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfStatus.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfStatus.setDescription('Enable/Disable the use of RIP on this Virtual Interface.')
csRipIfConfSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfSend.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfSend.setDescription('Enable/Disable the sending of RIP advertisements on this Virtual Interface.')
csRipIfConfReceiveV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfReceiveV1.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfReceiveV1.setDescription('Enable/Disable the receiving of RIP V1 advertisements on this Virtual Interface.')
csRipIfConfReceiveV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfReceiveV2.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfReceiveV2.setDescription('Enable/Disable the receiving of RIP V2 advertisements on this Virtual Interface.')
csRipIfConfSendDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfSendDefRoute.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfSendDefRoute.setDescription('Enable/Disable the advertisement of default routes.')
csRipIfConfRcvDefRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfRcvDefRoute.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfRcvDefRoute.setDescription('Enable/Disable the acceptance of advertised default routes.')
csRipIfConfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfSplitHorizon.setDescription('Enable/Disable the Split Horizon feature.')
csRipIfConfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfPoisonReverse.setDescription('Enable/Disable the Poison Reverse feature.')
csRipIfConfFlashUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfFlashUpdate.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfFlashUpdate.setDescription('Enable/Disable the Flash Update feature.')
csRipIfConfRipV1Compatibility = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfRipV1Compatibility.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfRipV1Compatibility.setDescription('Enable/Disable compatibility with RIPv1 routers.')
csRipIfConfAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 11), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfAuthPassword.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfAuthPassword.setDescription('The password used in RIPv2 authentication. This object will return a zero length string in response to GET or GETNEXT requests.')
csRipIfConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipIfConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRipIfConfRowStatus.setDescription('RowStatus for this object. This is used to add/delete rows from this table. Setting it to create and go creates RIP on this Virtual Interface. Setting it to destroy removes RIP from this Virtual Interface.')
csRipImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3), )
if mibBuilder.loadTexts: csRipImpPolTable.setStatus('current')
if mibBuilder.loadTexts: csRipImpPolTable.setDescription('A set of Export Policies (see csExpPolTable) that are applied by rip.')
csRipImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRipImpPolId"))
if mibBuilder.loadTexts: csRipImpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csRipImpPolEntry.setDescription('Each entry represents a single import policy applied by the rip layer on a Virtual Router.')
csRipImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csRipImpPolId.setStatus('current')
if mibBuilder.loadTexts: csRipImpPolId.setDescription('The Import Policy (see the corresponding entry in csImpPolTable) that is applied to this Virtual Router.')
csRipImpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipImpPolStatus.setStatus('current')
if mibBuilder.loadTexts: csRipImpPolStatus.setDescription('The RowStatus object for this table. This is used to add and delete entries from this table.')
csRipExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4), )
if mibBuilder.loadTexts: csRipExpPolTable.setStatus('current')
if mibBuilder.loadTexts: csRipExpPolTable.setDescription('A set of Export Policies (see csExpPolTable) that are applied by rip.')
csRipExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRipExpPolId"))
if mibBuilder.loadTexts: csRipExpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csRipExpPolEntry.setDescription('Each entry represents a single import policy applied by the rip layer on a Virtual Router.')
csRipExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csRipExpPolId.setStatus('current')
if mibBuilder.loadTexts: csRipExpPolId.setDescription('The Export Policy (see the corresponding entry in csExpPolTable) that is applied to this Virtual Router.')
csRipExpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRipExpPolStatus.setStatus('current')
if mibBuilder.loadTexts: csRipExpPolStatus.setDescription('The RowStatus object for this table. This is used to add and delete entries from this table.')
csOrionRipEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRipEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionRipEnd.setDescription('End of this group. value undefined')
csOrionVPNVRouterTcpTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterTcpTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpTable.setDescription('The table of TCP Parameters.')
csOrionVPNVRouterTcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterTcpEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpEntry.setDescription('The entry of the table of TCP Parameters.')
csOrionVPNVRouterTcpRtoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("constant", 2), ("rsre", 3), ("vanj", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoAlgorithm.setDescription('The algorithm used to determine the timeout value used for retransmitting unacknowledged octets.')
csOrionVPNVRouterTcpRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoMin.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoMin.setDescription('The minimum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the LBOUND quantity described in RFC 793.')
csOrionVPNVRouterTcpRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoMax.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRtoMax.setDescription('The maximum value permitted by a TCP implementation for the retransmission timeout, measured in milliseconds. More refined semantics for objects of this type depend upon the algorithm used to determine the retransmission timeout. In particular, when the timeout algorithm is rsre(3), an object of this type has the semantics of the UBOUND quantity described in RFC 793.')
csOrionVPNVRouterTcpMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpMaxConn.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpMaxConn.setDescription('The limit on the total number of TCP connections the entity can support. In entities where the maximum number of connections is dynamic, this object should contain the value -1.')
csOrionVPNVRouterTcpActiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpActiveOpens.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpActiveOpens.setDescription('The number of times TCP connections have made a direct transition to the SYN-SENT state from the CLOSED state.')
csOrionVPNVRouterTcpPassiveOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpPassiveOpens.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpPassiveOpens.setDescription('The number of times TCP connections have made a direct transition to the SYN-RCVD state from the LISTEN state.')
csOrionVPNVRouterTcpAttemptFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpAttemptFails.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpAttemptFails.setDescription('The number of times TCP connections have made a direct transition to the CLOSED state from either the SYN-SENT state or the SYN-RCVD state, plus the number of times TCP connections have made a direct transition to the LISTEN state from the SYN-RCVD state.')
csOrionVPNVRouterTcpEstabResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpEstabResets.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpEstabResets.setDescription('The number of times TCP connections have made a direct transition to the CLOSED state from either the ESTABLISHED state or the CLOSE-WAIT state.')
csOrionVPNVRouterTcpCurrEstab = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpCurrEstab.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpCurrEstab.setDescription('The number of TCP connections for which the current state is either ESTABLISHED or CLOSE- WAIT.')
csOrionVPNVRouterTcpInSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpInSegs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpInSegs.setDescription('The total number of segments received, including those received in error. This count includes segments received on currently established connections.')
csOrionVPNVRouterTcpOutSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpOutSegs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpOutSegs.setDescription('The total number of segments sent, including those on current connections but excluding those containing only retransmitted octets.')
csOrionVPNVRouterTcpRetransSegs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRetransSegs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpRetransSegs.setDescription('The total number of segments retransmitted - that is, the number of TCP segments transmitted containing one or more previously transmitted octets.')
csOrionVPNVRouterTcpInErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpInErrs.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpInErrs.setDescription('The total number of segments received in error (e.g., bad TCP checksums).')
csOrionVPNVRouterTcpOutRsts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpOutRsts.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpOutRsts.setDescription('The number of TCP segments sent containing the RST flag.')
csOrionVPNVRouterTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2), )
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnTable.setDescription("The table of addressing information relevant to Orion's IP addresses.")
csOrionVPNVRouterTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnLocalAddress"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnLocalPort"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnRemAddress"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterTcpConnRemPort"))
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnState.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnState.setDescription("The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection. As an implementation-specific option, a RST segment may be sent from the managed node to the other TCP endpoint (note however that RST egments are not sent reliably).")
csOrionVPNVRouterTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnLocalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
csOrionVPNVRouterTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnLocalPort.setDescription('The local port number for this TCP connection.')
csOrionVPNVRouterTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnRemAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
csOrionVPNVRouterTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnRemPort.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterTcpConnRemPort.setDescription('The remote port number for this TCP connection.')
csOrionTcpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTcpEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionTcpEnd.setDescription('End of this group. value undefined')
csOrionVPNVRouterUdpTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1), )
if mibBuilder.loadTexts: csOrionVPNVRouterUdpTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpTable.setDescription("The table of addressing information relevant to Orion's IP addresses.")
csOrionVPNVRouterUdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVPNVRouterUdpEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterUdpInDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpInDatagrams.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpInDatagrams.setDescription('The total number of UDP datagrams delivered to UDP users.')
csOrionVPNVRouterUdpNoPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpNoPorts.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpNoPorts.setDescription('The total number of received UDP datagrams for which there was no application at the destination port.')
csOrionVPNVRouterUdpInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpInErrors.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpInErrors.setDescription('The number of received UDP datagrams that could not be delivered for reasons other than the lack of an application at the destination port.')
csOrionVPNVRouterUdpOutDatagrams = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpOutDatagrams.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpOutDatagrams.setDescription('The total number of UDP datagrams sent from this entity.')
csOrionVPNVRouterUdpListenerTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2), )
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerTable.setDescription("The table of addressing information relevant to Orion's IP addresses.")
csOrionVPNVRouterUdpListenerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterUdpListenerLocalAddress"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterUdpListenerLocalPort"))
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerEntry.setDescription("The addressing information for one of this Orion's IP addresses.")
csOrionVPNVRouterUdpListenerLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerLocalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerLocalAddress.setDescription('The local IP address for this UDP listener. In the case of a UDP listener which is willing to accept datagrams for any IP interface associated with the node, the value 0.0.0.0 is used.')
csOrionVPNVRouterUdpListenerLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerLocalPort.setStatus('current')
if mibBuilder.loadTexts: csOrionVPNVRouterUdpListenerLocalPort.setDescription('The local port number for this UDP listener.')
csOrionUdpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionUdpEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionUdpEnd.setDescription('End of this group. value undefined')
csBgpGenTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1), )
if mibBuilder.loadTexts: csBgpGenTable.setStatus('current')
if mibBuilder.loadTexts: csBgpGenTable.setDescription('This table contains general, virtual router specific, BGP information.')
csBgpGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csBgpGenEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpGenEntry.setDescription('Each entry contains general, virtual router specific BGP information for a single virtual router.')
csBgpGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpGenStatus.setDescription('This object controls the operation of BGP as a whole on this virtual router.')
csBgpGenLocalAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenLocalAS.setStatus('current')
if mibBuilder.loadTexts: csBgpGenLocalAS.setDescription('The local autonomous system number of this virtual router. This object will have a value of 0 if bgp is disabled. If bgp is enabled, this object cannot be set to 0.')
csBgpGenClearConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenClearConn.setStatus('current')
if mibBuilder.loadTexts: csBgpGenClearConn.setDescription('This object is used to clear one of the existing BGP connections. To clear a single connection, enter the ip address of the remote end of the connection. When this object is read (get, getnext), the value 0.0.0.0 will be returned.')
csBgpGenDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDefaultMetric.setDescription('The default metric used by the system. default value is -1 which indicates that the metric is not configured')
csBgpGenDefaultLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDefaultLocalPref.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDefaultLocalPref.setDescription('Default local preference of this BGP speaker default value is 100.')
csBgpGenConfedId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenConfedId.setStatus('current')
if mibBuilder.loadTexts: csBgpGenConfedId.setDescription('The ConfedId of this system. -1 indicates no confedId has been configured.')
csBgpGenDampEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampEnable.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDampEnable.setDescription('This attribute is used to enable/disable route flap damping on this virtual router.')
csBgpGenDampHalfLife = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 8), Integer32().clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampHalfLife.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDampHalfLife.setDescription('The time in seconds after which the penalty associated with a flapping route is reduced by one half. default value is 15 mintues.')
csBgpGenDampReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 9), Integer32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampReuse.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDampReuse.setDescription('If the penalty of a flapping route that has been suppressed falls below the value configured by this attribute, then the route is unsuppressed. Default is 2.')
csBgpGenDampSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 10), Integer32().clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampSuppress.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDampSuppress.setDescription('If the penalty of a flapping route exceeds the value configured by this atttribute, the route is suppressed. Default is 3.')
csBgpGenDampMaxSuppress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 11), Integer32().clone(16)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenDampMaxSuppress.setStatus('current')
if mibBuilder.loadTexts: csBgpGenDampMaxSuppress.setDescription('The maximum time that the route can be suppressed. Default is 16.')
csBgpGenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpGenRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpGenLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpGenLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within BGP. Below is a list of the different areas available for logging within BGP and their corresponding bits identifiers. area bit ------------------------------------------------------ packet (all packets) 0 open (open packets) 1 update (update packets) 2 keepalive (keepalive packets) 3 notify (notify packets) 4 system (all system operations) 5 vpn-update (all vpn operations) 6 end of description.')
csBgpGenLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenLogLevelFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpGenLogLevelFlag.setDescription('Each bit within this object enables logging at a specific level for BGP. Below is a list of the different log levels available and their corresponding bits identifiers. area bit ------------------------------------------------------ critical 0 error 1 warning 2 information 3 debug 4 end of description. ')
csBgpGenClearConnFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("nbr", 2), ("nbrGroup", 3), ("all", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenClearConnFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpGenClearConnFlag.setDescription("This object is used to indicate the set of BGP connections that need to be cleared. If set to 'nbr' the 'csBgpNbrClearConn' attribute must be set. If set to 'nbrGroup' the csBgpNbrClearNbrGroupName' must be set. When this object is read the value 'none' will be returned.")
csBgpGenClearNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenClearNbrGroupName.setStatus('current')
if mibBuilder.loadTexts: csBgpGenClearNbrGroupName.setDescription('This object is used to clear all the BGP connections that belong to the specified peer group. ')
csBgpGenHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: csBgpGenHoldTimeConfigured.setDescription('The configured holdtime to use with all the Neighbors. default value of -1 indicates that this attribute has not been configured (default value used will be 180 seconds). The timers configured for a Nbr or NbrGroup overrides timers configured for all BGP neighbors using this attribute')
csBgpGenKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(7, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: csBgpGenKeepAliveConfigured.setDescription('The configured Keepalive to use with all the Neighbors. default value of -1 indicates that this attribute has not been configured (default value used will be 60 seconds). The timers configured for a Nbr or NbrGroup overrides timers configured for all BGP neighbors using this attribute')
csBgpGenVpnLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenVpnLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpGenVpnLogAreaFlag.setDescription('Each bit within this object enables logging for a specific area within BGP/VPN module. area bit ------------------------------------------------------ inbound-routes (updates recv) 0 outbound-routes (updates sent) 1 system (all system operations) 2 vrf (BGP to VRF interface) 3 bgp-peer (BGP/VPN peer mmgt) 4 tunnel (PE-PE tunnel mmgt) 5 end of description.')
csBgpGenMaxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 20), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenMaxPfx.setStatus('current')
if mibBuilder.loadTexts: csBgpGenMaxPfx.setDescription('This attribute limits the maximum number of BGP routes that can be learnt. Any additional routes learnt from BGP will be 1. discarded and a warning message is generated. or 2. accepted and a warning message is generated -1 indicates that no maximum threshold has been set')
csBgpGenMaxPfxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenMaxPfxThreshold.setStatus('current')
if mibBuilder.loadTexts: csBgpGenMaxPfxThreshold.setDescription('If this attribute is configured, then when the number of routes learnt from all BGP peer reaches this threshold (percentage of csBgpMaxPfx) then a warning message is generated.')
csBgpGenMaxPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", -1), ("warning-only", 2), ("warning-and-discard", 3))).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpGenMaxPfxType.setStatus('current')
if mibBuilder.loadTexts: csBgpGenMaxPfxType.setDescription("This attribute indicates the action that needs to be taken when the number of routes learnt from the bgp reaches the max prefix limit configured via 'csBgpGenMaxPfx' attribute. If this attribute is not set explicitly, and 'csBgpGenMaxPfx' attribute is set, this attribute defaults to warning-and-discard.")
csBgpGenTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpGenTableEnd.setStatus('current')
if mibBuilder.loadTexts: csBgpGenTableEnd.setDescription('End of this group. value undefined')
csBgpNbrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1), )
if mibBuilder.loadTexts: csBgpNbrTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrTable.setDescription('This table contains information about the BGP Neighbors on each virtual router.')
csBgpNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrAddr"))
if mibBuilder.loadTexts: csBgpNbrEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrEntry.setDescription('Each entry contains information about a single neighbor on a single virtual router.')
csBgpNbrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: csBgpNbrAddr.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrAddr.setDescription("The remote IP address of this entry's BGP neighbor.")
csBgpNbrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpNbrId.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrId.setDescription("The BGP Identifier of this entry's BGP neighbor.")
csBgpNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 1), ("connect", 2), ("active", 3), ("opensent", 4), ("openconfirm", 5), ("established", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpNbrState.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrState.setDescription('The BGP Peer connection state.')
csBgpNbrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2))).clone('start')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrAdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Stop Event to be generated. This parameter can be used to restart BGP peer connections.")
csBgpNbrRemoteAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrRemoteAS.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrRemoteAS.setDescription('The remote autonomous system number.')
csBgpNbrMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMd5Password.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrMd5Password.setDescription('The Md5 password used to authenticate messages exchanged with this neighbor. If the neighbor belongs to a NbrGroup and this attribute is not configured, the Nbr inherits the group level value of this attribute.')
csBgpNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpNbrGroupNm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupNm.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupNm.setDescription('The Group to which the peer belongs. If the peer is not configured to any group an empty string is returned.')
csBgpNbrHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrHoldTimeConfigured.setDescription('The configured holdtime to use with this Neighbor default value of -1 indicates that this attribute has not been configured (default value used will be 180 seconds). If the neighbor belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute.')
csBgpNbrLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 10), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrLocalAddr.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrLocalAddr.setDescription('The IpAddress to be used at the local end of the connection with the bgp peer. If set to 0.0.0.0 it indicates that the LocalAddr is not configured. If the Nbr belongs to a NbrGroup, group level value of this attribute will override any value configured here.')
csBgpNbrNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrNextHopSelf.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrNextHopSelf.setDescription('To enable/disable this system to be the next hopself for an ebgp session with this peer. default is -1 which indicates not configured. If the neighbor belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute.')
csBgpNbrMhopGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMhopGw.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrMhopGw.setDescription(' To specify the gateway address if this ebgp neighbor is not directly connected to this system. If the MhopGw is set to 0.0.0.0, it indicates that the MhopGw is not configured. If the Nbr belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute.')
csBgpNbrPassive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrPassive.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrPassive.setDescription(' If this attribute is set to enable then this BGP speaker will not try to open a connection with the neighbor. Instead it will wait for the neighbor to initiate a connection.')
csBgpNbrMhopTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMhopTTL.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrMhopTTL.setDescription(' To specify the maximum TTL value for the TTL in the IP Header for BGP packets. This attribute is applicable only for ebgp sessions. This attribute deprecates csBgpNbrMhopGw attribute. If this attribute is configured for a IBGP peer it has no effect. If the Nbr belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute')
csBgpNbrIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrIpv4AdminStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrIpv4AdminStatus.setDescription(' If this attribute is set to disable then this BGP speaker will not try to send/recieve routes for IPv4 address family. The BGP speaker will participate in IPv4 address family with its peer only if this attribute is set to enable.')
csBgpNbrVpnIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrVpnIpv4AdminStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrVpnIpv4AdminStatus.setDescription(' If this attribute is set to disable then this BGP speaker will not try to send/recieve routes for VPN IPv4 address family. The BGP speaker will participate in VPN IPv4 address family with its peer only if this attribute is set to enable. ')
csBgpNbrKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(7, 65534), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrKeepAliveConfigured.setDescription('The configured keepalive to use with this Neighbor default value of -1 indicates that this attribute has not been configured (default value used will be 60 seconds). KeepAlive timer is normally derived from the negotiated holdtime and is 1/3 the value of negotiated holdtime. However if keepalive is configured the minmum of this value and 1/3 the value of negotiated holdtime is used. If the neighbor belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute.')
csBgpNbrRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrRemovePrivateAs.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrRemovePrivateAs.setDescription('This attribute is used to strip private as numbers from the aspath advertised to the neighbor. This attribute is used only with EBGP neighbors. Configuring this attribute to an IBGP peer has no effect. default is -1 which indicates not configured. If the neighbor belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute.')
csBgpNbrLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within BGP Neighbor. Below is a list of the different areas available for logging within BGP and their corresponding bits identifier. If the neighbor belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute. If the group level value is not set (or the neighbor does not belong to a NbrGroup) bgp global level value is inherited. area bit ------------------------------------------------------ packet (all packets) 0 open (open packets) 1 update (update packets) 2 keepalive (keepalive packets) 3 notify (notify packets) 4 system (all system operations) 5 end of description.')
csBgpNbrMaxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMaxPfx.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrMaxPfx.setDescription('This attribute is used to set the maximum number of prefixes that can be learnt from this neighbor. If the neighbor advertises more than this number set in this attribute, the neighbor connection is closed and the state is set to Idle. Connection is not restored until user does a clearConnection. If this attribute is not set, the Nbr inherits the group level value of this attribute')
csBgpNbrVpnLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrVpnLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrVpnLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within BGP Neighbor related VPN routing. If the neighbor belongs to a NbrGroup and this attribute is not set, the Nbr inherits the group level value of this attribute. If the group level value is not set (or the neighbor does not belong to a NbrGroup) bgp global level value is inherited. area bit ------------------------------------------------------ inbound-routes (updates recv) 0 outbound-routes (updates sent) 1 end of description.')
csBgpNbrMaxPfxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMaxPfxThreshold.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrMaxPfxThreshold.setDescription('If this attribute is configured, then when the number of routes learnt from this peer reaches this threshold (percentage of csBgpNbrMaxPfx) then a warning message is generated.')
csBgpNbrMaxPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", -1), ("shutdown", 1), ("warning-only", 2), ("warning-and-discard", 3))).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrMaxPfxType.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrMaxPfxType.setDescription("This attribute indicates the action that needs to be taken when the number of routes learnt from the neighbor reaches the max prefix limit configured via 'csBgpNbrMaxPfx' attribute. If this attribute is not set explicitly, and 'csBgpNbrMaxPfx' attribute is set, this attribute defaults to shutdown.")
csBgpNbrImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2), )
if mibBuilder.loadTexts: csBgpNbrImpPolTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrImpPolTable.setDescription('This table is used to configure the import policies applied to each BGP neighbor on each virtual router.')
csBgpNbrImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrAddr"), (0, "COSINE-ORION-MIB", "csBgpNbrImpPolId"))
if mibBuilder.loadTexts: csBgpNbrImpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrImpPolEntry.setDescription("Each entry contains information about a single policy applied to a single virtual router's BGP neighbor.")
csBgpNbrImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrImpPolId.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrImpPolId.setDescription('The identifier of the policy to apply to this neighbor. This identifies an entry in either the csBgpImpImpPolTable or the csBgpExpImpPolTable. If the Nbr belongs to a Group any import policies defined at the neighbor level overrides group level import policies. If no import policies are defined at the neighbor level group level policies are inherited.')
csBgpNbrImpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrImpPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrImpPolRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpNbrExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3), )
if mibBuilder.loadTexts: csBgpNbrExpPolTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrExpPolTable.setDescription('This table is used to configure the import policies applied to each BGP neighbor on each virtual router.')
csBgpNbrExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrAddr"), (0, "COSINE-ORION-MIB", "csBgpNbrExpPolId"))
if mibBuilder.loadTexts: csBgpNbrExpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrExpPolEntry.setDescription("Each entry contains information about a single policy applied to a single virtual router's BGP neighbor.")
csBgpNbrExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrExpPolId.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrExpPolId.setDescription('The identifier of the policy to apply to this neighbor. This identifies an entry in either the csBgpExpExpPolTable or the csBgpExpExpPolTable. If the Nbr belongs to a NbrGroup then any Export policies configured to this Nbr are ignored.i.e. Export policies defined at the group level takes precedence')
csBgpNbrExpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 2, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrExpPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrExpPolRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpConfedASTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1), )
if mibBuilder.loadTexts: csBgpConfedASTable.setStatus('current')
if mibBuilder.loadTexts: csBgpConfedASTable.setDescription(" This table maintains a list of AS's which belong to the same confederation as this virtual router.")
csBgpConfedASEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpConfedAS"))
if mibBuilder.loadTexts: csBgpConfedASEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpConfedASEntry.setDescription(' Each entry contains as AS number which belongs to the same confederation as this virtual router.')
csBgpConfedAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpConfedAS.setStatus('current')
if mibBuilder.loadTexts: csBgpConfedAS.setDescription('This attribute identifies the AS which belongs to the same confederation as this virtual router.')
csBgpConfedASRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpConfedASRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpConfedASRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpConfedASTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpConfedASTableEnd.setStatus('current')
if mibBuilder.loadTexts: csBgpConfedASTableEnd.setDescription('End of this group. value undefined')
csBgpNetworkTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1), )
if mibBuilder.loadTexts: csBgpNetworkTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNetworkTable.setDescription(' This table maintains a list of IP Address/Mask which can be distributed from IGP into BGP.')
csBgpNetworkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNetworkAddr"), (0, "COSINE-ORION-MIB", "csBgpNetworkMask"))
if mibBuilder.loadTexts: csBgpNetworkEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNetworkEntry.setDescription(' Each entry contains an IP Address/Mask that need to be sent via BGP.')
csBgpNetworkAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: csBgpNetworkAddr.setStatus('current')
if mibBuilder.loadTexts: csBgpNetworkAddr.setDescription('The IP Address that needs to be redistrubted to BGP.')
csBgpNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: csBgpNetworkMask.setStatus('current')
if mibBuilder.loadTexts: csBgpNetworkMask.setDescription('The IP Mask of the csBgpNetworkAddr that needs to be redistrubted to BGP.')
csBgpNetworkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNetworkRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNetworkRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpNetworkTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csBgpNetworkTableEnd.setStatus('current')
if mibBuilder.loadTexts: csBgpNetworkTableEnd.setDescription('End of this group. value undefined')
csBgpNbrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1), )
if mibBuilder.loadTexts: csBgpNbrGroupTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupTable.setDescription("This table contains information about the BGP Group's on a single virtual router.")
csBgpNbrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupName"))
if mibBuilder.loadTexts: csBgpNbrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupEntry.setDescription('Each entry contains information about a single group on a single virtual router.')
csBgpNbrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: csBgpNbrGroupName.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupName.setDescription('The Name of the BGP Group')
csBgpNbrGroupAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2))).clone('start')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupAdminStatus.setDescription("The desired state of the BGP connection. A transition from 'stop' to 'start' will cause the BGP Start Event to be generated. A transition from 'start' to 'stop' will cause the BGP Stop Event to be generated. This parameter can be used to restart BGP peer connections in the bgp group.")
csBgpNbrGroupRemoteAS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupRemoteAS.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupRemoteAS.setDescription('The remote autonomous system number of the group.')
csBgpNbrGroupMd5Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMd5Password.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupMd5Password.setDescription('The Md5 password used to authenticate messages exchanged with the neighbors defined in the group. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrMd5Password Attribute')
csBgpNbrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpNbrGroupHoldTimeConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(20, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupHoldTimeConfigured.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupHoldTimeConfigured.setDescription('The configured holdtime to be used by the neighbors in this group. default value is -1 which indicates this is not configured and the neighbors in the group will be use a value of 180 seconds. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrHoldTimeConfigured attribute. ')
csBgpNbrGroupLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupLocalAddr.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupLocalAddr.setDescription('The IpAddress to be used at the local end of the connection with the bgp peers in this group. If the LocalAddr is set to 0.0.0.0, it indicates that the LocalAddr is not configured.')
csBgpNbrGroupNextHopSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupNextHopSelf.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupNextHopSelf.setDescription('To enable/disable this system to be the next hopself for an ebgp session with the bgp peers in this group. default is -1 which indicates not configured and disabled. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrNextHopSelf attribute.')
csBgpNbrGroupMhopGw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMhopGw.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupMhopGw.setDescription(' To specify the gateway address if the ebgp neighbors belonging to this group are not directly connected to this system. If the MhopGw is set to 0.0.0.0, it indicates that the MhopGw is not configured. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrMhopGw attribute.')
csBgpNbrGroupMhopTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 255), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMhopTTL.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupMhopTTL.setDescription(' To specify the maximum TTL value for the TTL in the IP Header for BGP packets. This attribute is applicable only for ebgp sessions. This attribute deprecates csBgpNbrGroupMhopGw attribute. If this attribute is configured to an IBGP peer it has not effect. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrMhopTTL attribute')
csBgpNbrGroupIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupIpv4AdminStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupIpv4AdminStatus.setDescription(' If this attribute is set to disable then this BGP speaker will not try to send/recieve routes for IPv4 address family. The BGP speaker will participate in IPv4 address family with its peer only if this attribute is set to enable.')
csBgpNbrGroupVpnIpv4AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AdminStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AdminStatus.setDescription(' If this attribute is set to disable then this BGP speaker will not try to send/recieve routes for VPN IPv4 address family. The BGP speaker will participate in VPN IPv4 address family with its peer only if this attribute is set to enable. ')
csBgpNbrGroupVpnIpv4AllowRfc2547Customers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("other", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AllowRfc2547Customers.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AllowRfc2547Customers.setDescription(' This attribute specifies the scope of RFC2547bis customers provisioned by this BGP speaker. none : no rfc2547 customers all : all VRs which are requesting to participate other: access controlled by specifying explicit list of customers by name or group-names in csBgpVpnv4AccessMapTable.')
csBgpNbrGroupVpnIpv4AllowVrmodelCustomers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("all", 2), ("other", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AllowVrmodelCustomers.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupVpnIpv4AllowVrmodelCustomers.setDescription(' This attribute specifies the scope of VR-model customers provisioned by this BGP speaker. none : no VR-model customers all : all VRs which are requesting to participate other: access controlled by specifying explicit list of customers by name or group-names in csBgpVpnv4AccessMapTable.')
csBgpNbrGroupKeepAliveConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(7, 65535), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupKeepAliveConfigured.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupKeepAliveConfigured.setDescription('The configured keepalive to be used by the neighbors in this group. default value is -1 which indicates this is not configured and the neighbors in the group will be use a value of 60 seconds. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrKeepAliveConfigured attribute. be 180 seconds). KeepAlive timer is normally derived from the negotiated holdtime and is 1/3 the value of negotiated holdtime. However if keepalive is configured the minmum of this value and 1/3 the value of negotiated holdtime is used. ')
csBgpNbrGroupRemovePrivateAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("notconfigured", -1), ("enable", 1), ("disable", 2))).clone('notconfigured')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupRemovePrivateAs.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupRemovePrivateAs.setDescription('This attribute is used to strip private as numbers from the aspath advertised to the neighbor. This attribute is used only with EBGP neighbors. Configuring this attribute to an IBGP peer has no effect. default is -1 which indicates not configured and disabled. This attribute can be over-ridden for each Nbr in the group by setting the csBgpNbrNextHopSelf attribute.')
csBgpNbrGroupLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within BGP Neighbor. Below is a list of the different areas available for logging within BGP and their corresponding bits identifier. If the group level value is not set bgp global level value is inherited. area bit ------------------------------------------------------ packet (all packets) 0 open (open packets) 1 update (update packets) 2 keepalive (keepalive packets) 3 notify (notify packets) 4 system (all system operations) 5 end of description.')
csBgpNbrGroupMaxPfx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfx.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfx.setDescription('This attribute is used to set the maximum number of prefixes that can be learnt from each neighbor in this group. If a neighbor advertises more than this number set in this attribute, then that neighbor connection is closed and the state is set to Idle. Connection is not restored until user does a clearConnection. The group level value can be over-ridden for each nbr by setting the csBgpNbrMaxPfx attribute')
csBgpNbrGroupVpnLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupVpnLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupVpnLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within BGP Neighbor related to VPN routing. If the group level value is not set bgp global level value is inherited. area bit ------------------------------------------------------ inbound-routes (updates recv) 0 outbound-routes (updates sent) 1 end of description.')
csBgpNbrGroupMaxPfxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 100), )).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfxThreshold.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfxThreshold.setDescription('If this attribute is configured, then when the number of routes learnt from the peers in this group reaches this threshold (percentage of csBgpNbrGroupMaxPfx) then a warning message is generated.')
csBgpNbrGroupMaxPfxType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("notconfigured", -1), ("shutdown", 1), ("warning-only", 2), ("warning-and-discard", 3))).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfxType.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupMaxPfxType.setDescription("This attribute indicates the action that needs to be taken when the number of routes learnt from the peers in this group reaches the max prefix limit configured via 'csBgpNbrGroupMaxPfx' attribute. If this attribute is not set explicitly, and 'csBgpNbrGroupMaxPfx' attribute is set, this attribute defaults to shutdown.")
csBgpNbrGroupImpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2), )
if mibBuilder.loadTexts: csBgpNbrGroupImpPolTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupImpPolTable.setDescription('This table is used to configure the import policies applied to each BGP Group on each virtual router.')
csBgpNbrGroupImpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupName"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupImpPolId"))
if mibBuilder.loadTexts: csBgpNbrGroupImpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupImpPolEntry.setDescription("Each entry contains information about a single policy applied to a single virtual router's BGP Group.")
csBgpNbrGroupImpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrGroupImpPolId.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupImpPolId.setDescription('The identifier of the policy to apply to this group. This identifies an entry in either the csBgpImpImpPolTable or the csBgpExpImpPolTable. The import polices defined at the group level can be over-ridden for each Nbr in the group by accessing the csBgpNbrImpPolTable.')
csBgpNbrGroupImpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupImpPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupImpPolRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csBgpNbrGroupExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3), )
if mibBuilder.loadTexts: csBgpNbrGroupExpPolTable.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupExpPolTable.setDescription('This table is used to configure the export policies applied to each BGP Group on each virtual router.')
csBgpNbrGroupExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupName"), (0, "COSINE-ORION-MIB", "csBgpNbrGroupExpPolId"))
if mibBuilder.loadTexts: csBgpNbrGroupExpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupExpPolEntry.setDescription("Each entry contains information about a single policy applied to a single virtual router's BGP Group.")
csBgpNbrGroupExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csBgpNbrGroupExpPolId.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupExpPolId.setDescription('The identifier of the policy to apply to this group. This identifies an entry in either the csBgpExpExpPolTable or the csBgpExpExpPolTable. If the export policies are defined at the group level, all the neighbors in the group will inherit these export policies, even if export policies are defined at the Nbr level.')
csBgpNbrGroupExpPolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 2, 6, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csBgpNbrGroupExpPolRowStatus.setStatus('current')
if mibBuilder.loadTexts: csBgpNbrGroupExpPolRowStatus.setDescription('The RowStatus object for this table. This is used to add & remove rows from this table.')
csOrionBgpEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBgpEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionBgpEnd.setDescription('End of this group. value undefined')
class OSINSAddress(TextualConvention, OctetString):
    description = 'OSI Network Service Address, e.g. NSAP, Network Entity Title'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class SNPAAddress(TextualConvention, OctetString):
    description = 'A MAC Address or DTE Address or other SNPA Address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 20)

class NSAPPrefix(TextualConvention, OctetString):
    description = 'NSAP Prefix. The first octet of the string is used to encode as an unsigned integer the length in bits of the subsequent prefix. This length must be a multiple of 4 bits and may range from 0..160. The second and subsequent octets are used to hold the prefix value. If the last 4 bits of the last octet are not part of the prefix then their value is undefined.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

class SNPAPrefix(TextualConvention, OctetString):
    description = 'SNPA Prefix. The first octet of the string is used to encode as an unsigned integer the length in bits of the subsequent prefix. The second and subsequent octets are used to hold the prefix value. Bits in the last octet which are not part of the prefix have undefined value.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 21)

class SystemID(TextualConvention, OctetString):
    description = 'A system ID.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 8)

class LSPBuffSize(TextualConvention, Integer32):
    description = 'Integer sub range for LSP size.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(512, 1492)

class LevelState(TextualConvention, Integer32):
    description = 'states of the ISIS protocol.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("off", 1), ("on", 2), ("waiting", 3))

class SupportedProtocol(TextualConvention, Integer32):
    description = 'Types of network protocol supported by Integrated ISIS. The values for ISO8473 and IP are those registered for these protocols in ISO TR9577.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(129, 204, 205))
    namedValues = NamedValues(("iso8473", 129), ("ip", 204), ("ipV6", 205))

class DefaultMetric(TextualConvention, Integer32):
    description = 'Integer sub-range for default metric for single hop.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 63)

class OtherMetric(TextualConvention, Integer32):
    description = 'Integer sub-range for metrics other than the default metric for single hop.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 63)

class MetricType(TextualConvention, Integer32):
    description = 'Class of metric at Level 2.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("internal", 1), ("external", 2))

class CircuitID(TextualConvention, OctetString):
    description = 'ID for a circuit.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(2, 9)

class ISPriority(TextualConvention, Integer32):
    description = 'Integer sub-range for ISIS priority.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 127)

class TOS(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("default", 1), ("delay", 2), ("expense", 3), ("error", 4))

class PathCost(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 1023)

csIsisSysTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1), )
if mibBuilder.loadTexts: csIsisSysTable.setStatus('current')
if mibBuilder.loadTexts: csIsisSysTable.setDescription('The set of instances of the Integrated IS-IS protocol existing on the system.')
csIsisSysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisSysInstance"))
if mibBuilder.loadTexts: csIsisSysEntry.setReference('ISIS.poi cLNSISISBasic-P (1)')
if mibBuilder.loadTexts: csIsisSysEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisSysEntry.setDescription('Each row defines information specific to a single instance of the protocol existing on the system.')
csIsisSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
csIsisSysVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysVersion.setReference('ISIS.aoi version (1)')
if mibBuilder.loadTexts: csIsisSysVersion.setStatus('current')
if mibBuilder.loadTexts: csIsisSysVersion.setDescription('The version number of the IS-IS protocol to which this instance conforms. This value must be set by the implementation when the row is valid.')
csIsisSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1IS", 1), ("level2IS", 2), ("level1l2IS", 3))).clone('level1l2IS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysType.setReference('ISIS.aoi iSType (2)')
if mibBuilder.loadTexts: csIsisSysType.setStatus('current')
if mibBuilder.loadTexts: csIsisSysType.setDescription('The type of this instance of the Integrated IS-IS protocol. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 4), SystemID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysID.setReference('ISIS.aoi systemId (119)')
if mibBuilder.loadTexts: csIsisSysID.setStatus('current')
if mibBuilder.loadTexts: csIsisSysID.setDescription("The ID for this instance of the Integrated IS-IS protocol. This value is appended to each of the instance's area addresses to form the Network Entity Titles valid for this instance. The derivation of a value for this object is implementation-specific. Some implementations may assign values and not permit write MAX-ACCESS, others may require the value to be set manually.")
csIsisSysMaxPathSplits = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxPathSplits.setReference('ISIS.aoi maximumPathSplits (3)')
if mibBuilder.loadTexts: csIsisSysMaxPathSplits.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMaxPathSplits.setDescription('Maximum number of paths with equal routing metric value which it is permitted to split between. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisSysMaxLSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(900)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxLSPGenInt.setReference('ISIS.aoi maximumLSPGenerationInterval (6)')
if mibBuilder.loadTexts: csIsisSysMaxLSPGenInt.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMaxLSPGenInt.setDescription('Maximum interval, in seconds, between generated LSPs by this instance. This object follows the resettingTimer behaviour.This value should be always lesser than csIsisSysMaxLSPLifetime and greater than csIsisSysMinL1LSPGenInt')
csIsisSysMaxLSPLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxLSPLifetime.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMaxLSPLifetime.setDescription('Maximum interval, in seconds, after which LSPs shall be aged out by this instance. This object follows the resettingTimer behaviour. This value should always be greater than csIsisSysMaxLSPGenInt')
csIsisSysOrigL1LSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 8), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysOrigL1LSPBuffSize.setReference('ISIS.aoi originatingL1LSPBufferSize (9)')
if mibBuilder.loadTexts: csIsisSysOrigL1LSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: csIsisSysOrigL1LSPBuffSize.setDescription('The maximum size of Level 1 LSPs and SNPs originated by this instance. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisSysMaxAreaAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxAreaAddresses.setReference('ISIS.aoi maximumAreaAddresses (4)')
if mibBuilder.loadTexts: csIsisSysMaxAreaAddresses.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMaxAreaAddresses.setDescription('The maximum number of area addresses to be permitted for the area in which this instance exists. Note that all Intermediate Systems in the same area must have the same value configured for this attribute if correct operation is to be assumed. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisSysMinL1LSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMinL1LSPGenInt.setReference('ISIS.aoi minimumLSPGenerationInterval (11)')
if mibBuilder.loadTexts: csIsisSysMinL1LSPGenInt.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMinL1LSPGenInt.setDescription('Minimum interval, in seconds, between successive generation of L1 LSPs with the same LSPID by this instance. This object follows the resettingTimer behaviour.')
csIsisSysMinL2LSPGenInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMinL2LSPGenInt.setReference('ISIS.aoi minimumLSPGenerationInterval (11)')
if mibBuilder.loadTexts: csIsisSysMinL2LSPGenInt.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMinL2LSPGenInt.setDescription('Minimum interval, in seconds, between successive generation of L2 LSPs with the same LSPID by this instance. This object follows the resettingTimer behaviour.')
csIsisSysPollESHelloRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysPollESHelloRate.setReference('ISIS.aoi pollESHelloRate (13)')
if mibBuilder.loadTexts: csIsisSysPollESHelloRate.setStatus('current')
if mibBuilder.loadTexts: csIsisSysPollESHelloRate.setDescription('The value, in seconds, to be used for the suggested ES configuration timer in ISH PDUs when soliciting the ES configuration.')
csIsisSysWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysWaitTime.setReference('ISIS.aoi waitingTime (15)')
if mibBuilder.loadTexts: csIsisSysWaitTime.setStatus('current')
if mibBuilder.loadTexts: csIsisSysWaitTime.setDescription('Number of seconds to delay in waiting state before entering on state. This object follows the resettingTimer behaviour.')
csIsisSysOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 14), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysOperState.setStatus('current')
if mibBuilder.loadTexts: csIsisSysOperState.setDescription('The operational state of this instance of the Integrated IS-IS protocol. Setting this object to the value on when its current value is off enables operation of this instance of the Integrated IS-IS protocol.')
csIsisSysL1State = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 15), LevelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysL1State.setReference('ISIS.aoi l1State (17)')
if mibBuilder.loadTexts: csIsisSysL1State.setStatus('current')
if mibBuilder.loadTexts: csIsisSysL1State.setDescription('The state of the Level 1 database.')
csIsisSysCorrLSPs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysCorrLSPs.setReference('ISIS.aoi corruptedLSPsDetected (19)')
if mibBuilder.loadTexts: csIsisSysCorrLSPs.setStatus('current')
if mibBuilder.loadTexts: csIsisSysCorrLSPs.setDescription('Number of corrupted LSPs detected.')
csIsisSysLSPL1DbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysLSPL1DbaseOloads.setReference('ISIS.aoi lSPL1DatabaseOverloads (20)')
if mibBuilder.loadTexts: csIsisSysLSPL1DbaseOloads.setStatus('current')
if mibBuilder.loadTexts: csIsisSysLSPL1DbaseOloads.setDescription('Number of times the LSP L1 database has become overloaded.')
csIsisSysManAddrDropFromAreas = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysManAddrDropFromAreas.setReference('ISIS.aoi manualAddressesDroppedFromArea (21)')
if mibBuilder.loadTexts: csIsisSysManAddrDropFromAreas.setStatus('current')
if mibBuilder.loadTexts: csIsisSysManAddrDropFromAreas.setDescription('Number of times a manual address has been dropped from the area.')
csIsisSysAttmptToExMaxSeqNums = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysAttmptToExMaxSeqNums.setReference('ISIS.aoi attemptsToExceedmaximumSequenceNumber (22)')
if mibBuilder.loadTexts: csIsisSysAttmptToExMaxSeqNums.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAttmptToExMaxSeqNums.setDescription('Number of times the IS has attempted to exceed the maximum sequence number.')
csIsisSysSeqNumSkips = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysSeqNumSkips.setReference('ISIS.aoi sequenceNumberSkips (23)')
if mibBuilder.loadTexts: csIsisSysSeqNumSkips.setStatus('current')
if mibBuilder.loadTexts: csIsisSysSeqNumSkips.setDescription('Number of times a sequence number skip has occurred.')
csIsisSysOwnLSPPurges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysOwnLSPPurges.setReference('ISIS.aoi ownLSPPurges (24)')
if mibBuilder.loadTexts: csIsisSysOwnLSPPurges.setStatus('current')
if mibBuilder.loadTexts: csIsisSysOwnLSPPurges.setDescription("Number of times a zero-aged copy of the system's own LSP is received from some other node.")
csIsisSysIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysIDFieldLenMismatches.setReference('ISIS.aoi iDFieldLengthMismatches (25)')
if mibBuilder.loadTexts: csIsisSysIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: csIsisSysIDFieldLenMismatches.setDescription('Number of times a PDU is received with a different value for ID field length to that of the receiving system.')
csIsisSysMaxAreaAddrMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysMaxAreaAddrMismatches.setReference('ISIS.aoi MaximumAreaAddressesMismatches (118)')
if mibBuilder.loadTexts: csIsisSysMaxAreaAddrMismatches.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMaxAreaAddrMismatches.setDescription('Number of times a PDU is received with a different value for MaximumAreaAddresses from that of the receiving system.')
csIsisSysOrigL2LSPBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 24), LSPBuffSize().clone(1492)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysOrigL2LSPBuffSize.setReference('ISIS.aoi originatingL2LSPBufferSize (26)')
if mibBuilder.loadTexts: csIsisSysOrigL2LSPBuffSize.setStatus('current')
if mibBuilder.loadTexts: csIsisSysOrigL2LSPBuffSize.setDescription('The maximum size of Level 2 LSPs and SNPs originated by this system. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisSysL2State = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 25), LevelState().clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysL2State.setReference('ISIS.aoi l2State (28)')
if mibBuilder.loadTexts: csIsisSysL2State.setStatus('current')
if mibBuilder.loadTexts: csIsisSysL2State.setDescription('The state of the Level 2 database.')
csIsisSysLSPL2DbaseOloads = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysLSPL2DbaseOloads.setReference('ISIS.aoi lSPL2DatabaseOverloads (32)')
if mibBuilder.loadTexts: csIsisSysLSPL2DbaseOloads.setStatus('current')
if mibBuilder.loadTexts: csIsisSysLSPL2DbaseOloads.setDescription('Number of times the Level 2 LSP database has become overloaded.')
csIsisSysAuthAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthAreaType.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAuthAreaType.setDescription('What authentication scheme, if any, is used to protect Level 1 Link State packets?')
csIsisSysAuthAreaTransPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 28), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthAreaTransPwd.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAuthAreaTransPwd.setDescription('The value to be used as the Authentication Key in Level 1 Link State Packets whenever the value of csIsisSysAuthAreaType has a value of plaintext. A modification of csIsisSysAuthAreaType does not modify the csIsisSysAuthAreaTransPwd value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
csIsisSysAuthDomainType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2), ("md5", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthDomainType.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAuthDomainType.setDescription('What authentication scheme, if any, is used to protect Level 2 Link State packets?')
csIsisSysAuthDomainTransPwd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 30), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAuthDomainTransPwd.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAuthDomainTransPwd.setDescription('The value to be used as the Authentication Key in Level 2 Link State Packets whenever the value of csIsisSysAuthDomainType has a value of plaintext. A modification of csIsisSysAuthDomainType does not modify the csIsisSysAuthDomainTransPwd value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
csIsisSysAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysAuthFails.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAuthFails.setDescription('The number of authentication failures recognized by this instance of the protocol.')
csIsisSysLSPIgnoreErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 32), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLSPIgnoreErrors.setStatus('current')
if mibBuilder.loadTexts: csIsisSysLSPIgnoreErrors.setDescription('If true, allow the router to ignore IS-IS link state packets (LSPs) that are received with internal checksum errors rather than purging the LSPs.')
csIsisSysLogAdjacencyChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 33), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLogAdjacencyChanges.setStatus('current')
if mibBuilder.loadTexts: csIsisSysLogAdjacencyChanges.setDescription('If true, causes IS-IS to generate a log message when an IS-IS adjacency changes state (up or down).')
csIsisSysPartChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisSysPartChanges.setStatus('current')
if mibBuilder.loadTexts: csIsisSysPartChanges.setDescription('partition changes')
csIsisSysMaxAreaCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 35), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysMaxAreaCheck.setStatus('current')
if mibBuilder.loadTexts: csIsisSysMaxAreaCheck.setDescription('When on, enables checking of maximum area addresses per IS version of ISO10589.')
csIsisSysNextCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 36), TestAndIncr()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysNextCircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisSysNextCircIndex.setDescription("This object is used to assign values to csIsisCircIndex as described in 'Textual Conventions for SNMPv2'. The network manager reads this object, and then writes the value back in a SET that creates a new instance of csIsisCircEntry. If the SET fails with the code 'inconsistentValue', then the process must be repeated; If the SET succeeds, then the ob- ject is incremented, and the new instance is created according to the manager's directions.")
csIsisSysExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 37), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysExistState.setStatus('current')
if mibBuilder.loadTexts: csIsisSysExistState.setDescription('The state of the ISIS router. Turning this off forces the router to forget all current state')
csIsisSysAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csIsisSysAdminStatus.setDescription('This object is used to enable/disable IS-IS routing on this Virtual Router.')
csIsisSysSPFL1Int = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysSPFL1Int.setStatus('current')
if mibBuilder.loadTexts: csIsisSysSPFL1Int.setDescription(' This object is used for SPF Level 1 Interval, it is in seconds.')
csIsisSysSPFL2Int = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysSPFL2Int.setStatus('current')
if mibBuilder.loadTexts: csIsisSysSPFL2Int.setDescription(' This object is used for SPF Level 2 Interval, it is in seconds.')
csIsisSysSPFStartInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysSPFStartInt.setStatus('current')
if mibBuilder.loadTexts: csIsisSysSPFStartInt.setDescription(' The number in seconds system will wait to start SPF Interval calculation.')
csIsisSysDefInfoOrig = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 42), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysDefInfoOrig.setStatus('current')
if mibBuilder.loadTexts: csIsisSysDefInfoOrig.setDescription('When on, distributes the default route into the IS-IS routing domain.')
csIsisSysL2TO1Leak = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 43), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysL2TO1Leak.setStatus('current')
if mibBuilder.loadTexts: csIsisSysL2TO1Leak.setDescription('When on, enables Level-2 to Level-1 route leaking.')
csIsisSysLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 44), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csIsisSysLogAreaFlag.setDescription('Each bit within this object enables loggin for a specific area within ISIS. Below is a list of the different areas available for logging within BGP and their corresponding bits identifiers. area bit ------------------------------------------------------ system 0 adj 1 lsp 2 snp 3 spf 4 packet recv 5 packet send 6 end of description.')
csIsisSysLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 1, 1, 45), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysLogLevelFlag.setStatus('current')
if mibBuilder.loadTexts: csIsisSysLogLevelFlag.setDescription('Each bit within this object enables logging at a specific level for ISIS. Below is a list of the different log levels available and their corresponding bits identifiers. area bit ------------------------------------------------------ critical 0 error 1 warning 2 information 3 detail 4 debug 5 end of description. ')
csIsisManAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2), )
if mibBuilder.loadTexts: csIsisManAreaAddrTable.setReference('ISIS.aoi manualAreaAddresses (10)')
if mibBuilder.loadTexts: csIsisManAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: csIsisManAreaAddrTable.setDescription('The set of manual area addresses configured on this Intermediate System.')
csIsisManAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisManAreaAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisManAreaAddr"))
if mibBuilder.loadTexts: csIsisManAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisManAreaAddrEntry.setDescription('Each entry contains one area address manually configured on this system')
csIsisManAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisManAreaAddrSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisManAreaAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
csIsisManAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1, 2), OSINSAddress())
if mibBuilder.loadTexts: csIsisManAreaAddr.setStatus('current')
if mibBuilder.loadTexts: csIsisManAreaAddr.setDescription('A manually configured area address for this system. This object follows the index behaviour. Note: an index for the entry {1, {49.0001} active} in this table would be the ordered pair (1, (0x03 0x49 0x00 0x01)), as the length of an Octet string is part of the OID.')
csIsisManAreaAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 2, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisManAreaAddrExistState.setStatus('current')
if mibBuilder.loadTexts: csIsisManAreaAddrExistState.setDescription('The state of the csIsisManAreaAddrEntry. This object follows the Row Status behaviour. If an attempt is made to set this object to the value off when the corresponding csIsisManAreaAddrEntry is the only valid entry for this instance and when the corresponding ISIS instance has csIsisSysOperState set to On then the attempt is rejected.')
csIsisAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3), )
if mibBuilder.loadTexts: csIsisAreaAddrTable.setReference('ISIS.aoi areaAddresses (18)')
if mibBuilder.loadTexts: csIsisAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: csIsisAreaAddrTable.setDescription('The union of the sets of area addresses reported in all Level 1 LSPs received by this instance of the protocol.')
csIsisAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisAreaAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisAreaAddr"))
if mibBuilder.loadTexts: csIsisAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisAreaAddrEntry.setDescription('Each entry contains one area address reported in a Level 1 LSP received by this instance of the protocol.')
csIsisAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisAreaAddrSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisAreaAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
csIsisAreaAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 3, 1, 2), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisAreaAddr.setStatus('current')
if mibBuilder.loadTexts: csIsisAreaAddr.setDescription('An area address reported in a Level 1 LSP received by this instance of the protocol.')
csIsisSysProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4), )
if mibBuilder.loadTexts: csIsisSysProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: csIsisSysProtSuppTable.setDescription('This table contains the manually configured set of protocols supported by each instance of the Integrated ISIS protocol.')
csIsisSysProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisSysProtSuppSysInstance"), (0, "COSINE-ORION-MIB", "csIsisSysProtSuppProtocol"))
if mibBuilder.loadTexts: csIsisSysProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisSysProtSuppEntry.setDescription('Each entry contains one protocol supported by an instance of the Integrated ISIS protocol.')
csIsisSysProtSuppSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisSysProtSuppSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisSysProtSuppSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
csIsisSysProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1, 2), SupportedProtocol())
if mibBuilder.loadTexts: csIsisSysProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: csIsisSysProtSuppProtocol.setDescription('One supported protocol. This object follows the index behaviour.')
csIsisSysProtSuppExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 4, 1, 3), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisSysProtSuppExistState.setStatus('current')
if mibBuilder.loadTexts: csIsisSysProtSuppExistState.setDescription('The state of the csIsisSysProtSuppEntry. This object follows the RowStatus behavior.')
csIsisL2SummAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5), )
if mibBuilder.loadTexts: csIsisL2SummAddrTable.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrTable.setDescription('The set of IP summary addresses to use in forming the contents of Level 2 LSPs originated by this level 2 Intermediate System.')
csIsisL2SummAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisL2SummAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisL2SummAddress"), (0, "COSINE-ORION-MIB", "csIsisL2SummAddrMask"))
if mibBuilder.loadTexts: csIsisL2SummAddrEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrEntry.setDescription('Each entry contains one IP summary address.')
csIsisL2SummAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisL2SummAddrSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviours.')
csIsisL2SummAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 2), IpAddress())
if mibBuilder.loadTexts: csIsisL2SummAddress.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddress.setDescription('The IP Address value for this summary address. This object follows the index behaviour.')
csIsisL2SummAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 3), IpAddress())
if mibBuilder.loadTexts: csIsisL2SummAddrMask.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrMask.setDescription('The mask value for this summary address. This object follows the index behaviour.')
csIsisL2SummAddrExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 4), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrExistState.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrExistState.setDescription('The existence state of this summary address. This object follows the row status behaviour.')
csIsisL2SummAddrOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 5), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrOperState.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrOperState.setDescription('The operational state of this entry. This object follows the operationalState behaviour. When the operational state changes if this would cause the contents of Level 2 LSPs originated by the system to change then those new LSPs must be generated and sent as soon as is permitted by the ISIS protocol.')
csIsisL2SummAddrDefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 6), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrDefaultMetric.setDescription('The default metric value to announce this summary address with in Level 2 LSPs generated by this system.')
csIsisL2SummAddrDelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 7), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrDelayMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrDelayMetric.setDescription('The delay metric value to announce this summary address with in Level 2 LSPs generated by this system. The value of zero is reserved to indicate that this metric is not supported.')
csIsisL2SummAddrExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 8), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrExpenseMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrExpenseMetric.setDescription('The expense metric value to announce this summary address with in Level 2 LSPs generated by this system. The value of zero is reserved to indicate that this metric is not supported.')
csIsisL2SummAddrErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 5, 1, 9), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisL2SummAddrErrorMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisL2SummAddrErrorMetric.setDescription('The error metric value to announce this summary address with in Level 2 LSPs generated by this system. The value of zero is reserved to indicate that this metric is not supported.')
csIsisExpPolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6), )
if mibBuilder.loadTexts: csIsisExpPolTable.setStatus('current')
if mibBuilder.loadTexts: csIsisExpPolTable.setDescription('A set of Export Policies (see csExpPolTable) that are applied by ISIS.')
csIsisExpPolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisExpPolId"))
if mibBuilder.loadTexts: csIsisExpPolEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisExpPolEntry.setDescription('Each entry represents a single export policy applied by the ISIS layer on a Virtual Router.')
csIsisExpPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisExpPolId.setStatus('current')
if mibBuilder.loadTexts: csIsisExpPolId.setDescription('The Export Policy (see the corresponding entry in csExpPolTable) that is applied to this Virtual Router.')
csIsisExpPolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 6, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisExpPolStatus.setStatus('current')
if mibBuilder.loadTexts: csIsisExpPolStatus.setDescription('The RowStatus object for this table. This is used to add and delete entries from this table.')
csIsisExpPolTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisExpPolTableEnd.setStatus('current')
if mibBuilder.loadTexts: csIsisExpPolTableEnd.setDescription('End of this group. value undefined')
csIsisCircTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1), )
if mibBuilder.loadTexts: csIsisCircTable.setStatus('current')
if mibBuilder.loadTexts: csIsisCircTable.setDescription('The table of circuits used by each instance of Integrated IS-IS on this system.')
csIsisCircEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisCircSysInstance"), (0, "COSINE-ORION-MIB", "csIsisCircIndex"))
if mibBuilder.loadTexts: csIsisCircEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisCircEntry.setDescription('An csIsisCircEntry exists for each circuit used by Integrated IS-IS on this system.')
csIsisCircSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisCircSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisCircSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index behaviour.')
csIsisCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisCircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisCircIndex.setDescription('The identifier of this circuit, unique within the instance of the protocol. This object follows the index behaviour. This is for SNMP Indexing purposes only and has no relation to any protocol value.')
csIsisCircIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircIfIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisCircIfIndex.setDescription('The value of ifIndex for the interface to which this circuit corresponds. This object cannot be modified after creation')
csIsisCircIfSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircIfSubIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisCircIfSubIndex.setDescription('A specifier for the part of the interface ifIndex to which this circuit corresponds, such as a DLCI or VPI/VCI. This object cannot be modified after creation')
csIsisCircLocalID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircLocalID.setStatus('current')
if mibBuilder.loadTexts: csIsisCircLocalID.setDescription('An identification that can be used in protocol packets to identify a circuit. Implementations may devise ways to assure that this value is suitable for the circuit it is used on. LAN packets only have space for 8 bits. Values of csIsisCircLocalID do not need to be unique. They are only required to differ on LANs where the Intermediate System is the Designated Intermediate System.')
csIsisCircOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 6), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircOperState.setStatus('current')
if mibBuilder.loadTexts: csIsisCircOperState.setDescription('The operational state of the circuit. This object follows the operationalState behaviour.')
csIsisCircExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 7), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircExistState.setStatus('current')
if mibBuilder.loadTexts: csIsisCircExistState.setDescription('The existence state of this circuit. This object follows the Row Status behaviour.')
csIsisCircType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("ptToPt", 2), ("staticIn", 3), ("staticOut", 4), ("dA", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircType.setReference('ISIS.aoi type (33)')
if mibBuilder.loadTexts: csIsisCircType.setStatus('current')
if mibBuilder.loadTexts: csIsisCircType.setDescription('The type of the circuit. This object follows the replaceOnlyWhileDisabled behaviour. The type specified must be compatible with the type of the interface defined by the value of csIsisCircIfIndex.')
csIsisCircL1DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 9), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1DefaultMetric.setReference('ISIS.aoi l1DefaultMetric (35)')
if mibBuilder.loadTexts: csIsisCircL1DefaultMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1DefaultMetric.setDescription('The default metric value of this circuit for Level 1 traffic.')
csIsisCircL1DelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 10), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1DelayMetric.setReference('ISIS.aoi l1DelayMetric (36)')
if mibBuilder.loadTexts: csIsisCircL1DelayMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1DelayMetric.setDescription('The delay metric value of this circuit for Level 1 traffic. The value of zero is reserved to indicate that this metric is not supported.')
csIsisCircL1ExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 11), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1ExpenseMetric.setReference('ISIS.aoi l1ExpenseMetric (37)')
if mibBuilder.loadTexts: csIsisCircL1ExpenseMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1ExpenseMetric.setDescription('The expense metric value of this circuit for Level 1 traffic. The value of zero is reserved to indicate that this metric is not supported.')
csIsisCircL1ErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 12), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1ErrorMetric.setReference('ISIS.aoi l1ErrorMetric (38)')
if mibBuilder.loadTexts: csIsisCircL1ErrorMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1ErrorMetric.setDescription('The error metric value of this circuit for Level 1 traffic. The value of zero is reserved to indicate that this metric is not supported.')
csIsisCircExtDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircExtDomain.setReference('ISIS.aoi externalDomain (46)')
if mibBuilder.loadTexts: csIsisCircExtDomain.setStatus('current')
if mibBuilder.loadTexts: csIsisCircExtDomain.setDescription('If true, suppress normal transmission of and interpretation of Intra-domain ISIS PDUs on this circuit.')
csIsisCircAdjChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircAdjChanges.setReference('ISIS.aoi changesInAdjacencyState (40)')
if mibBuilder.loadTexts: csIsisCircAdjChanges.setStatus('current')
if mibBuilder.loadTexts: csIsisCircAdjChanges.setDescription('The number of times an adjacency state change has occurred on this circuit.')
csIsisCircInitFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircInitFails.setReference('ISIS.aoi initializationFailures (41)')
if mibBuilder.loadTexts: csIsisCircInitFails.setStatus('current')
if mibBuilder.loadTexts: csIsisCircInitFails.setDescription('The number of times initialization of this circuit has failed.')
csIsisCircRejAdjs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircRejAdjs.setReference('ISIS.aoi rejectedAdjacencies (42)')
if mibBuilder.loadTexts: csIsisCircRejAdjs.setStatus('current')
if mibBuilder.loadTexts: csIsisCircRejAdjs.setDescription('The number of times an adjacency has been rejected on this circuit.')
csIsisCircOutCtrlPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircOutCtrlPDUs.setReference('ISIS.aoi iSISControlPDUsSent (43)')
if mibBuilder.loadTexts: csIsisCircOutCtrlPDUs.setStatus('current')
if mibBuilder.loadTexts: csIsisCircOutCtrlPDUs.setDescription('The number of IS-IS control PDUs sent on this circuit.')
csIsisCircInCtrlPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircInCtrlPDUs.setReference('ISIS.aoi controlPDUsReceived (44)')
if mibBuilder.loadTexts: csIsisCircInCtrlPDUs.setStatus('current')
if mibBuilder.loadTexts: csIsisCircInCtrlPDUs.setDescription('The number of IS-IS control PDUs received on this circuit.')
csIsisCircIDFieldLenMismatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircIDFieldLenMismatches.setReference('ISIS.aoi iDFieldLengthMismatches (25)')
if mibBuilder.loadTexts: csIsisCircIDFieldLenMismatches.setStatus('current')
if mibBuilder.loadTexts: csIsisCircIDFieldLenMismatches.setDescription('The number of times an IS-IS control PDU with an ID field length different to that for this system has been received.')
csIsisCircL2DefaultMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 20), DefaultMetric().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2DefaultMetric.setReference('ISIS.aoi l2DefaultMetric (68)')
if mibBuilder.loadTexts: csIsisCircL2DefaultMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2DefaultMetric.setDescription('The default metric value of this circuit for level 2 traffic.')
csIsisCircL2DelayMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 21), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2DelayMetric.setReference('ISIS.aoi l2DelayMetric (69)')
if mibBuilder.loadTexts: csIsisCircL2DelayMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2DelayMetric.setDescription('The delay metric value of this circuit for level 2 traffic. The value of zero is reserved to indicate that this metric is not supported.')
csIsisCircL2ExpenseMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 22), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2ExpenseMetric.setReference('ISIS.aoi l2ExpenseMetric (70)')
if mibBuilder.loadTexts: csIsisCircL2ExpenseMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2ExpenseMetric.setDescription('The expense metric value of this circuit for level 2 traffic. The value of zero is reserved to indicate that this metric is not supported.')
csIsisCircL2ErrorMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 23), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2ErrorMetric.setReference('ISIS.aoi l2ErrorMetric (71)')
if mibBuilder.loadTexts: csIsisCircL2ErrorMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2ErrorMetric.setDescription('The error metric value of this circuit for level 2 traffic. The value of zero is reserved to indicate that this metric is not supported.')
csIsisCircManL2Only = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircManL2Only.setReference('ISIS.aoi manualL2OnlyMode (72)')
if mibBuilder.loadTexts: csIsisCircManL2Only.setStatus('current')
if mibBuilder.loadTexts: csIsisCircManL2Only.setDescription('When true, indicates that this circuit is to be used only for level 2. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisCircL1ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 25), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1ISPriority.setReference('ISIS.aoi l1IntermediateSystemPriority (47)')
if mibBuilder.loadTexts: csIsisCircL1ISPriority.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1ISPriority.setDescription('The priority for becoming LAN Level 1 Deignated Intermediate System on a broadcast circuit.')
csIsisCircL1CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 26), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL1CircID.setReference('ISIS.aoi l1CircuitID (48)')
if mibBuilder.loadTexts: csIsisCircL1CircID.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1CircID.setDescription('The LAN ID allocated by the LAN Level 1 Designated Intermediate System. Where this system is not aware of the value (because it is not participating in the Level 1 Designated Intermediate System election), this object has the value which would be proposed for this circuit (i.e. the concatenation of the local system ID and the one octet local Circuit ID for this circuit.')
csIsisCircL1DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 27), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL1DesIS.setReference('ISIS.aoi l1DesignatedIntermediateSystem (49)')
if mibBuilder.loadTexts: csIsisCircL1DesIS.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1DesIS.setDescription('The ID of the LAN Level 1 Designated Intermediate System on this circuit. If, for any reason this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
csIsisCircLANL1DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircLANL1DesISChanges.setReference('ISIS.aoi lanL1DesignatedIntermediateSystemChanges (50)')
if mibBuilder.loadTexts: csIsisCircLANL1DesISChanges.setStatus('current')
if mibBuilder.loadTexts: csIsisCircLANL1DesISChanges.setDescription('The number of times the LAN Level 1 Designated Intermediate System has changed.')
csIsisCircL2ISPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 29), ISPriority().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2ISPriority.setReference('ISIS.aoi l2IntermediateSystemPriority (73)')
if mibBuilder.loadTexts: csIsisCircL2ISPriority.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2ISPriority.setDescription('The priority for becoming LAN level 2 Designated Intermediate System.')
csIsisCircL2CircID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 30), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL2CircID.setReference('ISIS.aoi l2CircuitID (74)')
if mibBuilder.loadTexts: csIsisCircL2CircID.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2CircID.setDescription('The LAN ID allocated by the LAN Level 2 Designated Intermediate System. Where this system is not aware of this value (because it is not participating in the Level 2 Designated Intermediate System election), this object has the value which would be proposed for this circuit (i.e. the concatenation of the local system ID and the one octet local Circuit ID for this circuit.')
csIsisCircL2DesIS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 31), SystemID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircL2DesIS.setReference('ISIS.aoi l2DesignatedIntermediateSystem (75)')
if mibBuilder.loadTexts: csIsisCircL2DesIS.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2DesIS.setDescription('The ID of the LAN Level 2 Designated Intermediate System on this circuit. If, for any reason, this system is not partaking in the relevant Designated Intermediate System election process, then the value returned is the zero length OCTET STRING.')
csIsisCircLANL2DesISChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircLANL2DesISChanges.setReference('ISIS.aoi lanL2DesignatedIntermediateSystemChanges (76)')
if mibBuilder.loadTexts: csIsisCircLANL2DesISChanges.setStatus('current')
if mibBuilder.loadTexts: csIsisCircLANL2DesISChanges.setDescription('The number of times the LAN Level 2 Designated Intermediate System has changed.')
csIsisCircMCAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("group", 1), ("functional", 2))).clone('group')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMCAddr.setStatus('current')
if mibBuilder.loadTexts: csIsisCircMCAddr.setDescription('Specifies which type of multicast address will be used for sending HELLO PDUs on this circuit.')
csIsisCircPtToPtCircID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 34), CircuitID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircPtToPtCircID.setReference('ISIS.aoi ptPtCircuitID (51)')
if mibBuilder.loadTexts: csIsisCircPtToPtCircID.setStatus('current')
if mibBuilder.loadTexts: csIsisCircPtToPtCircID.setDescription('The ID of the circuit allocated during initialization. If no value has been negotiated (either because the adjacency is to an End System, or because initialization has not yet successfully completed), this object has the value which would be proposed for this circuit (i.e. the concatenation of the local system ID and the one octet local Circuit ID for this circuit.')
csIsisCircL1HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1HelloTimer.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: csIsisCircL1HelloTimer.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1HelloTimer.setDescription('Maximum period, in milliseconds, between Level 1 IIH PDUs on multiaccess networks. It is also used as the period between Hellos on point to point circuits. This object follows the resettingTimer behaviour.')
csIsisCircL2HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2HelloTimer.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: csIsisCircL2HelloTimer.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2HelloTimer.setDescription('Maximum period, in milliseconds, between Level 1 IIH PDUs on multiaccess networks. This object follows the resettingTimer behaviour.')
csIsisCircL1HelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1HelloMultiplier.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: csIsisCircL1HelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1HelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer and the result in seconds (rounded up) is used as the holding time in transmitted hellos, to be used by receivers of hello packets from this IS')
csIsisCircL2HelloMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 100)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2HelloMultiplier.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: csIsisCircL2HelloMultiplier.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2HelloMultiplier.setDescription('This value is multiplied by the corresponding HelloTimer and the result in seconds (rounded up) is used as the holding time in transmitted hellos, to be used by receivers of hello packets from this IS')
csIsisCircDRL1HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircDRL1HelloTimer.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: csIsisCircDRL1HelloTimer.setStatus('current')
if mibBuilder.loadTexts: csIsisCircDRL1HelloTimer.setDescription('Period, in milliseconds, between Level 1 PDUs on multiaccess networks when this IS is the Designated Intermediate System. This object follows the resettingTimer behaviour.')
csIsisCircDRL2HelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 120000)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircDRL2HelloTimer.setReference('ISIS.aoi iSISHelloTimer (45)')
if mibBuilder.loadTexts: csIsisCircDRL2HelloTimer.setStatus('current')
if mibBuilder.loadTexts: csIsisCircDRL2HelloTimer.setDescription('Period, in milliseconds, between Level 2 PDUs on multiaccess networks when this IS is the Designated Intermediate System. This object follows the resettingTimer behaviour.')
csIsisCircMinBroadLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(33)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMinBroadLSPTransInt.setReference('ISIS.aoi minimumBroadcastLSPTransmissionInterval (7)')
if mibBuilder.loadTexts: csIsisCircMinBroadLSPTransInt.setStatus('current')
if mibBuilder.loadTexts: csIsisCircMinBroadLSPTransInt.setDescription('Minimum interval, in milliseconds, between transmission of LSPs on a broadcast circuit. This object follows the resettingTimer behaviour. This timer shall be capable of a resolution not coarser than 10 milliseconds.')
csIsisCircL1MinLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1MinLSPTransInt.setReference('ISIS.aoi minimumLSPTransmissionInterval (5)')
if mibBuilder.loadTexts: csIsisCircL1MinLSPTransInt.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1MinLSPTransInt.setDescription('Minimum interval, in seconds, between re-transmission of an Level 1 LSP. This object follows the resettingTimer behaviour.')
csIsisCircL2MinLSPTransInt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2MinLSPTransInt.setReference('ISIS.aoi minimumLSPTransmissionInterval (5)')
if mibBuilder.loadTexts: csIsisCircL2MinLSPTransInt.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2MinLSPTransInt.setDescription('Minimum interval, in seconds, between re-transmission of an Level 2 LSP. This object follows the resettingTimer behaviour.')
csIsisCircL1CSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1CSNPInterval.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircL1CSNPInterval.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1CSNPInterval.setDescription('Interval of time, in seconds, between transmission of Level 1 CSNPs on multiaccess networks if this router is the designated router.')
csIsisCircL2CSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2CSNPInterval.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircL2CSNPInterval.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2CSNPInterval.setDescription('Interval of time, in seconds, between transmission of Level 2 CSNPs on multiaccess networks if this router is the designated router.')
csIsisCircL1PartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1PartSNPInterval.setReference('ISIS.aoi partialSNPInterval (14)')
if mibBuilder.loadTexts: csIsisCircL1PartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1PartSNPInterval.setDescription('Minimum interval between sending Level 1 Partial Sequence Number PDUs. This object follows the resettingTimer behaviour.')
csIsisCircL2PartSNPInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2PartSNPInterval.setReference('ISIS.aoi partialSNPInterval (14)')
if mibBuilder.loadTexts: csIsisCircL2PartSNPInterval.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2PartSNPInterval.setDescription('Minimum interval between sending Level 2 Partial Sequence Number PDUs. This object follows the resettingTimer behaviour.')
csIsisCircLSPThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircLSPThrottle.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircLSPThrottle.setStatus('current')
if mibBuilder.loadTexts: csIsisCircLSPThrottle.setDescription('Minimal interval of time, in milliseconds, between transmissions of LSPs on a point to point interface.')
csIsisCircPassiveCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 49), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircPassiveCircuit.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircPassiveCircuit.setStatus('current')
if mibBuilder.loadTexts: csIsisCircPassiveCircuit.setDescription('Should we include this interface in LSPs, even if it is not running the ISIS Protocol?')
csIsisCircMeshGroupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inactive", 1), ("blocked", 2), ("set", 3))).clone('inactive')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMeshGroupEnabled.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircMeshGroupEnabled.setStatus('current')
if mibBuilder.loadTexts: csIsisCircMeshGroupEnabled.setDescription('Is this port a member of a mesh group, or blocked? Circuits in the same mesh group act as a virtual multiaccess network. LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group.')
csIsisCircMeshGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000000000)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircMeshGroup.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircMeshGroup.setStatus('current')
if mibBuilder.loadTexts: csIsisCircMeshGroup.setDescription('Circuits in the same mesh group act as a virtual multiaccess network. LSPs seen on one circuit in a mesh group will not be flooded to another circuit in the same mesh group. If csIsisCircMeshGroupEnabled is false, this value is ignored.')
csIsisCircL1AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1AuthType.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircL1AuthType.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1AuthType.setDescription('What authentication scheme, if any, is used to protect Level 1 and Point-to-Point hello packets?')
csIsisCircL1Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 53), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL1Password.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircL1Password.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL1Password.setDescription('The value to be used as the Authentication Key in Level 1 and Point-to-Point hello packets whenever the corresponding instance of csIsisCircL1AuthType has a value of plaintext. A modification of the corresponding instance of csIsisCircL1AuthType does not modify the csIsisCircL1Password value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
csIsisCircL2AuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("plaintext", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2AuthType.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircL2AuthType.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2AuthType.setDescription('What authentication scheme, if any, is used to protect Level 2 hello packets?')
csIsisCircL2Password = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 55), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255)).clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircL2Password.setReference('NONE')
if mibBuilder.loadTexts: csIsisCircL2Password.setStatus('current')
if mibBuilder.loadTexts: csIsisCircL2Password.setDescription('The value to be used as the Authentication Key in Level 1 Hello packets whenever the corresponding instance of csIsisCircL1AuthType has a value of plaintext. A modification of the corresponding instance of csIsisCircL1AuthType does not modify the csIsisCircL1Password value. Reading this object always results in an OCTET STRING of length zero; authentication may not be bypassed by reading the MIB object.')
csIsisCircSmallHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 56), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircSmallHellos.setStatus('current')
if mibBuilder.loadTexts: csIsisCircSmallHellos.setDescription('Can we send unpadded hellos on LAN circuits? Off means LAN Hellos must be padded.')
csIsisManAdjNeighNSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 57), OSINSAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisManAdjNeighNSAP.setStatus('current')
if mibBuilder.loadTexts: csIsisManAdjNeighNSAP.setDescription('The address of the neighbour if this is a manual adjacency. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisManAdjNeighSNPA = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 58), SNPAAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisManAdjNeighSNPA.setStatus('current')
if mibBuilder.loadTexts: csIsisManAdjNeighSNPA.setDescription('The SNPA of the neighbour if this is a manual adjacency. This object follows the replaceOnlyWhileDisabled behaviour.')
csIsisCircIPEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 59), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircIPEncaps.setStatus('current')
if mibBuilder.loadTexts: csIsisCircIPEncaps.setDescription('Should we encapsulate IS-IS in IP packets?')
csIsisCircUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircUpTime.setStatus('current')
if mibBuilder.loadTexts: csIsisCircUpTime.setDescription("The amount of time in seconds since this circuit entered state 'up'. Note: This can be implemented as start time less the current time.")
csIsisCircIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 61), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircIpAddress.setStatus('current')
if mibBuilder.loadTexts: csIsisCircIpAddress.setDescription('The IP Address of the VI that IS-IS is enabled on.')
csIsisCircLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level-1", 1), ("level-2", 2), ("level-1-2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisCircLevel.setStatus('current')
if mibBuilder.loadTexts: csIsisCircLevel.setDescription('This is the IS-IS circuit level. Level-1 only => isisCircLevel = 1, Level-2 only => isisCircLevel = 2, Level-1 or 2 => isisCircLevel = 3. ')
csIsisCircTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisCircTableEnd.setStatus('current')
if mibBuilder.loadTexts: csIsisCircTableEnd.setDescription('End of this group. value undefined')
csIsisISAdjTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1), )
if mibBuilder.loadTexts: csIsisISAdjTable.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjTable.setDescription('The table of adjacencies to Intermediate Systems.')
csIsisISAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjIndex"))
if mibBuilder.loadTexts: csIsisISAdjEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjEntry.setDescription('Each entry corresponds to one adjacency to an Intermediate System on this system.')
csIsisISAdjSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
csIsisISAdjCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjCircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjCircIndex.setDescription('The Circuit Index of the Circuit which is the parent of the IS adjacency.')
csIsisISAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIndex.setDescription('A unique value identifying the IS adjacency from all other such adjacencies on this circuit. This value is assigned by the system when the adjacency is created automatically.')
csIsisISAdjState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initializing", 1), ("up", 2), ("failed", 3), ("down", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjState.setReference('ISIS.aoi adjacencyState (78)')
if mibBuilder.loadTexts: csIsisISAdjState.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjState.setDescription('The state of the adjacency')
csIsisISAdjNeighSNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 5), SNPAAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighSNPAAddress.setReference('ISIS.aoi neighbourSNPAAddress (79)')
if mibBuilder.loadTexts: csIsisISAdjNeighSNPAAddress.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjNeighSNPAAddress.setDescription('The SNPA address of the neighboring system.')
csIsisISAdjNeighSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("intermediateSystem", 3), ("l1IntermediateSystem", 4), ("l2IntermediateSystem", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighSysType.setReference('ISIS.aoi neighbourSystemType (80)')
if mibBuilder.loadTexts: csIsisISAdjNeighSysType.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjNeighSysType.setDescription('The type of the neighboring system.')
csIsisISAdjNeighSysID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighSysID.setReference('ISIS.aoi neighbourSystemIds (83)')
if mibBuilder.loadTexts: csIsisISAdjNeighSysID.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjNeighSysID.setDescription("The system ID and circuit ID of the neighboring Intermediate System set from the source ID field of the neighbor's IIH PDUs.")
csIsisISAdjUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("level1", 2), ("level2", 3), ("level1and2", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjUsage.setReference('ISIS.aoi adjacencyUsage (82)')
if mibBuilder.loadTexts: csIsisISAdjUsage.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjUsage.setDescription('An adjacency of type level1 is used for level 1 traffic only. An adjacency of type level2 is used for level 2 traffic only. An adjacency of type level1and2 is used for both level 1 and level 2 traffic. There may be two adjacencies (of types level1 and level2) between the same pair of Intermediate Systems.')
csIsisISAdjHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjHoldTimer.setReference('ISIS.aoi holdingTimer (85)')
if mibBuilder.loadTexts: csIsisISAdjHoldTimer.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjHoldTimer.setDescription('The holding time for this adjacency updated from received IIH PDUs.')
csIsisISAdjNeighPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 10), ISPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjNeighPriority.setReference('ISIS.aoi lANPriority (86)')
if mibBuilder.loadTexts: csIsisISAdjNeighPriority.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjNeighPriority.setDescription('Priority of the neighboring Intermediate System for becoming the LAN Level 1 Designated Intermediate System if the value of csIsisISAdjNeighSysType is L1IntermediateSystem or LAN Level 2 Designated Intermediate System if the value of csIsisISAdjNeighSysType is L2IntermediateSystem.')
csIsisISAdjUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjUpTime.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjUpTime.setDescription("The amount of time in seconds since this adjacency entered state 'up'. Note: This can be implemented as start time less the current time.")
csIsisISAdjAreaAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2), )
if mibBuilder.loadTexts: csIsisISAdjAreaAddrTable.setReference('ISIS.aoi areaAddressesOfNeighbour (84)')
if mibBuilder.loadTexts: csIsisISAdjAreaAddrTable.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjAreaAddrTable.setDescription('This table contains the set of Area Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
csIsisISAdjAreaAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddrCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddrAdjIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjAreaAddress"))
if mibBuilder.loadTexts: csIsisISAdjAreaAddrEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjAreaAddrEntry.setDescription('Each entry contains one Area Address reported by a neighboring Intermediate System in its IIH PDUs.')
csIsisISAdjAreaAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjAreaAddrSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjAreaAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
csIsisISAdjAreaAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjAreaAddrCircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjAreaAddrCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency to which this Area Address entry corresponds.')
csIsisISAdjAreaAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjAreaAddrAdjIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjAreaAddrAdjIndex.setDescription('The identifier of the IS adjacency to which this entry belongs.')
csIsisISAdjAreaAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 2, 1, 4), OSINSAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjAreaAddress.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjAreaAddress.setDescription('One Area Address as reported in IIH PDUs received from the neighbor.')
csIsisISAdjIPAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3), )
if mibBuilder.loadTexts: csIsisISAdjIPAddrTable.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIPAddrTable.setDescription('This table contains the set of IP Addresses of neighboring Intermediate Systems as reported in received IIH PDUs.')
csIsisISAdjIPAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjIPAddrSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjIPAddrCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjIPAddrAdjIndex"))
if mibBuilder.loadTexts: csIsisISAdjIPAddrEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIPAddrEntry.setDescription('Each entry contains one IP Address reported by a neighboring Intermediate System in its IIH PDUs.')
csIsisISAdjIPAddrSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIPAddrSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIPAddrSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
csIsisISAdjIPAddrCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIPAddrCircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIPAddrCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency to which this IP Address entry corresponds.')
csIsisISAdjIPAddrAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjIPAddrAdjIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIPAddrAdjIndex.setDescription('The identifier of the IS adjacency to which this entry belongs.')
csIsisISAdjIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 3, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjIPAddress.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjIPAddress.setDescription('One IP Address as reported in IIH PDUs received from the neighbor.')
csIsisISAdjProtSuppTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4), )
if mibBuilder.loadTexts: csIsisISAdjProtSuppTable.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppTable.setDescription('This table contains the set of protocols supported by neighboring Intermediate Systems as reported in received IIH PDUs.')
csIsisISAdjProtSuppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppSysInstance"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppCircIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppAdjIndex"), (0, "COSINE-ORION-MIB", "csIsisISAdjProtSuppProtocol"))
if mibBuilder.loadTexts: csIsisISAdjProtSuppEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppEntry.setDescription('Each entry contains one protocol supported by a neighboring Intermediate System as reported in its IIH PDUs.')
csIsisISAdjProtSuppSysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisISAdjProtSuppSysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppSysInstance.setDescription('The unique identifier of the Integrated IS-IS instance to which this row corresponds.')
csIsisISAdjProtSuppCircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisISAdjProtSuppCircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppCircIndex.setDescription('The identifier of the Circuit which is the parent of the IS adjacency to which this supported protocol entry corresponds.')
csIsisISAdjProtSuppAdjIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisISAdjProtSuppAdjIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppAdjIndex.setDescription('The identifier the IS adjacency to which this entry corresponds.')
csIsisISAdjProtSuppProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 4, 1, 4), SupportedProtocol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjProtSuppProtocol.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppProtocol.setDescription('One supported protocol as reported in IIH PDUs received from the neighbor.')
csIsisISAdjProtSuppTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIsisISAdjProtSuppTableEnd.setStatus('current')
if mibBuilder.loadTexts: csIsisISAdjProtSuppTableEnd.setDescription('End of this group. value undefined')
csIsisIPRATable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1), )
if mibBuilder.loadTexts: csIsisIPRATable.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRATable.setDescription('The table of IP Reachable Addresses to networks, subnetworks or hosts either manually configured or learned from another protocol.')
csIsisIPRAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIsisIPRASysInstance"), (0, "COSINE-ORION-MIB", "csIsisIPRACircIndex"), (0, "COSINE-ORION-MIB", "csIsisIPRAType"), (0, "COSINE-ORION-MIB", "csIsisIPRAIndex"))
if mibBuilder.loadTexts: csIsisIPRAEntry.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAEntry.setDescription('Each entry defines an IP Reachable Address to a network, subnetwork or host.')
csIsisIPRASysInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csIsisIPRASysInstance.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRASysInstance.setDescription('The identifier of the Integrated IS-IS instance to which this row corresponds. This object follows the index and manualOrAutomatic behaviours.')
csIsisIPRACircIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csIsisIPRACircIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRACircIndex.setDescription('The identifier of the Circuit over which this IP destination is reachable. This object follows the index and manualOrAutomatic behaviours.')
csIsisIPRAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: csIsisIPRAIndex.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAIndex.setDescription('The identifier for this csIsisIPRAEntry. This value must be unique amongst all IP Reachable Addresses on the same parent Circuit. This object follows the index and manualOrAutomatic behaviours.')
csIsisIPRAType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2))))
if mibBuilder.loadTexts: csIsisIPRAType.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAType.setDescription('The type of this IP Reachable Address. Those of type manual are created by the network manager. Those of type automatic are created through propagation of routing information from another routing protocol.')
csIsisIPRADest = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADest.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRADest.setDescription('The destination of this IP Reachable Address. This is either a network address, subnetwork address or host address. This object follows the manualOrAutomatic behaviour.')
csIsisIPRAMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAMask.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAMask.setDescription('The network mask for the IP Address in the csIsisIPRADest object. This object follows the manualOrAutomatic behaviour.')
csIsisIPRAExistState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 7), RowStatus().clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAExistState.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAExistState.setDescription('The state of this IP Reachable Address. This object follows the ExistenceState and manualOrAutomatic behaviours.')
csIsisIPRAOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 8), OperState().clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAOperState.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAOperState.setDescription('The operational state of the IP Reachable Address. This object follows the operationalState and manualOrAutomatic behaviours.')
csIsisIPRADefMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 9), DefaultMetric().clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADefMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRADefMetric.setDescription('The default metric value for reaching the specified destination over this circuit. This object follows the manualOrAutomatic behaviour.')
csIsisIPRADelMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 10), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADelMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRADelMetric.setDescription('The delay metric value for reaching the specified destination over this circuit. The value zero is reserved to mean the metric is not supported. This object follows the manualOrAutomatic behaviour.')
csIsisIPRAExpMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 11), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAExpMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAExpMetric.setDescription('The expense metric value for reaching the specified destination over this circuit. The value zero is reserved to mean the metric is not supported. This object follows the manualOrAutomatic behaviour.')
csIsisIPRAErrMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 12), OtherMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAErrMetric.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAErrMetric.setDescription('The error metric value for reaching the specified destination over this circuit. The value zero is reserved to mean the metric is not supported. This object follows the manualOrAutomatic behaviour.')
csIsisIPRADefMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 13), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADefMetricType.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRADefMetricType.setDescription('Indicates whether the default metric is internal or external. This object follows the manualOrAutomatic behaviour.')
csIsisIPRADelMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 14), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRADelMetricType.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRADelMetricType.setDescription('Indicates whether the delay metric is internal or external. This object follows the manualOrAutomatic behaviour.')
csIsisIPRAExpMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 15), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAExpMetricType.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAExpMetricType.setDescription('Indicates whether the expense metric is internal or external. This object follows the manualOrAutomatic behaviour.')
csIsisIPRAErrMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 16), MetricType().clone('internal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRAErrMetricType.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRAErrMetricType.setDescription('Indicates whether the error metric is internal or external. This object follows the manualOrAutomatic behaviour.')
csIsisIPRASNPAAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 5, 1, 1, 17), SNPAAddress().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIsisIPRASNPAAddress.setStatus('current')
if mibBuilder.loadTexts: csIsisIPRASNPAAddress.setDescription('The SNPA Address to which a PDU may be forwarded in order to reach a destination which matches this IP Reachable Address. This object follows the manualOrAutomatic behaviour.')
csOrionIsisEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIsisEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionIsisEnd.setDescription('End of this group. value undefined')
csRsvpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1), )
if mibBuilder.loadTexts: csRsvpSessionTable.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionTable.setDescription('This table has one row for each session being managed by LSR. It provides the statistics pertaining to the session.')
csRsvpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csRsvpSessionTunnelEndpoint"), (0, "COSINE-ORION-MIB", "csRsvpSessionTunnelID"))
if mibBuilder.loadTexts: csRsvpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionEntry.setDescription('An entry in this table is created by LSR for every established session. This entry is indexed by Session destination IP address Tunnel Identifier and Extended Tunnel Identifier.')
csRsvpSessionTunnelEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: csRsvpSessionTunnelEndpoint.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionTunnelEndpoint.setDescription('One of the indices for the row of the table. Specifies the IP address (IPv4 only supported) of the destination of the Session.')
csRsvpSessionTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csRsvpSessionTunnelID.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionTunnelID.setDescription('One of the indices for the row of the table. Specifies the Tunnel identifier of the Session.')
csRsvpSessionExtendedTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: csRsvpSessionExtendedTunnelID.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionExtendedTunnelID.setDescription('One of the indices for the row of the table. Specifies the Extended Tunnel identifier of the Session.')
csRsvpSessionUpPsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionUpPsbs.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionUpPsbs.setDescription('This object specifies the number of upside senders (Up PSBs) for this session known to this processor of this LSR.')
csRsvpSessionDownPsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionDownPsbs.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionDownPsbs.setDescription('This object specifies the number of downside senders (Down PSBs) for this session known to this processor of this LSR.')
csRsvpSessionUpRsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionUpRsbs.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionUpRsbs.setDescription('This object specifies the number of upside receivers (Up RSBs) for this session known to this processor of this LSR.')
csRsvpSessionDownRsbs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpSessionDownRsbs.setStatus('current')
if mibBuilder.loadTexts: csRsvpSessionDownRsbs.setDescription('This object specifies the number of downside receivers (Down RSBs) for this session known to this processor of this LSR.')
csRsvpIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2), )
if mibBuilder.loadTexts: csRsvpIfTable.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfTable.setDescription('This table has one row each for every interface of this LSR running TE-RSVP. Corresponding row in csRsvpNbrTable must be configured before a row in this table can be activated.')
csRsvpIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csRsvpIfEntry.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfEntry.setDescription('An entry in this table is created for every interface running TE-RSVP.')
csRsvpIfMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfMaxBandwidth.setDescription('RSVP Reservable Bandwidth (KBPS)')
csRsvpIfMaxFlowBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfMaxFlowBandwidth.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfMaxFlowBandwidth.setDescription('Largest Reservable Flow (KBPS)')
csRsvpIfUdpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfUdpNbrs.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfUdpNbrs.setDescription('The number of neighbors perceived to be using only the RSVP UDP Encapsulation.')
csRsvpIfIpNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfIpNbrs.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfIpNbrs.setDescription('The number of neighbors perceived to be using only the RSVP IP Encapsulation.')
csRsvpIfNbrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfNbrs.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfNbrs.setDescription('The number of neighbors currently perceived; this will exceed rsvpIfIpNbrs + rsvpIfUdpNbrs by the number of neighbors using both encapsulations.')
csRsvpIfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfEnabled.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfEnabled.setDescription('If TRUE, RSVP is enabled on this Interface. If FALSE, RSVP is not enabled on this interface.')
csRsvpIfUdpRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfUdpRequired.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfUdpRequired.setDescription('If TRUE, manual configuration forces the use of UDP encapsulation on the interface. If FALSE, UDP encapsulation is only used if rsvpIfUdpNbrs is not zero.')
csRsvpIfRefreshBlockadeMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRefreshBlockadeMultiple.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfRefreshBlockadeMultiple.setDescription("The value of the RSVP value 'Kb', Which is the minimum number of refresh intervals that blockade state will last once entered.")
csRsvpIfRefreshMultiple = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRefreshMultiple.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfRefreshMultiple.setDescription("The value of the RSVP value 'K', which is the number of refresh intervals which must elapse (minimum) before a PATH or RESV message which is not being refreshed will be aged out.")
csRsvpIfTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfTTL.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfTTL.setDescription('The value of SEND_TTL used on this interface for messages this node originates. If set to zero, the node determines the TTL via other means.')
csRsvpIfRefreshInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 11), TimeInterval().clone(3000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRefreshInterval.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfRefreshInterval.setDescription("The value of the RSVP value 'R', which is the minimum period between refresh transmissions of a given PATH or RESV message on an interface.")
csRsvpIfRouteDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 12), TimeInterval().clone(200)).setUnits('hundredths of a second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRouteDelay.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfRouteDelay.setDescription('The approximate period from the time a route is changed to the time a resulting message appears on the interface.')
csRsvpIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfStatus.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfStatus.setDescription("'active' on interfaces that are configured for RSVP. Corresponding row in csRsvpNbrTable must be configured and activated before the row in this table can be activated.")
csRsvpIfPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPktsIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPktsIn.setDescription('Number of RSVP Packets received in this interface.')
csRsvpIfPathIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPathIn.setDescription('Number of PATH messages received on this interface.')
csRsvpIfResvIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvIn.setDescription('Number of RESV messages received on this interface.')
csRsvpIfPathTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathTearIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPathTearIn.setDescription('Number of Path Tear messages received on this interface.')
csRsvpIfPathErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathErrIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPathErrIn.setDescription('Number of Path Error messages received on this interface.')
csRsvpIfResvTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvTearIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvTearIn.setDescription('Number of Resv Tear messages received on this interface.')
csRsvpIfResvErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvErrIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvErrIn.setDescription('Number of RESV Error messages received on this interface.')
csRsvpIfResvConfIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvConfIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvConfIn.setDescription('Number of RESV COnfirmation messages received on this interface.')
csRsvpIfPathOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPathOut.setDescription('Number of Path messages sent out over this interface.')
csRsvpIfResvOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvOut.setDescription('Number of Resv messages sent out over this interface.')
csRsvpIfPathTearOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathTearOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPathTearOut.setDescription('Number of Path Tear messages sent out over this interface.')
csRsvpIfPathErrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfPathErrOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfPathErrOut.setDescription('Number of Path Error messages sent out over this interface.')
csRsvpIfResvTearOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvTearOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvTearOut.setDescription('Number of Resv Tear messages sent out over this interface.')
csRsvpIfResvErrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvErrOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvErrOut.setDescription('Number of Resv Error messages sent out over this interface.')
csRsvpIfResvConfOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfResvConfOut.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfResvConfOut.setDescription('Number of Resv Confirm messages sent out over this interface.')
csRsvpIfBadPathIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadPathIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadPathIn.setDescription('Number of bad Path messages received over this interface.')
csRsvpIfBadResvIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadResvIn.setDescription('Number of bad Resv messages received over this interface.')
csRsvpIfBadPathTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadPathTearIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadPathTearIn.setDescription('Number of bad Path Tear messages received over this interface.')
csRsvpIfBadPathErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadPathErrIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadPathErrIn.setDescription('Number of bad Path Error messages received over this interface.')
csRsvpIfBadResvTearIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvTearIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadResvTearIn.setDescription('Number of bad Resv Tear messages received over this interface.')
csRsvpIfBadResvErrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvErrIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadResvErrIn.setDescription('Number of bad Resv Error messages received over this interface.')
csRsvpIfBadResvConfIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadResvConfIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadResvConfIn.setDescription('Number of bad Resv Confirm messages received over this interface.')
csRsvpIfBadOtherIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfBadOtherIn.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfBadOtherIn.setDescription('Number of messages received over this interface which were not valid RSVP messages.')
csRsvpIfUpPsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfUpPsbsCreated.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfUpPsbsCreated.setDescription('Number of Upside PSBs created so far on this interface.')
csRsvpIfDownPsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfDownPsbsCreated.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfDownPsbsCreated.setDescription('Number of Downside PSBs created so far on this interface.')
csRsvpIfUpRsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfUpRsbsCreated.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfUpRsbsCreated.setDescription('Number of Upside RSBs created so far on this interface.')
csRsvpIfDownRsbsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfDownRsbsCreated.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfDownRsbsCreated.setDescription('Number of Downside RSBs created so far on this interface.')
csRsvpIfIngressLspsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfIngressLspsCreated.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfIngressLspsCreated.setDescription('Number of LSPs created on this node which were originated from this interface of this node.')
csRsvpIfEgressLspsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfEgressLspsCreated.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfEgressLspsCreated.setDescription('Number of LSPs created on this node which were terminated on this interface of this node.')
csRsvpIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 43), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfIpAddress.setDescription('The IP Address of this RSVP interface.')
csRsvpIfRRCapable = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfRRCapable.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfRRCapable.setDescription("Indicates the administrator's intent to switch on/off RSVP aggregation on the interface. Aggregation includes RSVP Refresh Reduction related messages.")
csRsvpIfAckDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfAckDesired.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfAckDesired.setDescription("Indicates the administrator's intent as to whether acknowledgement is desired for the aggregation messages on this interface. If the administrator switches this variable on, then RSVP aggregation (csRsvpIfRRCapable) is switched ON automatically.")
csRsvpIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfHelloInterval.setDescription('Configures the interval in seconds between Rsvp Hello messages exchanged between neighbors, on this interface.')
csRsvpVrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3), )
if mibBuilder.loadTexts: csRsvpVrConfTable.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrConfTable.setDescription('This table is used to provide RSVP related functionality at the router level')
csRsvpVrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csRsvpVrConfEntry.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrConfEntry.setDescription('This entry is indexed by the VPN and VR ID')
csRsvpVrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrAdminStatus.setDescription("Indicates the administrator's intent as to whether RSVP should be enabled or disabled on this router.")
csRsvpVrEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrEventLogLevel.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrEventLogLevel.setDescription('This object is used to set the level of details for event logs for RSVP ')
csRsvpVrEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrEventLogArea.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrEventLogArea.setDescription('This object is used to set the area of event logs for RSVP')
csRsvpVrConfOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrConfOpCode.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrConfOpCode.setDescription('Used by Rsvp Trace Commands')
csRsvpVrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpVrConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrConfRowStatus.setDescription('A row status type for the Rsvp Table')
csRsvpVrConfTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpVrConfTableEnd.setStatus('current')
if mibBuilder.loadTexts: csRsvpVrConfTableEnd.setDescription('End of this group. value undefined')
csRsvpIfQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5), )
if mibBuilder.loadTexts: csRsvpIfQueueTable.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueTable.setDescription('This table is used to allocate MPLS bandwidth for different hardware queues on a physical VI.')
csRsvpIfQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csRsvpIfQueueID"))
if mibBuilder.loadTexts: csRsvpIfQueueEntry.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueEntry.setDescription('An entry in this table is created for every hardware queue on a physical VI to reserve bandwidth for MPLS.')
csRsvpIfQueueID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))))
if mibBuilder.loadTexts: csRsvpIfQueueID.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueID.setDescription('The possible queue on a physical VI')
csRsvpIfQueueBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 10000000)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfQueueBandwidth.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueBandwidth.setDescription('The maximum reservable bandwidth for MPLS.')
csRsvpIfQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csRsvpIfQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueRowStatus.setDescription('A row status type for this table')
csRsvpIfQueueOperBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfQueueOperBandwidth.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueOperBandwidth.setDescription('Operational Bandwidth for the queue')
csRsvpIfQueueTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csRsvpIfQueueTableEnd.setStatus('current')
if mibBuilder.loadTexts: csRsvpIfQueueTableEnd.setDescription('End of this group. value undefined')
csMplsLspTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1), )
if mibBuilder.loadTexts: csMplsLspTable.setStatus('current')
if mibBuilder.loadTexts: csMplsLspTable.setDescription('List of Configured Label Switched Paths.')
csMplsLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsLspID"), (0, "COSINE-ORION-MIB", "csMplsLspName"), (0, "COSINE-ORION-MIB", "csMplsLspPreference"))
if mibBuilder.loadTexts: csMplsLspEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsLspEntry.setDescription('Entry containing information about a particular Label Switched Path.')
csMplsLspID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csMplsLspID.setStatus('current')
if mibBuilder.loadTexts: csMplsLspID.setDescription('This object identifies a Label Switched Path.')
csMplsLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csMplsLspName.setStatus('current')
if mibBuilder.loadTexts: csMplsLspName.setDescription('Name of the Label Switched Path.')
csMplsLspState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspState.setStatus('current')
if mibBuilder.loadTexts: csMplsLspState.setDescription('The operational state of the LSP.')
csMplsLspOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspOctets.setStatus('current')
if mibBuilder.loadTexts: csMplsLspOctets.setDescription('The number of octets that have been forwarded over current LSP active path. The number reported is not realtime, may subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
csMplsLspPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspPackets.setStatus('current')
if mibBuilder.loadTexts: csMplsLspPackets.setDescription('The number of packets that have been forwarded over current LSP active path. The number reported is not realtime, may subject to several minutes delay. The delay is controllable by mpls statistics gathering interval, which by default is once every 5 minutes. If mpls statistics gathering is not enabled, this number will not increment.')
csMplsLspAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 6), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspAge.setStatus('current')
if mibBuilder.loadTexts: csMplsLspAge.setDescription('The age (i.e., time from creation till now) of this LSP in 10-millisecond periods.')
csMplsLspTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 7), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspTimeUp.setStatus('current')
if mibBuilder.loadTexts: csMplsLspTimeUp.setDescription('The total time in 10-millisecond units that this LSP has been operational. For example, the percentage up time can be determined by computing (mplsLspTimeUp/mplsLspAge * 100 %).')
csMplsLspPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 8), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspPrimaryTimeUp.setStatus('current')
if mibBuilder.loadTexts: csMplsLspPrimaryTimeUp.setDescription("The total time in 10-millisecond units that this LSP's primary path has been operational. For example, the percentage contribution of the primary path to the operational time is given by (mplsLspPrimaryTimeUp/mplsLspTimeUp * 100) %.")
csMplsLspTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspTransitions.setStatus('current')
if mibBuilder.loadTexts: csMplsLspTransitions.setDescription('The number of state transitions (up -> down and down -> up) this LSP has undergone.')
csMplsLspLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 10), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspLastTransition.setStatus('current')
if mibBuilder.loadTexts: csMplsLspLastTransition.setDescription('The time in 10-millisecond units since the last transition occurred on this LSP.')
csMplsLspPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspPathChanges.setStatus('current')
if mibBuilder.loadTexts: csMplsLspPathChanges.setDescription('The number of path changes this LSP has had. For every path change (path down, path up, path change), a corresponding syslog/trap (if enabled) is generated for it.')
csMplsLspLastPathChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 12), TimeStamp()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspLastPathChange.setStatus('current')
if mibBuilder.loadTexts: csMplsLspLastPathChange.setDescription('The time in 10-millisecond units since the last change occurred on this LSP.')
csMplsLspConfiguredPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspConfiguredPaths.setStatus('current')
if mibBuilder.loadTexts: csMplsLspConfiguredPaths.setDescription('The number of paths configured for this LSP.')
csMplsLspStandbyPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspStandbyPaths.setStatus('current')
if mibBuilder.loadTexts: csMplsLspStandbyPaths.setDescription('The number of standby paths configured for this LSP.')
csMplsLspOperationalPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 15), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspOperationalPaths.setStatus('current')
if mibBuilder.loadTexts: csMplsLspOperationalPaths.setDescription('The number of operational paths for this LSP. This includes the path currently active, as well as operational standby paths.')
csMplsLspFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 16), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspFrom.setStatus('current')
if mibBuilder.loadTexts: csMplsLspFrom.setDescription('Source IP address of this LSP.')
csMplsLspTo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 17), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspTo.setStatus('current')
if mibBuilder.loadTexts: csMplsLspTo.setDescription('Destination IP address of this LSP.')
csMplsPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathName.setStatus('current')
if mibBuilder.loadTexts: csMplsPathName.setDescription('The name of the active path for this LSP, if any. If there is none, the name should be empty.')
csMplsPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("standby", 3), ("secondary", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathType.setStatus('current')
if mibBuilder.loadTexts: csMplsPathType.setDescription('The type of path that is active, i.e., a primary path, a standby path, or a generic secondary path. This field is meaningless if csMplsPathName or csMplsPathIdentifier is not supplied')
csMplsPathBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 20), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathBandwidth.setStatus('current')
if mibBuilder.loadTexts: csMplsPathBandwidth.setDescription('The configured bandwidth for this LSP, in units of thousands of bits per second (Kbps).')
csMplsPathCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathCOS.setStatus('current')
if mibBuilder.loadTexts: csMplsPathCOS.setDescription('The configured Class Of Service on this path. If the value is between 0 and 7 inclusive, this value will be inserted in the 3 bit COS field in the label. If the value is 255, the value in the COS field of the label will depend on other factors. This field is meaningless if csMplsPathName or csMplsPathIdentifier is not supplied')
csMplsPathInclude = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathInclude.setStatus('current')
if mibBuilder.loadTexts: csMplsPathInclude.setDescription("This is a configured set of colors (administrative groups) specified as a bit vector (i.e., bit n is 1 if color n is in the set, where n = 0 is the LSB). For each link that this path goes through, the link MUST have colors associated with it, and the intersection of the link's colors and the 'include' set MUST be non-null. This field is meaningless if csMplsPathName or csMplsPathIdentifier is not supplied")
csMplsPathExclude = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathExclude.setStatus('current')
if mibBuilder.loadTexts: csMplsPathExclude.setDescription("This is a configured set of colors (administrative groups) specified as a bit vector (i.e., bit n is 1 if color n is in the set, where n = 0 is the LSB). For each link that this path goes through, the link MUST have colors associated with it, and the intersection of the link's colors and the 'exclude' set MUST be null.This field is meaningless if csMplsPathName or csMplsPathIdentifier is not supplied")
csMplsPathSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathSetupPriority.setStatus('current')
if mibBuilder.loadTexts: csMplsPathSetupPriority.setDescription('The setup priority configured for this path.')
csMplsPathHoldPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathHoldPriority.setStatus('current')
if mibBuilder.loadTexts: csMplsPathHoldPriority.setDescription('The hold priority configured for this path.')
csMplsPathRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathRecordRoute.setStatus('current')
if mibBuilder.loadTexts: csMplsPathRecordRoute.setDescription('This is used to set record route')
csMplsPathDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathDynamic.setStatus('current')
if mibBuilder.loadTexts: csMplsPathDynamic.setDescription('This is used to configure a dynamic path')
csMplsPathIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathIdentifier.setStatus('current')
if mibBuilder.loadTexts: csMplsPathIdentifier.setDescription(' Path-option explicit-path identifier')
csMplsPathBgpAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathBgpAutoRouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csMplsPathBgpAutoRouteAnnounce.setDescription(' Used to specify that the IGP should use the tunnel (if the tunnel is up) in its enhanced shortest path first (SPF) calculation.')
csMplsPathMetricMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("other", 0), ("absolute", 1), ("relative", 2))).clone('relative')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathMetricMode.setStatus('current')
if mibBuilder.loadTexts: csMplsPathMetricMode.setDescription('Used to specify the MPLS traffic engineering tunnel metric type that the IGP enhanced SPF calculation uses. MetricMode can be absolute or relative')
csMplsPathMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 31), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathMetricValue.setStatus('current')
if mibBuilder.loadTexts: csMplsPathMetricValue.setDescription('Absolute metric mode the user can enter a positive value and for relative metric mode the user can enter a positive negative or zero value')
csMplsPathAffinity = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 32), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathAffinity.setStatus('current')
if mibBuilder.loadTexts: csMplsPathAffinity.setDescription('Used to configure an affinity for an MPLS traffic engineering tunnel')
csMplsPathAffinityMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 33), Integer32().clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathAffinityMask.setStatus('current')
if mibBuilder.loadTexts: csMplsPathAffinityMask.setDescription('Used to configure affinity mask value for an MPLS traffic engineering tunnel')
csMplsLspPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535))
if mibBuilder.loadTexts: csMplsLspPreference.setStatus('current')
if mibBuilder.loadTexts: csMplsLspPreference.setDescription('Used to set the Lsp Preference Value')
csMplsLspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsLspRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsLspRowStatus.setDescription('A row status type for the Lsp Table')
csMplsPathIsisAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathIsisAutoRouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csMplsPathIsisAutoRouteAnnounce.setDescription(' Used to specify that the IGP should use the tunnel (if the tunnel is up) in its enhanced shortest path first (SPF) calculation.Used by Isis.')
csMplsPathOspfAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathOspfAutoRouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csMplsPathOspfAutoRouteAnnounce.setDescription(' Used to specify that the IGP should use the tunnel (if the tunnel is up) in its enhanced shortest path first (SPF) calculation. Used by Ospf.')
csMplsVrPathRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 38), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsVrPathRecordRoute.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathRecordRoute.setDescription('This entry records the path recorded by Rsvp for the tunnel. This field is a displayable string in the format of XXX.XXX.XXX.XXX repeated for each explicit address.')
csMplsLspOperationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("operationallyDown", 1), ("initializing", 2), ("operationallyUp", 3), ("faultRecovery", 4), ("testing", 5), ("unknown", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsLspOperationStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsLspOperationStatus.setDescription('This object contains the operational status for the LSP')
csMplsPathExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathExpValue.setStatus('current')
if mibBuilder.loadTexts: csMplsPathExpValue.setDescription('Exp Value to use for this path')
csMplsPathCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathCosValue.setStatus('current')
if mibBuilder.loadTexts: csMplsPathCosValue.setDescription('Cos Value for this path')
csMplsPathDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: csMplsPathDropPrecedence.setDescription('Drop precedence for this path ')
csMplsPathHotStandby = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathHotStandby.setStatus('current')
if mibBuilder.loadTexts: csMplsPathHotStandby.setDescription('Mark this path as Hot Standby')
csMplsPathVpnAutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathVpnAutoRouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csMplsPathVpnAutoRouteAnnounce.setDescription(' Used to specify that the IGP should use the tunnel (if the tunnel is up) in its enhanced shortest path first (SPF) calculation')
csMplsPathPwe3AutoRouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsPathPwe3AutoRouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csMplsPathPwe3AutoRouteAnnounce.setDescription(' Used to specify that the IGP should use the tunnel (if the tunnel is up) in its enhanced shortest path first (SPF) calculation')
csMplsInterfaceConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2), )
if mibBuilder.loadTexts: csMplsInterfaceConfTable.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceConfTable.setDescription('This table has one entry for every interface running Mpls')
csMplsInterfaceConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csMplsInterfaceConfEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceConfEntry.setDescription('An entry in this table is created for interface specific Label space configuration information.')
csMplsInterfaceUseInterfaceLabels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceUseInterfaceLabels.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceUseInterfaceLabels.setDescription('If TRUE indicates that this interface is configured to use interface specific label space. If FALSE then this interface is configured to use Platform specific label space.')
csMplsInterfaceLabelRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("generic", 0), ("atm-range", 1), ("fr-range-dlci10", 2), ("fr-range-dlci17", 3), ("fr-range-dlci23", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelRange.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceLabelRange.setDescription('This object specifies the type of Labels that are being use for interface specific label space configuration information. Value of this object is significant only if csMplsInterfaceUseInterfaceLabels is set to TRUE. (If csMplsInterfaceUseInterfaceLabels is FALSE then this interface is configured to use Platform specific label space.)')
csMplsInterfaceLabelMinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 3), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMinIn.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceLabelMinIn.setDescription('This object specifies the lower limit of the label range to be used in incoming packets over this interface. This object specifies configuration information for interface specific label space and is significant only if value of csMplsInterfaceUseInterfaceLabels is set to TRUE.')
csMplsInterfaceLabelMaxIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 4), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMaxIn.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceLabelMaxIn.setDescription('This object specifies the upper limit of the label range to be used in incoming packets over this interface. This object specifies configuration information for interface specific label space and is significant only if value of csMplsInterfaceUseInterfaceLabels is set to TRUE.')
csMplsInterfaceLabelMinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 5), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMinOut.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceLabelMinOut.setDescription('This object specifies the lower limit of the label range to be used in outgoing packets over this interface. This object specifies configuration information for interface specific label space and is significant only if value of csMplsInterfaceUseInterfaceLabels is set to TRUE.')
csMplsInterfaceLabelMaxOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 6), MplsLabel()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceLabelMaxOut.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceLabelMaxOut.setDescription('This object specifies the upper limit of the label range to be used in outgoing packets over this interface. This object specifies configuration information for interface specific label space and is significant only if value of csMplsInterfaceUseInterfaceLabels is set to TRUE.')
csMplsInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceAdminStatus.setDescription("Indicates the administrator's intent as to whether MPLS should be enabled or disabled on this interface.")
csMplsInterfaceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsInterfaceOperStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceOperStatus.setDescription('This object specifies the operational state of MPLS on this interface.')
csMplsInterfaceAdminWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceAdminWeight.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceAdminWeight.setDescription(' Used to override the Interior Gateway Protocol (IGP) administrative weight (cost) of the link')
csMplsInterfaceAttribFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceAttribFlags.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceAttribFlags.setDescription(' Used to set the user-specified attribute flags for the interface')
csMplsInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 2, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsInterfaceRowStatus.setDescription('A row status type for the MplsInterface table')
csMplsVrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3), )
if mibBuilder.loadTexts: csMplsVrConfTable.setStatus('current')
if mibBuilder.loadTexts: csMplsVrConfTable.setDescription('This table is used to Configure Mpls on a Virtual Router.')
csMplsVrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csMplsVrConfEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsVrConfEntry.setDescription('This entry is indexed by the VPN and VR ID')
csMplsVrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsVrAdminStatus.setDescription("Indicates the administrator's intent as to whether MPLS should be enabled or disabled on this router.")
csMplsVrEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrEventLogLevel.setStatus('current')
if mibBuilder.loadTexts: csMplsVrEventLogLevel.setDescription('This object is used to set the level of details for event logs for MPLS')
csMplsVrEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrEventLogArea.setStatus('current')
if mibBuilder.loadTexts: csMplsVrEventLogArea.setDescription('This object is used to set the area of event logs for MPLS')
csMplsVrConfOpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrConfOpCode.setStatus('current')
if mibBuilder.loadTexts: csMplsVrConfOpCode.setDescription('Used for Mpls Trace Commands only')
csMplsVrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsVrConfRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour')
csMplsExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4), )
if mibBuilder.loadTexts: csMplsExtensionsTable.setStatus('current')
if mibBuilder.loadTexts: csMplsExtensionsTable.setDescription('This table is used to support Mpls Extensions')
csMplsExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csMplsExtensionsEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsExtensionsEntry.setDescription('This entry is indexed by the VPN and VrID')
csMplsMetricStyle = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("wide", 1), ("narrow", 2), ("transition", 3))).clone('narrow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsMetricStyle.setStatus('current')
if mibBuilder.loadTexts: csMplsMetricStyle.setDescription('This entry is used to define the metric-style. wide => csMplsMetricStyle = 1, narrow => csMplsMetricStyle = 2, transition => csMplsMetricStyle = 3')
csMplsExtensionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsExtensionsRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsExtensionsRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour.')
csMplsOspfOpaqueAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsOspfOpaqueAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfOpaqueAdminStatus.setDescription('This entry is used to indicate if Ospf Opaque is enabled or disabled on a router.')
csMplsVrPathConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5), )
if mibBuilder.loadTexts: csMplsVrPathConfTable.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathConfTable.setDescription('This table is used to configure Explicitly Routed Path')
csMplsVrPathConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsVrPathName"))
if mibBuilder.loadTexts: csMplsVrPathConfEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathConfEntry.setDescription('This entry is indexed by the VPN and VR ID')
csMplsVrPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)))
if mibBuilder.loadTexts: csMplsVrPathName.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathName.setDescription('Explicit-path Name')
csMplsVrPathExplicitRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrPathExplicitRoute.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathExplicitRoute.setDescription('The explicit route used to set up this LSP. This may either be the route configured by the user, or a route automatically computed to satisfy constraints set by the user. This field is a displayable string in the format of XXX.XXX.XXX.XXX S/L repeated for each explicit address. The S/L character stands for Strict/Loose route. This field is meaningless if csMplsVrPathIdentifier or csMplsVrPathName is not supplied')
csMplsVrPathIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrPathIdentifier.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathIdentifier.setDescription('Explicit-path Identifier')
csMplsVrPathConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsVrPathConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsVrPathConfRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour')
csMplsIsisExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6), )
if mibBuilder.loadTexts: csMplsIsisExtensionsTable.setStatus('current')
if mibBuilder.loadTexts: csMplsIsisExtensionsTable.setDescription('This table is used to support ISIS extensions to MPLS')
csMplsIsisExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsTrafficEnggLevel"))
if mibBuilder.loadTexts: csMplsIsisExtensionsEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsIsisExtensionsEntry.setDescription('This entry is indexed by the VPN and VrID')
csMplsTrafficEnggLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("level-1", 1), ("level-2", 2))).clone('level-1'))
if mibBuilder.loadTexts: csMplsTrafficEnggLevel.setStatus('current')
if mibBuilder.loadTexts: csMplsTrafficEnggLevel.setDescription('This entry is used to define the level on which MPLS traffic-eng will be used. Level-1 only => csMplsExtLevel = 1, Level-2 only => csMplsExtLevel = 2')
csMplsTrafficEnggAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsTrafficEnggAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsTrafficEnggAdminStatus.setDescription('This entry is used to indicate if mpls traffic-eng is enabled or disabled on a level. This entry is used in conjunction with csMplsTrafficEnggLevel.')
csMplsIsisExtensionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsIsisExtensionsRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsIsisExtensionsRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour.')
csMplsOspfExtensionsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7), )
if mibBuilder.loadTexts: csMplsOspfExtensionsTable.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfExtensionsTable.setDescription('This table is used to support Ospf Extensions for Mpls')
csMplsOspfExtensionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csMplsOspfAreaId"))
if mibBuilder.loadTexts: csMplsOspfExtensionsEntry.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfExtensionsEntry.setDescription('This entry is indexed by the VPN and VrID')
csMplsOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1, 1), AreaID())
if mibBuilder.loadTexts: csMplsOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfAreaId.setDescription('A router running MPLS is configured to flood traffic-engineering for OSPF area csMplsOspfAreaId')
csMplsOspfAreaAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsOspfAreaAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfAreaAdminStatus.setDescription('This entry is used to indicate if mpls is enabled or disabled on area. This entry is used in conjunction with csMplsOspfAreaId.')
csMplsOspfExtensionsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csMplsOspfExtensionsRowStatus.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfExtensionsRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour.')
csMplsOspfExtensionsTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csMplsOspfExtensionsTableEnd.setStatus('current')
if mibBuilder.loadTexts: csMplsOspfExtensionsTableEnd.setDescription('End of this group. value undefined')
csLdpVrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1), )
if mibBuilder.loadTexts: csLdpVrConfTable.setStatus('current')
if mibBuilder.loadTexts: csLdpVrConfTable.setDescription('This table is used to provide LDP related functionality at the router level')
csLdpVrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csLdpVrConfEntry.setStatus('current')
if mibBuilder.loadTexts: csLdpVrConfEntry.setDescription('This entry is indexed by the VPN and VR ID')
csLdpVrConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csLdpVrConfRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour')
csLdpVrAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csLdpVrAdminStatus.setDescription("Indicates the administrator's intent as to whether LDP should be enabled or disabled on this router.")
csLdpVrEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("critical", 1), ("debug", 2), ("inform", 3), ("major", 4), ("minor", 5))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrEventLogLevel.setStatus('current')
if mibBuilder.loadTexts: csLdpVrEventLogLevel.setDescription('This specifies the level of detail for the event log.')
csLdpVrEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrEventLogArea.setStatus('current')
if mibBuilder.loadTexts: csLdpVrEventLogArea.setDescription('Each bit within this object enables loggin for a specific area within LDP. Below is a list of the different areas available for logging within LDP and their corresponding bits identifiers. area bit ----------------------------------------------------- all 1 adjacency 2 packet-receive 3 packet-send 4 session 5 packet-verbose 6 lsp 7 end of description.')
csLdpVrEventLogAreaMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrEventLogAreaMask.setStatus('current')
if mibBuilder.loadTexts: csLdpVrEventLogAreaMask.setDescription('csLdpVrEventLogAreaMask is used to indicate which area bit is being set to on/off. Below is a list of the different areas available for logging within LDP and their corresponding bits identifiers. area bit ----------------------------------------------------- all 1 adjacency 2 packet-receive 3 packet-send 4 session 5 packet-verbose 6 lsp 7 end of description.')
csLdpVrRoutePreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(9)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrRoutePreference.setStatus('current')
if mibBuilder.loadTexts: csLdpVrRoutePreference.setDescription('Route preference Value for LDP routes')
csLdpVrAutorouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrAutorouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csLdpVrAutorouteAnnounce.setDescription("Indicates the administrator's intent to let BGP use LDP LSP's present in MPLS RIB for the bgp-next-hop resolution")
csLdpVrVpnAutorouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrVpnAutorouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csLdpVrVpnAutorouteAnnounce.setDescription("Indicates the administrator's intent to let Vpn use LDP LSP's present in MPLS RIB for the vpn-next-hop resolution")
csLdpVrPwe3AutorouteAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrPwe3AutorouteAnnounce.setStatus('current')
if mibBuilder.loadTexts: csLdpVrPwe3AutorouteAnnounce.setDescription("Indicates the administrator's intent to let PWE3 use LDP LSP's present in MPLS RIB for the next-hop resolution")
csLdpVrAcceptTargetedHellos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("reject", 0), ("accept", 1))).clone('reject')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpVrAcceptTargetedHellos.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpVrAcceptTargetedHellos.setDescription('Indicates the targeted hellos are accepeted or rejected ')
csLdpVrConfTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csLdpVrConfTableEnd.setStatus('current')
if mibBuilder.loadTexts: csLdpVrConfTableEnd.setDescription('End of this group. value undefined')
csLdpEntityTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3), )
if mibBuilder.loadTexts: csLdpEntityTable.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityTable.setDescription('This table contains information about the MPLS Label Distribution Protocol Entities which exist on this Label Switch Router (LSR).')
csLdpEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csLdpEntityEntry.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityEntry.setDescription('An entry in this table represents an LDP entity. An entry can be created by a network administrator or by an SNMP agent as instructed by LDP.')
csLdpEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: csLdpEntityIndex.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityIndex.setDescription("This index is used as a secondary index to uniquely identify this row. Before creating a row in this table, the 'csLdpEntityIndexNext' object should be retrieved. That value should be used for the value of this index when creating a row in this table. (NOTE: if a value of zero (0) is retrieved, that indicates that no rows can be created in this table at this time. A secondary index (this object) is needed by some but not all, LDP implementations. For example in an LDP implementation which uses PPP, this index may be needed.")
csLdpEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityRowStatus.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityRowStatus.setDescription("An object that allows entries in this table to be created and deleted using the RowStatus convention. Once the 'csLdpEntityAdminStatus' object has the value of 'up' and this object has the value of 'active' then the Entity will atttempt to contact an LDP Peer. If the value of this object is changed to 'notInService', then the Entity looses contact with the LDP Peer and all information related to that Peer must be removed from the MIB. This has the same effect as changing 'csLdpEntityAdminStatus' from 'enable' to 'disable'. When this object is set to 'active' and the value of the 'csLdpEntityAdminStatus' is 'enable' then this Entity will attempt to contact the Peer and establish new sessions.")
csLdpEntityAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityAdminStatus.setDescription("The administrative status of this LDP Entity. If this object is changed from 'enable' to 'disable' and this entity has already attempted to establish contact with a Peer (which implies that the 'csLdpEntityRowStatus' object has been set to 'active'), then all contact with that Peer is lost and all information from that Peer needs to be removed from the MIB. At this point the user is able to change values which are related to this entity. When the admin status is set back to 'up', then this Entity will attempt to establish new sessions with the Peer.")
csLdpEntityHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityHelloTimer.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityHelloTimer.setDescription("Configures the interval in seconds between LDP hello's on this interface.")
csLdpEntityHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityHelloHoldTimer.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityHelloHoldTimer.setDescription('The two octet value which is the proposed Hello hold timer for this LDP Entity. A value of 0 means use the default, which is 15 seconds for Link Hellos and 45 seconds for Targeted Hellos. A value of 65535 means infinite.')
csLdpEntityKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityKeepAliveTimer.setDescription('Configures the interval in seconds between keepalive messages on this interface.')
csLdpEntityKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityKeepAliveHoldTimer.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityKeepAliveHoldTimer.setDescription('The two octet value which is the proposed keep alive hold timer for this LDP Entity.')
csLdpEntityTransportAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 3, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpEntityTransportAddr.setStatus('current')
if mibBuilder.loadTexts: csLdpEntityTransportAddr.setDescription('This is used to store transport ip address for LDP Entity')
csLdpTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4), )
if mibBuilder.loadTexts: csLdpTargetTable.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetTable.setDescription('This table contains information about the MPLS Label Distribution Protocol Targeted Sessions which exist on this Label Switch Router (LSR).')
csLdpTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csLdpTargetPeerIpAddr"))
if mibBuilder.loadTexts: csLdpTargetEntry.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetEntry.setDescription('An entry in this table represents an LDP Targeted Session. An entry can be created by a network administrator or by an SNMP agent as instructed by LDP.')
csLdpTargetPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: csLdpTargetPeerIpAddr.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetPeerIpAddr.setDescription("This index is used as a secondary index to uniquely identify this row. Before creating a row in this table, the 'csLdpTargetIndexNext' object should be retrieved. That value should be used for the value of this index when creating a row in this table. (NOTE: if a value of zero (0) is retrieved, that indicates that no rows can be created in this table at this time. A secondary index (this object) is needed by some but not all, LDP implementations. For example in an LDP implementation which uses PPP, this index may be needed.")
csLdpTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetRowStatus.setDescription("An object that allows entries in this table to be created and deleted using the RowStatus convention. Once the 'csLdpTargetAdminStatus' object has the value of 'up' and this object has the value of 'active' then the Session will atttempt to contact an LDP Peer. If the value of this object is changed to 'notInService', then the Session looses contact with the LDP Peer and all information related to that Peer must be removed from the MIB. This has the same effect as changing 'csLdpTargetAdminStatus' from 'enable' to 'disable'. When this object is set to 'active' and the value of the 'csLdpTargetAdminStatus' is 'enable' then this Session will attempt to contact the Peer and establish new sessions.")
csLdpTargetAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetAdminStatus.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetAdminStatus.setDescription("The administrative status of this LDP Targeted Session. If this object is changed from 'enable' to 'disable' and this Session has already attempted to establish contact with a Peer (which implies that the 'csLdpTargetRowStatus' object has been set to 'active'), then all contact with that Peer is lost and all information from that Peer needs to be removed from the MIB. At this point the user is able to change values which are related to this entity. When the admin status is set back to 'up', then this Session will attempt to establish new sessions with the Peer.")
csLdpTargetHelloTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetHelloTimer.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetHelloTimer.setDescription("Configures the interval in seconds between LDP Targeted hello's on VR")
csLdpTargetHelloHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(45)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetHelloHoldTimer.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetHelloHoldTimer.setDescription('The two octet value which is the proposed Hello hold timer for this LDP Targeted Session. A value of 0 means use the default, which is 15 seconds for Link Hellos and 45 seconds for Targeted Hellos. A value of 65535 means infinite.')
csLdpTargetKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetKeepAliveTimer.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetKeepAliveTimer.setDescription('Configures the interval in seconds between keepalive messages')
csLdpTargetKeepAliveHoldTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(30)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetKeepAliveHoldTimer.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetKeepAliveHoldTimer.setDescription('The two octet value which is the proposed keep alive hold timer for this LDP Targeted Session.')
csLdpTargetActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 3, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csLdpTargetActive.setStatus('obsolete')
if mibBuilder.loadTexts: csLdpTargetActive.setDescription('If TRUE indicates that this is an active targeted entity i.e a targeted neighbor is explictly configured through CLI. The value set to true while creating an targeted entity')
csOrionMplsEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMplsEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionMplsEnd.setDescription('End of this group. value undefined')
csVpnVrfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1), )
if mibBuilder.loadTexts: csVpnVrfTable.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfTable.setDescription('This table is used to configure RFC2547 VPN routing instances. Each instance represent the partication of this router as a VRF in an BGP/MPLS VPN provider edge (PE). A router can suppport multiple VPN routing instances to allow peering with with multiple VPN providers.')
csVpnVrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csVpnVrfName"))
if mibBuilder.loadTexts: csVpnVrfEntry.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfEntry.setDescription('Each entry contains information about a single RFC2547 BGP/MPLS VPN routing instance. ')
csVpnVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfName.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfName.setDescription('The name for this VPN instance. It can contain alphanumic characters and hiphens (-).')
csVpnVrfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfDescription.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfDescription.setDescription('The description for this instance.')
csVpnVrfProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfProviderName.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfProviderName.setDescription('The name of the VPN Service Provider VR for this instance. Multiple Service Provider names can be specified by separating them using spaces. The VRF instance will select to use one of these providers. If the selected provider connectivity not active then the VRF instance will select another provider from its list. A VRF peers with only one provider at any time.')
csVpnVrfRouteDistinguisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfRouteDistinguisher.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRouteDistinguisher.setDescription('The route distinguisher for this VPN customer instance.')
csVpnVrfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfAdminStatus.setDescription('The enable/disable status of this VPN customer instance.')
csVpnVrfLogAreaFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfLogAreaFlag.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfLogAreaFlag.setDescription('Each bit within this object enables logging for a specific area within the VPN routing instance. Below is a list of the different areas available for logging: area bit ------------------------------------------------------ system 0 routes-receive 1 routes-send 2 vpn-sp (control interface to VPN-SP) 3 end of description.')
csVpnVrfLogLevelFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("critical", 1), ("error", 2), ("warning", 3), ("information", 4), ("detail", 5), ("debug", 6))).clone('critical')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfLogLevelFlag.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfLogLevelFlag.setDescription('This object enables logging at a specific level.')
csVpnVrfPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(20)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfPreference.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfPreference.setDescription('This default preference value for routes added by the instance to the RIB. A value of -1 indicates that this attribute is not configured.')
csVpnVrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRowStatus.setDescription('The variable is used to create, modify or delete a row in this table.')
csVpnVrfSiteOfOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfSiteOfOrigin.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfSiteOfOrigin.setDescription('The site-f-origin extended community attribute for this VPN customer instance.')
csVpnVrfAllowASIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfAllowASIn.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfAllowASIn.setDescription('To allow duplicate AS numbers for the BGP VPN routes received by this VRF. This attribute specifies the number of duplicates which are permitted. By default duplocate ASNs are not permitted. This attribute is used only if the VR is configured with an ASN, i.e., BGP is enabled.')
csVpnVrfASOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfASOverride.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfASOverride.setDescription("To allow the VPN service provider VR to override a VRF's ASN with the provders ASN. This option is normally used along with the site-of-origin option.")
csVpnVrfMaxRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 13), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfMaxRoutes.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfMaxRoutes.setDescription('The maximum number of routes the VRF instance is allowed to add to the RIB. A value of -1 indicates that this attribute is not set, i.e., no maximum is configured.')
csVpnVrfMaxRoutesExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("discard", 0), ("warning-message", 1))).clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfMaxRoutesExceedAction.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfMaxRoutesExceedAction.setDescription('The action to take if the number of routes exceed the csVpnVrfMaxRoutes configured for this VRF. discard: Routes are rejected with an error mesaage warning-message: Routes are accepted but a warning message is displayed.')
csVpnVrfRouteTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2), )
if mibBuilder.loadTexts: csVpnVrfRouteTargetTable.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRouteTargetTable.setDescription('This table is used to configure import/export route targets for RFC2547 VPN routing instances (VRFs).')
csVpnVrfRouteTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csVpnVrfName"), (0, "COSINE-ORION-MIB", "csVpnVrfRouteTargetType"), (0, "COSINE-ORION-MIB", "csVpnVrfRouteTargetValue"))
if mibBuilder.loadTexts: csVpnVrfRouteTargetEntry.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRouteTargetEntry.setDescription('Each entry contains information about a single route target. It is an 8-byte value. Also, each entry indicates if it is an import or export route target')
csVpnVrfRouteTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("import", 1), ("export", 2))))
if mibBuilder.loadTexts: csVpnVrfRouteTargetType.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRouteTargetType.setDescription('The type of Route Target entry.')
csVpnVrfRouteTargetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: csVpnVrfRouteTargetValue.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRouteTargetValue.setDescription('The route target value. It is an extended community encoded as an 8-byte value. An extended community is specified either as <4-byte-ip-address>:<2-byte num> or as <2-byte AS-num>:<4-byte-num>.')
csVpnVrfRouteTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 11, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csVpnVrfRouteTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: csVpnVrfRouteTargetRowStatus.setDescription('The variable is used to create, modify or delete a row in this table.')
csOrionViPbfFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1), )
if mibBuilder.loadTexts: csOrionViPbfFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterTable.setDescription("This table specifies a set of acl's to be applied to packets received over an interface. The first entry whose ACL matches a packet causes the packet to be forwarded over the specified next-hop.")
csOrionViPbfFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViPbfFilterIndex"))
if mibBuilder.loadTexts: csOrionViPbfFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterEntry.setDescription('Each filter specifies whether packets matching a specific access list entry are forwarded to the specified next hop.')
csOrionViPbfFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViPbfFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterIndex.setDescription('The Index of this particular PBF Filter.')
csOrionViPbfFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterAclId.setDescription('The Id of an access list entry (from csOrionGenAclTable).')
csOrionViPbfFilterEgressViId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterEgressViId.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterEgressViId.setDescription('The index value to uniquely identify the local interface through which the next hop for matching flows should be reached. This field is valid for VIs connected to point-point links only. A value of 0 (zero) indicates the next-hop-vi is not specified.')
csOrionViPbfFilterNextHopIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterNextHopIpAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterNextHopIpAddr.setDescription('The IP address of the next hop of this route. A value of 0 (zero) indicates the next-hop-addr is not specified.')
csOrionViPbfFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("discard", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterAction.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterAction.setDescription('The action performed by this filter.')
csOrionViPbfFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterRowStatus.setDescription('A row status type for this Table entry.')
csOrionViPbfFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPbfFilterCounter.setStatus('current')
if mibBuilder.loadTexts: csOrionViPbfFilterCounter.setDescription('Enable or disable counter on this filter.')
csIgmpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1), )
if mibBuilder.loadTexts: csIgmpInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceTable.setDescription('The (conceptual) table listing the interfaces on which IGMP is enabled.')
csIgmpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpInterfaceIfIndex"))
if mibBuilder.loadTexts: csIgmpInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceEntry.setDescription('An entry (conceptual row) representing an interface on which IGMP is enabled.')
csIgmpInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceIfIndex.setDescription('The ifIndex value of the interface for which IGMP is enabled.')
csIgmpInterfaceQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 2), Unsigned32().clone(125)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceQueryInterval.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceQueryInterval.setDescription('The frequency at which IGMP Host-Query packets are transmitted on this interface.')
csIgmpInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceStatus.setDescription('The activation of a row enables IGMP on the interface. The destruction of a row disables IGMP on the interface.')
csIgmpInterfaceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 4), Unsigned32().clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceVersion.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceVersion.setDescription('The version of IGMP which is running on this interface. This object can be used to configure a router capable of running either value. For IGMP to function correctly, all routers on a LAN must be configured to run the same version of IGMP on that LAN.')
csIgmpInterfaceQuerier = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceQuerier.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceQuerier.setDescription('The address of the IGMP Querier on the IP subnet to which this interface is attached.')
csIgmpInterfaceQueryMaxResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(100)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceQueryMaxResponseTime.setDescription('The maximum query response time advertised in IGMPv2 queries on this interface.')
csIgmpInterfaceQuerierUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceQuerierUpTime.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceQuerierUpTime.setDescription('The time since csIgmpInterfaceQuerier was last changed.')
csIgmpInterfaceQuerierExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceQuerierExpiryTime.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceQuerierExpiryTime.setDescription('The amount of time remaining before the Other Querier Present Timer expires. If the local system is the querier, the value of this object is zero.')
csIgmpInterfaceVersion1QuerierTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceVersion1QuerierTimer.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceVersion1QuerierTimer.setDescription('The time remaining until the host assumes that there are no IGMPv1 routers present on the interface. While this is non- zero, the host will reply to all queries with version 1 membership reports.')
csIgmpInterfaceWrongVersionQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceWrongVersionQueries.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceWrongVersionQueries.setDescription('The number of queries received whose IGMP version does not match csIgmpInterfaceVersion, over the lifetime of the row entry. IGMP requires that all routers on a LAN be configured to run the same version of IGMP. Thus, if any queries are received with the wrong version, this indicates a configuration error.')
csIgmpInterfaceJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceJoins.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceJoins.setDescription('The number of times a group membership has been added on this interface; that is, the number of times an entry for this interface has been added to the Cache Table. This object gives an indication of the amount of IGMP activity over the lifetime of the row entry.')
csIgmpInterfaceProxyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 12), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceProxyIfIndex.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceProxyIfIndex.setDescription('Some devices implement a form of IGMP proxying whereby memberships learned on the interface represented by this row, cause IGMP Host Membership Reports to be sent on the interface whose ifIndex value is given by this object. Such a device would implement the csIgmpV2RouterMIBGroup only on its router interfaces (those interfaces with non-zero csIgmpInterfaceProxyIfIndex). Typically, the value of this object is 0, indicating that no proxying is being done.')
csIgmpInterfaceGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpInterfaceGroups.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceGroups.setDescription('The current number of entries for this interface in the Cache Table.')
csIgmpInterfaceRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceRobustness.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. IGMP is robust to (Robustness Variable-1) packet losses.')
csIgmpInterfaceLastMembQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(10)).setUnits('tenths of seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceLastMembQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceLastMembQueryIntvl.setDescription('The Last Member Query Interval is the Max Response Time inserted into Group-Specific Queries sent in response to Leave Group messages, and is also the amount of time between Group-Specific Query messages. This value may be tuned to modify the leave latency of the network. A reduced value results in reduced time to detect the loss of the last member of a group. The value of this object is irrelevant if csIgmpInterfaceVersion is 1.')
csIgmpInterfaceMulticastTTLThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceMulticastTTLThreshold.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceMulticastTTLThreshold.setDescription('The Multicast TTL threshold value to be used by IGMP forwarding. This value is used to contol multicast packets from going beyone a certain number of routers. ')
csIgmpInterfaceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpInterfaceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csIgmpInterfaceAdminStatus.setDescription(' This attribute controls the enable/disable settings of an IGMP or IGMP Proxy interface. If this attribute is set to disable, the interface configuration will be saved.')
csIgmpCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2), )
if mibBuilder.loadTexts: csIgmpCacheTable.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheTable.setDescription('The (conceptual) table listing the IP multicast groups for which there are members on a particular interface.')
csIgmpCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpCacheAddress"), (0, "COSINE-ORION-MIB", "csIgmpCacheIfIndex"))
if mibBuilder.loadTexts: csIgmpCacheEntry.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheEntry.setDescription('An entry (conceptual row) in the csIgmpCacheTable.')
csIgmpCacheAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csIgmpCacheAddress.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheAddress.setDescription('The IP multicast group address for which this entry contains information.')
csIgmpCacheIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpCacheIfIndex.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheIfIndex.setDescription('The interface for which this entry contains information for an IP multicast group address.')
csIgmpCacheSelf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpCacheSelf.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheSelf.setDescription('An indication of whether the local system is a member of this group address on this interface.')
csIgmpCacheLastReporter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheLastReporter.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheLastReporter.setDescription('The IP address of the source of the last membership report received for this IP Multicast group address on this interface. If no membership report has been received, this object has the value 0.0.0.0.')
csIgmpCacheUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheUpTime.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheUpTime.setDescription('The time elapsed since this entry was created.')
csIgmpCacheExpiryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheExpiryTime.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheExpiryTime.setDescription('The minimum amount of time remaining before this entry will be aged out. A value of 0 indicates that the entry is only present because csIgmpCacheSelf is true and that if the router left the group, this entry would be aged out immediately. Note that some implementations may process membership reports from the local system in the same way as reports from other hosts, so a value of 0 is not required.')
csIgmpCacheStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpCacheStatus.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheStatus.setDescription('The status of this entry.')
csIgmpCacheVersion1HostTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csIgmpCacheVersion1HostTimer.setStatus('current')
if mibBuilder.loadTexts: csIgmpCacheVersion1HostTimer.setDescription('The time remaining until the local router will assume that there are no longer any IGMP version 1 members on the IP subnet attached to this interface. Upon hearing any IGMPv1 Membership Report, this value is reset to the group membership timer. While this time remaining is non-zero, the local router ignores any IGMPv2 Leave messages for this group that it receives on this interface.')
csIgmpStaticGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3), )
if mibBuilder.loadTexts: csIgmpStaticGroupTable.setStatus('current')
if mibBuilder.loadTexts: csIgmpStaticGroupTable.setDescription('The (conceptual) table listing the IP multicast static groups to which traffic needs to be sent to even if IGMP is not enabled on the respective interface.')
csIgmpStaticGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpStaticGroupIfIndex"), (0, "COSINE-ORION-MIB", "csIgmpStaticGroupAddress"))
if mibBuilder.loadTexts: csIgmpStaticGroupEntry.setStatus('current')
if mibBuilder.loadTexts: csIgmpStaticGroupEntry.setDescription('An entry (conceptual row) in the csIgmpStaticGroupTable.')
csIgmpStaticGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpStaticGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: csIgmpStaticGroupIfIndex.setDescription('The interface for which the static group has been configured.')
csIgmpStaticGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: csIgmpStaticGroupAddress.setStatus('current')
if mibBuilder.loadTexts: csIgmpStaticGroupAddress.setDescription('The IP multicast group address which corresponds to the configured static group.')
csIgmpStaticGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpStaticGroupStatus.setStatus('current')
if mibBuilder.loadTexts: csIgmpStaticGroupStatus.setDescription('The activation of a row enables a static group configuration on the interface. The destruction of a row disables the static group configuration on the interface.')
csIgmpAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4), )
if mibBuilder.loadTexts: csIgmpAccessGroupTable.setStatus('current')
if mibBuilder.loadTexts: csIgmpAccessGroupTable.setDescription('The (conceptual) table listing the IP multicast access groups to which traffic needs to be sent to or rejected from. This table will usually be used to reject traffic to a particular set of multicast groups')
csIgmpAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csIgmpAccessGroupIfIndex"), (0, "COSINE-ORION-MIB", "csIgmpAccessGroupAddress"))
if mibBuilder.loadTexts: csIgmpAccessGroupEntry.setStatus('current')
if mibBuilder.loadTexts: csIgmpAccessGroupEntry.setDescription('An entry (conceptual row) in the csIgmpAccessGroupTable.')
csIgmpAccessGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: csIgmpAccessGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: csIgmpAccessGroupIfIndex.setDescription('The interface for which the access group has been configured.')
csIgmpAccessGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: csIgmpAccessGroupAddress.setStatus('current')
if mibBuilder.loadTexts: csIgmpAccessGroupAddress.setDescription('The IP multicast group address which corresponds to the configured access group.')
csIgmpAccessGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpAccessGroupStatus.setStatus('current')
if mibBuilder.loadTexts: csIgmpAccessGroupStatus.setDescription('The activation of a row enables a access group configuration on the interface. The destruction of a row disables the access group configuration on the interface.')
csIgmpGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 5), )
if mibBuilder.loadTexts: csIgmpGeneralTable.setStatus('current')
if mibBuilder.loadTexts: csIgmpGeneralTable.setDescription(' MIB object to control router level attributes of IGMP.')
csIgmpGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csIgmpGeneralEntry.setStatus('current')
if mibBuilder.loadTexts: csIgmpGeneralEntry.setDescription('Information regarding the router level attributes of IGMP.')
csIgmpGeneralEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 13, 1, 5, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csIgmpGeneralEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: csIgmpGeneralEntryRowStatus.setDescription('The activation of a row enables an IGMP object for the router. The destruction of a row destroys the IGMP object for this router.')
csPwVcTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1), )
if mibBuilder.loadTexts: csPwVcTable.setStatus('current')
if mibBuilder.loadTexts: csPwVcTable.setDescription('This table specifies information for connecting various emulated services to various tunnel type.')
csPwVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csPwVcEntry.setStatus('current')
if mibBuilder.loadTexts: csPwVcEntry.setDescription('A row in this table represents an emulated virtual connection (VC) across a packet network. It is indexed by: - The csPwVcIndex. Uniquely identifying a singular connection (or set of connections). If a set, individual VCs are identified by the Instance.')
csPwVcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 1), PwVcIndex())
if mibBuilder.loadTexts: csPwVcIndex.setStatus('current')
if mibBuilder.loadTexts: csPwVcIndex.setDescription('Primary index for the conceptual row identifying a VC (or set of VCs) within this PW Emulation VC table.')
csPwVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 2), PwVcID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcID.setReference('Martini, et al, . Note: as specified in l2circuit-trans: It is REQUIRED to assign the same VC ID, and VC type for a given circuit in both directions.')
if mibBuilder.loadTexts: csPwVcID.setStatus('current')
if mibBuilder.loadTexts: csPwVcID.setDescription("Used in the outgoing VC ID field within the 'Virtual Circuit FEC Element' when LDP signaling is used.")
csPwVcOutboundGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 3), PwGroupID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcOutboundGroupID.setReference('Martini, et al, ')
if mibBuilder.loadTexts: csPwVcOutboundGroupID.setStatus('current')
if mibBuilder.loadTexts: csPwVcOutboundGroupID.setDescription("Used in the outbound Group ID field within the 'Virtual Circuit FEC Element' when some control methods (for example LDP) is used for VC setup, zero if not used.")
csPwVcInboundGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 4), PwGroupID()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundGroupID.setReference('Martini, et al, ')
if mibBuilder.loadTexts: csPwVcInboundGroupID.setStatus('current')
if mibBuilder.loadTexts: csPwVcInboundGroupID.setDescription("Obtained from the inbound Group ID field in the remote 'Virtual Circuit FEC Element' as received by control methods are used for VC setup, zero if not used or not known yet.")
csPwVcInboundMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundMTU.setReference('Martini, et al, ')
if mibBuilder.loadTexts: csPwVcInboundMTU.setStatus('current')
if mibBuilder.loadTexts: csPwVcInboundMTU.setDescription('MTU of the interface at the remote PE. 0 means assume same as outbound MTU')
csPwVcPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ipV4", 1), ("ipV6", 2), ("notApplicable", 3))).clone('ipV4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: csPwVcPeerAddrType.setDescription("Denotes the address type of the peer node signaling address if PW signaling is used for the VC creation. It should be set to 'notApplicable' if PE/PW signaling is not used, i.e. csPwVcOwner is set to 'manual'. ")
csPwVcPeerIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPeerIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: csPwVcPeerIpv4Addr.setDescription('If csPwVcPeerAddrType is set to ipV4(1), then this value will contain the IPv4 address of the peer node PW/PE signaling entity. This object is otherwise insignificant and should contain a value of 0.')
csPwVcPeerIpv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPeerIpv6Addr.setStatus('current')
if mibBuilder.loadTexts: csPwVcPeerIpv6Addr.setDescription('If csPwVcPeerAddrType is set to ipV6(2), then this value will contain the Ipv6 address of the peer node PW/PE signaling entity. This object is otherwise insignificant and should contain a value of 0.')
csPwVcOutboundVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcOutboundVcLabel.setReference('Martini, et al, ')
if mibBuilder.loadTexts: csPwVcOutboundVcLabel.setStatus('current')
if mibBuilder.loadTexts: csPwVcOutboundVcLabel.setDescription("The VC label used in the outbound direction. It may be set up manually if owner is 'manual' or automatically otherwise. Examples: For MPLS PSN, it represents the 20 bits of VC tag, for L2TP it represent the 16 bits Session ID.")
csPwVcInboundVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundVcLabel.setReference('Martini, et al, ')
if mibBuilder.loadTexts: csPwVcInboundVcLabel.setStatus('current')
if mibBuilder.loadTexts: csPwVcInboundVcLabel.setDescription("The VC label used in the inbound direction. It may be set up manually if owner is 'manual' or automatically otherwise. Examples: For MPLS PSN, it represents the 20 bits of VC tag, for L2TP it represent the 16 bits Session ID.")
csPwVcInboundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("liberal", 1), ("conservative", 2))).clone('liberal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcInboundMode.setStatus('current')
if mibBuilder.loadTexts: csPwVcInboundMode.setDescription('This object is used to enable greater security for implementation that use global VC label space. In conservative mode, inbound packets with a VC label are accepted only from tunnels that are associated to the same VC via the inbound tunnel table. The entries in the inbound tunnel table are either explicitly configured or implicitly known by the control protocol used for VC set-up. If such association is not known, not configured or not desired, liberal mode should be configured, and the node should accept the packet based on the VC label only regardless of the outer tunnel used to carry the VC.')
csPwVcName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 12), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcName.setStatus('current')
if mibBuilder.loadTexts: csPwVcName.setDescription('The canonical name assigned to the VC. This name can be used to refer to the VC on the node console port. ')
csPwVcDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 13), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcDescr.setStatus('current')
if mibBuilder.loadTexts: csPwVcDescr.setDescription('A textual string containing information about the VC. If there is no description this object contains a zero length string.')
csPwVcCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcCreateTime.setStatus('current')
if mibBuilder.loadTexts: csPwVcCreateTime.setDescription('System time when this VC was created.')
csPwVcUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcUpTime.setStatus('current')
if mibBuilder.loadTexts: csPwVcUpTime.setDescription("Number of consecutive ticks this VC has been 'up' in both directions together (i.e. 'up' is observed in csPwVcOperStatus.)")
csPwVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("frameRelay", 1), ("atmAal5Vcc", 2), ("atmTransparent", 3), ("ethernetVLAN", 4), ("ethernet", 5), ("hdlcCisco", 6), ("ppp", 7), ("cem", 8), ("atmVccCell", 9), ("atmVpcCell", 10), ("transparentLanService", 11), ("unspecified", 12))).clone('unspecified')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcType.setReference('Martini, et al, . Note: as specified in l2circuit-trans: It is REQUIRED to assign the same VC ID, and VC type for a given circuit in both directions.')
if mibBuilder.loadTexts: csPwVcType.setStatus('current')
if mibBuilder.loadTexts: csPwVcType.setDescription("This value dictates what service-specific tables are indexed by csPwVcIndex and csPwVcInstance. For example, if set for 'cem' csPwVcIndex indexes the csPwVcCemTable in [CEMMIB]. Note: CEM will also have the MSBit set in the VC type (0x8008). This is the 'Control Word' bit used within the 'Virtual Circuit FEC Element' when LDP signaling is used ")
csPwVcOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("signaling", 2), ("other", 3))).clone('signaling')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcOwner.setStatus('current')
if mibBuilder.loadTexts: csPwVcOwner.setDescription("Set by the operator to indicate the protocol responsible for establishing this VC. Value 'manual' is used in all cases where no signaling is used to set-up the VC, i.e. require configuration of all entries in the VC tables including VC labels, etc. The value 'signaling' is used in case of standard signaling of the VC for the specific PSN, for example LDP for MPLS PSN as specified in . Value 'other' is used for other types of signaling.")
csPwVcPsnType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mpls", 1), ("l2tp", 2), ("ip", 3), ("mplsOverIp", 4), ("gre", 5), ("other", 6))).clone('mpls')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPsnType.setStatus('current')
if mibBuilder.loadTexts: csPwVcPsnType.setDescription('Set by the operator to indicate the PSN type on which this VC will be carried. Based on this object, the relevant PSN table entries are created in the in the PSN specific MIB modules. For example, if mpls(1) is defined, the agent create an entry in csPwVcMplsTable, which further define the MPLS PSN configuration.')
csPwVcPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcPriority.setStatus('current')
if mibBuilder.loadTexts: csPwVcPriority.setDescription("This object define the relative priority of the VC instance in a lowest-to-highest fashion. VC instances with the same priority are treated with equal priority (i.e. are signaled in parallel). VC instances dropped will be set 'dormant' (as indicated in csPwVcOperStatus).")
csPwVcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csPwVcAdminStatus.setDescription('The desired operational status of this VC. It is set by the operator if csPwVcIsIf is set to false. Otherwise, it reflects the ifIndex AdminStatus.')
csPwVcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcOperStatus.setStatus('current')
if mibBuilder.loadTexts: csPwVcOperStatus.setDescription("Indicates the actual combined operational status of this VC. It is 'up' if both csPwVcInboundOperStatus and csPwVcOutboundOperStatus are in 'up' state. For all other values, if the VCs in both directions are of the same value it reflects that value, otherwise it is set to 'unknown', and the operator may consult the per direction OperStatus for fault isolation. ")
csPwVcInboundOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcInboundOperStatus.setStatus('current')
if mibBuilder.loadTexts: csPwVcInboundOperStatus.setDescription("Indicates the actual operational status of this VC in the inbound direction. - down: if PW signaling has not yet finished, or indications available at the service level indicate that the VC is not passing packets. - testing: if AdminStatus at the VC level is set to test. - dormant: The VC is not available because of the required resources are occupied VC with higher priority VCs . - notPresent: Some component is missing to accomplish the set up of the VC. - lowerLayerDown: The underlying PSN is not in OperStatus 'up'. ")
csPwVcOutboundOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPwVcOutboundOperStatus.setStatus('current')
if mibBuilder.loadTexts: csPwVcOutboundOperStatus.setDescription("Indicates the actual operational status of this VC in the outbound direction - down: if PW signaling has not yet finished, or indications available at the service level indicate that the VC is not passing packets. - testing: if AdminStatus at the VC level is set to test. - dormant: The VC is not available because of the required resources are occupied VC with higher priority VCs . - notPresent: Some component is missing to accomplish the set up of the VC. - lowerLayerDown: The underlying PSN is not in OperStatus 'up'. ")
csPwVcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcRowStatus.setStatus('current')
if mibBuilder.loadTexts: csPwVcRowStatus.setDescription('For creating, modifying, and deleting this row.')
csPwVcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 25), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcStorageType.setStatus('current')
if mibBuilder.loadTexts: csPwVcStorageType.setDescription('This variable indicates the storage type for this object.')
csPwVcCeIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)).clone('DISCONNECTED')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCeIntf.setStatus('current')
if mibBuilder.loadTexts: csPwVcCeIntf.setDescription("This object is used to identify the CE interface. This format allows for many formats. We only support LI for now. The format used for this ascii-string valued object is as follows: 'B|L VPNID|SlotID/VRID|PortID/VIID|LLID:BIID' Where 'B' indicates the other end is a Bridge Interface. 'L' indicates this connection maps to a Logical Link. 'VPNID' is a Virtual Private Network ID. 'SlotID' identifies a specific slot on the Orion Box. 'VRID' is a Virtual Router ID for the VPN specified by VPNID. 'PortID' identifies a specific Port on the blade installed in the previously identified slot. 'VIID' is a Virtual Interface on the VR identified by VRID. 'LLID' is a Logical Link ID on PortID. BIID is the bridge interface ID. For example, if this connection maps to a bridge interface. (BI 3 on VI number 1 on VR 1.2.3.4 on VPN 4), this object might be set to this value: 'B 4/1.2.3.4/1:3' If this connection maps to subinterface 20 on Logical Link 100 on Port 2 of Slot 2, this object might be set to this value: 'L 2/2:100:10' If this Virtual Interface has not been mapped, this object will have the value 'DISCONNECTED'.")
csPwVcForwardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 26))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcForwardSlot.setStatus('current')
if mibBuilder.loadTexts: csPwVcForwardSlot.setDescription('Slot number of the data forwarding processor engine. 0 means not set. ')
csPwVcForwardPE = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcForwardPE.setStatus('current')
if mibBuilder.loadTexts: csPwVcForwardPE.setDescription('Processor engine number of the data forwarding processor engine. 0 means not set.')
csPwVcCtrlWord = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 29), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCtrlWord.setStatus('current')
if mibBuilder.loadTexts: csPwVcCtrlWord.setDescription('Include and except control word in the data packets.')
csPwVcSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 30), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcSeqNumber.setStatus('current')
if mibBuilder.loadTexts: csPwVcSeqNumber.setDescription('Include and check the sequence numbers.')
csPwVcTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("testNotInProgress", 1), ("testResultUnknown", 2), ("testFailed", 3), ("testSucceded", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcTestResult.setStatus('current')
if mibBuilder.loadTexts: csPwVcTestResult.setDescription('The result of the previous testing request.')
csPwVcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcVlanId.setStatus('current')
if mibBuilder.loadTexts: csPwVcVlanId.setDescription('The result of the previous testing request. Note: A valid VLAN ID should be provided if Connected to a BI.')
csPwVcCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 33), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCustomerId.setStatus('current')
if mibBuilder.loadTexts: csPwVcCustomerId.setDescription('Customer ID field. ')
csPwVcCustomerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 1, 1, 34), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwVcCustomerName.setStatus('current')
if mibBuilder.loadTexts: csPwVcCustomerName.setDescription('Customer name field. ')
csPwe3ConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2), )
if mibBuilder.loadTexts: csPwe3ConfTable.setStatus('current')
if mibBuilder.loadTexts: csPwe3ConfTable.setDescription('This table is used to Configure Mpls on a Virtual Router.')
csPwe3ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csPwe3ConfEntry.setStatus('current')
if mibBuilder.loadTexts: csPwe3ConfEntry.setDescription('This entry is indexed by the VPN and VR ID')
csPwe3EventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("critical", 1), ("error", 2), ("warning", 3), ("information", 4), ("debug", 5))).clone('critical')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwe3EventLogLevel.setStatus('current')
if mibBuilder.loadTexts: csPwe3EventLogLevel.setDescription('This object is used to set the level of details for event logs for L2oL3')
csPwe3EventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwe3EventLogArea.setStatus('current')
if mibBuilder.loadTexts: csPwe3EventLogArea.setDescription('Each bit within this object enables logging for a specific area within the Pwe3 instance. Below is a list of the different areas available for logging: area bit ------------------------------------------------------ events 0 forwarding 1 end of description.')
csPwe3ConfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 14, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPwe3ConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csPwe3ConfRowStatus.setDescription('The existence state of this table. This object follows the Row Status behaviour')
csOrionChangeTableOID = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 1), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChangeTableOID.setStatus('current')
if mibBuilder.loadTexts: csOrionChangeTableOID.setDescription('Object identifier of the Table, which was changed. ')
csOrionChangeSource = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cli", 1), ("httpd", 2), ("snmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChangeSource.setStatus('current')
if mibBuilder.loadTexts: csOrionChangeSource.setDescription('The source of the configuration change (illegal).')
csOrionChangeSourceUserName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionChangeSourceUserName.setStatus('current')
if mibBuilder.loadTexts: csOrionChangeSourceUserName.setDescription('A textual string containing information about the user name of the source configuration change.')
csOrionLogLinkSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkSlotIndex.setDescription('For Logical Link up/down traps, this identifies the slot index of the Logical Link.')
csOrionLogLinkPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkPortIndex.setDescription('For Logical Link up/down traps, this identifies the port index (relative to the slot index) of the Logical Link.')
csOrionLogLinkChannelIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkChannelIndex.setDescription('For Logical Link up/down traps, this identifies the channel index (relative to the slot/port index) of the Logical Link. If there is no channel, this object has the value -1.')
csOrionLogLinkSubIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkSubIfIndex.setDescription('For Logical Link up/down traps, this identifies the sub interface index (relative to the slot/port[:chan] index) of the Logical Link. If there is no sub interface, this object has the value -1.')
csOrionNumConfigChanges = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNumConfigChanges.setStatus('current')
if mibBuilder.loadTexts: csOrionNumConfigChanges.setDescription('Number of changed objects for which the csOrionConfigChange Trap PDU generated. This identifies the number of VarBinds follows this object in the csOrionConfigChange Trap PDU.')
csOrionConfigChangeType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("addModify", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionConfigChangeType.setStatus('current')
if mibBuilder.loadTexts: csOrionConfigChangeType.setDescription('For ConfigChange Traps, this identifies the type of change that was made on a table. For scalar objects, this always has the value 1.')
csOrionPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPortIndex.setDescription('For port level alarms related traps, this identifies the port index (relative to the slot index) of the alarm origination.')
csOrionRestoreBladeStatus = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fail", 1), ("success", 2), ("coldStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRestoreBladeStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionRestoreBladeStatus.setDescription('Blade Restoration status. Fail if blade is not restored successfully. Success if blade restoration is successfull. Cold-start if blade reboots. Note that cold-start will not have restored data presented in the trap packet')
csOrionRestoreSlotIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRestoreSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionRestoreSlotIndex.setDescription('Slot number of the affected blade.')
csOrionRestoreNumVRs = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRestoreNumVRs.setStatus('current')
if mibBuilder.loadTexts: csOrionRestoreNumVRs.setDescription('Number of VRs affected by this blade restoration trap. This corresponds the number of VPN/VRs that follows.')
csOrionAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("farEndReceiveFailure", 0), ("lossOfSignal", 1), ("lossOfFrame", 2), ("lossOfClock", 3), ("alarmIndicationSignal", 4), ("portIdleAlarm", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAlarmType.setStatus('current')
if mibBuilder.loadTexts: csOrionAlarmType.setDescription('For port level alarms related DS3 traps, this identifies the alarm which is cleared now.')
csOrionOc3AlarmType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("lossOfClock", 1), ("farEndProtectLineFail", 2), ("nearEndProtectLineFail", 3), ("protectSwtichByteFail", 4), ("channelMismatchFail", 5), ("apsModeMismatch", 6), ("remoteDefectIndicatorLine", 7), ("noId", 8), ("lossOfSignal", 9), ("lossOfFrame", 10), ("alarmIndicatSignalLine", 11), ("alarmIndicatSignalPath", 12), ("lossOfPointer", 13), ("signalLabelMismatch", 14), ("j1PTMismatch", 15), ("lossOfCellDeliniation", 16), ("remoteDefectIndicatorPath", 17), ("numOfAlarmCountDummy", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionOc3AlarmType.setStatus('current')
if mibBuilder.loadTexts: csOrionOc3AlarmType.setDescription('For port level alarms related OC3 traps, this identifies the type of alarm being sent out.')
csOrionAlarmAffectType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notServiceAffect", 1), ("serviceAffect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAlarmAffectType.setStatus('current')
if mibBuilder.loadTexts: csOrionAlarmAffectType.setDescription(' Indicates that it is a not service affecting alarm or a service affecting alarm. ')
csOrionAlarmSeverityType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAlarmSeverityType.setStatus('current')
if mibBuilder.loadTexts: csOrionAlarmSeverityType.setDescription(' Indicates the severity of this alarm.')
csOrionLogLinkModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionLogLinkModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkModuleIndex.setDescription('For Logical Link up/down traps, this identifies the module index (relative to the slot index) of the Logical Link.')
csOrionModuleIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionModuleIndex.setDescription('For Logical Link up/down traps, this identifies the module index (relative to the slot index) of the Logical Link.')
csRadiusServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 4, 1))
csDnsServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 4, 2))
csOrionBladeTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1), )
if mibBuilder.loadTexts: csOrionBladeTable.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeTable.setDescription('A list of Blades which belongs to Orion box.')
csOrionBladeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"))
if mibBuilder.loadTexts: csOrionBladeEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeEntry.setDescription('An entry containing management information applicable to a particular Blade.')
csOrionBladeSlotLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSlotLocation.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSlotLocation.setDescription('Slot Location of the Blade in the Orion box.')
csOrionBladeDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeDescr.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeDescr.setDescription('A textual string containing information about the blade. This string should include the name of the manufacturer and the product name.')
csOrionBladeType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("process", 1), ("control", 2), ("ethernet", 3), ("ds3Unchannelized", 4), ("ds3channelized", 5), ("oc3Atm", 6), ("oc3Pos", 7), ("e3Unchannelized", 8), ("e3channelized", 9), ("gige", 10), ("oc12atm", 11), ("oc12pos", 12), ("quad-oc3-atm", 13), ("ipsg", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeType.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeType.setDescription('The type of blade inserted in this slot.')
csOrionBladeState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("notPresent", 1), ("inactive", 2), ("active", 3), ("softwareLoading", 4), ("operational", 5), ("nonOperational", 6), ("failedWithBackup", 7), ("failedWithOutBackup", 8), ("backup", 9), ("standby", 10), ("reboot", 11), ("disabled", 12), ("master", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeState.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeState.setDescription('The current state of this blade.')
csOrionBladeEnginesNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeEnginesNumb.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeEnginesNumb.setDescription('The number of engines on the blade. NOTE: This object is not used.')
csOrionBladePortNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePortNumb.setStatus('current')
if mibBuilder.loadTexts: csOrionBladePortNumb.setDescription('The number of ports on this blade (note, process blades have no ports).')
csOrionBladeSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSerialNumb.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeSerialNumb.setDescription('The serial number of the blade. This is a series of alphanumeric characters which uniquely identifies this blade. NOTE: This object is not used.')
csOrionBladeHwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeHwVer.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeHwVer.setDescription('A textual string containing information about the hardware revision version. NOTE: This object is not used.')
csOrionBladeSwVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSwVer.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeSwVer.setDescription('A textual string containing information about the software revision version. NOTE: This object is not used.')
csOrionBladeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionBladeReset.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeReset.setDescription("The software reset for this blade. It is an action object such that when set to 'reset' will reset this blade. Setting it to 'none' has no effect, and when it is retrieved the value will always be 'none'. ")
csOrionBladeConfigAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeConfigAttributes.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionBladeConfigAttributes.setDescription('Contains the configured or static parameters of this blade. Each parameter is represented by a type-lenth-value data structure. A single TLV may contain individual TLVs. The types IDs currently supported are : 1 - Description (string) [sample only] more parameters will be added. NOTE: This object is deprecated and is replaced by individual objects starting from csOrionBladeModelNumb.')
csOrionBladeOperAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeOperAttributes.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionBladeOperAttributes.setDescription('Contains the operational or dynamic parameters of this blade. Each parameter is represented by a type-lenth-value data structure. A single TLV may contain individual TLVs. The types IDs currently supported are : 1 - Description (string) [sample only] more parameters will be added. NOTE: This object is deprecated and is replaced by individual objects starting from csOrionBladeTemperatureSensor1.')
csOrionBladeModelNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeModelNumb.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeModelNumb.setDescription('A textual string containing information about the model number of the blade.')
csOrionBladeCLEICode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeCLEICode.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeCLEICode.setDescription('A textual string containing information about the CLEI of the blade.')
csOrionBladeFPGAVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeFPGAVersion.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeFPGAVersion.setDescription('A textual string containing information about the FPGA version of the blade.')
csOrionBladePort1MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 16), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort1MacAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionBladePort1MacAddr.setDescription('MAC Address of ethernet port 1 on the blade. Applies only to control or ethernet blade.')
csOrionBladePort2MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 17), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort2MacAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionBladePort2MacAddr.setDescription('MAC Address of ethernet port 2 on the blade. Applies only to control or ethernet blade.')
csOrionBladePort3MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort3MacAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionBladePort3MacAddr.setDescription('MAC Address of ethernet port 3 on the blade. Applies only to control or ethernet blade.')
csOrionBladePort4MacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladePort4MacAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionBladePort4MacAddr.setDescription('MAC Address of ethernet port 4 on the blade. Applies only to control or ethernet blade.')
csOrionBladeIPSXLoaderProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderProduct.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderProduct.setDescription('A textual string containing information about the IPSX loader.')
csOrionBladeIPSXLoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderVersion.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderVersion.setDescription('A textual string containing information about the version of the loader NOTE: This object is not used.')
csOrionBladeIPSXLoaderDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderDate.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderDate.setDescription('A textual string containing information about the date of the loader. NOTE: This object is not used.')
csOrionBladeIPSXLoaderTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderTime.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionBladeIPSXLoaderTime.setDescription('A textual string containing information about the time of the loader.')
csOrionBladeTemperatureSensor1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor1.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor1.setDescription('A textual string containing information about the temperature of sensor 1.')
csOrionBladeTemperatureSensor2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor2.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor2.setDescription('A textual string containing information about the temperature of sensor 2.')
csOrionBladeTemperatureSensor3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor3.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor3.setDescription('A textual string containing information about the temperature of sensor 3.')
csOrionBladeTemperatureSensor4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor4.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeTemperatureSensor4.setDescription('A textual string containing information about the temperature of sensor 4.')
csOrionBladeShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionBladeShutdown.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeShutdown.setDescription("The software shutdown for this blade. It is an action object such that when set to 'shutdown' will stop the file-system on this blade. Setting it to 'none' has no effect, and when it is retrieved the value will always be 'none'. ")
csOrionBladeNumSharcCrypto = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeNumSharcCrypto.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeNumSharcCrypto.setDescription(' Number of crypto modules present on the sharc blade ')
csOrionBladeSharcCryptoModuleId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoModuleId1.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoModuleId1.setDescription('Blade port in which the first crypto is present (Note, -1 indicates that there are no crypto modules in the blade)')
csOrionBladeSharcCryptoModuleId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoModuleId2.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoModuleId2.setDescription('Blade port in which the first crypto is present (Note, -1 indicates that there are one or less crypto modules in the blade)')
csOrionBladeSharcCryptoType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("none", 0), ("sharcCrypto", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoType1.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoType1.setDescription('Type of the first sharc crypto module present')
csOrionBladeSharcCryptoType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("none", 0), ("sharcCrypto", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoType2.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoType2.setDescription('Type of the second sharc crypto module present')
csOrionBladeSharcCryptoSerial1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoSerial1.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoSerial1.setDescription('The serial number of the first sharc crypto module - series of alphanumeric characters which uniquely identifies the crypto module on this blade.')
csOrionBladeSharcCryptoSerial2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoSerial2.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoSerial2.setDescription('The serial number of the second sharc crypto module - series of alphanumeric characters which uniquely identifies the crypto module on this blade.')
csOrionBladeSharcCryptoAssembly1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoAssembly1.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoAssembly1.setDescription('The assembly number of the first sharc crypto module')
csOrionBladeSharcCryptoAssembly2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 1, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeSharcCryptoAssembly2.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeSharcCryptoAssembly2.setDescription('The assembly number of the second sharc crypto module')
csOrionEngineTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2), )
if mibBuilder.loadTexts: csOrionEngineTable.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineTable.setDescription('A list of Process Engines such as CPU, Search Engine and Encryption Engine which exist in the Orion box. This table is used as csOrionModuleTable. Engine becomes a special type of Module. Module can also be a network interface. To keep the minimum change in 3.0 for the addition of module and maintain the compatibility between 3.0 and 3.1, the name of csOrionEngineTable is still used in 3.0. After 3.1, this table will be rename as csOrionModuleTable.')
csOrionEngineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionEngineIndex"))
if mibBuilder.loadTexts: csOrionEngineEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineEntry.setDescription('An entry containing management information applicable to a particular process engine.')
csOrionEngineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csOrionEngineIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineIndex.setDescription('A unique value for each engine. ')
csOrionEngineMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemorySize.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionEngineMemorySize.setDescription('The size of the memory for the specified Engine, in bytes. NOTE: This object is not used.')
csOrionEngineMemoryUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryUtil.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryUtil.setDescription('The current percentage utilization of the memory for the specified Engine.')
csOrionEngineType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42))).clone(namedValues=NamedValues(("mainCpu", 1), ("cpu", 2), ("search", 3), ("encryption", 4), ("dualCpus", 5), ("singleCpu", 6), ("cpuHwFwdEng", 7), ("baseBlade", 8), ("evalBaseBlade", 9), ("switchFabric", 10), ("sharcCpu", 11), ("sharcCrypto", 12), ("gigeInterface", 13), ("oc12PosMm", 14), ("oc12PosSm", 15), ("oc12AtmMm", 16), ("oc12AtmSm", 17), ("quadOc3PosMm", 18), ("quadOc3PosSm", 19), ("quadOc3AtmMm", 20), ("quadOc3AtmSm", 21), ("triPortDs3U", 22), ("triPortE3U", 23), ("triPortDs3C", 24), ("dualOc3Ch", 25), ("dualGige", 26), ("eightPortOc3AtmMm", 27), ("eightPortOc3AtmSm", 28), ("dualPortOc12AtmMm", 29), ("dualPortOc12AtmSm", 30), ("dualPortOc12PosMm", 31), ("dualPortOc12PosSm", 32), ("sharcBoot", 33), ("osLoader", 34), ("sharcControl", 35), ("sharcCpuSingle", 36), ("sharcCpuFwd", 37), ("midPlane", 38), ("quadOc3ChMm", 39), ("quadOc3ChSm", 40), ("dualPortOc12ChMm", 41), ("dualPortOc12ChSm", 42)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineType.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineType.setDescription('A type of the process engine.')
csOrionEngineDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineDescr.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionEngineDescr.setDescription(' A textual string containing information about the process engine manufacturer and the product name. NOTE: This object is not used.')
csOrionEngineUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineUtilization.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineUtilization.setDescription('A % utilization for the specified Engine.')
csOrionEngineTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-67, 257))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineTemperature.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionEngineTemperature.setDescription('A temperature (in Fahrenheit or Celsius near the specified Engine. NOTE: This object is not used.')
csOrionEngineState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notPresent", 1), ("inactive", 2), ("active", 3), ("softwareLoading", 4), ("operational", 5), ("nonOperational", 6), ("failedWithBackup", 7), ("failedWithOutBackup", 8), ("backup", 9), ("standby", 10), ("reboot", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineState.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineState.setDescription('The current state of this engine.')
csOrionEngineConfigAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineConfigAttributes.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionEngineConfigAttributes.setDescription('Contains the configured or static parameters of this engine. Each parameter is represented by a type-lenth-value data structure. A single TLV may contain individual TLVs. The types IDs currently supported are : 1 - Description (string) [sample only] more parameters will be added. NOTE: This object is deprecated and is replaced by individual objects starting from csOrionEngineLoaderProduct.')
csOrionEngineOperAttributes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineOperAttributes.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionEngineOperAttributes.setDescription('Contains the operational or dynamic parameters of this engine. Each parameter is represented by a type-lenth-value data structure. A single TLV may contain individual TLVs. The types IDs currently supported are : 1 - Description (string) [sample only] more parameters will be added. NOTE: This object is deprecated and is replaced by individual objects starting from csOrionEngineMemoryAllocs.')
csOrionEngineLoaderProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderProduct.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineLoaderProduct.setDescription('A textual string containing information about the engine loader.')
csOrionEngineLoaderVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderVersion.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineLoaderVersion.setDescription('A textual string containing information about the version of the loader.')
csOrionEngineLoaderDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderDate.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineLoaderDate.setDescription('A textual string containing information about the date of the loader.')
csOrionEngineLoaderTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLoaderTime.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineLoaderTime.setDescription('A textual string containing information about the time of the loader.')
csOrionEngineApplicationProduct = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationProduct.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineApplicationProduct.setDescription('A textual string containing information about the application.')
csOrionEngineApplicationVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationVersion.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineApplicationVersion.setDescription('A textual string containing information about the version of the application.')
csOrionEngineApplicationDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationDate.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineApplicationDate.setDescription('A textual string containing information about the date of the application.')
csOrionEngineApplicationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineApplicationTime.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineApplicationTime.setDescription('A textual string containing information about the time of the application.')
csOrionEngineSerialNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineSerialNumb.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineSerialNumb.setDescription('The serial number of the engine. This is a series of alphanumeric characters which uniquely identifies the engine on this blade.')
csOrionEngineAssemblyNumb = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineAssemblyNumb.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineAssemblyNumb.setDescription('The assembly number of the engine.')
csOrionEngineCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))).clone(namedValues=NamedValues(("mips-rm5270", 1), ("mips-rm5271", 2), ("mips-rm7000", 3), ("mips-unknown", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineCpuType.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineCpuType.setDescription('The type of cpu for the engine.')
csOrionEngineCpuVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineCpuVersion.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineCpuVersion.setDescription('The CPU version of the engine.')
csOrionEngineDataCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 24), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineDataCacheSize.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineDataCacheSize.setDescription('Data cache size of the engine.')
csOrionEngineInstructionCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 25), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineInstructionCacheSize.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineInstructionCacheSize.setDescription('Instruction cache size of the engine.')
csOrionEngineSecondaryCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 26), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineSecondaryCacheSize.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineSecondaryCacheSize.setDescription('Secondary cache size of the engine.')
csOrionEngineLevel3CacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 27), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLevel3CacheSize.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineLevel3CacheSize.setDescription('Level 3 cache size of the engine.')
csOrionEngineMemoryAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryAllocs.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryAllocs.setDescription('Memory allocated for the engine.')
csOrionEngineMemoryAllocFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryAllocFailures.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryAllocFailures.setDescription('Memory allocation failures for the engine.')
csOrionEngineMemoryFrees = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryFrees.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryFrees.setDescription('Memory freed for the engine.')
csOrionEngineMemoryBadFrees = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryBadFrees.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryBadFrees.setDescription('Memory free failures for the engine.')
csOrionEngineMemoryBytesAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 32), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryBytesAllocs.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryBytesAllocs.setDescription('Bytes allocated for the engine.')
csOrionEngineMemoryBytesFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 33), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineMemoryBytesFreed.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineMemoryBytesFreed.setDescription('Bytes freed for the engine.')
csOrionEngineFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 34), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineFreeMemory.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineFreeMemory.setDescription('Free memory for the engine.')
csOrionEngineLargestFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 35), Gauge32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineLargestFreeMemory.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineLargestFreeMemory.setDescription('Size of the largest free memory block for the engine.')
csOrionEngineFreeMemoryMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 36), Gauge32()).setUnits('100 kbyte').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineFreeMemoryMedium.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineFreeMemoryMedium.setDescription('Free memory, in 100 KByte unit, averaged over the last 30 seconds.')
csOrionEngineFreeMemoryLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 37), Gauge32()).setUnits('100 kbyte').setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineFreeMemoryLong.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineFreeMemoryLong.setDescription('Free memory, in 100 KByte unit, averaged over the last 10 minutes.')
csOrionEngineUtilizationMedium = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineUtilizationMedium.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineUtilizationMedium.setDescription('CPU utilization averaged over the last 30 seconds.')
csOrionEngineUtilizationLong = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineUtilizationLong.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineUtilizationLong.setDescription('CPU utilization averaged over the last 10 minutes.')
csOrionEngineForwardingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionEngineForwardingMode.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineForwardingMode.setDescription('Packet Forarding Mode for the Engine,HW Prefix,HW Flow,SW Passthrough')
csOrionEngineOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEngineOsVersion.setStatus('current')
if mibBuilder.loadTexts: csOrionEngineOsVersion.setDescription('The OS version of the engine/module.')
csOrionServiceQueueInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3))
csOrionQueueGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1), )
if mibBuilder.loadTexts: csOrionQueueGroupTable.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupTable.setDescription('A list of group of queues found in every blade')
csOrionQueueGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupType"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupId"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupPriorityIndex"))
if mibBuilder.loadTexts: csOrionQueueGroupEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupEntry.setDescription('An entry containing management information applicable to a particular group of queue.')
csOrionQueueGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemQueue", 1), ("portQueue", 2))))
if mibBuilder.loadTexts: csOrionQueueGroupType.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupType.setDescription("Indicates the type of queue group. 'systemQueue' is a group of queue used by the system as it sends out packets to the backplane. 'portQueue' is used by the the interface ports.")
csOrionQueueGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionQueueGroupId.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupId.setDescription('A unique id for each group of Queues. Currently (March 2001, for Release 3.0), there is only one group of queues to be shared by all ports/interfaces. And also one group of queues used to send out packets to the packet-ring. A future hardware version could come up with one group of queues per port, or multiple system queues. Our MIB model is ready for that.')
csOrionQueueGroupPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: csOrionQueueGroupPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupPriorityIndex.setDescription('A unique id for each group of priority of Queues. Currently (July 2001, for Release 3.0), there is only four priority groups. Priority Group 1, 2 and 3 have 100% and priority group 4 a group of 5 queues.')
csOrionQueueGroupSubGroupAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueGroupSubGroupAllocation.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupSubGroupAllocation.setDescription('An action object used to set the weigth of all queues that belong to the same group priority. It starts with octet 1 for the first queue and octet n-1 for the last queue. Each value will be propagated to the parameter csOrionQueueWeight of a specific csOrionQueueEntry. That should be used for reading. Currently(rel.3.0), a single priority group can have only a maximum of 5 queues. And, sum of percentage of all the Queues must not exceed 100%')
csOrionQueueGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 1, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueGroupOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupOperStatus.setDescription('Indicates operational status of this queue group.')
csOrionQueueGroupTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueGroupTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueGroupTableEnd.setDescription('End of this group. value undefined')
csOrionQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3), )
if mibBuilder.loadTexts: csOrionQueueTable.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueTable.setDescription('A list of individual queues in every csOrionGroupQueueTable')
csOrionQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupType"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupId"), (0, "COSINE-ORION-MIB", "csOrionQueueGroupPriorityIndex"), (0, "COSINE-ORION-MIB", "csOrionQueueId"))
if mibBuilder.loadTexts: csOrionQueueEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueEntry.setDescription('An entry containing management information applicable to a particular queue.')
csOrionQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: csOrionQueueId.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueId.setDescription('A unique id for each queue. Currently(rel.3.0), there are only 8 queues in every group.')
csOrionQueueClassOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("control", 1), ("efGuaranteed", 2), ("ef", 3), ("af1", 4), ("af2", 5), ("af3", 6), ("af4", 7), ("be", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueClassOfService.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueClassOfService.setDescription('Identifies a class of service this queue is handling.')
csOrionQueueWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueWeight.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueWeight.setDescription('Weight setting of this queue for scheduling expressed in percent. This can be modified along with other queues on the same priority group through the object csOrionQueueGroupPriorityAllocation.')
csOrionQueueMinThresholdForRed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMinThresholdForRed.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMinThresholdForRed.setDescription('Min threshold to start discarding the red packet. Represented as the percentage of the queue size, 256KB.')
csOrionQueueMinThresholdForYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMinThresholdForYellow.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMinThresholdForYellow.setDescription('Min threshold to start discarding the yellow packet. Represented as the percentage of the queue size, 256KB.')
csOrionQueueMinThresholdForGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMinThresholdForGreen.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMinThresholdForGreen.setDescription('Min threshold to start discarding the green packet. Represented as the percentage of the queue size, 256KB.')
csOrionQueueMaxRandomForRed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxRandomForRed.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMaxRandomForRed.setDescription('The max_random for red puts a cap on the random number generated by hardware Represented in .')
csOrionQueueMaxRandomForYellow = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxRandomForYellow.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMaxRandomForYellow.setDescription('The max_random for yellow puts a cap on the random number generated by hardware Represented in .')
csOrionQueueMaxRandomForGreen = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxRandomForGreen.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMaxRandomForGreen.setDescription('The max_random for green puts a cap on the random number generated by hardware Represented in .')
csOrionQueueMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionQueueMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueMaxThreshold.setDescription('Max threshold to discarding packets (red, yellow and green). Represented as the percentage of the queue size, 256KB.')
csOrionQueueTotalByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueTotalByteCount.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueTotalByteCount.setDescription('Total number of bytes dropped.')
csOrionQueuePacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueuePacketCount.setStatus('current')
if mibBuilder.loadTexts: csOrionQueuePacketCount.setDescription('Total number of packets counted so far.')
csOrionQueueAverageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQueueAverageSize.setStatus('current')
if mibBuilder.loadTexts: csOrionQueueAverageSize.setDescription('Average Queue Size at the present moment')
csOrionBladeInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBladeInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeInfoEnd.setDescription('End of this group. value undefined')
csOrionAccessListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1), )
if mibBuilder.loadTexts: csOrionAccessListTable.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListTable.setDescription('A list of Access List Entries.')
csOrionAccessListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionAccessListId"))
if mibBuilder.loadTexts: csOrionAccessListEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListEntry.setDescription('An entry containing filtering information used to classify packets.')
csOrionAccessListId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionAccessListId.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListId.setDescription('An identifier for this Access List Entry.')
csOrionAccessListStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListStartAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListStartAddress.setDescription('')
csOrionAccessListEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListEndAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListEndAddress.setDescription('')
csOrionAccessListPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListPoolId.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListPoolId.setDescription('The NAT Pool that is used when NAT is performed on packets matching this access list.')
csOrionAccessListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAccessListStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListStatus.setDescription('This object is used to create/delete entries in this table.')
csOrionGenAclTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2), )
if mibBuilder.loadTexts: csOrionGenAclTable.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclTable.setDescription('A list of Access List Entries. This is the table used by all the services (other than NAT) provided by Orion.')
csOrionGenAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionGenAclId"))
if mibBuilder.loadTexts: csOrionGenAclEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclEntry.setDescription('An entry containing filtering information used to classify packets.')
csOrionGenAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionGenAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclId.setDescription('An identifier for this Access List Entry.')
csOrionGenAclSrcAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclSrcAddress.setDescription('')
csOrionGenAclSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcMask.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclSrcMask.setDescription('')
csOrionGenAclDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclDstAddress.setDescription('')
csOrionGenAclDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstMask.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclDstMask.setDescription('')
csOrionGenAclProt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 6), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclProt.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclProt.setDescription('The Protocol ID that a packet must contain to match this access list entry. The value -1 represents a wildcard for this General Access List parameter.')
csOrionGenAclTos = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclTos.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclTos.setDescription('The Type of Service that a packet must contain to match this access list entry. The value -1 represents a wildcard for this General Access List parameter.')
csOrionGenAclStartSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 8), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclStartSrcPort.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclStartSrcPort.setDescription("The beginning of a range of ports that a packet's source port must satisfy to match this access list entry. The value -1 represents a wildcard for this General Access List parameter.")
csOrionGenAclEndSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 9), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclEndSrcPort.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclEndSrcPort.setDescription("The end of a range of ports that a packet's source port must satisfy to match this access list entry. The value -1 represents a wildcard for this General Access List parameter.")
csOrionGenAclStartDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 10), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclStartDstPort.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclStartDstPort.setDescription("The beginning of a range of ports that a packet's destination port must satisfy to match this access list entry. The value -1 represents a wildcard for this General Access List parameter.")
csOrionGenAclEndDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 11), Integer32().clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclEndDstPort.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclEndDstPort.setDescription("The end of a range of ports that a packet's destination port must satisfy to match this access list entry. The value -1 represents a wildcard for this General Access List parameter.")
csOrionGenAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclStatus.setDescription('This object is used to create/delete entries in this table.')
csOrionGenAclSrcAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcAddressList.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclSrcAddressList.setDescription('The name of the address-list representing all source addresses For the GAL to be operational there should be at least one entry in the csOrionAddressListTable table with its csOrionAddressListName attribute being equal to the value of this attribute')
csOrionGenAclDstAddressList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstAddressList.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclDstAddressList.setDescription('The name of the address-list representing all destination addresses For the GAL to be operational there should be at least one entry in the csOrionAddressListTable table with its csOrionAddressListName attribute being equal to the value of this attribute')
csOrionGenAclSrcPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclSrcPortList.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclSrcPortList.setDescription('The name of the numeric-list representing all source ports. For the GAL to be operational there should be at least one entry in the csOrionNumericListTable table with its csOrionNumericListName attribute being equal to the value of this attribute.')
csOrionGenAclDstPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionGenAclDstPortList.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclDstPortList.setDescription('The name of the numeric-list representing all source ports. An empty string represents a wildcard for this General Access List parameter. For the GAL to be operational there should be at least one entry in the csOrionNumericListTable table with its csOrionNumericListName attribute being equal to the value of this attribute.')
csOrionGenAclTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionGenAclTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionGenAclTableEnd.setDescription('End of this group. value undefined')
csOrionAddressListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4), )
if mibBuilder.loadTexts: csOrionAddressListTable.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListTable.setDescription('This table stores named lists of IP addresses. An address is specified as an IP address and mask. Each table entry constitutes a single address.')
csOrionAddressListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAddressListName"), (0, "COSINE-ORION-MIB", "csOrionAddressListIpAddress"), (0, "COSINE-ORION-MIB", "csOrionAddressListMask"))
if mibBuilder.loadTexts: csOrionAddressListEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListEntry.setDescription('Each entry contains information about a single address ')
csOrionAddressListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionAddressListName.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListName.setDescription('The name of the address-list. A name shall only contain alphanumeric characters and hyphens.')
csOrionAddressListIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionAddressListIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListIpAddress.setDescription('The IP address for this entry.')
csOrionAddressListMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionAddressListMask.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListMask.setDescription('The mask for this entry.')
csOrionAddressListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAddressListRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csOrionAddressListTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAddressListTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionAddressListTableEnd.setDescription('End of this group. value undefined')
csOrionNumericListTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6), )
if mibBuilder.loadTexts: csOrionNumericListTable.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListTable.setDescription('This table stores named lists of integers. A numeric-list is a named list that includes discreet integers or integer ranges. A numeric-list is typed: Initally a single type has been identified for using numeric-lists to represent port-lists.')
csOrionNumericListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNumericListType"), (0, "COSINE-ORION-MIB", "csOrionNumericListName"), (0, "COSINE-ORION-MIB", "csOrionNumericListValue"), (0, "COSINE-ORION-MIB", "csOrionNumericListUpperLimit"))
if mibBuilder.loadTexts: csOrionNumericListEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListEntry.setDescription('Each entry specifies a single numeric specification: a discreet integer or a range of contiguous integers.')
csOrionNumericListType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("port", 1))).clone('port'))
if mibBuilder.loadTexts: csOrionNumericListType.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListType.setDescription('The match type for this entry: port: this numeric list represents a list of ports.')
csOrionNumericListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionNumericListName.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListName.setDescription('The name of the numeric-list. A name shall contain only alphanumeric characters and hyphens (-).')
csOrionNumericListValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csOrionNumericListValue.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListValue.setDescription('The integer for this entry. This value shall always be used.')
csOrionNumericListUpperLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: csOrionNumericListUpperLimit.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListUpperLimit.setDescription("The integer representing the upper boundary of a range. This attribute shall only be used when `includeRange'is specified in the csOrionNumericListMatchType attribute.")
csOrionNumericListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNumericListRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionNumericListRowStatus.setDescription('The RowStatus object for this table. This is used to add/delete rows from this table.')
csOrionAccessListInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAccessListInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionAccessListInfoEnd.setDescription('End of this group. value undefined')
csOrionFwConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1))
csOrionFwGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1))
csOrionFwProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2))
csOrionFwGenProxyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1))
csOrionFwFtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2))
csOrionFwHttpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3))
csOrionFwSmtpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4))
csOrionFwTelnetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5))
csOrionFwPop3Config = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6))
csOrionFwPlugConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7))
csOrionFwNntpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8))
csOrionFwLdapConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9))
csOrionFwLnotesConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10))
csOrionFwAolConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11))
csOrionFwCompuServeConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12))
csOrionFwNetMeetingConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13))
csOrionFwMsSqlConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14))
csOrionFwRshConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15))
csOrionFwInsideIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1), )
if mibBuilder.loadTexts: csOrionFwInsideIfTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwInsideIfTable.setDescription('This contains the list of all the interfaces on the inside, or trusted, side of the firewall. NOTE: This table is no longer in use.')
csOrionFwInsideIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwInsideIfIf"), (0, "COSINE-ORION-MIB", "csOrionFwInsideIfAddr"))
if mibBuilder.loadTexts: csOrionFwInsideIfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwInsideIfEntry.setDescription('')
csOrionFwInsideIfIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionFwInsideIfIf.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwInsideIfIf.setDescription("The identifier of the 'inside' virtual interface.")
csOrionFwInsideIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionFwInsideIfAddr.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwInsideIfAddr.setDescription("The Ip address of the 'inside' virtual interface.")
csOrionFwInsideIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwInsideIfMask.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwInsideIfMask.setDescription("The Ip Mask of the 'inside' virtual interface.")
csOrionFwInsideIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwInsideIfRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwInsideIfRowStatus.setDescription('The RowStatus object for this table.')
csOrionFwDmzIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2), )
if mibBuilder.loadTexts: csOrionFwDmzIfTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDmzIfTable.setDescription('This contains the list of all the interfaces on the DmzIf side of the firewall. NOTE: This table is no longer in use.')
csOrionFwDmzIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwDmzIf"), (0, "COSINE-ORION-MIB", "csOrionFwDmzIfAddr"))
if mibBuilder.loadTexts: csOrionFwDmzIfEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDmzIfEntry.setDescription('')
csOrionFwDmzIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionFwDmzIf.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDmzIf.setDescription("The identifier of a 'Dmz' virtual interface.")
csOrionFwDmzIfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionFwDmzIfAddr.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDmzIfAddr.setDescription("The Ip address of a 'Dmz' virtual interface.")
csOrionFwDmzIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDmzIfMask.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDmzIfMask.setDescription("The Ip Mask of a 'Dmz' virtual interface.")
csOrionFwDmzIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDmzIfRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDmzIfRowStatus.setDescription('The RowStatus object for this table.')
csOrionFwNwGroupTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3), )
if mibBuilder.loadTexts: csOrionFwNwGroupTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupTable.setDescription('This contains definitions of all the network groups referred to in other parts of the Firewall configuration. NOTE: This table is no longer in use.')
csOrionFwNwGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwNwGroupName"), (0, "COSINE-ORION-MIB", "csOrionFwNwGroupAddr"))
if mibBuilder.loadTexts: csOrionFwNwGroupEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupEntry.setDescription('')
csOrionFwNwGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: csOrionFwNwGroupName.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupName.setDescription('The Name assigned to this Network Group.')
csOrionFwNwGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionFwNwGroupAddr.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupAddr.setDescription('The Ip address of this member of this Network Group.')
csOrionFwNwGroupMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNwGroupMask.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupMask.setDescription('The Ip Mask assigned to this member of this Network Group.')
csOrionFwNwGroupInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inside", 1), ("outside", 2), ("serviceNet", 3), ("any", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNwGroupInterface.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupInterface.setDescription('The Interface from which this member of this Network Group can be reached.')
csOrionFwNwGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNwGroupRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNwGroupRowStatus.setDescription('The RowStatus object for this table.')
csOrionFwEvLogTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 4), )
if mibBuilder.loadTexts: csOrionFwEvLogTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwEvLogTable.setDescription('A table for Event Logging Control for FIREWALL.')
csOrionFwEvLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwEvLogEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwEvLogEntry.setDescription('Each entry contains the event logging level for the FIREWALL module on a virtual router.')
csOrionFwEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 4, 1, 1), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: csOrionFwEvLogLevel.setDescription('This object is used to set the level of details for event logs for FIREWALL. ')
csOrionFwGenCfgTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 5), )
if mibBuilder.loadTexts: csOrionFwGenCfgTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenCfgTable.setDescription('A table for Configuration Control for FIREWALL.')
csOrionFwGenCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwGenCfgEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenCfgEntry.setDescription('Each entry contains the generic configuration for the FIREWALL module on a virtual router.')
csOrionFwAccCfgFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("insync", 1), ("outofsync", 2), ("readytosync", 3))).clone('insync')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwAccCfgFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccCfgFlag.setDescription('This object is used to set the access configuration flag for FIREWALL.')
csOrionFwGenProxyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1), )
if mibBuilder.loadTexts: csOrionFwGenProxyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyTable.setDescription('This table specifies various configuration parameters for each applicable proxy.')
csOrionFwGenProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwGenProxyId"))
if mibBuilder.loadTexts: csOrionFwGenProxyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyEntry.setDescription('Each entry specifies a set of configuration parameters for a single proxy.')
csOrionFwGenProxyId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("rsh", 10), ("aol", 11), ("cs", 12), ("netm", 13), ("mssql", 14))))
if mibBuilder.loadTexts: csOrionFwGenProxyId.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyId.setDescription('The proxy to which this entry applies.')
csOrionFwGenProxyChildLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwGenProxyChildLimit.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyChildLimit.setDescription("The maximum number of child processes that each of this proxy's daemon allows to run at a given time. If this option is set to zero, each daemon allows an unlimited number of child processes to run at any given time. Note, this is not applicable to the smtp proxy.")
csOrionFwGenProxyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwGenProxyStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyStatus.setDescription('This is used to enable/disable a specific proxy.')
csOrionFwGenProxyActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwGenProxyActiveSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyActiveSessions.setDescription('This is the current number of active sessions for a specific proxy.')
csOrionFwDestTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2), )
if mibBuilder.loadTexts: csOrionFwDestTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestTable.setDescription('This table specifies destination hosts and networks permissions for each applicable proxy. NOTE: This table has been replaced by csOrionFwAccessTable.')
csOrionFwDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwDestProxy"), (0, "COSINE-ORION-MIB", "csOrionFwDestIndex"))
if mibBuilder.loadTexts: csOrionFwDestEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestEntry.setDescription('Each entry specifies a single destination host or network.')
csOrionFwDestProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("mssql", 10), ("aol", 11), ("cs", 12), ("netm", 13))))
if mibBuilder.loadTexts: csOrionFwDestProxy.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestProxy.setDescription('The proxy to which this entry applies.')
csOrionFwDestIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFwDestIndex.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestIndex.setDescription('The table index for this entry applies. This identifies the order in which the destination rules are applied.')
csOrionFwDestAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestAccess.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestAccess.setDescription('The access policy applied to the host or network identified in this entry.')
csOrionFwDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestAddr.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestAddr.setDescription('The Destination address for this entry.')
csOrionFwDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestMask.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestMask.setDescription('The Destination address mask for this entry.')
csOrionFwDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwDestRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwDestRowStatus.setDescription('The RowStatus object for this entry.')
csOrionFwHostTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3), )
if mibBuilder.loadTexts: csOrionFwHostTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostTable.setDescription('This table specifies source hosts and networks permissions for each applicable proxy. NOTE: This table has been replaces by csOrionFwAccessTable.')
csOrionFwHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwHostProxy"), (0, "COSINE-ORION-MIB", "csOrionFwHostIndex"))
if mibBuilder.loadTexts: csOrionFwHostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostEntry.setDescription('Each entry specifies a single destination host or network.')
csOrionFwHostProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("mssql", 10), ("aol", 11), ("cs", 12), ("netm", 13))))
if mibBuilder.loadTexts: csOrionFwHostProxy.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostProxy.setDescription('The proxy to which this entry applies.')
csOrionFwHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFwHostIndex.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostIndex.setDescription('The table index for this entry applies. This identifies the order in which the host rules are applied.')
csOrionFwHostAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostAccess.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostAccess.setDescription('The access policy applied to the host or network identified in this entry.')
csOrionFwHostAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostAddr.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostAddr.setDescription('The Source address for this entry.')
csOrionFwHostMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostMask.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostMask.setDescription('The Source address mask for this entry.')
csOrionFwHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHostRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHostRowStatus.setDescription('The RowStatus object for this entry.')
csOrionFwAccessTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4), )
if mibBuilder.loadTexts: csOrionFwAccessTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessTable.setDescription('This table specifies the policy to apply for each new connection. A connection is identified by its source id, destination id, and protocol.')
csOrionFwAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwAccessPriority"))
if mibBuilder.loadTexts: csOrionFwAccessEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessEntry.setDescription('Each entry specifies a single Access Policy.')
csOrionFwAccessPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionFwAccessPriority.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessPriority.setDescription('The priority of this Access Table entry.')
csOrionFwAccessSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessSourceAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessSourceAddr.setDescription('The Address of the source of a proxy connection.')
csOrionFwAccessSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessSourceMask.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessSourceMask.setDescription('The Mask of the source of a proxy connection.')
csOrionFwAccessDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessDestAddr.setDescription('The Address of the destination of a proxy connection.')
csOrionFwAccessDestMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestMask.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessDestMask.setDescription('The Mask of the destination of a proxy connection.')
csOrionFwAccessAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessAction.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessAction.setDescription('The action to perform on connections that match the Source Id, Destination Id, and the Protocol.')
csOrionFwAccessPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessPortNumber.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessPortNumber.setDescription('This object identifies the port number this access entry will be applied. Together with the Source Id, and the Destination Id, this is used to identify a specific connection.')
csOrionFwAccessPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessPolicy.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessPolicy.setDescription('This is the name of the policy to be applied to any connection that matches the Source Id, Destination Id, and Protocol defined in this entry. The definition of the policy itself can be found in the corresponding protocol-specific Policy Table.')
csOrionFwAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessRowStatus.setDescription('A row status type for this Table entry.')
csOrionFwAccessSourceAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessSourceAddrList.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessSourceAddrList.setDescription('The name of the address-list representing all source addresses. For the proxy access entry to be operational there should be at least one entry in the csOrionAddressListTable table with its csOrionAddressListName attribute equal to the value of this attribute.')
csOrionFwAccessDestAddrList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestAddrList.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessDestAddrList.setDescription('The name of the address-list representing all destination addresses. For the proxy access entry to be operational there should be at least one entry in the csOrionAddressListTable table with its csOrionAddressListName attribute equal to the value of this attribute.')
csOrionFwAccessDestPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAccessDestPortList.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAccessDestPortList.setDescription('The name of the port-list representing all destination addresses. For the proxy access entry to be operational there should be at least one entry in the csOrionAddressListTable table with its csOrionAddressListName attribute equal to the value of this attribute.')
csOrionFwProxyDaemonTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5), )
if mibBuilder.loadTexts: csOrionFwProxyDaemonTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwProxyDaemonTable.setDescription('This is a list of daemon ports along with the protocol that uses it.')
csOrionFwProxyDaemonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwProxyDaemonPortNumber"))
if mibBuilder.loadTexts: csOrionFwProxyDaemonEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwProxyDaemonEntry.setDescription('Each entry specifies a daemon port and the protocol.')
csOrionFwProxyDaemonPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionFwProxyDaemonPortNumber.setStatus('current')
if mibBuilder.loadTexts: csOrionFwProxyDaemonPortNumber.setDescription('The port number of this daemon.')
csOrionFwProxyDaemonProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ftp", 1), ("http", 2), ("telnet", 3), ("smtp", 4), ("pop3", 5), ("plug", 6), ("nntp", 7), ("ldap", 8), ("lnotes", 9), ("rsh", 10), ("aol", 11), ("cs", 12), ("netm", 13), ("mssql", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwProxyDaemonProtocol.setStatus('current')
if mibBuilder.loadTexts: csOrionFwProxyDaemonProtocol.setDescription('The protocol that uses this daemon. This is a mandatory during creation of entry.')
csOrionFwProxyDaemonRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwProxyDaemonRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwProxyDaemonRowStatus.setDescription('The RowStatus object for this entry.')
csOrionFwGenProxyConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwGenProxyConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwGenProxyConfigEnd.setDescription('End of this group. value undefined')
csOrionFwFtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1), )
if mibBuilder.loadTexts: csOrionFwFtpConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwFtpConfigTable.setDescription('This table specifies Ftp functions that are permitted or denied. NOTE: This table has been replaced by csOrionFwFtpPolicyTable.')
csOrionFwFtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwFtpConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwFtpConfigEntry.setDescription('Each entry specifies a set of FTP proxy configuration parameters for a single firewall instance.')
csOrionFwFtpLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwFtpLog.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwFtpLog.setDescription('The ftp functions that are logged by this ftp proxy. It is a bitmap where each bit represents a function. The following is the bit assingment, abor (0), acct (1), allo (2), appe (3), cdup (4), cwd (5), dele (6), help (7), list (8), mkd (9), mode (10), nlst (11), noop (12), pass (13), pasv (14), port (15), pwd (16), quit (17), retr (18), rmd (19), rnfr (20), rnto (21), stor (22), stou (23), stru (24), type (25), user (26), xcup (27), xcwd (28), xmkd (29), xpwd (30), xrmd (31) ')
csOrionFwFtpFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwFtpFunctionIds.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwFtpFunctionIds.setDescription('A set of specific ftp functions. It is a bitmap where each bit represents a specific function that will be suported by this proxy. The following is the bit assignment, abor (0), acct (1), allo (2), appe (3), cdup (4), cwd (5), dele (6), help (7), list (8), mkd (9), mode (10), nlst (11), noop (12), pass (13), pasv (14), port (15), pwd (16), quit (17), retr (18), rmd (19), rnfr (20), rnto (21), stor (22), stou (23), stru (24), type (25), user (26), xcup (27), xcwd (28), xmkd (29), xpwd (30), xrmd (31) ')
csOrionFwFtpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2), )
if mibBuilder.loadTexts: csOrionFwFtpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyTable.setDescription('This table specifies individual Ftp Policies. The Fw Access Table identifies the specific policies to apply to specific Ftp connections.')
csOrionFwFtpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwFtpPolicyName"))
if mibBuilder.loadTexts: csOrionFwFtpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyEntry.setDescription('Each entry specifies a single FtpPolicy Policy.')
csOrionFwFtpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwFtpPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyName.setDescription('The name used to identify this Ftp Policy entry.')
csOrionFwFtpPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyAuthenticate.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required.')
csOrionFwFtpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwFtpPolicyHandoffAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyHandoffAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyHandoffAddr.setDescription('The host to which this proxy hands the proxy request.')
csOrionFwFtpPolicyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone(hexValue="0000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyLog.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyLog.setDescription('The ftp functions that are logged by this ftp proxy. It is a bitmap where each bit represents a function. The following is the bit assingment, abor (0), acct (1), allo (2), appe (3), cdup (4), cwd (5), dele (6), help (7), list (8), mkd (9), mode (10), nlst (11), noop (12), pass (13), pasv (14), port (15), pwd (16), quit (17), rein (18), rest (19), retr (20), rmd (21), rnfr (22), rnto (23), site (24), size (25), smnt (26), stat (27), stor (28), stou (29), stru (30), syst (31), type (32), user (33), xcup (34), xcwd (35), xmkd (36), xpwd (37), xrmd (38) ')
csOrionFwFtpPolicyFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5).clone(hexValue="7FFFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyFunctionIds.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyFunctionIds.setDescription('A set of specific ftp functions. It is a bitmap where each bit represents a specific function that will be suported by this proxy. The following is the bit assignment, abor (0), acct (1), allo (2), appe (3), cdup (4), cwd (5), dele (6), help (7), list (8), mkd (9), mode (10), nlst (11), noop (12), pass (13), pasv (14), port (15), pwd (16), quit (17), rein (18), rest (19), retr (20), rmd (21), rnfr (22), rnto (23), site (24), size (25), smnt (26), stat (27), stor (28), stou (29), stru (30), syst (31), type (32), user (33), xcup (34), xcwd (35), xmkd (36), xpwd (37), xrmd (38) ')
csOrionFwFtpPolicyDynamicPacketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyDynamicPacketFilter.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyDynamicPacketFilter.setDescription('When enabled, allows the ftp proxy to, create dynamic packet filter for data transfer (layer 2 forwarding)')
csOrionFwFtpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwFtpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3), )
if mibBuilder.loadTexts: csOrionFwFtpAuthTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthTable.setDescription('This table specifies the authentication configuration for the Ftp Proxy.')
csOrionFwFtpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwFtpAuthEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthEntry.setDescription('Each entry specifies a authentication configuration.')
csOrionFwFtpAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthStatus.setDescription('The current status of ftp authentication mode.')
csOrionFwFtpAuthServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("ldap", 4))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthServiceType.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthServiceType.setDescription('The service type used for authentication.')
csOrionFwFtpAuthMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chap", 2), ("pap", 3), ("password", 4))).clone('pap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthMechanism.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthMechanism.setDescription('The machanism used for authentication.')
csOrionFwFtpAuthServers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthServers.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthServers.setDescription('The authentication server address used by proxy to connect to.')
csOrionFwFtpAuthNonTransparentAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthNonTransparentAuth.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthNonTransparentAuth.setDescription('The configuration for non-transparent mode.')
csOrionFwFtpAuthPasswdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthPasswdTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthPasswdTimeout.setDescription('The password inactive timeout.')
csOrionFwFtpAuthPerUserAuthFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwFtpAuthPerUserAuthFilter.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpAuthPerUserAuthFilter.setDescription('The ldap filter name on per user base.')
csOrionFwFtpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwFtpConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwFtpConfigEnd.setDescription('End of this group. value undefined')
csOrionFwHttpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1), )
if mibBuilder.loadTexts: csOrionFwHttpConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpConfigTable.setDescription('This table specifies a set of Http proxy configuration parameters. NOTE: This table has been replaced by csOrionFwHttpPolicyTable.')
csOrionFwHttpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwHttpConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpConfigEntry.setDescription('Each entry specifies a set of Http proxy configuration parameters for a single Http instance.')
csOrionFwHttpLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpLog.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpLog.setDescription('The http functions that are logged by the http proxy. It is a bitmap where each bit represents an http function that can be logged. The following is the bit assignment, binary (0), dir (1), exec (2), ftp (3), httpreq (4), http (5), read (6), retr (7), stor (8), text (9), type (10), write (11)')
csOrionFwHttpOurname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpOurname.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpOurname.setDescription("The host and domain name that the HTTP proxy uses when putting its own name into non-transparent forarded URL's.")
csOrionFwHttpFeatureIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpFeatureIds.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpFeatureIds.setDescription('A set of specific http features. It is a bitmap where each bit represents an http feature supported by this proxy. The following is the bit assignment, activex (0), frames (1), java (2), script (3)')
csOrionFwHttpFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpFunctionIds.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpFunctionIds.setDescription('A set of specific http functions. It is a bitmap where each bit represents an http function supported by this proxy. The following is the bit assignment, binary (0), dir (1), exec (2), ftp (3), httpreq (4), http (5), read (6), retr (7), stor (8), text (9), type (10), write (11)')
csOrionFwHttpHeaderIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwHttpHeaderIds.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwHttpHeaderIds.setDescription('A set of specific http headers. It is a bitmap where each bit represents an http header supported by this proxy. The following is the bit assignment, accept-charset (0), accept-encoding (1), accept-language (2), allow (3), content-encoding (4), content-language (5), date (6), expires (7), from (8), if-modified-since (9), last-modified (10), link (11), mime-version (12), pragma (13), referer (14), retry-after (15), server (16), title (17), uri (18), user-agent (19), www-authenticate (20)')
csOrionFwHttpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2), )
if mibBuilder.loadTexts: csOrionFwHttpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyTable.setDescription('This table specifies individual Http Policies. The Fw Access Table identifies the specific policies to apply to specific Http connections.')
csOrionFwHttpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwHttpPolicyName"))
if mibBuilder.loadTexts: csOrionFwHttpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyEntry.setDescription('Each entry specifies a single HttpPolicy Policy.')
csOrionFwHttpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwHttpPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyName.setDescription('The name used to identify this Http Policy entry.')
csOrionFwHttpPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyAuthenticate.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required.')
csOrionFwHttpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwHttpPolicyHandoffAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyHandoffAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyHandoffAddr.setDescription('The host to which this proxy hands the proxy request.')
csOrionFwHttpPolicyOurname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyOurname.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyOurname.setDescription("The host and domain name that the HTTP proxy uses when putting its own name into non-transparent forarded URL's.")
csOrionFwHttpPolicyLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyLog.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyLog.setDescription('The Http functions that are logged by this Http proxy. It is a bitmap where each bit represents a function. By default, all functions are not logged. The following is the bit assignment, bin (0), -- binary dir (1), -- directory exec (2), -- execute ftp (3), -- ftp hreq (4), -- http request http (5), -- http read (6), -- read retr (7), -- retrieve stor (8), -- store text (9), -- text type (10), -- type wrte (11) -- write ')
csOrionFwHttpPolicyFunctionIds = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2).clone(hexValue="0FFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyFunctionIds.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyFunctionIds.setDescription('A set of specific http functions. It is a bitmap where each bit represents a specific function that will be suported by this proxy. The following is the bit assignment, bin (0), -- binary dir (1), -- directory exec (2), -- execute ftp (3), -- ftp hreq (4), -- http request http (5), -- http read (6), -- read retr (7), -- retrieve stor (8), -- store text (9), -- text type (10), -- type wrte (11) -- write ')
csOrionFwHttpPolicyFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="FF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyFeatures.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyFeatures.setDescription('A set of specific http features. It is a bitmap where each bit represents a specific features that will be suported by this proxy. By default, all features are allowed. The following is the bit assignment, actx (0), -- activex fram (1), -- frames htm2 (2), -- html 2 java (3), -- java kanj (4), -- kanji legk (5), -- legacy kanji mpf (6), -- multi part form scrp (7), -- java script ')
csOrionFwHttpPolicyHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3).clone(hexValue="1FFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyHeader.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyHeader.setDescription('A set of specific http headers. It is a bitmap where each bit represents a specific header that will be suported by this proxy. By default, all http headers are supported. The following is the bit assignment, achr (0), -- accept charset aenc (1), -- accept encoding alng (2), -- accept language alow (3), -- allow cenc (4), -- content encoding clng (5), -- content language date (6), -- date exp (7), -- expires from (8), -- from imod (9), -- if modified since lmod (10), -- last modified lnk (11), -- link mime (12), -- mime version prgm (13), -- pragma refr (14), -- referer reta (15), -- retry after serv (16), -- server titl (17), -- title uri (18), -- uniform resource locator user (19), -- user agent www (20), -- www authenticate ')
csOrionFwHttpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwHttpPortTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3), )
if mibBuilder.loadTexts: csOrionFwHttpPortTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPortTable.setDescription('This table defines the specific ports that a particular HTTP policy will permit or deny.')
csOrionFwHttpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwHttpPortPolicyName"))
if mibBuilder.loadTexts: csOrionFwHttpPortEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPortEntry.setDescription('Each entry specifies a single Http Policy.')
csOrionFwHttpPortPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwHttpPortPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPortPolicyName.setDescription('The policy name this port access is applied to.')
csOrionFwHttpPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPortNumber.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPortNumber.setDescription('The port number.')
csOrionFwHttpPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPortAccess.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPortAccess.setDescription('The access to this port number.')
csOrionFwHttpPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpPortRowStatus.setDescription('The RowStatus object for this entry.')
csOrionFwHttpAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4), )
if mibBuilder.loadTexts: csOrionFwHttpAuthTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthTable.setDescription('This table specifies the authentication configuration for the Ftp Proxy.')
csOrionFwHttpAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwHttpAuthEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthEntry.setDescription('Each entry specifies a authentication configuration.')
csOrionFwHttpAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthStatus.setDescription('The current status of http authentication mode.')
csOrionFwHttpAuthServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("ldap", 4))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthServiceType.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthServiceType.setDescription('The service type used for authentication.')
csOrionFwHttpAuthMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chap", 2), ("pap", 3), ("password", 4))).clone('pap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthMechanism.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthMechanism.setDescription('The machanism used for authentication.')
csOrionFwHttpAuthServers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthServers.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthServers.setDescription('The authentication server address used by proxy to connect to.')
csOrionFwHttpAuthNonTransparentAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthNonTransparentAuth.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthNonTransparentAuth.setDescription('The configuration for non-transparent mode.')
csOrionFwHttpAuthPasswdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthPasswdTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthPasswdTimeout.setDescription('The password inactive timeout.')
csOrionFwHttpAuthPerUserAuthFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwHttpAuthPerUserAuthFilter.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpAuthPerUserAuthFilter.setDescription('The ldap filter name on per user base.')
csOrionFwHttpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwHttpConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwHttpConfigEnd.setDescription('End of this group. value undefined')
csOrionFwSmtpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1), )
if mibBuilder.loadTexts: csOrionFwSmtpConfigTable.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpConfigTable.setDescription('This table specifies a set of Smtp proxy configuration parameters. NOTE: This table has been replaced by csOrionFwSmtpPolicyTable.')
csOrionFwSmtpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwSmtpConfigEntry.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpConfigEntry.setDescription('Each entry specifies a set of Smtp proxy configuration parameters for a single Smtp instance.')
csOrionFwSmtpBadAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpBadAdmin.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpBadAdmin.setDescription('The username to which the smapd server forwards mail that it cannot deliver.')
csOrionFwSmtpBadDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpBadDir.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpBadDir.setDescription('The directory in which the smapd server places any spooled mail that it cannot deliver.')
csOrionFwSmtpMaxChildren = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpMaxChildren.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpMaxChildren.setDescription('The maximum number of child processes the smapd server can fork to handle mail.')
csOrionFwSmtpWakeup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpWakeup.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpWakeup.setDescription('The number of seconds the smapd server sleeps between scans of spool directory for undelivered mail.')
csOrionFwSmtpInternalMailHub = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpInternalMailHub.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpInternalMailHub.setDescription('This object identifies the Internal Mail Hub using either an IP address or a domain name.')
csOrionFwSmtpLocalDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLocalDomain.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpLocalDomain.setDescription('Local domain that the firewall is serving -- IP address or domain name.')
csOrionFwSmtpLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("normal", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLogging.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpLogging.setDescription('Specifies if normal or no logging is to be done on SMTP proxy.')
csOrionFwSmtpLogRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLogRelay.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpLogRelay.setDescription('Logs the rejection of mail relay attempts.')
csOrionFwSmtpLogSpam = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpLogSpam.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpLogSpam.setDescription('Logs the rejection of mail spam attempts.')
csOrionFwSmtpMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpMaxBytes.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpMaxBytes.setDescription('Maximum number of bytes of the mail content. The value 0 indicates no maximum.')
csOrionFwSmtpMaxRecip = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpMaxRecip.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpMaxRecip.setDescription('The maximum number of recipients of the mail message. The value 0 indicates no maximum.')
csOrionFwSmtpSpamReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 12), Integer32().clone(554)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpSpamReply.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpSpamReply.setDescription('This object controls the type of response the SMTP proxy makes back to the connected SMTP server when nuisance mail is detected: 554 - Explicitly reject and notify the connected server. 250 - Acknowledge acceptance of the message but drop it at the firewall.')
csOrionFwSmtpRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 1, 1, 13), Integer32().clone(550)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFwSmtpRelayReply.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwSmtpRelayReply.setDescription('This object controls the type of response the SMTP proxy makes back to the connected SMTP server when unauthorized mail relaying is detected: 550 - Explicitly reject and notify the connected server. 250 - Acknowledge acceptance of the message but drop it at the firewall.')
csOrionFwSmtpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2), )
if mibBuilder.loadTexts: csOrionFwSmtpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyTable.setDescription('This table specifies individual SMTP Policies. The Fw Access Table identifies the specific policies to apply to specific SMTP connections.')
csOrionFwSmtpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpPolicyName"))
if mibBuilder.loadTexts: csOrionFwSmtpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyEntry.setDescription('Each entry specifies a single SmtpPolicy Policy.')
csOrionFwSmtpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwSmtpPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyName.setDescription('The name used to identify this Smtp Policy entry.')
csOrionFwSmtpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(120)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyTimeout.setDescription('The timeout limit on idle connection in seconds.')
csOrionFwSmtpPolicyInternalMailHub = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyInternalMailHub.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyInternalMailHub.setDescription('The default internal mail hub for email to go to if the destination mail for the protected domain(see ..).')
csOrionFwSmtpPolicyBadEmailAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyBadEmailAdmin.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyBadEmailAdmin.setDescription('The administrator that will receive email notification of any bad email.')
csOrionFwSmtpPolicyLocalDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLocalDomain.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLocalDomain.setDescription('The domain currently being protected by the firewall.')
csOrionFwSmtpPolicyMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMaxBytes.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMaxBytes.setDescription('This is the maximum size (in bytes) of the mail body that the proxy will accept. Any data beyond the maximum size is dropped. NOTE: zero (0) means no limit restriction.')
csOrionFwSmtpPolicyMaxRecipients = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMaxRecipients.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMaxRecipients.setDescription('This is the maximum recipients that the proxy will allow at any given email. NOTE: zero (0) means no limit restriction.')
csOrionFwSmtpPolicyLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("normal", 2))).clone('normal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogging.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogging.setDescription('Indicates if normal or no logging is to be done.')
csOrionFwSmtpPolicyLogRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogRelay.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogRelay.setDescription('Indicates if normal or no logging is to be done.')
csOrionFwSmtpPolicyRelayReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(250, 550))).clone(namedValues=NamedValues(("ok", 250), ("unavail", 550))).clone('ok')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyRelayReply.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyRelayReply.setDescription('This object controls the type of response the SMTP proxy makes back to the connected SMTP server when unauthorized mail relaying is detected.')
csOrionFwSmtpPolicyLogSpam = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("reject", 2))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogSpam.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyLogSpam.setDescription('Indicates if normal or no logging is to be done.')
csOrionFwSmtpPolicySpamReply = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(250, 554))).clone(namedValues=NamedValues(("ok", 250), ("failed", 554))).clone('ok')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicySpamReply.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicySpamReply.setDescription('This object controls the type of response the SMTP proxy makes back to the connected SMTP server when unauthorized mail relaying is detected.')
csOrionFwSmtpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyRowStatus.setDescription('Row status for this entry.')
csOrionFwSmtpPolicyMimeCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMimeCheck.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpPolicyMimeCheck.setDescription('This object controls whether the proxy attempts to validate the syntax of all MIME attachments within the email message')
csOrionFwSmtpRelayTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3), )
if mibBuilder.loadTexts: csOrionFwSmtpRelayTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpRelayTable.setDescription('This table defines the specific email relay that a particular SMTP policy will permit or deny.')
csOrionFwSmtpRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpRelayPolicyName"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpRelaySource"))
if mibBuilder.loadTexts: csOrionFwSmtpRelayEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpRelayEntry.setDescription('Each entry specifies a single email relay.')
csOrionFwSmtpRelayPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwSmtpRelayPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpRelayPolicyName.setDescription('The policy name this email relay access is applied to.')
csOrionFwSmtpRelaySource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: csOrionFwSmtpRelaySource.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpRelaySource.setDescription('The source id (IP address, IP address with mask, network IP address, network IP address with mask) of the email relay.')
csOrionFwSmtpRelayAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpRelayAccess.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpRelayAccess.setDescription('The access to this email relay.')
csOrionFwSmtpRelayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpRelayRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpRelayRowStatus.setDescription('The row status object for this entry.')
csOrionFwSmtpSpamTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4), )
if mibBuilder.loadTexts: csOrionFwSmtpSpamTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpSpamTable.setDescription('This table defines the specific spam email that a particular SMTP policy will permit or deny.')
csOrionFwSmtpSpamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpSpamPolicyName"), (0, "COSINE-ORION-MIB", "csOrionFwSmtpSpamSource"))
if mibBuilder.loadTexts: csOrionFwSmtpSpamEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpSpamEntry.setDescription('Each entry specifies a single spamm email.')
csOrionFwSmtpSpamPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwSmtpSpamPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpSpamPolicyName.setDescription('The policy name this spam email access is applied to.')
csOrionFwSmtpSpamSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)))
if mibBuilder.loadTexts: csOrionFwSmtpSpamSource.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpSpamSource.setDescription('The source id (IP address, IP address with mask, network IP address, network IP address with mask) of the spam email.')
csOrionFwSmtpSpamAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpSpamAccess.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpSpamAccess.setDescription('The access to this spam email.')
csOrionFwSmtpSpamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwSmtpSpamRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpSpamRowStatus.setDescription('The row status object for this entry.')
csOrionFwSmtpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwSmtpConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwSmtpConfigEnd.setDescription('End of this group. value undefined')
csOrionFwTelnetPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1), )
if mibBuilder.loadTexts: csOrionFwTelnetPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyTable.setDescription('This table specifies individual Telnet Policies. The Fw Access Table identifies the specific policies to apply to specific Telnet connections.')
csOrionFwTelnetPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwTelnetPolicyName"))
if mibBuilder.loadTexts: csOrionFwTelnetPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyEntry.setDescription('Each entry specifies a single Telnet Policy.')
csOrionFwTelnetPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwTelnetPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyName.setDescription('The name used to identify this Telnet Policy entry.')
csOrionFwTelnetPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyAuthenticate.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required.')
csOrionFwTelnetPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwTelnetPolicyPasswordChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("notAllowed", 2))).clone('notAllowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyPasswordChange.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyPasswordChange.setDescription('This object indicates whether the user is allowed to change the password.')
csOrionFwTelnetPolicyPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)).clone('telnet>')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyPrompt.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyPrompt.setDescription('The command line promt the proxy should use for telnet sessions.')
csOrionFwTelnetPolicyXGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allowed", 1), ("notAllowed", 2))).clone('notAllowed')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyXGateway.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyXGateway.setDescription('This object indicates whether or not the client is allowed to use X proxy.')
csOrionFwTelnetPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwTelnetAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2), )
if mibBuilder.loadTexts: csOrionFwTelnetAuthTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthTable.setDescription('This table specifies the authentication configuration for the Ftp Proxy.')
csOrionFwTelnetAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFwTelnetAuthEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthEntry.setDescription('Each entry specifies a authentication configuration.')
csOrionFwTelnetAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthStatus.setDescription('The current status of telnet authentication mode.')
csOrionFwTelnetAuthServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("local", 2), ("radius", 3), ("ldap", 4))).clone('radius')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthServiceType.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthServiceType.setDescription('The service type used for authentication.')
csOrionFwTelnetAuthMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chap", 2), ("pap", 3), ("password", 4))).clone('pap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthMechanism.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthMechanism.setDescription('The machanism used for authentication.')
csOrionFwTelnetAuthServers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthServers.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthServers.setDescription('The authentication server address used by proxy to connect to.')
csOrionFwTelnetAuthNonTransparentAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthNonTransparentAuth.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthNonTransparentAuth.setDescription('The configuration for non-transparent mode.')
csOrionFwTelnetAuthPasswdTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)).clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthPasswdTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthPasswdTimeout.setDescription('The password inactive timeout.')
csOrionFwTelnetAuthPerUserAuthFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwTelnetAuthPerUserAuthFilter.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetAuthPerUserAuthFilter.setDescription('The ldap filter name on per user base.')
csOrionFwTelnetConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwTelnetConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwTelnetConfigEnd.setDescription('End of this group. value undefined')
csOrionFwPop3PolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1), )
if mibBuilder.loadTexts: csOrionFwPop3PolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyTable.setDescription('This table specifies individual POP3 Policies. The Fw Access Table identifies the specific policies to apply to specific POP3 connections.')
csOrionFwPop3PolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwPop3PolicyName"))
if mibBuilder.loadTexts: csOrionFwPop3PolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyEntry.setDescription('Each entry specifies a single POP3 Policy.')
csOrionFwPop3PolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwPop3PolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyName.setDescription('The name used to identify this POP3 Policy entry.')
csOrionFwPop3PolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyAuthenticate.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required.')
csOrionFwPop3PolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwPop3PolicyPopServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyPopServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyPopServer.setDescription('The default internal POP server for email.')
csOrionFwPop3PolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPop3PolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3PolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwPop3ConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwPop3ConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPop3ConfigEnd.setDescription('End of this group. value undefined')
csOrionFwPlugPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1), )
if mibBuilder.loadTexts: csOrionFwPlugPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyTable.setDescription('This table specifies individual PLUG Policies. The Fw Access Table identifies the specific policies to apply to specific PLUG connections.')
csOrionFwPlugPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwPlugPolicyName"))
if mibBuilder.loadTexts: csOrionFwPlugPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyEntry.setDescription('Each entry specifies a single PLUG Policy.')
csOrionFwPlugPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwPlugPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyName.setDescription('The name used to identify this PLUG Policy entry.')
csOrionFwPlugPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyAuthenticate.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwPlugPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required. NOTE: Authenticate attribute is not applicable to this kind of application.')
csOrionFwPlugPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwPlugPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyRemoteServer.setDescription('The remote server.')
csOrionFwPlugPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyRemotePort.setDescription("The remote server's port number.")
csOrionFwPlugPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwPlugPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwPlugConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwPlugConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwPlugConfigEnd.setDescription('End of this group. value undefined')
csOrionFwNntpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1), )
if mibBuilder.loadTexts: csOrionFwNntpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyTable.setDescription('This table specifies individual NNTP Policies. The Fw Access Table identifies the specific policies to apply to specific NNTP connections.')
csOrionFwNntpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwNntpPolicyName"))
if mibBuilder.loadTexts: csOrionFwNntpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyEntry.setDescription('Each entry specifies a single NNTP Policy.')
csOrionFwNntpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwNntpPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyName.setDescription('The name used to identify this NNTP Policy entry.')
csOrionFwNntpPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyAuthenticate.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwNntpPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required. NOTE: Authenticate attribute is not applicable to this kind of application.')
csOrionFwNntpPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwNntpPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyRemoteServer.setDescription('The internal NEWS server.')
csOrionFwNntpPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyRemotePort.setDescription("The internal NEWS server's port number.")
csOrionFwNntpPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNntpPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwNntpConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwNntpConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNntpConfigEnd.setDescription('End of this group. value undefined')
csOrionFwLdapPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1), )
if mibBuilder.loadTexts: csOrionFwLdapPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyTable.setDescription('This table specifies individual LDAP Policies. The Fw Access Table identifies the specific policies to apply to specific LDAP connections.')
csOrionFwLdapPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwLdapPolicyName"))
if mibBuilder.loadTexts: csOrionFwLdapPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyEntry.setDescription('Each entry specifies a single LDAP Policy.')
csOrionFwLdapPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwLdapPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyName.setDescription('The name used to identify this LDAP Policy entry.')
csOrionFwLdapPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyAuthenticate.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwLdapPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required. NOTE: Authenticate attribute is not applicable to this kind of application.')
csOrionFwLdapPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwLdapPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyRemoteServer.setDescription('The internal LDAP server.')
csOrionFwLdapPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyRemotePort.setDescription("The internal LDAP server's port number.")
csOrionFwLdapPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLdapPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwLdapConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwLdapConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLdapConfigEnd.setDescription('End of this group. value undefined')
csOrionFwLnotesPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1), )
if mibBuilder.loadTexts: csOrionFwLnotesPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyTable.setDescription('This table specifies individual LNOTES Policies. The Fw Access Table identifies the specific policies to apply to specific LNOTES connections.')
csOrionFwLnotesPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwLnotesPolicyName"))
if mibBuilder.loadTexts: csOrionFwLnotesPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyEntry.setDescription('Each entry specifies a single LNOTES Policy.')
csOrionFwLnotesPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwLnotesPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyName.setDescription('The name used to identify this LNOTES Policy entry.')
csOrionFwLnotesPolicyAuthenticate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyAuthenticate.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyAuthenticate.setDescription('This flag indicates if additional user authentication is required. NOTE: Authenticate attribute is not applicable to this kind of application.')
csOrionFwLnotesPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwLnotesPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRemoteServer.setDescription('The internal Lotus Notes server.')
csOrionFwLnotesPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRemotePort.setDescription("The internal Lotus Notes server's port number.")
csOrionFwLnotesPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwLnotesConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwLnotesConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwLnotesConfigEnd.setDescription('End of this group. value undefined')
csOrionFwAolPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1), )
if mibBuilder.loadTexts: csOrionFwAolPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyTable.setDescription('This table specifies individual AOL Policies. The Fw Access Table identifies the specific policies to apply to specific AOL connections.')
csOrionFwAolPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwAolPolicyName"))
if mibBuilder.loadTexts: csOrionFwAolPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyEntry.setDescription('Each entry specifies a single AOL Policy.')
csOrionFwAolPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwAolPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyName.setDescription('The name used to identify this AOL Policy entry.')
csOrionFwAolPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwAolPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyRemoteServer.setDescription('The internal AOL server.')
csOrionFwAolPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyRemotePort.setDescription("The internal AOL server's port number.")
csOrionFwAolPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwAolPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwAolConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwAolConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwAolConfigEnd.setDescription('End of this group. value undefined')
csOrionFwCompuServePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1), )
if mibBuilder.loadTexts: csOrionFwCompuServePolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyTable.setDescription('This table specifies individual CompuServe Policies. The Fw Access Table identifies the specific policies to apply to specific CompuServe connections.')
csOrionFwCompuServePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwCompuServePolicyName"))
if mibBuilder.loadTexts: csOrionFwCompuServePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyEntry.setDescription('Each entry specifies a single CompuServe Policy.')
csOrionFwCompuServePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwCompuServePolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyName.setDescription('The name used to identify this CompuServe Policy entry.')
csOrionFwCompuServePolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwCompuServePolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRemoteServer.setDescription('The internal CompuServe server.')
csOrionFwCompuServePolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRemotePort.setDescription("The internal CompuServe server's port number.")
csOrionFwCompuServePolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServePolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwCompuServeConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 12, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwCompuServeConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwCompuServeConfigEnd.setDescription('End of this group. value undefined')
csOrionFwNetMeetingPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1), )
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyTable.setDescription('This table specifies individual NetMeeting Policies. The Fw Access Table identifies the specific policies to apply to specific NetMeeting connections.')
csOrionFwNetMeetingPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwNetMeetingPolicyName"))
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyEntry.setDescription('Each entry specifies a single NetMeeting Policy.')
csOrionFwNetMeetingPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyName.setDescription('The name used to identify this NetMeeting Policy entry.')
csOrionFwNetMeetingPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwNetMeetingPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRemoteServer.setDescription('The internal NetMeeting server.')
csOrionFwNetMeetingPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRemotePort.setDescription("The internal NetMeeting server's port number.")
csOrionFwNetMeetingPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwNetMeetingConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 13, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwNetMeetingConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwNetMeetingConfigEnd.setDescription('End of this group. value undefined')
csOrionFwMsSqlPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1), )
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyTable.setDescription('This table specifies individual Microsoft SQL/Sybase Policies. The Fw Access Table identifies the specific policies to apply to specific Microsoft SQL/Sybase connections.')
csOrionFwMsSqlPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwMsSqlPolicyName"))
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyEntry.setDescription('Each entry specifies a single Microsoft SQL/Sybase Policy.')
csOrionFwMsSqlPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyName.setDescription('The name used to identify this Microsoft SQL/Sybase Policy entry.')
csOrionFwMsSqlPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting.')
csOrionFwMsSqlPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRemoteServer.setDescription('The internal Microsoft SQL or Sybase server.')
csOrionFwMsSqlPolicyRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRemotePort.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRemotePort.setDescription("The internal Microsoft SQL or Sybase server's port number.")
csOrionFwMsSqlPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFwMsSqlConfigEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFwMsSqlConfigEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFwMsSqlConfigEnd.setDescription('End of this group. value undefined')
csOrionFwRshPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1), )
if mibBuilder.loadTexts: csOrionFwRshPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFwRshPolicyTable.setDescription('This table specifies individual Remote Shell (RSH) Policies. The Fw Access Table identifies the specific policies to apply to specific RSH connections.')
csOrionFwRshPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFwRshPolicyName"))
if mibBuilder.loadTexts: csOrionFwRshPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFwRshPolicyEntry.setDescription('Each entry specifies a single RSH Policy.')
csOrionFwRshPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionFwRshPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionFwRshPolicyName.setDescription('The name used to identify this RSH Policy entry.')
csOrionFwRshPolicyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(7200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwRshPolicyTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFwRshPolicyTimeout.setDescription('The number of seconds the proxy is idle before disconnecting. For RSH proxy, the idle timer is triggered if no activities are detected on BOTH control and error connections.')
csOrionFwRshPolicyRemoteServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwRshPolicyRemoteServer.setStatus('current')
if mibBuilder.loadTexts: csOrionFwRshPolicyRemoteServer.setDescription('The internal RSH server.')
csOrionFwRshPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 1, 2, 15, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFwRshPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFwRshPolicyRowStatus.setDescription('The Row Status object for this table.')
csOrionFWInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFWInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionFWInfoEnd.setDescription('End of this group. value undefined')
csOrionVrPktFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1), )
if mibBuilder.loadTexts: csOrionVrPktFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterTable.setDescription('This table specifies a set of filters to be applied to packets received over each the interfaces over this virtual router. Filters can be configured either to permit a packet, deny a packet, or send the packet to a firewall proxy.')
csOrionVrPktFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrPktFilterIndex"))
if mibBuilder.loadTexts: csOrionVrPktFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterEntry.setDescription('Each filter specifies whether packets satisfying a specific access list entry are permitted or denied to be passed along their route.')
csOrionVrPktFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrPktFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterIndex.setDescription('The Index of this particular Packet Filter.')
csOrionVrPktFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterAclId.setDescription('The Id of an access list entry (from csOrionGenAclTable). All packets transmitted or received on any of the virtual interfaces on this virtual router that satisfy that access list entry are acted upon by this filter.')
csOrionVrPktFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("firewall", 3), ("spf", 4), ("spfRev", 5), ("spfHW", 6), ("spfHWRev", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterAction.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterAction.setDescription('The action performed by this filter.')
csOrionVrPktFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterDirection.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterDirection.setDescription('The direction of packets on which this filter is applied.')
csOrionVrPktFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterRowStatus.setDescription('A row status type for this Table entry.')
csOrionVrPktFilterTcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dontCare", 1), ("setup", 2), ("established", 3))).clone('dontCare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterTcpStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterTcpStatus.setDescription('The state of the TCP.')
csOrionVrPktFilterHitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrPktFilterHitCounter.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterHitCounter.setDescription('When csOrionVrPktFilterHitCounter is enabled, the counter be incremented everytime a packet that corresponds to the packet filter is received.')
csOrionVrPktFilterCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterCounterStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterCounterStatus.setDescription('The status of csOrionVrPktFilterHitCounter. Will also be enabled as a result of enabling csOrionVrPktFilterEvlogStatus.')
csOrionVrPktFilterEvlogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrPktFilterEvlogStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPktFilterEvlogStatus.setDescription('If enabled, event logs will be sent when a packet hits this packet filter. Will also result to csOrionVrPktFilterCounterStatus enabled.')
csOrionViPktFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2), )
if mibBuilder.loadTexts: csOrionViPktFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterTable.setDescription('This table specifies a set of filters to be applied to packets received over this virtual interface. Filters can be configured either to permit a packet, deny a packet, or send the packet to a firewall proxy.')
csOrionViPktFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViPktFilterIndex"))
if mibBuilder.loadTexts: csOrionViPktFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterEntry.setDescription('Each filter specifies whether packets satisfying a specific access list entry are permitted or denied to be passed along their route.')
csOrionViPktFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionViPktFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterIndex.setDescription('The Index of this particular Packet Filter.')
csOrionViPktFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterAclId.setDescription('The Id of an access list entry (from csOrionGenAclTable). All packets transmitted or received on this virtual interface that access list entry are acted upon by this filter.')
csOrionViPktFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2), ("firewall", 3), ("spf", 4), ("spfRev", 5), ("spfHW", 6), ("spfHWRev", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterAction.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterAction.setDescription('The action performed by this filter.')
csOrionViPktFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterDirection.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterDirection.setDescription('The direction of packets on which this filter is applied.')
csOrionViPktFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterRowStatus.setDescription('A row status type for this Table entry.')
csOrionViPktFilterTcpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dontCare", 1), ("setup", 2), ("established", 3))).clone('dontCare')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterTcpStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterTcpStatus.setDescription('The state of the TCP.')
csOrionViPktFilterHitCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionViPktFilterHitCounter.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterHitCounter.setDescription('When csOrionViPktFilterHitCounter is enabled, the counter be incremented everytime a packet that corresponds to the packet filter is received.')
csOrionViPktFilterCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterCounterStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterCounterStatus.setDescription('The status of csOrionViPktFilterHitCounter. Will also be enabled as a result of enabling csOrionViPktFilterEvlogStatus.')
csOrionViPktFilterEvlogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViPktFilterEvlogStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViPktFilterEvlogStatus.setDescription('If enabled, event logs will be sent when a packet hits this packet filter. Will also result to csOrionViPktFilterCounterStatus reset and enabled.')
csOrionPktFilterInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPktFilterInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionPktFilterInfoEnd.setDescription('End of this group. value undefined')
csOrionNatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1), )
if mibBuilder.loadTexts: csOrionNatPoolTable.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolTable.setDescription('A list of Access List Entries.')
csOrionNatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatPoolId"))
if mibBuilder.loadTexts: csOrionNatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolEntry.setDescription('An entry containing filtering information used to classify packets.')
csOrionNatPoolId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionNatPoolId.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolId.setDescription('An identifier for this Nat Pool Entry.')
csOrionNatPoolStartAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolStartAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolStartAddress.setDescription('')
csOrionNatPoolEndAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolEndAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolEndAddress.setDescription('')
csOrionNatPoolStartPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolStartPort.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolStartPort.setDescription('')
csOrionNatPoolEndPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolEndPort.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolEndPort.setDescription('')
csOrionNatPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatPoolStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionNatPoolStatus.setDescription('')
csOrionNatTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2), )
if mibBuilder.loadTexts: csOrionNatTranslationTable.setStatus('current')
if mibBuilder.loadTexts: csOrionNatTranslationTable.setDescription('This contains the NAT translation entries.')
csOrionNatTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatInsideLocalAddr"), (0, "COSINE-ORION-MIB", "csOrionNatInsideLocalPort"), (0, "COSINE-ORION-MIB", "csOrionNatOutsideGlobalAddr"), (0, "COSINE-ORION-MIB", "csOrionNatOutsideGlobalPort"), (0, "COSINE-ORION-MIB", "csOrionNatProtocol"))
if mibBuilder.loadTexts: csOrionNatTranslationEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionNatTranslationEntry.setDescription('An entry containing IP address, port and the protocol information corresponding to a session.')
csOrionNatInsideLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionNatInsideLocalAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionNatInsideLocalAddr.setDescription('')
csOrionNatInsideLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: csOrionNatInsideLocalPort.setStatus('current')
if mibBuilder.loadTexts: csOrionNatInsideLocalPort.setDescription('')
csOrionNatOutsideGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: csOrionNatOutsideGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionNatOutsideGlobalAddr.setDescription('')
csOrionNatOutsideGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 4), Integer32())
if mibBuilder.loadTexts: csOrionNatOutsideGlobalPort.setStatus('current')
if mibBuilder.loadTexts: csOrionNatOutsideGlobalPort.setDescription('')
csOrionNatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 5), Integer32())
if mibBuilder.loadTexts: csOrionNatProtocol.setStatus('current')
if mibBuilder.loadTexts: csOrionNatProtocol.setDescription('')
csOrionNatInsideGlobalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatInsideGlobalAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionNatInsideGlobalAddr.setDescription('')
csOrionNatInsideGlobalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatInsideGlobalPort.setStatus('current')
if mibBuilder.loadTexts: csOrionNatInsideGlobalPort.setDescription('')
csOrionNatStaticTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3), )
if mibBuilder.loadTexts: csOrionNatStaticTranslationTable.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticTranslationTable.setDescription('')
csOrionNatStaticTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatStaticInsideLocalAddress"))
if mibBuilder.loadTexts: csOrionNatStaticTranslationEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticTranslationEntry.setDescription('')
csOrionNatStaticInsideLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionNatStaticInsideLocalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticInsideLocalAddress.setDescription('An identifier for this Nat Pool Entry. The address as known in the private network.')
csOrionNatStaticInsideGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticInsideGlobalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticInsideGlobalAddress.setDescription('The address as know in the outside world.')
csOrionNatStaticTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticTranslationStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticTranslationStatus.setDescription('')
csOrionNatStaticNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticNetmask.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticNetmask.setDescription('The network mask. For one-to-one static NAT translation, mask should be zero.')
csOrionNatStaticTranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("dst", 2))).clone('src')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticTranslationType.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticTranslationType.setDescription('Source address translation will be for outgoing packets and destination address translation will be for incoming packets.')
csOrionNatStaticVITranslationTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4), )
if mibBuilder.loadTexts: csOrionNatStaticVITranslationTable.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVITranslationTable.setDescription('')
csOrionNatStaticVITranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionNatStaticIfIndex"), (0, "COSINE-ORION-MIB", "csOrionNatStaticVIInsideLocalAddress"))
if mibBuilder.loadTexts: csOrionNatStaticVITranslationEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVITranslationEntry.setDescription('')
csOrionNatStaticIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionNatStaticIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticIfIndex.setDescription('The VI where to apply the static NAT translation.')
csOrionNatStaticVIInsideLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionNatStaticVIInsideLocalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVIInsideLocalAddress.setDescription('An identifier for this Nat Pool Entry. The address as known in the private network.')
csOrionNatStaticVIInsideGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVIInsideGlobalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVIInsideGlobalAddress.setDescription('The address as know in the outside world.')
csOrionNatStaticVINetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVINetmask.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVINetmask.setDescription('The network mask. For one-to-one static NAT translation, mask should be zero.')
csOrionNatStaticVITranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("src", 1), ("dst", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVITranslationType.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVITranslationType.setDescription('Source address translation will be for outgoing packets and destination address translation will be for incoming packets.')
csOrionNatStaticVITranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionNatStaticVITranslationStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionNatStaticVITranslationStatus.setDescription('')
csOrionNatInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionNatInfoEnd.setDescription('End of this group. value undefined')
csOrionNatGeneralParamTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6), )
if mibBuilder.loadTexts: csOrionNatGeneralParamTable.setStatus('current')
if mibBuilder.loadTexts: csOrionNatGeneralParamTable.setDescription('Table for common NAT attributes.')
csOrionNatGeneralParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionNatGeneralParamEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionNatGeneralParamEntry.setDescription('This table contains the NAT generic configuration parameters')
csOrionNatGenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatGenTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionNatGenTimeout.setDescription("The NAT translation entry global timeout. The global timeout setting will be used by protocols that don't have their own inactivity timeout configurable. Default value is 15 minutes. Minimum is 5 minutes. Maximum is 1 year.")
csOrionNatTcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatTcpTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionNatTcpTimeout.setDescription('The inactivity timeout for entries from TCP traffic in the translation table. Default value is 15 minutes. Minimum is 5 minutes. Maximum is 1 year.')
csOrionNatUdpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatUdpTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionNatUdpTimeout.setDescription('The inactivity timeout for entries from UDP traffic in the translation table. Default value is 15 minutes. Minimum is 5 minutes. Maximum is 1 year.')
csOrionNatIcmpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 525600)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatIcmpTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionNatIcmpTimeout.setDescription('The inactivity timeout for entries from ICMP traffic in the translation table. Default value is 15 minutes. Minimum is 5 minutes. Maximum is 1 year.')
csOrionNatClearTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("clear", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionNatClearTrans.setStatus('current')
if mibBuilder.loadTexts: csOrionNatClearTrans.setDescription('Setting this flag to clear will cause all entries in the translation table to be removed.')
csOrionNatGeneralParamTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNatGeneralParamTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionNatGeneralParamTableEnd.setDescription('End of this group. value undefined')
csOrionIpSecTransformTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1), )
if mibBuilder.loadTexts: csOrionIpSecTransformTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransformTable.setDescription('A table for IPSEC transforms.')
csOrionIpSecTransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIpSecTransformName"))
if mibBuilder.loadTexts: csOrionIpSecTransformEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransformEntry.setDescription('Each entry contains a specific set of IPSEC Transforms for use by a Security Association.')
csOrionIpSecTransformName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIpSecTransformName.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransformName.setDescription('An index for the IpSec Transform Set table.')
csOrionIpSecTransform1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransform1.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransform1.setDescription('The first Transform in the IpSec Transform Set table.')
csOrionIpSecTransform2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransform2.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransform2.setDescription('The second Transform in the IpSec Transform Set table. If no transform is specified, this object will have a zero length string.')
csOrionIpSecTransform3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransform3.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransform3.setDescription('The third Transform in the IpSec Transform Set table. If no transform is specified, this object will have a zero length string.')
csOrionIpSecTransformInitVector = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 8))).clone(namedValues=NamedValues(("four", 4), ("eight", 8))).clone('eight')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransformInitVector.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransformInitVector.setDescription('The size of the Initial Vector used by the IPSEC Transform Set.')
csOrionIpSecTransformMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("tunnel", 1), ("transport", 2))).clone('tunnel')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransformMode.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransformMode.setDescription('The ipsec mode used by this IPSEC Transform Set.')
csOrionIpSecTransformStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIpSecTransformStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecTransformStatus.setDescription('A row status type for the IpSec Transform Table.')
csOrionDynamicCryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2), )
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTable.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTable.setDescription('A table for Dynamic Crypto Map.')
csOrionDynamicCryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionDynamicCryptoMapName"), (0, "COSINE-ORION-MIB", "csOrionDynamicCryptoMapNumber"))
if mibBuilder.loadTexts: csOrionDynamicCryptoMapEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapEntry.setDescription('Each entry contains a specific set of Dynamic Crypto Map for use by a Security Association.')
csOrionDynamicCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionDynamicCryptoMapName.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapName.setDescription('An index for the Dynamic Crypto Map Table.')
csOrionDynamicCryptoMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: csOrionDynamicCryptoMapNumber.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapNumber.setDescription('An index for the Dynamic Crypto Map Table.')
csOrionDynamicCryptoMapMatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapMatchAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapMatchAddress.setDescription('Access List ID used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapPeer.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapPeer.setDescription('Peer Address for this Dynamic Crypto Map.')
csOrionDynamicCryptoMapTransformSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet1.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet1.setDescription('A transform set used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapTransformSet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet2.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet2.setDescription('A transform set used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapTransformSet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet3.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet3.setDescription('A transform set used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapTransformSet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet4.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet4.setDescription('A transform set used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapTransformSet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet5.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet5.setDescription('A transform set used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapTransformSet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet6.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapTransformSet6.setDescription('A transform set used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapSessionKeyLifetimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapSessionKeyLifetimeSec.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapSessionKeyLifetimeSec.setDescription('A Session key lifetime in seconds used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapSessionKeyLifetimeBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapSessionKeyLifetimeBytes.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapSessionKeyLifetimeBytes.setDescription('A Session key lifetime in bytes used by this Dynamic Crypto Map.')
csOrionDynamicCryptoMapPfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("none", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapPfs.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapPfs.setDescription('This object is used to request Perfect Forward Secrecy for this Dynamic Crypto Map.')
csOrionDynamicCryptoMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 2, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionDynamicCryptoMapStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionDynamicCryptoMapStatus.setDescription('A row status type for the Dynamic Crypto Map.')
csOrionManualCryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3), )
if mibBuilder.loadTexts: csOrionManualCryptoMapTable.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapTable.setDescription('A table for Manual Crypto Map.')
csOrionManualCryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionManualCryptoMapName"), (0, "COSINE-ORION-MIB", "csOrionManualCryptoMapNumber"))
if mibBuilder.loadTexts: csOrionManualCryptoMapEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapEntry.setDescription('Each entry contains a specific set of Manual Crypto Map for use by a Security Association.')
csOrionManualCryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionManualCryptoMapName.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapName.setDescription('An index for the Manual Crypto Map Table.')
csOrionManualCryptoMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: csOrionManualCryptoMapNumber.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapNumber.setDescription('An index for the Manual Crypto Map Table.')
csOrionManualCryptoMapMatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapMatchAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapMatchAddress.setDescription('Access List ID used by this Manual Crypto Map.')
csOrionManualCryptoMapTransformSet = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapTransformSet.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapTransformSet.setDescription('A transform set used by this Manual Crypto Map.')
csOrionManualCryptoMapInboundAHKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundAHKey.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundAHKey.setDescription('An inbound AH key used by this Manual Crypto Map.')
csOrionManualCryptoMapInboundAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundAHSPI.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundAHSPI.setDescription('An inbound AH SPI used by this Manual Crypto Map.')
csOrionManualCryptoMapOutboundAHKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundAHKey.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundAHKey.setDescription('An outbound AH key used by this Manual Crypto Map.')
csOrionManualCryptoMapOutboundAHSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundAHSPI.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundAHSPI.setDescription('An outbound AH SPI used by this Manual Crypto Map.')
csOrionManualCryptoMapInboundESPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPKey.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPKey.setDescription('An inbound ESP key used by this Manual Crypto Map.')
csOrionManualCryptoMapInboundESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPSPI.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPSPI.setDescription('An inbound ESP SPI used by this Manual Crypto Map.')
csOrionManualCryptoMapInboundESPAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPAuthKey.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapInboundESPAuthKey.setDescription('An inbound ESP authentication key used by this Manual Crypto Map.')
csOrionManualCryptoMapOutboundESPKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPKey.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPKey.setDescription('An outbound ESP key used by this Manual Crypto Map.')
csOrionManualCryptoMapOutboundESPSPI = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 14), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPSPI.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPSPI.setDescription('An outbound ESP SPI used by this Manual Crypto Map.')
csOrionManualCryptoMapOutboundESPAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPAuthKey.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapOutboundESPAuthKey.setDescription('An outbound ESP authentication key used by this Manual Crypto Map.')
csOrionManualCryptoMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 3, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionManualCryptoMapStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionManualCryptoMapStatus.setDescription('A row status type for the Manual Crypto Map.')
csOrionIKECryptoMapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4), )
if mibBuilder.loadTexts: csOrionIKECryptoMapTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTable.setDescription('A table for IKE Crypto Map.')
csOrionIKECryptoMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKECryptoMapName"), (0, "COSINE-ORION-MIB", "csOrionIKECryptoMapNumber"))
if mibBuilder.loadTexts: csOrionIKECryptoMapEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapEntry.setDescription('Each entry contains a specific set of IKE Crypto Map for use by a Security Association.')
csOrionIKECryptoMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKECryptoMapName.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapName.setDescription('An index for the IKE Crypto Map Table.')
csOrionIKECryptoMapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: csOrionIKECryptoMapNumber.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapNumber.setDescription('An index for the IKE Crypto Map Table.')
csOrionIKECryptoMapFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapFlag.setDescription("Each bit within this object enables a specific feature within the Crypto Map. Below is a list of the features and their corresponding bits identifiers. feature bit ------------------------------------------------------ pfs 0 pfs-identify 1 sa-per-net 5 -- note, sa-per-host & sa-per-net sa-per-host 6 -- are mutually exclusive sa-per-protocol 7 sa-per-port 8 main-mode 10 -- main-mode and aggressive-mode aggressive-mode 11 -- are mutually exclusive copy-df 21 dont-verify-padding 22 always-plain 29 passby 30 deny 31 end of description. NOTE: default value varies depending on csOrionIKECryptoMapType. 'isakmp' - default is 1056 (0x420 main-mode and sa-per-net) 'isakmpDialup' - default is 1088 (0x440 main-mode and sa-per-host).")
csOrionIKECryptoMapMatchAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapMatchAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapMatchAddress.setDescription('Access List ID used by this IKE Crypto Map.')
csOrionIKECryptoMapPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5))).clone('group1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapPfsGroup.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapPfsGroup.setDescription('If one of the pfs features is enabled in csOrionIKECryptoMapFlags, this object is used to identify the Diffie-Helman group used for this IKE Crypto Map.')
csOrionIKECryptoMapKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapKey.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapKey.setDescription('')
csOrionIKECryptoMapTransformSet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet1.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet1.setDescription('A transform set used by this IKE Crypto Map.')
csOrionIKECryptoMapTransformSet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet2.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet2.setDescription('A transform set used by this IKE Crypto Map.')
csOrionIKECryptoMapTransformSet3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet3.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet3.setDescription('A transform set used by this IKE Crypto Map.')
csOrionIKECryptoMapTransformSet4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet4.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet4.setDescription('A transform set used by this IKE Crypto Map.')
csOrionIKECryptoMapTransformSet5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet5.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet5.setDescription('A transform set used by this IKE Crypto Map.')
csOrionIKECryptoMapTransformSet6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet6.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapTransformSet6.setDescription('A transform set used by this IKE Crypto Map.')
csOrionIKECryptoMapPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapPolicy.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapPolicy.setDescription('The IKE Policy used by this Crypto Map. This references an entry in csOrionIKEPolicyTable.')
csOrionIKECryptoMapLocalIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 14), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapLocalIdentity.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapLocalIdentity.setDescription('The Local IKE Identity for this Crypto Map entry. This can be either a hostname or an IP address (in dotted decimal format).')
csOrionIKECryptoMapSaLifetimeSoftSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeSoftSec.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeSoftSec.setDescription('The soft rekey interval lifetime in seconds used by this IKE Crypto Map Entry. This defines the period of time that elapses between ISAKMP phase II rekeys. This object is deprecated because its value is derived from csOrionIKECryptoMapSaLifetimeHardSec and is really not negotiated.')
csOrionIKECryptoMapSaLifetimeSoftKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeSoftKbytes.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeSoftKbytes.setDescription('The soft rekey interval lifetime in kilobytes used by this IKE Crypto Map Entry. This defines the maximum amount of data transferred between ISAKMP phase II rekeys. This object is deprecated because its value is derived from csOrionIKECryptoMapSaLifetimeHardKbytes and is really not negotiated.')
csOrionIKECryptoMapSaLifetimeHardSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 2147483647), )).clone(28800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeHardSec.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeHardSec.setDescription('The number of seconds that elapse before the SA is completely deleted. If this occurs on an active connection, a new ISAKMP negotiation starting at phase I takes place and a new SA is initiated. 0 is a special value and indicates that this particular Lifetime parameter is not to be conveyed to the remote side in any proposal that might be sent.')
csOrionIKECryptoMapSaLifetimeHardKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 2147483647), )).clone(4096)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeHardKbytes.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapSaLifetimeHardKbytes.setDescription('The number of kilobytes transferred before the SA is completely deleted. 0 is a special value and indicates that this particular Lifetime parameter is not to be conveyed to the remote side in any proposal that might be sent.')
csOrionIKECryptoMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapStatus.setDescription('A row status type for the IKE Crypto Map.')
csOrionIKECryptoMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("isakmp", 1), ("isakmpDialup", 2))).clone('isakmp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapType.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapType.setDescription('This object indicates if this IKE Crytomap is used as a regular crytomap or for dial-up. Its value is only set during creation. Therefore, it must not be modified once created.')
csOrionIKECryptoMapIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 2147483647), )).clone(1800)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapIdleTimeout.setDescription("The idle timeout in seconds of the dialup connection. This will be used only when the csOrionIKECryptoMapType is 'isakmpDialup' otherwise its value is zero. Setting this object to 0 will turn the timer off. The minimum valid timeout value for a dialup connection is 60, i.e., 1 minute.")
csOrionIKECryptoMapLocalIdentityType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapLocalIdentityType.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapLocalIdentityType.setDescription('The Local IKE Identity type for this Crypto Map entry. This has to be set together with csOrionIKECryptoMapLocalIdentity.')
csOrionIKECryptoMapRemoteIdentity1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 23), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity1.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity1.setDescription("The remote IKE Identity for this Crypto Map entry. This can be either a hostname or an IP address (in dotted decimal format). In the case of IP address, the format is 'a.b.c.d/w.x.y.z', where a.b.c.d is the ip address and w.x.y.z is the address mask. If address mask is not specified, it is assumed to be 255.255.255.255. This is used by IKE to differentiate the remote end so as to determine which crypto map with the unique map priority is to be used. This has to be set together with csOrionIKECryptoMapRemoteIdentityType1.")
csOrionIKECryptoMapRemoteIdentity2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 24), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity2.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity2.setDescription("The remote IKE Identity for this Crypto Map entry. This can be either a hostname or an IP address (in dotted decimal format). In the case of IP address, the format is 'a.b.c.d/w.x.y.z', where a.b.c.d is the ip address and w.x.y.z is the address mask. If address mask is not specified, it is assumed to be 255.255.255.255. This is used by IKE to differentiate the remote end so as to determine which crypto map with the unique map priority is to be used. This has to be set together with csOrionIKECryptoMapRemoteIdentityType2.")
csOrionIKECryptoMapRemoteIdentity3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 25), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity3.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity3.setDescription("The remote IKE Identity for this Crypto Map entry. This can be either a hostname or an IP address (in dotted decimal format). In the case of IP address, the format is 'a.b.c.d/w.x.y.z', where a.b.c.d is the ip address and w.x.y.z is the address mask. If address mask is not specified, it is assumed to be 255.255.255.255. This is used by IKE to differentiate the remote end so as to determine which crypto map with the unique map priority is to be used. This has to be set together with csOrionIKECryptoMapRemoteIdentityType3.")
csOrionIKECryptoMapRemoteIdentity4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 26), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity4.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity4.setDescription("The remote IKE Identity for this Crypto Map entry. This can be either a hostname or an IP address (in dotted decimal format). In the case of IP address, the format is 'a.b.c.d/w.x.y.z', where a.b.c.d is the ip address and w.x.y.z is the address mask. If address mask is not specified, it is assumed to be 255.255.255.255. This is used by IKE to differentiate the remote end so as to determine which crypto map with the unique map priority is to be used. This has to be set together with csOrionIKECryptoMapRemoteIdentityType4.")
csOrionIKECryptoMapRemoteIdentity5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 27), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity5.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentity5.setDescription("The remote IKE Identity for this Crypto Map entry. This can be either a hostname or an IP address (in dotted decimal format). In the case of IP address, the format is 'a.b.c.d/w.x.y.z', where a.b.c.d is the ip address and w.x.y.z is the address mask. If address mask is not specified, it is assumed to be 255.255.255.255. This is used by IKE to differentiate the remote end so as to determine which crypto map with the unique map priority is to be used. This has to be set together with csOrionIKECryptoMapRemoteIdentityType5.")
csOrionIKECryptoMapRemoteIdentityType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType1.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType1.setDescription('The remote IKE Identity type for this Crypto Map entry. This has to be set together with csOrionIKECryptoMapRemoteIdentity1.')
csOrionIKECryptoMapRemoteIdentityType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType2.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType2.setDescription('The remote IKE Identity type for this Crypto Map entry. This has to be set together with csOrionIKECryptoMapRemoteIdentity2.')
csOrionIKECryptoMapRemoteIdentityType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType3.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType3.setDescription('The remote IKE Identity type for this Crypto Map entry. This has to be set together with csOrionIKECryptoMapRemoteIdentity3.')
csOrionIKECryptoMapRemoteIdentityType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType4.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType4.setDescription('The remote IKE Identity type for this Crypto Map entry. This has to be set together with csOrionIKECryptoMapRemoteIdentity4.')
csOrionIKECryptoMapRemoteIdentityType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("ipv4", 1), ("distinguishedName", 2), ("fqdn", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType5.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapRemoteIdentityType5.setDescription('The remote IKE Identity type for this Crypto Map entry. This has to be set together with csOrionIKECryptoMapRemoteIdentity5.')
csOrionIKECryptoMapAddressPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)).clone('NONE')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapAddressPool.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapAddressPool.setDescription("This specifies whether IP address assignment is necessary for the remote dialup host and, if it is, how to obtain the address assignment. The following string values can be set: 'NONE' - means IP address assignment is not required for the remote dialup host 'AAA' - means the IP address is to be requested from an authentication or authorization server for the remote private IP address assignment - use the IP address in this address pool for the remote private IP address assignment; this name corresponds to csOrionIpLocalAddrPoolName, so the corresponding entry in csOrionIpLocalAddrPoolTable must have already existed. Applicable to ipsec-dialup crypto map only.")
csOrionIKECryptoMapDynamicRouteAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 4, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECryptoMapDynamicRouteAdd.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECryptoMapDynamicRouteAdd.setDescription('If this object is set to true, IKE will dynamically load a static route when an SA is loaded. This static route will be used to route outgoing data packets to the tunnel VI for encryption to be sent to the remote ISDN network branches. IKE will also delete the route when the ISDN network SA pair is deleted. Note: This is implemented specifically for an ISDN network dialup. For the isakmp site-to-site tunnel, regular dialup tunnel and DSL dialup tunnel configurations, static routes for routing data packets to tunnel VI must be created manually instead of using this dynamic route addition capability, since this will degrade the IKE performance significantly, especially for regular and DSL dialup cases.')
csOrionIKEPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5), )
if mibBuilder.loadTexts: csOrionIKEPolicyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyTable.setDescription('A table for IKE Crypto Map.')
csOrionIKEPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKEPolicyName"), (0, "COSINE-ORION-MIB", "csOrionIKEPolicyPriority"))
if mibBuilder.loadTexts: csOrionIKEPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyEntry.setDescription('Each entry contains a specific set of IKE Crypto Map for use by a Security Association.')
csOrionIKEPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKEPolicyName.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyName.setDescription('The name assigned to this set of IKE Policies.')
csOrionIKEPolicyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: csOrionIKEPolicyPriority.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyPriority.setDescription('The priority assigned to this IKE Policy Entry.')
csOrionIKEPolicyHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("hmacMd5", 1), ("hmacSha", 2))).clone('hmacSha')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyHash.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyHash.setDescription('The Hash algorithm employed by this IKE Policy Entry.')
csOrionIKEPolicyEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("desCbc", 1), ("tripleDesCbc", 2))).clone('tripleDesCbc')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyEncryption.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyEncryption.setDescription('The Encryption algorithm employed by this IKE Policy Entry.')
csOrionIKEPolicySaLifetimeSoftSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeSoftSec.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeSoftSec.setDescription('The soft rekey interval lifetime in seconds used by this IKE Crypto Map Entry. This defines the period of time that elapses between ISAKMP phase II rekeys. This object is deprecated because its value is derived from csOrionIKEPolicySaLifetimeHardSec and is really not negotiated.')
csOrionIKEPolicySaLifetimeSoftKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeSoftKbytes.setStatus('deprecated')
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeSoftKbytes.setDescription('The soft rekey interval lifetime in kilobytes used by this IKE Crypto Map Entry. This defines the maximum amount of data transferred between ISAKMP phase II rekeys. This object is deprecated because its value is derived from csOrionIKEPolicySaLifetimeHardKbytes and is really not negotiated.')
csOrionIKEPolicySaLifetimeHardSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 2147483647), )).clone(10800)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeHardSec.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeHardSec.setDescription('The number of seconds that elapse before the SA is completely deleted. If this occurs on an active connection, a new ISAKMP negotiation starting at phase I takes place and a new SA is initiated. 0 is a special value and indicates that this particular Lifetime parameter is not to be conveyed to the remote side in any proposal that might be sent.')
csOrionIKEPolicySaLifetimeHardKbytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(256, 2147483647), )).clone(4096)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeHardKbytes.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicySaLifetimeHardKbytes.setDescription('The number of kilobytes transferred before the SA is completely deleted. 0 is a special value and indicates that this particular Lifetime parameter is not to be conveyed to the remote side in any proposal that might be sent.')
csOrionIKEPolicyAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 65001, 65005))).clone(namedValues=NamedValues(("preShare", 1), ("dssSig", 2), ("rsaSig", 3), ("methRsaEnc", 4), ("methRsaEncRev", 5), ("xauthInitPreShared", 65001), ("xauthInitRsa", 65005))).clone('rsaSig')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyAuthentication.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyAuthentication.setDescription('The Authentication algorithm employed by this Policy entry.')
csOrionIKEPolicyPfsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("group1", 1), ("group2", 2), ("group5", 5))).clone('group1')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyPfsGroup.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyPfsGroup.setDescription('If one of the pfs features is enabled in csOrionIKECryptoMapFlags, this object is used to identify the Diffie-Helman group used for this IKE Crypto Map.')
csOrionIKEPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyStatus.setDescription('A row status type for the IKE Policy Entry.')
csOrionIKEPolicyAuthorizationTypeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 5, 1, 12), Integer32().clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKEPolicyAuthorizationTypeFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEPolicyAuthorizationTypeFlag.setDescription('Each bit within this object specifies the type of authorization to be enabled for IKE phase 1. options bit ------------------------------------------------------ certificate-presence 0 user-exists 1 enterprise-ID 2 ')
csOrionIKECertTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6), )
if mibBuilder.loadTexts: csOrionIKECertTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertTable.setDescription('A table of Certificates.')
csOrionIKECertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKECertName"), (0, "COSINE-ORION-MIB", "csOrionIKECertMapName"))
if mibBuilder.loadTexts: csOrionIKECertEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertEntry.setDescription('Each entry contains a specific certificate.')
csOrionIKECertName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKECertName.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertName.setDescription('The name assigned to this set of IKE Certificates.')
csOrionIKECertMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKECertMapName.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertMapName.setDescription('The IKE Crypto Map referred to by this Cert entry.')
csOrionIKECertFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 3), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertFlag.setDescription('Each bit within this object enables a specific feature within the Cert Table. Below is a list of the features and their corresponding bits identifiers. feature bit ------------------------------------------------------ no-crl 0 (more descriptions will follow).')
csOrionIKECertCertificate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertCertificate.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertCertificate.setDescription('')
csOrionIKECertPrivateKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1500))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertPrivateKey.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertPrivateKey.setDescription('')
csOrionIKECertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKECertStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIKECertStatus.setDescription('A row status type for the IKE Cert Entry.')
csOrionIKESvrParamTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7), )
if mibBuilder.loadTexts: csOrionIKESvrParamTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamTable.setDescription('A table of IKE Server Parameters in every VR.')
csOrionIKESvrParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionIKESvrParamMapName"))
if mibBuilder.loadTexts: csOrionIKESvrParamEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamEntry.setDescription('Each entry contains parameter settings of an IKE server.')
csOrionIKESvrParamMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionIKESvrParamMapName.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamMapName.setDescription('The map name for this server.')
csOrionIKESvrParamFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamFlag.setDescription('Each bit within this object specifies the compatibility options that the server uses by default. Below is a list of the features and their corresponding bits identifiers. options bit ------------------------------------------------------ old-pk-encryption-prf-key 0 old-payload-padding 1 old-message-padding 2 old-da-padding 3 old-id-in-hash 4 ignore-cert-request-payload 5 old-cr-format 6 use-zero-spi 7 End of description.')
csOrionIKESvrParamIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamIpAddress.setDescription('The address of the IKE server.')
csOrionIKESvrParamPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 4), Integer32().clone(500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamPort.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamPort.setDescription('The UDP port that the server is listening to.')
csOrionIKESvrParamRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 5), Integer32().clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryLimit.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRetryLimit.setDescription('Limits the number of ISAKMP packet transmission retries. The server retries the transmission if it does not receive a response in csOrionIKESvrParamRetryTimer seconds.')
csOrionIKESvrParamRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 6), Integer32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimer.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimer.setDescription('The amount of time, in seconds, that the server gives the remote end to reply to the sent request, before it will send the packet again. Fraction of a second must be specified in csOrionIKESvrParamRetryTimerMicroSec.')
csOrionIKESvrParamRetryTimerMicroSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 7), Integer32().clone(200)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimerMicroSec.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimerMicroSec.setDescription('The microseconds part of csOrionIKESvrParamRetryTimer.')
csOrionIKESvrParamRetryTimerMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 8), Integer32().clone(30)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimerMaximum.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRetryTimerMaximum.setDescription('Specifies the maximum value, in seconds, for the retry timer.')
csOrionIKESvrParamExpireTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 9), Integer32().clone(300)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamExpireTimer.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamExpireTimer.setDescription('Specifies the maximum time, in seconds, that the IKE server allows a negotiation to continue.')
csOrionIKESvrParamSecretRecreate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 10), Integer32().clone(14400)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamSecretRecreate.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamSecretRecreate.setDescription('A local secret recreation timer expressed in seconds.')
csOrionIKESvrParamSPISize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 11), Integer32().clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamSPISize.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamSPISize.setDescription('A compatibility flag that specifies the number of bytes of zero that can be used when the security parameter index (SPI) of an ISAKMP security association is sent to the remote end.')
csOrionIKESvrParamMaxKeyLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 12), Integer32().clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamMaxKeyLength.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamMaxKeyLength.setDescription('The maximum length of an encryption key, specified in bytes, that is accepted by the local end.')
csOrionIKESvrParamMaxSACount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 13), Integer32().clone(512)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamMaxSACount.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamMaxSACount.setDescription('Limits the maximum number of ISAKMP SA entries.')
csOrionIKESvrParamLocalSecretSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 14), Integer32().clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamLocalSecretSize.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamLocalSecretSize.setDescription('The length of the local secrets, specified in bits.')
csOrionIKESvrParamTokenHashType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("md5", 1), ("sha", 2))).clone('md5')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamTokenHashType.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamTokenHashType.setDescription('A reference to an algorithm configuration block that defines the anti-clogging token hash algorithm.')
csOrionIKESvrParamRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRowStatus.setDescription('A row status type for the IKE Server.')
csOrionIKESvrParamAuthenticationList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamAuthenticationList.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamAuthenticationList.setDescription('The name of the authentication server list that IKE uses for authentication services. If no listname is provided, the default authentication list of this VR will be used.')
csOrionIKESvrParamAuthorizationList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamAuthorizationList.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamAuthorizationList.setDescription('The name of the authorization server list that IKE uses for authorization services. If no listname is provided, the default authorization list of this VR will be used.')
csOrionIKESvrParamAccountingList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamAccountingList.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamAccountingList.setDescription('The name of the accounting server list that IKE uses for accounting services. If no listname is provided, the default accounting list of this VR will be used.')
csOrionIKESvrParamRadiusAcctUserTypePriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 20), IKERadiusAcctUserType().clone('xauthUserId')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority1.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority1.setDescription('Specifies the preferred user information to include in the RADIUS Accounting-Request User-Name attribute. Choices are: xauthUserId - xauth user login ID subjectAltName - subject alternative name from certificate distinguishedName - DN from certificate If the selected information is not available, IKE will try the type specified in csOrionIKESvrParamRadiusAcctUserTypePriority2. ')
csOrionIKESvrParamRadiusAcctUserTypePriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 21), IKERadiusAcctUserType().clone('subjectAltName')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority2.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority2.setDescription('Specifies the user information to include in the RADIUS Accounting-Request User-Name attribute if the type specified in csOrionIKESvrParamRadiusAcctUserTypePriority1 is not available: xauthUserId - xauth user login ID subjectAltName - subject alternative name from certificate distinguishedName - DN from certificate If the selected information is not available, IKE will try the type specified in csOrionIKESvrParamRadiusAcctUserTypePriority3. ')
csOrionIKESvrParamRadiusAcctUserTypePriority3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 7, 1, 22), IKERadiusAcctUserType().clone('distinguishedName')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority3.setStatus('current')
if mibBuilder.loadTexts: csOrionIKESvrParamRadiusAcctUserTypePriority3.setDescription('Specifies the user information to include in the RADIUS Accounting-Request User-Name attribute if neither types specified in csOrionIKESvrParamRadiusAcctUserTypePriority1 and csOrionIKESvrParamRadiusAcctUserTypePriority2 are available: xauthUserId - xauth user login ID subjectAltName - subject alternative name from certificate distinguishedName - DN from certificate If the selected information is not available, IKE will include the assigned IP address in the user-name attribute.')
csOrionIpSecEvLogTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8), )
if mibBuilder.loadTexts: csOrionIpSecEvLogTable.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionIpSecEvLogTable.setDescription('A table for Event Logging Control for IPSEC/IKE. NOTE: this table has been moved to {csOrionEncryptInfo 13} since it should be under VI level instead of VR level.')
csOrionIpSecEvLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionIpSecEvLogEntry.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionIpSecEvLogEntry.setDescription('Each entry contains the event logging level and area for the IPSEC/IKE module on a virtual router.')
csOrionIpSecEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8, 1, 1), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEvLogLevel.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionIpSecEvLogLevel.setDescription('This object is used to set the level of details for event logs for IPSEC/IKE. ')
csOrionIpSecEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 8, 1, 2), EvLogArea().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEvLogArea.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionIpSecEvLogArea.setDescription('This object is used to set the area of event logs for IPSEC/IKE.')
csOrionIpSecStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9), )
if mibBuilder.loadTexts: csOrionIpSecStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsTable.setDescription('The IPSEC Statistics table.')
csOrionIpSecStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionIpSecStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEntry.setDescription('An entry containing IPSEC statistics information for this Virtual Interface.')
csOrionIpSecStatsRcvAhPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsDropped.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsDropped.setDescription('The number of dropped packets that were AH encrypted and were received in this Virtual Interface.')
csOrionIpSecStatsRcvAhPktsBadAh = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsBadAh.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsBadAh.setDescription('The number of bad AH packets that are AH encrypted and are received in this Virtual Interface.')
csOrionIpSecStatsRcvAhPktsBadSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsBadSpi.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsRcvAhPktsBadSpi.setDescription('The number of bad SPI packets that are AH encrypted and are received in this Virtual Interface.')
csOrionIpSecStatsRcvEspPktsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvEspPktsDropped.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsRcvEspPktsDropped.setDescription('The number of dropped packets that were ESP encrypted and were received in this Virtual Interface.')
csOrionIpSecStatsRcvEspPktsBadEsp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvEspPktsBadEsp.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsRcvEspPktsBadEsp.setDescription('The number of bad ESP packets that are ESP encrypted and were received in this Virtual Interface.')
csOrionIpSecStatsRcvPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsRcvPktsOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsRcvPktsOk.setDescription('The number of good packets received in this Virtual Interface.')
csOrionIpSecStatsTxPktsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsTxPktsDenied.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsTxPktsDenied.setDescription('The number of denied packets transmitted by this Virtual Interface.')
csOrionIpSecStatsEspTotalInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalInboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalInboundSAs.setDescription('The total number of ESP encrypted inbound SAs for this Virtual Interface.')
csOrionIpSecStatsEspTotalInboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalInboundSAsFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalInboundSAsFailed.setDescription('The total number of failed ESP encrypted inbound SAs for this Virtual Interface.')
csOrionIpSecStatsEspCurrentInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCurrentInboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspCurrentInboundSAs.setDescription('The current number of ESP encrypted inbound SAs for this Virtual Interface.')
csOrionIpSecStatsEspTotalOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalOutboundSAs.setDescription('The total number of ESP encrypted outbound SAs for this Virtual Interface.')
csOrionIpSecStatsEspTotalOutboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalOutboundSAsFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspTotalOutboundSAsFailed.setDescription('The total number of failed ESP encrypted outbound SAs for this Virtual Interface.')
csOrionIpSecStatsEspCurrentOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCurrentOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspCurrentOutboundSAs.setDescription('The current number of ESP encrypted outbound SAs for this Virtual Interface.')
csOrionIpSecStatsAhTotalInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalInboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalInboundSAs.setDescription('The total number of AH encrypted inbound SAs for this Virtual Interface.')
csOrionIpSecStatsAhTotalInboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalInboundSAsFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalInboundSAsFailed.setDescription('The total number of failed AH encrypted inbound SAs for this Virtual Interface.')
csOrionIpSecStatsAhCurrentInboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCurrentInboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhCurrentInboundSAs.setDescription('The current number of AH encrypted inbound SAs for this Virtual Interface.')
csOrionIpSecStatsAhTotalOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalOutboundSAs.setDescription('The total number of AH encrypted outbound SAs for this Virtual Interface.')
csOrionIpSecStatsAhTotalOutboundSAsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalOutboundSAsFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhTotalOutboundSAsFailed.setDescription('The total number of failed AH encrypted outbound SAs for this Virtual Interface.')
csOrionIpSecStatsAhCurrentOutboundSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCurrentOutboundSAs.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhCurrentOutboundSAs.setDescription('The current number of AH encrypted outbound SAs for this Virtual Interface.')
csOrionIpSecStatsEspCryptoCepEstablishOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCryptoCepEstablishOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspCryptoCepEstablishOk.setDescription('The number of crypto ceps that are ESP encrypted sucessfully established in this Virtual Interface.')
csOrionIpSecStatsEspCryptoCepEstablishFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspCryptoCepEstablishFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspCryptoCepEstablishFailed.setDescription('The number of crypto ceps that are ESP encrypted failed to establish in this Virtual Interface.')
csOrionIpSecStatsAhCryptoCepEstablishOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCryptoCepEstablishOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhCryptoCepEstablishOk.setDescription('The number of crypto ceps that are AH encrypted sucessfully established in this Virtual Interface.')
csOrionIpSecStatsAhCryptoCepEstablishFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhCryptoCepEstablishFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhCryptoCepEstablishFailed.setDescription('The number of crypto ceps that are AH encrypted failed to establish in this Virtual Interface.')
csOrionIpSecStatsEspEncryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspEncryptPktsOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspEncryptPktsOk.setDescription('The number of good ESP encrypted packets in this Virtual Interface.')
csOrionIpSecStatsEspDecryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspDecryptPktsOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspDecryptPktsOk.setDescription('The number of good ESP decrypted packets in this Virtual Interface.')
csOrionIpSecStatsAhEncryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhEncryptPktsOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhEncryptPktsOk.setDescription('The number of good AH encrypted packets in this Virtual Interface.')
csOrionIpSecStatsAhDecryptPktsOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhDecryptPktsOk.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhDecryptPktsOk.setDescription('The number of good AH decrypted packets in this Virtual Interface.')
csOrionIpSecStatsEspEncryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspEncryptPktsBad.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspEncryptPktsBad.setDescription('The number of bad ESP encrypted packets in this Virtual Interface.')
csOrionIpSecStatsEspDecryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsEspDecryptPktsBad.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsEspDecryptPktsBad.setDescription('The number of bad ESP decrypted packets in this Virtual Interface.')
csOrionIpSecStatsAhEncryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhEncryptPktsBad.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhEncryptPktsBad.setDescription('The number of bad AH encrypted packets in this Virtual Interface.')
csOrionIpSecStatsAhDecryptPktsBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 9, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatsAhDecryptPktsBad.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatsAhDecryptPktsBad.setDescription('The number of bad AH decrypted packets in this Virtual Interface.')
csOrionIKEStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10), )
if mibBuilder.loadTexts: csOrionIKEStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsTable.setDescription('The IKE Statistics table.')
csOrionIKEStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionIKEStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsEntry.setDescription('An entry containing IKE statistics information for this Virtual Interface.')
csOrionIKEStatsPhase1Negotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1Negotiations.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase1Negotiations.setDescription('The number of IKE phase 1 negotiations in this Virtual Interface.')
csOrionIKEStatsPhase1NegotiationsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1NegotiationsFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase1NegotiationsFailed.setDescription('The number of Failed IKE phase 1 negotiations in this Virtual Interface.')
csOrionIKEStatsPhase1InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1InPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase1InPkts.setDescription('The number of IKE phase 1 packets received in this Virtual Interface.')
csOrionIKEStatsPhase1InPktsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1InPktsRejected.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase1InPktsRejected.setDescription('The number of rejected IKE phase 1 packets received in this Virtual Interface.')
csOrionIKEStatsPhase1OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase1OutPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase1OutPkts.setDescription('The number of IKE phase 1 packets transmitted this Virtual Interface.')
csOrionIKEStatsPhase2Negotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2Negotiations.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase2Negotiations.setDescription('The number of IKE phase 2 negotiations in this Virtual Interface.')
csOrionIKEStatsPhase2NegotiationsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2NegotiationsFailed.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase2NegotiationsFailed.setDescription('The number of Failed IKE phase 2 negotiations in this Virtual Interface.')
csOrionIKEStatsPhase2InPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2InPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase2InPkts.setDescription('The number of IKE phase 2 packets received in this Virtual Interface.')
csOrionIKEStatsPhase2InPktsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2InPktsRejected.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase2InPktsRejected.setDescription('The number of rejected IKE phase 2 packets received in this Virtual Interface.')
csOrionIKEStatsPhase2OutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatsPhase2OutPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatsPhase2OutPkts.setDescription('The number of IKE phase 2 packets transmitted this Virtual Interface.')
csOrionIKEStateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11), )
if mibBuilder.loadTexts: csOrionIKEStateTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateTable.setDescription('The IKE State table.')
csOrionIKEStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionIKEStateSAIndex"))
if mibBuilder.loadTexts: csOrionIKEStateEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateEntry.setDescription('An entry containing IKE state information for this Virtual Interface.')
csOrionIKEStateSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16960)).clone(512))
if mibBuilder.loadTexts: csOrionIKEStateSAIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateSAIndex.setDescription('A unique value, greater than zero, for each SA. ')
csOrionIKEStateLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateLocalAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateLocalAddress.setDescription(' The local IP address of this SA.')
csOrionIKEStateRemoteAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRemoteAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateRemoteAddress.setDescription(' The remote IP address of this SA.')
csOrionIKEStateInitRespondFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("initiator", 1), ("responder", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateInitRespondFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateInitRespondFlag.setDescription(' Indicates if this SA is an initiator or a responder.')
csOrionIKEStateAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 65001, 65002, 65003, 65004, 65005, 65006, 65007, 65008, 65009, 65010))).clone(namedValues=NamedValues(("pre-shared-key", 1), ("dss-signatures", 2), ("rsa-signatures", 3), ("rsa-encryption", 4), ("rsa-encryption-revised", 5), ("gss-api", 6), ("xauth-init-pre-shared", 65001), ("xauth-resp-pre-shared", 65002), ("xauth-init-dss", 65003), ("xauth-resp-dss", 65004), ("xauth-init-rsa", 65005), ("xauth-resp-rsa", 65006), ("xauth-init-rsa-encryption", 65007), ("xauth-resp-rsa-encryption", 65008), ("xauth-init-rsa-revised-encryption", 65009), ("xauth-resp-rsa-revised-encryption", 65010)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateAuthenticationType.setDescription(' The authentication type of this SA. It could be a certificate or a pre-shared key.')
csOrionIKEStateCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateCreationTime.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateCreationTime.setDescription(' The creation time of this SA.')
csOrionIKEStateExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateExpirationTime.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateExpirationTime.setDescription(' The expiration time of this SA.')
csOrionIKEStateNegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateNegotiations.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateNegotiations.setDescription(' The number of phase 1 ISAKMP/IKE negotiations for this SA.')
csOrionIKEStateLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateLastUsed.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateLastUsed.setDescription(' The last time this SA was used. ')
csOrionIKEStateBytesTransferred = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateBytesTransferred.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateBytesTransferred.setDescription(' The number of bytes transferred by this SA.')
csOrionIKEStateCryptoAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateCryptoAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateCryptoAlgorithm.setDescription(' The name of the crypto algorithm for this SA.')
csOrionIKEStateHashAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateHashAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateHashAlgorithm.setDescription(' The name of the hash algorithm for this SA.')
csOrionIKEStatePrfAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStatePrfAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStatePrfAlgorithm.setDescription(' The name of the PRF algorithm for this SA.')
csOrionIKEStateRetryLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRetryLimit.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateRetryLimit.setDescription(' The limit of retry counts for this SA.')
csOrionIKEStateRetryTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRetryTimer.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateRetryTimer.setDescription(' The retry interval in seconds. It indicates the duration from one retry to next retry for this SA. Fraction of a second must be specified in csOrionIKEStateRetryTimerMicroSec.')
csOrionIKEStateRetryTimerMicroSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateRetryTimerMicroSec.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateRetryTimerMicroSec.setDescription(' The micro-second part of csOrionIKEStateRetryTimer.')
csOrionIKEStateMaxRetryDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateMaxRetryDuration.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateMaxRetryDuration.setDescription(' The maximum total retry duration for this SA. Fraction of a second must be specified in csOrionIKEStateMaxRetryDurationMicroSec.')
csOrionIKEStateMaxRetryDurationMicroSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 11, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEStateMaxRetryDurationMicroSec.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEStateMaxRetryDurationMicroSec.setDescription(' The micro-second part of csOrionIKEStateMaxRetryDuration.')
csOrionIKEDialupConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12), )
if mibBuilder.loadTexts: csOrionIKEDialupConnTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnTable.setDescription('A table of IKE dialup connection table.')
csOrionIKEDialupConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionIKEDialupConnIndex"))
if mibBuilder.loadTexts: csOrionIKEDialupConnEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnEntry.setDescription('Each entry contains a specific IKE dialup connection.')
csOrionIKEDialupConnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4000)))
if mibBuilder.loadTexts: csOrionIKEDialupConnIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnIndex.setDescription('An index that uniquely identifies an entry in the IKE dialup connection table.')
csOrionIKEDialupConnRemIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEDialupConnRemIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnRemIpAddress.setDescription('IP address of the remote IpSec tunnel.')
csOrionIKEDialupConnUserId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEDialupConnUserId.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnUserId.setDescription('Login ID of the dialup user, if the user uses Xauth. If Xauth is skipped, this will be an empty string.')
csOrionIKEDialupConnDistinguishName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIKEDialupConnDistinguishName.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnDistinguishName.setDescription('X.509 Distinguish Name of the dialup user, if the user uses certificates. For connection that does not use certificate, this will be an empty string.')
csOrionIKEDialupConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIKEDialupConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionIKEDialupConnRowStatus.setDescription("This object allows for deletion of a connection if it is set to 'destroy'. 'active' is not a valid value to set. Get on this object will always yield 'active'.")
csOrionIpSecStateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13), )
if mibBuilder.loadTexts: csOrionIpSecStateTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateTable.setDescription('The IPSEC State table.')
csOrionIpSecStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionIpSecStateSAIndex"))
if mibBuilder.loadTexts: csOrionIpSecStateEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateEntry.setDescription('An entry containing IPSEC state information for this Virtual Interface.')
csOrionIpSecStateSAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16960)).clone(512))
if mibBuilder.loadTexts: csOrionIpSecStateSAIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateSAIndex.setDescription('A unique value, greater than zero, for each SA. ')
csOrionIpSecStateSpi = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateSpi.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateSpi.setDescription('The SPI is an arbitray 32-bit value that, in combintation with the destination IP address and security protocol(AH), uniquely identified the Security Association for this datagram. ')
csOrionIpSecStateSAFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateSAFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateSAFlag.setDescription(' A flag Containing info regarding this SA. The value of the flag is the combination of the following values: tunnel-only (1), transport-only (2), esp-rfc1827 (8), ah-rfc1826 (16), esp-rfc2045 (32), ah-rfc1828 (64), ah-rfc2202 (128) Giving an example: the value 33 represents tunnel + esp-rfc2045')
csOrionIpSecStateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 255))).clone(namedValues=NamedValues(("none", 1), ("any", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateProtocol.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateProtocol.setDescription(' The protocol being used by this SA. This value is connected to General Access list protocol. ')
csOrionIpSecStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStatePort.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStatePort.setDescription(' The port number of the protocol; this value is connected to General Access list port number. ')
csOrionIpSecStateCreatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("ike", 2), ("dial-in", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateCreatorType.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateCreatorType.setDescription(' The creator type of this SA.')
csOrionIpSecStateRemoteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateRemoteGateway.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateRemoteGateway.setDescription(' The IP address of remote gateway.')
csOrionIpSecStateLocalGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateLocalGateway.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateLocalGateway.setDescription(' The IP address of local gateway.')
csOrionIpSecStateRemoteEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateRemoteEndPoint.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateRemoteEndPoint.setDescription(' The IP address of remote end point.')
csOrionIpSecStateLocalEndPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateLocalEndPoint.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateLocalEndPoint.setDescription(' The IP address of local end point.')
csOrionIpSecStateAlgorithmType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("ah-rfc1828", 1), ("ah-hmac-rfc1828", 2), ("ah-md5-hmac", 3), ("ah-sha-hmac", 4), ("esp-des-rfc1829", 5), ("esp-3des-rfc1829", 6), ("esp-des", 7), ("esp-3des", 8), ("esp-md5-hmac", 10), ("esp-sha-hmac", 11), ("esp3-md5-hmac", 12), ("esp3-sha-hmac", 13), ("other", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateAlgorithmType.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateAlgorithmType.setDescription(' The algorithm type of this SA. ')
csOrionIpSecStateSAType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("esp", 1), ("ah", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateSAType.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateSAType.setDescription(' The type of this SA. ')
csOrionIpSecStateExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 13), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateExpire.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateExpire.setDescription(' Indicate when this SA will be dropped.')
csOrionIpSecStateLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateLastUsed.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateLastUsed.setDescription(' The last time this SA was used. ')
csOrionIpSecStateDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipsec-sa-send", 1), ("ipsec-sa-rcv", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateDirection.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateDirection.setDescription(' The sending and receiving direction of this SA. ')
csOrionIpSecStateEncryptionAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateEncryptionAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateEncryptionAlgorithm.setDescription(' The name of the encryption algorithm for this SA.')
csOrionIpSecStateHashAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 13, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionIpSecStateHashAlgorithm.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecStateHashAlgorithm.setDescription(' The name of the hash algorithm for this SA.')
csOrionIpSecEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14), )
if mibBuilder.loadTexts: csOrionIpSecEventLogTable.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecEventLogTable.setDescription('A table for Event Logging Control for IPSEC/IKE.')
csOrionIpSecEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionIpSecEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecEventLogEntry.setDescription('Each entry contains the event logging level and area for the IPSEC/IKE module on a virtual router.')
csOrionIpSecEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14, 1, 1), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEventLogLevel.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecEventLogLevel.setDescription('This object is used to set the level of details for event logs for IPSEC/IKE. ')
csOrionIpSecEventLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 14, 1, 2), EvLogArea().clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionIpSecEventLogArea.setStatus('current')
if mibBuilder.loadTexts: csOrionIpSecEventLogArea.setDescription('This object is used to set the area of event logs for IPSEC/IKE.')
csOrionEncryptInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionEncryptInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionEncryptInfoEnd.setDescription('End of this group. value undefined')
csOrionVrNbnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1), )
if mibBuilder.loadTexts: csOrionVrNbnsConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrNbnsConfigTable.setDescription('This table contains NBNS configuration parameters.')
csOrionVrNbnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrNbnsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrNbnsConfigEntry.setDescription('Each entry represents the NBNS configuration parameters for a single VR.')
csOrionVrPrimaryNbnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrPrimaryNbnsServer.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPrimaryNbnsServer.setDescription('The primary NBNS server for this VR.')
csOrionVrSecondaryNbnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSecondaryNbnsServer.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSecondaryNbnsServer.setDescription('The secondary NBNS server for this VR.')
csOrionNBNSInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 19, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionNBNSInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionNBNSInfoEnd.setDescription('End of this group. value undefined')
csOrionAAAServerConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1), )
if mibBuilder.loadTexts: csOrionAAAServerConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerConfigTable.setDescription('This table contains AAA server configuration parameters.')
csOrionAAAServerConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAAAServerType"), (0, "COSINE-ORION-MIB", "csOrionAAAServerName"))
if mibBuilder.loadTexts: csOrionAAAServerConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerConfigEntry.setDescription('Each entry represents the configuration parameters for a single AAA server in this VR.')
csOrionAAAServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ldap", 1), ("radius", 2))))
if mibBuilder.loadTexts: csOrionAAAServerType.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerType.setDescription('The type of AAA server.')
csOrionAAAServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionAAAServerName.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerName.setDescription('Name given for this AAA server. Name has to be unique regardless of csOrionAAAServerType.')
csOrionAAAServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerIpAddress.setDescription('IP Address for this server.')
csOrionAAAServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerPort.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerPort.setDescription('Port on which this AAA server is listening for messages. Radius client uses the default port 1812 for AA requests. Ldap client uses the default port 389 for AA requests. For rows where csAAAServerType is local, this object has no meaning.')
csOrionAAAServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerRetransmit.setDescription('The number of times a AAA Server will be queried before moving to the next AAA Server in the list identified by csOrionAAAServerList. This object cannot be set for LDAP server, which is subject to TCP retransmission constraint and cannot be modified. TCP retries 12 times; the first timeout is 1.5 seconds, the subsequent retry timeout is twice as the previous one but no more than 64 seconds.')
csOrionAAAServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerTimeout.setDescription('The amount of time (in seconds) to wait for a response from this AAA Server before timing out. This object cannot be set for LDAP server, which is subject to TCP timeout constraint and cannot be modified. TCP retries 12 times; the first timeout is 1.5 seconds, the subsequent retry timeout is twice as the previous one but no more than 64 seconds.')
csOrionAAAServerRadiusKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerRadiusKey.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerRadiusKey.setDescription('The authentication and encryption key shared between the Radius client and this Radius Server. Applicable only if the server is of radius type.')
csOrionAAAServerLdapUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapUsername.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerLdapUsername.setDescription('Distinguished Name of the LDAP user. Applicable only if the server is of ldap type.')
csOrionAAAServerLdapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapPassword.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerLdapPassword.setDescription('Password of the LDAP user. Applicable only if the server is of ldap type.')
csOrionAAAServerLdapSearchBase = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapSearchBase.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerLdapSearchBase.setDescription('Starting point in the directory hierarchy to perform search operations. Applicable only if the server is of ldap type.')
csOrionAAAServerLdapSearchFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerLdapSearchFilter.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerLdapSearchFilter.setDescription('A filter that defines the conditions that must be fulfilled in order for the search to match a given entry. This must conform to RFC 2254 LDAP Search Filter String Representation. Applicable only if the server is of ldap type.')
csOrionAAAServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerRowStatus.setDescription('Used to create a row (createAndGo) or destroy a row. Once the row is created, get on this object will always yield active(1).')
csOrionAAAServerConfigTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServerConfigTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerConfigTableEnd.setDescription('End of this group. value undefined')
csOrionAAAServerListConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3), )
if mibBuilder.loadTexts: csOrionAAAServerListConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListConfigTable.setDescription('This table contains AAA server list configuration parameters. An AAA server list is a prioritized collection of AAA servers as defined in csOrionAAAServerConfigTable.')
csOrionAAAServerListConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListType"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListName"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListPriority"))
if mibBuilder.loadTexts: csOrionAAAServerListConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListConfigEntry.setDescription('Each entry points to a single AAA server as defined in csOrionAAAServerConfigTable. This server has a unique priority within the list.')
csOrionAAAServerListType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("authentication", 1), ("authorization", 2), ("accounting", 4))))
if mibBuilder.loadTexts: csOrionAAAServerListType.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListType.setDescription('This object defines the kind of AAA servers that are contained in this list. If this object has a value of authentication(1), then all servers in this list are to be used for authentication purposes. If the server is of radius type, then it is also used for authorization. If this object has a value of authorization(2), then all servers in this list are to be used for authorization purposes. Note that only ldap servers can be added to this list. If this object has a value of accounting(4), then all servers in this list are to be used for accounting purposes. Note that only radius servers can be added to this list.')
csOrionAAAServerListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionAAAServerListName.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListName.setDescription('The name given to the collection of AAA servers. An application refers to this name when specifying which group of servers to use for AAA purposes. This object has to be set during creation.')
csOrionAAAServerListPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionAAAServerListPriority.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListPriority.setDescription('The relative priority of the server in this list. Lower number means higher priority.')
csOrionAAAServerListSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerListSvrName.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListSvrName.setDescription("The name of the AAA server as defined in csOrionAAAServerConfigTable. A value of 'local' for this object means that the authentication is done locally.")
csOrionAAAServerListSvrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", -1), ("ldap", 1), ("radius", 2), ("local", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServerListSvrType.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListSvrType.setDescription('The type of AAA server. undefined(-1) means the corresponding AAA server is not yet defined, i.e., no entry in csOrionAAAServerConfigTable with a name as defined in csOrionAAAServerListSvrName. local(3) means that authentication is to be done locally.')
csOrionAAAServerListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4, 6))).clone(namedValues=NamedValues(("active", 1), ("createAndGo", 4), ("destroy", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionAAAServerListRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListRowStatus.setDescription('Used to create a row (createAndGo) or destroy a row. When setting this object to createAndGo, csOrionAAAServerListSvrName must also be set. Once the row is created, get on this object will always yield active(1).')
csOrionAAAServerListConfigTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServerListConfigTableEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListConfigTableEnd.setDescription('End of this group. value undefined')
csOrionAAAServerListAdminTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 5), )
if mibBuilder.loadTexts: csOrionAAAServerListAdminTable.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListAdminTable.setDescription('This table contains a RowStatus object to destroy an AAA server list defined in csOrionAAAServerListConfigTable. This provides a quick way to destroy the list without having to destroy each csOrionAAAServerListConfigEntry.')
csOrionAAAServerListAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListType"), (0, "COSINE-ORION-MIB", "csOrionAAAServerListName"))
if mibBuilder.loadTexts: csOrionAAAServerListAdminEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListAdminEntry.setDescription('Each entry represents an AAA server list.')
csOrionAAAServerListAdminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 6))).clone(namedValues=NamedValues(("active", 1), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionAAAServerListAdminRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServerListAdminRowStatus.setDescription('Setting this object to destroy(6) will destroy the whole AAA service list with {type, name} specified in {csOrionAAAServerListConfigType, csOrionAAAServerListConfigName}.')
csOrionAAAServiceInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 21, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAAAServiceInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionAAAServiceInfoEnd.setDescription('End of this group. value undefined')
csOrionVrSpfConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1), )
if mibBuilder.loadTexts: csOrionVrSpfConfTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfConfTable.setDescription('This table contains SPF configuration parameters.')
csOrionVrSpfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrSpfConfEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfConfEntry.setDescription('This table specifies a set of configurable parameters for the SPF module within each VR.')
csOrionVrSpfConnTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000)).clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfConnTblSize.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfConnTblSize.setDescription('This Size puts an upper limit on the total number of sessions (inclusive of TCP and UDP) that this VR will accept, connections beyond this number will be dropped.')
csOrionVrSpfTcpInitTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpInitTblSize.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpInitTblSize.setDescription('This Size puts an upper limit on the number of TCP sessions that can remain in the SYN state at any given time, this limits the ability to accept new TCP connections simultaneously.')
csOrionVrSpfUdpInitTblSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpInitTblSize.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfUdpInitTblSize.setDescription('This Size puts an upper limit on the number of UDP sessions that can remain in the unmatched state at any given time, this limits the ability to accept new UDP connections simultaneously.')
csOrionVrSpfTcpSeqCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpSeqCheck.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpSeqCheck.setDescription('If enabled, the tcp packets will be checked for validity of sequence number, this is done at init time, established state and close time.')
csOrionVrSpfTcpInitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpInitTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpInitTimeout.setDescription('This time out value decides how long a TCP session can remain in SYN state without the session establishment process reaching completion, the session is deleted after the expiry of this period.')
csOrionVrSpfTcpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 64800)).clone(420)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpIdleTimeout.setDescription('This timeout value decides how long a TCP session can hang around without any activity(or Idle), such entries are deleted after the expiry of this period and end peers reset.')
csOrionVrSpfTcpCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpCloseTimeout.setDescription('This decides the lifetime of the TIME_WAIT state in the TCP session closure sequence.')
csOrionVrSpfUdpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfUdpIdleTimeout.setDescription('This is the Idle timeout period for UDp sessions.')
csOrionVrSpfIcmpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfIcmpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfIcmpIdleTimeout.setDescription('This is the idle timeout period for ICMP sessions.')
csOrionVrSpfTcpCurrentConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpCurrentConnTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpCurrentConnTableEntries.setDescription('This is the number of TCP sessions in the Connection Table right now.')
csOrionVrSpfUdpCurrentConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpCurrentConnTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfUdpCurrentConnTableEntries.setDescription('This is the number of UDP sessions in the Connection Table right now.')
csOrionVrSpfIcmpCurrentConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfIcmpCurrentConnTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfIcmpCurrentConnTableEntries.setDescription('This is the number of ICMP sessions in the Connection Table right now.')
csOrionVrSpfTcpTotalConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpTotalConnTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpTotalConnTableEntries.setDescription('This is the total number of TCP sessions seen by the Connection Table.')
csOrionVrSpfUdpTotalConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpTotalConnTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfUdpTotalConnTableEntries.setDescription('This is the total number of UDP sessions seen by the Connection Table.')
csOrionVrSpfIcmpTotalConnTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 214748364))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfIcmpTotalConnTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfIcmpTotalConnTableEntries.setDescription('This is the total number of ICMP sessions seen by the Connection Table.')
csOrionVrSpfTcpSynTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfTcpSynTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfTcpSynTableEntries.setDescription('This is the total number of TCP SYN sessions in the TCP Initialization Table.')
csOrionVrSpfUdpUnmatchedTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfUdpUnmatchedTableEntries.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfUdpUnmatchedTableEntries.setDescription('This is the total number of UDP sessions in the UDP Initialization Table.')
csOrionVrSpfCleanTablesFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSpfCleanTablesFlag.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSpfCleanTablesFlag.setDescription('This is a flag to tell SPF to remove all entries fom the tables.')
csOrionSpfInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 20, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSpfInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionSpfInfoEnd.setDescription('End of this group. value undefined')
csOrionVncQueueTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1), )
if mibBuilder.loadTexts: csOrionVncQueueTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueTable.setDescription('A list of VNC Queues for each Virtual Interfaces. Each queue is assigned a minimum and maximum bandwidth.')
csOrionVncQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionVncQueueId"), (0, "COSINE-ORION-MIB", "csOrionVncQueueAclId"))
if mibBuilder.loadTexts: csOrionVncQueueEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueEntry.setDescription("An entry containing management information applicable to a particular virtual interface's vnc queue.")
csOrionVncQueueId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: csOrionVncQueueId.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueId.setDescription('The Id of this particular queue.')
csOrionVncQueueAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csOrionVncQueueAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueAclId.setDescription('The Id of an access list entry (from csOrionGenAclTable). All packets transmitted on this virtual that satisfy that access list entry are placed in this queue.')
csOrionVncQueueMinBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVncQueueMinBw.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueMinBw.setDescription('The minimum bandwidth allocated to this queue.')
csOrionVncQueueMaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVncQueueMaxBw.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueMaxBw.setDescription('The maximum bandwidth allocated to this queue.')
csOrionVncQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 6, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVncQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVncQueueRowStatus.setDescription('A row status type for this Rate Allocation Queue.')
csOrionPppConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 1), )
if mibBuilder.loadTexts: csOrionPppConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPppConfigTable.setDescription('This table contains general PPP configuration parameters.')
csOrionPppConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionPppConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPppConfigEntry.setDescription('Each entry represents the PPP configuration parameters for a single Virtual Router.')
csOrionPppConfigHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppConfigHostname.setStatus('current')
if mibBuilder.loadTexts: csOrionPppConfigHostname.setDescription('The name of this Virtual Router used during pap/chap authentication.')
csOrionPppIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2), )
if mibBuilder.loadTexts: csOrionPppIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfConfigTable.setDescription('This table contains interface-specific PPP configuration parameters.')
csOrionPppIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionPppIfSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfModuleIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfPortIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfChIndex"), (0, "COSINE-ORION-MIB", "csOrionPppIfSubIfIndex"))
if mibBuilder.loadTexts: csOrionPppIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfConfigEntry.setDescription('Each entry represents the PPP interface-specific configuration parameters for a single Logical Interface.')
csOrionPppIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionPppIfSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfSlotIndex.setDescription('The Slot Id of this Logical Interface.')
csOrionPppIfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionPppIfModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfModuleIndex.setDescription('The Module Index of this Logical Interface.')
csOrionPppIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionPppIfPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfPortIndex.setDescription('The Port Id of this Logical Interface.')
csOrionPppIfChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csOrionPppIfChIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfChIndex.setDescription('The Channel Id of this Logical Interface. Channel is 0 if this object is in the Unchannelized DS3/E3 or ATM PVC.')
csOrionPppIfSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csOrionPppIfSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfSubIfIndex.setDescription("The identifier for this logical interface. This corresponds to the 'subinterface' entered via the CLI. A sub-if 0 will be used for PPP objects other than in PPP over ATM.")
csOrionPppIfConfigAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfConfigAuth.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfConfigAuth.setDescription('The type of authentication used by PPP over this Logical Interface.')
csOrionPppIfEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("weak", 2), ("strong", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEncryption.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionPppIfEncryption.setDescription('NOTE: This object has been obsoleted.')
csOrionPppIfEncryptionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stateful", 1), ("stateless", 2))).clone('stateful')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEncryptionMode.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionPppIfEncryptionMode.setDescription('NOTE: This object has been obsoleted.')
csOrionPppIfRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfRetransmit.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionPppIfRetransmit.setDescription('The maximum number of PPP retransmissions attempted on this Logical Interface.')
csOrionPppIfConfigReqRtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfConfigReqRtx.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfConfigReqRtx.setDescription('The maximum number of PPP configuration request retransmissions attempted on this Logical Interface.')
csOrionPppIfTerminateReqRtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfTerminateReqRtx.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfTerminateReqRtx.setDescription('The maximum number of PPP terminate request retransmissions attempted on this Logical Interface.')
csOrionPppIfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfTimeout.setDescription('The amount of time (in seconds) between retransmit attempts on this Logical Interface.')
csOrionPppIfReauth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfReauth.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfReauth.setDescription('The amount of time (in seconds) between re-authentication requests on an established PPP connection on this Logical Interface. The value 0 disabled re-authentication.')
csOrionPppIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfAdminStatus.setDescription('This object is used to enable/disable the PPP.')
csOrionPppIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPppIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfOperStatus.setDescription('The operational status for this interface.')
csOrionPppIfEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 16), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfEvLogLevel.setDescription('This object is used to set the level of details for event logs for PPP. Events with level higher than this object will not be logged. ')
csOrionPppIfEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 17), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEvLogArea.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfEvLogArea.setDescription('This object is used to set the area of event logs for PPP. Events which area is not specified in this object will not be logged.')
csOrionPppIfEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPppIfEchoTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionPppIfEchoTimeout.setDescription('The echo timeout (keepalive) in seconds.')
csOrionPppRemoteUserTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3), )
if mibBuilder.loadTexts: csOrionPppRemoteUserTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPppRemoteUserTable.setDescription('This table contains remote username/password pairs. This database is used to authenticate remote users via PAP or CHAP.')
csOrionPppRemoteUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPppRemoteUserName"))
if mibBuilder.loadTexts: csOrionPppRemoteUserEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPppRemoteUserEntry.setDescription('Each entry represents a single username, password pair.')
csOrionPppRemoteUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80)))
if mibBuilder.loadTexts: csOrionPppRemoteUserName.setStatus('current')
if mibBuilder.loadTexts: csOrionPppRemoteUserName.setDescription('The name of a remote user.')
csOrionPppRemoteUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppRemoteUserPassword.setStatus('current')
if mibBuilder.loadTexts: csOrionPppRemoteUserPassword.setDescription('The password of a remote user.')
csOrionPppRemoteUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppRemoteUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPppRemoteUserRowStatus.setDescription('The RowStatus object for this table.')
csOrionPppRemoteUserConnProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionPppRemoteUserConnProfile.setStatus('current')
if mibBuilder.loadTexts: csOrionPppRemoteUserConnProfile.setDescription('The connection profile for this user. Refer to csOrionConnectionProfileName object.')
csOrionPppInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPppInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionPppInfoEnd.setDescription('End of this group. value undefined')
csOrionPptpConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1), )
if mibBuilder.loadTexts: csOrionPptpConfTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfTable.setDescription('This table contains general Pptp Configuration parameters.')
csOrionPptpConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionPptpConfEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfEntry.setDescription('Each entry represents a set of Pptp configuration for a single Virtual Router.')
csOrionPptpConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfStatus.setDescription('This object enables or disables the PPTP Server on this Virtual Router.')
csOrionPptpConfMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfMaxConn.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfMaxConn.setDescription('The maximum number of simultaneous Pptp connections supported by this Virtual Router.')
csOrionPptpConfIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfIdleTimeout.setDescription('The amount of time the Pptp server allows a connection to remain idle. A value 0 would mean no timeout.')
csOrionPptpConfPPPKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfPPPKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfPPPKeepAliveInterval.setDescription('The timeout interval value the PPTP connection uses to send PPP keepalive requests. A value 0 would mean no timeout.')
csOrionPptpConfEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("weak", 2), ("strong", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfEncryption.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfEncryption.setDescription('The type of encryption used by PPTP Server on this Virtual Router.')
csOrionPptpConfAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfAuthentication.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfAuthentication.setDescription('The type of authentication used by PPTP Server on this Virtual Router.')
csOrionPptpConfIpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConfIpPool.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConfIpPool.setDescription('This object identifies the Ip Local Address Pool that should be used by this PPTP Server to assign addresses to dynamic PPTP connections.')
csOrionPptpConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2), )
if mibBuilder.loadTexts: csOrionPptpConnTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnTable.setDescription('This table identifies all the current Pptp connections on this Virtual Router.')
csOrionPptpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionPptpConnFarIpAddr"), (0, "COSINE-ORION-MIB", "csOrionPptpConnLocalIpAddr"))
if mibBuilder.loadTexts: csOrionPptpConnEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnEntry.setDescription('Each entry represents a single Pptp connection.')
csOrionPptpConnFarIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionPptpConnFarIpAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnFarIpAddr.setDescription('This object identifies the far end of a Pptp connection.')
csOrionPptpConnLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionPptpConnLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnLocalIpAddr.setDescription('This object identifies the local end of a Pptp connection.')
csOrionPptpConnAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPptpConnAge.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnAge.setDescription('The age (in seconds) of this Pptp connection.')
csOrionPptpConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPptpConnStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnStatus.setDescription('This object can be used to remove a Pptp connection by setting the value to disabled.')
csOrionPptpConnFarUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPptpConnFarUsername.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpConnFarUsername.setDescription('This is the username on the other end of the connection.')
csOrionPptpInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPptpInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionPptpInfoEnd.setDescription('End of this group. value undefined')
csOrionVrRadiusConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1), )
if mibBuilder.loadTexts: csOrionVrRadiusConfigTable.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusConfigTable.setDescription('This table contains Radius configuration parameters. This table is obsoleted as of release 3.0 in favor of csOrionAAAServerConfigTable and csOrionAAAServerListConfigTable.')
csOrionVrRadiusConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrRadiusConfigEntry.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusConfigEntry.setDescription('Each entry represents the Radius configuration parameters for a single VR.')
csOrionVrRadiusRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrRadiusRetransmit.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusRetransmit.setDescription('The number of times a Radius Server will be queried before moving to the next Radius Server in the list identified by csOrionVrRadiusList.')
csOrionVrRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrRadiusTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusTimeout.setDescription('The amount of time (in seconds) this Virtual Router will wait for a Radius Server before timing out.')
csOrionVrRadiusSvrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2), )
if mibBuilder.loadTexts: csOrionVrRadiusSvrTable.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrTable.setDescription('A list of RADIUS authentication servers. This table is obsoleted as of release 3.0 in favor of csOrionAAAServerConfigTable and csOrionAAAServerListConfigTable.')
csOrionVrRadiusSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrRadiusSvrPriority"))
if mibBuilder.loadTexts: csOrionVrRadiusSvrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrEntry.setDescription('An entry containing management information applicable to a particular RADIUS Server.')
csOrionVrRadiusSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionVrRadiusSvrPriority.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrPriority.setDescription('The relative priority of this RADIUS server in this list.')
csOrionVrRadiusSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrAddress.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrAddress.setDescription('The IP address of this RADIUS server in this list.')
csOrionVrRadiusSvrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrKey.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrKey.setDescription('The authentication and encryption key used for all Radius communication between the Virtual Router and this Radius Server.')
csOrionVrRadiusSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrRowStatus.setDescription('The Admin Status type for this entry in the Radius Server Table.')
csOrionVrRadiusSvrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrRadiusSvrOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrOperStatus.setDescription('The operational status for this entry in the Radius Server Table.')
csOrionVrRadiusSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1812)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusSvrPort.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusSvrPort.setDescription('Radius client uses the default port 1812 for AA requests. This will not work with the old radius servers which uses 1645 for AA requests. To support the old port, we throw in this extra parameter.')
csOrionVrRadiusAcctSvrTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3), )
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrTable.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrTable.setDescription('A list of RADIUS accounting servers. This table is obsoleted as of release 3.0 in favor of csOrionAAAServerConfigTable and csOrionAAAServerListConfigTable.')
csOrionVrRadiusAcctSvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrRadiusAcctSvrPriority"))
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrEntry.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrEntry.setDescription('An entry containing management information applicable to a particular RADIUS Accounting Server.')
csOrionVrRadiusAcctSvrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrPriority.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrPriority.setDescription('The relative priority of this RADIUS accounting server in this list.')
csOrionVrRadiusAcctSvrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrAddress.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrAddress.setDescription('The IP address of this RADIUS accounting server in this list.')
csOrionVrRadiusAcctSvrKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrKey.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrKey.setDescription('The authentication and encryption key used for all Radius communication between the Virtual Router and this Radius Accounting Server.')
csOrionVrRadiusAcctSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrRowStatus.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrRowStatus.setDescription('The Admin Status type for this entry in the Radius Accounting Server Table.')
csOrionVrRadiusAcctSvrOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 5), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrOperStatus.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrOperStatus.setDescription('The operational status for this entry in the Radius Accounting Server Table.')
csOrionVrRadiusAcctSvrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1813)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrPort.setStatus('obsolete')
if mibBuilder.loadTexts: csOrionVrRadiusAcctSvrPort.setDescription('Radius client uses the default port 1813 for ACCT requests. This will not work with the old radius servers which uses 1646 for ACCT requests. To support the old port, we throw in this extra parameter.')
csOrionRadiusInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusInfoEnd.setDescription('End of this group. value undefined')
csOrionVrDhcpRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1), )
if mibBuilder.loadTexts: csOrionVrDhcpRelayConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayConfigTable.setDescription('This table contains DHCP Relay Agent configuration parameters.')
csOrionVrDhcpRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrDhcpRelayConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayConfigEntry.setDescription('Each entry represents the DHCP Relay configuration for a single VR.')
csOrionVrDhcpRelayMaxHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayMaxHops.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayMaxHops.setDescription("The upper limit for the 'hops' field of DHCP requests. Any request with a value exceeding this limit will be dropped by the relay agent.")
csOrionVrDhcpRelaySecsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 360)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelaySecsThreshold.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelaySecsThreshold.setDescription("The threshold, in seconds, for the 'time elapsed' field of DHCP requests. This value is used to prioritize clients across the relay agent. The agent forwards only those requests that have a 'time elapsed' field value equal to or greater than the value set for this paramter.")
csOrionVrDhcpRelayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrDhcpRelayOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayOperStatus.setDescription('This object indicates the current operational status of the relay agent.')
csOrionVrDhcpRelayAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayAdminStatus.setDescription('This object indicates the desired state of the DHCP relay agent. A relay agent, once enabled, requires at least one DHCP server address to forward packets to. If a list of servers has been configured, then all requests are forwarded to all servers -- no priority or precedence is applied.')
csOrionVrDhcpRelayServerTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2), )
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerTable.setDescription('This table contains the IP addresses of a list of DHCP servers to which the relay can forward the requests.')
csOrionVrDhcpRelayServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrDhcpRelayServerAddress"))
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerEntry.setDescription('Each entry contains a information about a single DHCP server - an IP address, and, optionally, a name.')
csOrionVrDhcpRelayServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerAddress.setDescription('The IP address of the DHCP server this entry corresponds to.')
csOrionVrDhcpRelayServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerName.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerName.setDescription('The name of the the DHCP server this entry corresponds to.')
csOrionVrDhcpRelayServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDhcpRelayServerRowStatus.setDescription('The RowStatus object for this table entry.')
csOrionDhcpRelayStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3), )
if mibBuilder.loadTexts: csOrionDhcpRelayStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayStatsTable.setDescription('This table contains various statistics pertaining to the DHCP Relay Agent.')
csOrionDhcpRelayStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionDhcpRelayStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayStatsEntry.setDescription('A Set of statistics for a single DHCP Relay Agent.')
csOrionDhcpRelayInReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInReqs.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInReqs.setDescription('The total number of DHCP Request packets received.')
csOrionDhcpRelayInDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInDiscs.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInDiscs.setDescription('The total number of DHCP Discover packets received.')
csOrionDhcpRelayInRels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInRels.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInRels.setDescription('The total number of DHCP Release packets received.')
csOrionDhcpRelayInDecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInDecs.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInDecs.setDescription('The total number of DHCP Decline packets received.')
csOrionDhcpRelayInAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInAcks.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInAcks.setDescription('The tatal number of DHCP Ack packets received.')
csOrionDhcpRelayInNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInNaks.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInNaks.setDescription('The total number of DHCP Nak packets received.')
csOrionDhcpRelayInOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayInOffers.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayInOffers.setDescription('The total number of DHCP Offer packets received.')
csOrionDhcpRelayOutReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutReqs.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutReqs.setDescription('The total number of DHCP Request packets forwarded.')
csOrionDhcpRelayOutDiscs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutDiscs.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutDiscs.setDescription('The total number of DHCP Discover packets forwarded.')
csOrionDhcpRelayOutRels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutRels.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutRels.setDescription('The total number of DHCP Release packets forwarded.')
csOrionDhcpRelayOutDecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutDecs.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutDecs.setDescription('The total number of DHCP Decline packets forwarded.')
csOrionDhcpRelayOutAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutAcks.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutAcks.setDescription('The tatal number of DHCP Ack packets forwarded.')
csOrionDhcpRelayOutNaks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutNaks.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutNaks.setDescription('The total number of DHCP Nak packets forwarded.')
csOrionDhcpRelayOutOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDhcpRelayOutOffers.setStatus('current')
if mibBuilder.loadTexts: csOrionDhcpRelayOutOffers.setDescription('The total number of DHCP Offer packets forwarded.')
csOrionDHCPInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDHCPInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionDHCPInfoEnd.setDescription('End of this group. value undefined')
csOrionVrDnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1), )
if mibBuilder.loadTexts: csOrionVrDnsConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDnsConfigTable.setDescription('This table contains DNS configuration parameters.')
csOrionVrDnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrDnsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDnsConfigEntry.setDescription('Each entry represents the DNS configuration parameters for a single VR.')
csOrionVrPrimaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrPrimaryDnsServer.setStatus('current')
if mibBuilder.loadTexts: csOrionVrPrimaryDnsServer.setDescription('The primary DNS server for this VR.')
csOrionVrSecondaryDnsServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionVrSecondaryDnsServer.setStatus('current')
if mibBuilder.loadTexts: csOrionVrSecondaryDnsServer.setDescription('The secondary DNS server for this VR.')
csOrionDNSInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDNSInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionDNSInfoEnd.setDescription('End of this group. value undefined')
csOrionVrIfManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1), )
if mibBuilder.loadTexts: csOrionVrIfManagerTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerTable.setDescription('')
csOrionVrIfManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerModuleIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerPortIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerChannelIndex"), (0, "COSINE-ORION-MIB", "csOrionVrIfManagerSubifIndex"))
if mibBuilder.loadTexts: csOrionVrIfManagerEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerEntry.setDescription('')
csOrionVrIfManagerSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerSlotIndex.setDescription('This object identifies the slot ID.')
csOrionVrIfManagerModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerModuleIndex.setDescription('This object identifies the module ID.')
csOrionVrIfManagerPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerPortIndex.setDescription('This object identifies the port ID.')
csOrionVrIfManagerChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerChannelIndex.setDescription('This object identifies the channel ID.')
csOrionVrIfManagerSubifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csOrionVrIfManagerSubifIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerSubifIndex.setDescription('This object identifies the subif ID.')
csOrionVrIfManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrIfManagerRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrIfManagerRowStatus.setDescription('The row status for this table.')
csOrionConnectionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2), )
if mibBuilder.loadTexts: csOrionConnectionProfileTable.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileTable.setDescription('This table contains a list of connection profiles.')
csOrionConnectionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionConnectionProfileName"))
if mibBuilder.loadTexts: csOrionConnectionProfileEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileEntry.setDescription('This entry represents a single connection profile.')
csOrionConnectionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 1), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: csOrionConnectionProfileName.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileName.setDescription('The name of this connection profile.')
csOrionConnectionProfileVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileVpnId.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileVpnId.setDescription('The VPN Id this profile applies to.')
csOrionConnectionProfileVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 3), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileVrId.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileVrId.setDescription('The VR Id this profile applies to.')
csOrionConnectionProfileAddrPoolname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 4), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileAddrPoolname.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileAddrPoolname.setDescription('The local IP address poolname in the VR.')
csOrionConnectionProfileLnsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 5), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileLnsAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileLnsAddress.setDescription('The LNS IP address this profile applies to.')
csOrionConnectionProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionConnectionProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionConnectionProfileRowStatus.setDescription('The row status for this table.')
csOrionServiceTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3), )
if mibBuilder.loadTexts: csOrionServiceTemplateTable.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateTable.setDescription('This table contains a list of names of service selections. Each of this entry will hold a list of connection profiles. Refer to expansion table csOrionServiceTemplateConnProfileTable.')
csOrionServiceTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3, 2), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionServiceTemplateName"))
if mibBuilder.loadTexts: csOrionServiceTemplateEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateEntry.setDescription('This entry represents a single service selection.')
csOrionServiceTemplateName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3, 2, 1), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: csOrionServiceTemplateName.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateName.setDescription('The service selection template name.')
csOrionServiceTemplateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 3, 2, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionServiceTemplateRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateRowStatus.setDescription('The row status for this table.')
csOrionServiceTemplateConnProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4), )
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileTable.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileTable.setDescription('This table contains a list of connection profiles contained in a single service selection template.')
csOrionServiceTemplateConnProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4, 2), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionServiceTemplateName"), (0, "COSINE-ORION-MIB", "csOrionServiceTemplateConnProfileName"))
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileEntry.setDescription('This entry represents a single connection profile on a service selection.')
csOrionServiceTemplateConnProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4, 2, 1), LongDisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256)))
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileName.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileName.setDescription('The name of the connection profile to be added in the table. NOTE: Must be an existing csOrionConnectionProfileName.')
csOrionServiceTemplateConnProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 4, 2, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceTemplateConnProfileRowStatus.setDescription('The row status for this table.')
csOrionServiceSelectionInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionServiceSelectionInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceSelectionInfoEnd.setDescription('End of this group. value undefined')
csOrionCiscoHdlcConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1), )
if mibBuilder.loadTexts: csOrionCiscoHdlcConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcConfigTable.setDescription('This table contains configuration parameters for Cisco HDLC.')
csOrionCiscoHdlcConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionCiscoHdlcSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionCiscoHdlcModuleIndex"), (0, "COSINE-ORION-MIB", "csOrionCiscoHdlcPortIndex"), (0, "COSINE-ORION-MIB", "csOrionCiscoHdlcChIndex"))
if mibBuilder.loadTexts: csOrionCiscoHdlcConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcConfigEntry.setDescription('Each entry represents the Cisco HDLC interface-specific configuration parameters for a single interface.')
csOrionCiscoHdlcSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcSlotIndex.setDescription('The Slot Id of this interface.')
csOrionCiscoHdlcModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcModuleIndex.setDescription('The Module Id of this interface.')
csOrionCiscoHdlcPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcPortIndex.setDescription('The Port Id of this interface.')
csOrionCiscoHdlcChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)))
if mibBuilder.loadTexts: csOrionCiscoHdlcChIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcChIndex.setDescription('The Channel Id of this interface. Channel is 0 if this object is in the Unchannelized DS3.')
csOrionCiscoHdlcSlarpKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionCiscoHdlcSlarpKeepAlive.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcSlarpKeepAlive.setDescription('The interval, in second, between keep alive packets.')
csOrionCiscoHdlcOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 6), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionCiscoHdlcOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcOperStatus.setDescription('The operational status of this table.')
csOrionCiscoHdlcAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionCiscoHdlcAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcAdminStatus.setDescription('This object is used to enable/disable the Cisco HDLC.')
csOrionCiscoHdlcInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionCiscoHdlcInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionCiscoHdlcInfoEnd.setDescription('End of this group. value undefined')
csOrionFRoIPConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1), )
if mibBuilder.loadTexts: csOrionFRoIPConfTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfTable.setDescription('This table contains general FRoIP Configuration parameters.')
csOrionFRoIPConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionFRoIPConfEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfEntry.setDescription('Each entry represents a set of FRoIPconfiguration for a Virtual Router. There is only one instance of FRoIP on a Virtual Router. An entry is created with IP address and default values for all the other objects when a VR is created. Creation of row by Network Management Stations is not allowed.')
csOrionFRoIPVIfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPVIfaceId.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPVIfaceId.setDescription(' ')
csOrionFRoIPConfMaxPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfMaxPeer.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfMaxPeer.setDescription(' ')
csOrionFRoIPConfDefaultWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultWindowSize.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultWindowSize.setDescription(' ')
csOrionFRoIPConfDefaultWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25000)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultWindowTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultWindowTimeout.setDescription(' ')
csOrionFRoIPConfDefaultServiceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultServiceSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfDefaultServiceSlot.setDescription('This object identifies the slot that all new transports created off this base inherit.')
csOrionFRoIPConfNumActiveTransports = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPConfNumActiveTransports.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPConfNumActiveTransports.setDescription(' ')
csOrionFRoIPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFRoIPAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPAdminStatus.setDescription(' ')
csOrionFRoIPOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 1, 1, 8), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPOperStatus.setDescription(' ')
csOrionFRoIPTransportTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2), )
if mibBuilder.loadTexts: csOrionFRoIPTransportTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportTable.setDescription('This table contains transport related objects of FRoIP.')
csOrionFRoIPTransportEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFRoIPTransportPeer"))
if mibBuilder.loadTexts: csOrionFRoIPTransportEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportEntry.setDescription('Each entry represents a set of transport related objects of FRoIP on a Virtual Router.')
csOrionFRoIPTransportPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionFRoIPTransportPeer.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportPeer.setDescription(' ')
csOrionFRoIPTransportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportMode.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportMode.setDescription(' ')
csOrionFRoIPTransportWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(24)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportWindowSize.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportWindowSize.setDescription(' ')
csOrionFRoIPTransportWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 25000)).clone(1000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportWindowTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportWindowTimeout.setDescription(' In milliseconds')
csOrionFRoIPTransportKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 30)).clone(15)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportKeepAlive.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportKeepAlive.setDescription(' ')
csOrionFRoIPTransportEventWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportEventWindowSize.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportEventWindowSize.setDescription(' ')
csOrionFRoIPTransportPermittedBadEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportPermittedBadEvents.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportPermittedBadEvents.setDescription(' ')
csOrionFRoIPTransportDefaultSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportDefaultSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportDefaultSlot.setDescription(' ')
csOrionFRoIPTransportOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportOutPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportOutPkts.setDescription(' ')
csOrionFRoIPTransportInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportInPkts.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportInPkts.setDescription(' ')
csOrionFRoIPTransportOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportOutBytes.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportOutBytes.setDescription(' ')
csOrionFRoIPTransportInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportInBytes.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportInBytes.setDescription(' ')
csOrionFRoIPTransportRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportRowStatus.setDescription(' ')
csOrionFRoIPTransportAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionFRoIPTransportAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportAdminStatus.setDescription(' ')
csOrionFRoIPTransportOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 2, 1, 15), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFRoIPTransportOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionFRoIPTransportOperStatus.setDescription(' ')
csFRoIPCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3), )
if mibBuilder.loadTexts: csFRoIPCircuitTable.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitTable.setDescription('A table containing information about virtual circuits corresponding to FRoIP Transports..')
csFRoIPCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionFRoIPTransportPeer"), (0, "COSINE-ORION-MIB", "csFRoIPCircuitDlci"))
if mibBuilder.loadTexts: csFRoIPCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitEntry.setDescription('The information regarding a single Data Link Connection. Discontinuities in the counters contained in this table are indicated by the value in csFrCircuitCreationTime.')
csFRoIPCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 1), DLCI())
if mibBuilder.loadTexts: csFRoIPCircuitDlci.setReference('American National Standard T1.618-1991, Section 3.3.6')
if mibBuilder.loadTexts: csFRoIPCircuitDlci.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitDlci.setDescription('The Data Link Connection Identifier for this virtual circuit. Note, this impelemtation supports only values between 16 and 1023 (inclusive).')
csFRoIPCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitState.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitState.setDescription("Indicates whether the particular virtual circuit is operational. In the absence of a Data Link Connection Management Interface, virtual circuit entries (rows) may be created by setting virtual circuit state to 'active', or deleted by changing Circuit state to 'invalid'. Whether or not the row actually disappears is left to the implementation, so this object may actually read as 'invalid' for some arbitrary length of time. It is also legal to set the state of a virtual circuit to 'inactive' to temporarily disable a given circuit. The use of 'invalid' is deprecated in this SNMP Version 2 MIB, in favor of csFRoIPCircuitRowStatus.")
csFRoIPCircuitReceivedFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFECNs.setReference('American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFECNs.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFECNs.setDescription('Number of frames received from the network indicating forward congestion since the virtual circuit was created. This occurs when the remote DTE sets the FECN flag, or when a switch in the network enqueues the frame to a trunk whose transmission queue is congested.')
csFRoIPCircuitReceivedBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedBECNs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedBECNs.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedBECNs.setDescription('Number of frames received from the network indicating backward congestion since the virtual circuit was created. This occurs when the remote DTE sets the BECN flag, or when a switch in the network receives the frame from a trunk whose transmission queue is congested.')
csFRoIPCircuitSentFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitSentFrames.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitSentFrames.setDescription('The number of frames sent from this virtual circuit since it was created.')
csFRoIPCircuitSentOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitSentOctets.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created. Octets counted are the full frame relay header and the payload, but do not include the flag characters or CRC.')
csFRoIPCircuitReceivedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFrames.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedFrames.setDescription('Number of frames received over this virtual circuit since it was created.')
csFRoIPCircuitReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedOctets.setDescription('Number of octets received over this virtual circuit since it was created. Octets counted include the full frame relay header, but do not include the flag characters or the CRC.')
csFRoIPCircuitCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 9), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitCreationTime.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitCreationTime.setDescription('The value of sysUpTime when the virtual circuit was created, whether by the Data Link Connection Management Interface or by a SetRequest.')
csFRoIPCircuitLastTimeChange = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitLastTimeChange.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitLastTimeChange.setDescription('The value of sysUpTime when last there was a change in the virtual circuit state')
csFRoIPCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitCommittedBurst.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: csFRoIPCircuitCommittedBurst.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval.')
csFRoIPCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitExcessBurst.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: csFRoIPCircuitExcessBurst.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will attempt to deliver over the measurement interval. By default, if not configured when creating the entry, the Excess Information Burst Size is set to the value of ifSpeed.')
csFRoIPCircuitThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitThroughput.setReference('American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: csFRoIPCircuitThroughput.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitThroughput.setDescription("Throughput is the average number of 'Frame Relay Information Field' bits transferred per second across a user network interface in one direction, measured over the measurement interval. If the configured committed burst rate and throughput are both non-zero, the measurement interval, T, is T=csFRoIPCircuitCommittedBurst/csFRoIPCircuitThroughput. If the configured committed burst rate and throughput are both zero, the measurement interval, T, is T=csFRoIPCircuitExcessBurst/ifSpeed.")
csFRoIPCircuitMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unicast", 1), ("oneWay", 2), ("twoWay", 3), ("nWay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitMulticast.setReference('Frame Relay PVC Multicast Service and Protocol Description Implementation: FRF.7 Frame Relay Forum Technical Committe October 21, 1994')
if mibBuilder.loadTexts: csFRoIPCircuitMulticast.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitMulticast.setDescription('This indicates whether this VC is used as a unicast VC (i.e. not multicast) or the type of multicast service subscribed to')
csFRoIPCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitType.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitType.setDescription('Indication of whether the VC was manually created (static), or dynamically created (dynamic) via the data link control management interface.')
csFRoIPCircuitDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitDiscards.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitDiscards.setDescription('The number of inbound frames dropped because of format errors, or because the VC is inactive.')
csFRoIPCircuitReceivedDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitReceivedDEs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedDEs.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitReceivedDEs.setDescription("Number of frames received from the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the remote DTE sets the DE flag, or when in remote DTE's switch detects that the frame was received as Excess Burst data.")
csFRoIPCircuitSentDEs = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitSentDEs.setReference('American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: csFRoIPCircuitSentDEs.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitSentDEs.setDescription('Number of frames sent to the network indicating that they were eligible for discard since the virtual circuit was created. This occurs when the local DTE sets the DE flag, indicating that during Network congestion situations those frames should be discarded in preference of other frames sent without the DE bit set.')
csFRoIPCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitRowStatus.setDescription('This object is used to create a new row or modify or destroy an existing row in the manner described in the definition of the RowStatus textual convention. Writable objects in the table may be written in any RowStatus state.')
csFRoIPCircuitOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 20), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitOperStatus.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitOperStatus.setDescription('The operational status of this circuit.')
csFRoIPCircuitFwdLink = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 3, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16).clone(hexValue="00000000000000000000000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csFRoIPCircuitFwdLink.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitFwdLink.setDescription('The forwarding link of this DLCI. This is a switching parameters for intra blade and inter-blade switching. It takes the following format: byte #0 to #3 : Slot number (csFRoIPDlcmiSlot) byte #4 to #7 : Port number (csFRoIPDlcmiPort) byte #8 to #11 : Channel number (csFRoIPDlcmiChannel, zero for unchannelized blade) byte #12 to #15: DLCI number (csFRoIPCircuitDlci) NOTE: all zero indicates that this DLCI is not connected to any link.')
csFRoIPCircuitTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csFRoIPCircuitTableEnd.setStatus('current')
if mibBuilder.loadTexts: csFRoIPCircuitTableEnd.setDescription('End of this group. value undefined')
csOrionL2tpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1), )
if mibBuilder.loadTexts: csOrionL2tpConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTable.setDescription('This table contains general L2TP configuration parameters. IMPORTANT : Tunnels and session parameters are established using the parameters in this table. That means, changing the value of an object in this table will not affect existing tunnels and session. It will be applied for the tunnels and session that are to be established.')
csOrionL2tpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionL2tpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigEntry.setDescription('Each entry represents a single L2TP object for a Virtual Router. Only a single instance of this object is created upon creation of a VR.')
csOrionL2tpConfigServiceIf = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigServiceIf.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigServiceIf.setDescription('This object defines the VI over which communication will occur with peers. This object can be set only when there is no tunnel.')
csOrionL2tpConfigMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigMaxTunnels.setDescription('This object defines the maximum number of L2TP tunnels that can be established.')
csOrionL2tpConfigMaxSessionsPerTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigMaxSessionsPerTunnel.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigMaxSessionsPerTunnel.setDescription('This object defines the maximum sessions that can be established per tunnel.')
csOrionL2tpConfigTunnelAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelAuthentication.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelAuthentication.setDescription('This object controls the tunnel authentication. If set to Enable, a challenge will be sent to the peer during tunnel creation. The tunnel will be torn down if the peer does not send a valid response. Regardless of the setting, if the peer sends a challenge during tunnel creation, a response will be sent.')
csOrionL2tpConfigTunnelHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelHelloInterval.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelHelloInterval.setDescription('This object defines the interval (in seconds) in which HELLO (or keep-alive) packets are to be sent to the tunnel peer. Setting this to 0 disables sending of HELLO packets')
csOrionL2tpConfigTunnelMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelMaxRetransmissions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelMaxRetransmissions.setDescription('This object defines the number of retransmissions which the tunnel will attempt before assuming that the peer is no longer responding.')
csOrionL2tpConfigTunnelMaxRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 30)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelMaxRetransmissionTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelMaxRetransmissionTimeout.setDescription('This object defines the maximum retransmission timeout interval in seconds which the tunnel will wait before retransmitting a control packet that has not been acknowledged.')
csOrionL2tpConfigTunnelRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelRWS.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelRWS.setDescription('This object defines the control channel receive window size. It specifies the maximum number of packets the tunnel peer can send without waiting for an acknowledgement from this peer.')
csOrionL2tpConfigTunnelEmptyTunnelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelEmptyTunnelTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigTunnelEmptyTunnelTimeout.setDescription('This object controls the time interval in seconds after which an alive but empty tunnel (i.e. a tunnel without sessions) will be torn down. Setting this to 0 will allow the empty tunnel to continue to exist until either the peer stops responding or the the tunnel is torn down by peer or the administrator.')
csOrionL2tpConfigSessionFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionFlowControl.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigSessionFlowControl.setDescription('This object will be used to control whether the peer will be requested to flow control its transmissions. Note that regardless of the setting, if the peer requests that this peer flow control its transmissions, that request will be honored. Session Flow Control was part of draft specifications but not part of the RFC. This object should be set to Enable only if all the peers are using draft implementations.')
csOrionL2tpConfigSessionRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionRWS.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigSessionRWS.setDescription('This object controls the size of the session receive window. It will be advertised to the peer during session setup if csOrionL2tpConfigSessionFlowControl is set to Enable. The value 0 has special significance. It indicates that the peer must include sequence numbers in payload packets but the peer need not flow control its transmissions. This can be used to force a peer that is non-RFC compliant to include sequence numbers in payload packets.')
csOrionL2tpConfigSessionTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionTxQueueSize.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigSessionTxQueueSize.setDescription("This object controls the size of the session-specific transmit queue. If the peer has requested flow control and the peer's session receive window is full, packets to be sent to that peer will be held in a queue waiting for the peer's receive window to open.")
csOrionL2tpConfigSessionPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigSessionPacketSequencing.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigSessionPacketSequencing.setDescription('This object determines whether or not session payload packets will be requested to be sent with sequence numbers from the tunnel peer.')
csOrionL2tpConfigPppConfigReqRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppConfigReqRetransmission.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppConfigReqRetransmission.setDescription('This object is identical to csOrionPppIfConfigReqRtx.')
csOrionL2tpConfigPppRestartTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppRestartTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppRestartTimeout.setDescription('This object is identical to csOrionPppIfTimeout.')
csOrionL2tpConfigPppTermReqRetransmission = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppTermReqRetransmission.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppTermReqRetransmission.setDescription('This object is identical to csOrionPppIfTerminateReqRtx.')
csOrionL2tpConfigPppAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppAuthProtocol.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppAuthProtocol.setDescription('This object is identical to csOrionPppIfConfigAuth.')
csOrionL2tpConfigPppReauthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppReauthPeriod.setDescription('This object is identical to csOrionPppIfReauth.')
csOrionL2tpConfigPppEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppEchoTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppEchoTimeout.setDescription('The echo timeout in seconds.')
csOrionL2tpConfigPppIpPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpConfigPppIpPoolName.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpConfigPppIpPoolName.setDescription('The name of this address pool. This is used to identify a specific address pool.')
csOrionL2tpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2), )
if mibBuilder.loadTexts: csOrionL2tpTunnelTable.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelTable.setDescription('The entries in this table are the L2TP tunnels that have been established with various peers.')
csOrionL2tpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionL2tpTunnelLocalId"))
if mibBuilder.loadTexts: csOrionL2tpTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelEntry.setDescription('Each entry represents a single L2TP tunnel established with a peer.')
csOrionL2tpTunnelLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionL2tpTunnelLocalId.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelLocalId.setDescription('Each tunnel is assigned a random locally unique identifier when the tunnel is created. The tunnel identifier can be used as an index for the tunnel table.')
csOrionL2tpTunnelMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxSessions.setDescription('This object defines the maximum sessions that can be established in this tunnel. NOTE : Not used at this time.')
csOrionL2tpTunnelAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelAuthentication.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelAuthentication.setDescription('This object controls the tunnel authentication. If set to Enable, a challenge will be sent to the peer during tunnel creation. The tunnel will be torn down if the peer does not send a valid response. Regardless of the setting, if the peer sends a challenge during tunnel creation, a response will be sent.')
csOrionL2tpTunnelHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelHelloInterval.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelHelloInterval.setDescription('This object defines the interval (in seconds) in which HELLO (or keep-alive) packets are to be sent to the tunnel peer. The value 0 indicates that sending of HELLO packets is disabled')
csOrionL2tpTunnelMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxRetransmissions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxRetransmissions.setDescription("This object defines the number of retransmission's which the tunnel will attempt before assuming that the peer is no longer responding.")
csOrionL2tpTunnelMaxRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxRetransmissionTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelMaxRetransmissionTimeout.setDescription('This object defines the maximum retransmission timeout interval in seconds which the tunnel will wait before retransmitting a control packet that has not been acknowledged.')
csOrionL2tpTunnelRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRWS.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelRWS.setDescription('This object defines the control channel receive window size. It specifies the maximum number of packets the tunnel peer can send without waiting for an acknowledgement from this peer.')
csOrionL2tpTunnelEmptyTunnelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelEmptyTunnelTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelEmptyTunnelTimeout.setDescription('This object controls the time interval in seconds after which an alive but empty tunnel (i.e. a tunnel without sessions) will be torn down. The value 0 indicates that the empty tunnel will continue to exist until either the peer stops responding or the the tunnel is torn down by peer or the administrator.')
csOrionL2tpTunnelUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelUpTime.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelUpTime.setDescription('This object indicates the number of seconds this tunnel has been up since it was established.')
csOrionL2tpTunnelRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteIpAddress.setDescription('This index identifies the IP Address of the peer.')
csOrionL2tpTunnelRemoteTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteTunnelId.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteTunnelId.setDescription('This object is the identifier assigned to the tunnel by the peer. This identifier is unique only for a given peer.')
csOrionL2tpTunnelRemoteUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteUdpPort.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteUdpPort.setDescription('This object identifies the UDP port that the peer is using for communication.')
csOrionL2tpTunnelRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteRWS.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteRWS.setDescription('This is the control receive window size advertised by the peer during tunnel creation. It specifies the number of control packets that can be sent to the peer without waiting for an acknowledgement.')
csOrionL2tpTunnelRemoteHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteHostname.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelRemoteHostname.setDescription('This is the name that the peer used to identify itself during tunnel creation')
csOrionL2tpTunnelActiveSessionsCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelActiveSessionsCount.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelActiveSessionsCount.setDescription('This is the number of sessions that are currently present within this tunnel')
csOrionL2tpTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 2, 1, 16), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatus.setDescription('The row status for this table. Used only for deleting this tunnel. IMPORTANT: (1) entries on this table are created when a tunnel is established by the peer. Therefore, creation of entry thru SNMP SET request is not allowed. (2) tunnel is usually torn down by the peer.')
csOrionL2tpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3), )
if mibBuilder.loadTexts: csOrionL2tpSessionTable.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionTable.setDescription('The entries in this table are the L2TP sessions established in a specific tunnel.')
csOrionL2tpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionL2tpTunnelLocalId"), (0, "COSINE-ORION-MIB", "csOrionL2tpSessionLocalId"))
if mibBuilder.loadTexts: csOrionL2tpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionEntry.setDescription('Each entry represents a single session object in a specific tunnel.')
csOrionL2tpSessionLocalId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionL2tpSessionLocalId.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionLocalId.setDescription('Each session is assigned a random locally unique tunnel-specific identifier when it is created. The session identifier can be used as an index to identify a particular session in a tunnel.')
csOrionL2tpSessionFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionFlowControl.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionFlowControl.setDescription('This object will be used to control whether the peer will be requested to flow control its transmissions. Note that regardless of the setting, if the peer requests that this peer flow control its transmissions, that request will be honored. Session Flow Control was part of draft specifications but not part of the RFC. This object should be set to Enable only if all the peers are using draft implementations.')
csOrionL2tpSessionRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRWS.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionRWS.setDescription('This object controls the size of the session receive window. It will be advertised to the peer during session setup if csOrionL2tpConfigSessionFlowControl is set to Enable. The value 0 has special significance. It indicates that the peer must include sequence numbers in payload packets but the peer need not flow control its transmissions. This can be used to force a peer that is non-RFC compliant to include sequence numbers in payload packets.')
csOrionL2tpSessionTxQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionTxQueueSize.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionTxQueueSize.setDescription("If the peer has requested flow control and the peer's session receive window is full, packets to be sent to that peer will be held in a queue waiting for the peer's receive window to open. This object controls the size of the session-specific transmit queue.")
csOrionL2tpSessionPacketSequencing = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionPacketSequencing.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionPacketSequencing.setDescription('This object determines whether or not session payload packets will be requested to be sent with sequence numbers from the tunnel peer.')
csOrionL2tpSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionUpTime.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionUpTime.setDescription('This object indicates the number of seconds this session has been up since established.')
csOrionL2tpSessionRemoteCallId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteCallId.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteCallId.setDescription('This object is the identifier assigned to the session by the peer. This identifier is unique only for a given peer in a specific tunnel.')
csOrionL2tpSessionRemoteFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteFlowControl.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteFlowControl.setDescription('This object indicates whether flow control is requested by the peer or not.')
csOrionL2tpSessionRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteRWS.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteRWS.setDescription('This is the session receive window size advertised by the peer during session creation. It specifies the number of payload packets that can be sent to the peer without waiting for an acknowledgement. If this is non-zero it means that the peer has requested flow control.')
csOrionL2tpSessionUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionUsername.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionUsername.setDescription('This is the name of the user on whose behalf the session was created.')
csOrionL2tpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionL2tpSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionRowStatus.setDescription('The row status for this table. Used only for deleting this session. IMPORTANT: (1) entries on this table are created when a session is established by the peer. Therefore, creation of entry thru SNMP SET request is not allowed. (2) the peer usually tears down the session.')
csOrionL2tpSessionLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionLocalIpAddress.setDescription('The IP address for this sesssion. It is dynamically assigned form the csOrionL2tpConfigPppIpPoolName.')
csOrionL2tpSessionRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 13), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionRemoteIpAddress.setDescription('The IP address on the other side of this sesssion.')
csOrionL2tpSessionCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lacIncoming", 1), ("lnsIncoming", 2), ("lacOutgoing", 3), ("lnsOutgoing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionCallType.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionCallType.setDescription('This object indicates the type of call and the role this tunnel peer is providing for this session. For example, lacIncoming(1) indicates that this tunnel peer is acting as a LAC and generated a Incoming-Call-Request to the tunnel peer (the LNS). Note that tunnel peers can be both LAC and LNS simultaneously.')
csOrionL2tpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sessionIdle", 1), ("sessionConnecting", 2), ("sessionEstablished", 3), ("sessionDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpSessionState.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpSessionState.setDescription('This object determines the current state of the session or call.')
csOrionLnsConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 4), )
if mibBuilder.loadTexts: csOrionLnsConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionLnsConfigTable.setDescription('This table contains general L2TP Network Server (LNS) configuration parameters.')
csOrionLnsConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionLnsConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionLnsConfigEntry.setDescription('Each entry represents a single LNS object for a Virtual Router. There is only one instance of LNS on a Virtual Router. This object is created along with an L2TP object when a VR is created.')
csOrionLnsConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("drain", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionLnsConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionLnsConfigAdminStatus.setDescription("Setting this object to 'disable' causes all tunnels to be immediately disconnected and no further tunnels to be either initiated or accepted. Setting this object to 'drain' will prevent any new tunnels and/or sessions to be either initiated or accepted but does NOT disconnect any active tunnels/sessions.")
csOrionLacConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 5), )
if mibBuilder.loadTexts: csOrionLacConfigTable.setStatus('current')
if mibBuilder.loadTexts: csOrionLacConfigTable.setDescription('This table contains general L2TP Network Server (LNS) configuration parameters.')
csOrionLacConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionLacConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionLacConfigEntry.setDescription('Each entry represents a single LAC object for a Virtual Router. There is only one instance of LAC on a Virtual Router. This object is created along with an L2TP object when a VR is created.')
csOrionLacConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("drain", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionLacConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionLacConfigAdminStatus.setDescription("Setting this object to 'disable' causes all tunnels to be immediately disconnected and no further tunnels to be either initiated or accepted. Setting this object to 'drain' will prevent any new tunnels and/or sessions to be either initiated or accepted but does NOT disconnect any active tunnels/sessions.")
csOrionTunnelSwitchTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6), )
if mibBuilder.loadTexts: csOrionTunnelSwitchTable.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTable.setDescription('to do...')
csOrionTunnelSwitchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTunnelSwitchClientName"))
if mibBuilder.loadTexts: csOrionTunnelSwitchEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchEntry.setDescription('to do...')
csOrionTunnelSwitchClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionTunnelSwitchClientName.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchClientName.setDescription('This object identifies the client name of the originating tunnel.')
csOrionTunnelSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("passThrough", 1), ("authenticate", 2))).clone('passThrough')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchMode.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchMode.setDescription('This object determines the switching action.')
csOrionTunnelSwitchRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchRowStatus.setDescription('.')
csOrionTunnelSwitchTargetTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7), )
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetTable.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetTable.setDescription('.')
csOrionTunnelSwitchTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTunnelSwitchClientName"), (0, "COSINE-ORION-MIB", "csOrionTunnelSwitchTargetIpAddress"))
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetEntry.setDescription('.')
csOrionTunnelSwitchTargetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetIpAddress.setDescription('This object identifies the IP address of the destination LNS.')
csOrionTunnelSwitchTargetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetPriority.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetPriority.setDescription('This object determines the priority of this target address. Priority value 1 being the highest.')
csOrionTunnelSwitchTargetMaxSession = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetMaxSession.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetMaxSession.setDescription('This object determines the maximum number of sessions that can be handled by this target address.')
csOrionTunnelSwitchTargetSessionCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetSessionCount.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetSessionCount.setDescription('This object keeps the count of the active sessions on this target address.')
csOrionTunnelSwitchTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionTunnelSwitchTargetRowStatus.setDescription('Row status for this table.')
csOrionL2tpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8), )
if mibBuilder.loadTexts: csOrionL2tpStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsTable.setDescription('The L2TP Status and Statistics table.')
csOrionL2tpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionL2tpStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsEntry.setDescription('An L2TP Stats entry. An entry in this table may correspond to a single endpoint or a group of tunnel endpoints.')
csOrionL2tpStatsTotalTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsTotalTunnels.setDescription('This object returns the total number of tunnels that have successfully reached the established state.')
csOrionL2tpStatsFailedTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsFailedTunnels.setDescription('This object returns the number of tunnels that failed to reach the established state.')
csOrionL2tpStatsFailedAuthentications = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsFailedAuthentications.setDescription('This object returns the number of failed tunnel connection attempts because the tunnel peer failed authentication.')
csOrionL2tpStatsActiveTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsActiveTunnels.setDescription('This object returns the number of tunnels that are currently active.')
csOrionL2tpStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsTotalSessions.setDescription('This object returns the total number of sessions that have successfully reached the established state.')
csOrionL2tpStatsFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsFailedSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsFailedSessions.setDescription('This object returns the number of sessions that failed to reach the established state.')
csOrionL2tpStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsActiveSessions.setDescription('This object returns the number of sessions that are currently active.')
csOrionL2tpStatsDrainingTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsDrainingTunnels.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsDrainingTunnels.setDescription('This object indicates if this L2TP is draining off sessions from all tunnels. This object will return no(2) when the domain is not draining sessions or after the last L2TP session has disconnected when the domain is in the draining state.')
csOrionL2tpStatsControlRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsControlRecvOctets.setDescription('This object returns the number of control channel octets received. NOTE : This is not currently supported. It will just return zero. [Alan 10/12/2000]')
csOrionL2tpStatsControlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsControlRecvPackets.setDescription('This object returns the number of control packets received.')
csOrionL2tpStatsControlSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlSendOctets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsControlSendOctets.setDescription('This object returns the number of control channel octets that were transmitted to tunnel endpoints. NOTE : This is not currently supported. It will just return zero. [Alan 10/12/2000]')
csOrionL2tpStatsControlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsControlSendPackets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsControlSendPackets.setDescription('This object returns the number of control packets that were transmitted to tunnel endpoints.')
csOrionL2tpStatsPayloadRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvOctets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvOctets.setDescription('This object returns the number of payload channel octets that were received.')
csOrionL2tpStatsPayloadRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvPackets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvPackets.setDescription('This object returns the number of payload packets that were received.')
csOrionL2tpStatsPayloadRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadRecvDiscards.setDescription('This object returns the number of received payload packets that were discarded.')
csOrionL2tpStatsPayloadSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadSendOctets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadSendOctets.setDescription('This object returns the number of payload channel octets that were transmitted to tunnel peers. NOTE : This is not currently supported. It will just return zero. [Alan 10/12/2000]')
csOrionL2tpStatsPayloadSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadSendPackets.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpStatsPayloadSendPackets.setDescription('This object returns the number of payload packets that were transmitted to tunnel peers.')
csOrionL2tpTunnelStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9), )
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsTable.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsTable.setDescription('The L2TP tunnel status and statistics table.')
csOrionL2tpTunnelStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionL2tpTunnelLocalId"))
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsEntry.setDescription('An L2TP tunnel interface stats entry.')
csOrionL2tpTunnelStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tunnelIdle", 1), ("tunnelConnecting", 2), ("tunnelEstablished", 3), ("tunnelDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsState.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsState.setDescription('This field contains the current state of the control tunnel.')
csOrionL2tpTunnelStatsTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsTotalSessions.setDescription('This object contains the total number of sessions that this tunnel has successfully connected through to its tunnel peer since this tunnel was created.')
csOrionL2tpTunnelStatsFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsFailedSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsFailedSessions.setDescription('This object contains the total number of sessions that were initiated but failed to reach the established phase. NOTE : This is not currently supported. It will just return zero. [Alan 10/12/2000]')
csOrionL2tpTunnelStatsActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpTunnelStatsActiveSessions.setDescription('This object contains the total number of sessions in the established state for this tunnel. NOTE : This is not currently supported. It will just return zero. [Alan 10/12/2000]')
csOrionL2tpInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 13, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionL2tpInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionL2tpInfoEnd.setDescription('End of this group. value undefined')
csOrionDsByteFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1))
csOrionExpFilterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2))
csOrionVrDsByteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1), )
if mibBuilder.loadTexts: csOrionVrDsByteFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterTable.setDescription("This table specifies a set of acl's to be applied to packets received by (and sent from) this virtual router. The first entry whose acl matches a packet causes the DS Byte field of the packet to be set to the value specified in the table entry. If no entry's acl matches the packet, the DS Byte field of the packet will be set to the value specified in csOrionVPNVRouterIpDsByte.")
csOrionVrDsByteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrDsByteFilterIndex"))
if mibBuilder.loadTexts: csOrionVrDsByteFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterEntry.setDescription('Each entry specifies whether packets satisfying a specific access list entry will have their DS Byte field set to the value indicated in the table entry.')
csOrionVrDsByteFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionVrDsByteFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterIndex.setDescription('The Index of this particular Packet Filter.')
csOrionVrDsByteFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterAclId.setDescription('The Id of an access list entry (from csOrionGenAclTable). All packets transmitted or received on any of the virtual interfaces on this virtual router that satisfy that access list entry are acted upon by this filter.')
csOrionVrDsByteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("setValue", 2))).clone('setValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterAction.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterAction.setDescription('The action performed by this filter.')
csOrionVrDsByteFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterValue.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterValue.setDescription('This object defines the values to be placed in the TypeOfService octet of each IP packet sent out or forwarded by the VR. The valid range covers both 7-bit configurations recommended in RFC 1349 (Precedence and TOS bits) and 6-bit configurations recommended in RFC 2474 (Differentiated Services). If the value selected is 256, the DsByte is not changed and packets are forwarded with their existing TypeOfService byte value.')
csOrionVrDsByteFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterDirection.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterDirection.setDescription('The direction of packets on which this filter is applied.')
csOrionVrDsByteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrDsByteFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrDsByteFilterRowStatus.setDescription('A row status type for this Table entry.')
csOrionViDsByteFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2), )
if mibBuilder.loadTexts: csOrionViDsByteFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterTable.setDescription("This table specifies a set of acl's to be applied to packets received over (or sent out) each the interfaces belonging to this virtual router. The first entry whose acl matches a packet causes the DS Byte field of the packet to be set to the value specified in the table entry. If no entry's acl matches the packet, the DS Byte field of the packet will be set to the value specified in csOrionVPNVRouterIpDsByte.")
csOrionViDsByteFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViDsByteFilterIndex"))
if mibBuilder.loadTexts: csOrionViDsByteFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterEntry.setDescription('Each filter specifies whether packets satisfying a specific access list entry are permitted or denied to be passed along their route.')
csOrionViDsByteFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViDsByteFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterIndex.setDescription('The Index of this particular Packet Filter.')
csOrionViDsByteFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterAclId.setDescription('The Id of an access list entry (from csOrionGenAclTable). All packets transmitted or received on this virtual interface that access list entry are acted upon by this filter.')
csOrionViDsByteFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ignore", 1), ("setValue", 2))).clone('setValue')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterAction.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterAction.setDescription('The action performed by this filter.')
csOrionViDsByteFilterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)).clone(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterValue.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterValue.setDescription('This object defines the values to be placed in the TypeOfService octet of each IP packet sent out or forwarded by the VR. The valid range covers both 7-bit configurations recommended in RFC 1349 (Precedence and TOS bits) and 6-bit configurations recommended in RFC 2474 (Differentiated Services). If the value selected is 256, the DsByte is not changed and packets are forwarded with their existing TypeOfService byte value.')
csOrionViDsByteFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("out", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterDirection.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterDirection.setDescription('The direction of packets on which this filter is applied.')
csOrionViDsByteFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViDsByteFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViDsByteFilterRowStatus.setDescription('A row status type for this Table entry.')
csOrionDsByteFilterInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionDsByteFilterInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionDsByteFilterInfoEnd.setDescription('End of this group. value undefined')
csExpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1), )
if mibBuilder.loadTexts: csExpFilterTable.setStatus('current')
if mibBuilder.loadTexts: csExpFilterTable.setDescription('This table is used to filter MPLS EXP bits.')
csExpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csExpFilterDirection"), (0, "COSINE-ORION-MIB", "csExpFilterMatchingExp"))
if mibBuilder.loadTexts: csExpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csExpFilterEntry.setDescription('An entry in this table is used to set the attributes for a matching EXP bits for a inbound/outbound direction for a VR.')
csExpFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: csExpFilterDirection.setStatus('current')
if mibBuilder.loadTexts: csExpFilterDirection.setDescription('The direction to filter. ')
csExpFilterMatchingExp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: csExpFilterMatchingExp.setStatus('current')
if mibBuilder.loadTexts: csExpFilterMatchingExp.setDescription('The EXP value to filter. ')
csExpFilterExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterExpValue.setStatus('current')
if mibBuilder.loadTexts: csExpFilterExpValue.setDescription('The EXP value to change to. ')
csExpFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterServiceCategory.setStatus('current')
if mibBuilder.loadTexts: csExpFilterServiceCategory.setDescription('The service category to use. ')
csExpFilterColorMeteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aware", 1), ("blind", 2))).clone('blind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterColorMeteringMode.setStatus('current')
if mibBuilder.loadTexts: csExpFilterColorMeteringMode.setDescription('Used to activate metering. ')
csExpFilterDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: csExpFilterDropPrecedence.setDescription('Used to specify the drop precedence to use. ')
csExpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: csExpFilterRowStatus.setDescription('A row status type for this table')
csExpFilterTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csExpFilterTableEnd.setStatus('current')
if mibBuilder.loadTexts: csExpFilterTableEnd.setDescription('End of this group. value undefined')
csExpFilterIfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3), )
if mibBuilder.loadTexts: csExpFilterIfTable.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfTable.setDescription('This table is used to filter MPLS EXP bits. ')
csExpFilterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csExpFilterIfDirection"), (0, "COSINE-ORION-MIB", "csExpFilterIfMatchingExp"))
if mibBuilder.loadTexts: csExpFilterIfEntry.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfEntry.setDescription('An entry in this table is used to set the attributes for a matching EXP bits for a inbound/outbound direction for a ')
csExpFilterIfDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2))))
if mibBuilder.loadTexts: csExpFilterIfDirection.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfDirection.setDescription('The direction to filter. ')
csExpFilterIfMatchingExp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: csExpFilterIfMatchingExp.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfMatchingExp.setDescription('The EXP value to filter. ')
csExpFilterIfExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 7)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfExpValue.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfExpValue.setDescription('The EXP value to set to. ')
csExpFilterIfServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ef", 1), ("af1", 2), ("af2", 3), ("af3", 4), ("af4", 5), ("be", 6), ("none", 7), ("ef-low", 8), ("ef-high", 9))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfServiceCategory.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfServiceCategory.setDescription('Used to assign service category. ')
csExpFilterIfColorMeteringMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("aware", 1), ("blind", 2))).clone('blind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfColorMeteringMode.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfColorMeteringMode.setDescription('Used to activate metering. ')
csExpFilterIfDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("red", 1), ("yellow", 2), ("green", 3), ("none", 4))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfDropPrecedence.setDescription('Used to assign drop precedence. ')
csExpFilterIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 2, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csExpFilterIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: csExpFilterIfRowStatus.setDescription('A row status type for this table')
csOrionQosInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 14, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQosInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionQosInfoEnd.setDescription('End of this group. value undefined')
csOrionQoSMeterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1), )
if mibBuilder.loadTexts: csOrionQoSMeterProfileTable.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileTable.setDescription('This table specifies the template of the metering control block. This template can be applied to any of the metering contexts under QoS of VR and VI')
csOrionQoSMeterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionQoSMeterProfileName"))
if mibBuilder.loadTexts: csOrionQoSMeterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileEntry.setDescription('Each entry specifies unique Metering profile')
csOrionQoSMeterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: csOrionQoSMeterProfileName.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileName.setDescription('The Index of this table.')
csOrionQoSMeterProfileCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileCBS.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileCBS.setDescription('Committed Burst Size')
csOrionQoSMeterProfilePBS = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfilePBS.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfilePBS.setDescription('Peak Burst Size')
csOrionQoSMeterProfileCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileCIR.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileCIR.setDescription('Committed Information Rate ')
csOrionQoSMeterProfileMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileMIR.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileMIR.setDescription('Maximum Information Rate ')
csOrionQoSMeterProfileDropPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("red", 2), ("redYellow", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileDropPrecedence.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileDropPrecedence.setDescription("Drop option. If set to 'red' it will drop incoming red packets belonging to this ACL group. If set to 'redYellow' it will drop both red and yellow packets.")
csOrionQoSMeterProfileColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("colorBlind", 1), ("colorAware", 2))).clone('colorBlind')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileColorMode.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileColorMode.setDescription('Color marker metering mode.')
csOrionQoSMeterProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfileStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfileStatus.setDescription('Creates or deletes the profile')
csOrionQoSMeterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2), )
if mibBuilder.loadTexts: csOrionQoSMeterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterTable.setDescription('This table specifies the metering control block for each of the traffic flows')
csOrionQoSMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionBladeSlotLocation"), (0, "COSINE-ORION-MIB", "csOrionEngineIndex"), (0, "COSINE-ORION-MIB", "csOrionQoSMeterName"))
if mibBuilder.loadTexts: csOrionQoSMeterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterEntry.setDescription('Metering context entries')
csOrionQoSMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 1), DisplayString())
if mibBuilder.loadTexts: csOrionQoSMeterName.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterName.setDescription('Name of the metering control block(MCB) - index to this table')
csOrionQoSMeterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterProfile.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterProfile.setDescription('Name of the metering profile to be applied to this MCB')
csOrionQoSMeterTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterTotalPackets.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterTotalPackets.setDescription('Total number of packets metered for this flow')
csOrionQoSMeterRedByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterRedByteCount.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterRedByteCount.setDescription('Number of red bytes on this flow.')
csOrionQoSMeterYellowByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterYellowByteCount.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterYellowByteCount.setDescription('Number of yellow bytes on this flow.')
csOrionQoSMeterGreenByteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterGreenByteCount.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterGreenByteCount.setDescription('Number of green bytes on this flow.')
csOrionQoSMeterAclList = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionQoSMeterAclList.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterAclList.setDescription('ACLs that are associated with the metering control block')
csOrionQoSMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionQoSMeterStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionQoSMeterStatus.setDescription('Creates or deletes the profile')
csOrionVrQoSFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3), )
if mibBuilder.loadTexts: csOrionVrQoSFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterTable.setDescription('This table specifies the metering control block for each of the traffic flows')
csOrionVrQoSFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrQoSFilterIndex"), (0, "COSINE-ORION-MIB", "csOrionVrQoSFilterAclId"))
if mibBuilder.loadTexts: csOrionVrQoSFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterEntry.setDescription('Metering context entries')
csOrionVrQoSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionVrQoSFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterIndex.setDescription('index to this table.')
csOrionVrQoSFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionVrQoSFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterAclId.setDescription('The ACL id is the index to this table. Prior to using this, the ACL with index equal to this object value must be created')
csOrionVrQoSFilterMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrQoSFilterMeterName.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterMeterName.setDescription('This specifies which of the metering profile(template) to apply to this metering block')
csOrionVrQoSFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ef-guaranteed", 1), ("ef", 2), ("af1", 3), ("af2", 4), ("af3", 5), ("af4", 6), ("be", 7))).clone('be')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrQoSFilterServiceCategory.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterServiceCategory.setDescription('Priority with which the traffic is sent out')
csOrionVrQoSFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionVrQoSFilterStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionVrQoSFilterStatus.setDescription('Creates or deletes the profile')
csOrionViQoSFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4), )
if mibBuilder.loadTexts: csOrionViQoSFilterTable.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterTable.setDescription('This table specifies the metering control block for each of the traffic flows')
csOrionViQoSFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csOrionViQoSFilterIndex"), (0, "COSINE-ORION-MIB", "csOrionViQoSFilterAclId"))
if mibBuilder.loadTexts: csOrionViQoSFilterEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterEntry.setDescription('Metering context entries')
csOrionViQoSFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViQoSFilterIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterIndex.setDescription('index to this table.')
csOrionViQoSFilterAclId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionViQoSFilterAclId.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterAclId.setDescription('The ACL id is the index to this table. Prior to using this, the ACL with index equal to this object value must be created')
csOrionViQoSFilterMeterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViQoSFilterMeterName.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterMeterName.setDescription('This specifies which of the metering profile(template) to apply to this metering block')
csOrionViQoSFilterServiceCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ef-guaranteed", 1), ("ef", 2), ("af1", 3), ("af2", 4), ("af3", 5), ("af4", 6), ("be", 7))).clone('be')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViQoSFilterServiceCategory.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterServiceCategory.setDescription('Priority with which the traffic is sent out')
csOrionViQoSFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionViQoSFilterStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionViQoSFilterStatus.setDescription('Creates or deletes the profile')
csOrionMeterEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 22, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMeterEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionMeterEnd.setDescription('End of this group. value undefined')
csPppoeAcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1))
csPppoeSession = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2))
csPppoeStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3))
csPppoeAcIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1), )
if mibBuilder.loadTexts: csPppoeAcIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigTable.setDescription('PPPoE Access Concentrators in given sub-interface (of ATM or FR).')
csPppoeAcIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPppoeAcIfSlotIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfModuleIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfPortIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfChannelIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfSubIfIndex"))
if mibBuilder.loadTexts: csPppoeAcIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigEntry.setDescription('This list contains PPPoE Access Concentrator Servers.')
csPppoeAcIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfSlotIndex.setDescription('This object identifies the blade to which this instance of AC is created.')
csPppoeAcIfModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfModuleIndex.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfModuleIndex.setDescription('This object identifies the module of the blade to which this instance of AC is created.')
csPppoeAcIfPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfPortIndex.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfPortIndex.setDescription('This object identifies the port in the blade csPppoeAcIfSlotIndex to which this instance of AC is created.')
csPppoeAcIfChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfChannelIndex.setDescription('This object identifies the channel number.')
csPppoeAcIfSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: csPppoeAcIfSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfSubIfIndex.setDescription('This object identifies the sub-if number.')
csPppoeAcIfConfigMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64000)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigMaxSessions.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigMaxSessions.setDescription('Maximum sesions that it can accepted on this AC.')
csPppoeAcIfConfigMaxSessionsPerHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigMaxSessionsPerHost.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigMaxSessionsPerHost.setDescription('Maximum number of sessions that this AC can accept from a given host.')
csPppoeAcIfConfigTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigTotalSessions.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigTotalSessions.setDescription('Total Number of sessions established with this AC subjecting to maximum of csPppoeAcIfConfigMaxSessions.')
csPppoeAcIfConfigTotalActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigTotalActiveSessions.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigTotalActiveSessions.setDescription('Total Number of active sessions in this AC.')
csPppoeAcIfConfigPortEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigPortEthernetAddress.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigPortEthernetAddress.setDescription('This object conatins the MAC Address of this PPPoE AC.')
csPppoeAcIfConfigVolunteerServiceAdvertising = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigVolunteerServiceAdvertising.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigVolunteerServiceAdvertising.setDescription("If this object contains 'enable' then it advertise service profiles in PADO packets")
csPppoeAcIfConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigName.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigName.setDescription('This object conatins the name of this PPPoE AC.')
csPppoeAcIfConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigAdminStatus.setDescription('This object is used to enable or disable this PPPoE AC.')
csPppoeAcIfConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 14), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigOperStatus.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigOperStatus.setDescription('This object contains operational status of PPPoE AC. This object value depends on operational status of corresponding underneath interface.')
csPppoeAcIfConfigServiceTemplateProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigServiceTemplateProfile.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigServiceTemplateProfile.setDescription('This object contains service template, a list of connection profiles, serves the purpose of service name concept in PPPOE AC.')
csPppoeConfigPppIfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chapmd5", 3), ("mschapv1Server", 4), ("mschapv2Server", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeConfigPppIfAuth.setStatus('current')
if mibBuilder.loadTexts: csPppoeConfigPppIfAuth.setDescription('The type of authentication used by PPP over pppoe sessions on this PPPoE AC server.')
csPppoeConfigPppIfEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeConfigPppIfEchoTimeout.setStatus('current')
if mibBuilder.loadTexts: csPppoeConfigPppIfEchoTimeout.setDescription('The echo timeout (keepalive) in seconds.')
csPppoeAcIfConfigEvLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 18), EvLogLevel().clone('major')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigEvLogLevel.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigEvLogLevel.setDescription('This object is used to set the level for details for event logs for PPPoE AC. Events with level higher than this object will not be logged. ')
csPppoeAcIfConfigEvLogArea = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 1, 1, 19), EvLogArea().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csPppoeAcIfConfigEvLogArea.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigEvLogArea.setDescription('This object is used to set the area of event logs for ATM Port. This value will not be applied to VCCs. Events which area is not specified in this object will not be logged.')
csPppoeAcIfConfigTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfConfigTableEnd.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfConfigTableEnd.setDescription('End of this group. value undefined')
csPppoeSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1), )
if mibBuilder.loadTexts: csPppoeSessionTable.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionTable.setDescription('This is the list of all PPPoE sessions in a given PPPoE Access Concentrator Server.')
csPppoeSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPppoeAcIfSlotIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfModuleIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfPortIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfChannelIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfSubIfIndex"), (0, "COSINE-ORION-MIB", "csPppoeSessionId"))
if mibBuilder.loadTexts: csPppoeSessionEntry.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionEntry.setDescription('This list contains PPPoE Sessions in a given Access Concentrator Server.')
csPppoeSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: csPppoeSessionId.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionId.setDescription('This object contains the session identifier for this session as assigned by the PPPoE AC in the PADS message.')
csPppoeSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionUserName.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionUserName.setDescription('This object contains the user name for this session.')
csPppoeSessionOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 3), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionOperStatus.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionOperStatus.setDescription('This object contains the operational status for this session.')
csPppoeSessionPeerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionPeerAddress.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionPeerAddress.setDescription('This object contains the MAC address for this session peer.')
csPppoeSessionServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionServiceName.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionServiceName.setDescription('This object contains the service name for which this session is established.')
csPppoeSessionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionDuration.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionDuration.setDescription('This object contains the duration for this session since its establishment.')
csPppoeSessionIPPoolNameInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionIPPoolNameInUse.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionIPPoolNameInUse.setDescription('This object contains the IP Address Pool Name which is used to dynamically allocate IP Addresses.')
csPppoeSessionServiceVPN = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionServiceVPN.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionServiceVPN.setDescription('This object contains the VPN number in which this PPPoE-Session is being served.')
csPppoeSessionServiceVR = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionServiceVR.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionServiceVR.setDescription('This object contains the VR Identifier in which this PPPoE Session is Served.')
csPppoeSessionReceivedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceivedPkts.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionReceivedPkts.setDescription('This object contains the number of session packets received by this PPPoE Session.')
csPppoeSessionReceivedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceivedOctets.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionReceivedOctets.setDescription('This object contains the number of session octets received by this PPPoE Session.')
csPppoeSessionTranmittedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTranmittedPkts.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionTranmittedPkts.setDescription('This object contains the number of session packets transmitted by this PPPoE Session.')
csPppoeSessionTransmittedOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTransmittedOctets.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionTransmittedOctets.setDescription('This object contains the number of session octets transmitted by this PPPoE Session.')
csPppoeSessionReceiveOperDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceiveOperDown.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionReceiveOperDown.setDescription('This object contains the number of session packets received by this PPPoE Session from its peer while its operational status is down.')
csPppoeSessionTransmitOperDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTransmitOperDown.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionTransmitOperDown.setDescription('This object contains the number of session packets received for to transmit to peer by this PPPoE Session.')
csPppoeSessionReceivedErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionReceivedErrors.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionReceivedErrors.setDescription('This object contains the number of session packets received and having protocol header errors.')
csPppoeSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csPppoeSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionRowStatus.setDescription('The row status for this table. Used only for deleting this session. IMPORTANT: (1) entries on this table are created when a session is established. Therefore, creation of entry thru SNMP SET Request is not allowed. (2) session is usually torn down by the peer.')
csPppoeSessionTableEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeSessionTableEnd.setStatus('current')
if mibBuilder.loadTexts: csPppoeSessionTableEnd.setDescription('End of this group. value undefined')
csPppoeAcIfStatTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1), )
if mibBuilder.loadTexts: csPppoeAcIfStatTable.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatTable.setDescription('The PPPoE Access Concentrators statistics counter table.')
csPppoeAcIfStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csPppoeAcIfSlotIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfModuleIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfPortIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfChannelIndex"), (0, "COSINE-ORION-MIB", "csPppoeAcIfSubIfIndex"))
if mibBuilder.loadTexts: csPppoeAcIfStatEntry.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatEntry.setDescription('A set of statistics for a single PPPoE Access Concentrator.')
csPppoeAcIfStatPADIReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADIReceive.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADIReceive.setDescription('This object contains the number of PADI received by this PPPoE AC.')
csPppoeAcIfStatPADIReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADIReject.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADIReject.setDescription('This object contains the number of PADI discarded by this PPPoE AC.')
csPppoeAcIfStatPADRReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADRReceive.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADRReceive.setDescription('This object contains the number of PADR received by this PPPoE AC.')
csPppoeAcIfStatPADRReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADRReject.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADRReject.setDescription('This object contains the number of PADR discarded by this PPPoE AC.')
csPppoeAcIfStatPADOTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADOTransmit.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADOTransmit.setDescription('This object contains the number of PADO transmitted by this PPPoE AC.')
csPppoeAcIfStatPADSTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADSTransmit.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADSTransmit.setDescription('This object contains the number of PADS transmitted by this PPPoE AC.')
csPppoeAcIfStatPADTReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADTReceive.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADTReceive.setDescription('This object contains the number of PADT received by this PPPoE AC.')
csPppoeAcIfStatPADTTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPADTTransmit.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPADTTransmit.setDescription('This object contains the number of PADT transmitted by this PPPoE AC.')
csPppoeAcIfStatGenericErrorReceive = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatGenericErrorReceive.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatGenericErrorReceive.setDescription('This object contains the number of PPPoE Generic-Error tags received by this PPPoE AC.')
csPppoeAcIfStatGenericErrorTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatGenericErrorTransmit.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatGenericErrorTransmit.setDescription('This object contains the number of PPPoE Generic-Error tags transmitted by this PPPoE AC.')
csPppoeAcIfStatMalformedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatMalformedPkts.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatMalformedPkts.setDescription('This object contains the number of malformed packets received by this PPPoE AC.')
csPppoeAcIfStatServiceNameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatServiceNameErrors.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatServiceNameErrors.setDescription('This object contains the number of PPPoE Service-Name-Error tags received/transmitted by this PPPoE AC.')
csPppoeAcIfStatACSystemErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatACSystemErrors.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatACSystemErrors.setDescription('This object contains the number of PPPoE AC-System-Error tags received/transmitted by this PPPoE AC.')
csPppoeAcIfStatPppAuthFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatPppAuthFails.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatPppAuthFails.setDescription('This object contains the number of PPP authentication failures for sessions created on PPPoE AC.')
csPppoeAcIfStatAccessVRFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 3, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csPppoeAcIfStatAccessVRFails.setStatus('current')
if mibBuilder.loadTexts: csPppoeAcIfStatAccessVRFails.setDescription('This object contains the number of failures while contacting Access VR for service names on PPPoE AC.')
csOrionPpoeInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 17, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPpoeInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionPpoeInfoEnd.setDescription('End of this group. value undefined')
csOrionMlpppBundleTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1), )
if mibBuilder.loadTexts: csOrionMlpppBundleTable.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleTable.setDescription('This table contains information about PPP multilink bundles.')
csOrionMlpppBundleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionMlpppBundleSlot"), (0, "COSINE-ORION-MIB", "csOrionMlpppBundleIndex"))
if mibBuilder.loadTexts: csOrionMlpppBundleEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleEntry.setDescription('Each entry represents a PPP multilink bundle.')
csOrionMlpppBundleSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: csOrionMlpppBundleSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleSlot.setDescription('The slot on which this bundle is to be created. This value must be specified at creation and, henceforth, cannot be changed.')
csOrionMlpppBundleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csOrionMlpppBundleIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleIndex.setDescription('The index associated with this PPP multilink bundle.')
csOrionMlpppBundleMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(8)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleMaxLinks.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleMaxLinks.setDescription('The maximum number of links that can be configured to be part of this PPP multilink bundle.')
csOrionMlpppBundleQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleQueueSize.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleQueueSize.setDescription("The maximum size of this bundle's re-sequencing queue.")
csOrionMlpppBundleFragmentsPerPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleFragmentsPerPacket.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleFragmentsPerPacket.setDescription('The number of fragments per packet.')
csOrionMlpppBundleReorderTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 10000)).clone(3000)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleReorderTimeout.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleReorderTimeout.setDescription('The configured reorder timeout value for this bundle, expressed in milliseconds.')
csOrionMlpppBundleTxMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleTxMRRU.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleTxMRRU.setDescription('The maximum receive reconstructed unit in the transmit direction.')
csOrionMlpppBundleRxMRRU = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleRxMRRU.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleRxMRRU.setDescription('The maximum receive reconstructed unit in the receive direction.')
csOrionMlpppBundleEventLogLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 0), ("veryLow", 1), ("low", 2), ("medium", 3), ("high", 4), ("veryHigh", 5))).clone('off')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleEventLogLevel.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleEventLogLevel.setDescription('The desired level of event logging for this bundle.')
csOrionMlpppBundleAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleAdminStatus.setDescription('The desired state of the bundle.')
csOrionMlpppBundleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 11), OperStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleOperStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleOperStatus.setDescription('The actual of the bundle.')
csOrionMlpppBundleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleRowStatus.setDescription('This object is used to create and delete PPP multilink bundles.')
csOrionMlpppBundleActiveLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleActiveLinks.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleActiveLinks.setDescription('The number of active links in this bundle.')
csOrionMlpppBundlePacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundlePacketsSent.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundlePacketsSent.setDescription('The number of packets sent on this bundle.')
csOrionMlpppBundlePacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundlePacketsReceived.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundlePacketsReceived.setDescription('The number of packets received on this bundle.')
csOrionMlpppBundleBytesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleBytesSent.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleBytesSent.setDescription('The number of bytes sent on this bundle.')
csOrionMlpppBundleBytesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppBundleBytesReceived.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleBytesReceived.setDescription('The number of bytes received on this bundle.')
csOrionMlpppBundleSiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppBundleSiteName.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppBundleSiteName.setDescription('A textual string containing the site name of this Mlppp Bundle interface.')
csOrionMlpppLinkTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2), )
if mibBuilder.loadTexts: csOrionMlpppLinkTable.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkTable.setDescription('This table contains information about PPP multilink links.')
csOrionMlpppLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionMlpppBundleSlot"), (0, "COSINE-ORION-MIB", "csOrionMlpppBundleIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkSlotIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkPortIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkChannelIndex"), (0, "COSINE-ORION-MIB", "csOrionMlpppLinkSubIfIndex"))
if mibBuilder.loadTexts: csOrionMlpppLinkEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkEntry.setDescription('Each entry represents a PPP multilink link.')
csOrionMlpppLinkSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26)))
if mibBuilder.loadTexts: csOrionMlpppLinkSlotIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkSlotIndex.setDescription('The slot of this PPP multilink link.')
csOrionMlpppLinkPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: csOrionMlpppLinkPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkPortIndex.setDescription('The port of this PPP multilink link.')
csOrionMlpppLinkChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512)))
if mibBuilder.loadTexts: csOrionMlpppLinkChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkChannelIndex.setDescription('Channel number of this link.')
csOrionMlpppLinkSubIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: csOrionMlpppLinkSubIfIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkSubIfIndex.setDescription('The sub-interface number of this link.')
csOrionMlpppLinkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionMlpppLinkRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppLinkRowStatus.setDescription('This object is used to add and remove PPP multilink links from a bundle.')
csOrionMlpppInfoEnd = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 6, 16, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionMlpppInfoEnd.setStatus('current')
if mibBuilder.loadTexts: csOrionMlpppInfoEnd.setDescription('End of this group. value undefined')
csOrionPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1), )
if mibBuilder.loadTexts: csOrionPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyTable.setDescription('A table for power supplies.')
csOrionPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionPowerSupplyIndex"))
if mibBuilder.loadTexts: csOrionPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyEntry.setDescription('An entry containing power supply state information.')
csOrionPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyIndex.setDescription('An index for a power supply table.')
csOrionPowerSupplyInputPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionPowerSupplyInputPowerState.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyInputPowerState.setDescription("A power supply's input power state.")
csOrionPowerSupplyOutputPowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionPowerSupplyOutputPowerState.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyOutputPowerState.setDescription("A power supply's output power state.")
csOrionFanTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2), )
if mibBuilder.loadTexts: csOrionFanTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTable.setDescription('A table for fans.')
csOrionFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFanTray"), (0, "COSINE-ORION-MIB", "csOrionFanIndex"))
if mibBuilder.loadTexts: csOrionFanEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFanEntry.setDescription('An entry containing management information applicable to fans.')
csOrionFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionFanIndex.setDescription('An index for a fan table.')
csOrionFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionFanState.setStatus('current')
if mibBuilder.loadTexts: csOrionFanState.setDescription('A fan operational state.')
csOrionFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanSpeed.setStatus('current')
if mibBuilder.loadTexts: csOrionFanSpeed.setDescription('A fan speed (in RPS: Revolutions Per Second).')
csOrionPowerSupplyHWRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyHWRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyHWRevision.setDescription('The hardward revision information of the power supply controller.')
csOrionPowerSupplyFWMajorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWMajorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyFWMajorRevision.setDescription('The major firmware revision information of the power supply controller.')
csOrionPowerSupplyFWMinorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWMinorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyFWMinorRevision.setDescription('The minor firmware revision information of the power supply controller.')
csOrionPowerSupplyFWRelease = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWRelease.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyFWRelease.setDescription('The firmware release of the power supply controller.')
csOrionPowerSupplyFWReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: csOrionPowerSupplyFWReleaseDate.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyFWReleaseDate.setDescription('A textual string containing information about the date of the firmware release.')
csOrionPowerSupplyEventTrapGeneration = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionPowerSupplyEventTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyEventTrapGeneration.setDescription('This object is used to enable/disable the generation of events and traps of the power supply.')
csOrionFanTrayControlTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5), )
if mibBuilder.loadTexts: csOrionFanTrayControlTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayControlTable.setDescription('There is a controller for each of the fan tray. This table contains entries of the hardware and firmware revision information and entries used to enable/disable the event/trap generation.')
csOrionFanTrayControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFanTray"))
if mibBuilder.loadTexts: csOrionFanTrayControlEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayControlEntry.setDescription('An entry containing PIC H/W and F/W Revision information applicable to fan tray controllers.')
csOrionFanTray = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lowerOrFront", 1), ("upperOrRear", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTray.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTray.setDescription('Identifies the upper or lower fan tray.')
csOrionFanTrayHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayHWRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayHWRevision.setDescription("Fan tray's hardward Revision information")
csOrionFanTrayFWMajorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWMajorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayFWMajorRevision.setDescription("Fan tray's firmware major Revision information.")
csOrionFanTrayFWMinorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWMinorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayFWMinorRevision.setDescription("Fan tray's firmware minor Revision information.")
csOrionFanTrayFWRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWRelease.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayFWRelease.setDescription('The firmware release of the fan tray controller.')
csOrionFanTrayFWReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionFanTrayFWReleaseDate.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayFWReleaseDate.setDescription('A textual string containing information about the date of the firmware release.')
csOrionFanTrayEventTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionFanTrayEventTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTrayEventTrapGeneration.setDescription("Fan tray's firmware minor Revision information.")
csOrionFanTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4), )
if mibBuilder.loadTexts: csOrionFanTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTempSensorTable.setDescription('A table for fans.')
csOrionFanTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionFanTray"), (0, "COSINE-ORION-MIB", "csOrionFanIndex"))
if mibBuilder.loadTexts: csOrionFanTempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTempSensorEntry.setDescription('An entry containing management information applicable to fans.')
csOrionFanTempSensorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2))))
if mibBuilder.loadTexts: csOrionFanTempSensorState.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTempSensorState.setDescription("the temperature sensor's operational status of a fan.")
csOrionFanTempSensorTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-67, 257)))
if mibBuilder.loadTexts: csOrionFanTempSensorTemperature.setStatus('current')
if mibBuilder.loadTexts: csOrionFanTempSensorTemperature.setDescription('A temperature (in Fahrenheit or Celsius) of the Fan.')
csOrionTempAirFlowCardTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1), )
if mibBuilder.loadTexts: csOrionTempAirFlowCardTable.setStatus('current')
if mibBuilder.loadTexts: csOrionTempAirFlowCardTable.setDescription('A table for temperature air flow card.')
csOrionTempAirFlowCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionAirFlowCardIndex"))
if mibBuilder.loadTexts: csOrionTempAirFlowCardEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionTempAirFlowCardEntry.setDescription('An entry containing management information applicable to temperature air flow card.')
csOrionAirFlowCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("front", 1), ("rear", 2))))
if mibBuilder.loadTexts: csOrionAirFlowCardIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardIndex.setDescription('Identifies the temperature air flow card.')
csOrionAirFlowCardHWRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardHWRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardHWRevision.setDescription("The air flow card's hardward Revision information.")
csOrionAirFlowCardFWMajorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWMajorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardFWMajorRevision.setDescription("The air flow card's firmwar major Revision information.")
csOrionAirFlowCardFWMinorRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWMinorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardFWMinorRevision.setDescription("The air flow card's firmware minor Revision information.")
csOrionAirFlowCardFWRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWRelease.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardFWRelease.setDescription("The air flow card's firmware release information.")
csOrionAirFlowCardFWReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardFWReleaseDate.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardFWReleaseDate.setDescription('A textual string containing information about the date of the firmwre release.')
csOrionAirFlowCardTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-67, 257))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardTemperature.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardTemperature.setDescription("The air flow card's temperature.")
csOrionAirFlowCardTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("not-ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionAirFlowCardTempState.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardTempState.setDescription('An inlet air flow temperature sensor operational state.')
csOrionAirFlowCardEventTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionAirFlowCardEventTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: csOrionAirFlowCardEventTrapGeneration.setDescription("The air flow card's trap/event generation status.")
csOrionStatusPanelHWRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelHWRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelHWRevision.setDescription('The hardward revision information of the status panel controller.')
csOrionStatusPanelFWMajorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelFWMajorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelFWMajorRevision.setDescription('The major firmware revision information of the status panel controller.')
csOrionStatusPanelFWMinorRevision = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelFWMinorRevision.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelFWMinorRevision.setDescription('The minor firmware revision information of the status panel controller.')
csOrionStatusPanelFWRelease = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: csOrionStatusPanelFWRelease.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelFWRelease.setDescription('The firmware release of the power supply controller.')
csOrionStatusPanelFWReleaseDate = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 7, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8)))
if mibBuilder.loadTexts: csOrionStatusPanelFWReleaseDate.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelFWReleaseDate.setDescription('A textual string containing information about the date of the firmware release.')
csOrionBackplaneUtilization = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionBackplaneUtilization.setStatus('current')
if mibBuilder.loadTexts: csOrionBackplaneUtilization.setDescription('A % of utilization for backplane.')
csOrionSnmpGenTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 1), )
if mibBuilder.loadTexts: csOrionSnmpGenTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpGenTable.setDescription('This table controls the activation of the snmp agent on a particular Virtual Router. Note, only one agent instance can be enabled at a time.')
csOrionSnmpGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionSnmpGenEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpGenEntry.setDescription('Each entry represents a single Virtual Router.')
csOrionSnmpGenStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSnmpGenStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpGenStatus.setDescription("This object is used to enable/disable the snmp server on this Virtual Router. If this object is disabled, the snmp server will not respond to any snmp requests and it won't send any traps.")
csOrionSnmpCommTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2), )
if mibBuilder.loadTexts: csOrionSnmpCommTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpCommTable.setDescription('This table contains all the community strings recognized by the snmp server on this device.')
csOrionSnmpCommEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionSnmpCommString"), (0, "COSINE-ORION-MIB", "csOrionSnmpCommAddr"))
if mibBuilder.loadTexts: csOrionSnmpCommEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpCommEntry.setDescription('Each entry represents a single community string.')
csOrionSnmpCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 80)))
if mibBuilder.loadTexts: csOrionSnmpCommString.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpCommString.setDescription('This object identifies one community string recognized by the snmp server on this device.')
csOrionSnmpCommAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionSnmpCommAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpCommAddr.setDescription('This object identifies the Ip Address of a manager allowed to use this community string.')
csOrionSnmpCommPriv = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("readOnly", 1), ("readWrite", 2))).clone('readOnly')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSnmpCommPriv.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpCommPriv.setDescription('This object indicates the privilege level of this community string. If the value of this object is readOnly(1), this snmp server will respond only to GET, GETNEXT, and GETBULK requests from snmp managers using this community string. If this value of this object is readWrite(2), this snmp server will respond to any requests from snmp managers using this community string.')
csOrionSnmpCommRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionSnmpCommRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpCommRowStatus.setDescription('A row status type for the Snmp Community Table.')
csOrionSnmpAgentErrorTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3), )
if mibBuilder.loadTexts: csOrionSnmpAgentErrorTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorTable.setDescription('This table keeps track of the errors that happened when a NMS node tried to a SET operation. Since standard error codes returned by the SNMP response PDU was not comprehensive enough to indicate the actual problem, this table evolved. The NMS node has to keep the request-id field and the UDP port of the SET PDU that is being sent to the Orion SNMP agent. If the response-PDU corresponding to that SET returns an error, NMS node can browse this table with the saved request-id of the failed SET-PDU to get more information about the error.')
csOrionSnmpAgentErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionSnmpAgentErrorNmsIpAddress"), (0, "COSINE-ORION-MIB", "csOrionSnmpAgentErrorNmsPort"), (0, "COSINE-ORION-MIB", "csOrionSnmpAgentErrorNmsRequestId"))
if mibBuilder.loadTexts: csOrionSnmpAgentErrorEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorEntry.setDescription('Each entry represent an error associated with a set operation by a management station. The Orion SNMP agent keeps track of the last 25 instances of such errors. Older entries give way for new entries. ')
csOrionSnmpAgentErrorNmsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsIpAddress.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsIpAddress.setDescription('IP address of the management station which made an unsuccessful SET operation.')
csOrionSnmpAgentErrorNmsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsPort.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsPort.setDescription('The UDP port of the SNMP SET request which resulted in an error.')
csOrionSnmpAgentErrorNmsRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsRequestId.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorNmsRequestId.setDescription('The requst-id field of the SNMP SET request which resulted in an error.')
csOrionSnmpAgentErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorCode.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorCode.setDescription('The error code set when the SNMP SET request resulted in an error.')
csOrionSnmpAgentErrorMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionSnmpAgentErrorMsg.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpAgentErrorMsg.setDescription('Error message corresponding to the SET operation.')
csOrionSnmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 1), )
if mibBuilder.loadTexts: csOrionSnmpTrapTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpTrapTable.setDescription('This table controls the generation of traps by this Virtual Router.')
csOrionSnmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionSnmpTrapEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpTrapEntry.setDescription('Each entry represents a single Virtual Router.')
csOrionSnmpTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSnmpTrapStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSnmpTrapStatus.setDescription('This object is used to control the trap function for the snmp server on this device. If the value of this object is enable(1), the snmp server will send traps. If the value is disable(2), the snmp server will not send traps.')
csOrionTrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2), )
if mibBuilder.loadTexts: csOrionTrapReceiverTable.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverTable.setDescription('The trap receiver table (0 to 25 entries). This table lists the addresses of stations that should receive trap messages from this entity when an exception condition occurs.')
csOrionTrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionTrapReceiverComm"), (0, "COSINE-ORION-MIB", "csOrionTrapReceiverAddr"))
if mibBuilder.loadTexts: csOrionTrapReceiverEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverEntry.setDescription('A trap receiver table entry.')
csOrionTrapReceiverComm = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: csOrionTrapReceiverComm.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverComm.setDescription('Community string used for trap messages to this trap receiver.')
csOrionTrapReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: csOrionTrapReceiverAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverAddr.setDescription(' IP address for trap receiver.')
csOrionTrapReceiverRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTrapReceiverRowStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverRowStatus.setDescription('A row status type for the Trap Receiver Table. This object is used to add or remove entries from this table.')
csOrionTrapReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 4), Integer32().clone(162)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTrapReceiverPort.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverPort.setDescription(' UDP port number for trap receiver. By default, all traps are sent to Port 162.')
csOrionTrapReceiverTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v1Trap", 1), ("v2Inform", 2), ("v1TrapAndv2Inform", 3))).clone('v2Inform')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionTrapReceiverTrapType.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapReceiverTrapType.setDescription(' The trap type, which the Receiver wish to receive from this managed entity. By default, v2 inform request type is used to notify traps.')
csOrionVpnAcctTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 1), )
if mibBuilder.loadTexts: csOrionVpnAcctTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVpnAcctTable.setDescription('This table contains composite stats for each of the VPNs in this Orion.')
csOrionVpnAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"))
if mibBuilder.loadTexts: csOrionVpnAcctEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVpnAcctEntry.setDescription('Each entry contains composite stats for a single VPN.')
csOrionVpnAcctCompStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVpnAcctCompStats.setStatus('current')
if mibBuilder.loadTexts: csOrionVpnAcctCompStats.setDescription('Composite stats for this VPN')
csOrionVrAcctTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 2), )
if mibBuilder.loadTexts: csOrionVrAcctTable.setStatus('current')
if mibBuilder.loadTexts: csOrionVrAcctTable.setDescription('This table contains composite stats for each of the VRs in this Orion.')
csOrionVrAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionVrAcctEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionVrAcctEntry.setDescription('Each entry contains composite stats for a single VPN.')
csOrionVrAcctCompStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 1, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionVrAcctCompStats.setStatus('current')
if mibBuilder.loadTexts: csOrionVrAcctCompStats.setDescription('Composite stats for this VPN')
csDot1dBaseBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5), )
if mibBuilder.loadTexts: csDot1dBaseBridgeTable.setStatus('current')
if mibBuilder.loadTexts: csDot1dBaseBridgeTable.setDescription('A list of Virtual Bridges, configured for the Virtual Router.')
csDot1dBaseBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csDot1dBaseBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: csDot1dBaseBridgeEntry.setDescription('An entry containing information applicable to a bridged VI of a VR.')
csDot1dBaseBridgeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dBaseBridgeAddress.setReference('IEEE 802.1D-1990: Sections 6.4.1.1.3 and 3.12.5')
if mibBuilder.loadTexts: csDot1dBaseBridgeAddress.setStatus('current')
if mibBuilder.loadTexts: csDot1dBaseBridgeAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this. However it is only required to be unique. When concatenated with dot1dStpPriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol. Note: This is used as the MAC address for this VB.')
csDot1dBaseNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dBaseNumPorts.setReference('IEEE 802.1D-1990: Section 6.4.1.1.3')
if mibBuilder.loadTexts: csDot1dBaseNumPorts.setStatus('current')
if mibBuilder.loadTexts: csDot1dBaseNumPorts.setDescription('The number of ports controlled by this bridging entity.')
csDot1dTpLearnedEntryDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpLearnedEntryDiscards.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: csDot1dTpLearnedEntryDiscards.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpLearnedEntryDiscards.setDescription('The total number of Forwarding Database entries, which have been or would have been learnt, but have been discarded due to a lack of space to store them in the Forwarding Database. If this counter is increasing, it indicates that the Forwarding Database is regularly becoming full (a condition which has unpleasant performance effects on the subnetwork). If this counter has a significant value but is not presently increasing, it indicates that the problem has been occurring but is not persistent.')
csDot1dTpAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csDot1dTpAgingTime.setReference('IEEE 802.1D-1990: Section 6.7.1.1.3')
if mibBuilder.loadTexts: csDot1dTpAgingTime.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpAgingTime.setDescription('The timeout period in seconds for aging out dynamically learned forwarding information. 802.1D-1990 recommends a default of 300 seconds.')
csDot1dBaseBridgeEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dBaseBridgeEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: csDot1dBaseBridgeEntryRowStatus.setDescription('A row status type for the csDot1dBaseBridge Table.')
csDot1dTpFdbTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6), )
if mibBuilder.loadTexts: csDot1dTpFdbTable.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpFdbTable.setDescription('A table that contains information about unicast entries for which the bridge has forwarding and/or filtering information. This information is used by the transparent bridging function in determining how to propagate a received frame.')
csDot1dTpFdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csDot1dTpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpFdbEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and/or filtering information.')
csDot1dTpFdbAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbAddress.setReference('IEEE 802.1D-1990: Section 3.9.1, 3.9.2')
if mibBuilder.loadTexts: csDot1dTpFdbAddress.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpFdbAddress.setDescription('A unicast MAC address for which the bridge has forwarding and/or filtering information.')
csDot1dTpFdbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbPort.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpFdbPort.setDescription("Either the value '0', or the port number of the port on which a frame having a source address equal to the value of the corresponding instance of dot1dTpFdbAddress has been seen. A value of '0' indicates that the port number has not been learned but that the bridge does have some forwarding/filtering information about this address (e.g. in the dot1dStaticTable). Implementors are encouraged to assign the port to this object whenever it is learned even addresses for which the corresponding value of dot1dTpFdbStatus is not learned(3).")
csDot1dTpFdbSubPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbSubPort.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpFdbSubPort.setDescription("Either the value '0', or the port number of the subport on which a frame having a source address equal to the value of the corresponding instance of dot1dTpFdbAddress has been seen.")
csDot1dTpFdbStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("invalid", 2), ("learned", 3), ("self", 4), ("mgmt", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dTpFdbStatus.setStatus('current')
if mibBuilder.loadTexts: csDot1dTpFdbStatus.setDescription("The status of this entry. The meanings of the values are: other(1) : none of the following. This would include the case where some other MIB object (not the corresponding instance of dot1dTpFdbPort, nor an entry in the dot1dStaticTable) is being used to determine if and how frames addressed to the value of the corresponding instance of dot1dTpFdbAddress are being forwarded. invalid(2) : this entry is not longer valid (e.g., it was learned but has since aged-out), but has not yet been flushed from the table. learned(3) : the value of the corresponding instance of dot1dTpFdbPort was learned, and is being used. self(4) : the value of the corresponding instance of dot1dTpFdbAddress one of the bridge's addresses. The corresponding instance of dot1dTpFdbPort indicates which of the bridge's ports has this address. mgmt(5) : the value of the corresponding instance of dot1dTpFdbAddress is also the value of an existing instance of dot1dStaticAddress.")
csDot1dPortTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7), )
if mibBuilder.loadTexts: csDot1dPortTable.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortTable.setDescription('.')
csDot1dPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionVIfIndex"), (0, "COSINE-ORION-MIB", "csDot1dPortIndex"))
if mibBuilder.loadTexts: csDot1dPortEntry.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortEntry.setDescription('Information about a specific unicast MAC address for which the bridge has some forwarding and (or) filtering information.')
csDot1dPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: csDot1dPortIndex.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortIndex.setDescription('.')
csDot1dPortRemoteEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dPortRemoteEnd.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortRemoteEnd.setDescription(" This object is used to identify the entity to which this Virtual Interface maps. That is, the remote end of this Virtual Interface. The format used for this ascii-string valued object is as follows: 'V|L|P|T VPNID|SlotID/VRID|PortID/VIID/ConnID/TLSID|LLID' Where 'V' indicates the other end of this Virtual Interface is another Virtual Interface. 'L' indicates this Virtual Interface maps to a Logical Link. P indicates pseudo wire. T indicates TLS. 'VPNID' is a Virtual Private Network ID. 'SlotID' identifies a specific slot on the Orion Box. 'VRID' is a Virtual Router ID for the VPN specified by VPNID. 'PortID' identifies a specific Port on the blade installed in the previously identified slot. 'VIID' is a Virtual Interface on the VR identified by VRID. ConnID refers to pseudo wire connection ID. TLSID refers to the TLS domain ID for pseudo wires. 'LLID' is a Logical Link ID on PortID. For example, if this Virtual Interface maps to another Virtual Interface (VI number 1 on VR 1.2.3.4 on VPN 4), this object might be set to this value: 'V 4/1.2.3.4/1' If this Virtual Interface maps to Logical Link 100 on Port 2 of Slot 2, this object might be set to this value: 'L 2/2:100' If this Virtual Interface maps to pseudo wire 100 on VPN 4 VR 1.2.3.4: P 4/1.2.3.4/100 If this Virtual Interface maps to TLS 100 on VPN 4 VR 1.2.3.4: T 4/1.2.3.4/100 ")
csDot1dPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("li", 1), ("pw", 2), ("tls", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dPortType.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortType.setDescription('.')
csDot1dPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csDot1dPortStatus.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortStatus.setDescription('.')
csDot1dPortEntryRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 4, 2, 2, 7, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csDot1dPortEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: csDot1dPortEntryRowStatus.setDescription('.')
csOrionRadiusAcctFlush = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("flush", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionRadiusAcctFlush.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctFlush.setDescription('This object is used to flush the contents of the csOrionRadiusAcctTable. To flush the table, set the value of this object to 1.')
csOrionRadiusAcctTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2), )
if mibBuilder.loadTexts: csOrionRadiusAcctTable.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctTable.setDescription('This table contains composite stats for each of the VRs in this Orion.')
csOrionRadiusAcctEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csOrionRadiusAcctIndex"))
if mibBuilder.loadTexts: csOrionRadiusAcctEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctEntry.setDescription('Each entry contains composite stats for a single VPN.')
csOrionRadiusAcctIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 1), Integer32())
if mibBuilder.loadTexts: csOrionRadiusAcctIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctIndex.setDescription('The index of this radius accounting entry. The values will increase monotonically, even after the entries have been flushed.')
csOrionRadiusAcctTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctTimestamp.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctTimestamp.setDescription('The value of sysUpTime when this entry was created.')
csOrionRadiusAcctVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctVpnId.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctVpnId.setDescription('The Id of the VPN that originated this radius accounting entry.')
csOrionRadiusAcctVrId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctVrId.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctVrId.setDescription('The Id of the VR that originated this radius accounting entry.')
csOrionRadiusAcctInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 10, 2, 2, 3, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionRadiusAcctInfo.setStatus('current')
if mibBuilder.loadTexts: csOrionRadiusAcctInfo.setDescription('Information describing the creation or termination of a dynamic connection to a virtual router. The information is presented in standard radius accounting format.')
csTelnetSvrConfTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1), )
if mibBuilder.loadTexts: csTelnetSvrConfTable.setStatus('current')
if mibBuilder.loadTexts: csTelnetSvrConfTable.setDescription('A table of telnet server configuration parameters.')
csTelnetSvrConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csTelnetSvrConfEntry.setStatus('current')
if mibBuilder.loadTexts: csTelnetSvrConfEntry.setDescription('Each entry contains a set of configuration paramters for telnet server in a VR. Note, that only a single instance of telnet server is enabledat a time.')
csTelnetSvrConfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTelnetSvrConfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: csTelnetSvrConfAdminStatus.setDescription('Enable/Disable the use of telnet server.')
csTelnetSvrConfTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTelnetSvrConfTimeout.setStatus('current')
if mibBuilder.loadTexts: csTelnetSvrConfTimeout.setDescription('A user configurable telnet timeout value in minutes.')
csTelnetSvrConfNumOfSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csTelnetSvrConfNumOfSessions.setStatus('current')
if mibBuilder.loadTexts: csTelnetSvrConfNumOfSessions.setDescription('User configurable number of simultaneous client sessions supported.')
csTelnetConnTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2), )
if mibBuilder.loadTexts: csTelnetConnTable.setStatus('current')
if mibBuilder.loadTexts: csTelnetConnTable.setDescription('Table lists all the currently active telnet connection.')
csTelnetConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), (0, "COSINE-ORION-MIB", "csTelnetConnId"))
if mibBuilder.loadTexts: csTelnetConnEntry.setStatus('current')
if mibBuilder.loadTexts: csTelnetConnEntry.setDescription('Each entry lists one currently active telnet connection.')
csTelnetConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: csTelnetConnId.setStatus('current')
if mibBuilder.loadTexts: csTelnetConnId.setDescription('Connection Id of this particular telnet session.')
csTelnetConnIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csTelnetConnIpAddr.setStatus('current')
if mibBuilder.loadTexts: csTelnetConnIpAddr.setDescription("The remote peer's ip address of this telnet session.")
csTelnetConnPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csTelnetConnPort.setStatus('current')
if mibBuilder.loadTexts: csTelnetConnPort.setDescription("The remote peer's port number of this telnet session.")
csTelnetConnRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 11, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csTelnetConnRowStatus.setStatus('current')
if mibBuilder.loadTexts: csTelnetConnRowStatus.setDescription('The admin status type for this entry in the connection table.')
csOrionSyslogdTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1), )
if mibBuilder.loadTexts: csOrionSyslogdTable.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdTable.setDescription('This table controls the activation of the syslogd client on a particular Virtual Router. Note, only one client can be enabled at a time.')
csOrionSyslogdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), (0, "COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionSyslogdEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdEntry.setDescription('Each entry represents a single Virtual Router.')
csOrionSyslogdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdStatus.setDescription('This object is used to enable/disable the syslogd client on this Virtual Router. If this object is disabled, the syslogd client will not forward any ev_log messages to a syslogd server.')
csOrionSyslogdReceiverAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdReceiverAddr.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdReceiverAddr.setDescription(' IP address for syslogd server.')
csOrionSyslogdFacility1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility1.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility1.setDescription('Mapping to Facility from Area 1')
csOrionSyslogdFacility2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility2.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility2.setDescription('Mapping to Facility from Area 2')
csOrionSyslogdFacility3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility3.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility3.setDescription('Mapping to Facility from Area 3')
csOrionSyslogdFacility4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility4.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility4.setDescription('Mapping to Facility from Area 4')
csOrionSyslogdFacility5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility5.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility5.setDescription('Mapping to Facility from Area 5')
csOrionSyslogdFacility6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility6.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility6.setDescription('Mapping to Facility from Area 6')
csOrionSyslogdFacility7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility7.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility7.setDescription('Mapping to Facility from Area 7')
csOrionSyslogdFacility8 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility8.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility8.setDescription('Mapping to Facility from Area 8')
csOrionSyslogdLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel1.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdLevel1.setDescription('Mapping to syslogd Level from evlog level 1')
csOrionSyslogdLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel2.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdLevel2.setDescription('Mapping to syslogd Level from evlog level 2')
csOrionSyslogdLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel3.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdLevel3.setDescription('Mapping to syslogd Level from evlog level 3')
csOrionSyslogdLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel4.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdLevel4.setDescription('Mapping to syslogd Level from evlog level 4')
csOrionSyslogdLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdLevel5.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdLevel5.setDescription('Mapping to syslogd Level from evlog level 5')
csOrionSyslogdFacility9 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility9.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility9.setDescription('Mapping to Facility from Area 9')
csOrionSyslogdFacility10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility10.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility10.setDescription('Mapping to Facility from Area 10')
csOrionSyslogdFacility11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility11.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility11.setDescription('Mapping to Facility from Area 11')
csOrionSyslogdFacility12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 12, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csOrionSyslogdFacility12.setStatus('current')
if mibBuilder.loadTexts: csOrionSyslogdFacility12.setDescription('Mapping to Facility from Area 12')
csOrionFanEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speedRisingAboveLowerCriticalThreshold", 1), ("speedFallingBelowLowerCriticalThreshold", 2), ("speedRisingAboveUpperCriticalThreshold", 3), ("speedFallingBelowUpperCriticalThreshold", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionFanEvent.setStatus('current')
if mibBuilder.loadTexts: csOrionFanEvent.setDescription('A fan event.')
csOrionTemperatureEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tempRisingAboveUpperCriticalThreshold", 1), ("tempFallingBelowUpperCriticalThreshold", 2), ("tempRisingAboveUpperNonRecoverableThreshold", 3), ("tempFallingBelowUpperNonRecoverableThreshold", 4), ("tempExceedsMaxValue", 5), ("tempEnteringNormalRange", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperatureEvent.setStatus('current')
if mibBuilder.loadTexts: csOrionTemperatureEvent.setDescription('A fan event. Note that the first four event types apply to analog temperature sensors (for example, those used to measure inlet and outlet air flow temperature), and the last two apply to digital temperature sensors (for example, those in the power supplies).')
csOrionPowerSupplyEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("supplyModuleInserted", 1), ("supplyModuleRemoved", 2), ("inputVoltageRisingAboveLowerCriticalThreshold", 3), ("inputVoltageFallingBelowLowerCriticalThreshold", 4), ("outputVoltageRisingAboveLowerCriticalThreshold", 5), ("outputVoltageFallingBelowLowerCriticalThreshold", 6), ("outputCurrentRisingAboveUpperCriticalThreshold", 7), ("outputCurrentFallingBelowUpperCriticalThreshold", 8), ("auxVoltageRisingAboveLowerCriticalThreshold", 9), ("auxVoltageFallingBelowLowerCriticalThreshold", 10), ("temperatureExceedsMaxValue", 11), ("temperatureEnteringNormalRange", 12), ("currentShareRisingAboveLowerCriticalThreshold", 13), ("currentShareFallingBelowLowerCriticalThreshold", 14)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPowerSupplyEvent.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyEvent.setDescription('A power supply event.')
csOrionFanSpeedThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionFanSpeedThreshold.setStatus('current')
if mibBuilder.loadTexts: csOrionFanSpeedThreshold.setDescription('The fan speed threshold (in revolutions per second).')
csOrionTemperatureSensorIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperatureSensorIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionTemperatureSensorIndex.setDescription('Identifies a particular temperature sensor.')
csOrionTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperature.setStatus('current')
if mibBuilder.loadTexts: csOrionTemperature.setDescription('The temperature reported by a temperature sensor.')
csOrionTemperatureThreshold = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: csOrionTemperatureThreshold.setDescription('The temperature threshold (in degress celsius).')
csOrionPacketRingPrimToProtCurrentEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingPrimToProtCurrentEndpointSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionPacketRingPrimToProtCurrentEndpointSlot.setDescription('Current slot number of the primary-to-protection endpoint.')
csOrionPacketRingPrimToProtPreviousEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingPrimToProtPreviousEndpointSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionPacketRingPrimToProtPreviousEndpointSlot.setDescription('Previous slot number of the primary-to-protection endpoint.')
csOrionPacketRingProtToPrimCurrentEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingProtToPrimCurrentEndpointSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionPacketRingProtToPrimCurrentEndpointSlot.setDescription('Current slot number of the protection-to-primary endpoint.')
csOrionPacketRingProtToPrimPreviousEndpointSlot = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 26))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPacketRingProtToPrimPreviousEndpointSlot.setStatus('current')
if mibBuilder.loadTexts: csOrionPacketRingProtToPrimPreviousEndpointSlot.setDescription('Previous slot number of the protection-to-primary endpoint.')
csOrionTempAirFlowCard = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("front", 1), ("rear", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTempAirFlowCard.setStatus('current')
if mibBuilder.loadTexts: csOrionTempAirFlowCard.setDescription('The temperature/airflow sense card for which we are resporting an event. Note there is only one temperature/airflow sense card on 3500 chassis.')
csOrionI2CDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("statusPanel", 1), ("fanTray3500", 2), ("frontFanTray9500", 3), ("rearFanTray9500", 4), ("tempAirFlowCard3500", 5), ("frontTempAirFlowCard9500", 6), ("rearTempAirFlowCard9500", 7), ("powerSupplyMonitor", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionI2CDeviceId.setStatus('current')
if mibBuilder.loadTexts: csOrionI2CDeviceId.setDescription('An I2C device.')
csOrionI2CDevicePresent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("devicePresent", 1), ("deviceNotPresent", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionI2CDevicePresent.setStatus('current')
if mibBuilder.loadTexts: csOrionI2CDevicePresent.setDescription('Indicates whether a given I2C device is present or not.')
csOrionPowerSupplyMonitorEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("redundancyRegained", 1), ("redundancyLost", 2), ("auxVoltageRisingAboveLowerCriticalThreshold", 3), ("auxVoltageFallingBelowLowerCriticalThreshold", 4), ("outputVoltageRisingAboveLowerCriticalThreshold", 5), ("outputVoltageFallingBelowLowerCriticalThreshold", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionPowerSupplyMonitorEvent.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyMonitorEvent.setDescription('A power supply monitor event.')
csOrionTrapPowerSupplyIndex = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionTrapPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionTrapPowerSupplyIndex.setDescription('An index for the power supply to be used in power supply trap.')
cbrFileType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bootcfg", 1), ("config", 2), ("password", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileType.setStatus('current')
if mibBuilder.loadTexts: cbrFileType.setDescription('The kind of file that is being copied from master to standby control blade: bootcfg(1) - boot configuration file config(2) - configuration file password(3) - password file')
cbrFileName = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 18), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileName.setStatus('current')
if mibBuilder.loadTexts: cbrFileName.setDescription('Name of the file that is being copied from master to standby control blade.')
cbrFileErrorType = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-6, -5, -4, -3, -2, -1, 1, 2, 3))).clone(namedValues=NamedValues(("cantOpenConfig", -6), ("cantSaveConfig", -5), ("cantChangeDirConfig", -4), ("cantWritePassword", -3), ("cantOpenPassword", -2), ("cantChangeDirPassword", -1), ("savedBootcfg", 1), ("savedConfig", 2), ("savedPassword", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileErrorType.setStatus('current')
if mibBuilder.loadTexts: cbrFileErrorType.setDescription('Type of error that occurred during a file copy operation from master to standby control blade: cantOpenConfig(-6) - unable to open/create config file on standby control blade cantSaveConfig(-5) - unable to save config file on standby control blade cantChangeDirConfig(-4) - unable to change directory when updating config file on standby control blade cantWritePassword(-3) - unable to write into the password file on a standby control blade cantOpenPassword(-2) - unable to open/create password file on standby control blade cantChangeDirPassword(-1) - unable to change directory when updating password file on standby control blade savedBootcfg(1) - boot config file is saved successfully on standby control blade savedConfig(2) - configuration file is saved successfully on standby control blade savedPassword(3) - password file is saved successfully on standby control blade.')
cbrFileErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 20), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cbrFileErrorCode.setStatus('current')
if mibBuilder.loadTexts: cbrFileErrorCode.setDescription('pHILE+ error code associated with the file copy operation from master to standby control blade. Please consult the pSOS Manual for the possible values and the meanings of the error code.')
csOrionBgpMaxPfxLimitEvent = MibScalar((1, 3, 6, 1, 4, 1, 3085, 3, 1, 13, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("maxPrefixLimitReached", 1), ("exceedsMaxPrefix", 2), ("exceedsMaxPrefixLimit", 3), ("exceedsMaxPrefixLimitDiscardRoutes", 4), ("maxPrefixLimitThresholdReached", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: csOrionBgpMaxPfxLimitEvent.setStatus('current')
if mibBuilder.loadTexts: csOrionBgpMaxPfxLimitEvent.setDescription('Indicates the following events: maximum prefix limit reached exceeds maximum prefix exceeds maximum prefix limit - idling neighbor exceeds maximum prefix limit - discarding additional routes maximum prefix limit threshold reached.')
csOrionStatusPanelPortTable = MibTable((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1), )
if mibBuilder.loadTexts: csOrionStatusPanelPortTable.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortTable.setDescription('A table containing information about the Status Panel ports.')
csOrionStatusPanelPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1), ).setIndexNames((0, "COSINE-ORION-MIB", "csOrionStatusPanelPortIndex"))
if mibBuilder.loadTexts: csOrionStatusPanelPortEntry.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortEntry.setDescription('An entry containing management information applicable to a particular Status Panel port.')
csOrionStatusPanelPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: csOrionStatusPanelPortIndex.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortIndex.setDescription('An index for a Status Panel port.')
csOrionStatusPanelPortBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 2), SPPBaudRate().clone('baud9600')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionStatusPanelPortBaudRate.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortBaudRate.setDescription('The baud rate of a Status Panel port.')
csOrionStatusPanelPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 3), SPPLoopbackStatus().clone('noLoop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: csOrionStatusPanelPortLoopback.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortLoopback.setDescription('The loopback state of a Status Panel port.')
csOrionStatusPanelPortModemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 4), SPPModemStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionStatusPanelPortModemStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortModemStatus.setDescription('Whether or not a modem is connect to this Status Panel port.')
csOrionStatusPanelPortRedundantStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3085, 3, 1, 14, 1, 1, 5), SPPRedundantStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csOrionStatusPanelPortRedundantStatus.setStatus('current')
if mibBuilder.loadTexts: csOrionStatusPanelPortRedundantStatus.setDescription('???? Ask Bev ????.')
csOrionEventsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1))
csOrionBladeRemoved = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 1)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"))
if mibBuilder.loadTexts: csOrionBladeRemoved.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeRemoved.setDescription("A orionBladeRemoved trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the one of the existing Blade was removed from it's slot.")
csOrionBladeInserted = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 2)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionBladeDescr"))
if mibBuilder.loadTexts: csOrionBladeInserted.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeInserted.setDescription('A csOrionBladeInserted trap signifies that SNMPv2 entity, acting in an agent role, has detected that the one of the Blade was inserted in the empty slot.')
csOrionBladeStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 3)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionBladeDescr"), ("COSINE-ORION-MIB", "csOrionBladeState"))
if mibBuilder.loadTexts: csOrionBladeStateChange.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeStateChange.setDescription('A csOrionBladeStateChange signifies that the SNMPv2 entity acting in an agent role, has detected that a Blade has changed states. A description of the Blade as well as the entered state is identified in this trap.')
csOrionFanStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 4)).setObjects(("COSINE-ORION-MIB", "csOrionFanTray"), ("COSINE-ORION-MIB", "csOrionFanIndex"), ("COSINE-ORION-MIB", "csOrionFanEvent"), ("COSINE-ORION-MIB", "csOrionFanSpeed"), ("COSINE-ORION-MIB", "csOrionFanSpeedThreshold"))
if mibBuilder.loadTexts: csOrionFanStatusChange.setStatus('current')
if mibBuilder.loadTexts: csOrionFanStatusChange.setDescription('A csOrionFanStatusChange trap signifies that the SNMPv2 entity, acting in an agent role, has detected a change in the status of a fan.')
csOrionConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 5)).setObjects(("COSINE-ORION-MIB", "csOrionChangeSourceUserName"), ("COSINE-ORION-MIB", "csOrionChangeTableOID"), ("COSINE-ORION-MIB", "csOrionChangeSource"), ("COSINE-ORION-MIB", "csOrionConfigChangeType"), ("COSINE-ORION-MIB", "csOrionNumConfigChanges"))
if mibBuilder.loadTexts: csOrionConfigChange.setStatus('current')
if mibBuilder.loadTexts: csOrionConfigChange.setDescription("A csOrionConfigChange trap signifies that the SNMPv2 entity, acting in an agent role, has detected that Configuration was changed. The Trap PDU for this csOrionConfigChange, also carries each of the modified object's OID followed by the changed value. In effect, there are one or more VarBinds follows the csOrionNumConfigChanges object of the Trap PDU. Since these OIDs are the member of one of the table defined in this MIB, type information of the value shall be got from the OID. If the csOrionConfigChangeType is delete, the VarBind that follows the csOrionNumConfigChanges contains the Index(es) of the entry which was deleted. If the csOrionConfigChangeType is addModify, then the VarBind contains all the changed OID-Value pairs followed by the index(es).")
csOrionTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 6)).setObjects(("COSINE-ORION-MIB", "csOrionFanTray"), ("COSINE-ORION-MIB", "csOrionTemperatureSensorIndex"), ("COSINE-ORION-MIB", "csOrionTemperatureEvent"), ("COSINE-ORION-MIB", "csOrionTemperature"), ("COSINE-ORION-MIB", "csOrionTemperatureThreshold"))
if mibBuilder.loadTexts: csOrionTempStatusChange.setStatus('current')
if mibBuilder.loadTexts: csOrionTempStatusChange.setDescription("This trap indicates that the temperature status of the Orion system has changed states. If the value of csOrionSystemTempStatus is tempRisingAboveUpperCriticalThreshold(1), the given sensor has detected a transition from the normal temperature range to the hot range. If the value of csOrionSystemTempStatus is tempFallingBelow- UpperCriticalThreshold (2), the given sensor has detected a transition from the 'hot' range back down to the normal range.")
csOrionPowerSupplyStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 7)).setObjects(("COSINE-ORION-MIB", "csOrionPowerSupplyIndex"), ("COSINE-ORION-MIB", "csOrionPowerSupplyEvent"))
if mibBuilder.loadTexts: csOrionPowerSupplyStatusChange.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyStatusChange.setDescription('This trap indicates one of the power supplies has changed state. The following events are reported: supplyModuleInserted (1) supplyModuleRemoved (2) inputVoltageRisingAbovePastLowerCriticalThreshold (3) inputVoltageFallingBelowLowerCriticalThreshold (4) outputVoltageRisingAboveLowerCriticalThreshold (5) outputVoltageFallingBelowLowerCriticalThreshold (6) outputCurrentRisingAboveUpperCriticalThreshold (7) outputCurrentFallingBelowUpperCriticalThreshold (8) auxVoltageRisingAboveLowerCriticalThreshold (9) auxVoltageFallingBelowLowerCriticalThreshold (10) temperatureRisingAboveUpperCriticalThreshold (11) temperatureFallingBelowUpperCriticalThreshold (12) currentShareRisingAboveLowerCriticalThreshold (13) currentShareFallingBelowLowerCriticalThreshold (14)')
csOrionLogLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 8)).setObjects(("COSINE-ORION-MIB", "csOrionLogLinkSlotIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkModuleIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkPortIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkChannelIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkSubIfIndex"))
if mibBuilder.loadTexts: csOrionLogLinkDown.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkDown.setDescription('This trap indicates that a Logical Link on the Orion is about to enter the down state.')
csOrionLogLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 9)).setObjects(("COSINE-ORION-MIB", "csOrionLogLinkSlotIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkModuleIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkPortIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkChannelIndex"), ("COSINE-ORION-MIB", "csOrionLogLinkSubIfIndex"))
if mibBuilder.loadTexts: csOrionLogLinkUp.setStatus('current')
if mibBuilder.loadTexts: csOrionLogLinkUp.setDescription('This trap indicates that a Logical Link on the Orion is about to enter the up state.')
csOrionVIfDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 10)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"), ("COSINE-ORION-MIB", "csOrionVIfRowStatus"), ("COSINE-ORION-MIB", "csOrionVIfOperStatus"))
if mibBuilder.loadTexts: csOrionVIfDown.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfDown.setDescription('A csOrionVIfDown trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the csOrionVIfOperStatus object for one of its communication links is about to enter the down state from some other state (but not from the notPresent state). This other state is indicated by the included value of csOrionVIfOperStatus.')
csOrionVIfUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 11)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"), ("COSINE-ORION-MIB", "csOrionVIfRowStatus"), ("COSINE-ORION-MIB", "csOrionVIfOperStatus"))
if mibBuilder.loadTexts: csOrionVIfUp.setStatus('current')
if mibBuilder.loadTexts: csOrionVIfUp.setDescription('A csOrionVIfUp trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the ifOperStatus object for one of its communication links left the down state and transitioned into some other state (but not into the notPresent state). This other state is indicated by the included value of ifOperStatus.')
csOrionOspfIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 12)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfIfState"))
if mibBuilder.loadTexts: csOrionOspfIfStateChange.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfIfStateChange.setDescription('An csOspfIfStateChange trap signifies that there has been a change in the state of a non-virtual OSPF interface. This trap should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).')
csOrionOspfVirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 13)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfVirtIfState"))
if mibBuilder.loadTexts: csOrionOspfVirtIfStateChange.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfVirtIfStateChange.setDescription('A csOspfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual interface. This trap should be generated when the inter- face state regresses (e.g., goes from Point- to-Point to Down) or progresses to a terminal state (i.e., Point-to-Point).')
csOrionOspfNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 14)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfNbrIpAddr"), ("COSINE-ORION-MIB", "csOspfNbrAddressLessIndex"), ("COSINE-ORION-MIB", "csOspfNbrRtrId"), ("COSINE-ORION-MIB", "csOspfNbrState"))
if mibBuilder.loadTexts: csOrionOspfNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfNbrStateChange.setDescription('A csOspfNbrStateChange trap signifies that there has been a change in the state of a non- virtual OSPF neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on non-broadcast multi-access and broadcast networks, the trap should be gen- erated by the designated router. A designated router transitioning to Down will be noted by csOspfIfStateChange.')
csOrionOspfVirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 15)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtNbrArea"), ("COSINE-ORION-MIB", "csOspfVirtNbrRtrId"), ("COSINE-ORION-MIB", "csOspfVirtNbrState"))
if mibBuilder.loadTexts: csOrionOspfVirtNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfVirtNbrStateChange.setDescription('An csOspfIfStateChange trap signifies that there has been a change in the state of an OSPF vir- tual neighbor. This trap should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., Full).')
csOrionOspfIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 16)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfPacketSrc"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfIfConfigError.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfIfConfigError.setDescription("An csOspfIfConfigError trap signifies that a packet has been received on a non-virtual in- terface from a router whose configuration parameters conflict with this router's confi- guration parameters. Note that the event op- tionMismatch should cause a trap only if it prevents an adjacency from forming.")
csOrionOspfVirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 17)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfVirtIfConfigError.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfVirtIfConfigError.setDescription("An csOspfConfigError trap signifies that a pack- et has been received on a virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a trap only if it prevents an ad- jacency from forming.")
csOrionOspfIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 18)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfPacketSrc"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfIfAuthFailure.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfIfAuthFailure.setDescription("An csOspfIfAuthFailure trap signifies that a packet has been received on a non-virtual in- terface from a router whose authentication key or authentication type conflicts with this router's authentication key or authentication type.")
csOrionOspfVirtIfAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 19)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfConfigErrorType"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfVirtIfAuthFailure.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfVirtIfAuthFailure.setDescription("An csOspfVirtIfAuthFailure trap signifies that a packet has been received on a virtual interface from a router whose authentication key or au- thentication type conflicts with this router's authentication key or authentication type.")
csOrionOspfIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 20)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfPacketSrc"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfIfRxBadPacket.setDescription('An csOspfIfRxBadPacket trap signifies that an OSPF packet has been received on a non-virtual interface that cannot be parsed.')
csOrionOspfVirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 21)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfPacketType"))
if mibBuilder.loadTexts: csOrionOspfVirtIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfVirtIfRxBadPacket.setDescription('An csOspfRxBadPacket trap signifies that an OSPF packet has been received on a virtual interface that cannot be parsed.')
csOrionOspfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 22)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfIfIpAddress"), ("COSINE-ORION-MIB", "csOspfAddressLessIf"), ("COSINE-ORION-MIB", "csOspfNbrRtrId"), ("COSINE-ORION-MIB", "csOspfPacketType"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfTxRetransmit.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfTxRetransmit.setDescription('An csOspfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a non- virtual interface. All packets that may be re- transmitted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
csOrionOspfVirtIfTxRetransmit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 23)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfVirtIfAreaId"), ("COSINE-ORION-MIB", "csOspfVirtIfNeighbor"), ("COSINE-ORION-MIB", "csOspfPacketType"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfVirtIfTxRetransmit.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfVirtIfTxRetransmit.setDescription('An csOspfTxRetransmit trap signifies than an OSPF packet has been retransmitted on a virtual interface. All packets that may be retransmit- ted are associated with an LSDB entry. The LS type, LS ID, and Router ID are used to identify the LSDB entry.')
csOrionOspfOriginateLsa = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 24)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfLsdbAreaId"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfOriginateLsa.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfOriginateLsa.setDescription('An csOspfOriginateLsa trap signifies that a new LSA has been originated by this router. This trap should not be invoked for simple refreshes of LSAs (which happesn every 30 minutes), but instead will only be invoked when an LSA is (re)originated due to a topology change. Addi- tionally, this trap does not include LSAs that are being flushed because they have reached MaxAge.')
csOrionOspfMaxAgeLsa = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 25)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfLsdbAreaId"), ("COSINE-ORION-MIB", "csOspfLsdbType"), ("COSINE-ORION-MIB", "csOspfLsdbLsid"), ("COSINE-ORION-MIB", "csOspfLsdbRouterId"))
if mibBuilder.loadTexts: csOrionOspfMaxAgeLsa.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfMaxAgeLsa.setDescription("An csOspfMaxAgeLsa trap signifies that one of the LSA in the router's link-state database has aged to MaxAge.")
csOrionOspfLsdbOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 26)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfExtLsdbLimit"))
if mibBuilder.loadTexts: csOrionOspfLsdbOverflow.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfLsdbOverflow.setDescription("An csOspfLsdbOverflow trap signifies that the number of LSAs in the router's link-state data- base has exceeded csOspfExtLsdbLimit.")
csOrionOspfLsdbApproachingOverflow = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 27)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOspfRouterId"), ("COSINE-ORION-MIB", "csOspfExtLsdbLimit"))
if mibBuilder.loadTexts: csOrionOspfLsdbApproachingOverflow.setStatus('current')
if mibBuilder.loadTexts: csOrionOspfLsdbApproachingOverflow.setDescription("An csOspfLsdbApproachingOverflow trap signifies that the number of LSAs in the router's link- state database has exceeded ninety percent of csOspfExtLsdbLimit.")
csOrionCustomerVrUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 28)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionCustomerVrUp.setStatus('current')
if mibBuilder.loadTexts: csOrionCustomerVrUp.setDescription('A csOrionCustomerVrUp trap signifies that a Virtual Router which services a customer network has has come up.')
csOrionCustomerVrDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 29)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionCustomerVrDown.setStatus('current')
if mibBuilder.loadTexts: csOrionCustomerVrDown.setDescription('A csOrionCustomerVrDown trap signifies that a Virtual Router which services a customer network has gone down.')
csOrionServiceProviderVrUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 30)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVrUp.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceProviderVrUp.setDescription('A csOrionServiceProviderVrUp trap signifies that a Virtual Router which is designated as a service provider VR has has come up.')
csOrionServiceProviderVrDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 31)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVrDown.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceProviderVrDown.setDescription('A csOrionServiceProviderVrDown trap signifies that a Virtual Router which is designated as a service provider VR has gone down.')
csOrionControlVrUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 32)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionControlVrUp.setStatus('current')
if mibBuilder.loadTexts: csOrionControlVrUp.setDescription('A csOrionControlVrUp trap signifies that a Virtual Router which is designated as a control VR has come up. If a csOrionBladeRemoved Trap precedes this trap and if that blade is the master control blade then this trap might be from the control VR of the new master blade.')
csOrionControlVrDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 33)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"))
if mibBuilder.loadTexts: csOrionControlVrDown.setStatus('current')
if mibBuilder.loadTexts: csOrionControlVrDown.setDescription('A csOrionControlVrDown trap signifies that a Virtual Router which is designated as a control VR has gone down.')
csOrionServiceProviderVIfUp = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 34)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVIfUp.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceProviderVIfUp.setDescription('A csOrionServiceProviderVIfUp trap signifies that a Virtual Interface on a Service Provider VR has come up.')
csOrionServiceProviderVIfDown = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 35)).setObjects(("COSINE-ORION-MIB", "csOrionGlobalVPNIndex"), ("COSINE-ORION-MIB", "csOrionVPNVRouterIndex"), ("COSINE-ORION-MIB", "csOrionVIfIndex"))
if mibBuilder.loadTexts: csOrionServiceProviderVIfDown.setStatus('current')
if mibBuilder.loadTexts: csOrionServiceProviderVIfDown.setDescription('A csOrionServiceProviderVIfDown trap signifies that a Virtual Interface on a Service Provider VR has gone down.')
csOrionLossOfSignal = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 36)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionLossOfSignal.setStatus('current')
if mibBuilder.loadTexts: csOrionLossOfSignal.setDescription('A csOrionLossOfSignal trap signifies that a physical port on a blade experiencing loss of signal(LOS) on the line. Applicable to both DS3 and E3.')
csOrionLossOfFrame = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 37)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionLossOfFrame.setStatus('current')
if mibBuilder.loadTexts: csOrionLossOfFrame.setDescription('A csOrionLossOfFrame trap signifies that a physical port on a blade experiencing loss of Frame(LOF) on the line. Applicable to both DS3 and OC3.')
csOrionDs3AlarmIndication = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 38)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionDs3AlarmIndication.setStatus('current')
if mibBuilder.loadTexts: csOrionDs3AlarmIndication.setDescription('A csOrionAlarmIndication trap signifies that a physical port on a blade generates an alarm (AIS) that indicates a failure in upstream far end.')
csOrionLossOfClock = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 39)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionLossOfClock.setStatus('current')
if mibBuilder.loadTexts: csOrionLossOfClock.setDescription('A csOrionLossOfClock trap signifies that a physical port on a blade experiencing loss of Clock(LOC) on the line. Applicable to both DS3 and OC3.')
csOrionBladeRestore = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 40)).setObjects(("COSINE-ORION-MIB", "csOrionRestoreBladeStatus"), ("COSINE-ORION-MIB", "csOrionRestoreSlotIndex"), ("COSINE-ORION-MIB", "csOrionRestoreNumVRs"))
if mibBuilder.loadTexts: csOrionBladeRestore.setStatus('current')
if mibBuilder.loadTexts: csOrionBladeRestore.setDescription('A csOrionBladeRestore trap signifies that a blade had been restored successfully or not. The VarBind that follow contains the list of VPN/VRs affected.')
csOrionDs3PortIdle = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 41)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionDs3PortIdle.setStatus('current')
if mibBuilder.loadTexts: csOrionDs3PortIdle.setDescription('A csOrionDs3PortIdle trap signifies that a physical port on a blade received an IDLE signal from the far end indicating it is unequipped to handle any data transfer.')
csOrionAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 42)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"), ("COSINE-ORION-MIB", "csOrionAlarmType"))
if mibBuilder.loadTexts: csOrionAlarmClear.setStatus('current')
if mibBuilder.loadTexts: csOrionAlarmClear.setDescription('A csOrionAlarmClear trap signifies that a physical port on a blade, which had sent an alarm earlier, indicates that the previous alarm is cleared. Applicable to DS3.')
csOrionOc3Alarm = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 43)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionOc3AlarmType"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"))
if mibBuilder.loadTexts: csOrionOc3Alarm.setStatus('current')
if mibBuilder.loadTexts: csOrionOc3Alarm.setDescription('A csOrionOc3Alarm trap signifies that an OC3 physical port on a blade, which had sent an alarm. ')
csOrionOc3AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 44)).setObjects(("COSINE-ORION-MIB", "csOrionBladeSlotLocation"), ("COSINE-ORION-MIB", "csOrionModuleIndex"), ("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionOc3AlarmType"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"))
if mibBuilder.loadTexts: csOrionOc3AlarmClear.setStatus('current')
if mibBuilder.loadTexts: csOrionOc3AlarmClear.setDescription('A csOrionOc3AlarmClear trap signifies that an OC3 physical port on a blade, which had sent an alarm earlier, indicates that the prvious alarm is cleared.')
csOrionPacketRingStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 45)).setObjects(("COSINE-ORION-MIB", "csOrionPacketRingPrimToProtCurrentEndpointSlot"), ("COSINE-ORION-MIB", "csOrionPacketRingPrimToProtPreviousEndpointSlot"), ("COSINE-ORION-MIB", "csOrionPacketRingProtToPrimCurrentEndpointSlot"), ("COSINE-ORION-MIB", "csOrionPacketRingProtToPrimPreviousEndpointSlot"))
if mibBuilder.loadTexts: csOrionPacketRingStatusChange.setStatus('current')
if mibBuilder.loadTexts: csOrionPacketRingStatusChange.setDescription('A csOrionPacketRingStatusChange trap signifies that the packet ring status of the chassis has changed. If both endpoints change from zero to r[1,26], that means the status has changed to protection ring. If both endpoints change from r[1,26] to zero, that means the status has changed to no protection ring. If one/both endpoints change from r[1,26] to different r[1,26], that means the topology has changed but not ring status.')
csOrionInletAirTempStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 46)).setObjects(("COSINE-ORION-MIB", "csOrionTempAirFlowCard"), ("COSINE-ORION-MIB", "csOrionTemperatureSensorIndex"), ("COSINE-ORION-MIB", "csOrionTemperatureEvent"), ("COSINE-ORION-MIB", "csOrionTemperature"), ("COSINE-ORION-MIB", "csOrionTemperatureThreshold"))
if mibBuilder.loadTexts: csOrionInletAirTempStatusChange.setStatus('current')
if mibBuilder.loadTexts: csOrionInletAirTempStatusChange.setDescription("This trap indicates that the inlet air temperature has changed states. If the value of csOrionSystemTempStatus is tempRisingAboveUpperCriticalThreshold(1), the given sensor has detected a transition from the normal temperature range to the hot range. If the value of csOrionSystemTempStatus is tempFallingBelowUpperCriticalThreshold (2), the given sensor has detected a transition from the 'hot' range back down to the normal range.")
csOrionDevicePresent = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 47)).setObjects(("COSINE-ORION-MIB", "csOrionI2CDeviceId"), ("COSINE-ORION-MIB", "csOrionI2CDevicePresent"))
if mibBuilder.loadTexts: csOrionDevicePresent.setStatus('current')
if mibBuilder.loadTexts: csOrionDevicePresent.setDescription('This trap indicates that a given I2C device is present. This trap will occur on 9500 and 3500 chassis only.')
csOrionPowerSupplyMonitorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 48)).setObjects(("COSINE-ORION-MIB", "csOrionPowerSupplyMonitorEvent"))
if mibBuilder.loadTexts: csOrionPowerSupplyMonitorStatusChange.setStatus('current')
if mibBuilder.loadTexts: csOrionPowerSupplyMonitorStatusChange.setDescription('This trap indicates a power supply monitor event. The following events are reported: redundancyRegained (1) redundancyLost (2) auxVoltageRisingAboveLowerCriticalThreshold (3) auxVoltageFallingBelowLowerCriticalThreshold (4)')
csOrionFarEndReceiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 49)).setObjects(("COSINE-ORION-MIB", "csOrionPortIndex"), ("COSINE-ORION-MIB", "csOrionBladeType"))
if mibBuilder.loadTexts: csOrionFarEndReceiveFailure.setStatus('current')
if mibBuilder.loadTexts: csOrionFarEndReceiveFailure.setDescription('A csOrionFarEndReceiveFailure trap signifies that the physical port on the remote end is receiving an alarm. Applicable to DS3.')
csOrionCBRFileError = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 50)).setObjects(("COSINE-ORION-MIB", "cbrFileType"), ("COSINE-ORION-MIB", "cbrFileName"), ("COSINE-ORION-MIB", "cbrFileErrorType"), ("COSINE-ORION-MIB", "cbrFileErrorCode"))
if mibBuilder.loadTexts: csOrionCBRFileError.setStatus('current')
if mibBuilder.loadTexts: csOrionCBRFileError.setDescription('This trap reports on the status of the copy operation of a system file from master to standby control blade. Generated only if there is control blade redundancy (cbr).')
csOrionBgpMaxPfxLimit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 51)).setObjects(("COSINE-ORION-MIB", "csBgpGenMaxPfx"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"), ("COSINE-ORION-MIB", "csOrionBgpMaxPfxLimitEvent"))
if mibBuilder.loadTexts: csOrionBgpMaxPfxLimit.setStatus('current')
if mibBuilder.loadTexts: csOrionBgpMaxPfxLimit.setDescription(' This trap reports that max-prefix limit has been reached for the given neighbor')
csOrionBgpNbrMaxPfxLimit = NotificationType((1, 3, 6, 1, 4, 1, 3085, 3, 1, 1, 1, 52)).setObjects(("COSINE-ORION-MIB", "csBgpNbrRemoteAS"), ("COSINE-ORION-MIB", "csBgpNbrMaxPfx"), ("COSINE-ORION-MIB", "csOrionAlarmAffectType"), ("COSINE-ORION-MIB", "csOrionAlarmSeverityType"), ("COSINE-ORION-MIB", "csOrionBgpMaxPfxLimitEvent"))
if mibBuilder.loadTexts: csOrionBgpNbrMaxPfxLimit.setStatus('current')
if mibBuilder.loadTexts: csOrionBgpNbrMaxPfxLimit.setDescription(' This trap reports that max-prefix limit has been reached for the given neighbor')
mibBuilder.exportSymbols("COSINE-ORION-MIB", csIgmpInterfaceIfIndex=csIgmpInterfaceIfIndex, csOrionPptpConfTable=csOrionPptpConfTable, csDs3Ds1IntervalValidData=csDs3Ds1IntervalValidData, csOc3AtmCurrentCorrectedHEC=csOc3AtmCurrentCorrectedHEC, csOrionAAAServerListName=csOrionAAAServerListName, csOc3PathIntervalValidData=csOc3PathIntervalValidData, csOspfImpPolTable=csOspfImpPolTable, csOrionFwNetMeetingPolicyRemotePort=csOrionFwNetMeetingPolicyRemotePort, csRtPolicyTermActionPreference2=csRtPolicyTermActionPreference2, csOrionFwNwGroupTable=csOrionFwNwGroupTable, PositiveInteger=PositiveInteger, csOrionBladeIPSXLoaderDate=csOrionBladeIPSXLoaderDate, csDs3Ds1InvertData=csDs3Ds1InvertData, csOc3ModuleIndex=csOc3ModuleIndex, csOspfNbrPriority=csOspfNbrPriority, csOrionL2tpTunnelStatsFailedSessions=csOrionL2tpTunnelStatsFailedSessions, csOc3AtmIntervalValidData=csOc3AtmIntervalValidData, csOrionFwDestAccess=csOrionFwDestAccess, csMplsInterfaceAdminStatus=csMplsInterfaceAdminStatus, csBgpNbrGroupVpnIpv4AllowVrmodelCustomers=csBgpNbrGroupVpnIpv4AllowVrmodelCustomers, csRsvpVrConfTable=csRsvpVrConfTable, csLdpVrEventLogLevel=csLdpVrEventLogLevel, csDs3Ds1TotalBESs=csDs3Ds1TotalBESs, csIsisL2SummAddrEntry=csIsisL2SummAddrEntry, csOrionL2tpTunnelMaxSessions=csOrionL2tpTunnelMaxSessions, csOrionFwLnotesPolicyTimeout=csOrionFwLnotesPolicyTimeout, csOc3SectionIntervalEntry=csOc3SectionIntervalEntry, csOrionL2tpTunnelRemoteRWS=csOrionL2tpTunnelRemoteRWS, csOrionBladeSwVer=csOrionBladeSwVer, csOrionVPNServerInfo=csOrionVPNServerInfo, csRtPolicyTermToNbrAddr=csRtPolicyTermToNbrAddr, csOrionEngineCpuVersion=csOrionEngineCpuVersion, csRtPolicyTermSeqNum=csRtPolicyTermSeqNum, csOc3SectionIntervalValidData=csOc3SectionIntervalValidData, csMplsLspFrom=csMplsLspFrom, csOrionQueueGroupTableEnd=csOrionQueueGroupTableEnd, csOrionIKEStateEntry=csOrionIKEStateEntry, csPppoeAcIfConfigVolunteerServiceAdvertising=csPppoeAcIfConfigVolunteerServiceAdvertising, csOrionPppIfChIndex=csOrionPppIfChIndex, csOrionIpSecEventLogArea=csOrionIpSecEventLogArea, csOrionFwNntpPolicyName=csOrionFwNntpPolicyName, csOrionL2tpTunnelRWS=csOrionL2tpTunnelRWS, csOrionIKECertName=csOrionIKECertName, csOrionViDsByteFilterAclId=csOrionViDsByteFilterAclId, csOrionQoSMeterRedByteCount=csOrionQoSMeterRedByteCount, csRtPolicyStrRowStatus=csRtPolicyStrRowStatus, csOrionViPktFilterEntry=csOrionViPktFilterEntry, csOrionVrRadiusRetransmit=csOrionVrRadiusRetransmit, csOrionPpoeInfoEnd=csOrionPpoeInfoEnd, csTelnetConnEntry=csTelnetConnEntry, csOrionVPNVRouterIpRouteOperStatus=csOrionVPNVRouterIpRouteOperStatus, csOc3PathDayCVs=csOc3PathDayCVs, csOrionBgpEnd=csOrionBgpEnd, DefaultMetric=DefaultMetric, SnmpAdminString=SnmpAdminString, csOrionVIfOperStatus=csOrionVIfOperStatus, csOrionMlpppBundleActiveLinks=csOrionMlpppBundleActiveLinks, csOc3PosRcvFrameFCSError=csOc3PosRcvFrameFCSError, csOc3LineCurrentStatus=csOc3LineCurrentStatus, csOrionIKECryptoMapSaLifetimeHardKbytes=csOrionIKECryptoMapSaLifetimeHardKbytes, csBgpConf=csBgpConf, csAtmConnIpAddressEntry=csAtmConnIpAddressEntry, csOrionStatusPanelInfo=csOrionStatusPanelInfo, csOrionIKESvrParamRetryTimerMicroSec=csOrionIKESvrParamRetryTimerMicroSec, csPppoeSessionId=csPppoeSessionId, csDs3Ds1CurrentLCVs=csDs3Ds1CurrentLCVs, csOrionTunnelSwitchTargetEntry=csOrionTunnelSwitchTargetEntry, csOrionEngineUtilization=csOrionEngineUtilization, csOrionSystemBootTable=csOrionSystemBootTable, csBgpGen=csBgpGen, csPwVcInboundMTU=csPwVcInboundMTU, csOrionChassisPacketRingProtectionCRC=csOrionChassisPacketRingProtectionCRC, csOrionFileSysReqEntry=csOrionFileSysReqEntry, csOspfIfMetricStatus=csOspfIfMetricStatus, csOrionOspfIfAuthFailure=csOrionOspfIfAuthFailure, csLdpVrConfEntry=csLdpVrConfEntry, csRtPolicyRouteFilterActionFlow=csRtPolicyRouteFilterActionFlow, csOrionVPNVRouterTcpRtoMax=csOrionVPNVRouterTcpRtoMax, csUnchanDs3ConfigLoopbackType=csUnchanDs3ConfigLoopbackType, csFRoIPCircuitSentDEs=csFRoIPCircuitSentDEs, csAtmConnInArpAgingTime=csAtmConnInArpAgingTime, csPwe3ConfTable=csPwe3ConfTable, csMplsInterfaceLabelRange=csMplsInterfaceLabelRange, csOrionFwSmtpLocalDomain=csOrionFwSmtpLocalDomain, csOrionIpSecStatsAhTotalInboundSAs=csOrionIpSecStatsAhTotalInboundSAs, csOrionL2tpStatsTotalSessions=csOrionL2tpStatsTotalSessions, csPolicyRouteFilterPrefixLen=csPolicyRouteFilterPrefixLen, csOrionVIfMtu=csOrionVIfMtu, csOspfVirtNbrState=csOspfVirtNbrState, csRtPolicyPrefixListMatchType=csRtPolicyPrefixListMatchType, csOrionConnectionProfileTable=csOrionConnectionProfileTable, RouterID=RouterID, csOrionFwTelnetAuthServers=csOrionFwTelnetAuthServers, csOrionIpSecStatsAhCryptoCepEstablishFailed=csOrionIpSecStatsAhCryptoCepEstablishFailed, csOc3Scramble=csOc3Scramble, csOrionViPbfFilterIndex=csOrionViPbfFilterIndex, csOrionFwTelnetPolicyName=csOrionFwTelnetPolicyName, csEthSubIfAdmStatus=csEthSubIfAdmStatus, csOc3LineDayEntry=csOc3LineDayEntry, csOrionPppIfConfigTable=csOrionPppIfConfigTable, csAtmConnTransmitErrors=csAtmConnTransmitErrors, csFrDlcmiModule=csFrDlcmiModule, csRsvpIfRRCapable=csRsvpIfRRCapable, csOc3PosOperStatus=csOc3PosOperStatus, csOc3PathPrevDayTable=csOc3PathPrevDayTable, csOrionPppRemoteUserConnProfile=csOrionPppRemoteUserConnProfile, csRtPolicyTermTable=csRtPolicyTermTable, csIsisCircOutCtrlPDUs=csIsisCircOutCtrlPDUs, csOrionVrRadiusAcctSvrRowStatus=csOrionVrRadiusAcctSvrRowStatus, csOrionFwPlugPolicyRemotePort=csOrionFwPlugPolicyRemotePort, csOrionFanTempSensorState=csOrionFanTempSensorState, csOrionTrapReceiverTable=csOrionTrapReceiverTable, csAtmInfo=csAtmInfo, csOrionFwLnotesPolicyRemoteServer=csOrionFwLnotesPolicyRemoteServer, csMplsPathSetupPriority=csMplsPathSetupPriority, csOrionFwAolConfigEnd=csOrionFwAolConfigEnd, csOrionL2tpConfigPppTermReqRetransmission=csOrionL2tpConfigPppTermReqRetransmission, csOrionOspfVirtIfAuthFailure=csOrionOspfVirtIfAuthFailure, csLdpVrRoutePreference=csLdpVrRoutePreference, csOrionVrSpfUdpInitTblSize=csOrionVrSpfUdpInitTblSize, csAtmConnStaticArpCacheMacAddress=csAtmConnStaticArpCacheMacAddress, csRipGlobalConfReqOnStartup=csRipGlobalConfReqOnStartup, csOrionPWE3Objects=csOrionPWE3Objects, csOrionLossOfSignal=csOrionLossOfSignal, csOspfPacketType=csOspfPacketType, csOrionOspfIfRxBadPacket=csOrionOspfIfRxBadPacket, csOrionNumericListEntry=csOrionNumericListEntry, csDot1dPortEntryRowStatus=csDot1dPortEntryRowStatus, csMplsExtensionsTable=csMplsExtensionsTable, csExpFilterIfColorMeteringMode=csExpFilterIfColorMeteringMode, csPppoeSessionTransmitOperDown=csPppoeSessionTransmitOperDown, csTelnetSvrConfEntry=csTelnetSvrConfEntry, csOspfIfRetransInterval=csOspfIfRetransInterval, csFRoIPCircuitMulticast=csFRoIPCircuitMulticast, csDs3Ds1TotalDMs=csDs3Ds1TotalDMs, csDot1dTpFdbAddress=csDot1dTpFdbAddress, csOrionPacketRingProtToPrimCurrentEndpointSlot=csOrionPacketRingProtToPrimCurrentEndpointSlot, csOrionFwSmtpPolicyTable=csOrionFwSmtpPolicyTable, csIgmpAccessGroupAddress=csIgmpAccessGroupAddress, csOrionL2tpStatsEntry=csOrionL2tpStatsEntry, csOrionFwHttpPolicyLog=csOrionFwHttpPolicyLog, csRsvpIfStatus=csRsvpIfStatus, csAtmConnTransmittedCells=csAtmConnTransmittedCells, csOrionQueueMinThresholdForRed=csOrionQueueMinThresholdForRed, csIsisCircIndex=csIsisCircIndex, csOrionIpSecStatsAhEncryptPktsOk=csOrionIpSecStatsAhEncryptPktsOk, csOrionIpSecEvLogArea=csOrionIpSecEvLogArea, csOrionAccessListEntry=csOrionAccessListEntry, csAtmConnSCR=csAtmConnSCR, csOrionL2tpConfigMaxTunnels=csOrionL2tpConfigMaxTunnels, csBgpNbrGroupMaxPfx=csBgpNbrGroupMaxPfx, csOrionAAAServerRadiusKey=csOrionAAAServerRadiusKey, csDs3Ds1IntervalBESs=csDs3Ds1IntervalBESs, csOrionPppIfConfigEntry=csOrionPppIfConfigEntry, csOrionEngineState=csOrionEngineState, csAtmInterfaceConfRespondedOAMLoopBackRequests=csAtmInterfaceConfRespondedOAMLoopBackRequests, csIgmpInterfaceRobustness=csIgmpInterfaceRobustness, csOrionSnmpCommEntry=csOrionSnmpCommEntry, csIgmpAccessGroupTable=csIgmpAccessGroupTable, csOrionBladePort3MacAddr=csOrionBladePort3MacAddr, csIsisISAdjAreaAddrTable=csIsisISAdjAreaAddrTable, csOrionFwSmtpPolicyEntry=csOrionFwSmtpPolicyEntry, csDs3StatIntervalValidData=csDs3StatIntervalValidData, csOrionServiceProviderVrDown=csOrionServiceProviderVrDown, csOrionFwSmtpPolicyBadEmailAdmin=csOrionFwSmtpPolicyBadEmailAdmin, csOrionFileSysReqSrcFile=csOrionFileSysReqSrcFile, csDs3Ds1IntervalTable=csDs3Ds1IntervalTable, csOrionSystemLoginRoleAccessRights=csOrionSystemLoginRoleAccessRights, csMplsLspPathChanges=csMplsLspPathChanges, csOrionManualCryptoMapTransformSet=csOrionManualCryptoMapTransformSet, csVpnVrfAdminStatus=csVpnVrfAdminStatus, csOspfVirtIfAreaId=csOspfVirtIfAreaId, csOrionIKEStateTable=csOrionIKEStateTable, csMplsPathDynamic=csMplsPathDynamic, csOrionNatGeneralParamTableEnd=csOrionNatGeneralParamTableEnd, csOrionFwPlugPolicyRowStatus=csOrionFwPlugPolicyRowStatus, csOc3AtmIntervalTransmittedCells=csOc3AtmIntervalTransmittedCells, csOrionPingCtlTrapFilter=csOrionPingCtlTrapFilter, csOrionVIfRateLimitInterval=csOrionVIfRateLimitInterval, csBgpConfedASRowStatus=csBgpConfedASRowStatus, csPolicyRouteFilterMatchType=csPolicyRouteFilterMatchType, csOspfAreaLsaCount=csOspfAreaLsaCount, csAtmConnInArpManageStatus=csAtmConnInArpManageStatus, csOrionPingResultsProbeResponses=csOrionPingResultsProbeResponses, csOrionDynamicCryptoMapTransformSet3=csOrionDynamicCryptoMapTransformSet3, csOrionFRoIPTransportPeer=csOrionFRoIPTransportPeer, csOrionMlpppBundleFragmentsPerPacket=csOrionMlpppBundleFragmentsPerPacket, csOc3PathCurrentWidth=csOc3PathCurrentWidth, csOrionMplsEnd=csOrionMplsEnd, csMplsVrConfTable=csMplsVrConfTable, csOrionOc3Config=csOrionOc3Config, csOrionVPNVRouterManagedIpRouteAdvertiseOption=csOrionVPNVRouterManagedIpRouteAdvertiseOption, csRipGlobalRouteChanges=csRipGlobalRouteChanges, csOrionL2tpSessionLocalId=csOrionL2tpSessionLocalId, csOrionNatPoolId=csOrionNatPoolId, MplsLabel=MplsLabel, csAtmConnTransmittedArpResponses=csAtmConnTransmittedArpResponses, csDs3StatCurrentSEFSs=csDs3StatCurrentSEFSs, csOrionFwTelnetPolicyPasswordChange=csOrionFwTelnetPolicyPasswordChange, csChDs3T1Number=csChDs3T1Number, csIsisCircMinBroadLSPTransInt=csIsisCircMinBroadLSPTransInt, csEthSubifPppoeService=csEthSubifPppoeService, csPwe3ConfRowStatus=csPwe3ConfRowStatus, csDot1dBaseNumPorts=csDot1dBaseNumPorts, csUnchanDs3ConfigMdlIdleSig=csUnchanDs3ConfigMdlIdleSig, csRtgPolicy=csRtgPolicy, csOc3PathPrevDayUASs=csOc3PathPrevDayUASs, csOrionGenAclTos=csOrionGenAclTos, csOrionPptpConfIpPool=csOrionPptpConfIpPool, csOrionServiceTemplateConnProfileEntry=csOrionServiceTemplateConnProfileEntry, csOrionFwHttpAuthNonTransparentAuth=csOrionFwHttpAuthNonTransparentAuth, csLdpEntityHelloTimer=csLdpEntityHelloTimer, csOrionTraceRoute=csOrionTraceRoute, csOrionVPNVRouterTcpConnTable=csOrionVPNVRouterTcpConnTable, csOrionFRoIPTransportWindowSize=csOrionFRoIPTransportWindowSize, csOrionIpSecEvLogLevel=csOrionIpSecEvLogLevel, csOrionIpSecStatsAhCurrentOutboundSAs=csOrionIpSecStatsAhCurrentOutboundSAs, csOspfRouterId=csOspfRouterId, csDs3Ds1LineStatus=csDs3Ds1LineStatus, csUnchanDs3ConfigMdlPort=csUnchanDs3ConfigMdlPort, csOrionPptpConnLocalIpAddr=csOrionPptpConnLocalIpAddr, csEthStatsTxScolPktsOk=csEthStatsTxScolPktsOk, csAtmInterfaceReceivedBadAAL5HdrTrailers=csAtmInterfaceReceivedBadAAL5HdrTrailers, csAtmConnTransmitDroppedPkts=csAtmConnTransmitDroppedPkts, csOrionIKESvrParamIpAddress=csOrionIKESvrParamIpAddress, csOrionIpSecStateExpire=csOrionIpSecStateExpire, csIsisExpPolId=csIsisExpPolId, csOrionNatGeneralParamTable=csOrionNatGeneralParamTable, csOrionDhcpRelayInDiscs=csOrionDhcpRelayInDiscs, csRsvpIfPathIn=csRsvpIfPathIn, csFrCircuitState=csFrCircuitState, csOrionPbf=csOrionPbf, csOspfIfDemand=csOspfIfDemand, csOrionIpSecStateEntry=csOrionIpSecStateEntry, csOrionFRoIPConfDefaultWindowSize=csOrionFRoIPConfDefaultWindowSize, csRtPolicyTermActionVpnRd=csRtPolicyTermActionVpnRd, csFRoIPCircuitTableEnd=csFRoIPCircuitTableEnd, csOrionFanTrayFWRelease=csOrionFanTrayFWRelease, csOrionFwHttpPortNumber=csOrionFwHttpPortNumber, csEthAdminStatus=csEthAdminStatus, csOrionOc3PosStatsEnd=csOrionOc3PosStatsEnd, csOrionMlpppBundleSiteName=csOrionMlpppBundleSiteName, OperStatus=OperStatus, csOrionIKECryptoMapPolicy=csOrionIKECryptoMapPolicy, csBgpStats=csBgpStats, csOrionSyslogdLevel4=csOrionSyslogdLevel4, csOrionIpSecStatsAhTotalInboundSAsFailed=csOrionIpSecStatsAhTotalInboundSAsFailed, csOrionFwSmtpSpamAccess=csOrionFwSmtpSpamAccess, csIsisAreaAddrTable=csIsisAreaAddrTable, csIsisSysMaxPathSplits=csIsisSysMaxPathSplits, csOrionIKEPolicyEntry=csOrionIKEPolicyEntry, csOrionVrDhcpRelayServerName=csOrionVrDhcpRelayServerName, csAtmConnOamLoopbackStatus=csAtmConnOamLoopbackStatus, csOrionSyslogdFacility8=csOrionSyslogdFacility8)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFileSysReqTable=csOrionFileSysReqTable, csOrionFwRshPolicyTable=csOrionFwRshPolicyTable, csOrionIKEPolicyStatus=csOrionIKEPolicyStatus, csOrionVPNVRouterManagedIpRouteMetric3=csOrionVPNVRouterManagedIpRouteMetric3, csIsisCircL1MinLSPTransInt=csIsisCircL1MinLSPTransInt, csVpnVrfASOverride=csVpnVrfASOverride, csExpPolEgpAS=csExpPolEgpAS, csOrionFwSmtpBadAdmin=csOrionFwSmtpBadAdmin, csMplsInterfaceLabelMaxIn=csMplsInterfaceLabelMaxIn, csOrionVPNRadiusSvrList=csOrionVPNRadiusSvrList, csOrionVPNVRouterIpForwarding=csOrionVPNVRouterIpForwarding, csOrionIKECertCertificate=csOrionIKECertCertificate, csRsvpIfQueueBandwidth=csRsvpIfQueueBandwidth, csPppoeAcIfStatPADTReceive=csPppoeAcIfStatPADTReceive, csOrionVPNVRouterDenyPktFilterEvlogStatus=csOrionVPNVRouterDenyPktFilterEvlogStatus, csOrionIKECryptoMapRemoteIdentityType2=csOrionIKECryptoMapRemoteIdentityType2, csOrionTrapReceiverRowStatus=csOrionTrapReceiverRowStatus, csOrionModemFlowCtl=csOrionModemFlowCtl, csOrionViPktFilterIndex=csOrionViPktFilterIndex, csPosInterfaceConfSlotIndex=csPosInterfaceConfSlotIndex, csOrionEngineFreeMemoryMedium=csOrionEngineFreeMemoryMedium, csExpFilterIfMatchingExp=csExpFilterIfMatchingExp, csOrionVPNVRouterIpRouteDest=csOrionVPNVRouterIpRouteDest, csIsisCircL1AuthType=csIsisCircL1AuthType, csOrionSpfInfoEnd=csOrionSpfInfoEnd, csOspfIfRtrPriority=csOspfIfRtrPriority, csOrionRestoreSlotIndex=csOrionRestoreSlotIndex, csOrionSnmpTrapStatus=csOrionSnmpTrapStatus, csOrionGenAclSrcAddress=csOrionGenAclSrcAddress, csOrionSnmpAgentErrorNmsIpAddress=csOrionSnmpAgentErrorNmsIpAddress, csOrionLacConfigEntry=csOrionLacConfigEntry, csOrionQueueGroupId=csOrionQueueGroupId, csAtmConnInArpStatisticsEntry=csAtmConnInArpStatisticsEntry, csOrionViDsByteFilterRowStatus=csOrionViDsByteFilterRowStatus, csOrionEngineSecondaryCacheSize=csOrionEngineSecondaryCacheSize, csOrionFwTelnetAuthStatus=csOrionFwTelnetAuthStatus, csRipIfConfSplitHorizon=csRipIfConfSplitHorizon, csOrionCiscoHdlcOperStatus=csOrionCiscoHdlcOperStatus, csChDs3OperStatus=csChDs3OperStatus, csOspfImpPolStatus=csOspfImpPolStatus, csOrionIpSecStatsAhTotalOutboundSAsFailed=csOrionIpSecStatsAhTotalOutboundSAsFailed, csOc3LineCurrentTable=csOc3LineCurrentTable, csMplsLspTable=csMplsLspTable, csRsvpIfTTL=csRsvpIfTTL, csAtmConnOamLoopbackRetryPvcUpRetryDelay=csAtmConnOamLoopbackRetryPvcUpRetryDelay, csOspfNbrTable=csOspfNbrTable, csOrionFRoIPTransportOperStatus=csOrionFRoIPTransportOperStatus, csEthStatsRx1024To1518Pkts=csEthStatsRx1024To1518Pkts, csOc3NearEndPerfMonControl=csOc3NearEndPerfMonControl, csRtPolicyTermFromIntfIndex=csRtPolicyTermFromIntfIndex, csOrionEngineApplicationTime=csOrionEngineApplicationTime, csOc3SectionPrevDaySEFSs=csOc3SectionPrevDaySEFSs, csOc3PathDaySESs=csOc3PathDaySESs, csOrionTraceRouteReqRowStatus=csOrionTraceRouteReqRowStatus, csOrionFwPlugConfig=csOrionFwPlugConfig, csOc3LineCurrentFCs=csOc3LineCurrentFCs, csIsisSysAttmptToExMaxSeqNums=csIsisSysAttmptToExMaxSeqNums, csOrionIKECryptoMapTransformSet1=csOrionIKECryptoMapTransformSet1, csOc3PathIntervalEntry=csOc3PathIntervalEntry, csIsisCircMCAddr=csIsisCircMCAddr, csPwe3EventLogArea=csPwe3EventLogArea, csOrionDynamicCryptoMapSessionKeyLifetimeSec=csOrionDynamicCryptoMapSessionKeyLifetimeSec, csFrDlcmiInjectionManagement=csFrDlcmiInjectionManagement, csEthDuplex=csEthDuplex, csOrionBladeIPSXLoaderProduct=csOrionBladeIPSXLoaderProduct, csOrionQoSMeterProfileCBS=csOrionQoSMeterProfileCBS, csOrionQoSMeterStatus=csOrionQoSMeterStatus, csRtPolicyTermActionLogFlag=csRtPolicyTermActionLogFlag, csBgpGenDampMaxSuppress=csBgpGenDampMaxSuppress, csDs3StatCurrentCCVs=csDs3StatCurrentCCVs, csOrionMlpppInfo=csOrionMlpppInfo, csOspfHostMetric=csOspfHostMetric, csOc3LineIntervalUASs=csOc3LineIntervalUASs, csOrionStatusPanelFWReleaseDate=csOrionStatusPanelFWReleaseDate, csIsisCircTable=csIsisCircTable, csOrionPptpConfPPPKeepAliveInterval=csOrionPptpConfPPPKeepAliveInterval, csOrionL2tpTunnelStatsTotalSessions=csOrionL2tpTunnelStatsTotalSessions, csRtPolicyStrData=csRtPolicyStrData, csOc3AtmCurrentTransmittedCells=csOc3AtmCurrentTransmittedCells, csOrionVPNVRouterIpRouteProto=csOrionVPNVRouterIpRouteProto, csMplsPathName=csMplsPathName, csOrionDhcpRelayStatsTable=csOrionDhcpRelayStatsTable, csOrionTcp=csOrionTcp, csAtmConnTransmittedArpRequests=csAtmConnTransmittedArpRequests, csOrionNatTranslationEntry=csOrionNatTranslationEntry, csOrionRipEnd=csOrionRipEnd, csOrionViPktFilterEvlogStatus=csOrionViPktFilterEvlogStatus, csOrionNatProtocol=csOrionNatProtocol, csFrCircuitMulticast=csFrCircuitMulticast, csDs3StatCurrentLSESs=csDs3StatCurrentLSESs, csOrionFwMsSqlPolicyTimeout=csOrionFwMsSqlPolicyTimeout, csDs3ConfigLoopbackStatus=csDs3ConfigLoopbackStatus, csOrionPingResultsSentProbes=csOrionPingResultsSentProbes, csOrionVPNVRouterCreationTime=csOrionVPNVRouterCreationTime, csOrionL2tpSessionRemoteCallId=csOrionL2tpSessionRemoteCallId, csIsisIPRADelMetricType=csIsisIPRADelMetricType, csOrionTraceRouteEnd=csOrionTraceRouteEnd, csOrionVrRadiusAcctSvrOperStatus=csOrionVrRadiusAcctSvrOperStatus, csRtPolicyStrName=csRtPolicyStrName, csAtmInterfaceConfReceivedBadAalType=csAtmInterfaceConfReceivedBadAalType, csOrionVrQoSFilterStatus=csOrionVrQoSFilterStatus, csOrionL2tpConfigTunnelMaxRetransmissions=csOrionL2tpConfigTunnelMaxRetransmissions, csDs3Ds1CurrentBESs=csDs3Ds1CurrentBESs, csOrionPingCtlTimeOut=csOrionPingCtlTimeOut, csOrionDhcpRelayInRels=csOrionDhcpRelayInRels, csDot1dPortStatus=csDot1dPortStatus, csOrionFwSmtpRelayReply=csOrionFwSmtpRelayReply, csRsvpSessionTable=csRsvpSessionTable, csOrionVPNVRouterTable=csOrionVPNVRouterTable, csOrionVrPrimaryDnsServer=csOrionVrPrimaryDnsServer, csOrionMlpppBundleEventLogLevel=csOrionMlpppBundleEventLogLevel, csOrionFwDestAddr=csOrionFwDestAddr, csOrionPppoeInfo=csOrionPppoeInfo, csIsisIPRADefMetric=csIsisIPRADefMetric, csIsisCircL2PartSNPInterval=csIsisCircL2PartSNPInterval, csOrionFwTelnetPolicyXGateway=csOrionFwTelnetPolicyXGateway, csOrionFwFtpAuthStatus=csOrionFwFtpAuthStatus, csOrionSystemLoginPermRowStatus=csOrionSystemLoginPermRowStatus, csRtgPolicyEnd=csRtgPolicyEnd, csBgpNbrKeepAliveConfigured=csBgpNbrKeepAliveConfigured, csOrionMlpppBundleQueueSize=csOrionMlpppBundleQueueSize, csOrionVrSpfCleanTablesFlag=csOrionVrSpfCleanTablesFlag, csRtPolicyTermActionIsisMetricType=csRtPolicyTermActionIsisMetricType, csIsisSysMinL2LSPGenInt=csIsisSysMinL2LSPGenInt, csEthTable=csEthTable, csAtmInterfaceConfPortIndex=csAtmInterfaceConfPortIndex, csOrionFwFtpPolicyTimeout=csOrionFwFtpPolicyTimeout, csExpFilterIfRowStatus=csExpFilterIfRowStatus, csPppoeSessionTableEnd=csPppoeSessionTableEnd, csOrionFwFtpPolicyEntry=csOrionFwFtpPolicyEntry, csDs3StatTotalPESs=csDs3StatTotalPESs, csOrionQueueGroupTable=csOrionQueueGroupTable, csOrionCustomerVrUp=csOrionCustomerVrUp, csPwVcPsnType=csPwVcPsnType, csOrionEvents=csOrionEvents, csOrionPingCtlEntry=csOrionPingCtlEntry, csVpnVrfRouteTargetRowStatus=csVpnVrfRouteTargetRowStatus, csPppoeAcIfConfigTable=csPppoeAcIfConfigTable, csOrionVPNVRouterTcpConnRemPort=csOrionVPNVRouterTcpConnRemPort, csChDs3SlotIndex=csChDs3SlotIndex, csLdpVrConfRowStatus=csLdpVrConfRowStatus, csOrionVrDsByteFilterTable=csOrionVrDsByteFilterTable, csOrionViPbfFilterAction=csOrionViPbfFilterAction, csIsisCircL1ErrorMetric=csIsisCircL1ErrorMetric, csOrionMlpppBundleEntry=csOrionMlpppBundleEntry, csLdpVrVpnAutorouteAnnounce=csLdpVrVpnAutorouteAnnounce, csAtmConnAal5CpcsReceiveSduSize=csAtmConnAal5CpcsReceiveSduSize, csOrionVIfIndex=csOrionVIfIndex, csOrionPowerSupplyFWMinorRevision=csOrionPowerSupplyFWMinorRevision, csLdpTargetEntry=csLdpTargetEntry, csDs3ConfigMdlEic=csDs3ConfigMdlEic, csOrionTempAirFlowCardTable=csOrionTempAirFlowCardTable, csRtPolicyTermFromOspfTag1=csRtPolicyTermFromOspfTag1, csOrionVPNVRouterOperLocations=csOrionVPNVRouterOperLocations, csOrionFwAccessPolicy=csOrionFwAccessPolicy, csOc3LineS1S0=csOc3LineS1S0, csPwVcInboundOperStatus=csPwVcInboundOperStatus, csOrionStaticConn=csOrionStaticConn, csOrionVrPktFilterAclId=csOrionVrPktFilterAclId, csRtPolicyTermActionVpnSooOp=csRtPolicyTermActionVpnSooOp, csOrionIKECryptoMapSaLifetimeSoftKbytes=csOrionIKECryptoMapSaLifetimeSoftKbytes, csOrionVPNVRouterIpStatsEntry=csOrionVPNVRouterIpStatsEntry, csOspfNbrOptions=csOspfNbrOptions, csOrionPingResults=csOrionPingResults, csRsvpIfMaxFlowBandwidth=csRsvpIfMaxFlowBandwidth, csOrionQoSMeterYellowByteCount=csOrionQoSMeterYellowByteCount, csDs3Ds1CurrentUASs=csDs3Ds1CurrentUASs, csOrionPingResultsTimeOuts=csOrionPingResultsTimeOuts, csOrionQoSMeterProfileEntry=csOrionQoSMeterProfileEntry, csOrionIpSecStatsTxPktsDenied=csOrionIpSecStatsTxPktsDenied, csOrionVPNVRouterUdpTable=csOrionVPNVRouterUdpTable, csDs3Ds1YellowAlarmGen=csDs3Ds1YellowAlarmGen, csDs3StatCurrentLCVs=csDs3StatCurrentLCVs, csOrionIpLocalAddrPoolEndRange=csOrionIpLocalAddrPoolEndRange, csDs3E1NatBits=csDs3E1NatBits, csOrionFwHttpPolicyName=csOrionFwHttpPolicyName, csDs3Ds1Framing=csDs3Ds1Framing, csBgpNbrGroupImpPolTable=csBgpNbrGroupImpPolTable, csIgmpInterfaceLastMembQueryIntvl=csIgmpInterfaceLastMembQueryIntvl, csOrionAAAServerType=csOrionAAAServerType, csFrDlcmiStatLocalSequenceNumber=csFrDlcmiStatLocalSequenceNumber, csOrionVPNVRouterIpRouteIfIndex=csOrionVPNVRouterIpRouteIfIndex, csMplsOspfExtensionsTableEnd=csMplsOspfExtensionsTableEnd, csFRoIPCircuitType=csFRoIPCircuitType, csAtmConnICR=csAtmConnICR, csIsisManAdjNeighNSAP=csIsisManAdjNeighNSAP, csOrionVIfaceTable=csOrionVIfaceTable, csOspfIfRtrDeadInterval=csOspfIfRtrDeadInterval, csOrionFwHttpPolicyTable=csOrionFwHttpPolicyTable, csBgpGenDefaultLocalPref=csBgpGenDefaultLocalPref, csOrionAccessListInfo=csOrionAccessListInfo, csMplsPathVpnAutoRouteAnnounce=csMplsPathVpnAutoRouteAnnounce, csOrionSyslogdLevel5=csOrionSyslogdLevel5, csPwVcSeqNumber=csPwVcSeqNumber, csOrionIpSecStatsEspCryptoCepEstablishFailed=csOrionIpSecStatsEspCryptoCepEstablishFailed, csOrionL2tpConfigPppRestartTimeout=csOrionL2tpConfigPppRestartTimeout, csOrionTraceRouteResultHopNum=csOrionTraceRouteResultHopNum, csMplsVrPathRecordRoute=csMplsVrPathRecordRoute, csOrionGenSnmp=csOrionGenSnmp, csOrionAirFlowCardFWRelease=csOrionAirFlowCardFWRelease, csEthSubIfChannelIndex=csEthSubIfChannelIndex, csOrionTunnelSwitchTargetMaxSession=csOrionTunnelSwitchTargetMaxSession, csOrionIKEStateInitRespondFlag=csOrionIKEStateInitRespondFlag, csOrionDhcpRelayOutAcks=csOrionDhcpRelayOutAcks, csOrionIKECryptoMapTransformSet4=csOrionIKECryptoMapTransformSet4, csOrionOspfIfStateChange=csOrionOspfIfStateChange, csPppoeSessionTranmittedPkts=csPppoeSessionTranmittedPkts, csOrionOc3AlarmType=csOrionOc3AlarmType, csOrionBladeInserted=csOrionBladeInserted, csExpPolRipNbrIp=csExpPolRipNbrIp, csOspfAreaAggregateTable=csOspfAreaAggregateTable, csOc3PathCurrentFCs=csOc3PathCurrentFCs, csIsisCircL1CircID=csIsisCircL1CircID, csOrionBladeInfo=csOrionBladeInfo, csPolicyRouteFilterPrefix=csPolicyRouteFilterPrefix, csFrDlcmiSlot=csFrDlcmiSlot, csOrionSyslogdFacility7=csOrionSyslogdFacility7, csOrionIKECryptoMapNumber=csOrionIKECryptoMapNumber, csOrionIsisEnd=csOrionIsisEnd, csOrionL2tpSessionRemoteRWS=csOrionL2tpSessionRemoteRWS, csDot1dBaseBridgeTable=csDot1dBaseBridgeTable, csOrionVPNVRouterUdpListenerEntry=csOrionVPNVRouterUdpListenerEntry, csOrionVrDhcpRelayMaxHops=csOrionVrDhcpRelayMaxHops, csAtmConnEncapType=csAtmConnEncapType, csIsisCircL2DelayMetric=csIsisCircL2DelayMetric, csOrionVrSpfUdpUnmatchedTableEntries=csOrionVrSpfUdpUnmatchedTableEntries, csOrionMlpppLinkRowStatus=csOrionMlpppLinkRowStatus, csOrionNatInfo=csOrionNatInfo, csMplsTrafficEnggAdminStatus=csMplsTrafficEnggAdminStatus, csOrionIKESvrParamAuthenticationList=csOrionIKESvrParamAuthenticationList, csOc3AtmCurrentIdleCells=csOc3AtmCurrentIdleCells, csRipGlobalConfStatus=csRipGlobalConfStatus, csIsisCircL2DefaultMetric=csIsisCircL2DefaultMetric, csOrionVPNVRouterTcpConnRemAddress=csOrionVPNVRouterTcpConnRemAddress, csOrionGenAclStatus=csOrionGenAclStatus, csMplsPathExclude=csMplsPathExclude, csOrionLogLinkDown=csOrionLogLinkDown, csExpPolProtocol=csExpPolProtocol, csPwVcCreateTime=csPwVcCreateTime, csOrionRadiusAcctVrId=csOrionRadiusAcctVrId, csRipGlobalConfRfc1058CalcStatus=csRipGlobalConfRfc1058CalcStatus, SPPBaudRate=SPPBaudRate, csOrionVrRadiusSvrPriority=csOrionVrRadiusSvrPriority, csBgpNbrGroupExpPolTable=csBgpNbrGroupExpPolTable, csOrionQoSMeterProfileCIR=csOrionQoSMeterProfileCIR, csPppoeSessionUserName=csPppoeSessionUserName, csOrionL2tpSessionRemoteFlowControl=csOrionL2tpSessionRemoteFlowControl, csOrionQueueInfo=csOrionQueueInfo, csIsisISAdjAreaAddrCircIndex=csIsisISAdjAreaAddrCircIndex, csOrionOspfVirtNbrStateChange=csOrionOspfVirtNbrStateChange, csOrionVPNVRouterManagedIpRouteMetric4=csOrionVPNVRouterManagedIpRouteMetric4, csOrionAAAServerName=csOrionAAAServerName, csBgpPol=csBgpPol, csOrionAAAServerListPriority=csOrionAAAServerListPriority)
mibBuilder.exportSymbols("COSINE-ORION-MIB", OperState=OperState, csOrionFileSysResultFilename=csOrionFileSysResultFilename, csIsisISAdjNeighSysType=csIsisISAdjNeighSysType, csLdpTargetKeepAliveHoldTimer=csLdpTargetKeepAliveHoldTimer, csOrionMlpppBundleTxMRRU=csOrionMlpppBundleTxMRRU, csOrionModemConnectWait=csOrionModemConnectWait, csAtmInterfaceConfOamLoopBackTransmitFail=csAtmInterfaceConfOamLoopBackTransmitFail, csOrionModemControl=csOrionModemControl, csOspfIfMetricIpAddress=csOspfIfMetricIpAddress, csOrionEncryptInfo=csOrionEncryptInfo, csFrDlcmiDceN392=csFrDlcmiDceN392, csIsisSysMaxAreaAddrMismatches=csIsisSysMaxAreaAddrMismatches, csOrionFwFtpPolicyFunctionIds=csOrionFwFtpPolicyFunctionIds, csPosInterfaceConfPortIndex=csPosInterfaceConfPortIndex, csAtmConnReceivedOamLoopBackResponses=csAtmConnReceivedOamLoopBackResponses, csMplsExtensionsRowStatus=csMplsExtensionsRowStatus, csOrionVIfRateLimitNumBytes=csOrionVIfRateLimitNumBytes, csDs3StatTotalLCVs=csDs3StatTotalLCVs, csOrionBladeModelNumb=csOrionBladeModelNumb, csOrionFwAolConfig=csOrionFwAolConfig, csOrionFwDestRowStatus=csOrionFwDestRowStatus, csAtmInterfaceConfTransmittedOamLoopBackRequests=csAtmInterfaceConfTransmittedOamLoopBackRequests, csOrionVPNVRouterIpRouteMetric5=csOrionVPNVRouterIpRouteMetric5, csLdpVrAutorouteAnnounce=csLdpVrAutorouteAnnounce, csImpPolPreference=csImpPolPreference, csOrionFwPlugPolicyRemoteServer=csOrionFwPlugPolicyRemoteServer, csAtmConnDynamicArpCacheRowStatus=csAtmConnDynamicArpCacheRowStatus, csOrionDevicePresent=csOrionDevicePresent, csOc3AdminStatus=csOc3AdminStatus, csOrionNatGeneralParamEntry=csOrionNatGeneralParamEntry, csOrionQoSMeterGreenByteCount=csOrionQoSMeterGreenByteCount, csIsisISAdjProtSuppTable=csIsisISAdjProtSuppTable, csOspfIfMd5Entry=csOspfIfMd5Entry, csVpnVrfDescription=csVpnVrfDescription, csOrionDhcpRelayInAcks=csOrionDhcpRelayInAcks, csOrionInletAirTempStatusChange=csOrionInletAirTempStatusChange, csPwVcPriority=csPwVcPriority, csPwVcEntry=csPwVcEntry, csFrDlcmiStatFullStatusResponses=csFrDlcmiStatFullStatusResponses, csOrionTraceRouteReqDestAddr=csOrionTraceRouteReqDestAddr, csOrionFwDmzIfAddr=csOrionFwDmzIfAddr, csBgpGenMaxPfxType=csBgpGenMaxPfxType, csFrCircuitFwdLink=csFrCircuitFwdLink, csDs3ConfigLoopbackType=csDs3ConfigLoopbackType, csOrionIgmp=csOrionIgmp, csOspfIfMd5Table=csOspfIfMd5Table, csOrionVrDsByteFilterIndex=csOrionVrDsByteFilterIndex, csOrionFwSmtpPolicyInternalMailHub=csOrionFwSmtpPolicyInternalMailHub, csBgpNbrGroupRowStatus=csBgpNbrGroupRowStatus, csOrionVrRadiusAcctSvrTable=csOrionVrRadiusAcctSvrTable, csOc3TimeElapsed=csOc3TimeElapsed, csOc3LineDayFCs=csOc3LineDayFCs, csOrionManualCryptoMapInboundESPAuthKey=csOrionManualCryptoMapInboundESPAuthKey, csOrionFwHttpLog=csOrionFwHttpLog, csBgpNbrVpnLogAreaFlag=csBgpNbrVpnLogAreaFlag, csDs3ConfigLineCoding=csDs3ConfigLineCoding, csAtmInterfaceConfReceivedGenericErrors=csAtmInterfaceConfReceivedGenericErrors, csFrDlcmiStatEntry=csFrDlcmiStatEntry, csBgpConfed=csBgpConfed, csOrionIpSecTransform3=csOrionIpSecTransform3, csIsisCircPtToPtCircID=csIsisCircPtToPtCircID, csPwVcVlanId=csPwVcVlanId, csIsisSysAuthAreaTransPwd=csIsisSysAuthAreaTransPwd, csOrionIpSecStateDirection=csOrionIpSecStateDirection, csOrionL2tpTunnelStatsTable=csOrionL2tpTunnelStatsTable, csOrionConfigSaveFileName=csOrionConfigSaveFileName, csFrErrTable=csFrErrTable, csOrionServiceTemplateConnProfileTable=csOrionServiceTemplateConnProfileTable, csOrionVPNVRouterUdpEntry=csOrionVPNVRouterUdpEntry, csOrionChangeSourceUserName=csOrionChangeSourceUserName, csOrionIpSecStateRemoteEndPoint=csOrionIpSecStateRemoteEndPoint, csOrionSystemLoginDomainEntry=csOrionSystemLoginDomainEntry, csOrionVrPktFilterEvlogStatus=csOrionVrPktFilterEvlogStatus, csOrionGreStatsSequenceErrors=csOrionGreStatsSequenceErrors, csOrionPptpInfo=csOrionPptpInfo, csRsvpIfUpRsbsCreated=csRsvpIfUpRsbsCreated, csIgmpInterfaceQueryInterval=csIgmpInterfaceQueryInterval, csBgpNbrIpv4AdminStatus=csBgpNbrIpv4AdminStatus, csOrionNatStaticVIInsideGlobalAddress=csOrionNatStaticVIInsideGlobalAddress, csOrionIpSecStatsAhCurrentInboundSAs=csOrionIpSecStatsAhCurrentInboundSAs, csOrionTempAirFlowCardEntry=csOrionTempAirFlowCardEntry, csOc3ApsControl=csOc3ApsControl, csRtPolicyTermFromIsisMetricType=csRtPolicyTermFromIsisMetricType, csPwe3ConfEntry=csPwe3ConfEntry, csOrionQueueGroupPriorityIndex=csOrionQueueGroupPriorityIndex, csOrionIpSecStatsAhDecryptPktsBad=csOrionIpSecStatsAhDecryptPktsBad, csOrionVrQoSFilterIndex=csOrionVrQoSFilterIndex, csOrionViQoSFilterMeterName=csOrionViQoSFilterMeterName, csFrDlcmiDceN393=csFrDlcmiDceN393, csOrionTraceRouteResultIndex=csOrionTraceRouteResultIndex, csOrionVPNVRouterIpNetToMediaIfIndex=csOrionVPNVRouterIpNetToMediaIfIndex, csRipGlobalConfTable=csRipGlobalConfTable, csAtmInterfaceConfReceivedOperationallyDown=csAtmInterfaceConfReceivedOperationallyDown, csMplsLspPreference=csMplsLspPreference, csOrionPingEnd=csOrionPingEnd, csDs3Ds1TotalLCVs=csDs3Ds1TotalLCVs, csLdpVrAdminStatus=csLdpVrAdminStatus, csOspfSpfRuns=csOspfSpfRuns, csOrionSystemLoginRoleEntry=csOrionSystemLoginRoleEntry, csMplsVrPathConfRowStatus=csMplsVrPathConfRowStatus, csIsisSysPollESHelloRate=csIsisSysPollESHelloRate, csOrionFwSmtpInternalMailHub=csOrionFwSmtpInternalMailHub, csOrionVrPktFilterRowStatus=csOrionVrPktFilterRowStatus, csDs3Ds1TotalSESs=csDs3Ds1TotalSESs, csOrionEngineUtilizationMedium=csOrionEngineUtilizationMedium, csRsvpIfQueueRowStatus=csRsvpIfQueueRowStatus, csOrionFRoIPTransportAdminStatus=csOrionFRoIPTransportAdminStatus, csOrionVPNVRouterManagedIpRouteRetainOption=csOrionVPNVRouterManagedIpRouteRetainOption, csOrionBladeType=csOrionBladeType, csRtPolicyTermTableEnd=csRtPolicyTermTableEnd, csPosInterfaceConfTable=csPosInterfaceConfTable, csOrionIpSecStatsEspTotalOutboundSAs=csOrionIpSecStatsEspTotalOutboundSAs, csOrionDhcpRelayOutOffers=csOrionDhcpRelayOutOffers, csOrionTemperature=csOrionTemperature, csOrionFwAccessPriority=csOrionFwAccessPriority, csRtPolicyPrefixListPrefixLen=csRtPolicyPrefixListPrefixLen, csOrionDhcpRelayInNaks=csOrionDhcpRelayInNaks, csLdpVrConfTable=csLdpVrConfTable, csOrionGreStatsUnknownProto=csOrionGreStatsUnknownProto, csIsisSysLogAdjacencyChanges=csIsisSysLogAdjacencyChanges, csOrionIKECertStatus=csOrionIKECertStatus, csAtmInterfaceConfEntry=csAtmInterfaceConfEntry, csEthOperStatus=csEthOperStatus, csRtPolicyTermFromVpnRd=csRtPolicyTermFromVpnRd, csOrionFwNwGroupMask=csOrionFwNwGroupMask, csOrionMlpppLinkSubIfIndex=csOrionMlpppLinkSubIfIndex, csOrionIpSecStatsAhTotalOutboundSAs=csOrionIpSecStatsAhTotalOutboundSAs, csRipIfStatRcvBadRoutes=csRipIfStatRcvBadRoutes, csOrionFwDestProxy=csOrionFwDestProxy, csOrionOspfOriginateLsa=csOrionOspfOriginateLsa, csAtmInterfaceConfReceivedCRCErrors=csAtmInterfaceConfReceivedCRCErrors, csOc3PathCurrentStatus=csOc3PathCurrentStatus, csRtPolicyUserEntry=csRtPolicyUserEntry, csOrionSystemLoginRoleTable=csOrionSystemLoginRoleTable, csOc3LinePrevDayUASs=csOc3LinePrevDayUASs, csIsisIPRADelMetric=csIsisIPRADelMetric, csOrionFwNntpConfig=csOrionFwNntpConfig, csOrionIKEPolicyAuthentication=csOrionIKEPolicyAuthentication, csOrionIKESvrParamSPISize=csOrionIKESvrParamSPISize, csOrionQueueMaxRandomForYellow=csOrionQueueMaxRandomForYellow, csRtPolicyUserIndexValue=csRtPolicyUserIndexValue, csOrionFanTrayFWReleaseDate=csOrionFanTrayFWReleaseDate, csIsisCircDRL1HelloTimer=csIsisCircDRL1HelloTimer, csRsvpIfResvIn=csRsvpIfResvIn, csPppoeAcConfig=csPppoeAcConfig, csOrionEngineLoaderProduct=csOrionEngineLoaderProduct, csOrionNatInsideLocalPort=csOrionNatInsideLocalPort, csRipStats=csRipStats, csIsisIPRASNPAAddress=csIsisIPRASNPAAddress, csOrionGenAclDstAddressList=csOrionGenAclDstAddressList, csOrionVPNVRouterAbortFailOver=csOrionVPNVRouterAbortFailOver, csOrionIKESvrParamMaxSACount=csOrionIKESvrParamMaxSACount, csOrionVrRadiusSvrEntry=csOrionVrRadiusSvrEntry, csBgpGenDampHalfLife=csBgpGenDampHalfLife, csOrionFwGenProxyEntry=csOrionFwGenProxyEntry, csRipImpPolTable=csRipImpPolTable, csOrionVrDhcpRelayServerRowStatus=csOrionVrDhcpRelayServerRowStatus, csOrionVPNVRouterUdpNoPorts=csOrionVPNVRouterUdpNoPorts, csOrionEngineDataCacheSize=csOrionEngineDataCacheSize, csLdpEntityAdminStatus=csLdpEntityAdminStatus, csOrionFwLdapPolicyName=csOrionFwLdapPolicyName, csDs3StatIntervalCESs=csDs3StatIntervalCESs, csFrDlcmiDceT392=csFrDlcmiDceT392, csEthSubIfVlanName=csEthSubIfVlanName, csOrionOc3FarEndPath=csOrionOc3FarEndPath, csAtmConnReceivedBufferAllocationFail=csAtmConnReceivedBufferAllocationFail, csDs3ConfigAdminStatus=csDs3ConfigAdminStatus, csIsisCircL2HelloTimer=csIsisCircL2HelloTimer, csOrionQoSMeterProfileTable=csOrionQoSMeterProfileTable, csOrionTrapReceiverComm=csOrionTrapReceiverComm, csEthSubIfTable=csEthSubIfTable, csOrionBladeTable=csOrionBladeTable, csOrionVncQueueAclId=csOrionVncQueueAclId, csOspfIfPassive=csOspfIfPassive, csOrionQueueGroupOperStatus=csOrionQueueGroupOperStatus, csOrionFwEvLogEntry=csOrionFwEvLogEntry, csOrionConnectionProfileName=csOrionConnectionProfileName, csOrionNatStaticTranslationEntry=csOrionNatStaticTranslationEntry, csIsisIPRASysInstance=csIsisIPRASysInstance, csOrionVpnAcctEntry=csOrionVpnAcctEntry, csAtmConnMBS=csAtmConnMBS, csOrionDHCPInfoEnd=csOrionDHCPInfoEnd, csOrionLogLinkModuleIndex=csOrionLogLinkModuleIndex, csOspfAdminStat=csOspfAdminStat, csOspfVirtNbrArea=csOspfVirtNbrArea, csOrionFwHttpPortEntry=csOrionFwHttpPortEntry, csDs3ConfigTestT1Id=csDs3ConfigTestT1Id, csOrionIpSecStateSAType=csOrionIpSecStateSAType, csDs3Ds1TotalESs=csDs3Ds1TotalESs, csOrionVrSpfIcmpCurrentConnTableEntries=csOrionVrSpfIcmpCurrentConnTableEntries, csVpnVrfTable=csVpnVrfTable, csOrionL2tpStatsPayloadRecvDiscards=csOrionL2tpStatsPayloadRecvDiscards, csImpPolOrigin=csImpPolOrigin, csOrionIKEStatsPhase2OutPkts=csOrionIKEStatsPhase2OutPkts, csAtmInterfaceConfMyIfName=csAtmInterfaceConfMyIfName, csOrionMlpppBundleIndex=csOrionMlpppBundleIndex, csDs3ConfigModuleIndex=csDs3ConfigModuleIndex, csOrionViStatsOutNUcastPkts=csOrionViStatsOutNUcastPkts, csOrionOspfTxRetransmit=csOrionOspfTxRetransmit, csDs3ConfigMdlPath=csDs3ConfigMdlPath, csRipIfConfSend=csRipIfConfSend, csOc3LineIntervalSESs=csOc3LineIntervalSESs, csFrDlcmiMulticast=csFrDlcmiMulticast, csOrionVrIfManagerSlotIndex=csOrionVrIfManagerSlotIndex, csPosInterfaceConfEntry=csPosInterfaceConfEntry, csOc3AtmIntervalRecievedCells=csOc3AtmIntervalRecievedCells, csAtmConnDynamicArpCacheMacAddress=csAtmConnDynamicArpCacheMacAddress, csAtmConnInArpStatisticsTableEnd=csAtmConnInArpStatisticsTableEnd, csAtmInterfaceConfIlmiVersion=csAtmInterfaceConfIlmiVersion, csOrionFwSmtpRelayAccess=csOrionFwSmtpRelayAccess, csOspfAreaName=csOspfAreaName, csIsisSysType=csIsisSysType, csFrDlcmiAsyncEnabled=csFrDlcmiAsyncEnabled, csOrionIKEStatsPhase2Negotiations=csOrionIKEStatsPhase2Negotiations, csRsvpIfBadPathTearIn=csRsvpIfBadPathTearIn, csOrionSystemBootImageName3=csOrionSystemBootImageName3, csOrionNatStaticNetmask=csOrionNatStaticNetmask, csFrDlcmiFullEnquiryInterval=csFrDlcmiFullEnquiryInterval, csOrionVPNVRouterIpRouteRowStatus=csOrionVPNVRouterIpRouteRowStatus, csOrionNatStaticVIInsideLocalAddress=csOrionNatStaticVIInsideLocalAddress, csOspfNbmaNbrPermanence=csOspfNbmaNbrPermanence, csOrionFwInsideIfAddr=csOrionFwInsideIfAddr, csIsisManAreaAddr=csIsisManAreaAddr, csOrionEngineOperAttributes=csOrionEngineOperAttributes, csFrCircuitThroughput=csFrCircuitThroughput, csOrionFRoIPTransportDefaultSlot=csOrionFRoIPTransportDefaultSlot, csPppoeAcIfSubIfIndex=csPppoeAcIfSubIfIndex, csOrionFwSmtpRelaySource=csOrionFwSmtpRelaySource, csOrionCiscoHdlcModuleIndex=csOrionCiscoHdlcModuleIndex, csOrionSystemNumberOfBlades=csOrionSystemNumberOfBlades, csOrionBgpNbrMaxPfxLimit=csOrionBgpNbrMaxPfxLimit, csLdpTargetAdminStatus=csLdpTargetAdminStatus, csBgpNbrGroupNm=csBgpNbrGroupNm, csOrionIKEStateAuthenticationType=csOrionIKEStateAuthenticationType, csOrionGreKeyEnable=csOrionGreKeyEnable, csDs3Ds1CurrentESs=csDs3Ds1CurrentESs, csOrionL2tpTunnelStatus=csOrionL2tpTunnelStatus, csOrionIpLocalAddrPoolTable=csOrionIpLocalAddrPoolTable, csAtmConnVci=csAtmConnVci, csRtPolicyTermActionOspfMetricType=csRtPolicyTermActionOspfMetricType, csIsisSysVersion=csIsisSysVersion, csOrionMlpppBundleOperStatus=csOrionMlpppBundleOperStatus, csDs3StatCurrentPSESs=csDs3StatCurrentPSESs, csDs3StatTotalLESs=csDs3StatTotalLESs, csAtmConnOamLoopbackRetryPvcDownCount=csAtmConnOamLoopbackRetryPvcDownCount, csAtmConnIpAddressTable=csAtmConnIpAddressTable, csOrionVrSpfUdpTotalConnTableEntries=csOrionVrSpfUdpTotalConnTableEntries, csOrionVPNVRouterManagedIpRouteColor1=csOrionVPNVRouterManagedIpRouteColor1, csOrionVPNVRouterIpDsByte=csOrionVPNVRouterIpDsByte, csOrionIKEStatsPhase2InPkts=csOrionIKEStatsPhase2InPkts, csOrionPowerSupplyFWReleaseDate=csOrionPowerSupplyFWReleaseDate, csOrionSyslogdFacility10=csOrionSyslogdFacility10, csOrionConfigChange=csOrionConfigChange, csRtPolicyTermFromBgpCommNamesListFlag=csRtPolicyTermFromBgpCommNamesListFlag)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFwAccessEntry=csOrionFwAccessEntry, csOrionIpSecStatsAhEncryptPktsBad=csOrionIpSecStatsAhEncryptPktsBad, csOrionVPNVRouterUdpListenerLocalPort=csOrionVPNVRouterUdpListenerLocalPort, csDot1dPortType=csDot1dPortType, csOspfGeneralEntry=csOspfGeneralEntry, csBgpNbrGroupExpPolRowStatus=csBgpNbrGroupExpPolRowStatus, csOrionFwPop3PolicyName=csOrionFwPop3PolicyName, csOrionViQoSFilterServiceCategory=csOrionViQoSFilterServiceCategory, csOspfIfAreaId=csOspfIfAreaId, csOc3LineDayTable=csOc3LineDayTable, csOrionIKECryptoMapLocalIdentity=csOrionIKECryptoMapLocalIdentity, csIsisSystem=csIsisSystem, csPolicyRouteFilterPrefix2=csPolicyRouteFilterPrefix2, csOrionFwSmtpSpamEntry=csOrionFwSmtpSpamEntry, csRsvpIfRefreshMultiple=csRsvpIfRefreshMultiple, csOrionPppIfModuleIndex=csOrionPppIfModuleIndex, csIsisSysSPFL2Int=csIsisSysSPFL2Int, csOc3PathCurrentEntry=csOc3PathCurrentEntry, csIsisCircType=csIsisCircType, csBgpNbrGroupExpPolId=csBgpNbrGroupExpPolId, csOrionFwMsSqlPolicyEntry=csOrionFwMsSqlPolicyEntry, csOrionCiscoHdlcAdminStatus=csOrionCiscoHdlcAdminStatus, csOrionBladeHwVer=csOrionBladeHwVer, csOrionSystemLoginServer=csOrionSystemLoginServer, csOrionViStatsRateLimitRxPktsSubmitted=csOrionViStatsRateLimitRxPktsSubmitted, csOrionIKECryptoMapRemoteIdentity2=csOrionIKECryptoMapRemoteIdentity2, csFRoIPCircuitDiscards=csFRoIPCircuitDiscards, csOc3PosSentFrameUnderrunAborted=csOc3PosSentFrameUnderrunAborted, csDs3StatCurrentCSESs=csDs3StatCurrentCSESs, csBgpNetwork=csBgpNetwork, csExpPolEntry=csExpPolEntry, csOrionAAAServerTimeout=csOrionAAAServerTimeout, csOrionSystemBootLocalIpAddr=csOrionSystemBootLocalIpAddr, csOrionViStatsRateLimitTxBytesDropped=csOrionViStatsRateLimitTxBytesDropped, csAtmConnArpCacheSize=csAtmConnArpCacheSize, csIsisCircL2Password=csIsisCircL2Password, csOrionAAAServerRowStatus=csOrionAAAServerRowStatus, csOrionDynamicCryptoMapEntry=csOrionDynamicCryptoMapEntry, csOrionVrRadiusSvrKey=csOrionVrRadiusSvrKey, csOrionMlpppBundleRxMRRU=csOrionMlpppBundleRxMRRU, csOrionAAAServiceInfo=csOrionAAAServiceInfo, csOrionFwNntpPolicyTimeout=csOrionFwNntpPolicyTimeout, csOrionVrRadiusConfigTable=csOrionVrRadiusConfigTable, csOrionMlpppBundleTable=csOrionMlpppBundleTable, csOspfStubMetric=csOspfStubMetric, csOrionBladeTemperatureSensor4=csOrionBladeTemperatureSensor4, csOrionFwGenProxyChildLimit=csOrionFwGenProxyChildLimit, csEthStatsTx256To511Pkts=csEthStatsTx256To511Pkts, csExpFilterMatchingExp=csExpFilterMatchingExp, csOrionAAAServerListType=csOrionAAAServerListType, csOrionMlpppBundlePacketsReceived=csOrionMlpppBundlePacketsReceived, csAtmInterfaceConfTransmitOperationallyDown=csAtmInterfaceConfTransmitOperationallyDown, csFrCircuitLastTimeChange=csFrCircuitLastTimeChange, csOrionServiceTemplateEntry=csOrionServiceTemplateEntry, csOrionVIfRateLimitRate=csOrionVIfRateLimitRate, csOspfNbrEvents=csOspfNbrEvents, csOrionL2tpConfigTunnelAuthentication=csOrionL2tpConfigTunnelAuthentication, csMplsPathInclude=csMplsPathInclude, csOrionFwNwGroupInterface=csOrionFwNwGroupInterface, csOrionVPNVRouterManagedIpRouteProto=csOrionVPNVRouterManagedIpRouteProto, csIsisSysAuthDomainTransPwd=csIsisSysAuthDomainTransPwd, csOrionFwAolPolicyRemoteServer=csOrionFwAolPolicyRemoteServer, csOrionPppRemoteUserName=csOrionPppRemoteUserName, csOrionL2tpStatsDrainingTunnels=csOrionL2tpStatsDrainingTunnels, csOrionPppConfigTable=csOrionPppConfigTable, csOspfIfAuthKey=csOspfIfAuthKey, csRtPolicyTermActionPreference2Op=csRtPolicyTermActionPreference2Op, csOrionFileSysResultEntry=csOrionFileSysResultEntry, csFrDlcmiChannel=csFrDlcmiChannel, csOrionIpSecStatsEspTotalInboundSAs=csOrionIpSecStatsEspTotalInboundSAs, csOrionSystemBootImageName5=csOrionSystemBootImageName5, csIgmpCacheStatus=csIgmpCacheStatus, csOrionDHCPRelayInfo=csOrionDHCPRelayInfo, csAtmInterfaceConfModuleIndex=csAtmInterfaceConfModuleIndex, csIsisIPRADefMetricType=csIsisIPRADefMetricType, csOrionVIfFrameType=csOrionVIfFrameType, DLCI=DLCI, csAtmInterfaceConfMaxVccs=csAtmInterfaceConfMaxVccs, csOrionViStatsInUnknownProtos=csOrionViStatsInUnknownProtos, LevelState=LevelState, csOspfVirtIfTransitDelay=csOspfVirtIfTransitDelay, csFrDlcmiStatFullStatusEnquiries=csFrDlcmiStatFullStatusEnquiries, csOspfVirtIfAuthType=csOspfVirtIfAuthType, csOrionFwPlugPolicyName=csOrionFwPlugPolicyName, csMplsOspfExtensionsEntry=csMplsOspfExtensionsEntry, csOrionNumericListValue=csOrionNumericListValue, csOc3ApsForce=csOc3ApsForce, csAtmConnReceivedCRCErrors=csAtmConnReceivedCRCErrors, csRtPolicyTermToOspfAreaType=csRtPolicyTermToOspfAreaType, csOrionGreCheckSum=csOrionGreCheckSum, csRsvpVrEventLogLevel=csRsvpVrEventLogLevel, csOrionSystemBootUserName=csOrionSystemBootUserName, csUnchanDs3ConfigMdlPfi=csUnchanDs3ConfigMdlPfi, csFrDlcmiStatUnknownMessages=csFrDlcmiStatUnknownMessages, csOrionVPNVRouterIpRouteTos=csOrionVPNVRouterIpRouteTos, csImpPolHomeAS=csImpPolHomeAS, csPwVcAdminStatus=csPwVcAdminStatus, csOrionVPNVRouterIpRouteMetric1=csOrionVPNVRouterIpRouteMetric1, csPwVcTestResult=csPwVcTestResult, csIsisSysLogLevelFlag=csIsisSysLogLevelFlag, csIsisSysLSPL2DbaseOloads=csIsisSysLSPL2DbaseOloads, csOrionNatInsideGlobalPort=csOrionNatInsideGlobalPort, AtmVpIdentifier=AtmVpIdentifier, csAtmConnReceivedPackets=csAtmConnReceivedPackets, csIsisCircAdjChanges=csIsisCircAdjChanges, LongDisplayString=LongDisplayString, csOspfIfMd5RowStatus=csOspfIfMd5RowStatus, csBgpNbrPassive=csBgpNbrPassive, csOrionLnsConfigAdminStatus=csOrionLnsConfigAdminStatus, csVpnVrfPreference=csVpnVrfPreference, csFrCircuitOperStatus=csFrCircuitOperStatus, csOrionEngineTemperature=csOrionEngineTemperature, csPppoeAcIfChannelIndex=csPppoeAcIfChannelIndex, csPppoeAcIfStatMalformedPkts=csPppoeAcIfStatMalformedPkts, csOrionFwLdapPolicyRemoteServer=csOrionFwLdapPolicyRemoteServer, csMplsVrPathConfEntry=csMplsVrPathConfEntry, BigMetric=BigMetric, csOrionIKEStatsPhase1InPktsRejected=csOrionIKEStatsPhase1InPktsRejected, csOrionLogLinkSlotIndex=csOrionLogLinkSlotIndex, csFrDlcmiTable=csFrDlcmiTable, csMplsInterfaceConfEntry=csMplsInterfaceConfEntry, csOrionVrPktFilterTable=csOrionVrPktFilterTable, csIsisSysPartChanges=csIsisSysPartChanges, csIsisCirc=csIsisCirc, csOrionFwAccessDestAddrList=csOrionFwAccessDestAddrList, csOrionIKEPolicySaLifetimeHardSec=csOrionIKEPolicySaLifetimeHardSec, csAtmConnTransmitQueueFull=csAtmConnTransmitQueueFull, csOc3MediumLineType=csOc3MediumLineType, csOrionIKEPolicyName=csOrionIKEPolicyName, csRsvpSessionUpRsbs=csRsvpSessionUpRsbs, csOrionFwHttpAuthPerUserAuthFilter=csOrionFwHttpAuthPerUserAuthFilter, csOrionSystemBootIndex=csOrionSystemBootIndex, csOrionPppIfConfigReqRtx=csOrionPppIfConfigReqRtx, csOrionL2tpSessionLocalIpAddress=csOrionL2tpSessionLocalIpAddress, csOrionIKEDialupConnRemIpAddress=csOrionIKEDialupConnRemIpAddress, csOrionCiscoHdlcSlarpKeepAlive=csOrionCiscoHdlcSlarpKeepAlive, csOc3PosRcvFrameMinPacketError=csOc3PosRcvFrameMinPacketError, csOrionVrIfManagerModuleIndex=csOrionVrIfManagerModuleIndex, csOrionVrDhcpRelayServerAddress=csOrionVrDhcpRelayServerAddress, csIsisIPRAErrMetric=csIsisIPRAErrMetric, csRipExpPolId=csRipExpPolId, csEthPortIndex=csEthPortIndex, csDs3Ds1TotalUASs=csDs3Ds1TotalUASs, csIsisSysTable=csIsisSysTable, csOrionFwNntpPolicyEntry=csOrionFwNntpPolicyEntry, csAtmInterfaceConfTransmitBadLength=csAtmInterfaceConfTransmitBadLength, csPppoeSessionServiceName=csPppoeSessionServiceName, csRtPolicyTermActionVpnRouteTargetNamesListFlag=csRtPolicyTermActionVpnRouteTargetNamesListFlag, csIsisSysMaxLSPGenInt=csIsisSysMaxLSPGenInt, csOrionIKECertMapName=csOrionIKECertMapName, csOrionDsByteFilterInfoEnd=csOrionDsByteFilterInfoEnd, csOrionStatusPanelPortIndex=csOrionStatusPanelPortIndex, csOrionVPNVRouterManagedIpRouteColor2=csOrionVPNVRouterManagedIpRouteColor2, csOrionFwLdapConfig=csOrionFwLdapConfig, csRsvpIfQueueID=csRsvpIfQueueID, csOrionFwGenProxyConfigEnd=csOrionFwGenProxyConfigEnd, csOrionSnmpAgentErrorNmsPort=csOrionSnmpAgentErrorNmsPort, csDot1dTpFdbEntry=csDot1dTpFdbEntry, csOrionVPNVRouterIpAddrTable=csOrionVPNVRouterIpAddrTable, csOspfVirtNbrLsRetransQLen=csOspfVirtNbrLsRetransQLen, csBgpGenLogAreaFlag=csBgpGenLogAreaFlag, csIsisManAreaAddrExistState=csIsisManAreaAddrExistState, csOrionMpls=csOrionMpls, csEthStatsRx128To255Pkts=csEthStatsRx128To255Pkts, csRsvpSessionExtendedTunnelID=csRsvpSessionExtendedTunnelID, csRtPolicyTermActionBgpASPathName=csRtPolicyTermActionBgpASPathName, csOrionFwHttpAuthTable=csOrionFwHttpAuthTable, csOrionFwTelnetAuthPerUserAuthFilter=csOrionFwTelnetAuthPerUserAuthFilter, csOrionGenAclTable=csOrionGenAclTable, csLdpTargetTable=csLdpTargetTable, csOspfLsdbTable=csOspfLsdbTable, csOrionSyslogdLevel3=csOrionSyslogdLevel3, csOrionIpSecStatsEspTotalInboundSAsFailed=csOrionIpSecStatsEspTotalInboundSAsFailed, csPOSInfo=csPOSInfo, csPppoeSessionIPPoolNameInUse=csPppoeSessionIPPoolNameInUse, csOrionAirFlowCardIndex=csOrionAirFlowCardIndex, csOrionFwProxyDaemonPortNumber=csOrionFwProxyDaemonPortNumber, csOrionDhcpRelayOutDiscs=csOrionDhcpRelayOutDiscs, csAtmConnMCR=csAtmConnMCR, csTelnetSvrConfAdminStatus=csTelnetSvrConfAdminStatus, csOrionEngineLoaderDate=csOrionEngineLoaderDate, csAtmConnTable=csAtmConnTable, csOrionFwSmtpLogSpam=csOrionFwSmtpLogSpam, csVpnVrfMaxRoutesExceedAction=csVpnVrfMaxRoutesExceedAction, csIgmpInterfaceGroups=csIgmpInterfaceGroups, csOrionVPNVRouterIpInReceives=csOrionVPNVRouterIpInReceives, csDs3StatIntervalLSESs=csDs3StatIntervalLSESs, csOrionMlpppInfoEnd=csOrionMlpppInfoEnd, csMplsPathPwe3AutoRouteAnnounce=csMplsPathPwe3AutoRouteAnnounce, csRsvpIfDownPsbsCreated=csRsvpIfDownPsbsCreated, csMplsLspAge=csMplsLspAge, csOrionL2tpStatsFailedTunnels=csOrionL2tpStatsFailedTunnels, csOrionIKEPolicyPfsGroup=csOrionIKEPolicyPfsGroup, csOrionL2tpTunnelEmptyTunnelTimeout=csOrionL2tpTunnelEmptyTunnelTimeout, csOc3PathDayEntry=csOc3PathDayEntry, csOrionQueueGroupEntry=csOrionQueueGroupEntry, InterfaceIndexOrZero=InterfaceIndexOrZero, csOrionServiceSelectionInfoEnd=csOrionServiceSelectionInfoEnd, csFrDlcmiPort=csFrDlcmiPort, csOrionTraceRouteReqStatus=csOrionTraceRouteReqStatus, csOrionFwHostMask=csOrionFwHostMask, csOrionIpSecEventLogTable=csOrionIpSecEventLogTable, csRipImpPolStatus=csRipImpPolStatus, csAtmConnReceivedBadAalLength=csAtmConnReceivedBadAalLength, csIsisManAreaAddrEntry=csIsisManAreaAddrEntry, csOrionVPNVRouterIpOutDiscards=csOrionVPNVRouterIpOutDiscards, csOrionIKESvrParamAccountingList=csOrionIKESvrParamAccountingList, csOrionRadiusAcctFlush=csOrionRadiusAcctFlush, csMplsLspLastPathChange=csMplsLspLastPathChange, csOspfVirtIfState=csOspfVirtIfState, csOrionPingResultsErrors=csOrionPingResultsErrors, csOrionVPNVRouterIpAdEntOperStatus=csOrionVPNVRouterIpAdEntOperStatus, csOrionVrIfManagerEntry=csOrionVrIfManagerEntry, csIsisSysDefInfoOrig=csIsisSysDefInfoOrig, csOrionPingResultsMinRtt=csOrionPingResultsMinRtt, csOc3SectionDayEntry=csOc3SectionDayEntry, csOrionPingResultsCurrentStatus=csOrionPingResultsCurrentStatus, csPppoeAcIfStatPADTTransmit=csPppoeAcIfStatPADTTransmit, csOrionSystemBootConcurrentDownloads=csOrionSystemBootConcurrentDownloads, csOrionL2tpConfigPppAuthProtocol=csOrionL2tpConfigPppAuthProtocol, csOc3AtmCurrentRecievedCells=csOc3AtmCurrentRecievedCells, csOrionPortIndex=csOrionPortIndex, csBgpConfedASTableEnd=csBgpConfedASTableEnd, csIsisISAdjAreaAddress=csIsisISAdjAreaAddress, csOrionFanIndex=csOrionFanIndex, csOrionFwNntpPolicyRemotePort=csOrionFwNntpPolicyRemotePort, csOrionFanTable=csOrionFanTable, csVpnVrfRouteTargetEntry=csVpnVrfRouteTargetEntry, csOrionQueueGroupSubGroupAllocation=csOrionQueueGroupSubGroupAllocation, csPppoeAcIfConfigEntry=csPppoeAcIfConfigEntry, csOc3AtmIntervalUnCorrectedHEC=csOc3AtmIntervalUnCorrectedHEC, csOrionIpLocalAddrPoolRowStatus=csOrionIpLocalAddrPoolRowStatus, csOrionAccessListEndAddress=csOrionAccessListEndAddress, csOrionPppIfEchoTimeout=csOrionPppIfEchoTimeout, csPwVcPeerIpv4Addr=csPwVcPeerIpv4Addr, csExpFilterDropPrecedence=csExpFilterDropPrecedence, csOrionL2tpConfigSessionRWS=csOrionL2tpConfigSessionRWS, csDs3StatIntervalPCVs=csDs3StatIntervalPCVs, csDs3StatIntervalEntry=csDs3StatIntervalEntry, csRipIfConfReceiveV1=csRipIfConfReceiveV1, csIsisSysOrigL1LSPBuffSize=csIsisSysOrigL1LSPBuffSize, csOc3SectionDayTable=csOc3SectionDayTable, csMplsLspConfiguredPaths=csMplsLspConfiguredPaths, csOrionAccessListTable=csOrionAccessListTable, csOrionIKECryptoMapSaLifetimeHardSec=csOrionIKECryptoMapSaLifetimeHardSec, csOspfIfState=csOspfIfState, csFrCircuitType=csFrCircuitType, csAtmConnReceivedOperationallyDown=csAtmConnReceivedOperationallyDown, csOrionFwFtpFunctionIds=csOrionFwFtpFunctionIds, csOrionL2tpConfigTunnelRWS=csOrionL2tpConfigTunnelRWS, csOrionTunnelSwitchTargetTable=csOrionTunnelSwitchTargetTable, csOrionQoSMeterProfileColorMode=csOrionQoSMeterProfileColorMode, csRtPolicyTermFromNbrGroupName=csRtPolicyTermFromNbrGroupName, csOrionFwHttpPolicyRowStatus=csOrionFwHttpPolicyRowStatus)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionPowerSupplyMonitorEvent=csOrionPowerSupplyMonitorEvent, csRsvpSessionUpPsbs=csRsvpSessionUpPsbs, csOrionAAAServerListConfigTableEnd=csOrionAAAServerListConfigTableEnd, csRipGlobalConfJitterUpdateStatus=csRipGlobalConfJitterUpdateStatus, csOrionVPNVRouterIpForwDatagrams=csOrionVPNVRouterIpForwDatagrams, csOrionDNSInfo=csOrionDNSInfo, csPwVcOutboundOperStatus=csPwVcOutboundOperStatus, csOrionSystemLoginPermTable=csOrionSystemLoginPermTable, csMplsPathBgpAutoRouteAnnounce=csMplsPathBgpAutoRouteAnnounce, csAtmConnOamLoopback=csAtmConnOamLoopback, csOrionViPktFilterCounterStatus=csOrionViPktFilterCounterStatus, csOrionIKECryptoMapKey=csOrionIKECryptoMapKey, csOrionSnmpAgentErrorTable=csOrionSnmpAgentErrorTable, csOrionVPNVRouterOperStatus=csOrionVPNVRouterOperStatus, csOrionFwSmtpLogRelay=csOrionFwSmtpLogRelay, csDot1dPortTable=csDot1dPortTable, csOrionI2CDevicePresent=csOrionI2CDevicePresent, LSPBuffSize=LSPBuffSize, csOrionVPNVRouterManagedIpRouteMask=csOrionVPNVRouterManagedIpRouteMask, csOrionFwHttpHeaderIds=csOrionFwHttpHeaderIds, csOrionFwLdapConfigEnd=csOrionFwLdapConfigEnd, csOrionTrapInfo=csOrionTrapInfo, csRipExpPolEntry=csRipExpPolEntry, csDs3ConfigMdlFic=csDs3ConfigMdlFic, csIsisSysLSPIgnoreErrors=csIsisSysLSPIgnoreErrors, csOrionGenAclEndSrcPort=csOrionGenAclEndSrcPort, csOrionViPbfFilterEntry=csOrionViPbfFilterEntry, csAtmConnVpi=csAtmConnVpi, csDs3ConfigNationalBit=csDs3ConfigNationalBit, csOrionMlpppBundleRowStatus=csOrionMlpppBundleRowStatus, csFrCircuitUpperProtocol=csFrCircuitUpperProtocol, csOspfConfigErrorType=csOspfConfigErrorType, csOrionVPNVRouterIpRouteMask=csOrionVPNVRouterIpRouteMask, csOrionVPNVRouterTcpActiveOpens=csOrionVPNVRouterTcpActiveOpens, csOrionFwFtpPolicyTable=csOrionFwFtpPolicyTable, csOrionVPNVRouterIpRouteInfo=csOrionVPNVRouterIpRouteInfo, csOrionVrDsByteFilterAction=csOrionVrDsByteFilterAction, csIsisISAdjProtSuppProtocol=csIsisISAdjProtSuppProtocol, csAtmConnTransmittedOamLoopBackRequests=csAtmConnTransmittedOamLoopBackRequests, csRipIfConfAuthPassword=csRipIfConfAuthPassword, csOrionStatusPanelPortRedundantStatus=csOrionStatusPanelPortRedundantStatus, csOrionGenAclSrcAddressList=csOrionGenAclSrcAddressList, csOrionFwDestTable=csOrionFwDestTable, csLdpTargetActive=csLdpTargetActive, csOrionNatPoolEndAddress=csOrionNatPoolEndAddress, csOrionSyslogdEntry=csOrionSyslogdEntry, csOrionVPNVRouterIpReasmTimeout=csOrionVPNVRouterIpReasmTimeout, csRtPolicyTermFromIntfAddr=csRtPolicyTermFromIntfAddr, csRipGlobalConfPerUpdateInt=csRipGlobalConfPerUpdateInt, csIsisCircL1HelloTimer=csIsisCircL1HelloTimer, csRtPolicyTermActionMetric=csRtPolicyTermActionMetric, csOc3PosRcvBytes=csOc3PosRcvBytes, csIsisCircL1DelayMetric=csIsisCircL1DelayMetric, csOrionFwTelnetAuthNonTransparentAuth=csOrionFwTelnetAuthNonTransparentAuth, csPppoeAcIfModuleIndex=csPppoeAcIfModuleIndex, csRtPolicyTermFromVpnRouteTargetNamesListFlag=csRtPolicyTermFromVpnRouteTargetNamesListFlag, csOrionFwAolPolicyTable=csOrionFwAolPolicyTable, csAtmConnTransmittedBytes=csAtmConnTransmittedBytes, csOrionVrQoSFilterEntry=csOrionVrQoSFilterEntry, PwVcIndex=PwVcIndex, csOc3PathJ1=csOc3PathJ1, csExpPolGenAclId=csExpPolGenAclId, csOrionSystemBootImageName2=csOrionSystemBootImageName2, csFrErrTime=csFrErrTime, csRsvpIfBadResvIn=csRsvpIfBadResvIn, csOrionViQoSFilterEntry=csOrionViQoSFilterEntry, csAtmConnReceivedUnknownProtocolErrors=csAtmConnReceivedUnknownProtocolErrors, csTelnetConnPort=csTelnetConnPort, csOrionManualCryptoMapNumber=csOrionManualCryptoMapNumber, csDs3StatCurrentEntry=csDs3StatCurrentEntry, csOrionNBNSInfoEnd=csOrionNBNSInfoEnd, csOrionTrapReceiverPort=csOrionTrapReceiverPort, csOrionIpSecStateTable=csOrionIpSecStateTable, csDot1dTpFdbSubPort=csDot1dTpFdbSubPort, csAtmConnReceivedBadAalType=csAtmConnReceivedBadAalType, csOrionL2tpStatsPayloadRecvOctets=csOrionL2tpStatsPayloadRecvOctets, csAtmInterfaceConfIlmiControl=csAtmInterfaceConfIlmiControl, csAtmConnKind=csAtmConnKind, csIsisSysOwnLSPPurges=csIsisSysOwnLSPPurges, csPppoeAcIfConfigServiceTemplateProfile=csPppoeAcIfConfigServiceTemplateProfile, csOrionEngineMemoryBadFrees=csOrionEngineMemoryBadFrees, csDs3Ds1CurrentCSSs=csDs3Ds1CurrentCSSs, csOrionFwHttpAuthServers=csOrionFwHttpAuthServers, csOrionAAAServerListAdminTable=csOrionAAAServerListAdminTable, csIgmpInterfaceProxyIfIndex=csIgmpInterfaceProxyIfIndex, csBgpNetworkRowStatus=csBgpNetworkRowStatus, csOrionSyslogdStatus=csOrionSyslogdStatus, csOrionTempAirFlowCard=csOrionTempAirFlowCard, csPwVcInboundGroupID=csPwVcInboundGroupID, csBgpNbrMd5Password=csBgpNbrMd5Password, csOc3LinePrevDaySESs=csOc3LinePrevDaySESs, MplsLdpIdentifier=MplsLdpIdentifier, csBgpNbrGroupVpnLogAreaFlag=csBgpNbrGroupVpnLogAreaFlag, csIgmpInterfaceWrongVersionQueries=csIgmpInterfaceWrongVersionQueries, csOrionVrRadiusAcctSvrPort=csOrionVrRadiusAcctSvrPort, csOrionL2tpStatsPayloadSendPackets=csOrionL2tpStatsPayloadSendPackets, csOrionEngineIndex=csOrionEngineIndex, csOrionViStatsOutErrors=csOrionViStatsOutErrors, csIgmpCacheIfIndex=csIgmpCacheIfIndex, csOrionPppIfEncryptionMode=csOrionPppIfEncryptionMode, csEthPppoeService=csEthPppoeService, csOrionFRoIPConfNumActiveTransports=csOrionFRoIPConfNumActiveTransports, csIgmpCacheEntry=csIgmpCacheEntry, csOrionFwSmtpPolicyRowStatus=csOrionFwSmtpPolicyRowStatus, csOrionL2tpTunnelMaxRetransmissions=csOrionL2tpTunnelMaxRetransmissions, csOrionConfigChangeType=csOrionConfigChangeType, csOrionIKECryptoMapTransformSet6=csOrionIKECryptoMapTransformSet6, csMplsPathDropPrecedence=csMplsPathDropPrecedence, csRtPolicyTermActionNextHopAddr=csRtPolicyTermActionNextHopAddr, csOspfStubTOS=csOspfStubTOS, csOrionOc3Section=csOrionOc3Section, csOspfIfEntry=csOspfIfEntry, csOrionFwSmtpSpamPolicyName=csOrionFwSmtpSpamPolicyName, csFrDlcmiStatus=csFrDlcmiStatus, csOrionVPNVRouterIpRouteAge=csOrionVPNVRouterIpRouteAge, csOspfSpfHold=csOspfSpfHold, csOrionL2tpConfigPppReauthPeriod=csOrionL2tpConfigPppReauthPeriod, csOrionSyslogdFacility2=csOrionSyslogdFacility2, csPwVcCeIntf=csPwVcCeIntf, csOrionFwLnotesConfig=csOrionFwLnotesConfig, MplsLdpLabelTypes=MplsLdpLabelTypes, csOrionManualCryptoMapMatchAddress=csOrionManualCryptoMapMatchAddress, csOrionSyslogdFacility1=csOrionSyslogdFacility1, csEthStatsRxOctsBad=csEthStatsRxOctsBad, csFrDlcmiLmiDlci=csFrDlcmiLmiDlci, csBgpGenKeepAliveConfigured=csBgpGenKeepAliveConfigured, csOspfExpPolTable=csOspfExpPolTable, csOrionPptpConnFarIpAddr=csOrionPptpConnFarIpAddr, csIsisAreaAddrSysInstance=csIsisAreaAddrSysInstance, csIsisCircExtDomain=csIsisCircExtDomain, csMplsOspfOpaqueAdminStatus=csMplsOspfOpaqueAdminStatus, csIgmpStaticGroupEntry=csIgmpStaticGroupEntry, csOrionIKECryptoMapDynamicRouteAdd=csOrionIKECryptoMapDynamicRouteAdd, csRipIfStatSentUpdates=csRipIfStatSentUpdates, csOrionSnmpAgentErrorEntry=csOrionSnmpAgentErrorEntry, csOrionQoSMeterProfileName=csOrionQoSMeterProfileName, csIsisSysManAddrDropFromAreas=csIsisSysManAddrDropFromAreas, csExpPolBgpCommunity1=csExpPolBgpCommunity1, csRsvpIfEgressLspsCreated=csRsvpIfEgressLspsCreated, csOrionConfigSave=csOrionConfigSave, csOspfStubAreaTable=csOspfStubAreaTable, csIsisCircIfIndex=csIsisCircIfIndex, csEthStatsRx1024Pkts=csEthStatsRx1024Pkts, csFRoIPCircuitCommittedBurst=csFRoIPCircuitCommittedBurst, csOrionPppIfRetransmit=csOrionPppIfRetransmit, csOrionFwProxyDaemonTable=csOrionFwProxyDaemonTable, csLdpTargetRowStatus=csLdpTargetRowStatus, csOrionAccessListStatus=csOrionAccessListStatus, csMplsLspLastTransition=csMplsLspLastTransition, csOrionSyslogdTable=csOrionSyslogdTable, csOrionSnmpCommPriv=csOrionSnmpCommPriv, csPppoeSessionReceivedErrors=csPppoeSessionReceivedErrors, SPPRedundantStatus=SPPRedundantStatus, csOspfAreaLsaCksumSum=csOspfAreaLsaCksumSum, csOspfIfIpAddress=csOspfIfIpAddress, csOrionBladeSharcCryptoModuleId1=csOrionBladeSharcCryptoModuleId1, csMplsPathBandwidth=csMplsPathBandwidth, csRipIfStatEntry=csRipIfStatEntry, csOc3LineCurrentUASs=csOc3LineCurrentUASs, csOrionCiscoHdlcChIndex=csOrionCiscoHdlcChIndex, csLdpTargetHelloTimer=csLdpTargetHelloTimer, csIsisIPRATable=csIsisIPRATable, csEthEntry=csEthEntry, csAtmConnInArpInReqs=csAtmConnInArpInReqs, csRtPolicyTermFromVpnSoo=csRtPolicyTermFromVpnSoo, csOc3PosEncapType=csOc3PosEncapType, csOrionVPNVRouterRowStatus=csOrionVPNVRouterRowStatus, csBgpNbrGroupMhopTTL=csBgpNbrGroupMhopTTL, csOrionRadiusAcctIndex=csOrionRadiusAcctIndex, csOrionServiceProviderVIfUp=csOrionServiceProviderVIfUp, csAtmConnDynamicArpCacheEntry=csAtmConnDynamicArpCacheEntry, csMplsIsisExtensionsTable=csMplsIsisExtensionsTable, csOrionSystemLoginDomainInterfaceList=csOrionSystemLoginDomainInterfaceList, csOrionBladeSerialNumb=csOrionBladeSerialNumb, csBgpNetworkAddr=csBgpNetworkAddr, csDs3Ds1IntervalESs=csDs3Ds1IntervalESs, csFrCircuitTable=csFrCircuitTable, csOrionTunnelSwitchRowStatus=csOrionTunnelSwitchRowStatus, csOrionL2tpTunnelEntry=csOrionL2tpTunnelEntry, csOrionEngineEntry=csOrionEngineEntry, csOrionFwRshPolicyTimeout=csOrionFwRshPolicyTimeout, csOrionVPNVRouterIpReasmReqds=csOrionVPNVRouterIpReasmReqds, csOc3PosStatsTable=csOc3PosStatsTable, csOrionQoSMeterTable=csOrionQoSMeterTable, csOrionIKESvrParamLocalSecretSize=csOrionIKESvrParamLocalSecretSize, csPppoeSessionRowStatus=csPppoeSessionRowStatus, csOrionTrapReceiverAddr=csOrionTrapReceiverAddr, csOrionTcpEnd=csOrionTcpEnd, csOrionIpSecStateSpi=csOrionIpSecStateSpi, csOrionFwNetMeetingPolicyRemoteServer=csOrionFwNetMeetingPolicyRemoteServer, csOrionFRoIPOperStatus=csOrionFRoIPOperStatus, csRtPolicyStrEntry=csRtPolicyStrEntry, csOrionVrRadiusAcctSvrEntry=csOrionVrRadiusAcctSvrEntry, csOrionVPNVRouterIpNetToMediaTable=csOrionVPNVRouterIpNetToMediaTable, csRipIfConfPoisonReverse=csRipIfConfPoisonReverse, csOrionFwSmtpRelayRowStatus=csOrionFwSmtpRelayRowStatus, csOrionFanTrayFWMinorRevision=csOrionFanTrayFWMinorRevision, csFrCircuitRemoteIpAddress=csFrCircuitRemoteIpAddress, csOrionIKEStatsPhase1InPkts=csOrionIKEStatsPhase1InPkts, csOrionHWControlInfo=csOrionHWControlInfo, csPwVcInboundMode=csPwVcInboundMode, csIsisCircMeshGroupEnabled=csIsisCircMeshGroupEnabled, csOspfStubAreaId=csOspfStubAreaId, csOrionCiscoHdlcInfoEnd=csOrionCiscoHdlcInfoEnd, csOrionVrRadiusAcctSvrKey=csOrionVrRadiusAcctSvrKey, csOrionFwMsSqlPolicyRowStatus=csOrionFwMsSqlPolicyRowStatus, csOrionVncQueueEntry=csOrionVncQueueEntry, csOrionViDsByteFilterEntry=csOrionViDsByteFilterEntry, csOrionIKECryptoMapAddressPool=csOrionIKECryptoMapAddressPool, csAtmInterfaceConfSlotIndex=csAtmInterfaceConfSlotIndex, csRtPolicyTermActionOspfTag2=csRtPolicyTermActionOspfTag2, csFRoIPCircuitDlci=csFRoIPCircuitDlci, csOrionGreKey=csOrionGreKey, csOrionFwHttpPortTable=csOrionFwHttpPortTable, csOrionIKECryptoMapType=csOrionIKECryptoMapType, csOrionFwHttpPolicyTimeout=csOrionFwHttpPolicyTimeout, csOrionPortInfo=csOrionPortInfo, csAtmConnOamLoopbackRetryPvcUpAge=csAtmConnOamLoopbackRetryPvcUpAge, csOc3LineCurrentESs=csOc3LineCurrentESs, csOrionViDsByteFilterValue=csOrionViDsByteFilterValue, csOspfIfBackupDesignatedRouter=csOspfIfBackupDesignatedRouter, csOrionFwFtpPolicyHandoffAddr=csOrionFwFtpPolicyHandoffAddr, csOrionFwPop3PolicyTable=csOrionFwPop3PolicyTable, csOrionVrAcctTable=csOrionVrAcctTable, csOrionFwPop3ConfigEnd=csOrionFwPop3ConfigEnd, csOrionFRoIPTransportInBytes=csOrionFRoIPTransportInBytes, csOrionQoSMeterEntry=csOrionQoSMeterEntry, csOspfAreaAggregateLsdbType=csOspfAreaAggregateLsdbType, csOrionLogin=csOrionLogin, csRtPolicyStrTableEnd=csRtPolicyStrTableEnd, csOrionIKEStateRetryLimit=csOrionIKEStateRetryLimit, csOrionOc3Alarm=csOrionOc3Alarm, csOrionTunnelSwitchTable=csOrionTunnelSwitchTable, csOrionPppIfTerminateReqRtx=csOrionPppIfTerminateReqRtx, csOrionQueueMinThresholdForYellow=csOrionQueueMinThresholdForYellow, csBgpGenClearConnFlag=csBgpGenClearConnFlag, csOrionFwSmtpMaxChildren=csOrionFwSmtpMaxChildren, SNPAPrefix=SNPAPrefix, csIsisL2SummAddrMask=csIsisL2SummAddrMask, csOrionFwLnotesPolicyTable=csOrionFwLnotesPolicyTable, csOspfVirtIfNeighbor=csOspfVirtIfNeighbor, csIsisCircL2MinLSPTransInt=csIsisCircL2MinLSPTransInt, csOrionFwTelnetAuthTable=csOrionFwTelnetAuthTable, csOrionMlpppBundleBytesSent=csOrionMlpppBundleBytesSent, csOrionAlarmClear=csOrionAlarmClear, csOrionManualCryptoMapTable=csOrionManualCryptoMapTable, csExpPolRipIp=csExpPolRipIp, csLdpEntityIndex=csLdpEntityIndex, csOrionFwSmtpLogging=csOrionFwSmtpLogging, csEthStatsRx256To511Pkts=csEthStatsRx256To511Pkts, csFrDlcmiAddressLen=csFrDlcmiAddressLen, SystemID=SystemID, csIsisL2SummAddress=csIsisL2SummAddress, csMplsMetricStyle=csMplsMetricStyle)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csPwVcInboundVcLabel=csPwVcInboundVcLabel, csOrionIKEStateLastUsed=csOrionIKEStateLastUsed, csOc3PathDayESs=csOc3PathDayESs, csOrionL2tpSessionPacketSequencing=csOrionL2tpSessionPacketSequencing, csOrionPptpInfoEnd=csOrionPptpInfoEnd, csIsisCircIDFieldLenMismatches=csIsisCircIDFieldLenMismatches, csBgpGenTableEnd=csBgpGenTableEnd, csOrionFwRshPolicyName=csOrionFwRshPolicyName, csFRoIPCircuitLastTimeChange=csFRoIPCircuitLastTimeChange, csOrionDynamicConn=csOrionDynamicConn, csMplsInterfaceUseInterfaceLabels=csMplsInterfaceUseInterfaceLabels, csIsisCircL2HelloMultiplier=csIsisCircL2HelloMultiplier, csOrionFwInsideIfEntry=csOrionFwInsideIfEntry, PerfTotalCount=PerfTotalCount, csOrionVrIfManagerChannelIndex=csOrionVrIfManagerChannelIndex, csOrionIKESvrParamTokenHashType=csOrionIKESvrParamTokenHashType, csPppoeAcIfStatGenericErrorReceive=csPppoeAcIfStatGenericErrorReceive, csOrionFanTrayFWMajorRevision=csOrionFanTrayFWMajorRevision, csRtPolicyTermFromNextHopAddrIndex=csRtPolicyTermFromNextHopAddrIndex, csDs3Ds1LoopbackType=csDs3Ds1LoopbackType, csOrionPptpConnFarUsername=csOrionPptpConnFarUsername, csOc3AtmIntervalStatsTable=csOc3AtmIntervalStatsTable, csAtmInterfaceConfEvLogArea=csAtmInterfaceConfEvLogArea, csOrionPppIfReauth=csOrionPppIfReauth, csOspfConf=csOspfConf, csAtmInterfaceConfCurrentMaxVpiBits=csAtmInterfaceConfCurrentMaxVpiBits, csIsisSysMaxAreaCheck=csIsisSysMaxAreaCheck, csPwVcPeerAddrType=csPwVcPeerAddrType, csOrionBladeTemperatureSensor3=csOrionBladeTemperatureSensor3, csOrionSystemBootImageName1=csOrionSystemBootImageName1, csPolicyRouteFilterEntry=csPolicyRouteFilterEntry, csOrionLossOfFrame=csOrionLossOfFrame, csIsisISAdjIPAddrAdjIndex=csIsisISAdjIPAddrAdjIndex, csOspfImpPolId=csOspfImpPolId, csIsisL2SummAddrDefaultMetric=csIsisL2SummAddrDefaultMetric, csIgmpInterfaceVersion1QuerierTimer=csIgmpInterfaceVersion1QuerierTimer, csOrionManualCryptoMapEntry=csOrionManualCryptoMapEntry, csOrionBladeEnginesNumb=csOrionBladeEnginesNumb, csOrionPowerSupplyFWRelease=csOrionPowerSupplyFWRelease, csOrionFwDmzIfMask=csOrionFwDmzIfMask, csOrionFRoIPConfDefaultWindowTimeout=csOrionFRoIPConfDefaultWindowTimeout, csUnchanDs3ConfigMdlPath=csUnchanDs3ConfigMdlPath, csExpFilterIfEntry=csExpFilterIfEntry, csOrionL2tpTunnelMaxRetransmissionTimeout=csOrionL2tpTunnelMaxRetransmissionTimeout, csOrionManualCryptoMapInboundAHSPI=csOrionManualCryptoMapInboundAHSPI, csAtmConnReceivedEncapsulationErrors=csAtmConnReceivedEncapsulationErrors, csOrionQueueEntry=csOrionQueueEntry, csOrionFwHttpAuthPasswdTimeout=csOrionFwHttpAuthPasswdTimeout, DesignatedRouterPriority=DesignatedRouterPriority, csRsvpIfUdpRequired=csRsvpIfUdpRequired, csUnchanDs3ConfigMdlTestSig=csUnchanDs3ConfigMdlTestSig, csOrionVrGeneralInfo=csOrionVrGeneralInfo, csOrionVPNVRouterManagedIpRouteTable=csOrionVPNVRouterManagedIpRouteTable, csOrionFwPop3Config=csOrionFwPop3Config, csOrionFileSysReqStatus=csOrionFileSysReqStatus, csOrionGeneralSys=csOrionGeneralSys, csOrionVPNVRouterUdpInErrors=csOrionVPNVRouterUdpInErrors, csRtPolicyTermToNbrGroupName=csRtPolicyTermToNbrGroupName, csBgpNbrState=csBgpNbrState, csRsvpIfIpNbrs=csRsvpIfIpNbrs, csRsvpIfIngressLspsCreated=csRsvpIfIngressLspsCreated, csOrionFwSmtpRelayEntry=csOrionFwSmtpRelayEntry, csOrionFanEvent=csOrionFanEvent, csBgpNbrNextHopSelf=csBgpNbrNextHopSelf, csOrionIKECertFlag=csOrionIKECertFlag, csBgpGenMaxPfxThreshold=csBgpGenMaxPfxThreshold, csOspfNbrLsRetransQLen=csOspfNbrLsRetransQLen, csOrionEngineMemoryBytesAllocs=csOrionEngineMemoryBytesAllocs, csOc3PathC2=csOc3PathC2, csIsisCircLevel=csIsisCircLevel, csMplsInterfaceOperStatus=csMplsInterfaceOperStatus, csDs3StatIntervalLESs=csDs3StatIntervalLESs, csOrionL2tpSessionTxQueueSize=csOrionL2tpSessionTxQueueSize, csBgpGenHoldTimeConfigured=csBgpGenHoldTimeConfigured, csOrionNumericListType=csOrionNumericListType, csOspfHostIpAddress=csOspfHostIpAddress, csOrionNatPoolEntry=csOrionNatPoolEntry, csOrionPppIfSubIfIndex=csOrionPppIfSubIfIndex, csRipIfStatTableEnd=csRipIfStatTableEnd, ISPriority=ISPriority, csOc3SectionCurrentStatus=csOc3SectionCurrentStatus, csOrionTraceRouteResultRtt2=csOrionTraceRouteResultRtt2, csOrionFwSmtpMaxBytes=csOrionFwSmtpMaxBytes, csOrionVIfSpeed=csOrionVIfSpeed, csOrionVPNVRouterManagedIpRouteEntry=csOrionVPNVRouterManagedIpRouteEntry, csOrionCiscoHdlcSlotIndex=csOrionCiscoHdlcSlotIndex, csEthStatsRx64Pkts=csEthStatsRx64Pkts, csIsisISAdjAreaAddrAdjIndex=csIsisISAdjAreaAddrAdjIndex, csIsisSysIDFieldLenMismatches=csIsisSysIDFieldLenMismatches, csOrionVPNInfo=csOrionVPNInfo, csDs3StatTotalCCVs=csDs3StatTotalCCVs, csOrionIKESvrParamRetryTimerMaximum=csOrionIKESvrParamRetryTimerMaximum, csOrionVPNVRouterIpInHdrErrors=csOrionVPNVRouterIpInHdrErrors, csFrErrData=csFrErrData, csIsisSysL2TO1Leak=csIsisSysL2TO1Leak, csRtPolicyTermFromPreference2=csRtPolicyTermFromPreference2, csOrionFwRshPolicyEntry=csOrionFwRshPolicyEntry, csAtmConnTransmitOperationallyDown=csAtmConnTransmitOperationallyDown, csOrionIpSecStatsEntry=csOrionIpSecStatsEntry, csOrionViPktFilterTable=csOrionViPktFilterTable, csOrionBladeFPGAVersion=csOrionBladeFPGAVersion, csIsisIPRAExpMetric=csIsisIPRAExpMetric, csOspfHostTOS=csOspfHostTOS, csOrionPppInfoEnd=csOrionPppInfoEnd, csOc3LineDayUASs=csOc3LineDayUASs, csOrionEngineMemorySize=csOrionEngineMemorySize, csRipIfConfEntry=csRipIfConfEntry, csOrionVrSecondaryDnsServer=csOrionVrSecondaryDnsServer, csOrionIpSecStateLocalEndPoint=csOrionIpSecStateLocalEndPoint, csFrDlcmiStatLostSequences=csFrDlcmiStatLostSequences, csIsisSysL1State=csIsisSysL1State, csPwVcDescr=csPwVcDescr, csOrionIKEPolicyHash=csOrionIKEPolicyHash, csOrionViPktFilterAction=csOrionViPktFilterAction, csLdpTargetPeerIpAddr=csLdpTargetPeerIpAddr, csIsisSysSPFStartInt=csIsisSysSPFStartInt, csOrionVPNVRouterIpAdEntRowStatus=csOrionVPNVRouterIpAdEntRowStatus, csRsvpIfBadPathErrIn=csRsvpIfBadPathErrIn, csOrionFwMsSqlConfig=csOrionFwMsSqlConfig, csOrionTrapPowerSupplyIndex=csOrionTrapPowerSupplyIndex, csDs3Ds1TotalPCVs=csDs3Ds1TotalPCVs, csOrionAlarmSeverityType=csOrionAlarmSeverityType, csAtmConnInArpGenericErrors=csAtmConnInArpGenericErrors, csOrionVPNVRouterManagedIpRouteActiveOption=csOrionVPNVRouterManagedIpRouteActiveOption, csOrionVrDsByteFilterRowStatus=csOrionVrDsByteFilterRowStatus, csOrionVIfBcastAddr=csOrionVIfBcastAddr, csAtmConnTransmitBadLength=csAtmConnTransmitBadLength, csIsisL2SummAddrExistState=csIsisL2SummAddrExistState, csOrionAAAServerConfigEntry=csOrionAAAServerConfigEntry, csBgpGenLocalAS=csBgpGenLocalAS, csLdpVrEventLogAreaMask=csLdpVrEventLogAreaMask, csOrionEngineSerialNumb=csOrionEngineSerialNumb, csFrCircuitReceivedDEs=csFrCircuitReceivedDEs, csIsisAreaAddr=csIsisAreaAddr, csPwVcUpTime=csPwVcUpTime, csPppoeSessionTransmittedOctets=csPppoeSessionTransmittedOctets, csDs3Ds1OperStatus=csDs3Ds1OperStatus, csRtPolicyPrefixListPrefixLen2=csRtPolicyPrefixListPrefixLen2, Status=Status, csOrionFwSmtpWakeup=csOrionFwSmtpWakeup, csOrionFwNetMeetingPolicyEntry=csOrionFwNetMeetingPolicyEntry, csMplsTrafficEnggLevel=csMplsTrafficEnggLevel, csDs3Ds1IntervalNumber=csDs3Ds1IntervalNumber, csRtPolicyTermActionBgpMetricType=csRtPolicyTermActionBgpMetricType, csOspfNbrAddressLessIndex=csOspfNbrAddressLessIndex, csAtmInterfaceConfStatsTableEnd=csAtmInterfaceConfStatsTableEnd, csIsisSysLogAreaFlag=csIsisSysLogAreaFlag, csMplsPathHotStandby=csMplsPathHotStandby, csOrionSnmpAgentErrorCode=csOrionSnmpAgentErrorCode, csOrionNatStaticInsideGlobalAddress=csOrionNatStaticInsideGlobalAddress, csIsisISAdjIPAddrSysInstance=csIsisISAdjIPAddrSysInstance, csOc3LineIntervalFCs=csOc3LineIntervalFCs, csOrionVrRadiusSvrTable=csOrionVrRadiusSvrTable, csOrionQueueMaxRandomForGreen=csOrionQueueMaxRandomForGreen, csIsisCircL1DefaultMetric=csIsisCircL1DefaultMetric, csDs3Ds1CurrentDMs=csDs3Ds1CurrentDMs, csOrionNatInsideLocalAddr=csOrionNatInsideLocalAddr, csBgpNbrGroup=csBgpNbrGroup, csOrionFwHttpConfigEnd=csOrionFwHttpConfigEnd, csOrionPppConfigEntry=csOrionPppConfigEntry, csOrionChangeTableOID=csOrionChangeTableOID, csOrionVPNVRouterIpNetToMediaPhysAddress=csOrionVPNVRouterIpNetToMediaPhysAddress, csAtmInterfaceConfTable=csAtmInterfaceConfTable, csOrionConnectionProfileVpnId=csOrionConnectionProfileVpnId, csIsisIPRAEntry=csIsisIPRAEntry, csOrionServiceInfo=csOrionServiceInfo, csOrionDynamicCryptoMapTable=csOrionDynamicCryptoMapTable, csVpnVrfProviderName=csVpnVrfProviderName, csOrionTraceRouteResultRtt1=csOrionTraceRouteResultRtt1, csOrionModem=csOrionModem, csDs3StatTotalUASs=csDs3StatTotalUASs, csOrionL2tpStatsActiveTunnels=csOrionL2tpStatsActiveTunnels, csOrionSystemFwVer=csOrionSystemFwVer, csOrionFanState=csOrionFanState, csBgpNbrGroupLogAreaFlag=csBgpNbrGroupLogAreaFlag, csPolicyRouteFilterSeqNum=csPolicyRouteFilterSeqNum, csAtmConnIpAddressIpAddress=csAtmConnIpAddressIpAddress, csDs3Ds1CurrentPCVs=csDs3Ds1CurrentPCVs, csOspfIfMetricTable=csOspfIfMetricTable, csOc3AtmIntervalNumber=csOc3AtmIntervalNumber, csFRoIPCircuitCreationTime=csFRoIPCircuitCreationTime, cbrFileErrorType=cbrFileErrorType, csPwVcCustomerName=csPwVcCustomerName, csOrionVPNVRouterIpOutRequests=csOrionVPNVRouterIpOutRequests, cbrFileErrorCode=cbrFileErrorCode, csBgpNbrId=csBgpNbrId, csRtPolicyTermActionFlow=csRtPolicyTermActionFlow, csOc3PathCurrentUASs=csOc3PathCurrentUASs, csOrionPppInfo=csOrionPppInfo, csOrionServiceProviderVIfDown=csOrionServiceProviderVIfDown, csPolicyRouteFilterRowStatus=csPolicyRouteFilterRowStatus, csOrionPingCtlLength=csOrionPingCtlLength, csOrionFwAccessRowStatus=csOrionFwAccessRowStatus, csOrionFwFtpConfigTable=csOrionFwFtpConfigTable, csOrionEngineLevel3CacheSize=csOrionEngineLevel3CacheSize, csEthStatsRxOvfCounts=csEthStatsRxOvfCounts, csEthSubIfRowStatus=csEthSubIfRowStatus, csOrionSystemBootConfig=csOrionSystemBootConfig, csOc3CrcType=csOc3CrcType, csOrionNatStaticTranslationTable=csOrionNatStaticTranslationTable, csOspfAreaAggregateMask=csOspfAreaAggregateMask, csBgpNbrRemoteAS=csBgpNbrRemoteAS, csFrDlcmiStatNetSequenceNumber=csFrDlcmiStatNetSequenceNumber, csOrionFRoIPTransportInPkts=csOrionFRoIPTransportInPkts, csExpPolBgpCommunity2=csExpPolBgpCommunity2, csOrionDynamicCryptoMapPeer=csOrionDynamicCryptoMapPeer, csDs3Ds1TotalCSSs=csDs3Ds1TotalCSSs, csOrionFanTempSensorTemperature=csOrionFanTempSensorTemperature, csUnchanDs3ConfigTimeElapsed=csUnchanDs3ConfigTimeElapsed, csOrionBladePort4MacAddr=csOrionBladePort4MacAddr, csIsisISAdjIPAddress=csIsisISAdjIPAddress, csDs3Ds1LineCode=csDs3Ds1LineCode, csBgpNbrLocalAddr=csBgpNbrLocalAddr, csOrionSyslogdFacility6=csOrionSyslogdFacility6, AtmVcIdentifier=AtmVcIdentifier, csIgmpAccessGroupEntry=csIgmpAccessGroupEntry, csOrionGenAclSrcMask=csOrionGenAclSrcMask, csRtPolicyTermFromOspfAreaType=csRtPolicyTermFromOspfAreaType, csOrionPingCtlTtl=csOrionPingCtlTtl, csOrionVPNVRouterTcpRtoAlgorithm=csOrionVPNVRouterTcpRtoAlgorithm, csOrionPowerSupplyTable=csOrionPowerSupplyTable, csMplsVrPathExplicitRoute=csMplsVrPathExplicitRoute, csRsvpIfPathTearOut=csRsvpIfPathTearOut, csOrionIpSecTransformName=csOrionIpSecTransformName, csBgpNetworkEntry=csBgpNetworkEntry, csOrionFwHostEntry=csOrionFwHostEntry, csMplsLspStandbyPaths=csMplsLspStandbyPaths, csOrionFwSmtpConfigEnd=csOrionFwSmtpConfigEnd, csOspfAreaRowStatus=csOspfAreaRowStatus, csOrionVPNVRouterTcpConnLocalAddress=csOrionVPNVRouterTcpConnLocalAddress, csDs3Ds1CurrentSEFSs=csDs3Ds1CurrentSEFSs, csOrionVrRadiusTimeout=csOrionVrRadiusTimeout, csOrionTunnelSwitchMode=csOrionTunnelSwitchMode, csOrionFanSpeedThreshold=csOrionFanSpeedThreshold, csRsvpIfUpPsbsCreated=csRsvpIfUpPsbsCreated, csOrionFwSmtpConfigTable=csOrionFwSmtpConfigTable, csOrionFwLdapPolicyTable=csOrionFwLdapPolicyTable, csOspfLsdbEntry=csOspfLsdbEntry, csRipIfConfRipV1Compatibility=csRipIfConfRipV1Compatibility, csOrionFRoIPTransportEntry=csOrionFRoIPTransportEntry, csPppoeStatistics=csPppoeStatistics, csRsvpIfResvTearOut=csRsvpIfResvTearOut, csOc3LinePrevDayTable=csOc3LinePrevDayTable, csOrionVPNVRouterIpAdEntReasmMaxSize=csOrionVPNVRouterIpAdEntReasmMaxSize, csOspfIfAdminStatus=csOspfIfAdminStatus, csOrionCiscoHdlcPortIndex=csOrionCiscoHdlcPortIndex, csOrionFRoIPVIfaceId=csOrionFRoIPVIfaceId, cosineOrionMod=cosineOrionMod, csDs3ConfigClockSource=csDs3ConfigClockSource, AtmServiceCategory=AtmServiceCategory, csOrionFwNwGroupAddr=csOrionFwNwGroupAddr, csOrionSystemLoginUserName=csOrionSystemLoginUserName, csAtmConnReceivedBytes=csAtmConnReceivedBytes, csOrionPktFilterInfoEnd=csOrionPktFilterInfoEnd)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csIsisCircTableEnd=csIsisCircTableEnd, csOc3PortIndex=csOc3PortIndex, csIsisISAdjIPAddrCircIndex=csIsisISAdjIPAddrCircIndex, csOrionViQoSFilterTable=csOrionViQoSFilterTable, csOrionLossOfClock=csOrionLossOfClock, csIsisCircL1ISPriority=csIsisCircL1ISPriority, csOrionGenAclDstMask=csOrionGenAclDstMask, csOrionViStatsRateLimitRxBytesDropped=csOrionViStatsRateLimitRxBytesDropped, csAtmInterfaceConfCurrentMaxVciBits=csAtmInterfaceConfCurrentMaxVciBits, csOrionVPNVRouterIpRouteMetric2=csOrionVPNVRouterIpRouteMetric2, csOrionL2tpSessionCallType=csOrionL2tpSessionCallType, csOrionVPNVRouterManagedIpRouteTos=csOrionVPNVRouterManagedIpRouteTos, csOrionVIfMtuOperational=csOrionVIfMtuOperational, csOc3LinePrevDayESs=csOc3LinePrevDayESs, csBgpGenStatus=csBgpGenStatus, csOrionFwSmtpPolicyName=csOrionFwSmtpPolicyName, csOspfExpPolEntry=csOspfExpPolEntry, csIsisISAdjIPAddrTable=csIsisISAdjIPAddrTable, csOrionL2tpConfigSessionFlowControl=csOrionL2tpConfigSessionFlowControl, csOrionChassisPacketRingPrimaryCRC=csOrionChassisPacketRingPrimaryCRC, csOrionSnmpCommAddr=csOrionSnmpCommAddr, csIsisIPRAExistState=csIsisIPRAExistState, csOspfVirtNbrHelloSuppressed=csOspfVirtNbrHelloSuppressed, csTeLdpObjects=csTeLdpObjects, csOrionFwCompuServePolicyRowStatus=csOrionFwCompuServePolicyRowStatus, csOrionIKECryptoMapRemoteIdentityType5=csOrionIKECryptoMapRemoteIdentityType5, csOrionStatusPanelPortTable=csOrionStatusPanelPortTable, csOrionVPNVRouterManagedIpRouteDest=csOrionVPNVRouterManagedIpRouteDest, csOrionSystemLoginUserPassword=csOrionSystemLoginUserPassword, csOspfExpPolStatus=csOspfExpPolStatus, csOrionVrNbnsConfigEntry=csOrionVrNbnsConfigEntry, csOrionFwGenProxyTable=csOrionFwGenProxyTable, csOrionIKECertEntry=csOrionIKECertEntry, csAtmInterfaceConfTransmittedPackets=csAtmInterfaceConfTransmittedPackets, csIsisCircPassiveCircuit=csIsisCircPassiveCircuit, csOrionVIfType=csOrionVIfType, csOrionVPNOperStatus=csOrionVPNOperStatus, csBgpNbrExpPolId=csBgpNbrExpPolId, csRtPolicyTermActionNextHopAddrType=csRtPolicyTermActionNextHopAddrType, csOrionFwSmtpBadDir=csOrionFwSmtpBadDir, csFRoIPCircuitReceivedDEs=csFRoIPCircuitReceivedDEs, csVpnVrfName=csVpnVrfName, csOrionIpSecStatsRcvAhPktsDropped=csOrionIpSecStatsRcvAhPktsDropped, csIsisCircL2CSNPInterval=csIsisCircL2CSNPInterval, csDs3StatIntervalPESs=csDs3StatIntervalPESs, csPppoeAcIfStatPppAuthFails=csPppoeAcIfStatPppAuthFails, csOrionIKESvrParamSecretRecreate=csOrionIKESvrParamSecretRecreate, csOrionFanTempSensorTable=csOrionFanTempSensorTable, csDs3ConfigSendCode=csDs3ConfigSendCode, csOc3PathPrevDayCVs=csOc3PathPrevDayCVs, csOrionBladePort1MacAddr=csOrionBladePort1MacAddr, csOrionFwHttpPolicyFeatures=csOrionFwHttpPolicyFeatures, csDs3Ds1LoopbackStatus=csDs3Ds1LoopbackStatus, csOrionIpSecStateProtocol=csOrionIpSecStateProtocol, csPppoeSession=csPppoeSession, csOrionTunnelSwitchClientName=csOrionTunnelSwitchClientName, csOspfVirtIfRetransInterval=csOspfVirtIfRetransInterval, csOrionBladeSharcCryptoSerial1=csOrionBladeSharcCryptoSerial1, csFrCircuitCommittedBurst=csFrCircuitCommittedBurst, csBgpNbrAdminStatus=csBgpNbrAdminStatus, csOrionL2tpStatsPayloadSendOctets=csOrionL2tpStatsPayloadSendOctets, csAtmConnUnRespondedArpRequests=csAtmConnUnRespondedArpRequests, csIsisSysProtSuppEntry=csIsisSysProtSuppEntry, csIgmpCacheExpiryTime=csIgmpCacheExpiryTime, csOrionFwDmzIfRowStatus=csOrionFwDmzIfRowStatus, csOc3SectionPrevDaySESs=csOc3SectionPrevDaySESs, csOrionFwSmtpPolicyMimeCheck=csOrionFwSmtpPolicyMimeCheck, csExpPolTableEnd=csExpPolTableEnd, csOrionEngineFreeMemoryLong=csOrionEngineFreeMemoryLong, csFRoIPCircuitThroughput=csFRoIPCircuitThroughput, csOrionL2tpStatsControlRecvPackets=csOrionL2tpStatsControlRecvPackets, csOspfAsBdrRtrCount=csOspfAsBdrRtrCount, csOrionIKEStateLocalAddress=csOrionIKEStateLocalAddress, csOspfImpPolEntry=csOspfImpPolEntry, csOrionSyslogdFacility9=csOrionSyslogdFacility9, csRtPolicyTermActionOspfTag2Op=csRtPolicyTermActionOspfTag2Op, csOspfIfEvents=csOspfIfEvents, csOrionVrSpfIcmpIdleTimeout=csOrionVrSpfIcmpIdleTimeout, csFRoIPCircuitExcessBurst=csFRoIPCircuitExcessBurst, csOrionIKEStatePrfAlgorithm=csOrionIKEStatePrfAlgorithm, csIsisISAdjSysInstance=csIsisISAdjSysInstance, csOrionFwSmtpConfigEntry=csOrionFwSmtpConfigEntry, csChDs3RowStatus=csChDs3RowStatus, csIsisCircL1PartSNPInterval=csIsisCircL1PartSNPInterval, csOrionFwHttpPolicyOurname=csOrionFwHttpPolicyOurname, csMplsLspEntry=csMplsLspEntry, csOrionGenAclId=csOrionGenAclId, csOrionL2tpSessionRemoteIpAddress=csOrionL2tpSessionRemoteIpAddress, csUnchanDs3ConfigFraming=csUnchanDs3ConfigFraming, csAtmConnReceivedDroppedPkts=csAtmConnReceivedDroppedPkts, csOrionFwHttpPolicyHandoffAddr=csOrionFwHttpPolicyHandoffAddr, csIsisSysNextCircIndex=csIsisSysNextCircIndex, csFrCircuitSubIf=csFrCircuitSubIf, csOrionFwCompuServeConfigEnd=csOrionFwCompuServeConfigEnd, csTeRsvpObjects=csTeRsvpObjects, csOrionVPNVRouterIpRouteMetric3=csOrionVPNVRouterIpRouteMetric3, csOspfIfMetricValue=csOspfIfMetricValue, csOrionIpSecStateEncryptionAlgorithm=csOrionIpSecStateEncryptionAlgorithm, csImpPolTable=csImpPolTable, csOrionFwLdapPolicyRemotePort=csOrionFwLdapPolicyRemotePort, csOrionRadiusAcctInfo=csOrionRadiusAcctInfo, csChDs3ChNumber=csChDs3ChNumber, csOrionL2tpStatsControlRecvOctets=csOrionL2tpStatsControlRecvOctets, csRipGlobalQueries=csRipGlobalQueries, csOrionFwRshConfig=csOrionFwRshConfig, csOrionServiceTemplateConnProfileRowStatus=csOrionServiceTemplateConnProfileRowStatus, csRtPolicyTermActionOspfTagOp=csRtPolicyTermActionOspfTagOp, csUnchanDs3ConfigMdlLic=csUnchanDs3ConfigMdlLic, csFRoIPCircuitReceivedFrames=csFRoIPCircuitReceivedFrames, csOrionBladeReset=csOrionBladeReset, csOrionViStatsRateLimitTxBytesSubmitted=csOrionViStatsRateLimitTxBytesSubmitted, csOrionVPNVRouterTcpMaxConn=csOrionVPNVRouterTcpMaxConn, csRsvpIfResvConfIn=csRsvpIfResvConfIn, csOrionFwHttpFunctionIds=csOrionFwHttpFunctionIds, csRtPolicyUserPolicyType=csRtPolicyUserPolicyType, csOrionL2tpTunnelRemoteHostname=csOrionL2tpTunnelRemoteHostname, csBgpNbrExpPolTable=csBgpNbrExpPolTable, TOS=TOS, csOspfIfMetricEntry=csOspfIfMetricEntry, csRipExpPolStatus=csRipExpPolStatus, csIsisCircOperState=csIsisCircOperState, csMplsPathMetricValue=csMplsPathMetricValue, csRsvpIfBadResvTearIn=csRsvpIfBadResvTearIn, csIsisCircLANL2DesISChanges=csIsisCircLANL2DesISChanges, csRtPolicyTermActionMetric2=csRtPolicyTermActionMetric2, csDs3StatTotalEntry=csDs3StatTotalEntry, csOrionIKECryptoMapMatchAddress=csOrionIKECryptoMapMatchAddress, csExpFilterExpValue=csExpFilterExpValue, csOrionPingResultsIpTargetAddress=csOrionPingResultsIpTargetAddress, csFRoIPCircuitOperStatus=csFRoIPCircuitOperStatus, csOrionVIfRateLimitBurstSize=csOrionVIfRateLimitBurstSize, csOrionBladeConfigAttributes=csOrionBladeConfigAttributes, csOrionFwSmtpPolicyRelayReply=csOrionFwSmtpPolicyRelayReply, csOspfLsdbRouterId=csOspfLsdbRouterId, csPppoeAcIfConfigTotalActiveSessions=csPppoeAcIfConfigTotalActiveSessions, csExpFilterIfDropPrecedence=csExpFilterIfDropPrecedence, csIgmpInterfaceQuerier=csIgmpInterfaceQuerier, csRtPolicyStrTable=csRtPolicyStrTable, csDs3ConfigSlotIndex=csDs3ConfigSlotIndex, csEthStatsTx65To127Pkts=csEthStatsTx65To127Pkts, csRtPolicyPrefixListName=csRtPolicyPrefixListName, csOrionLogLinkUp=csOrionLogLinkUp, csLdpEntityEntry=csLdpEntityEntry, csOrionFwSmtpRelayPolicyName=csOrionFwSmtpRelayPolicyName, csAtmInterfaceConfIlmiStatus=csAtmInterfaceConfIlmiStatus, csOrionAAAServerListConfigTable=csOrionAAAServerListConfigTable, csDs3ConfigOperStatus=csDs3ConfigOperStatus, csOrionFwFtpAuthEntry=csOrionFwFtpAuthEntry, csOrionConnectionProfileEntry=csOrionConnectionProfileEntry, csOrionSystemBootSaveImage=csOrionSystemBootSaveImage, csOspfAreaId=csOspfAreaId, MplsLsrIdentifier=MplsLsrIdentifier, csDs3StatTotalLSESs=csDs3StatTotalLSESs, csDot1dBaseBridgeAddress=csDot1dBaseBridgeAddress, csOspfVirtIfAuthKey=csOspfVirtIfAuthKey, csOrionAirFlowCardHWRevision=csOrionAirFlowCardHWRevision, csOrionGreAdminStatus=csOrionGreAdminStatus, csOrionFwNwGroupName=csOrionFwNwGroupName, csOrionIKESvrParamAuthorizationList=csOrionIKESvrParamAuthorizationList, csOrionSnmpTrapTable=csOrionSnmpTrapTable, csOrionFwAolPolicyEntry=csOrionFwAolPolicyEntry, csIsisCircInCtrlPDUs=csIsisCircInCtrlPDUs, csOrionDhcpRelayOutNaks=csOrionDhcpRelayOutNaks, csOrionSystemIpAddress=csOrionSystemIpAddress, csUnchanDs3ConfigOperStatus=csUnchanDs3ConfigOperStatus, csOrionPingCtlFrequency=csOrionPingCtlFrequency, csOrionIpSecStatsRcvPktsOk=csOrionIpSecStatsRcvPktsOk, csOrionPptpConfStatus=csOrionPptpConfStatus, csOrionBladePortNumb=csOrionBladePortNumb, csOrionFwSmtpMaxRecip=csOrionFwSmtpMaxRecip, csOrionFwPlugPolicyTimeout=csOrionFwPlugPolicyTimeout, csOrionDhcpRelayInDecs=csOrionDhcpRelayInDecs, csOc3ApsActivePort=csOc3ApsActivePort, csOrionIKESvrParamRowStatus=csOrionIKESvrParamRowStatus, csRsvpIfBadResvErrIn=csRsvpIfBadResvErrIn, csRipIfConfFlashUpdate=csRipIfConfFlashUpdate, csOrionL2tpConfigSessionTxQueueSize=csOrionL2tpConfigSessionTxQueueSize, csPppoeAcIfConfigPortEthernetAddress=csPppoeAcIfConfigPortEthernetAddress, csOrionFwAccessSourceMask=csOrionFwAccessSourceMask, csRsvpIfMaxBandwidth=csRsvpIfMaxBandwidth, csFrErrEntry=csFrErrEntry, csOrionFwAccessAction=csOrionFwAccessAction, csIsisISAdjAreaAddrSysInstance=csIsisISAdjAreaAddrSysInstance, csOrionTraceRouteReqSrcAddr=csOrionTraceRouteReqSrcAddr, csOrionBladeSharcCryptoType1=csOrionBladeSharcCryptoType1, csOrionViPktFilterAclId=csOrionViPktFilterAclId, csRsvpIfRefreshInterval=csRsvpIfRefreshInterval, csTelnetSvrConfTimeout=csTelnetSvrConfTimeout, csOrionFwFtpAuthNonTransparentAuth=csOrionFwFtpAuthNonTransparentAuth, csOrionFileSys=csOrionFileSys, csOspfNbrEntry=csOspfNbrEntry, csOcNSpeed=csOcNSpeed, csUnchanDs3ConfigCableLength=csUnchanDs3ConfigCableLength, csRipGlobalConfLogAreaFlag=csRipGlobalConfLogAreaFlag, csIsisCircL1Password=csIsisCircL1Password, csDs3ConfigCableLength=csDs3ConfigCableLength, csAtmConnTransmittedPackets=csAtmConnTransmittedPackets, csOrionBladePort2MacAddr=csOrionBladePort2MacAddr, csOspfExtLsdbEntry=csOspfExtLsdbEntry, csOrionNatStaticVITranslationStatus=csOrionNatStaticVITranslationStatus, csAtmInterfaceConfMaxActiveVpiBits=csAtmInterfaceConfMaxActiveVpiBits, csOrionVrRadiusSvrPort=csOrionVrRadiusSvrPort, csOrionRestoreNumVRs=csOrionRestoreNumVRs, SPPModemStatus=SPPModemStatus, csEthLinkTestInterval=csEthLinkTestInterval, csDs3Ds1LineConfig=csDs3Ds1LineConfig, csOspfVirtIfHelloInterval=csOspfVirtIfHelloInterval, csOrionSystemLoginUserOperStatus=csOrionSystemLoginUserOperStatus, csLdpEntityKeepAliveTimer=csLdpEntityKeepAliveTimer, csRsvpIfResvErrIn=csRsvpIfResvErrIn, csOrionFwSmtpSpamReply=csOrionFwSmtpSpamReply, csOrionStatusPanelHWRevision=csOrionStatusPanelHWRevision, csOrionSystemTempStatus=csOrionSystemTempStatus, csOc3OperStatus=csOc3OperStatus, csExpPolMetric=csExpPolMetric, csOspfVirtNbrEvents=csOspfVirtNbrEvents, csOrionQueueMaxRandomForRed=csOrionQueueMaxRandomForRed, csOrionFwHttpConfigTable=csOrionFwHttpConfigTable, csOc3PosMaxPacketSize=csOc3PosMaxPacketSize, csOrionQoSMeterName=csOrionQoSMeterName, csIsisSysEntry=csIsisSysEntry, csMplsVrConfEntry=csMplsVrConfEntry, csOrionStatusPanelPortLoopback=csOrionStatusPanelPortLoopback, csOrionIKECryptoMapPfsGroup=csOrionIKECryptoMapPfsGroup, csVpnVrfRouteDistinguisher=csVpnVrfRouteDistinguisher, csOrionManualCryptoMapInboundESPSPI=csOrionManualCryptoMapInboundESPSPI, csOrionPppConfigHostname=csOrionPppConfigHostname, csOrionIKESvrParamRetryTimer=csOrionIKESvrParamRetryTimer, csOrionMlpppLinkChannelIndex=csOrionMlpppLinkChannelIndex, csOc3PathPrevDaySESs=csOc3PathPrevDaySESs, csOrionPingCtl=csOrionPingCtl, csOrionServiceTemplateTable=csOrionServiceTemplateTable, csOrionCBRFileError=csOrionCBRFileError, csEthStatsTx16CollisionCounts=csEthStatsTx16CollisionCounts, csOspfExtLsdbAge=csOspfExtLsdbAge, csOrionIKEStatsPhase1OutPkts=csOrionIKEStatsPhase1OutPkts, csOrionTunnelSwitchTargetPriority=csOrionTunnelSwitchTargetPriority, csOrionBladeDescr=csOrionBladeDescr, csOrionIKEStatsEntry=csOrionIKEStatsEntry, csOrionIpSecStateAlgorithmType=csOrionIpSecStateAlgorithmType, csMplsLspOperationalPaths=csMplsLspOperationalPaths, csAtmInterfaceConfReceivedOamLoopBackResponses=csAtmInterfaceConfReceivedOamLoopBackResponses, csAtmConnOamLoopBackTransmitFail=csAtmConnOamLoopBackTransmitFail, csDs3Ds1IntervalEntry=csDs3Ds1IntervalEntry, csOrionL2tpTunnelUpTime=csOrionL2tpTunnelUpTime, csBgpNbrTable=csBgpNbrTable, csFrDlcmiName=csFrDlcmiName, csOrionFwMsSqlPolicyRemotePort=csOrionFwMsSqlPolicyRemotePort, csIsisCircEntry=csIsisCircEntry, csOrionFwFtpPolicyLog=csOrionFwFtpPolicyLog, csOrionFileSysResultIndex=csOrionFileSysResultIndex, csOrionIKEStateSAIndex=csOrionIKEStateSAIndex, csRsvpVrConfOpCode=csRsvpVrConfOpCode, InterfaceIndex=InterfaceIndex)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csIsisIPRADest=csIsisIPRADest, csMplsLspPrimaryTimeUp=csMplsLspPrimaryTimeUp, csOrionViPbfFilterEgressViId=csOrionViPbfFilterEgressViId, csOrionSystemLoginRoleRowStatus=csOrionSystemLoginRoleRowStatus, csLdpVrConfTableEnd=csLdpVrConfTableEnd, csOrionVncQueueTable=csOrionVncQueueTable, csMplsInterfaceLabelMaxOut=csMplsInterfaceLabelMaxOut, csOrionPppIfSlotIndex=csOrionPppIfSlotIndex, csOrionPingCtlAdminStatus=csOrionPingCtlAdminStatus, csIsisCircLANL1DesISChanges=csIsisCircLANL1DesISChanges, csExpFilterServiceCategory=csExpFilterServiceCategory, csOrionFwPlugPolicyEntry=csOrionFwPlugPolicyEntry, csOrionAddressListTable=csOrionAddressListTable, csIsisCircInitFails=csIsisCircInitFails, csOrionFwFtpConfigEntry=csOrionFwFtpConfigEntry, csAtmConnReceivedGenericErrors=csAtmConnReceivedGenericErrors, csFrDlcmiState=csFrDlcmiState, csOrionFwAolPolicyRowStatus=csOrionFwAolPolicyRowStatus, csBgpNbrExpPolRowStatus=csBgpNbrExpPolRowStatus, csOrionCiscoHdlcConfigTable=csOrionCiscoHdlcConfigTable, csOrionIpSecTransform1=csOrionIpSecTransform1, csOspfNbrRtrId=csOspfNbrRtrId, csOrionVrSpfTcpCurrentConnTableEntries=csOrionVrSpfTcpCurrentConnTableEntries, csMplsInterfaceAdminWeight=csMplsInterfaceAdminWeight, csOrionVrPrimaryNbnsServer=csOrionVrPrimaryNbnsServer, csPwVcForwardSlot=csPwVcForwardSlot, csOrionPWE3=csOrionPWE3, csOrionVPNVRouterType=csOrionVPNVRouterType, csOc3AtmIntervalCorrectedHEC=csOc3AtmIntervalCorrectedHEC, csOrionQosInfoEnd=csOrionQosInfoEnd, csUnchanDs3ConfigSlotIndex=csUnchanDs3ConfigSlotIndex, csOc3AtmCurrentStatsTable=csOc3AtmCurrentStatsTable, csOrionVPNVRouterManagedIpRouteNextHopAS=csOrionVPNVRouterManagedIpRouteNextHopAS, csEthStatsTx64Pkts=csEthStatsTx64Pkts, csOrionIKECryptoMapTransformSet2=csOrionIKECryptoMapTransformSet2, csBgpNbrGroupVpnIpv4AdminStatus=csBgpNbrGroupVpnIpv4AdminStatus, csAtmConnChannelIndex=csAtmConnChannelIndex, csAtmInterfaceConfReceivedBufferAllocationFail=csAtmInterfaceConfReceivedBufferAllocationFail, csBgpNbrMaxPfx=csBgpNbrMaxPfx, csRsvpIfEntry=csRsvpIfEntry, csOrionTunnelSwitchTargetSessionCount=csOrionTunnelSwitchTargetSessionCount, csOrionSystemLoginRoleName=csOrionSystemLoginRoleName, csDs3Ds1TotalTable=csDs3Ds1TotalTable, csOrionSnmpGenEntry=csOrionSnmpGenEntry, csFrCircuitReceivedBECNs=csFrCircuitReceivedBECNs, csOrionConfigLoadOutputEnable=csOrionConfigLoadOutputEnable, csOspfLsdbAreaId=csOspfLsdbAreaId, csOc3PosRcvFrames=csOc3PosRcvFrames, csOspfExtLsdbLimit=csOspfExtLsdbLimit, csDot1dTpLearnedEntryDiscards=csDot1dTpLearnedEntryDiscards, SPPLoopbackStatus=SPPLoopbackStatus, csOrionTraceRouteResultRtt3=csOrionTraceRouteResultRtt3, csIsisSysMaxLSPLifetime=csIsisSysMaxLSPLifetime, csOrionEngineAssemblyNumb=csOrionEngineAssemblyNumb, csOrionIKEStatsPhase2NegotiationsFailed=csOrionIKEStatsPhase2NegotiationsFailed, csOrionVPNVRouterBackupPEs=csOrionVPNVRouterBackupPEs, csMplsPathType=csMplsPathType, csOspfTrapControl=csOspfTrapControl, csIgmpCacheAddress=csIgmpCacheAddress, csOspfVirtNbrOptions=csOspfVirtNbrOptions, csOrionEngineMemoryAllocFailures=csOrionEngineMemoryAllocFailures, csOrionNatStaticVITranslationTable=csOrionNatStaticVITranslationTable, csIgmpCacheSelf=csIgmpCacheSelf, csOrionVIfIpAddress=csOrionVIfIpAddress, csOrionIKESvrParamEntry=csOrionIKESvrParamEntry, csRsvpIfPktsIn=csRsvpIfPktsIn, csOrionIpSecStatsTable=csOrionIpSecStatsTable, csOspfNbmaNbrStatus=csOspfNbmaNbrStatus, csOrionAAAServerConfigTable=csOrionAAAServerConfigTable, csOrionIp=csOrionIp, csOc3LinePrevDayFCs=csOc3LinePrevDayFCs, csOspfGeneralEntryRowStatus=csOspfGeneralEntryRowStatus, csOspfPacketSrc=csOspfPacketSrc, csIsisISAdjProtSuppTableEnd=csIsisISAdjProtSuppTableEnd, csVpnVrfLogLevelFlag=csVpnVrfLogLevelFlag, csOrionNumericListTable=csOrionNumericListTable, csOrionPppIfEvLogLevel=csOrionPppIfEvLogLevel, csOrionQoSMeterProfilePBS=csOrionQoSMeterProfilePBS, csPppoeSessionReceivedPkts=csPppoeSessionReceivedPkts, csOrionMlpppBundleSlot=csOrionMlpppBundleSlot, csFrDlcmiEntry=csFrDlcmiEntry, csDs3ConfigMdlUnit=csDs3ConfigMdlUnit, csPwVcRowStatus=csPwVcRowStatus, csOrionIKECryptoMapRemoteIdentity4=csOrionIKECryptoMapRemoteIdentity4, csAtmConnRespondedOAMLoopBackRequests=csAtmConnRespondedOAMLoopBackRequests, csOrionFwAccessPortNumber=csOrionFwAccessPortNumber, csOrionEngineDescr=csOrionEngineDescr, csOc3LineCurrentEntry=csOc3LineCurrentEntry, csLdpVrEventLogArea=csLdpVrEventLogArea, csOrionEngineCpuType=csOrionEngineCpuType, csOrionIpSecStatsEspDecryptPktsOk=csOrionIpSecStatsEspDecryptPktsOk, csOspfLsdbType=csOspfLsdbType, csOrionIKESvrParamMaxKeyLength=csOrionIKESvrParamMaxKeyLength, csOrionAAAServerListSvrType=csOrionAAAServerListSvrType, csOrionFwHostAddr=csOrionFwHostAddr, csOrionFwSmtpPolicyLogRelay=csOrionFwSmtpPolicyLogRelay, csRsvpSessionEntry=csRsvpSessionEntry, csOrionViQoSFilterStatus=csOrionViQoSFilterStatus, csOspfVersionNumber=csOspfVersionNumber, csOrionFwHostAccess=csOrionFwHostAccess, csOrionPingResultsTable=csOrionPingResultsTable, csRipGlobalConfAgeTime=csRipGlobalConfAgeTime, csOrionFwDestEntry=csOrionFwDestEntry, csRtPolicyTermActionBgpLocalPref=csRtPolicyTermActionBgpLocalPref, csOrionNatTranslationTable=csOrionNatTranslationTable, csOrionEngineMemoryUtil=csOrionEngineMemoryUtil, csEthStatsTxLateCollisionCounts=csEthStatsTxLateCollisionCounts, csOrionVrAcctCompStats=csOrionVrAcctCompStats, csOrionVrIfManagerPortIndex=csOrionVrIfManagerPortIndex, csOrionVPNVRouterIpInUnknownProtos=csOrionVPNVRouterIpInUnknownProtos, csOspfHostStatus=csOspfHostStatus, UpToMaxAge=UpToMaxAge, csOrionFwGenProxyConfig=csOrionFwGenProxyConfig, csIsisSysProtSuppTable=csIsisSysProtSuppTable, csOrionIKEPolicyEncryption=csOrionIKEPolicyEncryption, csDs3StatTotalSEFSs=csDs3StatTotalSEFSs, csOrionGenAclDstPortList=csOrionGenAclDstPortList, csOrionViPbfFilterNextHopIpAddr=csOrionViPbfFilterNextHopIpAddr, csOrionL2tpStatsActiveSessions=csOrionL2tpStatsActiveSessions, csEthSubIfOpStatus=csEthSubIfOpStatus, csFrCircuitRatePolice=csFrCircuitRatePolice, csOrionVPNVRouterIpDefaultTTL=csOrionVPNVRouterIpDefaultTTL, csOrionVPNVRouterManagedIpRoutePreference1=csOrionVPNVRouterManagedIpRoutePreference1, csOc3SectionPrevDayCVs=csOc3SectionPrevDayCVs, csIsisSysL2State=csIsisSysL2State, csOrionStatusPanelFWMajorRevision=csOrionStatusPanelFWMajorRevision, csAtmConnArpErrors=csAtmConnArpErrors, csOrionVPNVRouterManagedIpRouteType=csOrionVPNVRouterManagedIpRouteType, csBgpNbrGroupMaxPfxType=csBgpNbrGroupMaxPfxType, csBgpNbrImpPolId=csBgpNbrImpPolId, csUnchanDs3ConfigSendCode=csUnchanDs3ConfigSendCode, csOrionFanTray=csOrionFanTray, csOrionVPNVRouterTcpEntry=csOrionVPNVRouterTcpEntry, csIgmpStaticGroupAddress=csIgmpStaticGroupAddress, csOrionDynamicCryptoMapTransformSet1=csOrionDynamicCryptoMapTransformSet1, csMplsExtensionsEntry=csMplsExtensionsEntry, csOrionPppIfOperStatus=csOrionPppIfOperStatus, csBgpNbrGroupLocalAddr=csBgpNbrGroupLocalAddr, csOrionVrSpfUdpIdleTimeout=csOrionVrSpfUdpIdleTimeout, csPolicyRouteFilterPrefixLen2=csPolicyRouteFilterPrefixLen2, csOrionViStatsRateLimitTxPktsSubmitted=csOrionViStatsRateLimitTxPktsSubmitted, csOrionVrRadiusAcctSvrPriority=csOrionVrRadiusAcctSvrPriority, csAtmInterfaceConfMyNeighbourIpAddress=csAtmInterfaceConfMyNeighbourIpAddress, csOrionFwTelnetConfig=csOrionFwTelnetConfig, csOrionIKESvrParamFlag=csOrionIKESvrParamFlag, csFRoIPCircuitState=csFRoIPCircuitState, csOrionSystemBootInternalNwAddr=csOrionSystemBootInternalNwAddr, csFrDlcmiStatAsyncUpdates=csFrDlcmiStatAsyncUpdates, csOrionViDsByteFilterDirection=csOrionViDsByteFilterDirection, csOrionL2tpTunnelRemoteTunnelId=csOrionL2tpTunnelRemoteTunnelId, csIsisCircL2ErrorMetric=csIsisCircL2ErrorMetric, csPppoeSessionServiceVPN=csPppoeSessionServiceVPN, csUnchanDs3ConfigLineStatus=csUnchanDs3ConfigLineStatus, csOrionSystemControlBladeFailOver=csOrionSystemControlBladeFailOver, csOrionOc3FarEndLine=csOrionOc3FarEndLine, csIsisCircLSPThrottle=csIsisCircLSPThrottle, csOrionL2tpTunnelStatsState=csOrionL2tpTunnelStatsState, csDs3StatIntervalSEFSs=csDs3StatIntervalSEFSs, csDs3Ds1IntervalDMs=csDs3Ds1IntervalDMs, csIsisCircL2CircID=csIsisCircL2CircID, csOc3SectionIntervalESs=csOc3SectionIntervalESs, csOrionL2tpSessionEntry=csOrionL2tpSessionEntry, csOc3ConfigEntry=csOc3ConfigEntry, csBgpNbrImpPolRowStatus=csBgpNbrImpPolRowStatus, csIsisCircDRL2HelloTimer=csIsisCircDRL2HelloTimer, csIgmpGeneralTable=csIgmpGeneralTable, csAtmInterfaceConfUniType=csAtmInterfaceConfUniType, csBgpNbrGroupAdminStatus=csBgpNbrGroupAdminStatus, csOspfRxNewLsas=csOspfRxNewLsas, csOrionIKEStatsPhase1NegotiationsFailed=csOrionIKEStatsPhase1NegotiationsFailed, csOrionL2tpSessionRWS=csOrionL2tpSessionRWS, csOspfIfAuthType=csOspfIfAuthType, csOrionPingCtlTable=csOrionPingCtlTable, csOc3SectionIntervalNumber=csOc3SectionIntervalNumber, csOrionVPNVRouterManagedIpRouteMetric2=csOrionVPNVRouterManagedIpRouteMetric2, csOrionDynamicCryptoMapStatus=csOrionDynamicCryptoMapStatus, csOspfAreaEntry=csOspfAreaEntry, csOrionBgpMaxPfxLimit=csOrionBgpMaxPfxLimit, csIsisIPRAMask=csIsisIPRAMask, csOrionVIfUp=csOrionVIfUp, csOrionBladeShutdown=csOrionBladeShutdown, csOrionVPNVRouterIpInDelivers=csOrionVPNVRouterIpInDelivers, csOrionVrDhcpRelayOperStatus=csOrionVrDhcpRelayOperStatus, csOrionDynamicCryptoMapSessionKeyLifetimeBytes=csOrionDynamicCryptoMapSessionKeyLifetimeBytes, csOrionFwNetMeetingConfig=csOrionFwNetMeetingConfig, csDs3Ds1SendCode=csDs3Ds1SendCode, csOrionMlpppBundlePacketsSent=csOrionMlpppBundlePacketsSent, csFrErrFaultTime=csFrErrFaultTime, csIsisAreaAddrEntry=csIsisAreaAddrEntry, csOrionIpSecTransformStatus=csOrionIpSecTransformStatus, csDs3Ds1IntervalSESs=csDs3Ds1IntervalSESs, csOrionPowerSupplyHWRevision=csOrionPowerSupplyHWRevision, csRsvpIfNbrs=csRsvpIfNbrs, csOrionIKESvrParamMapName=csOrionIKESvrParamMapName, csFRoIPCircuitTable=csFRoIPCircuitTable, csOrionBladeRestore=csOrionBladeRestore, csOrionPppRemoteUserRowStatus=csOrionPppRemoteUserRowStatus, csOrionFwHttpAuthMechanism=csOrionFwHttpAuthMechanism, csPppoeAcIfStatPADRReceive=csPppoeAcIfStatPADRReceive, csDs3ConfigValidInterval=csDs3ConfigValidInterval, csOc3LineCurrentSESs=csOc3LineCurrentSESs, csOc3FarEndPerfMonControl=csOc3FarEndPerfMonControl, csOrionViQoSFilterAclId=csOrionViQoSFilterAclId, csOrionSystemLoginUserEntry=csOrionSystemLoginUserEntry, csOc3SectionPrevDayESs=csOc3SectionPrevDayESs, csOrionRadiusInfo=csOrionRadiusInfo, csOc3PosRcvFrameMaxPacketError=csOc3PosRcvFrameMaxPacketError, csOrionIpSecTransformEntry=csOrionIpSecTransformEntry, csOrionFwSmtpPolicyLocalDomain=csOrionFwSmtpPolicyLocalDomain, csOrionFileSysResultTable=csOrionFileSysResultTable, csOrionFwNntpPolicyRemoteServer=csOrionFwNntpPolicyRemoteServer, csOc3SectionPrevDayTable=csOc3SectionPrevDayTable, csOrionFWInfoEnd=csOrionFWInfoEnd, csRsvpIfQueueTableEnd=csRsvpIfQueueTableEnd, csOrionFwConfig=csOrionFwConfig, csOrionL2tpInfoEnd=csOrionL2tpInfoEnd, csOc3PathDayTable=csOc3PathDayTable, csOrionFRoIPTransportOutPkts=csOrionFRoIPTransportOutPkts, csOrionBladeSlotLocation=csOrionBladeSlotLocation, csTelnetConnIpAddr=csTelnetConnIpAddr, csDs3ConfigDeviceType=csDs3ConfigDeviceType, csOc3LineCurrentCVs=csOc3LineCurrentCVs, csAtmConnAdminStatus=csAtmConnAdminStatus, csFrCircuitEntry=csFrCircuitEntry, csOrionFwInsideIfTable=csOrionFwInsideIfTable, csIsisSysAuthDomainType=csIsisSysAuthDomainType, csOrionIKEPolicySaLifetimeHardKbytes=csOrionIKEPolicySaLifetimeHardKbytes, csIsisSysAuthAreaType=csIsisSysAuthAreaType, csIsisCircL2ExpenseMetric=csIsisCircL2ExpenseMetric, csEthStatsTx128To255Pkts=csEthStatsTx128To255Pkts, csRsvpIfResvOut=csRsvpIfResvOut, csOrionFwInsideIfIf=csOrionFwInsideIfIf, csRsvpIfQueueTable=csRsvpIfQueueTable, csBgpNbrGroupIpv4AdminStatus=csBgpNbrGroupIpv4AdminStatus, csIsisSysMaxAreaAddresses=csIsisSysMaxAreaAddresses, csOrionVrDhcpRelayConfigTable=csOrionVrDhcpRelayConfigTable, csOrionNatStaticVITranslationType=csOrionNatStaticVITranslationType, csOrionAirFlowCardTempState=csOrionAirFlowCardTempState, PerfIntervalCount=PerfIntervalCount, csOc3ValidIntervals=csOc3ValidIntervals, csOrionViStatsInNUcastPkts=csOrionViStatsInNUcastPkts, csDs3Ds1TotalLESs=csDs3Ds1TotalLESs, csRipIfConfTable=csRipIfConfTable, csOrionVrPktFilterTcpStatus=csOrionVrPktFilterTcpStatus, csOrionFwGenCfgTable=csOrionFwGenCfgTable, csFrCircuitReceivedFrames=csFrCircuitReceivedFrames, csIsisISAdjNeighPriority=csIsisISAdjNeighPriority, csOc3AtmCurrentStatsEntry=csOc3AtmCurrentStatsEntry, csOrionManualCryptoMapOutboundAHKey=csOrionManualCryptoMapOutboundAHKey, csOc3AtmIntervalStatsEntry=csOc3AtmIntervalStatsEntry, csOrionVPNEntry=csOrionVPNEntry, PathCost=PathCost, csOrionPptpConnAge=csOrionPptpConnAge, csExpPolMetricType=csExpPolMetricType)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionStatusPanelFWMinorRevision=csOrionStatusPanelFWMinorRevision, csOrionFwDmzIfEntry=csOrionFwDmzIfEntry, csOspfExtLsdbTable=csOspfExtLsdbTable, csOrionNatPoolStatus=csOrionNatPoolStatus, csPppoeAcIfConfigMaxSessionsPerHost=csPppoeAcIfConfigMaxSessionsPerHost, csOrionFwNetMeetingPolicyTimeout=csOrionFwNetMeetingPolicyTimeout, csDs3Ds1ConfigTable=csDs3Ds1ConfigTable, csOrionIpSecEvLogEntry=csOrionIpSecEvLogEntry, csOrionViStatsTable=csOrionViStatsTable, csOrionFRoIPConfMaxPeer=csOrionFRoIPConfMaxPeer, csDot1dPortIndex=csDot1dPortIndex, csOrionTraceRouteReqHops=csOrionTraceRouteReqHops, PwGroupID=PwGroupID, csImpPolBgpCommunity1=csImpPolBgpCommunity1, csPolicyRouteFilterTable=csPolicyRouteFilterTable, csBgpNetworkTableEnd=csBgpNetworkTableEnd, csRtPolicyUserTable=csRtPolicyUserTable, csAtmInterfaceConfOperStatus=csAtmInterfaceConfOperStatus, csOrionL2tpStatsFailedAuthentications=csOrionL2tpStatsFailedAuthentications, csEthStatsRxNormAliCounts=csEthStatsRxNormAliCounts, csLdpEntityKeepAliveHoldTimer=csLdpEntityKeepAliveHoldTimer, csImpPolPeerAS=csImpPolPeerAS, csRtPolicyTermFromPolicyNamesListFlag=csRtPolicyTermFromPolicyNamesListFlag, csOrionFwLnotesPolicyRowStatus=csOrionFwLnotesPolicyRowStatus, csOrionFwHttpPolicyFunctionIds=csOrionFwHttpPolicyFunctionIds, csBgpNbrGroupImpPolId=csBgpNbrGroupImpPolId, csOspfIfMetricTOS=csOspfIfMetricTOS, csOrionIKEPolicyPriority=csOrionIKEPolicyPriority, csPppoeAcIfStatGenericErrorTransmit=csPppoeAcIfStatGenericErrorTransmit, csOrionNumericListRowStatus=csOrionNumericListRowStatus, csPwVcForwardPE=csPwVcForwardPE, MetricType=MetricType, csEthStatsRxRuntCounts=csEthStatsRxRuntCounts, csDs3StatCurrentLESs=csDs3StatCurrentLESs, csImpPolId=csImpPolId, csOrionNatStaticTranslationStatus=csOrionNatStaticTranslationStatus, csOrionServiceQueueInfo=csOrionServiceQueueInfo, csOrionViPbfFilterTable=csOrionViPbfFilterTable, csIsisCircExistState=csIsisCircExistState, csOrionFwSmtpPolicyTimeout=csOrionFwSmtpPolicyTimeout, csOrionFwFtpAuthPasswdTimeout=csOrionFwFtpAuthPasswdTimeout, csOrionFwFtpAuthServiceType=csOrionFwFtpAuthServiceType, csFRoIPCircuitRowStatus=csFRoIPCircuitRowStatus, csOrionFwFtpAuthPerUserAuthFilter=csOrionFwFtpAuthPerUserAuthFilter, csOrionQueueMaxThreshold=csOrionQueueMaxThreshold, csOrionServiceTemplateRowStatus=csOrionServiceTemplateRowStatus, csOrionNatInfoEnd=csOrionNatInfoEnd, csIsisCircManL2Only=csIsisCircManL2Only, csOrionIKESvrParamExpireTimer=csOrionIKESvrParamExpireTimer, csOrionNumConfigChanges=csOrionNumConfigChanges, csIsisISAdjProtSuppAdjIndex=csIsisISAdjProtSuppAdjIndex, csDot1dTpFdbStatus=csDot1dTpFdbStatus, csOc3PathIntervalCVs=csOc3PathIntervalCVs, csUnchanDs3ConfigEncap=csUnchanDs3ConfigEncap, csOrionFwFtpPolicyName=csOrionFwFtpPolicyName, csOrionFwSmtpPolicyMaxRecipients=csOrionFwSmtpPolicyMaxRecipients, csIgmpGeneralEntryRowStatus=csIgmpGeneralEntryRowStatus, csBgpNbrGroupImpPolRowStatus=csBgpNbrGroupImpPolRowStatus, csOrionNatPoolEndPort=csOrionNatPoolEndPort, csOrionDhcpRelayStatsEntry=csOrionDhcpRelayStatsEntry, csExpFilterIfExpValue=csExpFilterIfExpValue, csOrionManualCryptoMapName=csOrionManualCryptoMapName, csOrionFwPop3PolicyAuthenticate=csOrionFwPop3PolicyAuthenticate, csEthModuleIndex=csEthModuleIndex, csOrionViStatsEntry=csOrionViStatsEntry, csOrionQueueTotalByteCount=csOrionQueueTotalByteCount, csOrionVrPktFilterAction=csOrionVrPktFilterAction, csOrionFwPop3PolicyTimeout=csOrionFwPop3PolicyTimeout, csFRoIPCircuitSentFrames=csFRoIPCircuitSentFrames, csOrionL2tpConfigMaxSessionsPerTunnel=csOrionL2tpConfigMaxSessionsPerTunnel, csOrionTraceRouteResultTable=csOrionTraceRouteResultTable, csIsisCircL1CSNPInterval=csIsisCircL1CSNPInterval, csPppoeAcIfStatTable=csPppoeAcIfStatTable, csIgmpCacheLastReporter=csIgmpCacheLastReporter, csIsisExpPolTableEnd=csIsisExpPolTableEnd, csOrionExpFilterInfo=csOrionExpFilterInfo, csOrionFwHttpPolicyHeader=csOrionFwHttpPolicyHeader, csOrionVPNVRouterTcpConnLocalPort=csOrionVPNVRouterTcpConnLocalPort, csRsvpIfBadOtherIn=csRsvpIfBadOtherIn, csOrionPptpConnStatus=csOrionPptpConnStatus, csRtPolicyTermFromProtocol=csRtPolicyTermFromProtocol, csOrionVPNVRouterManagedIpRouteMetric5=csOrionVPNVRouterManagedIpRouteMetric5, csOrionIKEPolicyTable=csOrionIKEPolicyTable, csOrionSystemBootDefGw=csOrionSystemBootDefGw, csAtmInterfaceConfUniVersion=csAtmInterfaceConfUniVersion, csOrionIKECryptoMapEntry=csOrionIKECryptoMapEntry, csOspfASBdrRtrStatus=csOspfASBdrRtrStatus, csOrionManualCryptoMapInboundAHKey=csOrionManualCryptoMapInboundAHKey, csOspfNbrState=csOspfNbrState, csIsisSysSeqNumSkips=csIsisSysSeqNumSkips, csOspfStubMetricType=csOspfStubMetricType, csPppoeAcIfStatAccessVRFails=csPppoeAcIfStatAccessVRFails, csOrionFRoIPTransportPermittedBadEvents=csOrionFRoIPTransportPermittedBadEvents, csOrionPktFilterInfo=csOrionPktFilterInfo, csAtmInterfaceConfEvLogLevel=csAtmInterfaceConfEvLogLevel, csFrCircuitDlci=csFrCircuitDlci, csOrionFwCompuServePolicyName=csOrionFwCompuServePolicyName, csOrionFwPlugConfigEnd=csOrionFwPlugConfigEnd, csIsisSysOperState=csIsisSysOperState, csOrionFileSysReqIndex=csOrionFileSysReqIndex, csOrionSystemLoginPermEntry=csOrionSystemLoginPermEntry, csIsisISAdjProtSuppCircIndex=csIsisISAdjProtSuppCircIndex, csOrionRestoreBladeStatus=csOrionRestoreBladeStatus, csOspfVirtIfTable=csOspfVirtIfTable, csDs3Ds1ConfigEntry=csDs3Ds1ConfigEntry, csBgpGenTable=csBgpGenTable, csDnsServer=csDnsServer, csOrionPacketRingPrimToProtPreviousEndpointSlot=csOrionPacketRingPrimToProtPreviousEndpointSlot, csOspfIfHelloInterval=csOspfIfHelloInterval, csUnchanDs3ConfigEntry=csUnchanDs3ConfigEntry, csOrionViStatsOutOctets=csOrionViStatsOutOctets, csOrionTemperatureThreshold=csOrionTemperatureThreshold, csIgmpInterfaceEntry=csIgmpInterfaceEntry, csOrionIKEStatsPhase1Negotiations=csOrionIKEStatsPhase1Negotiations, csOrionVPNVRouterIpRouteType=csOrionVPNVRouterIpRouteType, csOrionVPNVRouterIpInAddrErrors=csOrionVPNVRouterIpInAddrErrors, csOrionIpSecStateSAFlag=csOrionIpSecStateSAFlag, csOrionL2tpSessionTable=csOrionL2tpSessionTable, csOrionViPbfFilterAclId=csOrionViPbfFilterAclId, csOrionAAAServerPort=csOrionAAAServerPort, csOrionPowerSupplyControlInfo=csOrionPowerSupplyControlInfo, csOrionViQoSFilterIndex=csOrionViQoSFilterIndex, csOrionIsis=csOrionIsis, csOrionDynamicCryptoMapName=csOrionDynamicCryptoMapName, csPosInterfaceConfModuleIndex=csPosInterfaceConfModuleIndex, csOrionVPNVRouterIpAdEntAddr=csOrionVPNVRouterIpAdEntAddr, csOrionViStatsRateLimitTimeElapsed=csOrionViStatsRateLimitTimeElapsed, csIsisIPReachAddr=csIsisIPReachAddr, csOc3PosRcvAbortedFrames=csOc3PosRcvAbortedFrames, csAtmInterfaceReceivedCells=csAtmInterfaceReceivedCells, csOrionVncQueueRowStatus=csOrionVncQueueRowStatus, csDot1dPortEntry=csDot1dPortEntry, csOrionBladeSharcCryptoModuleId2=csOrionBladeSharcCryptoModuleId2, csOrionIpSecStatsEspEncryptPktsOk=csOrionIpSecStatsEspEncryptPktsOk, csOrionVrIfManagerTable=csOrionVrIfManagerTable, csAtmConnInArpInvalidInReqs=csAtmConnInArpInvalidInReqs, csDot1dTpAgingTime=csDot1dTpAgingTime, csOrionIpSecStateHashAlgorithm=csOrionIpSecStateHashAlgorithm, csUnchanDs3ConfigPortIndex=csUnchanDs3ConfigPortIndex, csPosOperStatus=csPosOperStatus, csOrionPingCtlSourceAddress=csOrionPingCtlSourceAddress, csOrionVPNVRouterIpFragFails=csOrionVPNVRouterIpFragFails, csOrionSyslogdFacility12=csOrionSyslogdFacility12, csOrionVPNVRouterManagedIpRouteRowStatus=csOrionVPNVRouterManagedIpRouteRowStatus, csOrionVrDhcpRelaySecsThreshold=csOrionVrDhcpRelaySecsThreshold, csOrionFileSysReqType=csOrionFileSysReqType, csAtmConnArpAgingTime=csAtmConnArpAgingTime, csOrionIKECryptoMapTransformSet5=csOrionIKECryptoMapTransformSet5, csExpPolExtRteTag=csExpPolExtRteTag, csOrionVPNNotifyInfo=csOrionVPNNotifyInfo, csOrionGenAclStartDstPort=csOrionGenAclStartDstPort, csOrionConnectionProfileRowStatus=csOrionConnectionProfileRowStatus, csOspfIfAdvertiseSubnet=csOspfIfAdvertiseSubnet, csIsisISAdjAreaAddrEntry=csIsisISAdjAreaAddrEntry, csOrionDynamicCryptoMapNumber=csOrionDynamicCryptoMapNumber, csOrionVPNGeneralInfo=csOrionVPNGeneralInfo, MplsLdpGenAddr=MplsLdpGenAddr, csUnchanDs3ConfigValidInterval=csUnchanDs3ConfigValidInterval, csOrionVPNVRouterTcpCurrEstab=csOrionVPNVRouterTcpCurrEstab, csRsvpSessionTunnelEndpoint=csRsvpSessionTunnelEndpoint, csVpnVrfRouteTargetTable=csVpnVrfRouteTargetTable, csVpnVrfEntry=csVpnVrfEntry, csOrionAAAServerLdapSearchFilter=csOrionAAAServerLdapSearchFilter, csOspfIfMd5Key=csOspfIfMd5Key, csOrionDhcpRelayOutReqs=csOrionDhcpRelayOutReqs, csDs3ConfigLineStatus=csDs3ConfigLineStatus, csOspfVirtNbrIpAddr=csOspfVirtNbrIpAddr, csFrDlcmiMaxSupportedVCs=csFrDlcmiMaxSupportedVCs, csPppoeAcIfStatPADIReceive=csPppoeAcIfStatPADIReceive, csOrionIpSecStatsAhDecryptPktsOk=csOrionIpSecStatsAhDecryptPktsOk, csOrionVPNVRouterUdpListenerTable=csOrionVPNVRouterUdpListenerTable, csOrionFanSpeed=csOrionFanSpeed, csOrionVPNVRouterIpNetToMediaNetAddress=csOrionVPNVRouterIpNetToMediaNetAddress, csOrionViPbfFilterRowStatus=csOrionViPbfFilterRowStatus, csOrionIKECryptoMapTransformSet3=csOrionIKECryptoMapTransformSet3, csAtmInterfaceConfReceivedPackets=csAtmInterfaceConfReceivedPackets, csEthStatsTx512To1023Pkts=csEthStatsTx512To1023Pkts, csOrionConnectionProfileVrId=csOrionConnectionProfileVrId, csOrionVIfRemoteEnd=csOrionVIfRemoteEnd, csOrionVrSpfTcpInitTblSize=csOrionVrSpfTcpInitTblSize, csOrionFwHttpConfigEntry=csOrionFwHttpConfigEntry, csOrionOspfMaxAgeLsa=csOrionOspfMaxAgeLsa, csOrionEventsInfo=csOrionEventsInfo, csBgpNbrGroupHoldTimeConfigured=csBgpNbrGroupHoldTimeConfigured, csIsisSysExistState=csIsisSysExistState, csMplsInterfaceLabelMinOut=csMplsInterfaceLabelMinOut, csOrionIpSecTransformTable=csOrionIpSecTransformTable, csOrionIpSecStateLastUsed=csOrionIpSecStateLastUsed, csEthSubIfEntry=csEthSubIfEntry, csOrionVPNVRouterTcpConnState=csOrionVPNVRouterTcpConnState, csIsisISAdjProtSuppSysInstance=csIsisISAdjProtSuppSysInstance, csDs3StatCurrentUASs=csDs3StatCurrentUASs, IKERadiusAcctUserType=IKERadiusAcctUserType, csOrionVPNVRouterUdpListenerLocalAddress=csOrionVPNVRouterUdpListenerLocalAddress, csMplsOspfExtensionsRowStatus=csMplsOspfExtensionsRowStatus, csIgmpStaticGroupIfIndex=csIgmpStaticGroupIfIndex, csOrionFwTelnetAuthEntry=csOrionFwTelnetAuthEntry, csOrionPingResultsUnreachables=csOrionPingResultsUnreachables, csOrionIpSecTransformInitVector=csOrionIpSecTransformInitVector, csOrionFRoIPAdminStatus=csOrionFRoIPAdminStatus, csOrionFwTelnetPolicyPrompt=csOrionFwTelnetPolicyPrompt, csMplsPathOspfAutoRouteAnnounce=csMplsPathOspfAutoRouteAnnounce, csOrionSystemBootServerAddress=csOrionSystemBootServerAddress, csOspfExternLsaCount=csOspfExternLsaCount, csOrionIpEnd=csOrionIpEnd, csOc3SlotIndex=csOc3SlotIndex, csOrionPacketRingStatusChange=csOrionPacketRingStatusChange, csOrionSystemBootPort=csOrionSystemBootPort, csRtPolicyTermFromRouteFilterFlag=csRtPolicyTermFromRouteFilterFlag, csBgpGenVpnLogAreaFlag=csBgpGenVpnLogAreaFlag, csOrionVPNVRouterIpFragOKs=csOrionVPNVRouterIpFragOKs, csOrionFwProxyDaemonRowStatus=csOrionFwProxyDaemonRowStatus, csOrionVPNVRouterTcpEstabResets=csOrionVPNVRouterTcpEstabResets, csDs3StatIntervalCCVs=csDs3StatIntervalCCVs, csOspfVirtIfStatus=csOspfVirtIfStatus, csBgpNbrMhopGw=csBgpNbrMhopGw, csOrionQueueWeight=csOrionQueueWeight, csOc3SectionCurrentCVs=csOc3SectionCurrentCVs, csOspfExtLsdbSequence=csOspfExtLsdbSequence, csMplsInterfaceAttribFlags=csMplsInterfaceAttribFlags, csOrionFwSmtpPolicyLogging=csOrionFwSmtpPolicyLogging, csMplsPathRecordRoute=csMplsPathRecordRoute, csIsisSysWaitTime=csIsisSysWaitTime, csOrionPingCtlTestName=csOrionPingCtlTestName, csOrionL2tpConfigEntry=csOrionL2tpConfigEntry, csOc3PathIntervalNumber=csOc3PathIntervalNumber, csAtmInterfaceConfMaxActiveVciBits=csAtmInterfaceConfMaxActiveVciBits, csRtPolicyTermActionBgpOrigin=csRtPolicyTermActionBgpOrigin, csRsvpIfBadPathIn=csRsvpIfBadPathIn, csIsisISAdjProtSuppEntry=csIsisISAdjProtSuppEntry, csOrionVIfIpMask=csOrionVIfIpMask, csOrionAddressListMask=csOrionAddressListMask, csRtPolicyTermFromMetric1=csRtPolicyTermFromMetric1, csOrionQueuePacketCount=csOrionQueuePacketCount, csOrionSystemLoginUserDesc=csOrionSystemLoginUserDesc, csOrionVIfCryptoMapName=csOrionVIfCryptoMapName, csBgpNbrGroupKeepAliveConfigured=csBgpNbrGroupKeepAliveConfigured, csOrionDhcpRelayInReqs=csOrionDhcpRelayInReqs, csFrDlcmiStatStatusEnquiries=csFrDlcmiStatStatusEnquiries, csIsisIPRAIndex=csIsisIPRAIndex, csIsisCircLocalID=csIsisCircLocalID, csIgmpInterfaceStatus=csIgmpInterfaceStatus, csImpPolGenAclId=csImpPolGenAclId, csAtmConnStatsTableEnd=csAtmConnStatsTableEnd, csOrionVncQueueMaxBw=csOrionVncQueueMaxBw, csBgpNbrLogAreaFlag=csBgpNbrLogAreaFlag, csOrionVPNVRouterManagedIpRouteInstallOption=csOrionVPNVRouterManagedIpRouteInstallOption, csOrionL2tpStatsTable=csOrionL2tpStatsTable, csOrionBgpMaxPfxLimitEvent=csOrionBgpMaxPfxLimitEvent, csOrionIKEStateMaxRetryDuration=csOrionIKEStateMaxRetryDuration, AreaID=AreaID, csOrionFwNetMeetingPolicyRowStatus=csOrionFwNetMeetingPolicyRowStatus, csOrionAAAServerRetransmit=csOrionAAAServerRetransmit, csDs3StatCurrentPCVs=csDs3StatCurrentPCVs)
mibBuilder.exportSymbols("COSINE-ORION-MIB", SupportedProtocol=SupportedProtocol, csOrionFwSmtpPolicySpamReply=csOrionFwSmtpPolicySpamReply, csOrionFRoIPTransportOutBytes=csOrionFRoIPTransportOutBytes, csFRoIPCircuitReceivedBECNs=csFRoIPCircuitReceivedBECNs, csOrionGreConfigEntry=csOrionGreConfigEntry, csOrionVPNVRouterIpNetToMediaEntry=csOrionVPNVRouterIpNetToMediaEntry, csEthStatsRxNormCrcCounts=csEthStatsRxNormCrcCounts, csOrionFwCompuServePolicyRemotePort=csOrionFwCompuServePolicyRemotePort, csOrionIKECertPrivateKey=csOrionIKECertPrivateKey, csDs3Ds1IntervalSEFSs=csDs3Ds1IntervalSEFSs, csOrionHWNotifyInfo=csOrionHWNotifyInfo, csOrionOspfNbrStateChange=csOrionOspfNbrStateChange, csOrionSnmpCommString=csOrionSnmpCommString, csOrionVPNVRouterUdpInDatagrams=csOrionVPNVRouterUdpInDatagrams, csOrionIpLocalAddrPoolEntry=csOrionIpLocalAddrPoolEntry, csOrionOc3PosStats=csOrionOc3PosStats, csOrionTrapReceiverEntry=csOrionTrapReceiverEntry, csIsisIPRAOperState=csIsisIPRAOperState, csIsisL2SummAddrErrorMetric=csIsisL2SummAddrErrorMetric, csIgmpCacheTable=csIgmpCacheTable, csOrionFanEntry=csOrionFanEntry, csOrionMeterEnd=csOrionMeterEnd, csOrionAAAServerListConfigEntry=csOrionAAAServerListConfigEntry, csOrionIKECryptoMapTable=csOrionIKECryptoMapTable, csOrionSystemTime=csOrionSystemTime, csDs3StatIntervalPSESs=csDs3StatIntervalPSESs, csOspfExternLsaCksumSum=csOspfExternLsaCksumSum, csDs3ConfigPortIndex=csDs3ConfigPortIndex, csIsisISAdjState=csIsisISAdjState, csDot1dBaseBridgeEntry=csDot1dBaseBridgeEntry, csFrDlcmiAddress=csFrDlcmiAddress, csIgmpInterfaceVersion=csIgmpInterfaceVersion, csOrionFwTelnetPolicyAuthenticate=csOrionFwTelnetPolicyAuthenticate, csOrionSystemLoginDomainVRList=csOrionSystemLoginDomainVRList, csOrionFwTelnetAuthPasswdTimeout=csOrionFwTelnetAuthPasswdTimeout, csOrionFwLdapPolicyTimeout=csOrionFwLdapPolicyTimeout, csOrionIKESvrParamRetryLimit=csOrionIKESvrParamRetryLimit, csOrionIKESvrParamRadiusAcctUserTypePriority3=csOrionIKESvrParamRadiusAcctUserTypePriority3, csOrionFwEvLogLevel=csOrionFwEvLogLevel, csBgpGenEntry=csBgpGenEntry, csOrionDynamicCryptoMapPfs=csOrionDynamicCryptoMapPfs, csOrionDhcpRelayOutRels=csOrionDhcpRelayOutRels, csOrionTunnelSwitchTargetRowStatus=csOrionTunnelSwitchTargetRowStatus, csOrionVPNVRouterIndex=csOrionVPNVRouterIndex, csOrionAAAServerLdapUsername=csOrionAAAServerLdapUsername, csDs3StatTotalCESs=csDs3StatTotalCESs, csIgmpInterfaceQueryMaxResponseTime=csIgmpInterfaceQueryMaxResponseTime, csRipGlobalConfRowStatus=csRipGlobalConfRowStatus, csOrionFRoIPInfo=csOrionFRoIPInfo, csMplsLspTo=csMplsLspTo, csOrionAddressListTableEnd=csOrionAddressListTableEnd, csOrionFwHostRowStatus=csOrionFwHostRowStatus, csOrionNatStaticTranslationType=csOrionNatStaticTranslationType, csOrionSystemLoginDomainDesc=csOrionSystemLoginDomainDesc, csDs3StatTotalTable=csDs3StatTotalTable, csRsvpIfDownRsbsCreated=csRsvpIfDownRsbsCreated, csOrionIKEPolicyAuthorizationTypeFlag=csOrionIKEPolicyAuthorizationTypeFlag, csOrionPptpConfAuthentication=csOrionPptpConfAuthentication, csOrionIKEStateBytesTransferred=csOrionIKEStateBytesTransferred, csTeMplsObjects=csTeMplsObjects, csDot1dTpFdbPort=csDot1dTpFdbPort, csDs3Ds1IntervalLCVs=csDs3Ds1IntervalLCVs, csOrionEngineApplicationDate=csOrionEngineApplicationDate, csOc3PathIntervalSESs=csOc3PathIntervalSESs, csRipGlobalConfEntry=csRipGlobalConfEntry, csOspfExtLsdbType=csOspfExtLsdbType, csOrionL2tpStatsFailedSessions=csOrionL2tpStatsFailedSessions, csOspfIfTransitDelay=csOspfIfTransitDelay, csOrionVrSecondaryNbnsServer=csOrionVrSecondaryNbnsServer, csAtmConnReceivedArpResponses=csAtmConnReceivedArpResponses, csOrionManualCryptoMapStatus=csOrionManualCryptoMapStatus, csOrionSystemBootImageName6=csOrionSystemBootImageName6, csOc3LineDaySESs=csOc3LineDaySESs, HelloRange=HelloRange, csFrDlcmiMonitoredEvents=csFrDlcmiMonitoredEvents, csOspfAreaOperStatus=csOspfAreaOperStatus, csOrionFwAolPolicyTimeout=csOrionFwAolPolicyTimeout, csDs3ConfigMdlGenerator=csDs3ConfigMdlGenerator, csOrionLogLinkSubIfIndex=csOrionLogLinkSubIfIndex, csOrionFwLnotesPolicyAuthenticate=csOrionFwLnotesPolicyAuthenticate, csOrionAccessListId=csOrionAccessListId, csIsisExpPolTable=csIsisExpPolTable, csOrionSystemMajorVer=csOrionSystemMajorVer, csImpPolAction=csImpPolAction, csOrionServiceProviderVrUp=csOrionServiceProviderVrUp, csPppoeSessionOperStatus=csPppoeSessionOperStatus, csOspfNbrIpAddr=csOspfNbrIpAddr, csOrionSnmpGenStatus=csOrionSnmpGenStatus, csPppoeAcIfPortIndex=csPppoeAcIfPortIndex, csIsisSysMinL1LSPGenInt=csIsisSysMinL1LSPGenInt, csOrionIKEDialupConnEntry=csOrionIKEDialupConnEntry, csOrionFwHttpPolicyEntry=csOrionFwHttpPolicyEntry, csPppoeSessionPeerAddress=csPppoeSessionPeerAddress, csOrionIKEPolicySaLifetimeSoftKbytes=csOrionIKEPolicySaLifetimeSoftKbytes, MplsAtmVcIdentifier=MplsAtmVcIdentifier, csAtmConnOamLoopbackRetryPvcDownAge=csAtmConnOamLoopbackRetryPvcDownAge, csAtmConnIpAddressTableEnd=csAtmConnIpAddressTableEnd, csExpPolBgpAS=csExpPolBgpAS, csIsisISAdjUsage=csIsisISAdjUsage, csOspfPrefExt=csOspfPrefExt, csTelnetConnRowStatus=csTelnetConnRowStatus, csOrionSystemLoginRoleDesc=csOrionSystemLoginRoleDesc, csOrionSnmpInfo=csOrionSnmpInfo, csOrionSystemShutdown=csOrionSystemShutdown, csAtmConnDynamicArpCacheTable=csAtmConnDynamicArpCacheTable, csIsisExpPolStatus=csIsisExpPolStatus, csOrionFwNwGroupRowStatus=csOrionFwNwGroupRowStatus, csExpFilterDirection=csExpFilterDirection, csOrionPppIfEncryption=csOrionPppIfEncryption, csEthStatsRxLongCrcCounts=csEthStatsRxLongCrcCounts, csRtPolicyTermActionPreference=csRtPolicyTermActionPreference, csOrionIpSecStatsEspCurrentInboundSAs=csOrionIpSecStatsEspCurrentInboundSAs, csUnchanDs3ConfigClockSource=csUnchanDs3ConfigClockSource, csOrionViPktFilterRowStatus=csOrionViPktFilterRowStatus, csOrionLacConfigTable=csOrionLacConfigTable, csDs3ConfigMdlPfi=csDs3ConfigMdlPfi, csTelnetConnTable=csTelnetConnTable, csOrionL2tpSessionFlowControl=csOrionL2tpSessionFlowControl, csOrionFRoIPTransportTable=csOrionFRoIPTransportTable, csOrionNatClearTrans=csOrionNatClearTrans, csOrionFwInsideIfRowStatus=csOrionFwInsideIfRowStatus, csOrionPppIfEvLogArea=csOrionPppIfEvLogArea, csOrionVrSpfConnTblSize=csOrionVrSpfConnTblSize, csOrionL2tpConfigTunnelMaxRetransmissionTimeout=csOrionL2tpConfigTunnelMaxRetransmissionTimeout, csOrionGenAclStartSrcPort=csOrionGenAclStartSrcPort, csOrionIKEDialupConnDistinguishName=csOrionIKEDialupConnDistinguishName, csMplsLspPackets=csMplsLspPackets, csOrionBladeTemperatureSensor2=csOrionBladeTemperatureSensor2, csRtPolicyTermActionOspfTag=csRtPolicyTermActionOspfTag, csOrionFwHttpAuthStatus=csOrionFwHttpAuthStatus, csDs3Ds1TotalSEFSs=csDs3Ds1TotalSEFSs, csOrionVPNVRouterManagedIpRouteNextHop=csOrionVPNVRouterManagedIpRouteNextHop, csOrionEngineTable=csOrionEngineTable, csEthSpeed=csEthSpeed, csIsisCircRejAdjs=csIsisCircRejAdjs, csIsisIPRAExpMetricType=csIsisIPRAExpMetricType, csBgpNbrGroupMd5Password=csBgpNbrGroupMd5Password, csOrionViPktFilterDirection=csOrionViPktFilterDirection, csOrionManualCryptoMapOutboundESPSPI=csOrionManualCryptoMapOutboundESPSPI, csOrionTraceRouteReqIndex=csOrionTraceRouteReqIndex, csOrionModuleIndex=csOrionModuleIndex, csOc3Loopback=csOc3Loopback, csOc3PosSentBytes=csOc3PosSentBytes, csRsvpVrConfTableEnd=csRsvpVrConfTableEnd, csOrionManualCryptoMapInboundESPKey=csOrionManualCryptoMapInboundESPKey, csRtPolicyTermFromPreference1=csRtPolicyTermFromPreference1, csOrionAAAServerLdapPassword=csOrionAAAServerLdapPassword, csMplsLspID=csMplsLspID, csFRoIPCircuitFwdLink=csFRoIPCircuitFwdLink, csEthStatsTxColCounts=csEthStatsTxColCounts, csAtmInterfaceConfReceivedEncapsulationErrors=csAtmInterfaceConfReceivedEncapsulationErrors, csMplsVrConfRowStatus=csMplsVrConfRowStatus, csOrionPingCtlRowStatus=csOrionPingCtlRowStatus, csBgpNbrGroupEntry=csBgpNbrGroupEntry, csOc3ReceivedPathJ1=csOc3ReceivedPathJ1, csOrionQoSMeterProfileStatus=csOrionQoSMeterProfileStatus, csOspfStubAreaEntry=csOspfStubAreaEntry, csOrionVrNbnsConfigTable=csOrionVrNbnsConfigTable, csOrionPowerSupplyEventTrapGeneration=csOrionPowerSupplyEventTrapGeneration, csIgmpStaticGroupTable=csIgmpStaticGroupTable, csOrionEngineMemoryAllocs=csOrionEngineMemoryAllocs, csExpPolAction=csExpPolAction, csOrionIpLocalAddrPoolStartRange=csOrionIpLocalAddrPoolStartRange, csOrionVrPktFilterCounterStatus=csOrionVrPktFilterCounterStatus, csOrionIKECryptoMapName=csOrionIKECryptoMapName, csExpFilterRowStatus=csExpFilterRowStatus, csOc3FarEndJ1=csOc3FarEndJ1, csOrionFwHttpPortAccess=csOrionFwHttpPortAccess, csOrionTraceRouteReqTable=csOrionTraceRouteReqTable, csOrionEngineForwardingMode=csOrionEngineForwardingMode, csOrionRadiusAcctVpnId=csOrionRadiusAcctVpnId, csOspfTOSSupport=csOspfTOSSupport, csOrionStatusPanelPortBaudRate=csOrionStatusPanelPortBaudRate, csOrionFwCompuServePolicyRemoteServer=csOrionFwCompuServePolicyRemoteServer, csOrionFwTelnetAuthServiceType=csOrionFwTelnetAuthServiceType, csOrionPppRemoteUserPassword=csOrionPppRemoteUserPassword, csOrionAddressListIpAddress=csOrionAddressListIpAddress, csDs3StatIntervalTable=csDs3StatIntervalTable, csOrionBladeSharcCryptoSerial2=csOrionBladeSharcCryptoSerial2, csOrionSyslogdFacility4=csOrionSyslogdFacility4, csOrionAAAServerIpAddress=csOrionAAAServerIpAddress, csDs3ConfigMdlPort=csDs3ConfigMdlPort, csEthStatsRx65To127Pkts=csEthStatsRx65To127Pkts, csUnchanDs3ConfigMdlUnit=csUnchanDs3ConfigMdlUnit, csRtPolicyTermActionPreferenceOp=csRtPolicyTermActionPreferenceOp, csOrionPingCtlProbeCount=csOrionPingCtlProbeCount, csAtmConnReceivedArpRequests=csAtmConnReceivedArpRequests, csPppoeAcIfStatPADRReject=csPppoeAcIfStatPADRReject, csPwe3EventLogLevel=csPwe3EventLogLevel, csOrionTrapReceiverTrapType=csOrionTrapReceiverTrapType, csOrionIpSecStatsEspCryptoCepEstablishOk=csOrionIpSecStatsEspCryptoCepEstablishOk, csAtmInterfaceConfTransmittedBytes=csAtmInterfaceConfTransmittedBytes, csOspfLsdbLsid=csOspfLsdbLsid, csRtPolicyPrefixListTableEnd=csRtPolicyPrefixListTableEnd, csOrionGenAclEndDstPort=csOrionGenAclEndDstPort, csOrionTemperatureAirFlowCardInfo=csOrionTemperatureAirFlowCardInfo, csBgpNbrGroupImpPolEntry=csBgpNbrGroupImpPolEntry, csOspfHostEntry=csOspfHostEntry, csOrionFwMsSqlPolicyRemoteServer=csOrionFwMsSqlPolicyRemoteServer, csOrionFwSmtpPolicyLogSpam=csOrionFwSmtpPolicyLogSpam, csOrionPowerSupplyIndex=csOrionPowerSupplyIndex, csOrionFwPop3PolicyEntry=csOrionFwPop3PolicyEntry, csOrionFwCompuServeConfig=csOrionFwCompuServeConfig, csDs3Ds1IntervalLESs=csDs3Ds1IntervalLESs, csRtPolicyTermActionMetric2Op=csRtPolicyTermActionMetric2Op, csOrionIKECryptoMapLocalIdentityType=csOrionIKECryptoMapLocalIdentityType, csOspfAreaAuthType=csOspfAreaAuthType, csBgpNetworkTable=csBgpNetworkTable, csRtPolicyStrType=csRtPolicyStrType, csEthStatsTxOctetsBad=csEthStatsTxOctetsBad, csOrionNumericListName=csOrionNumericListName, csOrionFwTelnetPolicyEntry=csOrionFwTelnetPolicyEntry, csPppoeSessionReceivedOctets=csPppoeSessionReceivedOctets, csAtmConnReceivedCells=csAtmConnReceivedCells, csOrionSystemCLIRadiusAuthentication=csOrionSystemCLIRadiusAuthentication, csPppoeAcIfStatACSystemErrors=csPppoeAcIfStatACSystemErrors, csOrionIKEStateNegotiations=csOrionIKEStateNegotiations, csOrionEngineLargestFreeMemory=csOrionEngineLargestFreeMemory, csOrionViStatsRateLimitRxPktsDropped=csOrionViStatsRateLimitRxPktsDropped, csMplsPathAffinityMask=csMplsPathAffinityMask, csPppoeAcIfConfigAdminStatus=csPppoeAcIfConfigAdminStatus, csOrionManualCryptoMapOutboundAHSPI=csOrionManualCryptoMapOutboundAHSPI, csOrionPppIfTimeout=csOrionPppIfTimeout, csOrionPowerSupplyOutputPowerState=csOrionPowerSupplyOutputPowerState, csRtPolicyName=csRtPolicyName, csEthStatsRxFalsCrcCounts=csEthStatsRxFalsCrcCounts, csOrionDHCPInfo=csOrionDHCPInfo, csOrionFwRshPolicyRowStatus=csOrionFwRshPolicyRowStatus, csOspfExpPolId=csOspfExpPolId, csBgpNbrMaxPfxType=csBgpNbrMaxPfxType, csRsvpIfResvErrOut=csRsvpIfResvErrOut, csOrionVPNVRouterIpDecTtl=csOrionVPNVRouterIpDecTtl, csOrionIKEStateRemoteAddress=csOrionIKEStateRemoteAddress, csDs3Ds1ClockSource=csDs3Ds1ClockSource, csEthStatsTxPausePktsOk=csEthStatsTxPausePktsOk, csRtPolicyTermFromBgpLocalPref=csRtPolicyTermFromBgpLocalPref, csOrionAddressListRowStatus=csOrionAddressListRowStatus, csAtmConnType=csAtmConnType, csDs3StatCurrentTable=csDs3StatCurrentTable, csOrionFwSmtpConfig=csOrionFwSmtpConfig, csOrionIKEStateMaxRetryDurationMicroSec=csOrionIKEStateMaxRetryDurationMicroSec, csOc3LineIntervalCVs=csOc3LineIntervalCVs, csOrionOspf=csOrionOspf, csBgpNbrMhopTTL=csBgpNbrMhopTTL, csChDs3Table=csChDs3Table, csOrionL2tpStatsPayloadRecvPackets=csOrionL2tpStatsPayloadRecvPackets, csOrionFarEndReceiveFailure=csOrionFarEndReceiveFailure, csAtmInterfaceConfReceivedDroppedPkts=csAtmInterfaceConfReceivedDroppedPkts, csRtPolicyTermFromNbrAddr=csRtPolicyTermFromNbrAddr, csOrionVrRadiusSvrAddress=csOrionVrRadiusSvrAddress, csOrionSnmpCommRowStatus=csOrionSnmpCommRowStatus, csOrionViStatsRateLimitTxPktsDropped=csOrionViStatsRateLimitTxPktsDropped, csOspfAreaTable=csOspfAreaTable, csOrionQoSMeterAclList=csOrionQoSMeterAclList)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOc3SectionDayCVs=csOc3SectionDayCVs, csIsisL2SummAddrSysInstance=csIsisL2SummAddrSysInstance, csRsvpIfResvTearIn=csRsvpIfResvTearIn, csRtPolicyTermActionFlag=csRtPolicyTermActionFlag, csRsvpIfQueueOperBandwidth=csRsvpIfQueueOperBandwidth, csOrionMlpppLinkSlotIndex=csOrionMlpppLinkSlotIndex, csDs3ConfigFraming=csDs3ConfigFraming, csOrionStatusPanelFWRelease=csOrionStatusPanelFWRelease, csOrionFwInsideIfMask=csOrionFwInsideIfMask, csTelnetSvrConfNumOfSessions=csTelnetSvrConfNumOfSessions, csOc3PosStatsEntry=csOc3PosStatsEntry, csOrionFanTrayControlTable=csOrionFanTrayControlTable, csOspfNbrHelloSuppressed=csOspfNbrHelloSuppressed, csRtPolicyRouteFilterActionLogFlag=csRtPolicyRouteFilterActionLogFlag, csAtmInterfaceConfMaxVpcs=csAtmInterfaceConfMaxVpcs, csVpnVrfRouteTargetType=csVpnVrfRouteTargetType, PwVcID=PwVcID, csIsisSysLSPL1DbaseOloads=csIsisSysLSPL1DbaseOloads, csFrDlcmiStatMissingResponses=csFrDlcmiStatMissingResponses, csOrionBladeIPSXLoaderVersion=csOrionBladeIPSXLoaderVersion, csIsisCircMeshGroup=csIsisCircMeshGroup, csBgpConfedAS=csBgpConfedAS, csIsisCircSmallHellos=csIsisCircSmallHellos, csOrionIKEDialupConnUserId=csOrionIKEDialupConnUserId, csRsvpSessionDownRsbs=csRsvpSessionDownRsbs, csBgpNbrImpPolEntry=csBgpNbrImpPolEntry, csOrionVPNVRouterTcpTable=csOrionVPNVRouterTcpTable, csOrionAlarmType=csOrionAlarmType, csAtmConnInArpAdminStatus=csAtmConnInArpAdminStatus, csOrionAccessListPoolId=csOrionAccessListPoolId, csOrionVrIfManagerSubifIndex=csOrionVrIfManagerSubifIndex, csOrionRadiusAcctTable=csOrionRadiusAcctTable, csOrionVrPktFilterDirection=csOrionVrPktFilterDirection, csOrionAccessListStartAddress=csOrionAccessListStartAddress, csOrionPacketRingProtToPrimPreviousEndpointSlot=csOrionPacketRingProtToPrimPreviousEndpointSlot, csPwVcStorageType=csPwVcStorageType, csOrionFwSmtpSpamSource=csOrionFwSmtpSpamSource, csEthStatsEntry=csEthStatsEntry, csOrionIpSecStatsRcvEspPktsBadEsp=csOrionIpSecStatsRcvEspPktsBadEsp, csUnchanDs3ConfigTable=csUnchanDs3ConfigTable, csLdpEntityTransportAddr=csLdpEntityTransportAddr, csChDs3ModuleIndex=csChDs3ModuleIndex, csUnchanDs3ConfigMdlFic=csUnchanDs3ConfigMdlFic, csOrionFRoIPTransportKeepAlive=csOrionFRoIPTransportKeepAlive, csOc3SectionPrevDayEntry=csOc3SectionPrevDayEntry, csOrionAAAServerConfigTableEnd=csOrionAAAServerConfigTableEnd, csEthStatsRxShortPktsOk=csEthStatsRxShortPktsOk, csOrionL2tpConfigServiceIf=csOrionL2tpConfigServiceIf, csEthStatsTxErrCounts=csEthStatsTxErrCounts, csIsisCircIfSubIndex=csIsisCircIfSubIndex, csOrionAirFlowCardFWMajorRevision=csOrionAirFlowCardFWMajorRevision, csIsisISAdjTable=csIsisISAdjTable, csEthSlotIndex=csEthSlotIndex, csOrionDsByteFilterInfo=csOrionDsByteFilterInfo, csOc3AtmIntervalStatsTableEnd=csOc3AtmIntervalStatsTableEnd, csOrionBladeSharcCryptoAssembly2=csOrionBladeSharcCryptoAssembly2, csOrionFwNetMeetingPolicyTable=csOrionFwNetMeetingPolicyTable, csOrionFrInfo=csOrionFrInfo, csOc3PathIntervalUASs=csOc3PathIntervalUASs, csRtPolicyTermActionVpnSoo=csRtPolicyTermActionVpnSoo, csOrionOspfVirtIfStateChange=csOrionOspfVirtIfStateChange, csOrionConfig=csOrionConfig, csRtPolicyTermActionBgpCommNamesListFlag=csRtPolicyTermActionBgpCommNamesListFlag, csOc3PathDayUASs=csOc3PathDayUASs, csOrionMlpppLinkEntry=csOrionMlpppLinkEntry, csTelnetSvrConfTable=csTelnetSvrConfTable, csDs3ConfigTimeElapsed=csDs3ConfigTimeElapsed, csOrionFwNntpPolicyTable=csOrionFwNntpPolicyTable, csOrionSyslogdReceiverAddr=csOrionSyslogdReceiverAddr, csOrionFwNetMeetingPolicyName=csOrionFwNetMeetingPolicyName, csOrionVPNVRouterManagedIpRouteMetric1=csOrionVPNVRouterManagedIpRouteMetric1, csAtmInterfaceConfTransmitErrors=csAtmInterfaceConfTransmitErrors, csPppoeAcIfConfigTableEnd=csPppoeAcIfConfigTableEnd, csOrionVPNVRouterManagedIpRouteOperState=csOrionVPNVRouterManagedIpRouteOperState, csOspfIfMetric=csOspfIfMetric, csOrionFwAccessTable=csOrionFwAccessTable, csAtmInterfaceConfReceivedInvalidVpiVciCells=csAtmInterfaceConfReceivedInvalidVpiVciCells, csIgmpInterfaceQuerierUpTime=csIgmpInterfaceQuerierUpTime, csOrionVrSpfTcpSynTableEntries=csOrionVrSpfTcpSynTableEntries, csDs3ConfigMdlTestSig=csDs3ConfigMdlTestSig, csOrionVrDsByteFilterValue=csOrionVrDsByteFilterValue, csFrCircuitSentFrames=csFrCircuitSentFrames, csChDs3Encap=csChDs3Encap, csOrionGreSequence=csOrionGreSequence, csOc3PathCurrentTable=csOc3PathCurrentTable, csAtmConnInArpOutReplies=csAtmConnInArpOutReplies, csOspfGeneralTable=csOspfGeneralTable, csOrionVrQoSFilterAclId=csOrionVrQoSFilterAclId, csOc3LineDayESs=csOc3LineDayESs, csAtmInterfaceConfTransmitQueueFull=csAtmInterfaceConfTransmitQueueFull, csFRoIPCircuitReceivedFECNs=csFRoIPCircuitReceivedFECNs, csIsisSysID=csIsisSysID, csMplsPathMetricMode=csMplsPathMetricMode, csOrionVrSpfTcpInitTimeout=csOrionVrSpfTcpInitTimeout, csOrionViPktFilterHitCounter=csOrionViPktFilterHitCounter, csIsisL2SummAddrOperState=csIsisL2SummAddrOperState, csOspfAreaAggregateEffect=csOspfAreaAggregateEffect, csOrionDynamicCryptoMapTransformSet4=csOrionDynamicCryptoMapTransformSet4, csOrionFwDmzIfTable=csOrionFwDmzIfTable, csRipIfConfStatus=csRipIfConfStatus, csTelnetConnId=csTelnetConnId, csOrionDynamicCryptoMapTransformSet2=csOrionDynamicCryptoMapTransformSet2, csOspfLsdbAdvertisement=csOspfLsdbAdvertisement, csRipImpPolEntry=csRipImpPolEntry, csEthStatsRxLongPktsCounts=csEthStatsRxLongPktsCounts, csExpPolPeerAS=csExpPolPeerAS, csBgpGenClearNbrGroupName=csBgpGenClearNbrGroupName, csOc3PosSentFrameUserAborted=csOc3PosSentFrameUserAborted, csOrionSystemLoginDomainName=csOrionSystemLoginDomainName, csOc3SectionDayESs=csOc3SectionDayESs, csDs3Ds1IntervalUASs=csDs3Ds1IntervalUASs, csAtmInterfaceConfIlmiVpi=csAtmInterfaceConfIlmiVpi, csOspfAreaSummary=csOspfAreaSummary, csAtmConnStatsEntry=csAtmConnStatsEntry, csOrionManualCryptoMapOutboundESPKey=csOrionManualCryptoMapOutboundESPKey, csEthStatsRx512To1023Pkts=csEthStatsRx512To1023Pkts, csFrErrType=csFrErrType, csOc3LineDayCVs=csOc3LineDayCVs, csEthStatsTxMulticCollisionPktsOK=csEthStatsTxMulticCollisionPktsOK, csOrionRadiusInfoEnd=csOrionRadiusInfoEnd, csOrionVrDhcpRelayServerTable=csOrionVrDhcpRelayServerTable, csExpFilterEntry=csExpFilterEntry, csOrionIpSecStateSAIndex=csOrionIpSecStateSAIndex, csOrionServiceTemplateName=csOrionServiceTemplateName, OSINSAddress=OSINSAddress, csOc3LineIntervalTable=csOc3LineIntervalTable, csOrionSpfInfo=csOrionSpfInfo, csOrionChassisType=csOrionChassisType, csOrionOc3Info=csOrionOc3Info, csRtPolicyTermFromMetric2=csRtPolicyTermFromMetric2, csOrionL2tpSessionRowStatus=csOrionL2tpSessionRowStatus, csAtmConnEthernetMacAddress=csAtmConnEthernetMacAddress, csOrionVPNVRouterTcpPassiveOpens=csOrionVPNVRouterTcpPassiveOpens, csOrionQueueTable=csOrionQueueTable, csOrionL2tpConfigSessionPacketSequencing=csOrionL2tpConfigSessionPacketSequencing, csAtmConnIpAddressRowStatus=csAtmConnIpAddressRowStatus, csOrionRip=csOrionRip, csRsvpIfEnabled=csRsvpIfEnabled, csOrionFwFtpAuthMechanism=csOrionFwFtpAuthMechanism, csOrionEngineOsVersion=csOrionEngineOsVersion, csOrionVrDhcpRelayServerEntry=csOrionVrDhcpRelayServerEntry, csDs3Ds1IntervalCSSs=csDs3Ds1IntervalCSSs, csOrionBladeRemoved=csOrionBladeRemoved, csPwVcOperStatus=csPwVcOperStatus, csOrionLogLinkChannelIndex=csOrionLogLinkChannelIndex, csOc3SectionIntervalCVs=csOc3SectionIntervalCVs, csLdpEntityHelloHoldTimer=csLdpEntityHelloHoldTimer, csOc3SectionIntervalSESs=csOc3SectionIntervalSESs, csOrionIpLocalAddrPoolName=csOrionIpLocalAddrPoolName, csOrionIKECryptoMapIdleTimeout=csOrionIKECryptoMapIdleTimeout, csFRoIPCircuitEntry=csFRoIPCircuitEntry, csOc3SectionDaySESs=csOc3SectionDaySESs, csOrionIKECryptoMapRemoteIdentityType4=csOrionIKECryptoMapRemoteIdentityType4, csIsisISAdjIPAddrEntry=csIsisISAdjIPAddrEntry, csChDs3Speed=csChDs3Speed, csFrDlcmiPollingInterval=csFrDlcmiPollingInterval, csOc3PathCurrentCVs=csOc3PathCurrentCVs, csOrionEngineLoaderVersion=csOrionEngineLoaderVersion, csRtPolicyTermToIsisLevel=csRtPolicyTermToIsisLevel, csOrionPptpConfEntry=csOrionPptpConfEntry, csOrionLnsConfigTable=csOrionLnsConfigTable, csDs3ConfigInvalidInterval=csDs3ConfigInvalidInterval, csOrionViStatsInErrors=csOrionViStatsInErrors, csBgpGenConfedId=csBgpGenConfedId, csOrionVrSpfTcpTotalConnTableEntries=csOrionVrSpfTcpTotalConnTableEntries, csOrionVIfaceEntry=csOrionVIfaceEntry, csOrionFwTelnetAuthMechanism=csOrionFwTelnetAuthMechanism, csOspfLsdbSequence=csOspfLsdbSequence, csOrionL2tpConfigTable=csOrionL2tpConfigTable, cbrFileType=cbrFileType, csOrionVPNVRouterName=csOrionVPNVRouterName, csOc3LineIntervalNumber=csOc3LineIntervalNumber, csAtmInterfaceConfAdminStatus=csAtmInterfaceConfAdminStatus, csOrionVPNVRouterIpNetToMediaType=csOrionVPNVRouterIpNetToMediaType, csOrionFwPop3PolicyRowStatus=csOrionFwPop3PolicyRowStatus, csOrionFwTelnetPolicyTable=csOrionFwTelnetPolicyTable, csOrionVrSpfTcpSeqCheck=csOrionVrSpfTcpSeqCheck, csOrionRadiusAcctTimestamp=csOrionRadiusAcctTimestamp, csEthStatsTx1024Pkts=csEthStatsTx1024Pkts, csOc3PathCurrentSESs=csOc3PathCurrentSESs, csOrionVPNVRouterTcpConnEntry=csOrionVPNVRouterTcpConnEntry, csIgmpAccessGroupStatus=csIgmpAccessGroupStatus, csRipImpPolId=csRipImpPolId, csTelnetSvrInfo=csTelnetSvrInfo, csDot1dPortRemoteEnd=csDot1dPortRemoteEnd, csRsvpIfPathOut=csRsvpIfPathOut, csPppoeSessionTable=csPppoeSessionTable, csAtmInterfaceConfTransmitCollisions=csAtmInterfaceConfTransmitCollisions, csOrionQoSMeterProfileMIR=csOrionQoSMeterProfileMIR, csIsisISAdjEntry=csIsisISAdjEntry, csMplsVrEventLogLevel=csMplsVrEventLogLevel, csIsisSysProtSuppProtocol=csIsisSysProtSuppProtocol, csRipGlobalStatTable=csRipGlobalStatTable, csOrionNatTcpTimeout=csOrionNatTcpTimeout, csOrionL2tpConfigPppEchoTimeout=csOrionL2tpConfigPppEchoTimeout, csRipIfConfSendDefRoute=csRipIfConfSendDefRoute, csPwVcCustomerId=csPwVcCustomerId, csAtmConnStaticArpCacheTable=csAtmConnStaticArpCacheTable, csOrionQoSMeterTotalPackets=csOrionQoSMeterTotalPackets, csRtPolicyTermActionBgpASPathOp=csRtPolicyTermActionBgpASPathOp, csPppoeConfigPppIfEchoTimeout=csPppoeConfigPppIfEchoTimeout, csOspfRefBw=csOspfRefBw, csOrionPppIfConfigAuth=csOrionPppIfConfigAuth, csOrionEngineConfigAttributes=csOrionEngineConfigAttributes, csIgmpGeneralEntry=csIgmpGeneralEntry, csOspfLsdbAge=csOspfLsdbAge, csOrionFwGenProxyStatus=csOrionFwGenProxyStatus, csEthEncapType=csEthEncapType, csOrionPPVpnObjects=csOrionPPVpnObjects, csIsisCircSysInstance=csIsisCircSysInstance, csBgpNbrGroupRemovePrivateAs=csBgpNbrGroupRemovePrivateAs, csIsisISAdjHoldTimer=csIsisISAdjHoldTimer, csOrionIKESvrParamTable=csOrionIKESvrParamTable, csFrCircuitDiscards=csFrCircuitDiscards, csAtmConnInArpInReplies=csAtmConnInArpInReplies, csOrionEngineMemoryFrees=csOrionEngineMemoryFrees, csBgpNbrImpPolTable=csBgpNbrImpPolTable, csOrionEngineInstructionCacheSize=csOrionEngineInstructionCacheSize, csAtmConnStaticArpCacheIpAddress=csAtmConnStaticArpCacheIpAddress, csOrionViPktFilterTcpStatus=csOrionViPktFilterTcpStatus, csRtPolicyTermRowStatus=csRtPolicyTermRowStatus, csRtPolicyTermFromOspfMetricType=csRtPolicyTermFromOspfMetricType, csOrionVIfRemIpAddress=csOrionVIfRemIpAddress, csOrionAirFlowCardFWMinorRevision=csOrionAirFlowCardFWMinorRevision, csOrionIKEStatsPhase2InPktsRejected=csOrionIKEStatsPhase2InPktsRejected, csRtPolicyPrefixListPrefix2=csRtPolicyPrefixListPrefix2, csDs3ConfigEntry=csDs3ConfigEntry, csPwVcCtrlWord=csPwVcCtrlWord, csMplsVrAdminStatus=csMplsVrAdminStatus, csMplsLspRowStatus=csMplsLspRowStatus, csEthStatsRxPausePktsOk=csEthStatsRxPausePktsOk, csAtmInterfaceConfTransmittedCells=csAtmInterfaceConfTransmittedCells, csOrionGenAclDstAddress=csOrionGenAclDstAddress, csOrionVrSpfConfTable=csOrionVrSpfConfTable, csOspfVirtNbrTable=csOspfVirtNbrTable, csOrionFwSmtpSpamTable=csOrionFwSmtpSpamTable, csOrionIpSecEvLogTable=csOrionIpSecEvLogTable, csAtmConnInArpManageVc=csAtmConnInArpManageVc, csOrionPingResultsLates=csOrionPingResultsLates, csOrionVrSpfTcpIdleTimeout=csOrionVrSpfTcpIdleTimeout, csRtPolicyPrefixListRowStatus=csRtPolicyPrefixListRowStatus, csOrionCustomerVrDown=csOrionCustomerVrDown, csOrionVPNVRouterTcpRetransSegs=csOrionVPNVRouterTcpRetransSegs, csOrionChassisPacketRingPrimToProtEndpoint=csOrionChassisPacketRingPrimToProtEndpoint, csLdpEntityTable=csLdpEntityTable, csPppoeAcIfConfigEvLogLevel=csPppoeAcIfConfigEvLogLevel, csOrionAAAServiceInfoEnd=csOrionAAAServiceInfoEnd, csOspfVirtIfRtrDeadInterval=csOspfVirtIfRtrDeadInterval, csOrionAAAServerListAdminEntry=csOrionAAAServerListAdminEntry, csOrionIpSecEventLogLevel=csOrionIpSecEventLogLevel, csDs3Ds1Fdl=csDs3Ds1Fdl, csMplsLspTimeUp=csMplsLspTimeUp, csBgpConfedASEntry=csBgpConfedASEntry, csBgpGenLogLevelFlag=csBgpGenLogLevelFlag)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOc3PathPrevDayESs=csOc3PathPrevDayESs, csOrionDynamicCryptoMapMatchAddress=csOrionDynamicCryptoMapMatchAddress, csOc3AtmCurrentUnCorrectedHEC=csOc3AtmCurrentUnCorrectedHEC, csMplsOspfAreaId=csMplsOspfAreaId, csOrionBgp=csOrionBgp, csOspfExtLsdbRouterId=csOspfExtLsdbRouterId, csOrionIKEStateHashAlgorithm=csOrionIKEStateHashAlgorithm, csOrionNatInsideGlobalAddr=csOrionNatInsideGlobalAddr, csOrionSyslogdFacility5=csOrionSyslogdFacility5, csOrionConfigSaveStart=csOrionConfigSaveStart, csOrionManualCryptoMapOutboundESPAuthKey=csOrionManualCryptoMapOutboundESPAuthKey, TOSType=TOSType, csOrionNatUdpTimeout=csOrionNatUdpTimeout, csVpnVrfRowStatus=csVpnVrfRowStatus, csAtmConnIpAddressType=csAtmConnIpAddressType, csOrionFwEvLogTable=csOrionFwEvLogTable, csOspfIfStatus=csOspfIfStatus, csRtPolicyTermFromBgpASPathName=csRtPolicyTermFromBgpASPathName, csOrionVrQoSFilterTable=csOrionVrQoSFilterTable, csOrionIKECryptoMapRemoteIdentityType1=csOrionIKECryptoMapRemoteIdentityType1, csOrionSystemVersionNum=csOrionSystemVersionNum, csDs3StatCurrentCESs=csDs3StatCurrentCESs, csPppoeAcIfStatEntry=csPppoeAcIfStatEntry, csOrionOspfIfConfigError=csOrionOspfIfConfigError, csAtmConnInArpInvalidOutReqs=csAtmConnInArpInvalidOutReqs, csOrionVrRadiusConfigEntry=csOrionVrRadiusConfigEntry, csRipGlobalConfLogLevelFlag=csRipGlobalConfLogLevelFlag, csOrionFwHttpAuthServiceType=csOrionFwHttpAuthServiceType, csOc3PosSentFrames=csOc3PosSentFrames, csOrionNatOutsideGlobalPort=csOrionNatOutsideGlobalPort, csRipGlobalStatEntry=csRipGlobalStatEntry, csBgpGenMaxPfx=csBgpGenMaxPfx, csOrionMlpppLinkPortIndex=csOrionMlpppLinkPortIndex, csIsisManAdjNeighSNPA=csIsisManAdjNeighSNPA, csOrionL2tpStatsControlSendPackets=csOrionL2tpStatsControlSendPackets, csOspfIfType=csOspfIfType, csUnchanDs3ConfigInvalidInterval=csUnchanDs3ConfigInvalidInterval, csBgpGenRowStatus=csBgpGenRowStatus, csBgpNbrVpnIpv4AdminStatus=csBgpNbrVpnIpv4AdminStatus, csAtmConnPvcType=csAtmConnPvcType, csOspfHostAreaID=csOspfHostAreaID, csPppoeSessionDuration=csPppoeSessionDuration, csOrionTunnelSwitchEntry=csOrionTunnelSwitchEntry, csRipIfStatRcvBadPackets=csRipIfStatRcvBadPackets, csOrionIpSecTransformMode=csOrionIpSecTransformMode, csOrionIpSecStatsRcvAhPktsBadAh=csOrionIpSecStatsRcvAhPktsBadAh, csOrionIKECryptoMapFlag=csOrionIKECryptoMapFlag, csPosAdminStatus=csPosAdminStatus, csOrionIpSecStateCreatorType=csOrionIpSecStateCreatorType, csOrionFwGlobalConfig=csOrionFwGlobalConfig, csOrionPppIfPortIndex=csOrionPppIfPortIndex, csDs3StatTotalCSESs=csDs3StatTotalCSESs, csPppoeAcIfConfigOperStatus=csPppoeAcIfConfigOperStatus, csOrionFanTrayHWRevision=csOrionFanTrayHWRevision, csOrionIpSecStatsRcvAhPktsBadSpi=csOrionIpSecStatsRcvAhPktsBadSpi, csOrionFRoIPConfEntry=csOrionFRoIPConfEntry, csOrionTunnelSwitchTargetIpAddress=csOrionTunnelSwitchTargetIpAddress, csDs3Ds1CurrentEntry=csDs3Ds1CurrentEntry, csOc3SectionIntervalTable=csOc3SectionIntervalTable, csDs3StatIntervalNumber=csDs3StatIntervalNumber, csIgmpInterfaceJoins=csIgmpInterfaceJoins, csOrionIKEStatsTable=csOrionIKEStatsTable, csRtPolicyUserPolicyString=csRtPolicyUserPolicyString, csBgpNbrGroupName=csBgpNbrGroupName, csOrionNatStaticInsideLocalAddress=csOrionNatStaticInsideLocalAddress, csFrCircuitRowStatus=csFrCircuitRowStatus, csOrionConnectionProfileAddrPoolname=csOrionConnectionProfileAddrPoolname, csOrionTraceRouteResultHopAddr=csOrionTraceRouteResultHopAddr, csAtmConnInArpStatisticsTable=csAtmConnInArpStatisticsTable, csOrionDynamicCryptoMapTransformSet5=csOrionDynamicCryptoMapTransformSet5, csAtmInterfaceConfReceivedUnknownProtocolErrors=csAtmInterfaceConfReceivedUnknownProtocolErrors, csOrionFwFtpPolicyDynamicPacketFilter=csOrionFwFtpPolicyDynamicPacketFilter, csOrionSystemGatewayAddress=csOrionSystemGatewayAddress, csBgpGenClearConn=csBgpGenClearConn, csOrionSystemLoginUserRowStatus=csOrionSystemLoginUserRowStatus, csIgmpCacheUpTime=csIgmpCacheUpTime, csOrionL2tpConfigTunnelEmptyTunnelTimeout=csOrionL2tpConfigTunnelEmptyTunnelTimeout, csPppoeAcIfStatPADIReject=csPppoeAcIfStatPADIReject, csOrionDynamicCryptoMapTransformSet6=csOrionDynamicCryptoMapTransformSet6, csOspfVirtIfEvents=csOspfVirtIfEvents, csOrionGenAclTableEnd=csOrionGenAclTableEnd, csOrionSyslogdLevel2=csOrionSyslogdLevel2, csAtmConnDynamicArpCacheIpAddress=csAtmConnDynamicArpCacheIpAddress, csIsisIPRAErrMetricType=csIsisIPRAErrMetricType, csFrDlcmiErrorThreshold=csFrDlcmiErrorThreshold, csDs3Ds1CurrentSESs=csDs3Ds1CurrentSESs, csOrionFwAccessDestPortList=csOrionFwAccessDestPortList, csOrionQueueGroupType=csOrionQueueGroupType, csExpPolLevel=csExpPolLevel, csOrionFwCompuServePolicyTable=csOrionFwCompuServePolicyTable, csOrionFRoIPTransportRowStatus=csOrionFRoIPTransportRowStatus, csIsisISAdj=csIsisISAdj, csOrionNatStaticVITranslationEntry=csOrionNatStaticVITranslationEntry, csOrionNatGenTimeout=csOrionNatGenTimeout, csAtmConnPCR=csAtmConnPCR, csOrionBladeOperAttributes=csOrionBladeOperAttributes, csOrionIKEStateRetryTimerMicroSec=csOrionIKEStateRetryTimerMicroSec, csRsvpSessionDownPsbs=csRsvpSessionDownPsbs, csOrionVPNVRouterIpFragCreates=csOrionVPNVRouterIpFragCreates, csOrionSyslogd=csOrionSyslogd, csOspfDemandExtensions=csOspfDemandExtensions, csBgpNetworkMask=csBgpNetworkMask, csImpPolRowStatus=csImpPolRowStatus, csOrionPPVpn=csOrionPPVpn, csOrionAAAServerListRowStatus=csOrionAAAServerListRowStatus, csOrionAcctInfo=csOrionAcctInfo, csOrionSyslogdLevel1=csOrionSyslogdLevel1, csOrionFwLdapPolicyRowStatus=csOrionFwLdapPolicyRowStatus, csMplsInterfaceRowStatus=csMplsInterfaceRowStatus, csOrionFwFtpConfig=csOrionFwFtpConfig, csOrionFileSysReqRowStatus=csOrionFileSysReqRowStatus, csIsisSysProtSuppExistState=csIsisSysProtSuppExistState, csOc3SectionCurrentEntry=csOc3SectionCurrentEntry, csBgpNbrEntry=csBgpNbrEntry, csRsvpVrConfEntry=csRsvpVrConfEntry, csOrionBladeState=csOrionBladeState, csOrionVpnAcctTable=csOrionVpnAcctTable, csOrionVPNVRouterTcpOutSegs=csOrionVPNVRouterTcpOutSegs, csBgpNbrGroupTable=csBgpNbrGroupTable, csPwVcOutboundVcLabel=csPwVcOutboundVcLabel, csOrionGreStatsTable=csOrionGreStatsTable, csOrionDs3AlarmIndication=csOrionDs3AlarmIndication, csOrionFwHttpFeatureIds=csOrionFwHttpFeatureIds, csOrionFwCompuServePolicyTimeout=csOrionFwCompuServePolicyTimeout, csOrionFanTempSensorEntry=csOrionFanTempSensorEntry, csOrionAirFlowCardEventTrapGeneration=csOrionAirFlowCardEventTrapGeneration, csOrionOspfLsdbOverflow=csOrionOspfLsdbOverflow, csOspfVirtNbrRtrId=csOspfVirtNbrRtrId, csOrionL2tpTunnelStatsActiveSessions=csOrionL2tpTunnelStatsActiveSessions, csOrionDhcpRelayOutDecs=csOrionDhcpRelayOutDecs, csFrDlcmiStatTable=csFrDlcmiStatTable, csOrionVPNRowStatus=csOrionVPNRowStatus, csOrionFRoIPTransportWindowTimeout=csOrionFRoIPTransportWindowTimeout, csOrionTemperatureSensorIndex=csOrionTemperatureSensorIndex, csBgpNbrAddr=csBgpNbrAddr, csOrionVPNVRouterEntry=csOrionVPNVRouterEntry, csDs3StatTotalPCVs=csDs3StatTotalPCVs, csDs3StatTotalPSESs=csDs3StatTotalPSESs, csOrionServiceSelectionInfo=csOrionServiceSelectionInfo, csMplsPathCOS=csMplsPathCOS, csOrionFRoIPConfDefaultServiceSlot=csOrionFRoIPConfDefaultServiceSlot, csOrionFwNntpPolicyAuthenticate=csOrionFwNntpPolicyAuthenticate, csOrionVrDnsConfigEntry=csOrionVrDnsConfigEntry, csOrionPingResultsAverageRtt=csOrionPingResultsAverageRtt, csOc3ClockSource=csOc3ClockSource, csOrionOspfVirtIfTxRetransmit=csOrionOspfVirtIfTxRetransmit, csAtmInterfaceConfVpcs=csAtmInterfaceConfVpcs, csOrionL2tpConfigPppConfigReqRetransmission=csOrionL2tpConfigPppConfigReqRetransmission, csPwVcIndex=csPwVcIndex, csOrionFwCompuServePolicyEntry=csOrionFwCompuServePolicyEntry, csOrionDhcpRelayInOffers=csOrionDhcpRelayInOffers, PerfCurrentCount=PerfCurrentCount, csOrionVPNVRouterManagedIpRouteOwner=csOrionVPNVRouterManagedIpRouteOwner, csOrionDs3Info=csOrionDs3Info, csOspfLsdbChecksum=csOspfLsdbChecksum, csOspfAreaAggregateNet=csOspfAreaAggregateNet, csExpFilterIfTable=csExpFilterIfTable, csOc3SectionJ0=csOc3SectionJ0, csAtmConnInArpOutReqs=csAtmConnInArpOutReqs, csOrionVIfLastChange=csOrionVIfLastChange, csMplsLspOctets=csMplsLspOctets, csOrionL2tpTunnelTable=csOrionL2tpTunnelTable, csOrionVPNVRouterIpOutNoRoutes=csOrionVPNVRouterIpOutNoRoutes, csOrionL2tpSessionUsername=csOrionL2tpSessionUsername, csIsisL2SummAddrDelayMetric=csIsisL2SummAddrDelayMetric, csOrionGreConfigTable=csOrionGreConfigTable, csEthSubIfUserPriority=csEthSubIfUserPriority, csOrionIpSecStatsEspEncryptPktsBad=csOrionIpSecStatsEspEncryptPktsBad, csOrionEthInfo=csOrionEthInfo, csOrionVPNVRouterIpStatsTable=csOrionVPNVRouterIpStatsTable, csIgmpStaticGroupStatus=csIgmpStaticGroupStatus, csMplsIsisExtensionsEntry=csMplsIsisExtensionsEntry, csOrionGreStatsHeaderErrors=csOrionGreStatsHeaderErrors, csOrionAAAServerListAdminRowStatus=csOrionAAAServerListAdminRowStatus, csOrionVPNVRouterIpRouteEntry=csOrionVPNVRouterIpRouteEntry, csDot1dTpFdbTable=csDot1dTpFdbTable, csOrionVPNVRouterUpTime=csOrionVPNVRouterUpTime, csDs3StatCurrentPESs=csDs3StatCurrentPESs, csIsisIPRACircIndex=csIsisIPRACircIndex, csOc3LineIntervalEntry=csOc3LineIntervalEntry, csOrionUdp=csOrionUdp, csOrionSyslogdFacility3=csOrionSyslogdFacility3, csOc3LinePrevDayEntry=csOc3LinePrevDayEntry, csOrionOspfVirtIfConfigError=csOrionOspfVirtIfConfigError, csOrionVPNVRouterManagedIpRouteAge=csOrionVPNVRouterManagedIpRouteAge, csOc3PathIntervalESs=csOc3PathIntervalESs, csOrionVPNVRouterIpRouteNextHop=csOrionVPNVRouterIpRouteNextHop, csFrCircuitReceivedFECNs=csFrCircuitReceivedFECNs, csIsisCircL1HelloMultiplier=csIsisCircL1HelloMultiplier, csOrionQueueMinThresholdForGreen=csOrionQueueMinThresholdForGreen, csFRoIPCircuitSentOctets=csFRoIPCircuitSentOctets, csOrionPowerSupplyEntry=csOrionPowerSupplyEntry, csMplsVrEventLogArea=csMplsVrEventLogArea, csOrionNatPoolTable=csOrionNatPoolTable, csOrionVrSpfIcmpTotalConnTableEntries=csOrionVrSpfIcmpTotalConnTableEntries, csOrionFwSmtpRelayTable=csOrionFwSmtpRelayTable, csRsvpSessionTunnelID=csRsvpSessionTunnelID, csDot1dBaseBridgeEntryRowStatus=csDot1dBaseBridgeEntryRowStatus, csOrionGenAclEntry=csOrionGenAclEntry, csOrionGlobalVPNIndex=csOrionGlobalVPNIndex, csIsisSysCorrLSPs=csIsisSysCorrLSPs, csAtmConnOperStatus=csAtmConnOperStatus, csOrionConnectionProfileLnsAddress=csOrionConnectionProfileLnsAddress, csOrionEngineMemoryBytesFreed=csOrionEngineMemoryBytesFreed, csLdpEntityRowStatus=csLdpEntityRowStatus, csOrionModemBaud=csOrionModemBaud, csAtmConnOamLoopbackRetryPvcUpCount=csAtmConnOamLoopbackRetryPvcUpCount, csAtmInterfaceConfReceivedBadVc=csAtmInterfaceConfReceivedBadVc, csOrionSnmpAgentErrorNmsRequestId=csOrionSnmpAgentErrorNmsRequestId, csOrionVIfRemIpAddressType=csOrionVIfRemIpAddressType, csAtmConnUpperProtocol=csAtmConnUpperProtocol, csOrionVPNVRouterUdpOutDatagrams=csOrionVPNVRouterUdpOutDatagrams, csOrionFwHostProxy=csOrionFwHostProxy, csPppoeSessionEntry=csPppoeSessionEntry, csOrionVPNVRouterIpRouteNextHopAS=csOrionVPNVRouterIpRouteNextHopAS, csOspfMulticastExtensions=csOspfMulticastExtensions, csOrionVIfInfo=csOrionVIfInfo, csRipIfStatTable=csRipIfStatTable, csExpFilterIfServiceCategory=csExpFilterIfServiceCategory, csOrionI2CDeviceId=csOrionI2CDeviceId, csRsvpIfQueueEntry=csRsvpIfQueueEntry, Metric=Metric, csOrionFwHttpPortPolicyName=csOrionFwHttpPortPolicyName, csOrionL2tpConfigPppIpPoolName=csOrionL2tpConfigPppIpPoolName, csPppoeAcIfStatPADSTransmit=csPppoeAcIfStatPADSTransmit, csOrionLogLinkPortIndex=csOrionLogLinkPortIndex, csOrionMlpppBundleReorderTimeout=csOrionMlpppBundleReorderTimeout, csOrionFwMsSqlPolicyName=csOrionFwMsSqlPolicyName, csOrionL2tpTunnelRemoteUdpPort=csOrionL2tpTunnelRemoteUdpPort, csIsisL2SummAddrExpenseMetric=csIsisL2SummAddrExpenseMetric, csIsisCircL1DesIS=csIsisCircL1DesIS, csOrionVPNVRouterTcpOutRsts=csOrionVPNVRouterTcpOutRsts, csOspfIfPollInterval=csOspfIfPollInterval, csBgpNbrMaxPfxThreshold=csBgpNbrMaxPfxThreshold, csOrionViPbfFilterCounter=csOrionViPbfFilterCounter, csOrionGenAclSrcPortList=csOrionGenAclSrcPortList, csMplsVrPathName=csMplsVrPathName, csOrionFwAccessSourceAddr=csOrionFwAccessSourceAddr, csAtmInterfaceConfReceivedDroppedCells=csAtmInterfaceConfReceivedDroppedCells, csOrionMlpppBundleMaxLinks=csOrionMlpppBundleMaxLinks, csOrionVrRadiusAcctSvrAddress=csOrionVrRadiusAcctSvrAddress, csOrionControlVrUp=csOrionControlVrUp, csFrCircuitSentDEs=csFrCircuitSentDEs, csOc3PathCurrentESs=csOc3PathCurrentESs, csUnchanDs3ConfigMdlEic=csUnchanDs3ConfigMdlEic, csPwVcTable=csPwVcTable, csOrionFwTelnetPolicyTimeout=csOrionFwTelnetPolicyTimeout, csOspfAreaBdrRtrCount=csOspfAreaBdrRtrCount, csOrionServiceTemplateConnProfileName=csOrionServiceTemplateConnProfileName, csOrionL2tpInfo=csOrionL2tpInfo, csOspfAreaAggregateStatus=csOspfAreaAggregateStatus, csOrionIpSecStatsEspDecryptPktsBad=csOrionIpSecStatsEspDecryptPktsBad, csAtmConnSubIfIndex=csAtmConnSubIfIndex, csPppoeConfigPppIfAuth=csPppoeConfigPppIfAuth)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionBackplaneInfo=csOrionBackplaneInfo, csOrionVPNVRouterIpAdEntNetMask=csOrionVPNVRouterIpAdEntNetMask, csIgmpMIBObjects=csIgmpMIBObjects, csOrionViStatsOutDiscards=csOrionViStatsOutDiscards, csOrionAirFlowCardFWReleaseDate=csOrionAirFlowCardFWReleaseDate, csRsvpIfResvConfOut=csRsvpIfResvConfOut, EvLogArea=EvLogArea, csRsvpVrAdminStatus=csRsvpVrAdminStatus, csOrionFwAolPolicyRemotePort=csOrionFwAolPolicyRemotePort, csOrionViDsByteFilterIndex=csOrionViDsByteFilterIndex, csOrionVPNVRouterManagedIpRouteIfIndex=csOrionVPNVRouterManagedIpRouteIfIndex, csRipIfConfRcvDefRoute=csRipIfConfRcvDefRoute, cbrFileName=cbrFileName, csEthStatsRx1519Pkts=csEthStatsRx1519Pkts, csOrionL2tpTunnelStatsEntry=csOrionL2tpTunnelStatsEntry, csOrionNatIcmpTimeout=csOrionNatIcmpTimeout, csOrionVrAcctEntry=csOrionVrAcctEntry, csOrionVrPktFilterIndex=csOrionVrPktFilterIndex, csOrionControlVrDown=csOrionControlVrDown, csOrionBoot=csOrionBoot, csOspfIfDesignatedRouter=csOspfIfDesignatedRouter, csOspfStubStatus=csOspfStubStatus, csOrionPowerSupplyInputPowerState=csOrionPowerSupplyInputPowerState, csOrionTraceRouteResultEntry=csOrionTraceRouteResultEntry, csOrionOspfEnd=csOrionOspfEnd, csBgpConfedASTable=csBgpConfedASTable, csOrionFileSysResultFilesize=csOrionFileSysResultFilesize, csOrionIKEDialupConnRowStatus=csOrionIKEDialupConnRowStatus, csOrionVPNVRouterManagedIpRouteInfo=csOrionVPNVRouterManagedIpRouteInfo, csOspfExitOverflowInterval=csOspfExitOverflowInterval, csOrionVrSpfConfEntry=csOrionVrSpfConfEntry, csRtPolicyTermActionBgpLocalPrefOp=csRtPolicyTermActionBgpLocalPrefOp, csOrionVPNVRouterTcpInSegs=csOrionVPNVRouterTcpInSegs, csOrionPptpConfEncryption=csOrionPptpConfEncryption, csOrionNBNSInfo=csOrionNBNSInfo, csOrionVPNVRouterInfo=csOrionVPNVRouterInfo, csOrionSyslogdFacility11=csOrionSyslogdFacility11, csAtmConnRowStatus=csAtmConnRowStatus, csOrionSystemBootLocalIpMask=csOrionSystemBootLocalIpMask, csEthStatsRxSysErrCounts=csEthStatsRxSysErrCounts, csMplsOspfExtensionsTable=csMplsOspfExtensionsTable, csAtmInterfaceConfIlmiVci=csAtmInterfaceConfIlmiVci, csOspfOriginateNewLsas=csOspfOriginateNewLsas, csOspfExtLsdbChecksum=csOspfExtLsdbChecksum, csOrionPppIfAdminStatus=csOrionPppIfAdminStatus, csOspfHostTable=csOspfHostTable, csMplsOspfAreaAdminStatus=csMplsOspfAreaAdminStatus, csRtPolicyTermFromIsisLevel=csRtPolicyTermFromIsisLevel, csOrionVrQoSFilterMeterName=csOrionVrQoSFilterMeterName, csChDs3TimeSlots=csChDs3TimeSlots, csExpFilterColorMeteringMode=csExpFilterColorMeteringMode, csBgpNbrHoldTimeConfigured=csBgpNbrHoldTimeConfigured, csOrionPptpConnEntry=csOrionPptpConnEntry, csOrionFwDmzIf=csOrionFwDmzIf, csOrionBladeTemperatureSensor1=csOrionBladeTemperatureSensor1, csOrionPppRemoteUserEntry=csOrionPppRemoteUserEntry, csOrionFRoIPTransportMode=csOrionFRoIPTransportMode, csOrionVrRadiusSvrRowStatus=csOrionVrRadiusSvrRowStatus, csOrionCiscoHdlcConfigEntry=csOrionCiscoHdlcConfigEntry, csOspfExtLsdbLsid=csOspfExtLsdbLsid, csOrionVPNVRouterIpInDiscards=csOrionVPNVRouterIpInDiscards, csDs3StatIntervalCSESs=csDs3StatIntervalCSESs, csRsvpIfRefreshBlockadeMultiple=csRsvpIfRefreshBlockadeMultiple, csIgmpInterfaceQuerierExpiryTime=csIgmpInterfaceQuerierExpiryTime, csOspfPrefInt=csOspfPrefInt, csImpPolEntry=csImpPolEntry, csOrionFwLnotesPolicyRemotePort=csOrionFwLnotesPolicyRemotePort, csUnchanDs3ConfigMdlGenerator=csUnchanDs3ConfigMdlGenerator, csOspfIfMulticastForwarding=csOspfIfMulticastForwarding, csPppoeAcIfConfigName=csPppoeAcIfConfigName, csOrionViStatsInDiscards=csOrionViStatsInDiscards, csRtPolicyTermActionVpnRouteTargetOp=csRtPolicyTermActionVpnRouteTargetOp, csEthStatsTx1519Pkts=csEthStatsTx1519Pkts, csOrionOc3Path=csOrionOc3Path, csIsisSysAuthFails=csIsisSysAuthFails, csOrionMlpppBundleAdminStatus=csOrionMlpppBundleAdminStatus, csOrionBladeInfoEnd=csOrionBladeInfoEnd, csOrionIpSecStatsRcvEspPktsDropped=csOrionIpSecStatsRcvEspPktsDropped, csOrionSystemReset=csOrionSystemReset, csOrionUdpEnd=csOrionUdpEnd, csVpnVrfRouteTargetValue=csVpnVrfRouteTargetValue, csOrionFanTrayEventTrapGeneration=csOrionFanTrayEventTrapGeneration, csRsvpIfBadResvConfIn=csRsvpIfBadResvConfIn, csOspfSetTrap=csOspfSetTrap, csBgpGenDefaultMetric=csBgpGenDefaultMetric, csOrionOc3Line=csOrionOc3Line, csOrionFwPop3PolicyPopServer=csOrionFwPop3PolicyPopServer, csEthSubIfVlanId=csEthSubIfVlanId, csOrionMlpppBundleBytesReceived=csOrionMlpppBundleBytesReceived, csExpPolRouteType=csExpPolRouteType, csFrDlcmiIfType=csFrDlcmiIfType, csOrionFRoIPConfTable=csOrionFRoIPConfTable, csRtPolicyTermFromBgpOrigin=csRtPolicyTermFromBgpOrigin, csOrionChassisPacketRingProtToPrimEndpoint=csOrionChassisPacketRingProtToPrimEndpoint, csOrionPowerSupplyEvent=csOrionPowerSupplyEvent, csRsvpIfPathErrOut=csRsvpIfPathErrOut, csRsvpIfTable=csRsvpIfTable, csBgpNbrRemovePrivateAs=csBgpNbrRemovePrivateAs, csAtmConnStatsTable=csAtmConnStatsTable, csFrDlcmiBECNFlowControl=csFrDlcmiBECNFlowControl, csOrionFileSysReqDestFile=csOrionFileSysReqDestFile, csDs3E1IntBits=csDs3E1IntBits, csBgpNbrExpPolEntry=csBgpNbrExpPolEntry, csEthStatsTx1024To1518Pkts=csEthStatsTx1024To1518Pkts, csOrionL2tpTunnelRemoteIpAddress=csOrionL2tpTunnelRemoteIpAddress, csBgpGenDampReuse=csBgpGenDampReuse, csOrionFwProxyDaemonProtocol=csOrionFwProxyDaemonProtocol, csPppoeAcIfConfigMaxSessions=csPppoeAcIfConfigMaxSessions, csOrionIpSecTransform2=csOrionIpSecTransform2, csOrionFwAccessDestAddr=csOrionFwAccessDestAddr, csOrionPptpConfIdleTimeout=csOrionPptpConfIdleTimeout, csOrionVrDhcpRelayConfigEntry=csOrionVrDhcpRelayConfigEntry, csMplsVrPathConfTable=csMplsVrPathConfTable, csOrionFwDestIndex=csOrionFwDestIndex, csOrionFwGenCfgEntry=csOrionFwGenCfgEntry, csOrionLacConfigAdminStatus=csOrionLacConfigAdminStatus, csPwVcType=csPwVcType, csMplsPathAffinity=csMplsPathAffinity, csOrionNatStaticIfIndex=csOrionNatStaticIfIndex, csRtPolicyTermEntry=csRtPolicyTermEntry, csIsisSysProtSuppSysInstance=csIsisSysProtSuppSysInstance, csOrionAirFlowCardTemperature=csOrionAirFlowCardTemperature, csOrionSnmpGenTable=csOrionSnmpGenTable, csOrionPptpConfMaxConn=csOrionPptpConfMaxConn, csOrionVrDnsConfigTable=csOrionVrDnsConfigTable, csOrionDs3PortIdle=csOrionDs3PortIdle, csOrionFwFtpPolicyAuthenticate=csOrionFwFtpPolicyAuthenticate, csRtPolicyTermName=csRtPolicyTermName, csPwVcID=csPwVcID, csRsvpIfIpAddress=csRsvpIfIpAddress, csIsisCircIPEncaps=csIsisCircIPEncaps, csIsisISAdjNeighSNPAAddress=csIsisISAdjNeighSNPAAddress, csOrionPppRemoteUserTable=csOrionPppRemoteUserTable, csOrionNatOutsideGlobalAddr=csOrionNatOutsideGlobalAddr, csOc3ConfigTable=csOc3ConfigTable, csExpFilterTableEnd=csExpFilterTableEnd, csOrionL2tpTunnelAuthentication=csOrionL2tpTunnelAuthentication, csEthStatsTable=csEthStatsTable, csOrionOspfVirtIfRxBadPacket=csOrionOspfVirtIfRxBadPacket, csOrionVrDsByteFilterDirection=csOrionVrDsByteFilterDirection, csAtmInterfaceConfMyNeighbourIfName=csAtmInterfaceConfMyNeighbourIfName, csBgpNbrRowStatus=csBgpNbrRowStatus, csOrionBladeEntry=csOrionBladeEntry, csOrionBladeSharcCryptoAssembly1=csOrionBladeSharcCryptoAssembly1, csOrionAddressListEntry=csOrionAddressListEntry, csOrionEngineLoaderTime=csOrionEngineLoaderTime, CircuitID=CircuitID, csOrionViStatsOutUcastPkts=csOrionViStatsOutUcastPkts, csRtPolicyPrefixListPrefix=csRtPolicyPrefixListPrefix, csPppoeAcIfStatPADOTransmit=csPppoeAcIfStatPADOTransmit, csOc3SectionDaySEFSs=csOc3SectionDaySEFSs, csOrionViStatsRateLimitRxBytesSubmitted=csOrionViStatsRateLimitRxBytesSubmitted, csOrionBladeCLEICode=csOrionBladeCLEICode, csFrCircuitReceivedOctets=csFrCircuitReceivedOctets, csOrionOc3AtmStats=csOrionOc3AtmStats, csMplsLspState=csMplsLspState, csIgmpInterfaceAdminStatus=csIgmpInterfaceAdminStatus, csOrionIpSecStatsEspCurrentOutboundSAs=csOrionIpSecStatsEspCurrentOutboundSAs, csMplsPathHoldPriority=csMplsPathHoldPriority, csOrionChangeSource=csOrionChangeSource, csOrionVrDsByteFilterAclId=csOrionVrDsByteFilterAclId, csOrionGreStatsEntry=csOrionGreStatsEntry, csOc3AtmCurrentStatsTableEnd=csOc3AtmCurrentStatsTableEnd, csRtPolicyUserType=csRtPolicyUserType, csOrionFwFtpAuthTable=csOrionFwFtpAuthTable, csOrionIKECryptoMapRemoteIdentity3=csOrionIKECryptoMapRemoteIdentity3, csIgmpInterfaceMulticastTTLThreshold=csIgmpInterfaceMulticastTTLThreshold, csOrionQoSMeterProfile=csOrionQoSMeterProfile, csOrionFwMsSqlPolicyTable=csOrionFwMsSqlPolicyTable, csOrionEngineApplicationProduct=csOrionEngineApplicationProduct, OtherMetric=OtherMetric, csRtPolicyTermFromOspfTag2=csRtPolicyTermFromOspfTag2, csVpnVrfMaxRoutes=csVpnVrfMaxRoutes, csOrionAAAServerListSvrName=csOrionAAAServerListSvrName, csOrionPowerSupplyStatusChange=csOrionPowerSupplyStatusChange, csRipExpPolTable=csRipExpPolTable, csOrionPingResultsMaxRtt=csOrionPingResultsMaxRtt, csIgmpInterfaceTable=csIgmpInterfaceTable, csOrionRadiusAcctEntry=csOrionRadiusAcctEntry, csOrionGenAclProt=csOrionGenAclProt, csOrionIKEStateCryptoAlgorithm=csOrionIKEStateCryptoAlgorithm, csMplsInterfaceConfTable=csMplsInterfaceConfTable, csBgpNbrGroupMaxPfxThreshold=csBgpNbrGroupMaxPfxThreshold, csAtmInterfaceConfStatsTable=csAtmInterfaceConfStatsTable, csOrionBladeSharcCryptoType2=csOrionBladeSharcCryptoType2, csOrionSystem=csOrionSystem, csExpPolTable=csExpPolTable, csMplsPathIsisAutoRouteAnnounce=csMplsPathIsisAutoRouteAnnounce, csOrionIKEStateCreationTime=csOrionIKEStateCreationTime, csOrionQoSMeterProfileDropPrecedence=csOrionQoSMeterProfileDropPrecedence, csOrionSystemBootEntry=csOrionSystemBootEntry, csOrionFwGenProxyId=csOrionFwGenProxyId, csOrionL2tpSessionState=csOrionL2tpSessionState, csOrionIpSecStatePort=csOrionIpSecStatePort, csPppoeSessionReceiveOperDown=csPppoeSessionReceiveOperDown, csOrionFwAccessDestMask=csOrionFwAccessDestMask, csOrionFwHostTable=csOrionFwHostTable, csOrionVrSpfTcpCloseTimeout=csOrionVrSpfTcpCloseTimeout, csOrionFanStatusChange=csOrionFanStatusChange, csDs3StatIntervalLCVs=csDs3StatIntervalLCVs, csAtmInterfaceConfTransmitVcNotOpened=csAtmInterfaceConfTransmitVcNotOpened, csOrionSystemLoginDomainRowStatus=csOrionSystemLoginDomainRowStatus, csOrionStatusPanelPortEntry=csOrionStatusPanelPortEntry, csOrionIKESvrParamRadiusAcctUserTypePriority2=csOrionIKESvrParamRadiusAcctUserTypePriority2, csOrionEngineApplicationVersion=csOrionEngineApplicationVersion, csOrionFwPlugPolicyTable=csOrionFwPlugPolicyTable, csUnchanDs3ConfigLoopbackStatus=csUnchanDs3ConfigLoopbackStatus, csFrCircitFwdDlciType=csFrCircitFwdDlciType, csRtPolicyPrefixListTable=csRtPolicyPrefixListTable, csMplsLspOperationStatus=csMplsLspOperationStatus, csOrionVPNVRouterIpRouteTable=csOrionVPNVRouterIpRouteTable, csOc3SectionIntervalSEFSs=csOc3SectionIntervalSEFSs, csOrionIKECryptoMapRemoteIdentity5=csOrionIKECryptoMapRemoteIdentity5, csOrionVrDhcpRelayAdminStatus=csOrionVrDhcpRelayAdminStatus, csOc3InvalidIntervals=csOc3InvalidIntervals, csOrionVPNVRouterTcpInErrs=csOrionVPNVRouterTcpInErrs, csOrionMlpppLinkTable=csOrionMlpppLinkTable, csOrionPing=csOrionPing, csIsisCircL2DesIS=csIsisCircL2DesIS, csUnchanDs3ConfigModuleIndex=csUnchanDs3ConfigModuleIndex, csOrionVrQoSFilterServiceCategory=csOrionVrQoSFilterServiceCategory, csOspfAddressLessIf=csOspfAddressLessIf, csVpnVrfSiteOfOrigin=csVpnVrfSiteOfOrigin, csOrionL2tpStatsTotalTunnels=csOrionL2tpStatsTotalTunnels, csOc3PathPrevDayEntry=csOc3PathPrevDayEntry, csOrionQueueId=csOrionQueueId, csOrionFwLnotesPolicyName=csOrionFwLnotesPolicyName, csOrionVrPktFilterHitCounter=csOrionVrPktFilterHitCounter, csVpnVrfAllowASIn=csVpnVrfAllowASIn, csPwVcName=csPwVcName, csMplsIsisExtensionsRowStatus=csMplsIsisExtensionsRowStatus, csMplsVrConfOpCode=csMplsVrConfOpCode, csOrionIpSecStatsEspTotalOutboundSAsFailed=csOrionIpSecStatsEspTotalOutboundSAsFailed, csOrionVPNVRouterIpReasmOKs=csOrionVPNVRouterIpReasmOKs, csOspfExtLsdbAdvertisement=csOspfExtLsdbAdvertisement, csRtPolicyTermFromPrefixNamesListFlag=csRtPolicyTermFromPrefixNamesListFlag, csOrionFwNwGroupEntry=csOrionFwNwGroupEntry, csAtmConnEntry=csAtmConnEntry, csOrionViStatsInUcastPkts=csOrionViStatsInUcastPkts, csOrionFwPlugPolicyAuthenticate=csOrionFwPlugPolicyAuthenticate, csOspfIfMetricAddressLessIf=csOspfIfMetricAddressLessIf, csOrionAlarmAffectType=csOrionAlarmAffectType, csAtmConnStaticArpCacheEntry=csAtmConnStaticArpCacheEntry, csPppoeAcIfConfigTotalSessions=csPppoeAcIfConfigTotalSessions, csOc3LinePrevDayCVs=csOc3LinePrevDayCVs, csOc3SectionCurrentTable=csOc3SectionCurrentTable, csOrionFwAccessSourceAddrList=csOrionFwAccessSourceAddrList, csOrionVrSpfUdpCurrentConnTableEntries=csOrionVrSpfUdpCurrentConnTableEntries, csOrionSystemNetMask=csOrionSystemNetMask, csMplsVrPathIdentifier=csMplsVrPathIdentifier, csOc3PathDayFCs=csOc3PathDayFCs, csBgpNbrGroupNextHopSelf=csBgpNbrGroupNextHopSelf, csRsvpIfUdpNbrs=csRsvpIfUdpNbrs, csRsvpIfHelloInterval=csRsvpIfHelloInterval)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOrionFwProxyDaemonEntry=csOrionFwProxyDaemonEntry, csOrionVPNVRouterLocations=csOrionVPNVRouterLocations, csOrionNatPoolStartAddress=csOrionNatPoolStartAddress, csOrionVPNVRouterFailOver=csOrionVPNVRouterFailOver, csOrionNumericListUpperLimit=csOrionNumericListUpperLimit, csOrionL2tpTunnelHelloInterval=csOrionL2tpTunnelHelloInterval, EvLogLevel=EvLogLevel, csMplsInterfaceLabelMinIn=csMplsInterfaceLabelMinIn, csOrionFwTelnetPolicyRowStatus=csOrionFwTelnetPolicyRowStatus, csOrionGreStatsKeyErrors=csOrionGreStatsKeyErrors, csLdpVrAcceptTargetedHellos=csLdpVrAcceptTargetedHellos, csOrionL2tpConfigTunnelHelloInterval=csOrionL2tpConfigTunnelHelloInterval, csOrionVPNVRouterIpReasmFails=csOrionVPNVRouterIpReasmFails, csOrionNatPoolStartPort=csOrionNatPoolStartPort, csOrionStatusPanelPortModemStatus=csOrionStatusPanelPortModemStatus, csEthAutoneg=csEthAutoneg, csOrionEngineType=csOrionEngineType, csDs3Ds1YellowAlarmDetect=csDs3Ds1YellowAlarmDetect, NSAPPrefix=NSAPPrefix, csOrionEncryptInfoEnd=csOrionEncryptInfoEnd, csLdpTargetKeepAliveTimer=csLdpTargetKeepAliveTimer, csOrionSystemLoginUserTable=csOrionSystemLoginUserTable, csOrionPingCtlTargetAddress=csOrionPingCtlTargetAddress, csOrionVIfDown=csOrionVIfDown, csOrionL2tpStatsControlSendOctets=csOrionL2tpStatsControlSendOctets, OrionIfIndex=OrionIfIndex, csOrionEngineUtilizationLong=csOrionEngineUtilizationLong, csIsisSysOrigL2LSPBuffSize=csIsisSysOrigL2LSPBuffSize, csAtmConnOamContinuity=csAtmConnOamContinuity, SNPAAddress=SNPAAddress, csRtPolicyTermActionMetricOp=csRtPolicyTermActionMetricOp, csOrionIKECertTable=csOrionIKECertTable, csOrionQueueAverageSize=csOrionQueueAverageSize, csAtmInterfaceConfTransmitIncomplete=csAtmInterfaceConfTransmitIncomplete, csIsisCircL1ExpenseMetric=csIsisCircL1ExpenseMetric, csRadiusServer=csRadiusServer, csRsvpVrEventLogArea=csRsvpVrEventLogArea, csOrionFwLdapPolicyAuthenticate=csOrionFwLdapPolicyAuthenticate, csOrionSystemLoginDomainTable=csOrionSystemLoginDomainTable, csDs3StatIntervalUASs=csDs3StatIntervalUASs, csOrionSystemBootImageName4=csOrionSystemBootImageName4, csOrionFwRshPolicyRemoteServer=csOrionFwRshPolicyRemoteServer, csOrionIKEDialupConnIndex=csOrionIKEDialupConnIndex, csOrionFwGenProxyActiveSessions=csOrionFwGenProxyActiveSessions, csOrionBladeIPSXLoaderTime=csOrionBladeIPSXLoaderTime, csPosEncapsulation=csPosEncapsulation, csRtPolicyTermFromOspfArea=csRtPolicyTermFromOspfArea, csOrionTempStatusChange=csOrionTempStatusChange, csOrionOc3AlarmClear=csOrionOc3AlarmClear, csOspfIfMd5MessageDigestKeyId=csOspfIfMd5MessageDigestKeyId, csMplsPathIdentifier=csMplsPathIdentifier, csOrionFwSmtpSpamRowStatus=csOrionFwSmtpSpamRowStatus, csOrionBladeStateChange=csOrionBladeStateChange, csOspfAreaBdrRtrStatus=csOspfAreaBdrRtrStatus, csOrionMeter=csOrionMeter, csOrionFwLnotesPolicyEntry=csOrionFwLnotesPolicyEntry, csOrionL2tpTunnelLocalId=csOrionL2tpTunnelLocalId, csOrionConfigSaveStatus=csOrionConfigSaveStatus, csOrionVpnAcctCompStats=csOrionVpnAcctCompStats, csOrionVPNVRouterIpAddrEntry=csOrionVPNVRouterIpAddrEntry, csOrionFwLdapPolicyEntry=csOrionFwLdapPolicyEntry, csOrionIKECryptoMapStatus=csOrionIKECryptoMapStatus, csUnchanDs3ConfigDeviceType=csUnchanDs3ConfigDeviceType, csOc3PathPrevDayFCs=csOc3PathPrevDayFCs, csOrionVPNVRouterManagedIpRoutePreference2=csOrionVPNVRouterManagedIpRoutePreference2, csOrionVPNName=csOrionVPNName, csBgpNbrGroupExpPolEntry=csBgpNbrGroupExpPolEntry, csIsisISAdjNeighSysID=csIsisISAdjNeighSysID, csRtPolicyTermActionBgpCommOp=csRtPolicyTermActionBgpCommOp, csOrionFwAccCfgFlag=csOrionFwAccCfgFlag, csOrionIKECryptoMapRemoteIdentity1=csOrionIKECryptoMapRemoteIdentity1, csAtmConnOamLoopbackManageVc=csAtmConnOamLoopbackManageVc, csChDs3Entry=csChDs3Entry, csIgmpAccessGroupIfIndex=csIgmpAccessGroupIfIndex, csOrionFwHttpOurname=csOrionFwHttpOurname, csExpFilterTable=csExpFilterTable, csOc3AlarmControl=csOc3AlarmControl, csOrionEngineFreeMemory=csOrionEngineFreeMemory, csOrionFwFtpLog=csOrionFwFtpLog, csOspfAreaAggregateEntry=csOspfAreaAggregateEntry, csOc3AtmIntervalIdleCells=csOc3AtmIntervalIdleCells, csOrionIpSecEventLogEntry=csOrionIpSecEventLogEntry, csOrionAccessListInfoEnd=csOrionAccessListInfoEnd, csOrionViDsByteFilterTable=csOrionViDsByteFilterTable, csOrionFwProxyConfig=csOrionFwProxyConfig, csOrionPptpConnTable=csOrionPptpConnTable, csOrionVPNVRouterIpAdEntBcastAddr=csOrionVPNVRouterIpAdEntBcastAddr, csOrionSnmpTrapEntry=csOrionSnmpTrapEntry, csOrionDNSInfoEnd=csOrionDNSInfoEnd, csBgpNbrGroupVpnIpv4AllowRfc2547Customers=csBgpNbrGroupVpnIpv4AllowRfc2547Customers, csOrionFwDestMask=csOrionFwDestMask, csFrCircuitSentOctets=csFrCircuitSentOctets, csOrionL2tpSessionUpTime=csOrionL2tpSessionUpTime, csOrionVPNVRouterFailbackToPrimary=csOrionVPNVRouterFailbackToPrimary, csMplsLspName=csMplsLspName, csOrionFwHttpPortRowStatus=csOrionFwHttpPortRowStatus, csOrionChassisMidplaneID=csOrionChassisMidplaneID, csAtmInterfaceConfStatsEntry=csAtmInterfaceConfStatsEntry, csOrionSystemLoginServerListName=csOrionSystemLoginServerListName, csBgpNbr=csBgpNbr, csOrionVPNVRouterIpRouteMetric4=csOrionVPNVRouterIpRouteMetric4, csOrionVPNVRouterTcpAttemptFails=csOrionVPNVRouterTcpAttemptFails, csPppoeSessionServiceVR=csPppoeSessionServiceVR, csOrionViStatsInOctets=csOrionViStatsInOctets, csEthStatsTxDeferPktsOk=csEthStatsTxDeferPktsOk, csLdpTargetHelloHoldTimer=csLdpTargetHelloHoldTimer, csAtmConnEvLogLevel=csAtmConnEvLogLevel, csPwVcPeerIpv6Addr=csPwVcPeerIpv6Addr, csOrionSnmpCommTable=csOrionSnmpCommTable, csOrionVrDsByteFilterEntry=csOrionVrDsByteFilterEntry, csBgpGenDampEnable=csBgpGenDampEnable, csFRoIPCircuitReceivedOctets=csFRoIPCircuitReceivedOctets, csEthSubIfIndex=csEthSubIfIndex, csOrionFwFtpPolicyRowStatus=csOrionFwFtpPolicyRowStatus, csRipIfConfRowStatus=csRipIfConfRowStatus, csOrionVncQueueMinBw=csOrionVncQueueMinBw, csIsisL2SummAddrTable=csIsisL2SummAddrTable, csOrionFwHttpConfig=csOrionFwHttpConfig, csDs3ConfigMdlIdleSig=csDs3ConfigMdlIdleSig, csOrionIpSecStatsAhCryptoCepEstablishOk=csOrionIpSecStatsAhCryptoCepEstablishOk, csOrionIKEPolicySaLifetimeSoftSec=csOrionIKEPolicySaLifetimeSoftSec, PYSNMP_MODULE_ID=cosineOrionMod, csOspfVirtIfEntry=csOspfVirtIfEntry, csOrionIpSecStateLocalGateway=csOrionIpSecStateLocalGateway, csIsisISAdjCircIndex=csIsisISAdjCircIndex, csAtmConnOamLoopbackRetryPvcDownRetryDelay=csAtmConnOamLoopbackRetryPvcDownRetryDelay, csOspfTrap=csOspfTrap, csOc3LineIntervalValidData=csOc3LineIntervalValidData, csIsisCircL2ISPriority=csIsisCircL2ISPriority, csBgpNbrGroupMhopGw=csBgpNbrGroupMhopGw, csOrionSnmpAgentErrorMsg=csOrionSnmpAgentErrorMsg, csOrionFwLnotesConfigEnd=csOrionFwLnotesConfigEnd, csOspfVirtNbrEntry=csOspfVirtNbrEntry, csOrionFwHttpAuthEntry=csOrionFwHttpAuthEntry, csOc3PosEmptyCellType=csOc3PosEmptyCellType, csOrionSystemBootUserPassword=csOrionSystemBootUserPassword, csOrionVPNDNSSvrList=csOrionVPNDNSSvrList, csVpnVrfLogAreaFlag=csVpnVrfLogAreaFlag, csDs3Ds1IntervalPCVs=csDs3Ds1IntervalPCVs, csPwVcOwner=csPwVcOwner, csRipConf=csRipConf, csOspfAreaAggregateAreaID=csOspfAreaAggregateAreaID, csExpPolRowStatus=csExpPolRowStatus, csOspfSpfDelay=csOspfSpfDelay, csOrionIKEStateExpirationTime=csOrionIKEStateExpirationTime, csRsvpIfPathErrIn=csRsvpIfPathErrIn, csFrCircuitCreationTime=csFrCircuitCreationTime, csPwVcOutboundGroupID=csPwVcOutboundGroupID, csIsisExpPolEntry=csIsisExpPolEntry, csOrionVPNVRouterIpAdEntIfIndex=csOrionVPNVRouterIpAdEntIfIndex, csBgpGenDampSuppress=csBgpGenDampSuppress, csPolicyRouteFilterTableEnd=csPolicyRouteFilterTableEnd, csOrionIKEDialupConnTable=csOrionIKEDialupConnTable, csAtmInterfaceConfVccs=csAtmInterfaceConfVccs, csIsisManAreaAddrTable=csIsisManAreaAddrTable, csRsvpIfPathTearIn=csRsvpIfPathTearIn, csOrionFWInfo=csOrionFWInfo, csIsisSysInstance=csIsisSysInstance, csOrionIKEStateRetryTimer=csOrionIKEStateRetryTimer, csOrionPingResultsEntry=csOrionPingResultsEntry, csOrionChassisPacketRingStatus=csOrionChassisPacketRingStatus, csOrionFwHttpPolicyAuthenticate=csOrionFwHttpPolicyAuthenticate, csPppoeAcIfSlotIndex=csPppoeAcIfSlotIndex, csChDs3PortIndex=csChDs3PortIndex, csOrionPowerSupplyMonitorStatusChange=csOrionPowerSupplyMonitorStatusChange, csOrionFwTelnetConfigEnd=csOrionFwTelnetConfigEnd, csOrionFwAolPolicyName=csOrionFwAolPolicyName, csOrionBladeNumSharcCrypto=csOrionBladeNumSharcCrypto, csOrionAddressListName=csOrionAddressListName, csIsisManAreaAddrSysInstance=csIsisManAreaAddrSysInstance, csOrionIKESvrParamPort=csOrionIKESvrParamPort, csOrionViDsByteFilterAction=csOrionViDsByteFilterAction, csPppoeAcIfConfigEvLogArea=csPppoeAcIfConfigEvLogArea, csOrionFRoIPTransportEventWindowSize=csOrionFRoIPTransportEventWindowSize, csRipIfConfReceiveV2=csRipIfConfReceiveV2, csOrionFanTrayControlEntry=csOrionFanTrayControlEntry, csOrionFwNetMeetingConfigEnd=csOrionFwNetMeetingConfigEnd, csIsisReachAdddr=csIsisReachAdddr, csDs3Ds1CurrentLESs=csDs3Ds1CurrentLESs, csIsisCircL2AuthType=csIsisCircL2AuthType, csDs3ConfigMdlLic=csDs3ConfigMdlLic, csOrionFwSmtpPolicyMaxBytes=csOrionFwSmtpPolicyMaxBytes, csOrionFwNntpPolicyRowStatus=csOrionFwNntpPolicyRowStatus, csOrionIKECryptoMapSaLifetimeSoftSec=csOrionIKECryptoMapSaLifetimeSoftSec, csOrionVrRadiusSvrOperStatus=csOrionVrRadiusSvrOperStatus, csIsisISAdjIndex=csIsisISAdjIndex, csOc3SectionCurrentSESs=csOc3SectionCurrentSESs, csOrionFwFtpConfigEnd=csOrionFwFtpConfigEnd, csDs3Ds1Id=csDs3Ds1Id, csIsisSysAdminStatus=csIsisSysAdminStatus, csOrionTemperatureEvent=csOrionTemperatureEvent, csUnchanDs3ConfigAdminStatus=csUnchanDs3ConfigAdminStatus, csOrionQueueClassOfService=csOrionQueueClassOfService, csFrCircuitExcessBurst=csFrCircuitExcessBurst, csOrionStatusPanelControlInfo=csOrionStatusPanelControlInfo, csDs3ConfigTable=csDs3ConfigTable, csOc3PathIntervalFCs=csOc3PathIntervalFCs, csIsisIPRAType=csIsisIPRAType, csOrionFwFtpAuthServers=csOrionFwFtpAuthServers, csFrDlcmiStatStatusResponses=csFrDlcmiStatStatusResponses, csOrionNatStaticVINetmask=csOrionNatStaticVINetmask, csDs3Ds1CurrentTable=csDs3Ds1CurrentTable, csOc3SectionCurrentSEFSs=csOc3SectionCurrentSEFSs, csExpPolId=csExpPolId, csOrionVncQueueId=csOrionVncQueueId, csOrionIKECryptoMapRemoteIdentityType3=csOrionIKECryptoMapRemoteIdentityType3, csOrionBackplaneUtilization=csOrionBackplaneUtilization, csOspfIfTable=csOspfIfTable, csExpFilterIfDirection=csExpFilterIfDirection, csBgpNbrGroupRemoteAS=csBgpNbrGroupRemoteAS, PwVcInstance=PwVcInstance, csIsisSysSPFL1Int=csIsisSysSPFL1Int, csRsvpIfRouteDelay=csRsvpIfRouteDelay, csIsisCircUpTime=csIsisCircUpTime, csIsisCircIpAddress=csIsisCircIpAddress, csPppoeAcIfStatServiceNameErrors=csPppoeAcIfStatServiceNameErrors, csOrionPowerSupplyFWMajorRevision=csOrionPowerSupplyFWMajorRevision, csOrionFwMsSqlConfigEnd=csOrionFwMsSqlConfigEnd, csOrionVPNVRouterTcpRtoMin=csOrionVPNVRouterTcpRtoMin, csAtmConnStaticArpCacheRowStatus=csAtmConnStaticArpCacheRowStatus, csOc3PathIntervalTable=csOc3PathIntervalTable, csOrionTraceRouteReqEntry=csOrionTraceRouteReqEntry, csRsvpVrConfRowStatus=csRsvpVrConfRowStatus, csOc3LineIntervalESs=csOc3LineIntervalESs, csOrionTraceRouteResultMplsLabelStackInfo=csOrionTraceRouteResultMplsLabelStackInfo, csMplsLspTransitions=csMplsLspTransitions, csDs3Ds1TotalEntry=csDs3Ds1TotalEntry, csAtmConnAal5CpcsTransmitSduSize=csAtmConnAal5CpcsTransmitSduSize, csOrionVPNTable=csOrionVPNTable, csOrionOspfLsdbApproachingOverflow=csOrionOspfLsdbApproachingOverflow, csOrionIKESvrParamRadiusAcctUserTypePriority1=csOrionIKESvrParamRadiusAcctUserTypePriority1, csOrionVrIfManagerRowStatus=csOrionVrIfManagerRowStatus, csMplsPathExpValue=csMplsPathExpValue, csRtPolicyUserRowStatus=csRtPolicyUserRowStatus, csFrErrFaults=csFrErrFaults, csMplsPathCosValue=csMplsPathCosValue, csOspfImportAsExtern=csOspfImportAsExtern, csOrionFwNntpConfigEnd=csOrionFwNntpConfigEnd, csOrionQosInfo=csOrionQosInfo, csOrionVrPktFilterEntry=csOrionVrPktFilterEntry, csAtmInterfaceConfReceivedBadAalLength=csAtmInterfaceConfReceivedBadAalLength, csIsisISAdjUpTime=csIsisISAdjUpTime, csOrionL2tpTunnelActiveSessionsCount=csOrionL2tpTunnelActiveSessionsCount, csOrionConfigLoad=csOrionConfigLoad, csIgmpCacheVersion1HostTimer=csIgmpCacheVersion1HostTimer, csOrionVIfRowStatus=csOrionVIfRowStatus, csOrionChassisInfo=csOrionChassisInfo, csRsvpIfAckDesired=csRsvpIfAckDesired, csOrionAAAServerLdapSearchBase=csOrionAAAServerLdapSearchBase, csOrionLnsConfigEntry=csOrionLnsConfigEntry, csAtmInterfaceConfReceivedBytes=csAtmInterfaceConfReceivedBytes, csOrionCiscoHdlcInfo=csOrionCiscoHdlcInfo, csOrionIpSecStateRemoteGateway=csOrionIpSecStateRemoteGateway, csAtmConnEvLogArea=csAtmConnEvLogArea)
mibBuilder.exportSymbols("COSINE-ORION-MIB", csOc3SectionCurrentESs=csOc3SectionCurrentESs, csOrionFwHostIndex=csOrionFwHostIndex, csOrionPacketRingPrimToProtCurrentEndpointSlot=csOrionPacketRingPrimToProtCurrentEndpointSlot, csLdpVrPwe3AutorouteAnnounce=csLdpVrPwe3AutorouteAnnounce, csRtPolicyPrefixListEntry=csRtPolicyPrefixListEntry)
