#
# PySNMP MIB module CXFileServer-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFileServer-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
cxFileServer, = mibBuilder.importSymbols("CXProduct-SMI", "cxFileServer")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter32, iso, MibIdentifier, Unsigned32, IpAddress, ModuleIdentity, ObjectIdentity, Integer32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter32", "iso", "MibIdentifier", "Unsigned32", "IpAddress", "ModuleIdentity", "ObjectIdentity", "Integer32", "Gauge32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cxFsTftpTransfer = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTftpTransfer.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTftpTransfer.setDescription('Used to control a TFTP server running on a sub-system. Options: disabled (1): For security reasons, no file transfer requests are accepted. enabled (2): Requests to download files from the TFTP server are accepted. Default Value: disabled (1) Configuration Changed: operative')
cxFsTftpTargetSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTftpTargetSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTftpTargetSlot.setDescription('The slot number where a sub-system resides. All TFTP file transfer packets are directed toward this sub-system. Range of Values: 0 - 16 Note: A value of 0 is used for the sub-system where the TFTP server resides. Default Value: 0 Configuration Changed: operative')
cxFsTftpRemxt = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTftpRemxt.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTftpRemxt.setDescription('Timeout (in seconds) between retransmissions of a TFTP packet whose original transmission was unsuccessful. Range of Values: 1 - 600 Default Value: 5 (seconds) Configuration Changed: operative')
cxFsIsBusy = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsIsBusy.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsIsBusy.setDescription('Indicates whether the file server is currently busy. Options: no (1): File server is unoccupied. File transfer requests can be sent. yes (2): File server is busy. Any activities such as file transfer or file list requests initiated at this time will likely be unsuccessful.')
cxFsBackGroundCleanup = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsBackGroundCleanup.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsBackGroundCleanup.setDescription('Used to enable or disable a continuous clean-up process which makes file server resources re-usable. When enabled, this process runs continuously as a background operation. Options: disabled (1): File server resources remain allocated to the activity or application that originally used them, even if they are no longer required. enabled (2): File server resources are dynamically reallocated to new activities or applications each time they are freed from their current use. Default Value: enabled (2) Related Objects: cxFsCleanupOnce Configuration Changed: operative')
cxFsCleanupOnce = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxFsCleanupOnce.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsCleanupOnce.setDescription("Initiates a clean-up of the file server to free up resources that are still allocated to activities or applications that no longer require them. This process does not run continuously (as with 'cxFsBackGroundCleanup'), but occurs once only each time it is initiated. Options: no (1): No clean-up initiated yes (2): Clean-up initiated Default Value: no (1) Related Objects: cxFsBackGroundCleanup Configuration Changed: operative")
cxFsFreeBytes = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsFreeBytes.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsFreeBytes.setDescription('Shows the amount of space (in bytes) currently available on the local file server.')
cxFsDeleteFile = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 8), DisplayString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: cxFsDeleteFile.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsDeleteFile.setDescription('Used to specify the name of a file you wish to delete from the file server. Configuration Changed: operative')
cxFsFileList = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsFileList.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsFileList.setDescription('Contains a list of files currently stored on the file server. Filenames are separated by a space character.')
cxFsTransferDestSlot = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTransferDestSlot.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTransferDestSlot.setDescription('The slot number where a sub-system resides. The file specified by the object cxFsTransferFileName is either copied to this sub-system or retrieved from this sub-system according to the action specified by the object cxFsTransferAction. Range of Values: 0 - 16 Note: 0 is reserved for the master card in the system. Default Value: 0 Related Objects: cxFsTransferFileName cxFsTransferAction Configuration Changed: operative')
cxFsTransferFileName = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTransferFileName.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTransferFileName.setDescription("Identifies the file to be retrieved from or copied to the sub-system specified by the object 'cxFsTransferDestSlot'. Range of Values: 5 to 15 characters Related Objects: cxFsTransferDestSlot Configuration Changed: operative")
cxFsTransferAction = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no-action", 1), ("get", 2), ("put", 3))).clone('no-action')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cxFsTransferAction.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTransferAction.setDescription("Determines the type of file transfer action to be taken with the file specified by the cxFsTransferFileName object. The status of a transfer process can be obtained from the cxFsTransferStatus object. Multiple simultaneous file transfers are not supported. Therefore, if the value of the cxFsTransferStatus object is 'processing', no GET or PUT can be initiated. Options: no-action (1): No action taken with the specified file. get (2): Retrieves the file specified by the cxFsTransferFileName object from the slot specified by the cxFsTransferDestSlot object to the master card. put (3): Copies the file specified by the cxFsTransferFileName object from the master card to the slot specified by the cxFsTransferDestSlot object. Default Value: no-action (1) Related Objects: cxFsTransferFileName cxFsTransferDestSlot cxFsTransferStatus Configuration Changed: operative")
cxFsTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 1), ("processing", 2), ("succeeded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsTransferStatus.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTransferStatus.setDescription('The status of the last file transfer action initiated using the cxFsTransferAction object. Options: idle (1): No file transfer in progress. The last file transfer has either completed successfully or failed and been aborted. processing (2): File transfer in progress. succeeded (3): No file transfer in progress. The last file transfer was completed successfully. failed (4): No file transfer in progress. The last file transfer failed and was aborted. Related Objects: cxFsTransferFileName cxFsTransferDestSlot cxFsTransferAction cxFsTransferErrorCode')
cxFsTransferErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 5, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("not-applicable", 1), ("ok", 2), ("local-open-error", 3), ("nfs-open-error", 4), ("local-reading-error", 5), ("nfs-reading-error", 6), ("local-writing-error", 7), ("nfs-writing-error", 8), ("local-close-error", 9), ("nfs-close-error", 10), ("other-error", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cxFsTransferErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: cxFsTransferErrorCode.setDescription("Indicates whether any errors occurred during the last file transfer action initiated using the 'cxFsTransferAction' object. The cxFsTransferErrorCode object also indicates the nature of any errors that occur during file transfer. Options: not-applicable (1): No action taken; therefore, no error generated. ok (2): No errors. The last file transfer operation was successfully completed. local-open-error (3): Could not open the local file for which a PUT or GET command was issued. nfs-open-error (4): Could not open the remote file for which a PUT or GET command was issued. local-reading-error (5): Either a local file for which a PUT command was issued could not be read, or a remote file obtained through a GET command could not be read locally. nfs-reading-error (6): Either a remote file PUT to a destination slot could not be read at that location, or a remote file for which a GET command was issued could not be read in the remote slot. local-writing-error (7): The 'cxFsTransferAction' object was unable to copy the specified file to the local directory. nfs-writing-error (8): The 'cxFsTransferAction' object was unable to copy the specified file to the destination directory. local-close-error (9): Could not close local file used in either a GET or PUT action. nfs-close-error (10): Could not close a remote file used in either a GET or PUT action. other-error (11): An unspecified error (other than those listed above) occurred. Related Objects: cxFsTransferAction cxFsTransferFileName cxFsTransferDestSlot cxFsTransferStatus")
mibBuilder.exportSymbols("CXFileServer-MIB", cxFsFreeBytes=cxFsFreeBytes, cxFsFileList=cxFsFileList, cxFsIsBusy=cxFsIsBusy, cxFsCleanupOnce=cxFsCleanupOnce, cxFsTransferFileName=cxFsTransferFileName, cxFsBackGroundCleanup=cxFsBackGroundCleanup, cxFsTransferDestSlot=cxFsTransferDestSlot, cxFsTransferErrorCode=cxFsTransferErrorCode, cxFsTransferStatus=cxFsTransferStatus, cxFsTransferAction=cxFsTransferAction, cxFsTftpTransfer=cxFsTftpTransfer, cxFsTftpTargetSlot=cxFsTftpTargetSlot, cxFsDeleteFile=cxFsDeleteFile, cxFsTftpRemxt=cxFsTftpRemxt)
