#
# PySNMP MIB module A3COM-HUAWEI-DOT11-RRM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DOT11-RRM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cDot11, H3cDot11SSIDStringType, H3cDot11RadioType, H3cDot11RadioScopeType, H3cDot11RadioElementIndex, h3cDot11APElementIndex, H3cDot11ObjectIDType, H3cDot11ChannelScopeType = mibBuilder.importSymbols("A3COM-HUAWEI-DOT11-REF-MIB", "h3cDot11", "H3cDot11SSIDStringType", "H3cDot11RadioType", "H3cDot11RadioScopeType", "H3cDot11RadioElementIndex", "h3cDot11APElementIndex", "H3cDot11ObjectIDType", "H3cDot11ChannelScopeType")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, TimeTicks, Gauge32, Integer32, IpAddress, ModuleIdentity, Unsigned32, ObjectIdentity, iso, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "TimeTicks", "Gauge32", "Integer32", "IpAddress", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "iso", "Counter64", "MibIdentifier")
DateAndTime, DisplayString, TruthValue, RowStatus, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "DisplayString", "TruthValue", "RowStatus", "MacAddress", "TextualConvention")
h3cDot11RRM = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8))
h3cDot11RRM.setRevisions(('2010-09-25 18:00', '2010-02-23 18:00', '2009-08-01 20:00', '2009-05-07 20:00', '2009-04-17 20:00', '2008-07-14 14:29',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDot11RRM.setRevisionsDescriptions(('Modified to add new nodes.', 'Modified to add new nodes.', 'Modified to add new nodes and new table.', 'Modified to add new nodes and new table.', 'Modified to add new table and new group.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cDot11RRM.setLastUpdated('201009251800Z')
if mibBuilder.loadTexts: h3cDot11RRM.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDot11RRM.setContactInfo('Platform Team H3C Technologies Co., Ltd. Hai-Dian District Beijing P.R.China Http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: h3cDot11RRM.setDescription('This MIB file is to provide the object definition of WLAN radio resource management (RRM).')
h3cDot11RRMConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1))
h3cDot11RRMGlobalCfgPara = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1))
h3cDot11RRM11nMadtMaxMcs = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 76), ValueRangeConstraint(255, 255), )).clone(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRM11nMadtMaxMcs.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRM11nMadtMaxMcs.setDescription('Specify the maximum modulation and coding scheme (MCS) index for 802.11n mandatory rates. The value 255 indicates that no maximum MCS index is specified. No maximum MCS index is specified for 802.11n mandatory rates by default. Besides 255, the specified maximum MCS index for 802.11n supported rates must be no less than the specified maximum MCS index for 802.11n mandatory rates.')
h3cDot11RRM11nSuptMaxMcs = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 76)).clone(76)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRM11nSuptMaxMcs.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRM11nSuptMaxMcs.setDescription('Specify the maximum Modulation and Coding Scheme (MCS) index for 802.11n supported rates. The specified maximum MCS index for 802.11n supported rates must be no less than the specified maximum MCS index for 802.11n mandatory rates.')
h3cDot11RRM11gProtect = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRM11gProtect.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRM11gProtect.setDescription('Enable/Disable dot11g protection.')
h3cDot11RRM11aPwrConstrt = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRM11aPwrConstrt.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRM11aPwrConstrt.setDescription('Configure the power constraint for all 802.11a radios. The configured power constraint is advertised in beacons if spectrum management is enabled. The range of power constraint is 0 to MAX-POWER-1 (where the MAX-POWER is defined by the regulatory domain).')
h3cDot11RRM11aSpectrumManag = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRM11aSpectrumManag.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRM11aSpectrumManag.setDescription('Enable/Disable spectrum management for 802.11a radios. When spectrum management is enabled, the WLAN sub-system advertises power capabilities of the AP and power constraints applicable to all devices in the BSS based on regulatory domain specification.')
h3cDot11RRMAutoChlAvoid11h = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMAutoChlAvoid11h.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAutoChlAvoid11h.setDescription('Configure the auto-channel set as non-dot11h channels, this is, only the non-dot11h channels belonging to the country code are scanned during initial channel selection and one of them is selected.')
h3cDot11RRMScanChl = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("all", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMScanChl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMScanChl.setDescription('Set the scan mode. auto: When this option is set, all channels of the country code being set are scanned. all: When this option is set, all the channels of the radio band are scanned.')
h3cDot11RRMScanRptIntvel = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 120)).clone(10)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMScanRptIntvel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMScanRptIntvel.setDescription('Set the scan report interval.')
h3cDot11APInterfNumThreshhd = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11APInterfNumThreshhd.setStatus('current')
if mibBuilder.loadTexts: h3cDot11APInterfNumThreshhd.setDescription('Represents threshold of AP interference . If the value of AP interference exceeds this threshold, AP interference trap will be sent. If the value of this node is zero, AP interference trap will be sent immediately.')
h3cDot11StaInterfNumThreshhd = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11StaInterfNumThreshhd.setStatus('current')
if mibBuilder.loadTexts: h3cDot11StaInterfNumThreshhd.setDescription('Represents threshold of STA interference. If the value of STA interference exceeds this threshold, STA interference trap will be sent. If the value of this node is zero, STA interference trap will be sent immediately. ')
h3cDot11RRMRadioCfgTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2), )
if mibBuilder.loadTexts: h3cDot11RRMRadioCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMRadioCfgTable.setDescription('Configure WLAN RRM based radio type. When 802.11b parameter is modified, 802.11g parameter will be changed at the same time. In the same way, when 802.11g parameter is modified, 802.11b parameter will be changed at the same time.')
h3cDot11RRMRadioCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMRadioType"))
if mibBuilder.loadTexts: h3cDot11RRMRadioCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMRadioCfgEntry.setDescription('Configure WLAN RRM based radio type. When 802.11b parameter is modified, 802.11g parameter will be changed at the same time. In the same way, when 802.11g parameter is modified, 802.11b parameter will be changed at the same time.')
h3cDot11RRMRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 1), H3cDot11RadioType())
if mibBuilder.loadTexts: h3cDot11RRMRadioType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMRadioType.setDescription('802.11 radio type.')
h3cDot11RRMCfgChlState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgChlState.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgChlState.setDescription('Enable/Disable dynamic channel selection.')
h3cDot11RRMCfgChlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfDecisive", 1), ("userTriggered", 2))).clone('userTriggered')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgChlMode.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgChlMode.setDescription('Configure the mode of channel selection. This node can be configured only when dynamic channel selection is enabled.')
h3cDot11RRMChlProntoRadioElmt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMChlProntoRadioElmt.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlProntoRadioElmt.setDescription('Specify the AP and radio that will change channel at next calibration cycle. 0 is returned when getting the value of this node. This node can be configured only when the mode of channel selection control is user-triggered. When configuring, the higher 24 bits stand for the AP index, and the last 8 bits stand for the radio index. 4294967295 stand for configuring each radio on all APs.')
h3cDot11RRMCfgPwrState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgPwrState.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgPwrState.setDescription('Enable/Disable dynamic power selection for the band.')
h3cDot11RRMCfgPwrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("selfDecisive", 1), ("userTriggered", 2))).clone('userTriggered')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgPwrMode.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgPwrMode.setDescription('Configure the mode of transmit power control. This node can be configured only when dynamic power selection is enabled.')
h3cDot11RRMPwrProntoRadioElmt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMPwrProntoRadioElmt.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMPwrProntoRadioElmt.setDescription('Specify the AP and radio that will change power at next calibration cycle. 0 is returned when getting the value of this node. This node can be configured only when the mode of transmit power control is user-triggered. When configuring, the higher 24 bits stand for the AP index, and the last 8 bits stand for the radio index. 4294967295 stand for configuring each radio on all APs.')
h3cDot11RRMCfgIntrvl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 8), Integer32().clone(8)).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgIntrvl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgIntrvl.setDescription('Configure the calibration interval.')
h3cDot11RRMCfgIntrfThres = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 100)).clone(50)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgIntrfThres.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgIntrfThres.setDescription('Configure the interface threshold. By default, interference observed on an operating channel is considered during dynamic frequency selection and transmit power control. If the interference percentage on the channel reaches the set threshold, RRM will perform resource adjustment to control the situation.')
h3cDot11RRMCfgNoiseThres = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-127, 127)).clone(-70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgNoiseThres.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgNoiseThres.setDescription('Configure the noise threshold.')
h3cDot11RRMCfgPERThres = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100)).clone(20)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgPERThres.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgPERThres.setDescription('Configure the CRC error threshold. If the percentage of CRC errors reaches the threshold, RRM will perform resource adjustment to control the situation.')
h3cDot11RRMCfgToleranceFctr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 45)).clone(20)).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgToleranceFctr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgToleranceFctr.setDescription('Configure the tolerance level. During dynamic frequency selection (DFS), the channel will be changed only if there is a better channel having lesser interference and packet error rate than those specified by the user.')
h3cDot11RRMCfgAdjacencyFctr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCfgAdjacencyFctr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCfgAdjacencyFctr.setDescription('Configure the adjacency factor for the band. If transmit power control (TPC) is configured, power will be adjusted when the nth neighbor is detected. The value n is the adjacency factor.')
h3cDot11RRMAPCfgTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 3), )
if mibBuilder.loadTexts: h3cDot11RRMAPCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPCfgTable.setDescription('This table defines the RRM parameters for AP.')
h3cDot11RRMAPCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-REF-MIB", "h3cDot11APElementIndex"))
if mibBuilder.loadTexts: h3cDot11RRMAPCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPCfgEntry.setDescription('Each entry contains information of RRM parameters for AP.')
h3cDot11RRMAPWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMAPWorkMode.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPWorkMode.setDescription('AP work mode.')
h3cDot11RRMSDRadioGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4), )
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupTable.setDescription('This table defines RRM self-decisive radio group.')
h3cDot11RRMSDRadioGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMSDRadioGroupId"))
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupEntry.setDescription('Each entry contains information of one RRM self-decisive radio group.')
h3cDot11RRMSDRadioGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupId.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupId.setDescription('Represents RRM self-decisive radio group ID.')
h3cDot11RRMSDRadioGroupDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupDesc.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRadioGroupDesc.setDescription('Represents the description of RRM self-decisive radio group.')
h3cDot11RRMSDRdGrpChlHolddownTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4, 1, 3), Unsigned32()).setUnits('minute').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11RRMSDRdGrpChlHolddownTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRdGrpChlHolddownTm.setDescription('Represents the channel holddown time of RRM self-decisive radio group.')
h3cDot11RRMSDRdGrpPwrHolddownTm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4, 1, 4), Unsigned32()).setUnits('minute').setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11RRMSDRdGrpPwrHolddownTm.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRdGrpPwrHolddownTm.setDescription('Represents the power holddown time of RRM self-decisive radio group.')
h3cDot11RRMSDRdGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: h3cDot11RRMSDRdGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMSDRdGroupRowStatus.setDescription('The row status of this table entry.')
h3cDot11RRMAPCfg2Table = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5), )
if mibBuilder.loadTexts: h3cDot11RRMAPCfg2Table.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPCfg2Table.setDescription('This table defines the RRM parameters for AP.')
h3cDot11RRMAPCfg2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMAPSerialID"))
if mibBuilder.loadTexts: h3cDot11RRMAPCfg2Entry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPCfg2Entry.setDescription('Each entry contains information of RRM parameters for AP.')
h3cDot11RRMAPSerialID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5, 1, 1), H3cDot11ObjectIDType())
if mibBuilder.loadTexts: h3cDot11RRMAPSerialID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPSerialID.setDescription('Serial ID of the AP.')
h3cDot11RRMAPIntfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMAPIntfThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAPIntfThreshold.setDescription('Represents threshold of AP interference . If the number of AP interference exceeds this threshold, AP interference trap will be sent.')
h3cDot11RRMStaIntfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMStaIntfThreshold.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMStaIntfThreshold.setDescription('Represents threshold of STA interference. If the number of STA interference exceeds this threshold, station interference trap will be sent.')
h3cDot11RRMCoChlIntfTrapThhd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5, 1, 4), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMCoChlIntfTrapThhd.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMCoChlIntfTrapThhd.setDescription('Represents threshold of interference trap with current ap. If signal strength of the device exceeds this threshold, corresponding trap will be sent.')
h3cDot11RRMAdjChlIntfTrapThhd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 1, 5, 1, 5), Integer32()).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMAdjChlIntfTrapThhd.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMAdjChlIntfTrapThhd.setDescription('Represents threshold of adjacent interference trap with current ap. If signal strength of the device exceeds this threshold, corresponding trap will be sent.')
h3cDot11RRMDetectGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2))
h3cDot11RRMChlRptTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1), )
if mibBuilder.loadTexts: h3cDot11RRMChlRptTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptTable.setDescription('This table shows the RRM channel information of each radio on all APs.')
h3cDot11RRMChlRptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMRadioIndex"), (0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMChlRptChlNum"))
if mibBuilder.loadTexts: h3cDot11RRMChlRptEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptEntry.setDescription('Each entry contains information of RRM channel information of the radio on the AP.')
h3cDot11RRMRadioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 1), H3cDot11RadioElementIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11RRMRadioIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMRadioIndex.setDescription('Represents index of the radio.')
h3cDot11RRMChlRptChlNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11RRMChlRptChlNum.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptChlNum.setDescription('Channel number.')
h3cDot11RRMChlRptChlType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primeChannel", 1), ("offChannel", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptChlType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptChlType.setDescription('Channel type.')
h3cDot11RRMChlRptChlQlty = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("bad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptChlQlty.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptChlQlty.setDescription('Channel quality.')
h3cDot11RRMChlRptNbrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptNbrCnt.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptNbrCnt.setDescription('Number of neighbors found on the channel.')
h3cDot11RRMChlRptLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptLoad.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptLoad.setDescription('Load observed on the channel in percentage.')
h3cDot11RRMChlRptUtlz = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptUtlz.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptUtlz.setDescription('Utilization of the channel in percentage.')
h3cDot11RRMChlRptIntrf = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptIntrf.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptIntrf.setDescription('Interference observed on the channel in percentage.')
h3cDot11RRMChlRptPER = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptPER.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptPER.setDescription('Packet error rate observed on the channel in percentage.')
h3cDot11RRMChlRptRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptRetryRate.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptRetryRate.setDescription('Percentage of retransmission happened on the channel.')
h3cDot11RRMChlRptNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMChlRptNoise.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptNoise.setDescription('Noise observed on the channel.')
h3cDot11RRMChlRptRadarIndtcr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detected", 1), ("notDetected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11RRMChlRptRadarIndtcr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMChlRptRadarIndtcr.setDescription('Radar detection status.')
h3cDot11RRMNbrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2), )
if mibBuilder.loadTexts: h3cDot11RRMNbrInfoTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMNbrInfoTable.setDescription('This table shows the RRM neighbor information of each radio on all APs.')
h3cDot11RRMNbrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMRadioIndex"), (0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RrmNbrBSSID"))
if mibBuilder.loadTexts: h3cDot11RRMNbrInfoEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMNbrInfoEntry.setDescription('Each entry contains information of RRM neighbor information of the radio on an AP.')
h3cDot11RrmNbrBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11RrmNbrBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RrmNbrBSSID.setDescription('MAC address of the AP.')
h3cDot11RrmNbrChl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1, 2), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RrmNbrChl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RrmNbrChl.setDescription('Channel number on which the neighbor was found.')
h3cDot11RRMNbrIntrf = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMNbrIntrf.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMNbrIntrf.setDescription('Interference observed on the channel in percentage by neighbor.')
h3cDot11RrmNbrRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RrmNbrRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RrmNbrRSSI.setDescription('Signal strength of the AP in dBm.')
h3cDot11RrmNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("managed", 1), ("unmanaged", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RrmNbrType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RrmNbrType.setDescription('Type of the AP, managed or unmanaged.')
h3cDot11RrmNbrSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 2, 1, 6), H3cDot11SSIDStringType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RrmNbrSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RrmNbrSSID.setDescription('SSID of the Neighbor.')
h3cDot11RRMHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3), )
if mibBuilder.loadTexts: h3cDot11RRMHistoryTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryTable.setDescription('This table shows the details of the latest three channel changes and power changes applied on all APs, including time of change, reason of the change and the channel, power, interference parameters.')
h3cDot11RRMHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMRadioIndex"), (0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMHistoryId"), (0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMHistoryRecIndctr"))
if mibBuilder.loadTexts: h3cDot11RRMHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryEntry.setDescription('Each entry shows the details of channel and power changes.')
h3cDot11RRMHistoryId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cDot11RRMHistoryId.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryId.setDescription('History number of the change.')
h3cDot11RRMHistoryRecIndctr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("before", 1), ("after", 2))))
if mibBuilder.loadTexts: h3cDot11RRMHistoryRecIndctr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryRecIndctr.setDescription('History record type of the change.')
h3cDot11RRMHistoryChl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 3), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryChl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryChl.setDescription('Channel on which the radio operates before/after the change of channel or power.')
h3cDot11RRMHistoryPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 4), Integer32()).setUnits('dBm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryPwr.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryPwr.setDescription('Power of the radio before/after the change of channel or power.')
h3cDot11RRMHistoryLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryLoad.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryLoad.setDescription('Load observed on the radio in percentage before/after the change of channel or power.')
h3cDot11RRMHistoryUtlz = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryUtlz.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryUtlz.setDescription('Utilization of the radio in percentage before/after the change of channel or power.')
h3cDot11RRMHistoryIntrf = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryIntrf.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryIntrf.setDescription('Interference observed on the radio in percentage before/after the change of channel or power.')
h3cDot11RRMHistoryNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryNoise.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryNoise.setDescription('Noise observed on the radio before/after the change of channel or power.')
h3cDot11RRMHistoryPER = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryPER.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryPER.setDescription('Packet error rate observed on the radio in percentage before/after the change of channel or power.')
h3cDot11RRMHistoryRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryRetryRate.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryRetryRate.setDescription('Percentage of retransmission happened on the radio before/after the change of channel or power.')
h3cDot11RRMHistoryChgReason = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 11), Bits().clone(namedValues=NamedValues(("others", 0), ("coverage", 1), ("radar", 2), ("retransmission", 3), ("packetsDiscarded", 4), ("interference", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryChgReason.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryChgReason.setDescription('Reason for the change of channel or power. The various bit positions are: |0 |Others | |1 |Coverage | |2 |Radar | |3 |Retransmission | |4 |Packets discarded | |5 |Interference | 0 is returned when the history record type is after.')
h3cDot11RRMHistoryChgDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 2, 3, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11RRMHistoryChgDateTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMHistoryChgDateTime.setDescription('The time when the channel or power change occurred.')
h3cDot11RRMNotifyGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3))
h3cDot11RRMChlQltyNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 1))
h3cDot11RRMChlQltyNtfPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 1, 0))
h3cDot11RRMIntrfLimit = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 1, 0, 1)).setObjects(("A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMChlRptIntrf"))
if mibBuilder.loadTexts: h3cDot11RRMIntrfLimit.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMIntrfLimit.setDescription('This notification will be sent when interference on the radio exceeds the limit.')
h3cDot11RRMPERLimit = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 1, 0, 2)).setObjects(("A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMChlRptPER"))
if mibBuilder.loadTexts: h3cDot11RRMPERLimit.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMPERLimit.setDescription('This notification will be sent when packet error rate on the radio exceeds the limit.')
h3cDot11RRMNoiseLimit = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 1, 0, 3)).setObjects(("A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMChlRptNoise"))
if mibBuilder.loadTexts: h3cDot11RRMNoiseLimit.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMNoiseLimit.setDescription('This notification will be sent when noise on the radio exceeds the limit.')
h3cDot11RRMResChgNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 2))
h3cDot11RRMResChgNtfPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 2, 0))
h3cDot11RRMPowerChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 2, 0, 1)).setObjects(("A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11RRMRadioIndex"), ("A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11NewPower"), ("A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11OldPower"))
if mibBuilder.loadTexts: h3cDot11RRMPowerChange.setStatus('current')
if mibBuilder.loadTexts: h3cDot11RRMPowerChange.setDescription('This notification will be sent when power changed on the radio automatically.')
h3cDot11RRMNotificationsVar = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 3))
h3cDot11NewPower = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 3, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11NewPower.setStatus('current')
if mibBuilder.loadTexts: h3cDot11NewPower.setDescription('Power of the radio after the change of power.')
h3cDot11OldPower = MibScalar((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 3, 3, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDot11OldPower.setStatus('current')
if mibBuilder.loadTexts: h3cDot11OldPower.setDescription('Power of the radio before the change of power.')
h3cDot11MonitorDetectedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4))
h3cDot11MonitorDetectedDevTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1), )
if mibBuilder.loadTexts: h3cDot11MonitorDetectedDevTable.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDetectedDevTable.setDescription('This table shows the devices of AP detected')
h3cDot11MonitorDetectedDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-DOT11-RRM-MIB", "h3cDot11MonitorDevMAC"), (0, "A3COM-HUAWEI-DOT11-REF-MIB", "h3cDot11APElementIndex"))
if mibBuilder.loadTexts: h3cDot11MonitorDetectedDevEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDetectedDevEntry.setDescription('Each entry contains information of detected devices.')
h3cDot11MonitorDevMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: h3cDot11MonitorDevMAC.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevMAC.setDescription('Represents MAC address of the device detected.')
h3cDot11MonitorDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("client", 1), ("ap", 2), ("adhoc", 3), ("wirelessBridge", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevType.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevType.setDescription('Represents type of the device detected.')
h3cDot11MonitorDevVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevVendor.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevVendor.setDescription('Represents vendor of the detected device.')
h3cDot11MonitorDevSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevSSID.setDescription('Represents the service set identifier for the ESS of the device which type is ap or adhoc.')
h3cDot11MonitorDevBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevBSSID.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevBSSID.setDescription('Represents the basic service set identifier of the detected device.')
h3cDot11MonitorDevChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 6), H3cDot11ChannelScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevChannel.setDescription('Represents the channel in which the device was last detected. AP will choose the channel which has maximum signal strength as effective channel, as there is interference between adjacent channels.')
h3cDot11MonitorRadioId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 7), H3cDot11RadioScopeType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorRadioId.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorRadioId.setDescription('Represents the radio ID of the AP that detected the device.')
h3cDot11MonitorDevMaxRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 8), Integer32()).setUnits('dbm').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevMaxRSSI.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevMaxRSSI.setDescription('Represents the maximum detected RSSI of the device in a scan report cycle.')
h3cDot11MonitorDevBeaconIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 9), Integer32()).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevBeaconIntvl.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevBeaconIntvl.setDescription('Represents the beacon interval for the detected device(not include the device which type is client).')
h3cDot11MonitorDevFstDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevFstDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevFstDctTime.setDescription('Represents the time at which the device was first detected.')
h3cDot11MonitorDevLstDctTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevLstDctTime.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevLstDctTime.setDescription('Represents the time at which the device was detected last time.')
h3cDot11MonitorDevClear = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cDot11MonitorDevClear.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevClear.setDescription('This object is used to clear the information of the device detected in the WLAN. It will return false for get operation.')
h3cDot11MonitorDevSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 75, 8, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDot11MonitorDevSNR.setStatus('current')
if mibBuilder.loadTexts: h3cDot11MonitorDevSNR.setDescription('Represents the SNR of the device in a scan report cycle.')
mibBuilder.exportSymbols("A3COM-HUAWEI-DOT11-RRM-MIB", h3cDot11RRMHistoryChgDateTime=h3cDot11RRMHistoryChgDateTime, h3cDot11RRMChlRptChlNum=h3cDot11RRMChlRptChlNum, h3cDot11RRMChlRptTable=h3cDot11RRMChlRptTable, h3cDot11RRMHistoryId=h3cDot11RRMHistoryId, h3cDot11RrmNbrChl=h3cDot11RrmNbrChl, h3cDot11RRM11aPwrConstrt=h3cDot11RRM11aPwrConstrt, h3cDot11RRMRadioIndex=h3cDot11RRMRadioIndex, h3cDot11RrmNbrSSID=h3cDot11RrmNbrSSID, h3cDot11RRMHistoryTable=h3cDot11RRMHistoryTable, h3cDot11RRMChlRptUtlz=h3cDot11RRMChlRptUtlz, h3cDot11RRMPowerChange=h3cDot11RRMPowerChange, h3cDot11MonitorDevVendor=h3cDot11MonitorDevVendor, h3cDot11RRMSDRadioGroupDesc=h3cDot11RRMSDRadioGroupDesc, PYSNMP_MODULE_ID=h3cDot11RRM, h3cDot11RRMRadioCfgEntry=h3cDot11RRMRadioCfgEntry, h3cDot11RRMNoiseLimit=h3cDot11RRMNoiseLimit, h3cDot11RRM=h3cDot11RRM, h3cDot11RRM11aSpectrumManag=h3cDot11RRM11aSpectrumManag, h3cDot11RRMCfgPERThres=h3cDot11RRMCfgPERThres, h3cDot11RrmNbrBSSID=h3cDot11RrmNbrBSSID, h3cDot11RRMHistoryLoad=h3cDot11RRMHistoryLoad, h3cDot11RRMChlProntoRadioElmt=h3cDot11RRMChlProntoRadioElmt, h3cDot11RRMAPCfg2Entry=h3cDot11RRMAPCfg2Entry, h3cDot11RRMRadioType=h3cDot11RRMRadioType, h3cDot11MonitorDetectedGroup=h3cDot11MonitorDetectedGroup, h3cDot11RRMHistoryRetryRate=h3cDot11RRMHistoryRetryRate, h3cDot11RRMAPCfgTable=h3cDot11RRMAPCfgTable, h3cDot11RRMChlRptRadarIndtcr=h3cDot11RRMChlRptRadarIndtcr, h3cDot11RRM11nMadtMaxMcs=h3cDot11RRM11nMadtMaxMcs, h3cDot11RRMCoChlIntfTrapThhd=h3cDot11RRMCoChlIntfTrapThhd, h3cDot11RRMAPCfg2Table=h3cDot11RRMAPCfg2Table, h3cDot11RRMScanChl=h3cDot11RRMScanChl, h3cDot11MonitorDetectedDevEntry=h3cDot11MonitorDetectedDevEntry, h3cDot11RRMCfgIntrfThres=h3cDot11RRMCfgIntrfThres, h3cDot11RRMAPCfgEntry=h3cDot11RRMAPCfgEntry, h3cDot11RRMHistoryChl=h3cDot11RRMHistoryChl, h3cDot11RRMChlRptChlType=h3cDot11RRMChlRptChlType, h3cDot11OldPower=h3cDot11OldPower, h3cDot11RRMCfgPwrState=h3cDot11RRMCfgPwrState, h3cDot11RRMSDRdGrpChlHolddownTm=h3cDot11RRMSDRdGrpChlHolddownTm, h3cDot11RRMCfgToleranceFctr=h3cDot11RRMCfgToleranceFctr, h3cDot11MonitorDevBeaconIntvl=h3cDot11MonitorDevBeaconIntvl, h3cDot11RRMNotifyGroup=h3cDot11RRMNotifyGroup, h3cDot11RRMCfgPwrMode=h3cDot11RRMCfgPwrMode, h3cDot11MonitorDevSNR=h3cDot11MonitorDevSNR, h3cDot11RRMSDRdGroupRowStatus=h3cDot11RRMSDRdGroupRowStatus, h3cDot11RRMSDRdGrpPwrHolddownTm=h3cDot11RRMSDRdGrpPwrHolddownTm, h3cDot11MonitorDevFstDctTime=h3cDot11MonitorDevFstDctTime, h3cDot11RRMAPSerialID=h3cDot11RRMAPSerialID, h3cDot11RRMChlRptNbrCnt=h3cDot11RRMChlRptNbrCnt, h3cDot11RRMStaIntfThreshold=h3cDot11RRMStaIntfThreshold, h3cDot11RRMConfigGroup=h3cDot11RRMConfigGroup, h3cDot11RRMSDRadioGroupId=h3cDot11RRMSDRadioGroupId, h3cDot11RRMIntrfLimit=h3cDot11RRMIntrfLimit, h3cDot11RRMHistoryPwr=h3cDot11RRMHistoryPwr, h3cDot11MonitorDevClear=h3cDot11MonitorDevClear, h3cDot11MonitorDevSSID=h3cDot11MonitorDevSSID, h3cDot11MonitorDevChannel=h3cDot11MonitorDevChannel, h3cDot11NewPower=h3cDot11NewPower, h3cDot11RRMHistoryIntrf=h3cDot11RRMHistoryIntrf, h3cDot11RRMResChgNtfPrefix=h3cDot11RRMResChgNtfPrefix, h3cDot11RRMChlRptEntry=h3cDot11RRMChlRptEntry, h3cDot11RRMScanRptIntvel=h3cDot11RRMScanRptIntvel, h3cDot11MonitorDevMaxRSSI=h3cDot11MonitorDevMaxRSSI, h3cDot11RRMHistoryNoise=h3cDot11RRMHistoryNoise, h3cDot11MonitorDevBSSID=h3cDot11MonitorDevBSSID, h3cDot11RRMHistoryPER=h3cDot11RRMHistoryPER, h3cDot11MonitorDevType=h3cDot11MonitorDevType, h3cDot11RRMRadioCfgTable=h3cDot11RRMRadioCfgTable, h3cDot11RRMCfgChlMode=h3cDot11RRMCfgChlMode, h3cDot11MonitorDetectedDevTable=h3cDot11MonitorDetectedDevTable, h3cDot11RRMSDRadioGroupEntry=h3cDot11RRMSDRadioGroupEntry, h3cDot11RRMChlRptNoise=h3cDot11RRMChlRptNoise, h3cDot11RRMHistoryChgReason=h3cDot11RRMHistoryChgReason, h3cDot11RRMChlRptChlQlty=h3cDot11RRMChlRptChlQlty, h3cDot11RRMNbrIntrf=h3cDot11RRMNbrIntrf, h3cDot11RRMChlRptPER=h3cDot11RRMChlRptPER, h3cDot11RRMAutoChlAvoid11h=h3cDot11RRMAutoChlAvoid11h, h3cDot11RRMGlobalCfgPara=h3cDot11RRMGlobalCfgPara, h3cDot11RRMNbrInfoEntry=h3cDot11RRMNbrInfoEntry, h3cDot11RrmNbrRSSI=h3cDot11RrmNbrRSSI, h3cDot11RRMHistoryRecIndctr=h3cDot11RRMHistoryRecIndctr, h3cDot11MonitorDevLstDctTime=h3cDot11MonitorDevLstDctTime, h3cDot11RRMAPWorkMode=h3cDot11RRMAPWorkMode, h3cDot11RRMNotificationsVar=h3cDot11RRMNotificationsVar, h3cDot11StaInterfNumThreshhd=h3cDot11StaInterfNumThreshhd, h3cDot11RRMNbrInfoTable=h3cDot11RRMNbrInfoTable, h3cDot11APInterfNumThreshhd=h3cDot11APInterfNumThreshhd, h3cDot11RRMCfgIntrvl=h3cDot11RRMCfgIntrvl, h3cDot11RRMChlRptLoad=h3cDot11RRMChlRptLoad, h3cDot11RRMChlRptIntrf=h3cDot11RRMChlRptIntrf, h3cDot11RRMHistoryEntry=h3cDot11RRMHistoryEntry, h3cDot11RRMAdjChlIntfTrapThhd=h3cDot11RRMAdjChlIntfTrapThhd, h3cDot11RRM11gProtect=h3cDot11RRM11gProtect, h3cDot11RRMChlRptRetryRate=h3cDot11RRMChlRptRetryRate, h3cDot11RRMHistoryUtlz=h3cDot11RRMHistoryUtlz, h3cDot11RRMChlQltyNotifications=h3cDot11RRMChlQltyNotifications, h3cDot11RRMSDRadioGroupTable=h3cDot11RRMSDRadioGroupTable, h3cDot11RRMChlQltyNtfPrefix=h3cDot11RRMChlQltyNtfPrefix, h3cDot11RRMPwrProntoRadioElmt=h3cDot11RRMPwrProntoRadioElmt, h3cDot11RRMCfgChlState=h3cDot11RRMCfgChlState, h3cDot11MonitorRadioId=h3cDot11MonitorRadioId, h3cDot11RRMAPIntfThreshold=h3cDot11RRMAPIntfThreshold, h3cDot11MonitorDevMAC=h3cDot11MonitorDevMAC, h3cDot11RRMCfgNoiseThres=h3cDot11RRMCfgNoiseThres, h3cDot11RrmNbrType=h3cDot11RrmNbrType, h3cDot11RRMDetectGroup=h3cDot11RRMDetectGroup, h3cDot11RRMResChgNotifications=h3cDot11RRMResChgNotifications, h3cDot11RRMCfgAdjacencyFctr=h3cDot11RRMCfgAdjacencyFctr, h3cDot11RRMPERLimit=h3cDot11RRMPERLimit, h3cDot11RRM11nSuptMaxMcs=h3cDot11RRM11nSuptMaxMcs)
