#
# PySNMP MIB module DLINK-3100-AAA (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLINK-3100-AAA
# Produced by pysmi-0.3.4 at Wed May  1 12:47:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
rlRadius, rnd, rlAAAEap = mibBuilder.importSymbols("DLINK-3100-MIB", "rlRadius", "rnd", "rlAAAEap")
InetAddressType, InetAddressIPv6, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddressIPv6", "InetAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, iso, Counter64, Counter32, ModuleIdentity, NotificationType, ObjectIdentity, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "iso", "Counter64", "Counter32", "ModuleIdentity", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier")
DisplayString, DateAndTime, TextualConvention, TruthValue, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention", "TruthValue", "RowStatus")
rlAAA = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79))
rlAAA.setRevisions(('2003-09-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlAAA.setRevisionsDescriptions(('Added this MODULE-IDENTITY clause.',))
if mibBuilder.loadTexts: rlAAA.setLastUpdated('200309210000Z')
if mibBuilder.loadTexts: rlAAA.setOrganization('Dlink, Inc.')
if mibBuilder.loadTexts: rlAAA.setContactInfo('www.dlink.com')
if mibBuilder.loadTexts: rlAAA.setDescription('The private MIB module definition for Authentication, Authorization and Accounting in DLINK-3100 devices.')
class RlAAAMethodtype(TextualConvention, Integer32):
    description = 'Method list type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("rlAAAMethodDeny", 0), ("rlAAAMethodLinePassword", 1), ("rlAAAMethodSystemPassword", 2), ("rlAAAMethodLocalUserTable", 3), ("rlAAAMethodRadius", 4), ("rlAAAMethodTacacs", 5), ("rlAAAMethodSucceed", 6))

class RlAAAServiceType(TextualConvention, Integer32):
    description = 'Line service type.rlAAAServiceTypeDontCare must be the maximum value in the enum.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("rlAAAServiceTypeDontCare", 0), ("rlAAAServiceTypeTelnet", 1), ("rlAAAServiceTypeHttp", 2), ("rlAAAServiceTypeSsh", 3), ("rlAAAServiceTypeHttps", 4), ("rlAAAServiceTypeSnmp", 5))

class RlAAALinePortType(TextualConvention, Integer32):
    description = 'Line physical port type,the rlAAAPortDontCare must be the maximum value in the enum.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("rlAAAPortDontCare", 0), ("rlAAAPortNetwork", 1), ("rlAAAPortConsole", 2))

rlAAAMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlAAAMibVersion.setDescription("MIB's version, the current version is 2. The difference in RlAAALocalLoginHistEntry, RlAAALinePassLoginHistEntry, RlAAASystemLoginHistEntry added mrid field.")
rlAAARetries = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAARetries.setStatus('current')
if mibBuilder.loadTexts: rlAAARetries.setDescription('Determines the number of retries for each method (Radius, local passwords, local users table and tacacs).')
rlAAARadiusEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAARadiusEnabled.setStatus('current')
if mibBuilder.loadTexts: rlAAARadiusEnabled.setDescription('Specifies whether AAA will use Radius. When to use Radius exactly depends on its position in the methods list. ')
rlAAATacacsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATacacsEnabled.setStatus('current')
if mibBuilder.loadTexts: rlAAATacacsEnabled.setDescription('Specifies whether AAA will use Tacacs. When to use Tacacs exactly depends on its position in the methods list.')
rlAAALocalUserEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALocalUserEnabled.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserEnabled.setDescription('Specifies whether AAA will use the local users table. When to use the table exactly depends on its position in the methods list. ')
rlAAASystemPasswordEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordEnabled.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordEnabled.setDescription('Specifies whether AAA will use the system password. When to use the passwords exactly depends on its position in the methods list. ')
rlAAALinePasswordEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePasswordEnabled.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePasswordEnabled.setDescription('Specifies whether AAA will use the line password. When to use the passwords exactly depends on its position in the methods list. ')
rlAAAAlwaysSuccessEnabled = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAAlwaysSuccessEnabled.setStatus('current')
if mibBuilder.loadTexts: rlAAAAlwaysSuccessEnabled.setDescription('Specifies whether AAA will use the always success method. When to use that method exactly depends on its position in the methods list. ')
rlAAARadiusSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAARadiusSupported.setStatus('current')
if mibBuilder.loadTexts: rlAAARadiusSupported.setDescription('This mib show whether Radius is supported in AAA. If the value is false Radius will not be used as an authentication and accounting method. If the value is true Radius will be used by AAA for authentication and accounting if the the AAA was configured to do so (by setting the appropriate mibs).')
rlAAATacacsSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAATacacsSupported.setStatus('current')
if mibBuilder.loadTexts: rlAAATacacsSupported.setDescription('This mib show whether Tacacs+ is supported in AAA. If the value is false Tacacs+ will not be used as an authentication and accounting method. If the value is true Tacacs+ will be used by AAA for authentication and accounting if the the AAA was configured to do so (by setting the appropriate mibs).')
rlAAALocalUserSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalUserSupported.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserSupported.setDescription('This mib show whether the local users db is supported in AAA.If the value is false the local users db will not be used as an authentication and accounting method. If the value is true the local users db will be used by AAA for authentication and accounting method if the the AAA was configured to do so (by setting the appropriate mibs).')
rlAAASystemPasswordSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemPasswordSupported.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordSupported.setDescription('This mib show whether system password is supported in AAA. If the value is false system password will not be used as an authentication and accounting method. If the value is true the system password will be used by AAA for authentication and accounting method if the the AAA was configured to do so (by setting the appropriate mibs).')
rlAAALinePasswordSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePasswordSupported.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePasswordSupported.setDescription('This mib show whether line password is supported in AAA. If the value is false line password will not be used as an authentication and accounting method. If the value is true the line password will be used by AAA for authentication and accounting method if the the AAA was configured to do so (by setting the appropriate mibs).')
rlAAALineAlwaysSuccessSupported = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALineAlwaysSuccessSupported.setStatus('current')
if mibBuilder.loadTexts: rlAAALineAlwaysSuccessSupported.setDescription('This mib show whether line always success method is supported in AAA.If the value is false always success method will not be used as an authentication and accounting method. If the value is true the always success method will be used by AAA for authentication and accounting method if the the AAA was configured to do so (by setting the appropriate mibs).')
rlAAAMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15), )
if mibBuilder.loadTexts: rlAAAMethodListTable.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodListTable.setDescription('The table specifies all methods list per method name.')
rlAAAMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAAMethodListName"))
if mibBuilder.loadTexts: rlAAAMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodListEntry.setDescription('The row definition for this table.')
rlAAAMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodListName.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodListName.setDescription('Line Method List Name')
rlAAAMethodType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 2), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType1.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType1.setDescription(' first method type that will be used in the method linked list.')
rlAAAMethodType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 3), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType2.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType2.setDescription(' second method type that will be used in the method linked list.')
rlAAAMethodType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 4), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType3.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType3.setDescription('3th method type that will be used in the method linked list.')
rlAAAMethodType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 5), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType4.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType4.setDescription(' 4th method type that will be used in the method linked list.')
rlAAAMethodType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 6), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType5.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType5.setDescription('5th method type that will be used in the method linked list.')
rlAAAMethodType6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 7), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType6.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType6.setDescription(' 6th method type that will be used in the method linked list.')
rlAAAMethodType7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 8), RlAAAMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodType7.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodType7.setDescription(' 7th method type that will be used in the method linked list.')
rlAAAMethodListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 15, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMethodListStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAAMethodListStatus.setDescription('method list status can be destroy or createAndGo')
rlAAALineTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16), )
if mibBuilder.loadTexts: rlAAALineTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALineTable.setDescription('The table specifies all lines, their passwords and their authorizations level .the table ordered lexicography by the line name. when a new line is being authenticate the search in line table is from the first entry in table till it find the first entry that fit application input line parameters .')
rlAAALineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALinePortType"), (0, "DLINK-3100-AAA", "rlAAAIfIndex"), (0, "DLINK-3100-AAA", "rlAAAServiceType"))
if mibBuilder.loadTexts: rlAAALineEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALineEntry.setDescription('The row definition for this table.')
rlAAALinePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 1), RlAAALinePortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePortType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePortType.setDescription(' the physical port type .')
rlAAAIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAAIfIndex.setDescription("Identifies the ifindex for which this entry can be used. If index 0 means don't care (can be used for all if indices). For port type console the value could be only 0.")
rlAAAServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 3), RlAAAServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAAServiceType.setDescription('the service type')
rlAAALineMethodListNameLevel1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel1.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel1.setDescription('Method list Name for level 1 .That name points to the method list table .It is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel2.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel2.setDescription('Method list Name for level 2 that name points to the method list table it is the key in method list table .by that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel3.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel3.setDescription('Method list Name for level 3 that name points to the method list table it is the key in method list table .by that way we can reach the methods list to be used for this line')
rlAAALineMethodListNameLevel4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel4.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel4.setDescription('Method list Name for level 4-that name points to the method list table it is the key in method list table .by that way we can reach the methods list to be used for this line')
rlAAALineMethodListNameLevel5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel5.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel5.setDescription('Method list Name for level 5 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel6 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel6.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel6.setDescription('Method list Name for level 6 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel7 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel7.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel7.setDescription('Method list Name for level 7 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel8 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel8.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel8.setDescription('Method list Name for level 8 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel9 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel9.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel9.setDescription('Method list Name for level 9 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel10 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel10.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel10.setDescription('Method list Name for level 10 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel11 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel11.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel11.setDescription('Method list Name for level 11 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel12 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel12.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel12.setDescription('Method list Name for level 12 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel13 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel13.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel13.setDescription('Method list Name for level 13 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel14 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel14.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel14.setDescription('Method list Name for level 14 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALineMethodListNameLevel15 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel15.setStatus('current')
if mibBuilder.loadTexts: rlAAALineMethodListNameLevel15.setDescription('Method list Name for level 15 that name points to the method list table it is the key in method list table .in that way we can reach the methods list to be used for that line')
rlAAALinePassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassword.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassword.setDescription("Line Password. Zero length password is considered as no password. Password with zero length means that in case this password is the method to be used a method fail is returned and no other method is being used. allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAALineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALineStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAALineStatus.setDescription('Line status can be destroy or createAndGo')
rlAAALineLockedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("usable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALineLockedState.setStatus('current')
if mibBuilder.loadTexts: rlAAALineLockedState.setDescription('Line locked status')
rlAAALineConsFailedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALineConsFailedLogins.setStatus('current')
if mibBuilder.loadTexts: rlAAALineConsFailedLogins.setDescription('Number of last consecutive failed logins')
rlAAALinePasswordValidTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePasswordValidTime.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePasswordValidTime.setDescription('The period of time in days, during which the password, is considered valid for login. Value of 0 means never expired. The actual range is product specific. After this time the system may allow limited number of logins to change the password. ')
rlAAALinePasswordExpieryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 16, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePasswordExpieryDate.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePasswordExpieryDate.setDescription('If Line password aging is active, the date on which The current password will expire. Otherwise zero size string')
rlAAALocalUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17), )
if mibBuilder.loadTexts: rlAAALocalUserTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserTable.setDescription('The table specifies all usernames, their passwords and their authorizations.')
rlAAALocalUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALocalUserName"))
if mibBuilder.loadTexts: rlAAALocalUserEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserEntry.setDescription('The row definition for this table.')
rlAAALocalUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALocalUserName.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserName.setDescription('Local User Name')
rlAAALocalUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALocalUserPassword.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserPassword.setDescription("Local User Password .The password can be null allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAALocalUserPrivilage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALocalUserPrivilage.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalUserPrivilage.setDescription('Local User Privilage')
rlAAALocalHostStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALocalHostStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalHostStatus.setDescription('Local User status')
rlAAALocalLockedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("usable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLockedState.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLockedState.setDescription('Local User locked status')
rlAAALocalConsFailedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalConsFailedLogins.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalConsFailedLogins.setDescription('Number of last consecutive failed logins')
rlAAALocalPasswordValidTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALocalPasswordValidTime.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalPasswordValidTime.setDescription('The period of time in days, during which the password, is considered valid for login. Value of 0 means never expired. The actual range is product specific. After this time the system may allow limited number of logins to change the password. ')
rlAAALocalPasswordExpieryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 17, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalPasswordExpieryDate.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalPasswordExpieryDate.setDescription('If User password aging is active, the date on which The current password will expire. Otherwise zero size string')
rlAAASystemPasswordlevel1 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel1.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel1.setDescription("system Password for level 1. allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel2 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel2.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel2.setDescription("system Password for level 2 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel3 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel3.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel3.setDescription("system Password for level 3 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel4 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel4.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel4.setDescription("system Password for level 4 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel5 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel5.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel5.setDescription("system Password for level 5 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel6 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel6.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel6.setDescription("system Password for level 6 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel7 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel7.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel7.setDescription("system Password for level 7 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel8 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel8.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel8.setDescription("system Password for level 8 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel9 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel9.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel9.setDescription("system Password for level 9 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel10 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel10.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel10.setDescription("system Password for level 10 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel11 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel11.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel11.setDescription("system Password for level 11 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel12 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel12.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel12.setDescription("system Password for level 12 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel13 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel13.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel13.setDescription("system Password for level 13 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel14 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel14.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel14.setDescription("system Password for level 14 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not not part of it")
rlAAASystemPasswordlevel15 = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordlevel15.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordlevel15.setDescription("system Password for level 15 allowed formats: a. Display string starting with '$' for clear text b. Encrypted password: starts with # sign followed by 32 octets representing Hex Decimal value(in the 0-9 a-f A-F range) the $ and # as first octet are a directive to indicate what is the type of password and are not part of it")
rlAAAUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33), )
if mibBuilder.loadTexts: rlAAAUserTable.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserTable.setDescription('The table holds all current users that have been authenticated.')
rlAAAUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAAUserIndex"))
if mibBuilder.loadTexts: rlAAAUserEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserEntry.setDescription('The row definition for this table.')
rlAAAUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rlAAAUserIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserIndex.setDescription('User Index')
rlAAAUserServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 2), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserServiceType.setDescription('The service that the user uses. Service dont care is console terminal.')
rlAAAUserRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserRemoteIpAddress.setDescription('User remote IP address.')
rlAAAUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserName.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserName.setDescription('User Name')
rlAAAUserLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserLevel.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserLevel.setDescription('User level')
rlAAAUserIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserIfIndex.setDescription('User if index.')
rlAAAUserLoginDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserLoginDate.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserLoginDate.setDescription('Date of use creation.')
rlAAAUserLoginDurationMS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 33, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserLoginDurationMS.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserLoginDurationMS.setDescription('Time in MS since user login.')
rlAAATest = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34))
rlAAATestPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestPassword.setStatus('current')
if mibBuilder.loadTexts: rlAAATestPassword.setDescription('This variable enables the user supplying the correct code to use the AAA test feature.')
rlAAATestUserTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2), )
if mibBuilder.loadTexts: rlAAATestUserTable.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserTable.setDescription('This table enables a user to perform a simulation of authentiction.')
rlAAATestUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAATestUserIndex"))
if mibBuilder.loadTexts: rlAAATestUserEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserEntry.setDescription('The row definition for this table.')
rlAAATestUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestUserIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserIndex.setDescription('User entry index (the number is used just to identify the user).')
rlAAATestPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 2), RlAAALinePortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestPortType.setStatus('current')
if mibBuilder.loadTexts: rlAAATestPortType.setDescription(' the physical port type .')
rlAAATestIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAATestIfIndex.setDescription(" line ifIndex can configue to be zero witch means Don't-care value")
rlAAATestServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 4), RlAAAServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAATestServiceType.setDescription('the service type')
rlAAATestUserAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("needPassword", 1), ("needUsername", 2), ("success", 3), ("failure", 4), ("aborted", 5), ("deleted", 6), ("waiting", 7), ("usedNewMethod", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAATestUserAuthenticationStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserAuthenticationStatus.setDescription("Shows the ststus of the operation and what is expected from the 'user'.")
rlAAATestUserAuthenticationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("begin", 1), ("receivePassword", 2), ("receiveUsername", 3), ("abort", 4), ("delete", 5), ("continue", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestUserAuthenticationAction.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserAuthenticationAction.setDescription('By setting this field the process moves from one state to another. On creation the value must be begin. When the value of rlAAATestUserAuthenticationStatus is needPassword the value can be set to receivePassword or abort. When the value of rlAAATestUserAuthenticationStatus is needUsername the value can be set to receiveUsername or abort. When the value of rlAAATestUserAuthenticationStatus is success or failure the value can be set to delete or abort. When the value of rlAAATestUserAuthenticationStatus is aborted the value can be set to delete. When the value of rlAAATestUserAuthenticationStatus is deleted the value can not be set to any value. When the value of rlAAATestUserAuthenticationStatus is waiting the value can be set or abort.')
rlAAATestUserInput = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestUserInput.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserInput.setDescription('If the acion was set to receivePassword than this field should hold the value of the password. If the action was set to receiveUsername than this field should hold the value of the username. ')
rlAAATestUserStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 34, 2, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAATestUserStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAATestUserStatus.setDescription('Entry status. The entry can not be deleted. It will be deleted if unchanged more than 2 minutes.')
rlRadiusMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlRadiusMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlRadiusMibVersion.setDescription("MIB's version, the current version is 2. 1 - original version. 2 - field rlRadiusServerUsage was added to rlRadiusServerEntry")
rlRadiusGlobalDefaultTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusGlobalDefaultTimeout.setStatus('current')
if mibBuilder.loadTexts: rlRadiusGlobalDefaultTimeout.setDescription('The maximum time (in seconds) to wait for this RADIUS server to reply. This MIB is used if the value of the field rlRadiusServerUseGlobalDefaultTimeout is false.')
rlRadiusGlobalDefaultRetries = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusGlobalDefaultRetries.setStatus('current')
if mibBuilder.loadTexts: rlRadiusGlobalDefaultRetries.setDescription('The number of times to try contacting this RADIUS server. This MIB is used if the value of the field rlRadiusServerUseGlobalDefaultRetries is false.')
rlRadiusGlobalDefaultDeadtime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusGlobalDefaultDeadtime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusGlobalDefaultDeadtime.setDescription('Number of minutes that any RADIUS server is ignored after it has failed. This MIB is used if the value of the field rlRadiusServerUseGlobalDefaultDeadtime is false.')
rlRadiusGlobalDefaultKey = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusGlobalDefaultKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusGlobalDefaultKey.setDescription('Secret key to be shared with this RADIUS server. This MIB is used if the value of the field rlRadiusServerUseGlobalDefaultKey is false.')
rlRadiusGlobalDefaultSource = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusGlobalDefaultSource.setStatus('current')
if mibBuilder.loadTexts: rlRadiusGlobalDefaultSource.setDescription('IPv4 address of the interface to use with this server. A value of 0.0.0.0 for this object disables source address specification. This MIB is used if the value of the field rlRadiusServerUseGlobalDefaultSource is false.')
rlRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7), )
if mibBuilder.loadTexts: rlRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerTable.setDescription('The (conceptual) table listing the RADIUS servers with which the cliient shares a secret.')
rlRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlRadiusServerAddress"), (0, "DLINK-3100-AAA", "rlRadiusServerAuthPortNumber"), (0, "DLINK-3100-AAA", "rlRadiusServerAcctPortNumber"))
if mibBuilder.loadTexts: rlRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerEntry.setDescription('An entry (conceptual row) representing a RADIUS server with which the client shares a secret.')
rlRadiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerAddress.setDescription('The IP address of the RADIUS server referred to in this table entry.')
rlRadiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerAuthPortNumber.setDescription('The UDP port the client is using to send authentication requests to this server.')
rlRadiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerAcctPortNumber.setDescription('The UDP port the client is using to send accounting requests to this server.')
rlRadiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerTimeout.setDescription('The maximum time (in seconds) to wait for this RADIUS server to reply. Value of 0 means that rlRadiusGlobalDefaultTimeout.')
rlRadiusServerRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerRetries.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerRetries.setDescription('The number of times to try contacting this RADIUS server. Value of 0 means that rlRadiusGlobalDefaultRetries.')
rlRadiusServerDeadtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2001))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerDeadtime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerDeadtime.setDescription('Number of minutes that any RADIUS server is ignored after it has failed. Value of 2001 means that rlRadiusGlobalDefaultDeadtime will be used.')
rlRadiusServerUseGlobalDefaultKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerUseGlobalDefaultKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerUseGlobalDefaultKey.setDescription('If this field is set to true the value in field rlRadiusServerKey is ignored and instead the value in the MIB rlRadiusGlobalDefaultKey is used. Otherwise the value in rlRadiusServerKey is used.')
rlRadiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerKey.setDescription('Secret key to be shared with this RADIUS server.')
rlRadiusServerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerSource.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerSource.setDescription('IP address of the interface to use with this server. A value of 0.0.0.0 for this object disables source address specification. Default value of 255.255.255.255 means that rlRadiusGlobalDefaultSource will be used.')
rlRadiusServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerPriority.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerPriority.setDescription('Determines the order in which the servers will be used, when 0 is the highest priority. If more than one server share the same priority - they will be used in lexicgoraphic order (the order of entries in this table).')
rlRadiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerStatus.setDescription('')
rlRadiusServerUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("userAuthentication", 1), ("portAuthentication", 2), ("all", 3), ("wirelessAuthentication", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerUsage.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerUsage.setDescription('Determines actions for which the radius server will be used.')
rlRadiusServerInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8), )
if mibBuilder.loadTexts: rlRadiusServerInetTable.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetTable.setDescription('The (conceptual) table listing the RADIUS servers with which the cliient shares a secret.')
rlRadiusServerInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlRadiusServerInetAddressType"), (0, "DLINK-3100-AAA", "rlRadiusServerInetAddress"), (0, "DLINK-3100-AAA", "rlRadiusServerInetAuthPortNumber"), (0, "DLINK-3100-AAA", "rlRadiusServerInetAcctPortNumber"))
if mibBuilder.loadTexts: rlRadiusServerInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetEntry.setDescription('An entry (conceptual row) representing a RADIUS server with which the client shares a secret.')
rlRadiusServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetAddressType.setDescription('The Inet address type of RADIUS server reffered to in this table entry .IPv6Z type is not supported.')
rlRadiusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetAddress.setDescription('The Inet address of the RADIUS server referred to in this table entry.Only one instance of specified address can be added at the same time.')
rlRadiusServerInetAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetAuthPortNumber.setDescription('The UDP port the client is using to send authentication requests to this server.The zero value can be used only if rlRadiusServerInetAcctPortNumber value is not zero.')
rlRadiusServerInetAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetAcctPortNumber.setDescription('The UDP port the client is using to send accounting requests to this server.The zero value can be used only if rlRadiusServerInetAuthPortNumber value is not zero.')
rlRadiusServerInetTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetTimeout.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetTimeout.setDescription('The maximum time (in seconds) to wait for this RADIUS server to reply. Value of 0 means that rlRadiusGlobalDefaultTimeout.')
rlRadiusServerInetRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetRetries.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetRetries.setDescription('The number of times to try contacting this RADIUS server. Value of 0 means that rlRadiusGlobalDefaultRetries.')
rlRadiusServerInetDeadtime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2001))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetDeadtime.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetDeadtime.setDescription('Number of minutes that any RADIUS server is ignored after it has failed. Value of 2001 means that rlRadiusGlobalDefaultDeadtime will be used.')
rlRadiusServerInetUseGlobalDefaultKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetUseGlobalDefaultKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetUseGlobalDefaultKey.setDescription('If this field is set to true the value in field rlRadiusServerKey is ignored and instead the value in the MIB rlRadiusGlobalDefaultKey is used. Otherwise the value in rlRadiusServerKey is used.')
rlRadiusServerInetKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetKey.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetKey.setDescription('Secret key to be shared with this RADIUS server.')
rlRadiusServerInetSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 10), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetSourceType.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetSourceType.setDescription('The rlRadiusServerInetSource address type. IPv6Z type not supported')
rlRadiusServerInetSource = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 11), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetSource.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetSource.setDescription('Inet address of the interface to use with this server. To provide backward compatibility the value of 0.0.0.0 for this object will be used to disables source address specification. Default value of 255.255.255.255 means that rlRadiusGlobalDefaultSource will be used for Ipv4 servers and rlRadiusIPv6GlobalDefaultSource will be used for Ipv6 servers.IPv6Z type not supported. Only valid IP address will be used. Application will set default value.')
rlRadiusServerInetPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetPriority.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetPriority.setDescription('Determines the order in which the servers will be used, when 0 is the highest priority. If more than one server share the same priority - they will be used in lexicgoraphic order (the order of entries in this table).')
rlRadiusServerInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 13), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetStatus.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetStatus.setDescription('')
rlRadiusServerInetUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 8, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("userAuthentication", 1), ("portAuthentication", 2), ("all", 3), ("wirelessAuthentication", 4))).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusServerInetUsage.setStatus('current')
if mibBuilder.loadTexts: rlRadiusServerInetUsage.setDescription('Determines actions for which the radius server will be used. WirelessAuthentication will be used if wireless is supported.')
rlRadiusGlobalIPv6DefaultSource = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 80, 9), InetAddressIPv6()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlRadiusGlobalIPv6DefaultSource.setStatus('current')
if mibBuilder.loadTexts: rlRadiusGlobalIPv6DefaultSource.setDescription('IPv6 address of the interface to use with this server. A NULL value for this object disables source address specification. ')
class RlAAAEapMethodtype(TextualConvention, Integer32):
    description = 'Method list type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("rlAAAEapMethodDeny", 0), ("rlAAAEapMethodRadius", 1), ("rlAAAEapMethodSucceed", 2))

rlAAAEapMethodListTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1), )
if mibBuilder.loadTexts: rlAAAEapMethodListTable.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodListTable.setDescription('The table specifies all methods list per method name.')
rlAAAEapMethodListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAAEapMethodListName"))
if mibBuilder.loadTexts: rlAAAEapMethodListEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodListEntry.setDescription('The row definition for this table.')
rlAAAEapMethodListName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodListName.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodListName.setDescription('Line Method List Name')
rlAAAEapMethodType1 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 2), RlAAAEapMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodType1.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodType1.setDescription(' first method type that will be used in the method linked list.')
rlAAAEapMethodType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 3), RlAAAEapMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodType2.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodType2.setDescription(' second method type that will be used in the method linked list.')
rlAAAEapMethodType3 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 4), RlAAAEapMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodType3.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodType3.setDescription('3th method type that will be used in the method linked list.')
rlAAAEapMethodType4 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 5), RlAAAEapMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodType4.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodType4.setDescription(' 4th method type that will be used in the method linked list.')
rlAAAEapMethodType5 = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 6), RlAAAEapMethodtype()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodType5.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodType5.setDescription('5th method type that will be used in the method linked list.')
rlAAAEapMethodListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 1, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapMethodListStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapMethodListStatus.setDescription('method list status can be destroy or createAndGo')
rlAAAEapCurrentMethodList = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 97, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAEapCurrentMethodList.setStatus('current')
if mibBuilder.loadTexts: rlAAAEapCurrentMethodList.setDescription('Specifies the method list that will be used for authentication.')
class RlTacacsConnectionType(TextualConvention, Integer32):
    description = 'Specifies TCP connection type between device and TACACS+ server'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rlTacacsSingleConnection", 0), ("rlTacacsPerSessionConnection", 1))

class RlTacacsConnectionStatus(TextualConvention, Integer32):
    description = 'Specifies the status of TCP connection between device and TACACS+ server.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("rlTacacsConnected", 0), ("rlTacacsNotConnected", 1))

rlTacacs = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40))
rlTacacsMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTacacsMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlTacacsMibVersion.setDescription("MIB's version, the current version is 1.")
rlTacacsGlobalDefaultTimeout = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsGlobalDefaultTimeout.setStatus('current')
if mibBuilder.loadTexts: rlTacacsGlobalDefaultTimeout.setDescription('The maximum time (in seconds) to wait for TACACS+ server to reply. This MIB is used if the value of the field rlTacacsServerTimeout is 0.')
rlTacacsGlobalDefaultKey = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsGlobalDefaultKey.setStatus('current')
if mibBuilder.loadTexts: rlTacacsGlobalDefaultKey.setDescription('Secret key to be shared with TACACS+ server. This MIB is used if the value of the field rlTacacsServerUseGlobalDefaultKey is false.')
rlTacacsGlobalDefaultSourceIpInterface = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsGlobalDefaultSourceIpInterface.setStatus('current')
if mibBuilder.loadTexts: rlTacacsGlobalDefaultSourceIpInterface.setDescription('IP address of the interface to use with TACACS+ server. A value of 0.0.0.0 for this object disables source address specification. This MIB is used if the value of the field rlTacacsServerSource is 255.255.255.255.')
rlTacacsServerTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7), )
if mibBuilder.loadTexts: rlTacacsServerTable.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerTable.setDescription('The (conceptual) table listing the TACACS+ servers with which the cliient shares a secret.')
rlTacacsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlTacacsServerAddress"))
if mibBuilder.loadTexts: rlTacacsServerEntry.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerEntry.setDescription('An entry (conceptual row) representing a TACACS+ server with which the client shares a secret.')
rlTacacsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerAddress.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerAddress.setDescription('The IP address of the TACACS+ server referred to in this table entry.')
rlTacacsServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(49)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerPortNumber.setDescription('The TCP port the client establishes connections with this server.')
rlTacacsServerConnectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 3), RlTacacsConnectionType().clone('rlTacacsPerSessionConnection')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerConnectionType.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerConnectionType.setDescription('Specifies TCP connection type between device and TACACS+ server. Either a single open connection between device and server (rlTacacsSingleConnection), or open/close connection per communication session (rlTacacsPerSessionConnection).')
rlTacacsServerConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 4), RlTacacsConnectionStatus().clone('rlTacacsConnected')).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlTacacsServerConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerConnectionStatus.setDescription('Specifies status TCP connection type between device and TACACS+ server.')
rlTacacsServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerTimeout.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerTimeout.setDescription('The maximum time (in seconds) to wait for this TACACS+ server to reply. Value of 0 means that rlTacacsGlobalDefaultTimeout value is used.')
rlTacacsServerUseGlobalDefaultKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 6), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerUseGlobalDefaultKey.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerUseGlobalDefaultKey.setDescription('If this field is set to true the value in field rlTacacsServerKey is ignored and instead the value in the MIB rlTacacsGlobalDefaultKey is used. Otherwise the value in rlTacacsServerKey is used.')
rlTacacsServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerKey.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerKey.setDescription('Secret key to be shared with this TACACS+ server.')
rlTacacsServerSourceIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerSourceIpInterface.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerSourceIpInterface.setDescription('IP address of the interface to use with this server. A value of 0.0.0.0 for this object disables source address specification. Value of 255.255.255.255 means that rlTacacsGlobalDefaultSource will be used.')
rlTacacsServerPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerPriority.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerPriority.setDescription('Determines the order in which the TACACS+ servers will be used, when 0 is the highest priority. If more than one server share the same priority - they will be used in lexicgoraphic order (the order of entries in this table).')
rlTacacsServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 40, 7, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlTacacsServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlTacacsServerRowStatus.setDescription('')
rlAAAAuditingEnable = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 41), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAAuditingEnable.setStatus('current')
if mibBuilder.loadTexts: rlAAAAuditingEnable.setDescription('Controls whether SysLog messages should be issued on login events')
rlAAAMinPasswordLength = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMinPasswordLength.setStatus('current')
if mibBuilder.loadTexts: rlAAAMinPasswordLength.setDescription('The minimum length of password for local user authentication defined in field rlAAALocalUserPassword in rlAAALocalUserTable. The value applies only to new or updated user passwords. In actual implementation the range may be reduced to (0 | N-64), where N is a platform dependent (for TIC compatibility N=8) ')
rlAAAPasswordHistSize = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAPasswordHistSize.setStatus('current')
if mibBuilder.loadTexts: rlAAAPasswordHistSize.setDescription('The number of most recent password, previously defined for Local User Table, Line Table, System Password Table for specific entity. This list used for password reusing prevention. Value of 0 means none. Changing the value does not cause the loss of history. History Max size is product specific.')
rlAAAPasswordHistHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 44), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAPasswordHistHoldTime.setStatus('current')
if mibBuilder.loadTexts: rlAAAPasswordHistHoldTime.setDescription('The time in day, which an old password may be used in password history check. Changing the value does not cause the loss of history.')
rlAAASuccLoginWriteToFile = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 45), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASuccLoginWriteToFile.setStatus('current')
if mibBuilder.loadTexts: rlAAASuccLoginWriteToFile.setDescription('Controls whether successful logins are written to login file')
rlAAALocalLoginHistTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46), )
if mibBuilder.loadTexts: rlAAALocalLoginHistTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistTable.setDescription('The table holds successful login history for all users. This table is read-only.')
rlAAALocalLoginHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALocalLoginHistName"), (0, "DLINK-3100-AAA", "rlAAALocalLoginHistIndex"))
if mibBuilder.loadTexts: rlAAALocalLoginHistEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistEntry.setDescription('The row definition for this table.')
rlAAALocalLoginHistName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistName.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistName.setDescription('User Name')
rlAAALocalLoginHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlAAALocalLoginHistIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistIndex.setDescription('Index in History for specific user. Lower number means more recent login.')
rlAAALocalLoginHistServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 3), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistServiceType.setDescription("The service that the user uses. Service don't care is console terminal.")
rlAAALocalLoginHistRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistRemoteIpAddress.setDescription('User remote IP address.')
rlAAALocalLoginHistLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistLocalIpAddress.setDescription('local Ip Address on login.')
rlAAALocalLoginDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginDateTime.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginDateTime.setDescription('Date and time in the SysLog Format: DD-MMM-YYYY HH:MM:SS')
rlAAALocalLoginMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 46, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginMrid.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginMrid.setDescription('Mrid - indicates to which instance the connection was established ')
rlAAALinePassLoginHistTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47), )
if mibBuilder.loadTexts: rlAAALinePassLoginHistTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistTable.setDescription('The table holds successful login history for Line passwords. This table is read-only.')
rlAAALinePassLoginHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALinePassLoginHistPortType"), (0, "DLINK-3100-AAA", "rlAAALinePassLoginHistIfIndex"), (0, "DLINK-3100-AAA", "rlAAALinePassLoginHistServiceType"), (0, "DLINK-3100-AAA", "rlAAALinePassLoginHistIndex"))
if mibBuilder.loadTexts: rlAAALinePassLoginHistEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistEntry.setDescription('The row definition for this table.')
rlAAALinePassLoginHistPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 1), RlAAALinePortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassLoginHistPortType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistPortType.setDescription(' the physical port type.')
rlAAALinePassLoginHistIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassLoginHistIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistIfIndex.setDescription("Identifies the ifindex for which this entry can be used. If index 0 means don't care (can be used for all if indices). For port type console the value could be only 0.")
rlAAALinePassLoginHistServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 3), RlAAAServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassLoginHistServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistServiceType.setDescription('the service type')
rlAAALinePassLoginHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlAAALinePassLoginHistIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistIndex.setDescription('Index in History for specific user. Lower number means more recent login.')
rlAAALinePassLoginHistActServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 5), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistActServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistActServiceType.setDescription("The service that the user uses. Service don't care is console terminal.")
rlAAALinePassLoginHistRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistRemoteIpAddress.setDescription('User remote IP address.')
rlAAALinePassLoginHistLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistLocalIpAddress.setDescription('local Ip Address on login.')
rlAAALinePassLoginDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginDateTime.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginDateTime.setDescription('Date and time in the SysLog Format: DD-MMM-YYYY HH:MM:SS')
rlAAALinePassLoginMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 47, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginMrid.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginMrid.setDescription('Mrid - indicates to which instance the connection was established ')
rlAAASystemLoginHistTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48), )
if mibBuilder.loadTexts: rlAAASystemLoginHistTable.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistTable.setDescription('The table holds successful login history for system passwords. This table is read-only.')
rlAAASystemLoginHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAASystemLoginHistLevel"), (0, "DLINK-3100-AAA", "rlAAASystemLoginHistIndex"))
if mibBuilder.loadTexts: rlAAASystemLoginHistEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistEntry.setDescription('The row definition for this table.')
rlAAASystemLoginHistLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistLevel.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistLevel.setDescription('User Name')
rlAAASystemLoginHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlAAASystemLoginHistIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistIndex.setDescription('Index in History for specific user. Lower number means more recent login.')
rlAAASystemLoginHistServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 3), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistServiceType.setDescription("The service that the user uses. Service don't care is console terminal.")
rlAAASystemLoginHistRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistRemoteIpAddress.setDescription('User remote IP address.')
rlAAASystemLoginHistLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistLocalIpAddress.setDescription('local Ip Address on login.')
rlAAASystemLoginDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginDateTime.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginDateTime.setDescription('Date and time in the SysLog Format: DD-MMM-YYYY HH:MM:SS')
rlAAASystemLoginMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 48, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginMrid.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginMrid.setDescription('Mrid - indicates to which instance the connection was established ')
rlAAASysPassStatTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49), )
if mibBuilder.loadTexts: rlAAASysPassStatTable.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatTable.setDescription('The table specifies all system password and their security properties: is password locked due to wrong password, when and how it was locked or last unsuccessful login information, expiry date of the password.')
rlAAASysPassStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAASysPassStatLevel"))
if mibBuilder.loadTexts: rlAAASysPassStatEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatEntry.setDescription('The row definition for this table.')
rlAAASysPassStatLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASysPassStatLevel.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatLevel.setDescription('System password level')
rlAAASysPassStatLockedState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("usable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASysPassStatLockedState.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatLockedState.setDescription('System password locked status')
rlAAASysPassStatConsFailedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASysPassStatConsFailedLogins.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatConsFailedLogins.setDescription('Number of last consecutive failed logins')
rlAAASysPassStatPasswordValidTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASysPassStatPasswordValidTime.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatPasswordValidTime.setDescription('The period of time in days, during which the password, is considered valid for login. Value of 0 means never expired. The actual range is product specific. After this time the system may allow limited number of logins to change the password. ')
rlAAASysPassStatPasswordExpieryDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 49, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASysPassStatPasswordExpieryDate.setStatus('current')
if mibBuilder.loadTexts: rlAAASysPassStatPasswordExpieryDate.setDescription('If System password aging is active, the date, on which the current password will expire. Otherwise zero size string')
rlAAAMaxNumLogAttmpts = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAMaxNumLogAttmpts.setStatus('current')
if mibBuilder.loadTexts: rlAAAMaxNumLogAttmpts.setDescription('The number of consecutive unsuccessful login attempts before user is locked. Value of 0 means no limit. The actual range is product specific. TIC requirement is 3.')
rlAAAUnlockUserName = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAUnlockUserName.setStatus('current')
if mibBuilder.loadTexts: rlAAAUnlockUserName.setDescription('An action MIB variable setting with value of Local User Name will unlock this user. The value of this variable is not saved to non volatile storage. Read of this variable always returns zero length display string.')
rlAAAUnlockSystemPassword = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAUnlockSystemPassword.setStatus('current')
if mibBuilder.loadTexts: rlAAAUnlockSystemPassword.setDescription('An action MIB variable setting with value of Level will unlock the system password for this level. The value of this variable is not saved to non volatile storage. Read of this variable always returns zero. Zero (0) does no action.')
rlAAALockedLineTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 53), )
if mibBuilder.loadTexts: rlAAALockedLineTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALockedLineTable.setDescription('The table specifies lines statuses. Users cannot access the product from remote based on a password of the locked line. This table enables to unlock lines.')
rlAAALockedLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 53, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALockedLinePortType"), (0, "DLINK-3100-AAA", "rlAAALockedLineIfIndex"), (0, "DLINK-3100-AAA", "rlAAALockedLineServiceType"))
if mibBuilder.loadTexts: rlAAALockedLineEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALockedLineEntry.setDescription('The row definition for this table.')
rlAAALockedLinePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 53, 1, 1), RlAAALinePortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALockedLinePortType.setStatus('current')
if mibBuilder.loadTexts: rlAAALockedLinePortType.setDescription(' the physical port type .')
rlAAALockedLineIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 53, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALockedLineIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALockedLineIfIndex.setDescription("Identifies the ifindex for which this entry can be used. If index 0 means don't care (can be used for all if indices). For port type console the value could be only 0.")
rlAAALockedLineServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 53, 1, 3), RlAAAServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALockedLineServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALockedLineServiceType.setDescription('the service type')
rlAAALockedLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 53, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("usable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALockedLineStatus.setStatus('current')
if mibBuilder.loadTexts: rlAAALockedLineStatus.setDescription('The entry exists only if a line exist. Setting this field to value usable results in resetting the password failure counter, and unlock a locked user.')
rlAAASystemPasswordVerificationAndSettingTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 54), )
if mibBuilder.loadTexts: rlAAASystemPasswordVerificationAndSettingTable.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordVerificationAndSettingTable.setDescription('The table specifies per every system level, old and new passwords. Serves for verification the old password and setting a new password.')
rlAAASystemPasswordVerificationAndSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 54, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAASystemPasswordSettingPrivilegeLevel"))
if mibBuilder.loadTexts: rlAAASystemPasswordVerificationAndSettingEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordVerificationAndSettingEntry.setDescription('The row of system password verification and setting table.')
rlAAASystemPasswordSettingPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 54, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: rlAAASystemPasswordSettingPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordSettingPrivilegeLevel.setDescription('System password Privelege Level to be set.')
rlAAASystemPasswordVerificationOldPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 54, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordVerificationOldPassword.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordVerificationOldPassword.setDescription('Old system password to be verified.')
rlAAASystemPasswordSettingNewPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 54, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordSettingNewPassword.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordSettingNewPassword.setDescription('New system password to be set.')
rlAAASystemPasswordConfirmNewPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 54, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAASystemPasswordConfirmNewPassword.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemPasswordConfirmNewPassword.setDescription('New system password to be confirmed.')
class RlAAAAccountingMethod(TextualConvention, Integer32):
    description = 'Protocols, used for accounting.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("radius", 2))

rlAAAAccountingMngMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 55), RlAAAAccountingMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAAccountingMngMethod.setStatus('current')
if mibBuilder.loadTexts: rlAAAAccountingMngMethod.setDescription('Method, used for accounting of management sessions, none denotes Accounting is disabled.')
rlAAAAccountingDot1xMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 56), RlAAAAccountingMethod()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAAAccountingDot1xMethod.setStatus('current')
if mibBuilder.loadTexts: rlAAAAccountingDot1xMethod.setDescription('Method, used for accounting of 802.1x sessions, none denotes Accounting is disabled.')
rlAAAUserInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57), )
if mibBuilder.loadTexts: rlAAAUserInetTable.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetTable.setDescription('The table holds all current users that have been authenticated. it coexist with rlAAAUserTable to support IPv4 and IPv6')
rlAAAUserInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAAUserInetIndex"))
if mibBuilder.loadTexts: rlAAAUserInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetEntry.setDescription('The row definition for this table.')
rlAAAUserInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 1), Unsigned32())
if mibBuilder.loadTexts: rlAAAUserInetIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetIndex.setDescription('User Index')
rlAAAUserInetServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 2), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetServiceType.setDescription('The service that the user uses. Service dont care is console terminal.')
rlAAAUserInetRemoteIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetRemoteIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetRemoteIpAddressType.setDescription('User remote INET address Type.')
rlAAAUserInetRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetRemoteIpAddress.setDescription('User remote INET address.')
rlAAAUserInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetName.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetName.setDescription('User Name')
rlAAAUserInetLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetLevel.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetLevel.setDescription('User level')
rlAAAUserInetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetIfIndex.setDescription('User if index.')
rlAAAUserInetLoginDate = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetLoginDate.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetLoginDate.setDescription('Date of use creation.')
rlAAAUserInetLoginDurationMS = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 57, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAAUserInetLoginDurationMS.setStatus('current')
if mibBuilder.loadTexts: rlAAAUserInetLoginDurationMS.setDescription('Time in MS since user login.')
rlAAALocalLoginHistInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58), )
if mibBuilder.loadTexts: rlAAALocalLoginHistInetTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetTable.setDescription('The table holds successful login history for all users. This table is read-only. it coexist with rlAAALocalLoginHistTable to support IPv4 and IPv6')
rlAAALocalLoginHistInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALocalLoginHistInetName"), (0, "DLINK-3100-AAA", "rlAAALocalLoginHistInetIndex"))
if mibBuilder.loadTexts: rlAAALocalLoginHistInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetEntry.setDescription('The row definition for this table.')
rlAAALocalLoginHistInetName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetName.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetName.setDescription('User Name')
rlAAALocalLoginHistInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlAAALocalLoginHistInetIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetIndex.setDescription('Index in History for specific user. Lower number means more recent login.')
rlAAALocalLoginHistInetServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 3), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetServiceType.setDescription("The service that the user uses. Service don't care is console terminal.")
rlAAALocalLoginHistInetRemoteIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetRemoteIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetRemoteIpAddressType.setDescription('User remote IP address Type.')
rlAAALocalLoginHistInetRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetRemoteIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetRemoteIpAddress.setDescription('User remote IP address.')
rlAAALocalLoginHistInetLocalIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetLocalIpAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetLocalIpAddressType.setDescription('local Ip Address Type on login.')
rlAAALocalLoginHistInetLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetLocalIpAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetLocalIpAddress.setDescription('local Ip Address on login.')
rlAAALocalLoginHistInetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetDateTime.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetDateTime.setDescription('Date and time in the SysLog Format: DD-MMM-YYYY HH:MM:SS')
rlAAALocalLoginHistInetMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 58, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALocalLoginHistInetMrid.setStatus('current')
if mibBuilder.loadTexts: rlAAALocalLoginHistInetMrid.setDescription('Mrid - indicates to which instance the connection was established ')
rlAAALinePassLoginHistInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59), )
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetTable.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetTable.setDescription('The table holds successful login history for Line passwords. This table is read-only. it coexist with rlAAALinePassLoginHistTable to support IPv4 and IPv6')
rlAAALinePassLoginHistInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAALinePassLoginHistInetPortType"), (0, "DLINK-3100-AAA", "rlAAALinePassLoginHistInetIfIndex"), (0, "DLINK-3100-AAA", "rlAAALinePassLoginHistInetServiceType"), (0, "DLINK-3100-AAA", "rlAAALinePassLoginHistInetIndex"))
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetEntry.setDescription('The row definition for this table.')
rlAAALinePassLoginHistInetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 1), RlAAALinePortType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetPortType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetPortType.setDescription(' the physical port type.')
rlAAALinePassLoginHistInetIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetIfIndex.setDescription("Identifies the ifindex for which this entry can be used. If index 0 means don't care (can be used for all if indices). For port type console the value could be only 0.")
rlAAALinePassLoginHistInetServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 3), RlAAAServiceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetServiceType.setDescription('the service type')
rlAAALinePassLoginHistInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetIndex.setDescription('Index in HistInetory for specific user. Lower number means more recent login.')
rlAAALinePassLoginHistInetActServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 5), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetActServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetActServiceType.setDescription("The service that the user uses. Service don't care is console terminal.")
rlAAALinePassLoginHistInetRemoteInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetRemoteInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetRemoteInetAddressType.setDescription('User remote IP address Type.')
rlAAALinePassLoginHistInetRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetRemoteInetAddress.setDescription('User remote IP address.')
rlAAALinePassLoginHistInetLocalInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetLocalInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetLocalInetAddressType.setDescription('local Ip Address Type on login.')
rlAAALinePassLoginHistInetLocalInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetLocalInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetLocalInetAddress.setDescription('local Ip Address on login.')
rlAAALinePassLoginHistInetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetDateTime.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetDateTime.setDescription('Date and time in the SysLog Format: DD-MMM-YYYY HH:MM:SS')
rlAAALinePassLoginHistInetMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 59, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetMrid.setStatus('current')
if mibBuilder.loadTexts: rlAAALinePassLoginHistInetMrid.setDescription('Mrid - indicates to which instance the connection was established ')
rlAAASystemLoginHistInetTable = MibTable((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60), )
if mibBuilder.loadTexts: rlAAASystemLoginHistInetTable.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetTable.setDescription('The table holds successful login history for system passwords. This table is read-only. it coexist with rlAAASystemLoginHistTable to support IPv4 and IPv6')
rlAAASystemLoginHistInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1), ).setIndexNames((0, "DLINK-3100-AAA", "rlAAASystemLoginHistInetLevel"), (0, "DLINK-3100-AAA", "rlAAASystemLoginHistInetIndex"))
if mibBuilder.loadTexts: rlAAASystemLoginHistInetEntry.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetEntry.setDescription('The row definition for this table.')
rlAAASystemLoginHistInetLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetLevel.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetLevel.setDescription('User Name')
rlAAASystemLoginHistInetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rlAAASystemLoginHistInetIndex.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetIndex.setDescription('Index in History for specific user. Lower number means more recent login.')
rlAAASystemLoginHistInetServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 3), RlAAAServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetServiceType.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetServiceType.setDescription("The service that the user uses. Service don't care is console terminal.")
rlAAASystemLoginHistInetRemoteInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetRemoteInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetRemoteInetAddressType.setDescription('User remote IP address Type.')
rlAAASystemLoginHistInetRemoteInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetRemoteInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetRemoteInetAddress.setDescription('User remote IP address.')
rlAAASystemLoginHistInetLocalInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetLocalInetAddressType.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetLocalInetAddressType.setDescription('local Ip Address Type on login.')
rlAAASystemLoginHistInetLocalInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetLocalInetAddress.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetLocalInetAddress.setDescription('local Ip Address on login.')
rlAAASystemLoginHistInetDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetDateTime.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetDateTime.setDescription('Date and time in the SysLog Format: DD-MMM-YYYY HH:MM:SS')
rlAAASystemLoginHistInetMrid = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 10, 94, 89, 89, 79, 60, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlAAASystemLoginHistInetMrid.setStatus('current')
if mibBuilder.loadTexts: rlAAASystemLoginHistInetMrid.setDescription('Mrid - indicates to which instance the connection was established ')
mibBuilder.exportSymbols("DLINK-3100-AAA", rlRadiusMibVersion=rlRadiusMibVersion, rlAAALineConsFailedLogins=rlAAALineConsFailedLogins, rlAAALinePassLoginMrid=rlAAALinePassLoginMrid, rlAAASystemLoginHistInetEntry=rlAAASystemLoginHistInetEntry, rlAAAMethodType6=rlAAAMethodType6, rlAAASystemPasswordlevel8=rlAAASystemPasswordlevel8, rlAAALocalUserPrivilage=rlAAALocalUserPrivilage, rlAAAServiceType=rlAAAServiceType, rlAAALinePasswordSupported=rlAAALinePasswordSupported, rlRadiusServerInetAcctPortNumber=rlRadiusServerInetAcctPortNumber, rlAAALineAlwaysSuccessSupported=rlAAALineAlwaysSuccessSupported, rlAAALocalLoginHistInetDateTime=rlAAALocalLoginHistInetDateTime, rlAAAUserLevel=rlAAAUserLevel, rlAAAUserLoginDate=rlAAAUserLoginDate, rlAAALineMethodListNameLevel9=rlAAALineMethodListNameLevel9, rlAAALineTable=rlAAALineTable, rlAAAUserInetIfIndex=rlAAAUserInetIfIndex, rlRadiusServerInetUsage=rlRadiusServerInetUsage, rlAAALinePassLoginHistInetDateTime=rlAAALinePassLoginHistInetDateTime, rlAAASystemPasswordlevel6=rlAAASystemPasswordlevel6, rlAAALinePasswordValidTime=rlAAALinePasswordValidTime, RlTacacsConnectionStatus=RlTacacsConnectionStatus, rlAAAMinPasswordLength=rlAAAMinPasswordLength, rlRadiusGlobalDefaultRetries=rlRadiusGlobalDefaultRetries, rlRadiusServerInetPriority=rlRadiusServerInetPriority, rlAAAAuditingEnable=rlAAAAuditingEnable, rlAAAUserInetRemoteIpAddressType=rlAAAUserInetRemoteIpAddressType, rlAAASystemLoginHistInetLocalInetAddressType=rlAAASystemLoginHistInetLocalInetAddressType, rlTacacsServerKey=rlTacacsServerKey, RlAAAEapMethodtype=RlAAAEapMethodtype, rlAAAEapMethodType4=rlAAAEapMethodType4, rlAAALinePassLoginDateTime=rlAAALinePassLoginDateTime, rlTacacsServerTable=rlTacacsServerTable, rlAAALineLockedState=rlAAALineLockedState, rlAAALocalLoginHistInetRemoteIpAddressType=rlAAALocalLoginHistInetRemoteIpAddressType, rlAAALinePortType=rlAAALinePortType, rlAAASystemLoginHistLocalIpAddress=rlAAASystemLoginHistLocalIpAddress, rlTacacsServerRowStatus=rlTacacsServerRowStatus, rlAAALinePassLoginHistInetActServiceType=rlAAALinePassLoginHistInetActServiceType, rlRadiusServerSource=rlRadiusServerSource, rlAAAUserInetLoginDurationMS=rlAAAUserInetLoginDurationMS, rlAAASysPassStatTable=rlAAASysPassStatTable, rlAAALocalLoginHistTable=rlAAALocalLoginHistTable, rlAAARadiusEnabled=rlAAARadiusEnabled, rlAAAUserServiceType=rlAAAUserServiceType, rlAAASystemLoginHistIndex=rlAAASystemLoginHistIndex, rlAAASysPassStatPasswordExpieryDate=rlAAASysPassStatPasswordExpieryDate, rlAAALineMethodListNameLevel15=rlAAALineMethodListNameLevel15, rlRadiusServerTimeout=rlRadiusServerTimeout, rlRadiusServerRetries=rlRadiusServerRetries, rlAAAUserRemoteIpAddress=rlAAAUserRemoteIpAddress, rlAAASystemPasswordlevel10=rlAAASystemPasswordlevel10, rlAAATestUserIndex=rlAAATestUserIndex, rlAAATestServiceType=rlAAATestServiceType, rlAAAMethodListName=rlAAAMethodListName, rlRadiusServerPriority=rlRadiusServerPriority, rlAAALineMethodListNameLevel3=rlAAALineMethodListNameLevel3, rlTacacsServerConnectionStatus=rlTacacsServerConnectionStatus, rlAAASysPassStatPasswordValidTime=rlAAASysPassStatPasswordValidTime, rlAAALinePassLoginHistInetRemoteInetAddressType=rlAAALinePassLoginHistInetRemoteInetAddressType, rlAAASystemLoginHistInetIndex=rlAAASystemLoginHistInetIndex, rlAAALockedLineEntry=rlAAALockedLineEntry, rlAAATestUserEntry=rlAAATestUserEntry, rlAAALocalPasswordExpieryDate=rlAAALocalPasswordExpieryDate, rlAAASystemPasswordlevel2=rlAAASystemPasswordlevel2, rlAAALinePasswordExpieryDate=rlAAALinePasswordExpieryDate, rlAAALocalLoginHistName=rlAAALocalLoginHistName, rlAAALocalLoginHistInetLocalIpAddressType=rlAAALocalLoginHistInetLocalIpAddressType, rlAAALinePassLoginHistInetLocalInetAddress=rlAAALinePassLoginHistInetLocalInetAddress, rlAAALinePassLoginHistInetIndex=rlAAALinePassLoginHistInetIndex, rlTacacsGlobalDefaultTimeout=rlTacacsGlobalDefaultTimeout, rlAAASystemPasswordlevel9=rlAAASystemPasswordlevel9, rlAAALineEntry=rlAAALineEntry, rlRadiusServerInetUseGlobalDefaultKey=rlRadiusServerInetUseGlobalDefaultKey, rlTacacsServerConnectionType=rlTacacsServerConnectionType, rlAAALockedLineStatus=rlAAALockedLineStatus, rlTacacsServerEntry=rlTacacsServerEntry, rlAAASystemLoginHistInetTable=rlAAASystemLoginHistInetTable, rlAAAUnlockUserName=rlAAAUnlockUserName, rlAAALinePassLoginHistTable=rlAAALinePassLoginHistTable, rlAAATacacsSupported=rlAAATacacsSupported, rlAAALineMethodListNameLevel12=rlAAALineMethodListNameLevel12, rlAAALockedLineTable=rlAAALockedLineTable, rlAAASystemPasswordVerificationAndSettingEntry=rlAAASystemPasswordVerificationAndSettingEntry, rlRadiusServerTable=rlRadiusServerTable, rlAAASystemLoginHistInetRemoteInetAddress=rlAAASystemLoginHistInetRemoteInetAddress, rlAAALineMethodListNameLevel14=rlAAALineMethodListNameLevel14, rlAAAEapMethodListTable=rlAAAEapMethodListTable, rlAAAMethodListEntry=rlAAAMethodListEntry, rlAAASuccLoginWriteToFile=rlAAASuccLoginWriteToFile, rlAAALocalLoginHistInetTable=rlAAALocalLoginHistInetTable, rlRadiusServerInetKey=rlRadiusServerInetKey, rlRadiusServerInetDeadtime=rlRadiusServerInetDeadtime, rlAAALineMethodListNameLevel7=rlAAALineMethodListNameLevel7, rlAAASystemPasswordlevel7=rlAAASystemPasswordlevel7, rlAAALineMethodListNameLevel11=rlAAALineMethodListNameLevel11, rlRadiusServerAddress=rlRadiusServerAddress, rlAAAMethodType4=rlAAAMethodType4, rlAAAUserTable=rlAAAUserTable, rlAAALineMethodListNameLevel6=rlAAALineMethodListNameLevel6, rlAAASystemLoginHistRemoteIpAddress=rlAAASystemLoginHistRemoteIpAddress, rlAAASystemPasswordVerificationAndSettingTable=rlAAASystemPasswordVerificationAndSettingTable, rlAAALinePassword=rlAAALinePassword, rlAAALocalConsFailedLogins=rlAAALocalConsFailedLogins, rlTacacsServerTimeout=rlTacacsServerTimeout, rlAAAAccountingDot1xMethod=rlAAAAccountingDot1xMethod, rlAAAUserLoginDurationMS=rlAAAUserLoginDurationMS, rlAAASystemPasswordlevel12=rlAAASystemPasswordlevel12, rlTacacsServerPortNumber=rlTacacsServerPortNumber, rlAAAMaxNumLogAttmpts=rlAAAMaxNumLogAttmpts, rlAAALinePassLoginHistInetIfIndex=rlAAALinePassLoginHistInetIfIndex, rlTacacsGlobalDefaultSourceIpInterface=rlTacacsGlobalDefaultSourceIpInterface, rlAAAUserEntry=rlAAAUserEntry, rlRadiusServerStatus=rlRadiusServerStatus, rlAAATestUserTable=rlAAATestUserTable, rlAAAEapCurrentMethodList=rlAAAEapCurrentMethodList, rlAAAMethodType1=rlAAAMethodType1, rlAAAUserInetTable=rlAAAUserInetTable, rlAAALockedLineIfIndex=rlAAALockedLineIfIndex, rlAAASystemLoginHistInetRemoteInetAddressType=rlAAASystemLoginHistInetRemoteInetAddressType, rlAAALineMethodListNameLevel8=rlAAALineMethodListNameLevel8, rlAAALockedLineServiceType=rlAAALockedLineServiceType, rlAAATestUserStatus=rlAAATestUserStatus, rlAAALocalUserTable=rlAAALocalUserTable, rlAAAEapMethodType5=rlAAAEapMethodType5, rlRadiusServerInetSource=rlRadiusServerInetSource, rlAAATestIfIndex=rlAAATestIfIndex, rlRadiusServerAuthPortNumber=rlRadiusServerAuthPortNumber, rlAAALinePassLoginHistEntry=rlAAALinePassLoginHistEntry, rlAAAUserInetName=rlAAAUserInetName, rlAAASystemPasswordSettingPrivilegeLevel=rlAAASystemPasswordSettingPrivilegeLevel, rlAAALinePassLoginHistPortType=rlAAALinePassLoginHistPortType, rlAAAUserInetIndex=rlAAAUserInetIndex, rlAAALocalLockedState=rlAAALocalLockedState, rlAAAUserName=rlAAAUserName, rlAAALineStatus=rlAAALineStatus, rlAAALocalLoginHistServiceType=rlAAALocalLoginHistServiceType, rlAAAUserIndex=rlAAAUserIndex, rlRadiusServerUsage=rlRadiusServerUsage, rlAAATestUserAuthenticationStatus=rlAAATestUserAuthenticationStatus, rlAAASystemLoginHistEntry=rlAAASystemLoginHistEntry, rlAAASysPassStatLevel=rlAAASysPassStatLevel, rlRadiusServerInetAddressType=rlRadiusServerInetAddressType, rlAAALineMethodListNameLevel1=rlAAALineMethodListNameLevel1, rlAAALinePassLoginHistIndex=rlAAALinePassLoginHistIndex, rlRadiusServerInetEntry=rlRadiusServerInetEntry, rlAAASystemLoginMrid=rlAAASystemLoginMrid, rlRadiusServerInetTable=rlRadiusServerInetTable, rlAAAMethodType7=rlAAAMethodType7, rlAAALockedLinePortType=rlAAALockedLinePortType, rlAAATestPortType=rlAAATestPortType, rlAAALinePassLoginHistRemoteIpAddress=rlAAALinePassLoginHistRemoteIpAddress, RlAAALinePortType=RlAAALinePortType, rlAAALocalLoginHistEntry=rlAAALocalLoginHistEntry, rlAAASystemPasswordEnabled=rlAAASystemPasswordEnabled, rlAAASystemPasswordlevel15=rlAAASystemPasswordlevel15, rlRadiusServerInetAddress=rlRadiusServerInetAddress, rlRadiusGlobalDefaultSource=rlRadiusGlobalDefaultSource, rlAAASystemLoginHistServiceType=rlAAASystemLoginHistServiceType, rlAAASysPassStatLockedState=rlAAASysPassStatLockedState, RlAAAAccountingMethod=RlAAAAccountingMethod, rlAAALocalUserEnabled=rlAAALocalUserEnabled, rlAAALocalUserSupported=rlAAALocalUserSupported, rlAAALinePassLoginHistInetTable=rlAAALinePassLoginHistInetTable, rlAAAMethodType2=rlAAAMethodType2, rlAAAUserInetLevel=rlAAAUserInetLevel, rlAAALinePassLoginHistInetMrid=rlAAALinePassLoginHistInetMrid, rlAAAUserInetServiceType=rlAAAUserInetServiceType, rlAAALocalLoginHistLocalIpAddress=rlAAALocalLoginHistLocalIpAddress, rlAAAAlwaysSuccessEnabled=rlAAAAlwaysSuccessEnabled, rlAAALineMethodListNameLevel5=rlAAALineMethodListNameLevel5, rlAAAEapMethodType1=rlAAAEapMethodType1, rlAAASysPassStatEntry=rlAAASysPassStatEntry, rlAAAMibVersion=rlAAAMibVersion, rlAAALocalLoginHistIndex=rlAAALocalLoginHistIndex, rlAAASystemLoginHistInetServiceType=rlAAASystemLoginHistInetServiceType, rlAAALinePassLoginHistActServiceType=rlAAALinePassLoginHistActServiceType, rlAAALocalPasswordValidTime=rlAAALocalPasswordValidTime, rlRadiusServerInetAuthPortNumber=rlRadiusServerInetAuthPortNumber, rlAAATest=rlAAATest, rlAAALinePassLoginHistIfIndex=rlAAALinePassLoginHistIfIndex, rlAAASystemPasswordlevel14=rlAAASystemPasswordlevel14, rlAAALocalLoginHistInetRemoteIpAddress=rlAAALocalLoginHistInetRemoteIpAddress, rlAAALineMethodListNameLevel10=rlAAALineMethodListNameLevel10, rlAAALocalUserPassword=rlAAALocalUserPassword, rlAAASystemLoginDateTime=rlAAASystemLoginDateTime, rlTacacsServerUseGlobalDefaultKey=rlTacacsServerUseGlobalDefaultKey, RlAAAMethodtype=RlAAAMethodtype, rlAAAPasswordHistHoldTime=rlAAAPasswordHistHoldTime, rlAAALinePassLoginHistInetEntry=rlAAALinePassLoginHistInetEntry, rlAAALocalLoginHistInetMrid=rlAAALocalLoginHistInetMrid, rlAAALinePassLoginHistLocalIpAddress=rlAAALinePassLoginHistLocalIpAddress, rlAAASystemLoginHistInetDateTime=rlAAASystemLoginHistInetDateTime, rlAAASystemPasswordlevel4=rlAAASystemPasswordlevel4, rlAAATestPassword=rlAAATestPassword, rlAAAEapMethodType2=rlAAAEapMethodType2, rlAAAMethodType5=rlAAAMethodType5, rlAAAIfIndex=rlAAAIfIndex, PYSNMP_MODULE_ID=rlAAA, rlAAA=rlAAA, rlTacacs=rlTacacs, rlAAATacacsEnabled=rlAAATacacsEnabled, rlAAAEapMethodType3=rlAAAEapMethodType3, rlAAAUserInetRemoteIpAddress=rlAAAUserInetRemoteIpAddress, rlAAALinePassLoginHistInetServiceType=rlAAALinePassLoginHistInetServiceType, rlAAALocalLoginHistInetLocalIpAddress=rlAAALocalLoginHistInetLocalIpAddress, rlTacacsServerSourceIpInterface=rlTacacsServerSourceIpInterface, rlAAALocalLoginDateTime=rlAAALocalLoginDateTime, rlRadiusGlobalIPv6DefaultSource=rlRadiusGlobalIPv6DefaultSource, rlAAASystemLoginHistTable=rlAAASystemLoginHistTable, rlRadiusServerEntry=rlRadiusServerEntry, rlAAASystemPasswordlevel5=rlAAASystemPasswordlevel5, rlAAAEapMethodListEntry=rlAAAEapMethodListEntry, rlAAAUserInetEntry=rlAAAUserInetEntry, rlAAAAccountingMngMethod=rlAAAAccountingMngMethod, rlAAAPasswordHistSize=rlAAAPasswordHistSize, rlAAAMethodListTable=rlAAAMethodListTable, rlAAALocalUserEntry=rlAAALocalUserEntry, rlAAASystemLoginHistInetLocalInetAddress=rlAAASystemLoginHistInetLocalInetAddress, rlAAAUserIfIndex=rlAAAUserIfIndex, rlAAALineMethodListNameLevel13=rlAAALineMethodListNameLevel13, rlAAALocalUserName=rlAAALocalUserName, rlAAAEapMethodListName=rlAAAEapMethodListName, rlAAASystemPasswordlevel3=rlAAASystemPasswordlevel3, rlAAATestUserAuthenticationAction=rlAAATestUserAuthenticationAction, rlRadiusServerInetSourceType=rlRadiusServerInetSourceType, rlAAALocalLoginHistInetIndex=rlAAALocalLoginHistInetIndex, RlTacacsConnectionType=RlTacacsConnectionType, rlAAALineMethodListNameLevel2=rlAAALineMethodListNameLevel2, rlAAASysPassStatConsFailedLogins=rlAAASysPassStatConsFailedLogins, rlAAAMethodType3=rlAAAMethodType3, rlAAATestUserInput=rlAAATestUserInput, rlAAALocalLoginHistRemoteIpAddress=rlAAALocalLoginHistRemoteIpAddress, rlAAALocalLoginHistInetName=rlAAALocalLoginHistInetName, rlAAASystemPasswordSettingNewPassword=rlAAASystemPasswordSettingNewPassword, rlAAALocalLoginHistInetEntry=rlAAALocalLoginHistInetEntry, rlAAALinePassLoginHistInetRemoteInetAddress=rlAAALinePassLoginHistInetRemoteInetAddress, rlAAASystemPasswordlevel1=rlAAASystemPasswordlevel1, rlRadiusServerInetTimeout=rlRadiusServerInetTimeout, rlAAAUserInetLoginDate=rlAAAUserInetLoginDate, rlAAAMethodListStatus=rlAAAMethodListStatus, rlAAALineMethodListNameLevel4=rlAAALineMethodListNameLevel4, rlRadiusServerInetStatus=rlRadiusServerInetStatus, rlAAASystemPasswordVerificationOldPassword=rlAAASystemPasswordVerificationOldPassword, rlAAARetries=rlAAARetries, rlRadiusServerDeadtime=rlRadiusServerDeadtime, rlRadiusServerKey=rlRadiusServerKey, rlAAASystemLoginHistInetMrid=rlAAASystemLoginHistInetMrid, rlAAALinePasswordEnabled=rlAAALinePasswordEnabled, RlAAAServiceType=RlAAAServiceType, rlRadiusGlobalDefaultKey=rlRadiusGlobalDefaultKey, rlAAALinePassLoginHistServiceType=rlAAALinePassLoginHistServiceType, rlAAALocalLoginHistInetServiceType=rlAAALocalLoginHistInetServiceType, rlAAASystemPasswordlevel13=rlAAASystemPasswordlevel13)
mibBuilder.exportSymbols("DLINK-3100-AAA", rlAAAEapMethodListStatus=rlAAAEapMethodListStatus, rlAAASystemPasswordConfirmNewPassword=rlAAASystemPasswordConfirmNewPassword, rlAAALinePassLoginHistInetPortType=rlAAALinePassLoginHistInetPortType, rlTacacsServerAddress=rlTacacsServerAddress, rlTacacsServerPriority=rlTacacsServerPriority, rlAAASystemLoginHistLevel=rlAAASystemLoginHistLevel, rlAAAUnlockSystemPassword=rlAAAUnlockSystemPassword, rlAAALocalHostStatus=rlAAALocalHostStatus, rlRadiusGlobalDefaultTimeout=rlRadiusGlobalDefaultTimeout, rlTacacsGlobalDefaultKey=rlTacacsGlobalDefaultKey, rlAAASystemLoginHistInetLevel=rlAAASystemLoginHistInetLevel, rlRadiusServerAcctPortNumber=rlRadiusServerAcctPortNumber, rlAAASystemPasswordSupported=rlAAASystemPasswordSupported, rlRadiusServerUseGlobalDefaultKey=rlRadiusServerUseGlobalDefaultKey, rlAAARadiusSupported=rlAAARadiusSupported, rlRadiusServerInetRetries=rlRadiusServerInetRetries, rlTacacsMibVersion=rlTacacsMibVersion, rlRadiusGlobalDefaultDeadtime=rlRadiusGlobalDefaultDeadtime, rlAAASystemPasswordlevel11=rlAAASystemPasswordlevel11, rlAAALocalLoginMrid=rlAAALocalLoginMrid, rlAAALinePassLoginHistInetLocalInetAddressType=rlAAALinePassLoginHistInetLocalInetAddressType)
