#
# PySNMP MIB module Wellfleet-PPP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-PPP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, iso, TimeTicks, Gauge32, Bits, IpAddress, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, MibIdentifier, Counter32, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "iso", "TimeTicks", "Gauge32", "Bits", "IpAddress", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "MibIdentifier", "Counter32", "NotificationType", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfPppGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfPppGroup")
wfPppLineTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1), )
if mibBuilder.loadTexts: wfPppLineTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineTable.setDescription('The Wellfleet PPP Line Configuration Table containing attributes dealing with the link layer and the Link Control Protocol (LCP)')
wfPppLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppLineLineNumber"), (0, "Wellfleet-PPP-MIB", "wfPppLineLLIndex"))
if mibBuilder.loadTexts: wfPppLineEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineEntry.setDescription('per Wellfleet PPP line configuration parameters and counters')
wfPppLineDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineDelete.setDescription('Create/Delete parameter')
wfPppLineDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineDisable.setDescription('Enable/Disable parameter -- Generates Open/Close events to the LCP FSM')
wfPppLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 20))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("loopedback", 4), ("notpresent", 20))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineState.setDescription('PPP state variable, Not Present, Init, Down, Up')
wfPppLineLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLineNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLineNumber.setDescription('Instance identifier. This is the line number assigned to the driver PPP is running on top of')
wfPppLineLLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLLIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLLIndex.setDescription('Instance identifier. This is the lower layer index presented to PPP by the layer immediately below it on the protocol stack. If the lower layer is a driver, the index will be 0.')
wfPppLineLcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLcpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLcpCurrentState.setDescription('the current state of the LCP Finite State Machine')
wfPppLineRestartTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRestartTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineRestartTimer.setDescription('value for Restart timer in seconds')
wfPppLineEchoRequestFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineEchoRequestFreq.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineEchoRequestFreq.setDescription('value for Echo-Request frequency - number of seconds between transmission of Echo-Request packets')
wfPppLineEchoReplyLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineEchoReplyLoss.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineEchoReplyLoss.setDescription('value for Echo-Reply acceptable loss - number of unacknowledged Echo-Reply packets counted before declaring the link down')
wfPppLineMaxConfReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMaxConfReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMaxConfReq.setDescription('value for maximum Configure-Requests - number of Configure-Request packets sent without receiving a valid Configure-Ack, Configure-Nak or Configure-Reject before assuming peer is unable to respond')
wfPppLineMaxTermReq = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMaxTermReq.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMaxTermReq.setDescription('value for maximum Terminate-Requests - number of Terminate-Request packets sent without receiving a Terminate-Ack before assuming peer is unable to respond')
wfPppLineMaxConfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMaxConfFail.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMaxConfFail.setDescription('value for maximum configuration failure count - number of Configure-Nak packets sent without sending a Configure-Ack before assuming configuration is unable to converge')
wfPppLineMagicNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineMagicNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMagicNumber.setDescription('the Magic Number being used on this line')
wfPppLineMru = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineMru.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMru.setDescription('this is the MRU being used on the line (in both directions)')
wfPppLineLocalAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49187, 49699, 1))).clone(namedValues=NamedValues(("passauth", 49187), ("chap", 49699), ("none", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLocalAuthProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLocalAuthProtocol.setDescription('this is the authorization protocol we require our peer to use on our side of the link')
wfPppLineRemoteAuthProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49187, 1))).clone(namedValues=NamedValues(("passauth", 49187), ("none", 1))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineRemoteAuthProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineRemoteAuthProtocol.setDescription('this is the authorization protocol our peer requires us to use on its side of the link')
wfPppLineLocalPapId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 17), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLocalPapId.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLocalPapId.setDescription('our PAP id - our peer sends this to us in an Authenticate-Request message')
wfPppLineLocalPapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLocalPapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLocalPapPassword.setDescription('our PAP password - our peer sends this to us in an Authenticate-Request message')
wfPppLineRemotePapId = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRemotePapId.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineRemotePapId.setDescription("our peer's PAP id - we send this to our peer in an Authenticate-Request message")
wfPppLineRemotePapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 20), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRemotePapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineRemotePapPassword.setDescription("our peer's PAP password - we send this to our peer in an Authenticate-Request message")
wfPppLineLQProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49189, 1))).clone(namedValues=NamedValues(("linkqr", 49189), ("none", 1))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineLQProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLQProtocol.setDescription('the Link Quality protocol we want to use')
wfPppLineDisableRemoteLQRTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineDisableRemoteLQRTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineDisableRemoteLQRTimer.setDescription("enable/disable our peer's LQR timer - this allows for one side to maintain the timer while the other just responds to LQR packets")
wfPppLineCfgLQRRptPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgLQRRptPrd.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineCfgLQRRptPrd.setDescription('this is the value in seconds between transmission of LQR packets (Reporting-Period) - it will be the same on both sides')
wfPppLineLQRRptPrd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLQRRptPrd.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLQRRptPrd.setDescription('this is the Reporting-Period, in seconds, agreed upon during negotiation - we allow the peer to negotiate down from our configured period, our maximum, but not below 1 second')
wfPppLineCfgInboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgInboundQuality.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineCfgInboundQuality.setDescription("the percentage of packets sent by our peer that we've successfully received (over the last 5 LQR Reporting-Periods) - 100 indicates we won't tolerate any loss")
wfPppLineInboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineInboundQuality.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineInboundQuality.setDescription('the current inbound quality')
wfPppLineCfgOutboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgOutboundQuality.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineCfgOutboundQuality.setDescription("the percentage of packets sent by us that our peer successfully received (over the last 5 LQR Reporting-Periods) - 100 indicates we won't tolerate any loss")
wfPppLineOutboundQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineOutboundQuality.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineOutboundQuality.setDescription('the current inbound quality')
wfPppLineOutLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineOutLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineOutLQRs.setDescription("the number of Link-Quality-Report packets we've transmitted")
wfPppLineInLQRs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineInLQRs.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineInLQRs.setDescription("the number of Link-Quality-Report packets we've received")
wfPppLineChapSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 31), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineChapSecret.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineChapSecret.setDescription('this CHAP secret MUST be the same on both sides of the link if CHAP is used as the Authentication protocol')
wfPppLinePapFallbackDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("disabled", 2), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLinePapFallbackDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLinePapFallbackDisable.setDescription('if an attempt to negotiate CHAP fails, enabling this allows a fallback to PAP')
wfPppLineChapLocalName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineChapLocalName.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineChapLocalName.setDescription('This attribute is used to assign a local CHAP Name which is used to inform our peer of our identity, during WHOAMI processing')
wfPppLineChapRemoteName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineChapRemoteName.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineChapRemoteName.setDescription("This attribute is used to store our peer's CHAP Name which is used to learn our peer's identity, during WHOAMI processing")
wfPppLineChapPeriodicTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineChapPeriodicTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineChapPeriodicTimer.setDescription('Timer for periodic CHAP in seconds. A time of 0 disables Periodic CHAP. This timer value should long enough to allow CHAP to complete one phase before entering another.')
wfPppLineBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineBadPackets.setDescription('These are packets not in correct PPP format')
wfPppLineLastBadPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLastBadPacket.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLastBadPacket.setDescription('This is the first 16 bytes of the last bad packet we received')
wfPppLineLevelPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLevelPktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLevelPktsIn.setDescription('This is the count of PPP link-level packets (such as Link Control Protocol or Compression Control Protocl) which have been received.')
wfPppLineAllowPapReject = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineAllowPapReject.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineAllowPapReject.setDescription("There are some peers that don't want us asking to be a PAP authenticator, so accept the Reject and remove PAP from the LCP Configure-Request if this is enabled.")
wfPppLineActiveCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 40), Integer32().clone(65535)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineActiveCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineActiveCct.setDescription('This is the circuit number that this PPP line belongs to For the any switched lines, this will initially be -1 ')
wfPppLineCfgAsyncMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 41), Gauge32().clone(655360)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgAsyncMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineCfgAsyncMap.setDescription('This is the initial seed value of Async-Control-Character-Map which will be used for LCP negotiations with the peer.')
wfPppLineActualAsyncMap = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineActualAsyncMap.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineActualAsyncMap.setDescription('Async-Control-Character-Map used by the link to escape control characters in the data packet. This is the result of LCP negotiations with the peer.')
wfPppLineAuthTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineAuthTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineAuthTimer.setDescription('value for Authentication timer in seconds')
wfPppLineConvergenceTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineConvergenceTimer.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineConvergenceTimer.setDescription('value for Convergence timer in seconds')
wfPppLineMagicNumDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMagicNumDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMagicNumDisable.setDescription('Allows Magic Numbers to be disabled on this interface.')
wfPppLineMyLinkDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineMyLinkDiscr.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineMyLinkDiscr.setDescription('value of Link Discriminator of this endpoint')
wfPppLinePeerLinkDiscr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLinePeerLinkDiscr.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLinePeerLinkDiscr.setDescription("value of Link Discriminator of peer's endpoint")
wfPppLineCfgMru = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4600)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineCfgMru.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineCfgMru.setDescription('this is the Configured MRU being used on the line')
wfPppLineRfc1661Compliance = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppLineRfc1661Compliance.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineRfc1661Compliance.setDescription('Enable/Disable parameter for RFC 1661 compliance')
wfPppLineLqmCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppLineLqmCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppLineLqmCurrentState.setDescription('Indicates whether LQM is running on the line.')
wfPppCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2), )
if mibBuilder.loadTexts: wfPppCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitTable.setDescription('The Wellfleet PPP Circuit Configuration Table containing attributes dealing with the network layer and each Network Control Protocol (NCP)')
wfPppCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppCircuitID"))
if mibBuilder.loadTexts: wfPppCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitEntry.setDescription('per Wellfleet circuit PPP configuration parameters and counters')
wfPppCircuitDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitDelete.setDescription('Create/Delete parameter')
wfPppCircuitState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitState.setDescription('PPP state variable, Not Present, Init, Down, Up')
wfPppCircuitIpcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpcpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpcpCurrentState.setDescription('the current state of the IPCP Finite State Machine')
wfPppCircuitOsinlcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitOsinlcpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitOsinlcpCurrentState.setDescription('the current state of the OSINLCP Finite State Machine')
wfPppCircuitXnscpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitXnscpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitXnscpCurrentState.setDescription('the current state of the XNSCP Finite State Machine')
wfPppCircuitDncpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitDncpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitDncpCurrentState.setDescription('the current state of the DNCP Finite State Machine')
wfPppCircuitAtcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitAtcpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitAtcpCurrentState.setDescription('the current state of the ATCP Finite State Machine')
wfPppCircuitIpxcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxcpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpxcpCurrentState.setDescription('the current state of the IPXCP Finite State Machine')
wfPppCircuitBncpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBncpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBncpCurrentState.setDescription('the current state of the BNCP Finite State Machine')
wfPppCircuitVncpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitVncpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitVncpCurrentState.setDescription('the current state of the VNCP Finite State Machine')
wfPppCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitID.setDescription('cct number for this instance')
wfPppCircuitIpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpDisable.setDescription('enable/disable IP Protocol - disabling generates a Close event to the IPCP FSM and consequently disallows IP traffic on this circuit')
wfPppCircuitOsinlDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitOsinlDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitOsinlDisable.setDescription('enable/disable OSI Network Layer Protocol - disabling generates a Close event to the OSINLCP FSM and consequently disallows OSI traffic on this circuit')
wfPppCircuitXnsDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitXnsDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitXnsDisable.setDescription('enable/disable XNS Protocol - disabling generates a Close event to the XNSCP FSM and consequently disallows XNS traffic on this circuit')
wfPppCircuitDecnetDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitDecnetDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitDecnetDisable.setDescription('enable/disable DECnet Protocol - disabling generates a Close event to the DNCP FSM and consequently disallows DECnet traffic on this circuit')
wfPppCircuitAppletalkDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitAppletalkDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitAppletalkDisable.setDescription('enable/disable AppleTalk Protocol - disabling generates a Close event to the ATCP FSM and consequently disallows AppleTalk traffic on this circuit')
wfPppCircuitIpxDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpxDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpxDisable.setDescription('enable/disable IPX Protocol - disabling generates a Close event to the IPXCP FSM and consequently disallows IPX traffic on this circuit')
wfPppCircuitBridgeDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitBridgeDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBridgeDisable.setDescription('enable/disable the Bridge - disabling generates a Close event to the BNCP FSM and consequently disallows bridge traffic on this circuit')
wfPppCircuitVinesDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitVinesDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitVinesDisable.setDescription('enable/disable Vines Protocol - disabling generates a Close event to the VNCP FSM and consequently disallows Vines traffic on this circuit')
wfPppCircuitCfgLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 20), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgLocalIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgLocalIpAddr.setDescription("the IP address we're going to use")
wfPppCircuitLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitLocalIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitLocalIpAddr.setDescription('the IP address our peer wants us to use')
wfPppCircuitCfgRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgRemoteIpAddr.setDescription('the IP address we want our peer to use')
wfPppCircuitRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitRemoteIpAddr.setDescription('the IP address our peer wants to use')
wfPppCircuitCfgIpxNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 24), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgIpxNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgIpxNetworkNumber.setDescription('the configured IPX Network Number to be used by both us and our peer')
wfPppCircuitIpxNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpxNetworkNumber.setDescription('the result of IPX Network Number negotiation')
wfPppCircuitIpxRemoteNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 26), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpxRemoteNodeNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpxRemoteNodeNumber.setDescription("this is what we'll tell our peer to use for node number if it sends us a 0")
wfPppCircuitCfgIpxRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("ripsap", 2))).clone('ripsap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgIpxRoutingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgIpxRoutingProtocol.setDescription('the desired IPX Routing Protocol to be used on the link')
wfPppCircuitIpxRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxRoutingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpxRoutingProtocol.setDescription('the negotiated IPX Routing Protocol to be used on the link')
wfPppCircuitLocalIpxRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitLocalIpxRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitLocalIpxRouterName.setDescription('our IPX Router Name')
wfPppCircuitRemoteIpxRouterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitRemoteIpxRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitRemoteIpxRouterName.setDescription("our peer's IPX Router Name")
wfPppCircuitIpxConfigComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpxConfigComplete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpxConfigComplete.setDescription('indicates whether or not IPXCP converged on all required options')
wfPppCircuitCfgAtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgAtNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgAtNetwork.setDescription('the configured AppleTalk network number - our peer must use the same number')
wfPppCircuitAtNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitAtNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitAtNetwork.setDescription('the AppleTalk network number we agreed to use')
wfPppCircuitCfgLocalAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgLocalAtNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgLocalAtNode.setDescription("the AppleTalk node number we're configured to use")
wfPppCircuitLocalAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitLocalAtNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitLocalAtNode.setDescription('our AppleTalk node number after negotiation')
wfPppCircuitCfgRemoteAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgRemoteAtNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgRemoteAtNode.setDescription('the AppleTalk node number we want our peer to use')
wfPppCircuitRemoteAtNode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitRemoteAtNode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitRemoteAtNode.setDescription("our peer's AppleTalk node number after negotiation")
wfPppCircuitCfgAtRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rtmp", 1), ("aurp", 2), ("abgp", 3))).clone('rtmp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgAtRoutingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgAtRoutingProtocol.setDescription('the desired AppleTalk Routing Protocol to be used on the link')
wfPppCircuitAtRoutingProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitAtRoutingProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitAtRoutingProtocol.setDescription('the negotiated AppleTalk Routing Protocol to be used on the link')
wfPppCircuitCfgBridgeEnet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeEnet.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeEnet.setDescription('allow/disallow Ethernet bridged frames')
wfPppCircuitBridgeEnet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBridgeEnet.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBridgeEnet.setDescription('result of bridge MAC type negotiation for Ethernet')
wfPppCircuitCfgBridgeFddi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeFddi.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeFddi.setDescription('allow/disallow FDDI bridged frames')
wfPppCircuitBridgeFddi = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBridgeFddi.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBridgeFddi.setDescription('result of bridge MAC type negotiation for FDDI')
wfPppCircuitCfgBridgeTokenRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeTokenRing.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgBridgeTokenRing.setDescription('allow/disallow Token Ring bridged frames')
wfPppCircuitBridgeTokenRing = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBridgeTokenRing.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBridgeTokenRing.setDescription('result of bridge MAC type negotiation for Token Ring')
wfPppCircuitBadPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBadPackets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBadPackets.setDescription('these are packets not in correct PPP format')
wfPppCircuitLastBadPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 47), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitLastBadPacket.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitLastBadPacket.setDescription('this is the first 16 bytes of the last bad packet we received')
wfPppCircuitCcpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitCcpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCcpCurrentState.setDescription('the current state of the CCP Finite State Machine')
wfPppCircuitCcpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCcpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCcpDisable.setDescription('enable/disable compression - disabling generates a Close event to the CCP FSM and consequently disallows compression traffic on this circuit')
wfPppCircuitPppMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("nego", 2), ("multilink", 3), ("monitor", 4), ("dynamic-monitor", 5))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPppMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitPppMode.setDescription('Pre 9.0 multilines can only negotiate LCP over 1 line. The exact line which LCP will occur on is unknown. So in order to handle this situation we will wait until we receive an LCP Request before we attempt to negotiate LCP by setting the mode to PPP_MODE_PEER_SOLICITED_LCP_NEGO. If we are using this line as a single PPP Line or we are sure our peer can handle LCP on all the members of the multiline, PPP_MODE_NORMAL should be selected. Multilink is a PPP protocol extension which provides restoration of packets which arrive out of sequence, a possibility with multiple lines. Multilink monitor, in conjunction with other configuration data allows the throughput of a line to be monitored. Additional lines can be brought into the bundle and taken down dynamically in response to data traffic volume and other conditions.')
wfPppCircuitMLFragPerm = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permitted", 1), ("prohibited", 2))).clone('permitted')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMLFragPerm.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitMLFragPerm.setDescription('This parameter allows interoperability with PPP Multilink implementations which do not allow fragmentation.')
wfPppCircuitExamPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitExamPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitExamPeriod.setDescription('This indicates the interval that the Multilink bundle should be polled for possible congestion. This value is in tenths of a second')
wfPppCircuitFullThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647)).clone(70)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitFullThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitFullThreshold.setDescription('This is the percentage of the theoretical maximum line throughput that must be reached or exceeded before the line is considered congested.')
wfPppCircuitPeriodsCng = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPeriodsCng.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitPeriodsCng.setDescription('This is the number of consecutive periods where the line throughput is above the congestion threshold required to declare the line congested and attempt corrective action.')
wfPppCircuitPrefBwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 55), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPrefBwSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitPrefBwSlot.setDescription('This is the preferred bandwidth slot. When lines are requested to be added to the Multilink bundle this parameter denotes the slot which is asked first.')
wfPppCircuitResvBwSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitResvBwSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitResvBwSlot.setDescription('This is the reserve bandwidth slot. When lines are requested to be added to the Multilink bundle this parameter denotes the slot which is asked if the preferred slot can not provide a line.')
wfPppCircuitMLFragTriggerSize = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 57), Integer32().clone(256)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMLFragTriggerSize.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitMLFragTriggerSize.setDescription('This is the minimum size of a packet of which Multilink will fragment.')
wfPppCircuitMaxLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMaxLinks.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitMaxLinks.setDescription('This is the maximum number of links allowed in the Multilink bundle for this circuit at any one time.')
wfPppCircuitRecoverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 2147483647)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitRecoverThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitRecoverThreshold.setDescription('This is the recovery threshold expressed as a percentage of the theoretical maximum bundle throughput. The actual throughput must fall below this percentage in order for the BOD circuit to begin to remove lines from the Multilink bundle.')
wfPppCircuitPeriodsUnCng = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitPeriodsUnCng.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitPeriodsUnCng.setDescription('This parameter is used for recovery. Once a Multilink bundle has been declared as congested, this is the number of consecutive examination periods where the queue depth is below the recovery threshold value required to declare that the bundle is no longer congested.')
wfPppCircuitHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitHistory.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitHistory.setDescription('DEBUG parameter - This is the BOD history buffer.')
wfPppCircuitDebugFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitDebugFlag.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitDebugFlag.setDescription('DEBUG parameter - This is the BOD Debug flag, used to control debug code for BOD.')
wfPppCircuitActualMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 20))).clone(namedValues=NamedValues(("normal", 1), ("multilink", 3), ("monitor", 4), ("inactive", 20))).clone('normal')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitActualMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitActualMode.setDescription('This attribute is the actual ppp mode of the circuit after LCP has negotiated. ')
wfPppCircuitMaxBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMaxBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitMaxBuffers.setDescription('This is the maximum number of stored buffers allowed in the Multilink Receive logic for this circuit at any one time.')
wfPppCircuitLinksConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitLinksConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitLinksConfigured.setDescription('This is the current number of lines configured for this Multilink circuit.')
wfPppCircuitBacpDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitBacpDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBacpDisable.setDescription('enable/disable BACP Protocol - disabling generates a Close event to the BACP FSM and consequently disallows BAP traffic on this circuit')
wfPppCircuitBacpCurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitBacpCurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBacpCurrentState.setDescription('the current state of the BACP Finite State Machine')
wfPppCircuitBacpNoPhoneNum = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitBacpNoPhoneNum.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitBacpNoPhoneNum.setDescription('enable/disable sending of the No-Phone-Number-Needed option in BACP Call Request packets')
wfPppCircuitIpv6Disable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitIpv6Disable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpv6Disable.setDescription('enable/disable IPv6 Protocol - disabling generates a Close event to the IPv6CP FSM and consequently disallows IPv6 traffic on this circuit')
wfPppCircuitIpv6CurrentState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("starting", 1), ("closed", 2), ("stopped", 3), ("closing", 4), ("stopping", 5), ("reqsent", 6), ("ackrcvd", 7), ("acksent", 8), ("opened", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitIpv6CurrentState.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitIpv6CurrentState.setDescription('the current state of the Ipv6 Finite State Machine')
wfPppCircuitCcpType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ilccp", 1), ("ccp", 2))).clone('ccp')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCcpType.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCcpType.setDescription('Specifies whether to use CCP or Individual Link CCP')
wfPppCircuitCfgCcpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("oui-wcp", 2), ("staclzs", 3))).clone('all')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitCfgCcpOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCfgCcpOptions.setDescription('Specifies the compression protocol options in 1st config-request')
wfPppCircuitCcpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("oui-wcp", 2), ("staclzs", 3))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppCircuitCcpOptions.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitCcpOptions.setDescription('The negotiated compression protocol option')
wfPppCircuitStacLZSCheckMode = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("mode0", 1), ("mode3", 4))).clone('mode3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitStacLZSCheckMode.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitStacLZSCheckMode.setDescription('Specifies the check mode for STAC LZS compression protocol. See RFC 1974 for more information.')
wfPppCircuitMLFragStrict = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 75), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMLFragStrict.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitMLFragStrict.setDescription('enable/disable strict fragmentation algorithm i.e. fragmenting a packet when its size exceeds the threshold regardless of what the average packet size is')
wfPppCircuitLampreyCompDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 99))).clone(namedValues=NamedValues(("slot1", 1), ("slot2", 2), ("slot3", 3), ("slot4", 4), ("slot5", 5), ("slot6", 6), ("slot7", 7), ("slot8", 8), ("slot9", 9), ("slot10", 10), ("slot11", 11), ("slot12", 12), ("slot13", 13), ("slot14", 14), ("disabled", 99))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitLampreyCompDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitLampreyCompDisable.setDescription('enable/disable hardware compression, either from the compression daugther card on the Lamprey or the old compression daugther interface card on the link module, it tells you where the compression hardware is')
wfPppCircuitMsgLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2031616, 65536, 131072, 262144, 524288, 1048576, 917504))).clone(namedValues=NamedValues(("all", 2031616), ("debug", 65536), ("info", 131072), ("warning", 262144), ("fault", 524288), ("trace", 1048576), ("infofaultwarning", 917504))).clone('infofaultwarning')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitMsgLevel.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitMsgLevel.setDescription('PPP Circuit log messages level. To control level of log messages DBG_MSG_ALL 0x001f0000 - 2031616 DBG_MSG_DEBUG 0x00010000 - 65536 DBG_MSG_INFO 0x00020000 - 131072 DBG_MSG_WARNING 0x00040000 - 262144 DBG_MSG_FAULT 0x00080000 - 524288 DBG_MSG_TRACE 0x00100000 - 1048576')
wfPppCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 9), ("dialup", 1), ("l2tp", 2), ("leased", 3))).clone('unknown')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitType.setDescription('To differentiate between a Dial Up PPP circuit from L2TP and Leased Line')
wfPppCircuitWRCompatability = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 2, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppCircuitWRCompatability.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppCircuitWRCompatability.setDescription('Enable WebRanger compatability that allows us to accept a config-ack after receiving an invalid config-req')
wfPppWhoamiTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3), )
if mibBuilder.loadTexts: wfPppWhoamiTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiTable.setDescription('The Wellfleet PPP WHOAMI Table, containing a mapping of peer CHAP Names and the circuit numbers they map to')
wfPppWhoamiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppWhoamiName"))
if mibBuilder.loadTexts: wfPppWhoamiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiEntry.setDescription("Map the value of this entry's CHAP Name to the value of this entry's CCT number")
wfPppWhoamiDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiDelete.setDescription('Create/Delete parameter')
wfPppWhoamiName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppWhoamiName.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiName.setDescription('Peer CHAP Name')
wfPppWhoamiCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiCircuit.setDescription('Circuit number to map to')
wfPppWhoamiSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiSecret.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiSecret.setDescription('Peer CHAP Secret')
wfPppWhoamiPapPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiPapPassword.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiPapPassword.setDescription('Peer Pap Password')
wfPppWhoamiCctGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppWhoamiCctGrp.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppWhoamiCctGrp.setDescription('Unnumbered circuit group to map to')
wfPppMlStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4), )
if mibBuilder.loadTexts: wfPppMlStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsTable.setDescription('The Wellfleet PPP Multilink Stats Table, containing statistics for each Multilink Circuit')
wfPppMlStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppMlStatsCircuitID"))
if mibBuilder.loadTexts: wfPppMlStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsEntry.setDescription('per Wellfleet circuit PPP Multilink counters')
wfPppMlStatsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsDelete.setDescription('Create/Delete parameter')
wfPppMlStatsCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsCircuitID.setDescription('cct number for this instance')
wfPppMlStatsHomeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsHomeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsHomeSlot.setDescription('Slot on which this Multilink Control Subsystem exists')
wfPppMlStatsLineCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsLineCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsLineCnt.setDescription('Current count of lines in Multilink bundle')
wfPppMlStatsBundleSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsBundleSpd.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsBundleSpd.setDescription('Current total bandwidth of Multilink bundle')
wfPppMlStatsMrru = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsMrru.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsMrru.setDescription('Current Maximum Receive Reconstructed Unit (MRRU) in use for Multilink bundle')
wfPppMlStatsEndptDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsEndptDisc.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsEndptDisc.setDescription('Current Endpoint Discriminator in use for Multilink bundle')
wfPppMlStatsTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsTxOctets.setDescription('Number of octets transmitted by Multilink')
wfPppMlStatsTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsTxPkts.setDescription('Number of packets transmitted by Multilink')
wfPppMlStatsAvgTxListLen = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsAvgTxListLen.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsAvgTxListLen.setDescription('Average number of packets received in the transient list by the Multilink Transmit gate.')
wfPppMlStatsRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsRxOctets.setDescription('Number of octets received without error')
wfPppMlStatsRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsRxPkts.setDescription('Number of packets received by Multilink')
wfPppMlStatsReasmFails = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReasmFails.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsReasmFails.setDescription('Number of packet reassembly failures')
wfPppMlStatsSeqNumberLost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsSeqNumberLost.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsSeqNumberLost.setDescription('Number of Multilink packets considered to be lost on the wire')
wfPppMlStatsSeqNumberArrivedLate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsSeqNumberArrivedLate.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsSeqNumberArrivedLate.setDescription('Number of Multilink packets which arrive containing an old Sequence Number. IE: packets with a more current Sequence Number have already been sent up to NCP')
wfPppMlStatsReSeqBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReSeqBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsReSeqBufferCnt.setDescription('Number of Multilink packets currently stored in the ReSequencing buffer pool.')
wfPppMlStatsReSeqBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReSeqBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsReSeqBufferMax.setDescription('The Maximum Number of Multilink packets stored in the ReSequencing buffer pool.')
wfPppMlStatsExceededBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsExceededBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsExceededBufferMax.setDescription('The number of times a buffer needed to be stored by the Multilink Receive logic when the count of buffers stored, wfPppMlStatsReSeqBufferMax,was equal to the maximum allowable for this circuit, wfPppCircuitMaxBuffers.')
wfPppMlStatsLinkIdleEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsLinkIdleEvents.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsLinkIdleEvents.setDescription('The number of times the Multilink Receive logic detected a stored buffer received on a line which has been declared idle.')
wfPppMlStatsCalcPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsCalcPercent.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsCalcPercent.setDescription('enable/disable collection of Rx percentage line usage')
wfPppMlStatsDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsDebug.setDescription('DEBUG parameter - this is used to control debug code for the Multilink subsystem')
wfPppMlStatsReassmBufferCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReassmBufferCnt.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsReassmBufferCnt.setDescription('Number of Multilink packets currently stored in the Reassembling buffer pools.')
wfPppMlStatsReassmBufferMax = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsReassmBufferMax.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsReassmBufferMax.setDescription('The Maximum Number of Multilink packets stored in the Reassembling buffer pools.')
wfPppMlStatsNumPktsFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsNumPktsFragmented.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsNumPktsFragmented.setDescription('The Number of Multilink packets that were fragmented.')
wfPppMlStatsPQHiXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQHiXmits.setDescription('High priority transmit count.')
wfPppMlStatsPQNormalXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQNormalXmits.setDescription('Normal priority transmit count.')
wfPppMlStatsPQLoXmits = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoXmits.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQLoXmits.setDescription('Low priority transmit count')
wfPppMlStatsPQHiClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQHiClippedPkts.setDescription('High priority transmit clip Count')
wfPppMlStatsPQNormalClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQNormalClippedPkts.setDescription('Normal priority transmit clip Count')
wfPppMlStatsPQLoClippedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoClippedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQLoClippedPkts.setDescription('Low priority transmit clip Count')
wfPppMlStatsPQIntrQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQIntrQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQIntrQHighWaterPkts.setDescription('Interrupt-priority Queue high-water mark')
wfPppMlStatsPQHiQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQHiQHighWaterPkts.setDescription('High-priority Queue high-water mark')
wfPppMlStatsPQNormalQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQNormalQHighWaterPkts.setDescription('Normal-priority Queue high-water mark')
wfPppMlStatsPQLoQHighWaterPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoQHighWaterPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQLoQHighWaterPkts.setDescription('Low-priority Queue high-water mark')
wfPppMlStatsPQHighWaterPktsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppMlStatsPQHighWaterPktsClear.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQHighWaterPktsClear.setDescription('Attribute to clear the high-water marks. When the MIB changes, Priority Queueing (if ENABLED) checks to see if HighWaterPktsClear is different than the last time the MIB was modified in any way. If it is different, all the high water marks (see above) are set to zero.')
wfPppMlStatsPQDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQDroppedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQDroppedPkts.setDescription('Packets which were filtered in Priority Queueing')
wfPppMlStatsPQLargePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLargePkts.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQLargePkts.setDescription('Large Packets which became an exception to latency rules')
wfPppMlStatsPQHiTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQHiTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQHiTotalOctets.setDescription('Running total of High Octets transmitted when using Bandwidth Allocation dequeueing algorithm')
wfPppMlStatsPQNormalTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQNormalTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQNormalTotalOctets.setDescription('Running total of Normal Octets transmitted when using Bandwidth Allocation dequeueing algorithm')
wfPppMlStatsPQLoTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQLoTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQLoTotalOctets.setDescription('Running total of Low Octets transmitted when using Bandwidth Allocation dequeueing algorithm')
wfPppMlStatsPQPktsNotQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppMlStatsPQPktsNotQueued.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppMlStatsPQPktsNotQueued.setDescription('Packets that were not Queued or Dropped by Priority Queuing ')
wfPppBapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5), )
if mibBuilder.loadTexts: wfPppBapStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapStatsTable.setDescription('The Wellfleet PPP BAP Stats Table, containing statistics for each BACP Circuit')
wfPppBapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1), ).setIndexNames((0, "Wellfleet-PPP-MIB", "wfPppBapStatsCircuitID"))
if mibBuilder.loadTexts: wfPppBapStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapStatsEntry.setDescription('per Wellfleet circuit PPP BAP counters')
wfPppBapStatsDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfPppBapStatsDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapStatsDelete.setDescription('Create/Delete parameter')
wfPppBapStatsCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapStatsCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapStatsCircuitID.setDescription('cct number for this instance')
wfPppBapCallReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallReqTx.setDescription('Number of Call Requests transmitted by BAP')
wfPppBapCallRespAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespAckTx.setDescription('Number of Call Responses transmitted by BAP with a Response Code of Request_Ack')
wfPppBapCallRespNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespNakTx.setDescription('Number of Call Responses transmitted by BAP with a Response Code of Request_Nak')
wfPppBapCallRespFullNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespFullNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespFullNakTx.setDescription('Number of Call Responses transmitted by BAP with a Response Code of Request_Full_Nak')
wfPppBapCallRespRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespRejTx.setDescription('Number of Call Responses transmitted by BAP with a Response Code of Request_Rej')
wfPppBapCallbackReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackReqTx.setDescription('Number of Callback Requests transmitted by BAP')
wfPppBapCallbackRespAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespAckTx.setDescription('Number of Callback Responses transmitted by BAP with a Response Code of Request_Ack')
wfPppBapCallbackRespNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespNakTx.setDescription('Number of Callback Responses transmitted by BAP with a Response Code of Request_Nak')
wfPppBapCallbackRespFullNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespFullNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespFullNakTx.setDescription('Number of Callback Responses transmitted by BAP with a Response Code of Request_Full_Nak')
wfPppBapCallbackRespRejTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespRejTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespRejTx.setDescription('Number of Callback Responses transmitted by BAP with a Response Code of Request_Rej')
wfPppBapLdQueryReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryReqTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryReqTx.setDescription('Number of LinkDrop Query Requests transmitted by BAP')
wfPppBapLdQueryRespAckTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespAckTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryRespAckTx.setDescription('Number of LinkDrop Query Responses transmitted by BAP with a Response Code of Request_Ack')
wfPppBapLdQueryRespNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryRespNakTx.setDescription('Number of LinkDrop Query Responses transmitted by BAP with a Response Code of Request_Nak')
wfPppBapLdQueryRespFullNakTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespFullNakTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryRespFullNakTx.setDescription('Number of LinkDrop Query Responses transmitted by BAP with a Response Code of Request_Full_Nak')
wfPppBapCallStatusIndFailTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndFailTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallStatusIndFailTx.setDescription('Number of Call_Status_Indications transmitted by BAP with a non-zero Call Status')
wfPppBapCallStatusIndSuccessTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndSuccessTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallStatusIndSuccessTx.setDescription('Number of Call_Status_Indications transmitted by BAP with a zero Call Status')
wfPppBapCallStatusRespTx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusRespTx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallStatusRespTx.setDescription('Number of Call_Status_Response transmitted by BAP')
wfPppBapCallReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallReqRx.setDescription('Number of Call Requests received by BAP')
wfPppBapCallRespAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespAckRx.setDescription('Number of Call Responses received by BAP with a Response Code of Request_Ack')
wfPppBapCallRespNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespNakRx.setDescription('Number of Call Responses received by BAP with a Response Code of Request_Nak')
wfPppBapCallRespFullNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespFullNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespFullNakRx.setDescription('Number of Call Responses received by BAP with a Response Code of Request_Full_Nak')
wfPppBapCallRespRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallRespRejRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallRespRejRx.setDescription('Number of Call Responses received by BAP with a Response Code of Request_Rej')
wfPppBapCallbackReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackReqRx.setDescription('Number of Callback Requests received by BAP')
wfPppBapCallbackRespAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespAckRx.setDescription('Number of Callback Responses received by BAP with a Response Code of Request_Ack')
wfPppBapCallbackRespNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespNakRx.setDescription('Number of Callback Responses received by BAP with a Response Code of Request_Nak')
wfPppBapCallbackRespFullNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespFullNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespFullNakRx.setDescription('Number of Callback Responses received by BAP with a Response Code of Request_Full_Nak')
wfPppBapCallbackRespRejRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackRespRejRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackRespRejRx.setDescription('Number of Callback Responses received by BAP with a Response Code of Request_Rej')
wfPppBapLdQueryReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryReqRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryReqRx.setDescription('Number of LinkDrop Query Requests received by BAP')
wfPppBapLdQueryRespAckRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespAckRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryRespAckRx.setDescription('Number of LinkDrop Query Responses received by BAP with a Response Code of Request_Ack')
wfPppBapLdQueryRespNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryRespNakRx.setDescription('Number of LinkDrop Query Responses received by BAP with a Response Code of Request_Nak')
wfPppBapLdQueryRespFullNakRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapLdQueryRespFullNakRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapLdQueryRespFullNakRx.setDescription('Number of LinkDrop Query Responses received by BAP with a Response Code of Request_Full_Nak')
wfPppBapCallStatusIndFailRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndFailRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallStatusIndFailRx.setDescription('Number of Call_Status_Indications received by BAP with a non-zero Call Status')
wfPppBapCallStatusIndSuccessRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusIndSuccessRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallStatusIndSuccessRx.setDescription('Number of Call_Status_Indications received by BAP with a zero Call Status')
wfPppBapCallStatusRespRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallStatusRespRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallStatusRespRx.setDescription('Number of Call_Status_Response received by BAP')
wfPppBapCallReqRespDiscardRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallReqRespDiscardRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallReqRespDiscardRx.setDescription('Number of Call_Response received by BAP with an old identifier.')
wfPppBapCallbackReqRespDiscardRx = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 2, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfPppBapCallbackReqRespDiscardRx.setStatus('mandatory')
if mibBuilder.loadTexts: wfPppBapCallbackReqRespDiscardRx.setDescription('Number of Callback_Response received by BAP with an old identifier.')
mibBuilder.exportSymbols("Wellfleet-PPP-MIB", wfPppMlStatsCalcPercent=wfPppMlStatsCalcPercent, wfPppCircuitRemoteAtNode=wfPppCircuitRemoteAtNode, wfPppCircuitExamPeriod=wfPppCircuitExamPeriod, wfPppLineLastBadPacket=wfPppLineLastBadPacket, wfPppMlStatsTable=wfPppMlStatsTable, wfPppMlStatsLinkIdleEvents=wfPppMlStatsLinkIdleEvents, wfPppBapCallbackRespAckRx=wfPppBapCallbackRespAckRx, wfPppCircuitActualMode=wfPppCircuitActualMode, wfPppCircuitVncpCurrentState=wfPppCircuitVncpCurrentState, wfPppCircuitID=wfPppCircuitID, wfPppLineLineNumber=wfPppLineLineNumber, wfPppLineActiveCct=wfPppLineActiveCct, wfPppCircuitIpxRoutingProtocol=wfPppCircuitIpxRoutingProtocol, wfPppCircuitMaxLinks=wfPppCircuitMaxLinks, wfPppCircuitXnscpCurrentState=wfPppCircuitXnscpCurrentState, wfPppCircuitIpDisable=wfPppCircuitIpDisable, wfPppCircuitCfgIpxRoutingProtocol=wfPppCircuitCfgIpxRoutingProtocol, wfPppLineLevelPktsIn=wfPppLineLevelPktsIn, wfPppCircuitCcpType=wfPppCircuitCcpType, wfPppCircuitIpxDisable=wfPppCircuitIpxDisable, wfPppBapCallbackRespAckTx=wfPppBapCallbackRespAckTx, wfPppMlStatsReassmBufferMax=wfPppMlStatsReassmBufferMax, wfPppCircuitDecnetDisable=wfPppCircuitDecnetDisable, wfPppCircuitOsinlcpCurrentState=wfPppCircuitOsinlcpCurrentState, wfPppCircuitCfgLocalAtNode=wfPppCircuitCfgLocalAtNode, wfPppBapLdQueryRespNakRx=wfPppBapLdQueryRespNakRx, wfPppLineDisable=wfPppLineDisable, wfPppCircuitCfgBridgeEnet=wfPppCircuitCfgBridgeEnet, wfPppMlStatsPQLoQHighWaterPkts=wfPppMlStatsPQLoQHighWaterPkts, wfPppCircuitCfgAtRoutingProtocol=wfPppCircuitCfgAtRoutingProtocol, wfPppCircuitMaxBuffers=wfPppCircuitMaxBuffers, wfPppBapLdQueryRespFullNakRx=wfPppBapLdQueryRespFullNakRx, wfPppCircuitIpxRemoteNodeNumber=wfPppCircuitIpxRemoteNodeNumber, wfPppLineLqmCurrentState=wfPppLineLqmCurrentState, wfPppCircuitStacLZSCheckMode=wfPppCircuitStacLZSCheckMode, wfPppBapCallStatusIndSuccessRx=wfPppBapCallStatusIndSuccessRx, wfPppWhoamiTable=wfPppWhoamiTable, wfPppBapCallbackRespRejRx=wfPppBapCallbackRespRejRx, wfPppLineRestartTimer=wfPppLineRestartTimer, wfPppCircuitWRCompatability=wfPppCircuitWRCompatability, wfPppWhoamiName=wfPppWhoamiName, wfPppBapStatsDelete=wfPppBapStatsDelete, wfPppLineMyLinkDiscr=wfPppLineMyLinkDiscr, wfPppCircuitCcpDisable=wfPppCircuitCcpDisable, wfPppLineEchoRequestFreq=wfPppLineEchoRequestFreq, wfPppLineTable=wfPppLineTable, wfPppMlStatsSeqNumberLost=wfPppMlStatsSeqNumberLost, wfPppCircuitBridgeEnet=wfPppCircuitBridgeEnet, wfPppMlStatsTxPkts=wfPppMlStatsTxPkts, wfPppCircuitPeriodsUnCng=wfPppCircuitPeriodsUnCng, wfPppCircuitState=wfPppCircuitState, wfPppBapCallStatusIndFailRx=wfPppBapCallStatusIndFailRx, wfPppCircuitCcpOptions=wfPppCircuitCcpOptions, wfPppMlStatsTxOctets=wfPppMlStatsTxOctets, wfPppBapCallStatusRespRx=wfPppBapCallStatusRespRx, wfPppLineLocalPapPassword=wfPppLineLocalPapPassword, wfPppCircuitOsinlDisable=wfPppCircuitOsinlDisable, wfPppBapLdQueryRespAckRx=wfPppBapLdQueryRespAckRx, wfPppBapLdQueryReqRx=wfPppBapLdQueryReqRx, wfPppLineActualAsyncMap=wfPppLineActualAsyncMap, wfPppCircuitBacpCurrentState=wfPppCircuitBacpCurrentState, wfPppCircuitMLFragStrict=wfPppCircuitMLFragStrict, wfPppCircuitIpxNetworkNumber=wfPppCircuitIpxNetworkNumber, wfPppMlStatsPQHighWaterPktsClear=wfPppMlStatsPQHighWaterPktsClear, wfPppLineConvergenceTimer=wfPppLineConvergenceTimer, wfPppCircuitMsgLevel=wfPppCircuitMsgLevel, wfPppMlStatsDebug=wfPppMlStatsDebug, wfPppMlStatsAvgTxListLen=wfPppMlStatsAvgTxListLen, wfPppCircuitPrefBwSlot=wfPppCircuitPrefBwSlot, wfPppCircuitIpv6CurrentState=wfPppCircuitIpv6CurrentState, wfPppMlStatsSeqNumberArrivedLate=wfPppMlStatsSeqNumberArrivedLate, wfPppBapCallStatusRespTx=wfPppBapCallStatusRespTx, wfPppCircuitCfgBridgeFddi=wfPppCircuitCfgBridgeFddi, wfPppCircuitLocalIpAddr=wfPppCircuitLocalIpAddr, wfPppLineCfgLQRRptPrd=wfPppLineCfgLQRRptPrd, wfPppLineInboundQuality=wfPppLineInboundQuality, wfPppLinePapFallbackDisable=wfPppLinePapFallbackDisable, wfPppWhoamiCctGrp=wfPppWhoamiCctGrp, wfPppCircuitIpxcpCurrentState=wfPppCircuitIpxcpCurrentState, wfPppMlStatsBundleSpd=wfPppMlStatsBundleSpd, wfPppMlStatsReassmBufferCnt=wfPppMlStatsReassmBufferCnt, wfPppLineInLQRs=wfPppLineInLQRs, wfPppCircuitIpcpCurrentState=wfPppCircuitIpcpCurrentState, wfPppBapCallRespRejRx=wfPppBapCallRespRejRx, wfPppCircuitCfgRemoteIpAddr=wfPppCircuitCfgRemoteIpAddr, wfPppLineRfc1661Compliance=wfPppLineRfc1661Compliance, wfPppCircuitBacpNoPhoneNum=wfPppCircuitBacpNoPhoneNum, wfPppCircuitAtcpCurrentState=wfPppCircuitAtcpCurrentState, wfPppLineDisableRemoteLQRTimer=wfPppLineDisableRemoteLQRTimer, wfPppCircuitBridgeDisable=wfPppCircuitBridgeDisable, wfPppCircuitLinksConfigured=wfPppCircuitLinksConfigured, wfPppCircuitLampreyCompDisable=wfPppCircuitLampreyCompDisable, wfPppCircuitLocalIpxRouterName=wfPppCircuitLocalIpxRouterName, wfPppWhoamiDelete=wfPppWhoamiDelete, wfPppMlStatsDelete=wfPppMlStatsDelete, wfPppLineMaxConfReq=wfPppLineMaxConfReq, wfPppMlStatsPQIntrQHighWaterPkts=wfPppMlStatsPQIntrQHighWaterPkts, wfPppBapStatsEntry=wfPppBapStatsEntry, wfPppCircuitVinesDisable=wfPppCircuitVinesDisable, wfPppMlStatsLineCnt=wfPppMlStatsLineCnt, wfPppBapCallReqTx=wfPppBapCallReqTx, wfPppBapLdQueryReqTx=wfPppBapLdQueryReqTx, wfPppLineLocalPapId=wfPppLineLocalPapId, wfPppBapCallRespFullNakTx=wfPppBapCallRespFullNakTx, wfPppCircuitResvBwSlot=wfPppCircuitResvBwSlot, wfPppLineMaxTermReq=wfPppLineMaxTermReq, wfPppMlStatsPQDroppedPkts=wfPppMlStatsPQDroppedPkts, wfPppLineRemotePapId=wfPppLineRemotePapId, wfPppLineLocalAuthProtocol=wfPppLineLocalAuthProtocol, wfPppMlStatsHomeSlot=wfPppMlStatsHomeSlot, wfPppLineMru=wfPppLineMru, wfPppMlStatsPQHiQHighWaterPkts=wfPppMlStatsPQHiQHighWaterPkts, wfPppLineRemotePapPassword=wfPppLineRemotePapPassword, wfPppMlStatsEndptDisc=wfPppMlStatsEndptDisc, wfPppBapStatsTable=wfPppBapStatsTable, wfPppCircuitCfgIpxNetworkNumber=wfPppCircuitCfgIpxNetworkNumber, wfPppBapCallbackRespNakTx=wfPppBapCallbackRespNakTx, wfPppCircuitAtNetwork=wfPppCircuitAtNetwork, wfPppMlStatsPQHiXmits=wfPppMlStatsPQHiXmits, wfPppMlStatsReSeqBufferMax=wfPppMlStatsReSeqBufferMax, wfPppLineAllowPapReject=wfPppLineAllowPapReject, wfPppLineChapLocalName=wfPppLineChapLocalName, wfPppCircuitCfgRemoteAtNode=wfPppCircuitCfgRemoteAtNode, wfPppCircuitMLFragTriggerSize=wfPppCircuitMLFragTriggerSize, wfPppCircuitBadPackets=wfPppCircuitBadPackets, wfPppWhoamiCircuit=wfPppWhoamiCircuit, wfPppBapCallRespAckRx=wfPppBapCallRespAckRx, wfPppMlStatsReSeqBufferCnt=wfPppMlStatsReSeqBufferCnt, wfPppMlStatsPQHiClippedPkts=wfPppMlStatsPQHiClippedPkts, wfPppBapCallRespAckTx=wfPppBapCallRespAckTx, wfPppLinePeerLinkDiscr=wfPppLinePeerLinkDiscr, wfPppMlStatsPQPktsNotQueued=wfPppMlStatsPQPktsNotQueued, wfPppBapCallRespRejTx=wfPppBapCallRespRejTx, wfPppBapStatsCircuitID=wfPppBapStatsCircuitID, wfPppBapCallStatusIndSuccessTx=wfPppBapCallStatusIndSuccessTx, wfPppCircuitBridgeFddi=wfPppCircuitBridgeFddi, wfPppCircuitTable=wfPppCircuitTable, wfPppCircuitBncpCurrentState=wfPppCircuitBncpCurrentState, wfPppBapCallbackReqRespDiscardRx=wfPppBapCallbackReqRespDiscardRx, wfPppCircuitMLFragPerm=wfPppCircuitMLFragPerm, wfPppCircuitIpxConfigComplete=wfPppCircuitIpxConfigComplete, wfPppCircuitFullThreshold=wfPppCircuitFullThreshold, wfPppLineChapRemoteName=wfPppLineChapRemoteName, wfPppCircuitHistory=wfPppCircuitHistory, wfPppMlStatsPQLoClippedPkts=wfPppMlStatsPQLoClippedPkts, wfPppBapCallReqRespDiscardRx=wfPppBapCallReqRespDiscardRx, wfPppCircuitDebugFlag=wfPppCircuitDebugFlag, wfPppCircuitBacpDisable=wfPppCircuitBacpDisable, wfPppMlStatsPQNormalTotalOctets=wfPppMlStatsPQNormalTotalOctets, wfPppBapCallRespNakTx=wfPppBapCallRespNakTx, wfPppMlStatsRxPkts=wfPppMlStatsRxPkts, wfPppCircuitAtRoutingProtocol=wfPppCircuitAtRoutingProtocol, wfPppMlStatsPQNormalQHighWaterPkts=wfPppMlStatsPQNormalQHighWaterPkts, wfPppLineCfgMru=wfPppLineCfgMru, wfPppLineAuthTimer=wfPppLineAuthTimer, wfPppBapCallbackRespNakRx=wfPppBapCallbackRespNakRx, wfPppCircuitAppletalkDisable=wfPppCircuitAppletalkDisable, wfPppLineOutLQRs=wfPppLineOutLQRs, wfPppMlStatsNumPktsFragmented=wfPppMlStatsNumPktsFragmented, wfPppWhoamiSecret=wfPppWhoamiSecret, wfPppBapCallbackRespFullNakRx=wfPppBapCallbackRespFullNakRx, wfPppBapLdQueryRespFullNakTx=wfPppBapLdQueryRespFullNakTx, wfPppMlStatsPQNormalXmits=wfPppMlStatsPQNormalXmits, wfPppCircuitIpv6Disable=wfPppCircuitIpv6Disable, wfPppCircuitLastBadPacket=wfPppCircuitLastBadPacket, wfPppCircuitPppMode=wfPppCircuitPppMode, wfPppMlStatsEntry=wfPppMlStatsEntry, wfPppWhoamiEntry=wfPppWhoamiEntry, wfPppBapLdQueryRespNakTx=wfPppBapLdQueryRespNakTx, wfPppWhoamiPapPassword=wfPppWhoamiPapPassword, wfPppCircuitDelete=wfPppCircuitDelete, wfPppBapLdQueryRespAckTx=wfPppBapLdQueryRespAckTx, wfPppLineLQRRptPrd=wfPppLineLQRRptPrd, wfPppBapCallbackReqRx=wfPppBapCallbackReqRx, wfPppCircuitBridgeTokenRing=wfPppCircuitBridgeTokenRing, wfPppCircuitRemoteIpAddr=wfPppCircuitRemoteIpAddr, wfPppCircuitDncpCurrentState=wfPppCircuitDncpCurrentState, wfPppLineCfgAsyncMap=wfPppLineCfgAsyncMap, wfPppLineDelete=wfPppLineDelete, wfPppLineEchoReplyLoss=wfPppLineEchoReplyLoss, wfPppCircuitEntry=wfPppCircuitEntry, wfPppLineState=wfPppLineState, wfPppLineMagicNumDisable=wfPppLineMagicNumDisable, wfPppMlStatsPQLoTotalOctets=wfPppMlStatsPQLoTotalOctets, wfPppBapCallReqRx=wfPppBapCallReqRx, wfPppLineMaxConfFail=wfPppLineMaxConfFail, wfPppLineCfgInboundQuality=wfPppLineCfgInboundQuality, wfPppMlStatsPQLargePkts=wfPppMlStatsPQLargePkts, wfPppMlStatsCircuitID=wfPppMlStatsCircuitID, wfPppCircuitXnsDisable=wfPppCircuitXnsDisable, wfPppBapCallbackRespFullNakTx=wfPppBapCallbackRespFullNakTx, wfPppBapCallStatusIndFailTx=wfPppBapCallStatusIndFailTx, wfPppMlStatsPQLoXmits=wfPppMlStatsPQLoXmits, wfPppLineMagicNumber=wfPppLineMagicNumber, wfPppMlStatsReasmFails=wfPppMlStatsReasmFails, wfPppMlStatsRxOctets=wfPppMlStatsRxOctets, wfPppCircuitPeriodsCng=wfPppCircuitPeriodsCng, wfPppCircuitType=wfPppCircuitType, wfPppCircuitLocalAtNode=wfPppCircuitLocalAtNode, wfPppLineOutboundQuality=wfPppLineOutboundQuality, wfPppLineChapSecret=wfPppLineChapSecret, wfPppCircuitRemoteIpxRouterName=wfPppCircuitRemoteIpxRouterName, wfPppLineEntry=wfPppLineEntry, wfPppCircuitCfgLocalIpAddr=wfPppCircuitCfgLocalIpAddr, wfPppCircuitCfgBridgeTokenRing=wfPppCircuitCfgBridgeTokenRing, wfPppCircuitCfgCcpOptions=wfPppCircuitCfgCcpOptions, wfPppBapCallbackRespRejTx=wfPppBapCallbackRespRejTx, wfPppBapCallbackReqTx=wfPppBapCallbackReqTx, wfPppCircuitCfgAtNetwork=wfPppCircuitCfgAtNetwork, wfPppLineRemoteAuthProtocol=wfPppLineRemoteAuthProtocol, wfPppBapCallRespNakRx=wfPppBapCallRespNakRx, wfPppLineBadPackets=wfPppLineBadPackets, wfPppCircuitRecoverThreshold=wfPppCircuitRecoverThreshold, wfPppLineLLIndex=wfPppLineLLIndex, wfPppMlStatsExceededBufferMax=wfPppMlStatsExceededBufferMax, wfPppMlStatsMrru=wfPppMlStatsMrru, wfPppLineLcpCurrentState=wfPppLineLcpCurrentState, wfPppMlStatsPQNormalClippedPkts=wfPppMlStatsPQNormalClippedPkts, wfPppCircuitCcpCurrentState=wfPppCircuitCcpCurrentState, wfPppLineChapPeriodicTimer=wfPppLineChapPeriodicTimer, wfPppLineLQProtocol=wfPppLineLQProtocol, wfPppLineCfgOutboundQuality=wfPppLineCfgOutboundQuality, wfPppBapCallRespFullNakRx=wfPppBapCallRespFullNakRx, wfPppMlStatsPQHiTotalOctets=wfPppMlStatsPQHiTotalOctets)
