#
# PySNMP MIB module CISCO-ENHANCED-IMAGE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENHANCED-IMAGE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
CeImageInstallableStatus, CeImageInstallableType = mibBuilder.importSymbols("CISCO-IMAGE-TC", "CeImageInstallableStatus", "CeImageInstallableType")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Unsigned32, Integer32, TimeTicks, IpAddress, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, ObjectIdentity, MibIdentifier, Counter32, iso, ModuleIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Integer32", "TimeTicks", "IpAddress", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "ObjectIdentity", "MibIdentifier", "Counter32", "iso", "ModuleIdentity", "Bits")
TruthValue, TextualConvention, DateAndTime, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DateAndTime", "DisplayString", "RowStatus")
ciscoEnhancedImageMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 249))
ciscoEnhancedImageMIB.setRevisions(('2005-01-06 00:00', '2002-02-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoEnhancedImageMIB.setRevisionsDescriptions(('This MIB has been extended to be useful for modular operating systems. Added tables ceImageLocationTable, ceImageTagTable, ceImageInstallableTable. They are applicable to modular operating systems and provide information about the operating system software installed on the system. ', 'Initial version of the MIB. This MIB has Image table containing the following information related to the running OS image 1. Entity Index 2. The image name 3. Family 4. Feature set 5. Version 6. Media and 7. Description This MIB deprecates the objects in the CISCO-IMAGE-MIB. ',))
if mibBuilder.loadTexts: ciscoEnhancedImageMIB.setLastUpdated('200501060000Z')
if mibBuilder.loadTexts: ciscoEnhancedImageMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEnhancedImageMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-core-mibs@cisco.com')
if mibBuilder.loadTexts: ciscoEnhancedImageMIB.setDescription('This MIB provides information about images running on the system. It has been extended to be useful for modular operating systems. The image table provides information about currently running image on the system. A modular operating system image consists of base image and all the installables loaded on the base image. A base image can be obtained from ceImageTable and all the installables installed on this image can be obtained using ceImageInstallableTable. Glossary: Base Image Essential part of the operating system, which forms base functionality on top of which patches can be added. MBI (Minimum bootable image) A small image which contains the smallest possible amount of functionality required to bootstrap and load a full image. This image typically contains the kernel, the file system drivers, and some hardware initialization code. It is executed at boot-up, and initializes just enough to access the rest of the code, and run it. Modular operating system An operating system that exhibits runtime modularity characteristics, such as multiple address spaces, fault isolation between processes, and modularity delivery and replacement of image components. Patch/Package/SMU (software maintenance upgrade) A modular replacement for some piece of on-box content, such as a binary shared object, or a text file. This entity is meant to replace or augment something that is already part of the base image. Composite package Group of packages delivered as a bundle. It is meant to be loaded on MBI. Script A non-binary piece of on-box content, typically a TCL script for use by the TCL interpreter, or some other form of interpreted router content. Installable An installable can be a patch, package, composite package, SMU or script. It is a piece of software which can be loaded on to the base image on a system. Location This term is used in this MIB to represent path where operating system image is located. It is the way of describing where on the file system the installed software is located. Modular operating system image consists of base image and installables loaded on this base image. Tag Tag is a virtual label placed by user that indicates a point deemed to be stable. It can be used to rollback to a system after an install that negatively impacted the functionality of the system. It gives points in system where user can go back to, to remove installables installed after that point of time. ')
ciscoEnhancedImageMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 1))
ceImage = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1))
ceImageInstallable = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2))
ceImageTags = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3))
class MediaType(TextualConvention, Integer32):
    description = 'This TC describes the media type on which the image is loaded and is running from. This is not the secondary storage device from which the image is loaded. The storage device from which the image is loaded is part of the image name (ceImageName).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ram", 1), ("rom", 2), ("other", 3))

ceImageTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1), )
if mibBuilder.loadTexts: ceImageTable.setStatus('current')
if mibBuilder.loadTexts: ceImageTable.setDescription('This table provides information describing the executing image. For modular operating systems this table provides base image or MBI. ')
ceImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ENHANCED-IMAGE-MIB", "ceImageIndex"))
if mibBuilder.loadTexts: ceImageEntry.setStatus('current')
if mibBuilder.loadTexts: ceImageEntry.setDescription('An image characteristic entry.')
ceImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 1), PhysicalIndex())
if mibBuilder.loadTexts: ceImageIndex.setStatus('current')
if mibBuilder.loadTexts: ceImageIndex.setDescription('The entPhysicalIndex from the ENTITY-MIB of the physical entity that runs this OS image.')
ceImageName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageName.setStatus('current')
if mibBuilder.loadTexts: ceImageName.setDescription('Name of the running OS image. This will also include the path from where the image is loaded. For example, flash:c3640-is-mz.')
ceImageFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageFamily.setStatus('current')
if mibBuilder.loadTexts: ceImageFamily.setDescription('Family of the running OS image. The image family indicates the platform for which the image is built. Examples of image families - are C3640, C7200 etc.')
ceImageFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 4), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageFeature.setStatus('current')
if mibBuilder.loadTexts: ceImageFeature.setDescription('Feature set supported on this image. Examples of feature set are - ENTERPRISE, PROVIDER etc.')
ceImageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageVersion.setStatus('current')
if mibBuilder.loadTexts: ceImageVersion.setDescription('Version of the running OS image.')
ceImageMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 6), MediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageMedia.setStatus('current')
if mibBuilder.loadTexts: ceImageMedia.setDescription('Media on which the image represented by this entry is running.')
ceImageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 1, 1, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageDescription.setStatus('current')
if mibBuilder.loadTexts: ceImageDescription.setDescription('Description of running OS image.')
ceImageLocationTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 1), )
if mibBuilder.loadTexts: ceImageLocationTable.setStatus('current')
if mibBuilder.loadTexts: ceImageLocationTable.setDescription('This table is applicable to modular operating systems. A location describes where on the file system the installed software is placed. This table consists of list of all locations along with status of image at that location. ceImageLocationRunningStatus will be true only for the location from where system is currently operational. The agent may add entries to this table when a new image is installed on the system. The agent may delete entries from this table when an image has been removed from the system. ')
ceImageLocationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENHANCED-IMAGE-MIB", "ceImageLocationIndex"))
if mibBuilder.loadTexts: ceImageLocationEntry.setStatus('current')
if mibBuilder.loadTexts: ceImageLocationEntry.setDescription('Each entry provides location of an image, status of the image.')
ceImageLocationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceImageLocationIndex.setStatus('current')
if mibBuilder.loadTexts: ceImageLocationIndex.setDescription('An integer that uniquely identifies a location. It is allocated by the system and is unique per location.')
ceImageLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageLocation.setStatus('current')
if mibBuilder.loadTexts: ceImageLocation.setDescription('Location where the operating system is installed on the system. This is path specifying the directory where installables can be found.')
ceImageLocationRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageLocationRunningStatus.setStatus('current')
if mibBuilder.loadTexts: ceImageLocationRunningStatus.setDescription("This object will have value of true if the image from this location is currently running on the system. For example status will be 'true' for the location disk0:/sys, if the system currently has image installed from this location.")
ceImageInstallableTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2), )
if mibBuilder.loadTexts: ceImageInstallableTable.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableTable.setDescription('This table specifies a list of software installables installed on the system. This table will be applicable to operating systems which support installables. A modular operating system can consist of base image or MBI and installables. The value of ceImageLocationIndex can be used as index to retrieve installables installed at a particular location. Every image will have a table of installables. Entries are added in this table when an installable is installed on the image. Entries are deleted from this table when installables are removed or rolled back from the image. ')
ceImageInstallableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENHANCED-IMAGE-MIB", "ceImageLocationIndex"), (0, "CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableIndex"))
if mibBuilder.loadTexts: ceImageInstallableEntry.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableEntry.setDescription('Each entry provides information about the installed software.')
ceImageInstallableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceImageInstallableIndex.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableIndex.setDescription('An integer that uniquely identifies an installable. It is allocated by the system and is unique per an installable entry.')
ceImageInstallableType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 2), CeImageInstallableType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceImageInstallableType.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableType.setDescription('The type of the software package.')
ceImageInstallableName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 3), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceImageInstallableName.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableName.setDescription('The name of the installable.')
ceImageInstallableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 4), CeImageInstallableStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceImageInstallableStatus.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableStatus.setDescription('The status of the software installable.')
ceImageInstallableMajorVerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageInstallableMajorVerNumber.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableMajorVerNumber.setDescription('Major version number of the software installable. Version is represented as major.minor.maintaince For example, 12 will be major number for version 12.3(18.1)S')
ceImageInstallableMinorVerNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageInstallableMinorVerNumber.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableMinorVerNumber.setDescription('Minor version number of the software installable. For example, minor number for the version 12.3(18.1)S is 3.')
ceImageInstallableRevisionVerNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageInstallableRevisionVerNum.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableRevisionVerNum.setDescription('Maintenance version string of the software installable. This string represents incremental change in the image over the minor release number. For example, revision number for the version 12.3(18.1)S is (18.1)S. ')
ceImageInstallableDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageInstallableDate.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableDate.setDescription('Date and time software was installed on the system.')
ceImageInstallableRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 2, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceImageInstallableRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, and deletion of rows in this table. When the row is active, installablestatus object may be modified to activate the installable. ')
ceImageTagTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3, 1), )
if mibBuilder.loadTexts: ceImageTagTable.setStatus('current')
if mibBuilder.loadTexts: ceImageTagTable.setDescription('A tag is a virtual label placed by user that indicates a point deemed to be stable. It can be used to rollback to a system after an install that negatively impacts the functionality of the system. It gives point in system where user can go back to, to remove installables installed after that point of time. When a tag is placed on an image an entry appears in this table. An entry is removed from this table when tag is removed from the system. The value of ceImageLocationIndex is used as index to get all the tags that are placed on the image at this location. ')
ceImageTagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-ENHANCED-IMAGE-MIB", "ceImageLocationIndex"), (0, "CISCO-ENHANCED-IMAGE-MIB", "ceImageTagName"))
if mibBuilder.loadTexts: ceImageTagEntry.setStatus('current')
if mibBuilder.loadTexts: ceImageTagEntry.setDescription('Each entry consists of information about a committed tag. ')
ceImageTagName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3, 1, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: ceImageTagName.setStatus('current')
if mibBuilder.loadTexts: ceImageTagName.setDescription('The name of the tag.')
ceImageTagListofInstIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageTagListofInstIndex.setStatus('current')
if mibBuilder.loadTexts: ceImageTagListofInstIndex.setDescription('List of all the installables which are committed using this tag. Installables are represented using installable index and each index is saperated by a space.')
ceImageTagDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceImageTagDate.setStatus('current')
if mibBuilder.loadTexts: ceImageTagDate.setDescription('Date and time this tag was committed.')
ceImageTagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 249, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceImageTagRowStatus.setStatus('current')
if mibBuilder.loadTexts: ceImageTagRowStatus.setDescription('The status of this conceptual row. This object is used to manage creation, and deletion of rows in this table. ')
ciscoEnhancedImageMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 3))
ciscoEnhancedImageMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 1))
ciscoEnhancedImageMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 2))
ciscoEnhancedImageMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 1, 1)).setObjects(("CISCO-ENHANCED-IMAGE-MIB", "ciscoEnhancedImageMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedImageMIBCompliance = ciscoEnhancedImageMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoEnhancedImageMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-ENHANCED-IMAGE-MIB.')
ceImageMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 1, 2)).setObjects(("CISCO-ENHANCED-IMAGE-MIB", "ciscoEnhancedImageMIBGroup"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageLocationMIBGroup"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableMIBGroup"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageTagMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceImageMIBComplianceRev1 = ceImageMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ceImageMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-ENHANCED-IMAGE-MIB.')
ciscoEnhancedImageMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 2, 1)).setObjects(("CISCO-ENHANCED-IMAGE-MIB", "ceImageName"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageFamily"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageFeature"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageVersion"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageMedia"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoEnhancedImageMIBGroup = ciscoEnhancedImageMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoEnhancedImageMIBGroup.setDescription('A collection of objects providing OS image characteristics.')
ceImageLocationMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 2, 2)).setObjects(("CISCO-ENHANCED-IMAGE-MIB", "ceImageLocation"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageLocationRunningStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceImageLocationMIBGroup = ceImageLocationMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ceImageLocationMIBGroup.setDescription('A collection of objects providing information about location of Installable Images on the system.')
ceImageInstallableMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 2, 3)).setObjects(("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableType"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableName"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableStatus"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableMajorVerNumber"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableMinorVerNumber"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableRevisionVerNum"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableDate"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageInstallableRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceImageInstallableMIBGroup = ceImageInstallableMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ceImageInstallableMIBGroup.setDescription('A collection of objects providing Operating system image and installables.')
ceImageTagMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 249, 3, 2, 4)).setObjects(("CISCO-ENHANCED-IMAGE-MIB", "ceImageTagListofInstIndex"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageTagDate"), ("CISCO-ENHANCED-IMAGE-MIB", "ceImageTagRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceImageTagMIBGroup = ceImageTagMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ceImageTagMIBGroup.setDescription('A collection of objects providing information about tags committed to the operating system image')
mibBuilder.exportSymbols("CISCO-ENHANCED-IMAGE-MIB", ceImageInstallable=ceImageInstallable, ceImageLocationRunningStatus=ceImageLocationRunningStatus, ciscoEnhancedImageMIBCompliances=ciscoEnhancedImageMIBCompliances, ceImageInstallableIndex=ceImageInstallableIndex, ceImageLocation=ceImageLocation, ceImage=ceImage, ceImageTagRowStatus=ceImageTagRowStatus, ceImageLocationTable=ceImageLocationTable, ceImageInstallableTable=ceImageInstallableTable, ceImageLocationIndex=ceImageLocationIndex, ceImageInstallableMinorVerNumber=ceImageInstallableMinorVerNumber, ceImageTagName=ceImageTagName, MediaType=MediaType, ceImageTagDate=ceImageTagDate, PYSNMP_MODULE_ID=ciscoEnhancedImageMIB, ceImageInstallableType=ceImageInstallableType, ceImageName=ceImageName, ceImageEntry=ceImageEntry, ceImageDescription=ceImageDescription, ceImageTagMIBGroup=ceImageTagMIBGroup, ceImageInstallableRowStatus=ceImageInstallableRowStatus, ceImageFamily=ceImageFamily, ceImageVersion=ceImageVersion, ceImageInstallableMajorVerNumber=ceImageInstallableMajorVerNumber, ciscoEnhancedImageMIBConformance=ciscoEnhancedImageMIBConformance, ciscoEnhancedImageMIB=ciscoEnhancedImageMIB, ceImageLocationEntry=ceImageLocationEntry, ceImageMIBComplianceRev1=ceImageMIBComplianceRev1, ceImageTags=ceImageTags, ceImageTagEntry=ceImageTagEntry, ceImageInstallableMIBGroup=ceImageInstallableMIBGroup, ciscoEnhancedImageMIBGroup=ciscoEnhancedImageMIBGroup, ceImageTagListofInstIndex=ceImageTagListofInstIndex, ceImageMedia=ceImageMedia, ceImageTagTable=ceImageTagTable, ceImageFeature=ceImageFeature, ceImageInstallableEntry=ceImageInstallableEntry, ciscoEnhancedImageMIBGroups=ciscoEnhancedImageMIBGroups, ciscoEnhancedImageMIBObjects=ciscoEnhancedImageMIBObjects, ceImageInstallableDate=ceImageInstallableDate, ceImageInstallableStatus=ceImageInstallableStatus, ceImageTable=ceImageTable, ciscoEnhancedImageMIBCompliance=ciscoEnhancedImageMIBCompliance, ceImageInstallableRevisionVerNum=ceImageInstallableRevisionVerNum, ceImageLocationMIBGroup=ceImageLocationMIBGroup, ceImageIndex=ceImageIndex, ceImageInstallableName=ceImageInstallableName)
