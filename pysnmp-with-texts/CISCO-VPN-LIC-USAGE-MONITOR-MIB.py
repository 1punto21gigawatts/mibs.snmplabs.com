#
# PySNMP MIB module CISCO-VPN-LIC-USAGE-MONITOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VPN-LIC-USAGE-MONITOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:19:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Gauge32, Counter64, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, ObjectIdentity, NotificationType, Unsigned32, MibIdentifier, TimeTicks, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter64", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "ObjectIdentity", "NotificationType", "Unsigned32", "MibIdentifier", "TimeTicks", "IpAddress", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoVpnLicUsageMonitorMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 816))
ciscoVpnLicUsageMonitorMIB.setRevisions(('2013-09-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVpnLicUsageMonitorMIB.setRevisionsDescriptions(('Latest version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVpnLicUsageMonitorMIB.setLastUpdated('201309130000Z')
if mibBuilder.loadTexts: ciscoVpnLicUsageMonitorMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVpnLicUsageMonitorMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-<list>@cisco.com')
if mibBuilder.loadTexts: ciscoVpnLicUsageMonitorMIB.setDescription('Acronyms and Definitions The following acronyms and terms are used in this document: IPSec: Secure IP Protocol VPN: Virtual Private Network LAN: Local Area Network Group: A collection of VPN license usage users grouped and managed together as a single entity for administrative convenience. SVC: SSL VPN Client LicServer: Multi-site shared License server. LicBkpServer: Multi-site shared License Backup server. LicClient: Multi-site shared License client. Overview of the MIB This is a MIB Module for monitoring licenses in Virtual Private Networks. The MIB seeks to create a common model of VPN License Usage across different VPN implementations. The MIB defines counters and objects of interest to usage/message monitoring in a way which is independent of which VPN technology is requested. MIB contains four major groups of objects which are used to get VPN License Usage information a) VPN Lic device type This section defines if the device is acting as a server, backupserver, client(participant) in a shared license system. b) VPN License Server Usage group This section defines total network license usage information and also server information as well along with backup server address. service. c) VPN License Backup server Usage group This section defines backup license server information in detail, along with statistics of hello, sync and update messages from server. d) VPN License client Usage group This section defines license usage information by this client. along with statistics about registration, get request,release request and transfer request.')
class VPNLicType(TextualConvention, Integer32):
    description = 'Type of VPN supporting shared license other - other VPN type anyconnectpremium - anyconnect VPN type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("anyconnectpremium", 2))

class VPNLicDeviceRole(TextualConvention, Integer32):
    description = "Role the device is playing in shared license system. If it's acting as server/backup server, it also acts as license client. server - License server acting as both server and client. bkpserver - backup license server acting as both backup server and client. client - Client."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("server", 1), ("bkpserver", 2), ("client", 3))

class LicServerStatus(TextualConvention, Integer32):
    description = 'Status of a license server, indicating if the server is currently active or backup (inactive). *Note* : backup will still be acting as a client. active - Server is active. inactive - Server is inactive. expired - Server expired.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("inactive", 2), ("expired", 3))

class LicServerRegistered(TextualConvention, Integer32):
    description = 'State of the Backup License server registered as a participant. no - ASA is not registered. yes - ASA is registered. invalid - Unknown value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("no", 1), ("yes", 2), ("invalid", 3))

ciscoVpnLicUsageMonitorMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 0))
ciscoVpnLicUsageMonitorMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 1))
ciscoVpnLicUsageMonitorMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 1, 1))
cvpnLicDeviceRole = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 1), VPNLicDeviceRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicDeviceRole.setStatus('current')
if mibBuilder.loadTexts: cvpnLicDeviceRole.setDescription('ASA Device Role in a shared License System as server/backup/client.')
cvpnLicServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2))
cvpnLicBkpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3))
cvpnLicClient = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4))
cvpnLicServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerAddrType.setDescription('IP address type of Shared License Server.')
cvpnLicServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerAddr.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerAddr.setDescription('IP address of Shared License Server.')
cvpnLicBkpSerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpSerAddrType.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpSerAddrType.setDescription('IP address Type of Shared License Backup Server.')
cvpnLicBkpSerAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpSerAddr.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpSerAddr.setDescription('IP address of Shared License Backup Server.')
cvpnLicServerVer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerVer.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerVer.setDescription('Shared License Server version.')
cvpnLicServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 6), LicServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerStatus.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerStatus.setDescription('Shared License Server Status.')
cvpnLicServerTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 7), )
if mibBuilder.loadTexts: cvpnLicServerTable.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerTable.setDescription('This table lists the Shared License Usage Information per VPN type. For each VPN type, it lists Total capacity, current usage, total available')
cvpnLicServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 7, 1), ).setIndexNames((0, "CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerVPNLicType"))
if mibBuilder.loadTexts: cvpnLicServerEntry.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerEntry.setDescription('Each entry contains the statistics of License usage like Total capacity, current usage, total available.')
cvpnLicServerVPNLicType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 7, 1, 1), VPNLicType())
if mibBuilder.loadTexts: cvpnLicServerVPNLicType.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerVPNLicType.setDescription('Statistics for a particular VPN type.')
cvpnLicServerNumLicCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 7, 1, 2), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerNumLicCapacity.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerNumLicCapacity.setDescription('Total number of shared license capacity for network for this VPN type.')
cvpnLicServerNumLicAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 7, 1, 3), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerNumLicAvail.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerNumLicAvail.setDescription('Available License in network for this VPN type.')
cvpnLicServerUtilized = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 2, 7, 1, 4), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerUtilized.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerUtilized.setDescription('Number of Licenses utilised by the entire network for this License type.')
cvpnLicBkpServerAddrType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerAddrType.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerAddrType.setDescription('IP address type of Shared License Backup Server')
cvpnLicBkpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerAddr.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerAddr.setDescription('IP address of Shared License Backup Server')
cvpnLicBkpServerDevID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerDevID.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerDevID.setDescription('Device ID of the shared license backup server.')
cvpnLicBkpServerVer = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 4), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerVer.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerVer.setDescription('Shared License Backup Server version.')
cvpnLicBkpServerRegd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 5), LicServerRegistered()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerRegd.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerRegd.setDescription('Shared License Backup Server Registered information.')
cvpnLicBkpServerHAPeerDevID = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerHAPeerDevID.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerHAPeerDevID.setDescription('Device ID of the shared license backup server HA Peer.')
cvpnLicBkpServerHAPeerRegd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 7), LicServerRegistered()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerHAPeerRegd.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerHAPeerRegd.setDescription('Shared License Backup Server HA Peer registered information')
cvpnLicBkpServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 8), LicServerStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicBkpServerStatus.setStatus('current')
if mibBuilder.loadTexts: cvpnLicBkpServerStatus.setDescription('Shared License Backup Server Status.')
cvpnLicServerHelloTx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerHelloTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerHelloTx.setDescription('The total number of Hello packets transmitted from this license server.')
cvpnLicServerHelloRx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerHelloRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerHelloRx.setDescription('The total number of Hello packets received by the license server.')
cvpnLicServerHelloError = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerHelloError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerHelloError.setDescription('The total number of erroneous Hello packet received. e.g. request received with no Rx data.')
cvpnLicServerSyncTx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerSyncTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerSyncTx.setDescription('The total number of Sync packets transmitted from this license server.')
cvpnLicServerSyncRx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerSyncRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerSyncRx.setDescription('The total number of Sync packets received by the license server.')
cvpnLicServerSyncError = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerSyncError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerSyncError.setDescription('The total number of erroneous Sync packet received e.g. request received with no Rx data.')
cvpnLicServerUpdateTx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerUpdateTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerUpdateTx.setDescription('The total number of Update packets transmitted from this license server.')
cvpnLicServerUpdateRx = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerUpdateRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerUpdateRx.setDescription('The total number of Update packets received by the license server.')
cvpnLicServerUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 3, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicServerUpdateError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicServerUpdateError.setDescription('The total number of erroneous Update packet received. e.g. request received with no Rx data.')
cvpnLicClntInfoTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1), )
if mibBuilder.loadTexts: cvpnLicClntInfoTable.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoTable.setDescription('This table lists all the License LicClnt Information. For each LicClnt, it lists the attributes (Hostname,Device ID,Current usage, High,Registration Tx/Rx/Error,Get Tx/Rx/Error Release Tx/Rx/Error, Transfer Tx/Rx/Error')
cvpnLicClntInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1), ).setIndexNames((0, "CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntVPNLicType"), (0, "CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoDeviceID"))
if mibBuilder.loadTexts: cvpnLicClntInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoEntry.setDescription('Each entry contains the attributes, statistics of a shared license client.')
cvpnLicClntVPNLicType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 1), VPNLicType())
if mibBuilder.loadTexts: cvpnLicClntVPNLicType.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntVPNLicType.setDescription('VPN Type of Shared License client')
cvpnLicClntInfoDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cvpnLicClntInfoDeviceID.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoDeviceID.setDescription('Device ID of the shared license client.')
cvpnLicClntInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoHostName.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoHostName.setDescription('The Hostname of the shared license Client.')
cvpnLicClntInfoPlatLmt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 4), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoPlatLmt.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoPlatLmt.setDescription('Platform limit for max License on this client.')
cvpnLicClntInfoCurUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 5), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoCurUsage.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoCurUsage.setDescription('Current Usage of Shared License by this device.')
cvpnLicClntInfoHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 6), Unsigned32()).setUnits('license').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoHigh.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoHigh.setDescription('The maximum number of licenses provided by the license server to the client.')
cvpnLicClntInfoRegReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoRegReqTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoRegReqTx.setDescription('The total number of Registration Request packets transmitted on this client for this VPN type.')
cvpnLicClntInfoRegReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoRegReqRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoRegReqRx.setDescription('The total number of Registration Request packets received on this client for this VPN type.')
cvpnLicClntInfoRegReqError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoRegReqError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoRegReqError.setDescription('The total number of Registration Request packet errors on this client for this VPN type.')
cvpnLicClntInfoGetReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoGetReqTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoGetReqTx.setDescription('The total number of Get Request packets transmitted on this client for this VPN type.')
cvpnLicClntInfoGetReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoGetReqRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoGetReqRx.setDescription('The total number of Get Request packets Received on this client for this VPN type.')
cvpnLicClntInfoGetReqError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoGetReqError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoGetReqError.setDescription('The total number of Get Request packet errors on this client for this VPN type.')
cvpnLicClntInfoRelReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoRelReqTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoRelReqTx.setDescription('The total number of Release Request packets transmitted on this client for this VPN type.')
cvpnLicClntInfoRelReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoRelReqRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoRelReqRx.setDescription('The total number of Release Request packets received on this client for this VPN type.')
cvpnLicClntInfoRelReqError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoRelReqError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoRelReqError.setDescription('The total number of Release Request packet errors on this client for this VPN type.')
cvpnLicClntInfoTransferReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoTransferReqTx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoTransferReqTx.setDescription('The total number of Transfer Request packets transmitted on this client for this VPN type.')
cvpnLicClntInfoTransferReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoTransferReqRx.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoTransferReqRx.setDescription('The total number of Transfer Request packets received on this client for this VPN type.')
cvpnLicClntInfoTransferReqError = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 816, 0, 4, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cvpnLicClntInfoTransferReqError.setStatus('current')
if mibBuilder.loadTexts: cvpnLicClntInfoTransferReqError.setDescription('The total number of Transfer Request packet errros on this client for this VPN type.')
ciscoVpnLicUsageMonitorMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 816, 1, 2))
ciscoVpnLicUsageMonitorMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 816, 1, 1, 1)).setObjects(("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "ciscoVPNSharedLicUsageMandatoryGroup"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "ciscoVPNSharedLicOptUsageGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVpnLicUsageMonitorMIBCompliance = ciscoVpnLicUsageMonitorMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoVpnLicUsageMonitorMIBCompliance.setDescription('The compliance statement for SNMP entities the Cisco VPN License Usage Monitoring MIB.')
ciscoVPNSharedLicUsageMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 816, 1, 2, 1)).setObjects(("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicDeviceRole"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerAddrType"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerAddr"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpSerAddrType"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpSerAddr"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerVer"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerStatus"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerNumLicCapacity"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerNumLicAvail"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerUtilized"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoHostName"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoPlatLmt"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoCurUsage"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoHigh"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVPNSharedLicUsageMandatoryGroup = ciscoVPNSharedLicUsageMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVPNSharedLicUsageMandatoryGroup.setDescription('This group categorizes mandatory objects pertaining to usage statistics of shared licenses')
ciscoVPNSharedLicOptUsageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 816, 1, 2, 2)).setObjects(("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerAddrType"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerAddr"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerDevID"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerVer"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerRegd"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerHAPeerDevID"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerHAPeerRegd"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicBkpServerStatus"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerHelloTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerHelloRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerHelloError"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerSyncTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerSyncRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerSyncError"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerUpdateTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerUpdateRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicServerUpdateError"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoRegReqTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoRegReqRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoRegReqError"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoGetReqTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoGetReqRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoGetReqError"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoRelReqTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoRelReqRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoRelReqError"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoTransferReqTx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoTransferReqRx"), ("CISCO-VPN-LIC-USAGE-MONITOR-MIB", "cvpnLicClntInfoTransferReqError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoVPNSharedLicOptUsageGroup = ciscoVPNSharedLicOptUsageGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoVPNSharedLicOptUsageGroup.setDescription('This group categorizes optional objects pertaining to usage statistics of shared licenses')
mibBuilder.exportSymbols("CISCO-VPN-LIC-USAGE-MONITOR-MIB", cvpnLicServerHelloTx=cvpnLicServerHelloTx, LicServerRegistered=LicServerRegistered, cvpnLicClntInfoGetReqError=cvpnLicClntInfoGetReqError, cvpnLicBkpServer=cvpnLicBkpServer, cvpnLicClntInfoPlatLmt=cvpnLicClntInfoPlatLmt, cvpnLicServerHelloError=cvpnLicServerHelloError, LicServerStatus=LicServerStatus, ciscoVpnLicUsageMonitorMIBObjects=ciscoVpnLicUsageMonitorMIBObjects, cvpnLicDeviceRole=cvpnLicDeviceRole, cvpnLicBkpServerAddrType=cvpnLicBkpServerAddrType, cvpnLicClntInfoTable=cvpnLicClntInfoTable, cvpnLicServerTable=cvpnLicServerTable, cvpnLicBkpServerHAPeerRegd=cvpnLicBkpServerHAPeerRegd, cvpnLicClntInfoRegReqError=cvpnLicClntInfoRegReqError, cvpnLicClntInfoEntry=cvpnLicClntInfoEntry, cvpnLicServerEntry=cvpnLicServerEntry, cvpnLicClntInfoCurUsage=cvpnLicClntInfoCurUsage, VPNLicDeviceRole=VPNLicDeviceRole, cvpnLicServerAddrType=cvpnLicServerAddrType, cvpnLicClntInfoHostName=cvpnLicClntInfoHostName, cvpnLicClntInfoGetReqRx=cvpnLicClntInfoGetReqRx, cvpnLicServerNumLicCapacity=cvpnLicServerNumLicCapacity, cvpnLicClntInfoRegReqRx=cvpnLicClntInfoRegReqRx, cvpnLicClntInfoRegReqTx=cvpnLicClntInfoRegReqTx, cvpnLicBkpServerDevID=cvpnLicBkpServerDevID, cvpnLicServerSyncError=cvpnLicServerSyncError, ciscoVPNSharedLicUsageMandatoryGroup=ciscoVPNSharedLicUsageMandatoryGroup, cvpnLicServerSyncRx=cvpnLicServerSyncRx, cvpnLicBkpServerAddr=cvpnLicBkpServerAddr, cvpnLicServerUpdateError=cvpnLicServerUpdateError, cvpnLicServerUpdateRx=cvpnLicServerUpdateRx, cvpnLicBkpSerAddrType=cvpnLicBkpSerAddrType, cvpnLicBkpServerVer=cvpnLicBkpServerVer, cvpnLicClntInfoDeviceID=cvpnLicClntInfoDeviceID, cvpnLicServerVer=cvpnLicServerVer, cvpnLicClient=cvpnLicClient, VPNLicType=VPNLicType, cvpnLicClntInfoTransferReqError=cvpnLicClntInfoTransferReqError, cvpnLicServerUtilized=cvpnLicServerUtilized, ciscoVpnLicUsageMonitorMIBGroups=ciscoVpnLicUsageMonitorMIBGroups, cvpnLicClntInfoRelReqRx=cvpnLicClntInfoRelReqRx, ciscoVpnLicUsageMonitorMIB=ciscoVpnLicUsageMonitorMIB, cvpnLicServerVPNLicType=cvpnLicServerVPNLicType, cvpnLicClntInfoTransferReqRx=cvpnLicClntInfoTransferReqRx, cvpnLicClntInfoGetReqTx=cvpnLicClntInfoGetReqTx, cvpnLicClntInfoTransferReqTx=cvpnLicClntInfoTransferReqTx, cvpnLicBkpServerStatus=cvpnLicBkpServerStatus, PYSNMP_MODULE_ID=ciscoVpnLicUsageMonitorMIB, cvpnLicClntInfoRelReqTx=cvpnLicClntInfoRelReqTx, cvpnLicServerStatus=cvpnLicServerStatus, ciscoVpnLicUsageMonitorMIBCompliances=ciscoVpnLicUsageMonitorMIBCompliances, cvpnLicServerNumLicAvail=cvpnLicServerNumLicAvail, cvpnLicServerSyncTx=cvpnLicServerSyncTx, ciscoVPNSharedLicOptUsageGroup=ciscoVPNSharedLicOptUsageGroup, ciscoVpnLicUsageMonitorMIBCompliance=ciscoVpnLicUsageMonitorMIBCompliance, cvpnLicClntVPNLicType=cvpnLicClntVPNLicType, ciscoVpnLicUsageMonitorMIBConform=ciscoVpnLicUsageMonitorMIBConform, cvpnLicServerUpdateTx=cvpnLicServerUpdateTx, cvpnLicServerHelloRx=cvpnLicServerHelloRx, cvpnLicServer=cvpnLicServer, cvpnLicBkpServerRegd=cvpnLicBkpServerRegd, cvpnLicClntInfoRelReqError=cvpnLicClntInfoRelReqError, cvpnLicBkpServerHAPeerDevID=cvpnLicBkpServerHAPeerDevID, cvpnLicServerAddr=cvpnLicServerAddr, cvpnLicBkpSerAddr=cvpnLicBkpSerAddr, cvpnLicClntInfoHigh=cvpnLicClntInfoHigh)
