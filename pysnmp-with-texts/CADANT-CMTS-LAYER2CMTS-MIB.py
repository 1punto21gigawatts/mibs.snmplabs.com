#
# PySNMP MIB module CADANT-CMTS-LAYER2CMTS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-CMTS-LAYER2CMTS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:44:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Timeout, BridgeId = mibBuilder.importSymbols("BRIDGE-MIB", "Timeout", "BridgeId")
cadLayer2, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadLayer2")
PortId, SecondaryState, CadBridgePortType, CardId, DuplexStatus, CadBridgeGroupId, MacPortIdWithInvalid, MacPortId, PrimaryState, PortType, AdminState, CerCardType, CerCardSubType = mibBuilder.importSymbols("CADANT-TC", "PortId", "SecondaryState", "CadBridgePortType", "CardId", "DuplexStatus", "CadBridgeGroupId", "MacPortIdWithInvalid", "MacPortId", "PrimaryState", "PortType", "AdminState", "CerCardType", "CerCardSubType")
AttributeMask, IfDirection = mibBuilder.importSymbols("DOCS-IF3-MIB", "AttributeMask", "IfDirection")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
InetVersion, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetVersion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, NotificationType, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Gauge32, MibIdentifier, ObjectIdentity, ModuleIdentity, Bits, iso, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Gauge32", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Bits", "iso", "TimeTicks", "Counter32")
TruthValue, DisplayString, RowStatus, TextualConvention, TimeInterval, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention", "TimeInterval", "MacAddress")
cadLayer2Mib = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1))
cadLayer2Mib.setRevisions(('2015-08-25 00:00', '2015-06-17 00:00', '2015-04-15 00:00', '2015-04-01 00:00', '2015-01-21 00:00', '2015-01-20 00:00', '2014-12-09 00:00', '2014-12-08 00:00', '2014-12-03 00:00', '2014-11-18 00:00', '2014-10-15 00:00', '2014-10-14 00:00', '2014-09-19 00:00', '2014-08-01 00:00', '2014-07-03 00:00', '2014-06-24 00:00', '2014-03-10 00:00', '2014-01-15 00:00', '2013-10-30 00:00', '2013-08-08 00:00', '2013-05-30 00:00', '2013-05-17 00:00', '2013-05-08 00:00', '2013-04-29 00:00', '2013-03-25 00:00', '2013-01-03 00:00', '2012-11-20 00:00', '2011-10-05 00:00', '2011-08-17 00:00', '2011-03-03 00:00', '2010-08-10 00:00', '2010-06-23 00:00', '2010-03-01 00:00', '2009-10-22 00:00', '2009-10-12 00:00', '2009-09-02 00:00', '2009-07-17 00:00', '2009-01-12 00:00', '2009-01-07 00:00', '2009-01-05 00:00', '2008-11-11 00:00', '2008-09-30 00:00', '2008-02-08 00:00', '2008-02-06 00:00', '2008-01-22 00:00', '2008-01-03 00:00', '2007-12-14 00:00', '2007-08-28 00:00', '2007-08-13 00:00', '2007-05-31 00:00', '2007-05-14 00:00', '2007-05-08 00:00', '2007-03-01 00:00', '2007-02-07 00:00', '2007-02-05 00:00', '2006-11-27 00:00', '2006-11-01 00:00', '2006-10-13 00:00', '2006-09-12 00:00', '2006-09-01 00:00', '2006-08-02 00:00', '2006-01-31 00:00', '2006-01-27 00:00', '2006-01-04 00:00', '2005-10-24 00:00', '2003-09-26 00:00', '2002-10-21 00:00', '2001-10-18 00:00', '2001-09-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadLayer2Mib.setRevisionsDescriptions(('Change range of cadIfMacDomainDsOfdmProfileRecoveryGuardTime to (0..3600)', 'Add cadIfMacDomainGracefulTcsReductionEnabled for the US Channel Bonding Graceful Reduction feature.', 'Add cadIfMacDomainDsOfdmProfileRecoveryGuardTime', 'Add cadIfMacDomainEnergyMgt1x1Enabled', 'Add cadDot3adAggSystemID to cadDot3adAggTable.', 'Add cadMacChlDirection.', 'Support OFDM capability in MAC port.', 'Support CerCardSubType dcamOfdmAnnexB', 'Add dchannelOfdm to PortType', 'Add cadIfMacDomainDocsis31Enabled to cadIfMacDomain table.', 'Change default value of cadDot3adSystemPriority from 0 to 32768', 'Support 384 downstream channels per DCAM-B', 'Add cadAgingArpCacheSearchingCableUnicast, cadAgingArpCacheSearchingCableBroadcast, cadAgingNDCacheSearchingCableUnicast, cadAgingNDCacheSearchingCableMulticast', 'PortType change: remove dchannelSdv(13) and dchannelBroadcast(14)', 'Update cadIfMacDomainTcsSizeLimit description', 'Change cadDot3adAggId maximum value from 10 to 8', 'Add cadIfMacDomainTcsSizeLimit', 'Add cerIpGroup.', 'Add cadDot3adAggTable and cadDot3adSystemPriority.', 'Add cadIfMacDomainDynamicRccMultiTunerEnabled', 'Change default value of cadIfMacDomainT4TimeoutMultiplierEnabled to false', 'Add cadIfMacDomainT4TimeoutMultiplierEnabled', 'Add cadIfMacDomainCmTxPwrExtentionPreRegistrationEnabled cadIfMacDomainCmTxPwrExtentionPostRegistrationEnabled', 'Add cadIfMacDomainEnforceRulesEnabled. ', 'Add 85000000 to cadIfMacDomainUpChannelMaxFrequency', 'Add support for configuring legacy DSG or DSG 3.0 support on a cable-mac.', 'Support loopback interfaces.', 'Change SYNTAX of cadMacChlCardSubType to CerCardSubType.', 'Change SYNTAX of cadBgpCardType to CerCardType.', 'Change CadTftpEnforceType and CadDynamicSecretType.', 'Change minimum of cadAgingArpCacheAgingInterval to 10 minutes from 3 minutes', 'change MAX-ACCESS of cadifMacDomainMulticastEncryption to read-only.', 'Change cadIfMacDomainDownChannelMaxFrequency highest center frequency to 999MHz.', 'Use a single port type.', 'Change cadIfMacDomainDownChannelMaxFrequency highest frequency edge to 1002MHz.', 'Add cadAgingNDCacheAgingInterval, cadAgingNDCacheSearchingRateLimit, cadAgingNDCacheSearchingMaxNumber, cadAgingNDCacheNotPresentRateLimit, cadAgingNDCacheNotPresentMaxNumber, cadAgingNDCacheNotPresentMaxTime, cadAgingNDCacheNotPresentMinTime, cadAgingNDCacheSearchingGlobalMaxRate, cadAgingNDCacheNotPresentGlobalMaxRate', 'Add cadIfMacDomainBpi2Mandatory.', 'Add cadIfMacDomainDownChannelMaxFrequency, cadIfMacDomainDownChannelMinFrequency and cadIfMacDomainUpChannelMaxFrequency to support mixed Annex configuration.', ' Change MAX-ACCESS of cadIfMacDomainAnnex to read-write.', 'Restrict size of name and description strings.', 'Change SYNTAX of cadAgingArpCacheAgingInterval.', ' Add cadIfMacDomainUsbgDynEnable.', ' Change MAX-ACCESS of cadIfMacDomainAnnex to read-only.', ' Add cadIfMacDomainDpId.', ' Change default value of cadMacChlSfProvAttrMask back to 00000000H.', ' Change default for MAC domain multicast encryption.', 'Add cadIfMacDomainRccDynEnalbe, cadIfMacDomainDsbgDynEnable, cadIfMacDomainDsbgReseqWaitTime and cadIfMacDomainDsbgReseqWarnThrshld to cadIfMacDomain table.', 'Add cadIfMacDomainRcpReportMode, cadIfMacDomainRegRspToOverride, , cadIfMacDomainMultRxChModeEnabled, cadIfMacDomainCmUdcEnabled, cadIfMacDomainSendUdcRulesEnabled. Removed cadIfMacDomainTftpForce, cadIfMacDomainAltProvModeEnabled and cadIfMacDomainIpMgmtMode. Modified Syntax of cadIfMacDomainIpProvMode.', 'Add cadifMacDomainMulticastEncryption to cadIfMacDomain table.', 'Add cadMacChlIsPriCapableDs and cadMacChlSfProvAttrMask MIB objects to cadMacChlTable.', 'replace cadUpSupervisionTable with cadUpSupervisionCfgTable and cadUpSupervisionStatusTable.', 'set default value of cadMacPortTrapInh to e0h', 'change status of cadBgLeaderBgpId to current.', 'Remove cadIfMacDomainDsTokenBucket.', 'Remove cadMacPortBgIndex and cadMacPortBundle.', 'Remove more unused STP parameters.', 'Remove unused CadStp objects.', 'Add cadMacChlCardNumber, cadMacChlPortId, and cadMacChlPortType.', 'Add cadIfMacDomainAnnex. Change syntax of cadMacPortBundle from MacPortId to MacPortIdWithInvalid', 'Add cadMacPortDescription, cadMacPortTrapInh, and cadMacPortDplxStatus.', 'Add cadMacPortTable, cadIfMacDomainTable, cadMacChlTable, and cadUpSupervisionTable.', 'Change MIB objects cadAgingCPEAgingInterval and cadAgingSFAgingInterval to accept only default value.', 'Change default value of cadAgingArpCacheNotPresentMinTime from 3 to 1', 'Add MIB objects for ARP global throttling', 'Add MIB objects for Arp Throttling feature.', 'Refresh SCM bridge port handling.', 'Add idle MAC aging interval to aging group.', 'Created cadBridgeGroupStatsTable.', 'Add arp aging interval to aging group.',))
if mibBuilder.loadTexts: cadLayer2Mib.setLastUpdated('201508250000Z')
if mibBuilder.loadTexts: cadLayer2Mib.setOrganization('ARRIS Group, Inc.')
if mibBuilder.loadTexts: cadLayer2Mib.setContactInfo('support@arris.com')
if mibBuilder.loadTexts: cadLayer2Mib.setDescription(" This MIB module contains the following information: 1) The concept of bridge groups and bridge ports 2) The policy governed the assigment of Internet Service Provider's subnet addresses per bridge group 3) Support for per bridge group spanning tree")
class CadTftpEnforceType(TextualConvention, Integer32):
    description = "Cable TFTP Enforce configuration option types. The value `disabled' implies cable TFTP Enforce is inhibited. Any value other than `disabled' indicates some form of TFTP Enforce is active. The value `enabled' implies that if the TFTP Enforce checks fail, the modem will be denied registration. `mark-only ' implies that if the TFTP Enforce checks fail, the modem will be marked as having failed but will be allowed to register. ` lock ' implies that if the TFTP Enforce checks fail, the modem will be marked as having failed and will be allowed to register, but will have its bandwidth limited. ` block ' implies that if the TFTP Enforce checks fail, the modem will be marked as having failed and will be allowed to register, but will have its bandwidth limited and will not be allowed to learn any CPEs."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1), ("mark-only", 2), ("lock", 3), ("block", 4))

class CadDynamicSecretType(TextualConvention, Integer32):
    description = "Cable Dynamic Secret configuration option types. The value `disabled' implies cable Dynamic Secret is inhibited. Any value other than `disabled' indicates some form of Dynamic Secret is active. The value `enabled' implies that if the Dynamic Secret checks fail, the modem will be denied registration. `mark' implies that if the Dynamic Secret checks fail, the modem will be marked as having failed but will be allowed to register. ` lock ' implies that if the Dynamic Secret checks fail, the modem will be marked as having failed and will be allowed to register, but will have its bandwidth limited. ` block ' implies that if the Dynamic Secret checks fail, the modem will be marked as having failed and will be allowed to register, but will have its bandwidth limited and will not be allowed to learn any CPEs."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("disabled", 0), ("reject", 1), ("mark", 2), ("lock", 3), ("block", 4))

cadBridgeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1))
cadBridgeGroupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 1))
cadBridgeGroupMaxNum = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBridgeGroupMaxNum.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupMaxNum.setDescription(' The maximum number of bridge groups supported. ')
cadBridgeGroupTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 2), )
if mibBuilder.loadTexts: cadBridgeGroupTable.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupTable.setDescription('A table (and along with other supported tables) contains bridge group information. A bridge group is actually a Port-Vlan concept which consists of one or more E-ports and one or more D-ports. Each D-port includes its associated U-ports and is further subdivided into 3 sub-ports associated with different types of traffic. The CM sub-port carries traffic for the cable-modem itself. The CPEAUTH sub-port carries traffic for an authorized CPE behind a cable-modem. The CPEUNAUTH sub-port carries traffic for an unauthorized CPE behind a cable-modem. Initially, all ports belong to the OAM&P bridge group when a card is first provisioned. Bridge ports can only exist in one bridge group at a time and can be moved between them. Generally, the CPEAUTH sub-port on the D card would be in a bridge group with an E port that had access to the internet and the DHCP servers for the ISP used by the subscriber. The CM sub-port would be in a bridge group with an E port that had access to the DHCP servers and administrative controls for the MSO. The CPEUNAUTH sub-port would be in a bridge group that included access to a sign-on server. ')
cadBridgeGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 2, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadBgIndex"))
if mibBuilder.loadTexts: cadBridgeGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupEntry.setDescription("A conceptual row containing information about different types of CMTS's broadcast domains and their configuration parameters. ")
cadBgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 2, 1, 1), CadBridgeGroupId())
if mibBuilder.loadTexts: cadBgIndex.setStatus('current')
if mibBuilder.loadTexts: cadBgIndex.setDescription(' CMTS broadcast domain Id. Used as index. It has a value from 1 to the value of bridgeGroupMaxNum ')
cadBgName = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadBgName.setStatus('current')
if mibBuilder.loadTexts: cadBgName.setDescription(' Symbolic Name of the domain. ')
cadBgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadBgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadBgRowStatus.setDescription(' Control Object for row creation and deletion. ')
cadBridgeGroupStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 10), )
if mibBuilder.loadTexts: cadBridgeGroupStatsTable.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupStatsTable.setDescription('A table which contains read-only (status) information on bridge groups.')
cadBridgeGroupStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 10, 1), )
cadBridgeGroupEntry.registerAugmentions(("CADANT-CMTS-LAYER2CMTS-MIB", "cadBridgeGroupStatsEntry"))
cadBridgeGroupStatsEntry.setIndexNames(*cadBridgeGroupEntry.getIndexNames())
if mibBuilder.loadTexts: cadBridgeGroupStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupStatsEntry.setDescription('A conceptual row containing read-only information on bridge groups.')
cadBgLeaderBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 10, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgLeaderBgpId.setStatus('current')
if mibBuilder.loadTexts: cadBgLeaderBgpId.setDescription(' The bridge port that is the leader for this bridge group. If there are no bridge ports in this bridge group or there are multiple bridge ports in this bridge group but none of them make a clear leader, then cadBgLeaderBgpId is zero. Otherwise, it is the cadBgpId of the leader bridge port for this bridge group.')
cadBgMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 10, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadBgMacAddress.setDescription(' The mac address of the layer 2 entity associated with this bridge group. If there are no layer 2 entities associated with the bridge group, this value will be zero. In the case of a bundle, this will be the mac address of the bundle group leader.')
cadBridgePortTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11), )
if mibBuilder.loadTexts: cadBridgePortTable.setStatus('current')
if mibBuilder.loadTexts: cadBridgePortTable.setDescription('A table contain broadcast domain Ports Configuration (i.e. E ports, D-ports, M-Ports...etc)')
cadBridgePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadBgpId"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadBgpType"))
if mibBuilder.loadTexts: cadBridgePortEntry.setStatus('current')
if mibBuilder.loadTexts: cadBridgePortEntry.setDescription('A conceptual row containing port configuration within a bridge group. ')
cadBgpGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 1), CadBridgeGroupId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadBgpGroupId.setStatus('current')
if mibBuilder.loadTexts: cadBgpGroupId.setDescription('Bridge group index. The same index used in bridgeGroupTable to identify a bridge group. ')
cadBgpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadBgpId.setStatus('current')
if mibBuilder.loadTexts: cadBgpId.setDescription('The secondary index of this table identifies a port in a given bridge group.')
cadBgpCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 3), CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpCardId.setStatus('current')
if mibBuilder.loadTexts: cadBgpCardId.setDescription(' The slot number of the card containing this bridge port. ')
cadBgpCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 4), CerCardType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpCardType.setStatus('current')
if mibBuilder.loadTexts: cadBgpCardType.setDescription(" The primary Card Type. Refer to Cadant's Equipment Mib for CerCardType definition.")
cadBgpPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 5), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpPortId.setStatus('current')
if mibBuilder.loadTexts: cadBgpPortId.setDescription(' The port number of the physical port containing this bridge port. ')
cadBgpType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 6), CadBridgePortType())
if mibBuilder.loadTexts: cadBgpType.setStatus('current')
if mibBuilder.loadTexts: cadBgpType.setDescription(' The type of this bridge port. ')
cadBgpBundleGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 10), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadBgpBundleGroupId.setStatus('current')
if mibBuilder.loadTexts: cadBgpBundleGroupId.setDescription('The bridge port which is the bundle leader. If this value is 0, then this port is not part of a bundle group. If this value is equal to its cadBgpId, then this port is the bundle leader for its group. Otherwise, this value must point to a valid bridge port.')
cadBgpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 11, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadBgpMacAddress.setDescription('The current mac address associated with the bridge port. Initially, this is the address associated with the MAC or Ethernet port, but can change as a result of bundling or sparing operations.')
cadBridgeGroupPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12), )
if mibBuilder.loadTexts: cadBridgeGroupPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupPortStatusTable.setDescription('A table which contains status information on bridge group members. ')
cadBridgeGroupPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadBgpStatGroupId"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadBgpStatMacIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadBgpStatPhyIfIndex"))
if mibBuilder.loadTexts: cadBridgeGroupPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadBridgeGroupPortStatusEntry.setDescription('A conceptual row containing status information on possible bridge group members. ')
cadBgpStatGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12, 1, 1), CadBridgeGroupId())
if mibBuilder.loadTexts: cadBgpStatGroupId.setStatus('current')
if mibBuilder.loadTexts: cadBgpStatGroupId.setDescription(' The bridge group id to which this physical interface belongs. ')
cadBgpStatMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadBgpStatMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadBgpStatMacIfIndex.setDescription(' The ifIndex of the layer 2 entity associated with the bridge group. ')
cadBgpStatPhyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12, 1, 3), InterfaceIndex())
if mibBuilder.loadTexts: cadBgpStatPhyIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadBgpStatPhyIfIndex.setDescription(' The ifIndex of the physical entity associated with the bridge group. This ifIndex corresponds to an actual physical port on the C4. For NAM ports that are both a layer 2 and physical entity, this value may be the same as as the cadBgmemStatMacIfIndex. ')
cadBgpStatPhyCardId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12, 1, 4), CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpStatPhyCardId.setStatus('current')
if mibBuilder.loadTexts: cadBgpStatPhyCardId.setDescription(' The cardId of the slot associated with the physical ifindex. ')
cadBgpStatPhyPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 12, 1, 5), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadBgpStatPhyPortId.setStatus('current')
if mibBuilder.loadTexts: cadBgpStatPhyPortId.setDescription(' The portId of the port associated with the physical ifindex. ')
cadDot3adAggTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13), )
if mibBuilder.loadTexts: cadDot3adAggTable.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggTable.setDescription('This table extends the dot3adAggTable to control LACP.')
cadDot3adAggEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadDot3adAggId"))
if mibBuilder.loadTexts: cadDot3adAggEntry.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggEntry.setDescription('This is an extension of the dot3adAggEntry table that adds a LAG-level LACP enable.')
cadDot3adAggId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: cadDot3adAggId.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggId.setDescription('The unique identifier allocated to this Aggregator by the CMTS system.')
cadDot3adAggIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDot3adAggIndex.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggIndex.setDescription('The unique ifInex to identify this Aggregator.')
cadDot3adAggMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDot3adAggMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggMacAddress.setDescription('The MAC address of this Aggregator.')
cadDot3adAggLacpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggLacpEnable.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggLacpEnable.setDescription('TRUE if LACP is enabled for this LAG, FALSE if it is disabled.')
cadDot3adAggLacpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("passive", 2))).clone('active')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggLacpMode.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggLacpMode.setDescription('The default administrative status of the LACP protocol for ports In this LAG. Controls bit 0 of dot3adAggPortPartnerOperState to zero for passive and is set to one for active. ')
cadDot3adAggLacpRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slow", 1), ("fast", 2))).clone('slow')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggLacpRate.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggLacpRate.setDescription('Specifies the default requested exchange rate of LACP packets for ports In this LAG. Controls bit 1 (LACP_Timeout) in dot3adAggPortActorOperState slow(1): The device requests its peers to send LACP packets at a slow rate to this interface. LACP_Timeout equals 0 (transmission interval of 30 seconds, long timeout of 90 seconds) fast(2) : The device requests its peers to send LACP packets at fast rate to this interface. LACP_Timeout equals 1 (transmission interval of 1 second, short timeout of 3 seconds).')
cadDot3adAggMinLinks = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggMinLinks.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggMinLinks.setDescription('Sets the minimum number of ports that must be able to pass dataplane traffic for this LAG to be in-service. If the number of such ports in this LAG falls below this value, the entire LAG goes OOS.')
cadDot3adAggDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggDescription.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggDescription.setDescription('The description of the Link Aggregation Group.')
cadDot3adAggTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 9), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("linkUpLinkDown", 3))).clone(hexValue="e0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggTrapInh.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggTrapInh.setDescription(' If a bit is set, the corresponding state change trap will not be sent. By default only linkUp and linkDown notifications are enabled.')
cadDot3adAggAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 10), AdminState().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggAdminState.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggAdminState.setDescription('The administrative state of the Link Aggregation Group.')
cadDot3adAggPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 11), PrimaryState().clone('oos')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDot3adAggPrState.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggPrState.setDescription('The primary state of the Link Aggregation Group.')
cadDot3adAggSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 12), SecondaryState().clone('manual')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDot3adAggSecState.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggSecState.setDescription('The secondary state of the Link Aggregation Group.')
cadDot3adAggRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadDot3adAggRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggRowStatus.setDescription(' Control Object for row creation and deletion. ')
cadDot3adAggSystemID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 13, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadDot3adAggSystemID.setStatus('current')
if mibBuilder.loadTexts: cadDot3adAggSystemID.setDescription('Equivalent to the dot3adAggActorSystemID in the dot3adAggTable. A 6-octet read-write MAC address value used as a unique identifier for the System that contains this Aggregator.')
cadDot3adParams = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 14))
cadDot3adSystemPriority = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 1, 14, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(32768)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadDot3adSystemPriority.setReference('6.3.1.1.11')
if mibBuilder.loadTexts: cadDot3adSystemPriority.setStatus('current')
if mibBuilder.loadTexts: cadDot3adSystemPriority.setDescription("A 2-octet value that indicates the priority value associated with the Actor's System ID.")
cadAging = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2))
cadAgingCPEAgingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 1), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(10, 10)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingCPEAgingInterval.setStatus('current')
if mibBuilder.loadTexts: cadAgingCPEAgingInterval.setDescription('MAC Aging counter granularity.')
cadAgingSFAgingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 2), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(1, 1)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingSFAgingInterval.setStatus('current')
if mibBuilder.loadTexts: cadAgingSFAgingInterval.setDescription('Service Flow Aging granularity.')
cadAgingStaleMACAgingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100000000)).clone(604800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingStaleMACAgingInterval.setStatus('current')
if mibBuilder.loadTexts: cadAgingStaleMACAgingInterval.setDescription('Stale MAC Flow Aging time in seconds.')
cadAgingArpCacheAgingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(600, 360000), )).clone(1200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheAgingInterval.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheAgingInterval.setDescription('Arp cache Aging time in seconds.')
cadAgingIdleMACAgingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000000)).clone(1800)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingIdleMACAgingInterval.setStatus('current')
if mibBuilder.loadTexts: cadAgingIdleMACAgingInterval.setDescription('The timeout period in seconds for aging out dynamically learned MAC information.')
cadAgingArpCacheSearchingRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 86400000)).clone(333)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheSearchingRateLimit.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheSearchingRateLimit.setDescription('The minimum amount of time between transmitting ARP requests while an ARP cache entry is in the searching state.')
cadAgingArpCacheSearchingMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheSearchingMaxNumber.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheSearchingMaxNumber.setDescription('The maximum number of ARP requests transmitted while an ARP cache entry is in the searching state. When the number of ARPs indicated by this variable have been transmitted, the next packet that arrives for an ARP cache entry in the searching state will cause that entry to transition to the notPresent state.')
cadAgingArpCacheNotPresentRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 86400000)).clone(333)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentRateLimit.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentRateLimit.setDescription('The minimum amount of time between transmitting ICMP unreachables while an ARP cache entry is in the notPresent state.')
cadAgingArpCacheNotPresentMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentMaxNumber.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentMaxNumber.setDescription('The maximum number of ICMP unreachables transmitted while an ARP cache entry is in the notPresent state. When the number of ICMPs indicated by this variable have been transmitted, the next packet that arrives for an ARP cache entry in the notPresent state will cause that entry to transition to the searching state, unless cadAgingArpCacheNotPresentMinTime has not been reached yet.')
cadAgingArpCacheNotPresentMaxTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentMaxTime.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentMaxTime.setDescription('The maximum amount of time an ARP cache entry is in the notPresent state. When the amount of time indicated by this variable has elapsed, the next packet that arrives for an ARP cache entry in the notPresent state will cause that entry to transition to the searching state, unless cadAgingArpCacheNotPresentMinTime has not been reached yet.')
cadAgingArpCacheNotPresentMinTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentMinTime.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentMinTime.setDescription('The minimum amount of time an ARP cache entry is in the notPresent state. This variable takes precedence over cadAgingArpCacheNotPresentMaxNumber and cadAgingArpCacheNotPresentMaxTime. However, and ARP entry aged out due to inactivity will be removed regardless of whether the amount of time indicated by cadAgingArpCacheNotPresentMinTime has elapsed or not.')
cadAgingArpCacheSearchingGlobalMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setUnits('packets/second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheSearchingGlobalMaxRate.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheSearchingGlobalMaxRate.setDescription("The maximum global ARP request transmit rate for all IP's with an ARP cache entry in the searching state. Units are in packets sent per second.")
cadAgingArpCacheNotPresentGlobalMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setUnits('packets/second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentGlobalMaxRate.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheNotPresentGlobalMaxRate.setDescription("The maximum global ICMP unreachable transmit rate for all IP's with an ARP cache entry in the notPresent state. Units are in packets sent per second.")
cadAgingNDCacheAgingInterval = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(180, 360000), )).clone(1200)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheAgingInterval.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheAgingInterval.setDescription('ND cache Aging time in seconds.')
cadAgingNDCacheSearchingRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 86400000)).clone(333)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheSearchingRateLimit.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheSearchingRateLimit.setDescription('The minimum amount of time between transmitting ND requests while an ND cache entry is in the searching state.')
cadAgingNDCacheSearchingMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheSearchingMaxNumber.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheSearchingMaxNumber.setDescription('The maximum number of ND requests transmitted while an ND cache entry is in the searching state. When the number of NDs indicated by this variable have been transmitted, the next packet that arrives for an ND cache entry in the searching state will cause that entry to transition to the notPresent state.')
cadAgingNDCacheNotPresentRateLimit = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 86400000)).clone(333)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentRateLimit.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentRateLimit.setDescription('The minimum amount of time between transmitting ICMP unreachables while an ND cache entry is in the notPresent state.')
cadAgingNDCacheNotPresentMaxNumber = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentMaxNumber.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentMaxNumber.setDescription('The maximum number of ICMP unreachables transmitted while an ND cache entry is in the notPresent state. When the number of ICMPs indicated by this variable have been transmitted, the next packet that arrives for an ND cache entry in the notPresent state will cause that entry to transition to the searching state, unless cadAgingNDCacheNotPresentMinTime has not been reached yet.')
cadAgingNDCacheNotPresentMaxTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentMaxTime.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentMaxTime.setDescription('The maximum amount of time an ND cache entry is in the notPresent state. When the amount of time indicated by this variable has elapsed, the next packet that arrives for an ND cache entry in the notPresent state will cause that entry to transition to the searching state, unless cadAgingNDCacheNotPresentMinTime has not been reached yet.')
cadAgingNDCacheNotPresentMinTime = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 604800)).clone(1)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentMinTime.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentMinTime.setDescription('The minimum amount of time an ARP cache entry is in the notPresent state. This variable takes precedence over cadAgingArpCacheNotPresentMaxNumber and cadAgingArpCacheNotPresentMaxTime. However, and ARP entry aged out due to inactivity will be removed regardless of whether the amount of time indicated by cadAgingArpCacheNotPresentMinTime has elapsed or not.')
cadAgingNDCacheSearchingGlobalMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setUnits('packets/second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheSearchingGlobalMaxRate.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheSearchingGlobalMaxRate.setDescription("The maximum global ND request transmit rate for all IP's with an ND cache entry in the searching state. Units are in packets sent per second.")
cadAgingNDCacheNotPresentGlobalMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(65535)).setUnits('packets/second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentGlobalMaxRate.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheNotPresentGlobalMaxRate.setDescription("The maximum global ICMP unreachable transmit rate for all IP's with an ND cache entry in the notPresent state. Units are in packets sent per second.")
cadAgingArpCacheSearchingCableUnicast = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheSearchingCableUnicast.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheSearchingCableUnicast.setDescription('The maximum number of unicast ARP requests transmitted while an ARP cache entry is in the searching state where the MAC/IP binding is previously known. After the number of unicast ARPs indicated by this variable have been transmitted, additional ARP requests will be sent as broadcast until the cadAgingArpCacheSearchingMaxNumber limit is reached, at which point the next packet that arrives for an ARP cache entry in the searching state will cause that entry to transition to the notPresent state.')
cadAgingArpCacheSearchingCableBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 24), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingArpCacheSearchingCableBroadcast.setStatus('current')
if mibBuilder.loadTexts: cadAgingArpCacheSearchingCableBroadcast.setDescription('This variable controls whether broadcast ARP packets can be sent for an IPv4 address where there is no stored previous knowledge about a MAC/IP binding. The total number of broadcast ARPs to send before switching to the not-present state is limited by the cadAgingArpCacheSearchingMaxNumber variable. If cadAgingArpCacheSearchingCableBroadcast is false and there is no stored previous knowledge about a MAC/IP binding, the ARP cache entry will transition immediately to the not-present state.')
cadAgingNDCacheSearchingCableUnicast = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheSearchingCableUnicast.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheSearchingCableUnicast.setDescription('The maximum number of unicast NS requests transmitted while an ND cache entry is in the searching state where the MAC/IP binding is previously known. After the number of unicast NSs indicated by this variable have been transmitted, additional NS requests will be sent as multicast until the cadAgingNDCacheSearchingMaxNumber limit is reached, at which point the next packet that arrives for an ND cache entry in the searching state will cause that entry to transition to the notPresent state.')
cadAgingNDCacheSearchingCableMulticast = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 2, 26), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadAgingNDCacheSearchingCableMulticast.setStatus('current')
if mibBuilder.loadTexts: cadAgingNDCacheSearchingCableMulticast.setDescription('This variable controls whether multicast NS packets can be sent for an IPv6 address where there is no stored previous knowledge about a MAC/IP binding. The total number of multicast NSs to send before switching to the not-present state is limited by the cadAgingNDCacheSearchingMaxNumber variable. If cadAgingNDCacheSearchingCableMulticast is false and there is no stored previous knowledge about a MAC/IP binding, the ND cache entry will transition immediately to the not-present state.')
arrisCerIpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 5))
cerIpGratuitousArpPeriod = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 5, 1), Unsigned32().clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cerIpGratuitousArpPeriod.setStatus('current')
if mibBuilder.loadTexts: cerIpGratuitousArpPeriod.setDescription('Configure the global time in seconds between gratuitous ARP transmission.')
cadLayer2MibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 3))
cadAgingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 3, 1)).setObjects(("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingCPEAgingInterval"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingSFAgingInterval"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingStaleMACAgingInterval"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingArpCacheAgingInterval"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheAgingInterval"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheSearchingRateLimit"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheSearchingMaxNumber"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheNotPresentRateLimit"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheNotPresentMaxNumber"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheNotPresentMaxTime"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheNotPresentMinTime"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheSearchingGlobalMaxRate"), ("CADANT-CMTS-LAYER2CMTS-MIB", "cadAgingNDCacheNotPresentGlobalMaxRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cadAgingGroup = cadAgingGroup.setStatus('current')
if mibBuilder.loadTexts: cadAgingGroup.setDescription(' This group contains a collection of objects specific to MAC aging. ')
cerIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 3, 2)).setObjects(("CADANT-CMTS-LAYER2CMTS-MIB", "cerIpGratuitousArpPeriod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cerIpGroup = cerIpGroup.setStatus('current')
if mibBuilder.loadTexts: cerIpGroup.setDescription('A collection of objects providing IP configuration for IEQ.')
cadMacPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4))
cadMacPortTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1), )
if mibBuilder.loadTexts: cadMacPortTable.setStatus('current')
if mibBuilder.loadTexts: cadMacPortTable.setDescription('MAC port table. ')
cadMacPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadMacPortId"))
if mibBuilder.loadTexts: cadMacPortEntry.setStatus('current')
if mibBuilder.loadTexts: cadMacPortEntry.setDescription('')
cadMacPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 1), MacPortId())
if mibBuilder.loadTexts: cadMacPortId.setStatus('current')
if mibBuilder.loadTexts: cadMacPortId.setDescription('MAC port id which uniquely identifies a MAC port. Mac port Id range from 417 to 448 are reserved for 2D12U CAMs.')
cadMacPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 4), AdminState().clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cadMacPortAdminState.setDescription('The administrative state of the MAC port.')
cadMacPortPrState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 5), PrimaryState().clone('oos')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacPortPrState.setStatus('current')
if mibBuilder.loadTexts: cadMacPortPrState.setDescription('The primary state of the MAC port.')
cadMacPortSecState = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 6), SecondaryState().clone('manual')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacPortSecState.setStatus('current')
if mibBuilder.loadTexts: cadMacPortSecState.setDescription('The secondary state of the MAC port.')
cadMacPortDplxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 7), DuplexStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacPortDplxStatus.setStatus('current')
if mibBuilder.loadTexts: cadMacPortDplxStatus.setDescription('The duplex status of the MAC port.')
cadMacPortMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacPortMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadMacPortMacAddress.setDescription('The MAC address of the MAC port.')
cadMacPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 9), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMacPortIfIndex.setDescription('The ifIndex of the MAC port.')
cadMacPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacPortDescription.setStatus('current')
if mibBuilder.loadTexts: cadMacPortDescription.setDescription('The description of the MAC port.')
cadMacPortTrapInh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 11), Bits().clone(namedValues=NamedValues(("primary", 0), ("secondary", 1), ("duplex", 2), ("linkUpLinkDown", 3))).clone(hexValue="e0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacPortTrapInh.setStatus('current')
if mibBuilder.loadTexts: cadMacPortTrapInh.setDescription(' If a bit is set, the corresponding state change trap will not be sent. By default only linkUp and linkDown notifications are enabled.')
cadMacPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadMacPortRowStatus.setDescription('Control object for row creation and deletion.')
cadMacPortOfdm = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacPortOfdm.setStatus('current')
if mibBuilder.loadTexts: cadMacPortOfdm.setDescription('If set to true, DOCSIS 3.1 is enabled for this MAC Port.')
cadIfMacDomainTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2), )
if mibBuilder.loadTexts: cadIfMacDomainTable.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainTable.setDescription('The cadIfMacDomainTable maintains configuration information specific to each MAC domain. The table is indexed by the MAC domain ifIndex(from the ifTable or the cadMacPortTable).')
cadIfMacDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadIfMacDomainIfIndex"))
if mibBuilder.loadTexts: cadIfMacDomainEntry.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainEntry.setDescription('')
cadIfMacDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadIfMacDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainIfIndex.setDescription('MAC domain ifIndex ')
cadIfMacDomainCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 2), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatentation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfMacDomainCapabilities.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainCapabilities.setDescription('Identifies the capabilities of the CMTS MAC implementation at this interface.')
cadIfMacDomainSyncInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(10)).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainSyncInterval.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainSyncInterval.setDescription('Interval between CMTS transmission of successive SYNC messages at this interface.')
cadIfMacDomainUcdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(1600)).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainUcdInterval.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainUcdInterval.setDescription('Interval between CMTS transmission of successive UCD messages for each upstream at this interface. ')
cadIfMacDomainMaxServiceIds = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)).clone(8191)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfMacDomainMaxServiceIds.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainMaxServiceIds.setDescription('Maximum number of service IDs that may be simultaneously active. ')
cadIfMacDomainInvitedRangingAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainInvitedRangingAttempts.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainInvitedRangingAttempts.setDescription('Maximum number of attempts to make on invitations for ranging requests. A value of 0 means the system should attempt to range forever. ')
cadIfMacDomainInsertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200)).clone(40)).setUnits('Centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainInsertInterval.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainInsertInterval.setDescription('Amount of time between each broadcast station maintenance grant.')
cadIfMacDomainRangingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 8), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(500, 3500)).clone(2400)).setUnits('Centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainRangingInterval.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainRangingInterval.setDescription('Amount of time to elapse between each ranging message.')
cadIfMacDomainRangeOpportunityCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 9), TimeInterval().subtype(subtypeSpec=ValueRangeConstraint(100, 500)).clone(120)).setUnits('Centiseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainRangeOpportunityCycle.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainRangeOpportunityCycle.setDescription('Amount of time to elapse between each ranging cycle.')
cadIfMacDomainTftpEnforce = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 10), CadTftpEnforceType().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainTftpEnforce.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainTftpEnforce.setDescription('Current state of TFTP enforce for this interface.')
cadIfMacDomainDynamicSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 11), CadDynamicSecretType().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDynamicSecret.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDynamicSecret.setDescription('Current state of Cable Dynamic Secret for this interface.')
cadIfMacDomainAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("annexA", 3), ("annexB", 4), ("annexC", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainAnnex.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainAnnex.setDescription('The value of this object indicates the conformance of the implementation to important regional cable standards. annexA : Annex A from ITU-J83 is used. annexB : Annex B from ITU-J83 is used. annexC : Annex C from ITU-J83 is used.')
cadIfMacDomainMddInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000)).clone(2000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainMddInterval.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainMddInterval.setDescription('This attribute configures the interval for the insertion of MDD messages in each downstream channel of a MAC Domain.')
cadIfMacDomainIpProvMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ipv4Only", 0), ("ipv6Only", 1), ("alternate", 2), ("dualStack", 3))).clone('ipv6Only')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainIpProvMode.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainIpProvMode.setDescription("This attribute configures the CMTS IP provisioning mode for a MAC Domain. When this attribute is set to 'ipv4Only' the CM will acquire a single IPv4 address for the CM management stack. When this attribute is set to 'ipv6Only' the CM will acquire a single IPv6 address for the CM management stack. When this attribute is set to 'alternate' the CM will acquire a single IPv6 address for the CM management stack and, if failures occur, the CM will fall back to provisioning and operation with an IPv4 address. When this attribute is set to 'dualStack' the CM will acquire both an IPv6 and IPv4 address for provisioning and operation.")
cadIfMacDomainCmStatusEvCtlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 18), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainCmStatusEvCtlEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainCmStatusEvCtlEnabled.setDescription("If set to 'true', this attribute enables the signaling of the CM-Status Event reporting mechanism.")
cadIfMacDomainUsFreqRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("extended", 1))).clone('standard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainUsFreqRange.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainUsFreqRange.setDescription("This attribute indicates in MDD messages the upstream frequency upper band edge of an upstream Channel. A value 'standard' means Standard Frequency Range and a value 'extended' means Extended Frequency Range.")
cadIfMacDomainMcastDsidFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainMcastDsidFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainMcastDsidFwdEnabled.setDescription("If set to 'true', this attribute enables the CMTS to use IP Multicast DSID Forwarding (MDF) for the MAC domain.")
cadIfMacDomainDsBondingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDsBondingEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDsBondingEnabled.setDescription("If set to 'true', this attribute enables Downstream Channel Bonding for the MAC Domain.")
cadIfMacDomainMultTxChModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 22), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainMultTxChModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainMultTxChModeEnabled.setDescription("If set to 'true', this attribute enables Multiple Transmit Channel (MTC) Mode for the MAC Domain.")
cadIfMacDomainEarlyAuthEncrCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disableEae", 1), ("enableEaeRangingBasedEnforcement", 2), ("enableEaeCapabilityBasedEnforcement", 3), ("enableEaeTotalEnforcement", 4))).clone('enableEaeRangingBasedEnforcement')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainEarlyAuthEncrCtrl.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainEarlyAuthEncrCtrl.setDescription("This attribute enables or disables early authentication and encryption (EAE) signaling for the MAC Domain. It also defines the type of EAE enforcement in the case that EAE is enabled. If set to 'disableEAE', EAE is disabled for the MAC Domain. If set to 'enableEaeRangingBasedEnforcement', 'enableEaeCapabilityBasedEnforcement' or 'enableEaeTotalEnforcement', EAE is enabled for the MAC Domain. The following EAE enforcement methods are defined in the case where EAE signaling is enabled: The option 'enableEaeRangingBasedEnforcement' indicates EAE is enforced on CMs that perform ranging with a B-INIT-RNG-REQ message. The option 'enableEaeCapabilityBasedEnforcement' indicates EAE is enforced on CMs that perform ranging with a B-INIT-RNG-REQ message in which the EAE capability flag is set. The option 'enableEaeTotalEnforcement' indicates EAE is enforced on all CMs regardless of their EAE capabilities.")
cadIfMacDomainTftpProxyEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 24), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainTftpProxyEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainTftpProxyEnabled.setDescription("If set to 'true', this attribute enables TFTP Proxy functionality for the MAC Domain.")
cadIfMacDomainSrcAddrVerifEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 25), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainSrcAddrVerifEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainSrcAddrVerifEnabled.setDescription("If set to 'true', this attribute enables Source Address Verification (SAV) functionality for the MAC Domain.")
cadIfMacDomainMulticastEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 26), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfMacDomainMulticastEncryption.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainMulticastEncryption.setDescription("If set to 'true', this attribute enables multicast encryption for all multicast flows on all downstream channels in the MAC domain using the des56 algorithm.")
cadIfMacDomainRcpReportMode = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("nonVerbose", 0), ("verbose", 1))).clone('nonVerbose')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainRcpReportMode.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainRcpReportMode.setDescription('This attribute controls the reporting of the CM receiver profiles in the registration messages. A value of 0 means that the CM MUST NOT provide verbose reporting of all its Receive Channel Profiles. A value of 1 means that the CM MUST provide verbose reporting of Receive Channel Profiles. both standard profiles and manufacturers profiles.')
cadIfMacDomainRegRspToOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainRegRspToOverride.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainRegRspToOverride.setDescription('This attribute provides an ability to override the default value of the T6 timer in the CM. When this attribute is not set to its default value, then the CMTS will place it into the MDD and the CM MUST use this value in place of the default value for the T6 timer.')
cadIfMacDomainMultRxChModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 29), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainMultRxChModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainMultRxChModeEnabled.setDescription('If set to true, this attribute enables Downstream Channel Bonding for the MAC Domain.')
cadIfMacDomainCmUdcEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 30), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainCmUdcEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainCmUdcEnabled.setDescription('If set to true, this attribute instructs the CMTS MAC Domain to enable Upstream Drop Classifiers (UDC) for the CMs attempting registration in this MAC Domain.')
cadIfMacDomainSendUdcRulesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 31), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainSendUdcRulesEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainSendUdcRulesEnabled.setDescription("If set to true and when the CM signals to the CMTS 'Upstream Drop Classifier Group ID encodings, this attribute instructs the CMTS MAC Domain to send the Subscriber Management Filters rules associated with the Upstream Drop Classifier Group ID encodings to the CM in the form of UDCs when the following conditions occurs: 1)The attribute CmUdcEnabled value for this MAC Domain is set to true, and 2)The CM has the UDC capability advertised as supported. If there is no a single Subscriber Management Filter configured in the CMTS for the CM signaled UDC Group ID, the CMTS does not send UDC encodings to the CM. It is vendor specific whether the CMTS maintains enforcement of the CM signaled or default Subscriber Management Filter groups in the upstream direction.")
cadIfMacDomainRccDynEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 32), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainRccDynEnable.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainRccDynEnable.setDescription('This object allows user to enable or disable the autonomous creation of dynamic RCCs per mac domain.')
cadIfMacDomainDsbgDynEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 33), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDsbgDynEnable.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDsbgDynEnable.setDescription('This object allows user to enable or disable the autonomous creation of dynamic bonding groups per mac domain.')
cadIfMacDomainDsbgReseqWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 34), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 180), ValueRangeConstraint(255, 255), )).clone(255)).setUnits('hundredMicroseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDsbgReseqWaitTime.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDsbgReseqWaitTime.setDescription('Resequence wait time to se set for dynamic bonding groups per mac domain. If the value 255 indicates that requence wait time is determined by the CMTS.')
cadIfMacDomainDsbgReseqWarnThrshld = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 35), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 179), ValueRangeConstraint(255, 255), )).clone(255)).setUnits('hundredMicroseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDsbgReseqWarnThrshld.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDsbgReseqWarnThrshld.setDescription('Resequence warning threshold to se set for dynamic bonding groups per mac domain. If the value 255 indicates that requence warning threshold is determined by the CMTS.')
cadIfMacDomainDpId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 15), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadIfMacDomainDpId.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDpId.setDescription('When a mac domain is created or system reset, DMM assigns a Downstream Pool ID (DPID) for each mac domain. If the value 255 indicates the DPID is invalid.')
cadIfMacDomainUsbgDynEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 37), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainUsbgDynEnable.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainUsbgDynEnable.setDescription('This object allows user to enable or disable the autonomous creation of dynamic upstream bonding groups per mac domain.')
cadIfMacDomainDownChannelMaxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(858000000, 858000000), ValueRangeConstraint(867000000, 867000000), ValueRangeConstraint(999000000, 999000000), )).clone(867000000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDownChannelMaxFrequency.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDownChannelMaxFrequency.setDescription('This object is used to configure the C4 CMTS to accept maximum downstream frequency limit that conform with the EuroDOCSIS specifications (starndard range 112 MHz to 858 MHz), (extended 85 MHz to 999MHz) or to the DOCSIS specifications (standard 91 to 867 MHz), (extended range 57 MHz to 999 MHz). Changes to downstream frequency and width are verified against this object to ensure the C4 CMTS does not exceed the downstream spectrum limits imposed by this object. Attempting to decrease the downstream frequency spectrum implied by this object will fail if at least a single downstream is configured outside of the range for the new value. It is recommended this object be set during initial system setup.')
cadIfMacDomainDownChannelMinFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(57000000, 57000000), ValueRangeConstraint(85000000, 85000000), ValueRangeConstraint(91000000, 91000000), ValueRangeConstraint(112000000, 112000000), )).clone(91000000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDownChannelMinFrequency.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDownChannelMinFrequency.setDescription('This object is used to configure the C4 CMTS to accept minimum downstream frequency limit that conform with the EuroDOCSIS specifications (starndard range 112 MHz to 858 MHz), (extended 85 MHz to 999MHz) or to the DOCSIS specifications (standard 91 to 867 MHz), (extended range 57 MHz to 999 MHz). Changes to downstream frequency and width are verified against this object to ensure the C4 CMTS does not exceed the downstream spectrum limits imposed by this object. Attempting to increase the minimum downstream frequency limit implied by this object will fail if at least a single downstream is configured outside of the range for the new value. It is recommended this object be set during initial system setup.')
cadIfMacDomainUpChannelMaxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(42000000, 42000000), ValueRangeConstraint(55000000, 55000000), ValueRangeConstraint(65000000, 65000000), ValueRangeConstraint(85000000, 85000000), )).clone(42000000)).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainUpChannelMaxFrequency.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainUpChannelMaxFrequency.setDescription('This object is used to configure the C4 CMTS to accept upstream frequency ranges that conform with the EuroDOCSIS specifications (5 MHz to 65 MHz), to the extended range used in Japan (5 MHz to 55 MHz), or to the DOCSIS specifications (5 MHz to 42 MHz), or to the extended upstream range (5 MHz to 85 MHz). Changes to upstream frequency and width are verified against this object to ensure the C4 CMTS does not exceed the upstream spectrum limits imposed by this object. Attempting to narrow the upstream frequency spectrum implied by this object will fail if at least a single upstream is configured outside of the range for the new value. Default value is taken from global setting when the cable-mac is created.')
cadIfMacDomainBpi2Mandatory = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("bpi", 1), ("bpiPlus", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainBpi2Mandatory.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainBpi2Mandatory.setDescription('This object determines the what minimum level of BPI operation is required in order to allow a cable modem to register.')
cadIfMacDomainDSG30Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 43), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDSG30Enabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDSG30Enabled.setDescription("If set to 'true', this attribute enables the CMTS to use DSG3.0 on the MAC domain. If false, then DSG reverts to the pre-DOCSIS3.0 version without DSIDs.")
cadIfMacDomainEnforceRulesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 44), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainEnforceRulesEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainEnforceRulesEnabled.setDescription("If set to 'true', then QOS penalties as defined in the cadEnforceRuleTable will be enforced for SFs on CMs in this MAC Domain.")
cadIfMacDomainCmTxPwrExtentionPreRegistrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 45), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainCmTxPwrExtentionPreRegistrationEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainCmTxPwrExtentionPreRegistrationEnabled.setDescription("Indicate if the transmit power extension (before registration) feature is enabled or not onthe CMTS. If set to 'true', the CMTS will populate TLV16 in the MDD message with the value of 1. If set to 'false', the CMTS will populate TLV16 in the MDD message with the the value of 0. The value in this MIB object is ignored if MTCM is disabled.")
cadIfMacDomainCmTxPwrExtentionPostRegistrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 46), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainCmTxPwrExtentionPostRegistrationEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainCmTxPwrExtentionPostRegistrationEnabled.setDescription("Indicate if the transmit power extension (after registration) feature is enabled or not on the CMTS. If set to 'true', the CMTS will populate TLV5.40 in the REG-RSP-MP message with the same value received in the REG-REQ-MP message (advertised CM capability). If set to 'false', the CMTS will respond with 0 in TLV5.40 of the REG-RSP-MP message. The value in this MIB object is ignored if MTCM is disabled")
cadIfMacDomainT4TimeoutMultiplierEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 47), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainT4TimeoutMultiplierEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainT4TimeoutMultiplierEnabled.setDescription('If set to true, this attribute instructs the CMTS MAC Domain to enable the T4 Timeout Multiplier for the CMs operating in MTCM in this MAC Domain. The multiplier will be set equal to the number of upstream assigned to the modem at registration time.')
cadIfMacDomainDynamicRccMultiTunerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 48), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDynamicRccMultiTunerEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDynamicRccMultiTunerEnabled.setDescription("If set to true, this attribute instructs the CMTS MAC Domain to enable dynamic RCC support for CM RCP's with multiple tuners.")
cadIfMacDomainTcsSizeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainTcsSizeLimit.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainTcsSizeLimit.setDescription("This object is used to potentially limit the number of channels within a CM's TCS. A value of 0 indicates the limit is determined by the CM's capabilities, configuration and operational status. When a non-zero value is specified and is smaller than the number of channels that are capable of residing within the CM's TCS, the number of channels within the CM's TCS will be restricted to the specified value.")
cadIfMacDomainDocsis31Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 50), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDocsis31Enabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDocsis31Enabled.setDescription('If set to true, DOCSIS 3.1 is enabled for this MAC Domain.')
cadIfMacDomainEnergyMgt1x1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 51), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainEnergyMgt1x1Enabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainEnergyMgt1x1Enabled.setDescription("This attribute indicates whether the CMTS is configured for 1x1 Energy Management Mode of operation on a per MAC Domain basis. If this attribute is set to 'true', the CMTS is configured for 1x1 Energy Management Mode of operation on this MAC Domain. If this attribute is set to 'false', the Energy Management 1x1 Mode of operation is disabled in the CMTS on this MAC Domain")
cadIfMacDomainDsOfdmProfileRecoveryGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(300)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainDsOfdmProfileRecoveryGuardTime.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainDsOfdmProfileRecoveryGuardTime.setDescription('The amount of time that an impaired OFDM profile will remain impaired before transitioning to good upon being notified that the CM can decode the profile. This provides some hysteresis for a profile to become stable before using the newly decodable profile. If set to a value of 0, then there is no hysteresis (no timer is started) and all profiles may transition to good immediately upon being notified that the CM can decode the profile.')
cadIfMacDomainGracefulTcsReductionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 2, 1, 53), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadIfMacDomainGracefulTcsReductionEnabled.setStatus('current')
if mibBuilder.loadTexts: cadIfMacDomainGracefulTcsReductionEnabled.setDescription('If set to true, the CMTS will instruct the modem to try incrementally lower numbers of bonded channels instead of reverting immediately to single US bonded channel while registering a modem and a power shortfall or DRW violation is encountered. If set to false, the CMTS will instruct the modem to immediately revert to a single US bonded channel while registering a modem and a power shortfall or DRW violation is encountered.')
cadMacChlTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3), )
if mibBuilder.loadTexts: cadMacChlTable.setStatus('current')
if mibBuilder.loadTexts: cadMacChlTable.setDescription('MAC channel table. ')
cadMacChlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadMacChlMacDomainIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadMacChlChannelIfIndex"))
if mibBuilder.loadTexts: cadMacChlEntry.setStatus('current')
if mibBuilder.loadTexts: cadMacChlEntry.setDescription('')
cadMacChlMacDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadMacChlMacDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMacChlMacDomainIfIndex.setDescription('ifIndex of the MAC domain')
cadMacChlChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadMacChlChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadMacChlChannelIfIndex.setDescription('ifIndex of the upstream or downstream channel')
cadMacChlCardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 3), CardId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacChlCardNumber.setStatus('current')
if mibBuilder.loadTexts: cadMacChlCardNumber.setDescription('card number of downstream or upstream channel')
cadMacChlPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 4), PortId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacChlPortId.setStatus('current')
if mibBuilder.loadTexts: cadMacChlPortId.setDescription('port Id of downstream or upstream channel')
cadMacChlPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 5), PortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacChlPortType.setStatus('current')
if mibBuilder.loadTexts: cadMacChlPortType.setDescription('port type of downstream or upstream channel')
cadMacChlCardSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 6), CerCardSubType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacChlCardSubType.setStatus('current')
if mibBuilder.loadTexts: cadMacChlCardSubType.setDescription('card subtype type of downstream or upstream channel')
cadMacChlChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacChlChannelId.setStatus('current')
if mibBuilder.loadTexts: cadMacChlChannelId.setDescription('downstream or upstream channel ID. 0 is an invalid channel Id.')
cadMacChlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacChlRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadMacChlRowStatus.setDescription('Control object for row creation and deletion')
cadMacChlIsPriCapableDs = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacChlIsPriCapableDs.setStatus('current')
if mibBuilder.loadTexts: cadMacChlIsPriCapableDs.setDescription("True if this is downstream channel and it is intended to be used as a primary channel by one or more cable modems. False otherwise. When a row's cadMacChlIsPrimaryCapableDs column is set to true(1) then DOCSIS SYNC message generation is enabled on the downstream channel. The default value of this field is true(1) for all downstream channels and false(2) for all upstream channels.")
cadMacChlSfProvAttrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 10), AttributeMask().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadMacChlSfProvAttrMask.setStatus('current')
if mibBuilder.loadTexts: cadMacChlSfProvAttrMask.setDescription('Provisioned attributes of this channel for purposes of channel assignment.')
cadMacChlDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 3, 1, 11), IfDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadMacChlDirection.setStatus('current')
if mibBuilder.loadTexts: cadMacChlDirection.setDescription('DOCSIS downstream or upstream direction.')
cadUpSupervisionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 4), )
if mibBuilder.loadTexts: cadUpSupervisionCfgTable.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionCfgTable.setDescription('Upstream supervison configuration table. ')
cadUpSupervisionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 4, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadMacChlMacDomainIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadUpSupervisionCfgUpChannelIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadUpSupervisionCfgDownChannelIfIndex"))
if mibBuilder.loadTexts: cadUpSupervisionCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionCfgEntry.setDescription('')
cadUpSupervisionCfgUpChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 4, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadUpSupervisionCfgUpChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionCfgUpChannelIfIndex.setDescription('ifIndex of the upstream logical channel.')
cadUpSupervisionCfgDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadUpSupervisionCfgDownChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionCfgDownChannelIfIndex.setDescription('ifIndex of the downstream channel.')
cadUpSupervisionCfgAssign = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 4, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadUpSupervisionCfgAssign.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionCfgAssign.setDescription('Indicates whether supervisory information for the upstream channel with cadIfUpChannelIfIndex is to be carried on the downstream channel with cadIfDownChannelIfIndex. ')
cadUpSupervisionCfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadUpSupervisionCfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionCfgRowStatus.setDescription('Control object for row creation and deletion.')
cadUpSupervisionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 5), )
if mibBuilder.loadTexts: cadUpSupervisionStatusTable.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionStatusTable.setDescription('Upstream supervision stataus table. ')
cadUpSupervisionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 5, 1), ).setIndexNames((0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadMacChlMacDomainIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadUpSupervisionStatusUpChannelIfIndex"), (0, "CADANT-CMTS-LAYER2CMTS-MIB", "cadUpSupervisionStatusDownChannelIfIndex"))
if mibBuilder.loadTexts: cadUpSupervisionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionStatusEntry.setDescription('')
cadUpSupervisionStatusUpChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadUpSupervisionStatusUpChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionStatusUpChannelIfIndex.setDescription('ifIndex of the upstream logical channel.')
cadUpSupervisionStatusDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 5, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: cadUpSupervisionStatusDownChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionStatusDownChannelIfIndex.setDescription('ifIndex of the downstream channel.')
cadUpSupervisionStatusAssignmentMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 20, 1, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automatic", 1), ("provisioned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadUpSupervisionStatusAssignmentMethod.setStatus('current')
if mibBuilder.loadTexts: cadUpSupervisionStatusAssignmentMethod.setDescription('Origin of the supervisory relationship. ')
mibBuilder.exportSymbols("CADANT-CMTS-LAYER2CMTS-MIB", cadAgingArpCacheSearchingMaxNumber=cadAgingArpCacheSearchingMaxNumber, cadBridgeGroupTable=cadBridgeGroupTable, cadIfMacDomainDsbgReseqWaitTime=cadIfMacDomainDsbgReseqWaitTime, cadUpSupervisionStatusAssignmentMethod=cadUpSupervisionStatusAssignmentMethod, cadMacChlMacDomainIfIndex=cadMacChlMacDomainIfIndex, cadMacChlEntry=cadMacChlEntry, cadAgingArpCacheNotPresentMaxNumber=cadAgingArpCacheNotPresentMaxNumber, cadDot3adAggLacpRate=cadDot3adAggLacpRate, cadMacChlChannelId=cadMacChlChannelId, cadIfMacDomainRegRspToOverride=cadIfMacDomainRegRspToOverride, cadBridgeGroupEntry=cadBridgeGroupEntry, cadBridgePortEntry=cadBridgePortEntry, cadIfMacDomainCmTxPwrExtentionPostRegistrationEnabled=cadIfMacDomainCmTxPwrExtentionPostRegistrationEnabled, cadIfMacDomainEarlyAuthEncrCtrl=cadIfMacDomainEarlyAuthEncrCtrl, cadMacPortRowStatus=cadMacPortRowStatus, cadBgpId=cadBgpId, cadIfMacDomainMddInterval=cadIfMacDomainMddInterval, cadMacPortMIBObjects=cadMacPortMIBObjects, cadIfMacDomainSendUdcRulesEnabled=cadIfMacDomainSendUdcRulesEnabled, cadDot3adAggSecState=cadDot3adAggSecState, cadAgingCPEAgingInterval=cadAgingCPEAgingInterval, cadIfMacDomainUcdInterval=cadIfMacDomainUcdInterval, cadBgpStatPhyIfIndex=cadBgpStatPhyIfIndex, cadMacChlCardNumber=cadMacChlCardNumber, cadMacChlPortId=cadMacChlPortId, cadIfMacDomainInsertInterval=cadIfMacDomainInsertInterval, cadAgingNDCacheSearchingCableUnicast=cadAgingNDCacheSearchingCableUnicast, cadBgpGroupId=cadBgpGroupId, cadIfMacDomainMultTxChModeEnabled=cadIfMacDomainMultTxChModeEnabled, cadIfMacDomainDsBondingEnabled=cadIfMacDomainDsBondingEnabled, cadIfMacDomainRcpReportMode=cadIfMacDomainRcpReportMode, PYSNMP_MODULE_ID=cadLayer2Mib, cadMacPortSecState=cadMacPortSecState, cadBgpStatGroupId=cadBgpStatGroupId, cadIfMacDomainRangingInterval=cadIfMacDomainRangingInterval, cadBgpPortId=cadBgpPortId, cadBgLeaderBgpId=cadBgLeaderBgpId, arrisCerIpGroup=arrisCerIpGroup, cadDot3adAggDescription=cadDot3adAggDescription, cadMacPortId=cadMacPortId, cadIfMacDomainT4TimeoutMultiplierEnabled=cadIfMacDomainT4TimeoutMultiplierEnabled, cadMacPortTrapInh=cadMacPortTrapInh, cadDot3adAggId=cadDot3adAggId, cadAgingArpCacheNotPresentMaxTime=cadAgingArpCacheNotPresentMaxTime, cadLayer2MibGroup=cadLayer2MibGroup, cadIfMacDomainDpId=cadIfMacDomainDpId, cadDot3adAggIndex=cadDot3adAggIndex, cadIfMacDomainIfIndex=cadIfMacDomainIfIndex, cadAgingNDCacheSearchingRateLimit=cadAgingNDCacheSearchingRateLimit, cadMacPortAdminState=cadMacPortAdminState, cadIfMacDomainEnforceRulesEnabled=cadIfMacDomainEnforceRulesEnabled, cadIfMacDomainCmUdcEnabled=cadIfMacDomainCmUdcEnabled, cadIfMacDomainDynamicRccMultiTunerEnabled=cadIfMacDomainDynamicRccMultiTunerEnabled, cadDot3adAggAdminState=cadDot3adAggAdminState, cadAgingNDCacheSearchingCableMulticast=cadAgingNDCacheSearchingCableMulticast, cadIfMacDomainDownChannelMaxFrequency=cadIfMacDomainDownChannelMaxFrequency, cadAgingArpCacheSearchingCableUnicast=cadAgingArpCacheSearchingCableUnicast, cadMacChlChannelIfIndex=cadMacChlChannelIfIndex, cadDot3adAggMacAddress=cadDot3adAggMacAddress, cadIfMacDomainTftpEnforce=cadIfMacDomainTftpEnforce, cadBgpMacAddress=cadBgpMacAddress, cadDot3adAggEntry=cadDot3adAggEntry, cadUpSupervisionCfgAssign=cadUpSupervisionCfgAssign, cadMacPortPrState=cadMacPortPrState, cadUpSupervisionStatusEntry=cadUpSupervisionStatusEntry, cadIfMacDomainDsbgDynEnable=cadIfMacDomainDsbgDynEnable, cadMacChlPortType=cadMacChlPortType, cadIfMacDomainMulticastEncryption=cadIfMacDomainMulticastEncryption, cadDot3adAggRowStatus=cadDot3adAggRowStatus, cadAgingNDCacheNotPresentMaxTime=cadAgingNDCacheNotPresentMaxTime, cadAgingNDCacheNotPresentGlobalMaxRate=cadAgingNDCacheNotPresentGlobalMaxRate, cadDot3adAggMinLinks=cadDot3adAggMinLinks, cadUpSupervisionCfgUpChannelIfIndex=cadUpSupervisionCfgUpChannelIfIndex, cadBgpType=cadBgpType, cadIfMacDomainCapabilities=cadIfMacDomainCapabilities, cadBgpStatPhyPortId=cadBgpStatPhyPortId, cadUpSupervisionStatusTable=cadUpSupervisionStatusTable, cadUpSupervisionCfgTable=cadUpSupervisionCfgTable, cadMacChlSfProvAttrMask=cadMacChlSfProvAttrMask, cadIfMacDomainEntry=cadIfMacDomainEntry, cadMacChlCardSubType=cadMacChlCardSubType, cadIfMacDomainIpProvMode=cadIfMacDomainIpProvMode, cadAgingArpCacheNotPresentMinTime=cadAgingArpCacheNotPresentMinTime, cerIpGroup=cerIpGroup, cadIfMacDomainAnnex=cadIfMacDomainAnnex, cadBgpBundleGroupId=cadBgpBundleGroupId, cadIfMacDomainDocsis31Enabled=cadIfMacDomainDocsis31Enabled, cadUpSupervisionStatusDownChannelIfIndex=cadUpSupervisionStatusDownChannelIfIndex, cadIfMacDomainDsOfdmProfileRecoveryGuardTime=cadIfMacDomainDsOfdmProfileRecoveryGuardTime, cadDot3adAggSystemID=cadDot3adAggSystemID, cadIfMacDomainMcastDsidFwdEnabled=cadIfMacDomainMcastDsidFwdEnabled, cadIfMacDomainUsFreqRange=cadIfMacDomainUsFreqRange, cadAgingNDCacheAgingInterval=cadAgingNDCacheAgingInterval, cadAgingArpCacheNotPresentRateLimit=cadAgingArpCacheNotPresentRateLimit, cadAgingNDCacheSearchingGlobalMaxRate=cadAgingNDCacheSearchingGlobalMaxRate, cadMacChlIsPriCapableDs=cadMacChlIsPriCapableDs, cadIfMacDomainRccDynEnable=cadIfMacDomainRccDynEnable, cadMacPortDescription=cadMacPortDescription, cadDot3adAggTable=cadDot3adAggTable, cadIfMacDomainCmStatusEvCtlEnabled=cadIfMacDomainCmStatusEvCtlEnabled, cadBridgeGroupPortStatusTable=cadBridgeGroupPortStatusTable, cadBridgeGroupGeneral=cadBridgeGroupGeneral, cadMacPortDplxStatus=cadMacPortDplxStatus, cadAgingNDCacheSearchingMaxNumber=cadAgingNDCacheSearchingMaxNumber, cadDot3adAggLacpMode=cadDot3adAggLacpMode, cadIfMacDomainDownChannelMinFrequency=cadIfMacDomainDownChannelMinFrequency, cadMacChlRowStatus=cadMacChlRowStatus, cadAgingNDCacheNotPresentRateLimit=cadAgingNDCacheNotPresentRateLimit, cadAgingArpCacheSearchingRateLimit=cadAgingArpCacheSearchingRateLimit, cadIfMacDomainTable=cadIfMacDomainTable, cadAgingIdleMACAgingInterval=cadAgingIdleMACAgingInterval, cadMacChlTable=cadMacChlTable, cadBridgeGroupPortStatusEntry=cadBridgeGroupPortStatusEntry, cadAgingGroup=cadAgingGroup, cadIfMacDomainTcsSizeLimit=cadIfMacDomainTcsSizeLimit, cadDot3adAggTrapInh=cadDot3adAggTrapInh, cadBgName=cadBgName, cadUpSupervisionCfgRowStatus=cadUpSupervisionCfgRowStatus, cadIfMacDomainDsbgReseqWarnThrshld=cadIfMacDomainDsbgReseqWarnThrshld, cadAgingArpCacheNotPresentGlobalMaxRate=cadAgingArpCacheNotPresentGlobalMaxRate, cadBgIndex=cadBgIndex, cadIfMacDomainDSG30Enabled=cadIfMacDomainDSG30Enabled, cadUpSupervisionStatusUpChannelIfIndex=cadUpSupervisionStatusUpChannelIfIndex, cadMacChlDirection=cadMacChlDirection, cadDot3adAggPrState=cadDot3adAggPrState, cadBridgeGroupMaxNum=cadBridgeGroupMaxNum, cadBgpCardType=cadBgpCardType, cadMacPortTable=cadMacPortTable, cadIfMacDomainUsbgDynEnable=cadIfMacDomainUsbgDynEnable, cadDot3adSystemPriority=cadDot3adSystemPriority, cadIfMacDomainMaxServiceIds=cadIfMacDomainMaxServiceIds, cadIfMacDomainInvitedRangingAttempts=cadIfMacDomainInvitedRangingAttempts, cadAgingNDCacheNotPresentMaxNumber=cadAgingNDCacheNotPresentMaxNumber, cadLayer2Mib=cadLayer2Mib, cadBridgeGroup=cadBridgeGroup, cadBridgePortTable=cadBridgePortTable, cadIfMacDomainMultRxChModeEnabled=cadIfMacDomainMultRxChModeEnabled, cadAgingArpCacheAgingInterval=cadAgingArpCacheAgingInterval, cadIfMacDomainTftpProxyEnabled=cadIfMacDomainTftpProxyEnabled, cadBgpCardId=cadBgpCardId, cadIfMacDomainUpChannelMaxFrequency=cadIfMacDomainUpChannelMaxFrequency, cadBgRowStatus=cadBgRowStatus, cadIfMacDomainSyncInterval=cadIfMacDomainSyncInterval, CadDynamicSecretType=CadDynamicSecretType, cadBridgeGroupStatsEntry=cadBridgeGroupStatsEntry, cadAgingNDCacheNotPresentMinTime=cadAgingNDCacheNotPresentMinTime, cadDot3adAggLacpEnable=cadDot3adAggLacpEnable, cadMacPortIfIndex=cadMacPortIfIndex, cadBridgeGroupStatsTable=cadBridgeGroupStatsTable, cadBgpStatPhyCardId=cadBgpStatPhyCardId, cadMacPortMacAddress=cadMacPortMacAddress, cadIfMacDomainRangeOpportunityCycle=cadIfMacDomainRangeOpportunityCycle, cadIfMacDomainCmTxPwrExtentionPreRegistrationEnabled=cadIfMacDomainCmTxPwrExtentionPreRegistrationEnabled, cadIfMacDomainDynamicSecret=cadIfMacDomainDynamicSecret, cadBgMacAddress=cadBgMacAddress, cadUpSupervisionCfgEntry=cadUpSupervisionCfgEntry, cadAgingStaleMACAgingInterval=cadAgingStaleMACAgingInterval, cadIfMacDomainSrcAddrVerifEnabled=cadIfMacDomainSrcAddrVerifEnabled, cadDot3adParams=cadDot3adParams, cadUpSupervisionCfgDownChannelIfIndex=cadUpSupervisionCfgDownChannelIfIndex, cadBgpStatMacIfIndex=cadBgpStatMacIfIndex, cadAging=cadAging, cadAgingSFAgingInterval=cadAgingSFAgingInterval, cadIfMacDomainBpi2Mandatory=cadIfMacDomainBpi2Mandatory, cadIfMacDomainEnergyMgt1x1Enabled=cadIfMacDomainEnergyMgt1x1Enabled, cerIpGratuitousArpPeriod=cerIpGratuitousArpPeriod, CadTftpEnforceType=CadTftpEnforceType, cadIfMacDomainGracefulTcsReductionEnabled=cadIfMacDomainGracefulTcsReductionEnabled, cadAgingArpCacheSearchingCableBroadcast=cadAgingArpCacheSearchingCableBroadcast, cadAgingArpCacheSearchingGlobalMaxRate=cadAgingArpCacheSearchingGlobalMaxRate, cadMacPortOfdm=cadMacPortOfdm, cadMacPortEntry=cadMacPortEntry)
