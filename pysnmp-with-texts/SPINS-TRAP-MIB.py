#
# PySNMP MIB module SPINS-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SPINS-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:10:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectName, NotificationType, Counter64, Bits, TimeTicks, iso, Unsigned32, ObjectIdentity, snmpModules, enterprises, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectName", "NotificationType", "Counter64", "Bits", "TimeTicks", "iso", "Unsigned32", "ObjectIdentity", "snmpModules", "enterprises", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "ModuleIdentity", "Counter32")
TimeStamp, DisplayString, TextualConvention, TestAndIncr, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "DisplayString", "TextualConvention", "TestAndIncr", "RowStatus", "TruthValue")
lucent = MibIdentifier((1, 3, 6, 1, 4, 1, 1751))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1))
softSwitch = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198))
spinsDeviceServer = MibIdentifier((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8))
spinsTraps = ModuleIdentity((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0))
if mibBuilder.loadTexts: spinsTraps.setLastUpdated('240701')
if mibBuilder.loadTexts: spinsTraps.setOrganization('Lucent Technologies')
if mibBuilder.loadTexts: spinsTraps.setContactInfo('')
if mibBuilder.loadTexts: spinsTraps.setDescription('The MIB module for entities implementing the xxxx protocol.')
spinsSmbiSocketConnError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 0))
if mibBuilder.loadTexts: spinsSmbiSocketConnError.setStatus('current')
if mibBuilder.loadTexts: spinsSmbiSocketConnError.setDescription('Indicates that the socket connection between SPINS and SMBI cannot be made. VARIABLE DEFINITIONS: NONE Severity: CRITICAL')
spinsSmbiSocketConnOpen = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 1))
if mibBuilder.loadTexts: spinsSmbiSocketConnOpen.setStatus('current')
if mibBuilder.loadTexts: spinsSmbiSocketConnOpen.setDescription('Indicates that the socket connection between SPINS and SMBI is successful. VARIABLE DEFINITIONS: NONE Severity: INFO')
spinsSbiSocketConnLost = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 2))
if mibBuilder.loadTexts: spinsSbiSocketConnLost.setStatus('current')
if mibBuilder.loadTexts: spinsSbiSocketConnLost.setDescription('Indicates that the socket connection between SPINS and SMBI is closed. VARIABLE DEFINITIONS: NONE Severity: CRITICAL')
spinsSwitchRegnError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 3))
if mibBuilder.loadTexts: spinsSwitchRegnError.setStatus('current')
if mibBuilder.loadTexts: spinsSwitchRegnError.setDescription('Registration of SPINS with the switch for Tollfree and LNP services has failed. VARIABLE DEFINITIONS: NONE Severity: CRITICAL')
spinsSwitchRegnSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 4))
if mibBuilder.loadTexts: spinsSwitchRegnSucc.setStatus('current')
if mibBuilder.loadTexts: spinsSwitchRegnSucc.setDescription('Registration of SPINS with the switch for Tollfree and LNP services is successful. VARIABLE DEFINITIONS: NONE Severity: INFO')
spinsAddLLCNodeError = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 5))
if mibBuilder.loadTexts: spinsAddLLCNodeError.setStatus('current')
if mibBuilder.loadTexts: spinsAddLLCNodeError.setDescription('The second step of registration with the switch (add_LLC_Node) has failed. VARIABLE DEFINITIONS: NONE Severity: CRITICAL')
spinsAddLLCNodeSucc = NotificationType((1, 3, 6, 1, 4, 1, 1751, 1, 1198, 8, 0, 6))
if mibBuilder.loadTexts: spinsAddLLCNodeSucc.setStatus('current')
if mibBuilder.loadTexts: spinsAddLLCNodeSucc.setDescription('The second step of registration with the switch (add_LLC_Node) is successful. VARIABLE DEFINITIONS: NONE Severity: INFO')
mibBuilder.exportSymbols("SPINS-TRAP-MIB", spinsAddLLCNodeSucc=spinsAddLLCNodeSucc, spinsSwitchRegnSucc=spinsSwitchRegnSucc, spinsDeviceServer=spinsDeviceServer, spinsSbiSocketConnLost=spinsSbiSocketConnLost, spinsTraps=spinsTraps, spinsSmbiSocketConnError=spinsSmbiSocketConnError, spinsSmbiSocketConnOpen=spinsSmbiSocketConnOpen, softSwitch=softSwitch, PYSNMP_MODULE_ID=spinsTraps, spinsAddLLCNodeError=spinsAddLLCNodeError, products=products, lucent=lucent, spinsSwitchRegnError=spinsSwitchRegnError)
