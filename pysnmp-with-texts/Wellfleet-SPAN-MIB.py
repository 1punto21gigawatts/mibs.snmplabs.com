#
# PySNMP MIB module Wellfleet-SPAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SPAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, ObjectIdentity, Counter32, Integer32, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, iso, MibIdentifier, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "ObjectIdentity", "Counter32", "Integer32", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "iso", "MibIdentifier", "TimeTicks", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfSpanningTree, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSpanningTree")
wfBrStp = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1))
wfBrStpBaseDelete = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBaseDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBaseDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete the Spanning tree.')
wfBrStpBaseEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBaseEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBaseEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable the spanning tree.')
wfBrStpBaseState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("pres", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpBaseState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBaseState.setDescription('The current state of the spanning tree.')
wfBrStpProtocolSpecification = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("declb100", 2), ("ieee8021d", 3))).clone('ieee8021d')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpProtocolSpecification.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpProtocolSpecification.setDescription('The version of the Spanning Tree protocol being run.')
wfBrStpBridgeID = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBridgeID.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBridgeID.setDescription('The Spanning Tree Bridge ID assigned to this bridge. It is a 8-octet string. The first two octets make up the bridge priority, and the last six are the MAC address of this bridge, which is commonly the MAC address of the first port on the bridge.')
wfBrStpTimeSinceTopologyChange = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpTimeSinceTopologyChange.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last topology change was detected by the bridge.')
wfBrStpTopChanges = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpTopChanges.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpTopChanges.setDescription('The total number of topology changes detected by this bridge since it was last reset or initialized')
wfBrStpDesignatedRoot = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpDesignatedRoot.setDescription('The bridge ID of the root of the spanning tree as determined by the Spanning Tree Protocol as executed by the bridge. This value is used as the Root Identifier parameter in all Configuration Bridge PDUs originated by this node. It is a 8-octet string. The first two octets make up the priority, and the last six are the MAC address of the designated root bridge.')
wfBrStpRootCost = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpRootCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpRootCost.setDescription('The cost of the path to the root as seen from this bridge.')
wfBrStpRootPort = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpRootPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpRootPort.setDescription('The port identifier of the port which offers the lowest cost path from this bridge to the root bridge.')
wfBrStpMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpMaxAge.setDescription('The maximum age of the Spanning Tree Protocol information learned from the network on any port before it is discarded, in hundredths of a second. This represents the value actually in use by the bridge.')
wfBrStpHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpHelloTime.setDescription('The amount of time between transmission of configuration BPDUs by this bridge on any port, when it is the root of the spanning tree or trying to become so, in hundreths of a second. This represents the value actually in use by the bridge.')
wfBrStpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(100))).clone(namedValues=NamedValues(("time", 100))).clone('time')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpHoldTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpHoldTime.setDescription('The value that determines the interval length during which no more than two configuration BPDUs shall be transmitted by this bridge, in hundredths of a second.')
wfBrStpForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpForwardDelay.setDescription('The time, in hundredths of a second, that a port on this bridge will stay in a transitional state (e.g. LISTENING) before moving to the next state (e.g. LEARNING). This value is also used to age all dynamic entries in the Forwarding Database when a topology changed has been detected and is underway. This represents the value actually in use by the bridge.')
wfBrStpBridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBridgeMaxAge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge acting as the root.')
wfBrStpBridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBridgeHelloTime.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBridgeHelloTime.setDescription('The value that all bridges use for HelloTime when this bridge acting as the root.')
wfBrStpBridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBridgeForwardDelay.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge acting as the root.')
wfBrStpBaseTrueConverge = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpBaseTrueConverge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpBaseTrueConverge.setDescription('Enable/Disable parameter. Default is disabled. Allow spanning tree convergence times to become predictable and accurate to settings specified in user configuration.')
wfBrStpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2), )
if mibBuilder.loadTexts: wfBrStpInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceTable.setDescription('inst_id[1] = wfBrStpInterfaceCircuit')
wfBrStpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1), ).setIndexNames((0, "Wellfleet-SPAN-MIB", "wfBrStpInterfaceCircuit"))
if mibBuilder.loadTexts: wfBrStpInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceEntry.setDescription('An entry in wfBrStpInterface.')
wfBrStpInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceDelete.setDescription('Create/Delete parameter. Default is created. Users perform an SNMP SET operation on this object in order to create/delete an interface for the Spanning Tree.')
wfBrStpInterfaceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpInterfaceEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceEnable.setDescription('Enable/Disable parameter. Default is enabled. Users perform an SNMP SET operation on this object in order to enable/disable an interface for the Spanning Tree.')
wfBrStpInterfaceCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceCircuit.setDescription('The circuit number on which this interface is defined.')
wfBrStpInterfacePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpInterfacePriority.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfacePriority.setDescription('The value of the priority field which is contained in the first octet of the (2 octet long) port ID for this circuit. The other octet of the port ID is given by wfBrStpInterfaceCircuit.')
wfBrStpInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("blocking", 2), ("listening", 3), ("learning", 4), ("forwarding", 5), ("broken", 6))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceState.setDescription('The current state of the port as defined by the application of the Spanning Tree Protocol.')
wfBrStpInterfaceMultiCastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceMultiCastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceMultiCastAddr.setDescription('The MAC address used as the destination for all BPDU packets generated out this port.')
wfBrStpInterfacePathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpInterfacePathCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfacePathCost.setDescription('The contribution of this port the the root path cost of paths toward the spanning tree root which include this port.')
wfBrStpInterfaceDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedRoot.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedRoot.setDescription('The unique Bridge Identifier of the Bridge recorded as the Root in the Configuration BPDUs transmitted by the Designated Bridge for the segment to which this port is attached. Bridge IDs are made up of a 2-byte priority field, and a 6-byte MAC address.')
wfBrStpInterfaceDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedCost.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port. This value is compared to the Root Path Cost field in received bridge PDUs.')
wfBrStpInterfaceDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedBridge.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedBridge.setDescription("The Bridge Identifier of the bridge which this port considers to be the Designated Bridge for this port's segment.")
wfBrStpInterfaceDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceDesignatedPort.setDescription("The Port Identifier of the port on the Designated Bridge for this port's segment.")
wfBrStpInterfaceForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfaceForwardTransitions.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceForwardTransitions.setDescription('The number of times this port has transitioned from the Learning State to the Forwarding state.')
wfBrStpInterfacePktsXmitd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfacePktsXmitd.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfacePktsXmitd.setDescription('The number of BPDU packets transmitted out this port')
wfBrStpInterfacePktsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfBrStpInterfacePktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfacePktsRcvd.setDescription('The number of BPDU packets received on this port')
wfBrStpInterfaceTranslationDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfBrStpInterfaceTranslationDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfBrStpInterfaceTranslationDisable.setDescription('Enable/Disable translation bridging parameter. Default is disabled.')
mibBuilder.exportSymbols("Wellfleet-SPAN-MIB", wfBrStpTimeSinceTopologyChange=wfBrStpTimeSinceTopologyChange, wfBrStpForwardDelay=wfBrStpForwardDelay, wfBrStpInterfaceState=wfBrStpInterfaceState, wfBrStpInterfaceDesignatedCost=wfBrStpInterfaceDesignatedCost, wfBrStpMaxAge=wfBrStpMaxAge, wfBrStpBaseState=wfBrStpBaseState, wfBrStpInterfaceTable=wfBrStpInterfaceTable, wfBrStpBaseTrueConverge=wfBrStpBaseTrueConverge, wfBrStpInterfacePktsRcvd=wfBrStpInterfacePktsRcvd, wfBrStpBridgeForwardDelay=wfBrStpBridgeForwardDelay, wfBrStpInterfacePktsXmitd=wfBrStpInterfacePktsXmitd, wfBrStpTopChanges=wfBrStpTopChanges, wfBrStpInterfaceDesignatedPort=wfBrStpInterfaceDesignatedPort, wfBrStpBridgeID=wfBrStpBridgeID, wfBrStpHelloTime=wfBrStpHelloTime, wfBrStpInterfaceForwardTransitions=wfBrStpInterfaceForwardTransitions, wfBrStp=wfBrStp, wfBrStpHoldTime=wfBrStpHoldTime, wfBrStpInterfaceMultiCastAddr=wfBrStpInterfaceMultiCastAddr, wfBrStpBaseDelete=wfBrStpBaseDelete, wfBrStpBridgeMaxAge=wfBrStpBridgeMaxAge, wfBrStpInterfaceDelete=wfBrStpInterfaceDelete, wfBrStpRootCost=wfBrStpRootCost, wfBrStpInterfaceEnable=wfBrStpInterfaceEnable, wfBrStpInterfacePathCost=wfBrStpInterfacePathCost, wfBrStpInterfacePriority=wfBrStpInterfacePriority, wfBrStpBaseEnable=wfBrStpBaseEnable, wfBrStpInterfaceCircuit=wfBrStpInterfaceCircuit, wfBrStpProtocolSpecification=wfBrStpProtocolSpecification, wfBrStpInterfaceDesignatedRoot=wfBrStpInterfaceDesignatedRoot, wfBrStpInterfaceDesignatedBridge=wfBrStpInterfaceDesignatedBridge, wfBrStpInterfaceTranslationDisable=wfBrStpInterfaceTranslationDisable, wfBrStpRootPort=wfBrStpRootPort, wfBrStpInterfaceEntry=wfBrStpInterfaceEntry, wfBrStpBridgeHelloTime=wfBrStpBridgeHelloTime, wfBrStpDesignatedRoot=wfBrStpDesignatedRoot)
