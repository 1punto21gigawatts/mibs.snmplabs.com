#
# PySNMP MIB module H245-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H245-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
mmH245Root, MmH323EndpointType, MmTAddressTag = mibBuilder.importSymbols("MULTI-MEDIA-MIB-TC", "mmH245Root", "MmH323EndpointType", "MmTAddressTag")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Bits, TimeTicks, MibIdentifier, ObjectIdentity, Counter32, Counter64, NotificationType, Unsigned32, IpAddress, Gauge32, ModuleIdentity, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "TimeTicks", "MibIdentifier", "ObjectIdentity", "Counter32", "Counter64", "NotificationType", "Unsigned32", "IpAddress", "Gauge32", "ModuleIdentity", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, TextualConvention, TruthValue, TAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "TAddress")
h245 = ModuleIdentity((0, 0, 8, 341, 1, 3, 1))
if mibBuilder.loadTexts: h245.setLastUpdated('9812202253Z')
if mibBuilder.loadTexts: h245.setOrganization('ITU-T')
if mibBuilder.loadTexts: h245.setContactInfo(' ITU-T SG 16')
if mibBuilder.loadTexts: h245.setDescription(' ')
h245Configuration = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 1))
h245ControlChannel = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 2))
h245CapExchange = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 3))
h245LogChannels = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 4))
h245Conference = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 5))
h245Misc = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 6))
h245MIBConformance = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 7))
h245ConfigurationTable = MibTable((0, 0, 8, 341, 1, 3, 1, 1, 1), )
if mibBuilder.loadTexts: h245ConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: h245ConfigurationTable.setDescription('This table contains information about H.245 configuration parameters. It is a list of configuration parameter entries. The number of entries equals to the number of H.245 stacks in a system.')
h245ConfigurationTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h245ConfigurationTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245ConfigurationTableEntry.setDescription('It contains objects that describe the H.245 configuration parameters.')
h245ConfigT101Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT101Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT101Timer.setDescription('This timer is used during Capability Exchange procedure. This timer is used in the AWAITING RESPONSE state. It specifies the maximum time during which no TerminalCapabilitySetAck or TerminalCapabilitySetReject message may be received.')
h245ConfigT102Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT102Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT102Timer.setDescription('This timer is used during Maintenance Loop procedure. This timer is used during the AWAITING RESPONSE state. It specifies the maximum allowed time during which no MaintenanceLoopAck or MaintenanceLoopReject message may be received .')
h245ConfigT103Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT103Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT103Timer.setDescription('This timer is used during Uni-directional and Bi-directional Logical Channel Signalling procedure. This timer is used in the AWAITING ESTABLISHMENT and AWAITING RELEASE states. It specifies the maximum time during which no OpenLogicalChannelAck or OpenLogicalChannelReject or CloseLogicalChannelAck message may be received.')
h245ConfigT104Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT104Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT104Timer.setDescription('This timer is used during H.223 Multiplex Table procedure. This timer is used in the AWAITING RESPONSE state. It specifies the maximum time during which no MultiplexEntrySendAck or MultiplexEntrySendReject message may be received.')
h245ConfigT105Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT105Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT105Timer.setDescription('This timer is used during Round Trip Delay procedure. This timer is used in the AWAITING RESPONSE state. It specifies the maximum time during which no RoundTripDelayResponse message may be received.')
h245ConfigT106Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT106Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT106Timer.setDescription('This timer is used during Master Slave Determination procedure. This timer is used in the OUTGOING AWAITING RESPONSE state and during the INCOMING AWAITING RESPONSE state. It specifies the maximum time during which no acknowledgement message may be received.')
h245ConfigT107Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT107Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT107Timer.setDescription('This timer is used during Request Multiplex Entry procedure. This timer is used during the AWAITING RESPONSE state. It specifies the maximum time during which no RequestMultiplexEntryAck or RequestMultiplexEntryReject message may be received.')
h245ConfigT108Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT108Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT108Timer.setDescription('This timer is used during SEND Logical Channel procedure. This timer is used in the AWAITING RESPONSE state. It specifies the maximum time during which no RequestMultiplexEntryAck or RequestMultiplexEntryReject message may be received.')
h245ConfigT109Timer = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigT109Timer.setStatus('current')
if mibBuilder.loadTexts: h245ConfigT109Timer.setDescription('This timer is used during Mode Request procedure. This timer is used in the AWAITING RESPONSE state. It specifies the maximum time during which no RequestModeAck or RequestModeReject message may be received.')
h245ConfigN100Counter = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h245ConfigN100Counter.setStatus('current')
if mibBuilder.loadTexts: h245ConfigN100Counter.setDescription('This counter specifies the maximum number of times that MasterSlaveDetermination messages will be sent during the OUTGOING AWAITING RESPONSE state.')
h245ControlChannelStatsTable = MibTable((0, 0, 8, 341, 1, 3, 1, 2, 1), )
if mibBuilder.loadTexts: h245ControlChannelStatsTable.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelStatsTable.setDescription('This table contains information about H.245 statistics. It is a list of statistics entries. The number of entries equals to the number of control channels for all H.245 stacks in a system.')
h245ControlChannelStatsTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h245ControlChannelStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelStatsTableEntry.setDescription('It contains objects that describe the H.245 control channel statistics. ')
h245ControlChannelNumberOfListenPorts = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelNumberOfListenPorts.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelNumberOfListenPorts.setDescription('The number of H245 Listen ports. These ports are used for the remote entity to send a connect on')
h245ControlChannelMaxConnections = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMaxConnections.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMaxConnections.setDescription('The number of maximum active h245 channels allowed.')
h245ControlChannelNumberOfListenFails = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelNumberOfListenFails.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelNumberOfListenFails.setDescription('The number of Listen fails. The fail could be due to exhaustion of system resources')
h245ControlChannelNumberOfActiveConnections = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelNumberOfActiveConnections.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelNumberOfActiveConnections.setDescription('The number of the active H245 connections.')
h245ControlChannelMasterSlaveMaxRetries = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveMaxRetries.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveMaxRetries.setDescription('The number of maximum master slave retries. Reties are needed when the result of master slave process is indeterminate')
h245ControlChannelConnectionAttemptsFail = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelConnectionAttemptsFail.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelConnectionAttemptsFail.setDescription('The number of failures when trying to connect to a listen port.')
h245ControlChanneMasterSlavelDeterminations = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChanneMasterSlavelDeterminations.setStatus('current')
if mibBuilder.loadTexts: h245ControlChanneMasterSlavelDeterminations.setDescription('The number of MSD messages sent from a MSDSE to a peer MSDSE for master/slave determination purpose.')
h245ControlChannelMasterSlaveAcks = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveAcks.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveAcks.setDescription('The number of acks that are used to confirm whether the terminal is the master terminal or the slave terminal, as indicated by decision. When decision is of type master, the terminal receiving this message is the master terminal and when decision is of type slave, it is the slave terminal. ')
h245ControlChannelMasterSlaveRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveRejects.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveRejects.setDescription('The number of rejects of the MasterSlaveDetermination message. ')
h245ControlChannelMasterSlaveT106Rejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveT106Rejects.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveT106Rejects.setDescription('The number of rejects of the MasterSlaveDetermination message. When the cause is of type identicalNumbers, the rejection was due to the random numbers being equivalent and the terminal types being the same.')
h245ControlChannelMasterSlaveMSDRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveMSDRejects.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveMSDRejects.setDescription('The number of MSD rejects of the MasterSlaveDetermination message. Rejects can happen due to different reasons like identical random number after maximum tries, timeouts...')
h245ControlChannelNumberOfMasterSlaveInconsistentFieldRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelNumberOfMasterSlaveInconsistentFieldRejects.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelNumberOfMasterSlaveInconsistentFieldRejects.setDescription('The number of rejects of the MasterSlaveDetermination message. The cause is due to conflict in the status that both entities arrive to.')
h245ControlChannelMasterSlaveMaxCounterRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveMaxCounterRejects.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveMaxCounterRejects.setDescription('The number of rejects of the MasterSlaveDetermination message. There are many reasons why the rejection could happen.')
h245ControlChannelMasterSlaveReleases = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveReleases.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveReleases.setDescription('The number of rejects due to a time out. ')
h245ControlChannelNumberOfTunnels = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelNumberOfTunnels.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelNumberOfTunnels.setDescription('The number of the active H245 tunnels.')
h245ControlChannelMasterSlaveTable = MibTable((0, 0, 8, 341, 1, 3, 1, 2, 2), )
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveTable.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveTable.setDescription('This table contains information about entities that are connected to this entity. It is a list of connection entries. The number of entries equals to the number of active connections.')
h245ControlChannelMasterSlaveTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245ControlChannelSrcAddressTag"), (0, "H245-MIB", "h245ControlChannelSrcTransporTAddress"), (0, "H245-MIB", "h245ControlChannelDesTAddressTag"), (0, "H245-MIB", "h245ControlChannelDestTransporTAddress"))
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMasterSlaveTableEntry.setDescription('It contains objects that describe the status of the master slave determination procedure.')
h245ControlChannelSrcAddressTag = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 1), MmTAddressTag())
if mibBuilder.loadTexts: h245ControlChannelSrcAddressTag.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelSrcAddressTag.setDescription(' It describes the type of address (IP v4, IPv6...) of the source')
h245ControlChannelSrcTransporTAddress = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 2), TAddress())
if mibBuilder.loadTexts: h245ControlChannelSrcTransporTAddress.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelSrcTransporTAddress.setDescription('Source transport address. ')
h245ControlChannelDesTAddressTag = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 3), MmTAddressTag())
if mibBuilder.loadTexts: h245ControlChannelDesTAddressTag.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelDesTAddressTag.setDescription(' It describes the type of address (IP v4, IPv6...) of the source')
h245ControlChannelDestTransporTAddress = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 4), TAddress())
if mibBuilder.loadTexts: h245ControlChannelDestTransporTAddress.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelDestTransporTAddress.setDescription('Remote transport address. ')
h245ControlChannelIndex = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelIndex.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelIndex.setDescription('It is an arbitrary number that is being incremented by 1 for every entry in this table')
h245ControlChannelMSDState = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outgoingWaitingResponse", 1), ("incomingWaitingResponse", 2), ("idle", 3), ("master", 4), ("slave", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelMSDState.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelMSDState.setDescription('It describes the state of the master slave determination procdure. It can be OUTGOING WAITING RESPONSE, INCOMING WAITING RESPONSE, IDLE')
h245ControlChannelTerminalType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 7), MmH323EndpointType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelTerminalType.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelTerminalType.setDescription('Terminal type represents the type of H.323 terminal: 50 - terminal without MC 60 - gateway without MC 70 - terminal with MC but without MP 80 - gateway with MC but without MP 120 - gatekeeper with MC but without MP 160 - MCU with MC but without MP 90 - gateway with MC and Data MP 130 - gatekeeper with MC and Data MP 170 - MCU with MC and Data MP 100 - gateway containing MC with Data and audio MP 140 - gatekeeper containing MC with Data and audio MP 180 - MCU containing MC with Data and audio MP 110 - gateway containing MC with Data, Audio and Video MP 150 - gatekeeper containing MC with Data, Audio and Video MP 190 - MCU containing MC with Data, Audio and Video MP 240 - entity with active MC . ')
h245ControlChannelNumberOfMSDRetries = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelNumberOfMSDRetries.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelNumberOfMSDRetries.setDescription('The number of tries of master slave determination before a meaningful result is concluded. ')
h245ControlChannelIsTunneling = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 2, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ControlChannelIsTunneling.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelIsTunneling.setDescription('This variable indicates if tunneling is used for this channel. ')
h245CapExchangeStatsTable = MibTable((0, 0, 8, 341, 1, 3, 1, 3, 1), )
if mibBuilder.loadTexts: h245CapExchangeStatsTable.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeStatsTable.setDescription('This table contains information about H.245 statistics for capabilities exchange procedure. It is a list of cap exchange statistics entries. The number of entries equals to the number of H.245 stacks in a system.')
h245CapExchangeStatsTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h245CapExchangeStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeStatsTableEntry.setDescription('It contains objects that describe statistics for H.245 cap exchange procedure.')
h245CapExchangeSets = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeSets.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeSets.setDescription("The total number of TerminalCapabilitySets that were sent and received by the local CESE (Capability Exchange Signalling Entity). A TerminalCapabilitySet is used for the intention to signal a terminal's capabilities to ensure that the only multimedia signals to be transmitted are those that can be received and treated appropriately by the receive terminal.")
h245CapExchangeAcks = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeAcks.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeAcks.setDescription('The total number of TerminalCapabilitySetAcks that were sent and received by local CESE (Capability Exchange Signalling Entity). A TerminalCapabilitySetAck is used as a confirmation for a TerminalCapabilitySet that was successfully received and processed.')
h245CapExchangeRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeRejects.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeRejects.setDescription('The total number of TerminalCapabilitySetRejects that were sent and received by the local CESE (Capability Exchange Signalling Entity). A TerminalCapabilitySetReject is used to indicate a failure due to a specific error for a TerminalCapabilitySet that was received, but, yet to be fully processed.')
h245CapExchangeRejectUnspecified = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeRejectUnspecified.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeRejectUnspecified.setDescription('The total number of TerminalCapabilitySetRejects that were sent and received by the local CESE (Capability Exchange Signalling Entity) with the cause value set to unspecified. This means that there was no cause for the rejection of a TerminalCapabilitySet specified.')
h245CapExchangeRejectUndefinedTableEntryUsed = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeRejectUndefinedTableEntryUsed.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeRejectUndefinedTableEntryUsed.setDescription('The total number of TerminalCapabilitySetRejects that were sent and received by the local CESE (Capability Exchange Signalling Entity) with the cause value set to undefinedTableEntryUsed. This means that the cause of the rejection of a TerminalCapabilitySet was due to a capability descriptor made reference to a capability table entry number in the capability table of the TerminalCapabilitySet was not defined.')
h245CapExchangeRejectDescriptorCapacityExceeded = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeRejectDescriptorCapacityExceeded.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeRejectDescriptorCapacityExceeded.setDescription('The total number of TerminalCapabilitySetRejects that were sent and received by the local CESE (Capability Exchange Signalling Entity) with the cause value set to descriptorCapacityExceeded. This means that the cause of the rejection of a TerminalCapabilitySet was due to a terminal incapable of storing all of the information from the capabilityDescriptors of the TerminalCapabilitySet.')
h245CapExchangeRejectTableEntryCapacityExeeded = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeRejectTableEntryCapacityExeeded.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeRejectTableEntryCapacityExeeded.setDescription('The total number of TerminalCapabilitySetRejects that were sent and received by the local CESE (Capability Exchange Signalling Entity) with the cause value set to tableEntryCapacityExceeded. This means that the cause of the rejection of a TerminalCapabilitySet was due to a terminal incapable of storing some (indicated in the highestEntryNumberProcessed) or all (indicated in the noneProcessed) of the information from the capability table of the TerminalCapabilitySet.')
h245CapExchangeReleases = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeReleases.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeReleases.setDescription('The total number of TerminalCapabilitySetReleases that were sent and received by the local CESE (Capability Exchange Signalling Entity). This means that a response for a TerminalCapabilitySet was not received/issued in time. A timer expiry had occurred for the local CESE.')
h245CapExchangeCapabilityTable = MibTable((0, 0, 8, 341, 1, 3, 1, 3, 2), )
if mibBuilder.loadTexts: h245CapExchangeCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeCapabilityTable.setDescription('Contains all the local incoming and outgoing CESEs (Capability Exchange Signalling Entity) that currently exists in this terminal.')
h245CapExchangeCapabilityTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245ControlChannelIndex"), (0, "H245-MIB", "h245CapExchangeDirection"))
if mibBuilder.loadTexts: h245CapExchangeCapabilityTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeCapabilityTableEntry.setDescription('Each entry contains either the local incoming or outgoing CESE (Capability Exchange Signalling Entity) that is derived from a particular H.245 Control Channel, Logical Channel 0, or H.245 session.')
h245CapExchangeDirection = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2))))
if mibBuilder.loadTexts: h245CapExchangeDirection.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeDirection.setDescription('Represents either the local incoming CESE or the local outgoing CESE (Capability Exchange Signalling Entity).')
h245CapExchangeState = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sent", 1), ("acked", 2), ("reject", 3), ("release", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeState.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeState.setDescription('The current state of this CESE (Capability Exchange Signalling Entity).')
h245CapExchangeProtocolId = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeProtocolId.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeProtocolId.setDescription('The version of the H.245 protocol used. This specifies how H.245 messages are formatted and used.')
h245CapExchangeRejectCause = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("undefinedTableEntryUsed", 2), ("descriptorCapacityExceeded", 3), ("tableEntryCapacityExceeded", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeRejectCause.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeRejectCause.setDescription('The latest reject cause value extracted from the latest TerminalCapabilitySetReject.')
h245CapExchangeMultiplexCapability = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeMultiplexCapability.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeMultiplexCapability.setDescription('The latest multiplexCapability extracted from a TerminalCapabilitySet.')
h245CapExchangeCapability = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeCapability.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeCapability.setDescription('The latest capabilityTable extracted from the latest TerminalCapabilitySet.')
h245CapExchangeCapabilityDescriptors = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 3, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245CapExchangeCapabilityDescriptors.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeCapabilityDescriptors.setDescription('The latest capabilityDescriptors extracted from the latest TerminalCapabilitySet.')
h245LogChannelsChannelTable = MibTable((0, 0, 8, 341, 1, 3, 1, 4, 1), )
if mibBuilder.loadTexts: h245LogChannelsChannelTable.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsChannelTable.setDescription('Contains all the local incoming and outgoing LCSEs (Uni or Bi-directional Logical Channel Signalling Entity) that currently exist in this terminal with their logical channels open or in the process of being opened or closed.')
h245LogChannelsChannelTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245ControlChannelIndex"), (0, "H245-MIB", "h245LogChannelsChannelNumber"), (0, "H245-MIB", "h245LogChannelsChannelDirection"))
if mibBuilder.loadTexts: h245LogChannelsChannelTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsChannelTableEntry.setDescription('Each entry contains either the local incoming or outgoing LCSE (Uni or Bi-directional Logical Channel Signalling Entity) that is derived from a particular H.245 Control Channel, Logical Channel 0, or H.245 session with its logical channels that are currently open or in the process of being opened or closed.')
h245LogChannelsChannelNumber = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h245LogChannelsChannelNumber.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsChannelNumber.setDescription('The forwardLogicalChannelNumber used to distinguish this media channel by this LCSE (Uni or Bi-directional Logical Channel Signalling Entity).')
h245LogChannelsChannelDirection = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("receive", 1), ("transmit", 2))))
if mibBuilder.loadTexts: h245LogChannelsChannelDirection.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsChannelDirection.setDescription('Represents the direction of this media channel used by this LCSE (Uni or Bi-directional Logical Channel Signalling Entity) .')
h245LogChannelsIndex = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsIndex.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsIndex.setDescription('A unique value representing this media channel.')
h245LogChannelsChannelState = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("awaitingEstablishment", 1), ("established", 2), ("awaitingRelease", 3), ("awaitingConfirmation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsChannelState.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsChannelState.setDescription('The current state of the media channel which also represents the state of this LCSE (Uni or Bi-directional Logical Channel Signalling Entity).')
h245LogChannelsMediaTableType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47))).clone(namedValues=NamedValues(("nonStandard", 1), ("videoNonStandard", 2), ("h261VideoCapability", 3), ("h262VideoCapability", 4), ("h263VideoCapability", 5), ("is11172VideoCapability", 6), ("audioNonStandard", 7), ("g711Alaw64k", 8), ("g711Alaw56k", 9), ("g711Ulaw64k", 10), ("g711Ulaw56k", 11), ("g722-64k", 12), ("g722-56k", 13), ("g722-48k", 14), ("g7231", 15), ("g728", 16), ("g729", 17), ("g729AnnexA", 18), ("is11172AudioCapability", 19), ("is13818AudioCapability", 20), ("g729wAnnexB", 21), ("g729AnnexAwAnnexB", 22), ("g7231AnnexCCapability", 23), ("gsmFullRate", 24), ("gsmHalfRate", 25), ("gsmEnhancedFullRate", 26), ("dataNonStandard", 27), ("t120", 28), ("dsm-cc", 29), ("userData", 30), ("t84", 31), ("t434", 32), ("h224", 33), ("nlpid", 34), ("dsvdControl", 35), ("h222DataPartitioning", 36), ("t30fax", 37), ("t140", 38), ("h233EncryptionCapability", 39), ("conferenceCapability", 40), ("h235SecurityCapability", 41), ("maxPendingReplacementFor", 42), ("userInputCapability", 43), ("h225", 44), ("h222", 45), ("h223", 46), ("v76", 47)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsMediaTableType.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsMediaTableType.setDescription('The actual media or data type used for this logical channel.')
h245LogChannelsH225Table = MibTable((0, 0, 8, 341, 1, 3, 1, 4, 2), )
if mibBuilder.loadTexts: h245LogChannelsH225Table.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsH225Table.setDescription('Contains the H2250LogicalChannelParameters that are used in all of the logical channels that are currently opened on this terminal.')
h245LogChannelsH225TableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 4, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245LogChannelsIndex"))
if mibBuilder.loadTexts: h245LogChannelsH225TableEntry.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsH225TableEntry.setDescription('Each entry contains the actual specifics and options used in the H2250LogicalChannelParameters within a particular open logical channel.')
h245LogChannelsSessionId = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsSessionId.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsSessionId.setDescription('A unique RTP or T.120 Session Identifier in a conference. It is used by the transmitter to refer to the session to which the logical channel applies.')
h245LogChannelsAssociateSessionId = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsAssociateSessionId.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsAssociateSessionId.setDescription('This is used to associate one session with another in a conference. A typical use will be to associate an audio session with a video session to indicate which sessions to process for lip synchronization.')
h245LogChannelsMediaChannel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 3), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsMediaChannel.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsMediaChannel.setDescription('Indicates a transporTAddress to be used for the logical channel.')
h245LogChannelsMediaGuaranteedDelivery = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsMediaGuaranteedDelivery.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsMediaGuaranteedDelivery.setDescription('Indicates whether or not the underlying media transport should be selected to provide or not to provide guaranteed delivery of data.')
h245LogChannelsMediaControlChannel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 5), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsMediaControlChannel.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsMediaControlChannel.setDescription('Indicates the media control channel in which the sender of the open logical channel will be listening for media control messages for this session. This field is present only when a media control channel is required.')
h245LogChannelsMediaControlGuaranteedDelivery = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsMediaControlGuaranteedDelivery.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsMediaControlGuaranteedDelivery.setDescription('Indicates whether or not the underlying media control transport should be selected to provide or not to provide guaranteed delivery of data. This field is present only when a media control channel is required.')
h245LogChannelsSilenceSuppression = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsSilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsSilenceSuppression.setDescription('Indicates whether the transmitter stops sending packets during times of silence for bandwidth reasons. This can only be enabled for an audio channel only.')
h245LogChannelsDestination = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsDestination.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsDestination.setDescription('Indicates the terminal label (composed of a mcu number and a terminal number) of the destination if one has been assigned.')
h245LogChannelsDynamicRTPPayloadType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsDynamicRTPPayloadType.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsDynamicRTPPayloadType.setDescription('Indicates a dynamic payload value which is used in H.323 for the H.225.0 alternative H.261 video packetization scheme. This field is present only when a dynamic RTP payload is in use.')
h245LogChannelsH261aVideoPacketization = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsH261aVideoPacketization.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsH261aVideoPacketization.setDescription('Indicates that the H.261 alternative RTP payload form is in use as described in H.225.0.')
h245LogChannelsRTPPayloadDescriptor = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsRTPPayloadDescriptor.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsRTPPayloadDescriptor.setDescription('If the rfc-number is chosen, it indicates the offical document of the IETF in which the payload format is defined (OID). Obsolete RFCs should not be referenced here. If the oid component is chosen, this identifies a payload format specified as part of a Recommendation defined by the ITU or an International Standard defined by the ISO and registered in the respective document under this Object Indentifier.')
h245LogChannelsRTPPayloadType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsRTPPayloadType.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsRTPPayloadType.setDescription('Indicates which payload type value used. If the dynamic payload type is used, the values of this field and the logChannelsDynamicRTPPayloadType should match.')
h245LogChannelsTransportCapability = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsTransportCapability.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsTransportCapability.setDescription('Indicates optional transport capabilites such as quality of service and median channel type capabilites.')
h245LogChannelsRedundancyEncoding = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsRedundancyEncoding.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsRedundancyEncoding.setDescription('Indicates which redundancy encoding modes are supported (if any). The redundancyEncoding indicates that the redundant encoding method indicated in this parameter is to be used for this logical channel. The primary encoding is defined by the dataType of the forwardLogicalChannelParameters or the reverseLogicalChannelParameters, respectively. The type of redundancy encoding to be applied for this logical channel is identified by the redundancyEncodingMethod parameter, the secondary encoding is specified in the secondaryEncoding parameter. The DataType (audio, video, etc.) selected for both primary and secondary encoding shall match and shall be in accordance with the redundancyEncodingMethod selected.')
h245LogChannelsSrcTerminalLabel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChannelsSrcTerminalLabel.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsSrcTerminalLabel.setDescription('This is used to identify the terminal number of the sender of the OpenLogicalChannel message.')
h245LogChannelOpenLogicalChannelTable = MibTable((0, 0, 8, 341, 1, 3, 1, 4, 3), )
if mibBuilder.loadTexts: h245LogChannelOpenLogicalChannelTable.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelOpenLogicalChannelTable.setDescription('This table contains information about statistics for H.245 open logical channels.It is a list of statistics entries. The number of entries equals to the number of control channels for all H.245 stacks in a system.')
h245LogChannelOpenLogicalChannelTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 4, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h245LogChannelOpenLogicalChannelTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelOpenLogicalChannelTableEntry.setDescription('It contains objects that describe statistics for H.245 open logical channel procedure.')
h245LogChanOpenLogChanTotalRequests = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanTotalRequests.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanTotalRequests.setDescription('The total number of attempts to open a uni-directional logical channel between an outgoing LCSE and a peer incoming LCSE and a bi-directional logical channel between an outgoing B-LCSE and a peer incoming B-LCSE.')
h245LogChanOpenLogChanAcks = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanAcks.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanAcks.setDescription('The total number of confirmations to accept an open logical channel request. This would represent the final stage of establishing a uni-directional channel that can be used for transmission.')
h245LogChanOpenLogChanConfirms = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanConfirms.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanConfirms.setDescription('The total number of confirmations used for the purpose of bi-directional channel signaling that the reverse channel is open and can be used for transmission. This represents the final stage of establishing a bi-directional channel that can be used for transmission in both directions.')
h245LogChanOpenLogChanRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejects.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejects.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE.')
h245LogChanOpenLogChanRejectUnspecified = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectUnspecified.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectUnspecified.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was unspecified.')
h245LogChanOpenLogChanRejectUnsuitableReverseParameters = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectUnsuitableReverseParameters.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectUnsuitableReverseParameters.setDescription('The total number of rejections used as a response to a request to open a bi-directional logical channel from a B-LCSE when the reason for the rejection was the reverseLogicalChannelParameters in the OpenLogicalChannel were inappropriate.')
h245LogChanOpenLogChanRejectDataTypeNotSupported = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectDataTypeNotSupported.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectDataTypeNotSupported.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a terminal not capable of supporting the desired dataType.')
h245LogChanOpenLogChanRejectDataTypeNotAvailable = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectDataTypeNotAvailable.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectDataTypeNotAvailable.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a terminal not capable of supporting the desired dataType simultaneously with the dataTypes of logical channels that are already open.')
h245LogChanOpenLogChanRejectUnknownDataType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectUnknownDataType.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectUnknownDataType.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a terminal not understanding the dataType indicated in the OpenLogicalChannel.')
h245LogChanOpenLogChanRejectDataTypeALCombinationNotSupported = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectDataTypeALCombinationNotSupported.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectDataTypeALCombinationNotSupported.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a terminal not capable of supporting the dataType indicated in OpenLogicalChannel simultaneously with the Adaptation Layer type indicated in H223LogicalChannelParameters.')
h245LogChanOpenLogChanRejectMulticastChannelNotAllowed = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectMulticastChannelNotAllowed.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectMulticastChannelNotAllowed.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a multicast Channel that could not be opened.')
h245LogChanOpenLogChanRejectInsuffientBandwdith = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectInsuffientBandwdith.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectInsuffientBandwdith.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was because permission to use the requested bandwidth for the logical channel was denied.')
h245LogChanOpenLogChanRejectSeparateStackEstablishmentFailed = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectSeparateStackEstablishmentFailed.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectSeparateStackEstablishmentFailed.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a request to run the data portion of a call on a separate stack failed.')
h245LogChanOpenLogChanRejectInvalidSessionID = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectInvalidSessionID.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectInvalidSessionID.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to an attempt by a slave to set the SessionID when opening a logical channel to the master.')
h245LogChanOpenLogChanRejectMasterSlaveConflict = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectMasterSlaveConflict.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectMasterSlaveConflict.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to an attempt by a slave to open a logical channel in which the master has determined a conflict may occur.')
h245LogChanOpenLogChanRejectWaitForCommunicationMode = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectWaitForCommunicationMode.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectWaitForCommunicationMode.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to an attempt to open a logical channel before MC has transmitted the CommunicationModeCommand.')
h245LogChanOpenLogChanRejectInvalidDependentChannel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectInvalidDependentChannel.setStatus('current')
if mibBuilder.loadTexts: h245LogChanOpenLogChanRejectInvalidDependentChannel.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to an attempt to open a logical channel with a dependent channel specified which is not present.')
h245LogChansOpenLogChanRejectReplacementForRejected = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChansOpenLogChanRejectReplacementForRejected.setStatus('current')
if mibBuilder.loadTexts: h245LogChansOpenLogChanRejectReplacementForRejected.setDescription('The total number of rejections used as a response to a request to open a uni or a bi-directional logical channel from a LCSE or B-LCSE when the reason for the rejection was due to a logical channel of the type attempted cannot be opened using the replacementFor parameter.')
h245LogChannelCloseLogicalChannelTable = MibTable((0, 0, 8, 341, 1, 3, 1, 4, 4), )
if mibBuilder.loadTexts: h245LogChannelCloseLogicalChannelTable.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelCloseLogicalChannelTable.setDescription('This table contains information about H.245 statistics for close logical channel procedure. It is a list of statistics entries. The number of entries equals to the number of control channels for all H.245 stacks in a system.')
h245LogChannelCloseLogicalChannelTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 4, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h245LogChannelCloseLogicalChannelTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelCloseLogicalChannelTableEntry.setDescription('It contains objects that describe statistics for H.245 close logical channel procedure.')
h245LogChanCloseLogChannels = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 4, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanCloseLogChannels.setStatus('current')
if mibBuilder.loadTexts: h245LogChanCloseLogChannels.setDescription('The number of attempts made by the outgoing LCSE or B-LCSE to close a logical channel between two peer LCSEs or B-LCSEs. Note - In the case of a bi-directional logical channel, this closes both forward and reverse channels. It is not possible to close one and not the other.')
h245LogChanCloseLogChanAcks = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanCloseLogChanAcks.setStatus('current')
if mibBuilder.loadTexts: h245LogChanCloseLogChanAcks.setDescription('The number of attempts made to confirm the closing of a logical channel connection. ')
h245LogChanCloseLogChanRequests = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequests.setStatus('current')
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequests.setDescription('The number of attempts made by the outgoing CLCSE to request the closing of a logical channel connection between two peer LCSEs. ')
h245LogChanCloseLogChanRequestsAcks = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequestsAcks.setStatus('current')
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequestsAcks.setDescription('The number of attempts made by the incoming CLCSE to indicate that the logical channel connection will be closed. ')
h245LogChanCloseLogChanRequestRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequestRejects.setStatus('current')
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequestRejects.setDescription('The number of attempts made by the incoming CLCSE to indicate that the logical channel connection will not be closed. The only valid cause value for rejecting to close a channel is unspecified.')
h245LogChanCloseLogChanRequestReleases = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequestReleases.setStatus('current')
if mibBuilder.loadTexts: h245LogChanCloseLogChanRequestReleases.setDescription('The number of attempts made by the outgoing CLCSE in the case of a time out.')
h245MiscRoundTripDelayTable = MibTable((0, 0, 8, 341, 1, 3, 1, 6, 1), )
if mibBuilder.loadTexts: h245MiscRoundTripDelayTable.setStatus('current')
if mibBuilder.loadTexts: h245MiscRoundTripDelayTable.setDescription('This table contains information about round trip delay tests. It is a list round trip delay entries. The number of entries equals to the number of tests performed.')
h245MiscRoundTripDelayTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245ControlChannelIndex"))
if mibBuilder.loadTexts: h245MiscRoundTripDelayTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245MiscRoundTripDelayTableEntry.setDescription('It contains information about the round trip delay messages.')
h245MiscRTDState = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("waiting", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscRTDState.setStatus('current')
if mibBuilder.loadTexts: h245MiscRTDState.setDescription('The state of the round trip delay. It can be either idle or waiting for response. ')
h245MiscT105TimerExpired = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscT105TimerExpired.setStatus('current')
if mibBuilder.loadTexts: h245MiscT105TimerExpired.setDescription('Round trip delay timer expired waiting for a respinse from the other entity. ')
h245MiscLastRTDRequestSent = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscLastRTDRequestSent.setStatus('current')
if mibBuilder.loadTexts: h245MiscLastRTDRequestSent.setDescription('Information about the last round trip delay request sent. ')
h245MiscLastRTDRequestRcvd = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscLastRTDRequestRcvd.setStatus('current')
if mibBuilder.loadTexts: h245MiscLastRTDRequestRcvd.setDescription('Information about the last round trip delay request received. ')
h245MiscLastRTDResponseSent = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscLastRTDResponseSent.setStatus('current')
if mibBuilder.loadTexts: h245MiscLastRTDResponseSent.setDescription('Information about the last round trip delay response sent. ')
h245MiscLastRTDResponseRcvd = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscLastRTDResponseRcvd.setStatus('current')
if mibBuilder.loadTexts: h245MiscLastRTDResponseRcvd.setDescription('Information about the last round trip delay response received. ')
h245MiscMaintenanceLoopTable = MibTable((0, 0, 8, 341, 1, 3, 1, 6, 2), )
if mibBuilder.loadTexts: h245MiscMaintenanceLoopTable.setStatus('current')
if mibBuilder.loadTexts: h245MiscMaintenanceLoopTable.setDescription('This table contains information about maintenance loop mode. It is a list of maintenance loop entries. The number of entries equals to the number of maintenance loop procedures. ')
h245MiscMaintenanceLoopTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 6, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245ControlChannelIndex"), (0, "H245-MIB", "h245MiscMaintenanceLoopDirection"))
if mibBuilder.loadTexts: h245MiscMaintenanceLoopTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245MiscMaintenanceLoopTableEntry.setDescription('It contains entries that describe the maintenance loop procedure.')
h245MiscMaintenanceLoopDirection = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incoming", 1), ("outgoing", 2))))
if mibBuilder.loadTexts: h245MiscMaintenanceLoopDirection.setStatus('current')
if mibBuilder.loadTexts: h245MiscMaintenanceLoopDirection.setDescription('The direction could be either incoming or outgoing. ')
h245MiscMLState = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notLooped", 1), ("waiting", 2), ("looped", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscMLState.setStatus('current')
if mibBuilder.loadTexts: h245MiscMLState.setDescription('The state of the channel which can be: not looped, waiting to be looped or looped. ')
h245MiscNumberOfRequests = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscNumberOfRequests.setStatus('current')
if mibBuilder.loadTexts: h245MiscNumberOfRequests.setDescription('Number of loop requests on that channel. ')
h245MiscNumberOfAcks = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscNumberOfAcks.setStatus('current')
if mibBuilder.loadTexts: h245MiscNumberOfAcks.setDescription('Number of maintenance loop acks on the channel.')
h245MiscLastMLRequestOrAckType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("looped", 1), ("notLooped", 2), ("awaitingResponse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscLastMLRequestOrAckType.setStatus('current')
if mibBuilder.loadTexts: h245MiscLastMLRequestOrAckType.setDescription('The type of the last request or response received. The type can be either media or logical channel loop. ')
h245MiscMLMediaOrLogicalChannelLoopRejectChannelNumber = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscMLMediaOrLogicalChannelLoopRejectChannelNumber.setStatus('current')
if mibBuilder.loadTexts: h245MiscMLMediaOrLogicalChannelLoopRejectChannelNumber.setDescription('If the loop rejecte is of type media loop or logical channel loop then this represents the channel number for the logical channel. ')
h245MiscNumberOfRejects = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscNumberOfRejects.setStatus('current')
if mibBuilder.loadTexts: h245MiscNumberOfRejects.setDescription('Number of loop requests that got rejected. ')
h245MiscLastRejectType = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("system-loop", 1), ("media-loop", 2), ("log-channel-loop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscLastRejectType.setStatus('current')
if mibBuilder.loadTexts: h245MiscLastRejectType.setDescription('The type of the last reject for the loop request.')
h245MiscErrorCode = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("can-not-perform-loop", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245MiscErrorCode.setStatus('current')
if mibBuilder.loadTexts: h245MiscErrorCode.setDescription('The error code that caused the rejection of the loop request. ')
h245ConferenceTerminalTable = MibTable((0, 0, 8, 341, 1, 3, 1, 5, 1), )
if mibBuilder.loadTexts: h245ConferenceTerminalTable.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceTerminalTable.setDescription('This table contains information about the terminal charachteristics that are related to a conference. It is a list entries. The number of entries equals to the number of conferences.')
h245ConferenceTerminalTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H245-MIB", "h245ConferenceConferenceId"), (0, "H245-MIB", "h245ConferenceTerminalLabel"))
if mibBuilder.loadTexts: h245ConferenceTerminalTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceTerminalTableEntry.setDescription('It contains objects that describe a terminal as a conference participant.')
h245ConferenceConferenceId = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: h245ConferenceConferenceId.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceConferenceId.setDescription('The conference identifier.')
h245ConferenceTerminalLabel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2))
if mibBuilder.loadTexts: h245ConferenceTerminalLabel.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceTerminalLabel.setDescription('The terminal label of this terminal ')
h245ConferenceControlChannelIndex = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceControlChannelIndex.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceControlChannelIndex.setDescription('The index of the control channel table that identifies the control channel for the conference.')
h245ConferenceBroadcaster = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceBroadcaster.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceBroadcaster.setDescription('The indicator of the terminal being a broadcaster.')
h245ConferenceConferenceChair = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceConferenceChair.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceConferenceChair.setDescription('The indicator of the terminal being a conference chair.')
h245ConferenceMultipoint = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceMultipoint.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceMultipoint.setDescription('The indicator of the conference being a multipoint.')
h245ConferenceStatsTable = MibTable((0, 0, 8, 341, 1, 3, 1, 5, 2), )
if mibBuilder.loadTexts: h245ConferenceStatsTable.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceStatsTable.setDescription('This table contains information about conference statistics. It is a list of conference statistics entries. The number of entries equals to the number of conferences on all system interfaces.')
h245ConferenceStatsTableEntry = MibTableRow((0, 0, 8, 341, 1, 3, 1, 5, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h245ConferenceStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceStatsTableEntry.setDescription('It contains objects that describe conference statistics.')
h245ConferenceBroadcastMyLogicalChannel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceBroadcastMyLogicalChannel.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceBroadcastMyLogicalChannel.setDescription('The number of attempts made by a terminal to transmit MCV command to force an associated MCU to broadcast its video signal used to transmit the picture of a chairman or VIP, alternatively to hold a picture source during the transmission of graphics.')
h245ConferenceCancelBroadcastMyLogicalChannel = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceCancelBroadcastMyLogicalChannel.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceCancelBroadcastMyLogicalChannel.setDescription('The number of attempts made by a terminal to cancel MCV command. ')
h245ConferenceSendThisSource = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceSendThisSource.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceSendThisSource.setDescription('The number of attempts made by a terminal to send VCS command to MCU to cause transmission to itself of the video from the terminal whose identity number follows VCS.')
h245ConferenceCancelSendThisSource = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceCancelSendThisSource.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceCancelSendThisSource.setDescription('The number of attempts made by a terminal to cancel VCS and return to automatic video switching at the MCU.')
h245ConferenceDropConference = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceDropConference.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceDropConference.setDescription('The number of attempts made by a terminal that is chair-control to drop all terminals from the conference. ')
h245ConferenceEqualiseDelay = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceEqualiseDelay.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceEqualiseDelay.setDescription('The same meaning as the command ACE in H.230.')
h245ConferenceZeroDelay = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceZeroDelay.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceZeroDelay.setDescription('The same meaning as the command ACZ defined in H.230.')
h245ConferenceMultipointModeCommand = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceMultipointModeCommand.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceMultipointModeCommand.setDescription('The number of attempts made by the MCU to send request to a terminal to comply with all MCU requestMode requests.')
h245ConferenceCancelMultipointModeCommand = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceCancelMultipointModeCommand.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceCancelMultipointModeCommand.setDescription('The number of attempts made by the MCU to send a cancelation of a MultipointModeCommand. ')
h245ConferenceVideoFreezePicture = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceVideoFreezePicture.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceVideoFreezePicture.setDescription('The number of commands that are sent/received to/from the video decoder to complete updating the current video frame and subsequently display the frozen picture until receipt of the appropriate freeze-picture release control signal. ')
h245ConferenceVideoFastUpdatePicture = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceVideoFastUpdatePicture.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceVideoFastUpdatePicture.setDescription('The number of commands sent/received to enter the fast update mode.')
h245ConferenceVideoFastUpdateGOB = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceVideoFastUpdateGOB.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceVideoFastUpdateGOB.setDescription('The number of commands sent/received by the video encoder to fast update one or more GOBs.')
h245ConferenceVideoTemporalSpatialTradeOff = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceVideoTemporalSpatialTradeOff.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceVideoTemporalSpatialTradeOff.setDescription('The number of commands sent/received by video encoder to change its trade off between temporal and spatial resolution. ')
h245ConferenceVideoSendSyncEveryGOB = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceVideoSendSyncEveryGOB.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceVideoSendSyncEveryGOB.setDescription('The number of commands sent/received by video encoder to use sync for every GOB until the cancel command is received. ')
h245ConferenceVideoFastUpdateMB = MibTableColumn((0, 0, 8, 341, 1, 3, 1, 5, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h245ConferenceVideoFastUpdateMB.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceVideoFastUpdateMB.setDescription('The number of sent/received by video encoder to perform a fast update of one or more MBs.')
h245MIBGroups = MibIdentifier((0, 0, 8, 341, 1, 3, 1, 7, 1))
h245ConfigurationGroup = ObjectGroup((0, 0, 8, 341, 1, 3, 1, 7, 1, 1)).setObjects(("H245-MIB", "h245ConfigT101Timer"), ("H245-MIB", "h245ConfigT102Timer"), ("H245-MIB", "h245ConfigT103Timer"), ("H245-MIB", "h245ConfigT104Timer"), ("H245-MIB", "h245ConfigT105Timer"), ("H245-MIB", "h245ConfigT106Timer"), ("H245-MIB", "h245ConfigT107Timer"), ("H245-MIB", "h245ConfigT108Timer"), ("H245-MIB", "h245ConfigT109Timer"), ("H245-MIB", "h245ConfigN100Counter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245ConfigurationGroup = h245ConfigurationGroup.setStatus('current')
if mibBuilder.loadTexts: h245ConfigurationGroup.setDescription('.')
h245ControlChannelGroup = ObjectGroup((0, 0, 8, 341, 1, 3, 1, 7, 1, 2)).setObjects(("H245-MIB", "h245ControlChannelNumberOfListenPorts"), ("H245-MIB", "h245ControlChannelMaxConnections"), ("H245-MIB", "h245ControlChannelNumberOfListenFails"), ("H245-MIB", "h245ControlChannelNumberOfActiveConnections"), ("H245-MIB", "h245ControlChannelMasterSlaveMaxRetries"), ("H245-MIB", "h245ControlChannelConnectionAttemptsFail"), ("H245-MIB", "h245ControlChanneMasterSlavelDeterminations"), ("H245-MIB", "h245ControlChannelMasterSlaveAcks"), ("H245-MIB", "h245ControlChannelMasterSlaveRejects"), ("H245-MIB", "h245ControlChannelMasterSlaveT106Rejects"), ("H245-MIB", "h245ControlChannelMasterSlaveMSDRejects"), ("H245-MIB", "h245ControlChannelNumberOfMasterSlaveInconsistentFieldRejects"), ("H245-MIB", "h245ControlChannelMasterSlaveMaxCounterRejects"), ("H245-MIB", "h245ControlChannelMasterSlaveReleases"), ("H245-MIB", "h245ControlChannelNumberOfTunnels"), ("H245-MIB", "h245ControlChannelIndex"), ("H245-MIB", "h245ControlChannelMSDState"), ("H245-MIB", "h245ControlChannelTerminalType"), ("H245-MIB", "h245ControlChannelNumberOfMSDRetries"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245ControlChannelGroup = h245ControlChannelGroup.setStatus('current')
if mibBuilder.loadTexts: h245ControlChannelGroup.setDescription('.')
h245CapExchangeGroup = ObjectGroup((0, 0, 8, 341, 1, 3, 1, 7, 1, 3)).setObjects(("H245-MIB", "h245CapExchangeSets"), ("H245-MIB", "h245CapExchangeAcks"), ("H245-MIB", "h245CapExchangeRejects"), ("H245-MIB", "h245CapExchangeRejectUnspecified"), ("H245-MIB", "h245CapExchangeRejectUndefinedTableEntryUsed"), ("H245-MIB", "h245CapExchangeRejectDescriptorCapacityExceeded"), ("H245-MIB", "h245CapExchangeRejectTableEntryCapacityExeeded"), ("H245-MIB", "h245CapExchangeReleases"), ("H245-MIB", "h245CapExchangeState"), ("H245-MIB", "h245CapExchangeProtocolId"), ("H245-MIB", "h245CapExchangeRejectCause"), ("H245-MIB", "h245CapExchangeMultiplexCapability"), ("H245-MIB", "h245CapExchangeCapability"), ("H245-MIB", "h245CapExchangeCapabilityDescriptors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245CapExchangeGroup = h245CapExchangeGroup.setStatus('current')
if mibBuilder.loadTexts: h245CapExchangeGroup.setDescription('.')
h245LogChannelsGroup = ObjectGroup((0, 0, 8, 341, 1, 3, 1, 7, 1, 4)).setObjects(("H245-MIB", "h245LogChannelsIndex"), ("H245-MIB", "h245LogChannelsChannelState"), ("H245-MIB", "h245LogChannelsMediaTableType"), ("H245-MIB", "h245LogChannelsSessionId"), ("H245-MIB", "h245LogChannelsAssociateSessionId"), ("H245-MIB", "h245LogChannelsMediaChannel"), ("H245-MIB", "h245LogChannelsMediaGuaranteedDelivery"), ("H245-MIB", "h245LogChannelsMediaControlChannel"), ("H245-MIB", "h245LogChannelsMediaControlGuaranteedDelivery"), ("H245-MIB", "h245LogChannelsSilenceSuppression"), ("H245-MIB", "h245LogChannelsDestination"), ("H245-MIB", "h245LogChannelsDynamicRTPPayloadType"), ("H245-MIB", "h245LogChannelsH261aVideoPacketization"), ("H245-MIB", "h245LogChannelsRTPPayloadDescriptor"), ("H245-MIB", "h245LogChannelsRTPPayloadType"), ("H245-MIB", "h245LogChannelsTransportCapability"), ("H245-MIB", "h245LogChannelsRedundancyEncoding"), ("H245-MIB", "h245LogChannelsSrcTerminalLabel"), ("H245-MIB", "h245LogChanOpenLogChanTotalRequests"), ("H245-MIB", "h245LogChanOpenLogChanAcks"), ("H245-MIB", "h245LogChanOpenLogChanConfirms"), ("H245-MIB", "h245LogChanOpenLogChanRejects"), ("H245-MIB", "h245LogChanOpenLogChanRejectUnspecified"), ("H245-MIB", "h245LogChanOpenLogChanRejectUnsuitableReverseParameters"), ("H245-MIB", "h245LogChanOpenLogChanRejectDataTypeNotSupported"), ("H245-MIB", "h245LogChanOpenLogChanRejectDataTypeNotAvailable"), ("H245-MIB", "h245LogChanOpenLogChanRejectUnknownDataType"), ("H245-MIB", "h245LogChanOpenLogChanRejectDataTypeALCombinationNotSupported"), ("H245-MIB", "h245LogChanOpenLogChanRejectMulticastChannelNotAllowed"), ("H245-MIB", "h245LogChanOpenLogChanRejectInsuffientBandwdith"), ("H245-MIB", "h245LogChanOpenLogChanRejectSeparateStackEstablishmentFailed"), ("H245-MIB", "h245LogChanOpenLogChanRejectInvalidSessionID"), ("H245-MIB", "h245LogChanOpenLogChanRejectMasterSlaveConflict"), ("H245-MIB", "h245LogChanOpenLogChanRejectWaitForCommunicationMode"), ("H245-MIB", "h245LogChanOpenLogChanRejectInvalidDependentChannel"), ("H245-MIB", "h245LogChansOpenLogChanRejectReplacementForRejected"), ("H245-MIB", "h245LogChanCloseLogChannels"), ("H245-MIB", "h245LogChanCloseLogChanAcks"), ("H245-MIB", "h245LogChanCloseLogChanRequests"), ("H245-MIB", "h245LogChanCloseLogChanRequestsAcks"), ("H245-MIB", "h245LogChanCloseLogChanRequestRejects"), ("H245-MIB", "h245LogChanCloseLogChanRequestReleases"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245LogChannelsGroup = h245LogChannelsGroup.setStatus('current')
if mibBuilder.loadTexts: h245LogChannelsGroup.setDescription('.')
h245ConferenceGroup = ObjectGroup((0, 0, 8, 341, 1, 3, 1, 7, 1, 5)).setObjects(("H245-MIB", "h245ConferenceControlChannelIndex"), ("H245-MIB", "h245ConferenceBroadcaster"), ("H245-MIB", "h245ConferenceConferenceChair"), ("H245-MIB", "h245ConferenceMultipoint"), ("H245-MIB", "h245ConferenceBroadcastMyLogicalChannel"), ("H245-MIB", "h245ConferenceCancelBroadcastMyLogicalChannel"), ("H245-MIB", "h245ConferenceSendThisSource"), ("H245-MIB", "h245ConferenceCancelSendThisSource"), ("H245-MIB", "h245ConferenceDropConference"), ("H245-MIB", "h245ConferenceEqualiseDelay"), ("H245-MIB", "h245ConferenceZeroDelay"), ("H245-MIB", "h245ConferenceMultipointModeCommand"), ("H245-MIB", "h245ConferenceCancelMultipointModeCommand"), ("H245-MIB", "h245ConferenceVideoFreezePicture"), ("H245-MIB", "h245ConferenceVideoFastUpdatePicture"), ("H245-MIB", "h245ConferenceVideoFastUpdateGOB"), ("H245-MIB", "h245ConferenceVideoTemporalSpatialTradeOff"), ("H245-MIB", "h245ConferenceVideoSendSyncEveryGOB"), ("H245-MIB", "h245ConferenceVideoFastUpdateMB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245ConferenceGroup = h245ConferenceGroup.setStatus('current')
if mibBuilder.loadTexts: h245ConferenceGroup.setDescription('.')
h245MiscGroup = ObjectGroup((0, 0, 8, 341, 1, 3, 1, 7, 1, 6)).setObjects(("H245-MIB", "h245MiscRTDState"), ("H245-MIB", "h245MiscT105TimerExpired"), ("H245-MIB", "h245MiscLastRTDRequestSent"), ("H245-MIB", "h245MiscLastRTDRequestRcvd"), ("H245-MIB", "h245MiscLastRTDResponseSent"), ("H245-MIB", "h245MiscLastRTDResponseRcvd"), ("H245-MIB", "h245MiscMLState"), ("H245-MIB", "h245MiscNumberOfRequests"), ("H245-MIB", "h245MiscNumberOfAcks"), ("H245-MIB", "h245MiscLastMLRequestOrAckType"), ("H245-MIB", "h245MiscMLMediaOrLogicalChannelLoopRejectChannelNumber"), ("H245-MIB", "h245MiscNumberOfRejects"), ("H245-MIB", "h245MiscLastRejectType"), ("H245-MIB", "h245MiscErrorCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245MiscGroup = h245MiscGroup.setStatus('current')
if mibBuilder.loadTexts: h245MiscGroup.setDescription('.')
h245MIBCompliance = ModuleCompliance((0, 0, 8, 341, 1, 3, 1, 7, 2)).setObjects(("H245-MIB", "h245ConfigurationGroup"), ("H245-MIB", "h245ControlChannelGroup"), ("H245-MIB", "h245CapExchangeGroup"), ("H245-MIB", "h245LogChannelsGroup"), ("H245-MIB", "h245ConferenceGroup"), ("H245-MIB", "h245MiscGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h245MIBCompliance = h245MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: h245MIBCompliance.setDescription('The set of objects required for compliance.')
mibBuilder.exportSymbols("H245-MIB", h245MiscT105TimerExpired=h245MiscT105TimerExpired, h245CapExchangeState=h245CapExchangeState, h245CapExchangeRejectDescriptorCapacityExceeded=h245CapExchangeRejectDescriptorCapacityExceeded, h245ConferenceZeroDelay=h245ConferenceZeroDelay, h245ConferenceBroadcaster=h245ConferenceBroadcaster, h245MiscRoundTripDelayTableEntry=h245MiscRoundTripDelayTableEntry, h245ControlChannelMasterSlaveMSDRejects=h245ControlChannelMasterSlaveMSDRejects, h245ControlChannelSrcAddressTag=h245ControlChannelSrcAddressTag, h245ControlChannelMasterSlaveAcks=h245ControlChannelMasterSlaveAcks, h245ConfigT101Timer=h245ConfigT101Timer, h245ControlChannelNumberOfListenFails=h245ControlChannelNumberOfListenFails, h245LogChannelsRTPPayloadType=h245LogChannelsRTPPayloadType, h245Conference=h245Conference, h245MiscMLMediaOrLogicalChannelLoopRejectChannelNumber=h245MiscMLMediaOrLogicalChannelLoopRejectChannelNumber, h245MiscLastRTDRequestRcvd=h245MiscLastRTDRequestRcvd, h245LogChanCloseLogChanRequests=h245LogChanCloseLogChanRequests, h245ControlChannelNumberOfMasterSlaveInconsistentFieldRejects=h245ControlChannelNumberOfMasterSlaveInconsistentFieldRejects, h245MiscLastRTDResponseRcvd=h245MiscLastRTDResponseRcvd, h245LogChanOpenLogChanRejectDataTypeNotAvailable=h245LogChanOpenLogChanRejectDataTypeNotAvailable, h245MiscNumberOfRequests=h245MiscNumberOfRequests, h245ConfigurationTable=h245ConfigurationTable, h245LogChanOpenLogChanRejectInvalidDependentChannel=h245LogChanOpenLogChanRejectInvalidDependentChannel, h245ControlChannelMasterSlaveTableEntry=h245ControlChannelMasterSlaveTableEntry, h245LogChanOpenLogChanAcks=h245LogChanOpenLogChanAcks, h245ControlChannelMasterSlaveT106Rejects=h245ControlChannelMasterSlaveT106Rejects, h245ControlChannelMasterSlaveReleases=h245ControlChannelMasterSlaveReleases, h245ControlChannelMSDState=h245ControlChannelMSDState, h245CapExchangeRejectTableEntryCapacityExeeded=h245CapExchangeRejectTableEntryCapacityExeeded, h245ControlChanneMasterSlavelDeterminations=h245ControlChanneMasterSlavelDeterminations, h245ConferenceConferenceChair=h245ConferenceConferenceChair, h245MiscNumberOfAcks=h245MiscNumberOfAcks, h245ControlChannelMasterSlaveTable=h245ControlChannelMasterSlaveTable, h245ConferenceVideoFreezePicture=h245ConferenceVideoFreezePicture, h245ConferenceTerminalTable=h245ConferenceTerminalTable, h245LogChanOpenLogChanRejectInvalidSessionID=h245LogChanOpenLogChanRejectInvalidSessionID, h245CapExchangeMultiplexCapability=h245CapExchangeMultiplexCapability, h245=h245, h245CapExchangeCapabilityTableEntry=h245CapExchangeCapabilityTableEntry, h245CapExchangeRejects=h245CapExchangeRejects, h245Misc=h245Misc, h245LogChanOpenLogChanRejectUnspecified=h245LogChanOpenLogChanRejectUnspecified, h245ConfigT102Timer=h245ConfigT102Timer, h245ConfigT108Timer=h245ConfigT108Timer, h245LogChannelsAssociateSessionId=h245LogChannelsAssociateSessionId, h245LogChanOpenLogChanRejectSeparateStackEstablishmentFailed=h245LogChanOpenLogChanRejectSeparateStackEstablishmentFailed, h245ConferenceTerminalLabel=h245ConferenceTerminalLabel, h245ControlChannelConnectionAttemptsFail=h245ControlChannelConnectionAttemptsFail, h245ConferenceVideoTemporalSpatialTradeOff=h245ConferenceVideoTemporalSpatialTradeOff, h245MIBCompliance=h245MIBCompliance, h245ControlChannelIsTunneling=h245ControlChannelIsTunneling, h245CapExchangeProtocolId=h245CapExchangeProtocolId, h245ControlChannelStatsTable=h245ControlChannelStatsTable, h245ControlChannelNumberOfActiveConnections=h245ControlChannelNumberOfActiveConnections, h245LogChannelsTransportCapability=h245LogChannelsTransportCapability, h245ConferenceCancelSendThisSource=h245ConferenceCancelSendThisSource, h245CapExchange=h245CapExchange, h245LogChannelOpenLogicalChannelTable=h245LogChannelOpenLogicalChannelTable, h245LogChannelsChannelState=h245LogChannelsChannelState, h245ConfigT107Timer=h245ConfigT107Timer, h245LogChanOpenLogChanRejectDataTypeNotSupported=h245LogChanOpenLogChanRejectDataTypeNotSupported, h245LogChanOpenLogChanRejectUnknownDataType=h245LogChanOpenLogChanRejectUnknownDataType, h245LogChanCloseLogChanAcks=h245LogChanCloseLogChanAcks, h245ConferenceVideoFastUpdatePicture=h245ConferenceVideoFastUpdatePicture, h245CapExchangeAcks=h245CapExchangeAcks, h245LogChannelsMediaControlGuaranteedDelivery=h245LogChannelsMediaControlGuaranteedDelivery, h245CapExchangeStatsTableEntry=h245CapExchangeStatsTableEntry, h245ConferenceVideoSendSyncEveryGOB=h245ConferenceVideoSendSyncEveryGOB, h245LogChanCloseLogChanRequestsAcks=h245LogChanCloseLogChanRequestsAcks, h245ControlChannel=h245ControlChannel, h245ConferenceSendThisSource=h245ConferenceSendThisSource, h245ControlChannelMasterSlaveRejects=h245ControlChannelMasterSlaveRejects, h245ConferenceConferenceId=h245ConferenceConferenceId, h245Configuration=h245Configuration, h245CapExchangeCapabilityDescriptors=h245CapExchangeCapabilityDescriptors, h245LogChannels=h245LogChannels, h245CapExchangeRejectUndefinedTableEntryUsed=h245CapExchangeRejectUndefinedTableEntryUsed, h245ControlChannelMasterSlaveMaxRetries=h245ControlChannelMasterSlaveMaxRetries, h245ConfigurationTableEntry=h245ConfigurationTableEntry, h245LogChannelsMediaGuaranteedDelivery=h245LogChannelsMediaGuaranteedDelivery, h245ConferenceVideoFastUpdateMB=h245ConferenceVideoFastUpdateMB, h245LogChanCloseLogChannels=h245LogChanCloseLogChannels, h245MiscGroup=h245MiscGroup, h245ConfigT103Timer=h245ConfigT103Timer, h245MiscNumberOfRejects=h245MiscNumberOfRejects, h245ConferenceStatsTable=h245ConferenceStatsTable, h245LogChannelsH225TableEntry=h245LogChannelsH225TableEntry, h245CapExchangeCapability=h245CapExchangeCapability, h245ConfigurationGroup=h245ConfigurationGroup, h245LogChannelsMediaTableType=h245LogChannelsMediaTableType, h245ControlChannelStatsTableEntry=h245ControlChannelStatsTableEntry, h245ControlChannelTerminalType=h245ControlChannelTerminalType, h245LogChannelsChannelTable=h245LogChannelsChannelTable, h245MiscLastRTDResponseSent=h245MiscLastRTDResponseSent, h245LogChanOpenLogChanRejectMasterSlaveConflict=h245LogChanOpenLogChanRejectMasterSlaveConflict, h245MiscMaintenanceLoopDirection=h245MiscMaintenanceLoopDirection, h245LogChannelsMediaChannel=h245LogChannelsMediaChannel, h245LogChannelsIndex=h245LogChannelsIndex, h245LogChanOpenLogChanTotalRequests=h245LogChanOpenLogChanTotalRequests, h245MiscLastRTDRequestSent=h245MiscLastRTDRequestSent, h245LogChannelsSilenceSuppression=h245LogChannelsSilenceSuppression, h245ControlChannelNumberOfListenPorts=h245ControlChannelNumberOfListenPorts, h245LogChannelsChannelTableEntry=h245LogChannelsChannelTableEntry, h245LogChannelsSrcTerminalLabel=h245LogChannelsSrcTerminalLabel, h245LogChannelOpenLogicalChannelTableEntry=h245LogChannelOpenLogicalChannelTableEntry, h245LogChanOpenLogChanRejectWaitForCommunicationMode=h245LogChanOpenLogChanRejectWaitForCommunicationMode, h245LogChannelsChannelNumber=h245LogChannelsChannelNumber, h245LogChanOpenLogChanConfirms=h245LogChanOpenLogChanConfirms, h245CapExchangeStatsTable=h245CapExchangeStatsTable, h245LogChanOpenLogChanRejectInsuffientBandwdith=h245LogChanOpenLogChanRejectInsuffientBandwdith, h245LogChannelsRTPPayloadDescriptor=h245LogChannelsRTPPayloadDescriptor, h245LogChanCloseLogChanRequestReleases=h245LogChanCloseLogChanRequestReleases, h245ConferenceStatsTableEntry=h245ConferenceStatsTableEntry, h245ControlChannelMasterSlaveMaxCounterRejects=h245ControlChannelMasterSlaveMaxCounterRejects, h245MiscLastRejectType=h245MiscLastRejectType, h245ConferenceCancelMultipointModeCommand=h245ConferenceCancelMultipointModeCommand, h245CapExchangeRejectUnspecified=h245CapExchangeRejectUnspecified, h245ConfigN100Counter=h245ConfigN100Counter, h245ControlChannelGroup=h245ControlChannelGroup, h245MIBConformance=h245MIBConformance, h245LogChannelsChannelDirection=h245LogChannelsChannelDirection, h245CapExchangeRejectCause=h245CapExchangeRejectCause, h245ConfigT105Timer=h245ConfigT105Timer, h245ConferenceControlChannelIndex=h245ConferenceControlChannelIndex, h245CapExchangeSets=h245CapExchangeSets, h245LogChannelCloseLogicalChannelTable=h245LogChannelCloseLogicalChannelTable, h245MiscRoundTripDelayTable=h245MiscRoundTripDelayTable, h245ConferenceBroadcastMyLogicalChannel=h245ConferenceBroadcastMyLogicalChannel, h245LogChannelsDynamicRTPPayloadType=h245LogChannelsDynamicRTPPayloadType, h245ConferenceGroup=h245ConferenceGroup, h245ConfigT104Timer=h245ConfigT104Timer, h245CapExchangeReleases=h245CapExchangeReleases, h245ConferenceTerminalTableEntry=h245ConferenceTerminalTableEntry, h245LogChansOpenLogChanRejectReplacementForRejected=h245LogChansOpenLogChanRejectReplacementForRejected, h245ConferenceCancelBroadcastMyLogicalChannel=h245ConferenceCancelBroadcastMyLogicalChannel, h245MiscErrorCode=h245MiscErrorCode, h245LogChannelsSessionId=h245LogChannelsSessionId, h245ControlChannelDesTAddressTag=h245ControlChannelDesTAddressTag, h245CapExchangeCapabilityTable=h245CapExchangeCapabilityTable, h245ConfigT106Timer=h245ConfigT106Timer, h245LogChanCloseLogChanRequestRejects=h245LogChanCloseLogChanRequestRejects, h245CapExchangeDirection=h245CapExchangeDirection, h245ControlChannelNumberOfMSDRetries=h245ControlChannelNumberOfMSDRetries, PYSNMP_MODULE_ID=h245, h245LogChannelsH225Table=h245LogChannelsH225Table, h245ConferenceDropConference=h245ConferenceDropConference, h245LogChanOpenLogChanRejectMulticastChannelNotAllowed=h245LogChanOpenLogChanRejectMulticastChannelNotAllowed, h245ControlChannelNumberOfTunnels=h245ControlChannelNumberOfTunnels, h245LogChannelsDestination=h245LogChannelsDestination, h245MiscMLState=h245MiscMLState, h245LogChannelsGroup=h245LogChannelsGroup, h245ControlChannelMaxConnections=h245ControlChannelMaxConnections, h245MIBGroups=h245MIBGroups, h245ControlChannelSrcTransporTAddress=h245ControlChannelSrcTransporTAddress, h245ControlChannelIndex=h245ControlChannelIndex, h245LogChannelsMediaControlChannel=h245LogChannelsMediaControlChannel, h245LogChanOpenLogChanRejectUnsuitableReverseParameters=h245LogChanOpenLogChanRejectUnsuitableReverseParameters, h245LogChannelsH261aVideoPacketization=h245LogChannelsH261aVideoPacketization, h245LogChannelsRedundancyEncoding=h245LogChannelsRedundancyEncoding, h245LogChannelCloseLogicalChannelTableEntry=h245LogChannelCloseLogicalChannelTableEntry, h245MiscMaintenanceLoopTable=h245MiscMaintenanceLoopTable, h245MiscLastMLRequestOrAckType=h245MiscLastMLRequestOrAckType, h245ConferenceMultipoint=h245ConferenceMultipoint, h245MiscRTDState=h245MiscRTDState, h245LogChanOpenLogChanRejectDataTypeALCombinationNotSupported=h245LogChanOpenLogChanRejectDataTypeALCombinationNotSupported, h245ConferenceVideoFastUpdateGOB=h245ConferenceVideoFastUpdateGOB, h245LogChanOpenLogChanRejects=h245LogChanOpenLogChanRejects, h245ConferenceEqualiseDelay=h245ConferenceEqualiseDelay, h245MiscMaintenanceLoopTableEntry=h245MiscMaintenanceLoopTableEntry, h245ConferenceMultipointModeCommand=h245ConferenceMultipointModeCommand, h245ControlChannelDestTransporTAddress=h245ControlChannelDestTransporTAddress, h245CapExchangeGroup=h245CapExchangeGroup, h245ConfigT109Timer=h245ConfigT109Timer)
