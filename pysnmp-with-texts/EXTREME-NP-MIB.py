#
# PySNMP MIB module EXTREME-NP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
extremeNPMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 21))
if mibBuilder.loadTexts: extremeNPMib.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremeNPMib.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeNPMib.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeNPMib.setDescription('Extreme NP objects: NP card information')
extremeNPModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1))
extremeNPModuleTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1), )
if mibBuilder.loadTexts: extremeNPModuleTable.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleTable.setDescription('A table containing information about each Intelligent module in the chassis.')
extremeNPModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1), ).setIndexNames((0, "EXTREME-NP-MIB", "extremeNPModuleSlotNumber"))
if mibBuilder.loadTexts: extremeNPModuleEntry.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleEntry.setDescription('A table entry containing information about the intelligent modules configured in the chassis. This table does not contain rows for the slots which do not have a network processor based module.')
extremeNPModuleSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModuleSlotNumber.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleSlotNumber.setDescription('A unique integer identifying the particular slot in the chassis.')
extremeNPModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModuleDescription.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleDescription.setDescription('A description of the particular slot in the chassis.')
extremeNPModuleCurrentSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModuleCurrentSoftware.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleCurrentSoftware.setDescription('The version of the software currently running on the module.')
extremeNPModulePrimarySoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModulePrimarySoftware.setStatus('current')
if mibBuilder.loadTexts: extremeNPModulePrimarySoftware.setDescription('The version of software in the primary image of the module.')
extremeNPModuleSecondarySoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModuleSecondarySoftware.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleSecondarySoftware.setDescription('The version of software in the secondary image of the module.')
extremeNPModuleBootromVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModuleBootromVersion.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleBootromVersion.setDescription('The version of bootrom that the module will use when restarting.')
extremeNPModuleProcessorState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 1, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeNPModuleProcessorState.setStatus('current')
if mibBuilder.loadTexts: extremeNPModuleProcessorState.setDescription('An Octet String indicating the status of the various processors on an Intelligent Module. Each byte in the Octet String represents state for one processor. For the Avalanche based PoS and ARM modules, the first byte (from MSB) represents the state of the General Purpose Processor, the second byte the state of Network Processor 1, and the third byte the state of Network Processor 2 and so on. A value of 0 in each byte indicates that the Processor is not operational, while a value 1 indicates that it is.')
extremeSMAModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2))
extremeSMATable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1), )
if mibBuilder.loadTexts: extremeSMATable.setStatus('current')
if mibBuilder.loadTexts: extremeSMATable.setDescription('A table containing information about each SMA module in the chassis.')
extremeSMAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1), ).setIndexNames((0, "EXTREME-NP-MIB", "extremeSMASlotNumber"))
if mibBuilder.loadTexts: extremeSMAEntry.setStatus('current')
if mibBuilder.loadTexts: extremeSMAEntry.setDescription('A table entry containing information about the SMA modules configured in the chassis. This table does not contain rows for the slots which do not have an SMA module.')
extremeSMASlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMASlotNumber.setStatus('current')
if mibBuilder.loadTexts: extremeSMASlotNumber.setDescription('A unique integer identifying the particular slot in the chassis.')
extremeSMAProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMAProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: extremeSMAProtocolVersion.setDescription('Protocol version.')
extremeSMAServiceVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMAServiceVersion.setStatus('current')
if mibBuilder.loadTexts: extremeSMAServiceVersion.setDescription('Service release version.')
extremeSMAUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMAUpTime.setStatus('current')
if mibBuilder.loadTexts: extremeSMAUpTime.setDescription('Continuous operating time of the module in seconds.')
extremeSMACpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMACpuUtilization.setStatus('current')
if mibBuilder.loadTexts: extremeSMACpuUtilization.setDescription('Percentage of CPU utilized in the last 5 seconds.')
extremeSMAMemUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMAMemUtilization.setStatus('current')
if mibBuilder.loadTexts: extremeSMAMemUtilization.setDescription('Percentage of memory utilized.')
extremeSMAQosBroadcaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMAQosBroadcaster.setStatus('current')
if mibBuilder.loadTexts: extremeSMAQosBroadcaster.setDescription('60 second rolling average of %QoS. Number of bytes received / Number of bytes expected per duration. Note: this can potentially exceed 100%.')
extremeSMANumFromBroadcaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMANumFromBroadcaster.setStatus('current')
if mibBuilder.loadTexts: extremeSMANumFromBroadcaster.setDescription('The total number of broadcasters sending streams.')
extremeSMANumToListener = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMANumToListener.setStatus('current')
if mibBuilder.loadTexts: extremeSMANumToListener.setDescription('The total number of listeners connected.')
extremeSMABytesBroadcaster = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMABytesBroadcaster.setStatus('current')
if mibBuilder.loadTexts: extremeSMABytesBroadcaster.setDescription('The total number of media bytes received from the broadcasters.')
extremeSMABytesListener = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 2, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeSMABytesListener.setStatus('current')
if mibBuilder.loadTexts: extremeSMABytesListener.setDescription('The total number of data bytes sent to listeners.')
extremeATMModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3))
extremeATMCellPduTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1), )
if mibBuilder.loadTexts: extremeATMCellPduTable.setStatus('current')
if mibBuilder.loadTexts: extremeATMCellPduTable.setDescription('A table containing information about each ATM module in the chassis.')
extremeATMCellPduEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1), ).setIndexNames((0, "EXTREME-NP-MIB", "extremeATMPortNumber"))
if mibBuilder.loadTexts: extremeATMCellPduEntry.setStatus('current')
if mibBuilder.loadTexts: extremeATMCellPduEntry.setDescription('A table entry containing information about the ATM modules configured in the chassis. This table does not contain rows for the slots which do not have an ATM module.')
extremeATMPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMPortNumber.setStatus('current')
if mibBuilder.loadTexts: extremeATMPortNumber.setDescription('A unique integer identifying the particular port number in the chassis.')
extremeATMRxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMRxCell.setStatus('current')
if mibBuilder.loadTexts: extremeATMRxCell.setDescription('The number of ATM cell Received.')
extremeATMTxCell = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMTxCell.setStatus('current')
if mibBuilder.loadTexts: extremeATMTxCell.setDescription('The number of ATM cell Transmitted.')
extremeATMRxCellHecError = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMRxCellHecError.setStatus('current')
if mibBuilder.loadTexts: extremeATMRxCellHecError.setDescription('The number of received cells with HEC error.')
extremeATMRxCellError = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMRxCellError.setStatus('current')
if mibBuilder.loadTexts: extremeATMRxCellError.setDescription('The number of received cells discarded due to other error.')
extremeATMRxAAL5Pdu = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMRxAAL5Pdu.setStatus('current')
if mibBuilder.loadTexts: extremeATMRxAAL5Pdu.setDescription('The number AAL-5 PDU Received.')
extremeATMTxAAL5Pdu = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMTxAAL5Pdu.setStatus('current')
if mibBuilder.loadTexts: extremeATMTxAAL5Pdu.setDescription('The number AAL-5 PDU Transmitted.')
extremeATMRxAAL5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMRxAAL5Bytes.setStatus('current')
if mibBuilder.loadTexts: extremeATMRxAAL5Bytes.setDescription('The number AAL-5 PDU Octetd Received.')
extremeATMTxAAL5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMTxAAL5Bytes.setStatus('current')
if mibBuilder.loadTexts: extremeATMTxAAL5Bytes.setDescription('The number AAL-5 PDU Octetd Transmitted.')
extremeATMPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMPortStatus.setStatus('current')
if mibBuilder.loadTexts: extremeATMPortStatus.setDescription('ATM port status.')
extremeATMVpiVciTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 2), )
if mibBuilder.loadTexts: extremeATMVpiVciTable.setStatus('current')
if mibBuilder.loadTexts: extremeATMVpiVciTable.setDescription('A table containing information about each ATM module in the chassis.')
extremeATMVpiVciEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 2, 1), ).setIndexNames((0, "EXTREME-NP-MIB", "extremeATMPortNum"), (0, "EXTREME-NP-MIB", "extremeATMPvc"))
if mibBuilder.loadTexts: extremeATMVpiVciEntry.setStatus('current')
if mibBuilder.loadTexts: extremeATMVpiVciEntry.setDescription('A table entry containing information about the ATM modules configured in the chassis. This table does not contain rows for the slots which do not have an ATM module.')
extremeATMPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMPortNum.setStatus('current')
if mibBuilder.loadTexts: extremeATMPortNum.setDescription('A unique integer identifying the particular port number in the chassis.')
extremeATMPvc = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3072))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMPvc.setStatus('current')
if mibBuilder.loadTexts: extremeATMPvc.setDescription('A unique integer identifying the pvc number configured on a single port.')
extremeATMVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMVpi.setStatus('current')
if mibBuilder.loadTexts: extremeATMVpi.setDescription('A unique integer identifying the VPI value of the configured PVCs.')
extremeATMVci = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeATMVci.setStatus('current')
if mibBuilder.loadTexts: extremeATMVci.setDescription('A unique integer identifying the VCI value of the configured PVCs.')
extremeMplsModule = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4))
extremeMplsTlsTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1), )
if mibBuilder.loadTexts: extremeMplsTlsTable.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsTable.setDescription('A table containing information about each MPLS TLS tunnel in the chassis.')
extremeMplsTlsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1), ).setIndexNames((0, "EXTREME-NP-MIB", "extremeMplsTlsNum"))
if mibBuilder.loadTexts: extremeMplsTlsEntry.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsEntry.setDescription('A table entry containing information about the MPLS TLS tunnel.')
extremeMplsTlsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16384))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsNum.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsNum.setDescription('An index used to reference each configured TLS tunnel.')
extremeMplsTlsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsName.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsName.setDescription('The user defined TLS tunnel identifier name.')
extremeMplsTlsLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsLocalIpAddr.setDescription('The TLS tunnel local endpoint IP address, only valid if TLS tunnel is Dynamic. Otherwise, this field is set to zero.')
extremeMplsTlsPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsPeerIpAddr.setDescription('The TLS tunnel peer endpoint IP address.')
extremeMplsTlsLocalVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsLocalVlanID.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsLocalVlanID.setDescription('The local Egress Vlan ID.')
extremeMplsTlsLocalVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsLocalVlanName.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsLocalVlanName.setDescription('The local Egress Vlan Name.')
extremeMplsTlsDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsDynamic.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsDynamic.setDescription('Flag indicating that the TLS tunnel is Dynamic. If set, the TLS tunnel is dynamically signaled. If zero, the TLS tunnel is statically configured.')
extremeMplsTlsType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsType.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsType.setDescription('The TLS tunnel type 0- MPLS, Static 1- MPLS, Martini .')
extremeMplsTlsVcID = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsVcID.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsVcID.setDescription('The configured VC ID, only valid if TLS tunnel is Dynamic. Otherwise, this field is set to zero.')
extremeMplsTlsLocalGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsLocalGroupID.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsLocalGroupID.setDescription('The configured Local Group ID, only valid if TLS tunnel is Dynamic. Otherwise, this field is set to zero.')
extremeMplsTlsRemoteGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsRemoteGroupID.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsRemoteGroupID.setDescription('The learned Remote Group ID, only valid if TLS tunnel is Dynamic. Otherwise, this field is set to zero.')
extremeMplsTlsIngressVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsIngressVcLabel.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsIngressVcLabel.setDescription('The TLS tunnel VLAN Ingress Label. If the TLS tunnel is Static, this value is configured. If TLS tunnel is Dynamic, this value is dynamically allocated from the TLS label range and signaled to the TLS tunnel peer.')
extremeMplsTlsEgressVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsEgressVcLabel.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsEgressVcLabel.setDescription('The TLS tunnel VLAN Egress Label. If the TLS tunnel is Static, this value is configured. If TLS tunnel is Dynamic, this value is learned from the TLS tunnel peer.')
extremeMplsTlsVcState = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsVcState.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsVcState.setDescription('The TLS tunnel VC state. Valid states include: - Idle - No LSP Available - Waiting for LDP session - Pending label mapping - Pending local configuration - MTU incompatibility - Up - Unknown - Error .. General failure - Error .. Targeted LDP session failure - Error .. Bridge configuration problem - Error .. Ingress label allocation failure - Error .. Failure sending TLS label mapping - Error .. Patricia tree insertion failure - Error .. Failure programming TLS hardware - Error .. MPLS not initialized - Error .. Unknown.')
extremeMplsTlsPacketTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsPacketTx.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsPacketTx.setDescription('The number of Packets Transmitted on this TLS tunnel.')
extremeMplsTlsPacketRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsPacketRx.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsPacketRx.setDescription('The number of Packets Received on this TLS tunnel.')
extremeMplsTlsOctetTx = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsOctetTx.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsOctetTx.setDescription('The number of Octets Transmitted on this TLS tunnel.')
extremeMplsTlsOctetRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 21, 4, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeMplsTlsOctetRx.setStatus('current')
if mibBuilder.loadTexts: extremeMplsTlsOctetRx.setDescription('The number of Octets Received on this TLS tunnel.')
mibBuilder.exportSymbols("EXTREME-NP-MIB", extremeMplsTlsType=extremeMplsTlsType, extremeMplsModule=extremeMplsModule, extremeATMPortNum=extremeATMPortNum, extremeMplsTlsPacketRx=extremeMplsTlsPacketRx, extremeNPModuleSlotNumber=extremeNPModuleSlotNumber, extremeATMPortNumber=extremeATMPortNumber, extremeSMASlotNumber=extremeSMASlotNumber, extremeNPModuleDescription=extremeNPModuleDescription, extremeATMRxAAL5Pdu=extremeATMRxAAL5Pdu, extremeMplsTlsLocalVlanID=extremeMplsTlsLocalVlanID, extremeATMCellPduTable=extremeATMCellPduTable, extremeNPModuleSecondarySoftware=extremeNPModuleSecondarySoftware, extremeMplsTlsVcID=extremeMplsTlsVcID, extremeMplsTlsIngressVcLabel=extremeMplsTlsIngressVcLabel, extremeMplsTlsVcState=extremeMplsTlsVcState, extremeSMANumToListener=extremeSMANumToListener, extremeSMAMemUtilization=extremeSMAMemUtilization, extremeATMTxCell=extremeATMTxCell, extremeATMTxAAL5Bytes=extremeATMTxAAL5Bytes, extremeATMVci=extremeATMVci, extremeMplsTlsEntry=extremeMplsTlsEntry, extremeATMTxAAL5Pdu=extremeATMTxAAL5Pdu, extremeSMATable=extremeSMATable, extremeMplsTlsTable=extremeMplsTlsTable, extremeNPModulePrimarySoftware=extremeNPModulePrimarySoftware, extremeMplsTlsRemoteGroupID=extremeMplsTlsRemoteGroupID, extremeMplsTlsPacketTx=extremeMplsTlsPacketTx, extremeMplsTlsOctetTx=extremeMplsTlsOctetTx, extremeNPModuleProcessorState=extremeNPModuleProcessorState, extremeSMACpuUtilization=extremeSMACpuUtilization, extremeNPModuleEntry=extremeNPModuleEntry, PYSNMP_MODULE_ID=extremeNPMib, extremeNPModuleTable=extremeNPModuleTable, extremeSMAQosBroadcaster=extremeSMAQosBroadcaster, extremeATMVpiVciTable=extremeATMVpiVciTable, extremeMplsTlsEgressVcLabel=extremeMplsTlsEgressVcLabel, extremeMplsTlsLocalVlanName=extremeMplsTlsLocalVlanName, extremeNPModule=extremeNPModule, extremeMplsTlsPeerIpAddr=extremeMplsTlsPeerIpAddr, extremeATMPvc=extremeATMPvc, extremeATMRxCellError=extremeATMRxCellError, extremeSMAProtocolVersion=extremeSMAProtocolVersion, extremeATMModule=extremeATMModule, extremeATMRxCellHecError=extremeATMRxCellHecError, extremeNPMib=extremeNPMib, extremeATMVpiVciEntry=extremeATMVpiVciEntry, extremeMplsTlsNum=extremeMplsTlsNum, extremeNPModuleBootromVersion=extremeNPModuleBootromVersion, extremeSMAEntry=extremeSMAEntry, extremeSMABytesBroadcaster=extremeSMABytesBroadcaster, extremeATMVpi=extremeATMVpi, extremeSMANumFromBroadcaster=extremeSMANumFromBroadcaster, extremeMplsTlsDynamic=extremeMplsTlsDynamic, extremeMplsTlsName=extremeMplsTlsName, extremeSMAServiceVersion=extremeSMAServiceVersion, extremeATMRxCell=extremeATMRxCell, extremeSMABytesListener=extremeSMABytesListener, extremeATMCellPduEntry=extremeATMCellPduEntry, extremeSMAUpTime=extremeSMAUpTime, extremeMplsTlsLocalGroupID=extremeMplsTlsLocalGroupID, extremeNPModuleCurrentSoftware=extremeNPModuleCurrentSoftware, extremeATMRxAAL5Bytes=extremeATMRxAAL5Bytes, extremeMplsTlsOctetRx=extremeMplsTlsOctetRx, extremeSMAModule=extremeSMAModule, extremeATMPortStatus=extremeATMPortStatus, extremeMplsTlsLocalIpAddr=extremeMplsTlsLocalIpAddr)
