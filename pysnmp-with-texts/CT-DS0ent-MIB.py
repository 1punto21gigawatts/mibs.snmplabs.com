#
# PySNMP MIB module CT-DS0ent-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CT-DS0ent-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:28:42 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
cabletron, = mibBuilder.importSymbols("CTRON-OIDS", "cabletron")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Bits, MibIdentifier, NotificationType, IpAddress, iso, ModuleIdentity, Counter32, Unsigned32, Gauge32, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Bits", "MibIdentifier", "NotificationType", "IpAddress", "iso", "ModuleIdentity", "Counter32", "Unsigned32", "Gauge32", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
ctSSA = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497))
ctDs0Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 20))
ctDsx0Mib = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4497, 21))
class InterfaceIndex(Integer32):
    pass

ctDs0ifNumber = MibScalar((1, 3, 6, 1, 4, 1, 52, 4497, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifNumber.setDescription('The number of network interfaces (regardless of their current state) present on this system.')
ctDs0ifTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2), )
if mibBuilder.loadTexts: ctDs0ifTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifTable.setDescription('A list of interface entries. The number of entries is given by the value of ctDs0ifNumber.')
ctDs0ifEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1), ).setIndexNames((0, "CT-DS0ent-MIB", "ctDs0ifIndex"))
if mibBuilder.loadTexts: ctDs0ifEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifEntry.setDescription('An entry containing management information applicable to a particular interface.')
ctDs0ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 1), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifIndex.setDescription("A unique value, greater than zero, for each interface. It is recommended that values are assigned contiguously starting from 1. The value for each interface sub-layer must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
ctDs0ifDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifDescr.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the interface hardware/software.')
ctDs0ifMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifMtu.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifMtu.setDescription('The size of the largest packet which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
ctDs0ifSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifSpeed.setDescription("An estimate of the interface's current bandwidth in bits per second. For interfaces which do not vary in bandwidth or for those where no accurate estimation can be made, this object should contain the nominal bandwidth. If the bandwidth of the interface is greater than the maximum value reportable by this object then this object should report its maximum value (4,294,967,295) and ctDs0ifHighSpeed must be used to report the interace's speed. For a sub-layer which has no concept of bandwidth, this object should be zero.")
ctDs0ifPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 6), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifPhysAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifPhysAddress.setDescription("The interface's address at its protocol sub-layer. The interface's media-specific MIB must define the bit and byte ordering and format of the value contained by this object. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
ctDs0ifAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDs0ifAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifAdminStatus.setDescription('The desired state of the interface. The testing(3) state indicates that no operational packets can be passed. When a managed system initializes, all interfaces start with ctDs0ifAdminStatus in the down(2) state. As a result of either explicit management action or per configuration information retained by the managed system, ctDs0ifAdminStatus is then changed to either the up(1) or testing(3) states (or remains in the down(2) state).')
ctDs0ifOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed. If ctDs0ifAdminStatus is down(2) then ctDs0ifOperStatus should be down(2). If ctDs0ifAdminStatus is changed to up(1) then ctDs0ifOperStatus should change to up(1) if the interface is ready to transmit and receive network traffic; it should change to dormant(5) if the interface is waiting for external actions (such as a serial line waiting for an incomming connection); it should remain in the down(2) state if and only if there is a fault that prevents if from going to the up(1) state.')
ctDs0ifLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re-initialization of the local network management subsystem, then this object contains a zero value.')
ctDs0ifInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
ctDs0ifInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.')
ctDs0ifInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifInNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ctDs0ifInNUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast or broadcast address at this sub-layer. This object is deprecated in favour of ctDs0ifInMulticastPkts and ctDs0ifInBroadcastPkts.')
ctDs0ifInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
ctDs0ifInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.')
ctDs0ifInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifInUnknownProtos.setDescription('For packet-oriented interfaces, the number of packets received via the interface which were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces which support protocol multiplexing the number of transmission units received via the interface which were discarded because of an unknown or unsupported protocol. For any interface which does not support protocol multiplexing, this counter will always be 0.')
ctDs0ifOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
ctDs0ifOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
ctDs0ifOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOutNUcastPkts.setStatus('deprecated')
if mibBuilder.loadTexts: ctDs0ifOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent. This object is deprecated in favour of ctDs0ifOutMulticastPkts and ctDs0ifOutBroadcastPkts.')
ctDs0ifOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
ctDs0ifOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.')
ctDs0ifOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifOutQLen.setStatus('deprecated')
if mibBuilder.loadTexts: ctDs0ifOutQLen.setDescription('The length of the output packet queue (in packets).')
ctDs0ifSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 22), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifSpecific.setStatus('deprecated')
if mibBuilder.loadTexts: ctDs0ifSpecific.setDescription('A reference to MIB definitions specific to the particular media being used to realize the interface. It is recommended that this value point to an instance of a MIB object in the media-specific MIB, i.e., that this object have the semantics associated with the InstancePointer textual convention defined in RFC 1443. In fact, it is recommended that the media- specific MIB specify what value ifSpecific should/can take for values of ifType. If no MIB definitions specific to the particular media are available, the value should be set to the OBJECT IDENTIFIER { 0 0 }.')
class IANActDs0ifType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))
    namedValues = NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddnX25", 4), ("rfc877x25", 5), ("ethernetCsmacd", 6), ("iso88023Csmacd", 7), ("iso88024TokenBus", 8), ("iso88025TokenRing", 9), ("iso88026Man", 10), ("starLan", 11), ("proteon10Mbit", 12), ("proteon80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frameRelay", 32), ("rs232", 33), ("para", 34), ("arcnet", 35), ("arcnetPlus", 36), ("atm", 37), ("miox25", 38), ("sonet", 39), ("x25ple", 40), ("iso88022llc", 41), ("localTalk", 42), ("smdsDxi", 43), ("frameRelayService", 44), ("v35", 45), ("hssi", 46), ("hippi", 47), ("modem", 48), ("aal5", 49), ("sonetPath", 50), ("sonetVT", 51), ("smdsIcip", 52), ("propVirtual", 53), ("propMultiplexor", 54))

ctDs0ifType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 20, 2, 1, 3), IANActDs0ifType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDs0ifType.setStatus('mandatory')
if mibBuilder.loadTexts: ctDs0ifType.setDescription('The type of interface. Additional values for ctDs0ifType are assigned by the Internet Assigned Numbers Authority (IANA), through updating the syntax of the IANAifType textual convention.')
ctDsx0ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1), )
if mibBuilder.loadTexts: ctDsx0ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx0ConfigTable.setDescription('ISDN lapd table containing configuration and operational parameters for all ISDN signaling channels on this managed device.')
ctDsx0ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 1), ).setIndexNames((0, "CT-DS0ent-MIB", "ctDs0ifIndex"))
if mibBuilder.loadTexts: ctDsx0ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx0ConfigEntry.setDescription('An entry in the ISDN Lapd Table.')
ctDsx0ConfigLineId = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDsx0ConfigLineId.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx0ConfigLineId.setDescription('Line id of the Isdn Lapd table entry')
ctDsx0ConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctDsx0ConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx0ConfigAdminStatus.setDescription('Administration status for the Isdn Lapd table entry.')
ctDsx0ConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4497, 21, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctDsx0ConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ctDsx0ConfigOperStatus.setDescription('Operational status for the Isdn Lapd table entry.')
mibBuilder.exportSymbols("CT-DS0ent-MIB", ctSSA=ctSSA, ctDs0ifEntry=ctDs0ifEntry, ctDsx0ConfigOperStatus=ctDsx0ConfigOperStatus, ctDsx0ConfigTable=ctDsx0ConfigTable, ctDs0ifOutNUcastPkts=ctDs0ifOutNUcastPkts, ctDs0ifInDiscards=ctDs0ifInDiscards, ctDs0ifOutQLen=ctDs0ifOutQLen, ctDs0ifInUcastPkts=ctDs0ifInUcastPkts, ctDs0ifNumber=ctDs0ifNumber, ctDs0ifLastChange=ctDs0ifLastChange, ctDs0ifOutUcastPkts=ctDs0ifOutUcastPkts, ctDsx0ConfigAdminStatus=ctDsx0ConfigAdminStatus, ctDs0ifOutDiscards=ctDs0ifOutDiscards, ctDs0ifInUnknownProtos=ctDs0ifInUnknownProtos, ctDsx0ConfigEntry=ctDsx0ConfigEntry, ctDs0ifIndex=ctDs0ifIndex, ctDsx0ConfigLineId=ctDsx0ConfigLineId, ctDs0ifOutOctets=ctDs0ifOutOctets, ctDs0ifOperStatus=ctDs0ifOperStatus, ctDs0ifInNUcastPkts=ctDs0ifInNUcastPkts, ctDs0Mib=ctDs0Mib, ctDs0ifMtu=ctDs0ifMtu, ctDs0ifInErrors=ctDs0ifInErrors, ctDs0ifSpeed=ctDs0ifSpeed, ctDs0ifAdminStatus=ctDs0ifAdminStatus, ctDs0ifPhysAddress=ctDs0ifPhysAddress, ctDs0ifTable=ctDs0ifTable, ctDsx0Mib=ctDsx0Mib, IANActDs0ifType=IANActDs0ifType, InterfaceIndex=InterfaceIndex, ctDs0ifType=ctDs0ifType, ctDs0ifDescr=ctDs0ifDescr, ctDs0ifOutErrors=ctDs0ifOutErrors, ctDs0ifInOctets=ctDs0ifInOctets, ctDs0ifSpecific=ctDs0ifSpecific)
