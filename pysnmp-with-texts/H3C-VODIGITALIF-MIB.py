#
# PySNMP MIB module H3C-VODIGITALIF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H3C-VODIGITALIF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:24:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
h3cVoice, = mibBuilder.importSymbols("HUAWEI-3COM-OID-MIB", "h3cVoice")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, Bits, Counter32, ModuleIdentity, ObjectIdentity, Unsigned32, Counter64, NotificationType, IpAddress, MibIdentifier, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "Bits", "Counter32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Counter64", "NotificationType", "IpAddress", "MibIdentifier", "iso", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
h3cVoiceDigitalInterface = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4))
h3cVoiceDigitalInterface.setRevisions(('2005-03-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cVoiceDigitalInterface.setRevisionsDescriptions(('The initial version of this MIB file.',))
if mibBuilder.loadTexts: h3cVoiceDigitalInterface.setLastUpdated('200503150000Z')
if mibBuilder.loadTexts: h3cVoiceDigitalInterface.setOrganization('Huawei-3COM Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cVoiceDigitalInterface.setContactInfo('PLAT Team Huawei 3Com Technologies co.,Ltd. Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.huawei-3com.com Zip:100085')
if mibBuilder.loadTexts: h3cVoiceDigitalInterface.setDescription('The MIB file is to provide the definition of the general digital voice interface configuration.')
h3cVoDigitalIfCommonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1))
h3cVoDigitalIfCommonCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1), )
if mibBuilder.loadTexts: h3cVoDigitalIfCommonCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfCommonCfgTable.setDescription('This table contains the information about configurable parameters for a digital voice interface.')
h3cVoDigitalIfCommonCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfCfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfCommonCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfCommonCfgEntry.setDescription('The entry of h3cVoDigitalIfCommonCfgTable, which is automatically created when a digital voice module has been found.')
h3cVoDIfCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfCfgBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("e1vi", 1), ("t1vi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfCfgBoardType.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfCfgBoardType.setDescription('This object indicates the type of board.')
h3cVoDIfCfgSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("r2", 1), ("pri", 2), ("emImmediateStart", 3), ("emDelayStart", 4), ("emWinkStart", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfCfgSignalType.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfCfgSignalType.setDescription('This object indicates the signal type of a group.')
h3cVoDIfCfgTsInformation = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfCfgTsInformation.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfCfgTsInformation.setDescription("This object indicates the availability of every single timeslot for voice services. '1' indicates the timeslot is available for voice services. '0' indicates the timeslot is not available for voice services.")
h3cVoDIfCfgPortSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 1, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfCfgPortSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfCfgPortSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfEMObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2))
h3cVoDigitalIfEMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1), )
if mibBuilder.loadTexts: h3cVoDigitalIfEMCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfEMCfgTable.setDescription('This table contains the information about configurable parameters for a digital EM voice interface.')
h3cVoDigitalIfEMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfEMCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfEMCfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfEMCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfEMCfgEntry.setDescription('The entry of h3cVoDigitalIfEMCfgTable.')
h3cVoDIfEMCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfEMCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfEMCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfEMCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfEMCfgTimeoutInterDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMCfgTimeoutInterDigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMCfgTimeoutInterDigit.setDescription('The maximum seconds, to wait for two DTMF (Dual Tone Multi-Frequency) number.')
h3cVoDIfEMCfgTimeoutRinging = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMCfgTimeoutRinging.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMCfgTimeoutRinging.setDescription('The maximum seconds, to wait for the ring back on the EM interface.')
h3cVoDIfEMCfgTimeoutWaitDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMCfgTimeoutWaitDigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMCfgTimeoutWaitDigit.setDescription('The maximum seconds, to wait for called number of called side.')
h3cVoDIfEMCfgPortSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 1, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfEMCfgPortSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMCfgPortSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfEMABCDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2), )
if mibBuilder.loadTexts: h3cVoDigitalIfEMABCDCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfEMABCDCfgTable.setDescription('This table contains the information about ABCD bits parameters for a digital EM voice interface.')
h3cVoDigitalIfEMABCDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfEMABCDCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfEMABCDCfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfEMABCDCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfEMABCDCfgEntry.setDescription('The entry of h3cVoDigitalIfEMABCDCfgTable.')
h3cVoDIfEMABCDCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfEMABCDCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMABCDCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfEMABCDCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfEMABCDCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMABCDCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfEMABCDRxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMABCDRxIdle.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMABCDRxIdle.setDescription('This object indicates the ABCD bits of receiving idle signal.')
h3cVoDIfEMABCDRxSeizure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMABCDRxSeizure.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMABCDRxSeizure.setDescription('This object indicates the ABCD bits of receiving seizure signal.')
h3cVoDIfEMABCDTxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMABCDTxIdle.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMABCDTxIdle.setDescription('This object indicates the ABCD bits of sending idle signal.')
h3cVoDIfEMABCDTxSeizure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMABCDTxSeizure.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMABCDTxSeizure.setDescription('This object indicates the ABCD bits of sending seizure signal.')
h3cVoDIFEMABCDSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 2, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIFEMABCDSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIFEMABCDSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfEMTimerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4), )
if mibBuilder.loadTexts: h3cVoDigitalIfEMTimerTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfEMTimerTable.setDescription('This table contains the timer parameters for a digital EM voice interface.')
h3cVoDigitalIfEMTimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfEMTimerPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfEMTimerGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfEMTimerEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfEMTimerEntry.setDescription('The entry of h3cVoDigitalIfEMTimerTable.')
h3cVoDIfEMTimerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfEMTimerPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfEMTimerGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfEMTimerGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfEMTimerSendWink = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 4), Integer32().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerSendWink.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerSendWink.setDescription("This object indicates the maximum time in milliseconds between receiving seizure signal and sending wink signal. This object can only take effect when h3cVoDIfCfgSignalType is set to 'emWinkStart'.")
h3cVoDIfEMTimerWinkRising = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerWinkRising.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerWinkRising.setDescription("This object indicates the maximum time in milliseconds between sending seizure signal and receiving wink signal. This object can only take effect when h3cVoDIfCfgSignalType is set to 'emWinkStart'.")
h3cVoDIfEMTimerWinkHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerWinkHold.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerWinkHold.setDescription("This object indicates the maximum duration in milliseconds for sending wink signal. This object can only take effect when h3cVoDIfCfgSignalType is set to 'emWinkStart'.")
h3cVoDIfEMTimerDialoutDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerDialoutDelay.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerDialoutDelay.setDescription("This object indicates the maximum duration in milliseconds for sending called digits. This object can only take effect when h3cVoDIfCfgSignalType is set to 'emImmediateStart'.")
h3cVoDIfEMTimerDelayRising = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerDelayRising.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerDelayRising.setDescription("This object indicates the maximum duration in milliseconds between receiveing seizure signal and sending delay signal. This object can only take effect when h3cVoDIfCfgSignalType is set to 'emDelayStart'.")
h3cVoDIfEMTimerDelayHold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerDelayHold.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerDelayHold.setDescription("This object indicates the maximum duration in milliseconds for sending delay signal. This object can only take effect when h3cVoDIfCfgSignalType is set to 'emDelayStart'.")
h3cVoDIfEMTimerDtmf = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerDtmf.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerDtmf.setDescription('This object indicates DTMF sending duration in milliseconds.')
h3cVoDIfEMTimerDtmfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfEMTimerDtmfInterval.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerDtmfInterval.setDescription('This object indicates DTMF sending interval in milliseconds.')
h3cVoDIfEMTimerPortSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 2, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfEMTimerPortSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfEMTimerPortSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfR2Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3))
h3cVoDigitalIfR2CfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1), )
if mibBuilder.loadTexts: h3cVoDigitalIfR2CfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2CfgTable.setDescription('This table contains information about general configurable parameters for digital r2 voice interface.')
h3cVoDigitalIfR2CfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2CfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2CfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfR2CfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2CfgEntry.setDescription('The entry of h3cVoDigitalIfR2CfgTable.')
h3cVoDIfR2CfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2CfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfR2CfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2CfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfR2CfgCountryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("customer", 1), ("argentina", 2), ("australia", 3), ("bengal", 4), ("brazil", 5), ("china", 6), ("hongkong", 7), ("india", 8), ("indonesia", 9), ("itut", 10), ("korea", 11), ("malaysia", 12), ("mexico", 13), ("newzealand", 14), ("singapore", 15), ("thailand", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgCountryMode.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgCountryMode.setDescription('This object indicates the value of country mode.')
h3cVoDIfR2CfgSpecialChar = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 65, 66, 67, 68, 35, 42))).clone(namedValues=NamedValues(("null", 0), ("a", 65), ("b", 66), ("c", 67), ("d", 68), ("pound", 35), ("asterisk", 42)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSpecialChar.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSpecialChar.setDescription('This object indicates the special character(A,B,C,D,#,*).')
h3cVoDIfR2CfgSpecialSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(11, 16)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSpecialSignal.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSpecialSignal.setDescription('This object indicates the signal of special character.')
h3cVoDIfR2CfgSelectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("min", 1), ("max", 2), ("minpoll", 3), ("maxpoll", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSelectMode.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSelectMode.setDescription('This object indicates the trunk mode to be selected: min set selected trunk mode to min-mode. max set selected trunk mode to max-mode. minpoll set selected trunk mode to min-poll-mode. maxpoll set selected trunk mode to max-poll-mode. ')
h3cVoDIFR2CfgSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 1, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIFR2CfgSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIFR2CfgSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfR2ABCDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2), )
if mibBuilder.loadTexts: h3cVoDigitalIfR2ABCDCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2ABCDCfgTable.setDescription('This table contains the information about ABCD bits parameters for a digital r2 voice interface.')
h3cVoDigitalIfR2ABCDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2ABCDCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2ABCDCfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfR2ABCDCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2ABCDCfgEntry.setDescription('The entry of h3cVoDigitalIfR2ABCDCfgTable.')
h3cVoDIfR2ABCDCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2ABCDCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfR2ABCDCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2ABCDCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfR2ABCDReverseABCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDReverseABCD.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDReverseABCD.setDescription("This object indicates whether the ABCD bits should be inverted. '0' : disable invertion. '1' : enable invertion. ")
h3cVoDIfR2ABCDRenewABCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRenewABCD.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRenewABCD.setDescription('This object indicates the unused ABCD bits to be sent.')
h3cVoDIfR2ABCDRxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxIdle.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxIdle.setDescription('This object indicates the IDLE line signaling to be received.')
h3cVoDIfR2ABCDTxIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxIdle.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxIdle.setDescription('This object indicates the IDLE line signaling to be sent.')
h3cVoDIfR2ABCDRxSeizure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxSeizure.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxSeizure.setDescription('This object indicates the SEIZURE line signaling to be received.')
h3cVoDIfR2ABCDTxSeizure = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxSeizure.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxSeizure.setDescription('This object indicates the SEIZURE line signaling to be sent.')
h3cVoDIfR2ABCDRxSeizureAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxSeizureAck.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxSeizureAck.setDescription('This object indicates the SEIZURE_ACK line signaling to be received.')
h3cVoDIfR2ABCDTxSeizureAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxSeizureAck.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxSeizureAck.setDescription('This object indicates the SEIZURE_ACK line signaling to be sent.')
h3cVoDIfR2ABCDRxAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxAnswer.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxAnswer.setDescription('This object indicates the ANSWER line signaling to be received.')
h3cVoDIfR2ABCDTxAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxAnswer.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxAnswer.setDescription('This object indicates the ANSWER line signaling to be sent.')
h3cVoDIfR2ABCDRxClearForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxClearForward.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxClearForward.setDescription('This object indicates the CLEAR_FORWARD line signaling to be received.')
h3cVoDIfR2ABCDTxClearForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxClearForward.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxClearForward.setDescription('This object indicates the CLEAR_FORWARD line signaling to be sent.')
h3cVoDIfR2ABCDRxClearBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxClearBack.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxClearBack.setDescription('This object indicates the CLEAR_BACKWARD line signaling to be received.')
h3cVoDIfR2ABCDTxClearBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxClearBack.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxClearBack.setDescription('This object indicates the CLEAR_BACKWARD line signaling to be sent.')
h3cVoDIfR2ABCDRxReleaseGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxReleaseGuard.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxReleaseGuard.setDescription('This object indicates the RELEASE_GUARD line signaling to be received.')
h3cVoDIfR2ABCDTxReleaseGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxReleaseGuard.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxReleaseGuard.setDescription('This object indicates the RELEASE_GUARD line signaling to be sent.')
h3cVoDIfR2ABCDRxBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxBlocking.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDRxBlocking.setDescription('This object indicates the BLOCKING line signaling to be received.')
h3cVoDIfR2ABCDTxBlocking = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxBlocking.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDTxBlocking.setDescription('This object indicates the BLOCKING line signaling to be sent.')
h3cVoDIfR2ABCDSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 2, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfR2ABCDSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ABCDSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfR2MfcCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3), )
if mibBuilder.loadTexts: h3cVoDigitalIfR2MfcCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2MfcCfgTable.setDescription('This table contains information about MFC(Multi-Frequency Control) configurable parameters for digital r2 voice interface.')
h3cVoDigitalIfR2MfcCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2MfcCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2MfcCfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfR2MfcCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2MfcCfgEntry.setDescription('The entry of h3cVoDigitalIfR2MfcCfgTable.')
h3cVoDIfR2MfcCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2MfcCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2MfcCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfR2MfcCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2MfcCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2MfcCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfR2BillingCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2BillingCategory.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2BillingCategory.setDescription('This object indicates the value of BILLING CATEGORY during the MFC procedure.')
h3cVoDIfR2CallingCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CallingCategory.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CallingCategory.setDescription('This object indicates the value of CALLING CATEGORY during the MFC procedure.')
h3cVoDIfR2Congestion = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2Congestion.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2Congestion.setDescription('This object indicates the value of CONGESTION during the MFC procedure. ')
h3cVoDIfR2DemandRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2DemandRefused.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2DemandRefused.setDescription('This object indicates the value of DEMAND REFUSED during the MFC procedure.')
h3cVoDIfR2DigitEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2DigitEnd.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2DigitEnd.setDescription('This object indicates the value of DIGIT END during the MFC procedure.')
h3cVoDIfR2Nullnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2Nullnum.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2Nullnum.setDescription('This object indicates the value of NULL NUMBER during the MFC procedure.')
h3cVoDIfR2ReqBillingCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqBillingCategory.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqBillingCategory.setDescription('This object indicates the value of REQUESTING BILLING category during the MFC procedure.')
h3cVoDIfR2ReqCallingCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqCallingCategory.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqCallingCategory.setDescription('This object indicates the value of REQUESTING CALLING CATEGORY during the MFC procedure.')
h3cVoDIfR2ReqCurrentdigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqCurrentdigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqCurrentdigit.setDescription('This object indicates the value of REQUESTING CURRENT DIGIT during the MFC procedure.')
h3cVoDIfR2ReqFirstCallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqFirstCallingnum.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqFirstCallingnum.setDescription('This object indicates the value of REQUESTING FIRST CALLING NUMBER during the MFC procedure.')
h3cVoDIfR2ReqFirstDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqFirstDigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqFirstDigit.setDescription('This object indicates the value of REQUESTING FIRST DIGIT during the MFC procedure.')
h3cVoDIfR2ReqNextCallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqNextCallednum.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqNextCallednum.setDescription('This object indicates the value of REQUESTING NEXT CALLED NUMBER during the MFC procedure.')
h3cVoDIfR2ReqNextCallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqNextCallingnum.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqNextCallingnum.setDescription('This object indicates the value of REQUESTING NEXT CALLING NUMBER during the MFC procedure.')
h3cVoDIfR2ReqLastFirstDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqLastFirstDigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqLastFirstDigit.setDescription('This object indicates the value of REQUESTING LAST FIRST DIGIT during the MFC procedure.')
h3cVoDIfR2ReqLastSecondDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqLastSecondDigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqLastSecondDigit.setDescription('This object indicates the value of REQUESTING LAST SECOND DIIGT during the MFC procedure.')
h3cVoDIfR2ReqLastThirdDigit = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqLastThirdDigit.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqLastThirdDigit.setDescription('This object indicates the value of REQUESTING LAST LAST THIRD DIGIT during the MFC procedure.')
h3cVoDIfR2ReqSwitchGroupB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqSwitchGroupB.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqSwitchGroupB.setDescription('This object indicates the value of REQUESTING SWITCH GROUP B during the MFC procedure.')
h3cVoDIfR2SubscriberIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberIdle.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberIdle.setDescription('This object indicates the value of SUSCRIBER IDLE during the MFC procedure.')
h3cVoDIfR2SubscriberBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberBusy.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberBusy.setDescription('This object indicates the value of SUBSCRIBER BUSY.')
h3cVoDIfR2ReqCallingnumOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqCallingnumOffset.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqCallingnumOffset.setDescription('This object indicates the value of CALLING NUMBER OFFSET during the MFC procedure.')
h3cVoDIfR2CallCreateInA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CallCreateInA.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CallCreateInA.setDescription('This object indicates the value of CALLCREATE IN GROUP A during the MFC procedure. ')
h3cVoDIfR2ReqFirstCalledNumInC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqFirstCalledNumInC.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqFirstCalledNumInC.setDescription('This object indicates the value of FIRST CALLED NUMBER IN GROUP C during the MFC procedure.')
h3cVoDIfR2ReqCurCalledNumInC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqCurCalledNumInC.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqCurCalledNumInC.setDescription('This object indicates the value of CURRENT CALLED NUMBER IN GROUP C during the MFC procedure.')
h3cVoDIfR2ReqCalledNumSwitchA = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqCalledNumSwitchA.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqCalledNumSwitchA.setDescription('This object indicates the value of REQUEST CALLED NUMBER AND SWITCH TO GROUP A during the MFC procedure.')
h3cVoDIfR2ReqSpecialSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2ReqSpecialSignal.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2ReqSpecialSignal.setDescription('This object indicates the value of SPECIAL SIGNAL during the MFC procedure.')
h3cVoDIfR2SubscriberCharge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberCharge.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberCharge.setDescription('This object indicates the value of SUBSCRIBER CHARGE during the MFC procedure.')
h3cVoDIfR2SubscriberAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberAbnormal.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2SubscriberAbnormal.setDescription('This object indicates the value of SUBSCRIBER ABNORMAL during the MFC procedure.')
h3cVoDIfR2Ani = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("all", 2), ("ka", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2Ani.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2Ani.setDescription('This object indicates whether to return the calling category and the call number during the MFC procedure.')
h3cVoDIfR2SubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 3, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfR2SubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2SubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDigitalIfR2TimerCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4), )
if mibBuilder.loadTexts: h3cVoDigitalIfR2TimerCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2TimerCfgTable.setDescription('This table contains information about time parameters for digital r2 voice interface.')
h3cVoDigitalIfR2TimerCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2TimeCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2TimeCfgGroup"))
if mibBuilder.loadTexts: h3cVoDigitalIfR2TimerCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDigitalIfR2TimerCfgEntry.setDescription('The entry of h3cVoDigitalIfR2TimeCfgTable.')
h3cVoDIfR2TimeCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2TimeCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2TimeCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfR2TimeCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2TimeCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2TimeCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfR2CfgDebounceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDebounceTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDebounceTime.setDescription('This object indicates the minimum duration which is the line signal going to persist.')
h3cVoDIfR2CfgSendringBackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendringBackTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendringBackTime.setDescription('This object indicates the minimum duration which is the ring back going to persist.')
h3cVoDIfR2CfgSendringBusyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendringBusyTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendringBusyTime.setDescription('This object indicates the minimum duration which is the ring busy going to persist.')
h3cVoDIfR2PulseSignalPersistT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2PulseSignalPersistT.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2PulseSignalPersistT.setDescription('This object indicates the value of pulse signal persistence timer.')
h3cVoDIfR2CfgDlAnswerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlAnswerTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlAnswerTime.setDescription('This object indicates the value of answer timer.')
h3cVoDIfR2CfgDlClearBackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlClearBackTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlClearBackTime.setDescription('This object indicates the value of clear back timer.')
h3cVoDIfR2CfgDlClearForwardT = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlClearForwardT.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlClearForwardT.setDescription('This object indicates the value of clear forward timer.')
h3cVoDIfR2CfgDlSeizureTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlSeizureTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlSeizureTime.setDescription('This object indicates the value of seizure timer.')
h3cVoDIfR2CfgDlReanswerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlReanswerTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlReanswerTime.setDescription('This object indicates the value of reanswer timer.')
h3cVoDIfR2CfgDlRelGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlRelGuardTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlRelGuardTime.setDescription('This object indicates the value of release guard timer.')
h3cVoDIfR2CfgMfcGroupBTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgMfcGroupBTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgMfcGroupBTime.setDescription('This object indicates the value of group B timer.')
h3cVoDIfR2CfgDTMFTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDTMFTime.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDTMFTime.setDescription('This object indicates the value of DTMF(Dual Tone Multi-Frequency) timer.')
h3cVoDIfR2TimeCfgSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 4, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfR2TimeCfgSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2TimeCfgSubLine.setDescription('This object indicates the port subscriber line name.')
h3cVoDIfR2CapabilityCfgTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5), )
if mibBuilder.loadTexts: h3cVoDIfR2CapabilityCfgTable.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CapabilityCfgTable.setDescription('This table contains information about capability parameters for digital r2 voice interface.')
h3cVoDIfR2CapabilityCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1), ).setIndexNames((0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2CapCfgPort"), (0, "H3C-VODIGITALIF-MIB", "h3cVoDIfR2CapCfgGroup"))
if mibBuilder.loadTexts: h3cVoDIfR2CapabilityCfgEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CapabilityCfgEntry.setDescription('The entry of h3cVoDIfR2CapabilityCfgTable.')
h3cVoDIfR2CapCfgPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2CapCfgPort.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CapCfgPort.setDescription('This object indicates the port of a voice digital module.')
h3cVoDIfR2CapCfgGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: h3cVoDIfR2CapCfgGroup.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CapCfgGroup.setDescription('This object indicates the group number of a voice digital module.')
h3cVoDIfR2CfgGroupB = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgGroupB.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgGroupB.setDescription('This object indicates whether the group B process is enabled.')
h3cVoDIfR2CfgClearForwardAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgClearForwardAck.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgClearForwardAck.setDescription('This object indicates whether the CLEAR_FORWARD_ACK signal is enabled.')
h3cVoDIfR2CfgDlSeizureAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlSeizureAck.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDlSeizureAck.setDescription('This object indicates whether the SEIZURE_ACK signal is enabled.')
h3cVoDIfR2CfgDTMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgDTMF.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgDTMF.setDescription('This object indicates whether the DTMF(Dual Tone Multi-Frequency) is enabled.')
h3cVoDIfR2CfgAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgAnswer.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgAnswer.setDescription('This object indicates whether the ANSWER signal is enabled.')
h3cVoDIfR2CfgReanswer = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgReanswer.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgReanswer.setDescription('This object indicates whether the REANSWER signal is enabled.')
h3cVoDIfR2CfgFinalCallnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgFinalCallnum.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgFinalCallnum.setDescription('This object indicates whether the FINAL_CALL_NUMBER signal is enabled.')
h3cVoDIfR2CfgForceMetering = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgForceMetering.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgForceMetering.setDescription('This object indicates whether the METERING signal is enabled.')
h3cVoDIfR2CfgSendRingBack = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendRingBack.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendRingBack.setDescription('This object indicates whether to send the ring back tone.')
h3cVoDIfR2CfgSendRingBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendRingBusy.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CfgSendRingBusy.setDescription('This object indicates whether to send the busy tone.')
h3cVoDIfR2CapCfgSubLine = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 10, 2, 39, 4, 3, 5, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVoDIfR2CapCfgSubLine.setStatus('current')
if mibBuilder.loadTexts: h3cVoDIfR2CapCfgSubLine.setDescription('This object indicates the port subscriber line name.')
mibBuilder.exportSymbols("H3C-VODIGITALIF-MIB", h3cVoDIfR2ABCDTxReleaseGuard=h3cVoDIfR2ABCDTxReleaseGuard, h3cVoDIfCfgBoardType=h3cVoDIfCfgBoardType, h3cVoDIfR2CfgDlClearBackTime=h3cVoDIfR2CfgDlClearBackTime, h3cVoDIfR2CfgFinalCallnum=h3cVoDIfR2CfgFinalCallnum, h3cVoDIfEMTimerDialoutDelay=h3cVoDIfEMTimerDialoutDelay, h3cVoDIfR2CapCfgSubLine=h3cVoDIfR2CapCfgSubLine, h3cVoDIfR2SubscriberAbnormal=h3cVoDIfR2SubscriberAbnormal, h3cVoDIfR2CfgSendRingBack=h3cVoDIfR2CfgSendRingBack, h3cVoDigitalIfR2CfgEntry=h3cVoDigitalIfR2CfgEntry, h3cVoDIfR2PulseSignalPersistT=h3cVoDIfR2PulseSignalPersistT, h3cVoDIfR2ABCDSubLine=h3cVoDIfR2ABCDSubLine, h3cVoDIfEMCfgGroup=h3cVoDIfEMCfgGroup, h3cVoDIfCfgSignalType=h3cVoDIfCfgSignalType, h3cVoDIfR2CapCfgPort=h3cVoDIfR2CapCfgPort, h3cVoDIfEMCfgTimeoutInterDigit=h3cVoDIfEMCfgTimeoutInterDigit, h3cVoDIfR2ABCDTxAnswer=h3cVoDIfR2ABCDTxAnswer, h3cVoDIfEMTimerPort=h3cVoDIfEMTimerPort, h3cVoDIfR2ABCDTxSeizure=h3cVoDIfR2ABCDTxSeizure, h3cVoDIfR2CfgClearForwardAck=h3cVoDIfR2CfgClearForwardAck, h3cVoDigitalIfEMCfgTable=h3cVoDigitalIfEMCfgTable, h3cVoDIfR2ABCDTxClearForward=h3cVoDIfR2ABCDTxClearForward, h3cVoDIfR2ReqCurCalledNumInC=h3cVoDIfR2ReqCurCalledNumInC, h3cVoDIfR2CfgDebounceTime=h3cVoDIfR2CfgDebounceTime, h3cVoDIfR2ABCDTxClearBack=h3cVoDIfR2ABCDTxClearBack, h3cVoDIfR2CapabilityCfgEntry=h3cVoDIfR2CapabilityCfgEntry, h3cVoDIfR2CfgForceMetering=h3cVoDIfR2CfgForceMetering, h3cVoDIfR2ABCDRxIdle=h3cVoDIfR2ABCDRxIdle, h3cVoDIfR2CallingCategory=h3cVoDIfR2CallingCategory, h3cVoDIfR2DemandRefused=h3cVoDIfR2DemandRefused, h3cVoDIfEMTimerSendWink=h3cVoDIfEMTimerSendWink, h3cVoDIfR2ABCDReverseABCD=h3cVoDIfR2ABCDReverseABCD, h3cVoDIfR2TimeCfgSubLine=h3cVoDIfR2TimeCfgSubLine, h3cVoDigitalIfR2MfcCfgEntry=h3cVoDigitalIfR2MfcCfgEntry, h3cVoDIfR2SubLine=h3cVoDIfR2SubLine, h3cVoDIfR2CfgCountryMode=h3cVoDIfR2CfgCountryMode, h3cVoDIfR2CfgGroupB=h3cVoDIfR2CfgGroupB, h3cVoDIfR2CfgSelectMode=h3cVoDIfR2CfgSelectMode, h3cVoDigitalIfEMObjects=h3cVoDigitalIfEMObjects, h3cVoDigitalIfR2ABCDCfgEntry=h3cVoDigitalIfR2ABCDCfgEntry, h3cVoDIfR2CapCfgGroup=h3cVoDIfR2CapCfgGroup, h3cVoDigitalIfR2TimerCfgEntry=h3cVoDigitalIfR2TimerCfgEntry, h3cVoDigitalIfEMTimerEntry=h3cVoDigitalIfEMTimerEntry, h3cVoDigitalIfCommonCfgTable=h3cVoDigitalIfCommonCfgTable, h3cVoDigitalIfCommonCfgEntry=h3cVoDigitalIfCommonCfgEntry, h3cVoDIfR2ReqCurrentdigit=h3cVoDIfR2ReqCurrentdigit, h3cVoDIfR2CfgDTMF=h3cVoDIfR2CfgDTMF, h3cVoDIfR2Nullnum=h3cVoDIfR2Nullnum, h3cVoDigitalIfR2ABCDCfgTable=h3cVoDigitalIfR2ABCDCfgTable, h3cVoDIfEMABCDRxIdle=h3cVoDIfEMABCDRxIdle, h3cVoDIfEMABCDRxSeizure=h3cVoDIfEMABCDRxSeizure, h3cVoDIFEMABCDSubLine=h3cVoDIFEMABCDSubLine, h3cVoDigitalIfEMCfgEntry=h3cVoDigitalIfEMCfgEntry, h3cVoDIfEMCfgTimeoutWaitDigit=h3cVoDIfEMCfgTimeoutWaitDigit, h3cVoDigitalIfR2CfgTable=h3cVoDigitalIfR2CfgTable, h3cVoDIfR2CfgSpecialSignal=h3cVoDIfR2CfgSpecialSignal, h3cVoDIfR2SubscriberIdle=h3cVoDIfR2SubscriberIdle, h3cVoiceDigitalInterface=h3cVoiceDigitalInterface, h3cVoDIfR2ReqCalledNumSwitchA=h3cVoDIfR2ReqCalledNumSwitchA, h3cVoDIfR2ABCDRxClearBack=h3cVoDIfR2ABCDRxClearBack, h3cVoDigitalIfEMABCDCfgTable=h3cVoDigitalIfEMABCDCfgTable, h3cVoDIfEMCfgTimeoutRinging=h3cVoDIfEMCfgTimeoutRinging, h3cVoDIfR2BillingCategory=h3cVoDIfR2BillingCategory, h3cVoDIfR2SubscriberBusy=h3cVoDIfR2SubscriberBusy, h3cVoDIfR2ReqSpecialSignal=h3cVoDIfR2ReqSpecialSignal, h3cVoDIfR2ABCDRenewABCD=h3cVoDIfR2ABCDRenewABCD, h3cVoDIfR2ABCDCfgPort=h3cVoDIfR2ABCDCfgPort, h3cVoDIfEMTimerDtmfInterval=h3cVoDIfEMTimerDtmfInterval, h3cVoDIfCfgGroup=h3cVoDIfCfgGroup, h3cVoDIfR2ReqNextCallingnum=h3cVoDIfR2ReqNextCallingnum, h3cVoDIfEMABCDTxIdle=h3cVoDIfEMABCDTxIdle, h3cVoDIfR2ReqLastThirdDigit=h3cVoDIfR2ReqLastThirdDigit, h3cVoDIfR2CfgReanswer=h3cVoDIfR2CfgReanswer, h3cVoDIfEMTimerWinkHold=h3cVoDIfEMTimerWinkHold, h3cVoDIfCfgPortSubLine=h3cVoDIfCfgPortSubLine, h3cVoDigitalIfEMTimerTable=h3cVoDigitalIfEMTimerTable, h3cVoDIfEMTimerDtmf=h3cVoDIfEMTimerDtmf, h3cVoDIfR2ReqSwitchGroupB=h3cVoDIfR2ReqSwitchGroupB, h3cVoDIfR2ABCDCfgGroup=h3cVoDIfR2ABCDCfgGroup, h3cVoDigitalIfR2Objects=h3cVoDigitalIfR2Objects, h3cVoDIfR2ReqLastFirstDigit=h3cVoDIfR2ReqLastFirstDigit, h3cVoDIfR2ReqCallingnumOffset=h3cVoDIfR2ReqCallingnumOffset, h3cVoDIfR2ReqCallingCategory=h3cVoDIfR2ReqCallingCategory, h3cVoDIFR2CfgSubLine=h3cVoDIFR2CfgSubLine, h3cVoDIfR2ReqLastSecondDigit=h3cVoDIfR2ReqLastSecondDigit, h3cVoDIfR2ReqBillingCategory=h3cVoDIfR2ReqBillingCategory, h3cVoDIfR2ABCDRxAnswer=h3cVoDIfR2ABCDRxAnswer, h3cVoDigitalIfR2MfcCfgTable=h3cVoDigitalIfR2MfcCfgTable, h3cVoDIfEMABCDCfgGroup=h3cVoDIfEMABCDCfgGroup, h3cVoDIfR2CfgAnswer=h3cVoDIfR2CfgAnswer, h3cVoDIfR2Ani=h3cVoDIfR2Ani, h3cVoDIfEMCfgPort=h3cVoDIfEMCfgPort, h3cVoDIfR2Congestion=h3cVoDIfR2Congestion, h3cVoDIfR2ReqFirstCallingnum=h3cVoDIfR2ReqFirstCallingnum, h3cVoDIfR2CfgGroup=h3cVoDIfR2CfgGroup, h3cVoDIfR2ABCDTxIdle=h3cVoDIfR2ABCDTxIdle, h3cVoDIfR2CfgDlSeizureAck=h3cVoDIfR2CfgDlSeizureAck, h3cVoDIfR2CfgDlSeizureTime=h3cVoDIfR2CfgDlSeizureTime, h3cVoDIfR2CfgMfcGroupBTime=h3cVoDIfR2CfgMfcGroupBTime, h3cVoDIfR2TimeCfgPort=h3cVoDIfR2TimeCfgPort, h3cVoDIfR2CfgPort=h3cVoDIfR2CfgPort, h3cVoDIfEMABCDTxSeizure=h3cVoDIfEMABCDTxSeizure, h3cVoDIfR2ABCDRxReleaseGuard=h3cVoDIfR2ABCDRxReleaseGuard, h3cVoDIfR2CapabilityCfgTable=h3cVoDIfR2CapabilityCfgTable, PYSNMP_MODULE_ID=h3cVoiceDigitalInterface, h3cVoDIfEMTimerPortSubLine=h3cVoDIfEMTimerPortSubLine, h3cVoDIfR2MfcCfgPort=h3cVoDIfR2MfcCfgPort, h3cVoDIfR2ABCDRxClearForward=h3cVoDIfR2ABCDRxClearForward, h3cVoDIfR2TimeCfgGroup=h3cVoDIfR2TimeCfgGroup, h3cVoDIfEMTimerGroup=h3cVoDIfEMTimerGroup, h3cVoDIfR2CfgSendringBusyTime=h3cVoDIfR2CfgSendringBusyTime, h3cVoDIfR2CfgDlRelGuardTime=h3cVoDIfR2CfgDlRelGuardTime, h3cVoDIfR2ReqFirstCalledNumInC=h3cVoDIfR2ReqFirstCalledNumInC, h3cVoDIfR2ABCDRxBlocking=h3cVoDIfR2ABCDRxBlocking, h3cVoDIfEMCfgPortSubLine=h3cVoDIfEMCfgPortSubLine, h3cVoDIfR2CfgDlAnswerTime=h3cVoDIfR2CfgDlAnswerTime, h3cVoDIfR2MfcCfgGroup=h3cVoDIfR2MfcCfgGroup, h3cVoDIfEMTimerDelayHold=h3cVoDIfEMTimerDelayHold, h3cVoDIfR2ABCDRxSeizure=h3cVoDIfR2ABCDRxSeizure, h3cVoDIfR2ReqNextCallednum=h3cVoDIfR2ReqNextCallednum, h3cVoDIfR2CallCreateInA=h3cVoDIfR2CallCreateInA, h3cVoDIfEMTimerWinkRising=h3cVoDIfEMTimerWinkRising, h3cVoDIfR2CfgDlClearForwardT=h3cVoDIfR2CfgDlClearForwardT, h3cVoDIfCfgTsInformation=h3cVoDIfCfgTsInformation, h3cVoDIfEMABCDCfgPort=h3cVoDIfEMABCDCfgPort, h3cVoDIfCfgPort=h3cVoDIfCfgPort, h3cVoDIfR2ABCDTxSeizureAck=h3cVoDIfR2ABCDTxSeizureAck, h3cVoDIfR2ReqFirstDigit=h3cVoDIfR2ReqFirstDigit, h3cVoDigitalIfR2TimerCfgTable=h3cVoDigitalIfR2TimerCfgTable, h3cVoDIfEMTimerDelayRising=h3cVoDIfEMTimerDelayRising, h3cVoDIfR2ABCDRxSeizureAck=h3cVoDIfR2ABCDRxSeizureAck, h3cVoDIfR2DigitEnd=h3cVoDIfR2DigitEnd, h3cVoDIfR2CfgDTMFTime=h3cVoDIfR2CfgDTMFTime, h3cVoDIfR2CfgDlReanswerTime=h3cVoDIfR2CfgDlReanswerTime, h3cVoDigitalIfCommonObjects=h3cVoDigitalIfCommonObjects, h3cVoDIfR2ABCDTxBlocking=h3cVoDIfR2ABCDTxBlocking, h3cVoDIfR2SubscriberCharge=h3cVoDIfR2SubscriberCharge, h3cVoDIfR2CfgSpecialChar=h3cVoDIfR2CfgSpecialChar, h3cVoDIfR2CfgSendringBackTime=h3cVoDIfR2CfgSendringBackTime, h3cVoDigitalIfEMABCDCfgEntry=h3cVoDigitalIfEMABCDCfgEntry, h3cVoDIfR2CfgSendRingBusy=h3cVoDIfR2CfgSendRingBusy)
