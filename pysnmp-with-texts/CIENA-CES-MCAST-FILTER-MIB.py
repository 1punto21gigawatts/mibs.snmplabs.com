#
# PySNMP MIB module CIENA-CES-MCAST-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-CES-MCAST-FILTER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
cienaGlobalSeverity, cienaGlobalMacAddress = mibBuilder.importSymbols("CIENA-GLOBAL-MIB", "cienaGlobalSeverity", "cienaGlobalMacAddress")
cienaCesStatistics, cienaCesConfig, cienaCesNotifications = mibBuilder.importSymbols("CIENA-SMI", "cienaCesStatistics", "cienaCesConfig", "cienaCesNotifications")
CienaGlobalState, CienaStatsClear, CienaMacAddress = mibBuilder.importSymbols("CIENA-TC", "CienaGlobalState", "CienaStatsClear", "CienaMacAddress")
InetAddressPrefixLength, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressPrefixLength", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, Bits, Counter64, NotificationType, iso, ObjectIdentity, MibIdentifier, Integer32, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Bits", "Counter64", "NotificationType", "iso", "ObjectIdentity", "MibIdentifier", "Integer32", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
cienaCesMcastFilterMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37))
cienaCesMcastFilterMIB.setRevisions(('2016-09-30 00:00', '2015-03-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaCesMcastFilterMIB.setRevisionsDescriptions(('Added objects cienaCesMcastIgmpQueryEngineOperState, cienaCesMcastRouterOlderVersionQuerierTimeRemaining, cienaCesMcastRouterQueryIntervalTimeRemaining, cienaCesMcastGlobalSnoopAdminState. Clarified DESCRIPTION of cienaCesMcastGlobalSnoopState. Defined an object-identifier cienaCesMcastGlobalResources and twelve objects under it for reporting global resource information.', 'Initial creation.',))
if mibBuilder.loadTexts: cienaCesMcastFilterMIB.setLastUpdated('201609300000Z')
if mibBuilder.loadTexts: cienaCesMcastFilterMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: cienaCesMcastFilterMIB.setContactInfo('Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: cienaCesMcastFilterMIB.setDescription('This module defines the IGMP Multicast SNMP objects.')
class InterfaceType(TextualConvention, Integer32):
    description = 'Interface type of a multicast member or router interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("subport", 1), ("pbtsi", 2), ("vlanport", 3), ("mplsVc", 4))

class IgmpCompatibilityMode(TextualConvention, Integer32):
    description = 'IGMP version based compatibility mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("v1", 1), ("v2", 2), ("v3", 3))

cienaCesMcastFilterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1))
cienaCesMcastFilterConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1))
cienaCesMcastFilterStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2))
cienaCesMcastGlobalResources = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3))
cienaCesMcastFilterStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8))
cienaCesMcastFilterMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 100))
cienaCesMcastFilterMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 2, 2, 100, 0))
cienaCesMcastGlobalAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 1), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastGlobalAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastGlobalAdminState.setDescription('This object represents global multicast admin state.')
cienaCesMcastFilterServiceTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2), )
if mibBuilder.loadTexts: cienaCesMcastFilterServiceTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceTable.setDescription('The (conceptual) table listing multicast service configuration on the L2FDs (Layer 2 forwarding domains - VS/VLAN).')
cienaCesMcastFilterServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"))
if mibBuilder.loadTexts: cienaCesMcastFilterServiceEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceEntry.setDescription('An entry (conceptual row) in the cienaCesMcastFilterActivationTable.')
cienaCesMcastFilterServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vlan", 1), ("vs", 2))))
if mibBuilder.loadTexts: cienaCesMcastFilterServiceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceType.setDescription('The service instance type on which this multicast filter is configured.')
cienaCesMcastFilterServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cienaCesMcastFilterServiceIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceIndex.setDescription('The service instance index on which this multicast filter is configured.')
cienaCesMcastFilterServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2, 1, 3), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterServiceAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceAdminState.setDescription('This object represents the admin state of multicast-services the given service Instance.')
cienaCesMcastFilterServiceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterServiceOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceOperState.setDescription('This object represents the operational state of multicast-services on the given service Instance.')
cienaCesMcastFilterServiceUMFState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("flood", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterServiceUMFState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServiceUMFState.setDescription("This object represents how unknown multicast frames are handled for this multicast service. 'flood' indicates that the device will flood all the unresolved messages for this service instance to all the interfaces in the flooding domain. 'drop' causes the device to drop all the unresolved messages for this service. ")
cienaCesMcastFilterServerInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 3), )
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceTable.setDescription('The (conceptual) table listing the authorized server ports.')
cienaCesMcastFilterServerInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 3, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServerInterfaceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServerInterfaceIndex"))
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceEntry.setDescription('An entry (conceptual row) in the cienaCesMcastFilterServerInterfaceTable.')
cienaCesMcastFilterServerInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 3, 1, 1), InterfaceType())
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceType.setDescription('Interface type of server interface from which the IGMP query messages can be received, and joins/leaves messages can be sent.')
cienaCesMcastFilterServerInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceIndex.setDescription('Interface Id of the server interface from which the IGMP query messages can be received, and joins/leaves messages can be sent.')
cienaCesMcastFilterServerInterfaceLiType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 3, 1, 3), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceLiType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceLiType.setDescription('This object has the same definition as cienaCesMcastFilterServerInterfaceType.')
cienaCesMcastFilterServerInterfaceLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceLiIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterServerInterfaceLiIndex.setDescription('This object has the same definition as cienaCesMcastFilterServerInterfaceIndex.')
cienaCesMcastGlobalSnoopState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 4), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastGlobalSnoopState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastGlobalSnoopState.setDescription('This object represents global IGMP Snooping operational state.')
cienaCesMcastIgmpSnoopTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5), )
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopTable.setDescription('The (conceptual) table listing the configuration parameters for the IGMP snooping.')
cienaCesMcastIgmpSnoopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"))
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopEntry.setDescription('An entry (conceptual row) in the cienaCesMcastIgmpSnoopTable.')
cienaCesMcastIgmpSnoopEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 1), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopEnable.setDescription('This object represents admin state of IGMP snooping for a multicast service.')
cienaCesMcastIgmpSnoopRobustness = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRobustness.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRobustness.setDescription('The number of replies to send for each multicast group.')
cienaCesMcastIgmpSnoopProxyQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999999)).clone(125)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopProxyQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopProxyQueryInterval.setDescription('The interval period between each general query sent to the router. This parameter specifies how often to repeat the group specific query. Default value is 125 seconds. Note that the actual rate may be slower when the switch becomes busy, so this parameter should be thought of as a minimum time interval.')
cienaCesMcastIgmpSnoopProxyQueryReplyTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopProxyQueryReplyTmo.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopProxyQueryReplyTmo.setDescription('The amount of time to receive a membership report after a query message is sent. This value goes directly into the query packet.')
cienaCesMcastIgmpSnoopProxyQueryDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(50)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopProxyQueryDelay.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopProxyQueryDelay.setDescription('The amount of time to wait before sending the next group specific query downstream. General queries are sent one interface at a time.')
cienaCesMcastIgmpSnoopLingerTmo = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(125)).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopLingerTmo.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopLingerTmo.setDescription('This value specifies the amount of time that a multicast filter is in place after the last host has left. In essence it configures how long to filter the stream after all the hosts have left the group. This can tune the system as to how long the router has to remove the stream from the subnet. The minimum value is 1 second, with no maximum value.')
cienaCesMcastIgmpQueryEngineState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 7), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpQueryEngineState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpQueryEngineState.setDescription('This object represents query engine state for a given multicast service. ')
cienaCesMcastIgmpProxyQuerySrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 8), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpProxyQuerySrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpProxyQuerySrcIpAddrType.setDescription('This object represents the source IP address type for the multicast service.')
cienaCesMcastIgmpProxyQuerySrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 9), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpProxyQuerySrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpProxyQuerySrcIpAddr.setDescription('This object represents the source IP address for the multicast service.')
cienaCesMcastIgmpRouterQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 999999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpRouterQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpRouterQueryInterval.setDescription('This object represents the router query interval for the given multicast service.')
cienaCesMcastIgmpMinResponseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpMinResponseTime.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpMinResponseTime.setDescription('This object represents the minimum response time for the given multicast service.')
cienaCesMcastIgmpDefaultRouterInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 12), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpDefaultRouterInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpDefaultRouterInterfaceType.setDescription('This object represents the default router interface type for the given multicast service.')
cienaCesMcastIgmpDefaultRouterInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpDefaultRouterInterfaceId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpDefaultRouterInterfaceId.setDescription('This object represents the default router interface id for the given multicast service.')
cienaCesMcastIgmpInquisitiveLeaveState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 14), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpInquisitiveLeaveState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpInquisitiveLeaveState.setDescription('This object represents the IGMP inquisitive leave state for the given multicast service.')
cienaCesMcastIgmpLastMemberQueryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpLastMemberQueryInterval.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpLastMemberQueryInterval.setDescription('This object represents the last membership query interval for the given multicast service.')
cienaCesMcastIgmpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpPriority.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpPriority.setDescription('This object represents the priority of IGMP packets for this multicast service.')
cienaCesMcastIgmpSnoopRouterRangeStartIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 17), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeStartIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeStartIpAddrType.setDescription('The IP address type of first IP Address of the router IP Address range.')
cienaCesMcastIgmpSnoopRouterRangeStartIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 18), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeStartIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeStartIpAddr.setDescription('The first IP Address of the router IP Address range.')
cienaCesMcastIgmpSnoopRouterRangeEndIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 19), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeEndIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeEndIpAddrType.setDescription('The IP address type of the last IP Address of the router IP Address range.')
cienaCesMcastIgmpSnoopRouterRangeEndIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 20), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeEndIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRouterRangeEndIpAddr.setDescription('The last IP Address of the router IP Address range. When range is undefined, all leave/join messages are forwarded to the router even when the multicast stream does not originate from the router. If the range is defined, leave/join messages are filtered. The default value for this object is equal to the value of cienaCesMcastIgmpSnoopRouterRangeStartIpAddr.')
cienaCesMcastIgmpSnoopActiveLingerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopActiveLingerTimeout.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopActiveLingerTimeout.setDescription('This object specifies the active linger timeout in seconds.')
cienaCesMcastIgmpSnoopServerTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centralized", 1), ("distributed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopServerTopology.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopServerTopology.setDescription('This object specifies the server topology.')
cienaCesMcastIgmpSnoopRapidRecoveryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('on')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRapidRecoveryMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopRapidRecoveryMode.setDescription('Specifies whether the rapid recovery mode is set to on or off. If this object is set to ON then the device generates and accepts query packets with source IP = 0 else in the OFF state, it does not.')
cienaCesMcastIgmpSnoopQuerierCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 24), IgmpCompatibilityMode().clone('v3')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopQuerierCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopQuerierCompatibilityMode.setDescription('This object specifies the query engine compatibility mode.')
cienaCesMcastIgmpSnoopForkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopForkMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopForkMode.setDescription('This object specifies whether IGMP Forking mode is set to on or off.')
cienaCesMcastIgmpSnoopEnableOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 26), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopEnableOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpSnoopEnableOperState.setDescription('This object represents the operational state of IGMP snooping on the given multicast service')
cienaCesMcastRouterSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 27), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterSrcMacAddr.setDescription("Specifies the router's MAC address.")
cienaCesMcastRouterSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 28), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterSrcIpAddrType.setDescription("Specifies the router's IP address.")
cienaCesMcastRouterSrcIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 29), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterSrcIpAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterSrcIpAddr.setDescription("Specifies the router's IP address.")
cienaCesMcastRouterInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 30), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterInterfaceType.setDescription('Specifies the interface type for the interface from where router queries are coming.')
cienaCesMcastRouterInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterInterfaceId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterInterfaceId.setDescription('Specifies the interface Id of the interface from where router queries are coming.')
cienaCesMcastReportSendInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 32), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastReportSendInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastReportSendInterfaceType.setDescription('The obejct specifies the interface type of the interface where IGMP reports are sent. Not always the same as the router interface.')
cienaCesMcastReportSendInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastReportSendInterfaceId.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastReportSendInterfaceId.setDescription('The obejct specifies the interface id of the interface where IGMP reports are sent. Not always the same as the router interface.')
cienaCesMcastRouterCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 34), IgmpCompatibilityMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterCompatibilityMode.setDescription('This object specifies the IGMP version of the router.')
cienaCesMcastReportSendInterfaceIsMeshVc = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastReportSendInterfaceIsMeshVc.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastReportSendInterfaceIsMeshVc.setDescription('Specifies whether the current report send interface is a meshvc or not.')
cienaCesMcastIgmpQueryEngineOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastIgmpQueryEngineOperState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastIgmpQueryEngineOperState.setDescription('This object represents query engine operational state for a given multicast service. Active when query-engine is enabled and active, inactive when query-engine is enabled and not active, disabled otherwise.')
cienaCesMcastRouterOlderVersionQuerierTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 37), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterOlderVersionQuerierTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterOlderVersionQuerierTimeRemaining.setDescription('This object specifies the older version querier time remaining in seconds. This is only applicable when an external IGMP querier is present and an older version query is heard.')
cienaCesMcastRouterQueryIntervalTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 5, 1, 38), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterQueryIntervalTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterQueryIntervalTimeRemaining.setDescription('This object specifies the query interval time remaining in seconds. This timer will not be applicable if value for object cienaCesMcastIgmpQueryEngineOperState is active.')
cienaCesMcastChannelStreamTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6), )
if mibBuilder.loadTexts: cienaCesMcastChannelStreamTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamTable.setDescription('The (conceptual) table listing the configuration parameters for the multicast channel stream.')
cienaCesMcastChannelStreamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastChanelStreamStartGroupAddrType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastChanelStreamStartGroupAddr"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastChanelStreamStartGroupAddrPrefixLen"))
if mibBuilder.loadTexts: cienaCesMcastChannelStreamEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamEntry.setDescription('An entry (conceptual row) in the cienaCesMcastChannelStreamTable.')
cienaCesMcastChanelStreamStartGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cienaCesMcastChanelStreamStartGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChanelStreamStartGroupAddrType.setDescription('The Inet address type of first IP Address of the multicast IP Address range. ')
cienaCesMcastChanelStreamStartGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6, 1, 2), InetAddress())
if mibBuilder.loadTexts: cienaCesMcastChanelStreamStartGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChanelStreamStartGroupAddr.setDescription('The first IP Address of the multicast IP Address range. ')
cienaCesMcastChanelStreamStartGroupAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cienaCesMcastChanelStreamStartGroupAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChanelStreamStartGroupAddrPrefixLen.setDescription('The prefix lenngth of first IP Address of the multicast IP Address range. ')
cienaCesMcastChanelStreamEndGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastChanelStreamEndGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChanelStreamEndGroupAddrType.setDescription('The Inet Address type of last IP Address of the multicast IP address range.')
cienaCesMcastChanelStreamEndGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 6, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastChanelStreamEndGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChanelStreamEndGroupAddr.setDescription('The last IP Address of the multicast IP address range.')
cienaCesMcastChannelStreamExIfcMemTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 7), )
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcMemTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcMemTable.setDescription('The (conceptual) table listing the excluded interface list per multicast service for channel stream.')
cienaCesMcastChannelStreamExIfcMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 7, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastChannelStreamExIfcType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastChannelStreamExIfcIndex"))
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcMemEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcMemEntry.setDescription('An entry (conceptual row) in the cienaCesMcastChannelStreamExIfcMemTable.')
cienaCesMcastChannelStreamExIfcType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 7, 1, 1), InterfaceType())
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcType.setDescription('The Interface type of the interface to be excluded from channel stream.')
cienaCesMcastChannelStreamExIfcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcIndex.setDescription('The Interface Id of the interface to be excluded from channel stream.')
cienaCesMcastChannelStreamExIfcLiType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 7, 1, 3), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcLiType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcLiType.setDescription('The Interface type of the interface to be excluded from channel stream.')
cienaCesMcastChannelStreamExIfcLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcLiIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastChannelStreamExIfcLiIndex.setDescription('The Interface Id of the interface to be excluded from channel stream.')
cienaCesMcastGlobalSnoopAdminState = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 1, 8), CienaGlobalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastGlobalSnoopAdminState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastGlobalSnoopAdminState.setDescription('This object represents global IGMP Snooping administratively configured state.')
cienaCesMcastFilterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1), )
if mibBuilder.loadTexts: cienaCesMcastFilterGroupTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupTable.setDescription('The (conceptual) table listing all the multicast groups.')
cienaCesMcastFilterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddrType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddr"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddrPrefixLen"))
if mibBuilder.loadTexts: cienaCesMcastFilterGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupEntry.setDescription('An entry (conceptual row) in the cienaCesMcastFilterGroupTable.')
cienaCesMcastFilterGroupAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupAddrType.setDescription('The inet address type of multicast group IP address.')
cienaCesMcastFilterGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupAddr.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupAddr.setDescription('The multicast group IP address.')
cienaCesMcastFilterGroupAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupAddrPrefixLen.setDescription('The prefix length of multicast group IP address.')
cienaCesMcastFilterGroupState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("active", 1), ("query", 2), ("activelinger", 3), ("linger", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupState.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupState.setDescription('The current state of the multicast stream.')
cienaCesMcastFilterGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupType.setDescription('The type of the multicast stream.')
cienaCesMcastFilterGroupSource = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("router", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSource.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSource.setDescription('The source for this multicast stream.')
cienaCesMcastFilterGroupMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberCount.setDescription('The number of member interfaces that joined the group.')
cienaCesMcastFilterGroupCompatibilityMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 8), IgmpCompatibilityMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupCompatibilityMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupCompatibilityMode.setDescription('The group compatibility mode for this group based on the lowest version of IGMP membership reports recieved for this multicast stream.')
cienaCesMcastFilterGroupIGMPV1HostPresentTimeRemainingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupIGMPV1HostPresentTimeRemainingValue.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupIGMPV1HostPresentTimeRemainingValue.setDescription('The remaining time for IGMPV1 host present timer value for this multicast stream.')
cienaCesMcastFilterGroupIGMPV2HostPresentTimeRemainingValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupIGMPV2HostPresentTimeRemainingValue.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupIGMPV2HostPresentTimeRemainingValue.setDescription('The remaining time for IGMPV2 host present timer value for this multicast stream.')
cienaCesMcastFilterGroupFilterMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("in", 1), ("ex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupFilterMode.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupFilterMode.setDescription('The src address filter mode for this multicast stream.')
cienaCesMcastFilterGroupNumOfSrcAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupNumOfSrcAddrs.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupNumOfSrcAddrs.setDescription('The number of source addresses for this multicast stream.')
cienaCesMcastFilterGroupTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 1, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupTimer.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupTimer.setDescription('The group timer value for this multicast stream.')
cienaCesMcastFilterGroupSrcRecordTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2), )
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordTable.setDescription('The (conceptual) table listing all the source address records of the multicast groups.')
cienaCesMcastFilterGroupSrcRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddrType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddr"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddrPrefixLen"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupSrcRecordSrcIpAddrType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupSrcRecordSrcIp"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupSrcRecordSrcIpAddrPrefixLen"))
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordEntry.setDescription('An entry (conceptual row) in the cienaCesMcastFilterGroupMemberTable.')
cienaCesMcastFilterGroupSrcRecordSrcIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIpAddrType.setDescription('The Inet address type of IP address of the source record table for the multicast group')
cienaCesMcastFilterGroupSrcRecordSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2, 1, 2), InetAddress())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIp.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIp.setDescription('The IP address of the source record table for the multicast group')
cienaCesMcastFilterGroupSrcRecordSrcIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2, 1, 3), InetAddressPrefixLength())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIpAddrPrefixLen.setDescription('The inet address prefix length of IP address of the source record table for the multicast group')
cienaCesMcastFilterGroupSrcRecordSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2, 1, 4), InetAddress())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcIpAddress.setDescription('The IP address of the source record table for the multicast group. The mode of this source address is determined by the group filter mode - cienaCesMcastFilterGroupFilterMode object.')
cienaCesMcastFilterGroupSrcRecordSrcTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcTimer.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupSrcRecordSrcTimer.setDescription('The remaining source timer value of the source address.')
cienaCesMcastFilterGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 3), )
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberTable.setDescription('The (conceptual) table listing all the interface members of the multicast groups.')
cienaCesMcastFilterGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 3, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddrType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddr"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupAddrPrefixLen"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupMemberInterfaceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterGroupMemberInterfaceIndex"))
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberEntry.setDescription('An entry (conceptual row) in the cienaCesMcastFilterGroupMemberTable.')
cienaCesMcastFilterGroupMemberInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 3, 1, 1), InterfaceType())
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceType.setDescription('The interface type of the group member')
cienaCesMcastFilterGroupMemberInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceIndex.setDescription('The interface Id of the group member.')
cienaCesMcastFilterGroupMemberInterfaceLiType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 3, 1, 3), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceLiType.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceLiType.setDescription('The interface type of the group member')
cienaCesMcastFilterGroupMemberInterfaceLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceLiIndex.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterGroupMemberInterfaceLiIndex.setDescription('The interface Id of the group member.')
cienaCesMcastMaxServiceInstances = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastMaxServiceInstances.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastMaxServiceInstances.setDescription('This object represents maximum number of IGMP service instances supported.')
cienaCesMcastCurrentServiceInstances = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCurrentServiceInstances.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCurrentServiceInstances.setDescription('This object represents the current number of IGMP service instances configured.')
cienaCesMcastMaxMcastGroups = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastMaxMcastGroups.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastMaxMcastGroups.setDescription('This object represents the maximum number of multicast groups supported.')
cienaCesMcastCurrentMcastGroups = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCurrentMcastGroups.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCurrentMcastGroups.setDescription('This object represents the current number of multicast groups.')
cienaCesMcastMaxSrcAddrRecords = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastMaxSrcAddrRecords.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastMaxSrcAddrRecords.setDescription('This object represents the maximum number of multicast source address records.')
cienaCesMcastCurrentSrcAddrRecords = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCurrentSrcAddrRecords.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCurrentSrcAddrRecords.setDescription('This object represents the current number of source address records.')
cienaCesMcastMaxTimers = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastMaxTimers.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastMaxTimers.setDescription('This object represents the maximum number of multicast timers.')
cienaCesMcastCurrentTimers = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCurrentTimers.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCurrentTimers.setDescription('This object represents the current number of multicast timers.')
cienaCesMcastMaxLogicalInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastMaxLogicalInterfaces.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastMaxLogicalInterfaces.setDescription('This object represents the maximum number of Logical Interfaces.')
cienaCesMcastCurrentLogicalInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCurrentLogicalInterfaces.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCurrentLogicalInterfaces.setDescription('This object represents the current number of Logical Interfaces.')
cienaCesMcastMaxGrpMemberInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastMaxGrpMemberInterfaces.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastMaxGrpMemberInterfaces.setDescription('This object represents the maximum number of Group member Interfaces.')
cienaCesMcastCurrentGrpMemberInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 1271, 2, 1, 37, 1, 3, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCurrentGrpMemberInterfaces.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCurrentGrpMemberInterfaces.setDescription('This object represents the current number of Group member Interfaces.')
cienaCesMcastFilterStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1), )
if mibBuilder.loadTexts: cienaCesMcastFilterStatsTable.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterStatsTable.setDescription('The (conceptual) table listing the multicast statistics.')
cienaCesMcastFilterStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1), ).setIndexNames((0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceType"), (0, "CIENA-CES-MCAST-FILTER-MIB", "cienaCesMcastFilterServiceIndex"))
if mibBuilder.loadTexts: cienaCesMcastFilterStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastFilterStatsEntry.setDescription('An entry (conceptual row) in the cienaCesMcastFilterServerTable.')
cienaCesMcastStaticGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastStaticGrpCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastStaticGrpCount.setDescription('The total number of static multicast groups.')
cienaCesMcastDynamicGrpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastDynamicGrpCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastDynamicGrpCount.setDescription('The total number of dynamic mcast groups.')
cienaCesMcastJoinMessagesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastJoinMessagesRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastJoinMessagesRx.setDescription('The total number of join messages received.')
cienaCesMcastLeaveMessagesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastLeaveMessagesRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastLeaveMessagesRx.setDescription('The total number of leave messages received.')
cienaCesMcastV3ReportsRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRx.setDescription('The total number of V3 membership reports recieved.')
cienaCesMcastQueryMessagesRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastQueryMessagesRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastQueryMessagesRx.setDescription('The total number of queries received.')
cienaCesMcastQueryRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastQueryRxDiscards.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastQueryRxDiscards.setDescription('The total number of queries discarded.')
cienaCesMcastQueryTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastQueryTimeouts.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastQueryTimeouts.setDescription('The total number of timeouts waiting for the router to send query.')
cienaCesMcastUnknownPktTypeRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastUnknownPktTypeRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastUnknownPktTypeRx.setDescription('The total number of unknown (unknown type ) IGMP packets received.')
cienaCesMcastRouterRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastRouterRxDiscards.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastRouterRxDiscards.setDescription('The total number of messages discarded by the router. This happens when join comes in from a router interface.')
cienaCesMcastHostRxDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastHostRxDiscards.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastHostRxDiscards.setDescription('The total number of messages discarded by the host. This happens when a join/leave comes in from a interface, but no router interface is established.')
cienaCesMcastBadChecksumRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastBadChecksumRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastBadChecksumRx.setDescription('The total number of packets received with bad IP checksum.')
cienaCesMcastL2L3MismatchRx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastL2L3MismatchRx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastL2L3MismatchRx.setDescription('The total number of IGMP Layer2 / Layer 3 mismatch packets received.')
cienaCesMcastTotalMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastTotalMembers.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastTotalMembers.setDescription('The total number of group members for all groups in the given multicast service.')
cienaCesMcastLingerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastLingerCount.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastLingerCount.setDescription('The total number of groups in linger state.')
cienaCesMcastStatsQuerySrcIpZeroDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastStatsQuerySrcIpZeroDiscard.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastStatsQuerySrcIpZeroDiscard.setDescription('Specifies the number of queries discarded with a zero source IP.')
cienaCesMcastCompatibilityModeDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastCompatibilityModeDiscards.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastCompatibilityModeDiscards.setDescription('For products that support IGMPv3, this object specifies the total number of frames discarded because of compatibility mode mismatches. Products that do not support IGMPv3 will not return this object.')
cienaCesMcastReplyTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastReplyTimeouts.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastReplyTimeouts.setDescription('Specifies the number of query reply timeouts.')
cienaCesMcastResourceExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastResourceExceed.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastResourceExceed.setDescription('Specifies the number of resource exceeded errors.')
cienaCesMcastV3ReportsRxIsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxIsIn.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxIsIn.setDescription('The total number of V3 membership IS_IN reports recieved.')
cienaCesMcastV3ReportsRxIsEx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxIsEx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxIsEx.setDescription('The total number of V3 membership IS_EX reports recieved.')
cienaCesMcastV3ReportsRxToIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxToIn.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxToIn.setDescription('The total number of V3 membership TO_IN reports recieved.')
cienaCesMcastV3ReportsRxToEx = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxToEx.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxToEx.setDescription('The total number of V3 membership TO_EX reports recieved.')
cienaCesMcastV3ReportsRxAllow = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxAllow.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxAllow.setDescription('The total number of V3 membership Allow reports recieved.')
cienaCesMcastV3ReportsRxBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 2, 3, 8, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxBlock.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastV3ReportsRxBlock.setDescription('The total number of V3 membership Block reports recieved.')
cienaCesMcastAddrOverlapNotification = NotificationType((1, 3, 6, 1, 4, 1, 1271, 2, 2, 100, 0, 1)).setObjects(("CIENA-GLOBAL-MIB", "cienaGlobalSeverity"), ("CIENA-GLOBAL-MIB", "cienaGlobalMacAddress"))
if mibBuilder.loadTexts: cienaCesMcastAddrOverlapNotification.setStatus('current')
if mibBuilder.loadTexts: cienaCesMcastAddrOverlapNotification.setDescription('A cienaCesMcastAddrOverlapNotification is sent whenever several multicast IP addresses overlap (matches the same L2 address).')
mibBuilder.exportSymbols("CIENA-CES-MCAST-FILTER-MIB", cienaCesMcastChanelStreamEndGroupAddr=cienaCesMcastChanelStreamEndGroupAddr, cienaCesMcastFilterServiceAdminState=cienaCesMcastFilterServiceAdminState, cienaCesMcastCompatibilityModeDiscards=cienaCesMcastCompatibilityModeDiscards, cienaCesMcastIgmpSnoopServerTopology=cienaCesMcastIgmpSnoopServerTopology, cienaCesMcastChannelStreamExIfcLiIndex=cienaCesMcastChannelStreamExIfcLiIndex, cienaCesMcastChannelStreamExIfcType=cienaCesMcastChannelStreamExIfcType, cienaCesMcastIgmpSnoopRouterRangeStartIpAddrType=cienaCesMcastIgmpSnoopRouterRangeStartIpAddrType, cienaCesMcastFilterGroupSrcRecordSrcTimer=cienaCesMcastFilterGroupSrcRecordSrcTimer, cienaCesMcastIgmpMinResponseTime=cienaCesMcastIgmpMinResponseTime, cienaCesMcastIgmpSnoopRouterRangeEndIpAddr=cienaCesMcastIgmpSnoopRouterRangeEndIpAddr, cienaCesMcastCurrentGrpMemberInterfaces=cienaCesMcastCurrentGrpMemberInterfaces, cienaCesMcastFilterGroupMemberTable=cienaCesMcastFilterGroupMemberTable, cienaCesMcastFilterServiceIndex=cienaCesMcastFilterServiceIndex, cienaCesMcastCurrentMcastGroups=cienaCesMcastCurrentMcastGroups, cienaCesMcastFilterGroupSource=cienaCesMcastFilterGroupSource, cienaCesMcastFilterGroupSrcRecordSrcIp=cienaCesMcastFilterGroupSrcRecordSrcIp, cienaCesMcastFilterGroupSrcRecordTable=cienaCesMcastFilterGroupSrcRecordTable, cienaCesMcastIgmpRouterQueryInterval=cienaCesMcastIgmpRouterQueryInterval, cienaCesMcastIgmpSnoopRapidRecoveryMode=cienaCesMcastIgmpSnoopRapidRecoveryMode, cienaCesMcastIgmpSnoopRouterRangeStartIpAddr=cienaCesMcastIgmpSnoopRouterRangeStartIpAddr, cienaCesMcastIgmpSnoopActiveLingerTimeout=cienaCesMcastIgmpSnoopActiveLingerTimeout, cienaCesMcastAddrOverlapNotification=cienaCesMcastAddrOverlapNotification, cienaCesMcastFilterConfig=cienaCesMcastFilterConfig, cienaCesMcastIgmpSnoopTable=cienaCesMcastIgmpSnoopTable, cienaCesMcastFilterGroupMemberInterfaceIndex=cienaCesMcastFilterGroupMemberInterfaceIndex, PYSNMP_MODULE_ID=cienaCesMcastFilterMIB, cienaCesMcastFilterMIB=cienaCesMcastFilterMIB, cienaCesMcastRouterCompatibilityMode=cienaCesMcastRouterCompatibilityMode, cienaCesMcastIgmpSnoopQuerierCompatibilityMode=cienaCesMcastIgmpSnoopQuerierCompatibilityMode, cienaCesMcastFilterGroupMemberCount=cienaCesMcastFilterGroupMemberCount, cienaCesMcastRouterInterfaceId=cienaCesMcastRouterInterfaceId, cienaCesMcastChanelStreamEndGroupAddrType=cienaCesMcastChanelStreamEndGroupAddrType, cienaCesMcastFilterGroupNumOfSrcAddrs=cienaCesMcastFilterGroupNumOfSrcAddrs, cienaCesMcastIgmpSnoopRouterRangeEndIpAddrType=cienaCesMcastIgmpSnoopRouterRangeEndIpAddrType, cienaCesMcastIgmpQueryEngineOperState=cienaCesMcastIgmpQueryEngineOperState, cienaCesMcastV3ReportsRxIsEx=cienaCesMcastV3ReportsRxIsEx, cienaCesMcastIgmpSnoopLingerTmo=cienaCesMcastIgmpSnoopLingerTmo, cienaCesMcastFilterGroupAddr=cienaCesMcastFilterGroupAddr, cienaCesMcastFilterMIBObjects=cienaCesMcastFilterMIBObjects, cienaCesMcastChannelStreamTable=cienaCesMcastChannelStreamTable, cienaCesMcastRouterSrcMacAddr=cienaCesMcastRouterSrcMacAddr, cienaCesMcastFilterServerInterfaceEntry=cienaCesMcastFilterServerInterfaceEntry, cienaCesMcastMaxGrpMemberInterfaces=cienaCesMcastMaxGrpMemberInterfaces, cienaCesMcastFilterServerInterfaceIndex=cienaCesMcastFilterServerInterfaceIndex, cienaCesMcastFilterGroupFilterMode=cienaCesMcastFilterGroupFilterMode, cienaCesMcastFilterStatsTable=cienaCesMcastFilterStatsTable, cienaCesMcastChanelStreamStartGroupAddrPrefixLen=cienaCesMcastChanelStreamStartGroupAddrPrefixLen, cienaCesMcastStaticGrpCount=cienaCesMcastStaticGrpCount, cienaCesMcastRouterInterfaceType=cienaCesMcastRouterInterfaceType, cienaCesMcastV3ReportsRxAllow=cienaCesMcastV3ReportsRxAllow, cienaCesMcastIgmpSnoopRobustness=cienaCesMcastIgmpSnoopRobustness, cienaCesMcastFilterGroupState=cienaCesMcastFilterGroupState, cienaCesMcastFilterGroupMemberEntry=cienaCesMcastFilterGroupMemberEntry, cienaCesMcastRouterQueryIntervalTimeRemaining=cienaCesMcastRouterQueryIntervalTimeRemaining, cienaCesMcastReportSendInterfaceId=cienaCesMcastReportSendInterfaceId, cienaCesMcastChannelStreamExIfcLiType=cienaCesMcastChannelStreamExIfcLiType, cienaCesMcastFilterGroupSrcRecordSrcIpAddress=cienaCesMcastFilterGroupSrcRecordSrcIpAddress, cienaCesMcastRouterOlderVersionQuerierTimeRemaining=cienaCesMcastRouterOlderVersionQuerierTimeRemaining, cienaCesMcastFilterServerInterfaceTable=cienaCesMcastFilterServerInterfaceTable, cienaCesMcastChannelStreamExIfcMemTable=cienaCesMcastChannelStreamExIfcMemTable, cienaCesMcastMaxServiceInstances=cienaCesMcastMaxServiceInstances, cienaCesMcastBadChecksumRx=cienaCesMcastBadChecksumRx, cienaCesMcastMaxMcastGroups=cienaCesMcastMaxMcastGroups, cienaCesMcastV3ReportsRxToEx=cienaCesMcastV3ReportsRxToEx, cienaCesMcastChannelStreamExIfcMemEntry=cienaCesMcastChannelStreamExIfcMemEntry, cienaCesMcastIgmpSnoopProxyQueryDelay=cienaCesMcastIgmpSnoopProxyQueryDelay, cienaCesMcastTotalMembers=cienaCesMcastTotalMembers, cienaCesMcastFilterGroupTable=cienaCesMcastFilterGroupTable, cienaCesMcastGlobalResources=cienaCesMcastGlobalResources, cienaCesMcastFilterStatus=cienaCesMcastFilterStatus, cienaCesMcastChanelStreamStartGroupAddr=cienaCesMcastChanelStreamStartGroupAddr, cienaCesMcastQueryTimeouts=cienaCesMcastQueryTimeouts, cienaCesMcastFilterServiceTable=cienaCesMcastFilterServiceTable, cienaCesMcastFilterServiceUMFState=cienaCesMcastFilterServiceUMFState, cienaCesMcastReportSendInterfaceIsMeshVc=cienaCesMcastReportSendInterfaceIsMeshVc, cienaCesMcastFilterGroupMemberInterfaceLiIndex=cienaCesMcastFilterGroupMemberInterfaceLiIndex, cienaCesMcastFilterServerInterfaceType=cienaCesMcastFilterServerInterfaceType, cienaCesMcastRouterRxDiscards=cienaCesMcastRouterRxDiscards, cienaCesMcastV3ReportsRx=cienaCesMcastV3ReportsRx, cienaCesMcastChannelStreamExIfcIndex=cienaCesMcastChannelStreamExIfcIndex, IgmpCompatibilityMode=IgmpCompatibilityMode, cienaCesMcastFilterGroupMemberInterfaceType=cienaCesMcastFilterGroupMemberInterfaceType, cienaCesMcastQueryMessagesRx=cienaCesMcastQueryMessagesRx, cienaCesMcastFilterServiceEntry=cienaCesMcastFilterServiceEntry, cienaCesMcastFilterStatsEntry=cienaCesMcastFilterStatsEntry, cienaCesMcastIgmpProxyQuerySrcIpAddr=cienaCesMcastIgmpProxyQuerySrcIpAddr, cienaCesMcastReportSendInterfaceType=cienaCesMcastReportSendInterfaceType, cienaCesMcastFilterServiceType=cienaCesMcastFilterServiceType, cienaCesMcastLingerCount=cienaCesMcastLingerCount, cienaCesMcastChannelStreamEntry=cienaCesMcastChannelStreamEntry, cienaCesMcastRouterSrcIpAddrType=cienaCesMcastRouterSrcIpAddrType, cienaCesMcastIgmpDefaultRouterInterfaceType=cienaCesMcastIgmpDefaultRouterInterfaceType, cienaCesMcastQueryRxDiscards=cienaCesMcastQueryRxDiscards, cienaCesMcastCurrentLogicalInterfaces=cienaCesMcastCurrentLogicalInterfaces, cienaCesMcastFilterMIBNotificationPrefix=cienaCesMcastFilterMIBNotificationPrefix, cienaCesMcastRouterSrcIpAddr=cienaCesMcastRouterSrcIpAddr, cienaCesMcastL2L3MismatchRx=cienaCesMcastL2L3MismatchRx, cienaCesMcastFilterGroupSrcRecordSrcIpAddrPrefixLen=cienaCesMcastFilterGroupSrcRecordSrcIpAddrPrefixLen, cienaCesMcastIgmpDefaultRouterInterfaceId=cienaCesMcastIgmpDefaultRouterInterfaceId, cienaCesMcastIgmpSnoopProxyQueryReplyTmo=cienaCesMcastIgmpSnoopProxyQueryReplyTmo, cienaCesMcastFilterGroupIGMPV2HostPresentTimeRemainingValue=cienaCesMcastFilterGroupIGMPV2HostPresentTimeRemainingValue, cienaCesMcastFilterGroupCompatibilityMode=cienaCesMcastFilterGroupCompatibilityMode, cienaCesMcastV3ReportsRxBlock=cienaCesMcastV3ReportsRxBlock, cienaCesMcastStatsQuerySrcIpZeroDiscard=cienaCesMcastStatsQuerySrcIpZeroDiscard, cienaCesMcastGlobalSnoopState=cienaCesMcastGlobalSnoopState, cienaCesMcastV3ReportsRxToIn=cienaCesMcastV3ReportsRxToIn, cienaCesMcastIgmpLastMemberQueryInterval=cienaCesMcastIgmpLastMemberQueryInterval, cienaCesMcastFilterGroupMemberInterfaceLiType=cienaCesMcastFilterGroupMemberInterfaceLiType, cienaCesMcastLeaveMessagesRx=cienaCesMcastLeaveMessagesRx, cienaCesMcastGlobalSnoopAdminState=cienaCesMcastGlobalSnoopAdminState, cienaCesMcastIgmpSnoopEntry=cienaCesMcastIgmpSnoopEntry, cienaCesMcastHostRxDiscards=cienaCesMcastHostRxDiscards, cienaCesMcastFilterGroupAddrPrefixLen=cienaCesMcastFilterGroupAddrPrefixLen, cienaCesMcastMaxLogicalInterfaces=cienaCesMcastMaxLogicalInterfaces, cienaCesMcastResourceExceed=cienaCesMcastResourceExceed, cienaCesMcastMaxSrcAddrRecords=cienaCesMcastMaxSrcAddrRecords, cienaCesMcastFilterServiceOperState=cienaCesMcastFilterServiceOperState, cienaCesMcastFilterGroupSrcRecordSrcIpAddrType=cienaCesMcastFilterGroupSrcRecordSrcIpAddrType, cienaCesMcastFilterGroupAddrType=cienaCesMcastFilterGroupAddrType, cienaCesMcastCurrentSrcAddrRecords=cienaCesMcastCurrentSrcAddrRecords, cienaCesMcastIgmpQueryEngineState=cienaCesMcastIgmpQueryEngineState, cienaCesMcastIgmpSnoopEnable=cienaCesMcastIgmpSnoopEnable, cienaCesMcastGlobalAdminState=cienaCesMcastGlobalAdminState, InterfaceType=InterfaceType, cienaCesMcastV3ReportsRxIsIn=cienaCesMcastV3ReportsRxIsIn, cienaCesMcastFilterGroupEntry=cienaCesMcastFilterGroupEntry, cienaCesMcastFilterServerInterfaceLiIndex=cienaCesMcastFilterServerInterfaceLiIndex, cienaCesMcastIgmpSnoopEnableOperState=cienaCesMcastIgmpSnoopEnableOperState, cienaCesMcastJoinMessagesRx=cienaCesMcastJoinMessagesRx, cienaCesMcastFilterMIBNotification=cienaCesMcastFilterMIBNotification, cienaCesMcastIgmpProxyQuerySrcIpAddrType=cienaCesMcastIgmpProxyQuerySrcIpAddrType, cienaCesMcastUnknownPktTypeRx=cienaCesMcastUnknownPktTypeRx, cienaCesMcastFilterGroupTimer=cienaCesMcastFilterGroupTimer, cienaCesMcastCurrentTimers=cienaCesMcastCurrentTimers, cienaCesMcastChanelStreamStartGroupAddrType=cienaCesMcastChanelStreamStartGroupAddrType, cienaCesMcastFilterGroupSrcRecordEntry=cienaCesMcastFilterGroupSrcRecordEntry, cienaCesMcastIgmpPriority=cienaCesMcastIgmpPriority, cienaCesMcastFilterServerInterfaceLiType=cienaCesMcastFilterServerInterfaceLiType, cienaCesMcastDynamicGrpCount=cienaCesMcastDynamicGrpCount, cienaCesMcastFilterStats=cienaCesMcastFilterStats, cienaCesMcastIgmpInquisitiveLeaveState=cienaCesMcastIgmpInquisitiveLeaveState, cienaCesMcastIgmpSnoopForkMode=cienaCesMcastIgmpSnoopForkMode, cienaCesMcastFilterGroupType=cienaCesMcastFilterGroupType, cienaCesMcastCurrentServiceInstances=cienaCesMcastCurrentServiceInstances, cienaCesMcastIgmpSnoopProxyQueryInterval=cienaCesMcastIgmpSnoopProxyQueryInterval, cienaCesMcastMaxTimers=cienaCesMcastMaxTimers, cienaCesMcastFilterGroupIGMPV1HostPresentTimeRemainingValue=cienaCesMcastFilterGroupIGMPV1HostPresentTimeRemainingValue, cienaCesMcastReplyTimeouts=cienaCesMcastReplyTimeouts)
