#
# PySNMP MIB module HH3C-QINQ-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-QINQ-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:29:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, ObjectIdentity, Counter64, Unsigned32, ModuleIdentity, Integer32, Bits, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "ObjectIdentity", "Counter64", "Unsigned32", "ModuleIdentity", "Integer32", "Bits", "iso")
RowStatus, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention")
hh3cQINQ = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 69))
hh3cQINQ.setRevisions(('2006-03-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cQINQ.setRevisionsDescriptions(('The initial version of this MIB.',))
if mibBuilder.loadTexts: hh3cQINQ.setLastUpdated('200603100000Z')
if mibBuilder.loadTexts: hh3cQINQ.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cQINQ.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cQINQ.setDescription('H3C 802.1Q-in-Q MIB')
class Hh3cQinQSwitchState(TextualConvention, Integer32):
    description = 'An enumerated value which indicates the state of switch.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

hh3cQinQMibObject = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1))
hh3cQinQGlobalConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 1))
hh3cQinQBpduTunnelSwitch = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 1, 1), Hh3cQinQSwitchState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQinQBpduTunnelSwitch.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQBpduTunnelSwitch.setDescription("The global configuration switch of BPDU 802.1q tunnel. If global configuration is disabled, BPDU tunnel function will be disabled despite of the corresponding configuration of interface. BPDU tunnel function of a certain interface would work only if the global and interface's switch are both enabled.")
hh3cQinQEthernetTypeValue = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33024)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQinQEthernetTypeValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQEthernetTypeValue.setDescription('Ethernet protocol type configuring for a global value. The ethernet protocol type is also the TPID(Tag Protocol Identity) field of a VLAN tag described in 802.1q document. This value can be also configured for an individual interface or VLAN. The node that configure this value for a single interface is hh3cQinQIfEthernetType, whose priority is higher than hh3cQinQEthernetTypeValue. That means, if the value configured for a interface is different from the global value, the switch will select the configuration of the interface and ignore the global configuration. The ethernet protocol type of node hh3cQinQVidEthernetType that configured for a VLAN has the highest priority.')
hh3cQinQServiceTPIDValue = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQinQServiceTPIDValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQServiceTPIDValue.setDescription('Ethernet protocol type configured for service VLAN tags globally. The ethernet protocol type is also the TPID(Tag Protocol Identity) field of a VLAN tag described in 802.1q document. This value can be also configured for an individual interface. The node that configure this value for a single interface is hh3cQinQIfServiceTPIDValue, whose priority is higher than hh3cQinQServiceTPIDValue. That means, if the value configured for a interface is different from the global value, the switch will select the configuration of the interface and ignore the global configuration.')
hh3cQinQCustomerTPIDValue = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cQinQCustomerTPIDValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQCustomerTPIDValue.setDescription('Ethernet protocol type configured for customer VLAN tags globally. The ethernet protocol type is also the TPID(Tag Protocol Identity) field of a VLAN tag described in 802.1q document. This value can be also configured for an individual interface. The node that configure this value for a single interface is hh3cQinQIfCustomerTPIDValue, whose priority is higher than hh3cQinQCustomerTPIDValue. That means, if the value configured for a interface is different from the global value, the switch will select the configuration of the interface and ignore the global configuration.')
hh3cQinQBpduTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 2), )
if mibBuilder.loadTexts: hh3cQinQBpduTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQBpduTunnelTable.setDescription('A table for configuring 802.1q BPDU tunnel function for interfaces.')
hh3cQinQBpduTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-QINQ-MIB", "hh3cQinQProtocolIndex"))
if mibBuilder.loadTexts: hh3cQinQBpduTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQBpduTunnelEntry.setDescription('An entry for configuring 802.1q BPDU tunnel function for interfaces.')
hh3cQinQProtocolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bpdu", 1), ("stp", 2), ("gmosaic", 3), ("igmp", 4))))
if mibBuilder.loadTexts: hh3cQinQProtocolIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQProtocolIndex.setDescription("The index of protocol on which the BPDU tunnel state will be set. 'bpdu' represents status of BPDU tunnel. 'stp' represents STP tunnel. 'gmosaic' represents GMOSAIC tunnel. 'igmp' represents IGMP tunnel. STP/GMOSAIC/IGMP tunnel will start to work only if BPDU tunnel and STP/GMOSAIC/IGMP tunnel are both enabled.")
hh3cQinQBpduRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQBpduRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQBpduRowStatus.setDescription('Operation status of this table entry.')
hh3cQinQPriorityRemarkTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 3), )
if mibBuilder.loadTexts: hh3cQinQPriorityRemarkTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPriorityRemarkTable.setDescription('A table for configuring priority field in 802.1Q-in-Q outer VLAN tag for interfaces. This feature uses the priority of an inner VLAN tag to remark the priority of an outer VLAN tag.')
hh3cQinQPriorityRemarkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-QINQ-MIB", "hh3cQinQPriorityValue"))
if mibBuilder.loadTexts: hh3cQinQPriorityRemarkEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPriorityRemarkEntry.setDescription('An entry for configuring priority remark function for interfaces.')
hh3cQinQPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hh3cQinQPriorityValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPriorityValue.setDescription('The priority value in inner VLAN tag. Since the priority range is from 0 to 7, yet the index range is from 1 to 8. Thus, the actual priority value equals to the value that subtracts 1 from corresponding index value.')
hh3cQinQPriorityRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQPriorityRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPriorityRemarkValue.setDescription('The new priority value used to fill outer tag.')
hh3cQinQPriorityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQPriorityRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPriorityRowStatus.setDescription('Operation status of this table entry.')
hh3cQinQVidTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4), )
if mibBuilder.loadTexts: hh3cQinQVidTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidTable.setDescription('A table for configuring VLAN ID of the 802.1Q-in-Q interfaces.')
hh3cQinQVidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-QINQ-MIB", "hh3cQinQVlanID"))
if mibBuilder.loadTexts: hh3cQinQVidEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidEntry.setDescription('An entry for configuring VLAN ID of the 802.1Q-in-Q interfaces.')
hh3cQinQVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hh3cQinQVlanID.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVlanID.setDescription('VLAN ID')
hh3cQinQInboundVidListLow = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQInboundVidListLow.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQInboundVidListLow.setDescription('The inbound VLAN IDs which need 802.1Q-in-Q processing. The VLAN ID range, described by bitmap, is from 1 to 2048. The length of bitmap is 256 in bytes. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 1 through 8, the second octet specifying VLANs 9 through 16, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN.')
hh3cQinQInboundVidListHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQInboundVidListHigh.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQInboundVidListHigh.setDescription('The inbound VLAN IDs which need 802.1Q-in-Q processing. The VLAN ID range, described by bitmap, is from 2049 to 4094. The length of bitmap is 256 in bytes. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLANs 2049 through 2056, the second octet specifying VLANs 2057 through 2064, etc. Within each octet, the most significant bit represents the highest numbered VLAN, and the least significant bit represents the lowest numbered VLAN.')
hh3cQinQVidEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQVidEthernetType.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidEthernetType.setDescription('Ethernet protocol type configuring for a VLAN.')
hh3cQinQVidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQVidRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidRowStatus.setDescription('Operation status of this table entry.')
hh3cQinQVidSwapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 5), )
if mibBuilder.loadTexts: hh3cQinQVidSwapTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidSwapTable.setDescription('A table for configuring 802.1Q-in-Q inner VLAN ID swapping function for interfaces.')
hh3cQinQVidSwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-QINQ-MIB", "hh3cQinQVlanID"), (0, "HH3C-QINQ-MIB", "hh3cQinQVidSwapOld"))
if mibBuilder.loadTexts: hh3cQinQVidSwapEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidSwapEntry.setDescription('An entry for configuring 802.1Q-in-Q inner VLAN ID swapping function for interfaces.')
hh3cQinQVidSwapOld = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hh3cQinQVidSwapOld.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidSwapOld.setDescription('The old VLAN ID of original 802.1Q packets.')
hh3cQinQVidSwapNew = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQVidSwapNew.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidSwapNew.setDescription('The new VLAN ID of original 802.1Q packets.')
hh3cQinQVidSwapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQVidSwapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQVidSwapRowStatus.setDescription('Operation status of this table entry.')
hh3cQinQPrioritySwapTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 6), )
if mibBuilder.loadTexts: hh3cQinQPrioritySwapTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPrioritySwapTable.setDescription('A table for configuring 802.1Q-in-Q inner VLAN priority swapping function for interfaces. Using this function, the priority of inner VLAN tag can be modified.')
hh3cQinQPrioritySwapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 6, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-QINQ-MIB", "hh3cQinQVlanID"), (0, "HH3C-QINQ-MIB", "hh3cQinQPrioritySwapOld"))
if mibBuilder.loadTexts: hh3cQinQPrioritySwapEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPrioritySwapEntry.setDescription('An entry for configuring 802.1Q-in-Q inner VLAN priority swapping function for interfaces.')
hh3cQinQPrioritySwapOld = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: hh3cQinQPrioritySwapOld.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPrioritySwapOld.setDescription('The old priority of original 802.1Q packets. It is the priority of inner VLAN tag. Since the VLAN priority range is from 0 to 7, yet the index range is from 1 to 8. Thus, the actual priority value equals to the value that subtracts 1 from corresponding index value.')
hh3cQinQPrioritySwapNew = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQPrioritySwapNew.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPrioritySwapNew.setDescription('The new priority of original 802.1Q packets. It is the priority of inner VLAN tag after swapped.')
hh3cQinQPrioritySwapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQPrioritySwapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQPrioritySwapRowStatus.setDescription('Operation status of this table entry.')
hh3cQinQIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7), )
if mibBuilder.loadTexts: hh3cQinQIfConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfConfigTable.setDescription('A table for configuring 802.1Q-in-Q functions for interfaces.')
hh3cQinQIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cQinQIfConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfConfigEntry.setDescription('An entry for configuring 802.1Q-in-Q functions for interfaces.')
hh3cQinQIfEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(33024)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfEthernetType.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfEthernetType.setDescription('Ethernet protocol type configuring for an interface.')
hh3cQinQIfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 2), Hh3cQinQSwitchState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfSwitch.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfSwitch.setDescription('Switch of 802.1Q-in-Q functions configuring for an interface.')
hh3cQinQIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfRowStatus.setDescription('Operation status of this table entry.')
hh3cQinQIfServiceTPIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfServiceTPIDValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfServiceTPIDValue.setDescription('Service TPID value configured for an interface.')
hh3cQinQIfCustomerTPIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfCustomerTPIDValue.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfCustomerTPIDValue.setDescription('Customer TPID value configured for an interface.')
hh3cQinQIfUplinkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 6), Hh3cQinQSwitchState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfUplinkSwitch.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfUplinkSwitch.setDescription('Switch of the uplink 802.1Q-in-Q function for an interface.')
hh3cQinQIfDownlinkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 69, 1, 7, 1, 7), Hh3cQinQSwitchState().clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cQinQIfDownlinkSwitch.setStatus('current')
if mibBuilder.loadTexts: hh3cQinQIfDownlinkSwitch.setDescription('Switch of the downlink 802.1Q-in-Q function for an interface.')
mibBuilder.exportSymbols("HH3C-QINQ-MIB", hh3cQinQVlanID=hh3cQinQVlanID, hh3cQinQIfDownlinkSwitch=hh3cQinQIfDownlinkSwitch, hh3cQinQIfCustomerTPIDValue=hh3cQinQIfCustomerTPIDValue, hh3cQinQInboundVidListHigh=hh3cQinQInboundVidListHigh, hh3cQinQVidSwapTable=hh3cQinQVidSwapTable, hh3cQinQEthernetTypeValue=hh3cQinQEthernetTypeValue, hh3cQinQIfRowStatus=hh3cQinQIfRowStatus, hh3cQinQPrioritySwapNew=hh3cQinQPrioritySwapNew, hh3cQinQPriorityValue=hh3cQinQPriorityValue, hh3cQinQVidEntry=hh3cQinQVidEntry, hh3cQinQIfConfigTable=hh3cQinQIfConfigTable, Hh3cQinQSwitchState=Hh3cQinQSwitchState, hh3cQinQPrioritySwapRowStatus=hh3cQinQPrioritySwapRowStatus, hh3cQinQVidSwapEntry=hh3cQinQVidSwapEntry, hh3cQinQProtocolIndex=hh3cQinQProtocolIndex, hh3cQinQServiceTPIDValue=hh3cQinQServiceTPIDValue, hh3cQinQVidEthernetType=hh3cQinQVidEthernetType, hh3cQinQIfUplinkSwitch=hh3cQinQIfUplinkSwitch, PYSNMP_MODULE_ID=hh3cQINQ, hh3cQinQPriorityRemarkValue=hh3cQinQPriorityRemarkValue, hh3cQinQIfServiceTPIDValue=hh3cQinQIfServiceTPIDValue, hh3cQinQGlobalConfigGroup=hh3cQinQGlobalConfigGroup, hh3cQinQVidTable=hh3cQinQVidTable, hh3cQinQInboundVidListLow=hh3cQinQInboundVidListLow, hh3cQinQPriorityRowStatus=hh3cQinQPriorityRowStatus, hh3cQinQBpduTunnelTable=hh3cQinQBpduTunnelTable, hh3cQinQIfConfigEntry=hh3cQinQIfConfigEntry, hh3cQinQVidSwapOld=hh3cQinQVidSwapOld, hh3cQinQBpduTunnelSwitch=hh3cQinQBpduTunnelSwitch, hh3cQinQVidSwapRowStatus=hh3cQinQVidSwapRowStatus, hh3cQinQPrioritySwapTable=hh3cQinQPrioritySwapTable, hh3cQinQVidRowStatus=hh3cQinQVidRowStatus, hh3cQinQMibObject=hh3cQinQMibObject, hh3cQinQIfEthernetType=hh3cQinQIfEthernetType, hh3cQinQBpduTunnelEntry=hh3cQinQBpduTunnelEntry, hh3cQinQPrioritySwapOld=hh3cQinQPrioritySwapOld, hh3cQinQPriorityRemarkTable=hh3cQinQPriorityRemarkTable, hh3cQINQ=hh3cQINQ, hh3cQinQVidSwapNew=hh3cQinQVidSwapNew, hh3cQinQBpduRowStatus=hh3cQinQBpduRowStatus, hh3cQinQPrioritySwapEntry=hh3cQinQPrioritySwapEntry, hh3cQinQIfSwitch=hh3cQinQIfSwitch, hh3cQinQPriorityRemarkEntry=hh3cQinQPriorityRemarkEntry, hh3cQinQCustomerTPIDValue=hh3cQinQCustomerTPIDValue)
