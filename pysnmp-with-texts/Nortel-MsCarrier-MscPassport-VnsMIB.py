#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-VnsMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-VnsMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:31:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
mscRtgIndex, mscRtg = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex", "mscRtg")
InterfaceIndex, RowStatus, StorageType, Unsigned32, DisplayString, Integer32, RowPointer = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "InterfaceIndex", "RowStatus", "StorageType", "Unsigned32", "DisplayString", "Integer32", "RowPointer")
Link, PassportCounter64, AsciiStringIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "Link", "PassportCounter64", "AsciiStringIndex")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, IpAddress, iso, ObjectIdentity, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, Counter32, Counter64, TimeTicks, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "IpAddress", "iso", "ObjectIdentity", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "Counter32", "Counter64", "TimeTicks", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
vnsMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20))
mscRtgVns = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3))
mscRtgVnsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 1), )
if mibBuilder.loadTexts: mscRtgVnsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsRowStatusTable.setDescription('This entry controls the addition and deletion of mscRtgVns components.')
mscRtgVnsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgVns component.')
mscRtgVnsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgVns components. These components can be added and deleted.')
mscRtgVnsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgVnsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsStorageType.setDescription('This variable represents the storage type value for the mscRtgVns tables.')
mscRtgVnsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 12)))
if mibBuilder.loadTexts: mscRtgVnsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsIndex.setDescription('This variable represents the index for the mscRtgVns tables.')
mscRtgVnsProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10), )
if mibBuilder.loadTexts: mscRtgVnsProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsProvTable.setDescription('This group contains the provisioning data for the Vns component. It must be set to allow the logical network to function properly.')
mscRtgVnsProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsProvEntry.setDescription('An entry in the mscRtgVnsProvTable.')
mscRtgVnsLogicalNetworkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 2047))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsLogicalNetworkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLogicalNetworkNumber.setDescription('This is the Logical Network Number (LNN) for the Vns component. The LNN is used to identify the logical network that the Vns component supports. Vns components, on different interconnected nodes, provisioned with the same LNN are part of the same logical network. The maximum number of logical networks that can be supported in the entire network is 2047. The maximum number of logical networks, and Vns components, supported on a single node is 126. Each Vns component must be provisioned with a unique LNN on a single node.')
mscRtgVnsLinkToProtocolPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1, 2), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsLinkToProtocolPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLinkToProtocolPort.setDescription("This is a link to a protocol port under the VirtualRouter component that uses this logical network. This link, when used, causes the VirtualNetworkingSystem to support a 'broadcast media' style routing model in which all reachable nodes in the logical network are available for use by the VirtualRouter and its subcomponents.")
mscRtgVnsMaximumTransmissionUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2048, 65535)).clone(2048)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsMaximumTransmissionUnit.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMaximumTransmissionUnit.setDescription('This is the maximum transmission unit (MTU), in bytes, supported by the VirtualNetworkingSystem. The MTU must be less than the minimum MTU provisioned on any trunk in the network that is supporting the LNN of this Vns component.')
mscRtgVnsLoadSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsLoadSharing.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLoadSharing.setDescription('This attribute specifies whether VNS will use the loadSharing feature. If its value is disabled, VNS will send the packets from a given source to a given destination over only one of the preferred links in a link group. If loadSharing is enabled, VNS will send packets of a data stream over all the preferred links in a link group. Note that setting loadSharing to enabled may cause packets to be misordered.')
mscRtgVnsDiscardPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsDiscardPriority.setStatus('obsolete')
if mibBuilder.loadTexts: mscRtgVnsDiscardPriority.setDescription('This attribute specifies the importance of the packets of VNS. Zero (0) is used the most important traffic, and three (3) is used for the least important traffic. In times of congestion, the discardPriority is used by packet forwarding on the VNS to determine which packets are discarded first to reduce the load. Packets with a higher discardPriority (or numerically less) are discarded after packets with a lower discardPriority (or numerically higher).')
mscRtgVnsIlsForwarder = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 10, 1, 6), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsIlsForwarder.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsIlsForwarder.setDescription('This attribute specifies the IlsForwarder component this VNS component is using. The IlsForwarder component is used to assist forwarding VNS traffic that comes in from ATM logical trunks.')
mscRtgVnsIfEntryTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 11), )
if mibBuilder.loadTexts: mscRtgVnsIfEntryTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsIfEntryTable.setDescription('This group contains the provisionable attributes for the ifEntry.')
mscRtgVnsIfEntryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsIfEntryEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsIfEntryEntry.setDescription('An entry in the mscRtgVnsIfEntryTable.')
mscRtgVnsIfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3))).clone('up')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsIfAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsIfAdminStatus.setDescription('The desired state of the interface. The up state indicates the interface is operational. The down state indicates the interface is not operational. The testing state indicates that no operational packets can be passed.')
mscRtgVnsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 11, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsIfIndex.setDescription('This is the index for the IfEntry. Its value is automatically initialized during the provisioning process.')
mscRtgVnsCidDataTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 12), )
if mibBuilder.loadTexts: mscRtgVnsCidDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsCidDataTable.setDescription("This group contains the attribute for a component's Customer Identifier (CID). Refer to the attribute description for a detailed explanation of CIDs.")
mscRtgVnsCidDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsCidDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsCidDataEntry.setDescription('An entry in the mscRtgVnsCidDataTable.')
mscRtgVnsCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 12, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 8191), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscRtgVnsCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsCustomerIdentifier.setDescription("This attribute holds the Customer Identifier (CID). Every component has a CID. If a component has a cid attribute, the component's CID is the provisioned value of that attribute; otherwise the component inherits the CID of its parent. The top- level component has a CID of 0. Every operator session also has a CID, which is the CID provisioned for the operator's user ID. An operator will see only the stream data for components having a matching CID. Also, the operator will be allowed to issue commands for only those components which have a matching CID. An operator CID of 0 is used to identify the Network Manager (referred to as 'NetMan' in DPN). This CID matches the CID of any component. Values 1 to 8191 inclusive (equivalent to 'basic CIDs' in DPN) may be assigned to specific customers.")
mscRtgVnsStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 14), )
if mibBuilder.loadTexts: mscRtgVnsStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscRtgVnsStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 14, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsStateEntry.setDescription('An entry in the mscRtgVnsStateTable.')
mscRtgVnsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscRtgVnsOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscRtgVnsUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscRtgVnsOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 15), )
if mibBuilder.loadTexts: mscRtgVnsOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsOperTable.setDescription('This group of attributes provides information about the functioning of the Vns component.')
mscRtgVnsOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsOperEntry.setDescription('An entry in the mscRtgVnsOperTable.')
mscRtgVnsReportedThroughputMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsReportedThroughputMetric.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsReportedThroughputMetric.setDescription('This is the throughput metric that has been calculated and reported to the VirtualRouter component for use by its routing protocol subcomponents. A value of 2147483647 means infinity and implies that either throughput routing is not available or supported on the logical network.')
mscRtgVnsFwdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16), )
if mibBuilder.loadTexts: mscRtgVnsFwdStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsFwdStatsTable.setDescription('This group of attributes provides combined statistics of the traffic handled by this Vns component on all LPs. They are presented in 3 broad classes: unicast, multicast, and total (unicast and multicast combined).')
mscRtgVnsFwdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"))
if mibBuilder.loadTexts: mscRtgVnsFwdStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsFwdStatsEntry.setDescription('An entry in the mscRtgVnsFwdStatsTable.')
mscRtgVnsUniRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUniRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUniRxPkts.setDescription('This attribute counts the unicast packets received by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsUniRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUniRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUniRxBytes.setDescription('This attribute counts the unicast bytes received by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsUniRxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUniRxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUniRxDiscPkts.setDescription('This attribute counts the unicast packets received and discarded by this Vns component. (For example, a received VNS packet may be discarded if its Time-to-Live counter has expired.) Packets counted here are not counted in uniRxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsUniTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUniTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUniTxPkts.setDescription('This attribute counts the unicast packets transmitted by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsUniTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUniTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUniTxBytes.setDescription('This attribute counts the unicast bytes transmitted by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsUniTxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsUniTxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsUniTxDiscPkts.setDescription('This attribute counts the unicast packets this Vns component was expected to transmit, but had to discard. (For example, VNS packets may be discarded because there is no route to the given destination.) Packets counted here are not counted in uniTxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsMultiRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsMultiRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMultiRxPkts.setDescription('This attribute counts the multicast packets received by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsMultiRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsMultiRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMultiRxBytes.setDescription('This attribute counts the multicast bytes received by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsMultiRxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsMultiRxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMultiRxDiscPkts.setDescription('This attribute counts the multicast packets received and discarded by this Vns component. (For example, a received VNS packet may be discarded if its Time-to-Live counter has expired.) Packets counted here are not counted in multiRxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsMultiTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsMultiTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMultiTxPkts.setDescription('This attribute counts the multicast packets transmitted by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsMultiTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsMultiTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMultiTxBytes.setDescription('This attribute counts the multicast bytes transmitted by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsMultiTxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsMultiTxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsMultiTxDiscPkts.setDescription('This attribute counts the multicast packets this Vns component was expected to transmit, but had to discard. (For example, VNS packets may be discarded because there is no route to the given destination.) Packets counted here are not counted in multiTxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsTotalRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsTotalRxPkts.setDescription('This attribute gives the total count of packets received by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsTotalRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsTotalRxBytes.setDescription('This attribute gives the total count of bytes received by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsTotalRxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsTotalRxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsTotalRxDiscPkts.setDescription('This attribute gives the total count of packets received and discarded by this Vns component. (For example, a received VNS packet may be discarded if its Time-to-Live counter has expired.) Packets counted here are not counted in totalRxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsTotalTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsTotalTxPkts.setDescription('This attribute gives the total count of packets transmitted by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsTotalTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 17), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsTotalTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsTotalTxBytes.setDescription('This attribute gives the total count of bytes transmitted by this Vns component. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsTotalTxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 16, 1, 18), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsTotalTxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsTotalTxDiscPkts.setDescription('This attribute gives the total count of packets this Vns component was expected to transmit, but had to discard. (For example, VNS packets may be discarded because there is no route to the given destination.) Packets counted here are not counted in totalTxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsNode = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2))
mscRtgVnsNodeRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 1), )
if mibBuilder.loadTexts: mscRtgVnsNodeRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscRtgVnsNode components.')
mscRtgVnsNodeRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsNodeIndex"))
if mibBuilder.loadTexts: mscRtgVnsNodeRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgVnsNode component.')
mscRtgVnsNodeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsNodeRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgVnsNode components. These components cannot be added nor deleted.')
mscRtgVnsNodeComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsNodeComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgVnsNodeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsNodeStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeStorageType.setDescription('This variable represents the storage type value for the mscRtgVnsNode tables.')
mscRtgVnsNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: mscRtgVnsNodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeIndex.setDescription('This variable represents the index for the mscRtgVnsNode tables.')
mscRtgVnsNodeOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 10), )
if mibBuilder.loadTexts: mscRtgVnsNodeOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeOperTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group of attributes is maintained by the Vns component to provide information about the Nodes reachable in the logical network. The data in this group specifies a row in the Node component.')
mscRtgVnsNodeOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsNodeIndex"))
if mibBuilder.loadTexts: mscRtgVnsNodeOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeOperEntry.setDescription('An entry in the mscRtgVnsNodeOperTable.')
mscRtgVnsNodeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsNodeMetric.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeMetric.setDescription("The minimum metric, for the throughput Class of Service (COS), to the destination Node. The metric associated with a path is computed by the routing system based on the sum of the COS metrics associated with the links in the path to the destination. A path with a lower metric value is preferable to one with a higher value as it is associated with the best COS attribute facilities. The metric displayed is that of the best path(s). A metric value of 2147483647 means the Node is unreachable. A value of 0 indicates that no cost is associated with the path to the destination. This would be the case for the local node's Id.")
mscRtgVnsNodeNextHopLinkGroup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 10, 1, 2), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsNodeNextHopLinkGroup1.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeNextHopLinkGroup1.setDescription("The first possible link group available that can be used to reach a neighbour which is the next hop in the path to the destination Node for the throughput Class of Service (COS). VNS traffic is routed deterministically across the links in up to two link groups, when available. The link groups selected are those associated with minimum metric COS paths to the destination. If two link groups are in use then the metric of the paths associated with each are identical. If no link groups are listed then the destination is not reachable (except in the case of the local node's Id). Link group instances are managed by the TransportResource component. Further information about the links in the group can be obtained from it.")
mscRtgVnsNodeNextHopLinkGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 2, 10, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsNodeNextHopLinkGroup2.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsNodeNextHopLinkGroup2.setDescription('The second possible link group available that can be used to reach a neighbour which is the next hop in the path to the destination Node for the specified Class of Service (COS). VNS traffic is routed deterministically across the links in up to two link groups, when available. If only one link group is available this attribute will be left blank. The link groups selected are those associated with minimum metric COS paths to the destination. If two link groups are in use then the metric of the paths associated with each are identical. Link group instances are managed by the TransportResource component. Further information about the links in the group can be obtained from it.')
mscRtgVnsLpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3))
mscRtgVnsLpStatsRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 1), )
if mibBuilder.loadTexts: mscRtgVnsLpStatsRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsRowStatusTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This entry controls the addition and deletion of mscRtgVnsLpStats components.')
mscRtgVnsLpStatsRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsLpStatsIndex"))
if mibBuilder.loadTexts: mscRtgVnsLpStatsRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsRowStatusEntry.setDescription('A single entry in the table represents a single mscRtgVnsLpStats component.')
mscRtgVnsLpStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscRtgVnsLpStats components. These components cannot be added nor deleted.')
mscRtgVnsLpStatsComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscRtgVnsLpStatsStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsStorageType.setDescription('This variable represents the storage type value for the mscRtgVnsLpStats tables.')
mscRtgVnsLpStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: mscRtgVnsLpStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsIndex.setDescription('This variable represents the index for the mscRtgVnsLpStats tables.')
mscRtgVnsLpStatsFwdStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2), )
if mibBuilder.loadTexts: mscRtgVnsLpStatsFwdStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsFwdStatsTable.setDescription('*** THIS TABLE CURRENTLY NOT IMPLEMENTED *** This group of attributes provides statistics of the traffic handled by this Vns component on this LP. They are presented in 3 broad classes: unicast, multicast, total (unicast and multicast combined).')
mscRtgVnsLpStatsFwdStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-BaseRoutingMIB", "mscRtgIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsIndex"), (0, "Nortel-MsCarrier-MscPassport-VnsMIB", "mscRtgVnsLpStatsIndex"))
if mibBuilder.loadTexts: mscRtgVnsLpStatsFwdStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsFwdStatsEntry.setDescription('An entry in the mscRtgVnsLpStatsFwdStatsTable.')
mscRtgVnsLpStatsUniRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 1), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniRxPkts.setDescription('This attribute counts the unicast packets received by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsUniRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 2), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniRxBytes.setDescription('This attribute counts the unicast bytes received by VNS packet forwarding for this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsUniRxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 3), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniRxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniRxDiscPkts.setDescription('This attribute counts the unicast packets received and discarded by this Vns component on this LP. (For example, a received VNS packet may be discarded if its Time-to-Live counter has expired.) Packets counted here are not counted in uniRxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsUniTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 4), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniTxPkts.setDescription('This attribute counts the unicast packets transmitted by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsUniTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 5), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniTxBytes.setDescription('This attribute counts the unicast bytes transmitted by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsUniTxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 6), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniTxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsUniTxDiscPkts.setDescription('This attribute counts the unicast packets this Vns component was expected to transmit, but had to discard on this LP. (For example, VNS packets may be discarded because there is no route to the given destination.) Packets counted here are not counted in uniTxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsMultiRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 7), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiRxPkts.setDescription('This attribute counts the multicast packets received by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsMultiRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 8), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiRxBytes.setDescription('This attribute counts the multicast bytes received by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsMultiRxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 9), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiRxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiRxDiscPkts.setDescription('This attribute counts the multicast packets received and discarded by this Vns component on this LP. (For example, a received Vns packet may be discarded if its Time-to-Live counter has expired.) Packets counted here are not counted in multiRxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsMultiTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 10), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiTxPkts.setDescription('This attribute counts the multicast packets transmitted by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsMultiTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 11), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiTxBytes.setDescription('This attribute counts the multicast bytes transmitted by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsMultiTxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 12), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiTxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsMultiTxDiscPkts.setDescription('This attribute counts the multicast packets this Vns component was expected to transmit, but had to discard. (For example, VNS packets may be discarded because there is no route to the given destination.) Packets counted here are not counted in multiTxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsTotalRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 13), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalRxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalRxPkts.setDescription('This attribute gives the total count of packets received by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsTotalRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 14), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalRxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalRxBytes.setDescription('This attribute gives the total count of bytes received by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsTotalRxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 15), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalRxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalRxDiscPkts.setDescription('This attribute gives the total count of packets received and discarded by this Vns component on this LP. (For example, a received VNS packet may be discarded if its Time-to-Live counter has expired.) Packets counted here are not counted in totalRxPkts. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsTotalTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 16), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalTxPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalTxPkts.setDescription('This attribute gives the total count of packets transmitted by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsTotalTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 17), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalTxBytes.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalTxBytes.setDescription('This attribute gives the total count of bytes transmitted by this Vns component on this LP. The counter wraps around to zero when the maximum value is reached.')
mscRtgVnsLpStatsTotalTxDiscPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 40, 3, 3, 2, 1, 18), PassportCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalTxDiscPkts.setStatus('mandatory')
if mibBuilder.loadTexts: mscRtgVnsLpStatsTotalTxDiscPkts.setDescription('This attribute gives the total count of packets this Vns component was expected to transmit, but had to discard on this LP. (For example, VNS packets may be discarded because there is no route to the given destination.) Packets counted here are not counted in totalTxPkts. The counter wraps around to zero when the maximum value is reached.')
vnsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 1))
vnsGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 1, 1))
vnsGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 1, 1, 3))
vnsGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 1, 1, 3, 2))
vnsCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 3))
vnsCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 3, 1))
vnsCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 3, 1, 3))
vnsCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 20, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-VnsMIB", mscRtgVnsTotalRxPkts=mscRtgVnsTotalRxPkts, mscRtgVnsIndex=mscRtgVnsIndex, mscRtgVnsNodeRowStatusTable=mscRtgVnsNodeRowStatusTable, mscRtgVnsLpStatsMultiRxDiscPkts=mscRtgVnsLpStatsMultiRxDiscPkts, mscRtgVnsNode=mscRtgVnsNode, vnsGroupCA02=vnsGroupCA02, mscRtgVnsLpStatsUniTxBytes=mscRtgVnsLpStatsUniTxBytes, mscRtgVnsNodeRowStatusEntry=mscRtgVnsNodeRowStatusEntry, mscRtgVnsRowStatusEntry=mscRtgVnsRowStatusEntry, vnsCapabilitiesCA02=vnsCapabilitiesCA02, mscRtgVnsLpStatsTotalTxPkts=mscRtgVnsLpStatsTotalTxPkts, mscRtgVnsTotalRxDiscPkts=mscRtgVnsTotalRxDiscPkts, mscRtgVnsLpStatsFwdStatsTable=mscRtgVnsLpStatsFwdStatsTable, mscRtgVnsLpStats=mscRtgVnsLpStats, mscRtgVnsMultiRxBytes=mscRtgVnsMultiRxBytes, mscRtgVnsLpStatsMultiRxPkts=mscRtgVnsLpStatsMultiRxPkts, mscRtgVnsProvEntry=mscRtgVnsProvEntry, mscRtgVnsUniRxDiscPkts=mscRtgVnsUniRxDiscPkts, mscRtgVnsLpStatsComponentName=mscRtgVnsLpStatsComponentName, mscRtgVnsTotalRxBytes=mscRtgVnsTotalRxBytes, vnsCapabilities=vnsCapabilities, mscRtgVnsIfEntryEntry=mscRtgVnsIfEntryEntry, mscRtgVnsLpStatsRowStatusTable=mscRtgVnsLpStatsRowStatusTable, vnsGroupCA02A=vnsGroupCA02A, mscRtgVnsLpStatsTotalRxPkts=mscRtgVnsLpStatsTotalRxPkts, mscRtgVnsLpStatsRowStatusEntry=mscRtgVnsLpStatsRowStatusEntry, mscRtgVnsIfIndex=mscRtgVnsIfIndex, mscRtgVnsStorageType=mscRtgVnsStorageType, mscRtgVnsMultiTxBytes=mscRtgVnsMultiTxBytes, mscRtgVnsFwdStatsEntry=mscRtgVnsFwdStatsEntry, mscRtgVnsNodeNextHopLinkGroup2=mscRtgVnsNodeNextHopLinkGroup2, mscRtgVnsAdminState=mscRtgVnsAdminState, mscRtgVnsNodeStorageType=mscRtgVnsNodeStorageType, vnsGroup=vnsGroup, mscRtgVnsOperTable=mscRtgVnsOperTable, mscRtgVnsLogicalNetworkNumber=mscRtgVnsLogicalNetworkNumber, mscRtgVnsLpStatsMultiTxDiscPkts=mscRtgVnsLpStatsMultiTxDiscPkts, mscRtgVnsLpStatsMultiTxBytes=mscRtgVnsLpStatsMultiTxBytes, mscRtgVnsFwdStatsTable=mscRtgVnsFwdStatsTable, mscRtgVnsRowStatusTable=mscRtgVnsRowStatusTable, mscRtgVnsNodeOperEntry=mscRtgVnsNodeOperEntry, mscRtgVnsUniTxDiscPkts=mscRtgVnsUniTxDiscPkts, mscRtgVnsNodeNextHopLinkGroup1=mscRtgVnsNodeNextHopLinkGroup1, vnsCapabilitiesCA02A=vnsCapabilitiesCA02A, mscRtgVnsLpStatsUniTxPkts=mscRtgVnsLpStatsUniTxPkts, mscRtgVns=mscRtgVns, mscRtgVnsDiscardPriority=mscRtgVnsDiscardPriority, mscRtgVnsLpStatsUniTxDiscPkts=mscRtgVnsLpStatsUniTxDiscPkts, mscRtgVnsLpStatsMultiRxBytes=mscRtgVnsLpStatsMultiRxBytes, mscRtgVnsUsageState=mscRtgVnsUsageState, mscRtgVnsMultiTxDiscPkts=mscRtgVnsMultiTxDiscPkts, vnsMIB=vnsMIB, mscRtgVnsUniTxBytes=mscRtgVnsUniTxBytes, mscRtgVnsMultiRxDiscPkts=mscRtgVnsMultiRxDiscPkts, mscRtgVnsUniRxPkts=mscRtgVnsUniRxPkts, mscRtgVnsTotalTxDiscPkts=mscRtgVnsTotalTxDiscPkts, mscRtgVnsLpStatsRowStatus=mscRtgVnsLpStatsRowStatus, mscRtgVnsNodeIndex=mscRtgVnsNodeIndex, mscRtgVnsLpStatsFwdStatsEntry=mscRtgVnsLpStatsFwdStatsEntry, mscRtgVnsRowStatus=mscRtgVnsRowStatus, mscRtgVnsLpStatsTotalTxBytes=mscRtgVnsLpStatsTotalTxBytes, mscRtgVnsIlsForwarder=mscRtgVnsIlsForwarder, mscRtgVnsCidDataTable=mscRtgVnsCidDataTable, vnsCapabilitiesCA=vnsCapabilitiesCA, mscRtgVnsLpStatsUniRxPkts=mscRtgVnsLpStatsUniRxPkts, mscRtgVnsLpStatsTotalRxBytes=mscRtgVnsLpStatsTotalRxBytes, mscRtgVnsLpStatsTotalRxDiscPkts=mscRtgVnsLpStatsTotalRxDiscPkts, mscRtgVnsReportedThroughputMetric=mscRtgVnsReportedThroughputMetric, mscRtgVnsLpStatsMultiTxPkts=mscRtgVnsLpStatsMultiTxPkts, mscRtgVnsCidDataEntry=mscRtgVnsCidDataEntry, mscRtgVnsTotalTxPkts=mscRtgVnsTotalTxPkts, mscRtgVnsLpStatsUniRxDiscPkts=mscRtgVnsLpStatsUniRxDiscPkts, mscRtgVnsMaximumTransmissionUnit=mscRtgVnsMaximumTransmissionUnit, mscRtgVnsIfAdminStatus=mscRtgVnsIfAdminStatus, mscRtgVnsMultiTxPkts=mscRtgVnsMultiTxPkts, mscRtgVnsLpStatsStorageType=mscRtgVnsLpStatsStorageType, mscRtgVnsOperEntry=mscRtgVnsOperEntry, mscRtgVnsLpStatsIndex=mscRtgVnsLpStatsIndex, mscRtgVnsCustomerIdentifier=mscRtgVnsCustomerIdentifier, mscRtgVnsNodeOperTable=mscRtgVnsNodeOperTable, mscRtgVnsStateEntry=mscRtgVnsStateEntry, mscRtgVnsOperationalState=mscRtgVnsOperationalState, mscRtgVnsProvTable=mscRtgVnsProvTable, mscRtgVnsIfEntryTable=mscRtgVnsIfEntryTable, mscRtgVnsTotalTxBytes=mscRtgVnsTotalTxBytes, mscRtgVnsLoadSharing=mscRtgVnsLoadSharing, vnsGroupCA=vnsGroupCA, mscRtgVnsUniRxBytes=mscRtgVnsUniRxBytes, mscRtgVnsMultiRxPkts=mscRtgVnsMultiRxPkts, mscRtgVnsLinkToProtocolPort=mscRtgVnsLinkToProtocolPort, mscRtgVnsNodeRowStatus=mscRtgVnsNodeRowStatus, mscRtgVnsNodeMetric=mscRtgVnsNodeMetric, mscRtgVnsComponentName=mscRtgVnsComponentName, mscRtgVnsUniTxPkts=mscRtgVnsUniTxPkts, mscRtgVnsStateTable=mscRtgVnsStateTable, mscRtgVnsLpStatsUniRxBytes=mscRtgVnsLpStatsUniRxBytes, mscRtgVnsNodeComponentName=mscRtgVnsNodeComponentName, mscRtgVnsLpStatsTotalTxDiscPkts=mscRtgVnsLpStatsTotalTxDiscPkts)
