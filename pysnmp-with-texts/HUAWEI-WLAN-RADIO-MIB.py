#
# PySNMP MIB module HUAWEI-WLAN-RADIO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-WLAN-RADIO-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:49:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
hwApMac, hwApRegionIndex, hwApIndex = mibBuilder.importSymbols("HUAWEI-WLAN-DEVICE-MIB", "hwApMac", "hwApRegionIndex", "hwApIndex")
hwWlan, = mibBuilder.importSymbols("HUAWEI-WLAN-MIB", "hwWlan")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, Counter32, IpAddress, MibIdentifier, ObjectIdentity, NotificationType, Unsigned32, Counter64, ModuleIdentity, Bits, TimeTicks, Integer32, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "IpAddress", "MibIdentifier", "ObjectIdentity", "NotificationType", "Unsigned32", "Counter64", "ModuleIdentity", "Bits", "TimeTicks", "Integer32", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DateAndTime, MacAddress, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DateAndTime", "MacAddress", "DisplayString", "RowStatus")
hwRadio = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3))
hwRadio.setRevisions(('2014-12-17 11:45', '2014-12-16 16:00', '2014-12-16 10:15', '2014-11-27 14:45', '2014-09-28 10:27', '2014-09-16 10:08', '2014-07-17 14:27', '2014-07-11 14:27', '2014-07-07 14:49', '2014-05-26 18:56', '2014-05-06 11:30', '2014-02-13 13:30', '2014-01-26 13:30', '2014-01-13 10:30', '2013-10-23 11:41', '2013-09-06 15:14', '2013-08-21 15:14', '2013-05-21 15:14', '2010-11-11 10:00', '2010-05-25 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwRadio.setRevisionsDescriptions(('Version: V1.18, V2R5C10.', 'Version: V1.17, V2R5C10 hwConnectRxOKUcastDataFrames->hwConnectRxOkUcastDataFrames.', 'Version: V1.16, V2R5C10 add NPE radio HT mode and GI mode.', 'Version: V1.15, V2R5C10 add radio power change reason.', 'Version: V1.14, V2R5C10 add nodes for hwRadioQueryPowerlevel.', 'Version: V1.13, V2R5C10 add radio location channel set.', 'Version: V1.12, V2R5C10 add radio performance stat buffer nodes.', 'Version: V1.11, V2R3C10 add para for NPE config change.', 'Version: V1.10, V2R5C00 add para for hwRadioChannelChangedNotify & add auto calibrate start-time', 'Version: V1.09, V2R5C00 add para for a-msdu send', "Version: V1.08, V2R3C10 add for 'NPE' ", "Version: V1.07, V2R5 add for 'rate' ", "Version: V1.06, V2R5 add for 'delete hwRadioUserTrafficScheduler hwMacRadioUserTrafficScheduler ' ", "Version: V1.05, V2R5 add for '[undo] legacy-station enable' ", 'Version: V1.04, add V2R5 MIB', 'Version: V1.03, add mib change for DTS2013072701899 and DTS2013073103616', 'Version: V1.02, add mib change for calibrate', 'Version: V1.03, add mib change for V2R3', 'Version: V1.02, modify the characteristic of 80211n.', 'Version: V1.00, the initial revision of this MIB module.',))
if mibBuilder.loadTexts: hwRadio.setLastUpdated('201412171145Z')
if mibBuilder.loadTexts: hwRadio.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwRadio.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwRadio.setDescription('The HUAWEI-WLAN-RADIO-MIB contains objects to realize the management of AC at the side of the quality of wireless signal for AP. ')
hwRadioProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1), )
if mibBuilder.loadTexts: hwRadioProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioProfileTable.setDescription('Huawei radio profile table. Radio profile is aggregate of a group of configuration. The content of the table contains : radio profile name, radio type, radio rate mode , the value of radio rate, radio channel mode, radio power mode, radio calibrate interval, radio PER threshold, radio confict rate threshold, radio RTS/CTS threshold, radio fragment threshold, radio short frame retry times, radio long frame retry times, radio support short preamble, radio DTIM interval, radio WMM profile name, radio profile row status, radio 80211n channel bandwidth, radio 80211n fast MCS feedback, radio 80211n guard interval mode, radio 80211n reduced Inter frame Space, radio 80211n AMSDU length capability, radio 80211n AMPDU length capability, radio 80211n MCS Spatial streams, radio 80211n MCS modulation, radio 80211n MCS code rate. The index of the radio profile table is hwRadioProfileName, A radio profile name is an unique identifier to a radio profile. The detail description about the index can refer to the node hwRadioProfileName description. ')
hwRadioProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioProfileName"))
if mibBuilder.loadTexts: hwRadioProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioProfileEntry.setDescription('Huawei radio profile table entry. The entry of the huawei radio profile table, all the nodes of the huawei radio profile table are been configured. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio profile table is hwRadioProfileName, A radio profile name is an unique identifier to a radio profile. The detail description about the index can refer to the node hwRadioProfileName description. ')
hwRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: hwRadioProfileName.setDescription("A human readable string representing the name of the radio profile. This is the (radio profile) model dependent radio profile ID. The request of the radio parofile name string in detail as follows: - The length of the radio profile name at least contain 1 Byte ASCII characters,at most contain 31 Byte ASCII characters. - Any ASCII characters value must be included from 0x20 to 0x7E. - The question mark ASCII characters can't be included . - The double quotation marks ASCII characters can't appear at the beginning and the end. - The blank ASCII characters can't follow the double quotation marks ASCII characters. - The blank ASCII characters can't appear at the beginning and the end. ")
hwRadioType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("auto", 1), ("dot11b", 2), ("dot11a", 3), ("dot11g", 4), ("dot11n", 5), ("dot11bg", 6), ("dot11an", 7), ("dot11bgn", 8), ("dot11gn", 9), ("dot11ac", 10)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioType.setStatus('current')
if mibBuilder.loadTexts: hwRadioType.setDescription("The radio type is supported by the radio profile.Each radio type has its corresponding radio model. This is the (radio profile) model dependent radio profile ID. The value of the radio type will be chosen one of the following enum value: auto,dot11b,dot11a,dot11g,dot11n,dot11bg,dot11an,dot11bgn. Each eadion type will set the radio profile work on the given radio mode,and the radion has its corresponding frequency range of the wireless signal. The corresponding relationship between the radion type and the radion mode as follows: - auto,it chose the supported radio mode by the radio in itself, chose the frist reported mode defaultly. - dot11b, it set the radio profile work on 802.11b mode. - dot11a, it set the radio profile work on 802.11a mode. - dot11g, it set the radio profile work on 802.11g mode. - dot11n, it set the radio profile work on 802.11n mode. - dot11bg,it set the radio profile work on compatiblt mode of 802.11b and 802.11g. - dot11an,it set the radio profile work on compatiblt mode of 802.11a and 802.11n. - dot11gn,it set the radio profile work on compatiblt mode of 802.11n and 802.11g. - dot11bgn,it set the radio profile work on compatiblt mode of 802.11b , 802.11g and 802.11n. Notes if the setted radio type for the radio profile isn't the supported radion type of a radio in itself , the radon wouldn't work normally . ")
hwRadioRateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("auto", 1), ("designate", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRateMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioRateMode.setDescription("An object, which causes the way change to the radio support rate as the given mode when it's been modified. The meaning of the value in the enum list describe as following. Auto mode means the radio could working on all of the radio's support rates and hwRadioRateValue has the rate, which may be below or equal max rate automaticly. Designate mode means you can set a radio's specified support rate by the node hwRadioRateValue. ")
hwRadioRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", -1), ("rate1", 1), ("rate2", 2), ("rate55", 3), ("rate6", 4), ("rate9", 5), ("rate11", 6), ("rate12", 7), ("rate18", 8), ("rate22", 9), ("rate24", 10), ("rate33", 11), ("rate36", 12), ("rate48", 13), ("rate54", 14)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioRateValue.setStatus('current')
if mibBuilder.loadTexts: hwRadioRateValue.setDescription('The value of radio support rate, which is used together with the radio rate mode, designates the max rate of transmission by the radio profile. While the radio rate mode is auto, the radio rate value specify the max rate defaultly, and this node is useless. While the radio rate mode is designate, the radio rate value specify the max rate by the way of designation as the chosed rate value. It will give the combination meaning of enum member. each enum member fits together as tow part,the frist part is rate which means the radio rate, the second part means the magnitude of the support rate value, and the units is Mbps, such as rate1 means the max rate value supported by the radio profile is 1Mbps, rate2 means the max rate value supported by the radio profile is 2Mbps..., and so on. Notes the setting of this node must set the hwRadioRateMode node as designate. Please refer to the description of hwRadioRateMode. ')
hwRadioChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioChannelMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelMode.setDescription("The control mode of radio's channel. Auto means radio chooses the feat channel automatically on the basis of the detectted circumambienceis of the wireless signal in itself; Fixed means radio uses the channel as the configuration of administrator. Notes: The auto mode is recommended thanks to the changeful working circumambienceis of the radio wireless signal. If it uses the fixed mode, must detect the working circumambienceis of the radio wireless signal for the ap fristly, then choose the feat channel, otherwise the wireless signal maybe coflict and it would make worse to the quality of the communication. ")
hwRadioPowerMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("fixed", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioPowerMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioPowerMode.setDescription("The control mode of radio's power level. Auto means radio chooses the feat power level automatically on the basis of the detectted circumambienceis of the wireless signal in itself; Fixed means radio uses the power level as the configuration of administrator. Notes: The auto mode is recommended thanks to the changeful working circumambienceis of the radio wireless signal. If it uses the fixed mode, must detect the working circumambienceis of the radio wireless signal for the ap fristly, then choose the feat power level, otherwise the wireless signal maybe coflict and it would make worse to the quality of the communication. ")
hwRadioCalibrateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioCalibrateInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateInterval.setDescription('An interval uses to detect the rate of the lost signal packets and the conflicted signal packets periodically. If it sets the interval, radio will detect the signal quality in the configed calibrate interval. the units of the interval is minute, the range of the interval is from 5 minutes to 10080 minutes, and the default calibrate interval is 720 minutes. ')
hwRadioPERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioPERThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioPERThreshold.setDescription("A threshold standard, which uses the units percent ,gives an utmost rate to the lost signal packet or the error signal packet. The range of the threshold is from 3 to 50 percent, and the default PER threshold is 30 percent. If the average percent is out of the threshold, the Radio's channel or power level would be changed. when the MAC layer of the radio sends a signal packet at the least speed, and retransmits it the largest times, still could not receive any ACK or NACK packet, it will be thought as signal packet lost or error. ")
hwRadioConfictRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioConfictRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioConfictRateThreshold.setDescription("A threshold standard, which uses the units percent ,gives an utmost rate to the conflicted signal packet. The range of the threshold is from 20 to 80 percent, and the default conflict rate threshold is 60 percent. If the average percent is out of the threshold, the Radio's channel or power level would be changed. when the MAC layer of the radio sends a signal packet at the least speed, and retransmits it the largest times, still could not receive any ACK packet, it will be thought as signal packet conflicted. ")
hwRadioRTSThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioRTSThreshold.setDescription('A threshold standard, which judges whether need to send a RTS frame, gives an utmost length to the frame packet from the MAC layer. Once the length of a frame from MAC layer preponderates over the RTS/CTS threshold, it needs to send RTS frame befor the frame from MAC layer. the units of the RTS/CTS threshold is byte, the range of the threshold is from 64 Bytes to 2347 Bytes, and the default RTS/CTS threshold is 2347 Bytes. ')
hwRadioFragmentThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioFragmentThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioFragmentThreshold.setDescription('A threshold standard, which judges whether need to split a frame to several frames, gives an utmost length to the frame packet from the MAC layer. Once the length of a frame from MAC layer preponderates over the fragment threshold, it needs to split the frame to several splited frames. the units of the fragment threshold is byte, the range of the threshold is from 64 Bytes to 2346 Bytes, and the default fragment threshold is 2346 Bytes. ')
hwRadioShortFrameRetryTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioShortFrameRetryTimes.setStatus('current')
if mibBuilder.loadTexts: hwRadioShortFrameRetryTimes.setDescription("A threshold standard, which judges whether a frame need to retry to send or discard, gives an utmost times to retry to send a short frame packet from the MAC layer. A short frame means the lenth of the frame doesn't preponderate over the RTS/CTS threshold. Once the times to retry to send a short frame from MAC layer preponderates over the frame retry times, the frame would be discarded. The range of the short frame retry times is from 1 to 255 times, and the default of the short frame retry times is 7 times. ")
hwRadioLongFrameRetryTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioLongFrameRetryTimes.setStatus('current')
if mibBuilder.loadTexts: hwRadioLongFrameRetryTimes.setDescription('A threshold standard, which judges whether a frame need to retry to send or discard, gives an utmost times to retry to send a long frame packet from the MAC layer. A long frame means the lenth of the frame preponderates over the RTS/CTS threshold. Once the times to retry to send a long frame from MAC layer preponderates over the frame retry times, the frame would be discarded. The range of the long frame retry times is from 1 to 255 times, and the default of the long frame retry times is 4 times. ')
hwRadioSupportShortPreamble = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioSupportShortPreamble.setStatus('current')
if mibBuilder.loadTexts: hwRadioSupportShortPreamble.setDescription("A switch flag, which set the short preamble status as enable or disable, tells whether the short preamble is supported by the radio. Enable means the radio supports short preamble, disable means the radio doesn't support short preamble. Preamble, which is used to identify synchronization and the data packet that immediately follows, is a set of bits in the front of a data packet by receiver. It recommends to use short preamble, because it can make the synchronous performance of the network well. Preamble includes short preamble and normal preamble, the normal preamble usually is used at the scene compatible with some old kind of client network Adapter. ")
hwRadioDTIMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioDTIMInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadioDTIMInterval.setDescription('An interval uses to set the parameter of DTIM periods of a radio profile. The DTIM interval means between two DTIM beacon how much Beacons have been sended. DTIM is the abbreviation of Delivery Traffic Indication Map. AP will conserve the BTV and broadcast frames for a STA provisionally, when the STA is in the resting mode. If DTIM is included in a beacon from a ap to a sta, the ap will send the BTV and broadcast frames which have been conserved provisionally to the STA immediately. The units of the DTIM interval is beacon, the range of the DTIM interval is from 1 beacon to 255 beacons, and the default DTIM interval is 3 beacons. ')
hwRadioBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadioBeaconInterval.setDescription('An interval uses to specify the number of TUs that a station should use for scheduling Beacon transmissions. This value is transmitted in Beacon and Probe Response frames. The units of the beacon interval is tu, the range of the beacon interval is from 20 tus to 1000tus, and the default beacon interval is 1000 tus. 1 tu equals to 1024 ms. ')
hwRadioWMMProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioWMMProfileName.setStatus('current')
if mibBuilder.loadTexts: hwRadioWMMProfileName.setDescription("A human readable string representing the name of the WMM profile. WMM means WI-FI multimedia. This is the (radio profile) model dependent WMM profile ID. The request of the WMM parofile name string in detail as follows: - The length of the radio profile name at least contain 1 Byte ASCII characters,at most contain 31 Byte ASCII characters. - Any ASCII characters value must be included from 0x20 to 0x7E. - The question mark ASCII characters can't be included . - The double quotation marks ASCII characters can't appear at the beginning and the end. - The blank ASCII characters can't follow the double quotation marks ASCII characters. - The blank ASCII characters can't appear at the beginning and the end. Notes the WMM profile name can't be binded until the corresponding WMM profile is exist. ")
hwRadioProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadioProfileRowStatus.setDescription("An object is used to create or delete a radio profile. There are some restrictions of operation of the radio profile. - It needs a radio profile id for the creation of the radio profile. - A newly created row for a radio profile can't bind the node hwRadioWMMProfileName, until the corresponding hwRadioWMMProfileName have been set. - If A newly created row for a radio profile binds the node of hwRadioRateValue and hwRadioType, the value of hwRadioType must be supported radio type. - If a WMM profile have been binded to a radio profile, the radio profile can't be deleted. ")
hwRadio80211nGuardIntervalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("normal", 1), ("short", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadio80211nGuardIntervalMode.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211nGuardIntervalMode.setDescription("The mode uses to set the guard interval which is the necessary interval to receive and dispatch wireless signal to make the communication well. Normal means it sets the normal guard interval, short means it sets the short guard interval. The default guard interval mode is normal mode. The normal guard interval is 800 ns, and the short guard interval is 400 ns. If it's is not a kind of 11n or mixed with 11n AP, you can't config the it's hwRadio80211nGuardIntervalMode value. When the AP changed to be other kinds, the value of hwRadio80211nGuardIntervalMode will change to be default value. ")
hwRadio80211nAMPDUMaxLengthExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 3), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadio80211nAMPDUMaxLengthExponent.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211nAMPDUMaxLengthExponent.setDescription("The limit length of an AMPDU frame. AMPDU is the abbreviation of aggregate MAC protocol data unit. In order to reduce the spending of transmission, 80211n brings forward the frames aggregate technology that it aggregates several network frames to a singlehanded 80211 frame and transmit it. There are two ways of frames aggregate, one is the AMSDU and the other is AMPDU. AMPDU means it converts every network frame to 80211 frame, then aggregates serveral 80211 frames which go to the same destination to a singlehanded frame and transmit it. The units of the AMPDU frame is Byte, the range of the AMPDU frame is from 1024 Bytes to 65535 Bytes, and the default AMPDU frame is 1024 Bytes. If it's is not a kind of 11n or mixed with 11n AP, you can't config the it's AMPDU param value. When the AP changed to be other kinds, the value of AMPDU param will change to be default value. If the AMPDU param value is set to be 65535, that means the AMPDU module is closed, and if it set to be [0,3], that will enable the AMPDU module and set the AMPDU param value. ")
hwRadioCalibrateEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioCalibrateEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateEnable.setDescription('Description.')
hwRadioInterfDetDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 22), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioInterfDetDevice.setStatus('current')
if mibBuilder.loadTexts: hwRadioInterfDetDevice.setDescription('Description.')
hwRadioApComInterfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 23), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioApComInterfThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioApComInterfThreshold.setDescription('Description.')
hwRadioApAdjInterfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 24), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioApAdjInterfThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioApAdjInterfThreshold.setDescription('Description.')
hwRadioStaInterfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 25), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioStaInterfThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaInterfThreshold.setDescription('Description.')
hwRadioDeviceReportDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600)).clone(300)).setUnits('second').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioDeviceReportDuration.setStatus('current')
if mibBuilder.loadTexts: hwRadioDeviceReportDuration.setDescription('The reporting duration of the radio device.')
hwRadioRTSMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("ctsToSelf", 2), ("rtsCts", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioRTSMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioRTSMode.setDescription('Description.')
hwRadioWifiLight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("signalStrength", 1), ("traffic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioWifiLight.setStatus('current')
if mibBuilder.loadTexts: hwRadioWifiLight.setDescription('Description.')
hwRadioBeamformingSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioBeamformingSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioBeamformingSwitch.setDescription('Description.')
hwRadioWidsDevSynchronizationInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioWidsDevSynchronizationInt.setStatus('current')
if mibBuilder.loadTexts: hwRadioWidsDevSynchronizationInt.setDescription('Description.')
hwRadioChannelSwitchAnnouncement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioChannelSwitchAnnouncement.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelSwitchAnnouncement.setDescription('Description.')
hwRadioChannelSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("continueTransmitting", 1), ("stopTransmitting", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioChannelSwitchMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelSwitchMode.setDescription('Description.')
hwRadioStaAccessSignalStrengthSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioStaAccessSignalStrengthSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaAccessSignalStrengthSwitch.setDescription('Description.')
hwRadioStaAccessSignalStrengthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 34), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioStaAccessSignalStrengthThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaAccessSignalStrengthThreshold.setDescription('Description.')
hwRadioBackgroundListenNeighborSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioBackgroundListenNeighborSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioBackgroundListenNeighborSwitch.setDescription('Description.')
hwRadioBackgroundScanningServiceThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBackgroundScanningServiceThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioBackgroundScanningServiceThreshold.setDescription('Description.')
hwRadioBackgroundScanningClientThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBackgroundScanningClientThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioBackgroundScanningClientThreshold.setDescription('Description.')
hwRadioStaAccessRateLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioStaAccessRateLimitSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaAccessRateLimitSwitch.setDescription('Description.')
hwRadioStaAccessRateLimitThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", -1), ("rate1", 1), ("rate2", 2), ("rate55", 3), ("rate6", 4), ("rate9", 5), ("rate11", 6), ("rate12", 7), ("rate18", 8), ("rate22", 9), ("rate24", 10), ("rate33", 11), ("rate36", 12), ("rate48", 13), ("rate54", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioStaAccessRateLimitThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaAccessRateLimitThreshold.setDescription('Description.')
hwRadioSpectrumAnalysisScanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioSpectrumAnalysisScanPeriod.setStatus('current')
if mibBuilder.loadTexts: hwRadioSpectrumAnalysisScanPeriod.setDescription('Description.')
hwRadioSpectrumAnalysisScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioSpectrumAnalysisScanInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadioSpectrumAnalysisScanInterval.setDescription('Description.')
hwRadioHighDenseSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioHighDenseSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioHighDenseSwitch.setDescription('0:disable 1:enable')
hwRadioHighDenseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioHighDenseMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioHighDenseMode.setDescription('0:low mode 1:middle mode 2:high mode')
hwRadioStaOfflineSignalStrengthSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioStaOfflineSignalStrengthSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaOfflineSignalStrengthSwitch.setDescription('0:disable 1:enable')
hwRadioStaOfflineSignalStrengthThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -20)).clone(-70)).setUnits('dbm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioStaOfflineSignalStrengthThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaOfflineSignalStrengthThreshold.setDescription('Description.')
hwRadioStaOfflineRateLimitSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioStaOfflineRateLimitSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaOfflineRateLimitSwitch.setDescription('0:disable 1:enable')
hwRadioStaOfflineRateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(20)).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioStaOfflineRateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaOfflineRateThreshold.setDescription('Description.')
hwRadioDynamicAdjustPowerSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioDynamicAdjustPowerSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioDynamicAdjustPowerSwitch.setDescription('0:disable 1:enable')
hwRadioLocationReportTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationReportTime.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationReportTime.setDescription(' ')
hwRadioLocationScanInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationScanInterval.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationScanInterval.setDescription(' ')
hwRadioLocationScanPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationScanPeriod.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationScanPeriod.setDescription(' ')
hwRadioAirTimeScheduleSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioAirTimeScheduleSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioAirTimeScheduleSwitch.setDescription('0:disable 1:enable')
hwRadioCalibrateScanCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 53), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateScanCycle.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateScanCycle.setDescription('Description.')
hwRadioUacPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("users", 1), ("channelUtilization", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUacPolicyType.setStatus('current')
if mibBuilder.loadTexts: hwRadioUacPolicyType.setDescription('Description.')
hwRadioUacPolicySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUacPolicySwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioUacPolicySwitch.setDescription('Description.')
hwRadioUacAccessThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 56), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUacAccessThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioUacAccessThreshold.setDescription('when uac policy type is users, the value range from 0 to 128, when uac policy type is channel utilization, the value range from 0 to 100.')
hwRadioUacRoamThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 57), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUacRoamThreshold.setStatus('current')
if mibBuilder.loadTexts: hwRadioUacRoamThreshold.setDescription('when uac policy type is users, the value range from 0 to 128, when uac policy type is channel utilization, the value range from 0 to 100. the value of Roam threshold is bigger than access threshold.')
hwRadioUacHideSSIDSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUacHideSSIDSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioUacHideSSIDSwitch.setDescription('Description.')
hwRadio80211acGuardIntervalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("normal", 1), ("short", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadio80211acGuardIntervalMode.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211acGuardIntervalMode.setDescription("The mode uses to set the guard interval which is the necessary interval to receive and dispatch wireless signal to make the communication well. Normal means it sets the normal guard interval, short means it sets the short guard interval. The default guard interval mode is normal mode. The normal guard interval is 800 ns, and the short guard interval is 400 ns. If AP is not 11ac or mixed with 11ac, you can't config the hwRadio80211acGuardIntervalMode value. When the AP changed to be other kinds, the value of hwRadio80211acGuardIntervalMode will change to be default value. ")
hwRadio80211acAMPDUMaxLengthExponent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 7), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadio80211acAMPDUMaxLengthExponent.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211acAMPDUMaxLengthExponent.setDescription("The limit length of an AMPDU frame. AMPDU is the abbreviation of aggregate MAC protocol data unit. In order to reduce the spending of transmission, 80211ac brings forward the frames aggregate technology that it aggregates several network frames to a singlehanded 80211 frame and transmit it. There are two ways of frames aggregate, one is the AMSDU and the other is AMPDU. AMPDU means it converts every network frame to 80211 frame, then aggregates serveral 80211 frames which go to the same destination to a singlehanded frame and transmit it. The units of the AMPDU frame is Byte, the range of the AMPDU frame is from 1024 Bytes to 65535 Bytes, and the default AMPDU frame is 1024 Bytes. If AP is not 11ac or mixed with 11ac, you can't config the AMPDU param value. When the AP changed to be other kinds, the value of AMPDU param will change to be default value. If the AMPDU param value is set to be 65535, that means the AMPDU module is closed, and if it set to be [0,7], that will enable the AMPDU module and set the AMPDU param value. ")
hwRadio80211bgBasicRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211bgBasicRateSet.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211bgBasicRateSet.setDescription('Description.')
hwRadio80211bgSupportRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 62), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211bgSupportRateSet.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211bgSupportRateSet.setDescription('Description.')
hwRadio80211aBasicRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 63), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211aBasicRateSet.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211aBasicRateSet.setDescription('Description.')
hwRadio80211aSupportRateSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 64), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211aSupportRateSet.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211aSupportRateSet.setDescription('Description.')
hwRadio80211nSupportMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 65), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211nSupportMCS.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211nSupportMCS.setDescription('Description.')
hwRadio80211acSupportMcsMapMcs = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 67), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211acSupportMcsMapMcs.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211acSupportMcsMapMcs.setDescription('Description.')
hwRadioMulticastRate2G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(5, 5), ValueRangeConstraint(6, 6), ValueRangeConstraint(9, 9), ValueRangeConstraint(11, 11), ValueRangeConstraint(12, 12), ValueRangeConstraint(18, 18), ValueRangeConstraint(24, 24), ValueRangeConstraint(36, 36), ValueRangeConstraint(48, 48), ValueRangeConstraint(54, 54), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMulticastRate2G.setStatus('current')
if mibBuilder.loadTexts: hwRadioMulticastRate2G.setDescription('Description.')
hwRadioMulticastRate5G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(6, 6), ValueRangeConstraint(9, 9), ValueRangeConstraint(12, 12), ValueRangeConstraint(18, 18), ValueRangeConstraint(24, 24), ValueRangeConstraint(36, 36), ValueRangeConstraint(48, 48), ValueRangeConstraint(54, 54), )).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMulticastRate5G.setStatus('current')
if mibBuilder.loadTexts: hwRadioMulticastRate5G.setDescription('Description.')
hwRadioLegacyStationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioLegacyStationEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioLegacyStationEnable.setDescription('Allow legacy station access. ')
hwRadioLocationScanChannel2G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("countrychannel", 1), ("dcachannel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationScanChannel2G.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationScanChannel2G.setDescription('Description.')
hwRadioLocationScanChannel5G = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("countrychannel", 1), ("dcachannel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationScanChannel5G.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationScanChannel5G.setDescription('Description.')
hwRadioAMSDUTxEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioAMSDUTxEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioAMSDUTxEnable.setDescription('Send with A-MSDU.')
hwRadioAMSDUTxMaxSubFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 1, 1, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 15)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioAMSDUTxMaxSubFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioAMSDUTxMaxSubFrames.setDescription('The maximum number of sub MSDUs in a A-MSDU.')
hwRadioManageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2), )
if mibBuilder.loadTexts: hwRadioManageTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioManageTable.setDescription('Huawei radio manage table, it is aggregate of a group of management of radio, such as modification and display. The content of the table contains: radio ID, radio manage base BSSID, radio manage radio profile name, radio manage state, radio manage channel, radio manage power level, radio manage power, set radio available antenna number, set radio working channel, set radio working power level. The index of the radio management table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioManageEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioManageEntry.setDescription('Huawei radio management table entry. The entry of the huawei radio management table, all the nodes of the huawei radio management table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio management table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwRadioID.setStatus('current')
if mibBuilder.loadTexts: hwRadioID.setDescription('A exclusive identifier of a radio. The range of the radio id is from 0 to 3, and the default radio id is 0. Notes the setting of radio id must insure the radio of a AP exist. ')
hwRadioMngBaseBssID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioMngBaseBssID.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngBaseBssID.setDescription('You can get an effective baseBssID ,only when wlan 1 is created. Or you will get a noneffective value. BSSID identifies a minimum service set,When administrator binds a ESS to a radio, it use base BSSID and WlanID to generate a BSSID. The format of the bssid is a max address which contains 3 sets of 2 Btyes hexadecimal character join up with - character, such as 00e0-5678-12fa. ')
hwRadioMngRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngRadioProfileName.setDescription("The radio profile which is binded to this radio. The request of the radio parofile name string in detail as follows: - The length of the radio profile name at least contain 1 Byte ASCII characters,at most contain 31 Byte ASCII characters. - Any ASCII characters value must be included from 0x20 to 0x7E. - The question mark ASCII characters can't be included . - The double quotation marks ASCII characters can't appear at the beginning and the end. - The blank ASCII characters can't follow the double quotation marks ASCII characters. - The blank ASCII characters can't appear at the beginning and the end. Notes the radio profile name can't be binded until the corresponding radio profile is exist. ")
hwRadioMngState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngState.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngState.setDescription("A switch flag, which set the radio status as enable or disable, tells whether the wireless signal transmission is supported by the radio. Enable means the radio supports transmission, disable means the radio doesn't support transmission. The default setting of the wireless signal transmission is enable. ")
hwRadioMngChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngChannel.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngChannel.setDescription('An object uses to set the channel of a radio. The value of the channel is decided by the channel mode.Such as ,the enum value of channel is 1, 6, 11 on the condition of the 80211 b/g channel mode, the enum value of channel is 36, 40, 44, 48, 52, 56, 60, 64, 149, 153,157, 161 on the condition80 of 80211a channel mode. ')
hwRadioMngPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngPowerLevel.setDescription('An object uses to set the power level of a radio. The range of the power level of a radio is from 0 to 3. the power of power level 0 is the maximum power, the power of power level 1 is a half of the maximum power, the power of power level 2 is a quarter of the maximum power, the power of power level 3 is one of eight equal parts of the maximum power. ')
hwRadioMngPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngPower.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngPower.setDescription('An object uses to display the power (in 0.01dbm) which is currently used by this radio. ')
hwRadioAvailableSntennaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("num0", 2), ("num1", 3), ("num2", 4), ("num3", 5), ("num4", 6), ("num5", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRadioAvailableSntennaNumber.setStatus('current')
if mibBuilder.loadTexts: hwRadioAvailableSntennaNumber.setDescription("An object set the available antenna number,which can close some antennas to save electric power. All means it uses all the available antenna, Num1 means it uses one of the available antennas, Num2 means it uses two of the available antennas, Num3 means it uses three of the available antennas, Num4 means it uses four of the available antennas, Num5 means it uses five of the available antennas. Notes the configured available antenna number can't be larger than the real available antenna number. ")
hwRadioWorkingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioWorkingChannel.setStatus('current')
if mibBuilder.loadTexts: hwRadioWorkingChannel.setDescription("An object uses to display the working channel which is currently used by this radio. Notes the radio working channel just can be display,but can't be configured. ")
hwRadioWorkingPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioWorkingPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwRadioWorkingPowerLevel.setDescription("An object uses to display the working power level which is currently used by this radio. Notes the radio working power level just can be display,but can't be configured. ")
hwRadioWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioWorkingPower.setStatus('current')
if mibBuilder.loadTexts: hwRadioWorkingPower.setDescription('An object is used to describing the working porwer (in 0.01dbm) that the radio is working on actually. You just can read it when the radio is working.')
hwRadioMngChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ht20", 1), ("ht40Plus", 2), ("ht40Minus", 3), ("ht80", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngChannelBandwidth.setDescription('An object is used to describing the bandwidth that the AP support .You can config the AP bandwidth by the hwRadioMngChannelBandwidth, but the AP may be not working on value of the your config bandwidth. you can get the actual bandwidth by hwRadioWorkingChannelBandwidth. At present, 802.11n AP supports three kinds of bandwidth listed in the enum, and 802.11a/b/g AP just only supports HT20(1). ')
hwRadioWorkingChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", -1), ("ht20", 1), ("ht40Plus", 2), ("ht40Minus", 3), ("ht80", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioWorkingChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioWorkingChannelBandwidth.setDescription('An object is used to describing the bandwidth that the AP working on actually. the value may be unknown(-1) HT20(1) HT40-plus(2) or HT40-minus(3) .')
hwRadio80211nMCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211nMCSValue.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211nMCSValue.setDescription(" An object is used to describing the 802.11n AP's MCS Value. The MCS means modulation and coding scheme. Tha value of MCS will changed for value of spatial streams has been changed. when spatial streams's value is 1, MCS's value may be 0 to 7, default value is 7; when spatial streams's value is 2, MCS's value may be 0 to 15, default value is 15. If it is a not 802.11n AP, don't config it's MCS value. ")
hwRadioWidsWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioWidsWorkMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioWidsWorkMode.setDescription('Description.')
hwRadioMngBinded = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMngBinded.setStatus('current')
if mibBuilder.loadTexts: hwRadioMngBinded.setDescription('Object selects a mechanism for bind/unbind the radio-profile')
hwRadioDeviceDetectEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioDeviceDetectEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioDeviceDetectEnable.setDescription('Description.')
hwRadioMaxTxPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioMaxTxPwrLvl.setStatus('current')
if mibBuilder.loadTexts: hwRadioMaxTxPwrLvl.setDescription('Description.')
hwRadioPwrAttRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPwrAttRange.setStatus('current')
if mibBuilder.loadTexts: hwRadioPwrAttRange.setDescription('Description.')
hwRadioPwrAttValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPwrAttValue.setStatus('current')
if mibBuilder.loadTexts: hwRadioPwrAttValue.setDescription('Description.')
hwRadioAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioAntennaGain.setStatus('current')
if mibBuilder.loadTexts: hwRadioAntennaGain.setDescription('Description.')
hwRadioBridgeWhitelistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBridgeWhitelistEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioBridgeWhitelistEnable.setDescription('Description.')
hwRadioBridgeWhitelistName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBridgeWhitelistName.setStatus('current')
if mibBuilder.loadTexts: hwRadioBridgeWhitelistName.setDescription('Description.')
hwRadioBridgeStpSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBridgeStpSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioBridgeStpSwitch.setDescription('Description.')
hwRadioBridgeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBridgeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioBridgeSwitch.setDescription('Description.')
hwRadioBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("middle", 1), ("root", 2), ("leaf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioBridgeMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioBridgeMode.setDescription('Description.')
hwRadioUndoBridgeWhitelist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUndoBridgeWhitelist.setStatus('current')
if mibBuilder.loadTexts: hwRadioUndoBridgeWhitelist.setDescription('Description.')
hwRadioUserTrafficScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUserTrafficScheduler.setStatus('obsolete')
if mibBuilder.loadTexts: hwRadioUserTrafficScheduler.setDescription('Description.')
hwRadioCountermeasuresMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCountermeasuresMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioCountermeasuresMode.setDescription('Description.')
hwRadioFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frequency2G", 1), ("frequency5G", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioFrequency.setStatus('current')
if mibBuilder.loadTexts: hwRadioFrequency.setDescription('Description.')
hwRadioCountermeasuresSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCountermeasuresSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioCountermeasuresSwitch.setDescription('Description.')
hwRadioSpectrumAnalysisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioSpectrumAnalysisEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioSpectrumAnalysisEnable.setDescription('Description.')
hwRadioWidsAttackDetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioWidsAttackDetEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioWidsAttackDetEnable.setDescription('Description.')
hwRadioMeshWhitelistName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMeshWhitelistName.setStatus('current')
if mibBuilder.loadTexts: hwRadioMeshWhitelistName.setDescription('Description.')
hwRadioUndoMeshWhitelist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioUndoMeshWhitelist.setStatus('current')
if mibBuilder.loadTexts: hwRadioUndoMeshWhitelist.setDescription('Description.')
hwRadioMeshRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("meshNode", 1), ("meshPortal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioMeshRole.setStatus('current')
if mibBuilder.loadTexts: hwRadioMeshRole.setDescription('Description.')
hwRadioLocationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationEnable.setDescription('0: disable 1: enable.')
hwRadioLocationScanChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioLocationScanChannelEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioLocationScanChannelEnable.setDescription('0: disable 1: enable.')
hwRadio80211nMulticastMCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio80211nMulticastMCSValue.setStatus('current')
if mibBuilder.loadTexts: hwRadio80211nMulticastMCSValue.setDescription('Description.')
hwRadioSpectrogramServerReportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioSpectrogramServerReportEnable.setStatus('current')
if mibBuilder.loadTexts: hwRadioSpectrogramServerReportEnable.setDescription('0: disable 1: enable')
hwRadioRadioMulticastRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", -1), ("rate1", 1), ("rate2", 2), ("rate55", 3), ("rate6", 4), ("rate9", 5), ("rate11", 6), ("rate12", 7), ("rate18", 8), ("rate24", 10), ("rate36", 12), ("rate48", 13), ("rate54", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioRadioMulticastRateValue.setStatus('current')
if mibBuilder.loadTexts: hwRadioRadioMulticastRateValue.setDescription('Description.')
hwRadio11acSpatialStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio11acSpatialStream.setStatus('current')
if mibBuilder.loadTexts: hwRadio11acSpatialStream.setDescription('Description.')
hwRadio11acMCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadio11acMCSValue.setStatus('current')
if mibBuilder.loadTexts: hwRadio11acMCSValue.setDescription('Description.')
hwRadioActiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dormancy", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioActiveSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioActiveSwitch.setDescription('Mesh handover feature: Fat AP receive dormancy or active signal through snmp. When the signal is active, radio of fat ap is enable and send RARP packet; When the signal is dormancy, radio of fat ap is disable.')
hwRadioCalibrateStatisicsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 3), )
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsTable.setDescription('Huawei radio manage table, it is aggregate of a group of operation to the containing attributes of radio calibrate counters. Such as display and cleanup. The content of the containing attributes of radio calibrate contains: radio calibrate statistic signal bad count, radio calibrate statistic calibrate power count, radio calibrate statistic calibrate channel count,radio calibrate statistic operate mode. The index of the radio calibrate statisics table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioCalibrateStatisicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 3, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsEntry.setDescription('Huawei radio calibrate statisics entry. The entry of the huawei radio calibrate statisics table, all the nodes of the huawei radio calibrate statisics table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio calibrate statisics table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioCalStatisSignalBadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioCalStatisSignalBadCount.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalStatisSignalBadCount.setDescription('An object uses to display the radio calibrate statistic signal bad count. This count shall increment when a rado calibration is caused by bad signal qaulity, such as, once the rate of lost packet or conflicted packet preponderates over its threshold. ')
hwRadioCalStatisCalibratePowerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioCalStatisCalibratePowerCount.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalStatisCalibratePowerCount.setDescription('An object uses to display the radio calibrate statistic calibrate power count. This count shall increment when rado calibrates the power level of this radio. ')
hwRadioCalStatisCalibrateChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioCalStatisCalibrateChannelCount.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalStatisCalibrateChannelCount.setDescription('An object uses to display the radio calibrate statistic calibrate channel count. This count shall increment when rado calibrates the channel of this radio. ')
hwRadioCalibrateStatisicsOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1))).clone(namedValues=NamedValues(("invalid", -1), ("clearstatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsOperMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsOperMode.setDescription('An object uses to set the radio calibrate statisics operation mode. Invalid means the operation is invalid, clear-statistic means it clear the radio calibrate statisics. Notes it just support clear calibrate statisics, Any other operation about this node is invalid. ')
hwRadioAuthNeighborInfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4), )
if mibBuilder.loadTexts: hwRadioAuthNeighborInfTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioAuthNeighborInfTable.setDescription('Huawei radio authentic neighbor information table, it is aggregate of a group of display to the authentic neighbor AP infomation of radio. The authentic neighbor AP infomation of radio to display of the table contains: authentic neighbor AP ID list, authentic neighbor AP channel list, authentic neighbor AP front attenuation list, authentic neighbor AP back attenuation list. The index of the radio authentic neighbor onformation table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioAuthNeighborInfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioAuthNeighborInfEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioAuthNeighborInfEntry.setDescription('Huawei radio authentic neighbor information table entry. The entry of the huawei radio authentic neighbor information table, all the nodes of the huawei radio neighbor information table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio authentic neighbor onformation table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwAuthenticRadioNeighborAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenticRadioNeighborAPID.setStatus('current')
if mibBuilder.loadTexts: hwAuthenticRadioNeighborAPID.setDescription('An object uses to display the AP ID list of the authentic neighbor ap of the radio. Any of two authentic neighbor AP ID of the list should separate with question mark. ')
hwAuthenticRadioNeighborChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenticRadioNeighborChannel.setStatus('current')
if mibBuilder.loadTexts: hwAuthenticRadioNeighborChannel.setDescription('An object uses to display the signal channel list of the authentic neighbor ap of the radio. Any of two authentic neighbor AP signal channel of the list should separate with question mark. ')
hwAuthenticRadioNeighborFrontAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenticRadioNeighborFrontAttenu.setStatus('current')
if mibBuilder.loadTexts: hwAuthenticRadioNeighborFrontAttenu.setDescription('An object uses to display the front attenuation list of the authentic neighbor ap of the radio. Any of two authentic neighbor front attenuation of the list should separate with question mark. The front attenuation indicates the attenuation of signal which is send from the radio of the operating AP to the neighbor radio. ')
hwAuthenticRadioNeighborBackAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenticRadioNeighborBackAttenu.setStatus('current')
if mibBuilder.loadTexts: hwAuthenticRadioNeighborBackAttenu.setDescription('An object uses to display the back attenuation list of the authentic neighbor ap of the radio. Any of two authentic neighbor back attenuation of the list should separate with question mark. The back attenuation indicates the attenuation of signal which is send from the neighbor radio to the radio of the operating AP . ')
hwAuthenticRadioNeighborSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthenticRadioNeighborSSID.setStatus('current')
if mibBuilder.loadTexts: hwAuthenticRadioNeighborSSID.setDescription('Description.')
hwRadioLoadBalanceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5), )
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupTable.setDescription('Huawei radio load balance group table, it is aggregate of a group of operation to load balance group and its parameter. it can balance the connected use number or traffic in several radios. The content of the table contains: load balance group name, load balance group mode, load balance group gap threshold, load balance group associate threshold, load balance group status, load balance group row status. The index of the load balance group table is hwLBGroupName, a load balance group name is an unique identifier to a oad balance group. The detail description about the index can refer to the node hwLBGroupName description. ')
hwRadioLoadBalanceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwLBGroupName"))
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupEntry.setDescription('Huawei radio load balance group table entry. The entry of the huawei radio load balance group table, all the nodes of the huawei radio load balance group table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the load balance group table is hwLBGroupName, a load balance group name is an unique identifier to a oad balance group. The detail description about the index can refer to the node hwLBGroupName description. ')
hwLBGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1, 1), OctetString())
if mibBuilder.loadTexts: hwLBGroupName.setStatus('current')
if mibBuilder.loadTexts: hwLBGroupName.setDescription("A human readable string representing the name of the radio load balance group. The request of the radio radio load balance group name string in detail as follows: - The length of the radio profile name at least contain 1 Byte ASCII characters,at most contain 31 Byte ASCII characters. - Any ASCII characters value must be included from 0x20 to 0x7E. - The question mark ASCII characters can't be included . - The double quotation marks ASCII characters can't appear at the beginning and the end. - The blank ASCII characters can't follow the double quotation marks ASCII characters. - The blank ASCII characters can't appear at the beginning and the end. ")
hwLBGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("session", 1), ("traffic", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLBGroupMode.setStatus('current')
if mibBuilder.loadTexts: hwLBGroupMode.setDescription('An object to set the load balance mode of radio load balance group. Session means it adjust the radio load balance on the basis of the user numbers, traffic means it adjust the radio load balance on the basis of the traffic. ')
hwLBGapThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLBGapThreshold.setStatus('current')
if mibBuilder.loadTexts: hwLBGapThreshold.setDescription('When connected use number or traffic gap overreach the threshold, the balance will be effected. The units of the load balance group threshold is %, the range is from 1 to 100, and the default value is 4%. ')
hwLBAssociateThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLBAssociateThreshold.setStatus('current')
if mibBuilder.loadTexts: hwLBAssociateThreshold.setDescription("When the connection request number of terminal user send to AP reachs the associate threshold in one minute, and connected user number is not reach the max connect number in a radio , it must agree the user's connect request. The units of the load balance associae threshold is time, the range is from 1 to 30, and the default value is 6 times. ")
hwLBGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unbalanced", 1), ("balanced", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLBGroupStatus.setStatus('current')
if mibBuilder.loadTexts: hwLBGroupStatus.setDescription("An object uses to display the load balance group status, It indicates whether the load gap is above the load balance gap threshold. unbalanced means the load balance gap of two radios preponderate over the maximum of the load balance gap. balanced means the load balance gap of two radios don't preponderate over the maximum of the load balance gap. Notes the load balance group status just can be display,but can't be modified. ")
hwLBGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLBGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLBGroupRowStatus.setDescription('Huawei radio load balance group rowstatus is used to create or delete a radio load balance group. ')
hwRadioLoadBalanceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6), )
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupMemberTable.setDescription('Huawei Radio Load Banlance Group Member Table, it describes members which is added to the Radio Load Banlance Group. The content of the table contains: load balance member radio channel, load balance member radio power level, load balance member radio power, load balance member radio session number, load balance member radio traffic, load balance member radio row status. The index of the radio profile table is hwLBGroupName, hwApIndex and hwRadioID, a Load Banlance Group name is an unique identifier to a Load Banlance Group, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwLBGroupName, hwApIndex and hwRadioID description. ')
hwRadioLoadBalanceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwLBGroupName"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupMemberEntry.setDescription('Huawei Radio Load Banlance Group Member table entry. The entry of the huawei radio Load Banlance Group Member table, all the nodes of the huawei radio Load Banlance Group Member table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio profile table is hwLBGroupName, hwApIndex and hwRadioID, a Load Banlance Group name is an unique identifier to a Load Banlance Group, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwLBGroupName, hwApIndex and hwRadioID description. ')
hwLBMemberRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLBMemberRadioChannel.setStatus('current')
if mibBuilder.loadTexts: hwLBMemberRadioChannel.setDescription("An object uses to display the working channel which is currently used by the load balance member radio. Notes the radio working channel of the load balance member radio just can be display,but can't be configured. ")
hwLBMemberRadioPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLBMemberRadioPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwLBMemberRadioPowerLevel.setDescription("An object uses to display the working power level which is currently used by this radio. Notes the radio working power level just can be display,but can't be configured. ")
hwLBMemberRadioPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLBMemberRadioPower.setStatus('current')
if mibBuilder.loadTexts: hwLBMemberRadioPower.setDescription("An object uses to display the power which is currently used by this radio. Notes the radio power just can be display,but can't be configured. ")
hwLBMemberRadioSeesionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLBMemberRadioSeesionNum.setStatus('current')
if mibBuilder.loadTexts: hwLBMemberRadioSeesionNum.setDescription("An object uses to display the connected user number which is currently used by this radio. Notes the radio connected user number just can be display,but can't be configured. ")
hwLBMemberRadioTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwLBMemberRadioTraffic.setStatus('current')
if mibBuilder.loadTexts: hwLBMemberRadioTraffic.setDescription("An object uses to display the traffic which is currently used by this radio. Notes the radio traffic just can be display,but can't be configured. ")
hwLBMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwLBMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwLBMemberRowStatus.setDescription('Huawei Radio Load Banlance Group Member rowstatus is used to create or delete a Radio Load Banlance Group Member. ')
hwRadioUncontrolAPInfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7), )
if mibBuilder.loadTexts: hwRadioUncontrolAPInfTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioUncontrolAPInfTable.setDescription('Huawei radio uncontrol ap information table,it describes the information about ap which is not authorized by AC. it is aggregate of a group of display to the uncontrol AP infomation of radio. The uncontrol AP infomation of radio to display of the table contains: uncontrol AP index, uncontrol ap bssid, the AP index of the uncontrol AP neighbor, Uncontrol AP channel, Uncontrol AP RSSI. The index of the radio uncontrol ap information table is hwUncontrolAPIndex, an uncontrol Ap index is an unique identifier to a uncontrol AP. The detail description about the index can refer to the node hwUncontrolAPIndex description. ')
hwRadioUncontrolAPInfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwUncontrolAPIndex"))
if mibBuilder.loadTexts: hwRadioUncontrolAPInfEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioUncontrolAPInfEntry.setDescription('Huawei radio uncontrol ap information table entry. The entry of the huawei radio uncontrol ap information table, all the nodes of the huawei radio uncontrol ap information table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio uncontrol ap information table is hwUncontrolAPIndex, an uncontrol Ap index is an unique identifier to a uncontrol AP. The detail description about the index can refer to the node hwUncontrolAPIndex description. ')
hwUncontrolAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: hwUncontrolAPIndex.setStatus('current')
if mibBuilder.loadTexts: hwUncontrolAPIndex.setDescription("An object uses to display the index of the uncontrol ap. Notes the index of the uncontrol ap just can be display, but can't be configured. ")
hwUncontrolAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUncontrolAPBSSID.setStatus('current')
if mibBuilder.loadTexts: hwUncontrolAPBSSID.setDescription("An object uses to display the BSSID of uncontrol ap. BSSID identifies a minimum service set,When administrator binds a ESS to a radio, it use base BSSID and WlanID to generate a BSSID. The format of the bssid is a max address which contains 3 sets of 2 Btyes hexadecimal character join up with - character, such as 00e0-5678-12fa. Notes the BSSID of uncontrol ap just can be display, but can't be configured. ")
hwAuthAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAuthAPIndex.setStatus('current')
if mibBuilder.loadTexts: hwAuthAPIndex.setDescription("An object uses to display the index of the latest authentic ap. Notes the index of the latest authentic ap just can be display, but can't be configured. ")
hwUncontrolAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUncontrolAPChannel.setStatus('current')
if mibBuilder.loadTexts: hwUncontrolAPChannel.setDescription("An object uses to display the working channel which is currently used by the uncontrol ap. Notes the radio working channel of the uncontrol ap just can be display, but can't be configured. ")
hwUncontrolAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUncontrolAPRSSI.setStatus('current')
if mibBuilder.loadTexts: hwUncontrolAPRSSI.setDescription("An object uses to display the the RSSI from uncontrol ap to this radio. RSSI means the signal intensity of the rceived signal. Notes the RSSI from uncontrol ap to the radio just can be display,but can't be configured. ")
hwUncontrolAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 7, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUncontrolAPSSID.setStatus('current')
if mibBuilder.loadTexts: hwUncontrolAPSSID.setDescription('Description.')
hwRadioPerformanceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8), )
if mibBuilder.loadTexts: hwRadioPerformanceStatTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioPerformanceStatTable.setDescription('Huawei radio performance statistic table, it is aggregate of a group of operation to the performance statistic of radio calibrate counters. Such as display and cleanup. The content of the table contains: radio received frames, radio received bytes, radio sent frames, radio sent bytes, radio sent success RTS frames, radio sent unicast frames, radio sent broadcast frames, radio sent failed frames, radio received error frames, radio received physics layer error frames, radio received CRC error frames, radio received MIC error frames, radio received key decrypt error frames, radio retry frames, radio error rate, radio channel utilization rate, radio performance Statics operate mode, radio error rate of last periods, radio received signal strength, radio down mac error frames, radio received power. The index of the radio performance statistic table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioPerformanceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioPerformanceStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioPerformanceStatEntry.setDescription('Huawei radio performance statistic table entry. The entry of the huawei radio performance statistic table, all the nodes of the huawei radio performance statistic table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio performance statistic table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvFrames.setDescription("An object uses to display the counter of wireless received frames. Notes the counter of wireless received frames just can be display, but can't be configured. ")
hwRadioRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvBytes.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvBytes.setDescription("An object uses to display the counter of wireless received bytes. Notes the counter of wireless received bytes just can be display, but can't be configured. ")
hwRadioSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendFrames.setDescription("An object uses to display the counter of wireless transmitted frames. Notes the counter of wireless transmitted frames just can be display, but can't be configured. ")
hwRadioSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendBytes.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendBytes.setDescription("An object uses to display the counter of wireless transmitted bytes. Notes the counter of wireless transmitted bytes just can be display, but can't be configured. ")
hwRadioSendRtsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendRtsSuccess.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendRtsSuccess.setDescription("An object uses to display the counter of wireless transmitted RTS successes. Notes the counter of wireless transmitted RTS successes just can be display, but can't be configured. ")
hwRadioSendUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendUnicast.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendUnicast.setDescription("An object uses to display the counter of wireless transmitted unicast frames. Notes the counter of wireless transmitted unicast frames just can be display, but can't be configured. ")
hwRadioSendBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendBroadcast.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendBroadcast.setDescription("An object uses to display the counter of wireless transmitted broadcast frames. Notes the counter of wireless transmitted broadcast frames just can be display, but can't be configured. ")
hwRadioSendFailFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendFailFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendFailFrames.setDescription("An object uses to display the counter of wireless transmitted failure frames. Notes the counter of wireless transmitted failure frames just can be display, but can't be configured. ")
hwRadioRcvErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvErrFrames.setDescription("An object uses to display the counter of wireless received error frames. Notes the counter of wireless received error frames just can be display, but can't be configured. ")
hwRadioRcvPhyErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvPhyErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvPhyErrFrames.setDescription("An object uses to display the counter of wireless received physical layer frames. Notes the counter of wireless received physical layer frames just can be display, but can't be configured. ")
hwRadioRcvCrcErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvCrcErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvCrcErrFrames.setDescription("An object uses to display the counter of received CRC error frames. CRC means the circulative redundancy code, CRC error frame is one of the FCS error frames. Notes the counter of received CRC error frames just can be display, but can't be configured. ")
hwRadioRcvMicErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvMicErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvMicErrFrames.setDescription("An object uses to display the counter of wireless received MIC error frames. Notes the counter of wireless received MIC error frames just can be display, but can't be configured. ")
hwRadioRcvKeyDecryptErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvKeyDecryptErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvKeyDecryptErrFrames.setDescription("An object uses to display the counter of wireless received private key and decrypt fail frames. Notes the counter of wireless received private key and decrypt fail frames just can be display, but can't be configured. ")
hwRadioRetryFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRetryFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRetryFrames.setDescription("An object uses to display the counter of wireless retry frames. Notes the counter of wireless retry frames just can be display, but can't be configured. ")
hwRadioPER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPER.setStatus('current')
if mibBuilder.loadTexts: hwRadioPER.setDescription("An object uses to display the wireless PER(packet error rate. Notes the wireless PER(packet error rate just can be display, but can't be configured. ")
hwRadioChUtilizationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioChUtilizationRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioChUtilizationRate.setDescription("An object uses to display the wireless channel utilization of the radio. Notes the wireless channel utilization of the radio just can be display, but can't be configured. ")
hwRadioPerformanceStatOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1))).clone(namedValues=NamedValues(("invalid", -1), ("clearstatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioPerformanceStatOperMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioPerformanceStatOperMode.setDescription('An object uses to set the radio performance statisics operation mode. Invalid means the operation is invalid, clear-statistic means it clear the radio performance statisics. Notes it just support clear performance statisics, Any other operation about this node is invalid. ')
hwRadioPEROfLastPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPEROfLastPeriod.setStatus('current')
if mibBuilder.loadTexts: hwRadioPEROfLastPeriod.setDescription("An object uses to display the wireless error rate of the last statistic period. Notes the wireless error rate of the last statistic period just can be display, but can't be configured. ")
hwRadioRcvSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvSignalStrength.setDescription("An object uses to display the wireless received signal strength. Notes the wireless received signal strength just can be display, but can't be configured. ")
hwRadioDownMacErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDownMacErrFrames.setStatus('obsolete')
if mibBuilder.loadTexts: hwRadioDownMacErrFrames.setDescription("An object uses to display the counter of wireless down-stream MAC error frames. Notes the counter of wireless down-stream MAC error frames just can be display, but can't be configured. ")
hwRadioRcvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvPower.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvPower.setDescription("An object uses to display the receive power of the radio. Notes the receive power of the radio just can be display, but can't be configured. ")
hwRadioRcvUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvUnicastFrames.setDescription('Description.')
hwRadioRcvMngFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvMngFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvMngFrames.setDescription('Description.')
hwRadioRcvCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvCtrlFrames.setDescription('Description.')
hwRadioRcvDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvDataFrames.setDescription('Description.')
hwRadioSendMngFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendMngFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendMngFrames.setDescription('Description.')
hwRadioSendCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendCtrlFrames.setDescription('Description.')
hwRadioSendDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendDataFrames.setDescription('Description.')
hwRadioStaMaxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioStaMaxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaMaxSignalStrength.setDescription('Description.')
hwRadioStaMinSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioStaMinSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaMinSignalStrength.setDescription('Description.')
hwRadioStaAvgSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioStaAvgSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaAvgSignalStrength.setDescription('Description.')
hwRadioSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendRate.setDescription('Description.')
hwRadioRecvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRecvRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioRecvRate.setDescription('Description.')
hwRadioDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDropRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioDropRate.setDescription('Description.')
hwRadioAirPortDhcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioAirPortDhcpFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioAirPortDhcpFrames.setDescription('Description.')
hwRadioAirPortEapolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioAirPortEapolFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioAirPortEapolFrames.setDescription('Description.')
hwRadioAirPortPsPollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioAirPortPsPollFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioAirPortPsPollFrames.setDescription('Description.')
hwRadioAssocRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioAssocRequestFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioAssocRequestFrames.setDescription('Description.')
hwRadioAssocResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioAssocResponseFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioAssocResponseFrames.setDescription('Description.')
hwRadioReassocRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioReassocRequestFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioReassocRequestFrames.setDescription('Description.')
hwRadioReassocResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioReassocResponseFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioReassocResponseFrames.setDescription('Description.')
hwRadioDisassocFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDisassocFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioDisassocFrames.setDescription('Description.')
hwRadioDisauthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDisauthFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioDisauthFrames.setDescription('Description.')
hwRadioRcvFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvFrames64Bits.setDescription('Description.')
hwRadioRcvBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvBytes64Bits.setDescription('Description.')
hwRadioSendFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendFrames64Bits.setDescription('Description.')
hwRadioSendBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendBytes64Bits.setDescription('Description.')
hwRadioSendRtsSuccess64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendRtsSuccess64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendRtsSuccess64Bits.setDescription('Description.')
hwRadioSendUnicast64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendUnicast64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendUnicast64Bits.setDescription('Description.')
hwRadioSendBroadcast64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendBroadcast64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendBroadcast64Bits.setDescription('Description.')
hwRadioSendFailFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendFailFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendFailFrames64Bits.setDescription('Description.')
hwRadioRcvErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvErrFrames64Bits.setDescription('Description.')
hwRadioRcvPhyErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvPhyErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvPhyErrFrames64Bits.setDescription('Description.')
hwRadioRcvCrcErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvCrcErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvCrcErrFrames64Bits.setDescription('Description.')
hwRadioRcvMicErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvMicErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvMicErrFrames64Bits.setDescription('Description.')
hwRadioRcvKeyDecryptErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvKeyDecryptErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvKeyDecryptErrFrames64Bits.setDescription('Description.')
hwRadioRetryFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRetryFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRetryFrames64Bits.setDescription('Description.')
hwRadioDownMacErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDownMacErrFrames64Bits.setStatus('obsolete')
if mibBuilder.loadTexts: hwRadioDownMacErrFrames64Bits.setDescription('Description.')
hwRadioNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioNoise.setStatus('current')
if mibBuilder.loadTexts: hwRadioNoise.setDescription('Description.')
hwRadioActualBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioActualBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioActualBandwidth.setDescription('It means actual bandwidth, include all of both the sent rate and the received rate.')
hwRadioFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioFrames.setStatus('current')
if mibBuilder.loadTexts: hwRadioFrames.setDescription('It means all of both the sent frames and the received frames.')
hwRadioSendDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioSendDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioSendDropFrames64Bits.setDescription('It means the sent and dropped frames.')
hwRadioRcvDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRcvDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwRadioRcvDropFrames64Bits.setDescription('It means the received and droped frames.')
hwRadioChannelFreeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioChannelFreeRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelFreeRate.setDescription('It means the rate of free channel.')
hwRadioTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioTxRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioTxRate.setDescription('It means the utilization rate of sending packets.')
hwRadioRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioRxRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioRxRate.setDescription('It means the utilization rate of receiving packets.')
hwRadioChInterferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 8, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioChInterferenceRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioChInterferenceRate.setDescription('It means the rate of channel interference.')
hwRadioUnauthenticNeighborInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 9), )
if mibBuilder.loadTexts: hwRadioUnauthenticNeighborInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioUnauthenticNeighborInfoTable.setDescription('Huawei radio unauthentic neighbor information table, it describes the information about the neighbor ap which is not authorized by AC. it is aggregate of a group of display to the unauthentic neighbor AP infomation of radio. The unauthentic neighbor AP infomation of radio to display of the table contains: the radio BSSID of the unauthentic neighbor ap, the radio RSSI of the unauthentic neighbor ap, the radio channel of the unauthentic neighbor ap. The index of the radio unauthentic neighbor infomation table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwRadioUnauthenticNeighborInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 9, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioUnauthenticNeighborInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioUnauthenticNeighborInfoEntry.setDescription('Huawei radio unauthentic neighbor information table entry. The entry of the huawei radio unauthentic neighbor information table, all the nodes of the huawei radio unauthentic neighbor information table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio unauthentic neighbor infomation table is hwApIndex and hwRadioID, an Ap index is an unique identifier to a AP, A radio ID is an unique identifier to a radio. The Ap index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApIndex and hwRadioID description. ')
hwUnauthenticRadioNeighborBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 9, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUnauthenticRadioNeighborBSSID.setStatus('current')
if mibBuilder.loadTexts: hwUnauthenticRadioNeighborBSSID.setDescription("An object uses to display the BSSID of unauthentic neighbor ap. BSSID identifies a minimum service set,When administrator binds a ESS to a radio, it use base BSSID and WlanID to generate a BSSID. The format of the bssid is a max address which contains 3 sets of 2 Btyes hexadecimal character join up with - character, such as 00e0-5678-12fa. Notes the BSSID of unauthentic neighbor ap just can be display, but can't be configured. ")
hwUnauthenticRadioNeighborRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 9, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUnauthenticRadioNeighborRSSI.setStatus('current')
if mibBuilder.loadTexts: hwUnauthenticRadioNeighborRSSI.setDescription("An object uses to display the the RSSI from unauthentic neighbor ap to this radio. RSSI means the signal intensity of the rceived signal. Notes the RSSI from unauthentic neighbor ap to the radio just can be display,but can't be configured. ")
hwunauthenticRadioNeighborChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 9, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwunauthenticRadioNeighborChannel.setStatus('current')
if mibBuilder.loadTexts: hwunauthenticRadioNeighborChannel.setDescription("An object uses to display the working channel which is currently used by the unauthentic neighbor ap. Notes the radio working channel of the unauthentic neighbor ap just can be display, but can't be configured. ")
hwUnauthenticRadioNeighborSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 9, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwUnauthenticRadioNeighborSSID.setStatus('current')
if mibBuilder.loadTexts: hwUnauthenticRadioNeighborSSID.setDescription('Description.')
hwRadioRegionCalibrateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 10), )
if mibBuilder.loadTexts: hwRadioRegionCalibrateTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioRegionCalibrateTable.setDescription('Huawei global calibrate config table, the global calibrate is based on AP region.Huawei radio manage table. The content of the table contains: region calibrate startup mode, region calibrate auto time, region calibrate listen mode, region calibrate status. The index of the radio global calibrate config table is hwApRegionIndex, an Ap region index is an unique identifier to a AP region. The Ap region index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApRegionIndex description. ')
hwRadioRegionCalibrateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 10, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApRegionIndex"))
if mibBuilder.loadTexts: hwRadioRegionCalibrateEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioRegionCalibrateEntry.setDescription('Huawei radio global calibrate config table entry. The entry of the huawei radio global calibrate config table, all the nodes of the huawei radio global calibrate config table are been operated here. The detail of the table entry would be explained by the description of the nodes of the table. The index of the radio global calibrate config table is hwApRegionIndex, an Ap region index is an unique identifier to a AP region. The Ap region index is a index import from HUAWEI-WLAN-DEVICE-MIB, the detail description about the index can refer to the node hwApRegionIndex description. ')
hwRegionCalibrateStartupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("immediate", 1), ("periodic", 2), ("cancelPeriodic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRegionCalibrateStartupMode.setStatus('current')
if mibBuilder.loadTexts: hwRegionCalibrateStartupMode.setDescription('The mode uses to set the golbal calibrate startup mode.Immediate means startup immediately. Here, hwRegionCalibrateAutoTime is meanningless. Periodic means startup calibrate periodically. In accordance, hwRegionCalibrateAutoTime specify the time when startup everyday. Cancel periodic means cancel the periodically calibrate. Here, hwRegionCalibrateAutoTime is meanningless. Please refer to the description of hwRegionCalibrateAutoTime. ')
hwRegionCalibrateAutoTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 10, 1, 2), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRegionCalibrateAutoTime.setStatus('current')
if mibBuilder.loadTexts: hwRegionCalibrateAutoTime.setDescription("An object uses to set the time when startup everyday on the basic of the periodic calibrate startup mode. Please refer to the description of hwRegionCalibrateStartupMode. Notes it just can support the hour, minute and second ,the real date can't be support and the fixed date JAN 1st 2001 changelessly must be set, when the auto startup time is been set, notwithstanding it can get the date of the auto startup time too, but the value of the date is JAN 1st 2001 changelessly. ")
hwRegionCalibrateListenMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRegionCalibrateListenMode.setStatus('current')
if mibBuilder.loadTexts: hwRegionCalibrateListenMode.setDescription("A switch flag, which set the radio region calibrate listen mode as enable or disable, tells whether the listen unauthentic neighbor while calibrating is supported. Because listen unauthentic neighbor will need added time, so it as a option. enable means it listens unauthentic neighbor while calibrating, disable means it would not listen unauthentic neighbor, In this case, we can't get unauthentic neighbor information after calibrate done. Notes the setting of radio region calibrate listen mode must have the corresponding setting of the golbal calibrate startup mode, and the golbal calibrate startup mode can't be cancel-periodic. ")
hwRegionCalibrateStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("stop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRegionCalibrateStatus.setStatus('current')
if mibBuilder.loadTexts: hwRegionCalibrateStatus.setDescription("An object uses to display the status of the global calibrate.running means the global calibrate is running. stop means the global calibrate had over. Notes the status of the global calibrate just can be display, but can't be configured. ")
hwBatchRadioProfileStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBatchRadioProfileStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchRadioProfileStartNumber.setDescription("An object uses to set the start number of the first radio profile in batch operation. The range of the first radio profile start number is from 1 to 512. Notes radio profile name is the unique identification of a radio profile, so the start number isn't the ID of the radio profile. ")
hwBatchRadioProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBatchRadioProfileNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchRadioProfileNumber.setDescription('An object uses to set the radio profile number which want to get in batch operation. The range of the radio profile number is from 1 to 128. ')
hwBatchRadioProfileReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchRadioProfileReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchRadioProfileReturnNumber.setDescription("An object uses to display the radio profile number which can get in batch operation. The sum of the batch radio profile start number and the batch radio profile number should not be larger than the total radio profile number in the system, so the real batch radio profile number maybe not equal to the setting batch radio profile number. no matter how the real batch radio profile number is the batch radio profile return number. For example, the setting batch radio profile start number is 3, the setting batch radio profile number is 4 and the total radio profile number in the system is 5, the real batch radio profile number would be 2, and the batch radio profile return number must be 2, the batch radio profile return number isn't equal to the batch radio profile number, otherwise, the total radio profile number in the system is 7, the real batch radio profile number would be 4, and the batch radio profile return number must be 4 too, the batch radio profile return number is equal to the batch radio profile number. ")
hwBatchRadioProfileName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: hwBatchRadioProfileName.setDescription('An object uses to display the names of radio profiles which is in the range of batch radio profile names which are determined by the batch radio profile start number and the batch radio profile number. Any two batch radio profile names of the list should separate with question mark. ')
hwBatchLoadBalanceGroupStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupStartNumber.setDescription("An object uses to set the start number of the first load balance group in batch operation. The range of the first load balance group start number is from 1 to 4096. Notes the load balance group name is the unique identification of a load balance group, so the start number isn't the ID of the load balance group. ")
hwBatchLoadBalanceGroupNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupNumber.setDescription('An object uses to set the load balance group number which want to get in batch operation. The range of the load balance group number is from 1 to 4096. ')
hwBatchLoadBalanceGroupReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupReturnNumber.setDescription("An object uses to display the load balance group number which can get in batch operation. The sum of the batch load balance group start number and the batch load balance group number should not be larger than the total load balance group number in the system, so the real batch load balance group number maybe not equal to the setting batch load balance group number. no matter how the real batch load balance group number is the batch load balance group return number. For example, the setting batch load balance group start number is 3, the setting batch load balance group number is 4 and the total load balance group number in the system is 5, the real batch load balance group number would be 2, and the batch load balance group return number must be 2, the batch load balance group return number isn't equal to the batch load balance group number, otherwise, the total load balance group number in the system is 7, the real batch load balance group number would be 4, and the batch load balance group return number must be 4 too, the batch load balance group return number is equal to the batch load balance group number. ")
hwBatchLoadBalanceGroupName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 18), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupName.setStatus('current')
if mibBuilder.loadTexts: hwBatchLoadBalanceGroupName.setDescription('An object uses to display the names of load balance group which is in the range of batch load balance group names which are determined by the batch load balance group start number and the batch load balance group number. Any two batch load balance group names of the list should separate with question mark. ')
hwBatchUncontrolAPStartNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBatchUncontrolAPStartNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchUncontrolAPStartNumber.setDescription("An object uses to set the start number of the first uncontrol AP in batch operation. The range of the first uncontrol AP start number is from 1 to 512. Notes the start number isn't the ID of the uncontrol AP. ")
hwBatchUncontrolAPNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwBatchUncontrolAPNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchUncontrolAPNumber.setDescription('An object uses to set the uncontrol AP number which want to get in batch operation. The range of the uncontrol AP start number is from 1 to 512. ')
hwBatchUncontrolAPReturnNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchUncontrolAPReturnNumber.setStatus('current')
if mibBuilder.loadTexts: hwBatchUncontrolAPReturnNumber.setDescription("An object uses to display the uncontrol AP number which can get in batch operation. The sum of the batch uncontrol AP start number and the batch uncontrol AP number should not be larger than the total uncontrol AP number in the system, so the real batch uncontrol AP number maybe not equal to the setting batch uncontrol AP number. no matter how the real batch uncontrol AP number is the batch uncontrol AP return number. For example, the setting batch uncontrol AP start number is 3, the setting batch uncontrol AP number is 4 and the total uncontrol AP number in the system is 5, the real batch uncontrol AP number would be 2, and the batch uncontrol AP return number must be 2, the batch uncontrol AP return number isn't equal to the batch uncontrol AP number, otherwise, the total uncontrol AP number in the system is 7, the real batch uncontrol AP number would be 4, and the batch uncontrol AP return number must be 4 too, the batch uncontrol AP return number is equal to the batch uncontrol AP number. ")
hwBatchUncontrolAPBssid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchUncontrolAPBssid.setStatus('current')
if mibBuilder.loadTexts: hwBatchUncontrolAPBssid.setDescription("An object uses to display the the BSSID of uncontrol AP which is in the range of batch uncontrol AP BSSID which are determined by the batch uncontrol AP start number and the batch uncontrol AP BSSID. Any two batch uncontrol AP BSSID of the list should separate with question mark. BSSID identifies a minimum service set,When administrator binds a ESS to a radio, it use base BSSID and WlanID to generate a BSSID. The format of the bssid is a max address which contains 3 sets of 2 Btyes hexadecimal character join up with - character, such as 00e0-5678-12fa. Notes the BSSID of unauthentic neighbor ap just can be display, but can't be configured. ")
hwBatchUncontrolAPAuthNeighborIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwBatchUncontrolAPAuthNeighborIndex.setStatus('current')
if mibBuilder.loadTexts: hwBatchUncontrolAPAuthNeighborIndex.setDescription('An object uses to display the authentic neighbor ap index of uncontrol ap which is in the range of batch uncontrol ap which are determined by the batch uncontrol ap start number and the batch uncontrol ap number. Any two authentic neighbor ap indexs of the batch uncontrol ap of the list should separate with question mark. ')
hwRadioNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24))
hwRadioNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1))
hwRadioChannelChangedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 1)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualChannel"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelChangedReason"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelChangedReasonStr"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPreActualChannel"))
if mibBuilder.loadTexts: hwRadioChannelChangedNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelChangedNotify.setDescription('A notification which is sent out when actual channel of radio is changed. ')
hwRadioSignalEnvDeteriorationNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 2)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPER"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioConflictRate"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwRadioSignalEnvDeteriorationNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioSignalEnvDeteriorationNotify.setDescription('A notification which is sent out when radio report singal environment deterioration. The objects included with the Notification may be used to read further information using AP index ,radio ID radio PER and radio conflict rate. ')
hwRadioSignalEnvResumeNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 3)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"))
if mibBuilder.loadTexts: hwRadioSignalEnvResumeNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioSignalEnvResumeNotify.setDescription('A notification which is sent out when radio report singal environment resume. The objects included with the Notification may be used to read further information using AP index and radio ID. ')
hwApMonitorModeChangedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 4)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApMonitorMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwApPreMonitorMode"))
if mibBuilder.loadTexts: hwApMonitorModeChangedNotify.setStatus('current')
if mibBuilder.loadTexts: hwApMonitorModeChangedNotify.setDescription('Description.')
hwAPCoInterfDetectedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 5)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwApInterfBssid"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfRSSI"))
if mibBuilder.loadTexts: hwAPCoInterfDetectedNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPCoInterfDetectedNotify.setDescription('Description.')
hwAPCoInterfClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 6)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwApInterfBssid"))
if mibBuilder.loadTexts: hwAPCoInterfClearNotify.setStatus('current')
if mibBuilder.loadTexts: hwAPCoInterfClearNotify.setDescription('Description.')
hwNerborInterfDetectedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 7)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwApInterfBssid"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfRSSI"))
if mibBuilder.loadTexts: hwNerborInterfDetectedNotify.setStatus('current')
if mibBuilder.loadTexts: hwNerborInterfDetectedNotify.setDescription('Description.')
hwNeiborInterfClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 8)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwApInterfBssid"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfApChannel"))
if mibBuilder.loadTexts: hwNeiborInterfClearNotify.setStatus('current')
if mibBuilder.loadTexts: hwNeiborInterfClearNotify.setDescription('Description.')
hwStaInterfDetectedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 9)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfStaMac"))
if mibBuilder.loadTexts: hwStaInterfDetectedNotify.setStatus('current')
if mibBuilder.loadTexts: hwStaInterfDetectedNotify.setDescription('Description.')
hwStaInterfClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 10)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfStaMac"))
if mibBuilder.loadTexts: hwStaInterfClearNotify.setStatus('current')
if mibBuilder.loadTexts: hwStaInterfClearNotify.setDescription('Description.')
hwOtherDeviceInterfDetectedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 11)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"))
if mibBuilder.loadTexts: hwOtherDeviceInterfDetectedNotify.setStatus('current')
if mibBuilder.loadTexts: hwOtherDeviceInterfDetectedNotify.setDescription('Description.')
hwOtherDeviceInterfClearNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 12)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"))
if mibBuilder.loadTexts: hwOtherDeviceInterfClearNotify.setStatus('current')
if mibBuilder.loadTexts: hwOtherDeviceInterfClearNotify.setDescription('Description.')
hwRadioDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 13)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownCause"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownCauseStr"))
if mibBuilder.loadTexts: hwRadioDownNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioDownNotify.setDescription('Description.')
hwRadioDownRecovNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 14)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownCause"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownCauseStr"))
if mibBuilder.loadTexts: hwRadioDownRecovNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioDownRecovNotify.setDescription('Description.')
hwWIDSDetectRogueNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 15)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoAPID"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRadioId"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoAPMAC"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueMAC"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueSSId"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueType"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueRSSI"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueChanID"))
if mibBuilder.loadTexts: hwWIDSDetectRogueNotify.setStatus('current')
if mibBuilder.loadTexts: hwWIDSDetectRogueNotify.setDescription('A notification which is sent out when a rogue device is found.')
hwRadioNotSupportChannelNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 16)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualChannel"))
if mibBuilder.loadTexts: hwRadioNotSupportChannelNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioNotSupportChannelNotify.setDescription('Description.')
hwRadioNotSupportPowerLevelNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 17)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualPowerLevel"))
if mibBuilder.loadTexts: hwRadioNotSupportPowerLevelNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioNotSupportPowerLevelNotify.setDescription('Description.')
hwRadioAntennaGainIsUnlawfulNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 18)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualAntennaGain"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLegitimateAntennaGain"))
if mibBuilder.loadTexts: hwRadioAntennaGainIsUnlawfulNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioAntennaGainIsUnlawfulNotify.setDescription('Description.')
hwRadioPowerChangedNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 19)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWorkingPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPowerChangedReasonStr"))
if mibBuilder.loadTexts: hwRadioPowerChangedNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioPowerChangedNotify.setDescription('Description.')
hwApAccessUserNumExceedThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 20)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApAccessUserNumExceedThresholdNotify.setStatus('current')
if mibBuilder.loadTexts: hwApAccessUserNumExceedThresholdNotify.setDescription('Description.')
hwApAccessUserNumExceedThresholdRecovNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 21)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApAccessUserNumExceedThresholdRecovNotify.setStatus('current')
if mibBuilder.loadTexts: hwApAccessUserNumExceedThresholdRecovNotify.setDescription('Description.')
hwApRoamUserNumExceedThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 22)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApRoamUserNumExceedThresholdNotify.setStatus('current')
if mibBuilder.loadTexts: hwApRoamUserNumExceedThresholdNotify.setDescription('Description.')
hwApRoamUserNumExceedThresholdRecovNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 23)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApRoamUserNumExceedThresholdRecovNotify.setStatus('current')
if mibBuilder.loadTexts: hwApRoamUserNumExceedThresholdRecovNotify.setDescription('Description.')
hwApAccessChannelUtilExceedThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 24)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApAccessChannelUtilExceedThresholdNotify.setStatus('current')
if mibBuilder.loadTexts: hwApAccessChannelUtilExceedThresholdNotify.setDescription('Description.')
hwApAccessChannelUtilExceedThresholdRecovNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 25)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApAccessChannelUtilExceedThresholdRecovNotify.setStatus('current')
if mibBuilder.loadTexts: hwApAccessChannelUtilExceedThresholdRecovNotify.setDescription('Description.')
hwApRoamChannelUtilExceedThresholdNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 26)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApRoamChannelUtilExceedThresholdNotify.setStatus('current')
if mibBuilder.loadTexts: hwApRoamChannelUtilExceedThresholdNotify.setDescription('Description.')
hwApRoamChannelUtilExceedThresholdRecovNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 27)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"))
if mibBuilder.loadTexts: hwApRoamChannelUtilExceedThresholdRecovNotify.setStatus('current')
if mibBuilder.loadTexts: hwApRoamChannelUtilExceedThresholdRecovNotify.setDescription('Description.')
hwRadioUploadRemoteCaptureFileNotify = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 1, 28)).setObjects(("HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), ("HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioUploadRemoteCaptureFileNotify.setStatus('current')
if mibBuilder.loadTexts: hwRadioUploadRemoteCaptureFileNotify.setDescription('Description.')
hwRadioNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3))
hwRadioActualChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioActualChannel.setStatus('current')
if mibBuilder.loadTexts: hwRadioActualChannel.setDescription("An object uses to display the actual working channel which is currently used by the radio. Notes the radio actual working channel just can be display, but can't be configured. ")
hwRadioConflictRate = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioConflictRate.setStatus('current')
if mibBuilder.loadTexts: hwRadioConflictRate.setDescription("An object uses to display the wireless conflict rate of the radio. Notes the wireless conflict rate of the radio just can be display, but can't be configured. ")
hwApMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApMonitorMode.setStatus('current')
if mibBuilder.loadTexts: hwApMonitorMode.setDescription('Description.')
hwApPreMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApPreMonitorMode.setStatus('current')
if mibBuilder.loadTexts: hwApPreMonitorMode.setDescription('Description.')
hwApChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApChannel.setStatus('current')
if mibBuilder.loadTexts: hwApChannel.setDescription('Description.')
hwApInterfBssid = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwApInterfBssid.setStatus('current')
if mibBuilder.loadTexts: hwApInterfBssid.setDescription('Description.')
hwInterfStaMac = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInterfStaMac.setStatus('current')
if mibBuilder.loadTexts: hwInterfStaMac.setDescription('Description.')
hwRadioDownCause = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDownCause.setStatus('current')
if mibBuilder.loadTexts: hwRadioDownCause.setDescription('Description.')
hwInterfApChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInterfApChannel.setStatus('current')
if mibBuilder.loadTexts: hwInterfApChannel.setDescription('Description.')
hwInterfRSSI = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwInterfRSSI.setStatus('current')
if mibBuilder.loadTexts: hwInterfRSSI.setDescription('Description.')
hwWIDSTrapInfoAPID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoAPID.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoAPID.setDescription('The ID of AP that is monitoring.')
hwWIDSTrapInfoRadioId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoRadioId.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoRadioId.setDescription('The Radio ID of AP that is monitoring.')
hwWIDSTrapInfoAPMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 13), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoAPMAC.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoAPMAC.setDescription('The MAC address of AP that is monitoring.')
hwWIDSTrapInfoRogueMAC = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueMAC.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueMAC.setDescription('The MAC address of the rogue device that is monitored.')
hwWIDSTrapInfoRogueSSId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueSSId.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueSSId.setDescription('The SSID of the rogue device that is monitored.')
hwWIDSTrapInfoRogueType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueType.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueType.setDescription('The type of the rogue device that is monitored(1 stands for a rogue AP).')
hwWIDSTrapInfoRogueRSSI = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueRSSI.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueRSSI.setDescription('Description.')
hwWIDSTrapInfoRogueChanID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueChanID.setStatus('current')
if mibBuilder.loadTexts: hwWIDSTrapInfoRogueChanID.setDescription('Description.')
hwRadioActualChannelBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ht20", 1), ("ht40Plus", 2), ("ht40Minus", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioActualChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioActualChannelBandwidth.setDescription('Description.')
hwRadioActualPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioActualPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwRadioActualPowerLevel.setDescription('Description.')
hwRadioActualAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioActualAntennaGain.setStatus('current')
if mibBuilder.loadTexts: hwRadioActualAntennaGain.setDescription('Description.')
hwRadioLegitimateAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioLegitimateAntennaGain.setStatus('current')
if mibBuilder.loadTexts: hwRadioLegitimateAntennaGain.setDescription('Description.')
hwRadioChannelChangedReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("dfs", 2), ("wds", 3), ("config", 4), ("calibrate", 5), ("mesh", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioChannelChangedReason.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelChangedReason.setDescription('Description.')
hwRadioChannelChangedReasonStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 24), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioChannelChangedReasonStr.setStatus('current')
if mibBuilder.loadTexts: hwRadioChannelChangedReasonStr.setDescription('Description.')
hwRadioDownCauseStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 25), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDownCauseStr.setStatus('current')
if mibBuilder.loadTexts: hwRadioDownCauseStr.setDescription('Description.')
hwRadioUacUserNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioUacUserNum.setStatus('current')
if mibBuilder.loadTexts: hwRadioUacUserNum.setDescription('Description.')
hwRadioPreActualChannel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPreActualChannel.setStatus('current')
if mibBuilder.loadTexts: hwRadioPreActualChannel.setDescription('Actual channel before being changed. Used in channel change alarm.')
hwRadioPowerChangedReasonStr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 24, 3, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPowerChangedReasonStr.setStatus('current')
if mibBuilder.loadTexts: hwRadioPowerChangedReasonStr.setDescription('Radio power change reason.')
hwRadioParaStatisticTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 25), )
if mibBuilder.loadTexts: hwRadioParaStatisticTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioParaStatisticTable.setDescription('Description.')
hwRadioParaStatisticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 25, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioParaStatisticEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioParaStatisticEntry.setDescription('Description.')
hwRadioStaAveSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioStaAveSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwRadioStaAveSignalStrength.setDescription('Description.')
hwMacRadioManageTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26), )
if mibBuilder.loadTexts: hwMacRadioManageTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioManageTable.setDescription('Description.')
hwMacRadioManageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwMacRadioID"))
if mibBuilder.loadTexts: hwMacRadioManageEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioManageEntry.setDescription('Description.')
hwMacRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMacRadioID.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioID.setDescription('Description.')
hwMacRadioMngBaseBssID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioMngBaseBssID.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngBaseBssID.setDescription('You can get an effective baseBssID ,only when wlan 1 is created. Or you will get a noneffective value. BSSID identifies a minimum service set,When administrator binds a ESS to a radio, it use base BSSID and WlanID to generate a BSSID. The format of the bssid is a max address which contains 3 sets of 2 Btyes hexadecimal character join up with - character, such as 00e0-5678-12fa. ')
hwMacRadioMngRadioProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngRadioProfileName.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngRadioProfileName.setDescription('Description.')
hwMacRadioMngState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngState.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngState.setDescription('Description.')
hwMacRadioMngChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngChannel.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngChannel.setDescription('Description.')
hwMacRadioMngPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngPowerLevel.setDescription('Description.')
hwMacRadioMngPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 7), Integer32()).setUnits('dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngPower.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngPower.setDescription('Description.')
hwMacRadioAvailableSntennaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("all", 1), ("num0", 2), ("num1", 3), ("num2", 4), ("num3", 5), ("num4", 6), ("num5", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioAvailableSntennaNumber.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAvailableSntennaNumber.setDescription('Description.')
hwMacRadioWorkingChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioWorkingChannel.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioWorkingChannel.setDescription('Description.')
hwMacRadioWorkingPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioWorkingPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioWorkingPowerLevel.setDescription('Description.')
hwMacRadioWorkingPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioWorkingPower.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioWorkingPower.setDescription('Description.')
hwMacRadioMngChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ht20", 1), ("ht40Plus", 2), ("ht40Minus", 3), ("ht80", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngChannelBandwidth.setDescription('Description.')
hwMacRadioWorkingChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", -1), ("ht20", 1), ("ht40Plus", 2), ("ht40Minus", 3), ("ht80", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioWorkingChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioWorkingChannelBandwidth.setDescription('Description.')
hwMacRadio80211nMCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadio80211nMCSValue.setStatus('current')
if mibBuilder.loadTexts: hwMacRadio80211nMCSValue.setDescription('Description.')
hwMacRadioWidsWorkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("monitor", 2), ("hybrid", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioWidsWorkMode.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioWidsWorkMode.setDescription('Description.')
hwMacRadioMngBinded = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("unknown", -1), ("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMngBinded.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMngBinded.setDescription('Object selects a mechanism for bind/unbind the radio-profile')
hwMacRadioMaxTxPwrLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioMaxTxPwrLvl.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMaxTxPwrLvl.setDescription('Description.')
hwMacRadioPwrAttRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioPwrAttRange.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPwrAttRange.setDescription('Description.')
hwMacRadioPwrAttValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioPwrAttValue.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPwrAttValue.setDescription('Description.')
hwMacRadioAntennaGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioAntennaGain.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAntennaGain.setDescription('Description.')
hwMacRadioBridgeWhitelistEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioBridgeWhitelistEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioBridgeWhitelistEnable.setDescription('Description.')
hwMacRadioBridgeWhitelistName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioBridgeWhitelistName.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioBridgeWhitelistName.setDescription('Description.')
hwMacRadioBridgeStpSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioBridgeStpSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioBridgeStpSwitch.setDescription('Description.')
hwMacRadioBridgeSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioBridgeSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioBridgeSwitch.setDescription('Description.')
hwMacRadioBridgeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("middle", 1), ("root", 2), ("leaf", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioBridgeMode.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioBridgeMode.setDescription('Description.')
hwMacRadioUndoBridgeWhitelist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioUndoBridgeWhitelist.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioUndoBridgeWhitelist.setDescription('Description.')
hwMacRadioUserTrafficScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioUserTrafficScheduler.setStatus('obsolete')
if mibBuilder.loadTexts: hwMacRadioUserTrafficScheduler.setDescription('Description.')
hwMacRadioCountermeasuresMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioCountermeasuresMode.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCountermeasuresMode.setDescription('Description.')
hwMacRadioFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("frequency2G", 1), ("frequency5G", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioFrequency.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioFrequency.setDescription('Description.')
hwMacRadioCountermeasuresSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioCountermeasuresSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCountermeasuresSwitch.setDescription('Description.')
hwMacRadioSpectrumAnalysisEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioSpectrumAnalysisEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSpectrumAnalysisEnable.setDescription('Description.')
hwMACRadioWidsAttackDetEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMACRadioWidsAttackDetEnable.setStatus('current')
if mibBuilder.loadTexts: hwMACRadioWidsAttackDetEnable.setDescription('Description.')
hwMacRadioMeshWhitelistName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 34), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMeshWhitelistName.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMeshWhitelistName.setDescription('Description.')
hwMacUndoMeshWhitelist = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacUndoMeshWhitelist.setStatus('current')
if mibBuilder.loadTexts: hwMacUndoMeshWhitelist.setDescription('Description.')
hwMacRadioMeshRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("meshNode", 1), ("meshPortal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMeshRole.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMeshRole.setDescription('Description.')
hwMacRadioLocationEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioLocationEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioLocationEnable.setDescription('0: disable 1: enable')
hwMacRadioLocationScanChannelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioLocationScanChannelEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioLocationScanChannelEnable.setDescription('0: disable 1: enable')
hwMacRadio80211nMulticastMCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadio80211nMulticastMCSValue.setStatus('current')
if mibBuilder.loadTexts: hwMacRadio80211nMulticastMCSValue.setDescription('Description.')
hwMacRadioSpectrogramServerReportEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioSpectrogramServerReportEnable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSpectrogramServerReportEnable.setDescription('0: disable 1: enable')
hwMacRadioMulticastRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14))).clone(namedValues=NamedValues(("unknow", -1), ("rate1", 1), ("rate2", 2), ("rate55", 3), ("rate6", 4), ("rate9", 5), ("rate11", 6), ("rate12", 7), ("rate18", 8), ("rate24", 10), ("rate36", 12), ("rate48", 13), ("rate54", 14)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioMulticastRateValue.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMulticastRateValue.setDescription('Description.')
hwMacRadio11acSpatialStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadio11acSpatialStream.setStatus('current')
if mibBuilder.loadTexts: hwMacRadio11acSpatialStream.setDescription('Description.')
hwMacRadio11acMCSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadio11acMCSValue.setStatus('current')
if mibBuilder.loadTexts: hwMacRadio11acMCSValue.setDescription('Description.')
hwMacRadioActiveSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 26, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dormancy", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioActiveSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioActiveSwitch.setDescription('Mesh handover feature: Fat AP receive dormancy or active signal through snmp. When the signal is active, radio of fat ap is enable and send RARP packet; When the signal is dormancy, radio of fat ap is disable.')
hwMacRadioCalibrateStatisicsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 27), )
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsTable.setDescription('Description.')
hwMacRadioCalibrateStatisicsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 27, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsEntry.setDescription('Description.')
hwMacRadioCalStatisSignalBadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 27, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioCalStatisSignalBadCount.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalStatisSignalBadCount.setDescription('Description.')
hwMacRadioCalStatisCalibratePowerCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 27, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioCalStatisCalibratePowerCount.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalStatisCalibratePowerCount.setDescription('Description.')
hwMacRadioCalStatisCalibrateChannelCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 27, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioCalStatisCalibrateChannelCount.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalStatisCalibrateChannelCount.setDescription('Description.')
hwMacRadioCalibrateStatisicsOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1))).clone(namedValues=NamedValues(("invalid", -1), ("clearstatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsOperMode.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsOperMode.setDescription('Description.')
hwMacRadioAuthNeighborInfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28), )
if mibBuilder.loadTexts: hwMacRadioAuthNeighborInfTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAuthNeighborInfTable.setDescription('Description.')
hwMacRadioAuthNeighborInfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwMacRadioAuthNeighborInfEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAuthNeighborInfEntry.setDescription('Description.')
hwMacAuthenticRadioNeighborAPID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborAPID.setStatus('current')
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborAPID.setDescription('Description.')
hwMacAuthenticRadioNeighborChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborChannel.setStatus('current')
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborChannel.setDescription('Description.')
hwMacAuthenticRadioNeighborFrontAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborFrontAttenu.setStatus('current')
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborFrontAttenu.setDescription('Description.')
hwMacAuthenticRadioNeighborBackAttenu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborBackAttenu.setStatus('current')
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborBackAttenu.setDescription('Description.')
hwMacAuthenticRadioNeighborAPMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborAPMac.setStatus('current')
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborAPMac.setDescription('Description.')
hwMacAuthenticRadioNeighborSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 28, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborSSID.setStatus('current')
if mibBuilder.loadTexts: hwMacAuthenticRadioNeighborSSID.setDescription('Description.')
hwMacRadioLoadBalanceGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29), )
if mibBuilder.loadTexts: hwMacRadioLoadBalanceGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioLoadBalanceGroupMemberTable.setDescription('Description.')
hwMacRadioLoadBalanceGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwLBGroupName"), (0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwMacRadioLoadBalanceGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioLoadBalanceGroupMemberEntry.setDescription('Description.')
hwMacLBMemberRadioChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacLBMemberRadioChannel.setStatus('current')
if mibBuilder.loadTexts: hwMacLBMemberRadioChannel.setDescription('Description.')
hwMacLBMemberRadioPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacLBMemberRadioPowerLevel.setStatus('current')
if mibBuilder.loadTexts: hwMacLBMemberRadioPowerLevel.setDescription('Description.')
hwMacLBMemberRadioPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacLBMemberRadioPower.setStatus('current')
if mibBuilder.loadTexts: hwMacLBMemberRadioPower.setDescription('Description.')
hwMacLBMemberRadioSeesionNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacLBMemberRadioSeesionNum.setStatus('current')
if mibBuilder.loadTexts: hwMacLBMemberRadioSeesionNum.setDescription('Description.')
hwMacLBMemberRadioTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacLBMemberRadioTraffic.setStatus('current')
if mibBuilder.loadTexts: hwMacLBMemberRadioTraffic.setDescription('Description.')
hwMacLBMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 29, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwMacLBMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacLBMemberRowStatus.setDescription('Description.')
hwMacRadioPerformanceStatTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30), )
if mibBuilder.loadTexts: hwMacRadioPerformanceStatTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPerformanceStatTable.setDescription('Description.')
hwMacRadioPerformanceStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwMacRadioPerformanceStatEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPerformanceStatEntry.setDescription('Description.')
hwMacRadioRcvFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvFrames.setDescription('Description.')
hwMacRadioRcvBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvBytes.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvBytes.setDescription('Description.')
hwMacRadioSendFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendFrames.setDescription('Description.')
hwMacRadioSendBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendBytes.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendBytes.setDescription('Description.')
hwMacRadioSendRtsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendRtsSuccess.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendRtsSuccess.setDescription('Description.')
hwMacRadioSendUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendUnicast.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendUnicast.setDescription('Description.')
hwMacRadioSendBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendBroadcast.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendBroadcast.setDescription('Description.')
hwMacRadioSendFailFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendFailFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendFailFrames.setDescription('Description.')
hwMacRadioRcvErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvErrFrames.setDescription('Description.')
hwMacRadioRcvPhyErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvPhyErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvPhyErrFrames.setDescription('Description.')
hwMacRadioRcvCrcErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvCrcErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvCrcErrFrames.setDescription('Description.')
hwMacRadioRcvMicErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvMicErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvMicErrFrames.setDescription('Description.')
hwMacRadioRcvKeyDecryptErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvKeyDecryptErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvKeyDecryptErrFrames.setDescription('Description.')
hwMacRadioRetryFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRetryFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRetryFrames.setDescription('Description.')
hwMacRadioPER = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioPER.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPER.setDescription('Description.')
hwMacRadioChUtilizationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioChUtilizationRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioChUtilizationRate.setDescription('Description.')
hwMacRadioPerformanceStatOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1))).clone(namedValues=NamedValues(("invalid", -1), ("clearstatistic", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioPerformanceStatOperMode.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPerformanceStatOperMode.setDescription('Description.')
hwMacRadioPEROfLastPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioPEROfLastPeriod.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPEROfLastPeriod.setDescription('Description.')
hwMacRadioRcvSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvSignalStrength.setDescription('Description.')
hwMacRadioDownMacErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioDownMacErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioDownMacErrFrames.setDescription('Description.')
hwMacRadioRcvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvPower.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvPower.setDescription('Description.')
hwMacRadioRcvUnicastFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvUnicastFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvUnicastFrames.setDescription('Description.')
hwMacRadioRcvMngFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvMngFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvMngFrames.setDescription('Description.')
hwMacRadioRcvCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvCtrlFrames.setDescription('Description.')
hwMacRadioRcvDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvDataFrames.setDescription('Description.')
hwMacRadioSendMngFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendMngFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendMngFrames.setDescription('Description.')
hwMacRadioSendCtrlFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendCtrlFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendCtrlFrames.setDescription('Description.')
hwMacRadioSendDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendDataFrames.setDescription('Description.')
hwMacRadioStaMaxSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioStaMaxSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioStaMaxSignalStrength.setDescription('Description.')
hwMacRadioStaMinSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioStaMinSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioStaMinSignalStrength.setDescription('Description.')
hwMacRadioStaAvgSignalStrength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioStaAvgSignalStrength.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioStaAvgSignalStrength.setDescription('Description.')
hwMacRadioSendRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendRate.setDescription('Description.')
hwMacRadioRecvRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 33), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRecvRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRecvRate.setDescription('Description.')
hwMacRadioDropRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 34), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioDropRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioDropRate.setDescription('Description.')
hwMacRadioAirPortDhcpFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioAirPortDhcpFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAirPortDhcpFrames.setDescription('Description.')
hwMacRadioAirPortEapolFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioAirPortEapolFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAirPortEapolFrames.setDescription('Description.')
hwMacRadioAirPortPsPollFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioAirPortPsPollFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAirPortPsPollFrames.setDescription('Description.')
hwMacRadioAssocRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioAssocRequestFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAssocRequestFrames.setDescription('Description.')
hwMacRadioAssocResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioAssocResponseFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAssocResponseFrames.setDescription('Description.')
hwMacRadioReassocRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioReassocRequestFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioReassocRequestFrames.setDescription('Description.')
hwMacRadioReassocResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioReassocResponseFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioReassocResponseFrames.setDescription('Description.')
hwMacRadioDisassocFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioDisassocFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioDisassocFrames.setDescription('Description.')
hwMacRadioDisauthFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioDisauthFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioDisauthFrames.setDescription('Description.')
hwMacRadioRcvFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvFrames64Bits.setDescription('Description.')
hwMacRadioRcvBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvBytes64Bits.setDescription('Description.')
hwMacRadioSendFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendFrames64Bits.setDescription('Description.')
hwMacRadioSendBytes64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendBytes64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendBytes64Bits.setDescription('Description.')
hwMacRadioSendRtsSuccess64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendRtsSuccess64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendRtsSuccess64Bits.setDescription('Description.')
hwMacRadioSendUnicast64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendUnicast64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendUnicast64Bits.setDescription('Description.')
hwMacRadioSendBroadcast64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendBroadcast64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendBroadcast64Bits.setDescription('Description.')
hwMacRadioSendFailFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendFailFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendFailFrames64Bits.setDescription('Description.')
hwMacRadioRcvErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvErrFrames64Bits.setDescription('Description.')
hwMacRadioRcvPhyErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvPhyErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvPhyErrFrames64Bits.setDescription('Description.')
hwMacRadioRcvCrcErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvCrcErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvCrcErrFrames64Bits.setDescription('Description.')
hwMacRadioRcvMicErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvMicErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvMicErrFrames64Bits.setDescription('Description.')
hwMacRadioRcvKeyDecryptErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvKeyDecryptErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvKeyDecryptErrFrames64Bits.setDescription('Description.')
hwMacRadioRetryFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRetryFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRetryFrames64Bits.setDescription('Description.')
hwMacRadioDownMacErrFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioDownMacErrFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioDownMacErrFrames64Bits.setDescription('Description.')
hwMacRadioNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioNoise.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioNoise.setDescription('Description.')
hwMacRadioActualBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioActualBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioActualBandwidth.setDescription('Description.')
hwMacRadioFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioFrames.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioFrames.setDescription('Description.')
hwMacRadioSendDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioSendDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioSendDropFrames64Bits.setDescription('Description.')
hwMacRadioRcvDropFrames64Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRcvDropFrames64Bits.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRcvDropFrames64Bits.setDescription('Description.')
hwMacRadioChannelFreeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 64), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioChannelFreeRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioChannelFreeRate.setDescription('Description.')
hwMacRadioTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 65), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioTxRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioTxRate.setDescription('Description.')
hwMacRadioRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 66), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioRxRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioRxRate.setDescription('Description.')
hwMacRadioChInterferenceRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 30, 1, 67), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioChInterferenceRate.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioChInterferenceRate.setDescription('Description.')
hwMacRadioUnauthenticNeighborInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 31), )
if mibBuilder.loadTexts: hwMacRadioUnauthenticNeighborInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioUnauthenticNeighborInfoTable.setDescription('Description.')
hwMacRadioUnauthenticNeighborInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 31, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwMacRadioUnauthenticNeighborInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioUnauthenticNeighborInfoEntry.setDescription('Description.')
hwMacUnauthenticRadioNeighborBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 31, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacUnauthenticRadioNeighborBSSID.setStatus('current')
if mibBuilder.loadTexts: hwMacUnauthenticRadioNeighborBSSID.setDescription('Description.')
hwMacUnauthenticRadioNeighborRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 31, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacUnauthenticRadioNeighborRSSI.setStatus('current')
if mibBuilder.loadTexts: hwMacUnauthenticRadioNeighborRSSI.setDescription('Description.')
hwMacunauthenticRadioNeighborChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 31, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacunauthenticRadioNeighborChannel.setStatus('current')
if mibBuilder.loadTexts: hwMacunauthenticRadioNeighborChannel.setDescription('Description.')
hwMacUnauthenticRadioNeighborSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 31, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacUnauthenticRadioNeighborSSID.setStatus('current')
if mibBuilder.loadTexts: hwMacUnauthenticRadioNeighborSSID.setDescription('Description.')
hwRadioInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32), )
if mibBuilder.loadTexts: hwRadioInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioInfoTable.setDescription('Huawei radio wireless port information table. .')
hwRadioInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwRadioInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioInfoEntry.setDescription('Description.')
hwRadioDecsption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioDecsption.setStatus('current')
if mibBuilder.loadTexts: hwRadioDecsption.setDescription('Description.')
hwRadioPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioPortType.setStatus('current')
if mibBuilder.loadTexts: hwRadioPortType.setDescription('Description.')
hwRadioMaxMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 3), Integer32()).setUnits('byte').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioMaxMtu.setStatus('current')
if mibBuilder.loadTexts: hwRadioMaxMtu.setDescription('Description.')
hwRadioBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 4), Integer32()).setUnits('Mbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioBandwidth.setDescription('Description.')
hwRadioMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioMac.setStatus('current')
if mibBuilder.loadTexts: hwRadioMac.setDescription('Description.')
hwRadioAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("admindown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadioAdminStatus.setDescription('The admin status only can be 1 or 2. 1 stands for up, and 2 stands for admindown.')
hwRadioOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("admindown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwRadioOperStatus.setDescription('The current status only can be 1, 2 or 3. 1 stands for up, 2 stands for down, and 3 stands for admindown.')
hwRadioLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioLastChange.setStatus('current')
if mibBuilder.loadTexts: hwRadioLastChange.setDescription('Description.')
hwRadioInfoUpDownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioInfoUpDownTimes.setStatus('current')
if mibBuilder.loadTexts: hwRadioInfoUpDownTimes.setDescription('Description.')
hwRadioAutoOffSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioAutoOffSwitch.setStatus('current')
if mibBuilder.loadTexts: hwRadioAutoOffSwitch.setDescription('Description.')
hwRadioAutoOffStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioAutoOffStartTime.setStatus('current')
if mibBuilder.loadTexts: hwRadioAutoOffStartTime.setDescription('Description.')
hwRadioAutoOffEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 32, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioAutoOffEndTime.setStatus('current')
if mibBuilder.loadTexts: hwRadioAutoOffEndTime.setDescription('Description.')
hwMacRadioInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33), )
if mibBuilder.loadTexts: hwMacRadioInfoTable.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioInfoTable.setDescription('Huawei radio wireless port information table.')
hwMacRadioInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApMac"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"))
if mibBuilder.loadTexts: hwMacRadioInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioInfoEntry.setDescription('Description.')
hwMacRadioDecsption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioDecsption.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioDecsption.setDescription('Description.')
hwMacRadioPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioPortType.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPortType.setDescription('Description.')
hwMacRadioMaxMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioMaxMtu.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMaxMtu.setDescription('Description.')
hwMacRadioBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioBandwidth.setDescription('Description.')
hwMacRadioMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 5), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioMac.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioMac.setDescription('Description.')
hwMacRadioAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("admindown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAdminStatus.setDescription('The admin status only can be 0 or 1. 0 stands for up, and 1 stands for admindown..')
hwMacRadioOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("admindown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioOperStatus.setDescription('The current status only can be 0, 1 or 2. 0 stands for up, 1 stands for down, and 2 stands for admindown..')
hwMacRadioLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioLastChange.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioLastChange.setDescription('Description.')
hwMacRadioInfoUpDownTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMacRadioInfoUpDownTimes.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioInfoUpDownTimes.setDescription('Description.')
hwMacRadioAutoOffSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioAutoOffSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAutoOffSwitch.setDescription('Description.')
hwMacRadioAutoOffStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioAutoOffStartTime.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAutoOffStartTime.setDescription('Description.')
hwMacRadioAutoOffEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 33, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwMacRadioAutoOffEndTime.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAutoOffEndTime.setDescription('Description.')
hwRadioObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34))
hwRadioCalibrateTable = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1))
hwRadioCalibrateMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateMode.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateMode.setDescription('Description.')
hwRadioCalibrateTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateTime.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateTime.setDescription('Description.')
hwRadioCalibrateManualStartup = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateManualStartup.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateManualStartup.setDescription('Description.')
hwRadioCalibrateCycle = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateCycle.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateCycle.setDescription('Description.')
hwRadioCalibratePolicy = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibratePolicy.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibratePolicy.setDescription('Description.')
hwRadioCalibratesensitivity = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibratesensitivity.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibratesensitivity.setDescription('Description.')
hwRadioGlobalCalibrateChannel2G = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioGlobalCalibrateChannel2G.setStatus('current')
if mibBuilder.loadTexts: hwRadioGlobalCalibrateChannel2G.setDescription('Description.')
hwRadioGlobalCalibrateChannel5G = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 8), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioGlobalCalibrateChannel5G.setStatus('current')
if mibBuilder.loadTexts: hwRadioGlobalCalibrateChannel5G.setDescription('Description.')
hwRadioGlobalScanChannel2G = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 9), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioGlobalScanChannel2G.setStatus('current')
if mibBuilder.loadTexts: hwRadioGlobalScanChannel2G.setDescription('Description.')
hwRadioGlobalScanChannel5G = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 10), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioGlobalScanChannel5G.setStatus('current')
if mibBuilder.loadTexts: hwRadioGlobalScanChannel5G.setDescription('Description.')
hwRadioGlobalCalibrate5gBandWidth = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ht20", 1), ("ht40", 2), ("ht80", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioGlobalCalibrate5gBandWidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioGlobalCalibrate5gBandWidth.setDescription('Global calibrate 5G band width.')
hwRadioCalibrateAutoStartTime = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 1, 12), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRadioCalibrateAutoStartTime.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateAutoStartTime.setDescription('Auto calibrate start time.')
hwConnectProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2), )
if mibBuilder.loadTexts: hwConnectProfileTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectProfileTable.setDescription('Huawei connect profile table. This table is used to create connect profile and config the element in this profile.The element include as fllows: - huawei connect profile name. - huawei connect ssid. - huawei connect peer mac. - huawei connect psk. - huawei connect distance kilo. - huawei connect distance mile. - huawei connect profile active. - huawei connect profile rowstatus.')
hwConnectProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectProfileName"))
if mibBuilder.loadTexts: hwConnectProfileEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectProfileEntry.setDescription('Description.')
hwConnectProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hwConnectProfileName.setStatus('current')
if mibBuilder.loadTexts: hwConnectProfileName.setDescription('An object is uesd to set connect profile name,if access to connect profile must through this name only. Generally,it can set 32 connect profiles and the name not samely.')
hwConnectSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectSsid.setStatus('current')
if mibBuilder.loadTexts: hwConnectSsid.setDescription('The string of ssid has no more than 32 character.')
hwConnectPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1, 3), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectPeerMac.setStatus('current')
if mibBuilder.loadTexts: hwConnectPeerMac.setDescription('Description.')
hwConnectPskPassPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectPskPassPhase.setStatus('current')
if mibBuilder.loadTexts: hwConnectPskPassPhase.setDescription('An object is used to set psk for safe connect. The encrpytion tachniques only sustain wpa2-ccmp. The psk maybe 32 to 104 cryptograph character or 8 to 63 colloquial character.')
hwConnectProfileActived = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectProfileActived.setReference('0')
if mibBuilder.loadTexts: hwConnectProfileActived.setStatus('current')
if mibBuilder.loadTexts: hwConnectProfileActived.setDescription("An object is used to display and set connect profile's status. 0 show not connected,1 show connecting. ")
hwConnectProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 2, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwConnectProfileRowStatus.setDescription('An object is used to create or delete a connect profile. There are some restrictions of operation of the connect profile. - It needs a connect profile name for the creation of the radio profile. - if hwconnect profile active value is 1,the connect profile can not delete. - if delete a connect profile,but the profile name not exist,it cannot delete. ')
hwRadioBasicSettingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 3), )
if mibBuilder.loadTexts: hwRadioBasicSettingTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioBasicSettingTable.setDescription('Description.')
hwRadioBasicSettingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 3, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwApRadioID"))
if mibBuilder.loadTexts: hwRadioBasicSettingEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioBasicSettingEntry.setDescription('Description.')
hwApRadioID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hwApRadioID.setStatus('current')
if mibBuilder.loadTexts: hwApRadioID.setDescription('The index of radio parameter.')
hwApRadioTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 36))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRadioTxPower.setStatus('current')
if mibBuilder.loadTexts: hwApRadioTxPower.setDescription('An object is used to set transmittion power for wireless. The range is from 16 to 36. if not setting,the txpower is max power which the device hold.')
hwApRadioRtsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwApRadioRtsThreshold.setReference('2347 bytes')
if mibBuilder.loadTexts: hwApRadioRtsThreshold.setStatus('current')
if mibBuilder.loadTexts: hwApRadioRtsThreshold.setDescription(' ')
hwConnectStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4), )
if mibBuilder.loadTexts: hwConnectStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusTable.setDescription('Description.')
hwConnectStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusPeerMac"))
if mibBuilder.loadTexts: hwConnectStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusEntry.setDescription('Description.')
hwConnectStatusPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwConnectStatusPeerMac.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusPeerMac.setDescription('Description.')
hwConnectStatusSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusSsid.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusSsid.setDescription('Description.')
hwConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnect", 1), ("connect", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatus.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatus.setDescription('An object is used to display connect status now. 1 shows connection, 2 shows disconnection.')
hwConnectStatusSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusSNR.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusSNR.setDescription('An object is used to display the snr of current link.')
hwConnectStatusNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusNoiseFloor.setDescription('An object is used to display the noise of current link.')
hwConnectStatusChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusChannel.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusChannel.setDescription('An object is used to display the channel of current link.')
hwConnectStatusActualTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusActualTxPower.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusActualTxPower.setDescription('An object is used to display the actual tx power of current link.')
hwConnectStatusBeaconInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusBeaconInterval.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusBeaconInterval.setDescription('An object is used to display the beacon interval of current link.')
hwConnectStatusCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusCurrentRate.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusCurrentRate.setDescription('An object is used to display the rate of current link.')
hwConnectStatusTxBeamforming = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusTxBeamforming.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusTxBeamforming.setDescription('An object is used to display the tx beam forming of current link.')
hwConnectStatusActualCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusActualCountryCode.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusActualCountryCode.setDescription('An object is used to display the current countrycode of current device.')
hwConnectStatusDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusDistance.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusDistance.setDescription('An object is used to get the distance setting for the connection. The unit is 0.1 km.')
hwConnectStatusCurrentRateKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusCurrentRateKbps.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusCurrentRateKbps.setDescription('An object is used to display the rate of current link, the unit is Kbps.')
hwConnectStatusHtMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ht20", 1), ("ht40", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusHtMode.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusHtMode.setDescription('An object is used to display the HT mode of current link.')
hwConnectStatusGIMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("short", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectStatusGIMode.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusGIMode.setDescription('An object is used to display the GI mode of current link.')
hwConnectStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5), )
if mibBuilder.loadTexts: hwConnectStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatisticsTable.setDescription('Description.')
hwConnectStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectStatisticsPeerMac"))
if mibBuilder.loadTexts: hwConnectStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatisticsEntry.setDescription('Description.')
hwConnectStatisticsPeerMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwConnectStatisticsPeerMac.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatisticsPeerMac.setDescription('Description.')
hwConnectRxOkUcastDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectRxOkUcastDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwConnectRxOkUcastDataFrames.setDescription('An object is used to display the count of correct unicast Rx message.')
hwConnectRxOkUcastDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectRxOkUcastDataBytes.setStatus('current')
if mibBuilder.loadTexts: hwConnectRxOkUcastDataBytes.setDescription('An object is used to display the bytes count of correct unicast Rx message.')
hwConnectTxOkUcastDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectTxOkUcastDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwConnectTxOkUcastDataFrames.setDescription('An object is used to display the count of correct unicast Tx message.')
hwConnectTxOkUcastDataBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectTxOkUcastDataBytes.setStatus('current')
if mibBuilder.loadTexts: hwConnectTxOkUcastDataBytes.setDescription('An object is used to display the bytes count of correct unicast Tx message.')
hwConnectRxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectRxThroughput.setStatus('current')
if mibBuilder.loadTexts: hwConnectRxThroughput.setDescription('An object is used to display the rate of Rx message.The unit is Mbps.')
hwConnectTxThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectTxThroughput.setStatus('current')
if mibBuilder.loadTexts: hwConnectTxThroughput.setDescription('An object is used to display the rate of Tx message.The unit is Mbps.')
hwConnectRxErrFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectRxErrFrames.setStatus('current')
if mibBuilder.loadTexts: hwConnectRxErrFrames.setDescription('An object is used to display the count of Rx message which is wrong.')
hwConnectTxErrUcastDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectTxErrUcastDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwConnectTxErrUcastDataFrames.setDescription('An object is used to display the count of Tx message which is wrong.')
hwConnectUcastDataFrameTxRetryRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectUcastDataFrameTxRetryRatio.setStatus('current')
if mibBuilder.loadTexts: hwConnectUcastDataFrameTxRetryRatio.setDescription('An object is used to display the repeate message rate of unicast Tx message.The range id from 0 to 100. ')
hwConnectOnlineTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectOnlineTime.setStatus('current')
if mibBuilder.loadTexts: hwConnectOnlineTime.setDescription('An object is used to display the connection time length which connected last time.')
hwConnectStatisticsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("reset", 1), ("unreset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwConnectStatisticsReset.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatisticsReset.setDescription('An object is used to reset the statistics datas of current device.')
hwConnectRateHistogramTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 6), )
if mibBuilder.loadTexts: hwConnectRateHistogramTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectRateHistogramTable.setDescription('Huawei connect rate histogram table. This table is uses to display connect rate histogram.The content of the table contains:connect rate histogram TxRx,connect rate histogram rate and connect rate histogram ucast date frames.')
hwConnectRateHistogramEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 6, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectRateStatDirection"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectRateStatRange"))
if mibBuilder.loadTexts: hwConnectRateHistogramEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectRateHistogramEntry.setDescription('Huawei connect rate histogram table entry. The index of the connect rate histogram table is hwConnectRateHistogramTxRx and hwconnectRateHistogramRate.')
hwConnectRateStatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txRate", 1), ("rxRate", 2))))
if mibBuilder.loadTexts: hwConnectRateStatDirection.setStatus('current')
if mibBuilder.loadTexts: hwConnectRateStatDirection.setDescription('The first index is connect rate histogram TxRx,the detail ranges as follows: - 1 express Received rate histogram of unicast data frames. - 2 express Transmit rate histogram of unicast data frames.')
hwConnectRateStatRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: hwConnectRateStatRange.setStatus('current')
if mibBuilder.loadTexts: hwConnectRateStatRange.setDescription('The second index is connect rate histogram rate.The range as follows: - MCS0,MCS1,MCS2,MCS3,MCS4,MCS5,MCS6,MCS7,MCS8,MCS9,MCS10,MCS11,MCS12 show 0 to 12 - MCS13,MCS14,MCS15,MCS16,MCS17,MCS18,MCS19,MCS20,MCS21,MCS22,MCS23 show 13 to 23 - 32 shows rate6 from 36M to 48M - 33 shows rate4 from 18M to 24M - 34 shows rate2 from 9M to 12M - 35 shows rate0 less than 6M - 36 shows rate7 from 48M to 54M - 37 shows rate5 from 24M to 36M - 38 shows rate3 from 12M to 18M - 39 shows rate1 from 6M to 9M')
hwConnectRateStatUcastDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectRateStatUcastDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwConnectRateStatUcastDataFrames.setDescription('An object uses to display connect rate histogram ucast data frames through the connect rate histogram TxRx and the connect rate histogram rate. ')
hwConnectAMPDUHistogramTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 7), )
if mibBuilder.loadTexts: hwConnectAMPDUHistogramTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectAMPDUHistogramTable.setDescription('Description.')
hwConnectAMPDUHistogramEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 7, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectAMPDUStatDirection"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectAMPDUStatRange"))
if mibBuilder.loadTexts: hwConnectAMPDUHistogramEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectAMPDUHistogramEntry.setDescription('Description.')
hwConnectAMPDUStatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txAMPDU", 1), ("rxAMPDU", 2))))
if mibBuilder.loadTexts: hwConnectAMPDUStatDirection.setStatus('current')
if mibBuilder.loadTexts: hwConnectAMPDUStatDirection.setDescription('The first index is connect AMPDU histogram TxRx,the detail ranges as follows: - 1 express Received rate histogram of unicast data frames. - 2 express Transmit rate histogram of unicast data frames.')
hwConnectAMPDUStatRange = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 7, 1, 2), Integer32())
if mibBuilder.loadTexts: hwConnectAMPDUStatRange.setStatus('current')
if mibBuilder.loadTexts: hwConnectAMPDUStatRange.setDescription('The range is from 0 to 64.Different number make up different length of AMPDU. For example,32 express the length of AMPDU is 32. ')
hwConnectAMPDUStatUcastDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 7, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectAMPDUStatUcastDataFrames.setStatus('current')
if mibBuilder.loadTexts: hwConnectAMPDUStatUcastDataFrames.setDescription('An object uses to display connect AMPDU ucast data frames through the connect AMPDU stat direction and the connect AMPDU stat range. ')
hwConnectLenHistogramTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 8), )
if mibBuilder.loadTexts: hwConnectLenHistogramTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectLenHistogramTable.setDescription('Description.')
hwConnectLenHistogramEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 8, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectDataLenStatDirection"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectDataLenStatLength"))
if mibBuilder.loadTexts: hwConnectLenHistogramEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectLenHistogramEntry.setDescription('Description.')
hwConnectDataLenStatDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("txLen", 1), ("rxLen", 2))))
if mibBuilder.loadTexts: hwConnectDataLenStatDirection.setStatus('current')
if mibBuilder.loadTexts: hwConnectDataLenStatDirection.setDescription('The first index is connect datalen stat direction,the detail ranges as follows: - 1 express Received rate histogram of unicast data frames. - 2 express Transmit rate histogram of unicast data frames.')
hwConnectDataLenStatLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 8, 1, 2), Integer32())
if mibBuilder.loadTexts: hwConnectDataLenStatLength.setStatus('current')
if mibBuilder.loadTexts: hwConnectDataLenStatLength.setDescription('The second index is connect data length.The range as follows: -0 shows 0 to 255 -1 shows 256 to 511 -2 shows 512 to 767 -3 shows 768 to 1023 -4 shows 1024 to 1279 -5 shows 1280 to 1535 -6 shows 1536 to 1791 -7 shows 1792 to 2047')
hwConnectDataLenStatFrameCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 8, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectDataLenStatFrameCounts.setStatus('current')
if mibBuilder.loadTexts: hwConnectDataLenStatFrameCounts.setDescription('An object uses to display connect data length stat frame counts through the connect data length dir- ection and the connect data length. ')
hwConnectMaxSnrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9), )
if mibBuilder.loadTexts: hwConnectMaxSnrTable.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrTable.setDescription('Description.')
hwConnectMaxSnrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9, 1), ).setIndexNames((0, "HUAWEI-WLAN-RADIO-MIB", "hwConnectMaxSnrPeerMAC"))
if mibBuilder.loadTexts: hwConnectMaxSnrEntry.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrEntry.setDescription('Description.')
hwConnectMaxSnrPeerMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9, 1, 1), MacAddress())
if mibBuilder.loadTexts: hwConnectMaxSnrPeerMAC.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrPeerMAC.setDescription('Description.')
hwConnectMaxSnrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectMaxSnrValue.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrValue.setDescription('An object is used to display max snr value when connection.')
hwConnectMaxSnrNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectMaxSnrNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrNoiseFloor.setDescription('noise floor')
hwConnectMaxSnrSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectMaxSnrSSID.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrSSID.setDescription('neighbor ssid')
hwConnectMaxSnrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 9, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwConnectMaxSnrTime.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrTime.setDescription('last time')
hwRadioQueryPowerlevelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 10), )
if mibBuilder.loadTexts: hwRadioQueryPowerlevelTable.setStatus('current')
if mibBuilder.loadTexts: hwRadioQueryPowerlevelTable.setDescription('Table for query powerlevel of the appointed AP if set channel and bandwidth.')
hwRadioQueryPowerlevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 10, 1), ).setIndexNames((0, "HUAWEI-WLAN-DEVICE-MIB", "hwApIndex"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioQueryPowerlevelChannel"), (0, "HUAWEI-WLAN-RADIO-MIB", "hwRadioQueryPowerlevelBandwidth"))
if mibBuilder.loadTexts: hwRadioQueryPowerlevelEntry.setStatus('current')
if mibBuilder.loadTexts: hwRadioQueryPowerlevelEntry.setDescription('Entry for query powerlevel table .')
hwRadioQueryPowerlevelChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: hwRadioQueryPowerlevelChannel.setStatus('current')
if mibBuilder.loadTexts: hwRadioQueryPowerlevelChannel.setDescription('The channel if it will be set as an index.')
hwRadioQueryPowerlevelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 10, 1, 2), Integer32())
if mibBuilder.loadTexts: hwRadioQueryPowerlevelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwRadioQueryPowerlevelBandwidth.setDescription('The bandwidth if it will be set as an index.')
hwRadioQueryPowerlevelMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 34, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRadioQueryPowerlevelMax.setStatus('current')
if mibBuilder.loadTexts: hwRadioQueryPowerlevelMax.setDescription('The result ,it shows the number of powerlevel , which begins from zero.')
hwRadioConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35))
hwRadioCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 1))
hwRadioCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 1, 1)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioProfileGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioManageGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateStatisicsGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAuthNeighborInfGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLoadBalanceGroupGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLoadBalanceGroupMemberGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUncontrolAPInfGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPerformanceStatGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUnauthenticNeighborInfoGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRegionCalibrateGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioGlobalGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioNotifyGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioNotifyObjectGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioParaStatisticGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioManageGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCalibrateStatisicsGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAuthNeighborInfGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioLoadBalanceGroupMemberGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPerformanceStatGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioUnauthenticNeighborInfoGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioInfoGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioInfoGroup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioCompliance = hwRadioCompliance.setStatus('current')
if mibBuilder.loadTexts: hwRadioCompliance.setDescription('Description.')
hwRadioObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2))
hwRadioProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 1)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioType"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRateMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRateValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPowerMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateInterval"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPERThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioConfictRateThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRTSThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioFragmentThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioShortFrameRetryTimes"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLongFrameRetryTimes"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSupportShortPreamble"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDTIMInterval"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBeaconInterval"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWMMProfileName"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioProfileRowStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211nGuardIntervalMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211nAMPDUMaxLengthExponent"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioInterfDetDevice"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioApComInterfThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioApAdjInterfThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaInterfThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDeviceReportDuration"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRTSMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWifiLight"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBeamformingSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWidsDevSynchronizationInt"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelSwitchAnnouncement"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelSwitchMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaAccessSignalStrengthSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaAccessSignalStrengthThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBackgroundListenNeighborSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBackgroundScanningServiceThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBackgroundScanningClientThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaAccessRateLimitSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaAccessRateLimitThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSpectrumAnalysisScanPeriod"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSpectrumAnalysisScanInterval"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioHighDenseSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioHighDenseMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaOfflineSignalStrengthSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaOfflineSignalStrengthThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaOfflineRateLimitSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaOfflineRateThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDynamicAdjustPowerSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationReportTime"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationScanInterval"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationScanPeriod"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAirTimeScheduleSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateScanCycle"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacPolicyType"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacPolicySwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacAccessThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacRoamThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacHideSSIDSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211acGuardIntervalMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211acAMPDUMaxLengthExponent"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211bgBasicRateSet"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211bgSupportRateSet"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211aBasicRateSet"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211aSupportRateSet"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211nSupportMCS"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211acSupportMcsMapMcs"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMulticastRate2G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMulticastRate5G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLegacyStationEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationScanChannel2G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationScanChannel5G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAMSDUTxEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAMSDUTxMaxSubFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioProfileGroup = hwRadioProfileGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioProfileGroup.setDescription('Description.')
hwRadioManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 2)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngBaseBssID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngRadioProfileName"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngState"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAvailableSntennaNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWorkingChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWorkingPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWorkingPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWorkingChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211nMCSValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWidsWorkMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMngBinded"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDeviceDetectEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMaxTxPwrLvl"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPwrAttRange"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPwrAttValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAntennaGain"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBridgeWhitelistEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBridgeWhitelistName"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBridgeStpSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBridgeSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBridgeMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUndoBridgeWhitelist"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUserTrafficScheduler"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCountermeasuresMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioFrequency"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCountermeasuresSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSpectrumAnalysisEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioWidsAttackDetEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMeshWhitelistName"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUndoMeshWhitelist"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMeshRole"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLocationScanChannelEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio80211nMulticastMCSValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSpectrogramServerReportEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRadioMulticastRateValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio11acSpatialStream"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadio11acMCSValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActiveSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioManageGroup = hwRadioManageGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioManageGroup.setDescription('Description.')
hwRadioCalibrateStatisicsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 3)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalStatisSignalBadCount"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalStatisCalibratePowerCount"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalStatisCalibrateChannelCount"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateStatisicsOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioCalibrateStatisicsGroup = hwRadioCalibrateStatisicsGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateStatisicsGroup.setDescription('Description.')
hwRadioAuthNeighborInfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 4)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwAuthenticRadioNeighborAPID"), ("HUAWEI-WLAN-RADIO-MIB", "hwAuthenticRadioNeighborChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwAuthenticRadioNeighborFrontAttenu"), ("HUAWEI-WLAN-RADIO-MIB", "hwAuthenticRadioNeighborBackAttenu"), ("HUAWEI-WLAN-RADIO-MIB", "hwAuthenticRadioNeighborSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioAuthNeighborInfGroup = hwRadioAuthNeighborInfGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioAuthNeighborInfGroup.setDescription('Description.')
hwRadioLoadBalanceGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 5)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwLBGroupMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBGapThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBAssociateThreshold"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBGroupStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioLoadBalanceGroupGroup = hwRadioLoadBalanceGroupGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupGroup.setDescription('Description.')
hwRadioLoadBalanceGroupMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 6)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwLBMemberRadioChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBMemberRadioPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBMemberRadioPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBMemberRadioSeesionNum"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBMemberRadioTraffic"), ("HUAWEI-WLAN-RADIO-MIB", "hwLBMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioLoadBalanceGroupMemberGroup = hwRadioLoadBalanceGroupMemberGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioLoadBalanceGroupMemberGroup.setDescription('Description.')
hwRadioUncontrolAPInfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 7)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwUncontrolAPBSSID"), ("HUAWEI-WLAN-RADIO-MIB", "hwAuthAPIndex"), ("HUAWEI-WLAN-RADIO-MIB", "hwUncontrolAPChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwUncontrolAPRSSI"), ("HUAWEI-WLAN-RADIO-MIB", "hwUncontrolAPSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioUncontrolAPInfGroup = hwRadioUncontrolAPInfGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioUncontrolAPInfGroup.setDescription('Description.')
hwRadioPerformanceStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 8)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvBytes"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendBytes"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendRtsSuccess"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendUnicast"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendBroadcast"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendFailFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvPhyErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvCrcErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvMicErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvKeyDecryptErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRetryFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPER"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChUtilizationRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPerformanceStatOperMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPEROfLastPeriod"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownMacErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvUnicastFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvMngFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvCtrlFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendMngFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendCtrlFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaMaxSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaMinSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaAvgSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRecvRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDropRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAirPortDhcpFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAirPortEapolFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAirPortPsPollFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAssocRequestFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAssocResponseFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioReassocRequestFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioReassocResponseFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDisassocFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDisauthFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvBytes64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendBytes64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendRtsSuccess64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendUnicast64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendBroadcast64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendFailFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvPhyErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvCrcErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvMicErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvKeyDecryptErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRetryFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownMacErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioNoise"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSendDropFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRcvDropFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelFreeRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioTxRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioRxRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChInterferenceRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioPerformanceStatGroup = hwRadioPerformanceStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioPerformanceStatGroup.setDescription('Description.')
hwRadioUnauthenticNeighborInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 9)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwUnauthenticRadioNeighborBSSID"), ("HUAWEI-WLAN-RADIO-MIB", "hwUnauthenticRadioNeighborRSSI"), ("HUAWEI-WLAN-RADIO-MIB", "hwunauthenticRadioNeighborChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwUnauthenticRadioNeighborSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioUnauthenticNeighborInfoGroup = hwRadioUnauthenticNeighborInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioUnauthenticNeighborInfoGroup.setDescription('Description.')
hwRadioRegionCalibrateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 10)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRegionCalibrateStartupMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRegionCalibrateAutoTime"), ("HUAWEI-WLAN-RADIO-MIB", "hwRegionCalibrateListenMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRegionCalibrateStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioRegionCalibrateGroup = hwRadioRegionCalibrateGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioRegionCalibrateGroup.setDescription('Description.')
hwRadioGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 11)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwBatchRadioProfileStartNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchRadioProfileNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchRadioProfileReturnNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchRadioProfileName"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchLoadBalanceGroupStartNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchLoadBalanceGroupNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchLoadBalanceGroupReturnNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchLoadBalanceGroupName"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchUncontrolAPStartNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchUncontrolAPNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchUncontrolAPReturnNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchUncontrolAPBssid"), ("HUAWEI-WLAN-RADIO-MIB", "hwBatchUncontrolAPAuthNeighborIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioGlobalGroup = hwRadioGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioGlobalGroup.setDescription('Description.')
hwRadioNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 12)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelChangedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSignalEnvDeteriorationNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioSignalEnvResumeNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApMonitorModeChangedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwAPCoInterfDetectedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwAPCoInterfClearNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwNerborInterfDetectedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwNeiborInterfClearNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwStaInterfDetectedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwStaInterfClearNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwOtherDeviceInterfDetectedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwOtherDeviceInterfClearNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownRecovNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSDetectRogueNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioNotSupportChannelNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioNotSupportPowerLevelNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAntennaGainIsUnlawfulNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPowerChangedNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApAccessUserNumExceedThresholdNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApAccessUserNumExceedThresholdRecovNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApRoamUserNumExceedThresholdNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApRoamUserNumExceedThresholdRecovNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApAccessChannelUtilExceedThresholdNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApAccessChannelUtilExceedThresholdRecovNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApRoamChannelUtilExceedThresholdNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwApRoamChannelUtilExceedThresholdRecovNotify"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUploadRemoteCaptureFileNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioNotifyGroup = hwRadioNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioNotifyGroup.setDescription('Description.')
hwRadioNotifyObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 13)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioConflictRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwApMonitorMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwApPreMonitorMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwApInterfBssid"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfStaMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownCause"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfApChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwInterfRSSI"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoAPID"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRadioId"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoAPMAC"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueMAC"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueSSId"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueType"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueRSSI"), ("HUAWEI-WLAN-RADIO-MIB", "hwWIDSTrapInfoRogueChanID"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioActualAntennaGain"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLegitimateAntennaGain"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelChangedReason"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioChannelChangedReasonStr"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioDownCauseStr"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioUacUserNum"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPreActualChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPowerChangedReasonStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioNotifyObjectGroup = hwRadioNotifyObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioNotifyObjectGroup.setDescription('Description.')
hwRadioParaStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 14)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioStaAveSignalStrength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioParaStatisticGroup = hwRadioParaStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioParaStatisticGroup.setDescription('Description.')
hwMacRadioManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 15)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngBaseBssID"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngRadioProfileName"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngState"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAvailableSntennaNumber"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioWorkingChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioWorkingPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioWorkingPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioWorkingChannelBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadio80211nMCSValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioWidsWorkMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMngBinded"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMaxTxPwrLvl"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPwrAttRange"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPwrAttValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAntennaGain"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioBridgeWhitelistEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioBridgeWhitelistName"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioBridgeStpSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioBridgeSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioBridgeMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioUndoBridgeWhitelist"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioUserTrafficScheduler"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCountermeasuresMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioFrequency"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCountermeasuresSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSpectrumAnalysisEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwMACRadioWidsAttackDetEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMeshWhitelistName"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacUndoMeshWhitelist"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMeshRole"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioLocationEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioLocationScanChannelEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadio80211nMulticastMCSValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSpectrogramServerReportEnable"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMulticastRateValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadio11acSpatialStream"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadio11acMCSValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioActiveSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioManageGroup = hwMacRadioManageGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioManageGroup.setDescription('Description.')
hwMacRadioCalibrateStatisicsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 16)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCalStatisSignalBadCount"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCalStatisCalibratePowerCount"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCalStatisCalibrateChannelCount"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioCalibrateStatisicsOperMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioCalibrateStatisicsGroup = hwMacRadioCalibrateStatisicsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioCalibrateStatisicsGroup.setDescription('Description.')
hwMacRadioAuthNeighborInfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 17)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacAuthenticRadioNeighborChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacAuthenticRadioNeighborFrontAttenu"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacAuthenticRadioNeighborBackAttenu"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacAuthenticRadioNeighborAPMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacAuthenticRadioNeighborSSID"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacAuthenticRadioNeighborAPID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioAuthNeighborInfGroup = hwMacRadioAuthNeighborInfGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioAuthNeighborInfGroup.setDescription('Description.')
hwMacRadioLoadBalanceGroupMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 18)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacLBMemberRadioChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacLBMemberRadioPowerLevel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacLBMemberRadioPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacLBMemberRadioSeesionNum"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacLBMemberRadioTraffic"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacLBMemberRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioLoadBalanceGroupMemberGroup = hwMacRadioLoadBalanceGroupMemberGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioLoadBalanceGroupMemberGroup.setDescription('Description.')
hwMacRadioPerformanceStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 19)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvBytes"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendBytes"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendRtsSuccess"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendUnicast"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendBroadcast"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendFailFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvPhyErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvCrcErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvMicErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvKeyDecryptErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRetryFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPER"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioChUtilizationRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPerformanceStatOperMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPEROfLastPeriod"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioDownMacErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvUnicastFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvMngFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvCtrlFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendMngFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendCtrlFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioStaMaxSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioStaMinSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioStaAvgSignalStrength"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRecvRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioDropRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAirPortDhcpFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAirPortEapolFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAirPortPsPollFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAssocRequestFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAssocResponseFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioReassocRequestFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioReassocResponseFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioDisassocFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioDisauthFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvBytes64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendBytes64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendRtsSuccess64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendUnicast64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendBroadcast64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendFailFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvPhyErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvCrcErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvMicErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvKeyDecryptErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRetryFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioDownMacErrFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioNoise"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioActualBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioSendDropFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRcvDropFrames64Bits"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioChannelFreeRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioTxRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioRxRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioChInterferenceRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioPerformanceStatGroup = hwMacRadioPerformanceStatGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioPerformanceStatGroup.setDescription('Description.')
hwMacRadioUnauthenticNeighborInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 20)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacUnauthenticRadioNeighborBSSID"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacUnauthenticRadioNeighborRSSI"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacunauthenticRadioNeighborChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacUnauthenticRadioNeighborSSID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioUnauthenticNeighborInfoGroup = hwMacRadioUnauthenticNeighborInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioUnauthenticNeighborInfoGroup.setDescription('Description.')
hwRadioInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 21)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioDecsption"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioPortType"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMaxMtu"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAdminStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioOperStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioLastChange"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioInfoUpDownTimes"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAutoOffSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAutoOffStartTime"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioAutoOffEndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioInfoGroup = hwRadioInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioInfoGroup.setDescription('Description.')
hwMacRadioInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 22)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioDecsption"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioPortType"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMaxMtu"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioBandwidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAdminStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioOperStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioLastChange"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioInfoUpDownTimes"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAutoOffSwitch"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAutoOffStartTime"), ("HUAWEI-WLAN-RADIO-MIB", "hwMacRadioAutoOffEndTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMacRadioInfoGroup = hwMacRadioInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hwMacRadioInfoGroup.setDescription('Description.')
hwRadioCalibrateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 23)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateMode"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateTime"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateManualStartup"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateCycle"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibratePolicy"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibratesensitivity"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioGlobalCalibrateChannel5G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioGlobalScanChannel5G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioGlobalCalibrateChannel2G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioGlobalScanChannel2G"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioGlobalCalibrate5gBandWidth"), ("HUAWEI-WLAN-RADIO-MIB", "hwRadioCalibrateAutoStartTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRadioCalibrateGroup = hwRadioCalibrateGroup.setStatus('current')
if mibBuilder.loadTexts: hwRadioCalibrateGroup.setDescription('Description.')
hwConnectStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 24)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusPeerMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusSsid"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatus"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusSNR"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusNoiseFloor"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusChannel"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusActualTxPower"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusBeaconInterval"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusCurrentRate"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusTxBeamforming"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusActualCountryCode"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatusDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnectStatusGroup = hwConnectStatusGroup.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatusGroup.setDescription('Description.')
hwConnectStatisticsGruop = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 25)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatisticsPeerMac"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectRxOkUcastDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectRxOkUcastDataBytes"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectTxOkUcastDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectTxOkUcastDataBytes"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectRxThroughput"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectTxThroughput"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectRxErrFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectTxErrUcastDataFrames"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectUcastDataFrameTxRetryRatio"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectOnlineTime"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectStatisticsReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnectStatisticsGruop = hwConnectStatisticsGruop.setStatus('current')
if mibBuilder.loadTexts: hwConnectStatisticsGruop.setDescription('Description.')
hwConnectRateHistogramGruop = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 26)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwConnectRateStatDirection"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectRateStatRange"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectRateStatUcastDataFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnectRateHistogramGruop = hwConnectRateHistogramGruop.setStatus('current')
if mibBuilder.loadTexts: hwConnectRateHistogramGruop.setDescription('Description.')
hwConnectAMPDUHistogramGruop = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 27)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwConnectAMPDUStatDirection"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectAMPDUStatRange"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectAMPDUStatUcastDataFrames"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnectAMPDUHistogramGruop = hwConnectAMPDUHistogramGruop.setStatus('current')
if mibBuilder.loadTexts: hwConnectAMPDUHistogramGruop.setDescription('Description.')
hwConnectLenHistogramGruop = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 28)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwConnectDataLenStatDirection"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectDataLenStatLength"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectDataLenStatFrameCounts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnectLenHistogramGruop = hwConnectLenHistogramGruop.setStatus('current')
if mibBuilder.loadTexts: hwConnectLenHistogramGruop.setDescription('Description.')
hwConnectMaxSnrGruop = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 139, 3, 35, 2, 29)).setObjects(("HUAWEI-WLAN-RADIO-MIB", "hwConnectMaxSnrPeerMAC"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectMaxSnrValue"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectMaxSnrNoiseFloor"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectMaxSnrSSID"), ("HUAWEI-WLAN-RADIO-MIB", "hwConnectMaxSnrTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwConnectMaxSnrGruop = hwConnectMaxSnrGruop.setStatus('current')
if mibBuilder.loadTexts: hwConnectMaxSnrGruop.setDescription('Description.')
mibBuilder.exportSymbols("HUAWEI-WLAN-RADIO-MIB", hwRadioPerformanceStatOperMode=hwRadioPerformanceStatOperMode, hwBatchUncontrolAPStartNumber=hwBatchUncontrolAPStartNumber, hwMacRadioCalibrateStatisicsGroup=hwMacRadioCalibrateStatisicsGroup, hwApMonitorModeChangedNotify=hwApMonitorModeChangedNotify, hwRadioWorkingChannelBandwidth=hwRadioWorkingChannelBandwidth, hwConnectRateStatUcastDataFrames=hwConnectRateStatUcastDataFrames, hwMacRadioActiveSwitch=hwMacRadioActiveSwitch, hwRadioSendRtsSuccess64Bits=hwRadioSendRtsSuccess64Bits, hwRadioShortFrameRetryTimes=hwRadioShortFrameRetryTimes, hwRadioStaOfflineRateThreshold=hwRadioStaOfflineRateThreshold, hwMacUnauthenticRadioNeighborSSID=hwMacUnauthenticRadioNeighborSSID, hwRadioAutoOffSwitch=hwRadioAutoOffSwitch, hwMacRadioSendFrames64Bits=hwMacRadioSendFrames64Bits, hwRadioFrequency=hwRadioFrequency, hwMacRadioRcvMngFrames=hwMacRadioRcvMngFrames, hwApRadioTxPower=hwApRadioTxPower, hwConnectTxOkUcastDataFrames=hwConnectTxOkUcastDataFrames, hwMacAuthenticRadioNeighborAPID=hwMacAuthenticRadioNeighborAPID, hwRadioWorkingPower=hwRadioWorkingPower, hwMacRadioPortType=hwMacRadioPortType, hwRadioBridgeMode=hwRadioBridgeMode, hwBatchRadioProfileStartNumber=hwBatchRadioProfileStartNumber, hwMacRadioMac=hwMacRadioMac, hwStaInterfClearNotify=hwStaInterfClearNotify, hwRadioStaInterfThreshold=hwRadioStaInterfThreshold, hwConnectAMPDUHistogramTable=hwConnectAMPDUHistogramTable, hwMacRadioManageTable=hwMacRadioManageTable, hwOtherDeviceInterfClearNotify=hwOtherDeviceInterfClearNotify, hwRadioPreActualChannel=hwRadioPreActualChannel, hwConnectLenHistogramEntry=hwConnectLenHistogramEntry, hwRadioCompliance=hwRadioCompliance, hwRadioNotifications=hwRadioNotifications, hwRadioBasicSettingEntry=hwRadioBasicSettingEntry, hwRadio80211acGuardIntervalMode=hwRadio80211acGuardIntervalMode, hwRadioMngBaseBssID=hwRadioMngBaseBssID, hwConnectMaxSnrTable=hwConnectMaxSnrTable, hwRadioPEROfLastPeriod=hwRadioPEROfLastPeriod, hwMacRadioPER=hwMacRadioPER, hwMacRadioLocationScanChannelEnable=hwMacRadioLocationScanChannelEnable, hwRadioChannelChangedReasonStr=hwRadioChannelChangedReasonStr, hwWIDSTrapInfoRogueMAC=hwWIDSTrapInfoRogueMAC, hwRadioRcvMicErrFrames=hwRadioRcvMicErrFrames, hwMacRadioRcvKeyDecryptErrFrames=hwMacRadioRcvKeyDecryptErrFrames, hwRadioStaOfflineSignalStrengthSwitch=hwRadioStaOfflineSignalStrengthSwitch, hwRadioRxRate=hwRadioRxRate, hwRadioApComInterfThreshold=hwRadioApComInterfThreshold, hwRadioCountermeasuresSwitch=hwRadioCountermeasuresSwitch, hwMacRadioStaAvgSignalStrength=hwMacRadioStaAvgSignalStrength, hwRadioSendRate=hwRadioSendRate, hwRadioManageGroup=hwRadioManageGroup, hwRadioAutoOffEndTime=hwRadioAutoOffEndTime, hwRadioStaMaxSignalStrength=hwRadioStaMaxSignalStrength, hwRadioLocationEnable=hwRadioLocationEnable, hwRadioNotifyObjects=hwRadioNotifyObjects, hwRadioManageEntry=hwRadioManageEntry, hwRadioChannelMode=hwRadioChannelMode, hwRadioMeshWhitelistName=hwRadioMeshWhitelistName, hwConnectStatusDistance=hwConnectStatusDistance, hwRadioFrames=hwRadioFrames, hwRadio80211acSupportMcsMapMcs=hwRadio80211acSupportMcsMapMcs, hwMacRadioMngRadioProfileName=hwMacRadioMngRadioProfileName, hwRadioRcvPhyErrFrames64Bits=hwRadioRcvPhyErrFrames64Bits, hwRadioMngState=hwRadioMngState, hwRadioBackgroundScanningServiceThreshold=hwRadioBackgroundScanningServiceThreshold, hwRadioChInterferenceRate=hwRadioChInterferenceRate, hwMacRadioSendMngFrames=hwMacRadioSendMngFrames, hwMacRadioChInterferenceRate=hwMacRadioChInterferenceRate, hwRadioUacUserNum=hwRadioUacUserNum, hwRadioParaStatisticTable=hwRadioParaStatisticTable, hwRadioRcvErrFrames64Bits=hwRadioRcvErrFrames64Bits, hwRadioWorkingPowerLevel=hwRadioWorkingPowerLevel, hwRadioDisauthFrames=hwRadioDisauthFrames, hwInterfRSSI=hwInterfRSSI, hwRadioCalibrateAutoStartTime=hwRadioCalibrateAutoStartTime, hwRadioApAdjInterfThreshold=hwRadioApAdjInterfThreshold, hwMacRadioAuthNeighborInfTable=hwMacRadioAuthNeighborInfTable, hwConnectRateStatDirection=hwConnectRateStatDirection, hwMacRadioRcvCtrlFrames=hwMacRadioRcvCtrlFrames, hwMacAuthenticRadioNeighborFrontAttenu=hwMacAuthenticRadioNeighborFrontAttenu, hwRadioUacPolicySwitch=hwRadioUacPolicySwitch, hwConnectStatus=hwConnectStatus, hwMacRadioRxRate=hwMacRadioRxRate, hwConnectStatisticsGruop=hwConnectStatisticsGruop, hwRadioRTSThreshold=hwRadioRTSThreshold, hwMacRadioRcvPhyErrFrames64Bits=hwMacRadioRcvPhyErrFrames64Bits, hwRadioRateMode=hwRadioRateMode, hwWIDSTrapInfoRogueType=hwWIDSTrapInfoRogueType, hwApInterfBssid=hwApInterfBssid, hwMacRadioUserTrafficScheduler=hwMacRadioUserTrafficScheduler, hwRadioAvailableSntennaNumber=hwRadioAvailableSntennaNumber, hwConnectStatusBeaconInterval=hwConnectStatusBeaconInterval, hwConnectTxOkUcastDataBytes=hwConnectTxOkUcastDataBytes, hwRadioRcvCtrlFrames=hwRadioRcvCtrlFrames, hwRadioSignalEnvResumeNotify=hwRadioSignalEnvResumeNotify, hwRadioAuthNeighborInfGroup=hwRadioAuthNeighborInfGroup, hwMacunauthenticRadioNeighborChannel=hwMacunauthenticRadioNeighborChannel, hwRadioStaAccessRateLimitThreshold=hwRadioStaAccessRateLimitThreshold, hwApRoamUserNumExceedThresholdNotify=hwApRoamUserNumExceedThresholdNotify, hwBatchUncontrolAPNumber=hwBatchUncontrolAPNumber, hwConnectMaxSnrValue=hwConnectMaxSnrValue, hwMacLBMemberRowStatus=hwMacLBMemberRowStatus, hwConnectMaxSnrEntry=hwConnectMaxSnrEntry, hwLBGroupRowStatus=hwLBGroupRowStatus, hwRadioCalStatisCalibrateChannelCount=hwRadioCalStatisCalibrateChannelCount, hwRadioGlobalCalibrate5gBandWidth=hwRadioGlobalCalibrate5gBandWidth, hwRadioQueryPowerlevelChannel=hwRadioQueryPowerlevelChannel, hwMacRadioPerformanceStatGroup=hwMacRadioPerformanceStatGroup, hwRadioNoise=hwRadioNoise, hwLBGroupStatus=hwLBGroupStatus, hwRadioSendFrames64Bits=hwRadioSendFrames64Bits, hwRadioLoadBalanceGroupGroup=hwRadioLoadBalanceGroupGroup, hwMacRadioRcvCrcErrFrames=hwMacRadioRcvCrcErrFrames, hwRadioLoadBalanceGroupTable=hwRadioLoadBalanceGroupTable, hwMacRadioBridgeStpSwitch=hwMacRadioBridgeStpSwitch, hwRadioDTIMInterval=hwRadioDTIMInterval, hwMacRadioBridgeMode=hwMacRadioBridgeMode, hwConnectStatusSNR=hwConnectStatusSNR, hwRadioReassocResponseFrames=hwRadioReassocResponseFrames, hwRadioAirPortDhcpFrames=hwRadioAirPortDhcpFrames, hwMacRadioFrequency=hwMacRadioFrequency, hwMacRadioPEROfLastPeriod=hwMacRadioPEROfLastPeriod, hwRadioLocationScanChannel2G=hwRadioLocationScanChannel2G, hwRadioPowerMode=hwRadioPowerMode, hwRadioRcvUnicastFrames=hwRadioRcvUnicastFrames, hwRadioQueryPowerlevelTable=hwRadioQueryPowerlevelTable, hwRadioUacHideSSIDSwitch=hwRadioUacHideSSIDSwitch, hwRadioRcvCrcErrFrames64Bits=hwRadioRcvCrcErrFrames64Bits, hwAuthenticRadioNeighborSSID=hwAuthenticRadioNeighborSSID, hwRadioPowerChangedReasonStr=hwRadioPowerChangedReasonStr, hwRadioBackgroundListenNeighborSwitch=hwRadioBackgroundListenNeighborSwitch, hwMacRadioRetryFrames64Bits=hwMacRadioRetryFrames64Bits, hwRadioCountermeasuresMode=hwRadioCountermeasuresMode, hwMacRadioReassocResponseFrames=hwMacRadioReassocResponseFrames, hwWIDSTrapInfoRadioId=hwWIDSTrapInfoRadioId, hwRadioUnauthenticNeighborInfoEntry=hwRadioUnauthenticNeighborInfoEntry, hwRadio11acMCSValue=hwRadio11acMCSValue, hwConnectProfileTable=hwConnectProfileTable, hwMacRadioRcvFrames=hwMacRadioRcvFrames, hwConnectOnlineTime=hwConnectOnlineTime, hwRadioBridgeSwitch=hwRadioBridgeSwitch, hwMacRadioUnauthenticNeighborInfoTable=hwMacRadioUnauthenticNeighborInfoTable, hwRadioAuthNeighborInfEntry=hwRadioAuthNeighborInfEntry, hwMacRadioSendFrames=hwMacRadioSendFrames, hwRadioMngPower=hwRadioMngPower, hwMacRadioRecvRate=hwMacRadioRecvRate, hwMacRadioAutoOffSwitch=hwMacRadioAutoOffSwitch, hwMacRadioAutoOffEndTime=hwMacRadioAutoOffEndTime, hwRadioMngChannel=hwRadioMngChannel, hwRadioNotifyObjectGroup=hwRadioNotifyObjectGroup, hwConnectAMPDUStatDirection=hwConnectAMPDUStatDirection, hwRadioCalibrateGroup=hwRadioCalibrateGroup, hwConnectRxOkUcastDataBytes=hwConnectRxOkUcastDataBytes, hwConnectSsid=hwConnectSsid, hwBatchUncontrolAPAuthNeighborIndex=hwBatchUncontrolAPAuthNeighborIndex, hwMacRadioMeshRole=hwMacRadioMeshRole, hwConnectStatusGIMode=hwConnectStatusGIMode, hwMacLBMemberRadioChannel=hwMacLBMemberRadioChannel, hwConnectTxThroughput=hwConnectTxThroughput, hwUnauthenticRadioNeighborRSSI=hwUnauthenticRadioNeighborRSSI, hwMacRadioAdminStatus=hwMacRadioAdminStatus, hwMacRadioMngPowerLevel=hwMacRadioMngPowerLevel, hwConnectStatisticsEntry=hwConnectStatisticsEntry, hwRadioPwrAttValue=hwRadioPwrAttValue, hwBatchRadioProfileReturnNumber=hwBatchRadioProfileReturnNumber, hwBatchLoadBalanceGroupStartNumber=hwBatchLoadBalanceGroupStartNumber, hwRadioBridgeStpSwitch=hwRadioBridgeStpSwitch, hwRadioMaxMtu=hwRadioMaxMtu, hwApMonitorMode=hwApMonitorMode, hwRadioRcvKeyDecryptErrFrames64Bits=hwRadioRcvKeyDecryptErrFrames64Bits, hwRadioPwrAttRange=hwRadioPwrAttRange, hwMacRadioMngBaseBssID=hwMacRadioMngBaseBssID, hwMacRadioMeshWhitelistName=hwMacRadioMeshWhitelistName, hwRadioMngRadioProfileName=hwRadioMngRadioProfileName, hwMacRadioBandwidth=hwMacRadioBandwidth, hwRadioSendUnicast64Bits=hwRadioSendUnicast64Bits, hwRadioRateValue=hwRadioRateValue, hwConnectRateHistogramTable=hwConnectRateHistogramTable, hwMacRadioActualBandwidth=hwMacRadioActualBandwidth, hwMacRadioCalStatisSignalBadCount=hwMacRadioCalStatisSignalBadCount, hwConnectLenHistogramTable=hwConnectLenHistogramTable, hwRadio80211nMCSValue=hwRadio80211nMCSValue, hwRadioStaAccessRateLimitSwitch=hwRadioStaAccessRateLimitSwitch, hwRadioWidsDevSynchronizationInt=hwRadioWidsDevSynchronizationInt, PYSNMP_MODULE_ID=hwRadio, hwMacRadioSendDataFrames=hwMacRadioSendDataFrames, hwRadio80211bgBasicRateSet=hwRadio80211bgBasicRateSet, hwRadioLocationReportTime=hwRadioLocationReportTime, hwRadioSendFailFrames64Bits=hwRadioSendFailFrames64Bits, hwRadioMac=hwRadioMac, hwRadioMngChannelBandwidth=hwRadioMngChannelBandwidth, hwMacLBMemberRadioTraffic=hwMacLBMemberRadioTraffic, hwRadioUacAccessThreshold=hwRadioUacAccessThreshold, hwRadioStaAvgSignalStrength=hwRadioStaAvgSignalStrength, hwWIDSTrapInfoRogueRSSI=hwWIDSTrapInfoRogueRSSI, hwRadioCalibrateMode=hwRadioCalibrateMode, hwUncontrolAPSSID=hwUncontrolAPSSID, hwRadioPowerChangedNotify=hwRadioPowerChangedNotify, hwUnauthenticRadioNeighborSSID=hwUnauthenticRadioNeighborSSID, hwMacRadioRcvSignalStrength=hwMacRadioRcvSignalStrength, hwRadioFragmentThreshold=hwRadioFragmentThreshold, hwLBMemberRadioChannel=hwLBMemberRadioChannel, hwMacRadioRcvUnicastFrames=hwMacRadioRcvUnicastFrames, hwConnectRateHistogramEntry=hwConnectRateHistogramEntry, hwRadioNotifyGroup=hwRadioNotifyGroup, hwRadioRcvFrames64Bits=hwRadioRcvFrames64Bits, hwMacRadioBridgeWhitelistName=hwMacRadioBridgeWhitelistName, hwRadioBeaconInterval=hwRadioBeaconInterval, hwRadioStaAveSignalStrength=hwRadioStaAveSignalStrength, hwRadioLocationScanChannel5G=hwRadioLocationScanChannel5G, hwRadioPerformanceStatTable=hwRadioPerformanceStatTable, hwRadioRTSMode=hwRadioRTSMode, hwMacRadioSendBroadcast=hwMacRadioSendBroadcast, hwMacRadioMngBinded=hwMacRadioMngBinded, hwConnectAMPDUHistogramEntry=hwConnectAMPDUHistogramEntry, hwRadioMulticastRate2G=hwRadioMulticastRate2G, hwRadioProfileTable=hwRadioProfileTable, hwRadioGlobalCalibrateChannel5G=hwRadioGlobalCalibrateChannel5G, hwApAccessUserNumExceedThresholdNotify=hwApAccessUserNumExceedThresholdNotify, hwRadioWMMProfileName=hwRadioWMMProfileName, hwMacRadioBridgeWhitelistEnable=hwMacRadioBridgeWhitelistEnable, hwRadioCalibrateCycle=hwRadioCalibrateCycle, hwRadioPerformanceStatEntry=hwRadioPerformanceStatEntry, hwRadioAssocResponseFrames=hwRadioAssocResponseFrames, hwBatchLoadBalanceGroupReturnNumber=hwBatchLoadBalanceGroupReturnNumber, hwMacRadioWidsWorkMode=hwMacRadioWidsWorkMode, hwMacAuthenticRadioNeighborBackAttenu=hwMacAuthenticRadioNeighborBackAttenu, hwMacRadioRcvFrames64Bits=hwMacRadioRcvFrames64Bits, hwRadioRcvFrames=hwRadioRcvFrames, hwMacRadioFrames=hwMacRadioFrames, hwRadioDeviceReportDuration=hwRadioDeviceReportDuration, hwMacAuthenticRadioNeighborSSID=hwMacAuthenticRadioNeighborSSID, hwRadioStaAccessSignalStrengthThreshold=hwRadioStaAccessSignalStrengthThreshold, hwConnectStatisticsReset=hwConnectStatisticsReset, hwRadioCalibrateEnable=hwRadioCalibrateEnable, hwMacRadioDecsption=hwMacRadioDecsption, hwRadioLocationScanPeriod=hwRadioLocationScanPeriod, hwRadioConflictRate=hwRadioConflictRate, hwConnectStatusTable=hwConnectStatusTable, hwRadioUnauthenticNeighborInfoTable=hwRadioUnauthenticNeighborInfoTable, hwRadioUndoMeshWhitelist=hwRadioUndoMeshWhitelist, hwMacRadioDownMacErrFrames=hwMacRadioDownMacErrFrames, hwConnectPeerMac=hwConnectPeerMac, hwMacRadioChannelFreeRate=hwMacRadioChannelFreeRate, hwMacRadioInfoUpDownTimes=hwMacRadioInfoUpDownTimes, hwRadioSendBroadcast64Bits=hwRadioSendBroadcast64Bits, hwRadioGlobalScanChannel5G=hwRadioGlobalScanChannel5G, hwRadioUacRoamThreshold=hwRadioUacRoamThreshold, hwRadioWidsWorkMode=hwRadioWidsWorkMode, hwRadioUncontrolAPInfGroup=hwRadioUncontrolAPInfGroup, hwRadio80211nSupportMCS=hwRadio80211nSupportMCS, hwRadioRetryFrames=hwRadioRetryFrames, hwRadioSignalEnvDeteriorationNotify=hwRadioSignalEnvDeteriorationNotify, hwMacRadioRcvDataFrames=hwMacRadioRcvDataFrames, hwMacRadioLoadBalanceGroupMemberGroup=hwMacRadioLoadBalanceGroupMemberGroup)
mibBuilder.exportSymbols("HUAWEI-WLAN-RADIO-MIB", hwRadioSendBytes=hwRadioSendBytes, hwLBAssociateThreshold=hwLBAssociateThreshold, hwAuthenticRadioNeighborChannel=hwAuthenticRadioNeighborChannel, hwLBMemberRowStatus=hwLBMemberRowStatus, hwRadio80211acAMPDUMaxLengthExponent=hwRadio80211acAMPDUMaxLengthExponent, hwApAccessChannelUtilExceedThresholdRecovNotify=hwApAccessChannelUtilExceedThresholdRecovNotify, hwRadioRadioMulticastRateValue=hwRadioRadioMulticastRateValue, hwMacRadioPwrAttRange=hwMacRadioPwrAttRange, hwWIDSTrapInfoRogueChanID=hwWIDSTrapInfoRogueChanID, hwMacRadioCalStatisCalibrateChannelCount=hwMacRadioCalStatisCalibrateChannelCount, hwBatchRadioProfileName=hwBatchRadioProfileName, hwRadioCalStatisCalibratePowerCount=hwRadioCalStatisCalibratePowerCount, hwRadioStaOfflineSignalStrengthThreshold=hwRadioStaOfflineSignalStrengthThreshold, hwMacRadioWorkingPower=hwMacRadioWorkingPower, hwMacRadioCalibrateStatisicsEntry=hwMacRadioCalibrateStatisicsEntry, hwRadioDisassocFrames=hwRadioDisassocFrames, hwBatchUncontrolAPBssid=hwBatchUncontrolAPBssid, hwRadioUserTrafficScheduler=hwRadioUserTrafficScheduler, hwMacAuthenticRadioNeighborChannel=hwMacAuthenticRadioNeighborChannel, hwConnectMaxSnrNoiseFloor=hwConnectMaxSnrNoiseFloor, hwConnectAMPDUStatUcastDataFrames=hwConnectAMPDUStatUcastDataFrames, hwMacRadioAntennaGain=hwMacRadioAntennaGain, hwRadioCalibratesensitivity=hwRadioCalibratesensitivity, hwMacRadioSendRate=hwMacRadioSendRate, hwRadioCalibrateStatisicsGroup=hwRadioCalibrateStatisicsGroup, hwRadioChannelChangedReason=hwRadioChannelChangedReason, hwMacRadioSendRtsSuccess=hwMacRadioSendRtsSuccess, hwAuthenticRadioNeighborFrontAttenu=hwAuthenticRadioNeighborFrontAttenu, hwMacRadioRcvDropFrames64Bits=hwMacRadioRcvDropFrames64Bits, hwRadioDownCause=hwRadioDownCause, hwRadioCalibrateTime=hwRadioCalibrateTime, hwRadioStaMinSignalStrength=hwRadioStaMinSignalStrength, hwMacRadio11acSpatialStream=hwMacRadio11acSpatialStream, hwRadioBeamformingSwitch=hwRadioBeamformingSwitch, hwRadioID=hwRadioID, hwMacRadioRcvBytes64Bits=hwMacRadioRcvBytes64Bits, hwRadioSpectrogramServerReportEnable=hwRadioSpectrogramServerReportEnable, hwRadioUncontrolAPInfTable=hwRadioUncontrolAPInfTable, hwConnectStatusGroup=hwConnectStatusGroup, hwRadioLoadBalanceGroupMemberGroup=hwRadioLoadBalanceGroupMemberGroup, hwMacRadioRcvErrFrames=hwMacRadioRcvErrFrames, hwRadioManageTable=hwRadioManageTable, hwRadioChannelFreeRate=hwRadioChannelFreeRate, hwRadioLocationScanChannelEnable=hwRadioLocationScanChannelEnable, hwMacRadioRetryFrames=hwMacRadioRetryFrames, hwUncontrolAPRSSI=hwUncontrolAPRSSI, hwMacRadioCalibrateStatisicsOperMode=hwMacRadioCalibrateStatisicsOperMode, hwRadioAuthNeighborInfTable=hwRadioAuthNeighborInfTable, hwAPCoInterfDetectedNotify=hwAPCoInterfDetectedNotify, hwMacRadioReassocRequestFrames=hwMacRadioReassocRequestFrames, hwRadioUnauthenticNeighborInfoGroup=hwRadioUnauthenticNeighborInfoGroup, hwRadioCalStatisSignalBadCount=hwRadioCalStatisSignalBadCount, hwLBMemberRadioSeesionNum=hwLBMemberRadioSeesionNum, hwRadioCalibrateStatisicsOperMode=hwRadioCalibrateStatisicsOperMode, hwStaInterfDetectedNotify=hwStaInterfDetectedNotify, hwMacRadioOperStatus=hwMacRadioOperStatus, hwRadioSpectrumAnalysisEnable=hwRadioSpectrumAnalysisEnable, hwRegionCalibrateAutoTime=hwRegionCalibrateAutoTime, hwMacRadioManageGroup=hwMacRadioManageGroup, hwRadioWidsAttackDetEnable=hwRadioWidsAttackDetEnable, hwNeiborInterfClearNotify=hwNeiborInterfClearNotify, hwRadioUploadRemoteCaptureFileNotify=hwRadioUploadRemoteCaptureFileNotify, hwAuthenticRadioNeighborBackAttenu=hwAuthenticRadioNeighborBackAttenu, hwConnectRxOkUcastDataFrames=hwConnectRxOkUcastDataFrames, hwMacRadioManageEntry=hwMacRadioManageEntry, hwRadioRcvDropFrames64Bits=hwRadioRcvDropFrames64Bits, hwMacRadioSendBytes=hwMacRadioSendBytes, hwRadioOperStatus=hwRadioOperStatus, hwUncontrolAPChannel=hwUncontrolAPChannel, hwRadioAntennaGainIsUnlawfulNotify=hwRadioAntennaGainIsUnlawfulNotify, hwMACRadioWidsAttackDetEnable=hwMACRadioWidsAttackDetEnable, hwRadio80211nMulticastMCSValue=hwRadio80211nMulticastMCSValue, hwMacLBMemberRadioSeesionNum=hwMacLBMemberRadioSeesionNum, hwLBGapThreshold=hwLBGapThreshold, hwRadioLastChange=hwRadioLastChange, hwRadioDownCauseStr=hwRadioDownCauseStr, hwRadioSendDataFrames=hwRadioSendDataFrames, hwRadioAMSDUTxEnable=hwRadioAMSDUTxEnable, hwRadioBasicSettingTable=hwRadioBasicSettingTable, hwRadioStaAccessSignalStrengthSwitch=hwRadioStaAccessSignalStrengthSwitch, hwRegionCalibrateStatus=hwRegionCalibrateStatus, hwRadioRcvPower=hwRadioRcvPower, hwRadioDeviceDetectEnable=hwRadioDeviceDetectEnable, hwRadioLoadBalanceGroupMemberTable=hwRadioLoadBalanceGroupMemberTable, hwRadioRegionCalibrateGroup=hwRadioRegionCalibrateGroup, hwAuthenticRadioNeighborAPID=hwAuthenticRadioNeighborAPID, hwBatchRadioProfileNumber=hwBatchRadioProfileNumber, hwRadioActualAntennaGain=hwRadioActualAntennaGain, hwMacRadioAuthNeighborInfGroup=hwMacRadioAuthNeighborInfGroup, hwRadioReassocRequestFrames=hwRadioReassocRequestFrames, hwMacRadioSendUnicast=hwMacRadioSendUnicast, hwMacRadioPerformanceStatEntry=hwMacRadioPerformanceStatEntry, hwConnectStatusTxBeamforming=hwConnectStatusTxBeamforming, hwRadioGlobalScanChannel2G=hwRadioGlobalScanChannel2G, hwRadioProfileName=hwRadioProfileName, hwBatchLoadBalanceGroupName=hwBatchLoadBalanceGroupName, hwRadioChannelSwitchMode=hwRadioChannelSwitchMode, hwRadioQueryPowerlevelMax=hwRadioQueryPowerlevelMax, hwMacRadioPwrAttValue=hwMacRadioPwrAttValue, hwConnectMaxSnrTime=hwConnectMaxSnrTime, hwRadioWorkingChannel=hwRadioWorkingChannel, hwRadioHighDenseMode=hwRadioHighDenseMode, hwMacRadio80211nMCSValue=hwMacRadio80211nMCSValue, hwConnectRxErrFrames=hwConnectRxErrFrames, hwMacRadioLoadBalanceGroupMemberEntry=hwMacRadioLoadBalanceGroupMemberEntry, hwRadioObjectGroups=hwRadioObjectGroups, hwConnectProfileActived=hwConnectProfileActived, hwRadioAMSDUTxMaxSubFrames=hwRadioAMSDUTxMaxSubFrames, hwRadio80211nGuardIntervalMode=hwRadio80211nGuardIntervalMode, hwWIDSTrapInfoAPID=hwWIDSTrapInfoAPID, hwUncontrolAPBSSID=hwUncontrolAPBSSID, hwRadioCalibrateScanCycle=hwRadioCalibrateScanCycle, hwRadioRcvMicErrFrames64Bits=hwRadioRcvMicErrFrames64Bits, hwRadioAntennaGain=hwRadioAntennaGain, hwMacRadioMngPower=hwMacRadioMngPower, hwRadio80211aBasicRateSet=hwRadio80211aBasicRateSet, hwApPreMonitorMode=hwApPreMonitorMode, hwMacRadioAirPortDhcpFrames=hwMacRadioAirPortDhcpFrames, hwMacRadioRcvCrcErrFrames64Bits=hwMacRadioRcvCrcErrFrames64Bits, hwMacRadioRcvMicErrFrames64Bits=hwMacRadioRcvMicErrFrames64Bits, hwConnectStatusNoiseFloor=hwConnectStatusNoiseFloor, hwConnectAMPDUStatRange=hwConnectAMPDUStatRange, hwRadioProfileEntry=hwRadioProfileEntry, hwMacRadioStaMinSignalStrength=hwMacRadioStaMinSignalStrength, hwRadioRcvCrcErrFrames=hwRadioRcvCrcErrFrames, hwunauthenticRadioNeighborChannel=hwunauthenticRadioNeighborChannel, hwMacRadioAirPortEapolFrames=hwMacRadioAirPortEapolFrames, hwRadioSupportShortPreamble=hwRadioSupportShortPreamble, hwRadioSendDropFrames64Bits=hwRadioSendDropFrames64Bits, hwRegionCalibrateStartupMode=hwRegionCalibrateStartupMode, hwRadioQueryPowerlevelEntry=hwRadioQueryPowerlevelEntry, hwMacRadioMaxMtu=hwMacRadioMaxMtu, hwMacRadioRcvMicErrFrames=hwMacRadioRcvMicErrFrames, hwConnectStatusCurrentRateKbps=hwConnectStatusCurrentRateKbps, hwConnectDataLenStatDirection=hwConnectDataLenStatDirection, hwRadioProfileRowStatus=hwRadioProfileRowStatus, hwLBMemberRadioPower=hwLBMemberRadioPower, hwRadioRegionCalibrateEntry=hwRadioRegionCalibrateEntry, hwRadioMngPowerLevel=hwRadioMngPowerLevel, hwConnectMaxSnrPeerMAC=hwConnectMaxSnrPeerMAC, hwApRadioID=hwApRadioID, hwRadioSendFailFrames=hwRadioSendFailFrames, hwRadioLongFrameRetryTimes=hwRadioLongFrameRetryTimes, hwConnectStatusCurrentRate=hwConnectStatusCurrentRate, hwBatchUncontrolAPReturnNumber=hwBatchUncontrolAPReturnNumber, hwRadioAirTimeScheduleSwitch=hwRadioAirTimeScheduleSwitch, hwConnectLenHistogramGruop=hwConnectLenHistogramGruop, hwRadioCalibrateStatisicsEntry=hwRadioCalibrateStatisicsEntry, hwRadioActiveSwitch=hwRadioActiveSwitch, hwRadioLoadBalanceGroupMemberEntry=hwRadioLoadBalanceGroupMemberEntry, hwConnectUcastDataFrameTxRetryRatio=hwConnectUcastDataFrameTxRetryRatio, hwConnectStatusEntry=hwConnectStatusEntry, hwMacRadioInfoTable=hwMacRadioInfoTable, hwRadioChannelChangedNotify=hwRadioChannelChangedNotify, hwRadioCalibratePolicy=hwRadioCalibratePolicy, hwMacRadioRcvPower=hwMacRadioRcvPower, hwApAccessChannelUtilExceedThresholdNotify=hwApAccessChannelUtilExceedThresholdNotify, hwConnectDataLenStatFrameCounts=hwConnectDataLenStatFrameCounts, hwRadioSendBytes64Bits=hwRadioSendBytes64Bits, hwApAccessUserNumExceedThresholdRecovNotify=hwApAccessUserNumExceedThresholdRecovNotify, hwRadioBridgeWhitelistName=hwRadioBridgeWhitelistName, hwRadioNotSupportChannelNotify=hwRadioNotSupportChannelNotify, hwMacRadioSendBytes64Bits=hwMacRadioSendBytes64Bits, hwMacRadioAvailableSntennaNumber=hwMacRadioAvailableSntennaNumber, hwConnectStatusSsid=hwConnectStatusSsid, hwRadio=hwRadio, hwMacRadioMngChannelBandwidth=hwMacRadioMngChannelBandwidth, hwConnectStatisticsPeerMac=hwConnectStatisticsPeerMac, hwMacRadioRcvPhyErrFrames=hwMacRadioRcvPhyErrFrames, hwMacRadioSendBroadcast64Bits=hwMacRadioSendBroadcast64Bits, hwUnauthenticRadioNeighborBSSID=hwUnauthenticRadioNeighborBSSID, hwRadioPerformanceStatGroup=hwRadioPerformanceStatGroup, hwRadioDynamicAdjustPowerSwitch=hwRadioDynamicAdjustPowerSwitch, hwRadio80211bgSupportRateSet=hwRadio80211bgSupportRateSet, hwRadioRetryFrames64Bits=hwRadioRetryFrames64Bits, hwRadioNotify=hwRadioNotify, hwMacRadioAssocRequestFrames=hwMacRadioAssocRequestFrames, hwMacRadioDisauthFrames=hwMacRadioDisauthFrames, hwLBGroupName=hwLBGroupName, hwMacRadioSendCtrlFrames=hwMacRadioSendCtrlFrames, hwMacRadioBridgeSwitch=hwMacRadioBridgeSwitch, hwMacUndoMeshWhitelist=hwMacUndoMeshWhitelist, hwOtherDeviceInterfDetectedNotify=hwOtherDeviceInterfDetectedNotify, hwRadioChannelSwitchAnnouncement=hwRadioChannelSwitchAnnouncement, hwRadioActualBandwidth=hwRadioActualBandwidth, hwRadioParaStatisticEntry=hwRadioParaStatisticEntry, hwRadioDecsption=hwRadioDecsption, hwMacLBMemberRadioPowerLevel=hwMacLBMemberRadioPowerLevel, hwConnectRateStatRange=hwConnectRateStatRange, hwWIDSTrapInfoAPMAC=hwWIDSTrapInfoAPMAC, hwRadioCalibrateManualStartup=hwRadioCalibrateManualStartup, hwUncontrolAPIndex=hwUncontrolAPIndex, hwMacRadioRcvErrFrames64Bits=hwMacRadioRcvErrFrames64Bits, hwRadioMngBinded=hwRadioMngBinded, hwMacRadioInfoGroup=hwMacRadioInfoGroup, hwMacRadioMulticastRateValue=hwMacRadioMulticastRateValue, hwRadioConfictRateThreshold=hwRadioConfictRateThreshold, hwRadioUacPolicyType=hwRadioUacPolicyType, hwRadioObjects=hwRadioObjects, hwRadioInfoUpDownTimes=hwRadioInfoUpDownTimes, hwMacRadio11acMCSValue=hwMacRadio11acMCSValue, hwConnectRateHistogramGruop=hwConnectRateHistogramGruop, hwRadioAirPortPsPollFrames=hwRadioAirPortPsPollFrames, hwRadioParaStatisticGroup=hwRadioParaStatisticGroup, hwRadioGlobalCalibrateChannel2G=hwRadioGlobalCalibrateChannel2G, hwRadioSendFrames=hwRadioSendFrames, hwAPCoInterfClearNotify=hwAPCoInterfClearNotify, hwMacRadioSpectrumAnalysisEnable=hwMacRadioSpectrumAnalysisEnable, hwRadioAdminStatus=hwRadioAdminStatus, hwMacRadioAuthNeighborInfEntry=hwMacRadioAuthNeighborInfEntry, hwRadioGlobalGroup=hwRadioGlobalGroup, hwConnectStatusChannel=hwConnectStatusChannel, hwRadioInfoGroup=hwRadioInfoGroup, hwRadioWifiLight=hwRadioWifiLight, hwMacRadioWorkingChannel=hwMacRadioWorkingChannel, hwMacRadioTxRate=hwMacRadioTxRate, hwRadioLocationScanInterval=hwRadioLocationScanInterval, hwMacRadioWorkingChannelBandwidth=hwMacRadioWorkingChannelBandwidth, hwRadioLegacyStationEnable=hwRadioLegacyStationEnable, hwMacLBMemberRadioPower=hwMacLBMemberRadioPower, hwApRadioRtsThreshold=hwApRadioRtsThreshold, hwConnectStatusActualTxPower=hwConnectStatusActualTxPower, hwConnectStatisticsTable=hwConnectStatisticsTable, hwMacRadioDownMacErrFrames64Bits=hwMacRadioDownMacErrFrames64Bits, hwMacRadioDisassocFrames=hwMacRadioDisassocFrames, hwRadioRcvKeyDecryptErrFrames=hwRadioRcvKeyDecryptErrFrames, hwConnectProfileName=hwConnectProfileName, hwMacRadioMngState=hwMacRadioMngState, hwBatchLoadBalanceGroupNumber=hwBatchLoadBalanceGroupNumber, hwConnectTxErrUcastDataFrames=hwConnectTxErrUcastDataFrames, hwRadioActualPowerLevel=hwRadioActualPowerLevel, hwMacRadioMaxTxPwrLvl=hwMacRadioMaxTxPwrLvl, hwMacRadioCalibrateStatisicsTable=hwMacRadioCalibrateStatisicsTable, hwInterfStaMac=hwInterfStaMac, hwMacRadioWorkingPowerLevel=hwMacRadioWorkingPowerLevel, hwMacRadioLoadBalanceGroupMemberTable=hwMacRadioLoadBalanceGroupMemberTable, hwRadioRcvErrFrames=hwRadioRcvErrFrames, hwMacRadioCountermeasuresSwitch=hwMacRadioCountermeasuresSwitch, hwRadioBandwidth=hwRadioBandwidth, hwRadioRcvSignalStrength=hwRadioRcvSignalStrength, hwRadioRcvBytes=hwRadioRcvBytes, hwMacRadioLocationEnable=hwMacRadioLocationEnable, hwRadioProfileGroup=hwRadioProfileGroup, hwConnectProfileEntry=hwConnectProfileEntry, hwRadioAssocRequestFrames=hwRadioAssocRequestFrames, hwRadioType=hwRadioType, hwRadioActualChannelBandwidth=hwRadioActualChannelBandwidth, hwApRoamChannelUtilExceedThresholdNotify=hwApRoamChannelUtilExceedThresholdNotify, hwMacAuthenticRadioNeighborAPMac=hwMacAuthenticRadioNeighborAPMac, hwRadioSpectrumAnalysisScanInterval=hwRadioSpectrumAnalysisScanInterval, hwRadioUncontrolAPInfEntry=hwRadioUncontrolAPInfEntry, hwMacRadioSendUnicast64Bits=hwMacRadioSendUnicast64Bits, hwMacRadio80211nMulticastMCSValue=hwMacRadio80211nMulticastMCSValue, hwRadioLegitimateAntennaGain=hwRadioLegitimateAntennaGain)
mibBuilder.exportSymbols("HUAWEI-WLAN-RADIO-MIB", hwMacRadioRcvBytes=hwMacRadioRcvBytes, hwRadioPER=hwRadioPER, hwConnectAMPDUHistogramGruop=hwConnectAMPDUHistogramGruop, hwRadioPortType=hwRadioPortType, hwRadio11acSpatialStream=hwRadio11acSpatialStream, hwRadioRegionCalibrateTable=hwRadioRegionCalibrateTable, hwMacUnauthenticRadioNeighborBSSID=hwMacUnauthenticRadioNeighborBSSID, hwRadioMulticastRate5G=hwRadioMulticastRate5G, hwLBGroupMode=hwLBGroupMode, hwRadioRcvPhyErrFrames=hwRadioRcvPhyErrFrames, hwRadioMaxTxPwrLvl=hwRadioMaxTxPwrLvl, hwRadioActualChannel=hwRadioActualChannel, hwRadioSpectrumAnalysisScanPeriod=hwRadioSpectrumAnalysisScanPeriod, hwMacRadioID=hwMacRadioID, hwMacRadioChUtilizationRate=hwMacRadioChUtilizationRate, hwMacRadioAirPortPsPollFrames=hwMacRadioAirPortPsPollFrames, hwRadioCalibrateInterval=hwRadioCalibrateInterval, hwRadioNotSupportPowerLevelNotify=hwRadioNotSupportPowerLevelNotify, hwRadioUndoBridgeWhitelist=hwRadioUndoBridgeWhitelist, hwMacRadioInfoEntry=hwMacRadioInfoEntry, hwMacRadioAutoOffStartTime=hwMacRadioAutoOffStartTime, hwConnectProfileRowStatus=hwConnectProfileRowStatus, hwRadioDownMacErrFrames=hwRadioDownMacErrFrames, hwMacRadioLastChange=hwMacRadioLastChange, hwConnectRxThroughput=hwConnectRxThroughput, hwMacRadioUnauthenticNeighborInfoGroup=hwMacRadioUnauthenticNeighborInfoGroup, hwMacRadioPerformanceStatTable=hwMacRadioPerformanceStatTable, hwRadioSendRtsSuccess=hwRadioSendRtsSuccess, hwRadioDownRecovNotify=hwRadioDownRecovNotify, hwRadioStaOfflineRateLimitSwitch=hwRadioStaOfflineRateLimitSwitch, hwMacRadioDropRate=hwMacRadioDropRate, hwRadioLoadBalanceGroupEntry=hwRadioLoadBalanceGroupEntry, hwRadioRcvDataFrames=hwRadioRcvDataFrames, hwRadioBridgeWhitelistEnable=hwRadioBridgeWhitelistEnable, hwRadioDropRate=hwRadioDropRate, hwRadioSendCtrlFrames=hwRadioSendCtrlFrames, hwRadioChUtilizationRate=hwRadioChUtilizationRate, hwMacRadioAssocResponseFrames=hwMacRadioAssocResponseFrames, hwRadioCompliances=hwRadioCompliances, hwMacRadioPerformanceStatOperMode=hwMacRadioPerformanceStatOperMode, hwRadioTxRate=hwRadioTxRate, hwMacUnauthenticRadioNeighborRSSI=hwMacUnauthenticRadioNeighborRSSI, hwMacRadioSendFailFrames64Bits=hwMacRadioSendFailFrames64Bits, hwMacRadioSpectrogramServerReportEnable=hwMacRadioSpectrogramServerReportEnable, hwRadioCalibrateStatisicsTable=hwRadioCalibrateStatisicsTable, hwMacRadioUnauthenticNeighborInfoEntry=hwMacRadioUnauthenticNeighborInfoEntry, hwRadioRcvMngFrames=hwRadioRcvMngFrames, hwRadioCalibrateTable=hwRadioCalibrateTable, hwRadio80211nAMPDUMaxLengthExponent=hwRadio80211nAMPDUMaxLengthExponent, hwMacRadioCountermeasuresMode=hwMacRadioCountermeasuresMode, hwConnectPskPassPhase=hwConnectPskPassPhase, hwMacRadioRcvKeyDecryptErrFrames64Bits=hwMacRadioRcvKeyDecryptErrFrames64Bits, hwRadioRecvRate=hwRadioRecvRate, hwRadioBackgroundScanningClientThreshold=hwRadioBackgroundScanningClientThreshold, hwRegionCalibrateListenMode=hwRegionCalibrateListenMode, hwNerborInterfDetectedNotify=hwNerborInterfDetectedNotify, hwConnectMaxSnrSSID=hwConnectMaxSnrSSID, hwConnectDataLenStatLength=hwConnectDataLenStatLength, hwWIDSDetectRogueNotify=hwWIDSDetectRogueNotify, hwConnectStatusHtMode=hwConnectStatusHtMode, hwInterfApChannel=hwInterfApChannel, hwRadioSendMngFrames=hwRadioSendMngFrames, hwRadioInterfDetDevice=hwRadioInterfDetDevice, hwMacRadioStaMaxSignalStrength=hwMacRadioStaMaxSignalStrength, hwRadioSendUnicast=hwRadioSendUnicast, hwRadioMeshRole=hwRadioMeshRole, hwLBMemberRadioTraffic=hwLBMemberRadioTraffic, hwConnectStatusPeerMac=hwConnectStatusPeerMac, hwLBMemberRadioPowerLevel=hwLBMemberRadioPowerLevel, hwMacRadioMngChannel=hwMacRadioMngChannel, hwMacRadioSendDropFrames64Bits=hwMacRadioSendDropFrames64Bits, hwApRoamUserNumExceedThresholdRecovNotify=hwApRoamUserNumExceedThresholdRecovNotify, hwAuthAPIndex=hwAuthAPIndex, hwMacRadioNoise=hwMacRadioNoise, hwRadioInfoTable=hwRadioInfoTable, hwRadioPERThreshold=hwRadioPERThreshold, hwRadioQueryPowerlevelBandwidth=hwRadioQueryPowerlevelBandwidth, hwRadioDownNotify=hwRadioDownNotify, hwRadioInfoEntry=hwRadioInfoEntry, hwApChannel=hwApChannel, hwRadioHighDenseSwitch=hwRadioHighDenseSwitch, hwRadioAirPortEapolFrames=hwRadioAirPortEapolFrames, hwMacRadioSendRtsSuccess64Bits=hwMacRadioSendRtsSuccess64Bits, hwConnectStatusActualCountryCode=hwConnectStatusActualCountryCode, hwWIDSTrapInfoRogueSSId=hwWIDSTrapInfoRogueSSId, hwRadioDownMacErrFrames64Bits=hwRadioDownMacErrFrames64Bits, hwMacRadioSendFailFrames=hwMacRadioSendFailFrames, hwMacRadioCalStatisCalibratePowerCount=hwMacRadioCalStatisCalibratePowerCount, hwRadioAutoOffStartTime=hwRadioAutoOffStartTime, hwConnectMaxSnrGruop=hwConnectMaxSnrGruop, hwRadioConformance=hwRadioConformance, hwApRoamChannelUtilExceedThresholdRecovNotify=hwApRoamChannelUtilExceedThresholdRecovNotify, hwMacRadioUndoBridgeWhitelist=hwMacRadioUndoBridgeWhitelist, hwRadioRcvBytes64Bits=hwRadioRcvBytes64Bits, hwRadioSendBroadcast=hwRadioSendBroadcast, hwRadio80211aSupportRateSet=hwRadio80211aSupportRateSet)
