#
# PySNMP MIB module IEEE8021-PE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-PE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
IEEE8021PbbComponentIdentifier, ieee802dot1mibs, IEEE8021BridgePortNumberOrZero, IEEE8021BridgePortNumber = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PbbComponentIdentifier", "ieee802dot1mibs", "IEEE8021BridgePortNumberOrZero", "IEEE8021BridgePortNumber")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
NotificationType, Integer32, Bits, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Counter32, Unsigned32, Gauge32, ModuleIdentity, Counter64, iso, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Integer32", "Bits", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Counter32", "Unsigned32", "Gauge32", "ModuleIdentity", "Counter64", "iso", "ObjectIdentity")
DisplayString, MacAddress, TimeStamp, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TimeStamp", "TruthValue", "TextualConvention")
ieee8021BridgePEMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 25))
ieee8021BridgePEMib.setRevisions(('2012-01-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021BridgePEMib.setRevisionsDescriptions(('Initial version published as part of IEEE Std. 802.1BR-2012',))
if mibBuilder.loadTexts: ieee8021BridgePEMib.setLastUpdated('201201220000Z')
if mibBuilder.loadTexts: ieee8021BridgePEMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021BridgePEMib.setContactInfo('WG-URL: http:////www.ieee802.org/1/ WG-EMail: stds-802-1-L@IEEE.ORG Contact: Tony Jeffree Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane Piscataway NJ 08854 USA E-mail: stds-802-1-L@IEEE.ORG')
if mibBuilder.loadTexts: ieee8021BridgePEMib.setDescription('The PE MIB module for managing devices that support Bridge Port Extension. Unless otherwise indicated, the references in this MIB module are to IEEE Std 802.1BR-2012. Copyright (C) IEEE. This version of this MIB module is part of IEEE 802.1BR-2012; see the specification itself for full legal notices.')
ieee8021BridgePENotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 25, 1))
ieee8021BridgePEObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 25, 2))
ieee8021BridgePEConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 25, 3))
class IEEE802BridgePEEChannelIDTC(TextualConvention, Unsigned32):
    description = 'Textual convention of an E-Channel Identifier.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4194302)

class IEEE802BridgePETrafficClassValueTC(TextualConvention, Unsigned32):
    description = 'Indicates a traffic class. Values 0-7 correspond to traffic classes.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 7)

class IEEE802BridgePETrafficSelectionAlgorithmTC(TextualConvention, Integer32):
    description = 'Indicates the Traffic Selection Algorithm 0: Strict Priority 1: Credit-based shaper 2: Enhanced transmission selection 3-254: Reserved for furture standardization 255: Vendor specific'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))
    namedValues = NamedValues(("tsaStrictPriority", 0), ("tsaCreditBasedShaper", 1), ("tsaEnhancedTransmission", 2), ("tsaVendorSpecific", 255))

class IEEE802BridgePETrafficClassBandwidthValue(TextualConvention, Unsigned32):
    description = 'Indicates the bandwidth in percent assigned to a traffic class.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 100)

ieee8021BridgePEPortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 25, 2, 1), )
if mibBuilder.loadTexts: ieee8021BridgePEPortTable.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortTable.setDescription('A table that contains per port information related to Port Extension. A row is created in this table for any port on a Controlling Bridge that is extended using Port Extension, including those ports that provide communication to the Port Extenders themselves.')
ieee8021BridgePEPortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1), ).setIndexNames((0, "IEEE8021-PE-MIB", "ieee8021BridgePEPortComponentId"), (0, "IEEE8021-PE-MIB", "ieee8021BridgePEPort"), (0, "IEEE8021-PE-MIB", "ieee8021BridgePEPortType"))
if mibBuilder.loadTexts: ieee8021BridgePEPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortEntry.setDescription('A list of per port Port Extension objects.')
ieee8021BridgePEPortComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgePEPortComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortComponentId.setDescription('The component identifier is used to distinguish between the multiple virtual bridge instances within a PBB. In simple situations where there is only a single component the default value is 1.')
ieee8021BridgePEPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgePEPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPort.setDescription('The port number of the port for which this entry contains bridge management information.')
ieee8021BridgePEPortType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pepCascade", 1), ("pepUpstream", 2), ("pepExtended", 3))))
if mibBuilder.loadTexts: ieee8021BridgePEPortType.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortType.setDescription('The operational mode of a port participating in Port Exension. The enumerated values are: pepCascade - the port is operating as a Cascade port pepUpstream - the port is operating as an Upstream port pepExtended - the port is operating as an Extended port')
ieee8021BridgePEPortUpstreamCSPAddress = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortUpstreamCSPAddress.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortUpstreamCSPAddress.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortUpstreamCSPAddress.setDescription('The MAC address used for communication of the PE CSP protocol of the device connected to the upstream port of the Port Extender (which may be the Controlling Bridge or an upstream Port Extender). This provides the hierarchal relationship in a cascade of Port Extenders')
ieee8021BridgePEPortEcid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 5), IEEE802BridgePEEChannelIDTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortEcid.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortEcid.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortEcid.setDescription('The default ECID assigend to this port and the port on the Port Extender to which this port corresponds.')
ieee8021BridgePEPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 6), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortNumber.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortNumber.setDescription('The Port number on the of the Port on the Port Extender, or zero for the Upstream Port.')
ieee8021BridgePECounterDiscontinuityTime = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePECounterDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePECounterDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion at which any one or more of the counters in this conceptaul row suffered a discontinuity. The relevant counters are the specific instances associated with this conceptual row of any Counter32 or Counter64 object. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
ieee8021BridgePEPortRxrqErrorsBridge = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 8), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrqErrorsBridge.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrqErrorsBridge.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrqErrorsBridge.setDescription('The number of PE CSP flow control overflow errors that have occured for requests on the Bridge.')
ieee8021BridgePEPortRxrspErrorsBridge = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 9), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrspErrorsBridge.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrspErrorsBridge.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrspErrorsBridge.setDescription('The number of PE CSP flow control overflow errors that have occured for responses on the Bridge.')
ieee8021BridgePEPortRxrqErrorsPE = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 10), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrqErrorsPE.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrqErrorsPE.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrqErrorsPE.setDescription('The number of PE CSP flow control overflow errors that have occured for requests on the Port Extender.')
ieee8021BridgePEPortRxrspErrorsPE = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 11), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrspErrorsPE.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrspErrorsPE.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPortRxrspErrorsPE.setDescription('The number of PE CSP flow control overflow errors that have occured for responses on the Port Extender.')
ieee8021BridgePEPCP = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPCP.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPCP.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPCP.setDescription('Indicates whether the Port Exender supports modification of the priority code point table (true) or not (false).')
ieee8021BridgePEROW = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEROW.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEROW.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEROW.setDescription('Indicates whether the Port Extender supports rows in the PCP table in addition to the 8P0D row (true)or not (false).')
ieee8021BridgePEDEI = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEDEI.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEDEI.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEDEI.setDescription('Indicates whether the Port Extender supports encoding of the Drop Eligible Indicatior (true) or not (false).')
ieee8021BridgePECN = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePECN.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePECN.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePECN.setDescription('Indicates whether the Port Extender supports Congestion Notification (true) or not (false).')
ieee8021BridgePEPFC = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEPFC.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEPFC.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEPFC.setDescription('Indicates whether the Port Extender supports Priority-based flow control(true) or not (false).')
ieee8021BridgePEExtPortEChannelsSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1048575))).setUnits('E-channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEExtPortEChannelsSupported.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEExtPortEChannelsSupported.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEExtPortEChannelsSupported.setDescription('Indicates the number of Extended Port E-channels supported by the Port Extender.')
ieee8021BridgePERemoteRepEChannelsSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3145727))).setUnits('E-channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePERemoteRepEChannelsSupported.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePERemoteRepEChannelsSupported.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePERemoteRepEChannelsSupported.setDescription('Indicates the number of Remote Replication E-channels supported by the Port Extender.')
ieee8021BridgePETCsSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setUnits('traffic classes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePETCsSupported.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePETCsSupported.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePETCsSupported.setDescription('Indicates the number of traffic clasees supported by the Port Extender.')
ieee8021BridgePEUtVLANsSupported = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setUnits('VLANs').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePEUtVLANsSupported.setReference('10.2.1')
if mibBuilder.loadTexts: ieee8021BridgePEUtVLANsSupported.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEUtVLANsSupported.setDescription('Indicates the number of untagged VLANs supported by the Port Extender.')
ieee8021BridgePERemoteReplicationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 25, 2, 2), )
if mibBuilder.loadTexts: ieee8021BridgePERemoteReplicationTable.setReference('10.3.1')
if mibBuilder.loadTexts: ieee8021BridgePERemoteReplicationTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePERemoteReplicationTable.setDescription('A table that contains one row for each Remote Replication entry in the filtering database.')
ieee8021BridgePERemoteReplicationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 25, 2, 2, 1), ).setIndexNames((0, "IEEE8021-PE-MIB", "ieee8021BridgePEPortComponentId"), (0, "IEEE8021-PE-MIB", "ieee8021BridgePERREcid"))
if mibBuilder.loadTexts: ieee8021BridgePERemoteReplicationEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePERemoteReplicationEntry.setDescription('A list of Remote Replication objects.')
ieee8021BridgePERREcid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 2, 1, 1), IEEE802BridgePEEChannelIDTC())
if mibBuilder.loadTexts: ieee8021BridgePERREcid.setReference('10.3.1')
if mibBuilder.loadTexts: ieee8021BridgePERREcid.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePERREcid.setDescription('The ECID assigend to this Remote Replication filtering entry.')
ieee8021BridgePERRPortMap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 2, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgePERRPortMap.setReference('10.3.1')
if mibBuilder.loadTexts: ieee8021BridgePERRPortMap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePERRPortMap.setDescription('The list of ports to which a frame is to be replicated.')
ieee8021BridgePEETSTable = MibTable((1, 3, 111, 2, 802, 1, 1, 25, 2, 3), )
if mibBuilder.loadTexts: ieee8021BridgePEETSTable.setReference('10.2.2')
if mibBuilder.loadTexts: ieee8021BridgePEETSTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEETSTable.setDescription('A table that contains per port information related to Enhanced Transmission Selection. A row is created in this table for any port on a Controlling Bridge that corresponds to a Cascade Port. These objects refer to the ETS configuration of the attached Upstream Port')
ieee8021BridgePEETSEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 25, 2, 3, 1), ).setIndexNames((0, "IEEE8021-PE-MIB", "ieee8021BridgePEPortComponentId"), (0, "IEEE8021-PE-MIB", "ieee8021BridgePEPort"), (0, "IEEE8021-PE-MIB", "ieee8021BridgePEETSTrafficClass"))
if mibBuilder.loadTexts: ieee8021BridgePEETSEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEETSEntry.setDescription('A list of per Cascade Port ETS objects.')
ieee8021BridgePEETSTrafficClass = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 3, 1, 1), IEEE802BridgePETrafficClassValueTC())
if mibBuilder.loadTexts: ieee8021BridgePEETSTrafficClass.setReference('10.2.3')
if mibBuilder.loadTexts: ieee8021BridgePEETSTrafficClass.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEETSTrafficClass.setDescription('Indicates the traffic class to which this bandwidth applies')
ieee8021BridgePEETSTrafficSelectionAlgorthm = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 3, 1, 2), IEEE802BridgePETrafficSelectionAlgorithmTC()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePEETSTrafficSelectionAlgorthm.setReference('10.2.3')
if mibBuilder.loadTexts: ieee8021BridgePEETSTrafficSelectionAlgorthm.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEETSTrafficSelectionAlgorthm.setDescription('Inticates the Traffic Selection Algorthm assigned to this traffic class')
ieee8021BridgePEETSBandwidth = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 25, 2, 3, 1, 3), IEEE802BridgePETrafficClassBandwidthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgePEETSBandwidth.setReference('10.2.3')
if mibBuilder.loadTexts: ieee8021BridgePEETSBandwidth.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEETSBandwidth.setDescription('Indicates the bandwidth assigned to this traffic class.')
ieee8021BridgePEGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 25, 3, 1))
ieee8021BridgePECompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 25, 3, 2))
ieee8021BridgePEGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 25, 3, 1, 1)).setObjects(("IEEE8021-PE-MIB", "ieee8021BridgePEPortUpstreamCSPAddress"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPortEcid"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPortNumber"), ("IEEE8021-PE-MIB", "ieee8021BridgePECounterDiscontinuityTime"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPortRxrqErrorsBridge"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPortRxrspErrorsBridge"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPortRxrqErrorsPE"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPortRxrspErrorsPE"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPCP"), ("IEEE8021-PE-MIB", "ieee8021BridgePEROW"), ("IEEE8021-PE-MIB", "ieee8021BridgePEDEI"), ("IEEE8021-PE-MIB", "ieee8021BridgePECN"), ("IEEE8021-PE-MIB", "ieee8021BridgePEPFC"), ("IEEE8021-PE-MIB", "ieee8021BridgePEExtPortEChannelsSupported"), ("IEEE8021-PE-MIB", "ieee8021BridgePERemoteRepEChannelsSupported"), ("IEEE8021-PE-MIB", "ieee8021BridgePETCsSupported"), ("IEEE8021-PE-MIB", "ieee8021BridgePEUtVLANsSupported"), ("IEEE8021-PE-MIB", "ieee8021BridgePERRPortMap"), ("IEEE8021-PE-MIB", "ieee8021BridgePEETSTrafficSelectionAlgorthm"), ("IEEE8021-PE-MIB", "ieee8021BridgePEETSBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePEGroup = ieee8021BridgePEGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePEGroup.setDescription('The collection of objects used to represent Port Extension management objects.')
ieee8021BridgePECompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 25, 3, 2, 1)).setObjects(("IEEE8021-PE-MIB", "ieee8021BridgePEGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgePECompliance = ieee8021BridgePECompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgePECompliance.setDescription('The compliance statement for devices supporting PE as defined in IEEE 802.1BR.')
mibBuilder.exportSymbols("IEEE8021-PE-MIB", ieee8021BridgePEPortNumber=ieee8021BridgePEPortNumber, ieee8021BridgePEExtPortEChannelsSupported=ieee8021BridgePEExtPortEChannelsSupported, ieee8021BridgePEGroups=ieee8021BridgePEGroups, ieee8021BridgePEPortRxrspErrorsBridge=ieee8021BridgePEPortRxrspErrorsBridge, ieee8021BridgePEETSTrafficClass=ieee8021BridgePEETSTrafficClass, ieee8021BridgePERemoteRepEChannelsSupported=ieee8021BridgePERemoteRepEChannelsSupported, ieee8021BridgePEPortEcid=ieee8021BridgePEPortEcid, ieee8021BridgePEPortRxrqErrorsBridge=ieee8021BridgePEPortRxrqErrorsBridge, ieee8021BridgePEETSBandwidth=ieee8021BridgePEETSBandwidth, ieee8021BridgePEPFC=ieee8021BridgePEPFC, ieee8021BridgePEObjects=ieee8021BridgePEObjects, ieee8021BridgePECN=ieee8021BridgePECN, IEEE802BridgePETrafficClassValueTC=IEEE802BridgePETrafficClassValueTC, ieee8021BridgePEPortType=ieee8021BridgePEPortType, ieee8021BridgePEUtVLANsSupported=ieee8021BridgePEUtVLANsSupported, IEEE802BridgePETrafficClassBandwidthValue=IEEE802BridgePETrafficClassBandwidthValue, ieee8021BridgePEPortComponentId=ieee8021BridgePEPortComponentId, ieee8021BridgePEROW=ieee8021BridgePEROW, ieee8021BridgePETCsSupported=ieee8021BridgePETCsSupported, ieee8021BridgePEGroup=ieee8021BridgePEGroup, IEEE802BridgePETrafficSelectionAlgorithmTC=IEEE802BridgePETrafficSelectionAlgorithmTC, ieee8021BridgePECounterDiscontinuityTime=ieee8021BridgePECounterDiscontinuityTime, ieee8021BridgePEDEI=ieee8021BridgePEDEI, ieee8021BridgePECompliance=ieee8021BridgePECompliance, ieee8021BridgePEPort=ieee8021BridgePEPort, ieee8021BridgePEMib=ieee8021BridgePEMib, ieee8021BridgePEETSTable=ieee8021BridgePEETSTable, ieee8021BridgePEPortUpstreamCSPAddress=ieee8021BridgePEPortUpstreamCSPAddress, ieee8021BridgePEPortRxrqErrorsPE=ieee8021BridgePEPortRxrqErrorsPE, PYSNMP_MODULE_ID=ieee8021BridgePEMib, ieee8021BridgePENotifications=ieee8021BridgePENotifications, ieee8021BridgePERemoteReplicationEntry=ieee8021BridgePERemoteReplicationEntry, ieee8021BridgePEConformance=ieee8021BridgePEConformance, ieee8021BridgePERemoteReplicationTable=ieee8021BridgePERemoteReplicationTable, ieee8021BridgePEPortEntry=ieee8021BridgePEPortEntry, ieee8021BridgePEPortRxrspErrorsPE=ieee8021BridgePEPortRxrspErrorsPE, ieee8021BridgePERREcid=ieee8021BridgePERREcid, ieee8021BridgePEPCP=ieee8021BridgePEPCP, ieee8021BridgePERRPortMap=ieee8021BridgePERRPortMap, ieee8021BridgePEPortTable=ieee8021BridgePEPortTable, IEEE802BridgePEEChannelIDTC=IEEE802BridgePEEChannelIDTC, ieee8021BridgePEETSEntry=ieee8021BridgePEETSEntry, ieee8021BridgePECompliances=ieee8021BridgePECompliances, ieee8021BridgePEETSTrafficSelectionAlgorthm=ieee8021BridgePEETSTrafficSelectionAlgorthm)
