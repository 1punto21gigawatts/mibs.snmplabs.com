#
# PySNMP MIB module OPLINK-BTI-OPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Oplink-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:57 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
mngdproducts, = mibBuilder.importSymbols("Oplink-MIB", "mngdproducts")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
IpAddress, Integer32, iso, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Bits, ObjectIdentity, Unsigned32, MibIdentifier, Counter32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Integer32", "iso", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Bits", "ObjectIdentity", "Unsigned32", "MibIdentifier", "Counter32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
deviceOPSMv2_MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 19547, 1, 7)).setLabel("deviceOPSMv2-MIB")
deviceOPSMv2_MIB.setRevisions(('2013-04-02 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: deviceOPSMv2_MIB.setRevisionsDescriptions((' reorg oplink mib ',))
if mibBuilder.loadTexts: deviceOPSMv2_MIB.setLastUpdated('201304021700Z')
if mibBuilder.loadTexts: deviceOPSMv2_MIB.setOrganization('OPLINK')
if mibBuilder.loadTexts: deviceOPSMv2_MIB.setContactInfo('OPLINK')
if mibBuilder.loadTexts: deviceOPSMv2_MIB.setDescription(' oplink device OPSM version 2 mib ')
version2 = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1))
class HeTenthdB(TextualConvention, Integer32):
    description = 'This data type represents power discrepancy levels that are normally expressed in dB. Units are in tenths of a dB; for example, -5.1 dB will be represented as -51.'
    status = 'current'
    displayHint = 'd-1'

class HeTenthdBm(TextualConvention, Integer32):
    description = 'This data type represents power levels that are normally expressed in dBm. Units are in tenths of a dBm; for example, -5.1 dBm will be represented as -51.'
    status = 'current'
    displayHint = 'd-1'

class HeTenthmA(TextualConvention, Integer32):
    description = 'This data type represents laser bias current threshold that are normally expressed in mA. Units are in tenths of a mA; for example, -5.1 mA will be represented as -51.'
    status = 'current'
    displayHint = 'd-1'

class HeTenthmV(TextualConvention, Integer32):
    description = 'This data type represents pump voltage that are normally expressed in mA. Units are in tenths of a mV; for example, -5.1 mV will be represented as -51.'
    status = 'current'
    displayHint = 'd-1'

class HeTenthCentigrade(TextualConvention, Integer32):
    description = 'This data type represents Temperature Threshold that are normally expressed in mA. Units are in tenths of a C. for example, -5.1 C will be represented as -51.'
    status = 'current'
    displayHint = 'd-1'

emuTable = MibTable((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1), )
if mibBuilder.loadTexts: emuTable.setStatus('current')
if mibBuilder.loadTexts: emuTable.setDescription('controller card parameters')
emuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1), ).setIndexNames((0, "OPLINK-BTI-OPS-MIB", "emuChassisId"), (0, "OPLINK-BTI-OPS-MIB", "emuSlotId"), (0, "OPLINK-BTI-OPS-MIB", "emuItemId"))
if mibBuilder.loadTexts: emuEntry.setStatus('current')
if mibBuilder.loadTexts: emuEntry.setDescription('Row definition for emuTable ')
emuChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1001), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: emuChassisId.setStatus('current')
if mibBuilder.loadTexts: emuChassisId.setDescription('chassis index')
emuSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1002), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: emuSlotId.setStatus('current')
if mibBuilder.loadTexts: emuSlotId.setDescription('slot index')
emuItemId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1003), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: emuItemId.setStatus('current')
if mibBuilder.loadTexts: emuItemId.setDescription('port/channel index')
emuMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuMfgName.setStatus('current')
if mibBuilder.loadTexts: emuMfgName.setDescription('Manufacturer name.')
emuModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuModuleType.setStatus('current')
if mibBuilder.loadTexts: emuModuleType.setDescription('Module type.')
emuPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuPartNum.setStatus('current')
if mibBuilder.loadTexts: emuPartNum.setDescription('Part Number. Can be any combination of alphanumerical characters.')
emuSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuSerialNum.setStatus('current')
if mibBuilder.loadTexts: emuSerialNum.setDescription('Serial number. Can be any combination of alphanumerical characters.')
emuMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuMfgDate.setStatus('current')
if mibBuilder.loadTexts: emuMfgDate.setDescription('Manufacturing date. The format is yyyy-mm-dd.')
emuCaliDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuCaliDate.setStatus('current')
if mibBuilder.loadTexts: emuCaliDate.setDescription('Manufacturing date. The format is yyyy-mm-dd')
emuFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: emuFirmwareVer.setDescription('Software version. The format is X.Y.Z')
emuHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuHardwareVer.setStatus('current')
if mibBuilder.loadTexts: emuHardwareVer.setDescription('Hardware version. The format is X.Y.Z')
emuVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuVendorID.setStatus('current')
if mibBuilder.loadTexts: emuVendorID.setDescription('Vendor ID. The ID number of vendor.')
emuSysDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuSysDate.setStatus('current')
if mibBuilder.loadTexts: emuSysDate.setDescription('System date. The format is YYYY-MM-DD')
emuSysTime = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuSysTime.setStatus('current')
if mibBuilder.loadTexts: emuSysTime.setDescription('System time. The format is HH:MM:SS')
emuIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuIpAddr.setStatus('current')
if mibBuilder.loadTexts: emuIpAddr.setDescription('IP address. The format is aaa.bbb.ccc.ddd')
emuNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuNetMask.setStatus('current')
if mibBuilder.loadTexts: emuNetMask.setDescription('Netmask. The format is aaa.bbb.ccc.ddd')
emuGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuGateway.setStatus('current')
if mibBuilder.loadTexts: emuGateway.setDescription('Gateway. The format is aaa.bbb.ccc.ddd')
emuMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuMacAddr.setStatus('current')
if mibBuilder.loadTexts: emuMacAddr.setDescription('Mac address. The format is aa:bb:cc:dd:ee:ff')
emuUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuUptime.setStatus('current')
if mibBuilder.loadTexts: emuUptime.setDescription('Uptime. System uptime (Unit: s)')
emuBoardTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 17), HeTenthCentigrade()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuBoardTemp.setStatus('current')
if mibBuilder.loadTexts: emuBoardTemp.setDescription('BoardTemp. Get temperature of EMU card(Unit: 0.1 degree celsius)')
emuHighTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 18), HeTenthCentigrade()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuHighTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: emuHighTemperatureThreshold.setDescription('HighTempThreshold. Get/Set high temperature threshold value of EMU card(Unit: 0.1 degree celsuis), range:550~750')
emuLowTemperatureThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 19), HeTenthCentigrade()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuLowTemperatureThreshold.setStatus('current')
if mibBuilder.loadTexts: emuLowTemperatureThreshold.setDescription('LowTempThreshold. Get/Set low temperature threshold value of EMU card(Unit: 0.1 degree celsius), range:-250~0')
emuGetModConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetModConfig.setStatus('current')
if mibBuilder.loadTexts: emuGetModConfig.setDescription('GetModConfig. Get current OPSM module config. format: OPSM.PA600/OPSM.BA ')
emuDelModConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuDelModConfig.setStatus('current')
if mibBuilder.loadTexts: emuDelModConfig.setDescription('DelModConfig. get: return a blank character set: Delete current OPSM module config. format: OPSM.PA600/OPSM.BA ')
emuAddModConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuAddModConfig.setStatus('current')
if mibBuilder.loadTexts: emuAddModConfig.setDescription('AddModConfig. get: return a blank character set: Add OPSM module config, format: OPSM.PA600/OPSM.BA ')
emuSaveConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 0)).setFixedLength(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuSaveConfig.setStatus('current')
if mibBuilder.loadTexts: emuSaveConfig.setDescription('SaveConfig. get: return a blank character set: parameter is null.')
emuRestoreDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 0)).setFixedLength(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuRestoreDefault.setStatus('current')
if mibBuilder.loadTexts: emuRestoreDefault.setDescription('RestoreDefault. get: return a blank character set: parameter is null.')
emuReset = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 0)).setFixedLength(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuReset.setStatus('current')
if mibBuilder.loadTexts: emuReset.setDescription('Reset. get: return a blank character set: parameter is null.')
emuFirmwareUpgradeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuFirmwareUpgradeStart.setStatus('current')
if mibBuilder.loadTexts: emuFirmwareUpgradeStart.setDescription('FirmwareUpgradeStart. get: return a blank character set: The name of the upgrade iamge which must be upload to the /var/ftp directory before do this operation.')
emuFirmwareUpgradeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuFirmwareUpgradeStatus.setStatus('current')
if mibBuilder.loadTexts: emuFirmwareUpgradeStatus.setDescription('FirmwareUpgradeStatus. The status and percent of upgrade format: [status], [percent] status:0--none upgrade, 1--in progress, 2--upgrade successful, others-upgrade error code percent:1-100')
emuGetSNMPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 50), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetSNMPConfig.setStatus('current')
if mibBuilder.loadTexts: emuGetSNMPConfig.setDescription("Get all snmp users' information. format:[Version] [Trap on/off] [IP] [Port] [Community/Username] [Access/Level]... Version:v1|v2c|v3 Trap on/off:trap|notrap Access:Read|Write level:noauth|authNoPriv MD5/SHA|authPriv MD5/SHA DES/AES")
emuDelSNMPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 51), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuDelSNMPConfig.setStatus('current')
if mibBuilder.loadTexts: emuDelSNMPConfig.setDescription('Delete snmp user. get: return a blank character set: v1 or v2c format:[version] [IP] [Community] v3 format: [version] [username] Version:v1|v2c|v3 Community/Username:6-15 characters IP:xxx.xxx.xxx.xxx')
emuAddSNMPConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 52), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: emuAddSNMPConfig.setStatus('current')
if mibBuilder.loadTexts: emuAddSNMPConfig.setDescription('Add snmp user. get: return a blank character set: v1 or v2c format:[Version] [Trap on/off] [IP] [Port] [Community] [Access] v3 format:[Version] [Trap on/off] [IP] [Port] [Username] [Access] [EngineID] [Level] [Auth protocol] [AuthKey] [Priv protocal] [PrivKey] Version:v1|v2c|v3 Trap on/off:trap|notrap IP:xxx.xxx.xxx.xxx Port:0-65535 Community/Username:6-15 characters Access:r|w (r:read;w:write) EngineID:0x(10-128) characters Level:AuthPriv|AuthNoPriv|noAuthNoPriv Auth protocol:MD5|SHA AuthKey:8-15 characters Priv protocal:DES|AES PrivKey:8-15 characters')
emuGetCurrentAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 60), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetCurrentAlarm.setStatus('current')
if mibBuilder.loadTexts: emuGetCurrentAlarm.setDescription('Current alarm. The current alarm of system.')
emuGetHisAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: emuGetHisAlarm.setStatus('current')
if mibBuilder.loadTexts: emuGetHisAlarm.setDescription('History alarm. Full directory of history alarm file.')
opsmTable = MibTable((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2), )
if mibBuilder.loadTexts: opsmTable.setStatus('current')
if mibBuilder.loadTexts: opsmTable.setDescription('OPSM parameters')
opsmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1), ).setIndexNames((0, "OPLINK-BTI-OPS-MIB", "opsmChassisId"), (0, "OPLINK-BTI-OPS-MIB", "opsmSlotId"), (0, "OPLINK-BTI-OPS-MIB", "opsmItemId"))
if mibBuilder.loadTexts: opsmEntry.setStatus('current')
if mibBuilder.loadTexts: opsmEntry.setDescription('Row definition for opsmTable ')
opsmChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1001), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: opsmChassisId.setStatus('current')
if mibBuilder.loadTexts: opsmChassisId.setDescription('chassis index')
opsmSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1002), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: opsmSlotId.setStatus('current')
if mibBuilder.loadTexts: opsmSlotId.setDescription('slot index')
opsmItemId = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1003), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32)))
if mibBuilder.loadTexts: opsmItemId.setStatus('current')
if mibBuilder.loadTexts: opsmItemId.setDescription('port/channel index')
opsmMfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmMfgName.setStatus('current')
if mibBuilder.loadTexts: opsmMfgName.setDescription('Manufacturer name.')
opsmPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmPartNum.setStatus('current')
if mibBuilder.loadTexts: opsmPartNum.setDescription('Part Number. Can be any combination of alphanumerical characters.')
opsmSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSerialNum.setStatus('current')
if mibBuilder.loadTexts: opsmSerialNum.setDescription('Serial number. Can be any combination of alphanumerical characters.')
opsmMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmMfgDate.setStatus('current')
if mibBuilder.loadTexts: opsmMfgDate.setDescription('Manufacturing date. The format is yyyy-mm-dd. yyyy-1st and 2nd bytes. mm-3rd byte, dd-4th byte')
opsmCaliDate = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmCaliDate.setStatus('current')
if mibBuilder.loadTexts: opsmCaliDate.setDescription('Manufacturing date. The format is yyyy-mm-dd. yyyy-1st and 2nd bytes. mm-3rd byte, dd-4th byte')
opsmHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmHardwareVer.setStatus('current')
if mibBuilder.loadTexts: opsmHardwareVer.setDescription('Hardware version. The format is X.Y.Z')
opsmVendorID = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmVendorID.setStatus('current')
if mibBuilder.loadTexts: opsmVendorID.setDescription('Vendor ID. The ID number of vendor')
opsmModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmModuleType.setStatus('current')
if mibBuilder.loadTexts: opsmModuleType.setDescription('Module type.')
opsmFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: opsmFirmwareVer.setDescription('Software version. The format is X.Y.Z')
opsmReset = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmReset.setStatus('current')
if mibBuilder.loadTexts: opsmReset.setDescription('0: hard reset, 1: soft reset.')
opsmProtectionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmProtectionMode.setStatus('current')
if mibBuilder.loadTexts: opsmProtectionMode.setDescription('The mode of protection switch. 0: clear, 1: force to primary, 2: force to secondary.')
opsmRevertiveSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmRevertiveSetting.setStatus('current')
if mibBuilder.loadTexts: opsmRevertiveSetting.setDescription('The action when the opticial of primary channel is resumed. 0: Non-Revertive, 1: Revertive.')
opsmDiffSwitchSetting = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmDiffSwitchSetting.setStatus('current')
if mibBuilder.loadTexts: opsmDiffSwitchSetting.setDescription('Enable or disable the function of input power different detection. 0: Disable, 1: Enable.')
opsmDiffAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 23), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmDiffAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: opsmDiffAlarmThreshold.setDescription('Get/Set Input optical power different alarm threshold between primary and secondary, default:10,(Unit:0.1dBm),range: 0--100')
opsmDiffSwitchThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 24), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmDiffSwitchThreshold.setStatus('current')
if mibBuilder.loadTexts: opsmDiffSwitchThreshold.setDescription('Get/Set Input optical power switching threshold between primary and secondary, default:20,(Unit:0.1dBm),range: 0--100')
opsmInherentDiffOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 25), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInherentDiffOffset.setStatus('current')
if mibBuilder.loadTexts: opsmInherentDiffOffset.setDescription('Get/Set Input Optical Power different Offset between primary and secondary,default:0,(Unit:0.1dBm),range: -300--300')
opsmWTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmWTRTime.setStatus('current')
if mibBuilder.loadTexts: opsmWTRTime.setDescription('Used in conjunction with PortID to access WTR time: default:5,(Unit:1s),range: 1--720')
opsmSwitchStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSwitchStatus.setStatus('current')
if mibBuilder.loadTexts: opsmSwitchStatus.setDescription('The status of protection switch. 0: IDLE, 1: WTR, 2: Auto, 3: SF_ALL, 4: N/A, 5: Forced.')
opsmSwitchPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSwitchPosition.setStatus('current')
if mibBuilder.loadTexts: opsmSwitchPosition.setDescription('The position of switch. 0: Secondary 1: Primary')
opsmInputLosAlarmThrPathP = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 40), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInputLosAlarmThrPathP.setStatus('current')
if mibBuilder.loadTexts: opsmInputLosAlarmThrPathP.setDescription('The input los alarm threshold on primary path default: -250,(Unit:0.1dBm),range: -350--350')
opsmInputLosAlarmThrPathS = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 41), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInputLosAlarmThrPathS.setStatus('current')
if mibBuilder.loadTexts: opsmInputLosAlarmThrPathS.setDescription('The input los alarm threshold on secondary path default: -250,(Unit:0.1dBm),range: -350--350')
opsmInputLosAlarmHys = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 42), HeTenthdBm()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: opsmInputLosAlarmHys.setStatus('current')
if mibBuilder.loadTexts: opsmInputLosAlarmHys.setDescription('The input los alarm hystersis on both path default: 10,(Unit:0.1dB),range: 10--30')
opsmInputPowerPathP = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmInputPowerPathP.setStatus('current')
if mibBuilder.loadTexts: opsmInputPowerPathP.setDescription('The input power on primary path. (Unit:0.1dBm)')
opsmInputPowerPathS = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmInputPowerPathS.setStatus('current')
if mibBuilder.loadTexts: opsmInputPowerPathS.setDescription('The input power on secondary path. (Unit:0.1dBm)')
opsmSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 2, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: opsmSwitchCount.setStatus('current')
if mibBuilder.loadTexts: opsmSwitchCount.setDescription('Times the switch has changed its position.')
oplkV6Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001))
oplkemuNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1))
oplkemuNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0))
oplinkTrapCode = MibScalar((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1002), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oplinkTrapCode.setStatus('current')
if mibBuilder.loadTexts: oplinkTrapCode.setDescription('This object describes oplink trap. It contains information about chassis, slot, port, device type (card type) and specific error code. When get, return 0')
oplinkemuTemperatureAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 1)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuTemperatureAbnormal.setStatus('current')
if mibBuilder.loadTexts: oplinkemuTemperatureAbnormal.setDescription('This trap signifies that emu temperature is exceess or bellow normal temperature range.')
oplinkemuTemperatureResume = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 2)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuTemperatureResume.setStatus('current')
if mibBuilder.loadTexts: oplinkemuTemperatureResume.setDescription('This trap signifies that emu temperature abnormal alarm is clear.')
oplinkemuFanRemove = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 3)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuFanRemove.setStatus('current')
if mibBuilder.loadTexts: oplinkemuFanRemove.setDescription('This trap signifies that emu fan card is removed.')
oplinkemuFanInsert = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 4)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuFanInsert.setStatus('current')
if mibBuilder.loadTexts: oplinkemuFanInsert.setDescription('This trap signifies that emu fan remove alarm is clear.')
oplinkemuPowerRemove = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 5)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuPowerRemove.setStatus('current')
if mibBuilder.loadTexts: oplinkemuPowerRemove.setDescription('This trap signifies that emu power card is removed.')
oplinkemuPowerInsert = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 6)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuPowerInsert.setStatus('current')
if mibBuilder.loadTexts: oplinkemuPowerInsert.setDescription('This trap signifies that emu power remove alarm is clear.')
oplinkemuVoltageAbnormal = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 7)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuVoltageAbnormal.setStatus('current')
if mibBuilder.loadTexts: oplinkemuVoltageAbnormal.setDescription('This trap signifies that emu voltage is exceess or bellow normal voltage range.')
oplinkemuVoltageResume = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 8)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuVoltageResume.setStatus('current')
if mibBuilder.loadTexts: oplinkemuVoltageResume.setDescription('This trap signifies that emu voltage abnormal alarm is clear.')
oplinkemuSubCardDelete = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 9)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardDelete.setStatus('current')
if mibBuilder.loadTexts: oplinkemuSubCardDelete.setDescription('This trap signifies that emu sub-card is delete.')
oplinkemuSubCardAdd = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 10)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardAdd.setStatus('current')
if mibBuilder.loadTexts: oplinkemuSubCardAdd.setDescription('This trap signifies that emu sub-card delete alarm is clear.')
oplinkemuSubCardUnmatch = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 11)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardUnmatch.setStatus('current')
if mibBuilder.loadTexts: oplinkemuSubCardUnmatch.setDescription('This trap signifies that emu sub-card is unmatch with the configuration.')
oplinkemuSubCardMatch = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 1, 0, 12)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkemuSubCardMatch.setStatus('current')
if mibBuilder.loadTexts: oplinkemuSubCardMatch.setDescription('This trap signifies that emu sub-card unmatch alarm is clear.')
oplkopsmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2))
oplkopsmNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0))
oplinkopsmInputLosRPI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 1)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRPI1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosRPI1.setDescription('This trap signifies that opsm input power los alarm on CH1 primary path is on.')
oplinkopsmInputLosResumeRPI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 2)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRPI1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRPI1.setDescription('This trap signifies that opsm input power los alarm on CH1 primary path is clear.')
oplinkopsmInputLosRSI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 3)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRSI1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosRSI1.setDescription('This trap signifies that opsm input power los alarm on CH1 secondary path is on.')
oplinkopsmInputLosResumeRSI1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 4)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRSI1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRSI1.setDescription('This trap signifies that opsm input power los alarm on CH1 secondary path is clear.')
oplinkopsmInputLosRPI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 5)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRPI2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosRPI2.setDescription('This trap signifies that opsm input power los alarm on CH2 primary path is on.')
oplinkopsmInputLosResumeRPI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 6)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRPI2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRPI2.setDescription('This trap signifies that opsm input power los alarm on CH2 primary path is clear.')
oplinkopsmInputLosRSI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 7)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosRSI2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosRSI2.setDescription('This trap signifies that opsm input power los alarm on CH2 secondary path is on.')
oplinkopsmInputLosResumeRSI2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 8)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRSI2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmInputLosResumeRSI2.setDescription('This trap signifies that opsm input power los alarm on CH2 secondary path is clear.')
oplinkopsmPowerDiffChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 9)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffChannel1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmPowerDiffChannel1.setDescription('This trap signifies that opsm input power different alarm on CH1 is on.')
oplinkopsmPowerDiffResumeChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 10)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffResumeChannel1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmPowerDiffResumeChannel1.setDescription('This trap signifies that opsm input power different alarm on CH1 is clear.')
oplinkopsmPowerDiffChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 11)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffChannel2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmPowerDiffChannel2.setDescription('This trap signifies that opsm input power different alarm on CH2 is on.')
oplinkopsmPowerDiffResumeChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 12)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmPowerDiffResumeChannel2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmPowerDiffResumeChannel2.setDescription('This trap signifies that opsm input power different alarm on CH2 is clear.')
oplinkopsmSwitchFailChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 13)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchFailChannel1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmSwitchFailChannel1.setDescription('This trap signifies that opsm switch fail alarm on CH1 is on.')
oplinkopsmSwitchSuccessChannel1 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 14)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchSuccessChannel1.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmSwitchSuccessChannel1.setDescription('This trap signifies that opsm switch fail alarm on CH1 is clear.')
oplinkopsmSwitchFailChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 15)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchFailChannel2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmSwitchFailChannel2.setDescription('This trap signifies that opsm switch fail alarm on CH2 is on.')
oplinkopsmSwitchSuccessChannel2 = NotificationType((1, 3, 6, 1, 4, 1, 19547, 1, 7, 1, 1001, 2, 0, 16)).setObjects(("OPLINK-BTI-OPS-MIB", "oplinkTrapCode"))
if mibBuilder.loadTexts: oplinkopsmSwitchSuccessChannel2.setStatus('current')
if mibBuilder.loadTexts: oplinkopsmSwitchSuccessChannel2.setDescription('This trap signifies that opsm switch fail alarm on CH2 is clear.')
mibBuilder.exportSymbols("OPLINK-BTI-OPS-MIB", HeTenthmV=HeTenthmV, emuFirmwareUpgradeStart=emuFirmwareUpgradeStart, oplinkemuVoltageAbnormal=oplinkemuVoltageAbnormal, oplinkopsmSwitchSuccessChannel2=oplinkopsmSwitchSuccessChannel2, emuGetSNMPConfig=emuGetSNMPConfig, opsmSwitchStatus=opsmSwitchStatus, opsmFirmwareVer=opsmFirmwareVer, oplinkemuPowerRemove=oplinkemuPowerRemove, opsmDiffSwitchThreshold=opsmDiffSwitchThreshold, emuBoardTemp=emuBoardTemp, oplinkopsmInputLosRPI2=oplinkopsmInputLosRPI2, opsmVendorID=opsmVendorID, emuNetMask=emuNetMask, emuDelModConfig=emuDelModConfig, opsmCaliDate=opsmCaliDate, oplinkopsmInputLosRSI2=oplinkopsmInputLosRSI2, emuSysDate=emuSysDate, PYSNMP_MODULE_ID=deviceOPSMv2_MIB, oplinkemuSubCardDelete=oplinkemuSubCardDelete, opsmMfgName=opsmMfgName, emuFirmwareVer=emuFirmwareVer, oplinkemuTemperatureAbnormal=oplinkemuTemperatureAbnormal, version2=version2, opsmProtectionMode=opsmProtectionMode, emuGateway=emuGateway, oplkemuNotifications=oplkemuNotifications, oplinkopsmInputLosResumeRSI2=oplinkopsmInputLosResumeRSI2, opsmDiffSwitchSetting=opsmDiffSwitchSetting, opsmInputPowerPathS=opsmInputPowerPathS, oplinkopsmSwitchFailChannel2=oplinkopsmSwitchFailChannel2, emuSaveConfig=emuSaveConfig, opsmInputLosAlarmHys=opsmInputLosAlarmHys, emuUptime=emuUptime, emuMfgDate=emuMfgDate, emuGetHisAlarm=emuGetHisAlarm, opsmInputLosAlarmThrPathP=opsmInputLosAlarmThrPathP, oplinkemuSubCardAdd=oplinkemuSubCardAdd, emuHardwareVer=emuHardwareVer, opsmSerialNum=opsmSerialNum, emuModuleType=emuModuleType, emuGetModConfig=emuGetModConfig, opsmRevertiveSetting=opsmRevertiveSetting, emuAddModConfig=emuAddModConfig, oplinkemuVoltageResume=oplinkemuVoltageResume, oplinkopsmInputLosRPI1=oplinkopsmInputLosRPI1, emuTable=emuTable, emuDelSNMPConfig=emuDelSNMPConfig, HeTenthmA=HeTenthmA, emuGetCurrentAlarm=emuGetCurrentAlarm, emuReset=emuReset, emuLowTemperatureThreshold=emuLowTemperatureThreshold, opsmReset=opsmReset, opsmPartNum=opsmPartNum, opsmItemId=opsmItemId, emuChassisId=emuChassisId, emuEntry=emuEntry, emuAddSNMPConfig=emuAddSNMPConfig, opsmInherentDiffOffset=opsmInherentDiffOffset, oplinkopsmInputLosResumeRPI1=oplinkopsmInputLosResumeRPI1, oplinkemuFanInsert=oplinkemuFanInsert, emuCaliDate=emuCaliDate, emuSerialNum=emuSerialNum, oplkemuNotificationPrefix=oplkemuNotificationPrefix, oplinkopsmSwitchFailChannel1=oplinkopsmSwitchFailChannel1, oplinkTrapCode=oplinkTrapCode, emuItemId=emuItemId, oplinkopsmPowerDiffResumeChannel1=oplinkopsmPowerDiffResumeChannel1, opsmEntry=opsmEntry, oplinkopsmInputLosRSI1=oplinkopsmInputLosRSI1, emuVendorID=emuVendorID, oplinkemuPowerInsert=oplinkemuPowerInsert, oplinkemuFanRemove=oplinkemuFanRemove, opsmTable=opsmTable, opsmHardwareVer=opsmHardwareVer, opsmInputLosAlarmThrPathS=opsmInputLosAlarmThrPathS, oplkV6Traps=oplkV6Traps, oplinkemuTemperatureResume=oplinkemuTemperatureResume, oplkopsmNotifications=oplkopsmNotifications, oplinkopsmPowerDiffChannel2=oplinkopsmPowerDiffChannel2, emuSlotId=emuSlotId, opsmModuleType=opsmModuleType, oplinkopsmInputLosResumeRSI1=oplinkopsmInputLosResumeRSI1, opsmDiffAlarmThreshold=opsmDiffAlarmThreshold, emuMacAddr=emuMacAddr, emuFirmwareUpgradeStatus=emuFirmwareUpgradeStatus, oplinkopsmSwitchSuccessChannel1=oplinkopsmSwitchSuccessChannel1, emuHighTemperatureThreshold=emuHighTemperatureThreshold, opsmSwitchPosition=opsmSwitchPosition, opsmInputPowerPathP=opsmInputPowerPathP, oplinkopsmPowerDiffChannel1=oplinkopsmPowerDiffChannel1, emuIpAddr=emuIpAddr, opsmWTRTime=opsmWTRTime, emuPartNum=emuPartNum, oplkopsmNotificationPrefix=oplkopsmNotificationPrefix, oplinkemuSubCardUnmatch=oplinkemuSubCardUnmatch, opsmSlotId=opsmSlotId, opsmChassisId=opsmChassisId, oplinkopsmInputLosResumeRPI2=oplinkopsmInputLosResumeRPI2, emuSysTime=emuSysTime, oplinkemuSubCardMatch=oplinkemuSubCardMatch, HeTenthdB=HeTenthdB, oplinkopsmPowerDiffResumeChannel2=oplinkopsmPowerDiffResumeChannel2, emuMfgName=emuMfgName, opsmMfgDate=opsmMfgDate, HeTenthCentigrade=HeTenthCentigrade, deviceOPSMv2_MIB=deviceOPSMv2_MIB, emuRestoreDefault=emuRestoreDefault, HeTenthdBm=HeTenthdBm, opsmSwitchCount=opsmSwitchCount)
