#
# PySNMP MIB module CISCO-SWITCH-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SWITCH-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, Gauge32, Bits, IpAddress, MibIdentifier, TimeTicks, Counter64, Counter32, ObjectIdentity, Unsigned32, ModuleIdentity, iso, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Bits", "IpAddress", "MibIdentifier", "TimeTicks", "Counter64", "Counter32", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "iso", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "TextualConvention")
ciscoSwitchStatsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 652))
ciscoSwitchStatsMIB.setRevisions(('2013-01-30 00:00', '2009-10-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSwitchStatsMIB.setRevisionsDescriptions(('Added following OBJECT-GROUP - ciscoSwitchStatsLayer3Group - ciscoSwitchStatsLayer3ExtGroup - ciscoSwitchStatsTotalGroup - ciscoSwitchStatsInternalStatsGroup - ciscoSwitchStatsInternalErrorGroup - ciscoSwitchStatsInternalInstanceGroup - ciscoSwitchStatsRewriteEngineStatsGroup Added new compliance - csstSwitchStatsMIBCompliance2 Deprecated ciscoSwitchStatsL3Group and csstSwitchStatsMIBCompliance', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSwitchStatsMIB.setLastUpdated('201301300000Z')
if mibBuilder.loadTexts: ciscoSwitchStatsMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSwitchStatsMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-lan-switch-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoSwitchStatsMIB.setDescription("The MIB module provides management information for configuration and monitoring of traffic statistics on Cisco's switching devices.")
ciscoSwitchStatsMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 0))
ciscoSwitchStatsMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 1))
ciscoSwitchStatsMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 2))
csstConfigurableStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1))
csstVlanStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2))
csstSwitchTrafficStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3))
csstHwInternalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4))
csstRewriteEngineStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 5))
csstConfigStatsOptionTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 1), )
if mibBuilder.loadTexts: csstConfigStatsOptionTable.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsOptionTable.setDescription('This table contains a list of network traffic statistics options capable to be configured in csstConfigStatsMap for the statistics collection by the device.')
csstConfigStatsOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-STATS-MIB", "csstConfigStatsOptionIndex"))
if mibBuilder.loadTexts: csstConfigStatsOptionEntry.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsOptionEntry.setDescription('Each entry contains statistics information for a specific traffic statistics option.')
csstConfigStatsOptionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: csstConfigStatsOptionIndex.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsOptionIndex.setDescription('A unique value to indicate a specific traffic statistics option.')
csstConfigStatsOptionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 1, 1, 2), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsOptionDesc.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsOptionDesc.setDescription('Indicates the description corresponding to a specific traffic statistics option.')
csstConfigStatsMapSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsMapSize.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsMapSize.setDescription('Indicates the length of the csstConfigStatsMap object. This object value indicates the total number of traffic statistics options that can be configured in csstConfigStatsMap.')
csstConfigStatsMap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: csstConfigStatsMap.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsMap.setDescription('Specifies the sequence of the traffic statistics options that are configured to be collected by the device. The length of this object is specified by the csstConfigStatsMapSize object value, and the value of each octet in the instance value of this object shall be unique and can only be selected from the set of csstConfigStatsOptionIndex values currently populated in csstConfigStatsOptionTable. If a traffic statistics option is configured in this object, the corresponding network traffic statistics will be collected on all the applicable interfaces in this device. Setting this object to a different value will trigger the csstConfigStatsIfTable to be repopulated.')
csstConfigStatsIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4), )
if mibBuilder.loadTexts: csstConfigStatsIfTable.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfTable.setDescription('This table contains information about interface traffic statistics, which is configured through csstConfigStatsMap, for interfaces that are capable of providing such information. The total number of traffic statistics and the traffic statistics options populated in this table will be based on csstConfigStatsMapSize and csstConfigStatsMap. When the csstConfigStatsMap object value is changed to a different value, it will trigger this table to be repopulated.')
csstConfigStatsIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: csstConfigStatsIfEntry.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfEntry.setDescription('Each entry provides traffic statistics information for a specific interface.')
csstConfigStatsIfPackets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 1), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets1.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets1.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the first octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets1 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 2), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets1.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets1.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the first octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets2.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets2.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the second octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 4), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets2.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets2.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the second octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets3.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets3.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the third octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets3 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 6), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets3.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets3.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the third octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets4.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets4.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the fourth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets4 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 8), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets4.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets4.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the fourth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets5.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets5.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the fifth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 10), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets5.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets5.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the fifth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 11), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets6.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets6.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the sixth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets6 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 12), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets6.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets6.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the sixth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 13), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets7.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets7.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the seventh octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets7 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 14), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets7.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets7.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the seventh octet value of the csstConfigStatsMap object.')
csstConfigStatsIfPackets8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 15), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfPackets8.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfPackets8.setDescription('The total number of packets counted on this interface for the traffic statistics option that is specified by the eighth octet value of the csstConfigStatsMap object.')
csstConfigStatsIfOctets8 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 1, 4, 1, 16), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstConfigStatsIfOctets8.setStatus('current')
if mibBuilder.loadTexts: csstConfigStatsIfOctets8.setDescription('The total number of octets counted on this interface for the traffic statistics option that is specified by the eighth octet value of the csstConfigStatsMap object.')
csstVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1), )
if mibBuilder.loadTexts: csstVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: csstVlanStatsTable.setDescription('This table provides specific traffic statistics information for VLANs that are capable of providing such statistics information.')
csstVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SWITCH-STATS-MIB", "csstVlanIndex"))
if mibBuilder.loadTexts: csstVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csstVlanStatsEntry.setDescription('An entry providing traffic statistics information collected for a specific VLAN')
csstVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: csstVlanIndex.setStatus('current')
if mibBuilder.loadTexts: csstVlanIndex.setDescription('Indicates the VLAN number.')
csstVlanKnownBridgedUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstVlanKnownBridgedUcastPkts.setStatus('current')
if mibBuilder.loadTexts: csstVlanKnownBridgedUcastPkts.setDescription('The total number of bridged unicast packets, counted on this VLAN, with known MAC (Media Access Control) DA (destination address).')
csstVlanKnownBridgedUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstVlanKnownBridgedUcastOctets.setStatus('current')
if mibBuilder.loadTexts: csstVlanKnownBridgedUcastOctets.setDescription('The total number of octets for the bridged unicast packets, counted on this VLAN, with known MAC DA.')
csstVlanKnownBridgedNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1, 1, 4), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstVlanKnownBridgedNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: csstVlanKnownBridgedNUcastPkts.setDescription('The total number of bridged non-unicast packets, counted on this VLAN, with known MAC DA.')
csstVlanKnownBridgedNUcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 2, 1, 1, 5), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstVlanKnownBridgedNUcastOctets.setStatus('current')
if mibBuilder.loadTexts: csstVlanKnownBridgedNUcastOctets.setDescription('The total number of octets for the bridged non-unicast packets, counted on this VLAN, with known MAC DA.')
csstSwitchStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1), )
if mibBuilder.loadTexts: csstSwitchStatsTable.setStatus('current')
if mibBuilder.loadTexts: csstSwitchStatsTable.setDescription('This table provides specific L2/L3 traffic statistics information of switching engines.')
csstSwitchStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: csstSwitchStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csstSwitchStatsEntry.setDescription('An entry providing L2/L3 traffic statistics information maintained by a particular switching engine entity (identified by entPhysicalIndex). An entry of this table is created if a switch engine with these L2/L3 traffic statistics is detected by the managed system. An entry of this table is deleted if the removal of the switching engine itself.')
csstL2TotalBridgedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 1), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL2TotalBridgedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL2TotalBridgedPkts.setDescription('The total number of bridged packets on this switching engine.')
csstL3FibSwitchedIpv4UcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 2), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3FibSwitchedIpv4UcastPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3FibSwitchedIpv4UcastPkts.setDescription('The total number of IPv4 Unicast packets, switched by the FIB (Forwarding Information Base) on this switching engine.')
csstL3FibSwitchedIpv6UcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 3), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3FibSwitchedIpv6UcastPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3FibSwitchedIpv6UcastPkts.setDescription('The total number of IPv6 Unicast packets, switched by the FIB (Forwarding Information Base) on this switching engine.')
csstL3FibSwitchedEoMplsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3FibSwitchedEoMplsPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3FibSwitchedEoMplsPkts.setDescription('The total number of EoMPLS (Ethernet over MPLS) packets switched by the FIB Forwarding Information Base) on this switching engine.')
csstL3FibSwitchedMplsPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3FibSwitchedMplsPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3FibSwitchedMplsPkts.setDescription('The total number of MPLS (Multiprotocol Label Switching) packets switched by the FIB Forwarding Information Base) on this switching engine.')
csstL3TotalMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 6), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3TotalMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3TotalMulticastPkts.setDescription('The total number of Multicast packets switched at Layer3 by this switching engine.')
csstL3IgmpMldPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 7), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3IgmpMldPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3IgmpMldPkts.setDescription('The total number of IGMP MLD (Multicast Listener Discovery) packets switched by this switching engine.')
csstL3Ipv4MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 8), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3Ipv4MulticastPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3Ipv4MulticastPkts.setDescription('The total number of IPv4 Multicast packets switched at Layer3 by this switching engine.')
csstL3Ipv6MulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 9), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3Ipv6MulticastPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3Ipv6MulticastPkts.setDescription('The total number of IPv6 Multicast packets switched at Layer3 by this switching engine.')
csstL3MulticastLeakPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3MulticastLeakPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3MulticastLeakPkts.setDescription('The total number of Multicast Reverse Path Forwarding (RPF) check failed packets which are leaked to the CPU for processing.')
csstL3InputAclRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3InputAclRoutedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3InputAclRoutedPkts.setDescription('The total number of Input ACL(Access Control List) Routed packets.')
csstL3OutputAclRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 12), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3OutputAclRoutedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3OutputAclRoutedPkts.setDescription('The total number of Output ACL Routed packets.')
csstL3InputNetflowSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 13), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3InputNetflowSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3InputNetflowSwitchedPkts.setDescription('The total number of Input Netflow Switched packets.')
csstL3OutputNetflowSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 14), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3OutputNetflowSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3OutputNetflowSwitchedPkts.setDescription('The total number of Output Netflow Switched packets.')
csstL3InExceptionRedirectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 15), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3InExceptionRedirectPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3InExceptionRedirectPkts.setDescription('The total number of Input packets which are redirected to the CPU due to an exception.')
csstL3OutExceptionRedirectPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 16), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3OutExceptionRedirectPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3OutExceptionRedirectPkts.setDescription('The total number of Output packets which are redirected to the CPU due to an exception.')
csstL3TotalNetflowSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 17), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3TotalNetflowSwitchedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3TotalNetflowSwitchedPkts.setDescription('This object indicates the total number of Netflow switched packets.')
csstL3TotalAclRoutedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 18), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstL3TotalAclRoutedPkts.setStatus('current')
if mibBuilder.loadTexts: csstL3TotalAclRoutedPkts.setDescription('This object indicates the total number of ACL routed packets.')
csstTotalAclDenyPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 3, 1, 1, 19), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstTotalAclDenyPkts.setStatus('current')
if mibBuilder.loadTexts: csstTotalAclDenyPkts.setDescription('This object indicates the total number of ACL deny packets.')
csstHwInternalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1), )
if mibBuilder.loadTexts: csstHwInternalStatsTable.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsTable.setDescription('This table contains a list of traffic statistics collection for internal devices of a specific physical entity that is capable of providing this information. Such physical entity is identified by the entPhysicalIndex in ENTITY-MIB.')
csstHwInternalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsDeviceId"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsInstanceNum"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsDirection"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsType"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsIndex"))
if mibBuilder.loadTexts: csstHwInternalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsEntry.setDescription('Each entry contains statistics information for an internal device of a specific physical entity.')
csstHwInternalStatsDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csstHwInternalStatsDeviceId.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsDeviceId.setDescription('This object indicates an arbitrary number which uniquely identifies a specific internal device.')
csstHwInternalStatsInstanceNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csstHwInternalStatsInstanceNum.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsInstanceNum.setDescription('This object indicates an arbitrary number which uniquely identifies the instance number of a specific internal device.')
csstHwInternalStatsDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ingressIn", 1), ("ingressOut", 2), ("egressIn", 3), ("egressOut", 4))))
if mibBuilder.loadTexts: csstHwInternalStatsDirection.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsDirection.setDescription('This object indicates the flow direction of a specific traffic statistics.')
csstHwInternalStatsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("packetsPerSec", 1), ("bytesPerSec", 2))))
if mibBuilder.loadTexts: csstHwInternalStatsType.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsType.setDescription('This object indicates the flow type of a specific traffic statistics.')
csstHwInternalStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 5), Unsigned32())
if mibBuilder.loadTexts: csstHwInternalStatsIndex.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsIndex.setDescription('This object indicates an arbitrary integer which uniquely identifies a specific traffic statistics.')
csstHwInternalStatsDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 6), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalStatsDescr.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsDescr.setDescription('This object indicates the internal device name and port list of a specific traffic statistics.')
csstHwInternalStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalStatsRate.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalStatsRate.setDescription('This object indicates the rate of a specific traffic statistics.')
csstHwInternalErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 2), )
if mibBuilder.loadTexts: csstHwInternalErrorTable.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorTable.setDescription('This table contains a list of internal error statistics for internal devices of a specific physical entity that is capable of providing this information. Such physical entity is identified by the entPhysicalIndex in ENTITY-MIB.')
csstHwInternalErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorDeviceId"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorCategory"))
if mibBuilder.loadTexts: csstHwInternalErrorEntry.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorEntry.setDescription('Each entry contains statistics information for an internal device of a specific physical entity.')
csstHwInternalErrorDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csstHwInternalErrorDeviceId.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorDeviceId.setDescription('This object indicates an arbitrary number which uniquely identifies a specific internal device.')
csstHwInternalErrorCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("error", 1), ("congestion", 2), ("qos", 3))))
if mibBuilder.loadTexts: csstHwInternalErrorCategory.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorCategory.setDescription('This object indicates the statistics category.')
csstHwInternalErrorDeviceInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalErrorDeviceInfo.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorDeviceInfo.setDescription('This object indicates the name and role of a specific internal device.')
csstHwInternalErrorLastCleared = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 2, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalErrorLastCleared.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorLastCleared.setDescription('This object indicates the most recent time the error statistics was cleared.')
csstHwInternalErrorInstTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3), )
if mibBuilder.loadTexts: csstHwInternalErrorInstTable.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstTable.setDescription('This table contains a list of internal error instance management information for internal devices.')
csstHwInternalErrorInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorDeviceId"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorCategory"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorInstNum"), (0, "CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorInstErrorId"))
if mibBuilder.loadTexts: csstHwInternalErrorInstEntry.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstEntry.setDescription('Each entry contains a particular error statistics information for a specific device.')
csstHwInternalErrorInstNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csstHwInternalErrorInstNum.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstNum.setDescription('This object indicates an arbitrary number which uniquely identifies the instance number of a specific internal device.')
csstHwInternalErrorInstErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: csstHwInternalErrorInstErrorId.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstErrorId.setDescription('This object indicates an arbitrary number which uniquely identifies the internal error.')
csstHwInternalErrorInstDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalErrorInstDescr.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstDescr.setDescription('This object indicates the internal error description. A zero-length string indicates that the internal error description is not available.')
csstHwInternalErrorInstCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalErrorInstCount.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstCount.setDescription('This object indicates the count of internal error.')
csstHwInternalErrorInstPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 4, 3, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstHwInternalErrorInstPorts.setStatus('current')
if mibBuilder.loadTexts: csstHwInternalErrorInstPorts.setDescription('This object indicates the internal ports that generated the error. A zero-length string indicates that the internal ports information is not available.')
csstRewriteEnginePktDropStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 5, 1), )
if mibBuilder.loadTexts: csstRewriteEnginePktDropStatsTable.setStatus('current')
if mibBuilder.loadTexts: csstRewriteEnginePktDropStatsTable.setDescription('This table contains packet drop information for each channel of a rewrite engine on each physical entity, sush as a module capable of providing this information.')
csstRewriteEnginePktDropStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-SWITCH-STATS-MIB", "csstRewriteEngineChannelIndex"))
if mibBuilder.loadTexts: csstRewriteEnginePktDropStatsEntry.setStatus('current')
if mibBuilder.loadTexts: csstRewriteEnginePktDropStatsEntry.setDescription('Each row contains packet drop statistic for a channel interface of a rewrite engine on a particular module identified by its entPhysicalIndex.')
csstRewriteEngineChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: csstRewriteEngineChannelIndex.setStatus('current')
if mibBuilder.loadTexts: csstRewriteEngineChannelIndex.setDescription('The channel number of a rewrtie engine on a given module.')
csstRewriteEngineDropPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 5, 1, 1, 2), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: csstRewriteEngineDropPkts.setStatus('current')
if mibBuilder.loadTexts: csstRewriteEngineDropPkts.setDescription('This object indicates the total number of rewrite engine dropped packets.')
csstRewriteEngineTotalOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 652, 1, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: csstRewriteEngineTotalOverruns.setStatus('current')
if mibBuilder.loadTexts: csstRewriteEngineTotalOverruns.setDescription('This object indicates the total number of counter overruns.')
csstSwitchStatsMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 1))
csstSwitchStatsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2))
csstSwitchStatsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 1, 1)).setObjects(("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsConfOptionGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsConfMapGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsConfIfGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsVlanGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsL2Group"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsL3Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csstSwitchStatsMIBCompliance = csstSwitchStatsMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: csstSwitchStatsMIBCompliance.setDescription('The compliance statement for CISCO-SWITCH-STATS-MIB.')
csstSwitchStatsMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 1, 2)).setObjects(("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsConfOptionGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsConfMapGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsConfIfGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsVlanGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsL2Group"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsLayer3Group"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsLayer3ExtGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsTotalGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsInternalStatsGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsInternalErrorGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsInternalInstanceGroup"), ("CISCO-SWITCH-STATS-MIB", "ciscoSwitchStatsRewriteEngineStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    csstSwitchStatsMIBCompliance2 = csstSwitchStatsMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: csstSwitchStatsMIBCompliance2.setDescription('The compliance statement for CISCO-SWITCH-STATS-MIB.')
ciscoSwitchStatsConfOptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 1)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstConfigStatsOptionDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsConfOptionGroup = ciscoSwitchStatsConfOptionGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsConfOptionGroup.setDescription('A collection of objects providing information for optional traffic statistics for configuration.')
ciscoSwitchStatsConfMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 2)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstConfigStatsMapSize"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsConfMapGroup = ciscoSwitchStatsConfMapGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsConfMapGroup.setDescription('A collection of objects providing information for configuration of traffic statistics on this device.')
ciscoSwitchStatsConfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 3)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets1"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets1"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets2"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets2"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets3"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets3"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets4"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets4"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets5"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets5"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets6"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets6"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets7"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets7"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfPackets8"), ("CISCO-SWITCH-STATS-MIB", "csstConfigStatsIfOctets8"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsConfIfGroup = ciscoSwitchStatsConfIfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsConfIfGroup.setDescription('A collection of objects providing information for configured statistics for interfaces that are capable of providing such information.')
ciscoSwitchStatsVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 4)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstVlanKnownBridgedUcastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstVlanKnownBridgedUcastOctets"), ("CISCO-SWITCH-STATS-MIB", "csstVlanKnownBridgedNUcastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstVlanKnownBridgedNUcastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsVlanGroup = ciscoSwitchStatsVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsVlanGroup.setDescription('A collection of objects providing information for traffic statistics for VLANs that are capable of providing such information.')
ciscoSwitchStatsL2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 5)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstL2TotalBridgedPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsL2Group = ciscoSwitchStatsL2Group.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsL2Group.setDescription('A collection of objects providing information for L2 Total Bridged Packets for switching engines.')
ciscoSwitchStatsL3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 6)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedIpv4UcastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedIpv6UcastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedEoMplsPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedMplsPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3TotalMulticastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3IgmpMldPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3Ipv4MulticastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3Ipv6MulticastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3MulticastLeakPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3InputAclRoutedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3OutputAclRoutedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3InputNetflowSwitchedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3OutputNetflowSwitchedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3InExceptionRedirectPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3OutExceptionRedirectPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsL3Group = ciscoSwitchStatsL3Group.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSwitchStatsL3Group.setDescription('A collection of objects providing information for L3 traffic statistics for switching engines.')
ciscoSwitchStatsLayer3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 7)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedIpv4UcastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedIpv6UcastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedEoMplsPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3FibSwitchedMplsPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3IgmpMldPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3Ipv4MulticastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3Ipv6MulticastPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3MulticastLeakPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3InputAclRoutedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3OutputAclRoutedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3InputNetflowSwitchedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3OutputNetflowSwitchedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3InExceptionRedirectPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3OutExceptionRedirectPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsLayer3Group = ciscoSwitchStatsLayer3Group.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsLayer3Group.setDescription('A collection of objects providing information for L3 traffic statistics for switching engines.')
ciscoSwitchStatsLayer3ExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 8)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstL3TotalMulticastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsLayer3ExtGroup = ciscoSwitchStatsLayer3ExtGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsLayer3ExtGroup.setDescription('An extended collection of objects providing information for L3 traffic statistics for switching engines.')
ciscoSwitchStatsTotalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 9)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstL3TotalNetflowSwitchedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstL3TotalAclRoutedPkts"), ("CISCO-SWITCH-STATS-MIB", "csstTotalAclDenyPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsTotalGroup = ciscoSwitchStatsTotalGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsTotalGroup.setDescription('A collection of objects providing information for Total Traffic Packets for switching engines.')
ciscoSwitchStatsInternalStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 10)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsDescr"), ("CISCO-SWITCH-STATS-MIB", "csstHwInternalStatsRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsInternalStatsGroup = ciscoSwitchStatsInternalStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsInternalStatsGroup.setDescription('A collection of objects providing information for internal traffic statistics.')
ciscoSwitchStatsInternalErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 11)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorDeviceInfo"), ("CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorLastCleared"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsInternalErrorGroup = ciscoSwitchStatsInternalErrorGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsInternalErrorGroup.setDescription('A collection of objects providing information for internal error statistics.')
ciscoSwitchStatsInternalInstanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 12)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorInstDescr"), ("CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorInstCount"), ("CISCO-SWITCH-STATS-MIB", "csstHwInternalErrorInstPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsInternalInstanceGroup = ciscoSwitchStatsInternalInstanceGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsInternalInstanceGroup.setDescription('A collection of objects providing device instance information for internal error statistics.')
ciscoSwitchStatsRewriteEngineStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 652, 2, 2, 13)).setObjects(("CISCO-SWITCH-STATS-MIB", "csstRewriteEngineDropPkts"), ("CISCO-SWITCH-STATS-MIB", "csstRewriteEngineTotalOverruns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSwitchStatsRewriteEngineStatsGroup = ciscoSwitchStatsRewriteEngineStatsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSwitchStatsRewriteEngineStatsGroup.setDescription('A collection of objects providing information for rewrite engine statistics.')
mibBuilder.exportSymbols("CISCO-SWITCH-STATS-MIB", csstConfigStatsOptionDesc=csstConfigStatsOptionDesc, csstTotalAclDenyPkts=csstTotalAclDenyPkts, csstConfigStatsIfOctets2=csstConfigStatsIfOctets2, csstL3InputNetflowSwitchedPkts=csstL3InputNetflowSwitchedPkts, csstSwitchStatsMIBCompliance2=csstSwitchStatsMIBCompliance2, csstHwInternalStatsType=csstHwInternalStatsType, PYSNMP_MODULE_ID=ciscoSwitchStatsMIB, csstConfigStatsIfPackets5=csstConfigStatsIfPackets5, csstConfigStatsIfOctets1=csstConfigStatsIfOctets1, csstConfigStatsIfPackets6=csstConfigStatsIfPackets6, csstHwInternalErrorInstNum=csstHwInternalErrorInstNum, csstL3FibSwitchedMplsPkts=csstL3FibSwitchedMplsPkts, csstL3OutputAclRoutedPkts=csstL3OutputAclRoutedPkts, ciscoSwitchStatsConfOptionGroup=ciscoSwitchStatsConfOptionGroup, ciscoSwitchStatsL3Group=ciscoSwitchStatsL3Group, csstHwInternalErrorDeviceId=csstHwInternalErrorDeviceId, csstL3IgmpMldPkts=csstL3IgmpMldPkts, csstHwInternalErrorDeviceInfo=csstHwInternalErrorDeviceInfo, ciscoSwitchStatsMIBObjects=ciscoSwitchStatsMIBObjects, csstConfigStatsOptionTable=csstConfigStatsOptionTable, csstL3TotalNetflowSwitchedPkts=csstL3TotalNetflowSwitchedPkts, csstRewriteEnginePktDropStatsTable=csstRewriteEnginePktDropStatsTable, csstConfigStatsIfOctets6=csstConfigStatsIfOctets6, ciscoSwitchStatsConfMapGroup=ciscoSwitchStatsConfMapGroup, csstVlanStatsEntry=csstVlanStatsEntry, csstVlanKnownBridgedUcastPkts=csstVlanKnownBridgedUcastPkts, csstConfigStatsMap=csstConfigStatsMap, csstL3FibSwitchedIpv6UcastPkts=csstL3FibSwitchedIpv6UcastPkts, csstRewriteEngineDropPkts=csstRewriteEngineDropPkts, ciscoSwitchStatsMIBNotifs=ciscoSwitchStatsMIBNotifs, csstConfigStatsOptionEntry=csstConfigStatsOptionEntry, csstConfigStatsIfPackets3=csstConfigStatsIfPackets3, csstVlanStatsTable=csstVlanStatsTable, csstHwInternalErrorTable=csstHwInternalErrorTable, csstL3Ipv6MulticastPkts=csstL3Ipv6MulticastPkts, csstHwInternalErrorInstDescr=csstHwInternalErrorInstDescr, csstHwInternalErrorInstEntry=csstHwInternalErrorInstEntry, csstVlanStats=csstVlanStats, csstL3FibSwitchedIpv4UcastPkts=csstL3FibSwitchedIpv4UcastPkts, csstConfigStatsIfPackets1=csstConfigStatsIfPackets1, csstL3OutputNetflowSwitchedPkts=csstL3OutputNetflowSwitchedPkts, csstSwitchStatsMIBGroups=csstSwitchStatsMIBGroups, csstRewriteEngineTotalOverruns=csstRewriteEngineTotalOverruns, csstHwInternalErrorInstTable=csstHwInternalErrorInstTable, csstConfigStatsMapSize=csstConfigStatsMapSize, csstVlanKnownBridgedUcastOctets=csstVlanKnownBridgedUcastOctets, csstHwInternalStatsInstanceNum=csstHwInternalStatsInstanceNum, csstConfigStatsIfPackets8=csstConfigStatsIfPackets8, csstL3MulticastLeakPkts=csstL3MulticastLeakPkts, csstConfigStatsOptionIndex=csstConfigStatsOptionIndex, csstSwitchTrafficStats=csstSwitchTrafficStats, csstHwInternalErrorInstPorts=csstHwInternalErrorInstPorts, csstHwInternalStats=csstHwInternalStats, ciscoSwitchStatsInternalStatsGroup=ciscoSwitchStatsInternalStatsGroup, csstConfigStatsIfOctets5=csstConfigStatsIfOctets5, csstRewriteEngineChannelIndex=csstRewriteEngineChannelIndex, ciscoSwitchStatsMIBConform=ciscoSwitchStatsMIBConform, csstHwInternalErrorCategory=csstHwInternalErrorCategory, csstL3Ipv4MulticastPkts=csstL3Ipv4MulticastPkts, csstL3TotalAclRoutedPkts=csstL3TotalAclRoutedPkts, csstHwInternalStatsDeviceId=csstHwInternalStatsDeviceId, ciscoSwitchStatsLayer3ExtGroup=ciscoSwitchStatsLayer3ExtGroup, csstConfigStatsIfTable=csstConfigStatsIfTable, csstHwInternalStatsDescr=csstHwInternalStatsDescr, csstHwInternalErrorInstErrorId=csstHwInternalErrorInstErrorId, csstConfigStatsIfOctets3=csstConfigStatsIfOctets3, ciscoSwitchStatsLayer3Group=ciscoSwitchStatsLayer3Group, csstL3InExceptionRedirectPkts=csstL3InExceptionRedirectPkts, csstHwInternalStatsTable=csstHwInternalStatsTable, csstConfigStatsIfEntry=csstConfigStatsIfEntry, ciscoSwitchStatsConfIfGroup=ciscoSwitchStatsConfIfGroup, csstRewriteEngineStats=csstRewriteEngineStats, ciscoSwitchStatsMIB=ciscoSwitchStatsMIB, csstRewriteEnginePktDropStatsEntry=csstRewriteEnginePktDropStatsEntry, csstHwInternalStatsDirection=csstHwInternalStatsDirection, csstHwInternalErrorEntry=csstHwInternalErrorEntry, csstVlanKnownBridgedNUcastOctets=csstVlanKnownBridgedNUcastOctets, csstVlanKnownBridgedNUcastPkts=csstVlanKnownBridgedNUcastPkts, csstConfigStatsIfOctets7=csstConfigStatsIfOctets7, csstSwitchStatsMIBCompliance=csstSwitchStatsMIBCompliance, csstL3OutExceptionRedirectPkts=csstL3OutExceptionRedirectPkts, csstHwInternalErrorLastCleared=csstHwInternalErrorLastCleared, ciscoSwitchStatsL2Group=ciscoSwitchStatsL2Group, csstConfigStatsIfPackets2=csstConfigStatsIfPackets2, csstL3TotalMulticastPkts=csstL3TotalMulticastPkts, csstHwInternalStatsRate=csstHwInternalStatsRate, csstSwitchStatsEntry=csstSwitchStatsEntry, csstConfigStatsIfPackets4=csstConfigStatsIfPackets4, csstL2TotalBridgedPkts=csstL2TotalBridgedPkts, csstConfigStatsIfPackets7=csstConfigStatsIfPackets7, csstConfigStatsIfOctets4=csstConfigStatsIfOctets4, ciscoSwitchStatsInternalErrorGroup=ciscoSwitchStatsInternalErrorGroup, ciscoSwitchStatsTotalGroup=ciscoSwitchStatsTotalGroup, ciscoSwitchStatsInternalInstanceGroup=ciscoSwitchStatsInternalInstanceGroup, csstL3FibSwitchedEoMplsPkts=csstL3FibSwitchedEoMplsPkts, ciscoSwitchStatsRewriteEngineStatsGroup=ciscoSwitchStatsRewriteEngineStatsGroup, csstConfigStatsIfOctets8=csstConfigStatsIfOctets8, csstHwInternalErrorInstCount=csstHwInternalErrorInstCount, csstSwitchStatsTable=csstSwitchStatsTable, csstConfigurableStats=csstConfigurableStats, csstHwInternalStatsEntry=csstHwInternalStatsEntry, csstL3InputAclRoutedPkts=csstL3InputAclRoutedPkts, csstVlanIndex=csstVlanIndex, csstHwInternalStatsIndex=csstHwInternalStatsIndex, ciscoSwitchStatsVlanGroup=ciscoSwitchStatsVlanGroup, csstSwitchStatsMIBCompliances=csstSwitchStatsMIBCompliances)
