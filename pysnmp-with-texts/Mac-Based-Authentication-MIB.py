#
# PySNMP MIB module Mac-Based-Authentication-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Mac-Based-Authentication-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:16:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
dlink_common_mgmt, = mibBuilder.importSymbols("DLINK-ID-REC-MIB", "dlink-common-mgmt")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, MibIdentifier, Counter32, ModuleIdentity, ObjectIdentity, Counter64, NotificationType, Bits, iso, Unsigned32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "MibIdentifier", "Counter32", "ModuleIdentity", "ObjectIdentity", "Counter64", "NotificationType", "Bits", "iso", "Unsigned32", "IpAddress", "Gauge32")
TextualConvention, RowStatus, MacAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "MacAddress", "DisplayString")
swMBAMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 171, 12, 35))
if mibBuilder.loadTexts: swMBAMIB.setLastUpdated('201008130000Z')
if mibBuilder.loadTexts: swMBAMIB.setOrganization('D-Link Corp.')
if mibBuilder.loadTexts: swMBAMIB.setContactInfo('http://support.dlink.com')
if mibBuilder.loadTexts: swMBAMIB.setDescription('.')
class PortList(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 127)

swMBACtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 1))
swMBAInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 2))
swMBAPortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 3))
swMBAMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 4))
swMacBasedAuthState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthState.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthState.setDescription('This object enables or disables the MAC-based Access Control status of the device.')
swMacBasedAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("radius", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthMethod.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthMethod.setDescription('This object indicates the type of authentication method. The RADIUS method is authenticated per authentication server.')
swMacBasedAuthPWD = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPWD.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPWD.setDescription('This object indicates the password of the RADIUS authentication method.')
swMacBasedAuthVlanName = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthVlanName.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthVlanName.setDescription('This object indicates the VLAN name of the MAC-based Access Control guest VLAN.')
swMacBasedAuthMemberPorts = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 5), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthMemberPorts.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthMemberPorts.setDescription('This object indicates the member ports of the MAC-based Access Control guest VLAN.')
swMacBasedAuthVlanNameDelState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthVlanNameDelState.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthVlanNameDelState.setDescription('Used to delete the guest VLAN of MAC-based Access Control.')
swMacBasedAuthClearAllAction = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthClearAllAction.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthClearAllAction.setDescription('Used to clear the authentication state of all the ports.')
swMacBasedAuthMaxUser = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 9), Integer32().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthMaxUser.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthMaxUser.setDescription('This object indicates the maximum number of authorized client(s) on the whole device. Note: The maximum number of the authorized client(s) range is (0..N). The value N means the maximum number. This is determined by the project itself. When 0 is set, the maximum number of authorized clients is unlimited.')
swMacBasedAuthFailOver = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthFailOver.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthFailOver.setDescription('This object sets the RADIUS authentication failover state. When the authentication failover is disabled and the RADIUS servers are unreachable, the authentication will fail. When the authentication failover is enabled and the RADIUS servers authentication are unreachable, the local database will be used to do the authentication. By default, the state is disabled.')
swMacBasedAuthRadiusAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthRadiusAuthorization.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthRadiusAuthorization.setDescription("This object sets the acceptance state of RADIUS authorization. When the authorization is enabled for the MAC-based Access Control's RADIUS method, the authorized attributes (for example VLAN, 802.1p default priority, and ACL) assigned by the local database will be accepted if the global authorization state is enabled.")
swMacBasedAuthLocalAuthorization = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthLocalAuthorization.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthLocalAuthorization.setDescription("This object sets the acceptance state of local authorization. When the authorization is enabled for the MAC-based Access Control's local method, the authorized attributes assigned by the local database will be accepted if the global authorization state is enabled.")
swMacBasedAuthTrapState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthTrapState.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthTrapState.setDescription('This object is used to enable or disable the sending of MAC-based Access Control traps.')
swMacBasedAuthLogState = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthLogState.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthLogState.setDescription('This object is used to enable or disable the generating of MAC-based Access Control logs.')
swMacBasedAuthPwdType = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual_string", 1), ("client_mac_address", 2))).clone('manual_string')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPwdType.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPwdType.setDescription('This object is used to configure the type of RADIUS authentication password for MAC-based Access Control. manual_string: Use the same string as password for all clients do RADIUS authentication, the string can be configured by swMacBasedAuthPWD. client_mac_address: Use the clients MAC address as the password for RADIUS authentication.')
swMacBasedAuthPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1), )
if mibBuilder.loadTexts: swMacBasedAuthPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortInfoTable.setDescription('A table that displays the authentication state of every port.')
swMacBasedAuthPortInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1), ).setIndexNames((0, "Mac-Based-Authentication-MIB", "swMacBasedAuthInfoPortIndex"), (0, "Mac-Based-Authentication-MIB", "swMacBasedAuthInfoMacIndex"))
if mibBuilder.loadTexts: swMacBasedAuthPortInfoEntry.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortInfoEntry.setDescription('A table that displays the authentication state for each port.')
swMacBasedAuthInfoPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoPortIndex.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoPortIndex.setDescription('This object indicates the authenticated port number.')
swMacBasedAuthInfoMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoMacIndex.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoMacIndex.setDescription('This object indicates the authenticated MAC address.')
swMacBasedAuthInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unconnected", 1), ("connecting", 2), ("authenticating", 3), ("authenticated", 4), ("blocked", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoStatus.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoStatus.setDescription('This object indicates the authenticated status.')
swMacBasedAuthInfoAssignVLANName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoAssignVLANName.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoAssignVLANName.setDescription('This object indicates the VLAN name that the port is assigned with once MAC authentication was successful.')
swMacBasedAuthClearMacAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthClearMacAction.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthClearMacAction.setDescription('When set to start (2), the user will return to an un-authenticated state. All the timers associated with the user will be reset. When the administrator performs a get operation, it always returns the other (1).')
swMacBasedAuthInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoPriority.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoPriority.setDescription('This object indicates the priority that the port or MAC address is assigned to after it passes authentication. -1 will be displayed when the port or MAC address has not been assigned any priority')
swMacBasedAuthInfoAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 7), Integer32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoAgingTime.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoAgingTime.setDescription('This object indicates the remaining time until the authenticated client returns to an unauthenticated state. -1 will be displayed before the port or MAC address passes authentication. 0 will be displayed when the aging time is set to infinite on the port. -2 indicates the host aging timeout, but MAC-based Access Control will hold this entry as expired (for stacking performance) and after the time has expired, the switch will delete it.')
swMacBasedAuthInfoBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 8), Integer32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoBlockTime.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoBlockTime.setDescription('This object indicates the remaining time until the authentication failure client is allowed to start a new authentication. -1 will be displayed after the port or MAC address passes authentication. -2 indicates the host block timeout, but MAC-based Access Control will hold this entry as expired (for stacking performance) and after the time has expired, the switch will delete it.')
swMacBasedAuthInfoAssignVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthInfoAssignVID.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthInfoAssignVID.setDescription('This object indicates the VID that the port is assigned to once the MAC authentication was successful.')
swMacBasedAuthStateTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2), )
if mibBuilder.loadTexts: swMacBasedAuthStateTable.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateTable.setDescription("This table contains the MAC-based Access Control clients' authentication information.")
swMacBasedAuthStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1), ).setIndexNames((0, "Mac-Based-Authentication-MIB", "swMacBasedAuthStatePort"), (0, "Mac-Based-Authentication-MIB", "swMacBasedAuthStateOriginalVID"), (0, "Mac-Based-Authentication-MIB", "swMacBasedAuthStateMacAddr"))
if mibBuilder.loadTexts: swMacBasedAuthStateEntry.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateEntry.setDescription("This list contains the MAC-based Access Control host's authentication information.")
swMacBasedAuthStatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swMacBasedAuthStatePort.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStatePort.setDescription("Specifies the MAC-based Access Control host's port number.")
swMacBasedAuthStateOriginalVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 2), VlanId())
if mibBuilder.loadTexts: swMacBasedAuthStateOriginalVID.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateOriginalVID.setDescription("Specifies the MAC-based Access Control host's original received VLAN ID.")
swMacBasedAuthStateMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 3), MacAddress())
if mibBuilder.loadTexts: swMacBasedAuthStateMacAddr.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateMacAddr.setDescription("Specifies the MAC-based Access Control host's MAC address.")
swMacBasedAuthStateAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("authenticated", 1), ("authenticating", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthStateAuthStatus.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateAuthStatus.setDescription("Specifies the MAC-based Access Control host's authentication state.")
swMacBasedAuthStateAssignVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 5), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthStateAssignVID.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateAssignVID.setDescription("Specifies the MAC-based Access Control host's assign VLAN ID.")
swMacBasedAuthStateAssignPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthStateAssignPriority.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateAssignPriority.setDescription("Specifies the MAC-based Access Control host's priority assigned when it passes authentication. -1 indicates the host has no priority assigned.")
swMacBasedAuthStateRemainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 7), Integer32()).setUnits('minutes/seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthStateRemainTime.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateRemainTime.setDescription("Specifies the remaining MAC-based Access Control host's aging or block time. When host's authentication state is 'authenticated' in swMacBasedAuthStateAuthStatus, this object indicates the host's aging time, the units are in minutes. When host's authentication state is 'blocked' in swMacBasedAuthStateAuthStatus, this object indicates the host's block time, the units are in seconds. 0 indicates that the authenticated host on the port will never age out. -2 indicates the host aging or block timeout, but MAC-based Access Control will hold this entry as expired (for stacking performance) and after the time expired, the switch will delete it.")
swMacBasedAuthStateDelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 2, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthStateDelAction.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthStateDelAction.setDescription('Used to delete the specified authentication entry. Setting start (2) will delete this MAC-based Access Control host entry.')
swMacBasedAuthPortTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1), )
if mibBuilder.loadTexts: swMacBasedAuthPortTable.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortTable.setDescription('A table that contains the method and state for every port.')
swMacBasedAuthPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1), ).setIndexNames((0, "Mac-Based-Authentication-MIB", "swMacBasedAuthPortIndex"))
if mibBuilder.loadTexts: swMacBasedAuthPortEntry.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortEntry.setDescription('A list of method types and states for each port.')
swMacBasedAuthPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthPortIndex.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortIndex.setDescription("This object indicates the module's port number.")
swMacBasedAuthPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPortState.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortState.setDescription('This object enables or disables the authentication state of this port.')
swMacBasedAuthPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port_based", 1), ("host_based", 2))).clone('port_based')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPortMode.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortMode.setDescription('This object specifies the mode of this entry. port_based: All users connected to a port share the first authentication result. host_based: Each user can have its own authentication result. ')
swMacBasedAuthPortAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPortAgingTime.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortAgingTime.setDescription('Specifies the time period that an authenticated host will be kept in an authenticated state. When the aging time has timed out, the host will be moved back to an unauthenticated state. Note: When 0 is set on the specified port, it means that the aging has been disabled, meaning that the aging time is set to infinite.')
swMacBasedAuthPortBlockTime = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPortBlockTime.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortBlockTime.setDescription('If a host fails to authenticate, the next authentication will not start within the block time unless the user clears the entry state manually. Note: When 0 is set on the specified port, it means that the block authentication fail MAC address block time is set to infinite.')
swMacBasedAuthClearPortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthClearPortAction.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthClearPortAction.setDescription('When set to start (2), the specified port will return to an un-authenticated state. All the timers associated with the specified port will be reset. When the administrator performs a get operation, it always returns the other (1).')
swMacBasedAuthPortMaxUser = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 3, 1, 1, 7), Integer32().clone(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swMacBasedAuthPortMaxUser.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthPortMaxUser.setDescription('This object indicates the maximum number of authorized client(s) on the specified port. Note: The maximum number of authorized client (s) range is (0..N). The value N means the maximum number is determined by the project itself. When 0 is set on the specified port, the maximum number of authorized client(s) has no limit.')
swMacBasedAuthDatabaseTable = MibTable((1, 3, 6, 1, 4, 1, 171, 12, 35, 4, 1), )
if mibBuilder.loadTexts: swMacBasedAuthDatabaseTable.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthDatabaseTable.setDescription('A table that contains the MAC-based Access Control account information.')
swMacBasedAuthDatabaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 12, 35, 4, 1, 1), ).setIndexNames((0, "Mac-Based-Authentication-MIB", "swMacBasedAuthDatabaseMacIndex"))
if mibBuilder.loadTexts: swMacBasedAuthDatabaseEntry.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthDatabaseEntry.setDescription('A list that contains the MAC-based Access Control account information.')
swMacBasedAuthDatabaseMacIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 4, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacBasedAuthDatabaseMacIndex.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthDatabaseMacIndex.setDescription('This object indicates the MAC address for this user account.')
swMacBasedAuthDatabaseVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMacBasedAuthDatabaseVlanName.setStatus('obsolete')
if mibBuilder.loadTexts: swMacBasedAuthDatabaseVlanName.setDescription('This object indicates the VLAN name for this user account.')
swMacBasedAuthDatabaseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMacBasedAuthDatabaseStatus.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthDatabaseStatus.setDescription('The status of this entry.')
swMacBasedAuthDatabaseVID = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 12, 35, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: swMacBasedAuthDatabaseVID.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthDatabaseVID.setDescription('This object indicates the VID for this user account. 0 indicates to delete the configured VID in this user account.')
swMBATrap = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 11))
swMBANotify = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1))
swMBANotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1, 0))
swMacBasedAccessControlLoggedSuccess = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1, 0, 1)).setObjects(("Mac-Based-Authentication-MIB", "swMacBasedAuthInfoMacIndex"), ("Mac-Based-Authentication-MIB", "swMacBasedAuthInfoPortIndex"), ("Mac-Based-Authentication-MIB", "swMacBasedAuthVID"))
if mibBuilder.loadTexts: swMacBasedAccessControlLoggedSuccess.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAccessControlLoggedSuccess.setDescription('The trap is sent when a MAC-based Access Control host has successfully logged in.')
swMacBasedAccessControlLoggedFail = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1, 0, 2)).setObjects(("Mac-Based-Authentication-MIB", "swMacBasedAuthInfoMacIndex"), ("Mac-Based-Authentication-MIB", "swMacBasedAuthInfoPortIndex"), ("Mac-Based-Authentication-MIB", "swMacBasedAuthVID"))
if mibBuilder.loadTexts: swMacBasedAccessControlLoggedFail.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAccessControlLoggedFail.setDescription("The trap is sent when a MAC-based Access Control host's login fails.")
swMacBasedAccessControlAgesOut = NotificationType((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1, 0, 3)).setObjects(("Mac-Based-Authentication-MIB", "swMacBasedAuthInfoMacIndex"), ("Mac-Based-Authentication-MIB", "swMacBasedAuthInfoPortIndex"), ("Mac-Based-Authentication-MIB", "swMacBasedAuthVID"))
if mibBuilder.loadTexts: swMacBasedAccessControlAgesOut.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAccessControlAgesOut.setDescription('The trap is sent when a MAC-based Access Control host ages out.')
swMBANotifyBidings = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1, 1))
swMacBasedAuthVID = MibScalar((1, 3, 6, 1, 4, 1, 171, 12, 35, 11, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swMacBasedAuthVID.setStatus('current')
if mibBuilder.loadTexts: swMacBasedAuthVID.setDescription('The VLAN ID for the host already exists.')
mibBuilder.exportSymbols("Mac-Based-Authentication-MIB", swMacBasedAuthDatabaseStatus=swMacBasedAuthDatabaseStatus, swMacBasedAuthStateAuthStatus=swMacBasedAuthStateAuthStatus, swMacBasedAuthFailOver=swMacBasedAuthFailOver, swMacBasedAuthLogState=swMacBasedAuthLogState, swMacBasedAuthInfoAgingTime=swMacBasedAuthInfoAgingTime, swMacBasedAuthLocalAuthorization=swMacBasedAuthLocalAuthorization, swMacBasedAuthInfoPriority=swMacBasedAuthInfoPriority, swMBAInfo=swMBAInfo, swMacBasedAuthPWD=swMacBasedAuthPWD, swMacBasedAuthPortInfoEntry=swMacBasedAuthPortInfoEntry, swMacBasedAuthStateAssignPriority=swMacBasedAuthStateAssignPriority, swMacBasedAuthPortInfoTable=swMacBasedAuthPortInfoTable, swMacBasedAuthStateEntry=swMacBasedAuthStateEntry, swMBAPortMgmt=swMBAPortMgmt, swMacBasedAuthClearPortAction=swMacBasedAuthClearPortAction, swMacBasedAuthPortTable=swMacBasedAuthPortTable, swMacBasedAuthInfoAssignVID=swMacBasedAuthInfoAssignVID, swMacBasedAccessControlLoggedFail=swMacBasedAccessControlLoggedFail, swMacBasedAuthInfoMacIndex=swMacBasedAuthInfoMacIndex, PortList=PortList, swMBACtrl=swMBACtrl, swMacBasedAuthMaxUser=swMacBasedAuthMaxUser, swMacBasedAuthInfoPortIndex=swMacBasedAuthInfoPortIndex, swMBAMgmt=swMBAMgmt, swMacBasedAuthVlanNameDelState=swMacBasedAuthVlanNameDelState, swMacBasedAuthPortBlockTime=swMacBasedAuthPortBlockTime, swMacBasedAuthState=swMacBasedAuthState, swMacBasedAuthClearAllAction=swMacBasedAuthClearAllAction, swMacBasedAuthInfoBlockTime=swMacBasedAuthInfoBlockTime, swMacBasedAuthPortAgingTime=swMacBasedAuthPortAgingTime, swMacBasedAuthPortMaxUser=swMacBasedAuthPortMaxUser, swMacBasedAuthStateMacAddr=swMacBasedAuthStateMacAddr, swMacBasedAuthDatabaseVlanName=swMacBasedAuthDatabaseVlanName, swMacBasedAuthPortState=swMacBasedAuthPortState, swMacBasedAuthDatabaseTable=swMacBasedAuthDatabaseTable, swMacBasedAuthDatabaseMacIndex=swMacBasedAuthDatabaseMacIndex, swMacBasedAuthRadiusAuthorization=swMacBasedAuthRadiusAuthorization, swMacBasedAccessControlAgesOut=swMacBasedAccessControlAgesOut, swMacBasedAuthVlanName=swMacBasedAuthVlanName, swMBANotifyBidings=swMBANotifyBidings, swMacBasedAuthPortIndex=swMacBasedAuthPortIndex, swMacBasedAuthStateTable=swMacBasedAuthStateTable, swMacBasedAuthStateAssignVID=swMacBasedAuthStateAssignVID, swMacBasedAuthPortMode=swMacBasedAuthPortMode, swMacBasedAuthInfoStatus=swMacBasedAuthInfoStatus, swMBATrap=swMBATrap, swMacBasedAuthPortEntry=swMacBasedAuthPortEntry, swMacBasedAuthInfoAssignVLANName=swMacBasedAuthInfoAssignVLANName, swMacBasedAuthClearMacAction=swMacBasedAuthClearMacAction, swMacBasedAuthStateOriginalVID=swMacBasedAuthStateOriginalVID, PYSNMP_MODULE_ID=swMBAMIB, swMacBasedAuthMethod=swMacBasedAuthMethod, swMacBasedAuthStateDelAction=swMacBasedAuthStateDelAction, swMacBasedAuthDatabaseVID=swMacBasedAuthDatabaseVID, swMacBasedAuthVID=swMacBasedAuthVID, swMacBasedAuthDatabaseEntry=swMacBasedAuthDatabaseEntry, swMacBasedAuthTrapState=swMacBasedAuthTrapState, swMacBasedAuthStatePort=swMacBasedAuthStatePort, swMBANotify=swMBANotify, swMacBasedAuthPwdType=swMacBasedAuthPwdType, swMacBasedAuthStateRemainTime=swMacBasedAuthStateRemainTime, swMBAMIB=swMBAMIB, swMBANotifyPrefix=swMBANotifyPrefix, swMacBasedAuthMemberPorts=swMacBasedAuthMemberPorts, swMacBasedAccessControlLoggedSuccess=swMacBasedAccessControlLoggedSuccess)
