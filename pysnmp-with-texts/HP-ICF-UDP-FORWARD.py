#
# PySNMP MIB module HP-ICF-UDP-FORWARD (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-UDP-FORWARD
# Produced by pysmi-0.3.4 at Wed May  1 13:35:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
InetAddressType, InetPortNumber, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetPortNumber", "InetAddress")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Integer32, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, MibIdentifier, Counter32, Bits, ModuleIdentity, NotificationType, ObjectIdentity, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "MibIdentifier", "Counter32", "Bits", "ModuleIdentity", "NotificationType", "ObjectIdentity", "iso", "IpAddress")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hpicfUdpFwd = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23))
hpicfUdpFwd.setRevisions(('2017-06-13 06:30', '2013-01-04 06:30', '2009-08-04 06:30', '2004-05-19 06:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfUdpFwd.setRevisionsDescriptions(('The Mib object hpicfUdpFwdDhcpRelayAdminStatus description has been updated.', 'Added Mib Objects for DHCP Relay Agent configuration and policies.', 'Added Mib Objects that display DHCP Relay Agent packet statistics.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: hpicfUdpFwd.setLastUpdated('201706130630Z')
if mibBuilder.loadTexts: hpicfUdpFwd.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfUdpFwd.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfUdpFwd.setDescription('This MIB module defines objects for configuring the UDP Broadcast Forwarding of HP networking devices.')
hpicfUdpFwdNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 0))
hpicfUdpFwdObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1))
hpicfUdpBcastFwdAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpBcastFwdAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpBcastFwdAdminStatus.setDescription('The operational status of the UDP Broadcast Forward feature')
hpicfUdpFwdServersTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2), )
if mibBuilder.loadTexts: hpicfUdpFwdServersTable.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdServersTable.setDescription('This table contains a list of UDP Server Address and associated port numbers for which forwarding is enabled.')
hpicfUdpFwdServersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1), ).setIndexNames((0, "HP-ICF-UDP-FORWARD", "hpicfUdpFwdVlanId"), (0, "HP-ICF-UDP-FORWARD", "hpicfUdpFwdServerIndex"))
if mibBuilder.loadTexts: hpicfUdpFwdServersEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdServersEntry.setDescription('An entry of the UDP broadcast forwarding table.')
hpicfUdpFwdVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: hpicfUdpFwdVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdVlanId.setDescription('The VLAN index which uniquely identifies a row in this table.')
hpicfUdpFwdServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: hpicfUdpFwdServerIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdServerIndex.setDescription('Server table index which uniquely identifies a position in table of servers (for VlanIndex).')
hpicfUdpFwdServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUdpFwdServerAddressType.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdServerAddressType.setDescription('The type of IP address for the configured server')
hpicfUdpFwdServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1, 4), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 36))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUdpFwdServerAddress.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdServerAddress.setDescription(' This object contains the server IP address. The type of address specified by this object is indicated by the corresponding instance of the hpicfUdpFwdServerAddressType. An attempt to create a row in which the length of this object is not consistent with the type specified by hpicfUdpFwdServerAddressType must be rejected.')
hpicfUdpFwdPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUdpFwdPortNumber.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdPortNumber.setDescription(' UDP port number for which UDP broadcast forwarding is enabled.')
hpicfUdpFwdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfUdpFwdRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdRowStatus.setDescription('Status of table row.')
hpicfUdpFwdDhcpRelayClientDiscards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayClientDiscards.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayClientDiscards.setDescription('The number of DHCP client packets discarded by the relay agent for any reason.')
hpicfUdpFwdDhcpRelayClientForwards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayClientForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayClientForwards.setDescription('The number of DHCP client packets relayed successfully to the DHCP server by the relay agent.')
hpicfUdpFwdDhcpRelayServerDiscards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayServerDiscards.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayServerDiscards.setDescription('The number of DHCP server packets discarded by the relay agent for any reason.')
hpicfUdpFwdDhcpRelayServerForwards = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayServerForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayServerForwards.setDescription('The number of DHCP server packets relayed successfully to the DHCP server by the relay agent.')
hpicfUdpFwdDhcpRelayAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayAdminStatus.setDescription('The operational status of the DHCP Relay protocol.')
hpicfUdpFwdDhcpRelayOption82Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 8))
hpicfUdpFwdDhcpRelayOption82AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82AdminStatus.setDescription('The operational status of the option 82 in the DHCP Relay Agent protocol. This mib object has a direct dependency on the hpicfUdpFwdDhcpRelayOption82Policy object and should be present when operational status of this object is changed to enable. The status disable will reset the option 82 parameters to default values.')
hpicfUdpFwdDhcpRelayOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("replace", 1), ("keep", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82Policy.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82Policy.setDescription('The operational policies for option 82. This mib object can be configured only when hpicfUdpFwdDhcpRelayOption82AdminStatus is in enable state. This is the required parameter during configuration of option 82. The policies currently supported are: Keep --- Append the option 82 field to the client request only if not already present before forwarding to the server. Replace --- Replace the option 82 field(s) with switch option 82 if present else add the option 82 field to the client request before forwarding to server. Drop --- Drop the request if option 82 field exists in the client request else add the option 82 field to the client request before forwarding to server.')
hpicfUdpFwdDhcpRelayOption82ResponseValidate = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82ResponseValidate.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82ResponseValidate.setDescription('Validate the server response for the option 82 field before forwarding to client. This mib object can be configured only when hpicfUdpFwdDhcpRelayOption82AdminStatus is in enable state. This is an optional parameter during configuration of option 82 and the default value in the switch is disable')
hpicfUdpFwdDhcpRelayOption82RemoteId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2), ("mgmtvlan", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82RemoteId.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayOption82RemoteId.setDescription('Remote ID sub option that will be filled while forwarding the client request to the server. This mib object can be configured only when hpicfUdpFwdDhcpRelayOption82AdminStatus is in enable state. The default value for this mib object is mac. mac --- the switch MAC address is filled as remote id sub option. ip --- IP address of the VLAN on which the client request is received is filled as remote id sub option. mgmtvlan --- the management VLAN IP address will be filled for remote id sub option.')
hpicfUdpFwdDhcpRelayHopCount = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayHopCount.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayHopCount.setDescription('If this mib object is disabled then DHCP Relay Agent will not increment the hop count field of the DHCP packet while transmitting packet to the DHCP server. If this mib object is enabled then DHCP Relay Agent will increment the hop count field while transmitting the DHCP packet to the server. By default it is set to enabled.')
hpicfUdpFwdConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2))
hpicfUdpFwdCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 1))
hpicfUdpFwdGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 2))
hpicfUdpFwdCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 1, 1)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpFwdCfgGroup"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdServerTableGroup"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdCfgGroup"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdServerTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdCompliance = hpicfUdpFwdCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdCompliance.setDescription(' A compliance statement for HP Routing switches with UDP packet forwarding')
hpicfUdpFwdStatCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 1, 2)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayStatsGroup"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdStatCompliance = hpicfUdpFwdStatCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdStatCompliance.setDescription(' A compliance statement for HP Routing switches with UDP packet forwarding statistics')
hpicfUdpFwdDhcpRelayCfgCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 1, 3)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayCfgGroup"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayCfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdDhcpRelayCfgCompliance = hpicfUdpFwdDhcpRelayCfgCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayCfgCompliance.setDescription(' A compliance statement for HP Routing switches with DHCP Relay agent.')
hpicfUdpFwdCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 2, 1)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpBcastFwdAdminStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdCfgGroup = hpicfUdpFwdCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdCfgGroup.setDescription('Enable/Disable the UDP Forwarder in the routing switch')
hpicfUdpFwdServerTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 2, 2)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpFwdServerAddressType"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdServerAddress"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdPortNumber"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdServerTableGroup = hpicfUdpFwdServerTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdServerTableGroup.setDescription('A collection of objects allowing configuration of UDP Forwarder Server Address table')
hpicfUdpFwdDhcpRelayStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 2, 3)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayClientDiscards"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayClientForwards"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayServerDiscards"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayServerForwards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdDhcpRelayStatsGroup = hpicfUdpFwdDhcpRelayStatsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayStatsGroup.setDescription('A collection of statistics objects for DHCP Relay agent')
hpicfUdpFwdDhcpRelayCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 23, 2, 2, 4)).setObjects(("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayAdminStatus"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayOption82AdminStatus"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayOption82Policy"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayOption82ResponseValidate"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayOption82RemoteId"), ("HP-ICF-UDP-FORWARD", "hpicfUdpFwdDhcpRelayHopCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfUdpFwdDhcpRelayCfgGroup = hpicfUdpFwdDhcpRelayCfgGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfUdpFwdDhcpRelayCfgGroup.setDescription('A Collection of Object(s) that allow configuration of DHCP Relay Agent and its policies.')
mibBuilder.exportSymbols("HP-ICF-UDP-FORWARD", hpicfUdpFwdServerIndex=hpicfUdpFwdServerIndex, hpicfUdpFwdServerAddress=hpicfUdpFwdServerAddress, hpicfUdpFwdDhcpRelayOption82Objects=hpicfUdpFwdDhcpRelayOption82Objects, hpicfUdpFwdDhcpRelayOption82ResponseValidate=hpicfUdpFwdDhcpRelayOption82ResponseValidate, hpicfUdpFwdDhcpRelayOption82AdminStatus=hpicfUdpFwdDhcpRelayOption82AdminStatus, hpicfUdpFwdNotification=hpicfUdpFwdNotification, PYSNMP_MODULE_ID=hpicfUdpFwd, hpicfUdpFwdCompliance=hpicfUdpFwdCompliance, hpicfUdpFwdObjects=hpicfUdpFwdObjects, hpicfUdpFwdPortNumber=hpicfUdpFwdPortNumber, hpicfUdpBcastFwdAdminStatus=hpicfUdpBcastFwdAdminStatus, hpicfUdpFwdServersTable=hpicfUdpFwdServersTable, hpicfUdpFwdDhcpRelayOption82RemoteId=hpicfUdpFwdDhcpRelayOption82RemoteId, hpicfUdpFwdCompliances=hpicfUdpFwdCompliances, hpicfUdpFwdDhcpRelayClientDiscards=hpicfUdpFwdDhcpRelayClientDiscards, hpicfUdpFwdStatCompliance=hpicfUdpFwdStatCompliance, hpicfUdpFwdDhcpRelayAdminStatus=hpicfUdpFwdDhcpRelayAdminStatus, hpicfUdpFwdDhcpRelayOption82Policy=hpicfUdpFwdDhcpRelayOption82Policy, hpicfUdpFwdVlanId=hpicfUdpFwdVlanId, hpicfUdpFwdGroups=hpicfUdpFwdGroups, hpicfUdpFwdServerAddressType=hpicfUdpFwdServerAddressType, hpicfUdpFwdDhcpRelayHopCount=hpicfUdpFwdDhcpRelayHopCount, hpicfUdpFwdServersEntry=hpicfUdpFwdServersEntry, hpicfUdpFwdServerTableGroup=hpicfUdpFwdServerTableGroup, hpicfUdpFwdConformance=hpicfUdpFwdConformance, hpicfUdpFwdRowStatus=hpicfUdpFwdRowStatus, hpicfUdpFwdDhcpRelayCfgGroup=hpicfUdpFwdDhcpRelayCfgGroup, hpicfUdpFwdDhcpRelayClientForwards=hpicfUdpFwdDhcpRelayClientForwards, hpicfUdpFwdCfgGroup=hpicfUdpFwdCfgGroup, hpicfUdpFwdDhcpRelayServerForwards=hpicfUdpFwdDhcpRelayServerForwards, hpicfUdpFwdDhcpRelayStatsGroup=hpicfUdpFwdDhcpRelayStatsGroup, hpicfUdpFwdDhcpRelayCfgCompliance=hpicfUdpFwdDhcpRelayCfgCompliance, hpicfUdpFwd=hpicfUdpFwd, hpicfUdpFwdDhcpRelayServerDiscards=hpicfUdpFwdDhcpRelayServerDiscards)
