#
# PySNMP MIB module HPN-ICF-NVGRE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-NVGRE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:40:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, ModuleIdentity, MibIdentifier, Counter64, TimeTicks, NotificationType, Unsigned32, iso, Counter32, IpAddress, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "ModuleIdentity", "MibIdentifier", "Counter64", "TimeTicks", "NotificationType", "Unsigned32", "iso", "Counter32", "IpAddress", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32")
DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
hpnicfNvgre = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156))
hpnicfNvgre.setRevisions(('2014-03-11 09:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfNvgre.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hpnicfNvgre.setLastUpdated('201403110900Z')
if mibBuilder.loadTexts: hpnicfNvgre.setOrganization('')
if mibBuilder.loadTexts: hpnicfNvgre.setContactInfo('')
if mibBuilder.loadTexts: hpnicfNvgre.setDescription('The NVGRE MIB.')
hpnicfNvgreObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1))
hpnicfNvgreScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 1))
hpnicfNvgreNextNvgreID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreNextNvgreID.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreNextNvgreID.setDescription('Next available NVGRE ID(identifier), in the range of 4096 to 16777214. The invalid value 4294967295 indicates that no ID can be set.')
hpnicfNvgreConfigured = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreConfigured.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreConfigured.setDescription('Number of currently configured NVGREs.')
hpnicfNvgreTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 2), )
if mibBuilder.loadTexts: hpnicfNvgreTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTable.setDescription('A table for NVGRE parameters.')
hpnicfNvgreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreID"))
if mibBuilder.loadTexts: hpnicfNvgreEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreEntry.setDescription('Each entry represents the parameters of an NVGRE.')
hpnicfNvgreID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfNvgreID.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreID.setDescription('The NVGRE ID, in the range of 4096 to 16777214.')
hpnicfNvgreVsiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 2, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNvgreVsiIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreVsiIndex.setDescription('VSI index. A unique index for the conceptual row identifying a VSI(Virtual Switch Instance) in the hpnicfVsiTable.')
hpnicfNvgreRemoteMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreRemoteMacCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreRemoteMacCount.setDescription('Remote MAC(Media Access Control) address count of this NVGRE.')
hpnicfNvgreRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNvgreRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent.')
hpnicfNvgreTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 3), )
if mibBuilder.loadTexts: hpnicfNvgreTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelTable.setDescription('A table for NVGRE tunnel parameters.')
hpnicfNvgreTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreID"), (0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreTunnelID"))
if mibBuilder.loadTexts: hpnicfNvgreTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelEntry.setDescription('Each entry represents the parameters of an NVGRE tunnel.')
hpnicfNvgreTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfNvgreTunnelID.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelID.setDescription('A unique index for tunnel.')
hpnicfNvgreTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNvgreTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelRowStatus.setDescription('Operation status of this table entry.')
hpnicfNvgreTunnelOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreTunnelOctets.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelOctets.setDescription('The number of octets that have been forwarded over the tunnel.')
hpnicfNvgreTunnelPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreTunnelPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelPackets.setDescription('The number of packets that have been forwarded over the tunnel.')
hpnicfNvgreTunnelBoundTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 4), )
if mibBuilder.loadTexts: hpnicfNvgreTunnelBoundTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelBoundTable.setDescription('A table for the number of NVGREs to which the tunnel is bound.')
hpnicfNvgreTunnelBoundEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreTunnelID"))
if mibBuilder.loadTexts: hpnicfNvgreTunnelBoundEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelBoundEntry.setDescription('An entry represents the number of NVGREs to which a tunnel is bound.')
hpnicfNvgreTunnelBoundNvgreNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreTunnelBoundNvgreNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreTunnelBoundNvgreNum.setDescription('The number of NVGREs to which this tunnel is bound.')
hpnicfNvgreMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 5), )
if mibBuilder.loadTexts: hpnicfNvgreMacTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreMacTable.setDescription('A table for NVGRE remote MAC addresses.')
hpnicfNvgreMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreVsiIndex"), (0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreMacAddr"))
if mibBuilder.loadTexts: hpnicfNvgreMacEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreMacEntry.setDescription('An NVGRE remote MAC address.')
hpnicfNvgreMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 5, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfNvgreMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreMacAddr.setDescription('MAC address.')
hpnicfNvgreMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreMacTunnelID.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreMacTunnelID.setDescription('A unique index for tunnel.')
hpnicfNvgreMacType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("selfLearned", 1), ("staticConfigured", 2), ("protocolLearned", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfNvgreMacType.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreMacType.setDescription('The type of an MAC address.')
hpnicfNvgreStaticMacTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 6), )
if mibBuilder.loadTexts: hpnicfNvgreStaticMacTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreStaticMacTable.setDescription('A table for NVGRE static remote MAC addresses.')
hpnicfNvgreStaticMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreVsiIndex"), (0, "HPN-ICF-NVGRE-MIB", "hpnicfNvgreStaticMacAddr"))
if mibBuilder.loadTexts: hpnicfNvgreStaticMacEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreStaticMacEntry.setDescription('An NVGRE static MAC address.')
hpnicfNvgreStaticMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: hpnicfNvgreStaticMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreStaticMacAddr.setDescription('Static MAC address.')
hpnicfNvgreStaticMacTunnelID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 6, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNvgreStaticMacTunnelID.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreStaticMacTunnelID.setDescription('A unique index for tunnel.')
hpnicfNvgreStaticMacRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 156, 1, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfNvgreStaticMacRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfNvgreStaticMacRowStatus.setDescription('Operation status of this table entry. When a row in this table is in active state, no objects in that row can be modified by the agent.')
mibBuilder.exportSymbols("HPN-ICF-NVGRE-MIB", hpnicfNvgreTunnelBoundNvgreNum=hpnicfNvgreTunnelBoundNvgreNum, hpnicfNvgreStaticMacTable=hpnicfNvgreStaticMacTable, hpnicfNvgreEntry=hpnicfNvgreEntry, hpnicfNvgreTunnelBoundTable=hpnicfNvgreTunnelBoundTable, PYSNMP_MODULE_ID=hpnicfNvgre, hpnicfNvgreTunnelID=hpnicfNvgreTunnelID, hpnicfNvgreTunnelPackets=hpnicfNvgreTunnelPackets, hpnicfNvgreRowStatus=hpnicfNvgreRowStatus, hpnicfNvgreTunnelEntry=hpnicfNvgreTunnelEntry, hpnicfNvgreMacType=hpnicfNvgreMacType, hpnicfNvgreID=hpnicfNvgreID, hpnicfNvgreScalarGroup=hpnicfNvgreScalarGroup, hpnicfNvgreMacTable=hpnicfNvgreMacTable, hpnicfNvgreRemoteMacCount=hpnicfNvgreRemoteMacCount, hpnicfNvgre=hpnicfNvgre, hpnicfNvgreConfigured=hpnicfNvgreConfigured, hpnicfNvgreMacEntry=hpnicfNvgreMacEntry, hpnicfNvgreStaticMacAddr=hpnicfNvgreStaticMacAddr, hpnicfNvgreStaticMacRowStatus=hpnicfNvgreStaticMacRowStatus, hpnicfNvgreTunnelTable=hpnicfNvgreTunnelTable, hpnicfNvgreTunnelOctets=hpnicfNvgreTunnelOctets, hpnicfNvgreTable=hpnicfNvgreTable, hpnicfNvgreMacAddr=hpnicfNvgreMacAddr, hpnicfNvgreMacTunnelID=hpnicfNvgreMacTunnelID, hpnicfNvgreStaticMacEntry=hpnicfNvgreStaticMacEntry, hpnicfNvgreTunnelBoundEntry=hpnicfNvgreTunnelBoundEntry, hpnicfNvgreVsiIndex=hpnicfNvgreVsiIndex, hpnicfNvgreStaticMacTunnelID=hpnicfNvgreStaticMacTunnelID, hpnicfNvgreObjects=hpnicfNvgreObjects, hpnicfNvgreNextNvgreID=hpnicfNvgreNextNvgreID, hpnicfNvgreTunnelRowStatus=hpnicfNvgreTunnelRowStatus)
