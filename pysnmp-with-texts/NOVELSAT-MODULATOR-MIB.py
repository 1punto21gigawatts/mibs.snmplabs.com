#
# PySNMP MIB module NOVELSAT-MODULATOR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NOVELSAT-MODULATOR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:24:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
nsRoot, = mibBuilder.importSymbols("NOVELSAT-ROOT-MIB", "nsRoot")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, NotificationType, ModuleIdentity, Unsigned32, Integer32, iso, Counter64, Gauge32, IpAddress, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "ModuleIdentity", "Unsigned32", "Integer32", "iso", "Counter64", "Gauge32", "IpAddress", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nsModulator = ModuleIdentity((1, 3, 6, 1, 4, 1, 37576, 3))
nsModulator.setRevisions(('2010-09-12 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nsModulator.setRevisionsDescriptions(('Version 1.0.0.X',))
if mibBuilder.loadTexts: nsModulator.setLastUpdated('201009121500Z')
if mibBuilder.loadTexts: nsModulator.setOrganization('Novelsat')
if mibBuilder.loadTexts: nsModulator.setContactInfo("21 Ha'taasiya St., Ra'anana 43654,Israel -------------------------- Tel: +972-9-7889730 Fax: +972-9- e-mail: info@novelsat.com, support@novelsat.com http://www.novelsat.com -------------------------- ")
if mibBuilder.loadTexts: nsModulator.setDescription('novelsat MIB branch for Modulator products')
nsModConfig = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1))
if mibBuilder.loadTexts: nsModConfig.setStatus('current')
if mibBuilder.loadTexts: nsModConfig.setDescription('Modulator MIB branch that holds all Modulator parameters.')
nsModConfigLine = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1))
if mibBuilder.loadTexts: nsModConfigLine.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLine.setDescription('Modulator MIB branch that holds all Modulator line parameters.')
nsModConfigLineTXStatus = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineTXStatus.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineTXStatus.setDescription('This parameter determine the TX status: enabled/disabled.')
nsModConfigLineMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("dvbs", 0), ("dsng", 1), ("dvbs2", 2), ("ns3", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineMode.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineMode.setDescription('This parameter holds Line mode.')
nsModConfigLineChPriority = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("equal", 0), ("ch1", 1), ("ch2", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineChPriority.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineChPriority.setDescription('This parameter is no longer supported')
nsModConfigLineRollOff = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 255))).clone(namedValues=NamedValues(("rollOff005", 0), ("rollOff010", 1), ("rollOff015", 2), ("rollOff020", 3), ("rollOff025", 4), ("rollOff035", 5), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineRollOff.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineRollOff.setDescription('This parameter holds Line roll off. rollOff005 = 0.05 rollOff010 = 0.10 rollOff015 = 0.15 rollOff020 = 0.20 rollOff025 = 0.25 rollOff035 = 0.35 ')
nsModConfigLineSineStatus = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineSineStatus.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineSineStatus.setDescription('This parameter holds Line sine status: on/off.')
nsModConfigLineRFFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineRFFreq.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineRFFreq.setDescription('This parameter holds Line RF frequency in 10Hrz.')
nsModConfigLineSymbolRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50000, 72000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineSymbolRate.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineSymbolRate.setDescription('This parameter holds Line symbol rate in SPS.')
nsModConfigLinePower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-3000, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLinePower.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLinePower.setDescription('This parameter holds Line power in hundreds of dBm.')
nsModConfigLineGoldSeq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 262141))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineGoldSeq.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineGoldSeq.setDescription('This parameter holds Line golden sequence.')
nsModConfigLineDualChState = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("dual", 0), ("single", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineDualChState.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineDualChState.setDescription('This parameter holds Line dual channel status: dual/single channel.')
nsModConfigLineBitRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineBitRate.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineBitRate.setDescription('This parameter holds Line bit rate in bPS.')
nsModConfigLinePowerUpTXState = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLinePowerUpTXState.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLinePowerUpTXState.setDescription('This parameter holds Line Power-Up TX State: disable/enable.')
nsModConfigLineAcmMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("disable", 0), ("enableCh1", 1), ("enableCh2", 2), ("enableCh1Ch2", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmMode.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAcmMode.setDescription('This parameter holds Line ACM mode: enable/disable.')
nsModConfigLineOutputLevelMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("constantPower", 0), ("constantEnvelope", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineOutputLevelMode.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineOutputLevelMode.setDescription('This parameter holds Line output level mode.')
nsModConfigLineChannel1Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineChannel1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineChannel1Bandwidth.setDescription('This parameter holds Channel-1 allocated bandwidth percentage.')
nsModConfigLineChannel2Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineChannel2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineChannel2Bandwidth.setDescription('This parameter holds Channel-2 allocated bandwidth percentage.')
nsModConfigLineSpectrumInvert = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineSpectrumInvert.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineSpectrumInvert.setDescription('This parameter holds Line spectrum invert status: on/off.')
nsModConfigLineRecommendedBitRate = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModConfigLineRecommendedBitRate.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineRecommendedBitRate.setDescription('This parameter holds Line recommended bit rate in bPS.')
nsModConfigLineLOFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineLOFreq.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineLOFreq.setDescription('This parameter holds Line LO frequency in 10Hrz.')
nsModConfigLineAcmUseManagementIp = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmUseManagementIp.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAcmUseManagementIp.setDescription('This parameter is no longer supported')
nsModConfigLineAcmIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmIpAddress.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAcmIpAddress.setDescription('This parameter is no longer supported')
nsModConfigLineAcmIpNetmask = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAcmIpNetmask.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAcmIpNetmask.setDescription('This parameter is no longer supported')
nsModConfigLineAupcMode = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcMode.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcMode.setDescription('This parameter holds Line AUPC mode: enable/disable.')
nsModConfigLineAupcSatRxFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatRxFreq.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcSatRxFreq.setDescription('This parameter holds AUPC satellite RX Frequency in hundreds of GHz.')
nsModConfigLineAupcSatRxPolarity = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("vertical", 0), ("horizontal", 1), ("circular-left", 2), ("circular-right", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatRxPolarity.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcSatRxPolarity.setDescription('This parameter holds AUPC satellite RX Polarity: vertical/horizontal/circular.')
nsModConfigLineAupcSatTxFreq = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 40000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatTxFreq.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcSatTxFreq.setDescription('This parameter holds AUPC satellite TX Frequency in hundreds of GHz.')
nsModConfigLineAupcSatTxPolarity = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("vertical", 0), ("horizontal", 1), ("circular-left", 2), ("circular-right", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcSatTxPolarity.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcSatTxPolarity.setDescription('This parameter holds AUPC satellite TX Polarity: vertical/horizontal/circular.')
nsModConfigLineAupcMaxGain = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcMaxGain.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcMaxGain.setDescription('This parameter holds AUPC maximal gain in hundreds of dBm.')
nsModConfigLineAupcMaxAttn = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigLineAupcMaxAttn.setStatus('current')
if mibBuilder.loadTexts: nsModConfigLineAupcMaxAttn.setDescription('This parameter holds AUPC maximal Attenuation in hundreds of dBm.')
nsModConfigChannel = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2))
if mibBuilder.loadTexts: nsModConfigChannel.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChannel.setDescription('Modulator MIB branch that holds all Modulator channel parameters.')
nsModConfigChannelTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1), )
if mibBuilder.loadTexts: nsModConfigChannelTable.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChannelTable.setDescription('A list of Channel parameters')
nsModConfigChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigChannelEntry.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChannelEntry.setDescription('Conceptual row in table for each channel.')
nsModConfigChStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChStatus.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChStatus.setDescription('This parameter holds channel status.')
nsModConfigChSource = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 255))).clone(namedValues=NamedValues(("gbeA", 0), ("gbeB", 1), ("asi1", 2), ("asi2", 3), ("gigE", 4), ("disable", 5), ("g703", 6), ("test1", 7), ("test2", 8), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChSource.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChSource.setDescription('This parameter holds channel source.')
nsModConfigChNPD = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("none", 0), ("addition", 1), ("deletion", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChNPD.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChNPD.setDescription('This parameter is no longer supported')
nsModConfigChFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChFrameSize.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChFrameSize.setDescription('This parameter holds channel frame size.')
nsModConfigChModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChModulation.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChModulation.setDescription('This parameter holds channel modulation.')
nsModConfigChFECRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChFECRate.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChFECRate.setDescription('This parameter holds channel FEC rate. fec1Div5 = 1/5 fec1Div4 = 1/4 fec1Div3 = 1/3 fec2Div5 = 2/5 fec13Div30 = 13/30 fec4Div9 = 4/9 fec7Div15 = 7/15 fec22Div45 = 22/45 fec1Div2 = 1/2 fec8Div15 = 8/15 fec5Div9 = 5/9 fec17Div30 = 17/30 fec3Div5 = 3/5 fec28Div45 = 28/45 fec19Div30 = 19/30 fec2Div3 = 2/3 fec32Div45 = 32/45 fec11Div15 = 11/15 fec3Div4 = 3/4 fec7Div9 = 7/9 fec4Div5 = 4/5 fec37Div45 = 37/45 fec5Div6 = 5/6 fec7Div8 = 7/8 fec8Div9 = 8/9 fec9Div10 = 9/10 ')
nsModConfigChPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("pilotNo", 0), ("pilot8Slots", 1), ("pilot16Slots", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChPilot.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChPilot.setDescription('This parameter holds channel pilot.')
nsModConfigChISSY = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("issyDisabled", 0), ("issy2Bytes", 1), ("issy3Bytes", 2), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChISSY.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChISSY.setDescription('This parameter holds channel ISSY.')
nsModConfigChStreamFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("transport188", 0), ("transport204", 1), ("genericPacketsized", 2), ("genericContinuous", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChStreamFormat.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChStreamFormat.setDescription('This parameter holds channel stream format.')
nsModConfigChPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChPacketSize.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChPacketSize.setDescription('This parameter holds channel packet size.')
nsModConfigChSyncByte = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChSyncByte.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChSyncByte.setDescription('This parameter holds channel sync byte.')
nsModConfigChIsi = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChIsi.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChIsi.setDescription('This parameter holds channel ISI value.')
nsModConfigChPCRRestamping = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChPCRRestamping.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChPCRRestamping.setDescription('This parameter is no longer supported')
nsModConfigChMpegProcessingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("off", 0), ("dataAdjust", 1), ("symbolAdjust", 2), ("partialDataAdjust", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChMpegProcessingMode.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChMpegProcessingMode.setDescription('This parameter holds channel MPEG processing mode.')
nsModConfigChBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChBitRate.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChBitRate.setDescription('This parameter holds channel bit rate in bPS.')
nsModConfigChBitRatePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModConfigChBitRatePercent.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChBitRatePercent.setDescription('This parameter holds calculated channel bit rate as percent from maximal theoretical channel bitrate.')
nsModConfigChTSProtect = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigChTSProtect.setStatus('current')
if mibBuilder.loadTexts: nsModConfigChTSProtect.setDescription('Protect transport stream data, enabling constant bit-rate at the receiver, replacing RF link error frames by Null-packets.')
nsModConfigInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3))
if mibBuilder.loadTexts: nsModConfigInterface.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterface.setDescription('Modulator MIB branch that holds all Modulator Interface parameters.')
nsModConfigInterfaceTestTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1), )
if mibBuilder.loadTexts: nsModConfigInterfaceTestTable.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceTestTable.setDescription('A list of Test interfaces')
nsModConfigInterfaceTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceTestEntry.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceTestEntry.setDescription('Conceptual row in table for each test interface.')
nsModConfigInterfaceTestPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 255))).clone(namedValues=NamedValues(("pattern2Pwr7Neg1", 0), ("pattern2Pwr9Neg1", 1), ("pattern2Pwr11Neg1", 2), ("pattern2Pwr15Neg1", 3), ("pattern2Pwr20Neg1", 4), ("pattern2Pwr23Neg1", 5), ("pattern2Pwr29Neg1", 6), ("pattern2Pwr31Neg1", 7), ("patternAllZeros", 8), ("patternAllOnes", 9), ("patternBitAlternate", 10), ("pattern2BitAlternate", 11), ("pattern7Ones", 12), ("pattern7Zeros", 13), ("pattern6Ones", 14), ("pattern6Zeros", 15), ("pattern55AA", 16), ("pattern6699", 17), ("patternC33C", 18), ("pattern00FF", 19), ("patternSAWTOOTH", 20), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceTestPattern.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceTestPattern.setDescription('This parameter holds Test interface pattern. pattern2Pwr07Neg1 = 2^07-1 pattern2Pwr09Neg1 = 2^09-1 pattern2Pwr11Neg1 = 2^11-1 pattern2Pwr15Neg1 = 2^15-1 pattern2Pwr20Neg1 = 2^20-1 pattern2Pwr23Neg1 = 2^23-1 pattern2Pwr29Neg1 = 2^29-1 pattern2Pwr31Neg1 = 2^31-1 patternAllZeros = all zeros patternAllOnes = all ones patternBitAlternate = bit alternate pattern2BitAlternate= 2 bit alternate pattern7Ones = 1111111 (7 ones) pattern7Zeros = 0000000 (7 zeros) pattern6Ones = 111111 (6 ones) pattern6Zeros = 000000 (6 zeros) pattern55AA = 0x55AA pattern6699 = 0x6699 patternC33C = 0xC33C pattern00FF = 0x00FF patternSAWTOOTH = SAWTOOTH ')
nsModConfigInterfaceTestInvert = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceTestInvert.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceTestInvert.setDescription('This parameter holds Test interface invert.')
nsModConfigInterfaceASITable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 2), )
if mibBuilder.loadTexts: nsModConfigInterfaceASITable.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceASITable.setDescription('A list of ASI interfaces')
nsModConfigInterfaceASIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceASIEntry.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceASIEntry.setDescription('Conceptual row in table for each ASI interface.')
nsModConfigInterfaceASIDataOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("lsb", 0), ("msb", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceASIDataOrder.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceASIDataOrder.setDescription('This parameter holds ASI interface data order.')
nsModConfigInterfaceEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3), )
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetTable.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetTable.setDescription('A list of Ethernet interfaces')
nsModConfigInterfaceEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetEntry.setDescription('Conceptual row in table for each Ethernet interface.')
nsModConfigInterfaceEthernetAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetAutoNegotiation.setDescription('This parameter holds Ethernet interface auto-negotiation status')
nsModConfigInterfaceEthernetSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("speed10", 0), ("speed100", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetSpeed.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetSpeed.setDescription('This parameter holds Ethernet interface speed')
nsModConfigInterfaceEthernetDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetDuplex.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetDuplex.setDescription('This parameter holds Ethernet interface Duplex')
nsModConfigInterfaceEthernetEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("raw", 0), ("nspe", 1), ("gse", 2), ("ule", 3), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetEncapsulation.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetEncapsulation.setDescription('This parameter holds Ethernet interface Encapsulation')
nsModConfigInterfaceEthernetPid = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetPid.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceEthernetPid.setDescription('This parameter holds Ethernet interface PID value')
nsModConfigInterfaceGigETable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4), )
if mibBuilder.loadTexts: nsModConfigInterfaceGigETable.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceGigETable.setDescription('A list of GigE interfaces')
nsModConfigInterfaceGigEEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModConfigInterfaceGigEEntry.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceGigEEntry.setDescription('Conceptual row in table for each gigE interface.')
nsModConfigInterfaceGigEAutoNegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigEAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceGigEAutoNegotiation.setDescription('This parameter holds GigE interface auto-negotiation status')
nsModConfigInterfaceGigESpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("speed10", 0), ("speed100", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigESpeed.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceGigESpeed.setDescription('This parameter holds GigE interface speed')
nsModConfigInterfaceGigEDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("half", 0), ("full", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigEDuplex.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceGigEDuplex.setDescription('This parameter holds GigE interface Duplex')
nsModConfigInterfaceGigEPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 1, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("rj45", 0), ("sfp", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigInterfaceGigEPortType.setStatus('current')
if mibBuilder.loadTexts: nsModConfigInterfaceGigEPortType.setDescription('This parameter holds GigE interface port type value')
nsModConfigCid = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4))
if mibBuilder.loadTexts: nsModConfigCid.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCid.setDescription('Modulator MIB branch that holds all Modulator CID parameters.')
nsModConfigCidState = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidState.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCidState.setDescription('This parameter determine the CID state: enabled/disabled.')
nsModConfigCidLatitude = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidLatitude.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCidLatitude.setDescription('This parameter determine the CID latitude to transmit.')
nsModConfigCidLongitude = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidLongitude.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCidLongitude.setDescription('This parameter determine the CID longitude to transmit.')
nsModConfigCidPhone = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidPhone.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCidPhone.setDescription('This parameter determine the CID phone number to transmit.')
nsModConfigCidExtension = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidExtension.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCidExtension.setDescription('This parameter determine the CID phone extension to transmit.')
nsModConfigCidUsertext = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModConfigCidUsertext.setStatus('current')
if mibBuilder.loadTexts: nsModConfigCidUsertext.setDescription('This parameter determine the CID user text to transmit.')
nsModMonitor = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2))
if mibBuilder.loadTexts: nsModMonitor.setStatus('current')
if mibBuilder.loadTexts: nsModMonitor.setDescription('Modulator MIB branch that holds all Demodulator status and alarms.')
nsModMonitorInterface = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1))
if mibBuilder.loadTexts: nsModMonitorInterface.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterface.setDescription('Modulator MIB branch that holds all Modulator interface statuses.')
nsModMonitorInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1), )
if mibBuilder.loadTexts: nsModMonitorInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterfaceTable.setDescription('A list of interface statuses')
nsModMonitorInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: nsModMonitorInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterfaceEntry.setDescription('Conceptual row in table for each interface.')
nsModMonitorInterfaceDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceDataRate.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterfaceDataRate.setDescription('This parameter holds Interface data rate status (bps).')
nsModMonitorInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("notLocked", 0), ("locked", 1), ("inactive", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterfaceStatus.setDescription('This parameter holds Interface status.')
nsModMonitorInterfaceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("none", 0), ("channel-1", 1), ("channel-2", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceChannel.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterfaceChannel.setDescription('This parameter holds Interface channel.')
nsModMonitorInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorInterfaceName.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorInterfaceName.setDescription('This parameter holds Interface name.')
nsModMonitorSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2))
if mibBuilder.loadTexts: nsModMonitorSystem.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorSystem.setDescription('Modulator MIB branch that holds all Modulator system statuses.')
nsModMonitorSystemBoardTmp = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystemBoardTmp.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorSystemBoardTmp.setDescription('This parameter holds system board temperature status in hundreds of Celsius degrees.')
nsModMonitorSystem10MHrzClkSource = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("internal", 0), ("external", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystem10MHrzClkSource.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorSystem10MHrzClkSource.setDescription('This parameter holds system 10MHrz clock source.')
nsModMonitorSystemRefClkOut = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystemRefClkOut.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorSystemRefClkOut.setDescription('This parameter holds system ref clock out.')
nsModMonitorSystemTxPortClk = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("off", 0), ("lband", 1), ("buc", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorSystemTxPortClk.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorSystemTxPortClk.setDescription('This parameter holds system TX port clock.')
nsModMonitorEthernet = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3))
if mibBuilder.loadTexts: nsModMonitorEthernet.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernet.setDescription('Common MIB branch that holds all Ethernet statistics.')
nsModMonitorEthernetTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1), )
if mibBuilder.loadTexts: nsModMonitorEthernetTable.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernetTable.setDescription('List of Ethernet Statistics')
nsModMonitorEthernetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1), ).setIndexNames((0, "NOVELSAT-MODULATOR-MIB", "nsModMonitorEthernetStatisticsNumber"))
if mibBuilder.loadTexts: nsModMonitorEthernetEntry.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernetEntry.setDescription('Conceptual row in table for each event.')
nsModMonitorEthernetStatisticsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 1), Counter32())
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsNumber.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsNumber.setDescription('Ethernet Statistics Number')
nsModMonitorEthernetStatisticsName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsName.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsName.setDescription('Name of Ethernet Statistics')
nsModMonitorEthernetStatisticsValueA = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsValueA.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsValueA.setDescription('Value of Ethernet Statistics')
nsModMonitorEthernetStatisticsValueB = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsValueB.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorEthernetStatisticsValueB.setDescription('Value of Ethernet Statistics')
nsModMonitorAcm = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4))
if mibBuilder.loadTexts: nsModMonitorAcm.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcm.setDescription('Common MIB branch that holds all ACM statistics.')
nsModMonitorAcmTable = MibTable((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1), )
if mibBuilder.loadTexts: nsModMonitorAcmTable.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmTable.setDescription('List of ACM Statistics')
nsModMonitorAcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1), ).setIndexNames((0, "NOVELSAT-MODULATOR-MIB", "nsModMonitorAcmStatisticsNumber"))
if mibBuilder.loadTexts: nsModMonitorAcmEntry.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmEntry.setDescription('Conceptual row in table for each event.')
nsModMonitorAcmStatisticsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsNumber.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsNumber.setDescription('ACM Statistics Number')
nsModMonitorAcmStatisticsClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientIp.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientIp.setDescription('ACM Statistics- Client IP')
nsModMonitorAcmStatisticsClientName = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientName.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientName.setDescription("ACM client's name")
nsModMonitorAcmStatisticsClientSnr = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientSnr.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientSnr.setDescription('ACM Statistics- Received SNR from client hundreds of dB')
nsModMonitorAcmStatisticsClientMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientMargin.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClientMargin.setDescription('ACM Statistics- Received margin from client')
nsModMonitorAcmStatisticsChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("channel-1", 0), ("channel-2", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsChannelNum.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsChannelNum.setDescription('ACM Statistics- Channel number')
nsModMonitorAcmStatisticsLineMode = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("dvbs", 0), ("dsng", 1), ("dvbs2", 2), ("ns3", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsLineMode.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsLineMode.setDescription('ACM Statistics- Modulator line mode value')
nsModMonitorAcmStatisticsModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 255))).clone(namedValues=NamedValues(("modulationBpsk", 0), ("modulationQpsk", 1), ("modulation8Psk", 2), ("modulation16Qam", 3), ("modulation16Apsk", 4), ("modulation32Apsk", 5), ("modulation64Apsk", 6), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsModulation.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsModulation.setDescription('ACM Statistics- Matching MCT modulation value')
nsModMonitorAcmStatisticsFecRate = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255))).clone(namedValues=NamedValues(("fec1Div5", 0), ("fec1Div4", 1), ("fec1Div3", 2), ("fec2Div5", 3), ("fec13Div30", 4), ("fec4Div9", 5), ("fec7Div15", 6), ("fec22Div45", 7), ("fec1Div2", 8), ("fec8Div15", 9), ("fec5Div9", 10), ("fec17Div30", 11), ("fec3Div5", 12), ("fec28Div45", 13), ("fec19Div30", 14), ("fec2Div3", 15), ("fec32Div45", 16), ("fec11Div15", 17), ("fec3Div4", 18), ("fec7Div9", 19), ("fec4Div5", 20), ("fec37Div45", 21), ("fec5Div6", 22), ("fec7Div8", 23), ("fec8Div9", 24), ("fec9Div10", 25), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsFecRate.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsFecRate.setDescription('ACM Statistics- Matching MCT FEC rate value fec1Div5 = 1/5 fec1Div4 = 1/4 fec1Div3 = 1/3 fec2Div5 = 2/5 fec13Div30 = 13/30 fec4Div9 = 4/9 fec7Div15 = 7/15 fec22Div45 = 22/45 fec1Div2 = 1/2 fec8Div15 = 8/15 fec5Div9 = 5/9 fec17Div30 = 17/30 fec3Div5 = 3/5 fec28Div45 = 28/45 fec19Div30 = 19/30 fec2Div3 = 2/3 fec32Div45 = 32/45 fec11Div15 = 11/15 fec3Div4 = 3/4 fec7Div9 = 7/9 fec4Div5 = 4/5 fec37Div45 = 37/45 fec5Div6 = 5/6 fec7Div8 = 7/8 fec8Div9 = 8/9 fec9Div10 = 9/10 ')
nsModMonitorAcmStatisticsFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("normal", 0), ("short", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsFrameSize.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsFrameSize.setDescription('ACM Statistics- Matching MCT frame size value')
nsModMonitorAcmStatisticsPilot = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 255))).clone(namedValues=NamedValues(("pilotNo", 0), ("pilot16Slots", 1), ("pilot8Slots", 2), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsPilot.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsPilot.setDescription('ACM Statistics- Matching MCT pilot value')
nsModMonitorAcmStatisticsIsLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsIsLocked.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsIsLocked.setDescription('ACM Statistics- Is client locked')
nsModMonitorAcmStatisticsIsWorstCase = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("no", 0), ("yes", 1), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsIsWorstCase.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsIsWorstCase.setDescription('ACM Statistics- no longer supported')
nsModMonitorAcmStatisticsState = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("active", 0), ("progress", 1), ("lost", 2), ("idle", 3), ("notApplicable", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsState.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsState.setDescription("ACM Statistics- Client's state")
nsModMonitorAcmStatisticsGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsGroup.setDescription('ACM Statistics- group')
nsModMonitorAcmStatisticsClrCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClrCmd.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAcmStatisticsClrCmd.setDescription('Clear ACM statistics command')
nsModMonitorAupc = ObjectIdentity((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5))
if mibBuilder.loadTexts: nsModMonitorAupc.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupc.setDescription('Modulator MIB branch that holds all AUPC statistics.')
nsModMonitorAupcCurrentPower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcCurrentPower.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcCurrentPower.setDescription('AUPC monitor - Current output power in hundreds of dBm')
nsModMonitorAupcMinimalPower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcMinimalPower.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcMinimalPower.setDescription('AUPC monitor - Minimal output power in hundreds of dBm')
nsModMonitorAupcMaximalPower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcMaximalPower.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcMaximalPower.setDescription('AUPC monitor - Maximal output power in hundreds of dBm')
nsModMonitorAupcAveragePower = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcAveragePower.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcAveragePower.setDescription('AUPC monitor - Average output power in hundreds of dBm')
nsModMonitorAupcEstimatedUplinkAttn = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcEstimatedUplinkAttn.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcEstimatedUplinkAttn.setDescription('AUPC monitor - Estimated uplink attenuation in hundreds of dBm')
nsModMonitorAupcEstimatedDownlinkAttn = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsModMonitorAupcEstimatedDownlinkAttn.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcEstimatedDownlinkAttn.setDescription('AUPC monitor - Estimated downlink attenuation in hundreds of dBm')
nsModMonitorAupcResetAvgCmd = MibScalar((1, 3, 6, 1, 4, 1, 37576, 3, 2, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("none", 0), ("execute", 1), ("notApplicable", 255)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nsModMonitorAupcResetAvgCmd.setStatus('current')
if mibBuilder.loadTexts: nsModMonitorAupcResetAvgCmd.setDescription('Restart AUPC monitor power averaging')
mibBuilder.exportSymbols("NOVELSAT-MODULATOR-MIB", nsModMonitorInterfaceDataRate=nsModMonitorInterfaceDataRate, nsModMonitorAcmEntry=nsModMonitorAcmEntry, nsModConfigChPilot=nsModConfigChPilot, nsModConfigLineSpectrumInvert=nsModConfigLineSpectrumInvert, nsModConfigLineAupcSatRxPolarity=nsModConfigLineAupcSatRxPolarity, nsModConfigInterfaceTestInvert=nsModConfigInterfaceTestInvert, nsModMonitorSystemRefClkOut=nsModMonitorSystemRefClkOut, nsModConfigLineAupcSatTxFreq=nsModConfigLineAupcSatTxFreq, nsModConfigLineRFFreq=nsModConfigLineRFFreq, nsModMonitorEthernetTable=nsModMonitorEthernetTable, nsModConfigLinePowerUpTXState=nsModConfigLinePowerUpTXState, nsModMonitorAupcCurrentPower=nsModMonitorAupcCurrentPower, nsModConfigChMpegProcessingMode=nsModConfigChMpegProcessingMode, nsModMonitorEthernetStatisticsNumber=nsModMonitorEthernetStatisticsNumber, nsModConfigInterfaceASIDataOrder=nsModConfigInterfaceASIDataOrder, nsModConfigLineGoldSeq=nsModConfigLineGoldSeq, nsModConfigChSource=nsModConfigChSource, nsModConfigLineSymbolRate=nsModConfigLineSymbolRate, nsModConfigInterfaceGigEAutoNegotiation=nsModConfigInterfaceGigEAutoNegotiation, nsModConfigInterfaceEthernetEntry=nsModConfigInterfaceEthernetEntry, nsModMonitorAcmStatisticsFrameSize=nsModMonitorAcmStatisticsFrameSize, nsModConfigChannelEntry=nsModConfigChannelEntry, nsModConfigCidLatitude=nsModConfigCidLatitude, nsModConfigInterfaceGigEPortType=nsModConfigInterfaceGigEPortType, nsModConfigLineDualChState=nsModConfigLineDualChState, nsModMonitorAcmStatisticsClientName=nsModMonitorAcmStatisticsClientName, nsModConfigLineAcmIpNetmask=nsModConfigLineAcmIpNetmask, nsModMonitorAcmStatisticsClientMargin=nsModMonitorAcmStatisticsClientMargin, nsModConfigLineBitRate=nsModConfigLineBitRate, nsModConfigLineSineStatus=nsModConfigLineSineStatus, nsModConfigChStatus=nsModConfigChStatus, nsModConfigLineAupcSatRxFreq=nsModConfigLineAupcSatRxFreq, nsModMonitorAupcEstimatedUplinkAttn=nsModMonitorAupcEstimatedUplinkAttn, nsModConfigLineRollOff=nsModConfigLineRollOff, nsModConfigLineAupcMode=nsModConfigLineAupcMode, nsModConfigLineAcmIpAddress=nsModConfigLineAcmIpAddress, nsModConfigInterface=nsModConfigInterface, nsModMonitorInterfaceName=nsModMonitorInterfaceName, nsModMonitorAcmStatisticsClientSnr=nsModMonitorAcmStatisticsClientSnr, nsModMonitorAcmStatisticsClrCmd=nsModMonitorAcmStatisticsClrCmd, nsModConfigLineTXStatus=nsModConfigLineTXStatus, nsModMonitorSystemTxPortClk=nsModMonitorSystemTxPortClk, nsModConfigInterfaceASIEntry=nsModConfigInterfaceASIEntry, nsModConfigInterfaceEthernetEncapsulation=nsModConfigInterfaceEthernetEncapsulation, nsModConfigChTSProtect=nsModConfigChTSProtect, nsModMonitorEthernet=nsModMonitorEthernet, nsModMonitorAcmStatisticsModulation=nsModMonitorAcmStatisticsModulation, nsModMonitorEthernetStatisticsValueB=nsModMonitorEthernetStatisticsValueB, nsModConfigCidState=nsModConfigCidState, nsModConfigInterfaceASITable=nsModConfigInterfaceASITable, nsModConfigLineAupcSatTxPolarity=nsModConfigLineAupcSatTxPolarity, nsModConfigLineChPriority=nsModConfigLineChPriority, nsModConfigLineOutputLevelMode=nsModConfigLineOutputLevelMode, nsModConfigChModulation=nsModConfigChModulation, nsModMonitorAcmStatisticsPilot=nsModMonitorAcmStatisticsPilot, nsModMonitorSystemBoardTmp=nsModMonitorSystemBoardTmp, nsModConfigInterfaceGigESpeed=nsModConfigInterfaceGigESpeed, nsModConfigChBitRatePercent=nsModConfigChBitRatePercent, nsModConfigLine=nsModConfigLine, nsModConfigLineRecommendedBitRate=nsModConfigLineRecommendedBitRate, PYSNMP_MODULE_ID=nsModulator, nsModConfigInterfaceEthernetSpeed=nsModConfigInterfaceEthernetSpeed, nsModMonitorAcmStatisticsClientIp=nsModMonitorAcmStatisticsClientIp, nsModMonitorAcmStatisticsState=nsModMonitorAcmStatisticsState, nsModConfigLinePower=nsModConfigLinePower, nsModConfigChStreamFormat=nsModConfigChStreamFormat, nsModConfigInterfaceGigEDuplex=nsModConfigInterfaceGigEDuplex, nsModConfigCidUsertext=nsModConfigCidUsertext, nsModMonitorAcm=nsModMonitorAcm, nsModConfigChSyncByte=nsModConfigChSyncByte, nsModMonitorSystem=nsModMonitorSystem, nsModMonitorEthernetStatisticsName=nsModMonitorEthernetStatisticsName, nsModConfigChFECRate=nsModConfigChFECRate, nsModConfigInterfaceTestEntry=nsModConfigInterfaceTestEntry, nsModConfigChIsi=nsModConfigChIsi, nsModulator=nsModulator, nsModConfigInterfaceGigETable=nsModConfigInterfaceGigETable, nsModConfigInterfaceEthernetPid=nsModConfigInterfaceEthernetPid, nsModMonitorInterfaceChannel=nsModMonitorInterfaceChannel, nsModMonitorAcmStatisticsChannelNum=nsModMonitorAcmStatisticsChannelNum, nsModConfigCidLongitude=nsModConfigCidLongitude, nsModMonitorAcmStatisticsLineMode=nsModMonitorAcmStatisticsLineMode, nsModMonitorAcmStatisticsIsLocked=nsModMonitorAcmStatisticsIsLocked, nsModMonitorInterfaceTable=nsModMonitorInterfaceTable, nsModMonitorAupcMaximalPower=nsModMonitorAupcMaximalPower, nsModConfigInterfaceEthernetTable=nsModConfigInterfaceEthernetTable, nsModMonitorAupcEstimatedDownlinkAttn=nsModMonitorAupcEstimatedDownlinkAttn, nsModConfigLineAupcMaxAttn=nsModConfigLineAupcMaxAttn, nsModMonitorEthernetStatisticsValueA=nsModMonitorEthernetStatisticsValueA, nsModMonitorAcmStatisticsNumber=nsModMonitorAcmStatisticsNumber, nsModConfigInterfaceEthernetAutoNegotiation=nsModConfigInterfaceEthernetAutoNegotiation, nsModConfigCidExtension=nsModConfigCidExtension, nsModConfigLineAcmMode=nsModConfigLineAcmMode, nsModMonitorAupcAveragePower=nsModMonitorAupcAveragePower, nsModConfigLineChannel1Bandwidth=nsModConfigLineChannel1Bandwidth, nsModConfigLineAcmUseManagementIp=nsModConfigLineAcmUseManagementIp, nsModMonitorAcmTable=nsModMonitorAcmTable, nsModConfig=nsModConfig, nsModConfigInterfaceTestTable=nsModConfigInterfaceTestTable, nsModMonitor=nsModMonitor, nsModMonitorEthernetEntry=nsModMonitorEthernetEntry, nsModMonitorAupc=nsModMonitorAupc, nsModConfigChPCRRestamping=nsModConfigChPCRRestamping, nsModConfigLineAupcMaxGain=nsModConfigLineAupcMaxGain, nsModConfigChPacketSize=nsModConfigChPacketSize, nsModConfigLineLOFreq=nsModConfigLineLOFreq, nsModMonitorAcmStatisticsFecRate=nsModMonitorAcmStatisticsFecRate, nsModConfigChannelTable=nsModConfigChannelTable, nsModMonitorInterface=nsModMonitorInterface, nsModMonitorInterfaceEntry=nsModMonitorInterfaceEntry, nsModConfigChISSY=nsModConfigChISSY, nsModMonitorAupcResetAvgCmd=nsModMonitorAupcResetAvgCmd, nsModConfigCidPhone=nsModConfigCidPhone, nsModConfigChFrameSize=nsModConfigChFrameSize, nsModMonitorAupcMinimalPower=nsModMonitorAupcMinimalPower, nsModConfigInterfaceGigEEntry=nsModConfigInterfaceGigEEntry, nsModConfigChBitRate=nsModConfigChBitRate, nsModConfigCid=nsModConfigCid, nsModConfigLineMode=nsModConfigLineMode, nsModMonitorAcmStatisticsIsWorstCase=nsModMonitorAcmStatisticsIsWorstCase, nsModMonitorSystem10MHrzClkSource=nsModMonitorSystem10MHrzClkSource, nsModConfigLineChannel2Bandwidth=nsModConfigLineChannel2Bandwidth, nsModConfigChNPD=nsModConfigChNPD, nsModConfigChannel=nsModConfigChannel, nsModMonitorAcmStatisticsGroup=nsModMonitorAcmStatisticsGroup, nsModMonitorInterfaceStatus=nsModMonitorInterfaceStatus, nsModConfigInterfaceEthernetDuplex=nsModConfigInterfaceEthernetDuplex, nsModConfigInterfaceTestPattern=nsModConfigInterfaceTestPattern)
