#
# PySNMP MIB module CISCO-ENTITY-ALARM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ENTITY-ALARM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned32, = mibBuilder.importSymbols("CISCO-TC", "Unsigned32")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Counter32, Unsigned32, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ObjectIdentity, Bits, IpAddress, TimeTicks, NotificationType, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "Unsigned32", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ObjectIdentity", "Bits", "IpAddress", "TimeTicks", "NotificationType", "Gauge32", "ModuleIdentity")
AutonomousType, TruthValue, DisplayString, TextualConvention, RowStatus, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "AutonomousType", "TruthValue", "DisplayString", "TextualConvention", "RowStatus", "TimeStamp")
ciscoEntityAlarmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 138))
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setLastUpdated('9907062150Z')
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 Tel: +1 800 553-NETS E-mail: cs-dslam@cisco.com')
if mibBuilder.loadTexts: ciscoEntityAlarmMIB.setDescription('This MIB module defines the managed objects that support the monitoring of alarms generated by physical entities contained by the system, including chassis, slots, modules, ports, power supplies, and fans. In order to monitor alarms generated by a physical entity, it must be represented by a row in the entPhysicalTable (see ENTITY-MIB).')
class AlarmType(TextualConvention, Integer32):
    description = 'An arbitrary integer value that uniquely identifies an event relative to a physical entity contained by a system.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class AlarmSeverity(TextualConvention, Integer32):
    reference = 'Bellcore Technical Reference TR-NWT-000474 Issue 4, December 1993, OTGR Section 4. Network Maintenance: Alarm and Control - Network Element.'
    description = "Each alarm type defined by a vendor type employed by the system has an associated severity. Bellcore TR-NWT-000474 defines these severities as follows: 'critical' An alarm used to indicate a severe, service- affecting condition has occurred and that immediate corrective action is imperative, regardless of the time of day or day of the week. 'major' An alarm used for hardware or software conditions that indicate a serious disruption of service or the malfunctioning or failure of important hardware. These troubles require the immediate attention and response of a technician to restore or maintain system capability. The urgency is less than in critical situations because of a lesser immediate or impending effect on service or system performance. 'minor' An alarm used for troubles that do not have a serious effect on service to customers or for troubles in hardware that are not essential to the operation of the system. 'info' An indication used to raise attention to a condition that could possibly be an impending problem or to notify the customer of an event that improves operation."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("critical", 1), ("major", 2), ("minor", 3), ("info", 4))

class AlarmSeverityOrZero(TextualConvention, Integer32):
    description = "A value of either '0' or a valid alarm severity."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 4)

class AlarmList(TextualConvention, OctetString):
    description = "For each unique type of physical entity (i.e., for each set of physical entities sharing a unique entPhysicalVendorType OID), there an exists unique alarm space. Observe that it is not necessary that all the alarms within a space be defined. An OCTET STRING represents an alarm list, in which each bit represents an alarm type. The bits in the first octet represent alarm types identified by the integer values 1 through 8, inclusive, The bits in the second octet represent alarm types identified by the integer values 9 through 16, inclusive, and so forth. The least significant bit of an octet represents the alarm type identified by the lowest integer value, and the most significant bit represents the alarm type identified by the highest integer value. The figure shown below illustrates the format of an alarm list. Octet 1 Octet 32 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ | |...| | +-+-+-+-+-+-+-+-+ +-+-+-+-+-+-+-+-+ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | +- Alarm 248 | | | | | | | | | | | | | | +--- Alarm 249 | | | | | | | | | | | | | +----- Alarm 250 | | | | | | | | | | | | +------- Alarm 251 | | | | | | | | | | | +--------- Alarm 252 | | | | | | | | | | +----------- Alarm 253 | | | | | | | | | +------------- Alarm 254 | | | | | | | | +--------------- Alarm 255 | | | | | | | | : | | | | | | | | : | | | | | | | +--------------------- Alarm 0 | | | | | | +----------------------- Alarm 1 | | | | | +------------------------- Alarm 2 | | | | +--------------------------- Alarm 3 | | | +----------------------------- Alarm 4 | | +------------------------------- Alarm 5 | +--------------------------------- Alarm 6 +----------------------------------- Alarm 7 An alarm list of length N, where N < 32, represents an alarm list for which alarms N*8 through 255 have the value of '0'. A special case is an alarm list having a length of '0', which represents an alarm list of all zeros."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 32)

class AlarmFilterProfileType(TextualConvention, Unsigned32):
    description = 'An integer value that uniquely identifies an alarm filter profile.'
    status = 'current'

ciscoEntityAlarmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1))
ceAlarmDescription = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1))
ceAlarmMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2))
ceAlarmHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3))
ceAlarmFiltering = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4))
ceAlarmDescrMapTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1), )
if mibBuilder.loadTexts: ceAlarmDescrMapTable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrMapTable.setDescription('For each type of entity (represented entPhysicalVendorType OID), this table contains a mapping between a unique ceAlarmDescrIndex and entPhysicalvendorType OID.')
ceAlarmDescrMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrIndex"))
if mibBuilder.loadTexts: ceAlarmDescrMapEntry.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrMapEntry.setDescription('A mapping between an alarm description and a vendor type.')
ceAlarmDescrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceAlarmDescrIndex.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrIndex.setDescription('This object uniquely identifies an alarm description.')
ceAlarmDescrVendorType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 1, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmDescrVendorType.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrVendorType.setDescription('This object specifies an object identifier (typically an enterprise-specific OID) that uniquely identifies the vendor type of those physical entities that this alarm description applies to.')
ceAlarmDescrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2), )
if mibBuilder.loadTexts: ceAlarmDescrTable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrTable.setDescription('This table contains a description for each alarm type defined by each vendor type employed by the system. Observe that this table is sparse in nature, as it is rarely the case that a physical entity type needs to define every alarm in its alarm space.')
ceAlarmDescrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrIndex"), (0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrAlarmType"))
if mibBuilder.loadTexts: ceAlarmDescrEntry.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrEntry.setDescription('A collection of attributes that describe an alarm type.')
ceAlarmDescrAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1, 1), AlarmType())
if mibBuilder.loadTexts: ceAlarmDescrAlarmType.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrAlarmType.setDescription('This object specifies the alarm type being described.')
ceAlarmDescrSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1, 2), AlarmSeverityOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmDescrSeverity.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrSeverity.setDescription("This object specifies the severity associated with the alarm type. An implementation may chose to not allow dynamic severity assignment, in which case it would restrict access to this object to be read-only. If an implementation allows dynamic severity assignment, then a management client can revert to the default severity by writing the value '0' to this object. There exists a class of systems that should implement dynamic severity assignment. For example, consider a DSLAM (Digital Subscriber Loop Access Multiplexor) designed for both the central office and pedestal environments. A 'pedestal' is typically a dark-green metal box mounted on a concrete or stone foundation in which carrier-class companies house equipment. The central office typically controls the temperature and humidity of the environment, reducing reliance on a system's fans. Thus, the customer probably has a desire to reduce the severity of alarms indicating the failure of a fan. However, a pedestal environment has a much greater reliance on a system's fans. Thus, the customer probably has a desire to increase the severity of alarms indicating the failure of a fan.")
ceAlarmDescrText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 1, 2, 1, 3), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmDescrText.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescrText.setDescription('This object specifies a human-readable message describing the alarm.')
ceAlarmCriticalCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmCriticalCount.setStatus('current')
if mibBuilder.loadTexts: ceAlarmCriticalCount.setDescription("The value of this object specifies the number of alarms currently asserted with a severity of 'critical'.")
ceAlarmMajorCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmMajorCount.setStatus('current')
if mibBuilder.loadTexts: ceAlarmMajorCount.setDescription("The value of this object specifies the number of alarms currently asserted with a severity of 'major'.")
ceAlarmMinorCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmMinorCount.setStatus('current')
if mibBuilder.loadTexts: ceAlarmMinorCount.setDescription("The value of this object specifies the number of alarms currently asserted with a severity of 'minor'.")
ceAlarmCutOff = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmCutOff.setStatus('current')
if mibBuilder.loadTexts: ceAlarmCutOff.setDescription("If the management client writes a value of 'true' to this object, the agent stops signalling all external audible alarms under the control of the agent. Reading this object should always result in a value of 'false'. Observe that alarm cutoff does not have an effect on monitoring, history logging, generation of notifications, or syslog message generation. It also does not prevent the agent from signalling external audible alarms for alarms asserted after alarm-cutoff. This object emulates the 'alarm cut-off' mechanism typically installed in a central office (e.g., a big red button). Observe this object should neither affect external visual alarms under the control of the agent, nor should it affect the current state of alarms being asserted by the system.")
ceAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5), )
if mibBuilder.loadTexts: ceAlarmTable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmTable.setDescription('This table specifies alarm control and status information related to each physical entity contained by the system, including the alarms currently being asserted by each physical entity capable of generating alarms.')
ceAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: ceAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: ceAlarmEntry.setDescription('Alarm control and status information related to the corresponding physical entity, including a list of those alarms currently being asserted by that physical entity.')
ceAlarmFilterProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1, 1), AlarmFilterProfileType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmFilterProfile.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterProfile.setDescription("This object specifies the alarm filter profile associated with the corresponding physical entity. An alarm filter profile controls which alarm types the agent will monitor and signal for the corresponding physical entity. If the value of this object is '0', then the agent monitors and signals all alarms associated with the corresponding physical entity.")
ceAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1, 2), AlarmSeverityOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: ceAlarmSeverity.setDescription("This object specifies the highest severity alarm currently being asserted by the corresponding physical entity. A value of '0' indicates that there the corresponding physical entity currently is not asserting any alarms.")
ceAlarmList = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 2, 5, 1, 3), AlarmList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmList.setStatus('current')
if mibBuilder.loadTexts: ceAlarmList.setDescription("This object specifies those alarms currently being asserted by the corresponding physical entity. Note, an alarm indicates a condition, not an event. An alarm has two states: 'asserted' Indicates that the condition described by the alarm exists. 'cleared' Indicates that the condition described by the alarm does not exist. For example, a slot in a chassis may define an alarm that specifies whether the slot contains a module. At the time of module insertion, the physical entity corresponding to the slot asserts this alarm, and the alarm remains asserted until the slot becomes empty. If an alarm is being asserted by the physical entity, then the corresponding bit in the alarm list is set to a one. Observe that if the physical entity is not currently asserting any alarms, then the list will have a length of zero.")
ceAlarmHistTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmHistTableSize.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistTableSize.setDescription("This object specifies the number of entries that the ceAlarmHistTable can contain. When a physical entity generates an unfiltered alarm, and the capacity of the ceAlarmHistTable has reached the value specified by this object, then the agent deletes the oldest entity in order to accommodate the new entry. A value of '0' prevents any history from being retained. ")
ceAlarmHistLastIndex = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistLastIndex.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistLastIndex.setDescription('This object specifies the value of the ceAlarmHistIndex object corresponding to the last entry added to the table by the agent. If the management client uses the notifications defined by this module, then it can poll this object to determine whether it has missed a notification sent by the agent.')
ceAlarmHistTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3), )
if mibBuilder.loadTexts: ceAlarmHistTable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistTable.setDescription('This table contains a history of ceAlarmIndicate and ceAlarmClear traps generated by the agent.')
ceAlarmHistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1), ).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmHistIndex"))
if mibBuilder.loadTexts: ceAlarmHistEntry.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistEntry.setDescription('The information conveyed by a ceAlarmIndicate or ceAlarmClear trap.')
ceAlarmHistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ceAlarmHistIndex.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistIndex.setDescription("An integer value uniquely identifying the entry in the table. The value of this object starts at '1' and monotonically increases for each alarm condition transition monitored by the agent. If the value of this object is '4294967295', the agent will reset it to '1' upon monitoring the next alarm condition transition.")
ceAlarmHistType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asserted", 1), ("cleared", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistType.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistType.setDescription('This object specifies whether the agent created the entry as the result of an alarm being asserted or cleared.')
ceAlarmHistEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistEntPhysicalIndex.setDescription('This object specifies the physical entity that generated the alarm.')
ceAlarmHistAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 4), AlarmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistAlarmType.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistAlarmType.setDescription('This object specifies the type of alarm generated.')
ceAlarmHistSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 5), AlarmSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistSeverity.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistSeverity.setDescription('This object specifies the severity of the alarm generated.')
ceAlarmHistTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 3, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmHistTimeStamp.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistTimeStamp.setDescription('This object specifies the value of the sysUpTime object at the time the alarm was generated.')
ceAlarmNotifiesEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 1), AlarmSeverityOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmNotifiesEnable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmNotifiesEnable.setDescription("This object specifies a severity threshold governing the generation of ceAlarmAsserted and ceAlarmCleared notifications. For example, if the value of this object is set to 'major', then the agent generates these notifications if and only if the severity of the alarm being indicated is 'major' or 'critical'. The value of '0' disables the generation of notifications. Observe that this setting overrides the value of the ceAlarmFilterNotifiesEnabled object. This object affects notification generation only; that is, it does not affect monitoring, history logging, and syslog message generation.")
ceAlarmSyslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 2), AlarmSeverityOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ceAlarmSyslogEnable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmSyslogEnable.setDescription("This object specifies a severity threshold governing the generation of syslog messages corresponding to alarms. For example, if the value of this object is set to 'major', then the agent generates these a syslog message if and only if the severity of the alarm being indicated is 'major' or 'critical'. The value of '0' disables the generation of syslog messages corresponding to alarms. Observe that this setting overrides the value of the ceAlarmFilterSyslogEnabled object. This object affects syslog message generation only; that is, it does not have an effect on monitoring, history logging, and generation of notifications.")
ceAlarmFilterProfileIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 3), AlarmFilterProfileType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ceAlarmFilterProfileIndexNext.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterProfileIndexNext.setDescription("This object contains an appropriate value to be used for ceAlarmFilterIndex when creating entries in the ceAlarmFilterProfileTable. The value '0' indicates that no unassigned entries are available. To obtain a ceAlarmFilterIndex, the management client issues a get request. The agent has the responsibility of modifying the value of this object following each successful get request.")
ceAlarmFilterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4), )
if mibBuilder.loadTexts: ceAlarmFilterProfileTable.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterProfileTable.setDescription('This table contains a list of alarm filter profiles.')
ceAlarmFilterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1), ).setIndexNames((0, "CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterIndex"))
if mibBuilder.loadTexts: ceAlarmFilterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterProfileEntry.setDescription("When a physical entity asserts/clears an alarm AND the ceAlarmFilterProfile object is not '0', the agent applies the specified alarm filter profile in processing the alarm. The agent uses the following procedure in processing the transition of an alarm condition of a given type: 1) If the alarm list specified by the alarm filter profile's ceAlarmFilterAlarmsEnabled object specifies that the alarm type is disabled, then the agent performs no further processing. 2) The agent creates an entry in the ceAlarmHistTable. 3) If the alarm list specified by the alarm filter profile's ceAlarmFilterNotifiesEnabled object specifies that the alarm type is enabled, then the agent generates the appropriate notification. 4) If the alarm list specified by the alarm filter profile's ceAlarmFilterSyslogEnabled object specifies that the alarm type is enabled, then the agent generates the appropriate syslog message.")
ceAlarmFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 1), AlarmFilterProfileType())
if mibBuilder.loadTexts: ceAlarmFilterIndex.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterIndex.setDescription('This object uniquely identifies the alarm filter profile.')
ceAlarmFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterStatus.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterStatus.setDescription("This object facilitates the creation, modification, or deletion of a conceptual row in this table. A management client can create a conceptual row in this table by setting this object to 'createAndWait' or 'createAndGo'. If a request to create a conceptual row in this table fails, then the system is not capable of supporting any more alarm filters. Before modifying a conceptual row in this table, the management client must set this object to 'notInService'. After modifying a conceptual row in this table, the management client must set this object to 'active'. This operation causes the modifications made to an alarm filter profile to take effect. An implementation should not allow a conceptual row in this table to be deleted if one or more physical entities reference it.")
ceAlarmFilterAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterAlias.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterAlias.setDescription("This object specifies an arbitrary name associated with the alarm filter profile by the management client, and provides a non-volatile 'handle' for the alarm filter profile. On the first instantiation of an alarm filter profile, the value of this object is a zero-length string. However, an agent may choose to set the value to a locally unique default value. If an implementation supports write access to this object, then the agent is responsible for ensuring the retention of any value written to this object until a management client deletes it. The level of retention must span reboots and reinitializations of the network management system, including those that result in different assignments to the value of the entPhysicalIndex associated with the physical entity.")
ceAlarmFilterAlarmsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 4), AlarmList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterAlarmsEnabled.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterAlarmsEnabled.setDescription('This object specifies a list of alarms that are enabled.')
ceAlarmFilterNotifiesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 5), AlarmList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterNotifiesEnabled.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterNotifiesEnabled.setDescription('This object specifies a list of alarms for which notification generation is enabled.')
ceAlarmFilterSyslogEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 138, 1, 4, 4, 1, 6), AlarmList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ceAlarmFilterSyslogEnabled.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterSyslogEnabled.setDescription('This object specifies a list of alarms for which syslog message generation is enabled.')
ciscoEntityAlarmMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 2))
ciscoEntityAlarmMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 2, 0))
ceAlarmAsserted = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 138, 2, 0, 1)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistEntPhysicalIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistAlarmType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: ceAlarmAsserted.setStatus('current')
if mibBuilder.loadTexts: ceAlarmAsserted.setDescription('The agent generates this trap when a physical entity asserts an alarm.')
ceAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 138, 2, 0, 2)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistEntPhysicalIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistAlarmType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTimeStamp"))
if mibBuilder.loadTexts: ceAlarmCleared.setStatus('current')
if mibBuilder.loadTexts: ceAlarmCleared.setDescription('The agent generates this trap when a physical entity clears a previously asserted alarm.')
ciscoEntityAlarmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 3))
ciscoEntityAlarmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 1))
ciscoEntityAlarmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2))
ceAlarmMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 1, 1)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescriptionGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterGroup"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterProfileGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAlarmMIBCompliance = ceAlarmMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ceAlarmMIBCompliance.setDescription('The compliance statement for entities that implement the CISCO-ALARM-MIB. Implementation of this MIB module is strongly recommended for any platform targeted for a carrier-class environment.')
ceAlarmDescriptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 1)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrVendorType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmDescrText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAlarmDescriptionGroup = ceAlarmDescriptionGroup.setStatus('current')
if mibBuilder.loadTexts: ceAlarmDescriptionGroup.setDescription('A collection of managed objects defining the description of alarms.')
ceAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 2)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmCriticalCount"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmMajorCount"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmMinorCount"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmCutOff"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterProfile"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAlarmGroup = ceAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: ceAlarmGroup.setDescription('A collection of managed objects defining alarm reporting by physical entity.')
ceAlarmHistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 3)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTableSize"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistLastIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistEntPhysicalIndex"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistAlarmType"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistSeverity"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmHistTimeStamp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAlarmHistGroup = ceAlarmHistGroup.setStatus('current')
if mibBuilder.loadTexts: ceAlarmHistGroup.setDescription('A collection of managed objects defining alarm logging.')
ceAlarmFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 4)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmNotifiesEnable"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmSyslogEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAlarmFilterGroup = ceAlarmFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterGroup.setDescription('A collection of managed objects that control the generation of all notifications and syslog messages.')
ceAlarmFilterProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 138, 3, 2, 5)).setObjects(("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterProfileIndexNext"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterStatus"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterAlias"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterAlarmsEnabled"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterNotifiesEnabled"), ("CISCO-ENTITY-ALARM-MIB", "ceAlarmFilterSyslogEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ceAlarmFilterProfileGroup = ceAlarmFilterProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ceAlarmFilterProfileGroup.setDescription('A collection of managed objects that support alarm filtering.')
mibBuilder.exportSymbols("CISCO-ENTITY-ALARM-MIB", ceAlarmAsserted=ceAlarmAsserted, AlarmList=AlarmList, ceAlarmDescrIndex=ceAlarmDescrIndex, ceAlarmFilterSyslogEnabled=ceAlarmFilterSyslogEnabled, ceAlarmDescrVendorType=ceAlarmDescrVendorType, ceAlarmTable=ceAlarmTable, AlarmSeverity=AlarmSeverity, ceAlarmDescrMapTable=ceAlarmDescrMapTable, ceAlarmHistTimeStamp=ceAlarmHistTimeStamp, ceAlarmFilterProfileGroup=ceAlarmFilterProfileGroup, ceAlarmDescrEntry=ceAlarmDescrEntry, PYSNMP_MODULE_ID=ciscoEntityAlarmMIB, ceAlarmHistIndex=ceAlarmHistIndex, ceAlarmHistSeverity=ceAlarmHistSeverity, ceAlarmDescrAlarmType=ceAlarmDescrAlarmType, ceAlarmHistTableSize=ceAlarmHistTableSize, ceAlarmCleared=ceAlarmCleared, ciscoEntityAlarmMIB=ciscoEntityAlarmMIB, ceAlarmHistLastIndex=ceAlarmHistLastIndex, ceAlarmDescrText=ceAlarmDescrText, ceAlarmFilterProfileIndexNext=ceAlarmFilterProfileIndexNext, ceAlarmDescrMapEntry=ceAlarmDescrMapEntry, ceAlarmHistTable=ceAlarmHistTable, ciscoEntityAlarmMIBCompliances=ciscoEntityAlarmMIBCompliances, ceAlarmHistEntPhysicalIndex=ceAlarmHistEntPhysicalIndex, ceAlarmDescrSeverity=ceAlarmDescrSeverity, ceAlarmEntry=ceAlarmEntry, ceAlarmHistory=ceAlarmHistory, ceAlarmHistGroup=ceAlarmHistGroup, ceAlarmFilterNotifiesEnabled=ceAlarmFilterNotifiesEnabled, AlarmFilterProfileType=AlarmFilterProfileType, ceAlarmHistAlarmType=ceAlarmHistAlarmType, ceAlarmSeverity=ceAlarmSeverity, AlarmType=AlarmType, ceAlarmFilterGroup=ceAlarmFilterGroup, ciscoEntityAlarmMIBObjects=ciscoEntityAlarmMIBObjects, ciscoEntityAlarmMIBNotificationsPrefix=ciscoEntityAlarmMIBNotificationsPrefix, ceAlarmMajorCount=ceAlarmMajorCount, ceAlarmFilterAlarmsEnabled=ceAlarmFilterAlarmsEnabled, ciscoEntityAlarmMIBNotifications=ciscoEntityAlarmMIBNotifications, ceAlarmFilterIndex=ceAlarmFilterIndex, ceAlarmMinorCount=ceAlarmMinorCount, ceAlarmHistEntry=ceAlarmHistEntry, ceAlarmHistType=ceAlarmHistType, ceAlarmGroup=ceAlarmGroup, ceAlarmList=ceAlarmList, ceAlarmDescriptionGroup=ceAlarmDescriptionGroup, AlarmSeverityOrZero=AlarmSeverityOrZero, ciscoEntityAlarmMIBConformance=ciscoEntityAlarmMIBConformance, ceAlarmFilterProfile=ceAlarmFilterProfile, ceAlarmDescrTable=ceAlarmDescrTable, ceAlarmNotifiesEnable=ceAlarmNotifiesEnable, ciscoEntityAlarmMIBGroups=ciscoEntityAlarmMIBGroups, ceAlarmCriticalCount=ceAlarmCriticalCount, ceAlarmFilterStatus=ceAlarmFilterStatus, ceAlarmFiltering=ceAlarmFiltering, ceAlarmFilterProfileTable=ceAlarmFilterProfileTable, ceAlarmMIBCompliance=ceAlarmMIBCompliance, ceAlarmCutOff=ceAlarmCutOff, ceAlarmFilterProfileEntry=ceAlarmFilterProfileEntry, ceAlarmDescription=ceAlarmDescription, ceAlarmMonitoring=ceAlarmMonitoring, ceAlarmFilterAlias=ceAlarmFilterAlias, ceAlarmSyslogEnable=ceAlarmSyslogEnable)
