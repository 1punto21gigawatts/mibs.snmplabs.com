#
# PySNMP MIB module CISCO-FCPING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-FCPING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:58:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcAddressType, FcAddress, VsanIndex = mibBuilder.importSymbols("CISCO-ST-TC", "FcAddressType", "FcAddress", "VsanIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, NotificationType, IpAddress, Counter32, iso, ObjectIdentity, Integer32, TimeTicks, ModuleIdentity, MibIdentifier, Bits, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "NotificationType", "IpAddress", "Counter32", "iso", "ObjectIdentity", "Integer32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Bits", "Counter64")
TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
ciscoFcPingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 295))
ciscoFcPingMIB.setRevisions(('2002-10-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoFcPingMIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoFcPingMIB.setLastUpdated('200210070000Z')
if mibBuilder.loadTexts: ciscoFcPingMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoFcPingMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoFcPingMIB.setDescription('The MIB module for the management of the Fibre Channel Ping functionality.')
ciscoFcPingMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 1))
fcPingMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 2))
fcPingConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1))
fcPingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2))
fcPingNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 3))
fcPingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 3, 0))
class FcStartOper(TextualConvention, Integer32):
    description = 'Enable/disable an operation. enable(1) - enable the operation. disable(2) - disable the operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

fcPingTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1), )
if mibBuilder.loadTexts: fcPingTable.setStatus('current')
if mibBuilder.loadTexts: fcPingTable.setDescription('A table of ping request entries. This table contains a set of ping requests which need to be executed at the agent.')
fcPingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-FCPING-MIB", "fcPingIndex"))
if mibBuilder.loadTexts: fcPingEntry.setStatus('current')
if mibBuilder.loadTexts: fcPingEntry.setDescription("A ping request entry. A management station wishing to create an entry should generate a pseudo-random number to be used as an index into this table and create an instance of the fcPingRowStatus object. After that, the management station should set the corresponding instance of fcPingAddress object with the address of the destination that should be pinged and fcPingVsanIndex with the desired VSAN number. Once the appropriate instance of all the configuration objects have been created, either by an explicit SNMP set request or by default, the row status should be set to active to initiate the ping sequence. Note that this entire procedure may be initiated via a single set request which specifies a row status of createAndGo as well as specifies valid values for the non-defaulted configuration objects. Once the ping sequence has been initiated it can be stopped by setting the corresponding instance of fcPingRowStatus to 'destroy'. The results of the ping operation are made available in the fcPingStats table. For a ping entry uniquely identified by fcPingIndex, an entry will be created in the fcPingStats table automatically by the agent. Once the ping sequence completes, the management station should retrieve the statistics of interest from the fcPingStats table and delete the entry from the fcPingTable. The corresponding entry in the fcPingStats table shall be deleted automatically by the agent. In order to prevent old entries from clogging the table, entries will be aged out, but an entry will never be deleted within fcPingAgeInterval milliseconds of completing. If the management station wishes to repeat the ping sequence to a particular destination, then it will need to set the corresponding instance of fcPingAdminStatus to 'enable' again.")
fcPingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: fcPingIndex.setStatus('current')
if mibBuilder.loadTexts: fcPingIndex.setDescription('The index of a ping entry. This object uniquely identifies a ping request entry on a VSAN.')
fcPingVsanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 2), VsanIndex().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingVsanIndex.setStatus('current')
if mibBuilder.loadTexts: fcPingVsanIndex.setDescription("This object identifies the VSAN to which this ping request belongs. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 3), FcAddressType().clone('wwn')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingAddressType.setStatus('current')
if mibBuilder.loadTexts: fcPingAddressType.setDescription('The format of the corresponding instance of fcPingAddress object.')
fcPingAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 4), FcAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingAddress.setStatus('current')
if mibBuilder.loadTexts: fcPingAddress.setDescription("The address of the device to be pinged. If the value of the corresponding instance of fcPingAddressType object is 'wwn', then this object will contain an 8 octet long WWN. If the value of the corresponding instance of fcPingAddressType object is 'fcid', then this object will contain a 3 octet long FCID. This object MUST be set to a valid value before or concurrently with setting the corresponding instance of fcPingRowStatus to 'active'.")
fcPingPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingPacketCount.setStatus('current')
if mibBuilder.loadTexts: fcPingPacketCount.setDescription("The number of ping packets to be sent to the target in this sequence. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingPayloadSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1884))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingPayloadSize.setStatus('current')
if mibBuilder.loadTexts: fcPingPayloadSize.setDescription("This object specifies the size of the ping packet payload to be sent to the target in this sequence. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingPacketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(2)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingPacketTimeout.setStatus('current')
if mibBuilder.loadTexts: fcPingPacketTimeout.setDescription("The amount of time to wait for a response to a transmitted packet before declaring the packet 'dropped'. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000))).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingDelay.setStatus('current')
if mibBuilder.loadTexts: fcPingDelay.setDescription("The minimum amount of time to wait before sending the next packet in a sequence, after receiving a response or declaring a timeout for a previously transmitted packet. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingAgeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(500000, 900000)).clone(500000)).setUnits('milliseconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingAgeInterval.setStatus('current')
if mibBuilder.loadTexts: fcPingAgeInterval.setDescription("The amount of time to wait after the ping sequence completes before the ping entry is aged out. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingUsrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("high", 1), ("low", 2))).clone('low')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingUsrPriority.setStatus('current')
if mibBuilder.loadTexts: fcPingUsrPriority.setDescription("This object determines the queuing priority and drop probability this sequence of ping packets experience in the switches through which they pass through. If the value of this object is set to 'high', then the corresponding sequence of packets will experience high queueing priority and low drop probability in the switches through which they pass through. If the value of this object is set to 'low', then the corresponding sequence of packets will experience low queueing priority and higher drop probability in the switches through which they pass through. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 11), FcStartOper().clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingAdminStatus.setStatus('current')
if mibBuilder.loadTexts: fcPingAdminStatus.setDescription("This object specifies the desired state that a fcPingEntry should be in: enable(1) - Attempt to activate the ping as defined by this entry. disable(2) - Deactivate the ping as defined by this entry. The actual operational state of this test is indicated by the corresponding instance of fcPingOperStatus. When the ping sequence corresponding to this entry is executing, this object cannot be modified. If this object is read at such a time, a value of 'enable' will be returned. When the ping sequence completes, the value of this object will be made 'disable' automatically by the agent.")
fcPingOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("complete", 2), ("disabled", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingOperStatus.setStatus('current')
if mibBuilder.loadTexts: fcPingOperStatus.setDescription("This object indicates the operational status of this fcPingEntry. inProgress(1) - Indicates that the ping sequence as defined by this instance of fcPingEntry is currently running. complete(2) - Indicates that the ping sequence as defined by this instance of fcPingEntry is currently complete. disabled(3) - Indicates that the ping sequence as defined by this instance of fcPingEntry is currently disabled. failure(4) - Indicates that the ping sequence as defined by this instance of fcPingEntry has currently failed due to resource limitations. Initially the value of this object will be 'inProgress' when the ping sequence is being executed. Once the ping sequence is completed, the value of this object will transition to 'complete'. If the value of the corresponding instance of fcPingAdminStatus is 'disable', then this object will have a value of 'disabled'.")
fcPingTrapOnCompletion = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingTrapOnCompletion.setStatus('current')
if mibBuilder.loadTexts: fcPingTrapOnCompletion.setDescription("This specifies if fcPingCompletionNotify notification should be generated or not when the corresponding ping sequence completes. If this object is set to 'true', then the notification is generated. If this object is set to 'false', then the notification is not generated. This object cannot be modified if the corresponding instance of fcPingOperStatus object has a value of 'inProgress'.")
fcPingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 1, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fcPingRowStatus.setStatus('current')
if mibBuilder.loadTexts: fcPingRowStatus.setDescription("The status of this conceptual row. When a ping sequence is being executed, if this object is set to 'destroy', then the corresponding ping sequence will be stopped.")
fcPingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1), )
if mibBuilder.loadTexts: fcPingStatsTable.setStatus('current')
if mibBuilder.loadTexts: fcPingStatsTable.setDescription('A table of ping statistics. The statistics corresponding to the entries in the fcPingTable. When an entry is deleted in the fcPingTable, the corresponding entry in this table is deleted automatically by the agent.')
fcPingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-FCPING-MIB", "fcPingIndex"))
if mibBuilder.loadTexts: fcPingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: fcPingStatsEntry.setDescription("A ping statistics entry. An entry shall be created automatically in this table whenever a ping request is activated in the fcPingTable by setting the fcPingRowStatus to 'active'. This entry shall have the same indices as the entry that got activated in the fcPingTable. An entry in this table shall be deleted by the agent automatically either when the corresponding entry in the fcPingTable is deleted by the management station or is aged out by the agent. This table shall be empty if there is no 'active' entry in the fcPingTable.")
fcPingTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingTxPackets.setStatus('current')
if mibBuilder.loadTexts: fcPingTxPackets.setDescription('The number of ping packets sent to the target in this sequence.')
fcPingRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingRxPackets.setStatus('current')
if mibBuilder.loadTexts: fcPingRxPackets.setDescription('The number of ping packets received from the target in this sequence.')
fcPingMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingMinRtt.setStatus('current')
if mibBuilder.loadTexts: fcPingMinRtt.setDescription('The minimum round trip time of all the packets that have been sent in this sequence.')
fcPingAvgRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingAvgRtt.setStatus('current')
if mibBuilder.loadTexts: fcPingAvgRtt.setDescription('The average round trip time of all the packets that have been sent in this sequence.')
fcPingMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000000))).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingMaxRtt.setStatus('current')
if mibBuilder.loadTexts: fcPingMaxRtt.setDescription('The maximum round trip time of all the packets that have been sent in this sequence.')
fcPingNumTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 2, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fcPingNumTimeouts.setStatus('current')
if mibBuilder.loadTexts: fcPingNumTimeouts.setDescription('The number of timeouts encountered in this sequence.')
fcPingCompletionNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 295, 1, 3, 0, 1)).setObjects(("CISCO-FCPING-MIB", "fcPingAddress"), ("CISCO-FCPING-MIB", "fcPingTxPackets"), ("CISCO-FCPING-MIB", "fcPingRxPackets"))
if mibBuilder.loadTexts: fcPingCompletionNotify.setStatus('current')
if mibBuilder.loadTexts: fcPingCompletionNotify.setDescription("This notification is generated whenever a sequence of pings is complete and the corresponding instance of fcPingTrapOnCompletion object has been set to 'true'.")
fcPingMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 2, 1))
fcPingMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 295, 2, 2))
fcPingMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 295, 2, 1, 1)).setObjects(("CISCO-FCPING-MIB", "fcPingConfigGroup"), ("CISCO-FCPING-MIB", "fcPingStatsGroup"), ("CISCO-FCPING-MIB", "fcPingNotifyGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcPingMIBCompliance = fcPingMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: fcPingMIBCompliance.setDescription('The compliance statement for entities which implement the Fibre Channel Ping module.')
fcPingConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 295, 2, 2, 1)).setObjects(("CISCO-FCPING-MIB", "fcPingVsanIndex"), ("CISCO-FCPING-MIB", "fcPingAddressType"), ("CISCO-FCPING-MIB", "fcPingAddress"), ("CISCO-FCPING-MIB", "fcPingPacketCount"), ("CISCO-FCPING-MIB", "fcPingPayloadSize"), ("CISCO-FCPING-MIB", "fcPingPacketTimeout"), ("CISCO-FCPING-MIB", "fcPingDelay"), ("CISCO-FCPING-MIB", "fcPingAgeInterval"), ("CISCO-FCPING-MIB", "fcPingUsrPriority"), ("CISCO-FCPING-MIB", "fcPingAdminStatus"), ("CISCO-FCPING-MIB", "fcPingOperStatus"), ("CISCO-FCPING-MIB", "fcPingTrapOnCompletion"), ("CISCO-FCPING-MIB", "fcPingRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcPingConfigGroup = fcPingConfigGroup.setStatus('current')
if mibBuilder.loadTexts: fcPingConfigGroup.setDescription('A collection of objects for configuring Fibre Channel Ping.')
fcPingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 295, 2, 2, 2)).setObjects(("CISCO-FCPING-MIB", "fcPingTxPackets"), ("CISCO-FCPING-MIB", "fcPingRxPackets"), ("CISCO-FCPING-MIB", "fcPingMinRtt"), ("CISCO-FCPING-MIB", "fcPingAvgRtt"), ("CISCO-FCPING-MIB", "fcPingMaxRtt"), ("CISCO-FCPING-MIB", "fcPingNumTimeouts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcPingStatsGroup = fcPingStatsGroup.setStatus('current')
if mibBuilder.loadTexts: fcPingStatsGroup.setDescription('A collection of objects for displaying Fibre Channel Ping statistics.')
fcPingNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 295, 2, 2, 3)).setObjects(("CISCO-FCPING-MIB", "fcPingCompletionNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fcPingNotifyGroup = fcPingNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: fcPingNotifyGroup.setDescription('A collection of notification(s) for monitoring Fibre Channel Ping completion.')
mibBuilder.exportSymbols("CISCO-FCPING-MIB", fcPingStatsTable=fcPingStatsTable, fcPingMIBCompliances=fcPingMIBCompliances, fcPingConfigGroup=fcPingConfigGroup, fcPingPacketCount=fcPingPacketCount, fcPingTxPackets=fcPingTxPackets, fcPingUsrPriority=fcPingUsrPriority, fcPingAdminStatus=fcPingAdminStatus, fcPingNotifyGroup=fcPingNotifyGroup, fcPingOperStatus=fcPingOperStatus, fcPingMaxRtt=fcPingMaxRtt, fcPingAddressType=fcPingAddressType, fcPingIndex=fcPingIndex, fcPingNotification=fcPingNotification, fcPingEntry=fcPingEntry, PYSNMP_MODULE_ID=ciscoFcPingMIB, fcPingAvgRtt=fcPingAvgRtt, ciscoFcPingMIB=ciscoFcPingMIB, fcPingTable=fcPingTable, fcPingTrapOnCompletion=fcPingTrapOnCompletion, fcPingPayloadSize=fcPingPayloadSize, fcPingPacketTimeout=fcPingPacketTimeout, fcPingVsanIndex=fcPingVsanIndex, fcPingMinRtt=fcPingMinRtt, fcPingMIBCompliance=fcPingMIBCompliance, fcPingDelay=fcPingDelay, fcPingStatsEntry=fcPingStatsEntry, fcPingAddress=fcPingAddress, ciscoFcPingMIBObjects=ciscoFcPingMIBObjects, fcPingRowStatus=fcPingRowStatus, fcPingStatsGroup=fcPingStatsGroup, fcPingRxPackets=fcPingRxPackets, fcPingMIBConformance=fcPingMIBConformance, fcPingNotifications=fcPingNotifications, fcPingStats=fcPingStats, fcPingCompletionNotify=fcPingCompletionNotify, fcPingNumTimeouts=fcPingNumTimeouts, fcPingConfiguration=fcPingConfiguration, fcPingAgeInterval=fcPingAgeInterval, FcStartOper=FcStartOper, fcPingMIBGroups=fcPingMIBGroups)
