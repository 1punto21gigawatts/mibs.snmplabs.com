#
# PySNMP MIB module ANNEX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANNEX-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Bits, Unsigned32, Integer32, MibIdentifier, Counter64, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ModuleIdentity, ObjectIdentity, enterprises, Counter32, NotificationType, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Unsigned32", "Integer32", "MibIdentifier", "Counter64", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ModuleIdentity", "ObjectIdentity", "enterprises", "Counter32", "NotificationType", "IpAddress")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
xylogics = MibIdentifier((1, 3, 6, 1, 4, 1, 15))
prod = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 1))
prodannex = MibScalar((1, 3, 6, 1, 4, 1, 15, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodannex.setStatus('mandatory')
if mibBuilder.loadTexts: prodannex.setDescription('Product name.')
annex = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2))
hw = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 1))
sw = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 2))
ports = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 3))
parallelport = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 4))
annexconfig = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 5))
annexcmds = MibIdentifier((1, 3, 6, 1, 4, 1, 15, 2, 6))
hwType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 42, 52, 55))).clone(namedValues=NamedValues(("err", 1), ("annexII", 16), ("annex3", 42), ("microannex", 52), ("microels", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwType.setStatus('mandatory')
if mibBuilder.loadTexts: hwType.setDescription('An identifier for the Annex hardware type.')
hwRev = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRev.setStatus('mandatory')
if mibBuilder.loadTexts: hwRev.setDescription('The revision level of the hardware platform.')
romRev = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: romRev.setStatus('mandatory')
if mibBuilder.loadTexts: romRev.setDescription('The revision number of the ROM Monitor software.')
serialNumber = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: serialNumber.setDescription('The serial number assigned to the unit.')
memorySize = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorySize.setStatus('mandatory')
if mibBuilder.loadTexts: memorySize.setDescription('The amount of memory present in the unit.')
swType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 17, 42, 43, 52, 53, 55))).clone(namedValues=NamedValues(("err", 1), ("annexIImx", 16), ("annexIIux", 17), ("annex3ux", 42), ("annex3mx", 43), ("microannexux", 52), ("microannexmx", 53), ("microels", 55)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swType.setStatus('mandatory')
if mibBuilder.loadTexts: swType.setDescription('The software version currently running on the Annex.')
swRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: swRevMajor.setDescription('The major software release number.')
swRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: swRevMinor.setDescription('The minor software release number.')
swBuild = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBuild.setStatus('mandatory')
if mibBuilder.loadTexts: swBuild.setDescription('The full name of the software build, including the software version, major and minor version numbers and the date and time of the build.')
imageName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: imageName.setStatus('mandatory')
if mibBuilder.loadTexts: imageName.setDescription('The name of the most recently booted image.')
bootHost = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootHost.setStatus('mandatory')
if mibBuilder.loadTexts: bootHost.setDescription('The Internet address of the host from which the Annex booted.')
defaultDomain = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: defaultDomain.setStatus('mandatory')
if mibBuilder.loadTexts: defaultDomain.setDescription('The default domain name provided by the DNS nameserver.')
currentDate = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentDate.setStatus('mandatory')
if mibBuilder.loadTexts: currentDate.setDescription('The current date and time provided by the time server.')
usableMemory = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: usableMemory.setStatus('mandatory')
if mibBuilder.loadTexts: usableMemory.setDescription('The amount of available for data buffers and other structures after the Annex has booted.')
freeMemory = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeMemory.setStatus('mandatory')
if mibBuilder.loadTexts: freeMemory.setDescription('The amount of currently available memory.')
minFreeMemory = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: minFreeMemory.setStatus('mandatory')
if mibBuilder.loadTexts: minFreeMemory.setDescription('The minimum amount of free memory since booting the Annex.')
cpuUtilization = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: cpuUtilization.setDescription('Percent of CPU time currently being used.')
maxProcs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxProcs.setStatus('mandatory')
if mibBuilder.loadTexts: maxProcs.setDescription('The total number of process structures allocated for use.')
mostProcs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mostProcs.setStatus('mandatory')
if mibBuilder.loadTexts: mostProcs.setDescription('The maximum number of active processes since the Annex was booted.')
activeProcs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeProcs.setStatus('mandatory')
if mibBuilder.loadTexts: activeProcs.setDescription('The number of currently active processes.')
cpuIRescheds = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIRescheds.setStatus('mandatory')
if mibBuilder.loadTexts: cpuIRescheds.setDescription('The number of processes whose time slice has expired in the last minute.')
cpuTRescheds = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTRescheds.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTRescheds.setDescription('The total number of processes whose time slice has expired since booting the Annex.')
contextISwtchs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextISwtchs.setStatus('mandatory')
if mibBuilder.loadTexts: contextISwtchs.setDescription('The number of context switches in the last minute.')
contextTSwtchs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: contextTSwtchs.setStatus('mandatory')
if mibBuilder.loadTexts: contextTSwtchs.setDescription('The total number of context switches since booting the Annex.')
cpuIActivates = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuIActivates.setStatus('mandatory')
if mibBuilder.loadTexts: cpuIActivates.setDescription('The number of processes that were activated in the last minute.')
cpuTActivates = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTActivates.setStatus('mandatory')
if mibBuilder.loadTexts: cpuTActivates.setDescription('The number of processes that were activated since booting the Annex.')
maxCallouts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxCallouts.setStatus('mandatory')
if mibBuilder.loadTexts: maxCallouts.setDescription('The number of allocated Callout structures for timed events in the Annex.')
leastCallouts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: leastCallouts.setStatus('mandatory')
if mibBuilder.loadTexts: leastCallouts.setDescription('The minimum number of Callout structures available since last booting the Annex.')
freeCallouts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 2, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: freeCallouts.setStatus('mandatory')
if mibBuilder.loadTexts: freeCallouts.setDescription('The current number of free Callout structures.')
totalPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalPorts.setStatus('mandatory')
if mibBuilder.loadTexts: totalPorts.setDescription('The number of serial ports on this Annex.')
totalInChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalInChars.setStatus('mandatory')
if mibBuilder.loadTexts: totalInChars.setDescription('The total number of characters received on all serial ports.')
totalOutChars = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOutChars.setStatus('mandatory')
if mibBuilder.loadTexts: totalOutChars.setDescription('The total number of characters transmitted on all serial ports.')
totalParityErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalParityErrs.setStatus('mandatory')
if mibBuilder.loadTexts: totalParityErrs.setDescription('The total number of parity errors detected on all serial ports.')
totalOverrunErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalOverrunErrs.setStatus('mandatory')
if mibBuilder.loadTexts: totalOverrunErrs.setDescription('The total number of overruns detected on all serial ports.')
totalFramingErrs = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalFramingErrs.setStatus('mandatory')
if mibBuilder.loadTexts: totalFramingErrs.setDescription('The total number of framing errors detected on all serial ports.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 3, 7), )
if mibBuilder.loadTexts: portTable.setStatus('mandatory')
if mibBuilder.loadTexts: portTable.setDescription('Table of port entries.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1), ).setIndexNames((0, "ANNEX-MIB", "anxpPortIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portEntry.setDescription("The port's configuration parameters.")
anxpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPortIndex.setDescription('A unique number from 1 to totalPorts that identifies each serial port.')
anxpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("cli", 1), ("slave", 2), ("adaptive", 3), ("unused", 4), ("slip", 5), ("dedicated", 6), ("ppp", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMode.setStatus('mandatory')
if mibBuilder.loadTexts: anxpMode.setDescription('This parameter defines the mode for access to the serial line port. The default is cli')
anxpCtrlLines = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("dcddtr", 2), ("ctsrts", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCtrlLines.setStatus('mandatory')
if mibBuilder.loadTexts: anxpCtrlLines.setDescription('The type of hardware control used on the port: modem control (dcddtr), flow control (ctsrts), or both.')
anxpBidirModem = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBidirModem.setStatus('mandatory')
if mibBuilder.loadTexts: anxpBidirModem.setDescription('This parameter controls whether the port is configured for adaptive use with a bidirectional modem.')
anxpAllowBcast = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAllowBcast.setStatus('mandatory')
if mibBuilder.loadTexts: anxpAllowBcast.setDescription('Controls whether the serial port can receive administrative broadcast messages.')
anxpBcastDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port", 1), ("network", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBcastDirection.setStatus('mandatory')
if mibBuilder.loadTexts: anxpBcastDirection.setDescription('Defines the direction that an administrative broadcast message is sent. This parameter is valid only when the port is defined as a slave port by the anxpMode parameter.')
anxpInputStartChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputStartChar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpInputStartChar.setDescription('The control character sequence that restarts input if the charPortInFlowType parameter (in the char MIB) is set to xonXoff.')
anxpInputStopChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputStopChar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpInputStopChar.setDescription('The control character sequence that stops input if the charPortInFlowType parameter (in the char MIB) is set to xonXoff.')
anxpOutputStartChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputStartChar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpOutputStartChar.setDescription('The control character sequence that restarts output if the charPortOutFlowType parameter (in the char MIB) is set to xonXoff.')
anxpOutputStopChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputStopChar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpOutputStopChar.setDescription('The control character sequence that stops output if the charPortOutFlowType parameter (in the char MIB) is set to xonXoff.')
anxpIxanyFlowCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpIxanyFlowCtl.setStatus('mandatory')
if mibBuilder.loadTexts: anxpIxanyFlowCtl.setDescription('This parameter specifies whether any input character will be treated as a start (xon) character when output has been suspended by a stop (xoff) character.')
anxpLongBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLongBreak.setStatus('mandatory')
if mibBuilder.loadTexts: anxpLongBreak.setDescription('This parameter controls whether the Annex returns the user to the CLI prompt after receiving a break greater than two seconds.')
anxpShortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpShortBreak.setStatus('mandatory')
if mibBuilder.loadTexts: anxpShortBreak.setDescription('This parameter controls whether the Annex returns the user to the CLI prompt after receiving a break shorter than two seconds.')
anxpForwardTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardTimer.setStatus('mandatory')
if mibBuilder.loadTexts: anxpForwardTimer.setDescription('This parameter defines the inter-character timer that sets the amount of time, in tens of milliseconds, that will elapse before forwarding the received data. The value of zero turns off the timer.')
anxpForwardCount = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpForwardCount.setStatus('mandatory')
if mibBuilder.loadTexts: anxpForwardCount.setDescription('Specifies the number of received characters buffered for the port by the Annex before forwarding the characters to the host or network.')
anxpImask7Bits = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpImask7Bits.setStatus('mandatory')
if mibBuilder.loadTexts: anxpImask7Bits.setDescription('When enabled, instructs the Annex to ignore the eighth bit of all received characters on the port.')
anxpAttnChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpAttnChar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpAttnChar.setDescription('Defines a control character sequence as an attention character to return the user to the CLI prompt. The Annex-II only allows a single control character (eg. ^A), while the Annex3 and MicroAnnex allow a string of control characters to be defined (eg. ^A^B^Z).')
anxpInputBufSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputBufSize.setStatus('mandatory')
if mibBuilder.loadTexts: anxpInputBufSize.setDescription('The number of 256-byte blocks allocated to receive input characters from this port.')
anxpInputIsActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInputIsActivity.setStatus('mandatory')
if mibBuilder.loadTexts: anxpInputIsActivity.setDescription('Controls whether received input characters are considered as activity for the port.')
anxpOutputIsActivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpOutputIsActivity.setStatus('mandatory')
if mibBuilder.loadTexts: anxpOutputIsActivity.setDescription('Controls whether transmitted output characters are considered as activity for the port.')
anxpInactivityTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: anxpInactivityTimer.setDescription('The amount of time, in minutes, which a port can remain inactive before the Annex terminates all sessions and resets the port. A value of 0 disables the timer.')
anxpResetIdleTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input", 1), ("output", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpResetIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: anxpResetIdleTimer.setDescription('Defines whether input or output resets the idle timer for the port.')
anxpCliInactivity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliInactivity.setStatus('mandatory')
if mibBuilder.loadTexts: anxpCliInactivity.setDescription('The amount of time, in minutes, that the Annex waits before hanging up the serial port after it becomes idle. A value of 0 turns off the timer. A value of 255 means immediate, which causes the Annex to hang up the port immediately after exiting from the last job.')
anxpCliSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: anxpCliSecurity.setDescription('This parameter controls whether security is enabled for the port.')
anxpConnectSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpConnectSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: anxpConnectSecurity.setDescription('This parameter controls whether the host-based security policy is enabled for access from the port to the network.')
anxpPortServerSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPortServerSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPortServerSecurity.setDescription('This parameter controls whether the host-based security policy is enabled for access to the port from the port server.')
anxpPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPortPassword.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPortPassword.setDescription('This parameter defines a password for the port for local password protection.')
anxpUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpUserName.setStatus('mandatory')
if mibBuilder.loadTexts: anxpUserName.setDescription('A string defining the user name for the user of the serial port.')
anxpDedicatedAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxpDedicatedAddr.setDescription('When the anxpMode parameter is set to dedicated, this parameter defines the Internet address of the host to which this port can connect to.')
anxpDedicatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpDedicatedPort.setStatus('mandatory')
if mibBuilder.loadTexts: anxpDedicatedPort.setDescription("The application name or TCP port number to which this port can connect when the anxpMode parameter is set to dedicated. The allowed application names are 'telnet', 'rlogin', 'login', 'call', and 'mls'.")
anxpPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPrompt.setDescription('This parameter defines a port-specific prompt.')
anxpTermVar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTermVar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpTermVar.setDescription('A string defining the type of terminal attached to the serial port.')
anxpNewLineTerm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNewLineTerm.setStatus('mandatory')
if mibBuilder.loadTexts: anxpNewLineTerm.setDescription('This parameter controls whether a carriage return is echoed as just a carriage return (enabled), or whether the carriage return is echoed as a carriage return and line feed.')
anxpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEcho.setStatus('mandatory')
if mibBuilder.loadTexts: anxpEcho.setDescription('This parameter controls whether the Annex echoes all characters as they are received from the port.')
anxpMapToLower = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMapToLower.setStatus('mandatory')
if mibBuilder.loadTexts: anxpMapToLower.setDescription('When enabled, the Annex translates all upper case characters to lower case as they are received from the port.')
anxpMapToUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpMapToUpper.setStatus('mandatory')
if mibBuilder.loadTexts: anxpMapToUpper.setDescription('When enabled, the Annex translates all lower case characters to upper case as they are transmitted to the port.')
anxpHardwareTabs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpHardwareTabs.setStatus('mandatory')
if mibBuilder.loadTexts: anxpHardwareTabs.setDescription('When enabled, this parameter allows the Annex to expand ASCII tab characters.')
anxpCharErase = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCharErase.setStatus('mandatory')
if mibBuilder.loadTexts: anxpCharErase.setDescription('This parameter controls whether the Annex echoes the character erase and word erase characters for a video terminal (enabled) or for a hard-copy terminal (disabled).')
anxpLineErase = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLineErase.setStatus('mandatory')
if mibBuilder.loadTexts: anxpLineErase.setDescription('This parameter controls whether the Annex echoes the line erase character for a video terminal (enabled) or for a hard-copy terminal (disabled).')
anxpEraseChar = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseChar.setStatus('mandatory')
if mibBuilder.loadTexts: anxpEraseChar.setDescription('Defines the character erase control character sequence.')
anxpEraseWord = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseWord.setStatus('mandatory')
if mibBuilder.loadTexts: anxpEraseWord.setDescription('Defines the word erase control character sequence.')
anxpEraseLine = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpEraseLine.setStatus('mandatory')
if mibBuilder.loadTexts: anxpEraseLine.setDescription('Defines the line erase control character sequence.')
anxpRedisplayLine = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpRedisplayLine.setStatus('mandatory')
if mibBuilder.loadTexts: anxpRedisplayLine.setDescription('Defines the reprint line control character sequence.')
anxpToggleOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpToggleOutput.setStatus('mandatory')
if mibBuilder.loadTexts: anxpToggleOutput.setDescription('Defines the flush control character used to flush the output buffer.')
anxpTelnetEscape = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTelnetEscape.setStatus('mandatory')
if mibBuilder.loadTexts: anxpTelnetEscape.setDescription('Defines the control character that returns the user to the telnet: prompt when running the CLI telnet command.')
anxpNeedDsr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNeedDsr.setStatus('mandatory')
if mibBuilder.loadTexts: anxpNeedDsr.setDescription('Specifies whether the DSR signal needs to be asserted when connecting to a slave port.')
anxpTelnetCRLF = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpTelnetCRLF.setStatus('mandatory')
if mibBuilder.loadTexts: anxpTelnetCRLF.setDescription("Defines what characters are transmitted out the port to the network when the End-of-Line character is sensed. 'enabled' means transmit Line-Feed and Carriage-Return. 'disabled' means transmit Carriage-Return and NULL. The default is enabled.")
anxpLatbEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpLatbEnable.setStatus('mandatory')
if mibBuilder.loadTexts: anxpLatbEnable.setDescription('Controls interpretation of LAT Data-B packets received from host.')
anxpSlipSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpSlipSecure.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipSecure.setDescription('If anxEnableSecurity is not set, this parameter selects slip session logging. If anxEnableSecurity is set, this parameter permits slip access only from secure ports.')
anxpNetLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetLocalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxpNetLocalAddr.setDescription("The Internet address for the Annex's side of the point-to-point (SLIP or PPP) link.")
anxpNetRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 51), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetRemoteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxpNetRemoteAddr.setDescription('The Internet address for the host at the remote end of the point-to-point (SLIP or PPP) link.')
anxpSlipSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 52), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipSubnetMask.setDescription('The subnet mask for this SLIP interface.')
anxpSlipLoadDumpHost = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 53), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipLoadDumpHost.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipLoadDumpHost.setDescription('The Internet address of the host from which the Annex receives a load or to which the Annex sends a dump over the SLIP interface.')
anxpNetMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpNetMetric.setStatus('mandatory')
if mibBuilder.loadTexts: anxpNetMetric.setDescription('This parameter defines the hop count to the remote end of the SLIP or PPP interface.')
anxpSlipAllowDump = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipAllowDump.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipAllowDump.setDescription('This parameter defines whether the Annex is allowed to dump across a SLIP link.')
anxpSlipDoCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipDoCompression.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipDoCompression.setDescription('When enabled, the Annex will start TCP/IP header compression on this SLIP link.')
anxpSlipAllowCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipAllowCompression.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipAllowCompression.setDescription('When enabled, the Annex will use TCP/IP header compression on this SLIP link only if the other end of the SLIP link initiates the compression.')
anxpSlipMtuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("large", 1), ("small", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipMtuSize.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipMtuSize.setDescription('Force the compressed SLIP interface to use a Maximum Transmission Unit (MTU) of either 1024 bytes (large) or 256 bytes (small). The default is large.')
anxpSlipNoIcmp = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipNoIcmp.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipNoIcmp.setDescription('When enabled, the Annex will discard any ICMP packets directed to this SLIP link.')
anxpSlipTos = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpSlipTos.setStatus('mandatory')
if mibBuilder.loadTexts: anxpSlipTos.setDescription('When enabled, the Annex sends interactive traffic over this SLIP link before any other traffic.')
anxpPppMru = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppMru.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPppMru.setDescription('This parameter defines the maximum receive unit in bytes. The default value is 1500.')
anxpPppAcm = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppAcm.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPppAcm.setDescription('This parameter specifies which of the first 32 bytes (0x00, ... 0x1F) can be sent as clear text and which need to be escaped. A bit on in the mask indicates the character must be escaped. The mask should be specified as an 8 hex character string (0x1F000000 and 1F000000 are both acceptable).')
anxpPppSecurityProto = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("pap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppSecurityProto.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPppSecurityProto.setDescription('Defines which security protocol will be used to authenticate the remote user. This parameter must be set and the Annex enable_security (anxEnableSecurity) must be enabled before authentication is performed. The default is none')
anxpPppUserRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppUserRemote.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPppUserRemote.setDescription('The username used by the Annex to identify itself if the remote PPP peer asks for authentication. Reading this parameter will return either <set> if the username is defined or <unset> if the username is not defined.')
anxpPppPasswdRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppPasswdRemote.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPppPasswdRemote.setDescription('The username used by the Annex to identify itself if the remote PPP peer asks for authentication. Reading this parameter will return either <set> if the password is defined or <unset> if the password is not defined.')
anxpLatAuthGroupVal = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLatAuthGroupVal.setStatus('mandatory')
if mibBuilder.loadTexts: anxpLatAuthGroupVal.setDescription('This port parameter specifies which remote group codes are accessible to a user on a particular Annex port. Each port has its own set of group codes.')
anxpPppDialupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPppDialupAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPppDialupAddr.setDescription('When enabled, the Annex requests the PPP dialup addresses from the host-based ACP.')
anxpBanner = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpBanner.setStatus('mandatory')
if mibBuilder.loadTexts: anxpBanner.setDescription('Specifies whether the Annex banner and message- of-the-day are displayed on the port. The default is enabled.')
anxpPsHistory = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpPsHistory.setStatus('mandatory')
if mibBuilder.loadTexts: anxpPsHistory.setDescription('Specifies how much data to buffer on a slave port.')
anxpLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpLocation.setStatus('mandatory')
if mibBuilder.loadTexts: anxpLocation.setDescription('A descriptive string for a this port. This string is displayed by the CLI who command.')
anxpType = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("dialin", 1), ("hardwired", 2), ("terminal", 3), ("modem", 4), ("printer", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpType.setStatus('mandatory')
if mibBuilder.loadTexts: anxpType.setDescription('The type of device attached to the port. The default is hardwired.')
anxpCliImask7 = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 3, 7, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpCliImask7.setStatus('mandatory')
if mibBuilder.loadTexts: anxpCliImask7.setDescription('Defines whether input at the CLI is masked to 7 bitx. The default is disabled.')
anxpParaPorts = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpParaPorts.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPorts.setDescription('The number of parallel ports on this Annex.')
anxpParaPortTable = MibTable((1, 3, 6, 1, 4, 1, 15, 2, 4, 2), )
if mibBuilder.loadTexts: anxpParaPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortTable.setDescription('Table of parallel port parameters.')
anxpParaPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1), ).setIndexNames((0, "ANNEX-MIB", "anxpParaPortIndex"))
if mibBuilder.loadTexts: anxpParaPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortEntry.setDescription('The Annex parallel port configuration parameters.')
anxpParaPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: anxpParaPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortIndex.setDescription('A unique number from 1 to anxpParaPorts that identifies each parallel port.')
anxpParaPortHardwareTabs = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortHardwareTabs.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortHardwareTabs.setDescription('This parameter controls whether the Annex will send a tab character to the printer. If disabled, the tab is replaced with spaces.')
anxpParaPortMapToUpper = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortMapToUpper.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortMapToUpper.setDescription('When enabled, the Annex translates all lower case characters to upper case before transmitting the characters to the printer port.')
anxpParaPortPrinterWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(40, 132))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortPrinterWidth.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortPrinterWidth.setDescription('The defined maximum number of characters per printer line.')
anxpParaPortInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centronics", 1), ("dataproducts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortInterface.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortInterface.setDescription('The type of printer attached to the port.')
anxpParaPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 15, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("high-speed", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxpParaPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: anxpParaPortSpeed.setDescription('The printer speed on the Micro-Annex.')
anxInetAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxInetAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxInetAddr.setDescription('The Internet address of the Annex.')
anxPrefLoadAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxPrefLoadAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxPrefLoadAddr.setDescription('The preferred load address for the Annex.')
anxPrefDumpAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxPrefDumpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxPrefDumpAddr.setDescription('The preferred dump address for the Annex.')
anxLoadDumpGateway = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLoadDumpGateway.setStatus('mandatory')
if mibBuilder.loadTexts: anxLoadDumpGateway.setDescription('The Internet address of a gateway used when the preferred load or dump host is on a different network or subnet.')
anxLoadDumpSeq = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLoadDumpSeq.setStatus('mandatory')
if mibBuilder.loadTexts: anxLoadDumpSeq.setDescription('Lists the available network interfaces and the order that the Annex uses them when doing a down-line load or up-line dump.')
anxLoadBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLoadBcast.setStatus('mandatory')
if mibBuilder.loadTexts: anxLoadBcast.setDescription('This parameter defines whether the Annex broadcasts for the config or the motd files if they were not found on the preferred load host.')
anxServerCap = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxServerCap.setStatus('mandatory')
if mibBuilder.loadTexts: anxServerCap.setDescription("Defines whether the Annex can act as a file server host for another Annex. The allowable values are 'all', 'none' (the default), or one or more of the following names separated by commas: 'config', 'motd', 'image'.")
anxTimeBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTimeBcast.setStatus('mandatory')
if mibBuilder.loadTexts: anxTimeBcast.setDescription('This parameter defines whether the Annex broadcasts for the time if the preferred load host does not provide a time server.')
anxBcastAddr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxBcastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: anxBcastAddr.setDescription('The Internet address used by the Annex when sending broadcasts.')
anxSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: anxSubnetMask.setDescription('The Internet subnet mask.')
anxAuthAgent = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxAuthAgent.setStatus('mandatory')
if mibBuilder.loadTexts: anxAuthAgent.setDescription('This parameter controls whether the Annex can send an ICMP Address Mask Reply to a received ICMP Address Mask Request.')
anxMaxVcli = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxMaxVcli.setStatus('mandatory')
if mibBuilder.loadTexts: anxMaxVcli.setDescription('The maximum number of virtual CLI connections allowed by the Annex at any one time. 0 means the Annex does not allow VCLI connections. 255 allows the Annex to maintain an unlimited number of VCLI connections.')
anxIpEncapType = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("ieee802", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxIpEncapType.setStatus('mandatory')
if mibBuilder.loadTexts: anxIpEncapType.setDescription('This parameter specifies whether the Annex encapsulates IP packets in the Ethernet format or the IEEE 802.2/802.3 Data Link Layer format.')
anxNameServer1Type = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ien116", 2), ("dns", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer1Type.setStatus('mandatory')
if mibBuilder.loadTexts: anxNameServer1Type.setDescription('The name service type used by the primary nameserver host.')
anxNameServer1Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer1Addr.setStatus('mandatory')
if mibBuilder.loadTexts: anxNameServer1Addr.setDescription('The Internet address of the primary nameserver host.')
anxNameServer2Type = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ien116", 2), ("dns", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer2Type.setStatus('mandatory')
if mibBuilder.loadTexts: anxNameServer2Type.setDescription('The name service type used by the secondary nameserver host.')
anxNameServer2Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 17), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServer2Addr.setStatus('mandatory')
if mibBuilder.loadTexts: anxNameServer2Addr.setDescription('The Internet address of the secondary nameserver host.')
anxNameServerBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNameServerBcast.setStatus('mandatory')
if mibBuilder.loadTexts: anxNameServerBcast.setDescription('This parameter controls whether the Annex broadcasts a name server request if the preferred name servers do not respond.')
anxRwhod = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxRwhod.setStatus('mandatory')
if mibBuilder.loadTexts: anxRwhod.setDescription('Defines whether the Annex listens for RWHO broadcasts when building its host table.')
anxMinUniqueHostNames = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxMinUniqueHostNames.setStatus('mandatory')
if mibBuilder.loadTexts: anxMinUniqueHostNames.setDescription('Defines whether the Annex minimum uniqueness feature is available.')
anxHostTableSize = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 251))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxHostTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: anxHostTableSize.setDescription('Defines the number of entries in the Annex host table. 0 indicates no host table. 251 sets no limit on the size of the table.')
anxRouted = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxRouted.setStatus('mandatory')
if mibBuilder.loadTexts: anxRouted.setDescription('Defines whether the RIP-listener of the routing daemon on the Annex is enabled.')
anxEnableSecurity = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxEnableSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: anxEnableSecurity.setDescription('This parameter controls whether the Annex security system is enabled.')
anxPassword = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxPassword.setStatus('mandatory')
if mibBuilder.loadTexts: anxPassword.setDescription("Setting this parameter changes the Annex's administration password. Reading this parameter will return either <set> if the password is defined or <unset> if the password is not defined.")
anxSecurServer1Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSecurServer1Addr.setStatus('mandatory')
if mibBuilder.loadTexts: anxSecurServer1Addr.setDescription('The Internet address of the primary host where the Annex sends its security requests.')
anxSecurServer2Addr = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSecurServer2Addr.setStatus('mandatory')
if mibBuilder.loadTexts: anxSecurServer2Addr.setDescription('The Internet address of the secondary host where the Annex sends its security requests.')
anxNetTurnAround = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxNetTurnAround.setStatus('mandatory')
if mibBuilder.loadTexts: anxNetTurnAround.setDescription('The amount of time (in seconds) that the Annex waits for a response from a security server.')
anxSecurBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSecurBcast.setStatus('mandatory')
if mibBuilder.loadTexts: anxSecurBcast.setDescription('This parameter controls whether the Annex will broadcast its security requests when neither of the preferred security servers are available.')
anxVcliSecurity = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxVcliSecurity.setStatus('mandatory')
if mibBuilder.loadTexts: anxVcliSecurity.setDescription('This parameter controls whether the Annex performs user validation on the virtual CLI connections.')
anxVcliPassword = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxVcliPassword.setStatus('mandatory')
if mibBuilder.loadTexts: anxVcliPassword.setDescription('This parameter defines a password used by the Annex when setting up a virtual CLI connection.')
anxAcpKey = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxAcpKey.setStatus('mandatory')
if mibBuilder.loadTexts: anxAcpKey.setDescription("This parameter defines the Annex's encryption key used when exchanging messages between the Annex and the security server.")
anxSysLogMask = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogMask.setStatus('mandatory')
if mibBuilder.loadTexts: anxSysLogMask.setDescription("Defines the priority levels of events logged in the Annex syslog file. The allowable values are 'all', 'none', or one or more of the following level names separated by commas: 'emergency', 'alert', 'critical', 'error', 'warning', 'notice', 'info', 'debug' ")
anxSysLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("loglocal0", 17), ("loglocal1", 18), ("loglocal2", 19), ("loglocal3", 20), ("loglocal4", 21), ("loglocal5", 22), ("loglocal6", 23), ("loglocal7", 24)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogFacility.setStatus('mandatory')
if mibBuilder.loadTexts: anxSysLogFacility.setDescription('This parameter defines the 4.3BSD syslog facility used in logging the Annex messages.')
anxSysLogHost = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogHost.setStatus('mandatory')
if mibBuilder.loadTexts: anxSysLogHost.setDescription('The Internet address of the host configured to log Annex messages.')
anxCliPrompt = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxCliPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: anxCliPrompt.setDescription('The string used by the Annex to prompt all CLI users.')
anxMotdFile = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxMotdFile.setStatus('mandatory')
if mibBuilder.loadTexts: anxMotdFile.setDescription('The host file name that contains the message-of-the-day for the Annex.')
anxTftpDirName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTftpDirName.setStatus('mandatory')
if mibBuilder.loadTexts: anxTftpDirName.setDescription('Specifies the directory name to be prepended to all files (boot image, motd, macros, etc.) when booting via TFTP.')
anxTftpDumpName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTftpDumpName.setStatus('mandatory')
if mibBuilder.loadTexts: anxTftpDumpName.setDescription('The full pathname of the TFTP dump file, if any.')
anxTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1200, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: anxTimeZone.setDescription('Defines the timezone where the Annex resides in minutes west of GMT.')
anxDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("us", 1), ("australian", 2), ("westeuropean", 3), ("mideuropean", 4), ("easteuropean", 5), ("canadian", 6), ("british", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxDaylightSavings.setStatus('mandatory')
if mibBuilder.loadTexts: anxDaylightSavings.setDescription('Defines the daylight savings time for the geographic location of the Annex.')
anxLatKey = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatKey.setStatus('mandatory')
if mibBuilder.loadTexts: anxLatKey.setDescription('The Annex specific LAT key used to enable or disable the LAT protocol.')
anxCircuitTimer = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxCircuitTimer.setStatus('mandatory')
if mibBuilder.loadTexts: anxCircuitTimer.setDescription('The time interval in tens of milliseconds between the transmission of LAT packets.')
anxFacilityNum = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxFacilityNum.setStatus('mandatory')
if mibBuilder.loadTexts: anxFacilityNum.setDescription('The LAT facility number.')
anxLatGroupVal = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatGroupVal.setStatus('mandatory')
if mibBuilder.loadTexts: anxLatGroupVal.setDescription("The Annex LAT group code for permitting access to LAT services. To access a specific LAT service, the Annex must have at least one enabled group code match the service's set group codes. The Annex will not maintain any information about unauthorized services. The value is displayed as a string of hex characters with each bit defining whether a specific group is enabled or disabled.")
anxKeepAliveTimer = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxKeepAliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: anxKeepAliveTimer.setDescription('The time interval, in seconds, between the transmission of identification packets during times of network inactivity.')
anxReXmitLimit = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxReXmitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: anxReXmitLimit.setDescription('The number of times to retransmit a packet before notifying the user of a network failure.')
anxServerName = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxServerName.setStatus('mandatory')
if mibBuilder.loadTexts: anxServerName.setDescription('A string of up to 16 characters used to name the Annex in the LAT protocol.')
anxServiceLimit = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxServiceLimit.setStatus('mandatory')
if mibBuilder.loadTexts: anxServiceLimit.setDescription('This parameter defines the upper bound on the number of services that the Annex can maintain in its local service table.')
anxConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxConfigFile.setStatus('mandatory')
if mibBuilder.loadTexts: anxConfigFile.setDescription('The name of the host file that contains the alias and menu entries.')
anxLatVcliGroupVal = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatVcliGroupVal.setStatus('mandatory')
if mibBuilder.loadTexts: anxLatVcliGroupVal.setDescription('This Annex parameter specifies which remote group codes are accessible to virtual cli users. All virtual cli users have the same group code. The value is displayed as a string of hex characters with each bit defining whether a specific group is enabled or disabled.')
anxLatQueueMax = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatQueueMax.setStatus('mandatory')
if mibBuilder.loadTexts: anxLatQueueMax.setDescription("Defines the maximum number of host requests (HIC's) that the Annex will save in its internal queue when the requested resource is not available (port busy).")
anxLatLocation = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxLatLocation.setStatus('mandatory')
if mibBuilder.loadTexts: anxLatLocation.setDescription('A string of up to 32 characters used to identify the location of the Annex for the LAT protocol.')
anxDisabledModules = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxDisabledModules.setStatus('mandatory')
if mibBuilder.loadTexts: anxDisabledModules.setDescription("Defines which selectable modules are currently disabled. The allowable values are 'all', 'none' or one or more of the following names separated by commas: 'admin', 'lat', 'ppp', 'slip', 'snmp', 'nameserver', 'cli-edit'. If this is a MicroAnnex ELS, the values 'ppp' and 'slip' are not valid.")
anxSysLogPort = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 5, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxSysLogPort.setStatus('mandatory')
if mibBuilder.loadTexts: anxSysLogPort.setDescription('Specifies the Annex port number where syslog messages are sent. If set to 0, syslog messages are not sent to an Annex port. This is independent of any host-based syslogging that may be enabled. The maximum port number allowed will depend on the highest numbered port on the specific Annex.')
anxcBoot = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("immediate", 1), ("delayed", 2), ("dumpboot", 3), ("diagnosticboot", 4), ("abortschedule", 5), ("quiet", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBoot.setStatus('mandatory')
if mibBuilder.loadTexts: anxcBoot.setDescription('The type of boot to be performed. To initiate a dump, this parameter needs to be set by the management station. The values stored in anxcBootImage, anxcBootTime, and anxcBootMsg are used as needed, depending on the boot type.')
anxcBootImage = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBootImage.setStatus('mandatory')
if mibBuilder.loadTexts: anxcBootImage.setDescription('The name of the image file to be used with the boot command.')
anxcBootTime = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBootTime.setStatus('mandatory')
if mibBuilder.loadTexts: anxcBootTime.setDescription('The time at which the next boot is scheduled in HH:MM format.')
anxcBootMsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBootMsg.setStatus('mandatory')
if mibBuilder.loadTexts: anxcBootMsg.setDescription('The broadcast message to be displayed when the next boot is performed.')
anxcReset = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("all", 1), ("macros", 2), ("motd", 3), ("nameserver", 4), ("security", 5), ("printerport", 6), ("serialports", 7), ("virtualports", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcReset.setStatus('mandatory')
if mibBuilder.loadTexts: anxcReset.setDescription('Writing a value to this object causes the annex to reset the appropriate subsystem.')
anxcBcast = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("serial", 2), ("virtual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBcast.setStatus('mandatory')
if mibBuilder.loadTexts: anxcBcast.setDescription('Writing a value to this object causes the annex to send the message in anxcBcastMsg to the specified port set.')
anxcBcastMsg = MibScalar((1, 3, 6, 1, 4, 1, 15, 2, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: anxcBcastMsg.setStatus('mandatory')
if mibBuilder.loadTexts: anxcBcastMsg.setDescription('The message to be broadcast to the Annex ports.')
mibBuilder.exportSymbols("ANNEX-MIB", anxLoadBcast=anxLoadBcast, activeProcs=activeProcs, anxpEraseChar=anxpEraseChar, anxpSlipMtuSize=anxpSlipMtuSize, swBuild=swBuild, cpuTRescheds=cpuTRescheds, anxpInactivityTimer=anxpInactivityTimer, anxpEraseWord=anxpEraseWord, anxRwhod=anxRwhod, anxReXmitLimit=anxReXmitLimit, anxpSlipSubnetMask=anxpSlipSubnetMask, anxNameServerBcast=anxNameServerBcast, anxpNeedDsr=anxpNeedDsr, swRevMinor=swRevMinor, bootHost=bootHost, anxNameServer1Addr=anxNameServer1Addr, anxpInputBufSize=anxpInputBufSize, anxpParaPorts=anxpParaPorts, anxNameServer2Addr=anxNameServer2Addr, anxpOutputIsActivity=anxpOutputIsActivity, freeMemory=freeMemory, parallelport=parallelport, anxpNetMetric=anxpNetMetric, anxSysLogPort=anxSysLogPort, anxpNetLocalAddr=anxpNetLocalAddr, anxVcliSecurity=anxVcliSecurity, anxLatLocation=anxLatLocation, anxLatKey=anxLatKey, currentDate=currentDate, anxpBanner=anxpBanner, anxpInputStopChar=anxpInputStopChar, anxpConnectSecurity=anxpConnectSecurity, anxpCliInactivity=anxpCliInactivity, anxEnableSecurity=anxEnableSecurity, anxpPppDialupAddr=anxpPppDialupAddr, cpuIRescheds=cpuIRescheds, anxTftpDumpName=anxTftpDumpName, anxpParaPortIndex=anxpParaPortIndex, ports=ports, anxLatVcliGroupVal=anxLatVcliGroupVal, anxcBootTime=anxcBootTime, anxpNetRemoteAddr=anxpNetRemoteAddr, anxpSlipTos=anxpSlipTos, portEntry=portEntry, anxPrefDumpAddr=anxPrefDumpAddr, anxpParaPortPrinterWidth=anxpParaPortPrinterWidth, contextISwtchs=contextISwtchs, anxSysLogFacility=anxSysLogFacility, cpuUtilization=cpuUtilization, anxpTelnetCRLF=anxpTelnetCRLF, anxpUserName=anxpUserName, anxServiceLimit=anxServiceLimit, anxTftpDirName=anxTftpDirName, anxpParaPortTable=anxpParaPortTable, hw=hw, anxpNewLineTerm=anxpNewLineTerm, anxCircuitTimer=anxCircuitTimer, xylogics=xylogics, totalPorts=totalPorts, anxpParaPortSpeed=anxpParaPortSpeed, anxpOutputStartChar=anxpOutputStartChar, anxpCharErase=anxpCharErase, anxpType=anxpType, anxpForwardTimer=anxpForwardTimer, anxcBcastMsg=anxcBcastMsg, anxpSlipDoCompression=anxpSlipDoCompression, maxCallouts=maxCallouts, anxpLongBreak=anxpLongBreak, mostProcs=mostProcs, anxpAllowBcast=anxpAllowBcast, anxPassword=anxPassword, anxSecurBcast=anxSecurBcast, anxVcliPassword=anxVcliPassword, anxpOutputStopChar=anxpOutputStopChar, memorySize=memorySize, anxpSlipNoIcmp=anxpSlipNoIcmp, anxpParaPortMapToUpper=anxpParaPortMapToUpper, anxServerName=anxServerName, romRev=romRev, anxpForwardCount=anxpForwardCount, anxpEraseLine=anxpEraseLine, anxMinUniqueHostNames=anxMinUniqueHostNames, anxpRedisplayLine=anxpRedisplayLine, anxpDedicatedAddr=anxpDedicatedAddr, anxpMapToUpper=anxpMapToUpper, anxpLineErase=anxpLineErase, anxpBidirModem=anxpBidirModem, anxpCliSecurity=anxpCliSecurity, anxpPppUserRemote=anxpPppUserRemote, anxpCliImask7=anxpCliImask7, anxpParaPortHardwareTabs=anxpParaPortHardwareTabs, anxBcastAddr=anxBcastAddr, anxHostTableSize=anxHostTableSize, anxAcpKey=anxAcpKey, totalFramingErrs=totalFramingErrs, anxConfigFile=anxConfigFile, anxAuthAgent=anxAuthAgent, anxpLocation=anxpLocation, anxpMapToLower=anxpMapToLower, anxcBcast=anxcBcast, anxpMode=anxpMode, anxpPppSecurityProto=anxpPppSecurityProto, anxPrefLoadAddr=anxPrefLoadAddr, anxSysLogHost=anxSysLogHost, anxpToggleOutput=anxpToggleOutput, anxpSlipAllowDump=anxpSlipAllowDump, portTable=portTable, anxIpEncapType=anxIpEncapType, serialNumber=serialNumber, anxpTermVar=anxpTermVar, anxLoadDumpSeq=anxLoadDumpSeq, anxpAttnChar=anxpAttnChar, anxTimeZone=anxTimeZone, annexconfig=annexconfig, swRevMajor=swRevMajor, anxpPortPassword=anxpPortPassword, anxCliPrompt=anxCliPrompt, anxFacilityNum=anxFacilityNum, anxpDedicatedPort=anxpDedicatedPort, freeCallouts=freeCallouts, anxSysLogMask=anxSysLogMask, minFreeMemory=minFreeMemory, hwRev=hwRev, anxSecurServer1Addr=anxSecurServer1Addr, anxpTelnetEscape=anxpTelnetEscape, anxSubnetMask=anxSubnetMask, anxKeepAliveTimer=anxKeepAliveTimer, cpuTActivates=cpuTActivates, totalParityErrs=totalParityErrs, anxpImask7Bits=anxpImask7Bits, anxSecurServer2Addr=anxSecurServer2Addr, anxNameServer1Type=anxNameServer1Type, anxpResetIdleTimer=anxpResetIdleTimer, anxpPppMru=anxpPppMru, anxpParaPortEntry=anxpParaPortEntry, usableMemory=usableMemory, anxcBoot=anxcBoot, anxpIxanyFlowCtl=anxpIxanyFlowCtl, sw=sw, anxpParaPortInterface=anxpParaPortInterface, anxLatQueueMax=anxLatQueueMax, anxpSlipAllowCompression=anxpSlipAllowCompression, anxpPortIndex=anxpPortIndex, anxpCtrlLines=anxpCtrlLines, totalOverrunErrs=totalOverrunErrs, anxDaylightSavings=anxDaylightSavings, anxpPppAcm=anxpPppAcm, anxpLatbEnable=anxpLatbEnable, anxpSlipSecure=anxpSlipSecure, anxLatGroupVal=anxLatGroupVal, anxNetTurnAround=anxNetTurnAround, anxRouted=anxRouted, anxpSlipLoadDumpHost=anxpSlipLoadDumpHost, annexcmds=annexcmds, anxpHardwareTabs=anxpHardwareTabs, anxpBcastDirection=anxpBcastDirection, anxpShortBreak=anxpShortBreak, anxcReset=anxcReset, cpuIActivates=cpuIActivates, anxLoadDumpGateway=anxLoadDumpGateway, anxInetAddr=anxInetAddr, swType=swType, hwType=hwType, anxpPrompt=anxpPrompt, imageName=imageName, totalOutChars=totalOutChars, anxpEcho=anxpEcho, maxProcs=maxProcs, annex=annex, totalInChars=totalInChars, anxcBootImage=anxcBootImage, leastCallouts=leastCallouts, contextTSwtchs=contextTSwtchs, anxpPppPasswdRemote=anxpPppPasswdRemote, anxcBootMsg=anxcBootMsg, anxServerCap=anxServerCap, anxMaxVcli=anxMaxVcli, anxNameServer2Type=anxNameServer2Type, anxMotdFile=anxMotdFile, anxDisabledModules=anxDisabledModules, anxpInputStartChar=anxpInputStartChar, anxpPortServerSecurity=anxpPortServerSecurity, prod=prod, defaultDomain=defaultDomain, anxpInputIsActivity=anxpInputIsActivity, anxpLatAuthGroupVal=anxpLatAuthGroupVal, anxpPsHistory=anxpPsHistory, anxTimeBcast=anxTimeBcast, prodannex=prodannex)
