#
# PySNMP MIB module QUANTA-BGP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/QUANTA-BGP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
switch, = mibBuilder.importSymbols("QUANTA-SWITCH-MIB", "switch")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, iso, MibIdentifier, ObjectIdentity, Integer32, Bits, Counter32, Counter64, Gauge32, Unsigned32, ModuleIdentity, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "iso", "MibIdentifier", "ObjectIdentity", "Integer32", "Bits", "Counter32", "Counter64", "Gauge32", "Unsigned32", "ModuleIdentity", "IpAddress", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
quantaBGP = ModuleIdentity((1, 3, 6, 1, 4, 1, 7244, 2, 5))
if mibBuilder.loadTexts: quantaBGP.setLastUpdated('201101260000Z')
if mibBuilder.loadTexts: quantaBGP.setOrganization('QCI')
if mibBuilder.loadTexts: quantaBGP.setContactInfo(' Customer Support Postal: Quanta Computer Inc. 4, Wen Ming 1 St., Kuei Shan Hsiang, Tao Yuan Shien, Taiwan, R.O.C. Tel: +886 3 328 0050 E-Mail: strong.chen@quantatw.com')
if mibBuilder.loadTexts: quantaBGP.setDescription('The MIB definitions for Border Gateway Protocol Flex package.')
agentBGPQueueGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1))
agentBGPQueueTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1), )
if mibBuilder.loadTexts: agentBGPQueueTable.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueTable.setDescription('Table lists information about BGP work queue utilization.')
agentBGPQueueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1), ).setIndexNames((0, "QUANTA-BGP-MIB", "agentBGPQueueIndex"))
if mibBuilder.loadTexts: agentBGPQueueEntry.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueEntry.setDescription('Information on a specific BGP work queue.')
agentBGPQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: agentBGPQueueIndex.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueIndex.setDescription('Index value for this work queue.')
agentBGPQueueName = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPQueueName.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueName.setDescription('Name of an BGP work queue.')
agentBGPQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPQueueLength.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueLength.setDescription('The number of items currently in the work queue.')
agentBGPQueueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPQueueHigh.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueHigh.setDescription('The high water mark of the number of items in the work queue.')
agentBGPQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPQueueDrops.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueDrops.setDescription('The number of items dropped because the work queue was full.')
agentBGPQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 1, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPQueueLimit.setStatus('current')
if mibBuilder.loadTexts: agentBGPQueueLimit.setDescription('The maximum number of items this queue can hold.')
agentBGPMessageStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2))
agentBGPCountersCleared = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPCountersCleared.setStatus('current')
if mibBuilder.loadTexts: agentBGPCountersCleared.setDescription('The time since BGP counters were last cleared, in seconds.')
agentBGPInOpens = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPInOpens.setStatus('current')
if mibBuilder.loadTexts: agentBGPInOpens.setDescription('The total number of BGP OPEN messages received since BGP counters were last cleared.')
agentBGPOutOpens = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPOutOpens.setStatus('current')
if mibBuilder.loadTexts: agentBGPOutOpens.setDescription('The total number of BGP OPEN messages transmitted since BGP counters were last cleared.')
agentBGPInUpdates = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPInUpdates.setStatus('current')
if mibBuilder.loadTexts: agentBGPInUpdates.setDescription('The total number of BGP UPDATE messages received since BGP counters were last cleared.')
agentBGPOutUpdates = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPOutUpdates.setStatus('current')
if mibBuilder.loadTexts: agentBGPOutUpdates.setDescription('The total number of BGP UPDATE messages transmitted since BGP counters were last cleared.')
agentBGPInNotifications = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPInNotifications.setStatus('current')
if mibBuilder.loadTexts: agentBGPInNotifications.setDescription('The total number of BGP NOTIFICATION messages received since BGP counters were last cleared.')
agentBGPOutNotifications = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPOutNotifications.setStatus('current')
if mibBuilder.loadTexts: agentBGPOutNotifications.setDescription('The total number of BGP NOTIFICATION messages transmitted since BGP counters were last cleared.')
agentBGPInKeepalives = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPInKeepalives.setStatus('current')
if mibBuilder.loadTexts: agentBGPInKeepalives.setDescription('The total number of BGP KEEPALIVE messages received since BGP counters were last cleared.')
agentBGPOutKeepalives = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPOutKeepalives.setStatus('current')
if mibBuilder.loadTexts: agentBGPOutKeepalives.setDescription('The total number of BGP KEEPALIVE messages transmitted since BGP counters were last cleared.')
agentBGPInRouteRefreshes = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPInRouteRefreshes.setStatus('current')
if mibBuilder.loadTexts: agentBGPInRouteRefreshes.setDescription('The total number of BGP ROUTE REFRESH messages received since BGP counters were last cleared.')
agentBGPOutRouteRefreshes = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPOutRouteRefreshes.setStatus('current')
if mibBuilder.loadTexts: agentBGPOutRouteRefreshes.setDescription('The total number of BGP ROUTE REFRESH messages transmitted since BGP counters were last cleared.')
agentBGPInUpdatesMax = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPInUpdatesMax.setStatus('current')
if mibBuilder.loadTexts: agentBGPInUpdatesMax.setDescription('The maximum rate of BGP UPDATE messages received. The rate is given in packets per second.')
agentBGPOutUpdatesMax = MibScalar((1, 3, 6, 1, 4, 1, 7244, 2, 5, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPOutUpdatesMax.setStatus('current')
if mibBuilder.loadTexts: agentBGPOutUpdatesMax.setDescription('The maximum rate of BGP UPDATE messages transmitted. The rate is given in packets per second.')
agentBGPDecProcTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3), )
if mibBuilder.loadTexts: agentBGPDecProcTable.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcTable.setDescription('This table contains information about the twenty most recent executions of any of the three decision process phases. The most recent information is at the end of the table. This table is applicable to IPv4 address family only.')
agentBGPDecProcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1), ).setIndexNames((0, "QUANTA-BGP-MIB", "agentBGPDecProcIndex"))
if mibBuilder.loadTexts: agentBGPDecProcEntry.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcEntry.setDescription('Information about execution of a single decision process phase.')
agentBGPDecProcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 1), Counter32())
if mibBuilder.loadTexts: agentBGPDecProcIndex.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcIndex.setDescription('Integer that uniquely identifies a decision process run. This value is incremented each time BGP runs one phase of the decision process.')
agentBGPDecProcDeltaT = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcDeltaT.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcDeltaT.setDescription('How long since this decision process ran. The time is given in seconds.')
agentBGPDecProcPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcPhase.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcPhase.setDescription('Which of the three decision process phases was run.')
agentBGPDecProcUpdateGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcUpdateGroup.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcUpdateGroup.setDescription('This variable is only valid when agentBGPDecProcPhase is 3. When the phase is 3, this variable identifies the outbound update group for which phase 3 was run.')
agentBGPDecProcGenId = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcGenId.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcGenId.setDescription('The global generation ID when the decision process ran.')
agentBGPDecProcReason = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcReason.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcReason.setDescription('Reason why the decision process was run.')
agentBGPDecProcPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcPeer.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcPeer.setDescription('This variable is only valid when phase 1 is run for a single peer. In this case, this variable is the IP address of the peer for which phase 1 was run.')
agentBGPDecProcDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcDuration.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcDuration.setDescription('How long the decision process ran. Milliseconds.')
agentBGPDecProcAdds = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcAdds.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcAdds.setDescription('Number of prefixes added during the decision process. For phase 1, this is the number of prefixes that pass inbound policy. For phase 2, this is the number of prefixes added to the BGP routing table. For phase 3, this is the number of prefixes added to the Adj-RIB-Out.')
agentBGPDecProcMods = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcMods.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcMods.setDescription('Number of prefixes modified during the decision process. For phase 1, this is the number of prefixes that pass inbound policy. For phase 2, this is the number of routes modified. For phase 3, this is the number of routes modified in the Adj-RIB-Out.')
agentBGPDecProcDels = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPDecProcDels.setStatus('current')
if mibBuilder.loadTexts: agentBGPDecProcDels.setDescription('Number of prefixes deleted during the decision process. For phase 1, this is the number of prefixes that previously passed inbound policy but no longer pass. For phase 2, this is the number of prefixes removed from the BGP routing table. For phase 3, this is the number of prefixes removed from the Adj-RIB-Out.')
agentBGPPeerTable = MibTable((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4), )
if mibBuilder.loadTexts: agentBGPPeerTable.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerTable.setDescription('BGP peer table. This table contains, one entry per BGP peer, information about connections with BGP peers.')
agentBGPPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1), ).setIndexNames((0, "QUANTA-BGP-MIB", "agentBGPPeerRemoteAddr"))
if mibBuilder.loadTexts: agentBGPPeerEntry.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerEntry.setDescription('Entry containing information about the connection with a BGP peer.')
agentBGPPeerRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerRemoteAddr.setDescription("The remote IP address of this entry's BGP peer.")
agentBGPPeerInOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInOpens.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInOpens.setDescription('The number of BGP OPEN messages received from this peer.')
agentBGPPeerOutOpens = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutOpens.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutOpens.setDescription('The number of BGP OPEN messages transmitted to this peer.')
agentBGPPeerInUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInUpdates.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInUpdates.setDescription('The number of BGP UPDATE messages received from this peer.')
agentBGPPeerOutUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutUpdates.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutUpdates.setDescription('The number of BGP UPDATE messages transmitted to this peer.')
agentBGPPeerInNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInNotifications.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInNotifications.setDescription('The number of BGP NOTIFICATION messages received from this peer.')
agentBGPPeerOutNotifications = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutNotifications.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutNotifications.setDescription('The number of BGP NOTIFICATION messages transmitted to this peer.')
agentBGPPeerInKeepalives = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInKeepalives.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInKeepalives.setDescription('The number of BGP KEEPALIVE messages received from this peer.')
agentBGPPeerOutKeepalives = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutKeepalives.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutKeepalives.setDescription('The number of BGP KEEPALIVE messages transmitted to this peer.')
agentBGPPeerInRouteRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInRouteRefreshes.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInRouteRefreshes.setDescription('The number of BGP ROUTE REFRESH messages received from this peer.')
agentBGPPeerOutRouteRefreshes = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutRouteRefreshes.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutRouteRefreshes.setDescription('The number of BGP ROUTE REFRESH messages transmitted to this peer.')
agentBGPPeerInTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInTotalMessages.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInTotalMessages.setDescription('The total number of BGP messages of all types received from this peer.')
agentBGPPeerOutTotalMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutTotalMessages.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutTotalMessages.setDescription('The total number of BGP messages of all types transmitted to this peer.')
agentBGPPeerUpdateQueueLen = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueLen.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueLen.setDescription("After receiving a BGP UPDATE message, BGP places each UPDATE on a per-neighbor queue before processing the UPDATE. This variable gives the current length of this peer's UPDATE queue, in bytes.")
agentBGPPeerUpdateQueueHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueHigh.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueHigh.setDescription('The maximum length (or high water mark) of this peer.s UPDATE queue, in bytes.')
agentBGPPeerUpdateQueueLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueLimit.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueLimit.setDescription('The maximum number of bytes of received UPDATE messages that may be queued for this peer at any given time.')
agentBGPPeerUpdateQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueDrops.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerUpdateQueueDrops.setDescription('The number of UPDATE messages from this peer that could not be added to the UPDATE queue because the queue was full.')
agentBGPPeerInPfxAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInPfxAdv.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInPfxAdv.setDescription('The number of IPv4 prefixes received from this peer.')
agentBGPPeerOutPfxAdv = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutPfxAdv.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutPfxAdv.setDescription('The number of IPv4 prefixes advertised to this peer.')
agentBGPPeerInPfxWithdrawn = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInPfxWithdrawn.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInPfxWithdrawn.setDescription('The number of IPv4 prefixes this peer has withdrawn.')
agentBGPPeerOutPfxWithdrawn = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutPfxWithdrawn.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutPfxWithdrawn.setDescription('The number of IPv4 prefixes this router has withdrawn in UPDATE messages to this peer.')
agentBGPPeerInPfxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInPfxCurrent.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInPfxCurrent.setDescription('The number of IPv4 prefixes this peer is currently advertising to this router and that have passed inbound policy.')
agentBGPPeerOutPfxCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutPfxCurrent.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutPfxCurrent.setDescription('The number of IPv4 prefixes this router is currently advertising to this peer.')
agentBGPPeerInPfxAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInPfxAccepted.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInPfxAccepted.setDescription('The number of IPv4 prefixes received from this peer that may be considered to be included in the BGP route table. This includes all current prefixes whose path does not have an AS path loop and whose BGP NEXT HOP is resolved.')
agentBGPPeerInPfxRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInPfxRejected.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInPfxRejected.setDescription('The number of IPv4 prefixes from this peer that did not pass inbound policy.')
agentBGPPeerInMaxNlriPerUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInMaxNlriPerUpdate.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInMaxNlriPerUpdate.setDescription('The maximum number of IPv4 prefixes in any single UPDATE message from this peer.')
agentBGPPeerOutMaxNlriPerUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutMaxNlriPerUpdate.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutMaxNlriPerUpdate.setDescription('The maximum number of IPv4 prefixes in any single UPDATE message sent to this peer.')
agentBGPPeerInMinNlriPerUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerInMinNlriPerUpdate.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerInMinNlriPerUpdate.setDescription('The minimum number of IPv4 prefixes in any single UPDATE message from this peer.')
agentBGPPeerOutMinNlriPerUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 7244, 2, 5, 4, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBGPPeerOutMinNlriPerUpdate.setStatus('current')
if mibBuilder.loadTexts: agentBGPPeerOutMinNlriPerUpdate.setDescription('The minimum number of IPv4 prefixes in any single UPDATE message sent to this peer.')
mibBuilder.exportSymbols("QUANTA-BGP-MIB", agentBGPDecProcEntry=agentBGPDecProcEntry, agentBGPInRouteRefreshes=agentBGPInRouteRefreshes, agentBGPPeerInPfxAccepted=agentBGPPeerInPfxAccepted, agentBGPPeerOutPfxAdv=agentBGPPeerOutPfxAdv, agentBGPOutOpens=agentBGPOutOpens, agentBGPInUpdates=agentBGPInUpdates, agentBGPOutKeepalives=agentBGPOutKeepalives, agentBGPPeerUpdateQueueHigh=agentBGPPeerUpdateQueueHigh, agentBGPPeerOutPfxCurrent=agentBGPPeerOutPfxCurrent, agentBGPPeerInPfxWithdrawn=agentBGPPeerInPfxWithdrawn, agentBGPPeerInKeepalives=agentBGPPeerInKeepalives, agentBGPOutNotifications=agentBGPOutNotifications, agentBGPPeerOutTotalMessages=agentBGPPeerOutTotalMessages, PYSNMP_MODULE_ID=quantaBGP, agentBGPPeerInPfxCurrent=agentBGPPeerInPfxCurrent, quantaBGP=quantaBGP, agentBGPPeerInRouteRefreshes=agentBGPPeerInRouteRefreshes, agentBGPPeerInMinNlriPerUpdate=agentBGPPeerInMinNlriPerUpdate, agentBGPQueueIndex=agentBGPQueueIndex, agentBGPPeerOutNotifications=agentBGPPeerOutNotifications, agentBGPDecProcPeer=agentBGPDecProcPeer, agentBGPOutUpdatesMax=agentBGPOutUpdatesMax, agentBGPPeerInPfxRejected=agentBGPPeerInPfxRejected, agentBGPOutUpdates=agentBGPOutUpdates, agentBGPDecProcGenId=agentBGPDecProcGenId, agentBGPPeerOutMaxNlriPerUpdate=agentBGPPeerOutMaxNlriPerUpdate, agentBGPPeerOutUpdates=agentBGPPeerOutUpdates, agentBGPInNotifications=agentBGPInNotifications, agentBGPPeerInUpdates=agentBGPPeerInUpdates, agentBGPPeerUpdateQueueLimit=agentBGPPeerUpdateQueueLimit, agentBGPPeerInPfxAdv=agentBGPPeerInPfxAdv, agentBGPQueueEntry=agentBGPQueueEntry, agentBGPQueueLength=agentBGPQueueLength, agentBGPQueueGroup=agentBGPQueueGroup, agentBGPOutRouteRefreshes=agentBGPOutRouteRefreshes, agentBGPCountersCleared=agentBGPCountersCleared, agentBGPInUpdatesMax=agentBGPInUpdatesMax, agentBGPDecProcTable=agentBGPDecProcTable, agentBGPPeerInNotifications=agentBGPPeerInNotifications, agentBGPPeerOutMinNlriPerUpdate=agentBGPPeerOutMinNlriPerUpdate, agentBGPQueueName=agentBGPQueueName, agentBGPDecProcAdds=agentBGPDecProcAdds, agentBGPQueueDrops=agentBGPQueueDrops, agentBGPDecProcIndex=agentBGPDecProcIndex, agentBGPDecProcDuration=agentBGPDecProcDuration, agentBGPPeerInOpens=agentBGPPeerInOpens, agentBGPPeerOutKeepalives=agentBGPPeerOutKeepalives, agentBGPDecProcUpdateGroup=agentBGPDecProcUpdateGroup, agentBGPQueueLimit=agentBGPQueueLimit, agentBGPDecProcDels=agentBGPDecProcDels, agentBGPPeerTable=agentBGPPeerTable, agentBGPQueueTable=agentBGPQueueTable, agentBGPInKeepalives=agentBGPInKeepalives, agentBGPMessageStatsGroup=agentBGPMessageStatsGroup, agentBGPPeerInMaxNlriPerUpdate=agentBGPPeerInMaxNlriPerUpdate, agentBGPDecProcDeltaT=agentBGPDecProcDeltaT, agentBGPPeerOutPfxWithdrawn=agentBGPPeerOutPfxWithdrawn, agentBGPPeerInTotalMessages=agentBGPPeerInTotalMessages, agentBGPInOpens=agentBGPInOpens, agentBGPDecProcReason=agentBGPDecProcReason, agentBGPDecProcMods=agentBGPDecProcMods, agentBGPPeerOutOpens=agentBGPPeerOutOpens, agentBGPPeerUpdateQueueDrops=agentBGPPeerUpdateQueueDrops, agentBGPPeerOutRouteRefreshes=agentBGPPeerOutRouteRefreshes, agentBGPQueueHigh=agentBGPQueueHigh, agentBGPPeerEntry=agentBGPPeerEntry, agentBGPPeerRemoteAddr=agentBGPPeerRemoteAddr, agentBGPDecProcPhase=agentBGPDecProcPhase, agentBGPPeerUpdateQueueLen=agentBGPPeerUpdateQueueLen)
