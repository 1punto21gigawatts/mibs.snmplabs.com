#
# PySNMP MIB module CISCO-TPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-TPC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:14:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
FcNameIdOrZero, = mibBuilder.importSymbols("CISCO-ST-TC", "FcNameIdOrZero")
vsanIndex, = mibBuilder.importSymbols("CISCO-VSAN-MIB", "vsanIndex")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibIdentifier, IpAddress, Counter32, TimeTicks, ModuleIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Gauge32, Counter64, NotificationType, Unsigned32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "IpAddress", "Counter32", "TimeTicks", "ModuleIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Gauge32", "Counter64", "NotificationType", "Unsigned32", "Integer32")
TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "RowStatus")
ciscoTpcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 460))
ciscoTpcMIB.setRevisions(('2005-01-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoTpcMIB.setRevisionsDescriptions(('Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoTpcMIB.setLastUpdated('200501240000Z')
if mibBuilder.loadTexts: ciscoTpcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoTpcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoTpcMIB.setDescription('The MIB module for Third Party Copy(TPC): Third Party Copy derives its name from the fact that there are three entities involved in the process of copying data either for backup operations or restore operations. The three entities: - entity originating the copy commands - data source for the copy - data destination for the copy. The entity originating the copy commands to perform the data transfer can use the SCSI Extended Copy (XCOPY). The TPC feature exposes a disk target with Logical Unit Number(LUN) 0 that is capable of processing the SCSI Extended Copy Command (XCOPY) to transfer data from a specified source to a specified destination. On receiving the XCOPY command, the TPC target performs the actual data transfer from the data source to the data destination on behalf of the entity issuing the XCOPY command. The MIB provides an interface to configure the TPC targets. The user specifies the module and the VSAN on which the TPC feature needs to be configured. Once the feature has been configured target ports are created on the specified module and VSAN that are XCOPY capable. Any application that can source a XCOPY command can use these targets to perform data movement. Acronyms The following acronyms are used in this document: XCOPY: SCSI Extended Copy Command. TPC: Third Party Copy. LUN: Logical Unit Number. VSAN: Virtual Storage Area Network. ')
ciscoTpcNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 460, 0))
ciscoTpcObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 460, 1))
ciscoTpcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 460, 2))
ciscoTpcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1))
class TpcTargetState(TextualConvention, Integer32):
    description = "Represents the state of the TPC target. 'active' - indicates that the TPC target is ready to process XCOPY requests. 'initializing' - indicates that the TPC target is not ready. 'error' - indicates that the TPC target was brought down due to error conditions. "
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("active", 1), ("initializing", 2), ("error", 3))

ctpcModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 1), )
if mibBuilder.loadTexts: ctpcModuleTable.setStatus('current')
if mibBuilder.loadTexts: ctpcModuleTable.setDescription('A table listing the modules on which TPC functionality can be configured by the user. Each such module is identified by ctpcModuleId. The agent creates an entry in this table on detecting a module that can support TPC functionality. Similarly, it will remove the entry when the TPC functionality cannot be supported on this module any longer. The entry in the ctpcVsanTable can only be created on a module present in this table.')
ctpcModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-TPC-MIB", "ctpcModuleId"))
if mibBuilder.loadTexts: ctpcModuleEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcModuleEntry.setDescription('A conceptual row in the ctpcModuleTable. Each row represents a TPC capable module.')
ctpcModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 1, 1, 1), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcModuleId.setStatus('current')
if mibBuilder.loadTexts: ctpcModuleId.setDescription('This object specifies the physical index of the module on which TPC can be configured by the user. This is same as the entPhysicalIndex of the module.')
ctpcVsanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 2), )
if mibBuilder.loadTexts: ctpcVsanTable.setStatus('current')
if mibBuilder.loadTexts: ctpcVsanTable.setDescription("A table listing all the VSANs for which TPC functionality has been configured by the user. The user configures TPC functionality on a per VSAN basis by specifying the module, identified by ctpcModuleId, on which to configure TPC and the VSAN number. An entry can be created in this table only if an entry exists in ctpcModuleTable for this module. If a management application attempts to create a row in this table corresponding to a module that does not exist in ctpcModuleTable table then the agent would respond with an error-status set to 'inconsistentValue'. Once an entry is created, even if this module no longer exists in the ctpcModuleTable, still this entry is not deleted. The entry can only be deleted by setting ctpcVsanRowStatus to 'delete'.")
ctpcVsanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-TPC-MIB", "ctpcModuleId"), (0, "CISCO-VSAN-MIB", "vsanIndex"))
if mibBuilder.loadTexts: ctpcVsanEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcVsanEntry.setDescription('An entry in the TPC VSAN table for each configured VSAN on this module.')
ctpcVsanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 2, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ctpcVsanRowStatus.setStatus('current')
if mibBuilder.loadTexts: ctpcVsanRowStatus.setDescription("This object controls and reflects the status of rows in this table. When the agent successfully creates the entry, this object is set to 'active' by the agent. Deleting an entry from this table, unconfigures the TPC functionality on the module specified by the corresponding instance index 'ctpcModuleId' on the VSAN represented by the corresponding instance index 'vsanIndex' To delete an entry, set this object value to 'destroy'.")
ctpcTargetTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3), )
if mibBuilder.loadTexts: ctpcTargetTable.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetTable.setDescription('A list of all the TPC targets that are configured on this module and on this VSAN. There can be more than one TPC target in the same VSAN on a module. The number of TPC targets is implementation specific. Each TPC target has a unique node world-wide-name, identified by ctpcTargetNodeName and a unique port world-wide-name, identified by ctpcTargetPortName. Each TPC target exposes a single LUN (LUN 0) that is XCOPY capable and is only concerned with moving data in its own VSAN. Once an entry is created in ctpcVsanTable, one or more entries are created in this table by agent. Similarly the entries in this table are deleted when the entry with the same ctpcModuleId and vsanIndex is deleted from the ctpcVsanTable.')
ctpcTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-TPC-MIB", "ctpcModuleId"), (0, "CISCO-VSAN-MIB", "vsanIndex"), (0, "CISCO-TPC-MIB", "ctpcTargetIndex"))
if mibBuilder.loadTexts: ctpcTargetEntry.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetEntry.setDescription('An entry in the TPC target table for each TPC target in this VSAN on this module.')
ctpcTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ctpcTargetIndex.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetIndex.setDescription('The unique id number associated with the TPC target. This id number is unique within the vsan in which the TPC target is configured.')
ctpcTargetNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 2), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetNodeName.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetNodeName.setDescription("The TPC target's node world-wide-name.")
ctpcTargetPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 3), FcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetPortName.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetPortName.setDescription("The TPC target's port world-wide-name.")
ctpcTargetState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 4), TpcTargetState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetState.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetState.setDescription('The current state of the TPC target')
ctpcTargetNumXcopies = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 5), Counter32()).setUnits('commands').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetNumXcopies.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetNumXcopies.setDescription('The total number of XCOPY commands processed by the TPC target since the module on which this target has been configured has been online')
ctpcTargetMinXcopy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 6), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetMinXcopy.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetMinXcopy.setDescription('The smallest amount of data in Kilobytes transferred by the TPC target in a single xcopy command since the module on which this target has been configured has been online.')
ctpcTargetMaxXcopy = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 7), Gauge32()).setUnits('Kilobytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetMaxXcopy.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetMaxXcopy.setDescription('The largest amount of data in Kilobytes transferred by the TPC target in a single xcopy command since the module on which this target has been configured has been online.')
ctpcTargetAvgKbPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 460, 1, 1, 3, 1, 8), Gauge32()).setUnits('Kilobytes/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ctpcTargetAvgKbPerSec.setStatus('current')
if mibBuilder.loadTexts: ctpcTargetAvgKbPerSec.setDescription('The average kilobytes per second throughput of the TPC target in processing the XCOPY commands.')
ctpcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 460, 2, 1))
ctpcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 460, 2, 2))
ctpcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 460, 2, 1, 1)).setObjects(("CISCO-TPC-MIB", "ctpcVsanTargetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctpcMIBCompliance = ctpcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ctpcMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-TPC-MIB mib.')
ctpcVsanTargetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 460, 2, 2, 1)).setObjects(("CISCO-TPC-MIB", "ctpcModuleId"), ("CISCO-TPC-MIB", "ctpcVsanRowStatus"), ("CISCO-TPC-MIB", "ctpcTargetNodeName"), ("CISCO-TPC-MIB", "ctpcTargetPortName"), ("CISCO-TPC-MIB", "ctpcTargetState"), ("CISCO-TPC-MIB", "ctpcTargetNumXcopies"), ("CISCO-TPC-MIB", "ctpcTargetMinXcopy"), ("CISCO-TPC-MIB", "ctpcTargetMaxXcopy"), ("CISCO-TPC-MIB", "ctpcTargetAvgKbPerSec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ctpcVsanTargetGroup = ctpcVsanTargetGroup.setStatus('current')
if mibBuilder.loadTexts: ctpcVsanTargetGroup.setDescription('A collection of objects for displaying and configuring the TPC target.')
mibBuilder.exportSymbols("CISCO-TPC-MIB", ciscoTpcMIB=ciscoTpcMIB, ctpcTargetEntry=ctpcTargetEntry, ctpcMIBCompliance=ctpcMIBCompliance, ctpcVsanRowStatus=ctpcVsanRowStatus, ciscoTpcMIBConformance=ciscoTpcMIBConformance, ctpcVsanTargetGroup=ctpcVsanTargetGroup, ciscoTpcObjects=ciscoTpcObjects, ctpcTargetAvgKbPerSec=ctpcTargetAvgKbPerSec, ctpcVsanEntry=ctpcVsanEntry, ctpcTargetState=ctpcTargetState, ctpcTargetMinXcopy=ctpcTargetMinXcopy, ctpcMIBCompliances=ctpcMIBCompliances, TpcTargetState=TpcTargetState, PYSNMP_MODULE_ID=ciscoTpcMIB, ctpcTargetIndex=ctpcTargetIndex, ctpcTargetTable=ctpcTargetTable, ctpcModuleId=ctpcModuleId, ctpcModuleTable=ctpcModuleTable, ctpcTargetNodeName=ctpcTargetNodeName, ciscoTpcNotification=ciscoTpcNotification, ctpcMIBGroups=ctpcMIBGroups, ctpcTargetMaxXcopy=ctpcTargetMaxXcopy, ctpcTargetPortName=ctpcTargetPortName, ctpcTargetNumXcopies=ctpcTargetNumXcopies, ctpcModuleEntry=ctpcModuleEntry, ctpcVsanTable=ctpcVsanTable, ciscoTpcConfig=ciscoTpcConfig)
