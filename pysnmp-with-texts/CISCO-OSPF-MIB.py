#
# PySNMP MIB module CISCO-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-OSPF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:08:58 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
PositiveInteger, ospfVirtIfEntry, ospfLsdbRouterId, UpToMaxAge, Metric, HelloRange, AreaID, ospfAreaEntry, ospfLsdbAreaId, RouterID, ospfLsdbLsid, ospfIfEntry = mibBuilder.importSymbols("OSPF-MIB", "PositiveInteger", "ospfVirtIfEntry", "ospfLsdbRouterId", "UpToMaxAge", "Metric", "HelloRange", "AreaID", "ospfAreaEntry", "ospfLsdbAreaId", "RouterID", "ospfLsdbLsid", "ospfIfEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
TimeTicks, IpAddress, Unsigned32, Counter64, Counter32, ModuleIdentity, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Integer32, MibIdentifier, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "Unsigned32", "Counter64", "Counter32", "ModuleIdentity", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Integer32", "MibIdentifier", "NotificationType", "ObjectIdentity")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
cospf = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 99))
cospf.setRevisions(('2003-07-18 00:00', '2003-01-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cospf.setRevisionsDescriptions(('+Deprecated cospfShamLinkTable. +Added cospfShamLinksTable. +Added cospfShamLinkNbrTable. +Fixed indentation and spelling.', 'Initial version of the MIB module.',))
if mibBuilder.loadTexts: cospf.setLastUpdated('200307180000Z')
if mibBuilder.loadTexts: cospf.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: cospf.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ospf@cisco.com')
if mibBuilder.loadTexts: cospf.setDescription('An extension to the MIB module defined in RFC 1850 for managing OSPF implimentation. Most of the MIB definitions are based on the IETF draft < draft-ietf-ospf-mib-update-05.txt > . Support for OSPF Sham link is also added')
cospfGeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99, 1))
cospfRFC1583Compatibility = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 99, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfRFC1583Compatibility.setReference('OSPF Version 2, Section 16.4.1 External path preferences')
if mibBuilder.loadTexts: cospfRFC1583Compatibility.setStatus('current')
if mibBuilder.loadTexts: cospfRFC1583Compatibility.setDescription('Indicates metrics used to choose among multiple AS- external-LSAs. When cospfRFC1583Compatibility is set to enabled, only cost will be used when choosing among multiple AS-external-LSAs advertising the same destination. When cospfRFC1583Compatibility is set to disabled, preference will be driven first by type of path using cost only to break ties.')
cospfOpaqueLsaSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 99, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfOpaqueLsaSupport.setReference('The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: cospfOpaqueLsaSupport.setStatus('current')
if mibBuilder.loadTexts: cospfOpaqueLsaSupport.setDescription("The router's support for Opaque LSA types.")
cospfTrafficEngineeringSupport = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 99, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfTrafficEngineeringSupport.setStatus('current')
if mibBuilder.loadTexts: cospfTrafficEngineeringSupport.setDescription("The router's support for OSPF traffic engineering.")
cospfOpaqueASLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 99, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfOpaqueASLsaCount.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfOpaqueASLsaCount.setStatus('current')
if mibBuilder.loadTexts: cospfOpaqueASLsaCount.setDescription('The total number of Opaque AS link-state advertisements in the link state database.')
cospfOpaqueASLsaCksumSum = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 99, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfOpaqueASLsaCksumSum.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfOpaqueASLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cospfOpaqueASLsaCksumSum.setDescription("The 32-bit unsigned sum of the Opaque AS link-state advertisements' LS checksums contained link state database.")
cospfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 2), )
if mibBuilder.loadTexts: cospfAreaTable.setReference('OSPF Version 2, Section 6 The Area Data Structure')
if mibBuilder.loadTexts: cospfAreaTable.setStatus('current')
if mibBuilder.loadTexts: cospfAreaTable.setDescription("Information describing the configured parameters and cumulative statistics of the router's attached areas.")
cospfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 2, 1), )
ospfAreaEntry.registerAugmentions(("CISCO-OSPF-MIB", "cospfAreaEntry"))
cospfAreaEntry.setIndexNames(*ospfAreaEntry.getIndexNames())
if mibBuilder.loadTexts: cospfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: cospfAreaEntry.setDescription("Information describing the configured parameters and cumulative statistics of one of the router's attached areas.")
cospfOpaqueAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfOpaqueAreaLsaCount.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfOpaqueAreaLsaCount.setStatus('current')
if mibBuilder.loadTexts: cospfOpaqueAreaLsaCount.setDescription('The total number of Opaque Area and AS link-state advertisements in the link state database of this area.')
cospfOpaqueAreaLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfOpaqueAreaLsaCksumSum.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfOpaqueAreaLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cospfOpaqueAreaLsaCksumSum.setDescription("The 32-bit unsigned sum of the Opaque Area and AS link-state advertisements' LS checksums contained link state database of this area. The sum can be used to determine if there has been a change in the link state database for Opaque Area and AS link-state advertisements")
cospfAreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("candidate", 2))).clone('candidate')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfAreaNssaTranslatorRole.setStatus('current')
if mibBuilder.loadTexts: cospfAreaNssaTranslatorRole.setDescription("Indicates an NSSA Border router's ability to perform NSSA translation of type-7 LSAs into type-5 LSAs.")
cospfAreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("elected", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfAreaNssaTranslatorState.setStatus('current')
if mibBuilder.loadTexts: cospfAreaNssaTranslatorState.setDescription("Indicates if and how an NSSA Border router is performing NSSA translation of type-7 LSAs into type-5 LSAs. When this object set to enabled, the NSSA Border router's cospfAreaNssaExtTranslatorRole has been set to always. When this object is set to elected, a candidate NSSA Border router is Translating type-7 LSAs into type-5. When this object is set to disabled, a candidate NSSA Border router is NOT translating type-7 LSAs into type-5.")
cospfAreaNssaTranslatorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfAreaNssaTranslatorEvents.setStatus('current')
if mibBuilder.loadTexts: cospfAreaNssaTranslatorEvents.setDescription('Indicates the number of Translator State changes that have occurred since the last boot-up.')
cospfLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 3), )
if mibBuilder.loadTexts: cospfLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: cospfLsdbTable.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbTable.setDescription("The OSPF Process's Link State Database. This table is meant for Opaque LSA's")
cospfLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 3, 1), ).setIndexNames((0, "OSPF-MIB", "ospfLsdbAreaId"), (0, "CISCO-OSPF-MIB", "cospfLsdbType"), (0, "OSPF-MIB", "ospfLsdbLsid"), (0, "OSPF-MIB", "ospfLsdbRouterId"))
if mibBuilder.loadTexts: cospfLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbEntry.setDescription('A single Link State Advertisement.')
cospfLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(10, 11))).clone(namedValues=NamedValues(("areaOpaqueLink", 10), ("asOpaqueLink", 11))))
if mibBuilder.loadTexts: cospfLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfLsdbType.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
cospfLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: cospfLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
cospfLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: cospfLsdbAge.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
cospfLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: cospfLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
cospfLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Adverisements')
if mibBuilder.loadTexts: cospfLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
cospfIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 4), )
if mibBuilder.loadTexts: cospfIfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: cospfIfTable.setStatus('current')
if mibBuilder.loadTexts: cospfIfTable.setDescription('The OSPF Interface Table describes the inter- faces from the viewpoint of OSPF.')
cospfIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 4, 1), )
ospfIfEntry.registerAugmentions(("CISCO-OSPF-MIB", "cospfIfEntry"))
cospfIfEntry.setIndexNames(*ospfIfEntry.getIndexNames())
if mibBuilder.loadTexts: cospfIfEntry.setStatus('current')
if mibBuilder.loadTexts: cospfIfEntry.setDescription('The OSPF Interface Entry describes one inter- face from the viewpoint of OSPF.')
cospfIfLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfIfLsaCount.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfIfLsaCount.setStatus('current')
if mibBuilder.loadTexts: cospfIfLsaCount.setDescription("The total number of link-local link state advertisements in this interface's link-local link state database.")
cospfIfLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfIfLsaCksumSum.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfIfLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cospfIfLsaCksumSum.setDescription("The 32-bit unsigned sum of the link-state advertisements' LS checksums contained in this interface's link-local link state database. The sum can be used to determine if there has been a change in the interface's link state database, and to compare the interface link-state database of routers attached to the same subnet.")
cospfVirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 5), )
if mibBuilder.loadTexts: cospfVirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: cospfVirtIfTable.setStatus('current')
if mibBuilder.loadTexts: cospfVirtIfTable.setDescription("Information about this router's virtual inter- faces.")
cospfVirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 5, 1), )
ospfVirtIfEntry.registerAugmentions(("CISCO-OSPF-MIB", "cospfVirtIfEntry"))
cospfVirtIfEntry.setIndexNames(*ospfVirtIfEntry.getIndexNames())
if mibBuilder.loadTexts: cospfVirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: cospfVirtIfEntry.setDescription('Information about a single Virtual Interface.')
cospfVirtIfLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 5, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfVirtIfLsaCount.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfVirtIfLsaCount.setStatus('current')
if mibBuilder.loadTexts: cospfVirtIfLsaCount.setDescription("The total number of link-local link state advertisements in this virtual interface's link-local link state database.")
cospfVirtIfLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfVirtIfLsaCksumSum.setReference('The OSPF Opaque LSA Option (RFC 2370)')
if mibBuilder.loadTexts: cospfVirtIfLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: cospfVirtIfLsaCksumSum.setDescription("The 32-bit unsigned sum of the link-state advertisements' LS checksums contained in this virtual interface's link-local link state database. The sum can be used to determine if there has been a change in the virtual interface's link state database, and to compare the virtual interface link-state database of the virtual neighbors.")
cospfShamLinkTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 6), )
if mibBuilder.loadTexts: cospfShamLinkTable.setReference('IETF draft draft-rosen-vpns-ospf-bgp-mpls-05.txt')
if mibBuilder.loadTexts: cospfShamLinkTable.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkTable.setDescription("Information about this router's sham links")
cospfShamLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1), ).setIndexNames((0, "CISCO-OSPF-MIB", "cospfShamLinkAreaId"), (0, "CISCO-OSPF-MIB", "cospfShamLinkLocalIpAddress"), (0, "CISCO-OSPF-MIB", "cospfShamLinkNeighborId"))
if mibBuilder.loadTexts: cospfShamLinkEntry.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkEntry.setDescription('Information about a single sham link')
cospfShamLinkAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 1), AreaID())
if mibBuilder.loadTexts: cospfShamLinkAreaId.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
cospfShamLinkLocalIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: cospfShamLinkLocalIpAddress.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkLocalIpAddress.setDescription('The Local IP address of the sham link.')
cospfShamLinkNeighborId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 3), RouterID())
if mibBuilder.loadTexts: cospfShamLinkNeighborId.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkNeighborId.setDescription('The Router ID of the other end router of the sham link.')
cospfShamLinkRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 4), UpToMaxAge().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkRetransInterval.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkRetransInterval.setDescription('The number of seconds between link-state advertisement retransmissions, for adjacencies belonging to this link. This value is also used when retransmitting database description and link-state request packets. This value should be well over the expected round trip time.')
cospfShamLinkHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 5), HelloRange().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkHelloInterval.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the sham link.')
cospfShamLinkRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 6), PositiveInteger().clone(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkRtrDeadInterval.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neighbors declare the router down. This should be some multiple of the Hello interval.")
cospfShamLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkState.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkState.setDescription('OSPF sham link states.')
cospfShamLinkEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkEvents.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkEvents.setDescription('The number of state changes or error events on this sham link')
cospfShamLinkMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 6, 1, 9), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkMetric.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkMetric.setDescription('The Metric to be advertised.')
cospfShamLinksTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 11), )
if mibBuilder.loadTexts: cospfShamLinksTable.setReference('IETF draft draft-rosen-vpns-ospf-bgp-mpls-05.txt')
if mibBuilder.loadTexts: cospfShamLinksTable.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksTable.setDescription("Information about this router's sham links.")
cospfShamLinksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1), ).setIndexNames((0, "CISCO-OSPF-MIB", "cospfShamLinksAreaId"), (0, "CISCO-OSPF-MIB", "cospfShamLinksLocalIpAddrType"), (0, "CISCO-OSPF-MIB", "cospfShamLinksLocalIpAddr"), (0, "CISCO-OSPF-MIB", "cospfShamLinksRemoteIpAddrType"), (0, "CISCO-OSPF-MIB", "cospfShamLinksRemoteIpAddr"))
if mibBuilder.loadTexts: cospfShamLinksEntry.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksEntry.setDescription('Information about a single sham link.')
cospfShamLinksAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 1), AreaID())
if mibBuilder.loadTexts: cospfShamLinksAreaId.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksAreaId.setDescription('The area that this sham link is part of.')
cospfShamLinksLocalIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cospfShamLinksLocalIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksLocalIpAddrType.setDescription("The type of internet address of this sham link's local IP address.")
cospfShamLinksLocalIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 3), InetAddress())
if mibBuilder.loadTexts: cospfShamLinksLocalIpAddr.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksLocalIpAddr.setDescription('The Local IP address of the sham link.')
cospfShamLinksRemoteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 4), InetAddressType())
if mibBuilder.loadTexts: cospfShamLinksRemoteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksRemoteIpAddrType.setDescription("The type of internet address of this sham link's remote IP address.")
cospfShamLinksRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 5), InetAddress())
if mibBuilder.loadTexts: cospfShamLinksRemoteIpAddr.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksRemoteIpAddr.setDescription('The IP address of the other end router of the sham link.')
cospfShamLinksRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 6), UpToMaxAge().clone(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinksRetransInterval.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksRetransInterval.setDescription('The number of seconds between link-state advertisement retransmissions, for adjacencies belonging to this link. This value is also used when retransmitting database description and link-state request packets. This value should be well over the expected round trip time.')
cospfShamLinksHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 7), HelloRange().clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinksHelloInterval.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the sham link.')
cospfShamLinksRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 8), PositiveInteger().clone(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinksRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before it's neighbors declare the router down. This should be some multiple of the Hello interval.")
cospfShamLinksState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4))).clone('down')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinksState.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksState.setDescription('OSPF sham link states.')
cospfShamLinksEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinksEvents.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksEvents.setDescription('The number of state changes or error events on this sham link')
cospfShamLinksMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 11, 1, 11), Metric()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinksMetric.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksMetric.setDescription('The Metric to be advertised.')
cospfShamLinkNbrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 10), )
if mibBuilder.loadTexts: cospfShamLinkNbrTable.setReference('IETF draft draft-rosen-vpns-ospf-bgp-mpls-05.txt')
if mibBuilder.loadTexts: cospfShamLinkNbrTable.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrTable.setDescription('A table of sham link neighbor information.')
cospfShamLinkNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1), ).setIndexNames((0, "CISCO-OSPF-MIB", "cospfShamLinksLocalIpAddrType"), (0, "CISCO-OSPF-MIB", "cospfShamLinksLocalIpAddr"), (0, "CISCO-OSPF-MIB", "cospfShamLinkNbrArea"), (0, "CISCO-OSPF-MIB", "cospfShamLinkNbrIpAddrType"), (0, "CISCO-OSPF-MIB", "cospfShamLinkNbrIpAddr"))
if mibBuilder.loadTexts: cospfShamLinkNbrEntry.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrEntry.setDescription('Sham link neighbor information.')
cospfShamLinkNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 1), AreaID())
if mibBuilder.loadTexts: cospfShamLinkNbrArea.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrArea.setDescription('The area to which the sham link is part of.')
cospfShamLinkNbrIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 2), InetAddressType())
if mibBuilder.loadTexts: cospfShamLinkNbrIpAddrType.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrIpAddrType.setDescription("The type of internet address of this sham link neighbor's IP address.")
cospfShamLinkNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 3), InetAddress())
if mibBuilder.loadTexts: cospfShamLinkNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrIpAddr.setDescription('The IP address this sham link neighbor is using.')
cospfShamLinkNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 4), RouterID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrRtrId.setDescription('A 32-bit integer uniquely identifying the neighboring router.')
cospfShamLinkNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkNbrOptions.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's options field. Bit 1, if set, indicates that the system will operate on Type of Service metrics other than TOS 0. If zero, the neighbor will ignore all metrics except the TOS 0 metric. Bit 2, if set, indicates that the system is Network Multicast capable; ie, that it implements OSPF Multicast Routing.")
cospfShamLinkNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkNbrState.setReference('OSPF Version 2, Section 10.1 Neighbor states.')
if mibBuilder.loadTexts: cospfShamLinkNbrState.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrState.setDescription('The state of this sham link neighbor relation- ship.')
cospfShamLinkNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkNbrEvents.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrEvents.setDescription('The number of times this sham link has changed state or an error has occurred.')
cospfShamLinkNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkNbrLsRetransQLen.setReference('OSPF Version 2, Section 13.6 Retransmitting LSAs.')
if mibBuilder.loadTexts: cospfShamLinkNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrLsRetransQLen.setDescription('The current length of the retransmission queue. The retransmission queue is maintained for LSAs that have been flooded but not acknowledged on this adjacency.')
cospfShamLinkNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 10, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfShamLinkNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor.')
cospfLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 7), )
if mibBuilder.loadTexts: cospfLocalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements and The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: cospfLocalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbTable.setDescription("The OSPF Process's Link-Local Link State Database for non-virtual links.")
cospfLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1), ).setIndexNames((0, "CISCO-OSPF-MIB", "cospfLocalLsdbIpAddress"), (0, "CISCO-OSPF-MIB", "cospfLocalLsdbAddressLessIf"), (0, "CISCO-OSPF-MIB", "cospfLocalLsdbType"), (0, "CISCO-OSPF-MIB", "cospfLocalLsdbLsid"), (0, "CISCO-OSPF-MIB", "cospfLocalLsdbRouterId"))
if mibBuilder.loadTexts: cospfLocalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbEntry.setDescription('A single Link State Advertisement.')
cospfLocalLsdbIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 1), IpAddress())
if mibBuilder.loadTexts: cospfLocalLsdbIpAddress.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: cospfLocalLsdbIpAddress.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbIpAddress.setDescription('The IP Address of the interface from which the LSA was received if the interface is numbered.')
cospfLocalLsdbAddressLessIf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 2), InterfaceIndexOrZero())
if mibBuilder.loadTexts: cospfLocalLsdbAddressLessIf.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: cospfLocalLsdbAddressLessIf.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbAddressLessIf.setDescription('The Interface Index of the interface from which the LSA was received if the interface is unnumbered.')
cospfLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9))))
if mibBuilder.loadTexts: cospfLocalLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header and ')
if mibBuilder.loadTexts: cospfLocalLsdbType.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
cospfLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 4), IpAddress())
if mibBuilder.loadTexts: cospfLocalLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: cospfLocalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing a 32 bit identifier in IP address format; it identifies the piece of the routing domain that is being described by the advertisement.')
cospfLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 5), RouterID())
if mibBuilder.loadTexts: cospfLocalLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: cospfLocalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
cospfLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLocalLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: cospfLocalLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
cospfLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLocalLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: cospfLocalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
cospfLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLocalLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: cospfLocalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
cospfLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 7, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfLocalLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: cospfLocalLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
cospfVirtLocalLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 99, 8), )
if mibBuilder.loadTexts: cospfVirtLocalLsdbTable.setReference('OSPF Version 2, Section 12 Link State Advertisements and The OSPF Opaque LSA Option')
if mibBuilder.loadTexts: cospfVirtLocalLsdbTable.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbTable.setDescription("The OSPF Process's Link-Local Link State Database for virtual links.")
cospfVirtLocalLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1), ).setIndexNames((0, "CISCO-OSPF-MIB", "cospfVirtLocalLsdbTransitArea"), (0, "CISCO-OSPF-MIB", "cospfVirtLocalLsdbNeighbor"), (0, "CISCO-OSPF-MIB", "cospfVirtLocalLsdbType"), (0, "CISCO-OSPF-MIB", "cospfVirtLocalLsdbLsid"), (0, "CISCO-OSPF-MIB", "cospfVirtLocalLsdbRouterId"))
if mibBuilder.loadTexts: cospfVirtLocalLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbEntry.setDescription('A single Link State Advertisement.')
cospfVirtLocalLsdbTransitArea = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 1), AreaID())
if mibBuilder.loadTexts: cospfVirtLocalLsdbTransitArea.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: cospfVirtLocalLsdbTransitArea.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbTransitArea.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not 0.0.0.0')
cospfVirtLocalLsdbNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 2), RouterID())
if mibBuilder.loadTexts: cospfVirtLocalLsdbNeighbor.setReference('OSPF Version 2, Appendix C.3 Interface parameters')
if mibBuilder.loadTexts: cospfVirtLocalLsdbNeighbor.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
cospfVirtLocalLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9))).clone(namedValues=NamedValues(("localOpaqueLink", 9))))
if mibBuilder.loadTexts: cospfVirtLocalLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header and ')
if mibBuilder.loadTexts: cospfVirtLocalLsdbType.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format.')
cospfVirtLocalLsdbLsid = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 4), IpAddress())
if mibBuilder.loadTexts: cospfVirtLocalLsdbLsid.setReference('OSPF Version 2, Section 12.1.4 Link State ID')
if mibBuilder.loadTexts: cospfVirtLocalLsdbLsid.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbLsid.setDescription('The Link State ID is an LS Type Specific field containing a 32 bit identifier in IP address format; it identifies the piece of the routing domain that is being described by the advertisement.')
cospfVirtLocalLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 5), RouterID())
if mibBuilder.loadTexts: cospfVirtLocalLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: cospfVirtLocalLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
cospfVirtLocalLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfVirtLocalLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: cospfVirtLocalLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
cospfVirtLocalLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfVirtLocalLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: cospfVirtLocalLsdbAge.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
cospfVirtLocalLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfVirtLocalLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: cospfVirtLocalLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
cospfVirtLocalLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 99, 8, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cospfVirtLocalLsdbAdvertisement.setReference('OSPF Version 2, Section 12 Link State Advertisements')
if mibBuilder.loadTexts: cospfVirtLocalLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
cospfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99, 9))
cospfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1))
cospfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 2))
cospfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 2, 1)).setObjects(("CISCO-OSPF-MIB", "cospfBasicGroup"), ("CISCO-OSPF-MIB", "cospfAreaGroup"), ("CISCO-OSPF-MIB", "cospfIfGroup"), ("CISCO-OSPF-MIB", "cospfVirtIfGroup"), ("CISCO-OSPF-MIB", "cospfShamLinkGroup"), ("CISCO-OSPF-MIB", "cospfLsdbGroup"), ("CISCO-OSPF-MIB", "cospfLocalLsdbGroup"), ("CISCO-OSPF-MIB", "cospfVirtLocalLsdbGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfCompliance = cospfCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cospfCompliance.setDescription('The compliance statements for agents that support the Cisco OSPF MIB. These compliance statements are deprecated by cospfComplianceRev1.')
cospfComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 2, 2)).setObjects(("CISCO-OSPF-MIB", "cospfBasicGroup"), ("CISCO-OSPF-MIB", "cospfAreaGroup"), ("CISCO-OSPF-MIB", "cospfIfGroup"), ("CISCO-OSPF-MIB", "cospfVirtIfGroup"), ("CISCO-OSPF-MIB", "cospfShamLinksGroup"), ("CISCO-OSPF-MIB", "cospfShamLinkNbrGroup"), ("CISCO-OSPF-MIB", "cospfLsdbGroup"), ("CISCO-OSPF-MIB", "cospfLocalLsdbGroup"), ("CISCO-OSPF-MIB", "cospfVirtLocalLsdbGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfComplianceRev1 = cospfComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cospfComplianceRev1.setDescription('The compliance statements for agents that support the Cisco OSPF MIB.')
cospfLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 1)).setObjects(("CISCO-OSPF-MIB", "cospfLsdbSequence"), ("CISCO-OSPF-MIB", "cospfLsdbAge"), ("CISCO-OSPF-MIB", "cospfLsdbChecksum"), ("CISCO-OSPF-MIB", "cospfLsdbAdvertisement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfLsdbGroup = cospfLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: cospfLsdbGroup.setDescription('These objects are required for OSPF systems that display their link state database.')
cospfLocalLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 2)).setObjects(("CISCO-OSPF-MIB", "cospfLocalLsdbSequence"), ("CISCO-OSPF-MIB", "cospfLocalLsdbAge"), ("CISCO-OSPF-MIB", "cospfLocalLsdbChecksum"), ("CISCO-OSPF-MIB", "cospfLocalLsdbAdvertisement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfLocalLsdbGroup = cospfLocalLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: cospfLocalLsdbGroup.setDescription('These objects are required for OSPF systems that display their Link-Local link state databases for non-virtual links.')
cospfVirtLocalLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 3)).setObjects(("CISCO-OSPF-MIB", "cospfVirtLocalLsdbSequence"), ("CISCO-OSPF-MIB", "cospfVirtLocalLsdbAge"), ("CISCO-OSPF-MIB", "cospfVirtLocalLsdbChecksum"), ("CISCO-OSPF-MIB", "cospfVirtLocalLsdbAdvertisement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfVirtLocalLsdbGroup = cospfVirtLocalLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: cospfVirtLocalLsdbGroup.setDescription('These objects are required for OSPF systems that display their Link-Local link state databases for virtual links.')
cospfBasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 4)).setObjects(("CISCO-OSPF-MIB", "cospfRFC1583Compatibility"), ("CISCO-OSPF-MIB", "cospfOpaqueLsaSupport"), ("CISCO-OSPF-MIB", "cospfTrafficEngineeringSupport"), ("CISCO-OSPF-MIB", "cospfOpaqueASLsaCount"), ("CISCO-OSPF-MIB", "cospfOpaqueASLsaCksumSum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfBasicGroup = cospfBasicGroup.setStatus('current')
if mibBuilder.loadTexts: cospfBasicGroup.setDescription('These objects are required for OSPF systems.')
cospfAreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 5)).setObjects(("CISCO-OSPF-MIB", "cospfOpaqueAreaLsaCount"), ("CISCO-OSPF-MIB", "cospfOpaqueAreaLsaCksumSum"), ("CISCO-OSPF-MIB", "cospfAreaNssaTranslatorRole"), ("CISCO-OSPF-MIB", "cospfAreaNssaTranslatorState"), ("CISCO-OSPF-MIB", "cospfAreaNssaTranslatorEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfAreaGroup = cospfAreaGroup.setStatus('current')
if mibBuilder.loadTexts: cospfAreaGroup.setDescription('These objects are required for OSPF systems supporting areas. This statement is recommended for use. ')
cospfIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 6)).setObjects(("CISCO-OSPF-MIB", "cospfIfLsaCount"), ("CISCO-OSPF-MIB", "cospfIfLsaCksumSum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfIfGroup = cospfIfGroup.setStatus('current')
if mibBuilder.loadTexts: cospfIfGroup.setDescription('These objects are required for OSPF systems.')
cospfVirtIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 7)).setObjects(("CISCO-OSPF-MIB", "cospfVirtIfLsaCount"), ("CISCO-OSPF-MIB", "cospfVirtIfLsaCksumSum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfVirtIfGroup = cospfVirtIfGroup.setStatus('current')
if mibBuilder.loadTexts: cospfVirtIfGroup.setDescription('These objects are required for OSPF systems.')
cospfShamLinkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 8)).setObjects(("CISCO-OSPF-MIB", "cospfShamLinkRetransInterval"), ("CISCO-OSPF-MIB", "cospfShamLinkHelloInterval"), ("CISCO-OSPF-MIB", "cospfShamLinkRtrDeadInterval"), ("CISCO-OSPF-MIB", "cospfShamLinkState"), ("CISCO-OSPF-MIB", "cospfShamLinkEvents"), ("CISCO-OSPF-MIB", "cospfShamLinkMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfShamLinkGroup = cospfShamLinkGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cospfShamLinkGroup.setDescription('These objects are required for OSPF systems.')
cospfShamLinkNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 9)).setObjects(("CISCO-OSPF-MIB", "cospfShamLinkNbrRtrId"), ("CISCO-OSPF-MIB", "cospfShamLinkNbrOptions"), ("CISCO-OSPF-MIB", "cospfShamLinkNbrState"), ("CISCO-OSPF-MIB", "cospfShamLinkNbrEvents"), ("CISCO-OSPF-MIB", "cospfShamLinkNbrLsRetransQLen"), ("CISCO-OSPF-MIB", "cospfShamLinkNbrHelloSuppressed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfShamLinkNbrGroup = cospfShamLinkNbrGroup.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinkNbrGroup.setDescription('These objects are required for OSPF systems.')
cospfShamLinksGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 99, 9, 1, 10)).setObjects(("CISCO-OSPF-MIB", "cospfShamLinksRetransInterval"), ("CISCO-OSPF-MIB", "cospfShamLinksHelloInterval"), ("CISCO-OSPF-MIB", "cospfShamLinksRtrDeadInterval"), ("CISCO-OSPF-MIB", "cospfShamLinksState"), ("CISCO-OSPF-MIB", "cospfShamLinksEvents"), ("CISCO-OSPF-MIB", "cospfShamLinksMetric"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cospfShamLinksGroup = cospfShamLinksGroup.setStatus('current')
if mibBuilder.loadTexts: cospfShamLinksGroup.setDescription('These objects are required for OSPF systems.')
mibBuilder.exportSymbols("CISCO-OSPF-MIB", cospfShamLinksGroup=cospfShamLinksGroup, cospfVirtLocalLsdbSequence=cospfVirtLocalLsdbSequence, cospfAreaNssaTranslatorState=cospfAreaNssaTranslatorState, cospfLocalLsdbAdvertisement=cospfLocalLsdbAdvertisement, cospfShamLinkMetric=cospfShamLinkMetric, cospfLocalLsdbLsid=cospfLocalLsdbLsid, cospfShamLinksEvents=cospfShamLinksEvents, cospfAreaGroup=cospfAreaGroup, cospfLsdbChecksum=cospfLsdbChecksum, cospfVirtLocalLsdbNeighbor=cospfVirtLocalLsdbNeighbor, cospfIfLsaCksumSum=cospfIfLsaCksumSum, cospfCompliance=cospfCompliance, cospfShamLinkRtrDeadInterval=cospfShamLinkRtrDeadInterval, cospfRFC1583Compatibility=cospfRFC1583Compatibility, cospfVirtLocalLsdbTable=cospfVirtLocalLsdbTable, cospfShamLinksLocalIpAddrType=cospfShamLinksLocalIpAddrType, PYSNMP_MODULE_ID=cospf, cospfShamLinkState=cospfShamLinkState, cospfOpaqueASLsaCksumSum=cospfOpaqueASLsaCksumSum, cospfShamLinkNbrState=cospfShamLinkNbrState, cospfVirtLocalLsdbType=cospfVirtLocalLsdbType, cospfVirtLocalLsdbAge=cospfVirtLocalLsdbAge, cospfShamLinkEvents=cospfShamLinkEvents, cospfLocalLsdbRouterId=cospfLocalLsdbRouterId, cospfLsdbTable=cospfLsdbTable, cospfShamLinksAreaId=cospfShamLinksAreaId, cospfLsdbSequence=cospfLsdbSequence, cospfVirtLocalLsdbLsid=cospfVirtLocalLsdbLsid, cospfCompliances=cospfCompliances, cospfConformance=cospfConformance, cospfShamLinkNbrOptions=cospfShamLinkNbrOptions, cospfShamLinkNbrIpAddr=cospfShamLinkNbrIpAddr, cospfGeneralGroup=cospfGeneralGroup, cospfIfLsaCount=cospfIfLsaCount, cospfShamLinkNbrHelloSuppressed=cospfShamLinkNbrHelloSuppressed, cospfShamLinkNeighborId=cospfShamLinkNeighborId, cospfShamLinkNbrIpAddrType=cospfShamLinkNbrIpAddrType, cospfShamLinksRetransInterval=cospfShamLinksRetransInterval, cospfShamLinksEntry=cospfShamLinksEntry, cospfVirtLocalLsdbAdvertisement=cospfVirtLocalLsdbAdvertisement, cospfIfEntry=cospfIfEntry, cospfShamLinkLocalIpAddress=cospfShamLinkLocalIpAddress, cospfLsdbAge=cospfLsdbAge, cospfOpaqueAreaLsaCksumSum=cospfOpaqueAreaLsaCksumSum, cospfShamLinkNbrTable=cospfShamLinkNbrTable, cospfShamLinkEntry=cospfShamLinkEntry, cospfLocalLsdbChecksum=cospfLocalLsdbChecksum, cospfLsdbAdvertisement=cospfLsdbAdvertisement, cospfGroups=cospfGroups, cospfShamLinksLocalIpAddr=cospfShamLinksLocalIpAddr, cospfShamLinksRtrDeadInterval=cospfShamLinksRtrDeadInterval, cospfLocalLsdbAge=cospfLocalLsdbAge, cospfLsdbGroup=cospfLsdbGroup, cospfLocalLsdbGroup=cospfLocalLsdbGroup, cospfVirtIfLsaCount=cospfVirtIfLsaCount, cospfAreaNssaTranslatorRole=cospfAreaNssaTranslatorRole, cospfShamLinkNbrArea=cospfShamLinkNbrArea, cospfLocalLsdbEntry=cospfLocalLsdbEntry, cospfAreaNssaTranslatorEvents=cospfAreaNssaTranslatorEvents, cospfShamLinkRetransInterval=cospfShamLinkRetransInterval, cospfLocalLsdbIpAddress=cospfLocalLsdbIpAddress, cospfShamLinksRemoteIpAddrType=cospfShamLinksRemoteIpAddrType, cospfAreaTable=cospfAreaTable, cospfVirtLocalLsdbTransitArea=cospfVirtLocalLsdbTransitArea, cospfIfGroup=cospfIfGroup, cospfShamLinksTable=cospfShamLinksTable, cospfVirtIfLsaCksumSum=cospfVirtIfLsaCksumSum, cospfShamLinksRemoteIpAddr=cospfShamLinksRemoteIpAddr, cospfShamLinkHelloInterval=cospfShamLinkHelloInterval, cospfVirtIfTable=cospfVirtIfTable, cospfShamLinkNbrLsRetransQLen=cospfShamLinkNbrLsRetransQLen, cospfLocalLsdbSequence=cospfLocalLsdbSequence, cospfComplianceRev1=cospfComplianceRev1, cospfVirtLocalLsdbEntry=cospfVirtLocalLsdbEntry, cospfOpaqueAreaLsaCount=cospfOpaqueAreaLsaCount, cospfVirtLocalLsdbRouterId=cospfVirtLocalLsdbRouterId, cospfLsdbType=cospfLsdbType, cospfShamLinksHelloInterval=cospfShamLinksHelloInterval, cospfShamLinkNbrEvents=cospfShamLinkNbrEvents, cospfVirtLocalLsdbChecksum=cospfVirtLocalLsdbChecksum, cospfShamLinksState=cospfShamLinksState, cospfVirtIfEntry=cospfVirtIfEntry, cospfShamLinkNbrEntry=cospfShamLinkNbrEntry, cospfShamLinkNbrRtrId=cospfShamLinkNbrRtrId, cospfVirtLocalLsdbGroup=cospfVirtLocalLsdbGroup, cospfShamLinkGroup=cospfShamLinkGroup, cospfAreaEntry=cospfAreaEntry, cospfLocalLsdbType=cospfLocalLsdbType, cospfShamLinkNbrGroup=cospfShamLinkNbrGroup, cospfOpaqueASLsaCount=cospfOpaqueASLsaCount, cospfShamLinkAreaId=cospfShamLinkAreaId, cospfLocalLsdbAddressLessIf=cospfLocalLsdbAddressLessIf, cospfTrafficEngineeringSupport=cospfTrafficEngineeringSupport, cospfShamLinkTable=cospfShamLinkTable, cospfIfTable=cospfIfTable, cospf=cospf, cospfBasicGroup=cospfBasicGroup, cospfLocalLsdbTable=cospfLocalLsdbTable, cospfOpaqueLsaSupport=cospfOpaqueLsaSupport, cospfVirtIfGroup=cospfVirtIfGroup, cospfShamLinksMetric=cospfShamLinksMetric, cospfLsdbEntry=cospfLsdbEntry)
