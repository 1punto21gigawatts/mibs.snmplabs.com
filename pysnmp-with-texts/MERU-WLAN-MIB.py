#
# PySNMP MIB module MERU-WLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MERU-WLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:11:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
mwApNodeId, = mibBuilder.importSymbols("MERU-CONFIG-AP-MIB", "mwApNodeId")
mwWncVarsHostName, = mibBuilder.importSymbols("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName")
mwTopoStaapApId, mwTopoStaapStaId = mibBuilder.importSymbols("MERU-TOPOLOGY-MIB", "mwTopoStaapApId", "mwTopoStaapStaId")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, enterprises, Integer32, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, NotificationType, iso, TimeTicks, Counter64, ModuleIdentity, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "enterprises", "Integer32", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "NotificationType", "iso", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
meruWlanMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 15983, 1, 1, 1))
meruWlanMibModule.setRevisions(('2005-11-01 00:00', '2003-01-28 18:51',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: meruWlanMibModule.setRevisionsDescriptions(('Made the following changes for release 3.2 - added wpa2 related trap objects - added descriptions for multiple objects - made meru-reqs obsolete - revised contact information ', 'Initial revision',))
if mibBuilder.loadTexts: meruWlanMibModule.setLastUpdated('200511010000Z')
if mibBuilder.loadTexts: meruWlanMibModule.setOrganization('Meru Networks')
if mibBuilder.loadTexts: meruWlanMibModule.setContactInfo('Meru Networks support@merunetworks.com')
if mibBuilder.loadTexts: meruWlanMibModule.setDescription('This MIB defines the traps from Meru WLAN infrastructure.')
class ActionStatus(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("actionStatusStart", 1), ("actionStatusStop", 2), ("actionStatusInProgress", 3), ("actionStatusInError", 4), ("actionStatusDone", 5))

class UpgradeState(TextualConvention, Integer32):
    description = ''
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("upgradeStateStart", 1), ("upgradeStateInProgress", 2), ("upgradeStateFailed", 3), ("upgradeStateDone", 4))

meru = ObjectIdentity((1, 3, 6, 1, 4, 1, 15983))
if mibBuilder.loadTexts: meru.setStatus('current')
if mibBuilder.loadTexts: meru.setDescription('OID assigned by the IANA. All Meru MIBs are located under this subtree.')
meru_reg = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 1)).setLabel("meru-reg")
meru_wlan = ObjectIdentity((1, 3, 6, 1, 4, 1, 15983, 1, 1)).setLabel("meru-wlan")
if mibBuilder.loadTexts: meru_wlan.setStatus('current')
if mibBuilder.loadTexts: meru_wlan.setDescription('')
mwlWncNodeReg = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 1, 1, 2))
meru_generic = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 2)).setLabel("meru-generic")
meru_products = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3)).setLabel("meru-products")
meru_wlan_MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1)).setLabel("meru-wlan-MIB")
meru_wlan_conf = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 1)).setLabel("meru-wlan-conf")
meru_wlan_groups = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 1, 1)).setLabel("meru-wlan-groups")
meru_wlan_compls = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 1, 2)).setLabel("meru-wlan-compls")
meru_wlan_objs = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 2)).setLabel("meru-wlan-objs")
mwlGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 2, 1))
meru_wlan_events = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3)).setLabel("meru-wlan-events")
meru_caps = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 4)).setLabel("meru-caps")
meru_expr = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 6)).setLabel("meru-expr")
meruWlanApObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 15983, 3, 1, 1, 3))
mwlGlobalReboot = MibScalar((1, 3, 6, 1, 4, 1, 15983, 3, 1, 2, 1, 6), ActionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mwlGlobalReboot.setStatus('current')
if mibBuilder.loadTexts: mwlGlobalReboot.setDescription("Setting this variable with the value 'start' triggers the reboot of all the node in the WLAN.")
mwlTrapContent = MibScalar((1, 3, 6, 1, 4, 1, 15983, 3, 1, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mwlTrapContent.setStatus('current')
if mibBuilder.loadTexts: mwlTrapContent.setDescription('This object describes the details of a trap.')
mwlGlobalSave = MibScalar((1, 3, 6, 1, 4, 1, 15983, 3, 1, 2, 1, 16), ActionStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mwlGlobalSave.setStatus('current')
if mibBuilder.loadTexts: mwlGlobalSave.setDescription("Setting this variable with the value 'start' triggers the save of the running configuration to the startup configuration, so that changes will persist across reboots. All changes made via SETs for SNMP tables are applied to the running configuration only. You should set this variable at the end of every group of updates if you want your configuration to persist.")
mwlTopoStaAtsAdd = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 7)).setObjects(("MERU-TOPOLOGY-MIB", "mwTopoStaapApId"), ("MERU-TOPOLOGY-MIB", "mwTopoStaapStaId"))
if mibBuilder.loadTexts: mwlTopoStaAtsAdd.setStatus('current')
if mibBuilder.loadTexts: mwlTopoStaAtsAdd.setDescription('A mwlTopoStaAtsAdd trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a station entry has been added to the station and AP topology table. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlTopoStaAtsRemove = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 8)).setObjects(("MERU-TOPOLOGY-MIB", "mwTopoStaapApId"), ("MERU-TOPOLOGY-MIB", "mwTopoStaapStaId"))
if mibBuilder.loadTexts: mwlTopoStaAtsRemove.setStatus('current')
if mibBuilder.loadTexts: mwlTopoStaAtsRemove.setDescription('A mwlTopoStaAtsAdd trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a station entry has been removed from the station and AP topology table. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlTopoStaAtsModify = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 9)).setObjects(("MERU-TOPOLOGY-MIB", "mwTopoStaapApId"), ("MERU-TOPOLOGY-MIB", "mwTopoStaapStaId"))
if mibBuilder.loadTexts: mwlTopoStaAtsModify.setStatus('current')
if mibBuilder.loadTexts: mwlTopoStaAtsModify.setDescription('A mwlTopoStaAtsAdd trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a station entry has been modified in the station and AP topology table. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlRogueApDetected = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 13)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlRogueApDetected.setStatus('current')
if mibBuilder.loadTexts: mwlRogueApDetected.setDescription('A mwlRogueApDetected trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a rogue AP is detected in the wireless network. The AP id, mac address, and other information are described in mwlTraContent.')
mwlRogueApRemoved = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 14)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlRogueApRemoved.setStatus('current')
if mibBuilder.loadTexts: mwlRogueApRemoved.setDescription('A mwlRogueApDetected trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a rogue AP is removed from the wireless network. The AP id, mac address, and other information are described in mwlTraContent.')
mwlAtsDown = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 18)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAtsDown.setStatus('current')
if mibBuilder.loadTexts: mwlAtsDown.setDescription('A mwlAtsDown trap signifies that the SNMPv2 entity, acting in an agent role, has detected that one of the AP (Ats) in the wireless network is to enter down state. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlAtsUp = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 19)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAtsUp.setStatus('current')
if mibBuilder.loadTexts: mwlAtsUp.setDescription('A mwlAtsUp trap signifies that the SNMPv2 entity, acting in an agent role, has detected that one of the AP (Ats) in the wireless network is to enter up state. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlWatchdogFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 22)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlWatchdogFailure.setStatus('current')
if mibBuilder.loadTexts: mwlWatchdogFailure.setDescription('A mwlWatchdogFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that WatchDog is down in the controller. The controller is identified by mwWncVarsHostName and the details of the trap is described by mwlTrapContent.')
mwlWatchdogUp = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 23)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlWatchdogUp.setStatus('current')
if mibBuilder.loadTexts: mwlWatchdogUp.setDescription('A mwlWatchdogUp trap signifies that the SNMPv2 entity, acting in an agent role, has detected that WatchDog is up in the controller. The controller is identified by mwWncVarsHostName and the details of the trap is described by mwlTrapContent.')
mwlCertificateError = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 24)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlCertificateError.setStatus('current')
if mibBuilder.loadTexts: mwlCertificateError.setDescription('A mwlCertificateError trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a SSL certificate is corrupted or expired. The details of the trap is described by mwlTrapContent.')
mwlCertificateInstalled = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 25)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlCertificateInstalled.setStatus('current')
if mibBuilder.loadTexts: mwlCertificateInstalled.setDescription('A mwlCertificateInstalled trap signifies that the SNMPv2 entity acting in an agent role, has detected that a SSL certificate is installed. The details of the trap is described by mwlTrapContent.')
mwlApSoftwareVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 26)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApSoftwareVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: mwlApSoftwareVersionMismatch.setDescription('A mwlApSoftwareVersionMismatch trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the software version in AP (Ats) does not match that in the controller. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApSoftwareVersionMatch = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 27)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApSoftwareVersionMatch.setStatus('current')
if mibBuilder.loadTexts: mwlApSoftwareVersionMatch.setDescription('A mwlApSoftwareVersionMatch trap signifies that the SNMPv2 entity, acting in an agent role, has detected that mwlApSoftwareVersionMismatch is cleared. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 28)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApInitFailure.setStatus('current')
if mibBuilder.loadTexts: mwlApInitFailure.setDescription('A mwlApInitFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the AP initialization failed. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApInitFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 29)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApInitFailureCleared.setStatus('current')
if mibBuilder.loadTexts: mwlApInitFailureCleared.setDescription('A mwlApInitFailureCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected that mwlApInitFailureCleared is cleared. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApRadioCardFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 30)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApRadioCardFailure.setStatus('current')
if mibBuilder.loadTexts: mwlApRadioCardFailure.setDescription('A mwlApRadioCardFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that a radio card in AP failed. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApRadioCardFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 31)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApRadioCardFailureCleared.setStatus('current')
if mibBuilder.loadTexts: mwlApRadioCardFailureCleared.setDescription('A mwlApRadioCardFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that mwlApRadioCardFailure was cleared. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 32)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAuthFailure.setStatus('current')
if mibBuilder.loadTexts: mwlAuthFailure.setDescription("A mwlAuthFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that an incoming supplicant's access request is rejected due to an authtication failure. The details of the trap is described by mwlTrapContent.")
mwlRadiusServerSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 33)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlRadiusServerSwitchover.setStatus('current')
if mibBuilder.loadTexts: mwlRadiusServerSwitchover.setDescription('A mwlRadiusServerSwitchover trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the controller switched from primary radius server to secondary one. The details of the trap is described by mwlTrapContent.')
mwlRadiusServerSwitchoverFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 34)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlRadiusServerSwitchoverFailure.setStatus('current')
if mibBuilder.loadTexts: mwlRadiusServerSwitchoverFailure.setDescription('A mwlRadiusServerSwitchoverFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the controller failed in switching over from the primary radius server to the secondary one. The details of the trap is described by mwlTrapContent.')
mwlRadiusServerRestored = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 35)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlRadiusServerRestored.setStatus('current')
if mibBuilder.loadTexts: mwlRadiusServerRestored.setDescription('A mwlRadiusServerRestored trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the controller etected the primary radius server back online and reverted to the primary radius server. The details of the trap is described by mwlTrapContent.')
mwlAcctRadiusServerSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 36)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAcctRadiusServerSwitchover.setStatus('current')
if mibBuilder.loadTexts: mwlAcctRadiusServerSwitchover.setDescription('A mwlAcctRadiusServerSwitchover trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the controller switched from primary accounting radius server to the secondary one. The details of the trap is described by mwlTrapContent.')
mwlAcctRadiusServerSwitchoverFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 37)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAcctRadiusServerSwitchoverFailure.setStatus('current')
if mibBuilder.loadTexts: mwlAcctRadiusServerSwitchoverFailure.setDescription('A mwlAcctRadiusServerSwitchoverFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the controller failed in switching over from the primary accounting radius server to the secondary one. The details of the trap is described by mwlTrapContent.')
mwlMicFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 38)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlMicFailure.setStatus('current')
if mibBuilder.loadTexts: mwlMicFailure.setDescription('A mwlMicFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected that an AP detected message integrity code (MIC) failure. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlMicCounterMeasureActivated = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 39)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlMicCounterMeasureActivated.setStatus('current')
if mibBuilder.loadTexts: mwlMicCounterMeasureActivated.setDescription('A mwlMicCounterMeasureActivated trap signifies that the SNMPv2 entity, acting in an agent role, has detected that MIC countermeasures feature gets activated. This feature gets activated if more than one MIC failure is detected within a pre-defined time period. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlMasterDown = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 40)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlMasterDown.setStatus('current')
if mibBuilder.loadTexts: mwlMasterDown.setDescription('A mwlMasterDown trap signifies that the SNMPv2 entity, acting in an agent role, has detected that one of the Master controllers in the N+1 network is to enter down state. The Master controller is identified by mwWncVarsHostName and details of the trap is described by mwlTrapContent.')
mwlMasterUp = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 41)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlMasterUp.setStatus('current')
if mibBuilder.loadTexts: mwlMasterUp.setDescription('A mwlMasterUp trap signifies that the SNMPv2 entity, acting in an agent role, has detected that one of the Master controllers in the N+1 network is to enter down state. The Master controller is identified by mwWncVarsHostName and details of the trap is described by mwlTrapContent.')
mwlAtsNeighborLoss = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 42)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"))
if mibBuilder.loadTexts: mwlAtsNeighborLoss.setStatus('current')
if mibBuilder.loadTexts: mwlAtsNeighborLoss.setDescription('A mwlAtsNeighborLoss trap signifies that the SNMPv2 entity, acting in an agent role, has detected the ats neighbor loss.')
mwlAtsNeighborLossCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 43)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"))
if mibBuilder.loadTexts: mwlAtsNeighborLossCleared.setStatus('current')
if mibBuilder.loadTexts: mwlAtsNeighborLossCleared.setDescription('A mwlAtsNeighborLossCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected the ats neighbor loss which was detected earlier has been cleared.')
mwlHandoffFail = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 44)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"))
if mibBuilder.loadTexts: mwlHandoffFail.setStatus('current')
if mibBuilder.loadTexts: mwlHandoffFail.setDescription('A mwlHandoffFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected failure in hand off.')
mwlHandoffFailCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 45)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"))
if mibBuilder.loadTexts: mwlHandoffFailCleared.setStatus('current')
if mibBuilder.loadTexts: mwlHandoffFailCleared.setDescription('A mwlHandoffFailureCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected failure in hand off is cleared.')
mwlResourceThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 46)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"))
if mibBuilder.loadTexts: mwlResourceThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: mwlResourceThresholdExceed.setDescription('A mwlResourceThresholdExceed trap signifies that the SNMPv2 entity, acting in an agent role, has detected the consumption of resources has exceeded the threshold. The system is identified by mwWncVarsHostName.')
mwlResourceThresholdExceedCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 47)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"))
if mibBuilder.loadTexts: mwlResourceThresholdExceedCleared.setStatus('current')
if mibBuilder.loadTexts: mwlResourceThresholdExceedCleared.setDescription('A mwlResourceThresholdExceedCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected the consumption of resources which had exceeded the threshold is now cleared. The system is identified by mwWncVarsHostName.')
mwlSystemFailure = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 48)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"))
if mibBuilder.loadTexts: mwlSystemFailure.setStatus('current')
if mibBuilder.loadTexts: mwlSystemFailure.setDescription('A mwlSystemFailure trap signifies that the SNMPv2 entity, acting in an agent role, has detected failure in the system. The system is identified by mwWncVarsHostName.')
mwlSystemFailureCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 49)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"))
if mibBuilder.loadTexts: mwlSystemFailureCleared.setStatus('current')
if mibBuilder.loadTexts: mwlSystemFailureCleared.setDescription('A mwlSystemFailureCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the system which had a failure previously is now cleared. The system is identified by mwWncVarsHostName.')
mwlApBootimageVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 50)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApBootimageVersionMismatch.setStatus('current')
if mibBuilder.loadTexts: mwlApBootimageVersionMismatch.setDescription('A mwlApBootimageVersionMismatch trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the bootimage version in AP (Ats) does not match that in the controller. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApBootimageVersionMatch = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 51)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApBootimageVersionMatch.setStatus('current')
if mibBuilder.loadTexts: mwlApBootimageVersionMatch.setDescription('A mwlApBootimageVersionMatch trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the mwlApBootimageVersionMismatch is cleared. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlMacFilterDeny = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 52)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlMacFilterDeny.setStatus('current')
if mibBuilder.loadTexts: mwlMacFilterDeny.setDescription('A mwlMacFilterDeny trap signifies that the SNMPv2 entity, acting in an agent role, has detected the station which is denied access. Details of the trap is described by mwlTrapContent.')
mwlMacFilterDenyCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 53)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlMacFilterDenyCleared.setStatus('current')
if mibBuilder.loadTexts: mwlMacFilterDenyCleared.setDescription('A mwlMacFilterDeny trap signifies that the SNMPv2 entity, acting in an agent role, has detected mwlMacFilterDeny is cleared. Details of the trap is described by mwlTrapContent.')
mwlSoftwareLicenseExpired = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 54)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlSoftwareLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: mwlSoftwareLicenseExpired.setDescription('A mwlSoftwareLicenseExpired trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the software license has expired. The details of the trap is described by mwlTrapContent.')
mwlSoftwareLicenseInstalled = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 55)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlSoftwareLicenseInstalled.setStatus('current')
if mibBuilder.loadTexts: mwlSoftwareLicenseInstalled.setDescription('A mwlSoftwareLicenseInstalled trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the software license has been installed. The details of the trap is described by mwlTrapContent.')
mwlApTemperature = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 56)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApTemperature.setStatus('current')
if mibBuilder.loadTexts: mwlApTemperature.setDescription('A mwlApTemperature trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the temperature on the ap has raised. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlApTemperatureCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 57)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlApTemperatureCleared.setStatus('current')
if mibBuilder.loadTexts: mwlApTemperatureCleared.setDescription('A mwlApTemperatureCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the temperature on the ap has come down to normal. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlHardwareDiagnostic = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 58)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"))
if mibBuilder.loadTexts: mwlHardwareDiagnostic.setStatus('current')
if mibBuilder.loadTexts: mwlHardwareDiagnostic.setDescription('A mwlHardwareDiagnostic trap signifies that the SNMPv2 entity, acting in an agent role, has detected hardware Diagnostics. The system is identified by mwWncVarsHostName.')
mwlHardwareDiagnosticCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 59)).setObjects(("MERU-CONFIG-CONTROLLER-MIB", "mwWncVarsHostName"))
if mibBuilder.loadTexts: mwlHardwareDiagnosticCleared.setStatus('current')
if mibBuilder.loadTexts: mwlHardwareDiagnosticCleared.setDescription('A mwlHardwareDiagnosticCleared trap signifies that the SNMPv2 entity, acting in an agent role, mwlHardwareDiagnostic trap is cleared. The system is identified by mwWncVarsHostName.')
mwlCacLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 60)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlCacLimitReached.setStatus('current')
if mibBuilder.loadTexts: mwlCacLimitReached.setDescription('A mwlCacLimitReached trap signifies that the SNMPv2 entity, acting in an agent role, has detected the CAC limit is reached. Details of the trap is described by mwlTrapContent.')
mwlRadarDetected = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 61)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlRadarDetected.setStatus('current')
if mibBuilder.loadTexts: mwlRadarDetected.setDescription('A mwlRadarDetected trap signifies that the SNMPv2 entity, acting in an agent role, has received the RADAR detected notification. Details of the trap is described by mwlTrapContent.')
mwlOperationalChannelChange = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 62)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlOperationalChannelChange.setStatus('current')
if mibBuilder.loadTexts: mwlOperationalChannelChange.setDescription('A mwlOperationalChannelChange trap signifies that the SNMPv2 entity, acting in an agent role, has received the Operational channel change notification. Details of the trap is described by mwlTrapContent.')
mwlLicensingServerDown = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 63)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlLicensingServerDown.setStatus('current')
if mibBuilder.loadTexts: mwlLicensingServerDown.setDescription('A mwlLicensingServerDown trap signifies that the SNMPv2 entity, acting in an agent role, has received the Licensing server is down. Details of the trap is described by mwlTrapContent.')
mwlNUpgradeLicenseCheckoutFail = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 64)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlNUpgradeLicenseCheckoutFail.setStatus('current')
if mibBuilder.loadTexts: mwlNUpgradeLicenseCheckoutFail.setDescription('A mwlNUpgradeLicenseCheckoutFail trap signifies that the SNMPv2 entity, acting in an agent role, has received the 802.11 N Upgrade license checkout fail notification. Details of the trap is described by mwlTrapContent.')
mwlNoLicenseEnforcementExpired = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 65)).setObjects(("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlNoLicenseEnforcementExpired.setStatus('current')
if mibBuilder.loadTexts: mwlNoLicenseEnforcementExpired.setDescription('A mwlNoLicenseEnforcementExpired trap signifies that the SNMPv2 entity, acting in an agent role, has received no license enforcement on avtive/slave of NPlus1 will be expired. Details of the trap is described by mwlTrapContent.')
mwlAtsRuntimeError = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 66)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAtsRuntimeError.setStatus('current')
if mibBuilder.loadTexts: mwlAtsRuntimeError.setDescription('A mwlAtsRuntimeError trap signifies that the SNMPv2 entity, acting in an agent role, has received the notification indicating an internal error in AP configuration. This error is detected by AP itself and results in reboot of AP without affecting any service, to get correct configuration. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
mwlAtsRuntimeErrorCleared = NotificationType((1, 3, 6, 1, 4, 1, 15983, 3, 1, 3, 67)).setObjects(("MERU-CONFIG-AP-MIB", "mwApNodeId"), ("MERU-WLAN-MIB", "mwlTrapContent"))
if mibBuilder.loadTexts: mwlAtsRuntimeErrorCleared.setStatus('current')
if mibBuilder.loadTexts: mwlAtsRuntimeErrorCleared.setDescription('A mwlAtsRuntimeErrorCleared trap signifies that the SNMPv2 entity, acting in an agent role, has detected that the AP Runtime Error condition is cleared. The AP (Ats) is identified by mwApNodeId and details of the trap is described by mwlTrapContent.')
meru_reqs = MibScalar((1, 3, 6, 1, 4, 1, 15983, 5), Integer32()).setLabel("meru-reqs")
if mibBuilder.loadTexts: meru_reqs.setStatus('obsolete')
if mibBuilder.loadTexts: meru_reqs.setDescription('')
mibBuilder.exportSymbols("MERU-WLAN-MIB", mwlAtsNeighborLoss=mwlAtsNeighborLoss, mwlTopoStaAtsRemove=mwlTopoStaAtsRemove, mwlAcctRadiusServerSwitchoverFailure=mwlAcctRadiusServerSwitchoverFailure, mwlGlobalSave=mwlGlobalSave, mwlApRadioCardFailureCleared=mwlApRadioCardFailureCleared, mwlHardwareDiagnosticCleared=mwlHardwareDiagnosticCleared, mwlWatchdogFailure=mwlWatchdogFailure, mwlHandoffFail=mwlHandoffFail, mwlMacFilterDeny=mwlMacFilterDeny, meru_caps=meru_caps, mwlRadiusServerSwitchoverFailure=mwlRadiusServerSwitchoverFailure, mwlRadarDetected=mwlRadarDetected, mwlSoftwareLicenseExpired=mwlSoftwareLicenseExpired, mwlWatchdogUp=mwlWatchdogUp, mwlHandoffFailCleared=mwlHandoffFailCleared, mwlGlobalObjects=mwlGlobalObjects, mwlApSoftwareVersionMismatch=mwlApSoftwareVersionMismatch, mwlAtsUp=mwlAtsUp, mwlSoftwareLicenseInstalled=mwlSoftwareLicenseInstalled, meru_wlan=meru_wlan, mwlResourceThresholdExceedCleared=mwlResourceThresholdExceedCleared, mwlTopoStaAtsAdd=mwlTopoStaAtsAdd, mwlRadiusServerRestored=mwlRadiusServerRestored, mwlApSoftwareVersionMatch=mwlApSoftwareVersionMatch, mwlTrapContent=mwlTrapContent, mwlAcctRadiusServerSwitchover=mwlAcctRadiusServerSwitchover, mwlMicFailure=mwlMicFailure, mwlMasterDown=mwlMasterDown, mwlMacFilterDenyCleared=mwlMacFilterDenyCleared, ActionStatus=ActionStatus, mwlAtsRuntimeError=mwlAtsRuntimeError, mwlApBootimageVersionMismatch=mwlApBootimageVersionMismatch, meruWlanApObjects=meruWlanApObjects, mwlApRadioCardFailure=mwlApRadioCardFailure, mwlSystemFailureCleared=mwlSystemFailureCleared, meru_wlan_conf=meru_wlan_conf, mwlNUpgradeLicenseCheckoutFail=mwlNUpgradeLicenseCheckoutFail, mwlWncNodeReg=mwlWncNodeReg, mwlAtsRuntimeErrorCleared=mwlAtsRuntimeErrorCleared, mwlApTemperature=mwlApTemperature, meruWlanMibModule=meruWlanMibModule, mwlRogueApDetected=mwlRogueApDetected, mwlMasterUp=mwlMasterUp, meru_generic=meru_generic, meru_products=meru_products, mwlApTemperatureCleared=mwlApTemperatureCleared, meru_reg=meru_reg, meru_wlan_compls=meru_wlan_compls, mwlRogueApRemoved=mwlRogueApRemoved, PYSNMP_MODULE_ID=meruWlanMibModule, mwlOperationalChannelChange=mwlOperationalChannelChange, mwlAuthFailure=mwlAuthFailure, mwlAtsDown=mwlAtsDown, mwlRadiusServerSwitchover=mwlRadiusServerSwitchover, mwlApInitFailureCleared=mwlApInitFailureCleared, mwlLicensingServerDown=mwlLicensingServerDown, meru_reqs=meru_reqs, mwlMicCounterMeasureActivated=mwlMicCounterMeasureActivated, meru_wlan_MIB=meru_wlan_MIB, mwlApBootimageVersionMatch=mwlApBootimageVersionMatch, mwlTopoStaAtsModify=mwlTopoStaAtsModify, UpgradeState=UpgradeState, mwlCertificateError=mwlCertificateError, mwlAtsNeighborLossCleared=mwlAtsNeighborLossCleared, meru_wlan_objs=meru_wlan_objs, mwlSystemFailure=mwlSystemFailure, mwlResourceThresholdExceed=mwlResourceThresholdExceed, meru_wlan_events=meru_wlan_events, meru_expr=meru_expr, mwlGlobalReboot=mwlGlobalReboot, mwlApInitFailure=mwlApInitFailure, mwlNoLicenseEnforcementExpired=mwlNoLicenseEnforcementExpired, mwlCertificateInstalled=mwlCertificateInstalled, mwlCacLimitReached=mwlCacLimitReached, meru_wlan_groups=meru_wlan_groups, mwlHardwareDiagnostic=mwlHardwareDiagnostic, meru=meru)
