#
# PySNMP MIB module XYLAN-M013-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XYLAN-M013-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:45:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Integer32, Counter32, NotificationType, Gauge32, Unsigned32, ModuleIdentity, IpAddress, Bits, MibIdentifier, ObjectIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "Counter32", "NotificationType", "Gauge32", "Unsigned32", "ModuleIdentity", "IpAddress", "Bits", "MibIdentifier", "ObjectIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xylanM013Arch, = mibBuilder.importSymbols("XYLAN-BASE-MIB", "xylanM013Arch")
m013ProvisioningGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 1))
m013ServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 2))
m013FrxPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 3))
m013FrxVcControlGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 4))
m013FrxVcStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 5))
m013PppxConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 6))
m013PppxCpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 7))
m013PppxStatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 8))
m013IPRouterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 9))
m013Dsx3Group = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 10))
m013Dsx1Group = MibIdentifier((1, 3, 6, 1, 4, 1, 800, 2, 25, 11))
m013ProvisioningTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1), )
if mibBuilder.loadTexts: m013ProvisioningTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013ProvisioningTable.setDescription('A table of provisioning configuration data used to configure an HDLC interface on a DS3 connection.')
m013ProvisioningEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013SlotIndex"), (0, "XYLAN-M013-MIB", "m013LogicalPortIndex"))
if mibBuilder.loadTexts: m013ProvisioningEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013ProvisioningEntry.setDescription('An entry in the table, containing information about provisioning an HDLC channel on a DS3 connection.')
m013SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013SlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013SlotIndex.setDescription('Slot for channel being provisioned.')
m013LogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013LogicalPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013LogicalPortIndex.setDescription('A per-slot unique HDLC channel number.')
m013Description = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Description.setStatus('mandatory')
if mibBuilder.loadTexts: m013Description.setDescription('A user description of this channel.')
m013Ds3PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Ds3PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013Ds3PortIndex.setDescription('Physical DS3 port for channel being provisioned.')
m013Ds1Fraction = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Ds1Fraction.setStatus('mandatory')
if mibBuilder.loadTexts: m013Ds1Fraction.setDescription('The DS1 channel within the DS3 circuit that is used to create this HDLC channel. An entry of 0 indicates this is a clear channel (full DS3 bandwidth) connection.')
m013Ds0Mask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Ds0Mask.setStatus('mandatory')
if mibBuilder.loadTexts: m013Ds0Mask.setDescription('This is a bit mask of the DS0 channels within the selected DS1 fraction that make up the desired HDLC channel. If m013Ds1Fraction is 0 this value has no meaning')
m013IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10001, 18192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013IfIndex.setDescription('A per-switch unique number for this HDLC channel. This number is a combination of Slot and Logical Port numbers.')
m013Protocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fr", 1), ("ppp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Protocol.setStatus('mandatory')
if mibBuilder.loadTexts: m013Protocol.setDescription('The L2 protocol that is used on this HDLC channel.')
m013EntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013EntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013EntryStatus.setDescription('Value used for the control of the creation of this interface.')
m013ServiceTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1), )
if mibBuilder.loadTexts: m013ServiceTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceTable.setDescription('A table of M013 services status and parameter information.')
m013ServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013ServiceSlotIndex"), (0, "XYLAN-M013-MIB", "m013ServiceLogicalPortIndex"), (0, "XYLAN-M013-MIB", "m013ServiceNumber"), (0, "XYLAN-M013-MIB", "m013ServiceType"))
if mibBuilder.loadTexts: m013ServiceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceEntry.setDescription('An entry in the table, containing information about the M013 services.')
m013ServiceSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
m013ServiceLogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceLogicalPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceLogicalPortIndex.setDescription('A per-slot unique value which identifies this HDLC logical port.')
m013ServiceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013ServiceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceNumber.setDescription('The unique service number for this particular slot/logical port.')
m013ServiceTableEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceTableEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceTableEntryType.setDescription('The type of table entry for this M013 Serivce. A static entry is one that is stored in non-volatile memory. A dynamic entry is one that is automatically created for an unconfigured virtual circuit based on the the type of service (bridging or trunking) and whether a default VLAN is defined for the type of service. Changing the value via a write command from dynamic to static will cause the table entry to be stored into non-volatile memory. Setting a value of dynamic is not allowed.')
m013ServiceDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceDescription.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceDescription.setDescription('A description for this M013 service.')
m013ServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(4, 6))).clone(namedValues=NamedValues(("trunking", 4), ("bridging", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceType.setDescription('The service type.')
m013ServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013ServiceOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceOperStatus.setDescription('The service operational status.')
m013ServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceAdminStatus.setDescription('The service adminstration status.')
m013ServiceVirtualCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceVirtualCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceVirtualCircuit.setDescription('The virtual circuit for this service. In case of PPP it should be set to zero, in case of Frame Relay - to the appropriate DLCI value. ')
m013ServiceVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceVlans.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceVlans.setDescription('The Vlans for this service. Interpret this as a 16 bit field per vlan: Trunking 1-32, Bridging 1, IP 1')
m013ServiceBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013ServiceBridgingMode.setStatus('mandatory')
if mibBuilder.loadTexts: m013ServiceBridgingMode.setDescription('The default Briding Mode, 0 = BRIDGE_ALL, 1 = ETHERNET ONLY')
m013FrxPortTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1), )
if mibBuilder.loadTexts: m013FrxPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortTable.setDescription("A table of port layer status and parameter information for the UNI's logical interface.")
m013FrxPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013FrxPortSlotIndex"), (0, "XYLAN-M013-MIB", "m013FrxPortPortIndex"))
if mibBuilder.loadTexts: m013FrxPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortEntry.setDescription('An entry in the table, containing information about the logical layer of a UNI interface.')
m013FrxPortSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxPortSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
m013FrxPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxPortPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortPortIndex.setDescription('A per-slot unique value which identifies this HDLC logical port.')
m013FrxPortDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDescription.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortDescription.setDescription('A description for this Frame Relay port.')
m013FrxPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortAdminStatus.setDescription('If set to enabled, enables Frame Relay Interface. If set to disabled, disables Frame Relay Interface ')
m013FrxPortDefaultIpRoutingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultIpRoutingAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortDefaultIpRoutingAdminStatus.setDescription('If set to enabled, enables Default IP Routing. If set to disabled, disables Default IP Routing ')
m013FrxPortDefaultBridgingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingAdminStatus.setDescription('If set to enabled, enables Default Bridging. If set to disabled, disables Default Bridging. ')
m013FrxPortDefaultBridgingVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingVLAN.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingVLAN.setDescription('The default VLAN for new PVCs that have not been configured for the Bridging Service. A value of zero(0) indicates that unconfigured VCs will not perform a bridging service and will discard all bridged format frames received or transmitted. A non-zero value indicates the bridging VLAN to be used if the network informs the port of a new VC.')
m013FrxPortDefaultBridgingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingMode.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortDefaultBridgingMode.setDescription('The default Briding Mode, 0 = BRIDGE_ALL, 1 = ETHERNET ONLY')
m013FrxPortDynamicVCCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxPortDynamicVCCreation.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxPortDynamicVCCreation.setDescription('If set to enabled, enables Dynamic VC creation. If set to disabled, disables Dynamic VC creation. ')
m013FrxVcControlTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1), )
if mibBuilder.loadTexts: m013FrxVcControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcControlTable.setDescription('A table of Frame Relay virtual circuit configuration and control information.')
m013FrxVcControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013FrxVcControlSlotIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcControlPortIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcControlDlci"))
if mibBuilder.loadTexts: m013FrxVcControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcControlEntry.setDescription('An entry in the table, containing information about the Frame Relay virtual circuit statistics.')
m013FrxVcControlSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcControlSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcControlSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
m013FrxVcControlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcControlPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcControlPortIndex.setDescription('A per-slot unique value which identifies this HDLC logical port.')
m013FrxVcControlDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcControlDlci.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcControlDlci.setDescription('A unique value which identifies this Data Link Connection Identifier (DLCI) for this Frame Relay Virtual Circuit.')
m013FrxVcControlIpRoutingAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013FrxVcControlIpRoutingAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcControlIpRoutingAdminStatus.setDescription('If set to enabled, enables IP Routing. If set to disabled, disables IP Routing ')
m013FrxVcStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1), )
if mibBuilder.loadTexts: m013FrxVcStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTable.setDescription('A table of Frame Relay virtual circuit statistics information.')
m013FrxVcStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013FrxVcStatsSlotIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcStatsPortIndex"), (0, "XYLAN-M013-MIB", "m013FrxVcStatsDlci"))
if mibBuilder.loadTexts: m013FrxVcStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsEntry.setDescription('An entry in the table, containing information about the Frame Relay virtual circuit statistics.')
m013FrxVcStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
m013FrxVcStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsPortIndex.setDescription('A per-slot unique value which identifies this HDLC logical port.')
m013FrxVcStatsDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsDlci.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsDlci.setDescription('A unique value which identifies this Data Link Connection Identifier (DLCI) for this Frame Relay Virtual Circuit.')
m013FrxVcStatsTxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxIPOctets.setDescription('The total number of transmitted octets (including the Frame Relay Header field) within routed IP format frames on this virtual circuit.')
m013FrxVcStatsTxIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxIPFrames.setDescription('The total number of transmitted routed IP format frames on this virtual circuit.')
m013FrxVcStatsRxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxIPOctets.setDescription('The total number of received octets (including the Frame Relay Header field) within routed IP format frames on this virtual circuit.')
m013FrxVcStatsRxIPFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxIPFrames.setDescription('The total number of received routed IP format frames on this virtual circuit.')
m013FrxVcStatsTxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPXOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxIPXOctets.setDescription('The total number of transmitted octets (including the Frame Relay Header field) within routed IPX format frames on this virtual circuit.')
m013FrxVcStatsTxIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxIPXFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxIPXFrames.setDescription('The total number of transmitted routed IPX format frames on this virtual circuit.')
m013FrxVcStatsRxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPXOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxIPXOctets.setDescription('The total number of received octets (including the Frame Relay Header field) within routed IPX format frames on this virtual circuit.')
m013FrxVcStatsRxIPXFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxIPXFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxIPXFrames.setDescription('The total number of received routed IPX format frames on this virtual circuit.')
m013FrxVcStatsTxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxBPDUOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxBPDUOctets.setDescription('The total number of transmitted octets (including the Frame Relay Header field) within BPDU frames on this virtual circuit.')
m013FrxVcStatsTxBPDUFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxBPDUFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxBPDUFrames.setDescription('The total number of transmitted BPDU frames on this virtual circuit.')
m013FrxVcStatsRxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxBPDUOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxBPDUOctets.setDescription('The total number of received octets (including the Frame Relay Header field) within BPDU frames on this virtual circuit.')
m013FrxVcStatsRxBPDUFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxBPDUFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxBPDUFrames.setDescription('The total number of received BPDU frames on this virtual circuit.')
m013FrxVcStatsTxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxEthernetOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxEthernetOctets.setDescription('The total number of transmitted octets (including the Frame Relay Header field) within bridged 802.3 format frames on this virtual circuit.')
m013FrxVcStatsTxEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxEthernetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxEthernetFrames.setDescription('The total number of transmitted bridged 802.3 format frames on this virtual circuit.')
m013FrxVcStatsRxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxEthernetOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxEthernetOctets.setDescription('The total number of received octets (including the Frame Relay Header field) within bridged 802.3 format frames on this virtual circuit.')
m013FrxVcStatsRxEthernetFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxEthernetFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxEthernetFrames.setDescription('The total number of received bridged 802.3 format frames on this virtual circuit.')
m013FrxVcStatsTx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTx8025Octets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTx8025Octets.setDescription('The total number of transmitted octets (including the Frame Relay Header field) within 8025 frames on this virtual circuit.')
m013FrxVcStatsTx8025Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTx8025Frames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTx8025Frames.setDescription('The total number of transmitted 8025 frames on this virtual circuit.')
m013FrxVcStatsRx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRx8025Octets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRx8025Octets.setDescription('The total number of received octets (including the Frame Relay Header field) within 8025 frames on this virtual circuit.')
m013FrxVcStatsRx8025Frames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRx8025Frames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRx8025Frames.setDescription('The total number of received 8025 frames on this virtual circuit.')
m013FrxVcStatsTxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxFDDIOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxFDDIOctets.setDescription('The total number of transmitted octets (including the Frame Relay Header field) within FDDI frames on this virtual circuit.')
m013FrxVcStatsTxFDDIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsTxFDDIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsTxFDDIFrames.setDescription('The total number of transmitted FDDI frames on this virtual circuit.')
m013FrxVcStatsRxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxFDDIOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxFDDIOctets.setDescription('The total number of received octets (including the Frame Relay Header field) within FDDI frames on this virtual circuit.')
m013FrxVcStatsRxFDDIFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 5, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013FrxVcStatsRxFDDIFrames.setStatus('mandatory')
if mibBuilder.loadTexts: m013FrxVcStatsRxFDDIFrames.setDescription('The total number of received FDDI frames on this virtual circuit.')
m013PppxConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1), )
if mibBuilder.loadTexts: m013PppxConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigTable.setDescription('A table of PPP protocol entity configuration information.')
m013PppxConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013PppxConfigSlotIndex"), (0, "XYLAN-M013-MIB", "m013PppxConfigPortIndex"))
if mibBuilder.loadTexts: m013PppxConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigEntry.setDescription('An entry in the PPP Entity Configuration table, containing information about PPP protocol configuration.')
m013PppxConfigSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxConfigSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigSlotIndex.setDescription('A unique value which identifies this HSM board slot.')
m013PppxConfigPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxConfigPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigPortIndex.setDescription('A per-slot unique value which identifies this HDLC logical port.')
m013PppxConfigDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigDescription.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigDescription.setDescription('A description for this PPP port.')
m013PppxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigAdminStatus.setDescription('This object controls the Administrative Status of this PPP Entity. Enabled will allow the PPP Entity to operate. Disabled will disable the PPP Entity without deleting it. Delete will disable the PPP entity and delete the PPP configuration record.')
m013PppxConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("multilink", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMode.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigMode.setDescription('This object controls whether or not Multilink PPP will be used.')
m013PppxConfigIpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigIpConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigIpConfigAdminStatus.setDescription("The immediate desired status of the IP network protocol. Setting this object to open will inject an administrative open event into the IP network protocol's finite state machine. Setting this object to close will inject an administrative close event into the IP network protocol's finite state machine.")
m013PppxConfigBcpConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigBcpConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigBcpConfigAdminStatus.setDescription("The immediate desired status of the BCP network protocol. Setting this object to open will inject an administrative open event into the BCP network protocol's finite state machine. Setting this object to close will inject an administrative close event into the IP network protocol's finite state machine.")
m013PppxConfigIpxConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("open", 1), ("close", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigIpxConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigIpxConfigAdminStatus.setDescription("The immediate desired status of the IPX network protocol. Setting this object to open will inject an administrative open event into the IPX network protocol's finite state machine. Setting this object to close will inject an administrative close event into the IP network protocol's finite state machine.")
m013PppxConfigRemoteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigRemoteIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigRemoteIpAddress.setDescription('The Remote IP address of the PPP connection. If set to 0.0.0.0 and IP routing is enabled then the IP address will be learned during the IP LCP negotiation. If set to a value then no IP address negotiation will occur.')
m013PppxConfigAuthenticationType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("pap", 2), ("chap", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigAuthenticationType.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigAuthenticationType.setDescription('The desired Authentication protocol to use for this PPP connection.')
m013PppxConfigUserIdToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigUserIdToRemote.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigUserIdToRemote.setDescription('User ID sent to remote during PAP or CHAP Authentication. If this string is empty, then no local to remote authentication will occur.')
m013PppxConfigPasswordToRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigPasswordToRemote.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigPasswordToRemote.setDescription('Password sent to remote during PAP or CHAP Authentication. If this string is empty, then no local to remote authentication will occur.')
m013PppxConfigUserIdFromRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigUserIdFromRemote.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigUserIdFromRemote.setDescription('User ID expected to be received remote during PAP or CHAP Authentication. If this string is empty, then no remote to local authentication will be required.')
m013PppxConfigPasswordFromRemote = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigPasswordFromRemote.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigPasswordFromRemote.setDescription('Password expected to be received remote during PAP or CHAP Authentication. If this string is empty, then no remote to local authentication will be required.')
m013PppxConfigMaxFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMaxFailureCount.setReference('RFC 1661 Section 4.6. Counters and Timers')
if mibBuilder.loadTexts: m013PppxConfigMaxFailureCount.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigMaxFailureCount.setDescription('PPP LCP and NCP Negotiation Maximum Failure Count')
m013PppxConfigMaxConfigureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMaxConfigureCount.setReference('RFC 1661 Section 4.6. Counters and Timers')
if mibBuilder.loadTexts: m013PppxConfigMaxConfigureCount.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigMaxConfigureCount.setDescription('PPP LCP Negotiation Maximum Configure Count')
m013PppxConfigMaxTerminateCount = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigMaxTerminateCount.setReference('RFC 1661 Section 4.6. Counters and Timers')
if mibBuilder.loadTexts: m013PppxConfigMaxTerminateCount.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigMaxTerminateCount.setDescription('PPP LCP Negotiation Maximum Terminate Count')
m013PppxConfigRetryTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 6, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013PppxConfigRetryTimeout.setReference('RFC 1661 Section 4.6. Counters and Timers')
if mibBuilder.loadTexts: m013PppxConfigRetryTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxConfigRetryTimeout.setDescription('PPP LCP Negotiation Retry Timeout')
m013PppxCpTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1), )
if mibBuilder.loadTexts: m013PppxCpTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpTable.setDescription('A table of PPP connection Link Control and Network Control Protocol status and statistics information.')
m013PppxCpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013PppxCpSlotIndex"), (0, "XYLAN-M013-MIB", "m013PppxCpPortIndex"))
if mibBuilder.loadTexts: m013PppxCpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpEntry.setDescription('An entry in the table, containing information about the PPP LCP and NCP status and statistics.')
m013PppxCpSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpSlotIndex.setDescription('A unique value which identifies this WSM board slot that the PPP Control Protocol Entity is running on.')
m013PppxCpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpPortIndex.setDescription('A per-slot unique value which identifies this HDLC logical port.')
m013PppxCpIpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpIpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpIpOperStatus.setDescription('The operational status of the IP network protocol. If the value of this object is up then the finite state machine for the IP network protocol has reached the Opened state.')
m013PppxCpIpxOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpIpxOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpIpxOperStatus.setDescription('The operational status of the IPX network protocol. If the value of this object is up then the finite state machine for the IP network protocol has reached the Opened state.')
m013PppxCpBcpOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("opened", 1), ("not-opened", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpBcpOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpBcpOperStatus.setDescription('The operational status of the BCP network protocol. If the value of this object is up then the finite state machine for the IP network protocol has reached the Opened state.')
m013PppxCpTxLcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxLcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpTxLcpPackets.setDescription('The total number of transmitted Link Control Protocol packets on this PPP connection.')
m013PppxCpRxLcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxLcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpRxLcpPackets.setDescription('The total number of received Link Control Protocol packets on this PPP connection.')
m013PppxCpTxIpcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxIpcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpTxIpcpPackets.setDescription('The total number of transmitted IP Control Protocol packets on this PPP connection.')
m013PppxCpRxIpcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxIpcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpRxIpcpPackets.setDescription('The total number of received IP Control Protocol packets on this PPP connection.')
m013PppxCpTxIpxcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxIpxcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpTxIpxcpPackets.setDescription('The total number of transmitted IPX Control Protocol packets on this PPP connection.')
m013PppxCpRxIpxcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxIpxcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpRxIpxcpPackets.setDescription('The total number of received IPX Control Protocol packets on this PPP connection.')
m013PppxCpTxBcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpTxBcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpTxBcpPackets.setDescription('The total number of transmitted Bridge Control Protocol packets on this PPP connection.')
m013PppxCpRxBcpPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxCpRxBcpPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxCpRxBcpPackets.setDescription('The total number of received Bridge Control Protocol packets on this PPP connection.')
m013PppxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1), )
if mibBuilder.loadTexts: m013PppxStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTable.setDescription('A table of PPP connection statistics information.')
m013PppxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013PppxStatsSlotIndex"), (0, "XYLAN-M013-MIB", "m013PppxStatsPortIndex"))
if mibBuilder.loadTexts: m013PppxStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsEntry.setDescription('An entry in the table, containing information about the PPP PPP connection statistics.')
m013PppxStatsSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsSlotIndex.setDescription('A unique value which identifies this HSM board slot that this PPP link is running on.')
m013PppxStatsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsPortIndex.setDescription('A per-slot unique value which identifies HDLC channel that this PPP link is running on.')
m013PppxStatsTxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxIPOctets.setDescription('The total number of transmitted octets (including the PPP Header field) within routed IP format packets on this PPP connection.')
m013PppxStatsTxIPPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxIPPackets.setDescription('The total number of transmitted routed IP format packets on this PPP connection.')
m013PppxStatsRxIPOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxIPOctets.setDescription('The total number of received octets (including the PPP Header field) within routed IP format packets on this PPP connection.')
m013PppxStatsRxIPPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxIPPackets.setDescription('The total number of received routed IP format packets on this PPP connection.')
m013PppxStatsTxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPXOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxIPXOctets.setDescription('The total number of transmitted octets (including the PPP Header field) within routed IPX format packets on this PPP connection.')
m013PppxStatsTxIPXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxIPXPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxIPXPackets.setDescription('The total number of transmitted routed IPX format packets on this PPP connection.')
m013PppxStatsRxIPXOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPXOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxIPXOctets.setDescription('The total number of received octets (including the PPP Header field) within routed IPX format packets on this PPP connection.')
m013PppxStatsRxIPXPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxIPXPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxIPXPackets.setDescription('The total number of received routed IPX format packets on this PPP connection.')
m013PppxStatsTxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxBPDUOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxBPDUOctets.setDescription('The total number of transmitted octets (including the PPP Header field) within BPDU packets on this PPP connection.')
m013PppxStatsTxBPDUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxBPDUPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxBPDUPackets.setDescription('The total number of transmitted BPDU packets on this PPP connection.')
m013PppxStatsRxBPDUOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxBPDUOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxBPDUOctets.setDescription('The total number of received octets (including the PPP Header field) within BPDU packets on this PPP connection.')
m013PppxStatsRxBPDUPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxBPDUPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxBPDUPackets.setDescription('The total number of received BPDU packets on this PPP connection.')
m013PppxStatsTxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxEthernetOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxEthernetOctets.setDescription('The total number of transmitted octets (including the PPP Header field) within bridged 802.3 format packets on this PPP connection.')
m013PppxStatsTxEthernetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxEthernetPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxEthernetPackets.setDescription('The total number of transmitted bridged 802.3 format packets on this PPP connection.')
m013PppxStatsRxEthernetOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxEthernetOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxEthernetOctets.setDescription('The total number of received octets (including the PPP Header field) within bridged 802.3 format packets on this PPP connection.')
m013PppxStatsRxEthernetPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxEthernetPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxEthernetPackets.setDescription('The total number of received bridged 802.3 format packets on this PPP connection.')
m013PppxStatsTx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTx8025Octets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTx8025Octets.setDescription('The total number of transmitted octets (including the PPP Header field) within 8025 packets on this PPP connection.')
m013PppxStatsTx8025Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTx8025Packets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTx8025Packets.setDescription('The total number of transmitted 8025 packets on this PPP connection.')
m013PppxStatsRx8025Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRx8025Octets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRx8025Octets.setDescription('The total number of received octets (including the PPP Header field) within 8025 packets on this PPP connection.')
m013PppxStatsRx8025Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRx8025Packets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRx8025Packets.setDescription('The total number of received 8025 packets on this PPP connection.')
m013PppxStatsTxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxFDDIOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxFDDIOctets.setDescription('The total number of transmitted octets (including the PPP Header field) within FDDI packets on this PPP connection.')
m013PppxStatsTxFDDIPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsTxFDDIPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsTxFDDIPackets.setDescription('The total number of transmitted FDDI packets on this PPP connection.')
m013PppxStatsRxFDDIOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxFDDIOctets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxFDDIOctets.setDescription('The total number of received octets (including the PPP Header field) within FDDI packets on this PPP connection.')
m013PppxStatsRxFDDIPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 8, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013PppxStatsRxFDDIPackets.setStatus('mandatory')
if mibBuilder.loadTexts: m013PppxStatsRxFDDIPackets.setDescription('The total number of received FDDI packets on this PPP connection.')
m013IPRouterIfTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1), )
if mibBuilder.loadTexts: m013IPRouterIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfTable.setDescription('A list of M013 Router instances in this physical OmniSwitch.')
m013IPRouterIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013IPRouterIfSlotIndex"), (0, "XYLAN-M013-MIB", "m013IPRouterIfLogicalPortIndex"), (0, "XYLAN-M013-MIB", "m013IPRouterIfAddress"))
if mibBuilder.loadTexts: m013IPRouterIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfEntry.setDescription('A VLAN entry.')
m013IPRouterIfSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfSlotIndex.setDescription('Slot for channel being provisioned.')
m013IPRouterIfLogicalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfLogicalPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfLogicalPortIndex.setDescription('A per-slot unique HDLC channel number.')
m013IPRouterIfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfAddress.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfAddress.setDescription('The IP address for this IP interface')
m013IPRouterIfSubNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfSubNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfSubNetMask.setDescription('The IP network subnet mask for this IP interface')
m013IPRouterIfBcastAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfBcastAddress.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfBcastAddress.setDescription('The IP broadcast address for this IP interface')
m013IPRouterIfDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfDescription.setStatus('optional')
if mibBuilder.loadTexts: m013IPRouterIfDescription.setDescription('Textual description of the router instance.')
m013IPRouterIfAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfAdmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfAdmStatus.setDescription("The particular routing environment can be enable(1) or disable(2) (or delete (3)) upon user's request.")
m013IPRouterIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013IPRouterIfOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfOperStatus.setDescription('Provide operating status of a particular router envirnment.')
m013IPRouterIfFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("snap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfFramingType.setDescription('Provides the ability to set the outbound frame type for IP traffic. The default frame type is Ethernet. If the frame type is incompatible with the transmitting media, appropriate translation will be performed at egress.')
m013IPRouterIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfMtu.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfMtu.setDescription('Provides the ability to set the MTU size for this IP interface. The default size is 1500')
m013IPRouterIfProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 9, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013IPRouterIfProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: m013IPRouterIfProtocol.setDescription('The routing protocol(s) for this m013 router port. Which are: ipOther(1), ipRip(2), ipOspf(4), ipBgp(8), ipHello(16), ipIs-is(32)')
m013Dsx3ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1), )
if mibBuilder.loadTexts: m013Dsx3ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3ConfigTable.setDescription('The DS3 Configuration table.')
m013Dsx3ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013Dsx3LineIndex"))
if mibBuilder.loadTexts: m013Dsx3ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3ConfigEntry.setDescription('An entry in the DS3 Configuration table.')
m013Dsx3LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3LineIndex.setDescription('This object is the identifier of a DS3 port on a managed device.')
m013Dsx3ChannelizedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3ChannelizedMode.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3ChannelizedMode.setDescription(' This object controls whether or not DS3 port is channelized. The default mode is enabled which means that this port is channelized to 28 T1s.')
m013Dsx3MdlEIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlEIC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlEIC.setDescription('MDL Equipment Identification Code (EIC).')
m013Dsx3MdlLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlLIC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlLIC.setDescription('MDL Location Identification Code (LIC).')
m013Dsx3MdlFIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlFIC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlFIC.setDescription('MDL Frame Identification Code (FIC).')
m013Dsx3MdlUNIT = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlUNIT.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlUNIT.setDescription('MDL Unit Identification Code (UNIT).')
m013Dsx3MdlPFI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlPFI.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlPFI.setDescription('MDL Path Facility Identification Code (PFI).')
m013Dsx3MdlPortIdleSignalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlPortIdleSignalCode.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlPortIdleSignalCode.setDescription('MDL Port Idle Signal Code')
m013Dsx3MdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlGenerator.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlGenerator.setDescription('MDL Generator.')
m013Dsx3MdlTransmitPath = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlTransmitPath.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlTransmitPath.setDescription('Enables the MDL path message transmission.')
m013Dsx3MdlTransmitIdleSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlTransmitIdleSignal.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlTransmitIdleSignal.setDescription('Enables the MDL idle signal message transmission.')
m013Dsx3MdlTransmitTestSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3MdlTransmitTestSignal.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3MdlTransmitTestSignal.setDescription('Enables the MDL test signal message transmission.')
m013Dsx3FEACEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3FEACEnable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3FEACEnable.setDescription('Allows the DS3 to send the following alarms on the FEAC channel when detected locally: - DS3 Equipment Failure - LOS - OOF - AIS Received .')
m013Dsx3REIEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3REIEnable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3REIEnable.setDescription('Allows the DS3 to send Remote Error Indications.')
m013Dsx3RxMdlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlEnable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlEnable.setDescription('Allows the DS3 to receive MDL messages.')
m013Dsx3RxMdlEIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlEIC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlEIC.setDescription('Received MDL Equipment Identification Code (EIC).')
m013Dsx3RxMdlLIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlLIC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlLIC.setDescription('Received MDL Location Identification Code (LIC).')
m013Dsx3RxMdlFIC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlFIC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlFIC.setDescription('Received MDL Frame Identification Code (FIC).')
m013Dsx3RxMdlUNIT = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlUNIT.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlUNIT.setDescription('Received MDL Unit Identification Code (UNIT).')
m013Dsx3RxMdlPFI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlPFI.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlPFI.setDescription('Received MDL Path Facility Identification Code (PFI).')
m013Dsx3RxMdlPortIdleSignalCode = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlPortIdleSignalCode.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlPortIdleSignalCode.setDescription('Received MDL Port Idle Signal Code')
m013Dsx3RxMdlGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 38))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3RxMdlGenerator.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RxMdlGenerator.setDescription('Received MDL Generator.')
m013Dsx3RemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3RemoteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RemoteStatus.setDescription('This variable indicates the Remote Line Status of the interface.')
m013Dsx3RemoteStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3RemoteStatusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3RemoteStatusLastChange.setDescription("The value of MIB II's sysUpTime object at the time the Remote DS3/E3 entered its current line status state. If the current state was entered prior to the last re-initialization of the proxy-agent, then this object contains a zero value.")
m013Dsx3LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3LedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3LedStatus.setDescription('The LED state for this M013 Port. M013 module has 5 LEDs per port. The current bit definitions for the DS3 Port are: T3EN 0 - GRN OFF (0 off, 1 on) LOS 1 - RED OFF (0 off, 1 on) OOF 2 - RED OFF (0 off, 1 on) AIS 3 - RED OFF (0 off, 1 on) RAI 4 - YEL OFF (0 off, 1 on) ')
m013Dsx3Ds1StatsEnableMask = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx3Ds1StatsEnableMask.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3Ds1StatsEnableMask.setDescription('This is a 28 bit mask which allows selectively enable/disable stats collection on a particular DS1 within DS3 port. Each bit corresponds to one of the 28 DS1 within DS3 port. ')
m013Dsx3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2), )
if mibBuilder.loadTexts: m013Dsx3StatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3StatsTable.setDescription('The DS3 Statistics table.')
m013Dsx3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013Dsx3StatsLineIndex"))
if mibBuilder.loadTexts: m013Dsx3StatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3StatsEntry.setDescription('An entry in the DS3 Statistics table.')
m013Dsx3StatsLineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3StatsLineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3StatsLineIndex.setDescription('This object is the identifier of a DS3 port on a managed device.')
m013Dsx3StatsRxREI = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3StatsRxREI.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3StatsRxREI.setDescription('The number of Remote Error Indications received.')
m013Dsx3StatsRxFEAC = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("dsx3NoFEAC", 1), ("dsx3DS3EquipmentFailure", 2), ("dsx3DS3LOS", 3), ("dsx3DS3OutofFrame", 4), ("dsx3DS3AISreceived", 5), ("dsx3DS3IDLEreceived", 6), ("dsx3DS3NonServiceAffectingEquipFailure", 7), ("dsx3CommonEquipmentFailure", 8), ("dsx3DS3LoopbackReceived", 9), ("dsx3DS1ServiceAffectingEquipmentFailure", 10), ("dsx3DS1NonServiceAffectingEquipFailure", 11), ("dsx3SingleDS1LOS", 12), ("dsx3MultipleDS1sLOS", 13), ("dsx3UnknownCode", 14), ("dsx3UnsupportedCode", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx3StatsRxFEAC.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx3StatsRxFEAC.setDescription('This object indicates the presence FEAC being received by this port. This object only applies to DS3 interface with framing format configured to C-bit parity. A value of dsx3NoFEAC(1) is returned for other cases.')
m013Dsx1ConfigTable = MibTable((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1), )
if mibBuilder.loadTexts: m013Dsx1ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1ConfigTable.setDescription('The DS1 Configuration table.')
m013Dsx1ConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1), ).setIndexNames((0, "XYLAN-M013-MIB", "m013Dsx3LineIndex"))
if mibBuilder.loadTexts: m013Dsx1ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1ConfigEntry.setDescription('An entry in the DS3 Configuration table.')
m013Dsx1LineIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx1LineIndex.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1LineIndex.setDescription('This object is the identifier of a DS1 port on a managed device.')
m013Dsx1T1BertPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertPattern.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1T1BertPattern.setDescription('This variable represents T1 BERT Pattern configuration. The values mean: 1 - 2^15-1, pseudo-random O.151 test pattern (32767-bit long) 2 - 2^20-1, pseudo-random O.151 test pattern (1048575-bit long) 3 - 2^20-QRSS, pseudo-random QRSS O.151 test pattern (1048575-bit long) 4 - 2^23-1, pseudo-random O.151 test pattern (8388607-bit long) 5 - 0s, respective test pattern of all zeros 6 - 1s, respective test pattern of all ones ')
m013Dsx1T1BertInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertInterval.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1T1BertInterval.setDescription('T1 BERT Interval')
m013Dsx1T1BertFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("useframing", 1), ("noframing", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertFraming.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1T1BertFraming.setDescription('T1 BERT Framing')
m013Dsx1T1BertTestEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: m013Dsx1T1BertTestEnable.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1T1BertTestEnable.setDescription('T1 BERT Start/Stop')
m013Dsx1RemoteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx1RemoteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1RemoteStatus.setDescription('This variable indicates the Remote Line Status of the interface.')
m013Dsx1RemoteStatusLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 800, 2, 25, 11, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: m013Dsx1RemoteStatusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: m013Dsx1RemoteStatusLastChange.setDescription("The value of MIB II's sysUpTime object at the time the Remote DS1 entered its current line status state. If the current state was entered prior to the last re-initialization of the proxy-agent, then this object contains a zero value.")
mibBuilder.exportSymbols("XYLAN-M013-MIB", m013PppxStatsRxBPDUOctets=m013PppxStatsRxBPDUOctets, m013PppxConfigGroup=m013PppxConfigGroup, m013Protocol=m013Protocol, m013PppxConfigUserIdToRemote=m013PppxConfigUserIdToRemote, m013Dsx3ConfigTable=m013Dsx3ConfigTable, m013FrxVcStatsRxFDDIOctets=m013FrxVcStatsRxFDDIOctets, m013IPRouterGroup=m013IPRouterGroup, m013PppxStatsTxBPDUOctets=m013PppxStatsTxBPDUOctets, m013PppxStatsRxFDDIPackets=m013PppxStatsRxFDDIPackets, m013PppxConfigPasswordToRemote=m013PppxConfigPasswordToRemote, m013IPRouterIfEntry=m013IPRouterIfEntry, m013FrxVcStatsRxIPFrames=m013FrxVcStatsRxIPFrames, m013IfIndex=m013IfIndex, m013FrxPortDescription=m013FrxPortDescription, m013FrxVcStatsTxIPXFrames=m013FrxVcStatsTxIPXFrames, m013FrxVcStatsRx8025Frames=m013FrxVcStatsRx8025Frames, m013Dsx1T1BertFraming=m013Dsx1T1BertFraming, m013EntryStatus=m013EntryStatus, m013PppxStatsSlotIndex=m013PppxStatsSlotIndex, m013ServiceOperStatus=m013ServiceOperStatus, m013FrxPortDefaultBridgingMode=m013FrxPortDefaultBridgingMode, m013FrxVcStatsRxBPDUOctets=m013FrxVcStatsRxBPDUOctets, m013Ds0Mask=m013Ds0Mask, m013FrxVcStatsRx8025Octets=m013FrxVcStatsRx8025Octets, m013ServiceBridgingMode=m013ServiceBridgingMode, m013PppxStatsRx8025Packets=m013PppxStatsRx8025Packets, m013Ds3PortIndex=m013Ds3PortIndex, m013ServiceDescription=m013ServiceDescription, m013PppxCpSlotIndex=m013PppxCpSlotIndex, m013Dsx3Ds1StatsEnableMask=m013Dsx3Ds1StatsEnableMask, m013Dsx3MdlPFI=m013Dsx3MdlPFI, m013Dsx3MdlFIC=m013Dsx3MdlFIC, m013FrxVcStatsPortIndex=m013FrxVcStatsPortIndex, m013FrxVcStatsTxEthernetFrames=m013FrxVcStatsTxEthernetFrames, m013PppxStatsRxIPXOctets=m013PppxStatsRxIPXOctets, m013IPRouterIfOperStatus=m013IPRouterIfOperStatus, m013Dsx3RemoteStatus=m013Dsx3RemoteStatus, m013ServiceSlotIndex=m013ServiceSlotIndex, m013FrxVcControlPortIndex=m013FrxVcControlPortIndex, m013FrxPortAdminStatus=m013FrxPortAdminStatus, m013ServiceVirtualCircuit=m013ServiceVirtualCircuit, m013Dsx3REIEnable=m013Dsx3REIEnable, m013Dsx3MdlGenerator=m013Dsx3MdlGenerator, m013PppxCpTxIpcpPackets=m013PppxCpTxIpcpPackets, m013FrxVcStatsTxBPDUFrames=m013FrxVcStatsTxBPDUFrames, m013PppxConfigMode=m013PppxConfigMode, m013FrxPortDefaultBridgingVLAN=m013FrxPortDefaultBridgingVLAN, m013Dsx1LineIndex=m013Dsx1LineIndex, m013FrxVcControlDlci=m013FrxVcControlDlci, m013IPRouterIfSlotIndex=m013IPRouterIfSlotIndex, m013ProvisioningEntry=m013ProvisioningEntry, m013FrxPortDefaultIpRoutingAdminStatus=m013FrxPortDefaultIpRoutingAdminStatus, m013PppxConfigRetryTimeout=m013PppxConfigRetryTimeout, m013Dsx1ConfigTable=m013Dsx1ConfigTable, m013PppxStatsEntry=m013PppxStatsEntry, m013ProvisioningTable=m013ProvisioningTable, m013Dsx3RxMdlLIC=m013Dsx3RxMdlLIC, m013PppxStatsRxEthernetPackets=m013PppxStatsRxEthernetPackets, m013PppxCpTxIpxcpPackets=m013PppxCpTxIpxcpPackets, m013PppxConfigMaxConfigureCount=m013PppxConfigMaxConfigureCount, m013Dsx1RemoteStatus=m013Dsx1RemoteStatus, m013PppxConfigDescription=m013PppxConfigDescription, m013ServiceNumber=m013ServiceNumber, m013PppxStatsRxIPOctets=m013PppxStatsRxIPOctets, m013PppxConfigUserIdFromRemote=m013PppxConfigUserIdFromRemote, m013Dsx3Group=m013Dsx3Group, m013PppxStatsRxIPXPackets=m013PppxStatsRxIPXPackets, m013IPRouterIfDescription=m013IPRouterIfDescription, m013Dsx1Group=m013Dsx1Group, m013Dsx3RxMdlUNIT=m013Dsx3RxMdlUNIT, m013ServiceVlans=m013ServiceVlans, m013FrxVcStatsTxEthernetOctets=m013FrxVcStatsTxEthernetOctets, m013IPRouterIfFramingType=m013IPRouterIfFramingType, m013PppxStatsTx8025Packets=m013PppxStatsTx8025Packets, m013Dsx3StatsEntry=m013Dsx3StatsEntry, m013IPRouterIfMtu=m013IPRouterIfMtu, m013PppxConfigMaxTerminateCount=m013PppxConfigMaxTerminateCount, m013PppxStatsPortIndex=m013PppxStatsPortIndex, m013ServiceType=m013ServiceType, m013Dsx3StatsLineIndex=m013Dsx3StatsLineIndex, m013FrxVcStatsRxFDDIFrames=m013FrxVcStatsRxFDDIFrames, m013FrxPortGroup=m013FrxPortGroup, m013PppxStatsTx8025Octets=m013PppxStatsTx8025Octets, m013PppxConfigPasswordFromRemote=m013PppxConfigPasswordFromRemote, m013FrxVcControlTable=m013FrxVcControlTable, m013PppxStatsTxIPXOctets=m013PppxStatsTxIPXOctets, m013ServiceLogicalPortIndex=m013ServiceLogicalPortIndex, m013Dsx3ConfigEntry=m013Dsx3ConfigEntry, m013Dsx3ChannelizedMode=m013Dsx3ChannelizedMode, m013PppxConfigEntry=m013PppxConfigEntry, m013Dsx3RxMdlPortIdleSignalCode=m013Dsx3RxMdlPortIdleSignalCode, m013FrxVcStatsTxBPDUOctets=m013FrxVcStatsTxBPDUOctets, m013PppxStatsTxEthernetOctets=m013PppxStatsTxEthernetOctets, m013FrxVcStatsTxIPFrames=m013FrxVcStatsTxIPFrames, m013PppxCpPortIndex=m013PppxCpPortIndex, m013PppxConfigPortIndex=m013PppxConfigPortIndex, m013FrxVcControlEntry=m013FrxVcControlEntry, m013PppxStatsGroup=m013PppxStatsGroup, m013FrxVcStatsTx8025Octets=m013FrxVcStatsTx8025Octets, m013Dsx3MdlTransmitPath=m013Dsx3MdlTransmitPath, m013PppxCpRxIpcpPackets=m013PppxCpRxIpcpPackets, m013FrxVcStatsRxEthernetFrames=m013FrxVcStatsRxEthernetFrames, m013ServiceAdminStatus=m013ServiceAdminStatus, m013Dsx3RxMdlFIC=m013Dsx3RxMdlFIC, m013FrxPortDefaultBridgingAdminStatus=m013FrxPortDefaultBridgingAdminStatus, m013LogicalPortIndex=m013LogicalPortIndex, m013Dsx3RemoteStatusLastChange=m013Dsx3RemoteStatusLastChange, m013Dsx3StatsRxFEAC=m013Dsx3StatsRxFEAC, m013PppxStatsTxIPXPackets=m013PppxStatsTxIPXPackets, m013PppxStatsRxEthernetOctets=m013PppxStatsRxEthernetOctets, m013FrxVcStatsTxFDDIFrames=m013FrxVcStatsTxFDDIFrames, m013PppxStatsTxIPOctets=m013PppxStatsTxIPOctets, m013PppxStatsTxFDDIOctets=m013PppxStatsTxFDDIOctets, m013Dsx3MdlTransmitIdleSignal=m013Dsx3MdlTransmitIdleSignal, m013Dsx1T1BertInterval=m013Dsx1T1BertInterval, m013PppxConfigMaxFailureCount=m013PppxConfigMaxFailureCount, m013Dsx3StatsRxREI=m013Dsx3StatsRxREI, m013Dsx3RxMdlGenerator=m013Dsx3RxMdlGenerator, m013PppxCpRxBcpPackets=m013PppxCpRxBcpPackets, m013FrxVcStatsRxIPXFrames=m013FrxVcStatsRxIPXFrames, m013ProvisioningGroup=m013ProvisioningGroup, m013Dsx1RemoteStatusLastChange=m013Dsx1RemoteStatusLastChange, m013IPRouterIfBcastAddress=m013IPRouterIfBcastAddress, m013FrxVcStatsDlci=m013FrxVcStatsDlci, m013FrxVcStatsTxIPOctets=m013FrxVcStatsTxIPOctets, m013PppxConfigTable=m013PppxConfigTable, m013PppxCpTable=m013PppxCpTable, m013PppxStatsTxEthernetPackets=m013PppxStatsTxEthernetPackets, m013Dsx3MdlEIC=m013Dsx3MdlEIC, m013PppxConfigIpConfigAdminStatus=m013PppxConfigIpConfigAdminStatus, m013PppxConfigAuthenticationType=m013PppxConfigAuthenticationType, m013Dsx3RxMdlPFI=m013Dsx3RxMdlPFI, m013Dsx3StatsTable=m013Dsx3StatsTable, m013FrxVcStatsRxBPDUFrames=m013FrxVcStatsRxBPDUFrames, m013PppxConfigRemoteIpAddress=m013PppxConfigRemoteIpAddress, m013PppxCpRxLcpPackets=m013PppxCpRxLcpPackets, m013Dsx3MdlUNIT=m013Dsx3MdlUNIT, m013Dsx1T1BertTestEnable=m013Dsx1T1BertTestEnable, m013FrxVcStatsTxIPXOctets=m013FrxVcStatsTxIPXOctets, m013SlotIndex=m013SlotIndex, m013FrxVcStatsSlotIndex=m013FrxVcStatsSlotIndex, m013PppxCpEntry=m013PppxCpEntry, m013IPRouterIfAddress=m013IPRouterIfAddress, m013FrxVcStatsGroup=m013FrxVcStatsGroup, m013PppxCpIpOperStatus=m013PppxCpIpOperStatus, m013PppxCpIpxOperStatus=m013PppxCpIpxOperStatus, m013Dsx3MdlPortIdleSignalCode=m013Dsx3MdlPortIdleSignalCode, m013FrxVcStatsTable=m013FrxVcStatsTable, m013ServiceTableEntryType=m013ServiceTableEntryType, m013FrxVcStatsRxIPOctets=m013FrxVcStatsRxIPOctets, m013FrxVcStatsRxEthernetOctets=m013FrxVcStatsRxEthernetOctets, m013Dsx3LineIndex=m013Dsx3LineIndex, m013Dsx1T1BertPattern=m013Dsx1T1BertPattern, m013PppxCpGroup=m013PppxCpGroup, m013Dsx3LedStatus=m013Dsx3LedStatus, m013PppxStatsRxBPDUPackets=m013PppxStatsRxBPDUPackets, m013FrxPortDynamicVCCreation=m013FrxPortDynamicVCCreation, m013PppxStatsTxBPDUPackets=m013PppxStatsTxBPDUPackets, m013PppxStatsTxFDDIPackets=m013PppxStatsTxFDDIPackets, m013Dsx3RxMdlEIC=m013Dsx3RxMdlEIC, m013PppxCpRxIpxcpPackets=m013PppxCpRxIpxcpPackets, m013PppxStatsTable=m013PppxStatsTable, m013Dsx3MdlTransmitTestSignal=m013Dsx3MdlTransmitTestSignal, m013FrxPortTable=m013FrxPortTable, m013IPRouterIfLogicalPortIndex=m013IPRouterIfLogicalPortIndex, m013Dsx1ConfigEntry=m013Dsx1ConfigEntry, m013Ds1Fraction=m013Ds1Fraction, m013PppxCpBcpOperStatus=m013PppxCpBcpOperStatus, m013Dsx3FEACEnable=m013Dsx3FEACEnable, m013PppxConfigBcpConfigAdminStatus=m013PppxConfigBcpConfigAdminStatus, m013FrxVcControlGroup=m013FrxVcControlGroup, m013PppxCpTxBcpPackets=m013PppxCpTxBcpPackets, m013IPRouterIfProtocol=m013IPRouterIfProtocol, m013FrxVcStatsRxIPXOctets=m013FrxVcStatsRxIPXOctets, m013IPRouterIfTable=m013IPRouterIfTable, m013PppxStatsTxIPPackets=m013PppxStatsTxIPPackets, m013PppxConfigAdminStatus=m013PppxConfigAdminStatus, m013FrxPortEntry=m013FrxPortEntry, m013ServiceEntry=m013ServiceEntry, m013FrxPortSlotIndex=m013FrxPortSlotIndex, m013FrxVcStatsEntry=m013FrxVcStatsEntry, m013PppxStatsRxIPPackets=m013PppxStatsRxIPPackets, m013ServiceTable=m013ServiceTable, m013Dsx3RxMdlEnable=m013Dsx3RxMdlEnable, m013FrxPortPortIndex=m013FrxPortPortIndex, m013PppxStatsRxFDDIOctets=m013PppxStatsRxFDDIOctets, m013IPRouterIfSubNetMask=m013IPRouterIfSubNetMask, m013Dsx3MdlLIC=m013Dsx3MdlLIC, m013ServiceGroup=m013ServiceGroup, m013PppxConfigIpxConfigAdminStatus=m013PppxConfigIpxConfigAdminStatus, m013PppxConfigSlotIndex=m013PppxConfigSlotIndex, m013FrxVcStatsTxFDDIOctets=m013FrxVcStatsTxFDDIOctets, m013FrxVcStatsTx8025Frames=m013FrxVcStatsTx8025Frames, m013IPRouterIfAdmStatus=m013IPRouterIfAdmStatus, m013FrxVcControlIpRoutingAdminStatus=m013FrxVcControlIpRoutingAdminStatus, m013FrxVcControlSlotIndex=m013FrxVcControlSlotIndex, m013Description=m013Description, m013PppxStatsRx8025Octets=m013PppxStatsRx8025Octets, m013PppxCpTxLcpPackets=m013PppxCpTxLcpPackets)
