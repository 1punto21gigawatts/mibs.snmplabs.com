#
# PySNMP MIB module SNANET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SNANET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:08:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, enterprises, Gauge32, TimeTicks, NotificationType, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, NotificationType, Counter32, IpAddress, ObjectIdentity, Integer32, Unsigned32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "enterprises", "Gauge32", "TimeTicks", "NotificationType", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "NotificationType", "Counter32", "IpAddress", "ObjectIdentity", "Integer32", "Unsigned32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
unisys = MibIdentifier((1, 3, 6, 1, 4, 1, 223))
dcp = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8))
snanet = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3))
prodInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 1))
t5node = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 2))
subarea = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 3))
snaNau = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 4))
snaSession = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 5))
snaLink = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 6))
prodInfoDesc = MibScalar((1, 3, 6, 1, 4, 1, 223, 8, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoDesc.setStatus('mandatory')
if mibBuilder.loadTexts: prodInfoDesc.setDescription('A textual description of the software release. Includes the release level and the internal revision level (example: SNA/net Release 5R2 Revision 5.2.10 Installed 06/03/94 07:10 ).')
prodInfoFeatures = MibScalar((1, 3, 6, 1, 4, 1, 223, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: prodInfoFeatures.setDescription('A value which indicates the features included in the software release. The value is a sum. This sum initially takes the value zero, then for each feature a value is assigned corresponding to a power of 2, such that a unique number is generated for each combination of features. Feature 1 Cross-Domain Resource Manager 2 Terminal Connect 4 PU T2.0 Inverted 8 Node Type 2.1 Low Entry Node (len) 16 Network Packet-Switching Interface (NPSI) 32 Remote Batch File Transfer Extended (RBFTE)')
t5nodeTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1), )
if mibBuilder.loadTexts: t5nodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeTable.setDescription('This table contains information about the Type 5 node functionality (SSCP) provided by the SNA/net product. Multiple nodes can be provided by a single SNA/net product.')
t5nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1), ).setIndexNames((0, "SNANET-MIB", "t5nodeIndex"))
if mibBuilder.loadTexts: t5nodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeEntry.setDescription('Entry contains information about the Type 5 node functionality (SSCP).')
t5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeIndex.setDescription('SNA/net can appear as more than one t5node. Used to index instances of this object. Value is assigned by the agent and remains constant.')
t5nodeDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeDomainName.setDescription('The configured name for this domain. This is also the t5nodeSscpName, if t5nodeSscpName is a 0 length string.')
t5nodeOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("standby", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeOperState.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeOperState.setDescription('The operational state of the Type 5 Domain.')
t5nodeSubareaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeSubareaNumber.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeSubareaNumber.setDescription('The subarea number for this domain.')
t5nodeSscpName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeSscpName.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeSscpName.setDescription('The name of the SSCP. Must be unique in the SNA subnetwork. It must match the name of the VTAM CDRM macro that defines this t5node as a CDRM to VTAM. May be a zero length string, in which case, the t5nodeDomainName is the name of the SSCP.')
t5nodeNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeNetworkName.setDescription('The SNA network name.')
t5nodeSscpId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodeSscpId.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodeSscpId.setDescription('This value is used in ACTCDRM messages sent to VTAM.')
t5nodePuName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5nodePuName.setStatus('mandatory')
if mibBuilder.loadTexts: t5nodePuName.setDescription('The PU identifier of this node.')
t5CdrmTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2), )
if mibBuilder.loadTexts: t5CdrmTable.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmTable.setDescription('This table contains information about other Crossdomain Resource Managers known to this type 5 node.')
t5CdrmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1), ).setIndexNames((0, "SNANET-MIB", "t5CdrmT5nodeIndex"), (0, "SNANET-MIB", "t5CdrmName"))
if mibBuilder.loadTexts: t5CdrmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmEntry.setDescription('The entry contains information about CDRMs. Variables have read-only access. The variable t5CdrmAdminState has read-write access and is used to control a CDRM.')
t5CdrmT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this CDRM is associated with.')
t5CdrmName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmName.setDescription('The configured name of the CDRM.')
t5CdrmSnaName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmSnaName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmSnaName.setDescription('The name of the CDRM as it is known in the SNA network. May be a zero length string, in which case, the t5CdrmName is the SNA name.')
t5CdrmType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("external", 1), ("snanet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmType.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmType.setDescription('Identifies the type of CDRM.')
t5CdrmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t5CdrmAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmAdminState.setDescription('Used by the Management Station to control the CDRM. Values up (2) and down (3) can be read or written, while value other (1) is read-only and indicates that this variable has not been set since reboot.')
t5CdrmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmOperState.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmOperState.setDescription('The current operational state of the CDRM in relation to this Type 5 node SSCP.')
t5CdrmSubareaNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmSubareaNumber.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmSubareaNumber.setDescription('The subarea number for the CDRM.')
t5CdrmNetworkName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmNetworkName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmNetworkName.setDescription('The SNA network name for the CDRM.')
t5CdrmElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrmElementAddress.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrmElementAddress.setDescription('Element Address assigned to this CDRM. ')
t5CdrscTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3), )
if mibBuilder.loadTexts: t5CdrscTable.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscTable.setDescription('This table contains information about other Crossdomain Resources known to this type 5 node.')
t5CdrscEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1), ).setIndexNames((0, "SNANET-MIB", "t5CdrscT5nodeIndex"), (0, "SNANET-MIB", "t5CdrscName"))
if mibBuilder.loadTexts: t5CdrscEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscEntry.setDescription('The entry contains information about a CDRSC. Variables have read-only access. The variable t5CdrscAdminState has read-write access and is used to control a CDRSC.')
t5CdrscT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this CDRSC is associated with.')
t5CdrscName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscName.setDescription('The configured name of the CDRSC.')
t5CdrscSnaName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscSnaName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscSnaName.setDescription('The name of the CDRSC as it is known in the SNA Network. The SnaName is the same a the t5CdrscName when this value is a zero length string.')
t5CdrscCdrmName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscCdrmName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscCdrmName.setDescription('The name the CDRM which owns this CDRSC.')
t5CdrscAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t5CdrscAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscAdminState.setDescription('Used by the Management Station to control the use of the CDRSC. Values up (2) and down (3) may be read or written, while the value other(1) read-only and indicates this variable has not been set since the last reboot.')
t5CdrscOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("active", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscOperState.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscOperState.setDescription('The current operational state of the CDRSC in relation to this Type 5 node SSCP.')
t5CdrscSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscSessions.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscSessions.setDescription('The number of active SNA LU-LU sessions for this CDRSC.')
t5CdrscDlmName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscDlmName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscDlmName.setDescription('The name of the Default Logon mode table used by this CDRSC.')
t5CdrscCosName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CdrscCosName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CdrscCosName.setDescription('The name of the Class of Service table used by this CDRSC.')
t5DlmTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4), )
if mibBuilder.loadTexts: t5DlmTable.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmTable.setDescription('This table contains information about Default Logon Mode Tables used by the SSCP for LU-LU session establishment.')
t5DlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1), ).setIndexNames((0, "SNANET-MIB", "t5DlmT5nodeIndex"), (0, "SNANET-MIB", "t5DlmName"))
if mibBuilder.loadTexts: t5DlmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmEntry.setDescription('The entry contains a Default Logon Mode Table entry. All variables are read-only.')
t5DlmT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this DLM is associated with.')
t5DlmName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmName.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmName.setDescription('The configured name of the Default Logon Mode.')
t5DlmSnaName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmSnaName.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmSnaName.setDescription('The name of the Default Logon Mode as it is known in the SNA network. May contain a zero length string, in which case, the t5DlmName is the SNA name.')
t5DlmFmprof = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmFmprof.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmFmprof.setDescription('The Function Management Profile type, a value from 0 to 18 hexadecimal(byte 1 in the session parameter field).')
t5DlmTsprof = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmTsprof.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmTsprof.setDescription('The Transmission Services profile type, a value from 1 to 17 hexadecimal(byte 2 in the session parameter field).')
t5DlmPriprot = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmPriprot.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmPriprot.setDescription('The primary logical unit protocol, a value from 0 to 0FF hexadecimal(byte 3 in the session parameter field).')
t5DlmSecprot = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmSecprot.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmSecprot.setDescription('The secondary logical unit protocol, a value from 0 to 0FF hexadecimal(byte 4 in the session parameter field).')
t5DlmComprot = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmComprot.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmComprot.setDescription('The common logical unit protocol, a value from 0 to 0FFFF hexadecimal(byte 5 and 6 in the session parameter field).')
t5DlmRusizes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmRusizes.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmRusizes.setDescription('The maximum length of data request units in bytes. A four digit hexadecimal value is provided in the same format as for the ACF/VTAM generation(bytes 9 and 10 in the session parameter field.')
t5DlmPservic = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmPservic.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmPservic.setDescription('The logical unit presentation services profile and usage field(bytes 13 through 24 in the session parameter field). A 24 digit hexadecimal number.')
t5DlmPsndpac = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmPsndpac.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmPsndpac.setDescription('The primary send pacing count(byte 11 in the session parameter field), a value from 0 to 63 decimal.')
t5DlmPrcvpac = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmPrcvpac.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmPrcvpac.setDescription('The primary receive pacing count(byte 12 in the session parameter field), a value from 0 to 63 decimal.')
t5DlmSsndpac = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmSsndpac.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmSsndpac.setDescription('The secondary send pacing count(byte 7 in the session parameter field), a value from 0 to 63 decimal.')
t5DlmSrcvpac = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmSrcvpac.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmSrcvpac.setDescription('The secondary receive pacing count(byte 8 in the session parameter field), a value from 0 to 63 decimal.')
t5DlmEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmEncr.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmEncr.setDescription('The encryption/decryption type expected by the logical unit(first four bits of byte 26 in the session parameter field), a value from 0 to F hexadecimal.')
t5DlmBindType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmBindType.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmBindType.setDescription('The BIND type, a value of 0 or 1. 0 means a negotiable BIND 1 means a non-negotiable BIND.')
t5DlmCos = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5DlmCos.setStatus('mandatory')
if mibBuilder.loadTexts: t5DlmCos.setDescription('The name of the class of service to be used for a session that uses this logon mode.')
t5CosTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 5), )
if mibBuilder.loadTexts: t5CosTable.setStatus('mandatory')
if mibBuilder.loadTexts: t5CosTable.setDescription('This table contain class of service (COS) entries.')
t5CosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 5, 1), ).setIndexNames((0, "SNANET-MIB", "t5CosT5nodeIndex"), (0, "SNANET-MIB", "t5CosName"))
if mibBuilder.loadTexts: t5CosEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t5CosEntry.setDescription('The entry contains a class of service entry. All variables are read-only.')
t5CosT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CosT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t5CosT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this COS is associated with.')
t5CosName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CosName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CosName.setDescription('The configured name of the class of service entry.')
t5CosSnaName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CosSnaName.setStatus('mandatory')
if mibBuilder.loadTexts: t5CosSnaName.setDescription('The name of the class of service entry as it is known in the SNA Network. May be a zero length string, in which case, the t5CosName is the SNA name.')
t5CosVrids = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5CosVrids.setStatus('mandatory')
if mibBuilder.loadTexts: t5CosVrids.setDescription('A list of virtual routes, in hierarchical order, that are used for LU-LU session traffic. The list is octet pairs in the form x,y where x is the virtual route number from 0 to 7, and y is the transmission priority from 0 to 3. Up to 24 ordered pairs are possible (vr1,tp1 vr2,tp2 ...vr24,tp24).')
t5AliasTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 6), )
if mibBuilder.loadTexts: t5AliasTable.setStatus('mandatory')
if mibBuilder.loadTexts: t5AliasTable.setDescription('This table is a crossreference for alias names to SNA/net resource names. The current use of this table is for alternate logon names for Crossdomain resources.')
t5AliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 6, 1), ).setIndexNames((0, "SNANET-MIB", "t5AliasT5nodeIndex"), (0, "SNANET-MIB", "t5AliasName"))
if mibBuilder.loadTexts: t5AliasEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t5AliasEntry.setDescription('The entry contains the alias name and a reference to the SNA (CDRSC) resource it refers to. All variables are read-only.')
t5AliasT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5AliasT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t5AliasT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this Alias Name is associated with.')
t5AliasName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5AliasName.setStatus('mandatory')
if mibBuilder.loadTexts: t5AliasName.setDescription('The configured alias name.')
t5AliasResourceId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 2, 6, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t5AliasResourceId.setStatus('mandatory')
if mibBuilder.loadTexts: t5AliasResourceId.setDescription('A reference to the SNA resource (CDRSC) identified by this Alias Name. It is the object identifier representing the instance of the index variable of the resource.')
saErTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1), )
if mibBuilder.loadTexts: saErTable.setStatus('mandatory')
if mibBuilder.loadTexts: saErTable.setDescription('This table contains information about explicit routes between this subarea and other network subareas.')
saErEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1, 1), ).setIndexNames((0, "SNANET-MIB", "saErT5nodeIndex"), (0, "SNANET-MIB", "saErDestinationSubarea"), (0, "SNANET-MIB", "saErNumber"))
if mibBuilder.loadTexts: saErEntry.setStatus('mandatory')
if mibBuilder.loadTexts: saErEntry.setDescription('This entry contain information about an explicit route.')
saErT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saErT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: saErT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this explicit route is associated with.')
saErDestinationSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saErDestinationSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: saErDestinationSubarea.setDescription('The destination subarea number for this Expicit Route.')
saErNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saErNumber.setStatus('mandatory')
if mibBuilder.loadTexts: saErNumber.setDescription('The number of the Explicit Route.')
saErTgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saErTgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: saErTgNumber.setDescription('The Transmission Group number associated with this Explicit Route.')
saErOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("other", 1), ("inoperative", 2), ("operative", 3), ("actPend", 4), ("innActPend", 5), ("innAct", 6), ("actNoSend", 7), ("active", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saErOperState.setStatus('mandatory')
if mibBuilder.loadTexts: saErOperState.setDescription('The current operational state of the Explicit Route.')
saVrTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2), )
if mibBuilder.loadTexts: saVrTable.setStatus('mandatory')
if mibBuilder.loadTexts: saVrTable.setDescription('This table contains information about virtual routes between this subarea and other network subareas. Virtual routes are logical connections between subareas and are mapped to explicit routes.')
saVrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1), ).setIndexNames((0, "SNANET-MIB", "saVrT5nodeIndex"), (0, "SNANET-MIB", "saVrErNumber"), (0, "SNANET-MIB", "saVrNumber"), (0, "SNANET-MIB", "saVrTransmissionPriority"))
if mibBuilder.loadTexts: saVrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: saVrEntry.setDescription('This entry contains information about a virtual route. All variables are read-only.')
saVrT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: saVrT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this virtual route is associated with.')
saVrErNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrErNumber.setStatus('mandatory')
if mibBuilder.loadTexts: saVrErNumber.setDescription('The expicit route to which this virtual route belongs.')
saVrNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrNumber.setStatus('mandatory')
if mibBuilder.loadTexts: saVrNumber.setDescription('The number of the Virtual Route.')
saVrTransmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrTransmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: saVrTransmissionPriority.setDescription('The transmission priority for this virtual route.')
saVrWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: saVrWindowSize.setDescription('The initial window size for this virtual route.')
saVrMinWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrMinWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: saVrMinWindowSize.setDescription('The minimum window size for this virtual route.')
saVrMaxWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrMaxWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: saVrMaxWindowSize.setDescription('The maximum window size for this virtual route.')
saVrPacingCount = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saVrPacingCount.setStatus('mandatory')
if mibBuilder.loadTexts: saVrPacingCount.setDescription('The pacing count for this virtual route.')
saTransmissionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3))
saTgTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1), )
if mibBuilder.loadTexts: saTgTable.setStatus('mandatory')
if mibBuilder.loadTexts: saTgTable.setDescription('This table contains information about transmission groups between this subarea and other network subareas. Entries are dynamically added to this table as they are learned from TG link activations.')
saTgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1), ).setIndexNames((0, "SNANET-MIB", "saTgT5nodeIndex"), (0, "SNANET-MIB", "saTgNumber"), (0, "SNANET-MIB", "saTgAdjacentSubarea"))
if mibBuilder.loadTexts: saTgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: saTgEntry.setDescription('This entry contains information about a transmission group.')
saTgT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: saTgT5nodeIndex.setDescription('Index in the t5nodetable of the t5node this transmission group is associated with.')
saTgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: saTgNumber.setDescription('The number of this transmission group.')
saTgAdjacentSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgAdjacentSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: saTgAdjacentSubarea.setDescription('The adjacent subarea number with which this transmission group is associated.')
saTgOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2), ("pendActive", 3), ("pendInactive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgOperState.setStatus('mandatory')
if mibBuilder.loadTexts: saTgOperState.setDescription('The current operational state of this transmission group.')
saTgMaxSendPiuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65565))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgMaxSendPiuSize.setStatus('mandatory')
if mibBuilder.loadTexts: saTgMaxSendPiuSize.setDescription('The maximum Path Information Unit size in bytes that may be sent on this Tranmission Group.')
saTgMaxReceivePiuSize = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgMaxReceivePiuSize.setStatus('mandatory')
if mibBuilder.loadTexts: saTgMaxReceivePiuSize.setDescription('The maximum Path Information Unit size in bytes that may be received on this Tranmission Group.')
saTgActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgActiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: saTgActiveTime.setDescription('The value of sysUpTime when this transmission group became active.')
saTgLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLastStateChange.setDescription('The value of sysUpTime when the last state change occurred.')
saTgSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: saTgSentBytes.setDescription('The number of bytes sent on this transmission group.')
saTgReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgReceivedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: saTgReceivedBytes.setDescription('The number of bytes received on transmission group.')
saTgSentBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgSentBtus.setStatus('mandatory')
if mibBuilder.loadTexts: saTgSentBtus.setDescription('The number of Basic Transmission Units sent on this transmission group.')
saTgReceivedBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgReceivedBtus.setStatus('mandatory')
if mibBuilder.loadTexts: saTgReceivedBtus.setDescription('The number of Basic Transmission Units received on this transmission group.')
saTgLinkTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2), )
if mibBuilder.loadTexts: saTgLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkTable.setDescription('This table contains an entry for each link which may be used for a transmission group. The links are not associated with a transmission group until saTgLinkOperState is active (2).')
saTgLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1), ).setIndexNames((0, "SNANET-MIB", "saTgLinkT5nodeIndex"), (0, "SNANET-MIB", "saTgLinkIndex"))
if mibBuilder.loadTexts: saTgLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkEntry.setDescription('Contains configuration and state information about TG links. Variables have read-only access. The variable saTgLinkAdminState has read-write access and is used to control a TG link.')
saTgLinkT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkT5nodeIndex.setDescription('Identifies the Type 5 node with which this transmission group link is associated.')
saTgLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkIndex.setDescription('Unique index of this transmisson group link. The value is assigned by the agent and is unique among TG and PU links.')
saTgLinkTgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkTgNumber.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkTgNumber.setDescription('The transmission group number to which this link is associated. Contains a value of zero (0) when saTgLinkOperState is inactive(1).')
saTgLinkAdjacentSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkAdjacentSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkAdjacentSubarea.setDescription('The adjacent subarea number with which this transmission group is associated. Contains a value of zero when saTgLinkOperState in inactive(1).')
saTgLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkName.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkName.setDescription('The administratively assigned name of the transmission group link.')
saTgLinkOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkOperState.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkOperState.setDescription('The current operational state of this transmission group link.')
saTgLinkAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: saTgLinkAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkAdminState.setDescription('Used by the Management Station to control the transmission group Link. Values up (2) and down (3) can be read or written, while value other (1) is read-only and indicates that this variable has not been set since reboot.')
saTgLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("internal", 1), ("link8022", 2), ("qllc", 3), ("sdlc", 4), ("channel", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkType.setDescription('The type of transmission group link.')
saTgLinkSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkSpecific.setDescription('A row in a table specific for the link. It is the object identifier representing the instance of the index variable in one of the snaLink tables from this MIB.')
saTgLinkActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkActiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkActiveTime.setDescription('The value of sysUpTime when this TG link became active.')
saTgLinkLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkLastStateChange.setDescription('The value of sysUptime when the last state change occurred.')
saTgLinkSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkSentBytes.setDescription('The number of bytes sent on this TG link.')
saTgLinkReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkReceivedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkReceivedBytes.setDescription('The number of bytes received on this TG link.')
saTgLinkSentBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkSentBtus.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkSentBtus.setDescription('The number of Basic Transmission Units sent on this TG link.')
saTgLinkReceivedBtus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 3, 3, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: saTgLinkReceivedBtus.setStatus('mandatory')
if mibBuilder.loadTexts: saTgLinkReceivedBtus.setDescription('The number of Basic Transmission Units received on this TG link.')
t2node = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1))
snaLu = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2))
applicationLu = MibIdentifier((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3))
t2nodeTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1), )
if mibBuilder.loadTexts: t2nodeTable.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeTable.setDescription('This table contains all configured and dynamic parameters of type 2 nodes have read-only access. There is also one control parameter, t2nodeAdminState which has read-write access. The link specific parameters are contained in a row of a separate table referenced by the snaLinkSpecific object.')
t2nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1), ).setIndexNames((0, "SNANET-MIB", "t2nodeT5nodeIndex"), (0, "SNANET-MIB", "t2nodeIndex"))
if mibBuilder.loadTexts: t2nodeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeEntry.setDescription('Entry contains all parameters of one type 2 node. They have read-only access. The entry is created by the Agent. The variable t2nodeAdminState has read-write access and is used to start or stop the node.')
t2nodeT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeT5nodeIndex.setDescription('Index in the t5nodeTable to which this t2node is associated.')
t2nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeIndex.setDescription('Used to index the instances of objects assigned by the Agent.')
t2nodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeName.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeName.setDescription('The value identifies the name of the Node.')
t2nodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("pu20prim", 2), ("pu20sec", 3), ("t21LEN", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeType.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeType.setDescription('This value identifies the type of Node.')
t2nodeBlockNum = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeBlockNum.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeBlockNum.setDescription('The value identifies the block number for this Node instance. It is the first 3 hexadecimal digits of the t2node id.')
t2nodeIdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeIdNum.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeIdNum.setDescription('The value identifies the ID number for this Node instance. This is the last 5 hexadecimal digits of the t2node id.')
t2nodeMaxPiu = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeMaxPiu.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeMaxPiu.setDescription('Maximum number of octets that can be exchanged by this PU in one Pathcontrol Information Unit (PIU).')
t2nodeLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("internal", 1), ("link8022", 2), ("qllc", 3), ("sdlc", 4), ("channelAttach", 5), ("tcpip", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeLinkType.setDescription('The type of link protocol used for this PU.')
t2nodeLinkSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 9), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeLinkSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeLinkSpecific.setDescription('The row in a table specific for the link. It is the object identifier representing the instance of the index variable in one of the snaLink tables from this MIB.')
t2nodeOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("active", 4), ("busy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeOperState.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeOperState.setDescription('The operational state of the type 2 Node.')
t2nodeAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("stop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: t2nodeAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeAdminState.setDescription('The administrative state of the type 2 Node and is used by the Management Station to start or stop the Node. The values that can be read and written are: start (2) - this value has to be used to start, stop (3) - this value has to be used to stop. The values that can be read only are: other (1) - this value indicates that the variable has not been set after reboot.')
t2nodeStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStartTime.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStartTime.setDescription('The value of sysUpTime at type 2 Node activation.')
t2nodeLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeLastStateChange.setDescription('The value of sysUpTime at the last state change of the type 2 Node.')
t2nodeActFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeActFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeActFailureReason.setDescription('The sense code for the activation failure. It will be sent in the trap t2NodeActFailTrap.')
t2nodeStatsTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2), )
if mibBuilder.loadTexts: t2nodeStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsTable.setDescription('This table contains the dynamic parameters which have read-only access. The entries in this table augment the entries in the t2nodeTable and cannot be created by Management Station.')
t2nodeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1), ).setIndexNames((0, "SNANET-MIB", "t2nodeStatsT5nodeIndex"), (0, "SNANET-MIB", "t2nodeStatsIndex"))
if mibBuilder.loadTexts: t2nodeStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsEntry.setDescription('The entry contains parameters which describe the statistics of one t2node. They have read-only access. The counters represent traffic for all kinds of sessions: LU-LU, SSCP-PU, and SSCP-LU. The entry is created by the Agent.')
t2nodeStatsT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsT5nodeIndex.setDescription(' Index in the t5nodeTable to which this t2node is associated.')
t2nodeStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsIndex.setDescription('The instance of the entry parameters. The index value is taken by the Agent from t2nodeIndex.')
t2nodeStatsSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsSentBytes.setDescription('The number of bytes sent by this Node.')
t2nodeStatsReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsReceivedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsReceivedBytes.setDescription('The number of bytes received by this Node.')
t2nodeStatsSentPius = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsSentPius.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsSentPius.setDescription('The number of PIUs sent by this Node.')
t2nodeStatsReceivedPius = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsReceivedPius.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsReceivedPius.setDescription('The number of PIUs received by this Node.')
t2nodeStatsSentNegativeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsSentNegativeResps.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsSentNegativeResps.setDescription('The number of negative responses sent by this Node.')
t2nodeStatsReceivedNegativeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsReceivedNegativeResps.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsReceivedNegativeResps.setDescription('The number of negative responses received by this Node.')
t2nodeStatsActiveLus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsActiveLus.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsActiveLus.setDescription('The number of LUs currently active on this PU.')
t2nodeStatsActLus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsActLus.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsActLus.setDescription('The number of LUs on this type 2 Node which have active SSCP-LU sessions.')
t2nodeStatsInActLus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsInActLus.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsInActLus.setDescription('The number of LUs on this type 2 Node which do not have active SSCP-LU sessions.')
t2nodeStatsBindLus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t2nodeStatsBindLus.setStatus('mandatory')
if mibBuilder.loadTexts: t2nodeStatsBindLus.setDescription('The number of LUs on this type 2 Node which have received and acknowledged a BIND request.')
snaLuTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1), )
if mibBuilder.loadTexts: snaLuTable.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuTable.setDescription('This table contains configuration and state information relating to LUs.')
snaLuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1), ).setIndexNames((0, "SNANET-MIB", "snaLuT5nodeIndex"), (0, "SNANET-MIB", "snaLuT2nodeIndex"), (0, "SNANET-MIB", "snaLuIndex"))
if mibBuilder.loadTexts: snaLuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuEntry.setDescription('Contains configuration and state objects relating to an LU. All have read-only access with the exeption of snaLuAdminState which has read-write access and is used by the Management station to control the state of the LU.')
snaLuT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuT5nodeIndex.setDescription('Index in the t5nodeTable to which this LU is associated.')
snaLuT2nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuT2nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuT2nodeIndex.setDescription('Index in the t2nodeTable of the type 2 Node with which this LU is associated.')
snaLuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuIndex.setDescription('This value identifies a unique index for an LU instance within a type 2 Node.')
snaLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuName.setDescription('The SNA name for this LU. ')
snaLuType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("lu0", 2), ("lu1", 3), ("lu2", 4), ("lu3", 5), ("lu62", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuType.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuType.setDescription('Identifies whether the LU is Type 0, 1, 2, 3 or 6.2')
snaLuLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuLocalAddress.setDescription('The local address for this LU. It is a byte with a value ranging in size from 0 to 255. For dependent LUs this value ranges from 1 to 255. For independent Lus this value is always 0.')
snaLuUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuUserName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuUserName.setDescription('The name of the non-sna terminal or SNA LU that is using this LU. This value does not apply to all LUs and contains a zero length string if not known or does not apply.')
snaLuPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuPoolName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuPoolName.setDescription('The name of the LU pool to which this LU belongs. An LU Pool is configured by the user. It contains a group of LUs any of which can be assigned to a user requesting an LU by the Pool name. May be a zero length string if this LU does not belong to a pool.')
snaLuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuOperState.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuOperState.setDescription('The current operational state of this LU: For dependent LUs active(2) indicates the SSCP-LU session is active. For Independent LUs active(2) indicates that the LU is able to send or receive BINDs.')
snaLuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snaLuAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuAdminState.setDescription('This object is used by a management station to control the LU. Values up(2) and down(3) can be read or written, while a value other(1) is read-only and indicates that this variable has not been set since reboot.')
snaLuLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuLastStateChange.setDescription('The value of sysUpTime when the last state change occurred.')
snaLuActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuActiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuActiveTime.setDescription('The value of sysUpTime when this LU becomes active.')
snaLuBindFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLuBindFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: snaLuBindFailureReason.setDescription('The sense code when there is a bind failure.')
applicationLuTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1), )
if mibBuilder.loadTexts: applicationLuTable.setStatus('mandatory')
if mibBuilder.loadTexts: applicationLuTable.setDescription('Table of application LUs configuration and operational information.')
appLuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1), ).setIndexNames((0, "SNANET-MIB", "appLuT5nodeIndex"), (0, "SNANET-MIB", "appLuIndex"))
if mibBuilder.loadTexts: appLuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: appLuEntry.setDescription('Contains configuration and operational variables of an application LU. Variables are read-only with the exception of appLuAdminState which has read-write access and is used by the Management station to control the state of the Application LU.')
appLuT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: appLuT5nodeIndex.setDescription('Index in the t5nodeTable to which this application LU is associated.')
appLuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: appLuIndex.setDescription('Unique index of an application LU.')
appLuName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuName.setStatus('mandatory')
if mibBuilder.loadTexts: appLuName.setDescription('Configured name for this application LU.')
appLuConversionType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("interactive", 1), ("transparent", 2), ("native", 3), ("netvOper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuConversionType.setStatus('mandatory')
if mibBuilder.loadTexts: appLuConversionType.setDescription('Indicates the type of protocol conversion being performed on behalf of the application LU.')
appLuHostInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("interactive", 1), ("outbound", 2), ("appc", 3), ("batch", 4), ("rbfte", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuHostInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: appLuHostInterfaceType.setDescription('Identifies the type of application interface used by this application LU.')
appLuApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuApplicationName.setStatus('mandatory')
if mibBuilder.loadTexts: appLuApplicationName.setDescription('The name of the host application which uses this application LU.')
appLuGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuGatewayName.setStatus('mandatory')
if mibBuilder.loadTexts: appLuGatewayName.setDescription('The name of the application gateway. The gateway is used to group application LUs together for management purposes.')
appLuAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: appLuAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: appLuAdminState.setDescription('Used by the Management Station to control the Application LU. Values up (2) and down (3) can be read or written, while value other (1) is read-only and indicates that this variable has not been set since reboot.')
appLuOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("inactive", 3), ("active", 4), ("busy", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuOperState.setStatus('mandatory')
if mibBuilder.loadTexts: appLuOperState.setDescription('The current operational state of this application LU: whether it is inactive, active, or has one of more active sessions.')
appLuActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuActiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: appLuActiveTime.setDescription('The value of sysUpTime when this application LU becomes active.')
appLuLastStateChange = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuLastStateChange.setStatus('mandatory')
if mibBuilder.loadTexts: appLuLastStateChange.setDescription('The value of sysUpTime when the last state change occurred.')
appLuBindFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuBindFailureReason.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBindFailureReason.setDescription('The sense code when there is a bind failure.')
appLuBatchDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2), )
if mibBuilder.loadTexts: appLuBatchDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceTable.setDescription('Table of configuration information for batch devices associated with a batch type application LU.')
appLuBatchDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2, 1), ).setIndexNames((0, "SNANET-MIB", "appLuBatchDeviceT5nodeIndex"), (0, "SNANET-MIB", "appLuBatchDeviceLuIndex"), (0, "SNANET-MIB", "appLuBatchDeviceName"))
if mibBuilder.loadTexts: appLuBatchDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceEntry.setDescription('The entry contains configuration variables for batch devices associated with batch type application LUs.')
appLuBatchDeviceT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuBatchDeviceT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceT5nodeIndex.setDescription('Index in the t5nodeTable to which this batch device is associated.')
appLuBatchDeviceLuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuBatchDeviceLuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceLuIndex.setDescription('The index of an application LU to which this batch device is associated.')
appLuBatchDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuBatchDeviceName.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceName.setDescription('The configured name for this batch device.')
appLuBatchDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("console", 1), ("cardreader", 2), ("cardpunch", 3), ("printer", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuBatchDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceType.setDescription('Indicates the type of batch device.')
appLuBatchDeviceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: appLuBatchDeviceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: appLuBatchDeviceNumber.setDescription('A device number used to identify multiple devices of the same type.')
snaSessionTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1), )
if mibBuilder.loadTexts: snaSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessionTable.setDescription('Table containing dynamic statistics information relating to SNA sessions.')
snaSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1), ).setIndexNames((0, "SNANET-MIB", "snaSessT5nodeIndex"), (0, "SNANET-MIB", "snaSessNauName"), (0, "SNANET-MIB", "snaSessNauSessNumber"))
if mibBuilder.loadTexts: snaSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessionEntry.setDescription('Contains information about an SNA session. Objects in this table have read-only access.')
snaSessT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessT5nodeIndex.setDescription('Identifies the Type 5 node which is associated with this SNA session.')
snaSessNauName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessNauName.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessNauName.setDescription('The name of the SNA network addressable unit (NAU).')
snaSessNauSessNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessNauSessNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessNauSessNumber.setDescription('A number identifying the session number within the NAU.')
snaSessType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sscp-sscp", 1), ("lu-lu", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessType.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessType.setDescription('Identifies the type of SNA session.')
snaSessNauElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessNauElementAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessNauElementAddress.setDescription('The element address assigned to the SNA NAU by the Type 5 node.')
snaSessState = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("initiating", 1), ("terminating", 2), ("queued", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessState.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessState.setDescription('The state of the session. Valid values for all session types are: initiating (1), terminating (2), and active (4). The value queued (3) is valid only for snaSessType value of lu-lu (2). Some variables are unknown when the session state is initiating (1) or queued (2). ')
snaSessActiveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessActiveTime.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessActiveTime.setDescription('The value of sysUpTime when session becomes active.')
snaSessSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessSentBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessSentBytes.setDescription('The number of bytes sent on this SNA session.')
snaSessReceivedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessReceivedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessReceivedBytes.setDescription('The number of bytes received on this session.')
snaSessSentRus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessSentRus.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessSentRus.setDescription('The number of RUs sent on this session.')
snaSessReceivedRus = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessReceivedRus.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessReceivedRus.setDescription('The number of RUs received on this session.')
snaSessSentNegativeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessSentNegativeResps.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessSentNegativeResps.setDescription('The number of negative responses sent on this session.')
snaSessReceivedNegativeResps = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessReceivedNegativeResps.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessReceivedNegativeResps.setDescription('The number of negative responses received on this session.')
snaSessPartnerNauName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessPartnerNauName.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessPartnerNauName.setDescription('The name of the session partner NAU. May be a zero length string if not known.')
snaSessPartnerNauSubarea = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessPartnerNauSubarea.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessPartnerNauSubarea.setDescription('The subarea number of the session partner NAU. Will be zero if not known.')
snaSessPartnerNauElementAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessPartnerNauElementAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessPartnerNauElementAddress.setDescription('The element address of the session partner NAU. Will be zero if not known.')
snaSessVirtualRouteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessVirtualRouteNumber.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessVirtualRouteNumber.setDescription('A value indicating the virtual route number for this session. Will be zero if not known.')
snaSessTransmissionPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessTransmissionPriority.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessTransmissionPriority.setDescription('A transmission priority for this session. Will be zero if not known.')
snaSessProcCorrelationId = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessProcCorrelationId.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessProcCorrelationId.setDescription('This variable uniquely identifies this lu-lu session. Will contain a zero length string if snaSessType value is not lu-lu (2).')
snaSessPluIndicator = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("plu", 2), ("slu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessPluIndicator.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessPluIndicator.setDescription('It indicates whether LU is primary or secondary for this session. Will be other (1) if snaSessType value is not lu-lu (2).')
snaSessModeName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 5, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaSessModeName.setStatus('mandatory')
if mibBuilder.loadTexts: snaSessModeName.setDescription('The name of the mode used for this session. Contains a zero length string if snaSessType value is not lu-lu (2).')
snaLink802Dot2Table = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1), )
if mibBuilder.loadTexts: snaLink802Dot2Table.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2Table.setDescription('This table contains Managed Objects which describe basic configuration parameters for PUs or TGs using 802.2 links.')
snaLink802Dot2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1), ).setIndexNames((0, "SNANET-MIB", "snaLink802Dot2T5nodeIndex"), (0, "SNANET-MIB", "snaLink802Dot2Index"))
if mibBuilder.loadTexts: snaLink802Dot2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2Entry.setDescription('Entry contains all link configuration parameters for one PU or TG. The objects in the entry have read-only access.')
snaLink802Dot2T5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2T5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2T5nodeIndex.setDescription('The index of the Type 5 node associated with this link.')
snaLink802Dot2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2Index.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2Index.setDescription('The index variable assigned by Agent.')
snaLink802Dot2SourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2SourceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2SourceAddress.setDescription('Medium Access Control (MAC) address of the source node of this logical link.')
snaLink802Dot2SourceSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2SourceSAP.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2SourceSAP.setDescription("The source node's Service Access Point (SSAP).")
snaLink802Dot2DestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2DestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2DestinationAddress.setDescription('Medium Access Control (MAC) address of the destination node of this logical link.')
snaLink802Dot2DestinationSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2DestinationSAP.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2DestinationSAP.setDescription('The Service Access Point used by the remote node (DSAP).')
snaLink802Dot2MediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2MediaType.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2MediaType.setDescription('The underlying physical media type: token-ring or ethernet.')
snaLink802Dot2Role = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondary", 1), ("primary", 2), ("negotiable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2Role.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2Role.setDescription('The role of the PU used for the 802.2 link.')
snaLink802Dot2LineName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2LineName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2LineName.setDescription('The configured name of the associated line.')
snaLink802Dot2Port = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2Port.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2Port.setDescription('The physical port location in the system. The first octet contains the port processor id (0 to 255) and the second octet contains the line number (0-8) for line modules which support multiple lines. ')
snaLink802Dot2IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLink802Dot2IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLink802Dot2IfIndex.setDescription('The IfIndex value of the interface used by this link.')
snaLinkSdlcTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2), )
if mibBuilder.loadTexts: snaLinkSdlcTable.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcTable.setDescription('This table contains Managed Objects which describe basic configuration parameters for PUs using SDLC link.')
snaLinkSdlcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1), ).setIndexNames((0, "SNANET-MIB", "snaLinkSdlcT5nodeIndex"), (0, "SNANET-MIB", "snaLinkSdlcIndex"))
if mibBuilder.loadTexts: snaLinkSdlcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcEntry.setDescription('Entry contains all link configuration parameters for one PU. The objects in the entry have read-only access.')
snaLinkSdlcT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcT5nodeIndex.setDescription('The index of the Type 5 node associated with this link.')
snaLinkSdlcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcIndex.setDescription('The index variable assigned by Agent.')
snaLinkSdlcDestinationStationAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcDestinationStationAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcDestinationStationAddr.setDescription('Station Address (1 byte) of the destination node.')
snaLinkSdlcStationRole = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondary", 1), ("primary", 2), ("negotiable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcStationRole.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcStationRole.setDescription('The role of the local station in relation to a remote one.')
snaLinkSdlcLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcLineName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcLineName.setDescription('The configured name of the associated line.')
snaLinkSdlcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcPort.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcPort.setDescription('The physical port location in the system. The first octet contains the port processor id (0 to 255) and the second octet contains the line number (0-8) for line modules which support multiple lines. ')
snaLinkSdlcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkSdlcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkSdlcIfIndex.setDescription('The IfIndex value of the interface used by this link.')
snaLinkQllcTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3), )
if mibBuilder.loadTexts: snaLinkQllcTable.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcTable.setDescription('This table contains Managed Objects which describe basic configuration parameters for PUs using QLLC links.')
snaLinkQllcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1), ).setIndexNames((0, "SNANET-MIB", "snaLinkQllcT5nodeIndex"), (0, "SNANET-MIB", "snaLinkQllcIndex"))
if mibBuilder.loadTexts: snaLinkQllcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcEntry.setDescription('Entry contains all link configuration parameters for one PU. The objects in the entry have read-only access.')
snaLinkQllcT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcT5nodeIndex.setDescription('The index of the Type 5 node associated with this link.')
snaLinkQllcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcIndex.setDescription('The index variable assigned by Agent.')
snaLinkQllcLcn = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcLcn.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcLcn.setDescription('The Logical Channel Number (LCN) used by the source node in the case of SVC. Identifies the Circuit number in the case of PVC.')
snaLinkQllcSourceDteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcSourceDteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcSourceDteAddr.setDescription('The DTE Address (15 bytes) of the source node.')
snaLinkQllcDestinationDteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcDestinationDteAddr.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcDestinationDteAddr.setDescription('The DTE Address (15 bytes) of the destination node.')
snaLinkQllcRole = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secondary", 1), ("primary", 2), ("negotiable", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcRole.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcRole.setDescription('The role of the QLLC PU in relation to a remote one.')
snaLinkQllcPdnGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcPdnGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcPdnGroupName.setDescription('Name of the associated PDNGROUP.')
snaLinkQllcLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcLineName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcLineName.setDescription('The configured name of the associated line.')
snaLinkQllcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcPort.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcPort.setDescription('The physical port location in the system. The first octet contains the port processor id (0 to 255) and the second octet contains the line number (0-8) for line modules which support multiple lines. ')
snaLinkQllcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkQllcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkQllcIfIndex.setDescription('The IfIndex value of the interface used by this link.')
snaLinkChannelTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4), )
if mibBuilder.loadTexts: snaLinkChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelTable.setDescription('This table contains Managed Objects which describe basic configuration parameters for PUs using Channel link.')
snaLinkChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4, 1), ).setIndexNames((0, "SNANET-MIB", "snaLinkChannelT5nodeIndex"), (0, "SNANET-MIB", "snaLinkChannelIndex"))
if mibBuilder.loadTexts: snaLinkChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelEntry.setDescription('Entry contains all link configuration parameters for one PU. The objects in the entry have read-only access.')
snaLinkChannelT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkChannelT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelT5nodeIndex.setDescription('The index of the Type 5 node associated with this link.')
snaLinkChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelIndex.setDescription('The index variable assigned by Agent.')
snaLinkChannelLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkChannelLineName.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelLineName.setDescription('The configured name of the associated line.')
snaLinkChannelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkChannelPort.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelPort.setDescription('The physical port location in the system. The first octet contains the port processor id (0 to 255) and the second octet contains the line number (0-8) for line modules which support multiple lines. ')
snaLinkChannelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkChannelIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkChannelIfIndex.setDescription('The IfIndex value of the interface used by this link.')
snaLinkIntTable = MibTable((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5), )
if mibBuilder.loadTexts: snaLinkIntTable.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntTable.setDescription('This table contains Managed Objects which describe basic configuration parameters Internal links.')
snaLinkIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5, 1), ).setIndexNames((0, "SNANET-MIB", "snaLinkIntT5nodeIndex"), (0, "SNANET-MIB", "snaLinkIntIndex"))
if mibBuilder.loadTexts: snaLinkIntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntEntry.setDescription('Entry contains all link configuration parameters for one PU. The objects in the entry have read-only access.')
snaLinkIntT5nodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkIntT5nodeIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntT5nodeIndex.setDescription('The index of the Type 5 node associated with this link.')
snaLinkIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkIntIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntIndex.setDescription('The index variable assigned by Agent.')
snaLinkIntServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tglink", 1), ("uniscope", 2), ("ds3270", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkIntServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntServiceType.setDescription('The type of the internal link.')
snaLinkIntOutputCredit = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkIntOutputCredit.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntOutputCredit.setDescription('This value is used to control the flow of data on the internal link.')
snaLinkIntOutputPacing = MibTableColumn((1, 3, 6, 1, 4, 1, 223, 8, 3, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snaLinkIntOutputPacing.setStatus('mandatory')
if mibBuilder.loadTexts: snaLinkIntOutputPacing.setDescription('This value is used to control the flow of data on the internal link.')
mibBuilder.exportSymbols("SNANET-MIB", snaLinkSdlcStationRole=snaLinkSdlcStationRole, t5CdrmNetworkName=t5CdrmNetworkName, t2nodeLinkType=t2nodeLinkType, appLuApplicationName=appLuApplicationName, snaLinkIntOutputPacing=snaLinkIntOutputPacing, snaSessProcCorrelationId=snaSessProcCorrelationId, t5CdrscDlmName=t5CdrscDlmName, t5DlmTsprof=t5DlmTsprof, t5DlmFmprof=t5DlmFmprof, snaLink=snaLink, saVrTable=saVrTable, t2nodeStatsActLus=t2nodeStatsActLus, t5nodeNetworkName=t5nodeNetworkName, t5CdrmSnaName=t5CdrmSnaName, t2nodeEntry=t2nodeEntry, t2nodeStatsSentPius=t2nodeStatsSentPius, snaLinkIntT5nodeIndex=snaLinkIntT5nodeIndex, saTgLinkIndex=saTgLinkIndex, snaLink802Dot2Entry=snaLink802Dot2Entry, t5CdrmT5nodeIndex=t5CdrmT5nodeIndex, t2nodeMaxPiu=t2nodeMaxPiu, t5CdrscOperState=t5CdrscOperState, appLuT5nodeIndex=appLuT5nodeIndex, snaLuT2nodeIndex=snaLuT2nodeIndex, snaSession=snaSession, snaLink802Dot2DestinationAddress=snaLink802Dot2DestinationAddress, t2nodeStatsInActLus=t2nodeStatsInActLus, snaLuTable=snaLuTable, snaSessionTable=snaSessionTable, prodInfoDesc=prodInfoDesc, t5CdrscSessions=t5CdrscSessions, appLuBatchDeviceLuIndex=appLuBatchDeviceLuIndex, saErTgNumber=saErTgNumber, snaLinkIntEntry=snaLinkIntEntry, snaLinkQllcSourceDteAddr=snaLinkQllcSourceDteAddr, t2nodeStatsBindLus=t2nodeStatsBindLus, snaLinkChannelT5nodeIndex=snaLinkChannelT5nodeIndex, saTgMaxReceivePiuSize=saTgMaxReceivePiuSize, saErNumber=saErNumber, snaLink802Dot2Index=snaLink802Dot2Index, t5nodeIndex=t5nodeIndex, t2nodeStatsEntry=t2nodeStatsEntry, saVrEntry=saVrEntry, snaLinkQllcIfIndex=snaLinkQllcIfIndex, saVrErNumber=saVrErNumber, t2nodeStatsReceivedPius=t2nodeStatsReceivedPius, t5DlmSecprot=t5DlmSecprot, snaSessTransmissionPriority=snaSessTransmissionPriority, t5DlmBindType=t5DlmBindType, saErDestinationSubarea=saErDestinationSubarea, t5CdrscAdminState=t5CdrscAdminState, t5AliasName=t5AliasName, snaLinkSdlcIfIndex=snaLinkSdlcIfIndex, t2nodeLastStateChange=t2nodeLastStateChange, saErTable=saErTable, t2nodeName=t2nodeName, saTgLinkT5nodeIndex=saTgLinkT5nodeIndex, t2nodeT5nodeIndex=t2nodeT5nodeIndex, t2nodeActFailureReason=t2nodeActFailureReason, snaLinkSdlcIndex=snaLinkSdlcIndex, t5CdrmName=t5CdrmName, snaSessReceivedNegativeResps=snaSessReceivedNegativeResps, snaLinkChannelTable=snaLinkChannelTable, snaSessType=snaSessType, snaLuEntry=snaLuEntry, snaLu=snaLu, snaLinkQllcLcn=snaLinkQllcLcn, saTgNumber=saTgNumber, appLuActiveTime=appLuActiveTime, t5nodeSscpName=t5nodeSscpName, dcp=dcp, saTgSentBytes=saTgSentBytes, t5AliasEntry=t5AliasEntry, t2nodeStartTime=t2nodeStartTime, t5DlmPsndpac=t5DlmPsndpac, t2nodeStatsIndex=t2nodeStatsIndex, snaLuOperState=snaLuOperState, t5DlmRusizes=t5DlmRusizes, snaLinkIntServiceType=snaLinkIntServiceType, saTgLinkEntry=saTgLinkEntry, snaSessState=snaSessState, snaLinkQllcEntry=snaLinkQllcEntry, t2nodeStatsTable=t2nodeStatsTable, t5CdrscEntry=t5CdrscEntry, saTgActiveTime=saTgActiveTime, t5nodeSscpId=t5nodeSscpId, snaLinkQllcTable=snaLinkQllcTable, snaLinkQllcDestinationDteAddr=snaLinkQllcDestinationDteAddr, snaLinkQllcLineName=snaLinkQllcLineName, snaSessSentRus=snaSessSentRus, t5nodeTable=t5nodeTable, appLuConversionType=appLuConversionType, t5CosName=t5CosName, t5node=t5node, saTgReceivedBtus=saTgReceivedBtus, saTgLinkReceivedBtus=saTgLinkReceivedBtus, snaLuAdminState=snaLuAdminState, snaSessPartnerNauSubarea=snaSessPartnerNauSubarea, t5CosSnaName=t5CosSnaName, t5DlmPrcvpac=t5DlmPrcvpac, snaSessVirtualRouteNumber=snaSessVirtualRouteNumber, saVrT5nodeIndex=saVrT5nodeIndex, saTgSentBtus=saTgSentBtus, snaLuName=snaLuName, saTgLinkAdjacentSubarea=saTgLinkAdjacentSubarea, snaLinkQllcT5nodeIndex=snaLinkQllcT5nodeIndex, snaLinkSdlcDestinationStationAddr=snaLinkSdlcDestinationStationAddr, appLuOperState=appLuOperState, t2node=t2node, appLuHostInterfaceType=appLuHostInterfaceType, saTgLinkReceivedBytes=saTgLinkReceivedBytes, saTransmissionGroup=saTransmissionGroup, appLuEntry=appLuEntry, saTgTable=saTgTable, t2nodeStatsSentNegativeResps=t2nodeStatsSentNegativeResps, t5DlmPservic=t5DlmPservic, saTgOperState=saTgOperState, snaLuIndex=snaLuIndex, snaLink802Dot2Role=snaLink802Dot2Role, applicationLuTable=applicationLuTable, snaLinkChannelPort=snaLinkChannelPort, appLuGatewayName=appLuGatewayName, saTgLinkSentBytes=saTgLinkSentBytes, appLuIndex=appLuIndex, appLuBatchDeviceTable=appLuBatchDeviceTable, snaLinkQllcPort=snaLinkQllcPort, snaLuPoolName=snaLuPoolName, t2nodeTable=t2nodeTable, snaSessionEntry=snaSessionEntry, saVrMinWindowSize=saVrMinWindowSize, snaLuType=snaLuType, snaLinkQllcIndex=snaLinkQllcIndex, t5nodeSubareaNumber=t5nodeSubareaNumber, t5CdrmElementAddress=t5CdrmElementAddress, snaLink802Dot2SourceSAP=snaLink802Dot2SourceSAP, appLuBatchDeviceName=appLuBatchDeviceName, saTgLinkTable=saTgLinkTable, t2nodeType=t2nodeType, t5DlmPriprot=t5DlmPriprot, snaLuUserName=snaLuUserName, prodInfo=prodInfo, snaSessActiveTime=snaSessActiveTime, t5AliasTable=t5AliasTable, saTgLinkAdminState=saTgLinkAdminState, saTgLinkLastStateChange=saTgLinkLastStateChange, saVrNumber=saVrNumber, t2nodeStatsT5nodeIndex=t2nodeStatsT5nodeIndex, saTgReceivedBytes=saTgReceivedBytes, snaLuLastStateChange=snaLuLastStateChange, t5nodePuName=t5nodePuName, snaLinkSdlcTable=snaLinkSdlcTable, saTgLinkTgNumber=saTgLinkTgNumber, appLuBindFailureReason=appLuBindFailureReason, snaLink802Dot2IfIndex=snaLink802Dot2IfIndex, snaSessNauSessNumber=snaSessNauSessNumber, snaLinkChannelIndex=snaLinkChannelIndex, t5CosT5nodeIndex=t5CosT5nodeIndex, snaLink802Dot2T5nodeIndex=snaLink802Dot2T5nodeIndex, snaLinkIntOutputCredit=snaLinkIntOutputCredit, snaLuT5nodeIndex=snaLuT5nodeIndex, t2nodeStatsReceivedBytes=t2nodeStatsReceivedBytes, t5CdrmType=t5CdrmType, saVrMaxWindowSize=saVrMaxWindowSize, t5DlmComprot=t5DlmComprot, saVrPacingCount=saVrPacingCount, t5AliasT5nodeIndex=t5AliasT5nodeIndex, t5CdrscSnaName=t5CdrscSnaName, snaLink802Dot2Table=snaLink802Dot2Table, t5DlmEncr=t5DlmEncr, t5DlmSrcvpac=t5DlmSrcvpac, t5nodeDomainName=t5nodeDomainName, snaLinkIntIndex=snaLinkIntIndex, t2nodeOperState=t2nodeOperState, snaLuBindFailureReason=snaLuBindFailureReason, appLuAdminState=appLuAdminState, saTgLinkType=saTgLinkType, appLuBatchDeviceType=appLuBatchDeviceType, t2nodeStatsSentBytes=t2nodeStatsSentBytes, saErT5nodeIndex=saErT5nodeIndex, snaLink802Dot2LineName=snaLink802Dot2LineName, t5DlmSsndpac=t5DlmSsndpac, snaSessReceivedRus=snaSessReceivedRus, t2nodeBlockNum=t2nodeBlockNum, t2nodeAdminState=t2nodeAdminState, appLuBatchDeviceT5nodeIndex=appLuBatchDeviceT5nodeIndex, t5CosEntry=t5CosEntry, snaLinkQllcRole=snaLinkQllcRole, saTgLastStateChange=saTgLastStateChange, snaSessSentNegativeResps=snaSessSentNegativeResps, snaLinkSdlcEntry=snaLinkSdlcEntry, t5DlmEntry=t5DlmEntry, t5CdrmOperState=t5CdrmOperState, saErOperState=saErOperState, snaLuLocalAddress=snaLuLocalAddress, snaSessModeName=snaSessModeName, snaLinkSdlcT5nodeIndex=snaLinkSdlcT5nodeIndex, t2nodeLinkSpecific=t2nodeLinkSpecific, t5CdrscCosName=t5CdrscCosName, t5CdrmEntry=t5CdrmEntry, saTgAdjacentSubarea=saTgAdjacentSubarea, saTgLinkOperState=saTgLinkOperState, t2nodeIdNum=t2nodeIdNum, t5CdrmSubareaNumber=t5CdrmSubareaNumber, snaSessPartnerNauName=snaSessPartnerNauName, snaLinkIntTable=snaLinkIntTable, snanet=snanet, snaNau=snaNau, snaSessPluIndicator=snaSessPluIndicator, snaLinkSdlcLineName=snaLinkSdlcLineName, snaLinkChannelIfIndex=snaLinkChannelIfIndex, t5DlmName=t5DlmName, applicationLu=applicationLu, snaLinkSdlcPort=snaLinkSdlcPort, t5CdrscName=t5CdrscName, appLuName=appLuName, appLuBatchDeviceEntry=appLuBatchDeviceEntry, t5DlmCos=t5DlmCos, saTgEntry=saTgEntry, snaSessReceivedBytes=snaSessReceivedBytes, appLuLastStateChange=appLuLastStateChange, saTgLinkName=saTgLinkName, subarea=subarea, snaLink802Dot2SourceAddress=snaLink802Dot2SourceAddress, saVrWindowSize=saVrWindowSize, snaSessT5nodeIndex=snaSessT5nodeIndex, snaLink802Dot2MediaType=snaLink802Dot2MediaType, t5CosTable=t5CosTable, saTgLinkSentBtus=saTgLinkSentBtus, snaSessNauName=snaSessNauName, t5CdrscTable=t5CdrscTable, t5nodeEntry=t5nodeEntry, t5DlmSnaName=t5DlmSnaName, saTgT5nodeIndex=saTgT5nodeIndex, saTgLinkSpecific=saTgLinkSpecific, t2nodeStatsReceivedNegativeResps=t2nodeStatsReceivedNegativeResps, snaSessPartnerNauElementAddress=snaSessPartnerNauElementAddress, snaLink802Dot2Port=snaLink802Dot2Port, saTgLinkActiveTime=saTgLinkActiveTime, snaLinkQllcPdnGroupName=snaLinkQllcPdnGroupName, saVrTransmissionPriority=saVrTransmissionPriority, t5DlmTable=t5DlmTable, snaLinkChannelEntry=snaLinkChannelEntry, unisys=unisys, snaLuActiveTime=snaLuActiveTime, t5AliasResourceId=t5AliasResourceId, t5CdrscCdrmName=t5CdrscCdrmName, saTgMaxSendPiuSize=saTgMaxSendPiuSize, t2nodeIndex=t2nodeIndex, appLuBatchDeviceNumber=appLuBatchDeviceNumber, snaLinkChannelLineName=snaLinkChannelLineName, t5CdrmTable=t5CdrmTable, t5CdrscT5nodeIndex=t5CdrscT5nodeIndex, t5DlmT5nodeIndex=t5DlmT5nodeIndex, t5nodeOperState=t5nodeOperState)
mibBuilder.exportSymbols("SNANET-MIB", prodInfoFeatures=prodInfoFeatures, saErEntry=saErEntry, t2nodeStatsActiveLus=t2nodeStatsActiveLus, snaSessNauElementAddress=snaSessNauElementAddress, snaSessSentBytes=snaSessSentBytes, t5CdrmAdminState=t5CdrmAdminState, t5CosVrids=t5CosVrids, snaLink802Dot2DestinationSAP=snaLink802Dot2DestinationSAP)
