#
# PySNMP MIB module ITOUCH-REPEATER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ITOUCH-REPEATER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:58:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
iTouch, TypedAddress = mibBuilder.importSymbols("ITOUCH-MIB", "iTouch", "TypedAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, ModuleIdentity, ObjectIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Bits, Integer32, Counter32, Gauge32, NotificationType, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Bits", "Integer32", "Counter32", "Gauge32", "NotificationType", "Unsigned32", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hubDeprecated = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 9))
xRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17))
xRepeaterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 1))
xRepeaterGroupInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 2))
xRepeaterPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 3))
xRepeaterSlotInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 4))
xRepeaterSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 5))
xRepeaterRepeater = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 6))
xRepeaterRedundancy = MibIdentifier((1, 3, 6, 1, 4, 1, 33, 17, 7))
class Segment(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("a", 1), ("b", 2), ("c", 3), ("d", 4), ("e", 5), ("f", 6), ("g", 7), ("h", 8), ("i", 9), ("j", 10), ("k", 11), ("l", 12), ("m", 13), ("n", 14), ("o", 15), ("p", 16), ("q", 17), ("r", 18), ("s", 19), ("t", 20), ("u", 21), ("v", 22), ("w", 23), ("x", 24), ("y", 25), ("z", 26), ("disabled", 27), ("notApplicable", 28))

class Repeater(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 1), ("repeater1", 2), ("repeater2", 3), ("repeater3", 4))

repeaterAccessViolation = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("disable", 2), ("trap", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterAccessViolation.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterAccessViolation.setDescription('Controls action to take when an access violation occurs.')
repeaterMyGroup = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterMyGroup.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterMyGroup.setDescription('The index value of the group that is directly associated with the agent. The snmp support for the group associated with the agent is a superset of the support for other groups.')
repeaterFifoOverflows = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterFifoOverflows.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterFifoOverflows.setDescription('Deprecated, use repeaterRepeaterFifoOverflows in the repeaterRepeater group for the desired repeater.')
repeaterLEDDisplay = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("activity", 1), ("collisions", 2))).clone('activity')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterLEDDisplay.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterLEDDisplay.setDescription('Controls reason for flashing front panel LEDs.')
repeaterReports = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterReports.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterReports.setDescription('Deprecated, use repeaterRepeaterReports in the repeaterRepeater group for the desired repeater on which report generation is to be controlled.')
repeaterHealthTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterHealthTrap.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterHealthTrap.setDescription('Controls the generation of the repeater health trap.')
repeaterStatusChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterStatusChangeTrap.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterStatusChangeTrap.setDescription('Controls the generation of the repeater status change trap.')
repeaterAccessViolationTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterAccessViolationTrap.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterAccessViolationTrap.setDescription('Controls the generation of the repeater access violation trap.')
repeaterIntegrityLossTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterIntegrityLossTrap.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterIntegrityLossTrap.setDescription('Controls the generation of the repeater integrity loss trap.')
repeaterRedundancyPathChangeTrap = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathChangeTrap.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathChangeTrap.setDescription('Controls the generation of the repeater redundancy path change trap.')
repeaterGroupTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 2, 1), )
if mibBuilder.loadTexts: repeaterGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupTable.setDescription('Table of descriptive and status information about the groups.')
repeaterGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterGroupIndex"))
if mibBuilder.loadTexts: repeaterGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupEntry.setDescription('An entry in the table, containing information about a group.')
repeaterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupIndex.setDescription('This variable identifies the group within the repeater for which this entry contains information. This value is the same as rptrGroupIndex.')
repeaterGroupSQE = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupSQE.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterGroupSQE.setDescription('Deprecated, use repeaterRepeaterSQE in the repeaterRepeaterGroup for the SQE count on the desired repeater. This object will always return the count for repeater #1.')
repeaterGroupJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupJabbers.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterGroupJabbers.setDescription('Deprecated, use repeaterRepeaterJabbers in the repeaterRepeaterGroup for the Jabber count on the desired repeater. This object will always return the count for repeater #1.')
repeaterGroupSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 4), Segment()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterGroupSegment.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterGroupSegment.setDescription('Deprecated, use repeaterRepeaterSegment in the repeaterRepeaterGroup to control the segment mapping for the desired repeater. This object will always control the mapping for repeater #1.')
repeaterGroupSecurityLock = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterGroupSecurityLock.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupSecurityLock.setDescription("This variable indicates the state of security lockdown on an unmanaged repeater. The only writable value is 'unlocked'.")
repeaterGroupIOCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIOCardType.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupIOCardType.setDescription('The hardware type of the I/O card, as defined in ITouch Assigned Numbers.')
repeaterGroupIOCardFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIOCardFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupIOCardFirmwareVersion.setDescription('The firmware revision level of the I/O card ROM.')
repeaterGroupIOCardOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("loadRequested", 1), ("loading", 2), ("dumpRequested", 3), ("dumping", 4), ("paramRequested", 5), ("paramLoading", 6), ("running", 7), ("initializing", 8), ("attended", 9), ("internal10", 10), ("internal11", 11), ("inhibited", 12), ("maxserverCard", 13), ("invalidConfigStorage", 14), ("securityLockdown", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupIOCardOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupIOCardOperStatus.setDescription('Relative to the chassis, the current operating status of the I/O card.')
repeaterGroupManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("minimal", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupManagement.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupManagement.setDescription('This variable indicates the level of management control and observation available.')
repeaterGroupRepeaterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupRepeaterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupRepeaterNumber.setDescription('The number of logical repeaters visible via this repeater.')
repeaterGroupRepeaterHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupRepeaterHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupRepeaterHardwareVersion.setDescription('The repeater chip set hardware revision level.')
repeaterGroupManagerRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 12), Repeater()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterGroupManagerRepeater.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupManagerRepeater.setDescription('The logical repeater to which the manager card, if present, is attached.')
repeaterGroupFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupFifoErrors.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupFifoErrors.setDescription('This variable will reflect the number of times that the report FIFO has gone out of synchronization.')
repeaterGroupCpuUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupCpuUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupCpuUtilization.setDescription('The average CPU utilization for the processor which maintains statistics and implements monitoring for the group, expressed as percentage times 100.')
repeaterGroupMemoryUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupMemoryUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupMemoryUtilization.setDescription('The current memory utilization for the processor which maintains statistics and implements monitoring for the group, expressed as percentage used times 100.')
repeaterGroupAlarmCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterGroupAlarmCount.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterGroupAlarmCount.setDescription('The number of alarms currently being monitored by the processor for comparison with RMON thresholds.')
repeaterPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 3, 1), )
if mibBuilder.loadTexts: repeaterPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortTable.setDescription('Table of descriptive and status information about the ports.')
repeaterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: repeaterPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortEntry.setDescription('An entry in the table, containing information about a port.')
repeaterPortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortGroupIndex.setDescription('This variable identifies the group containing the port for which this entry contains infromation.')
repeaterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortIndex.setDescription('This variable identifies the port within the group within the repeater for which this entry contains management information. This value can never be greater than rptrGroupPortCapacity for the associated group.')
repeaterPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortName.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortName.setDescription("The port's display name.")
repeaterPortAutoPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAutoPolarity.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAutoPolarity.setDescription('Controls whether the port will automatically determine its polarity.')
repeaterPortPolarityDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("reversed", 1), ("normal", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPolarityDirection.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPolarityDirection.setDescription('If repeaterPortAutoPolarity is enabled, this is the current polarity of the port.')
repeaterPortPulse = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortPulse.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPulse.setDescription('Controls whether the port will periodically generate a test pulse to determine the status of the port.')
repeaterPortPulseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notDetected", 1), ("detected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPulseStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPulseStatus.setDescription('If repeaterPortPulse is enabled, this is indicates whether the test pulse response is being detected.')
repeaterPortPulseLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPulseLosses.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPulseLosses.setDescription('The number of times that a test pulse has been sent and a response was not received.')
repeaterPortDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortDistance.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortDistance.setDescription('Controls whether the port will support extended distances on the port.')
repeaterPortSofMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortSofMissing.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortSofMissing.setDescription('The number of times that alternating zero/one bits were seen after an inter-packet gap and were not followed by two one bits.')
repeaterPortMCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortMCVs.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortMCVs.setDescription('The number of manchester violation errors detected on this port.')
repeaterPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortZero.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortZero.setDescription("Control to zero the hub port's counters. The agent always returns 'ready' for this value. Setting the value to 'ready' has no effect.")
repeaterPortSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortSinceZero.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortSinceZero.setDescription("Number of time ticks since the port's counters were zeroed.")
repeaterPortAccessAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("discard", 1), ("accept", 2))).clone('discard')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessAction.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessAction.setDescription('Control whether packets will be accepted or discarded if they are in the access list. The inverse action is applied to packets from all addresses not in the list.')
repeaterPortAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("notDisabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessState.setDescription('Indicates whether the port was disabled due to receiving a frame from an invalid source address.')
repeaterPortAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("tenBaseT", 1), ("aui", 2), ("foirl", 3), ("mac", 4), ("lanbus", 5), ("tenBase2", 6), ("tenBaseFL", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessType.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessType.setDescription('Indicates the type of the port.')
repeaterPortAccessAllStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessAllStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessAllStatus.setDescription('Setting this field to invalid will delete all access addresses associated with this port. Setting this field to valid has no effect.')
repeaterPortPortLastViolationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 18), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPortLastViolationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPortLastViolationAddress.setDescription('Address that last caused an access violation.')
repeaterPortPortAddressViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPortAddressViolations.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPortAddressViolations.setDescription('Number of access violations.')
repeaterPortSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 20), Segment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortSegment.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortSegment.setDescription('Returns the indirect mapping of the ethernet repeater to which this port is connected.')
repeaterPortAccessLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("single", 2), ("continuous", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessLearn.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessLearn.setDescription('Controls how the port will learn the source addresses that can come in on the port.')
repeaterPortEthernetRepeater = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("repeater1", 1), ("repeater2", 2), ("repeater3", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortEthernetRepeater.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortEthernetRepeater.setDescription('For repeaters that implement non-proxy management of logical repeaters, this variable selects the logical Ethernet repeater to which the port is attached.')
repeaterPortRepeatersAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 23), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortRepeatersAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortRepeatersAllowed.setDescription("The list of repeaters to which this port can be attached. The OCTET STRING contains a bitmap, with a bit for 'none' and one bit for each repeater, and enough octets for all the repeaters on the device. The high order bit of the first octet corresponds to 'none', the following bits correspond to the repeaters, in order, beginning with 1.")
repeaterPortGlobalSecurityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 24), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortGlobalSecurityAddress.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortGlobalSecurityAddress.setDescription('This variable represents the global address which is currently applied to the port.')
repeaterPortGlobalAddressChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortGlobalAddressChanges.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortGlobalAddressChanges.setDescription('This variable represents the number of times since counters have been zeroed, that a global address change occured on the port.')
repeaterPortPercentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortPercentUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortPercentUtilization.setDescription("This variable will reflect the percentage of a full ethernet load that this port has received since last zeroed. The value is calculated as '(8(bytesReceived + (20*framesReceived))) /107(time)'.")
repeaterPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 3, 2), )
if mibBuilder.loadTexts: repeaterPortAccessTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessTable.setDescription('Table of access control for the ports.')
repeaterPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortAccessGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortAccessPortIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortAccessAddress"))
if mibBuilder.loadTexts: repeaterPortAccessEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessEntry.setDescription('An entry in the table, containing access information about a port.')
repeaterPortAccessGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessGroupIndex.setDescription('This variable identifies the group containing the access entry for which this entry contains information. The group ID may only be that of the target agent. Specifying a group ID of an agent in a different slot will result in `badValue` being returned.')
repeaterPortAccessPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessPortIndex.setDescription('This variable identifies the port containing the access entry for which this entry contains information.')
repeaterPortAccessAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPortAccessAddress.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessAddress.setDescription('This value will be compared to the source address of all packets received on the port in applying the access action')
repeaterPortAccessStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessStatus.setDescription("The status of the entry. Set to 'invalid' to remove the rule.")
repeaterPortAccessGroupIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessGroupIndexShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessGroupIndexShadow.setDescription('This variable identifies the group which contains a port to which an access address is to be assigned. The group ID may only be that of the target agent. Specifying a group ID of an agent in a different slot will result in `badValue` being returned.')
repeaterPortAccessPortIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessPortIndexShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessPortIndexShadow.setDescription('This variable identifies the port of a group to which an access address is to be assigned.')
repeaterPortAccessAddressShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessAddressShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessAddressShadow.setDescription('This value contains the ethernet address which is to be added to the access address table for the port specified by repeaterPortAccessGroupIndexShadow and repeaterPortAccessPortIndexShadow.')
repeaterPortAccessStatusShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2))).clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterPortAccessStatusShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPortAccessStatusShadow.setDescription("When read, this variable will always return 'ready'. When this variable is set to 'execute' the address specified by repeaterPortAccessAddressShadow will be added to the access address table for the port specified by repeaterPortAccessGroupIndexShadow and repeaterPortAccessPortIndexShadow. If any of the above variables are zero when this object is set to 'execute', 'bad value' will be returned.")
repeaterPort2Table = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 3, 7), )
if mibBuilder.loadTexts: repeaterPort2Table.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2Table.setDescription('Table of more descriptive and status information about the ports.')
repeaterPort2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: repeaterPort2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2Entry.setDescription('An entry in the table, containing information about a port. Index is identical to repeaterPortTable.')
repeaterPort2RmonOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonOctets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonOctets.setDescription('The total number of octets of data (including those in bad packets) received on the port (excluding framing bits but including FCS octets).')
repeaterPort2RmonPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts.setDescription('The total number of packets (including error packets) received on the port.')
repeaterPort2RmonBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonBroadcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonBroadcastPkts.setDescription('The total number of good packets received on the port that were directed to the broadcast address.')
repeaterPort2RmonMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonMulticastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonMulticastPkts.setDescription('The total number of good packets received on the port that were directed to a multicast address. Note that this number does not include packets directed to the broadcast address.')
repeaterPort2RmonCRCAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonCRCAlignErrors.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonCRCAlignErrors.setDescription('The total number of packets received on the port that had a length (excluding framing bits, but including FCS octets) of between 64 and 1518 octets, inclusive, but were not an integral number of octets in length or had a bad Frame Check Sequence (FCS).')
repeaterPort2RmonPkts64Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts64Octets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts64Octets.setDescription('The total number of packets (including error packets) received on the port that were 64 octets in length (excluding framing bits but including FCS octets).')
repeaterPort2RmonPkts65to127Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts65to127Octets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts65to127Octets.setDescription('The total number of packets (including error packets) received on the port that were between 65 and 127 octets in length inclusive (excluding framing bits but including FCS octets).')
repeaterPort2RmonPkts128to255Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts128to255Octets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts128to255Octets.setDescription('The total number of packets (including error packets) received on the port that were between 128 and 255 octets in length inclusive (excluding framing bits but including FCS octets).')
repeaterPort2RmonPkts256to511Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts256to511Octets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts256to511Octets.setDescription('The total number of packets (including error packets) received on the port that were between 256 and 511 octets in length inclusive (excluding framing bits but including FCS octets).')
repeaterPort2RmonPkts512to1023Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts512to1023Octets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts512to1023Octets.setDescription('The total number of packets (including error packets) received on the port that were between 512 and 1023 octets in length inclusive (excluding framing bits but including FCS octets).')
repeaterPort2RmonPkts1024to1518Octets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2RmonPkts1024to1518Octets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2RmonPkts1024to1518Octets.setDescription('The total number of packets (including error packets) received on the port that were between 1024 and 1518 octets in length inclusive (excluding framing bits but including FCS octets).')
repeaterPort2TrafficRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2TrafficRatio.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2TrafficRatio.setDescription('The portion of segment bandwidth used by the port over a 5 second interval, expressed as percentage times 100.')
repeaterPort2CollisionRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2CollisionRatio.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2CollisionRatio.setDescription('The ratio of collisions the port participated in to total packets over a 5 second interval, expressed as percentage times 100.')
repeaterPort2ErrorRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2ErrorRatio.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2ErrorRatio.setDescription('The ratio of total number of error frames on the port to total packets over a 5 second interval, expressed as percentage times 100.')
repeaterPort2BroadcastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2BroadcastRatio.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2BroadcastRatio.setDescription('The ratio of good packets directed by the port to the broadcast address to total packets over a 5 second interval, expressed as percentage times 100.')
repeaterPort2MulticastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2MulticastRatio.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2MulticastRatio.setDescription('The ratio of good packets directed by the port to any multicast address (but not the broadcast address) to total packets over a 5 second interval, expressed as percentage times 100.')
repeaterPort2UnicastRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 3, 7, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterPort2UnicastRatio.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterPort2UnicastRatio.setDescription('The ratio of good packets directed by the port to any address other than a multicast or broadcast address to total packets over a 5 second interval, expressed as percentage times 100.')
repeaterSlotSegmentTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 4, 1), )
if mibBuilder.loadTexts: repeaterSlotSegmentTable.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterSlotSegmentTable.setDescription('Deprecated, no replacement.')
repeaterSlotSegmentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterSlotIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterSlotSegment"))
if mibBuilder.loadTexts: repeaterSlotSegmentEntry.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterSlotSegmentEntry.setDescription('Deprecated, no replacement.')
repeaterSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSlotIndex.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterSlotIndex.setDescription('Deprecated, no replacement.')
repeaterSlotSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1, 2), Segment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSlotSegment.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterSlotSegment.setDescription('Deprecated, no replacement.')
repeaterSlotSegmentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSlotSegmentStatus.setStatus('deprecated')
if mibBuilder.loadTexts: repeaterSlotSegmentStatus.setDescription('Deprecated, no replacement.')
repeaterSecurityState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityState.setDescription("Controls whether security operation will be applied to all ports on the repeater. If security is not supported by the device, 'badValue' will be returned if the variable is set to 'enabled'.")
repeaterSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 5, 2), )
if mibBuilder.loadTexts: repeaterSecurityPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortTable.setDescription('Table of descriptive and status information about the ports.')
repeaterSecurityPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: repeaterSecurityPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortEntry.setDescription('An entry in the table, containing information about a port.')
repeaterSecurityPortUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('jam')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortUnicast.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortUnicast.setDescription('The action to take when the destination address is unicast and does not have an entry in repeaterSecurityTable. If repeaterPortGroupIndex is equal to the group number of the agent, this object is read-write, otherwise it is read-only.')
repeaterSecurityPortMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('jam')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortMulticast.setDescription('The action to take when the destination address is multicast and does not have an entry in repeaterSecurityTable. If repeaterPortGroupIndex is equal to the group number of the agent, this object is read-write, otherwise it is read-only')
repeaterSecurityPortAllStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortAllStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortAllStatus.setDescription('Setting this field to invalid will delete all security addresses associated with this port. Setting this field to valid has no effect. If repeaterPortGroupIndex is equal to the group number of the agent, this object is read-write, otherwise it is read-only')
repeaterSecurityPortSecurityLearn = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("single", 2), ("continuous", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortSecurityLearn.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortSecurityLearn.setDescription('Controls how the port will learn the destination addresses that can be sent to the port. If repeaterPortGroupIndex is equal to the group number of the agent, this object is read-write, otherwise it is read-only')
repeaterSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 5, 3), )
if mibBuilder.loadTexts: repeaterSecurityTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityTable.setDescription('Table of security control for the ports.')
repeaterSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterSecurityGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterSecurityPortIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterSecurityAddress"))
if mibBuilder.loadTexts: repeaterSecurityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityEntry.setDescription('An entry in the table, containing security information about a port.')
repeaterSecurityGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGroupIndex.setDescription('This variable identifies the group containing the security entry for which this entry contains information. The group ID may only be that of the target agent. Specifying a group ID of an agent in a different slot will result in `badValue` being returned.')
repeaterSecurityPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortIndex.setDescription('This variable identifies the port containing the security entry for which this entry contains infromation.')
repeaterSecurityAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityAddress.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityAddress.setDescription('This value will be compared to the destination address of all packets received on the port in applying the security action.')
repeaterSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2))).clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityStatus.setDescription("The status of the entry. Set to 'invalid' to remove the rule.")
repeaterSecurityAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('jam')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityAction.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityAction.setDescription('The action to take when the destination address matches.')
repeaterSecurityGroupIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGroupIndexShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGroupIndexShadow.setDescription('This variable identifies the group containing a port to which a security address is to be assigned. The group ID may only be that of the target agent. Specifying a group ID of an agent in a different slot will result in `badValue` being returned.')
repeaterSecurityPortIndexShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityPortIndexShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityPortIndexShadow.setDescription('This variable identifies the port of a group to which a security address is to be assigned.')
repeaterSecurityAddressShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityAddressShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityAddressShadow.setDescription('This value contains the ethernet address which is to be added to the security address table for the port specified by repeaterSecurityGroupIndexShadow and repeaterSecurityPortIndexShadow.')
repeaterSecurityStatusShadow = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2))).clone('ready')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityStatusShadow.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityStatusShadow.setDescription("When read, this variable will always return 'ready'. When this variable is set to 'execute' the address specified by repeaterSecurityAddressShadow will be added to the security address table for the port specified by repeaterSecurityGroupIndexShadow and repeaterSecurityPortIndexShadow. If any of the above variables are zero when this object is set to 'execute', 'bad value' will be returned.")
repeaterSecurityGlobalAddressTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 5, 8), )
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressTable.setDescription('Table of ethernet addresses which are applied globally (intra Network 9000 chassis) to ports.')
repeaterSecurityGlobalAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterSecurityGlobalAddress"))
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressEntry.setDescription('An entry in the table containing information about a specific address.')
repeaterSecurityGlobalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGlobalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalAddress.setDescription('This variable identifies the address.')
repeaterSecurityGlobalAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressStatus.setDescription("This variable represents the status of the entry. Setting this object (or any other writable object) to 'valid' will cause the row in the table to be created. Setting this object to 'invalid' will cause the row to be removed.")
repeaterSecurityGlobalAddressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 5, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("jam", 1), ("allow", 2))).clone('allow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressAction.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalAddressAction.setDescription("This variable determines the action which is applied to the packet in the event of an address match. The packet is either passed untouched when set to 'pass', or it is forced to an alternating pattern of ones and zeros if set to 'jam'.")
repeaterSecurityGlobalDBID = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGlobalDBID.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalDBID.setDescription('This variable contains the current version number of the global security database.')
repeaterSecurityGlobalSecurityAdminState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterSecurityGlobalSecurityAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalSecurityAdminState.setDescription('This variable controls whether global security is enabled or disabled. Global security will not function unless repeaterSecurityState and this variable are both set to `enabled`.')
repeaterSecurityGlobalSecurityOperState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("securityDisabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterSecurityGlobalSecurityOperState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterSecurityGlobalSecurityOperState.setDescription("This variable indicates the operational state of global security. If repeaterSecurityState is set to 'enabled' this variable will reflect the value of repeaterSecurityGlobalSecurityAdminState. if repeaterSecurityState is set to 'disabled', this variable will return 'securityDisabled'.")
repeaterRepeaterTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 6, 1), )
if mibBuilder.loadTexts: repeaterRepeaterTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterTable.setDescription('For repeaters that implement non-proxy management of logical repeaters, a table of descriptive and status information about a logical Ethernet repeater.')
repeaterRepeaterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRepeaterGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRepeaterIndex"))
if mibBuilder.loadTexts: repeaterRepeaterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterEntry.setDescription('An entry for a logical Ethernet repeater.')
repeaterRepeaterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterGroupIndex.setDescription('The slot of the chassis.')
repeaterRepeaterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterIndex.setDescription('The logical Ethernet repeater within the group.')
repeaterRepeaterSegment = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 3), Segment()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRepeaterSegment.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterSegment.setDescription('The Network 9000 Ethernet network segment to which the logical repeater is attached.')
repeaterRepeaterReports = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRepeaterReports.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterReports.setDescription('Control for whether statistical reports will be collected for this logical repeater.')
repeaterRepeaterCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterCollisions.setDescription('The number of packet collisions detected on the Ethernet network segment to which this logical repeater is attached.')
repeaterRepeaterJabbers = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterJabbers.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterJabbers.setDescription('The number of Jabber events detected for this logical repeater.')
repeaterRepeaterSQE = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterSQE.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterSQE.setDescription('The number of SQE failure events detected for this logical repeater.')
repeaterRepeaterFifoOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterFifoOverflows.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterFifoOverflows.setDescription('The number of times the report FIFO was full when this logical repeater attemped to write a packet report.')
repeaterRepeaterZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRepeaterZero.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterZero.setDescription("Control for zeroing the logical repeater's counters. The agent always returns 'ready' for this value. Setting the value to 'ready' has no effect. Setting the value to 'execute' will zero the counters for the logical repeater.")
repeaterRepeaterSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterSinceZero.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterSinceZero.setDescription("The number of hundredths of a second since the counters for this logical repeater were last zeroed. This variable is set to zero when repeaterRepeaterZero is written with the value 'execute'.")
repeaterRepeaterSegmentsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterSegmentsAllowed.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterSegmentsAllowed.setDescription("The list of segments to which this repeater can be attached. The OCTET STRING contains a bitmap, with a bit for 'none' and one bit for each segment, and enough octets for all the Ethernet segments in the chassis. The high order bit of the first octet corresponds to 'none', the following bits correspond to the segments, in order, beginning with A.")
repeaterRepeaterTotalOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterTotalOctets.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterTotalOctets.setDescription('This variable will reflect the total number of bytes that the repeater both received from and sent to the segment. Bytes in both good and error frames are counted.')
repeaterRepeaterTotalFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterTotalFrames.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterTotalFrames.setDescription('This variable will reflect the total number of frames that the repeater both received from and sent to the segment. Both good and error frames are counted.')
repeaterRepeaterPercentUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 6, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRepeaterPercentUtilization.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRepeaterPercentUtilization.setDescription('This variable will reflect the percentage of a full ethernet load that this repeater has handled since last zeroed. The value is calculated as `(8(totalBytes + (20*totalFrames)))/10 7(time)`.')
repeaterRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 33, 17, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyState.setDescription('This variable controls whether hub redundancy is enabled')
repeaterRedundancyGroupTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 7, 2), )
if mibBuilder.loadTexts: repeaterRedundancyGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupTable.setDescription('Table of descriptive and status information concerning hub redundancy groups.')
repeaterRedundancyGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyGroupGroupIndex"))
if mibBuilder.loadTexts: repeaterRedundancyGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupEntry.setDescription('An entry in the table containing information about a specific hub redundancy group.')
repeaterRedundancyGroupGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupGroupIndex.setDescription('This variable identifies the group.')
repeaterRedundancyGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupStatus.setDescription("This variable represents the status of the entry. Setting this object (or any other writable object) to 'valid' will cause the row in the table to be created. Setting this object to 'invalid' will cause the row to be removed. If a row is removed from the group table, all related rows in the path table and address table are also removed.")
repeaterRedundancyGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupName.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupName.setDescription("This variable represents the definable name of the group. Prior to being set, this object will return the default name 'Groupn' where n is the value of repeaterRedundancyGroupIndex. Setting this object to a zero length string will cause the default name to be assumed.")
repeaterRedundancyGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupAdminState.setDescription("This variable represents the desired state of the group. When this variable is set to 'enabled', the group will be activly monitored for integrity, and back- up paths will be brought up as higher priority paths disappear. When set to 'disabled', the path will not be tested for integrity.")
repeaterRedundancyGroupTestInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 180000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupTestInterval.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupTestInterval.setDescription('This variable determines the rate at which testing is performed on the path which is currently active (repeaterRedundancyGroupOperPath) in order to determine integrity. The value is in milliseconds.')
repeaterRedundancyGroupRollbackAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackAdminState.setDescription("This variable represents the desired state of path rollback. Path rollback is defined as the automatic testing and reactivation of higher priority paths. It should be noted that in order to test higher priority paths, the currently enabled path will be interrupted. Setting this variable to 'enabled' will cause rollback testing to occur every repeaterRedundancyGroupRollbackInterval number of milliseconds. Setting this variable to 'disabled' will force the group to remain on lower priority paths, until they themselves fail.")
repeaterRedundancyGroupRollbackInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(500, 180000)).clone(10000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackInterval.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackInterval.setDescription('This variable determines the rate at which rollback testing is performed. The value is in milliseconds.')
repeaterRedundancyGroupOperPath = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupOperPath.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupOperPath.setDescription('This variable represents the index of the path which is currently being used as the active path. This value may be used as the value for repeaterRedundancyPathIndex to index the path table.')
repeaterRedundancyGroupPathChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupPathChanges.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupPathChanges.setDescription('The value of this variable represents the number of times that this group has changed paths.')
repeaterRedundancyGroupRollbackAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupRollbackAttempts.setDescription('The value of this variable represents the number of times that the current path has been interrupted in interest of testing a higher priority path.')
repeaterRedundancyGroupZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyGroupZero.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupZero.setDescription("This variable is used to zero all counters associated with a group. This variable when read will always read 'ready'. When set to 'execute', all counters associated with the group (group counters and path counters) will be set to zero.")
repeaterRedundancyGroupSinceZero = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupSinceZero.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupSinceZero.setDescription('The value of this variable represents the number of seconds which have elapsed since the counters associated with the group have been zeroed.')
repeaterRedundancyGroupConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incomplete", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyGroupConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyGroupConfigStatus.setDescription('In order for a particular redundancy group to be used by the system, it must have at least one redundancy path defined. This variable indicates whether a redundancy group has been completely configured, and can therefore become active.')
repeaterRedundancyPathTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 7, 3), )
if mibBuilder.loadTexts: repeaterRedundancyPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathTable.setDescription('Table of descriptive and status information concerning hub redundancy paths.')
repeaterRedundancyPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyPathGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyPathPathIndex"))
if mibBuilder.loadTexts: repeaterRedundancyPathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathEntry.setDescription('An entry in the table containing information about a specific hub redundancy path.')
repeaterRedundancyPathGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathGroupIndex.setDescription('This variable identifies the group.')
repeaterRedundancyPathPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathPathIndex.setDescription('This variable identifies the path of the group.')
repeaterRedundancyPathStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathStatus.setDescription("This variable represents the status of the entry. Setting this object (or any other writable object) to 'valid' will cause the row in the table to be created. Setting this object to 'invalid' will cause the row to be removed. If a row is removed from the path table, all related rows in the address table are also removed.")
repeaterRedundancyPathSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathSlot.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathSlot.setDescription('This variable represents the slot of the Network 9000 chassis which contains the repeater on which the path interface resides.')
repeaterRedundancyPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathPort.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathPort.setDescription('This variable represents the port of the repeater to which the path is connected.')
repeaterRedundancyPathPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 6), Integer32().clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathPriority.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathPriority.setDescription('This variable represents the order of preferred priority for the path. Lower numbed paths are preferred over higher numbered paths.')
repeaterRedundancyPathActivate = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ready", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathActivate.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathActivate.setDescription("This variable is used to immediately make a specific path active. This variable when read will always read 'ready'. When set to 'execute', the selected path will become the active path for the group. Note that if rollback is enabled and this path is lower in priority, the system will attempt to restore the higher priority path.")
repeaterRedundancyPathTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(250, 10000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathTimeout.setDescription('This variable represents the amount of time in milliseconds that the syatem will wait for test responses from targets on the path.')
repeaterRedundancyPathRetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathRetryCount.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathRetryCount.setDescription('This variable represents the number of times a test is retried on the path in the event of a timeout before the path is considered useless.')
repeaterRedundancyPathTestAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathTestAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathTestAttempts.setDescription('The value of this variable represents the number of times that an integrity test was performed on the path.')
repeaterRedundancyPathLastTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notTested", 1), ("responded", 2), ("timeout", 3), ("noIntegrity", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathLastTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathLastTestStatus.setDescription("This variable indicates the result of the last test of the path. 'notTested' indicates that the path has yet to be tested. 'responded' indicates that a target on the path path has responded to the last test, 'timeout' indicates that no target on the path responded to the last test. 'integrity' indicates that a test was not performed on the path due to an abscense of port integrity.")
repeaterRedundancyPathDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("null", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathDisposition.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathDisposition.setDescription("This variable controls the action that will be taken when a path is considered bad. 'disable' indicates that the path is to be disabled prior to switching to an alternate path. 'null' indicates that the failed path is to be left in its current state prior to switching to an alternate path.")
repeaterRedundancyPathConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("incomplete", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyPathConfigStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathConfigStatus.setDescription('In order for a particular redundancy path to be used by the system, it must have at least one target address and the slot and the port on which it originates defined. This variable indicates whether a redundancy path has been completely configured, and can therefore become active.')
repeaterRedundancyPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyPathAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyPathAdminState.setDescription("This variable represents the desired state of the path. When this variable is set to 'disabled' the path will not be used by the group. When set to 'enabled', the path is available as an alternate or primary path.")
repeaterRedundancyAddressTable = MibTable((1, 3, 6, 1, 4, 1, 33, 17, 7, 4), )
if mibBuilder.loadTexts: repeaterRedundancyAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressTable.setDescription('Table of descriptive and status information concerning hub redundancy target addresses.')
repeaterRedundancyAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1), ).setIndexNames((0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyAddressGroupIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyAddressPathIndex"), (0, "ITOUCH-REPEATER-MIB", "repeaterRedundancyAddressAddress"))
if mibBuilder.loadTexts: repeaterRedundancyAddressEntry.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressEntry.setDescription('An entry in the table containing information about a specific target address associated with a hub redundancy path.')
repeaterRedundancyAddressGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressGroupIndex.setDescription('This variable identifies the group.')
repeaterRedundancyAddressPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressPathIndex.setDescription('This variable identifies the path of the group.')
repeaterRedundancyAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 3), TypedAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressAddress.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressAddress.setDescription('This variable identifies the specific target address.')
repeaterRedundancyAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: repeaterRedundancyAddressStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressStatus.setDescription("This variable represents the status of the entry. Setting this object (or any other writable object) to 'valid' will cause the row in the table to be created. Setting this object to 'invalid' will cause the row to be removed.")
repeaterRedundancyAddressResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressResponses.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressResponses.setDescription('This value of this variable represents the number of times this specific address has responded to a test attempt.')
repeaterRedundancyAddressLastTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 33, 17, 7, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notTested", 1), ("responded", 2), ("timeout", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: repeaterRedundancyAddressLastTestStatus.setStatus('mandatory')
if mibBuilder.loadTexts: repeaterRedundancyAddressLastTestStatus.setDescription("This variable indicates whether this particular address responded to the last test of the path. 'notTested' indicates that the path has yet to be tested. 'responded' indicates that the target responded to the last test, 'timeout' indicates that the target responded to the last test.")
accessViolation = NotificationType((1, 3, 6, 1, 4, 1, 33, 17) + (0,1)).setObjects(("ITOUCH-REPEATER-MIB", "repeaterPortIndex"))
if mibBuilder.loadTexts: accessViolation.setDescription('Access violation by connected system with Ethernet address not allowed by repeaterPortAccessTable and repeaterPortAccessAction.')
integrityLoss = NotificationType((1, 3, 6, 1, 4, 1, 33, 17) + (0,2)).setObjects(("ITOUCH-REPEATER-MIB", "repeaterPortIndex"), ("ITOUCH-REPEATER-MIB", "repeaterPortGroupIndex"))
if mibBuilder.loadTexts: integrityLoss.setDescription('This port has lost link integrity.')
redundancyPathChange = NotificationType((1, 3, 6, 1, 4, 1, 33, 17) + (0,3)).setObjects(("ITOUCH-REPEATER-MIB", "repeaterRedundancyGroupGroupIndex"), ("ITOUCH-REPEATER-MIB", "repeaterRedundancyGroupOperPath"))
if mibBuilder.loadTexts: redundancyPathChange.setDescription('This trap issued to indicate that a redundancy group has experienced a path change. The offending group and the new path are included in the trap.')
mibBuilder.exportSymbols("ITOUCH-REPEATER-MIB", Segment=Segment, repeaterRepeaterTotalFrames=repeaterRepeaterTotalFrames, repeaterRedundancyGroupSinceZero=repeaterRedundancyGroupSinceZero, repeaterPortEntry=repeaterPortEntry, repeaterSlotSegment=repeaterSlotSegment, repeaterPortAccessStatusShadow=repeaterPortAccessStatusShadow, repeaterRedundancyPathAdminState=repeaterRedundancyPathAdminState, repeaterRedundancyGroupGroupIndex=repeaterRedundancyGroupGroupIndex, repeaterSecurityPortMulticast=repeaterSecurityPortMulticast, repeaterPortDistance=repeaterPortDistance, repeaterSecurityState=repeaterSecurityState, repeaterSecurityPortTable=repeaterSecurityPortTable, repeaterSecurityGlobalAddressEntry=repeaterSecurityGlobalAddressEntry, repeaterRedundancyAddressStatus=repeaterRedundancyAddressStatus, repeaterPortPulseLosses=repeaterPortPulseLosses, repeaterSecurityPortAllStatus=repeaterSecurityPortAllStatus, repeaterPort2MulticastRatio=repeaterPort2MulticastRatio, xRepeater=xRepeater, repeaterSecurityStatusShadow=repeaterSecurityStatusShadow, repeaterSlotSegmentStatus=repeaterSlotSegmentStatus, repeaterGroupTable=repeaterGroupTable, repeaterSecurityPortUnicast=repeaterSecurityPortUnicast, repeaterSecurityPortSecurityLearn=repeaterSecurityPortSecurityLearn, repeaterRepeaterEntry=repeaterRepeaterEntry, repeaterRedundancyPathConfigStatus=repeaterRedundancyPathConfigStatus, xRepeaterGroupInfo=xRepeaterGroupInfo, repeaterRedundancyPathEntry=repeaterRedundancyPathEntry, repeaterPort2ErrorRatio=repeaterPort2ErrorRatio, repeaterGroupSegment=repeaterGroupSegment, repeaterRedundancyPathTable=repeaterRedundancyPathTable, repeaterRedundancyAddressPathIndex=repeaterRedundancyAddressPathIndex, repeaterSlotSegmentTable=repeaterSlotSegmentTable, repeaterRepeaterFifoOverflows=repeaterRepeaterFifoOverflows, repeaterRepeaterSegmentsAllowed=repeaterRepeaterSegmentsAllowed, repeaterSecurityStatus=repeaterSecurityStatus, repeaterSecurityGroupIndexShadow=repeaterSecurityGroupIndexShadow, repeaterPortAccessState=repeaterPortAccessState, repeaterPort2RmonMulticastPkts=repeaterPort2RmonMulticastPkts, repeaterPort2RmonPkts512to1023Octets=repeaterPort2RmonPkts512to1023Octets, repeaterPort2BroadcastRatio=repeaterPort2BroadcastRatio, redundancyPathChange=redundancyPathChange, repeaterGroupJabbers=repeaterGroupJabbers, repeaterPortAccessPortIndex=repeaterPortAccessPortIndex, repeaterPortPercentUtilization=repeaterPortPercentUtilization, repeaterRedundancyPathChangeTrap=repeaterRedundancyPathChangeTrap, repeaterRedundancyGroupName=repeaterRedundancyGroupName, repeaterPortAccessType=repeaterPortAccessType, repeaterRedundancyGroupConfigStatus=repeaterRedundancyGroupConfigStatus, repeaterSecurityGlobalAddressTable=repeaterSecurityGlobalAddressTable, repeaterPortMCVs=repeaterPortMCVs, repeaterPortPulseStatus=repeaterPortPulseStatus, repeaterPortAccessTable=repeaterPortAccessTable, repeaterRedundancyGroupRollbackAdminState=repeaterRedundancyGroupRollbackAdminState, repeaterAccessViolation=repeaterAccessViolation, repeaterRedundancyAddressTable=repeaterRedundancyAddressTable, repeaterGroupIOCardType=repeaterGroupIOCardType, repeaterRepeaterPercentUtilization=repeaterRepeaterPercentUtilization, repeaterSecurityGlobalSecurityOperState=repeaterSecurityGlobalSecurityOperState, repeaterPort2RmonCRCAlignErrors=repeaterPort2RmonCRCAlignErrors, repeaterGroupManagement=repeaterGroupManagement, repeaterRedundancyGroupRollbackInterval=repeaterRedundancyGroupRollbackInterval, repeaterStatusChangeTrap=repeaterStatusChangeTrap, repeaterGroupRepeaterNumber=repeaterGroupRepeaterNumber, repeaterPortSegment=repeaterPortSegment, repeaterRepeaterZero=repeaterRepeaterZero, repeaterRedundancyPathPort=repeaterRedundancyPathPort, repeaterRedundancyGroupRollbackAttempts=repeaterRedundancyGroupRollbackAttempts, repeaterSecurityGlobalAddressAction=repeaterSecurityGlobalAddressAction, repeaterPortTable=repeaterPortTable, repeaterRepeaterCollisions=repeaterRepeaterCollisions, repeaterPortAutoPolarity=repeaterPortAutoPolarity, repeaterPortGlobalAddressChanges=repeaterPortGlobalAddressChanges, repeaterRepeaterIndex=repeaterRepeaterIndex, repeaterPort2CollisionRatio=repeaterPort2CollisionRatio, repeaterPort2RmonOctets=repeaterPort2RmonOctets, repeaterSecurityGroupIndex=repeaterSecurityGroupIndex, repeaterPort2RmonPkts1024to1518Octets=repeaterPort2RmonPkts1024to1518Octets, repeaterPort2UnicastRatio=repeaterPort2UnicastRatio, integrityLoss=integrityLoss, repeaterRedundancyPathSlot=repeaterRedundancyPathSlot, accessViolation=accessViolation, repeaterRedundancyAddressResponses=repeaterRedundancyAddressResponses, repeaterPortSofMissing=repeaterPortSofMissing, repeaterReports=repeaterReports, repeaterPortPortLastViolationAddress=repeaterPortPortLastViolationAddress, repeaterPortRepeatersAllowed=repeaterPortRepeatersAllowed, repeaterPortAccessGroupIndex=repeaterPortAccessGroupIndex, repeaterGroupAlarmCount=repeaterGroupAlarmCount, repeaterRepeaterJabbers=repeaterRepeaterJabbers, repeaterRedundancyPathDisposition=repeaterRedundancyPathDisposition, repeaterPort2RmonPkts65to127Octets=repeaterPort2RmonPkts65to127Octets, repeaterRedundancyPathTestAttempts=repeaterRedundancyPathTestAttempts, repeaterRedundancyAddressEntry=repeaterRedundancyAddressEntry, repeaterGroupIOCardOperStatus=repeaterGroupIOCardOperStatus, repeaterSecurityPortIndex=repeaterSecurityPortIndex, repeaterGroupMemoryUtilization=repeaterGroupMemoryUtilization, repeaterSecurityGlobalDBID=repeaterSecurityGlobalDBID, repeaterPortGroupIndex=repeaterPortGroupIndex, xRepeaterSlotInfo=xRepeaterSlotInfo, repeaterPort2RmonPkts64Octets=repeaterPort2RmonPkts64Octets, repeaterRedundancyPathPathIndex=repeaterRedundancyPathPathIndex, xRepeaterSecurity=xRepeaterSecurity, repeaterPortAccessLearn=repeaterPortAccessLearn, repeaterSecurityTable=repeaterSecurityTable, repeaterPortZero=repeaterPortZero, repeaterRedundancyPathTimeout=repeaterRedundancyPathTimeout, repeaterRepeaterSegment=repeaterRepeaterSegment, repeaterRedundancyPathActivate=repeaterRedundancyPathActivate, repeaterSecurityGlobalAddress=repeaterSecurityGlobalAddress, repeaterPort2RmonPkts=repeaterPort2RmonPkts, repeaterRedundancyPathPriority=repeaterRedundancyPathPriority, repeaterRedundancyPathRetryCount=repeaterRedundancyPathRetryCount, repeaterGroupSecurityLock=repeaterGroupSecurityLock, repeaterRedundancyState=repeaterRedundancyState, repeaterGroupSQE=repeaterGroupSQE, repeaterSlotSegmentEntry=repeaterSlotSegmentEntry, hubDeprecated=hubDeprecated, repeaterPortAccessAddress=repeaterPortAccessAddress, repeaterPortEthernetRepeater=repeaterPortEthernetRepeater, repeaterRepeaterReports=repeaterRepeaterReports, repeaterSlotIndex=repeaterSlotIndex, repeaterSecurityAddressShadow=repeaterSecurityAddressShadow, repeaterRedundancyGroupEntry=repeaterRedundancyGroupEntry, repeaterRedundancyGroupTestInterval=repeaterRedundancyGroupTestInterval, repeaterPortSinceZero=repeaterPortSinceZero, repeaterFifoOverflows=repeaterFifoOverflows, repeaterRedundancyPathLastTestStatus=repeaterRedundancyPathLastTestStatus, repeaterPortPolarityDirection=repeaterPortPolarityDirection, repeaterSecurityAction=repeaterSecurityAction, repeaterRepeaterTotalOctets=repeaterRepeaterTotalOctets, repeaterRedundancyGroupPathChanges=repeaterRedundancyGroupPathChanges, repeaterPort2RmonPkts256to511Octets=repeaterPort2RmonPkts256to511Octets, repeaterIntegrityLossTrap=repeaterIntegrityLossTrap, repeaterPort2TrafficRatio=repeaterPort2TrafficRatio, repeaterRedundancyGroupZero=repeaterRedundancyGroupZero, xRepeaterInfo=xRepeaterInfo, repeaterRedundancyPathStatus=repeaterRedundancyPathStatus, repeaterMyGroup=repeaterMyGroup, repeaterPortAccessAllStatus=repeaterPortAccessAllStatus, xRepeaterRepeater=xRepeaterRepeater, repeaterSecurityAddress=repeaterSecurityAddress, repeaterRedundancyAddressGroupIndex=repeaterRedundancyAddressGroupIndex, repeaterPort2RmonPkts128to255Octets=repeaterPort2RmonPkts128to255Octets, repeaterPortIndex=repeaterPortIndex, repeaterSecurityGlobalAddressStatus=repeaterSecurityGlobalAddressStatus, repeaterGroupManagerRepeater=repeaterGroupManagerRepeater, repeaterPortPulse=repeaterPortPulse, repeaterGroupCpuUtilization=repeaterGroupCpuUtilization, repeaterRepeaterSQE=repeaterRepeaterSQE, repeaterRedundancyGroupAdminState=repeaterRedundancyGroupAdminState, repeaterRedundancyAddressLastTestStatus=repeaterRedundancyAddressLastTestStatus, repeaterPort2RmonBroadcastPkts=repeaterPort2RmonBroadcastPkts, repeaterGroupFifoErrors=repeaterGroupFifoErrors, repeaterPortName=repeaterPortName, repeaterPort2Entry=repeaterPort2Entry, repeaterPortPortAddressViolations=repeaterPortPortAddressViolations, xRepeaterPortInfo=xRepeaterPortInfo, repeaterGroupIOCardFirmwareVersion=repeaterGroupIOCardFirmwareVersion, repeaterRedundancyAddressAddress=repeaterRedundancyAddressAddress, repeaterPortAccessGroupIndexShadow=repeaterPortAccessGroupIndexShadow, repeaterPortAccessPortIndexShadow=repeaterPortAccessPortIndexShadow, repeaterHealthTrap=repeaterHealthTrap, repeaterPortAccessAddressShadow=repeaterPortAccessAddressShadow, repeaterPort2Table=repeaterPort2Table, repeaterRedundancyGroupOperPath=repeaterRedundancyGroupOperPath, repeaterSecurityEntry=repeaterSecurityEntry, repeaterPortGlobalSecurityAddress=repeaterPortGlobalSecurityAddress, xRepeaterRedundancy=xRepeaterRedundancy, repeaterLEDDisplay=repeaterLEDDisplay, repeaterSecurityPortIndexShadow=repeaterSecurityPortIndexShadow, Repeater=Repeater, repeaterGroupRepeaterHardwareVersion=repeaterGroupRepeaterHardwareVersion, repeaterAccessViolationTrap=repeaterAccessViolationTrap, repeaterRepeaterTable=repeaterRepeaterTable, repeaterRedundancyGroupStatus=repeaterRedundancyGroupStatus, repeaterPortAccessStatus=repeaterPortAccessStatus, repeaterRedundancyPathGroupIndex=repeaterRedundancyPathGroupIndex, repeaterGroupEntry=repeaterGroupEntry, repeaterRepeaterGroupIndex=repeaterRepeaterGroupIndex, repeaterPortAccessAction=repeaterPortAccessAction, repeaterPortAccessEntry=repeaterPortAccessEntry, repeaterRedundancyGroupTable=repeaterRedundancyGroupTable, repeaterGroupIndex=repeaterGroupIndex, repeaterSecurityGlobalSecurityAdminState=repeaterSecurityGlobalSecurityAdminState, repeaterSecurityPortEntry=repeaterSecurityPortEntry, repeaterRepeaterSinceZero=repeaterRepeaterSinceZero)
