#
# PySNMP MIB module ALTIGA-PPP-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTIGA-PPP-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alPppMibModule, = mibBuilder.importSymbols("ALTIGA-GLOBAL-REG", "alPppMibModule")
alStatsPpp, alPppGroup = mibBuilder.importSymbols("ALTIGA-MIB", "alStatsPpp", "alPppGroup")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, MibIdentifier, TimeTicks, iso, ModuleIdentity, NotificationType, Integer32, Counter32, Gauge32, ObjectIdentity, Counter64, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "MibIdentifier", "TimeTicks", "iso", "ModuleIdentity", "NotificationType", "Integer32", "Counter32", "Gauge32", "ObjectIdentity", "Counter64", "IpAddress", "Unsigned32")
DisplayString, TextualConvention, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus", "TruthValue")
altigaPppStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3076, 1, 1, 11, 2))
altigaPppStatsMibModule.setRevisions(('2002-09-05 13:00', '2002-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: altigaPppStatsMibModule.setRevisionsDescriptions(('Added module compliance and range.', 'Updated with new header',))
if mibBuilder.loadTexts: altigaPppStatsMibModule.setLastUpdated('200209051300Z')
if mibBuilder.loadTexts: altigaPppStatsMibModule.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: altigaPppStatsMibModule.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cvpn3000@cisco.com')
if mibBuilder.loadTexts: altigaPppStatsMibModule.setDescription('The Altiga PPP Statistics MIB models counters and objects that are of management interest for PPP. Acronyms The following acronyms are used in this document: MIB: Management Information Base MPPC: Microsoft Point-to-Point Compression MPPE: Microsoft Point-to-Point Encryption PPP: Point-to-Point Protocol ')
alStatsPppGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 1))
alPppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2), )
if mibBuilder.loadTexts: alPppStatsTable.setStatus('current')
if mibBuilder.loadTexts: alPppStatsTable.setDescription('List of active PPP links.')
alPppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1), ).setIndexNames((0, "ALTIGA-PPP-STATS-MIB", "alPppStatsIfIndex"))
if mibBuilder.loadTexts: alPppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: alPppStatsEntry.setDescription('An entry in the alPppStatsTable.')
alPppStatsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alPppStatsRowStatus.setStatus('current')
if mibBuilder.loadTexts: alPppStatsRowStatus.setDescription('The status of this row. Used to terminate the session.')
alPppStatsIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsIfIndex.setStatus('current')
if mibBuilder.loadTexts: alPppStatsIfIndex.setDescription('The index of this row.')
alPppStatsOctetsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsOctetsSent.setStatus('current')
if mibBuilder.loadTexts: alPppStatsOctetsSent.setDescription('The number of octets sent during this session.')
alPppStatsOctetsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsOctetsRcvd.setStatus('current')
if mibBuilder.loadTexts: alPppStatsOctetsRcvd.setDescription('The number of octets received during this session.')
alPppStatsPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsPacketsSent.setStatus('current')
if mibBuilder.loadTexts: alPppStatsPacketsSent.setDescription('The number of packets sent during this session.')
alPppStatsPacketsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsPacketsRcvd.setStatus('current')
if mibBuilder.loadTexts: alPppStatsPacketsRcvd.setDescription('The number of packets received during this session.')
alPppStatsMppcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcStatus.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcStatus.setDescription('The status of the MPPC setting during this session.')
alPppStatsMppeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppeStatus.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppeStatus.setDescription('The status of the MPPE setting during this session.')
alPppStatsMppcMppeReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcMppeReset.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcMppeReset.setDescription('The reset MPPC and MPPE counts for this session.')
alPppStatsMppcOctSentAfterComp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcOctSentAfterComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcOctSentAfterComp.setDescription('The number of octets sent after compression during this session.')
alPppStatsMppcOctSentBeforeComp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcOctSentBeforeComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcOctSentBeforeComp.setDescription('The number of octets sent before compression during this session.')
alPppStatsMppcOctSentUnComp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcOctSentUnComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcOctSentUnComp.setDescription('The number of octets sent uncompressed during this session.')
alPppStatsMppcOctRcvdBeforeDeComp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcOctRcvdBeforeDeComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcOctRcvdBeforeDeComp.setDescription('The number of octets received before decompression during this session.')
alPppStatsMppcOctRcvdAfterDeComp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcOctRcvdAfterDeComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcOctRcvdAfterDeComp.setDescription('The number of octets received after decompression during this session.')
alPppStatsMppcOctRcvdUnComp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsMppcOctRcvdUnComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsMppcOctRcvdUnComp.setDescription('The number of octets received uncompressed during this session.')
alStatsPppMppcGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3))
alPppStatsGlobMppcMppeResetsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcMppeResetsRcvd.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcMppeResetsRcvd.setDescription('Reset the number of octets received.')
alPppStatsGlobMppcMppeResetsSent = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcMppeResetsSent.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcMppeResetsSent.setDescription('Reset the number of octets sent.')
alPppStatsGlobMppcOctSentAfterComp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcOctSentAfterComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcOctSentAfterComp.setDescription('Total number of octets sent after compression.')
alPppStatsGlobMppcOctSentBeforeComp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcOctSentBeforeComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcOctSentBeforeComp.setDescription('Total number of octets sent before compression.')
alPppStatsGlobMppcOctSentUnComp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcOctSentUnComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcOctSentUnComp.setDescription('Total number of octets sent uncompressed.')
alPppStatsGlobMppcOctRcvdBeforeDeComp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcOctRcvdBeforeDeComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcOctRcvdBeforeDeComp.setDescription('Total number of octets received before decompression.')
alPppStatsGlobMppcOctRcvdAfterDeComp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcOctRcvdAfterDeComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcOctRcvdAfterDeComp.setDescription('Total number of octets received after decompression.')
alPppStatsGlobMppcOctRcvdUnComp = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 6, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alPppStatsGlobMppcOctRcvdUnComp.setStatus('current')
if mibBuilder.loadTexts: alPppStatsGlobMppcOctRcvdUnComp.setDescription('Total number of octets received uncompressed.')
altigaPppStatsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 11, 2, 1))
altigaPppStatsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 11, 2, 1, 1))
altigaPppStatsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 11, 2, 1, 1, 1)).setObjects(("ALTIGA-PPP-STATS-MIB", "altigaPppStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaPppStatsMibCompliance = altigaPppStatsMibCompliance.setStatus('current')
if mibBuilder.loadTexts: altigaPppStatsMibCompliance.setDescription('The compliance statement for agents which implement the Altiga PPP Statistics MIB.')
altigaPppStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 6, 2)).setObjects(("ALTIGA-PPP-STATS-MIB", "alPppStatsRowStatus"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsIfIndex"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsOctetsSent"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsOctetsRcvd"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsPacketsSent"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsPacketsRcvd"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcStatus"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppeStatus"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcMppeReset"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcOctSentAfterComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcOctSentBeforeComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcOctSentUnComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcOctRcvdBeforeDeComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcOctRcvdAfterDeComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsMppcOctRcvdUnComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcMppeResetsRcvd"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcMppeResetsSent"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcOctSentAfterComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcOctSentBeforeComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcOctSentUnComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcOctRcvdBeforeDeComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcOctRcvdAfterDeComp"), ("ALTIGA-PPP-STATS-MIB", "alPppStatsGlobMppcOctRcvdUnComp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaPppStatsGroup = altigaPppStatsGroup.setStatus('current')
if mibBuilder.loadTexts: altigaPppStatsGroup.setDescription('The objects for PPP statistics.')
mibBuilder.exportSymbols("ALTIGA-PPP-STATS-MIB", alPppStatsMppcMppeReset=alPppStatsMppcMppeReset, alPppStatsGlobMppcMppeResetsSent=alPppStatsGlobMppcMppeResetsSent, alPppStatsGlobMppcOctRcvdUnComp=alPppStatsGlobMppcOctRcvdUnComp, alPppStatsMppcOctRcvdUnComp=alPppStatsMppcOctRcvdUnComp, alPppStatsMppcOctSentAfterComp=alPppStatsMppcOctSentAfterComp, alPppStatsGlobMppcOctRcvdBeforeDeComp=alPppStatsGlobMppcOctRcvdBeforeDeComp, PYSNMP_MODULE_ID=altigaPppStatsMibModule, altigaPppStatsMibModule=altigaPppStatsMibModule, altigaPppStatsGroup=altigaPppStatsGroup, alStatsPppMppcGlobal=alStatsPppMppcGlobal, alPppStatsGlobMppcMppeResetsRcvd=alPppStatsGlobMppcMppeResetsRcvd, alPppStatsMppcOctRcvdBeforeDeComp=alPppStatsMppcOctRcvdBeforeDeComp, alPppStatsMppcStatus=alPppStatsMppcStatus, alPppStatsGlobMppcOctSentAfterComp=alPppStatsGlobMppcOctSentAfterComp, alPppStatsTable=alPppStatsTable, alPppStatsEntry=alPppStatsEntry, alPppStatsGlobMppcOctSentUnComp=alPppStatsGlobMppcOctSentUnComp, alPppStatsOctetsRcvd=alPppStatsOctetsRcvd, altigaPppStatsMibCompliances=altigaPppStatsMibCompliances, alPppStatsGlobMppcOctRcvdAfterDeComp=alPppStatsGlobMppcOctRcvdAfterDeComp, alPppStatsPacketsSent=alPppStatsPacketsSent, alPppStatsGlobMppcOctSentBeforeComp=alPppStatsGlobMppcOctSentBeforeComp, alPppStatsOctetsSent=alPppStatsOctetsSent, altigaPppStatsMibConformance=altigaPppStatsMibConformance, alPppStatsRowStatus=alPppStatsRowStatus, alPppStatsPacketsRcvd=alPppStatsPacketsRcvd, alPppStatsMppcOctRcvdAfterDeComp=alPppStatsMppcOctRcvdAfterDeComp, alPppStatsMppcOctSentUnComp=alPppStatsMppcOctSentUnComp, alPppStatsIfIndex=alPppStatsIfIndex, alPppStatsMppeStatus=alPppStatsMppeStatus, alPppStatsMppcOctSentBeforeComp=alPppStatsMppcOctSentBeforeComp, alStatsPppGlobal=alStatsPppGlobal, altigaPppStatsMibCompliance=altigaPppStatsMibCompliance)
