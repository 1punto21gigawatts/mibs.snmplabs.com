#
# PySNMP MIB module DECHUB90-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DECHUB90-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Bits, IpAddress, Gauge32, Integer32, NotificationType, NotificationType, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, enterprises, Counter64, Counter32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "IpAddress", "Gauge32", "Integer32", "NotificationType", "NotificationType", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "enterprises", "Counter64", "Counter32", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dec = MibIdentifier((1, 3, 6, 1, 4, 1, 36))
ema = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2))
decMIBextension = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18))
dechub90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10))
dh90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1))
da90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2))
ds90L = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3))
drpt90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4))
db90ext = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5))
db90system = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1))
db90interfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 2))
db90bridge = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3))
dbSysChar = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1, 1))
dbSysStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1, 2))
db90Char = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1))
db90Stat = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2))
db90Coun = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 3))
db90Span = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4))
db90PortInterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5))
db90ProtoFilt = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6))
emaSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15))
proxyAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 10))
decagent90 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1))
decagent90v1 = MibIdentifier((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1))
dh90Type = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("standAloneCommunity", 3), ("dechub90", 4), ("dechub900", 5), ("decstack90", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90Type.setStatus('mandatory')
if mibBuilder.loadTexts: dh90Type.setDescription("Identifies the type of community (hub, string or standalone device) managed by DECagent 90 modules. Setting this variable to invalid(2) deletes the community associated with the community string and releases resources used by the community. Setting the value of an existing community of type dechub90(4) or dechub900(5) or STACKhub90(6) to standAloneCommunity(3) requires that there be no modules or a single module in the hub. Any other configuration will result in a 'genErr' response. The value unknown(1) is read-only as an indicator that a particular community's resource area may be corrupt. Attempting to set the value to unknown(1) will result in a 'badValue' response.")
dh90Backplane = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90Backplane.setStatus('mandatory')
if mibBuilder.loadTexts: dh90Backplane.setDescription('Media on the backplane of hub.')
dh90LastChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90LastChange.setStatus('mandatory')
if mibBuilder.loadTexts: dh90LastChange.setDescription('The value of the sysUpTime at the time a module was added or removed from this community.')
dh90NumberSlots = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90NumberSlots.setStatus('mandatory')
if mibBuilder.loadTexts: dh90NumberSlots.setDescription("Number of slots in the hub backplane. Setting this variable to the value 1, 8 or 16 defines the size of a hub in a particular community. Note that attempting to set this variable to a value smaller than the existing value when there are modules present in the slots that would be eliminated by the reduction in hub size will result in a 'genErr' response.")
dh90SlotTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5), )
if mibBuilder.loadTexts: dh90SlotTable.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotTable.setDescription('A list of modules installed in the DEChub 90. To create a new row (module) in the slot table, set an instance (slot) of dh90SlotModuleType which is currently empty(2) to the appropriate value. If adding a bridge or server, next set the dh90SlotPhysicalAddress for the row. Sets of the other variables in the row must be done in separate PDUs after the MAC address of the device has been set correctly. When sweeping the slot table with getNext, rows of the table which are empty will be skipped. The only values returned are for slots which are occupied. To delete a module, set the dh90SlotModuleType (instanced by slot number) to empty(2). The row corresponding to the slot number will be deleted from the table.')
dh90SlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1), ).setIndexNames((0, "DECHUB90-MIB", "dh90SlotIndex"))
if mibBuilder.loadTexts: dh90SlotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotEntry.setDescription('Contains objects defining characteristics of modules in the community.')
dh90SlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotIndex.setDescription("The slot number containing the module. Setting this variable to the slot number of an empty slot in the community will result in the module being moved to that slot. Setting this variable to the value of a slot which is occupied results in a 'genErr' response. Setting it to a value which is outside the range (1..dh90NumberSlots) results in a 'badValue' response. DEChub 90 restrictions: some modules can reside only in certain slots of a DEChub 90. The DECbridge 90 and DECbridge 90FL are restricted to slot 7 or 8. The DECagent 90 and DECrepeater 90FA are restricted to slot 7, 8, 15, or 16. These restrictions do not apply when these modules are in a DEChub 900. You are not allowed to move the managing DECagent 90. Attempting to do so will result in a 'genErr' response.")
dh90SlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26))).clone(namedValues=NamedValues(("unknown", 1), ("empty", 2), ("decserver90L", 3), ("decbridge90", 4), ("decrepeater90C", 5), ("decrepeater90T", 6), ("decagent90", 7), ("decserver90Lplus", 8), ("decserver90TL", 9), ("decbrouter90T1", 10), ("decbrouter90T2", 11), ("decrepeater90FL", 12), ("decrepeater90FA", 13), ("decbridge90FL", 14), ("decwanrouter90", 15), ("decpacketprobe90", 16), ("decpacketprobe90plus", 17), ("decserver90Lplus2", 18), ("decserver90M", 19), ("decbrouter90T2A", 20), ("decmau900TL", 21), ("decrepeater900TL", 22), ("decrepeater900SL", 23), ("decagent900RA", 24), ("decmau900TC", 25), ("decrepeater900FL", 26)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotModuleType.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotModuleType.setDescription("- do not use, provided for backwards compatibility only - Use dh90SlotObjectID instead. The type of the module in a slot. If the slot is known to be empty, a value of empty(2) is used. If the slot is occupied by a module of unknown type, a value of unknown(1) is used. Note that the restrictions on module placement in the DEChub 90 as described in the description of dh90SlotIndex apply here as well. The value unknown(1) is read-only as an indicator that a particular module's resource area may be corrupt. Attempting to set the value to unknown(1) will result in a 'badValue' response.")
dh90SlotModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotModuleName.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotModuleName.setDescription("A textual description of the module. Setting a value with embedded spaces or tabs will result in a 'badValue' response. Note that for a DECserver 90, you cannot set this value to a null string. Attempting to do so will result in a 'badValue' response.")
dh90SlotModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotModuleVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotModuleVersion.setDescription('A textual description of the version level of the hardware and firmware of the module.')
dh90SlotCounterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotCounterTime.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotCounterTime.setDescription("Time since the counters of this module were zeroed. Devices which do not support MOP counters will return a 'noSuchName' response.")
dh90SlotIfBase = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotIfBase.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotIfBase.setDescription("An index into the ifTable for the first network interface on this module. Add one to this value to reference the ifTable entry which corresponds to the second interface, etc. If no interfaces are supported on the module, a response of 'noSuchName' is returned.")
dh90SlotIfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotIfNumber.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotIfNumber.setDescription("The number of network interfaces on this module. For example, a DECbridge 90 has 2 network interfaces, the backbone and the workgroup ports. A DECserver 90L has a single network interface. For devices with no interfaces, a response of 'noSuchName' is returned.")
dh90SlotPhysicalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotPhysicalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotPhysicalAddress.setDescription("A read-write variable for the physical address to allow devices to be added to the hub remotely. Writing this variable as part of a remote add device routine will cause the new physical address to be accessible in the corresponding ifPhysAddress variable in the ifTable. Attempts to set this variable for the managing DECagent 90 with a value which is different from the actual station address will result in a 'genErr' response.")
dh90SlotNumberOfPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotNumberOfPorts.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotNumberOfPorts.setDescription('The number of ports on this module. Returns the following values for the indicated devices: Device Value ================ ===== DECagent 90 1 DECbridge 90 2 DECbridge 90FL 2 DECrepeater 90FA 2 DECrepeater 90FL 4 DECrepeater 90C 6 DECrepeater 90T 8 DECserver 90L 8 DECserver 90L+ 8 DECserver 90M 8 DECserver 90TL 8 Other devices may return a non-zero value also.')
dh90SlotPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotPassword.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotPassword.setDescription("Password used to enable privileged operations on devices which support the MOP and RBMS protocols for remote management. Setting a value containing embedded spaces or tabs will result in a 'badValue' response. Supported devices include: DECserver 90L, DECserver 90L+, DECbridge 90 and DECbridge 90FL. For DECserver 90's, the maximum password length is eight (8). For DECbridge 90's, the maximum password length is sixteen (16). Passwords which exceed these values will result in a 'badValue' response. Reads to this variable for supported devices will always return a null string. For other devices, access to this variable will result in a 'noSuchName' response. NOTE: It is imperative that the DECagent 90 be password-synchronized with the remote devices it is managing. If a device has a password, the DECagent 90 will not be able to perform sets to it without the correct password. Sets to this variable cause the value to be stored in the DECagent 90's non-volatile storage for use when accessing the device in the specified slot.")
dh90SlotNewPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotNewPassword.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotNewPassword.setDescription("Setting this variable causes the agent to set a new password on the device using the value provided as the new password and the current value of dh90SlotPassword as the old password. Setting a value containing embedded spaces or tabs will result in a 'badValue' response. See the description of dh90SlotPassword above for supported devices and password length restrictions. Notes related only to DECservers: authorized mode must be enabled in order to set a new password. See the description of ds90LAuthorizeMode for details. If authorized mode is disabled, a 'genErr' response will be returned. Also, the new password cannot be set to null. Attempting to do so will result in a 'badValue' response. To disable password security you must set ds90LAuthorizeMode to disable(2). Reads to this variable for supported devices will always return a null string. For other devices, access to this variable will result in a 'noSuchName' response.")
dh90SlotPolling = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotPolling.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotPolling.setDescription("The current polling status of the module. If the DECagent 90 is polling this device, a get of this variable will return on(2), otherwise off(1) is returned. Setting this variable to off(1) causes the agent to stop polling the device in this slot. Setting this variable to on(2) causes the agent to start polling the device in the specified slot. If a device does not repond to a poll, a SlotStatusChange(1) enterprise-specific trap is generated. Attempting to set to off(1) the slot polling of the agent will result in a 'badValue' response.")
dh90SlotPrimarySpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 13), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotPrimarySpecific.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotPrimarySpecific.setDescription('For proxied modules, a reference to its primary MIB definition. For bridges, a reference to the MIB-II dot1dBridge MIB. For terminal servers, a reference to the MIB-II character-like MIB. For DECagents, a reference to the { da90 } portion of this MIB. For repeaters, a reference to the { drpt90 } portion of this MIB. If the module realizes some other function, the object identifier nullSpecific OBJECT IDENTIFIER ::= { 0 0 } is returned.')
dh90SlotSecondarySpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 14), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotSecondarySpecific.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotSecondarySpecific.setDescription('For bridges, a reference to the { db90ext } portion of this MIB. For terminal servers, a reference to the MIB-II rs232-like MIB definition. Otherwise, the object identifier nullSpecific OBJECT IDENTIFIER ::= { 0 0 } is returned.')
dh90SlotIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 15), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotIpAddress.setDescription('The IP address of the device in the given slot. This value is returned only for devices which implement their own on-board SNMP agent.')
dh90SlotCommunityString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotCommunityString.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotCommunityString.setDescription('The community string of the device in the given slot. This value is returned only for devices which implement their own on-board SNMP agent. For the managing agent, the read-only community string is returned if it is not null, otherwise the read-write community string is returned.')
dh90SlotObjectID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 17), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotObjectID.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotObjectID.setDescription('The sysObjectID of the module in the given slot. This value is provided by the DECagent 90 for modules in community 1. It can be stored manually for modules in other communities.')
dh90SlotProxyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("reachable", 1), ("unreachable", 2), ("present", 3), ("not-present", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotProxyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotProxyStatus.setDescription('The state of the module as known by the proxy agent. The possible states and their meanings are: reachable - indicates an operational module for which this agent will perform proxy operations. unreachable - indicates a proxy operation has been unsuccessful to this module. The agent cannot determine if the module has been removed, has failed, or is unreachable due to network load. present - indicates a module for which this agent does not perform proxy operations. not-present - indicates that the agent has determined that the module has been removed, or has failed, but the module data has been retained since the user has performed sets to this module. The module data will be retained until the module is returned to this location, or moved or deleted by the NMS.')
dh90SlotConflictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("conflict", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotConflictStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotConflictStatus.setDescription("Indicates whether a module conflict has been detected. A conflict indicates that the agent has discovered a module in this slot which is a different type from the module which already exists in the agent's database. Examples of conflicts are: - A module has been discovered in this slot and there is an active module already in this slot. In this case, dh90SlotProxyStatus would have a value of present(4). This indicates that the active module was manually added to an incorrect slot and should be moved to its correct location. - A module has been discovered in this slot and the last known module in this slot was of a different type and that last known module had other than default parameters set. The last known module was physically removed and possibly moved to a new location. In this case, the dh90SlotProxyStatus may have the a of unreachable(2) or not-present(3). Either delete the module from this slot to allow the discovered module to replace it, or move the module in this slot to a new location.")
dh90SlotConflictDiscoveredID = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 20), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90SlotConflictDiscoveredID.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotConflictDiscoveredID.setDescription('If dh90SlotConflictStatus has a value of conflict(2) then this object indicates the sysObjectID of the module that has been discovered thus creating the conflict. If dh90SlotConflictStatus has a value of none(1) then this object will contain the sysObjectID of the module.')
dh90SlotReset = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 5, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ready", 1), ("reset", 2), ("resetToFactory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90SlotReset.setStatus('mandatory')
if mibBuilder.loadTexts: dh90SlotReset.setDescription('A control variable to perform reset functions on DEChub 90 modules which are in the same hub as the managing agent. The agent must be the hub master (see da90BackplaneState) for reset functions to be performed. In response to a Get or getNext request, the agent returns the value ready(1). Setting this value to reset(2) causes the entire module to be reset. Setting this value to resetToFactory(3) causes the entire device to be reset to the original factory settings. For repeaters, all port names are cleared and all drpt90PortAdminStatus values are set to enabled(1). For both reset functions, the port address database is cleared. Note that this object performs the same reset functions as ds90LMaintenance for terminal servers, dbSysInitSwitch for bridges and da90Maintenance for the managing agent.')
dh90TrapAddressTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 6), )
if mibBuilder.loadTexts: dh90TrapAddressTable.setStatus('mandatory')
if mibBuilder.loadTexts: dh90TrapAddressTable.setDescription('A table of IP addresses to which this device will send SNMP traps.')
dh90TrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 6, 1), ).setIndexNames((0, "DECHUB90-MIB", "dh90TrapAddress"))
if mibBuilder.loadTexts: dh90TrapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dh90TrapEntry.setDescription('Each entry contains an IP address to which all SNMP traps will be sent by this community.')
dh90TrapAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dh90TrapAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dh90TrapAddress.setDescription("An IP address to which all SNMP traps generated for this community will be sent. Setting an instance to a value of zero will delete the row in the table. Setting an instance to the current value of the DECagent's IP address will result in a 'genErr' response.")
dh90LastErrorMsg = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90LastErrorMsg.setStatus('mandatory')
if mibBuilder.loadTexts: dh90LastErrorMsg.setDescription('Indicates the last error message for this community. Examples of errors which may cause this string to be updated are: - An error in a proxy operation (get or set) to a terminal server or bridge (e.g. invalid command response, invalid password). - Terminal server MOP console is busy. Whenever this object changes value, the dh90LastErrorSlot object and the dh90LastErrorChange object will be updated.')
dh90LastErrorChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90LastErrorChange.setStatus('mandatory')
if mibBuilder.loadTexts: dh90LastErrorChange.setDescription("The value of MIB-II's sysUpTime (in the agent supporting this MIB) when a module event occurred which caused the dh90LastErrorMsg object to be updated.")
dh90LastErrorSlot = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90LastErrorSlot.setStatus('mandatory')
if mibBuilder.loadTexts: dh90LastErrorSlot.setDescription('The slot of the module which caused the dh90LastErrorMsg object to be updated. A value of zero (0) indicates that an error has not yet occurred.')
dh90PopulationChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90PopulationChange.setStatus('mandatory')
if mibBuilder.loadTexts: dh90PopulationChange.setDescription('The total number of changes in population of the modules within the community. This counter is incremented: - when a module is added or discovered, or - when a module is deleted or undiscovered, or - when a module conflict occurs The purpose of this object is to provide a single object in the community which can be polled by an NMS to determine if there have been changes in the hub population.')
dh90PopulationLastChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90PopulationLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: dh90PopulationLastChange.setDescription("The value of MIB-II's sysUpTime (in the agent supporting this MIB) when a module event occurred which caused the increment of the dh90PopulationChange counter.")
dh90StatusChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90StatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: dh90StatusChange.setDescription('The total number of changes to status of the modules within the community. This counter is incremented: - when a proxied module becomes reachable, or - when a proxied module becomes unreachable, or - when a proxied module has a change in port status. The purpose of this object is to provide a single object in the community which can be polled by an NMS to determine if there have been changes in status of modules or ports within the hub. Note that this object does not warn of impending counter rollovers, which the NMS will still have to poll for occasionally.')
dh90StatusLastChange = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dh90StatusLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: dh90StatusLastChange.setDescription("The value of MIB-II's sysUpTime (in the agent supporting this MIB) when a module event occurred which caused the increment of the dh90StatusChange counter.")
da90FlashErasures = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90FlashErasures.setStatus('mandatory')
if mibBuilder.loadTexts: da90FlashErasures.setDescription('The number of times the flash memory on this DECagent 90 has been erased. This number is the total of erasures for all flash segments.')
da90Maintenance = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("setsDisabled", 2), ("reset", 3), ("resetToFactory", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90Maintenance.setStatus('mandatory')
if mibBuilder.loadTexts: da90Maintenance.setDescription('A control variable to perform reset functions on a DECagent 90. In response to a Get or a getNext request, the agent returns ready(1) if SNMP sets are enabled, or setsDisabled(2) if they are disabled. Setting this value to setsDisabled(2) causes SNMP sets to be disabled. Note, however, that you cannot re-enable SNMP sets via this mechanism. SNMP sets can only be re-enabled via the console interface, or by restoring factory settings. Setting this value to reset(3) causes the entire module to be reset. Setting this value to resetToFactory(4) causes the entire device to be reset to the original factory settings. Setting either reset(3) and resetToFactory(4) results in an immediate reset with no response PDU being issued.')
da90CommunityNumber = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90CommunityNumber.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityNumber.setDescription('Number of entries in the da90CommunityTable.')
da90CommunityTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4), )
if mibBuilder.loadTexts: da90CommunityTable.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityTable.setDescription('A table of community strings for client communities.')
da90CommunityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4, 1), ).setIndexNames((0, "DECHUB90-MIB", "da90CommunityIndex"))
if mibBuilder.loadTexts: da90CommunityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityEntry.setDescription('Contains community type and strings, including the read-only profile, the read-write profile and a trap string.')
da90CommunityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90CommunityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityIndex.setDescription('Index into hub-community string pair table, identifies the community being accessed.')
da90CommunityType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("active", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityType.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityType.setDescription("Identifies whether the current community information is active for this row in the community table. The value unknown(1) is read-only and indicates that this row in the community table contains questionable data. Setting to invalid(2) deletes this row in the community table, thereby freeing the NVRAM used to store the community information (i.e. destroys the slot and port tables for this community). Attempting to set invalid(2) the community in which the managing DECagent resides will result in a 'genErr' response.")
da90CommunityROString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityROString.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityROString.setDescription("Community string, with a read-only profile, used to access a client hub. All community strings in the read-only set must be unique. Setting such a community string to a pre-existing value returns a status of 'badValue'. Reading this variable with a community string other than one of the agent's community strings will result in a 'noSuchName' response.")
da90CommunityRWString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityRWString.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityRWString.setDescription("Community string, with a read-write profile, used to access a client hub. All community strings in the read-write set must be unique. Setting such a community string to a pre-existing value returns a status of 'badValue'. Reading this variable with a community string other than the agent's read-write community string will result in a 'noSuchName' response.")
da90CommunityTrapString = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90CommunityTrapString.setStatus('mandatory')
if mibBuilder.loadTexts: da90CommunityTrapString.setDescription("Community string sent with traps generated due to events caused by this community. The trap community strings do not have to be unique. This variable is read using one of the agent's community string.")
da90AgentSlot = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90AgentSlot.setStatus('mandatory')
if mibBuilder.loadTexts: da90AgentSlot.setDescription('The slot number in which the managing DECagent 90 resides.')
da90ErrorlogTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6), )
if mibBuilder.loadTexts: da90ErrorlogTable.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogTable.setDescription('The da90ErrorlogTable is a ring of eight (8) errorlog entries for this DECagent 90. Thus, the ninth entry will overwrite the first entry, the tenth entry will overwrite the second entry, and so on. The last entry with the highest value of da90ErrorlogWriteCount is the most recent entry. The errorlog contains information about extraordinary events which have occurred in the DECagent, including user-initiated reset-to-factory settings, fatal traps and unexpected traps. The errorlog does not contain normal SNMP trap information.')
da90ErrorlogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6, 1), ).setIndexNames((0, "DECHUB90-MIB", "da90ErrorlogIndex"))
if mibBuilder.loadTexts: da90ErrorlogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogEntry.setDescription('An entry in the errorlog containing the DECagent reset count at the time the entry was logged, the timestamp in hundredths of a second since the last reset occurred, the number of times this table entry has been written to and the error information in textual form.')
da90ErrorlogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90ErrorlogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogIndex.setDescription('The index into the errorlog table.')
da90ErrorlogResetCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90ErrorlogResetCount.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogResetCount.setDescription('The number of times the DECagent has been reset (soft or hard reset) since the creation of the errorlog or the last reset-to-factory settings. A value of zero indicates that this error occurred before initialization was complete. See da90ResetCount for additional details.')
da90ErrorlogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90ErrorlogTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogTimeStamp.setDescription('The uptime, in hundredths of a second, of the DECagent when this entry was logged.')
da90ErrorlogWriteCount = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90ErrorlogWriteCount.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogWriteCount.setDescription('The number of times this row in the errorlog table has been written.')
da90ErrorlogData = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90ErrorlogData.setStatus('mandatory')
if mibBuilder.loadTexts: da90ErrorlogData.setDescription('A textual description of the error for this errorlog entry.')
da90ResetCount = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90ResetCount.setStatus('mandatory')
if mibBuilder.loadTexts: da90ResetCount.setDescription('The total number of resets to the agent that has occurred, including power-ups. This counter is maintained in non-volatile storage and is reset to zero only when a reset-to-factory settings occurs.')
da90BackplaneMode = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90BackplaneMode.setStatus('mandatory')
if mibBuilder.loadTexts: da90BackplaneMode.setDescription("The desired state of the DECagent 90's hub mastership (i.e. it's ability to directly manage repeaters, terminal servers and bridges and discover other modules which reside in the same hub as the agent). This value is retained in non-volatile storage. It's default value is master(2).")
da90BackplaneState = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("slave", 1), ("master", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90BackplaneState.setStatus('mandatory')
if mibBuilder.loadTexts: da90BackplaneState.setDescription('Indicates whether the DECagent 90 is managing the hub (i.e. capable of directly managing repeaters, terminal servers and bridges and discovering other modules).')
da90BackplaneAddrDbAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90BackplaneAddrDbAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: da90BackplaneAddrDbAgingTime.setDescription("A non-volatile value indicating the number of minutes an address discovered by the agent will remain in the forwarding database address table. This variable is meaningful only when the agent is the bus master of the hub backplane (see da90BackplaneState). It's default value is 600 minutes.")
da90LoadAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start-read", 2), ("start-write", 3), ("cancel", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90LoadAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: da90LoadAdminStatus.setDescription('This object is used to control the program TFTP load process of a device. When read, the value other(1) is returned. When set to start-read(2) the device initiates a TFTP read operation to read a new program image. This implementation does not support start-write(3) to initiate a new program load via a TFTP write operation. The status of the last load attempt is reflected in da90LoadOperStatus. A device shall always reset upon completion of a successful load attempt. It may reset upon unsuccessful completion of the load attempt. This implementation does not support the cancel(4) option.')
da90LoadOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90LoadOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: da90LoadOperStatus.setDescription("The final state of the last load attempt. The value none(1) indicates that no load has been attempted, ever. This object is non-volatile. It's default value is none(1).")
da90LoadFilename = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90LoadFilename.setStatus('mandatory')
if mibBuilder.loadTexts: da90LoadFilename.setDescription("The name of the file in which to load. When the device is reading, this is the name of the file to be read. When the device is being written, this is the only name of the file in which writes will be accepted - provided the device can check the file name. If the device can not check the file name then this object is ignored. It is the duty of the NMS triggering the device to load this object. This object is non-volatile. The initial and default value of this object in a zero-length string. Setting a value containing embedded spaces or tabs will result in a 'badValue' response. In the case of multi-file loads (aka segmented loads) this object contains the name of the first file in which to load. It is an application specific issue as to how to get subsequent load files.")
da90LoadIpHostAddr = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90LoadIpHostAddr.setStatus('mandatory')
if mibBuilder.loadTexts: da90LoadIpHostAddr.setDescription('The IP address of the host from which to load. When the device is reading, this is the IP address of the host in which the read will be directed. When the device is being written, this is the IP address of the only host in which writes will be accepted. This object is non-volatile. The initial and default value of this object is 0.0.0.0.')
da90LoadDevSpecific = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("readFailed", 2), ("timedOut", 3), ("crcFailure", 4), ("unknownFailure", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: da90LoadDevSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: da90LoadDevSpecific.setDescription("A device specific parameter which is used to indicate detailed error information about the last attempted load. A value of none(0) indicates that no load has been attempted, or that there is nothing interesting to report of the last load. readFailed(1) and timedOut(2) indicate that the TFTP file transfer was not successful. A crcFailure(3) is returned when the image transferred failed to pass the CRC check. This object is non-volatile. It's default value is none(1).")
da90SetupPortStatus = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("console", 1), ("slip", 2), ("reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: da90SetupPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: da90SetupPortStatus.setDescription("This object indicates the current status of the setup port on the front panel of the DECagent. When read, it will return either console(1) or slip(2). Writing reset(3) to this object will cause the setup port to return to the console state. The setup port cannot be set to slip state from this object; it must be done through the appropriate console menu option. Writing a value other than reset(3) will result in a 'badValue' response.")
ds90LNumberModules = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LNumberModules.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LNumberModules.setDescription('Number of DECserver 90 modules represented in the ds90LModuleTable.')
ds90LModuleTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2), )
if mibBuilder.loadTexts: ds90LModuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LModuleTable.setDescription('A table of DECserver 90 modules installed in the group. The number of entries is given by ds90LNumberModules.')
ds90LModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1), ).setIndexNames((0, "DECHUB90-MIB", "ds90LSlotIndex"))
if mibBuilder.loadTexts: ds90LModuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LModuleEntry.setDescription('Contains objects defining characteristics of DECserver 90 modules in the group.')
ds90LSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSlotIndex.setDescription('The slot index value which addresses the dh90SlotTable for this module.')
ds90LDot3StatsDeferredTransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LDot3StatsDeferredTransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LDot3StatsDeferredTransmissions.setDescription('A count of frames for which the first transmission attempt on a particular interface is delayed because the medium is busy. The count represented by an instance of this object does not include frames involved in collisions.')
ds90LDot3StatsSingleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LDot3StatsSingleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LDot3StatsSingleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by exactly one collision. (If the DECserver 90 implements the MIB-II if group, the following also applies: A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts or ifOutNUcastPkts object and is not counted by the corresponding instance of the ds90LDot3StatsMultipleCollisionFrames object.)')
ds90LDot3StatsMultipleCollisionFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LDot3StatsMultipleCollisionFrames.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LDot3StatsMultipleCollisionFrames.setDescription('A count of successfully transmitted frames on a particular interface for which transmission is inhibited by more than one collision. (If the DECserver 90 implements the MIB-II if group, the following also applies: A frame that is counted by an instance of this object is also counted by the corresponding instance of either the ifOutUcastPkts or ifOutNUcastPkts object and is not counted by the corresponding instance of the ds90LDot3StatsSingleCollisionFrames object.)')
ds90LEnetDataOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LEnetDataOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LEnetDataOverruns.setDescription('A count of the number of frames arriving at the DECserver 90 that were lost due to data overrun since it last reinitialized or zeroed counters.')
ds90LLatCircMsgsIns = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircMsgsIns.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircMsgsIns.setDescription('A count of the number of LAT circuit messages received by this DECserver 90 since it last reinitialized or zeroed counters.')
ds90LLatCircMsgsOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircMsgsOuts.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircMsgsOuts.setDescription('A count of the number of LAT circuit messages transmitted by this DECserver 90 since it last reinitialized or zeroed counters.')
ds90LLatSessSolicitAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatSessSolicitAccepts.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatSessSolicitAccepts.setDescription('A count of the number of LAT solicits accepted by this DECserver 90 since it last reinitialized or zeroed counters.')
ds90LLatSessSolicitRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatSessSolicitRejects.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatSessSolicitRejects.setDescription('A count of the number of LAT solicits rejected by this DECserver 90 since it last reinitialized or zeroed counters.')
ds90LLatCircDuplsMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircDuplsMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircDuplsMsgs.setDescription('A count of the number of duplicate LAT messages the DECserver 90 LAT implementation has discarded since it last reinitialized or zeroed counters.')
ds90LLatCircMsgRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircMsgRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircMsgRetransmits.setDescription('A count of the total number of LAT circuit messages this DECserver 90 has retransmitted since it last reinitialized or zeroed counters.')
ds90LLatSessIllegalSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatSessIllegalSlots.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatSessIllegalSlots.setDescription('A count of the number of illegal LAT slots this DECserver 90 has received on all LAT sessions since it last reinitialized or zeroed counters.')
ds90LIllegalMulticastRcvs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LIllegalMulticastRcvs.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LIllegalMulticastRcvs.setDescription('A count of the number of illegal multicast LAT messages received on this DECserver 90 since it last reinitialized or zeroed counters.')
ds90LLatCircKeepAlive = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircKeepAlive.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircKeepAlive.setDescription('This defines the number of seconds the LAT circuits provider waits between transmitting LAT circuit layer keep-alive messages. Writing to this object is equivalent to issuing the CHANGE SERVER KEEPALIVE TIMER command via the user interface.')
ds90LLatCircRetransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircRetransmitLimit.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircRetransmitLimit.setDescription('This object defines the maximum number of LAT circuit message retransmissions the server will attempt before declaring the circuit failed. Writing to this object is equivalent to issuing the CHANGE SERVER RETRANSMIT LIMIT command via the user interface.')
ds90LLatCircInvalidMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LLatCircInvalidMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LLatCircInvalidMsgs.setDescription("This counts the number of invalid LAT messages received on its entry's LAT circuit since the DECserver last reinitialized or zeroed counters.")
ds90LAuthorizeMode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LAuthorizeMode.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LAuthorizeMode.setDescription('Setting a value of enable(1) causes the DECserver to enter an enable-authorized-mode-pending state. The device will enter authorized mode if the power is cycled on the device within one minute. The password used to enable authorized mode will be the current value of dh90SlotPassword, which must be set to the desired value prior to setting ds90LAuthorizeMode to enable(1). Setting a value of disable(2) causes the DECserver to enter a disable-authorized-mode-pending state. The device will exit authorized mode if the power is cycled on the device within one minute.')
ds90LMaintenance = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ready", 1), ("zeroCounters", 2), ("reset", 3), ("resetToFactory", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LMaintenance.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LMaintenance.setDescription('A control variable to reset the counters on a DECserver 90. In response to a Get or a getNext request, the agent always returns ready(1). Setting the value to zeroCounters(2) causes the interface, LAT and dh90SlotCounterTime counters to be cleared. Setting the value to reset(3) causes the entire module to be reset, any users and circuits will be disconnected. Setting the value to resetToFactory(4) causes the entire device to be reset to the original factory settings. Passwords and port names will be cleared and port speeds set to autobaud.')
ds90LPrompt = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPrompt.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPrompt.setDescription("Contains the prompt displayed when a session is local to the DECserver 90L+ terminal server. The default value is '->'. This variable returns 'noSuchName' for a DECserver 90L. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LPortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3), )
if mibBuilder.loadTexts: ds90LPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortTable.setDescription('A table of port specific variables on this DECserver 90. The index for a terminal server port is given by (slot number * 100) + port number The number of ports is given by dh90SlotNumberOfPorts.')
ds90LPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1), ).setIndexNames((0, "DECHUB90-MIB", "ds90LPortIndex"))
if mibBuilder.loadTexts: ds90LPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortEntry.setDescription('A single LAT session instance this DECserver 90 currently provides.')
ds90LPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortIndex.setDescription('The value of charPortIndex for this port.')
ds90LPortRemoteModification = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortRemoteModification.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortRemoteModification.setDescription('Enables and disables remote modification of the port by the host system.')
ds90LPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("terminal", 1), ("printer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortType.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortType.setDescription('Selects the type of device connected to the port.')
ds90LPortBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortBreak.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortBreak.setDescription('Determines if the port responds to local or remote break.')
ds90LPortTest = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortTest.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortTest.setDescription('Setting this variable to enable(2) places the port into loopback mode. Loopback mode can be used to verify that a port is receiving and sending characters.')
ds90LPortAutoConfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortAutoConfigure.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortAutoConfigure.setDescription("Enables or disables the autoconfiguration of a port on a DECserver 90L+. Enabling autoconfiguration allows default settings to be restored to a port after each reset of the terminal server. Disabling autoconfiguration causes the speed and certain characteristics of the port to be stored in non-volatile memory on the terminal server. These port settings will be restored after the next reset of the device. NOTE: Set this variable to disable(2) BEFORE setting a new port speed with rs232PortInSpeed and rs232PortOutSpeed. For the DECserver 90L, reads of this variable always return enable(1). Setting this variable to a value other than enable(1) for a DECserver 90L will result in a 'badValue' response.")
ds90LPortOnDemandLoading = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortOnDemandLoading.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortOnDemandLoading.setDescription("Enables or disables on-demand loading of fonts to a port in a DECserver 90L+. For the DECserver 90L, reads of this variable always return disable(1). Setting this variable to a value other than disable(1) for a DECserver 90L will result in a 'badValue' response.")
ds90LPortDedicatedServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LPortDedicatedServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortDedicatedServiceStatus.setDescription("A status variable indicating whether or not dedicated service is enabled on a terminal server port. Dedicated service on a port means that the port will attempt to make a connection only to the specified service/node/port. Attempts to make a connection to another service/node/port is not possible on a port with dedicated service enabled. If the value of this variable is disabled(2), the corresponding name, node and port variables will return 'noSuchName' on an SNMP Get and 'notFound' on an SNMP getNext.")
ds90LPortDedicatedServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortDedicatedServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortDedicatedServiceName.setDescription("The name of the dedicated service to which a connection will be attempted when a connection to the terminal server port is made. Setting a valid name, from 1 to 16 characters in length, will enable dedicated service on the port. To disable dedicated service on the port, set this variable to the null string. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LPortDedicatedServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortDedicatedServiceNode.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortDedicatedServiceNode.setDescription("The node name of the remote system to which a connection will be attempted when a connection to the terminal server port is made. This variable can only be set for ports which already have dedicated service enabled (i.e. ds90LPortDedicatedServiceName is not null). Specifying a value for this variable for a port which does not have dedicated service enabled will result in a 'genErr' response. Note that setting this variable to null will also delete the port name specified by ds90LPortDedicatedServicePort for this port. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LPortDedicatedServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortDedicatedServicePort.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortDedicatedServicePort.setDescription("The port on the remote system to which a connection will be attempted when a connection to the terminal server port is made. This variable can only be set for ports which already have dedicated service enabled (i.e. ds90LPortDedicatedServiceName is not null) and a valid node name (i.e. ds90LPortDedicatedServiceNode is not null). If the above conditions are not met, a response of 'genErr' is returned. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LPortPreferredServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LPortPreferredServiceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortPreferredServiceStatus.setDescription("A status variable indicating whether or not preferred service is enabled on a terminal server port. Preferred service on a port means that the port will attempt to make a connection to the specific service/node/port when the user does not specify a service name with the 'CONNECT' command at the terminal server prompt. If the value of this variable is disabled(2), the corresponding name, node and port variables will return 'noSuchName' on an SNMP Get and 'notFound' on an SNMP getNext.")
ds90LPortPreferredServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortPreferredServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortPreferredServiceName.setDescription("The name of the preferred service to which a connection will be attempted when a connection to the terminal server port is made. Setting a valid name, from 1 to 16 characters in length, will enable preferred service on the port. To disable preferred service on the port, set this variable to the null string. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LPortPreferredServiceNode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortPreferredServiceNode.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortPreferredServiceNode.setDescription("The node name of the remote system to which a connection will be attempted when a connection to the terminal server port is made. This variable can only be set for ports which already have preferred service enabled (i.e. ds90LPortPreferredServiceName is not null). Specifying a value for this variable for a port which does not have preferred service enabled will result in a 'genErr' response. Note that setting this variable to null will also delete the port name specified by ds90LPortPreferredServicePort for this port. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LPortPreferredServicePort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ds90LPortPreferredServicePort.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LPortPreferredServicePort.setDescription("The port on the remote system to which a connection will be attempted when a connection to the terminal server port is made. This variable can only be set for ports which already have preferred service enabled (i.e. ds90LPortPreferredServiceName is not null) and a valid node name (i.e. ds90LPortPreferredServiceNode is not null). If the above conditions are not met, a response of 'genErr' is returned. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
ds90LSessionTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4), )
if mibBuilder.loadTexts: ds90LSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionTable.setDescription('The list of all LAT sessions active on this DECserver 90.')
ds90LSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4, 1), ).setIndexNames((0, "DECHUB90-MIB", "ds90LSessionPort"), (0, "DECHUB90-MIB", "ds90LSessionIndex"))
if mibBuilder.loadTexts: ds90LSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionEntry.setDescription('A single LAT session instance this DECserver 90 currently provides.')
ds90LSessionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionPort.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionPort.setDescription('The value of charPortIndex for the port to which this session belongs.')
ds90LSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionIndex.setDescription('The session index in the context of the port, a non-zero positive integer. Will be 1 for the DECserver 90L, 4 for DECserver 90L+.')
ds90LSessionRemoteNode = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionRemoteNode.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionRemoteNode.setDescription('The name of the remote node providing the service for this session.')
ds90LSessionService = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionService.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionService.setDescription('The service to which this session is connected.')
ds90LSessionRemotePortId = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 3, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds90LSessionRemotePortId.setStatus('mandatory')
if mibBuilder.loadTexts: ds90LSessionRemotePortId.setDescription('The name of the port at the remote node providing the connection, for example, LAT121.')
drpt90PortTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1), )
if mibBuilder.loadTexts: drpt90PortTable.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortTable.setDescription('A table of port specific variables on this DECrepeater 90. The index for a repeater port is given by (slot number * 100) + port number The number of ports is given by dh90SlotNumberOfPorts.')
drpt90PortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1), ).setIndexNames((0, "DECHUB90-MIB", "drpt90PortIndex"))
if mibBuilder.loadTexts: drpt90PortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortEntry.setDescription('A collection of objects containing information for a given interface.')
drpt90PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortIndex.setDescription('Identifies the module and port. The value of this object is given by: (slot number * 100) + port number')
drpt90PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drpt90PortName.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortName.setDescription("The text description of the port given by the network manager. Setting a value containing embedded spaces or tabs will result in a 'badValue' response.")
drpt90PortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: drpt90PortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortAdminStatus.setDescription('The desired state of the port.')
drpt90PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("autoPartitioned", 2), ("managementPartitioned", 3), ("active", 4), ("inactive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortState.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortState.setDescription('The state of the port. The value unknown(1) is returned when the port state cannot be determined. The value autoPartitioned(2) indicates that the repeater has disabled the port automatically, the value managementPartitioned(3) indicates that the port has been disabled remotely, and the value active(4) indicates that the port is operational. A value of inactive(5) is returned by repeaters that can detect that no media is attached to the port.')
drpt90PortType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("twistedPair", 2), ("thinWire", 3), ("fiberOptic", 4), ("aui", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortType.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortType.setDescription('The physical medium type of the port.')
drpt90PortPartitions = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortPartitions.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortPartitions.setDescription('The number of times this port has partitioned. This value is significant only if drpt90PortStatus is not unknown(1).')
drpt90PortAutoPartitionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notPartitioned", 0), ("managementPartitioned", 1), ("excessiveLength", 2), ("excessiveLengthAndMgmtPart", 3), ("excessiveCollisions", 4), ("excessiveCollisionsAndMgmtPart", 5), ("jabber", 6), ("jabberAndMgmtPart", 7), ("nocarrierLoopback", 8), ("nocarrierLoopbackAndMgmtPart", 9), ("transmitCarrierDropout", 10), ("transmitCarrierDropoutAndMgmtPart", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortAutoPartitionReason.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortAutoPartitionReason.setDescription('Errors currently detected on the port.')
drpt90PortJamBits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("jb96", 2), ("jb128", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortJamBits.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortJamBits.setDescription('The number of jam bits being used on the port segment.')
drpt90PortAddrTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 2), )
if mibBuilder.loadTexts: drpt90PortAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortAddrTable.setDescription('A list of MAC addresses paired with the repeater port on which they have been seen.')
drpt90PortAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 2, 1), ).setIndexNames((0, "DECHUB90-MIB", "drpt90PortPhyAddr"))
if mibBuilder.loadTexts: drpt90PortAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortAddrEntry.setDescription('A MAC address and the repeater port on which it resides.')
drpt90PortPhyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortPhyAddr.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortPhyAddr.setDescription('A MAC address seen on this port.')
drpt90PortAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(101, 1608))).setMaxAccess("readonly")
if mibBuilder.loadTexts: drpt90PortAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: drpt90PortAddrIndex.setDescription('Identifies the module and port. The value of this object is the same as drpt90PortIndex and is given by: (slot number * 100) + port number')
dbSysRomVersion = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSysRomVersion.setStatus('mandatory')
if mibBuilder.loadTexts: dbSysRomVersion.setDescription('The version number of the software stored in ROM. The return value is encoded as (major_version*10 + minor version). For example, version 1.0 is returned as 10 (1*10 + 0).')
dbSysInitSwitch = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("reset", 2), ("resetToFactory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dbSysInitSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: dbSysInitSwitch.setDescription("This object allows the management action of initializing a device and forcing it to run selftest. It can also be used to reset all information added to the device's NVRAM. When read, it returns a value of other(1). When set to a value of reset(2) the bridge will empty the forwarding database and start relearning. When set to resetToFactory(3) the bridge will empty the forwarding database, reset spanning tree and clear all protocol filters and password.")
dbSysDeviceState = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("operate", 2), ("broken", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSysDeviceState.setStatus('mandatory')
if mibBuilder.loadTexts: dbSysDeviceState.setDescription('The operational state of the device.')
dbSysNvramFailed = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbSysNvramFailed.setStatus('mandatory')
if mibBuilder.loadTexts: dbSysNvramFailed.setDescription('A flag that, when set to true(1), indicates that the NVRAM failed selftest following the last initialization of the device. Values set to variables maintained on the bridge will not be preserved over a power cycle of the bridge.')
dbIfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 2, 1), )
if mibBuilder.loadTexts: dbIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: dbIfTable.setDescription('A list of interface entries. The number of entries is given by ifNumber.')
dbIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 2, 1, 1), ).setIndexNames((0, "DECHUB90-MIB", "dbIfIndex"))
if mibBuilder.loadTexts: dbIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dbIfEntry.setDescription('A collection of objects containing information for a given interface.')
dbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dbIfIndex.setDescription('Identifies the interface. The value of this object is the same as the ifIndex for this interface.')
dbIfReceiveBadFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbIfReceiveBadFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dbIfReceiveBadFrames.setDescription('Number of frames received with a bad frame check sequence or the device received a frame loss indication from the hardware on the interface.')
dbIfTransmitErrorFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dbIfTransmitErrorFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dbIfTransmitErrorFrames.setDescription('Number of frames that were transmitted with an error on the line.')
db90LB100SpanningTreeVer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100SpanningTreeVer.setStatus('mandatory')
if mibBuilder.loadTexts: db90LB100SpanningTreeVer.setDescription('The version number of the Spanning Tree algorithm used by the bridge when in the LAN Bridge 100 Spanning Tree mode.')
db90802SpanningTreeVer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90802SpanningTreeVer.setStatus('mandatory')
if mibBuilder.loadTexts: db90802SpanningTreeVer.setDescription('The version number of the Spanning Tree algorithm used by the bridge when in the 802.1d Spanning Tree mode.')
db90MaxForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxForwardingDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90MaxForwardingDBEntries.setDescription('The maximum number of address entries that the bridge can store in its volatile memory.')
db90MaxNVForwardingDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxNVForwardingDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90MaxNVForwardingDBEntries.setDescription('The maximum number of permanent address entries that the bridge can store in its NVRAM.')
db90MaxProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxProtocolDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90MaxProtocolDBEntries.setDescription('The maximum number of protocol entries that the bridge can store in its protocol database. These entries control the handling of frames based on their Ethernet protocol type, IEEE 802.2 DSAP or IEEE 802 SNAP Protocol ID.')
db90MaxNVProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MaxNVProtocolDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90MaxNVProtocolDBEntries.setDescription('The maximum number of protocol entries that the bridge can store in its NVRAM. These are retained after a power-down.')
db90CurrProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90CurrProtocolDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90CurrProtocolDBEntries.setDescription("The number of protocol entries that are stored in the bridge's protocol database. These control the handling of frames based on their Ethernet protocol type, IEEE 802.2 DSAP, or 802 SNAP Protocol ID.")
db90CurrNVProtocolDBEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90CurrNVProtocolDBEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90CurrNVProtocolDBEntries.setDescription("The number of protocol entries in the bridge's NVRAM. These are retained after a power loss.")
db90MgmtHeardPort = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backbone", 1), ("workgroup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90MgmtHeardPort.setStatus('mandatory')
if mibBuilder.loadTexts: db90MgmtHeardPort.setDescription('The port on which this command was received.')
db90LB100BeingPolled = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100BeingPolled.setStatus('mandatory')
if mibBuilder.loadTexts: db90LB100BeingPolled.setDescription('The address of the LAN Bridge 100 mode bridge that sent this bridge into the LAN Bridge 100 Spanning Tree mode. If this bridge is the Root, this object indicates the bridge that will be polled periodically to determine if it is still necessary to stay in this Spanning Tree mode.')
db90TimeSinceLastHello = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90TimeSinceLastHello.setStatus('mandatory')
if mibBuilder.loadTexts: db90TimeSinceLastHello.setDescription('The number of seconds since the bridge last sent a hello message.')
db90HubManagement = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90HubManagement.setStatus('mandatory')
if mibBuilder.loadTexts: db90HubManagement.setDescription('Indicates whether the bridge is managing the hub (i.e., is capable of managing repeaters inserted in the hub).')
db90CurrFdbEntries = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90CurrFdbEntries.setStatus('mandatory')
if mibBuilder.loadTexts: db90CurrFdbEntries.setDescription('The number of entries currently active in the DECbridge 90 forwarding database, or one more than the value of db90MaxForwardingDBEntries if the bridge has exceeded the size of the forwarding database hardware.')
db90SpanningTreeModeChanges = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90SpanningTreeModeChanges.setStatus('mandatory')
if mibBuilder.loadTexts: db90SpanningTreeModeChanges.setDescription('The number of times that the bridge switched from the 802.1d Spanning Tree mode to the LB100 Spanning Tree mode.')
db90BestRootAge = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90BestRootAge.setStatus('mandatory')
if mibBuilder.loadTexts: db90BestRootAge.setDescription('The age, in hundredths of seconds, of the hello message that established the best root.')
db90TopologyChangeFlag = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90TopologyChangeFlag.setStatus('mandatory')
if mibBuilder.loadTexts: db90TopologyChangeFlag.setDescription('A flag that indicates whether a topology change is currently in effect on the extended LAN.')
db90TellParentFlag = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90TellParentFlag.setStatus('mandatory')
if mibBuilder.loadTexts: db90TellParentFlag.setDescription('A flag that indicates if the bridge is attempting to propagate a topology change towards the root.')
db90ForwardingDBShortAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90ForwardingDBShortAgingTime.setStatus('mandatory')
if mibBuilder.loadTexts: db90ForwardingDBShortAgingTime.setDescription('The number of seconds that the bridge keeps learned entries active while a topology change is in effect.')
db90BadHelloLimit = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90BadHelloLimit.setStatus('mandatory')
if mibBuilder.loadTexts: db90BadHelloLimit.setDescription('The number of hello intervals during which the bridge receives one or more bad hellos on a line, before the bridge performs a test on the link. A bad hello message is one that contains inferior information that is received on a port on which this bridge is designated.')
db90BadHelloResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 6), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90BadHelloResetTimer.setStatus('mandatory')
if mibBuilder.loadTexts: db90BadHelloResetTimer.setDescription('The number of hello intervals without bad hellos that the bridge will wait before it resets its bad hello count to zero.')
db90NoFrameInterval = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90NoFrameInterval.setStatus('mandatory')
if mibBuilder.loadTexts: db90NoFrameInterval.setDescription('The number of seconds of inactivity on a line that will cause the bridge to run a test on that line. The bridge considers a line to be inactive if it does not receive any frames on that line.')
db90LB100PollTime = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100PollTime.setStatus('mandatory')
if mibBuilder.loadTexts: db90LB100PollTime.setDescription('The number of seconds that a root bridge in LAN Bridge 100 mode waits between polling the LAN Bridge 100 that is keeping it in this mode. This polling is done to determine whether the LB100 is still present on the extended LAN.')
db90LB100ResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100ResponseTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: db90LB100ResponseTimeout.setDescription('The number of seconds that a Root in LAN Bridge 100 Spanning Tree mode will wait for a response from the LAN Bridge 100 which is keeping it in this mode, before which it will assume that the LB100 is no longer on the extended LAN.')
db90LB100SpanningTreeCompat = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("autoSelect", 1), ("ieee802", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90LB100SpanningTreeCompat.setStatus('mandatory')
if mibBuilder.loadTexts: db90LB100SpanningTreeCompat.setDescription('A switch that controls the Spanning Tree mode used by the bridge. If in Auto-Select mode, the bridge will go into 802 Spanning Tree mode by default, but will switch to LB100 mode as soon as a LB100 is detected. In 802 Spanning Tree mode, the bridge will stay in 802 mode.')
db90IfTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 1), )
if mibBuilder.loadTexts: db90IfTable.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfTable.setDescription('A list of interface entries. The number of entries is given by ifNumber.')
db90IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 1, 1), ).setIndexNames((0, "DECHUB90-MIB", "db90IfIndex"))
if mibBuilder.loadTexts: db90IfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEntry.setDescription('A collection of objects containing information for a given interface.')
db90IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfIndex.setDescription('Identifies the interface. The value of this object is the same as the ifIndex for this interface.')
db90IfReceiveDeviceFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfReceiveDeviceFrames.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfReceiveDeviceFrames.setDescription('The number of frames addressed to the bridge itself that were received on this line.')
db90IfExceededBadHelloLimits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfExceededBadHelloLimits.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfExceededBadHelloLimits.setDescription('The number of times that the bad hellos on the line exceeded the bad hello limit.')
db90IfEtherTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 2), )
if mibBuilder.loadTexts: db90IfEtherTable.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEtherTable.setDescription('A list of interface entries for an Ethernet port.')
db90IfEtherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 2, 1), ).setIndexNames((0, "DECHUB90-MIB", "db90IfEthIndex"))
if mibBuilder.loadTexts: db90IfEtherEntry.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEtherEntry.setDescription('A collection of objects containing information for a given interface.')
db90IfEthIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthIndex.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEthIndex.setDescription('Identifies the interface. The value of this object is the same as the ifIndex for this interface.')
db90IfEthFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEthFramingErrors.setDescription('The number of times that a frame received on the line contained both a non-integer multiple of eight bits and a CRC error.')
db90IfEthCarrierLosses = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthCarrierLosses.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEthCarrierLosses.setDescription('The number of times that the bridge detected a loss of the carrier signal while transmitting a frame on the line.')
db90IfEthExceededCollisionLimits = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfEthExceededCollisionLimits.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfEthExceededCollisionLimits.setDescription('The number of times that the bridge failed to transmit a frame on this line after 16 attempts, the collision limit.')
db90IfSpanTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3), )
if mibBuilder.loadTexts: db90IfSpanTable.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpanTable.setDescription('A list of interface entries for a port.')
db90IfSpanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3, 1), ).setIndexNames((0, "DECHUB90-MIB", "db90IfSpIndex"))
if mibBuilder.loadTexts: db90IfSpanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpanEntry.setDescription('A collection of objects containing information for a given interface.')
db90IfSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpIndex.setDescription('Identifies the interface. The value of this object is the same as the ifIndex for this interface.')
db90IfSpDesigRootAge = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpDesigRootAge.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpDesigRootAge.setDescription('The age, in hundredths of a second, of the last hello message received from the designated bridge on the line.')
db90IfSpForwardDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpForwardDelayTimer.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpForwardDelayTimer.setDescription('The time remaining, in hundredths of a second, before the bridge will leave the learning state of Preforwarding, and enter the Forwarding state.')
db90IfSpBadHelloCounts = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpBadHelloCounts.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpBadHelloCounts.setDescription('The number of hello intervals during which at least one bad hello was received.')
db90IfSpTopologyChangeAckFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90IfSpTopologyChangeAckFlag.setStatus('mandatory')
if mibBuilder.loadTexts: db90IfSpTopologyChangeAckFlag.setDescription('A flag that indicates whether a topology change notification received on a link that we are designated on needs to be acknowledged.')
db90ProtoFilterOther = MibScalar((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2), ("default", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: db90ProtoFilterOther.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterOther.setDescription("Action taken by the bridge on Ethernet protocol types or the 5-byte SNAP SAPs other than those specified in the db90ProtoTable. forward(1) indicates that a 'filter all' entry exists in the db90ProtoTable. This value also implies that no 'forward all' entry may be added to the db90ProtoTable. filter(2) indicates that a 'forward all' entry exists in the db90ProtoTable. This value also implies that no 'filter all' entry may be added to the db90ProtoTable. default(3) indicates that an entry of either 'forward all' or 'filter all' (i.e. not just Multicast frames) may be added to the db90ProtoTable. This value also implies that all other protocol entries not listed in the db90ProtoTable will be forwarded.")
db90ProtoFilterTable = MibTable((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2), )
if mibBuilder.loadTexts: db90ProtoFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterTable.setDescription('A table that contains filtering information about Ethernet protocol types and 5 byte SNAP SAPs for the DECbridge 90.')
db90ProtoFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2, 1), ).setIndexNames((0, "DECHUB90-MIB", "db90ProtoFilterProtocol"))
if mibBuilder.loadTexts: db90ProtoFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterEntry.setDescription('A table that contains filtering characteristics for Ethernet protocol types and 5 byte SNAP SAPs for the DECbridge 90.')
db90ProtoFilterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterProtocol.setDescription("The protocol type or SNAP SAP in a frame to which this entry's filtering information applies. The length is 2 for Ethernet protocol types and 5 for SNAP SAP.")
db90ProtoFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("ethernet", 3), ("snap-sap", 4), ("deleteAllProtocols", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterType.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterType.setDescription('The type of this entry. unknown(1) specifies that this protocol filter is unused. invalid(2) deletes the filter. ethernet(3) or snap-sap(4) defines the size of db90ProtoFilterProtocol. Setting this variable to a value of deleteAllProtocols(5) will cause all protocols, both volatile and non-volatile, to be deleted.')
db90ProtoFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("filter", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterStatus.setDescription('Action taken by the bridge when it sees this Ethernet protocol type or SNAP SAP in a received frame. Note that this value must be identical to db90ProtoFilterOther unless db90ProtoFilterMulticastFlag is multicastOnly(2) or there are no other entries with db90ProtoFilterMulticastFlag equal to allFrames(1).')
db90ProtoFilterMulticastFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allFrames", 1), ("multicastOnly", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterMulticastFlag.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterMulticastFlag.setDescription('Identifies whether or not filtering is based on the multicast bit in the MAC destination address. If allFrames(1), then filtering is performed as per db90ProtoFilterStatus. For multicastOnly(2), multicast frames for this protocol are always filtered and unicast frames are always forwarded; this is true regardless of the value of db90ProtoFilterOther.')
db90ProtoFilterPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 36, 2, 18, 10, 5, 3, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("backbone", 1), ("workGroup", 2), ("allPorts", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: db90ProtoFilterPortMask.setStatus('mandatory')
if mibBuilder.loadTexts: db90ProtoFilterPortMask.setDescription('Must be allPorts(3) unless db90ProtoFilterMulticastFlag is multicastOnly, in which case any specification is valid.')
consolePasswordFailure = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,1))
if mibBuilder.loadTexts: consolePasswordFailure.setDescription('There have been three consecutive failures to enter a correct password when attempting to log into the DECagent 90 console port.')
nonVolatileRamError = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,2))
if mibBuilder.loadTexts: nonVolatileRamError.setDescription('An error in the non-volatile storage on the DECagent 90 has occurred. Some configuration information may have been lost.')
configurationExceeded = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,3))
if mibBuilder.loadTexts: configurationExceeded.setDescription('An attempt was made to exceed the maximum configuration supported by the DECagent 90. The request to create the additional community or to add the additional module has been rejected.')
populationChange = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,4)).setObjects(("DECHUB90-MIB", "da90CommunityIndex"), ("DECHUB90-MIB", "dh90SlotIndex"), ("DECHUB90-MIB", "dh90SlotObjectID"))
if mibBuilder.loadTexts: populationChange.setDescription('A module has been added or discovered, or has been deleted or undiscovered. The objects dh90PopulationChange and dh90PopulationLastChange have been updated to reflect this change. The community index, slot index, and module object id are included in the trap PDU.')
moduleStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,5)).setObjects(("DECHUB90-MIB", "da90CommunityIndex"), ("DECHUB90-MIB", "dh90SlotIndex"), ("DECHUB90-MIB", "dh90SlotObjectID"), ("DECHUB90-MIB", "dh90SlotProxyStatus"))
if mibBuilder.loadTexts: moduleStatusChange.setDescription('A module has become reachable or unreachable. The objects dh90StatusChange and dh90StatusLastChange have been updated to reflect this change. The community index, slot index, module object id and proxy status are included in the trap PDU.')
rptrPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,6)).setObjects(("DECHUB90-MIB", "da90CommunityIndex"), ("DECHUB90-MIB", "dh90SlotIndex"), ("DECHUB90-MIB", "dh90SlotObjectID"), ("DECHUB90-MIB", "drpt90PortIndex"), ("DECHUB90-MIB", "drpt90PortState"))
if mibBuilder.loadTexts: rptrPortStatusChange.setDescription('The port status has changed on a repeater module. The objects dh90StatusChange and dh90StatusLastChange have been updated to reflect this change. The community index, slot index, module object id, port index and port state are included in the trap PDU.')
srvrPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,7))
if mibBuilder.loadTexts: srvrPortStatusChange.setDescription('The port status has changed on a terminal server module. The objects dh90StatusChange and dh90StatusLastChange have been updated to reflect this change. The community index, slot index, module object id, port index and port operational status are included in the trap PDU.')
brdgPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 36, 2, 15, 10, 1, 1) + (0,8))
if mibBuilder.loadTexts: brdgPortStatusChange.setDescription('The port status has changed on a bridge module. The objects dh90StatusChange and dh90StatusLastChange have been updated to reflect this change. The community index, slot index, module object id, port index and port operational status are included in the trap PDU.')
mibBuilder.exportSymbols("DECHUB90-MIB", configurationExceeded=configurationExceeded, dh90SlotModuleName=dh90SlotModuleName, db90LB100ResponseTimeout=db90LB100ResponseTimeout, dh90LastErrorChange=dh90LastErrorChange, db90BestRootAge=db90BestRootAge, ds90LPortDedicatedServicePort=ds90LPortDedicatedServicePort, ema=ema, dbSysInitSwitch=dbSysInitSwitch, dbSysRomVersion=dbSysRomVersion, db90IfEthFramingErrors=db90IfEthFramingErrors, drpt90PortEntry=drpt90PortEntry, ds90LPortPreferredServiceName=ds90LPortPreferredServiceName, dh90SlotReset=dh90SlotReset, ds90LSessionEntry=ds90LSessionEntry, da90ErrorlogWriteCount=da90ErrorlogWriteCount, db90ProtoFilt=db90ProtoFilt, db90Span=db90Span, da90ResetCount=da90ResetCount, moduleStatusChange=moduleStatusChange, ds90LEnetDataOverruns=ds90LEnetDataOverruns, db90MaxNVForwardingDBEntries=db90MaxNVForwardingDBEntries, dh90SlotTable=dh90SlotTable, ds90LSessionRemotePortId=ds90LSessionRemotePortId, db90TimeSinceLastHello=db90TimeSinceLastHello, da90ErrorlogEntry=da90ErrorlogEntry, srvrPortStatusChange=srvrPortStatusChange, drpt90PortAutoPartitionReason=drpt90PortAutoPartitionReason, dh90SlotIpAddress=dh90SlotIpAddress, drpt90PortName=drpt90PortName, decagent90v1=decagent90v1, decMIBextension=decMIBextension, da90=da90, ds90LLatCircInvalidMsgs=ds90LLatCircInvalidMsgs, dh90TrapAddressTable=dh90TrapAddressTable, da90BackplaneAddrDbAgingTime=da90BackplaneAddrDbAgingTime, ds90LLatCircKeepAlive=ds90LLatCircKeepAlive, da90ErrorlogResetCount=da90ErrorlogResetCount, db90LB100PollTime=db90LB100PollTime, ds90LLatCircMsgsIns=ds90LLatCircMsgsIns, dbIfEntry=dbIfEntry, drpt90PortJamBits=drpt90PortJamBits, dh90LastErrorMsg=dh90LastErrorMsg, db90IfEtherTable=db90IfEtherTable, dec=dec, da90LoadOperStatus=da90LoadOperStatus, dh90SlotModuleType=dh90SlotModuleType, ds90LPortPreferredServiceNode=ds90LPortPreferredServiceNode, db90IfEthCarrierLosses=db90IfEthCarrierLosses, dbSysChar=dbSysChar, ds90LNumberModules=ds90LNumberModules, ds90LPortPreferredServicePort=ds90LPortPreferredServicePort, da90CommunityNumber=da90CommunityNumber, ds90LPortOnDemandLoading=ds90LPortOnDemandLoading, dechub90=dechub90, dh90SlotProxyStatus=dh90SlotProxyStatus, db90ProtoFilterMulticastFlag=db90ProtoFilterMulticastFlag, db90IfSpanEntry=db90IfSpanEntry, dh90SlotIndex=dh90SlotIndex, db90IfEtherEntry=db90IfEtherEntry, db90TopologyChangeFlag=db90TopologyChangeFlag, dh90NumberSlots=dh90NumberSlots, dh90StatusChange=dh90StatusChange, dbIfTable=dbIfTable, ds90LPortAutoConfigure=ds90LPortAutoConfigure, db90Coun=db90Coun, ds90LMaintenance=ds90LMaintenance, ds90LLatCircMsgRetransmits=ds90LLatCircMsgRetransmits, drpt90PortAddrTable=drpt90PortAddrTable, db90CurrFdbEntries=db90CurrFdbEntries, db90Stat=db90Stat, ds90LSessionTable=ds90LSessionTable, dh90SlotCounterTime=dh90SlotCounterTime, ds90LDot3StatsMultipleCollisionFrames=ds90LDot3StatsMultipleCollisionFrames, db90NoFrameInterval=db90NoFrameInterval, db90IfExceededBadHelloLimits=db90IfExceededBadHelloLimits, dh90SlotSecondarySpecific=dh90SlotSecondarySpecific, da90CommunityTrapString=da90CommunityTrapString, db90bridge=db90bridge, ds90LPortType=ds90LPortType, ds90LSessionPort=ds90LSessionPort, dh90=dh90, consolePasswordFailure=consolePasswordFailure, da90ErrorlogTimeStamp=da90ErrorlogTimeStamp, db90PortInterfaces=db90PortInterfaces, ds90LLatCircRetransmitLimit=ds90LLatCircRetransmitLimit, db90ProtoFilterOther=db90ProtoFilterOther, da90CommunityEntry=da90CommunityEntry, drpt90PortAddrIndex=drpt90PortAddrIndex, da90ErrorlogData=da90ErrorlogData, da90FlashErasures=da90FlashErasures, da90CommunityRWString=da90CommunityRWString, ds90LDot3StatsSingleCollisionFrames=ds90LDot3StatsSingleCollisionFrames, ds90LPortPreferredServiceStatus=ds90LPortPreferredServiceStatus, db90ProtoFilterTable=db90ProtoFilterTable, db90IfEthIndex=db90IfEthIndex, dh90StatusLastChange=dh90StatusLastChange, dh90SlotIfNumber=dh90SlotIfNumber, da90CommunityType=da90CommunityType, db90LB100BeingPolled=db90LB100BeingPolled, db90TellParentFlag=db90TellParentFlag, db90ProtoFilterEntry=db90ProtoFilterEntry, db90CurrNVProtocolDBEntries=db90CurrNVProtocolDBEntries, db90IfIndex=db90IfIndex, db90MaxForwardingDBEntries=db90MaxForwardingDBEntries, drpt90PortAdminStatus=drpt90PortAdminStatus, db90IfTable=db90IfTable, db90IfSpanTable=db90IfSpanTable, dbSysNvramFailed=dbSysNvramFailed, db90IfSpBadHelloCounts=db90IfSpBadHelloCounts, da90CommunityTable=da90CommunityTable, db90Char=db90Char, da90CommunityIndex=da90CommunityIndex, ds90LPortRemoteModification=ds90LPortRemoteModification, ds90LLatCircDuplsMsgs=ds90LLatCircDuplsMsgs, db90ProtoFilterType=db90ProtoFilterType, db90CurrProtocolDBEntries=db90CurrProtocolDBEntries, db90802SpanningTreeVer=db90802SpanningTreeVer, brdgPortStatusChange=brdgPortStatusChange, da90AgentSlot=da90AgentSlot, db90IfSpForwardDelayTimer=db90IfSpForwardDelayTimer, decagent90=decagent90, da90BackplaneMode=da90BackplaneMode, drpt90PortAddrEntry=drpt90PortAddrEntry, dbIfTransmitErrorFrames=dbIfTransmitErrorFrames, dh90Type=dh90Type, dh90LastChange=dh90LastChange, da90LoadIpHostAddr=da90LoadIpHostAddr, ds90LLatCircMsgsOuts=ds90LLatCircMsgsOuts, ds90LPortTable=ds90LPortTable, dh90SlotNewPassword=dh90SlotNewPassword, ds90LModuleEntry=ds90LModuleEntry, ds90LDot3StatsDeferredTransmissions=ds90LDot3StatsDeferredTransmissions, dh90SlotPolling=dh90SlotPolling, dh90SlotObjectID=dh90SlotObjectID, ds90LPrompt=ds90LPrompt, drpt90PortState=drpt90PortState, db90HubManagement=db90HubManagement, dh90SlotPrimarySpecific=dh90SlotPrimarySpecific, rptrPortStatusChange=rptrPortStatusChange, ds90LModuleTable=ds90LModuleTable, dh90PopulationChange=dh90PopulationChange, ds90LSessionRemoteNode=ds90LSessionRemoteNode, dbSysDeviceState=dbSysDeviceState, dh90SlotPhysicalAddress=dh90SlotPhysicalAddress, dh90SlotPassword=dh90SlotPassword, db90interfaces=db90interfaces, db90MaxNVProtocolDBEntries=db90MaxNVProtocolDBEntries, dh90SlotConflictDiscoveredID=dh90SlotConflictDiscoveredID, da90LoadAdminStatus=da90LoadAdminStatus, ds90LSessionService=ds90LSessionService, drpt90PortTable=drpt90PortTable, emaSystem=emaSystem, db90ext=db90ext, dh90Backplane=dh90Backplane, dh90SlotCommunityString=dh90SlotCommunityString, db90IfReceiveDeviceFrames=db90IfReceiveDeviceFrames, ds90LPortTest=ds90LPortTest, ds90L=ds90L, db90BadHelloResetTimer=db90BadHelloResetTimer, ds90LLatSessSolicitAccepts=ds90LLatSessSolicitAccepts, da90ErrorlogIndex=da90ErrorlogIndex, da90BackplaneState=da90BackplaneState, db90BadHelloLimit=db90BadHelloLimit, dh90SlotEntry=dh90SlotEntry, dh90TrapAddress=dh90TrapAddress, ds90LLatSessIllegalSlots=ds90LLatSessIllegalSlots, dh90SlotModuleVersion=dh90SlotModuleVersion, db90ProtoFilterProtocol=db90ProtoFilterProtocol, db90IfSpTopologyChangeAckFlag=db90IfSpTopologyChangeAckFlag, ds90LSessionIndex=ds90LSessionIndex, dbIfReceiveBadFrames=dbIfReceiveBadFrames, db90ProtoFilterPortMask=db90ProtoFilterPortMask, proxyAgent=proxyAgent, dbSysStatus=dbSysStatus, dh90PopulationLastChange=dh90PopulationLastChange, drpt90PortIndex=drpt90PortIndex, db90MgmtHeardPort=db90MgmtHeardPort, db90ForwardingDBShortAgingTime=db90ForwardingDBShortAgingTime, ds90LAuthorizeMode=ds90LAuthorizeMode, db90IfEntry=db90IfEntry, db90MaxProtocolDBEntries=db90MaxProtocolDBEntries, dh90TrapEntry=dh90TrapEntry, da90ErrorlogTable=da90ErrorlogTable, ds90LPortDedicatedServiceNode=ds90LPortDedicatedServiceNode, db90system=db90system, db90IfEthExceededCollisionLimits=db90IfEthExceededCollisionLimits, db90IfSpIndex=db90IfSpIndex, db90SpanningTreeModeChanges=db90SpanningTreeModeChanges, drpt90PortType=drpt90PortType, ds90LPortDedicatedServiceName=ds90LPortDedicatedServiceName, ds90LLatSessSolicitRejects=ds90LLatSessSolicitRejects, da90SetupPortStatus=da90SetupPortStatus, ds90LIllegalMulticastRcvs=ds90LIllegalMulticastRcvs, ds90LPortDedicatedServiceStatus=ds90LPortDedicatedServiceStatus, dh90SlotNumberOfPorts=dh90SlotNumberOfPorts, ds90LPortEntry=ds90LPortEntry, populationChange=populationChange, da90LoadFilename=da90LoadFilename, dbIfIndex=dbIfIndex, drpt90=drpt90, da90Maintenance=da90Maintenance, drpt90PortPartitions=drpt90PortPartitions, da90LoadDevSpecific=da90LoadDevSpecific, db90LB100SpanningTreeVer=db90LB100SpanningTreeVer, ds90LSlotIndex=ds90LSlotIndex, dh90SlotConflictStatus=dh90SlotConflictStatus, db90IfSpDesigRootAge=db90IfSpDesigRootAge, ds90LPortIndex=ds90LPortIndex, drpt90PortPhyAddr=drpt90PortPhyAddr, nonVolatileRamError=nonVolatileRamError, da90CommunityROString=da90CommunityROString, db90ProtoFilterStatus=db90ProtoFilterStatus, dh90SlotIfBase=dh90SlotIfBase, db90LB100SpanningTreeCompat=db90LB100SpanningTreeCompat, ds90LPortBreak=ds90LPortBreak, dh90LastErrorSlot=dh90LastErrorSlot)
