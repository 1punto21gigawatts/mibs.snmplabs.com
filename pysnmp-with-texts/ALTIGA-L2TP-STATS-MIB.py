#
# PySNMP MIB module ALTIGA-L2TP-STATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTIGA-L2TP-STATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:21:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
alL2tpMibModule, = mibBuilder.importSymbols("ALTIGA-GLOBAL-REG", "alL2tpMibModule")
alStatsL2tp, alL2tpGroup = mibBuilder.importSymbols("ALTIGA-MIB", "alStatsL2tp", "alL2tpGroup")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, MibIdentifier, NotificationType, Gauge32, ModuleIdentity, Counter64, TimeTicks, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Integer32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "MibIdentifier", "NotificationType", "Gauge32", "ModuleIdentity", "Counter64", "TimeTicks", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Integer32", "IpAddress")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
altigaL2tpStatsMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3076, 1, 1, 21, 2))
altigaL2tpStatsMibModule.setRevisions(('2002-09-05 13:00', '2002-07-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: altigaL2tpStatsMibModule.setRevisionsDescriptions(('Added module compliance.', 'Updated with new header',))
if mibBuilder.loadTexts: altigaL2tpStatsMibModule.setLastUpdated('200209051300Z')
if mibBuilder.loadTexts: altigaL2tpStatsMibModule.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: altigaL2tpStatsMibModule.setContactInfo('Cisco Systems 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-cvpn3000@cisco.com')
if mibBuilder.loadTexts: altigaL2tpStatsMibModule.setDescription('The Altiga L2TP Statistics MIB models counters and objects that are of management interest for L2TP tunnels. Acronyms The following acronyms are used in this document: AVP: Attribute/Value Pair CLID: Calling Line ID DNIS: Dialed Number Identification Service L2TP: Layer 2 Tunnel Protocol LAC: L2TP Access Concentrator LNS: L2TP Network Server MIB: Management Information Base RWS: Receive Window Size ')
alStatsL2tpGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1))
alL2tpStatsLocalProtVers = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsLocalProtVers.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsLocalProtVers.setDescription('This object describes the protocol version and revision of the local implementation. The first octet contains the protocol version. The second octet contains the protocol revision.')
alL2tpStatsVendorName = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsVendorName.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsVendorName.setDescription('This object identifies the Vendor name.')
alL2tpStatsFirmwareRev = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsFirmwareRev.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsFirmwareRev.setDescription('This object defines the firmware revision.')
alL2tpStatsTotalTunnels = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTotalTunnels.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTotalTunnels.setDescription('This object returns the total number of tunnels that have successfully reached the established state.')
alL2tpStatsFailedTunnels = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsFailedTunnels.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsFailedTunnels.setDescription('This object returns the number of tunnels that failed to reach the established state.')
alL2tpStatsFailedAuthentications = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsFailedAuthentications.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsFailedAuthentications.setDescription('This object returns the number of failed tunnel connection attempts because the tunnel peer failed authentication.')
alL2tpStatsActiveTunnels = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsActiveTunnels.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsActiveTunnels.setDescription('This object returns the number of tunnels that are currently active.')
alL2tpStatsMaxTunnels = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsMaxTunnels.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsMaxTunnels.setDescription('The maximum number of simultaneously active L2TP tunnels since the system was booted.')
alL2tpStatsTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTotalSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTotalSessions.setDescription('This object returns the total number of sessions that have successfully reached the established state.')
alL2tpStatsFailedSessions = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsFailedSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsFailedSessions.setDescription('This object returns the number of sessions that failed to reach the established state for this tunnel domain.')
alL2tpStatsActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsActiveSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsActiveSessions.setDescription('This object returns the number of sessions that are currently active.')
alL2tpStatsMaxSessions = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsMaxSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsMaxSessions.setDescription('The maximum number of simultaneously active L2TP sessions since the system was booted.')
alL2tpStatsControlRecvOctets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsControlRecvOctets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsControlRecvOctets.setDescription('This object returns the number of control channel octets received.')
alL2tpStatsControlRecvPackets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsControlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsControlRecvPackets.setDescription('This object returns the number of control packets received.')
alL2tpStatsControlRecvDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsControlRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsControlRecvDiscards.setDescription('This object returns the number of control packets received that were discarded.')
alL2tpStatsControlSendOctets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsControlSendOctets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsControlSendOctets.setDescription('This object returns the number of control channel octets that were transmitted to tunnel endpoints.')
alL2tpStatsControlSendPackets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsControlSendPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsControlSendPackets.setDescription('This object returns the number of control packets that were transmitted to tunnel endpoints.')
alL2tpStatsPayloadRecvOctets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsPayloadRecvOctets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsPayloadRecvOctets.setDescription('This object returns the number of payload channel octets that were received.')
alL2tpStatsPayloadRecvPackets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsPayloadRecvPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsPayloadRecvPackets.setDescription('This object returns the number of payload packets that were received.')
alL2tpStatsPayloadRecvDiscards = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsPayloadRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsPayloadRecvDiscards.setDescription('This object returns the number of received payload packets that were discarded.')
alL2tpStatsPayloadSendOctets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsPayloadSendOctets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsPayloadSendOctets.setDescription('This object returns the number of payload channel octets that were transmitted to tunnel peers.')
alL2tpStatsPayloadSendPackets = MibScalar((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsPayloadSendPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsPayloadSendPackets.setDescription('This object returns the number of payload packets that were transmitted to tunnel peers.')
alL2tpStatsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2), )
if mibBuilder.loadTexts: alL2tpStatsTunnelTable.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelTable.setDescription('The L2TP tunnel status and statistics table.')
alL2tpStatsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1), ).setIndexNames((0, "ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelPeerIpAddr"))
if mibBuilder.loadTexts: alL2tpStatsTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelEntry.setDescription('An entry in the alL2tpStatsTunnelTable.')
alL2tpStatsTunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alL2tpStatsTunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRowStatus.setDescription('The status of this row. Used to terminate the tunnel, cannot be used to create a tunnel.')
alL2tpStatsTunnelPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelPeerIpAddr.setDescription("The peer's IP address for this tunnel.")
alL2tpStatsTunnelLocalTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelLocalTID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelLocalTID.setDescription('This object contains the local tunnel Identifier.')
alL2tpStatsTunnelRemoteTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteTID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteTID.setDescription('This object contains the remote tunnel Identifier.')
alL2tpStatsTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tunnelIdle", 1), ("tunnelConnecting", 2), ("tunnelEstablished", 3), ("tunnelDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelState.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelState.setDescription('This field contains the current state of the control tunnel.')
alL2tpStatsTunnelInitiated = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locally", 1), ("remotely", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelInitiated.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelInitiated.setDescription('This object indicates whether the tunnel was initiated locally or by the remote tunnel peer.')
alL2tpStatsTunnelRemoteHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteHostName.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteHostName.setDescription('This object contains the host name as discovered during the tunnel establishment phase (via the Host Name AVP) of the L2TP peer. If the tunnel is idle this object should maintain its value from the last time it was connected.')
alL2tpStatsTunnelRemoteVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteVendorName.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteVendorName.setDescription("This object identifies the vendor name of the peer's L2TP implementation. If the tunnel is idle this object should maintain its value from the last time it was connected.")
alL2tpStatsTunnelRemoteFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteFirmwareRevision.setDescription("This object contains the tunnel peer's firmware revision number. If the tunnel is idle this object should maintain its value from the last time it was connected.")
alL2tpStatsTunnelRemoteProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRemoteProtocolVersion.setDescription('This object describes the protocol version and revision of the tunnel peers implementation. The first octet contains the protocol version. The second octet contains the protocol revision.')
alL2tpStatsTunnelInitialRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelInitialRemoteRWS.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelInitialRemoteRWS.setDescription("This object contains the initial remote peer's receive window size as indicated by the tunnel peer (in the RWS AVP) during the tunnel establishment phase. If the tunnel is idle this object should maintain its value from the last time it was connected.")
alL2tpStatsTunnelBearerCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sync", 1), ("async", 2), ("syncAsync", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelBearerCapabilities.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelBearerCapabilities.setDescription('This object describes the Bearer Capabilities of the tunnel peer. If the tunnel is idle this object should maintain its value from the last time it was connected.')
alL2tpStatsTunnelFramingCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("digital", 1), ("analog", 2), ("digitalAnalog", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelFramingCapabilities.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelFramingCapabilities.setDescription('This object describes the Framing Capabilities of the tunnel peer. If the tunnel is idle this object should maintain its value from the last time it was connected.')
alL2tpStatsTunnelControlRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlRecvPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlRecvPackets.setDescription('This object contains the number of control packets received on the tunnel.')
alL2tpStatsTunnelControlRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlRecvDiscards.setDescription('This object returns the number of received payload packets that were discarded.')
alL2tpStatsTunnelControlRecvZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlRecvZLB.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlRecvZLB.setDescription('This object returns a count of the number of Zero Length Body control packet acknowledgement packets that were received.')
alL2tpStatsTunnelControlOutOfSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlOutOfSequence.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlOutOfSequence.setDescription('This object returns a count of the number of control packets that were not received in the correct order (as per the sequence number) on this tunnel.')
alL2tpStatsTunnelControlOutOfWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlOutOfWindow.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlOutOfWindow.setDescription('This object contains the number of control packets that were received outside of the offered receive window. It is implementation specific as to whether these packets are queued or discarded.')
alL2tpStatsTunnelControlSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlSendPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlSendPackets.setDescription('This object contains the number of control packets that were transmitted to the tunnel peer.')
alL2tpStatsTunnelControlSendZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlSendZLB.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlSendZLB.setDescription('This object contains the number of Zero Length Body control packets that were transmitted to the tunnel peer.')
alL2tpStatsTunnelControlAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelControlAckTimeouts.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelControlAckTimeouts.setDescription('This object returns a count of the number of control packet timeouts due to the lack of a timely acknowledgement from the tunnel peer.')
alL2tpStatsTunnelCurrentRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 22), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelCurrentRemoteRWS.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelCurrentRemoteRWS.setDescription('This object contains the current remote receive window size as determined by the local flow control mechanism employed.')
alL2tpStatsTunnelSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelSendSeq.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelSendSeq.setDescription('This object contains the next send sequence number for the control channel.')
alL2tpStatsTunnelSendSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelSendSeqAck.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelSendSeqAck.setDescription('This object contains the send sequence number that the tunnel peer has acknowledged for the control channel. The flow control state can be determined by subtracting the l2tpTunnelStatsSendSeq from alL2tpStatsTunnelSendSeqAck and comparing this value to l2tpTunnelStatsCurrentRemoteRWS.')
alL2tpStatsTunnelRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRecvSeq.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRecvSeq.setDescription('This object contains the next receive sequence number expected to be received on this control channel.')
alL2tpStatsTunnelRecvSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelRecvSeqAck.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelRecvSeqAck.setDescription('This object contains the last receive sequence number that was acknowledged back to the tunnel peer for the control channel.')
alL2tpStatsTunnelTotalSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelTotalSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelTotalSessions.setDescription('This object contains the total number of sessions that this tunnel has successfully connected through to its tunnel peer since this tunnel was created.')
alL2tpStatsTunnelFailedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelFailedSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelFailedSessions.setDescription('This object contains the total number of sessions that were initiated but failed to reach the established phase.')
alL2tpStatsTunnelActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelActiveSessions.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelActiveSessions.setDescription('This object contains the total number of sessions for this tunnel.')
alL2tpStatsTunnelLastResultCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelLastResultCode.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelLastResultCode.setDescription('This object contains the last value of the result code as described in the Result Code AVP which caused the tunnel to disconnect.')
alL2tpStatsTunnelLastErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelLastErrorCode.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelLastErrorCode.setDescription('This object contains the last value of the error code as described in the Result Code AVP which caused the tunnel to disconnect.')
alL2tpStatsTunnelLastErrorMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 2, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsTunnelLastErrorMessage.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsTunnelLastErrorMessage.setDescription('This object contains the last value of the optional message as described in the Result Code AVP which caused the tunnel to disconnect.')
alL2tpStatsSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3), )
if mibBuilder.loadTexts: alL2tpStatsSessionTable.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionTable.setDescription('The L2TP session status and statistics table.')
alL2tpStatsSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1), ).setIndexNames((0, "ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionIfIndex"))
if mibBuilder.loadTexts: alL2tpStatsSessionEntry.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionEntry.setDescription('An L2TP session interface stats entry.')
alL2tpStatsSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alL2tpStatsSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRowStatus.setDescription('The status of this row. Used to terminate the session, cannot be used to create a session.')
alL2tpStatsSessionIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionIfIndex.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionIfIndex.setDescription('This value for this object is equal to the value of ifIndex of the Interfaces MIB for session interfaces of type L2TP.')
alL2tpStatsSessionTID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionTID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionTID.setDescription('This object contains the control channel tunnel identifier for this session.')
alL2tpStatsSessionLocalCID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionLocalCID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionLocalCID.setDescription('This object contains the local call identifier for the session.')
alL2tpStatsSessionRemoteCID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRemoteCID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRemoteCID.setDescription('This object contains the remote call identifier for the session.')
alL2tpStatsSessionUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionUserName.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionUserName.setDescription('This object identifies the peer session name on this interface. This is typically the login name of the remote user. If the user name is unknown to the local tunnel peer then this object will contain a null string.')
alL2tpStatsSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("sessionIdle", 1), ("sessionConnecting", 2), ("sessionEstablished", 3), ("sessionDisconnecting", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionState.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionState.setDescription('This object contains the current state of the session.')
alL2tpStatsSessionCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lacIncoming", 1), ("lnsIncoming", 2), ("lacOutgoing", 3), ("lnsOutgoing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionCallType.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionCallType.setDescription('This object indicates the type of call and the role this tunnel peer is providing for this session. For example, lacIncoming(1) indicates that this tunnel peer is acting as a LAC and generated a Incoming-Call-Request to the tunnel peer (the LNS). Note that tunnel peers can be both LAC and LNS simultaneously.')
alL2tpStatsSessionCallSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionCallSerialNumber.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionCallSerialNumber.setDescription('This object contains the serial number that has been assigned to this session.')
alL2tpStatsSessionTxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionTxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionTxConnectSpeed.setDescription('This object returns the last known transmit baud rate for this session.')
alL2tpStatsSessionRxConnectSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRxConnectSpeed.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRxConnectSpeed.setDescription('This object returns the last known receive baud rate for this session.')
alL2tpStatsSessionCallBearerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("digital", 1), ("analog", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionCallBearerType.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionCallBearerType.setDescription('This object describes the bearer type of this session.')
alL2tpStatsSessionFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("asynchronous", 1), ("synchronous", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionFramingType.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionFramingType.setDescription('This object describes the framing type of this session.')
alL2tpStatsSessionPhysChanId = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionPhysChanId.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionPhysChanId.setDescription('This object contains the physical channel identifier for the session.')
alL2tpStatsSessionDNIS = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionDNIS.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionDNIS.setDescription('This object identifies the Dialed Number Information String that the LAC obtained from the network for the session. If no DNIS was provided then a null string will be returned.')
alL2tpStatsSessionCLID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionCLID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionCLID.setDescription('This object identifies the Calling Line ID that the LAC obtained from the network for the session. If no CLID was provided then a null string will be returned.')
alL2tpStatsSessionSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSubAddress.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionSubAddress.setDescription('This object identifies the Sub Address that the LAC obtained from the network for the session. If no Sub Address was provided then a null string will be returned.')
alL2tpStatsSessionPrivateGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionPrivateGroupID.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionPrivateGroupID.setDescription('This object identifies the Private Group Identifier used for this tunneled session. If no Private Group Identifier was provided then a null string will be returned.')
alL2tpStatsSessionProxyLcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionProxyLcp.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionProxyLcp.setDescription('Indicates whether the LAC performed proxy LCP for this session.')
alL2tpStatsSessionAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("text", 2), ("pppChap", 3), ("pppPap", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionAuthMethod.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionAuthMethod.setDescription('This object contains the proxy authentication method employed by the LAC for the session. If l2tpSessionProxyLcp is false(2) this object should not be interpreted.')
alL2tpStatsSessionLocalRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionLocalRWS.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionLocalRWS.setDescription('This object returns the local send window size for this session. If the value of the object alL2tpStatsSessionSequencingState is none(1) then this object should not be interpreted.')
alL2tpStatsSessionRemoteInitialRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRemoteInitialRWS.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionRemoteInitialRWS.setDescription('This object returns the initial remote send window size for this session. If the value of the object alL2tpStatsSessionSequencingState is none(1) then this object should not be interpreted.')
alL2tpStatsSessionRemotePPD = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRemotePPD.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRemotePPD.setDescription('This object contains the Packet Processing Delay for the session. If the value of the object alL2tpStatsSessionSequencingState is none(1) then this object should not be interpreted.')
alL2tpStatsSessionSequencingState = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("remote", 2), ("local", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSequencingState.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionSequencingState.setDescription('This object defines which tunnel peers have requested payload sequencing. The value of both(4) indicates that both peers have requested payload sequencing.')
alL2tpStatsSessionRecvOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvOctets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvOctets.setDescription('This object returns the total number payload octets received for this session.')
alL2tpStatsSessionRecvPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvPackets.setDescription('This object returns the total number of payload packets received for this session.')
alL2tpStatsSessionRecvDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvDiscards.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvDiscards.setDescription('This object returns the total number of payload packets received that were discarded for this session.')
alL2tpStatsSessionRecvZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvZLB.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvZLB.setDescription('This object returns the total number of Zero Length Body acknowlegement payload packets received for this session.')
alL2tpStatsSessionOutSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionOutSequence.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionOutSequence.setDescription('This object returns the total number of packets received for this session which were received out of sequence.')
alL2tpStatsSessionOutOfWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionOutOfWindow.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionOutOfWindow.setDescription('This object returns a count of the number of payload packets that were received outside of the expected window for this session.')
alL2tpStatsSessionSendOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSendOctets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionSendOctets.setDescription('This object returns the total number of payload octets transmitted for this session.')
alL2tpStatsSessionSendPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSendPackets.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionSendPackets.setDescription('This object returns the total number of payload packets transmitted for this session.')
alL2tpStatsSessionSendZLB = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSendZLB.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionSendZLB.setDescription('This object returns the total number of Zero Length Body acknowledgement packets transmitted for this session.')
alL2tpStatsSessionAckTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionAckTimeouts.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionAckTimeouts.setDescription('This object returns the total number of acknowledgement timeouts seen on payload packets for this session.')
alL2tpStatsSessionReassemblyTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionReassemblyTimeouts.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionReassemblyTimeouts.setDescription('This object returns the number of reassembly time outs that have occured for this session.')
alL2tpStatsSessionCurrentRemoteRWS = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 36), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionCurrentRemoteRWS.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionCurrentRemoteRWS.setDescription('This object contains the current remote receive window size as determined by the local flow control mechanism employed.')
alL2tpStatsSessionSendSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSendSeq.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionSendSeq.setDescription('This object contains the next send sequence number for for this session.')
alL2tpStatsSessionSendSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSendSeqAck.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionSendSeqAck.setDescription('This object contains the send sequence number that the tunnel peer has acknowledged for the payload channel. The flow control state can be determined by subtracting the alL2tpStatsSessionSendSeq from alL2tpStatsSessionSendSeqAck and comparing this value to l2tpSesssionStatsCurrentRemoteRWS.')
alL2tpStatsSessionSendSeqResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionSendSeqResets.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionSendSeqResets.setDescription('This object contains the total number of sequence number resets (payload packets with the R-bit set) sent on this session.')
alL2tpStatsSessionRecvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvSeq.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvSeq.setDescription('This object contains the next receive sequence number expected to be received on this session.')
alL2tpStatsSessionRecvSeqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvSeqAck.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvSeqAck.setDescription('This object contains the last receive sequence number that was acknowledged back to the tunnel peer for the session.')
alL2tpStatsSessionRecvSeqResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionRecvSeqResets.setStatus('deprecated')
if mibBuilder.loadTexts: alL2tpStatsSessionRecvSeqResets.setDescription('This object contains the total number of sequence number resets (payload packets with the R-bit set) received on this session.')
alL2tpStatsSessionTunnelPeerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3076, 2, 1, 2, 16, 3, 1, 43), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alL2tpStatsSessionTunnelPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: alL2tpStatsSessionTunnelPeerIpAddr.setDescription("The peer's IP address for the tunnel to which this session belongs.")
altigaL2tpStatsMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 21, 2, 1))
altigaL2tpStatsMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 3076, 1, 1, 21, 2, 1, 1))
altigaL2tpStatsMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3076, 1, 1, 21, 2, 1, 1, 1)).setObjects(("ALTIGA-L2TP-STATS-MIB", "altigaL2tpStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaL2tpStatsMibCompliance = altigaL2tpStatsMibCompliance.setStatus('current')
if mibBuilder.loadTexts: altigaL2tpStatsMibCompliance.setDescription('The compliance statement for agents which implement the Altiga L2TP Statistics MIB.')
altigaL2tpStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 16, 2)).setObjects(("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsLocalProtVers"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsVendorName"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsFirmwareRev"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTotalTunnels"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsFailedTunnels"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsFailedAuthentications"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsActiveTunnels"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsMaxTunnels"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTotalSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsFailedSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsActiveSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsMaxSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsControlRecvOctets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsControlRecvPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsControlRecvDiscards"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsControlSendOctets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsControlSendPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsPayloadRecvOctets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsPayloadRecvPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsPayloadRecvDiscards"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsPayloadSendOctets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsPayloadSendPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRowStatus"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelPeerIpAddr"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelLocalTID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRemoteTID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelState"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelInitiated"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRemoteHostName"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRemoteVendorName"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRemoteFirmwareRevision"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRemoteProtocolVersion"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelInitialRemoteRWS"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelBearerCapabilities"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelFramingCapabilities"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlRecvPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlRecvDiscards"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlRecvZLB"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlOutOfSequence"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlOutOfWindow"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlSendPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlSendZLB"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelControlAckTimeouts"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelCurrentRemoteRWS"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelSendSeq"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelSendSeqAck"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRecvSeq"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelRecvSeqAck"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelTotalSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelFailedSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelActiveSessions"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelLastResultCode"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelLastErrorCode"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsTunnelLastErrorMessage"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRowStatus"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionIfIndex"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionTID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionLocalCID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRemoteCID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionUserName"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionState"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionCallType"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionCallSerialNumber"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionTxConnectSpeed"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRxConnectSpeed"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionCallBearerType"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionFramingType"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionPhysChanId"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionDNIS"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionCLID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSubAddress"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionPrivateGroupID"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionProxyLcp"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionAuthMethod"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRemotePPD"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSequencingState"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvOctets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvDiscards"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionOutSequence"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSendOctets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSendPackets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionReassemblyTimeouts"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSendSeq"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSendSeqAck"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvSeq"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvSeqAck"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionTunnelPeerIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaL2tpStatsGroup = altigaL2tpStatsGroup.setStatus('current')
if mibBuilder.loadTexts: altigaL2tpStatsGroup.setDescription('The objects for L2TP statistics.')
altigaL2tpStatsDepGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3076, 2, 1, 1, 1, 16, 3)).setObjects(("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionLocalRWS"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRemoteInitialRWS"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvZLB"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSendZLB"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionOutOfWindow"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionAckTimeouts"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionCurrentRemoteRWS"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionSendSeqResets"), ("ALTIGA-L2TP-STATS-MIB", "alL2tpStatsSessionRecvSeqResets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    altigaL2tpStatsDepGroup = altigaL2tpStatsDepGroup.setStatus('deprecated')
if mibBuilder.loadTexts: altigaL2tpStatsDepGroup.setDescription('The deprecated objects for L2TP statistics.')
mibBuilder.exportSymbols("ALTIGA-L2TP-STATS-MIB", alL2tpStatsTunnelTable=alL2tpStatsTunnelTable, alL2tpStatsSessionPrivateGroupID=alL2tpStatsSessionPrivateGroupID, alL2tpStatsFailedTunnels=alL2tpStatsFailedTunnels, alL2tpStatsControlRecvDiscards=alL2tpStatsControlRecvDiscards, alL2tpStatsMaxSessions=alL2tpStatsMaxSessions, alL2tpStatsSessionSendSeqResets=alL2tpStatsSessionSendSeqResets, alL2tpStatsSessionCallBearerType=alL2tpStatsSessionCallBearerType, alL2tpStatsControlRecvPackets=alL2tpStatsControlRecvPackets, alL2tpStatsSessionTunnelPeerIpAddr=alL2tpStatsSessionTunnelPeerIpAddr, alL2tpStatsTunnelRemoteTID=alL2tpStatsTunnelRemoteTID, alL2tpStatsTunnelFailedSessions=alL2tpStatsTunnelFailedSessions, alL2tpStatsTunnelState=alL2tpStatsTunnelState, alL2tpStatsTunnelControlRecvPackets=alL2tpStatsTunnelControlRecvPackets, alL2tpStatsTunnelLastResultCode=alL2tpStatsTunnelLastResultCode, alL2tpStatsSessionCurrentRemoteRWS=alL2tpStatsSessionCurrentRemoteRWS, alL2tpStatsSessionProxyLcp=alL2tpStatsSessionProxyLcp, alL2tpStatsSessionCLID=alL2tpStatsSessionCLID, alL2tpStatsSessionEntry=alL2tpStatsSessionEntry, alL2tpStatsSessionRecvDiscards=alL2tpStatsSessionRecvDiscards, alL2tpStatsTunnelLocalTID=alL2tpStatsTunnelLocalTID, altigaL2tpStatsMibCompliances=altigaL2tpStatsMibCompliances, alL2tpStatsTunnelSendSeq=alL2tpStatsTunnelSendSeq, alL2tpStatsSessionSendSeq=alL2tpStatsSessionSendSeq, alL2tpStatsSessionSendSeqAck=alL2tpStatsSessionSendSeqAck, alL2tpStatsSessionRemoteInitialRWS=alL2tpStatsSessionRemoteInitialRWS, alL2tpStatsTotalSessions=alL2tpStatsTotalSessions, alL2tpStatsTunnelInitiated=alL2tpStatsTunnelInitiated, alL2tpStatsControlSendPackets=alL2tpStatsControlSendPackets, alL2tpStatsTunnelSendSeqAck=alL2tpStatsTunnelSendSeqAck, alL2tpStatsTunnelControlOutOfWindow=alL2tpStatsTunnelControlOutOfWindow, alL2tpStatsTotalTunnels=alL2tpStatsTotalTunnels, alL2tpStatsTunnelInitialRemoteRWS=alL2tpStatsTunnelInitialRemoteRWS, alL2tpStatsPayloadSendPackets=alL2tpStatsPayloadSendPackets, alL2tpStatsTunnelRecvSeq=alL2tpStatsTunnelRecvSeq, alL2tpStatsTunnelLastErrorMessage=alL2tpStatsTunnelLastErrorMessage, alL2tpStatsSessionUserName=alL2tpStatsSessionUserName, alL2tpStatsPayloadRecvOctets=alL2tpStatsPayloadRecvOctets, alL2tpStatsControlSendOctets=alL2tpStatsControlSendOctets, alL2tpStatsTunnelControlOutOfSequence=alL2tpStatsTunnelControlOutOfSequence, alL2tpStatsFailedAuthentications=alL2tpStatsFailedAuthentications, alL2tpStatsTunnelRowStatus=alL2tpStatsTunnelRowStatus, alL2tpStatsSessionTable=alL2tpStatsSessionTable, alL2tpStatsSessionRecvSeqAck=alL2tpStatsSessionRecvSeqAck, alL2tpStatsTunnelRemoteVendorName=alL2tpStatsTunnelRemoteVendorName, alL2tpStatsTunnelFramingCapabilities=alL2tpStatsTunnelFramingCapabilities, alL2tpStatsSessionDNIS=alL2tpStatsSessionDNIS, altigaL2tpStatsMibModule=altigaL2tpStatsMibModule, alL2tpStatsControlRecvOctets=alL2tpStatsControlRecvOctets, alL2tpStatsSessionReassemblyTimeouts=alL2tpStatsSessionReassemblyTimeouts, alL2tpStatsSessionLocalCID=alL2tpStatsSessionLocalCID, alL2tpStatsSessionAckTimeouts=alL2tpStatsSessionAckTimeouts, alL2tpStatsSessionState=alL2tpStatsSessionState, alL2tpStatsSessionSendZLB=alL2tpStatsSessionSendZLB, alL2tpStatsPayloadRecvDiscards=alL2tpStatsPayloadRecvDiscards, alL2tpStatsSessionRecvZLB=alL2tpStatsSessionRecvZLB, alL2tpStatsFailedSessions=alL2tpStatsFailedSessions, alL2tpStatsTunnelRemoteHostName=alL2tpStatsTunnelRemoteHostName, alL2tpStatsSessionOutSequence=alL2tpStatsSessionOutSequence, alL2tpStatsTunnelLastErrorCode=alL2tpStatsTunnelLastErrorCode, alL2tpStatsTunnelRemoteFirmwareRevision=alL2tpStatsTunnelRemoteFirmwareRevision, alL2tpStatsSessionRecvOctets=alL2tpStatsSessionRecvOctets, alL2tpStatsSessionLocalRWS=alL2tpStatsSessionLocalRWS, alL2tpStatsTunnelControlRecvDiscards=alL2tpStatsTunnelControlRecvDiscards, alL2tpStatsTunnelActiveSessions=alL2tpStatsTunnelActiveSessions, PYSNMP_MODULE_ID=altigaL2tpStatsMibModule, alL2tpStatsSessionSubAddress=alL2tpStatsSessionSubAddress, alL2tpStatsSessionTxConnectSpeed=alL2tpStatsSessionTxConnectSpeed, alL2tpStatsSessionRemotePPD=alL2tpStatsSessionRemotePPD, altigaL2tpStatsMibCompliance=altigaL2tpStatsMibCompliance, alL2tpStatsSessionPhysChanId=alL2tpStatsSessionPhysChanId, alL2tpStatsTunnelControlAckTimeouts=alL2tpStatsTunnelControlAckTimeouts, alL2tpStatsTunnelControlSendZLB=alL2tpStatsTunnelControlSendZLB, alL2tpStatsTunnelControlRecvZLB=alL2tpStatsTunnelControlRecvZLB, alL2tpStatsSessionRecvSeqResets=alL2tpStatsSessionRecvSeqResets, alL2tpStatsTunnelTotalSessions=alL2tpStatsTunnelTotalSessions, alL2tpStatsTunnelControlSendPackets=alL2tpStatsTunnelControlSendPackets, alL2tpStatsSessionRecvSeq=alL2tpStatsSessionRecvSeq, alL2tpStatsSessionOutOfWindow=alL2tpStatsSessionOutOfWindow, alL2tpStatsSessionRemoteCID=alL2tpStatsSessionRemoteCID, alL2tpStatsSessionAuthMethod=alL2tpStatsSessionAuthMethod, alL2tpStatsSessionSendOctets=alL2tpStatsSessionSendOctets, alL2tpStatsTunnelBearerCapabilities=alL2tpStatsTunnelBearerCapabilities, alL2tpStatsTunnelCurrentRemoteRWS=alL2tpStatsTunnelCurrentRemoteRWS, alL2tpStatsTunnelRecvSeqAck=alL2tpStatsTunnelRecvSeqAck, alL2tpStatsSessionSequencingState=alL2tpStatsSessionSequencingState, alL2tpStatsSessionRecvPackets=alL2tpStatsSessionRecvPackets, alL2tpStatsPayloadSendOctets=alL2tpStatsPayloadSendOctets, alL2tpStatsTunnelRemoteProtocolVersion=alL2tpStatsTunnelRemoteProtocolVersion, alL2tpStatsTunnelEntry=alL2tpStatsTunnelEntry, alL2tpStatsSessionIfIndex=alL2tpStatsSessionIfIndex, alL2tpStatsPayloadRecvPackets=alL2tpStatsPayloadRecvPackets, alStatsL2tpGlobal=alStatsL2tpGlobal, alL2tpStatsSessionRowStatus=alL2tpStatsSessionRowStatus, alL2tpStatsLocalProtVers=alL2tpStatsLocalProtVers, alL2tpStatsSessionTID=alL2tpStatsSessionTID, alL2tpStatsActiveTunnels=alL2tpStatsActiveTunnels, alL2tpStatsSessionFramingType=alL2tpStatsSessionFramingType, altigaL2tpStatsMibConformance=altigaL2tpStatsMibConformance, alL2tpStatsMaxTunnels=alL2tpStatsMaxTunnels, alL2tpStatsVendorName=alL2tpStatsVendorName, alL2tpStatsSessionCallSerialNumber=alL2tpStatsSessionCallSerialNumber, alL2tpStatsSessionRxConnectSpeed=alL2tpStatsSessionRxConnectSpeed, altigaL2tpStatsDepGroup=altigaL2tpStatsDepGroup, altigaL2tpStatsGroup=altigaL2tpStatsGroup, alL2tpStatsSessionSendPackets=alL2tpStatsSessionSendPackets, alL2tpStatsActiveSessions=alL2tpStatsActiveSessions, alL2tpStatsTunnelPeerIpAddr=alL2tpStatsTunnelPeerIpAddr, alL2tpStatsSessionCallType=alL2tpStatsSessionCallType, alL2tpStatsFirmwareRev=alL2tpStatsFirmwareRev)
