#
# PySNMP MIB module XEDIA-RIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/XEDIA-RIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:43:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
iso, Bits, Counter32, Unsigned32, Gauge32, ObjectIdentity, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, NotificationType, ModuleIdentity, Counter64, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "Counter32", "Unsigned32", "Gauge32", "ObjectIdentity", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "NotificationType", "ModuleIdentity", "Counter64", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
xediaMibs, = mibBuilder.importSymbols("XEDIA-REG", "xediaMibs")
xediaRipMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 838, 3, 5))
if mibBuilder.loadTexts: xediaRipMIB.setLastUpdated('9702182155Z')
if mibBuilder.loadTexts: xediaRipMIB.setOrganization('Xedia Corp.')
if mibBuilder.loadTexts: xediaRipMIB.setContactInfo('support@xedia.com')
if mibBuilder.loadTexts: xediaRipMIB.setDescription("This module defines additional objects for management of RIP in Xedia devices, above and beyond what is defined in the IETF's RIPv2-MIB.")
xripObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 5, 1))
xripConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 5, 2))
xripAdminStat = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xripAdminStat.setStatus('current')
if mibBuilder.loadTexts: xripAdminStat.setDescription("The administrative status of RIP in the router. The value 'enabled(1)' indicates that the RIP process is active on at least one interface; 'disabled(2)' indicates it is disable on all interfaces.")
xripImportAdmin = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xripImportAdmin.setStatus('current')
if mibBuilder.loadTexts: xripImportAdmin.setDescription('The control for enabling and disabling importing of metrics.')
xripImportMetric = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xripImportMetric.setStatus('current')
if mibBuilder.loadTexts: xripImportMetric.setDescription('The import metric value used.')
xripUpdateTimer = MibScalar((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 360)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xripUpdateTimer.setStatus('current')
if mibBuilder.loadTexts: xripUpdateTimer.setDescription('The time between updates in seconds.')
xRip2XIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 10), )
if mibBuilder.loadTexts: xRip2XIfConfTable.setStatus('current')
if mibBuilder.loadTexts: xRip2XIfConfTable.setDescription('A list of interface entries. The number of entries is given by the value of ifNumber. This table contains additional objects for the interface table.')
xRip2XIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 10, 1), )
rip2IfConfEntry.registerAugmentions(("XEDIA-RIP-MIB", "xRip2XIfConfEntry"))
xRip2XIfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: xRip2XIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: xRip2XIfConfEntry.setDescription('An entry containing additional management information applicable to a particular Rip2 interface.')
xrip2IfConfSlowConvergenceTechnique = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("splitHorizon", 2), ("poisonReverse", 3))).clone('poisonReverse')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xrip2IfConfSlowConvergenceTechnique.setStatus('current')
if mibBuilder.loadTexts: xrip2IfConfSlowConvergenceTechnique.setDescription('The method used to inform other routers about routes.')
xrip2IfConfTriggerEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 838, 3, 5, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xrip2IfConfTriggerEvents.setStatus('current')
if mibBuilder.loadTexts: xrip2IfConfTriggerEvents.setDescription('The object used to control the sending of Rip triggered events.')
xripCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 5, 2, 1))
xripGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 838, 3, 5, 2, 2))
xripCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 838, 3, 5, 2, 1, 1)).setObjects(("XEDIA-RIP-MIB", "xripAllGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xripCompliance = xripCompliance.setStatus('current')
if mibBuilder.loadTexts: xripCompliance.setDescription('The compliance statement for all agents that support this MIB. A compliant agent implements all objects defined in this MIB.')
xripAllGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 838, 3, 5, 2, 2, 1)).setObjects(("XEDIA-RIP-MIB", "xripAdminStat"), ("XEDIA-RIP-MIB", "xripImportAdmin"), ("XEDIA-RIP-MIB", "xripImportMetric"), ("XEDIA-RIP-MIB", "xrip2IfConfSlowConvergenceTechnique"), ("XEDIA-RIP-MIB", "xrip2IfConfTriggerEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    xripAllGroup = xripAllGroup.setStatus('current')
if mibBuilder.loadTexts: xripAllGroup.setDescription('The set of all accessible objects in this MIB.')
mibBuilder.exportSymbols("XEDIA-RIP-MIB", xripUpdateTimer=xripUpdateTimer, xRip2XIfConfEntry=xRip2XIfConfEntry, xrip2IfConfTriggerEvents=xrip2IfConfTriggerEvents, xripConformance=xripConformance, xrip2IfConfSlowConvergenceTechnique=xrip2IfConfSlowConvergenceTechnique, xripAllGroup=xripAllGroup, PYSNMP_MODULE_ID=xediaRipMIB, xripImportMetric=xripImportMetric, xripGroups=xripGroups, xripAdminStat=xripAdminStat, xRip2XIfConfTable=xRip2XIfConfTable, xripCompliance=xripCompliance, xripImportAdmin=xripImportAdmin, xripObjects=xripObjects, xripCompliances=xripCompliances, xediaRipMIB=xediaRipMIB)
