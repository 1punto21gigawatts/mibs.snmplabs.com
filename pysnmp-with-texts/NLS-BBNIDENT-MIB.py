#
# PySNMP MIB module NLS-BBNIDENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NLS-BBNIDENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Unsigned32, IpAddress, MibIdentifier, Gauge32, iso, Counter64, Counter32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Unsigned32", "IpAddress", "MibIdentifier", "Gauge32", "iso", "Counter64", "Counter32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gi = MibIdentifier((1, 3, 6, 1, 4, 1, 1166))
giproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1))
acc4000d = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 1))
anicd = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 2))
item1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 4))
irt1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 5))
nc1500 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 6))
om1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 7))
im1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 8))
mps = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 9))
rpd1000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 10))
acpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 11))
surfBbnh = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 18))
sb2100 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 19))
sb2100D = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 20))
sb2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 21))
saDANIS = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 30))
hdd2000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 40))
merlin = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 50))
netSentry = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 99))
bti = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 200))
rfModMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 201))
btiIntMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 202))
dct5000 = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 300))
motoIPNSprodID = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 1, 450))
giproxies = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 3))
gicommon = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4))
identity = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 1))
state = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 2))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 3))
logs = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 4, 4))
nlsbbn = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5))
bbnIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 1))
bbnState = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 2))
bbnTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 3))
bbnLogs = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 4))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 5, 5))
motproxies = MibIdentifier((1, 3, 6, 1, 4, 1, 1166, 6))
class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

identSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identSerialNumber.setReference(' -- ')
if mibBuilder.loadTexts: identSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: identSerialNumber.setDescription('This contains the serial number of the unit. There is no specification of the internal format of the serial number. The serial number is entered into either permanent or non- volatile memory of the unit at the time of manufacture. Note - the unit itself supplies the serial number.')
identChassisNumber = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identChassisNumber.setReference(' -- ')
if mibBuilder.loadTexts: identChassisNumber.setStatus('mandatory')
if mibBuilder.loadTexts: identChassisNumber.setDescription('This contains the chassis number of the unit. This is applicable only to a limited number of products, currently, only the ITEM-1000. For products for which this is not applicable, this will be a null object. There is no specification of the internal format of the chassis number. The means by which any product determines its chassis number is to be determined by each individual product.')
identIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfIndex.setReference(' -- ')
if mibBuilder.loadTexts: identIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: identIfIndex.setDescription('This contains the IfIndex of the OAM&P port.')
identHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identHardwareVersion.setReference(' -- ')
if mibBuilder.loadTexts: identHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: identHardwareVersion.setDescription('This contains a display string that defines the hardware version of this particular unit. There is no specification of the internal format of the hardware version. The hardware version is entered into the either permanent or non-volatile memory of the unit at the time of manufacture.')
identHardwareFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identHardwareFeatures.setReference(' -- ')
if mibBuilder.loadTexts: identHardwareFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: identHardwareFeatures.setDescription('This contains a display string that defines the features of this particular unit. There is no specification of the internal format of the hardware features. The hardware features is entered into the either permanent or non-volatile memory of the unit at the time of manufacture.')
identInventoryCode = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identInventoryCode.setReference(' -- ')
if mibBuilder.loadTexts: identInventoryCode.setStatus('mandatory')
if mibBuilder.loadTexts: identInventoryCode.setDescription("This contains a display string that defines the inventory code for this unit. Once an inventory code has been set, it should be kept in non-volatile memory. The unit should only allow this object to be set when it is in the 'configuration' mode. There is no specification of the internal format of the inventory Code.")
identSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identSoftwareVersion.setReference(' -- ')
if mibBuilder.loadTexts: identSoftwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: identSoftwareVersion.setDescription('This contains a display string that defines the current version of the software for this unit. The format of the software version is a fully qualified directory name. This value is received by a unit as within a BOOTP response from the BOOTP server. It is available to the network manager for applications that track the installed software. Once the software version has been set, it should be kept in non-volatile memory.')
identLocationArea = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identLocationArea.setReference(' -- ')
if mibBuilder.loadTexts: identLocationArea.setStatus('mandatory')
if mibBuilder.loadTexts: identLocationArea.setDescription("This is different from the MIB II sysLocation variable as it contains only the location area and does not describe the precise location. This contains a display string that defines the area in which the unit is installed. Location is defined by a set of three objects: 'Area', 'Rack', and 'Shelf'. These location objects cannot be determined by the unit itself, but can only be determined by the network manager. It is available to the unit for display on a front panel. Display of the location on the front panel is useful in validating the configuration established by the network manager. The unit should only allow this object to be set when it is in the 'configuration' mode. Once the Location Area has been set, it should be kept in non-volatile memory.")
identLocationRack = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identLocationRack.setReference(' -- ')
if mibBuilder.loadTexts: identLocationRack.setStatus('mandatory')
if mibBuilder.loadTexts: identLocationRack.setDescription("This contains a display string that defines the rack in which the unit is installed. Location is defined by a set of three objects: 'Area', 'Rack', and 'Shelf'. These location objects cannot be determined by the unit itself, but can only be determined by the network manager. It is available to the unit for display on a front panel. Display of the location on the front panel is useful in validating the configuration established by the network manager. The unit should only allow this object to be set when it is in the 'configuration' mode. Once the Location Area has been set, it should be kept in non-volatile memory.")
identLocationShelf = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identLocationShelf.setReference(' -- ')
if mibBuilder.loadTexts: identLocationShelf.setStatus('mandatory')
if mibBuilder.loadTexts: identLocationShelf.setDescription("This contains a display string that defines the shelf in which the unit is installed. Location is defined by a set of three objects: 'Area', 'Rack', and 'Shelf'. These location objects cannot be determined by the unit itself, but can only be determined by the network manager. It is available to the unit for display on a front panel. Display of the location on the front panel is useful in validating the configuration established by the network manager. The unit should only allow this object to be set when it is in the 'configuration' mode. Once the Location Area has been set, it should be kept in non-volatile memory.")
identMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identMIBVersion.setReference(' -- ')
if mibBuilder.loadTexts: identMIBVersion.setStatus('mandatory')
if mibBuilder.loadTexts: identMIBVersion.setDescription(' The version number of thsi MIB.')
identAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identAgentVersion.setReference(' -- ')
if mibBuilder.loadTexts: identAgentVersion.setStatus('mandatory')
if mibBuilder.loadTexts: identAgentVersion.setDescription('The version number of the Agent.')
identCommand = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("restart", 1), ("currentlyRestarting", 2), ("unspecified", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identCommand.setReference(' -- ')
if mibBuilder.loadTexts: identCommand.setStatus('mandatory')
if mibBuilder.loadTexts: identCommand.setDescription('This is the command to be executed by the resource managed by the agent. The value unspecified is always returned on SNMP Get/GetNext while the resource is running. If the restart(1) command is given, currentlyRestarting(2) is returned while the resource is preparing to restart (reboot).')
identIfExtensionTable = MibTable((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14), )
if mibBuilder.loadTexts: identIfExtensionTable.setReference(' -- ')
if mibBuilder.loadTexts: identIfExtensionTable.setStatus('mandatory')
if mibBuilder.loadTexts: identIfExtensionTable.setDescription('This table contains extensions to the MIB II ifTable which contains the definitions of all interfaces. An ifTable entry may be a board or just a port on a board. Any ifTable entry can have an extension in the identIfExtensionTable. The corrsponding entry in that table will have the identIfIndex = ifIndex. Within the ifTable the presence of such an entry is indicated by setting the variable ifSpecific to the OBJECT IDENTIFIER value of identIfExtensionTable. Otherwise iFSpecific is set to {0 0}. The ifType - other - is used for all board types not envisoned by MIB II.')
identIfExtensionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1), ).setIndexNames((0, "NLS-BBNIDENT-MIB", "identIfExtensionIndex"))
if mibBuilder.loadTexts: identIfExtensionEntry.setReference(' -- ')
if mibBuilder.loadTexts: identIfExtensionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: identIfExtensionEntry.setDescription('An entry (conceptual row) in the Board Table.')
identIfExtensionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfExtensionIndex.setReference(' -- ')
if mibBuilder.loadTexts: identIfExtensionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: identIfExtensionIndex.setDescription('Same value as ifIndex of MIB II for the same board.')
identIfSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfSerialNumber.setReference(' -- ')
if mibBuilder.loadTexts: identIfSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: identIfSerialNumber.setDescription('This contains the serial number of the board. There is no specification of the internal format of the serial number. The serial number is entered into either permanent or non-volatile memory of the unit at the time of manufacture. Note - the unit itself supplies the serial number.')
identIfHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfHardwareVersion.setReference(' -- ')
if mibBuilder.loadTexts: identIfHardwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: identIfHardwareVersion.setDescription('This contains a display string that defines the version of this particular board. There is no specification of the internal format of the hardware version. The hardware version is entered into the either permanent or non-volatile memory of the unit at the time of manufacture.')
identIfHardwareFeatures = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfHardwareFeatures.setReference(' -- ')
if mibBuilder.loadTexts: identIfHardwareFeatures.setStatus('mandatory')
if mibBuilder.loadTexts: identIfHardwareFeatures.setDescription('This contains a display string that defines the features of this particular board. There is no specification of the internal format of the hardware features. The hardware features is entered into the either permanent or non-volatile memory of the unit at the time of manufacture.')
identIfInventoryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfInventoryCode.setReference(' -- ')
if mibBuilder.loadTexts: identIfInventoryCode.setStatus('mandatory')
if mibBuilder.loadTexts: identIfInventoryCode.setDescription("This contains a display string that defines the inventory code for this board. This is an optional value; if there is no inventory code, The unit will respond with a null string. Once an inventory code has been set, it should be kept in non-volatile memory. The unit should only allow this object to be set when it is in the 'configuration' mode. There is no specification of the internal format of the inventory Code.")
identIfFirmwareVersion1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion1.setReference(' -- ')
if mibBuilder.loadTexts: identIfFirmwareVersion1.setStatus('mandatory')
if mibBuilder.loadTexts: identIfFirmwareVersion1.setDescription('Within a product, there may be several identifiers of such firmware, boot proms, kernel versions, flash versions, etc. This field (and the 3 that follow) are used to hold the identification of these items. These values must be entered into the board at the time of manufacturing. Unused fields are reported as null values. These fields are available to the network manager for applications that keep track of the firmware related identification. There is no specification of the internal format of firmware version identifiers.')
identIfFirmwareVersion2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion2.setReference(' -- ')
if mibBuilder.loadTexts: identIfFirmwareVersion2.setStatus('mandatory')
if mibBuilder.loadTexts: identIfFirmwareVersion2.setDescription('Firmware related identification field # 2.')
identIfFirmwareVersion3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion3.setReference(' -- ')
if mibBuilder.loadTexts: identIfFirmwareVersion3.setStatus('mandatory')
if mibBuilder.loadTexts: identIfFirmwareVersion3.setDescription('Firmware related identification field # 3.')
identIfFirmwareVersion4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfFirmwareVersion4.setReference(' -- ')
if mibBuilder.loadTexts: identIfFirmwareVersion4.setStatus('mandatory')
if mibBuilder.loadTexts: identIfFirmwareVersion4.setDescription('Firmware related identification field # 4')
identIfSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfSlotId.setReference(' -- ')
if mibBuilder.loadTexts: identIfSlotId.setStatus('mandatory')
if mibBuilder.loadTexts: identIfSlotId.setDescription('This variable identifies the board slot.')
identIfCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 1), ("reset", 2), ("restart", 3), ("halt", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfCommand.setReference(' -- ')
if mibBuilder.loadTexts: identIfCommand.setStatus('mandatory')
if mibBuilder.loadTexts: identIfCommand.setDescription('This is the command to be executed by the resource managed by the agent. The value unspecified(10 is always returned on SNMP Get/GetNext while the other values are set by the manager and executed by the resource.')
identIfAdministrativeState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2), ("shuttingDown", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfAdministrativeState.setReference(' -- ')
if mibBuilder.loadTexts: identIfAdministrativeState.setStatus('mandatory')
if mibBuilder.loadTexts: identIfAdministrativeState.setDescription(' The current Adminsitrative state of the interface as defined in ISO/IEC 10164-2.')
identIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfOperationalState.setReference(' -- ')
if mibBuilder.loadTexts: identIfOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: identIfOperationalState.setDescription(' The current Operational state of the interface as defined in ISO/IEC 10164-2')
identIfAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("underRepair", 1), ("critical", 2), ("major", 3), ("minor", 4), ("alarmOutstanding", 5), ("idle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfAlarmStatus.setReference(' -- ')
if mibBuilder.loadTexts: identIfAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: identIfAlarmStatus.setDescription(' This object defines the Alarm status of the interface as defined in ISO/IEC 10164-2 and state-machine')
identIfAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inTest", 1), ("failed", 2), ("powerOff", 3), ("offLine", 4), ("offDuty", 5), ("dependency", 6), ("degraded", 7), ("notInstalled", 8), ("logFull", 9), ("available", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfAvailabilityStatus.setReference(' -- ')
if mibBuilder.loadTexts: identIfAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: identIfAvailabilityStatus.setDescription(' This object controls the Availability status of the interface as defined in ISO/IEC 10164-2 and state-machine')
identIfSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 16), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identIfSpecific.setReference(' -- ')
if mibBuilder.loadTexts: identIfSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: identIfSpecific.setDescription(' The object identifier of a board type specific extension to the ifTable if necessary. Otherwise, identIfSpecific is set to {0 0}.')
identIfEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1166, 5, 1, 14, 1, 17), EntryStatus().clone('valid')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: identIfEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: identIfEntryStatus.setDescription("This object is used to create, delete or modify a row in this table. To create a a new network element, this object is initially set to 'createRequest'. After completion of the configuration of the new entry, the manager must set the appropriate instance of this object to the value valid(1) or aborts, setting this object to invalid(4). This object must not be set to 'active' unless the following columnar objects exist in this row: identIfExtensionIndex identIfSerialNumber identIfHardwareVersion identIfInventoryCode identIfFirmwareVersion1 identIfSpecific To delete an existing entry in this table, the manager must set the appropriate instance of this object to the value invalid(4). Creation of an instance of this object has the effect of creating the supplemental object instances to complete the conceptual row. An existing instance of this entry cannot be created. If circumstances occur which cause an entry to become invalid, the agent modifies the value of the appropriate instance of this object to invalid(4). Whenever, the value of this object for a particular entry becomes invalid(4), the conceptual row for that instance may be removed from the table at any time, either immediately or subsequently.")
identUnitModel = MibScalar((1, 3, 6, 1, 4, 1, 1166, 5, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: identUnitModel.setReference(' -- ')
if mibBuilder.loadTexts: identUnitModel.setStatus('mandatory')
if mibBuilder.loadTexts: identUnitModel.setDescription("This contains the model of the product. For example, the ITEM-1000 would contain 'ITEM1000'. ")
mibBuilder.exportSymbols("NLS-BBNIDENT-MIB", identIfFirmwareVersion4=identIfFirmwareVersion4, surfBbnh=surfBbnh, sb2100=sb2100, sb2100D=sb2100D, state=state, identIfFirmwareVersion1=identIfFirmwareVersion1, giproxies=giproxies, irt1000=irt1000, logs=logs, dns=dns, item1000=item1000, anicd=anicd, identIfExtensionEntry=identIfExtensionEntry, identIfInventoryCode=identIfInventoryCode, identIfSerialNumber=identIfSerialNumber, identSoftwareVersion=identSoftwareVersion, saDANIS=saDANIS, nlsbbn=nlsbbn, bbnTraps=bbnTraps, gi=gi, identSerialNumber=identSerialNumber, bbnState=bbnState, bbnLogs=bbnLogs, identIfHardwareVersion=identIfHardwareVersion, identIfAlarmStatus=identIfAlarmStatus, mps=mps, identIfSpecific=identIfSpecific, merlin=merlin, motproxies=motproxies, identChassisNumber=identChassisNumber, btiIntMIB=btiIntMIB, identIfFirmwareVersion2=identIfFirmwareVersion2, acpStatus=acpStatus, acc4000d=acc4000d, identCommand=identCommand, identIfAdministrativeState=identIfAdministrativeState, im1000=im1000, identHardwareVersion=identHardwareVersion, identIfExtensionTable=identIfExtensionTable, dct5000=dct5000, identHardwareFeatures=identHardwareFeatures, identLocationRack=identLocationRack, netSentry=netSentry, identIfCommand=identIfCommand, identIfOperationalState=identIfOperationalState, identIfAvailabilityStatus=identIfAvailabilityStatus, identity=identity, identLocationShelf=identLocationShelf, giproducts=giproducts, hdd2000=hdd2000, identIfIndex=identIfIndex, identLocationArea=identLocationArea, identIfExtensionIndex=identIfExtensionIndex, identMIBVersion=identMIBVersion, identIfHardwareFeatures=identIfHardwareFeatures, rpd1000=rpd1000, identIfFirmwareVersion3=identIfFirmwareVersion3, motoIPNSprodID=motoIPNSprodID, om1000=om1000, bti=bti, identIfSlotId=identIfSlotId, identIfEntryStatus=identIfEntryStatus, nc1500=nc1500, identUnitModel=identUnitModel, EntryStatus=EntryStatus, traps=traps, identInventoryCode=identInventoryCode, gicommon=gicommon, sb2000=sb2000, rfModMIB=rfModMIB, identAgentVersion=identAgentVersion, bbnIdent=bbnIdent)
