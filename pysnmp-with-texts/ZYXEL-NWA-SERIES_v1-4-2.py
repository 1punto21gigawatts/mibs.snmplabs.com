#
# PySNMP MIB module ZYXEL-NWA-SERIES_v1-4-2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-NWA-SERIES
# Produced by pysmi-0.3.4 at Wed May  1 15:51:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PhysAddress, = mibBuilder.importSymbols("RFC1155-SMI", "PhysAddress")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Bits, iso, Counter64, TimeTicks, NotificationType, Gauge32, Counter32, Unsigned32, IpAddress, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Bits", "iso", "Counter64", "TimeTicks", "NotificationType", "Gauge32", "Counter32", "Unsigned32", "IpAddress", "MibIdentifier")
RowStatus, TruthValue, TextualConvention, RowPointer, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "TextualConvention", "RowPointer", "DateAndTime", "DisplayString")
class DisplayString(OctetString):
    pass

zyxel = MibIdentifier((1, 3, 6, 1, 4, 1, 890))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1))
proWireless = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9))
pwCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 1))
pwTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2))
pwStations = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 3))
pwRogueAPDetect = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 4))
pwWlanControl = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 5))
pwWlanStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 6))
nwaSeries = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100))
nwa3100 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 1))
nwa3500 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 2))
nwa3160 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 3))
nwa3163 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 4))
nwa3550 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 5))
nwa3165 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 6))
nwa1100 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 7))
nwa3166 = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 100, 8))
pwSwVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwSwVersion.setStatus('current')
if mibBuilder.loadTexts: pwSwVersion.setDescription('The current software version.')
pwCfgVersion = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCfgVersion.setStatus('mandatory')
if mibBuilder.loadTexts: pwCfgVersion.setDescription('The current WLAN configuration version.')
pwTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpServer.setStatus('mandatory')
if mibBuilder.loadTexts: pwTftpServer.setDescription('TFTP download server IP Address.')
pwTftpFileName = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpFileName.setStatus('mandatory')
if mibBuilder.loadTexts: pwTftpFileName.setDescription('TFTP file name in TFTP server.')
pwTftpFileType = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("software", 1), ("romfile", 2), ("textconfig", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpFileType.setStatus('mandatory')
if mibBuilder.loadTexts: pwTftpFileType.setDescription('File type in TFTP server.')
pwTftpOpStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("idle", 0), ("inprogress", 1), ("failed", 2), ("success", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwTftpOpStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pwTftpOpStatus.setDescription('TFTP Operation Status.')
pwTftpOpCommand = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("upload", 1), ("download", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTftpOpCommand.setStatus('mandatory')
if mibBuilder.loadTexts: pwTftpOpCommand.setDescription('TFTP Operation Command.')
pwSystemReboot = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("running", 0), ("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwSystemReboot.setStatus('mandatory')
if mibBuilder.loadTexts: pwSystemReboot.setDescription('System Reboot.')
pwAutoCfgMessage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwAutoCfgMessage.setStatus('mandatory')
if mibBuilder.loadTexts: pwAutoCfgMessage.setDescription('The last error massage of Auto Configuration process.')
pwCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCPUUsage.setStatus('current')
if mibBuilder.loadTexts: pwCPUUsage.setDescription('Display the CPU usage information')
pwMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: pwMemoryUsage.setDescription('Display the memory usage information')
pwSystemCountry = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwSystemCountry.setStatus('current')
if mibBuilder.loadTexts: pwSystemCountry.setDescription('The country of wlan')
pwPassword = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: pwPassword.setStatus('mandatory')
if mibBuilder.loadTexts: pwPassword.setDescription('Change system password.')
pwStationTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2), )
if mibBuilder.loadTexts: pwStationTable.setStatus('current')
if mibBuilder.loadTexts: pwStationTable.setDescription('This table lists the associated stations.')
pwStationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1), ).setIndexNames((0, "ZYXEL-NWA-SERIES_v1-4-2", "pwStationIndex"))
if mibBuilder.loadTexts: pwStationEntry.setStatus('current')
if mibBuilder.loadTexts: pwStationEntry.setDescription('An entry describing the station information.')
pwStationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: pwStationIndex.setStatus('current')
if mibBuilder.loadTexts: pwStationIndex.setDescription('Index of stations.')
pwStationMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 2), OctetString().clone('public')).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwStationMacAddress.setStatus('current')
if mibBuilder.loadTexts: pwStationMacAddress.setDescription('The MAC Addresss of the station.')
pwStationAssociateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwStationAssociateTime.setStatus('current')
if mibBuilder.loadTexts: pwStationAssociateTime.setDescription('The associated time of the station.')
pwStationSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwStationSSID.setStatus('current')
if mibBuilder.loadTexts: pwStationSSID.setDescription('The associated ssid.')
pwStationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 3, 2, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwStationStatus.setStatus('current')
if mibBuilder.loadTexts: pwStationStatus.setDescription('Controls and reflects the status of rows in this the row is active.')
pwRogueAPPeriodTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 1), )
if mibBuilder.loadTexts: pwRogueAPPeriodTable.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPPeriodTable.setDescription('This table lists the rogue AP Period Detection.')
pwRogueAPPeriodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pwRogueAPPeriodEntry.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPPeriodEntry.setDescription('An entry describing the control for rogue AP Period Detection.')
pwRogueAPPeriodDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwRogueAPPeriodDetection.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPPeriodDetection.setDescription('Control rogue AP Period Detection. enable(1) or disable(0).')
pwRogueAPPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwRogueAPPeriod.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPPeriod.setDescription('Rogue AP period time. 10~60(min).')
pwRogueAPExpirationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwRogueAPExpirationTime.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPExpirationTime.setDescription('Rogue AP Expiration time. 30~180(min).')
pwRogueAPDetectTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2), )
if mibBuilder.loadTexts: pwRogueAPDetectTable.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPDetectTable.setDescription('This table lists the neighbor AP.')
pwRogueAPDetectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1), ).setIndexNames((0, "ZYXEL-NWA-SERIES_v1-4-2", "pwRogueAPIndex"))
if mibBuilder.loadTexts: pwRogueAPDetectEntry.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPDetectEntry.setDescription('An entry describing the neighbor AP information.')
pwRogueAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwRogueAPIndex.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPIndex.setDescription('The index of neighbor AP table.')
pwRogueAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwRogueAPSSID.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPSSID.setDescription("The SSID. If SSID of the AP is hidden, it will be displayed as '(Hidden SSID)'.")
pwRogueAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwRogueAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPMacAddress.setDescription('The MAC address.')
pwRogueAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwRogueAPChannel.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPChannel.setDescription('The frequency channel ID.')
pwRogueAPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwRogueAPSecurity.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPSecurity.setDescription('The data security mode.')
pwRogueAPSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwRogueAPSignal.setStatus('current')
if mibBuilder.loadTexts: pwRogueAPSignal.setDescription('The data signal.')
pwFriendlyAPTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3), )
if mibBuilder.loadTexts: pwFriendlyAPTable.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPTable.setDescription('This table lists the neighbor Friendly AP.')
pwFriendlyAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1), ).setIndexNames((0, "ZYXEL-NWA-SERIES_v1-4-2", "pwFriendlyAPIndex"))
if mibBuilder.loadTexts: pwFriendlyAPEntry.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPEntry.setDescription('An entry describing the neighbor Friendly AP information.')
pwFriendlyAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwFriendlyAPIndex.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPIndex.setDescription('The index of neighbor friendly AP table.')
pwFriendlyAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwFriendlyAPSSID.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPSSID.setDescription("The SSID. If SSID of the friendly AP is hidden, it will be displayed as '(Hidden SSID)'.")
pwFriendlyAPMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwFriendlyAPMacAddress.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPMacAddress.setDescription('The friendly AP MAC address. When setting this item, a new entry of frienly AP will be added.')
pwFriendlyAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwFriendlyAPChannel.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPChannel.setDescription('The frequency channel ID.')
pwFriendlyAPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwFriendlyAPSecurity.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPSecurity.setDescription('The data security mode.')
pwFriendlyAPSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwFriendlyAPSignal.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPSignal.setDescription('The data signal.')
pwFriendlyAPDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 4, 3, 1, 7), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwFriendlyAPDescription.setStatus('current')
if mibBuilder.loadTexts: pwFriendlyAPDescription.setDescription('Description of friendly AP. When setting this item, the description field of relative entry will be updated')
pwWlanControlTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1), )
if mibBuilder.loadTexts: pwWlanControlTable.setStatus('current')
if mibBuilder.loadTexts: pwWlanControlTable.setDescription('This table lists WLAN control information. Use chipIndex as the index of each entry')
pwWlanControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pwWlanControlEntry.setStatus('current')
if mibBuilder.loadTexts: pwWlanControlEntry.setDescription('An entry describing WLAN control information for each chip.')
pwWlanMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7))).clone(namedValues=NamedValues(("mode_802_11b", 1), ("mode_802_11g", 2), ("mode_802_11bg", 3), ("mode_802_11a", 4), ("mode_802_11ng", 6), ("mode_802_11na", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwWlanMode.setStatus('current')
if mibBuilder.loadTexts: pwWlanMode.setDescription('The mode of wlan right now.')
pwWlanSupportedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwWlanSupportedChannel.setStatus('current')
if mibBuilder.loadTexts: pwWlanSupportedChannel.setDescription('The all channel supported by wlan')
pwWlanChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("channel-01_2412mhz", 1), ("channel-02_2417mhz", 2), ("channel-03_2422mhz", 3), ("channel-04_2427mhz", 4), ("channel-05_2432mhz", 5), ("channel-06_2437mhz", 6), ("channel-07_2442mhz", 7), ("channel-08_2447mhz", 8), ("channel-09_2452mhz", 9), ("channel-10_2457mhz", 10), ("channel-11_2462mhz", 11), ("channel-12_2467mhz", 12), ("channel-13_2472mhz", 13), ("channel-36_5180mhz", 36), ("channel-40_5200mhz", 40), ("channel-44_5220mhz", 44), ("channel-48_5240mhz", 48), ("channel-52_5260mhz", 52), ("channel-56_5280mhz", 56), ("channel-60_5300mhz", 60), ("channel-64_5320mhz", 64), ("channel-100_5500mhz", 100), ("channel-104_5520mhz", 104), ("channel-108_5540mhz", 108), ("channel-112_5560mhz", 112), ("channel-116_5580mhz", 116), ("channel-120_5600mhz", 120), ("channel-124_5620mhz", 124), ("channel-128_5640mhz", 128), ("channel-132_5660mhz", 132), ("channel-136_5680mhz", 136), ("channel-140_5700mhz", 140), ("channel-149_5745mhz", 149), ("channel-153_5765mhz", 153), ("channel-157_5785mhz", 157), ("channel-161_5805mhz", 161), ("channel-165_5825mhz", 165)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwWlanChannel.setStatus('current')
if mibBuilder.loadTexts: pwWlanChannel.setDescription('The current channel of wlan right now. When setting this parameter, the value should be a subset of all supported channel')
pwWlanTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 16))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("quarter", 4), ("eighth", 8), ("minimum", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwWlanTxPower.setStatus('current')
if mibBuilder.loadTexts: pwWlanTxPower.setDescription('To specify the RF transmission power.')
pwAutoChannelSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enble", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwAutoChannelSelection.setStatus('current')
if mibBuilder.loadTexts: pwAutoChannelSelection.setDescription('Enable/disable Auto Channel Selection.')
pwCurrentChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 36, 40, 44, 48, 52, 56, 60, 64, 100, 104, 108, 112, 116, 120, 124, 128, 132, 136, 140, 149, 153, 157, 161, 165))).clone(namedValues=NamedValues(("device_is_disable", 0), ("channel-01_2412mhz", 1), ("channel-02_2417mhz", 2), ("channel-03_2422mhz", 3), ("channel-04_2427mhz", 4), ("channel-05_2432mhz", 5), ("channel-06_2437mhz", 6), ("channel-07_2442mhz", 7), ("channel-08_2447mhz", 8), ("channel-09_2452mhz", 9), ("channel-10_2457mhz", 10), ("channel-11_2462mhz", 11), ("channel-12_2467mhz", 12), ("channel-13_2472mhz", 13), ("channel-36_5180mhz", 36), ("channel-40_5200mhz", 40), ("channel-44_5220mhz", 44), ("channel-48_5240mhz", 48), ("channel-52_5260mhz", 52), ("channel-56_5280mhz", 56), ("channel-60_5300mhz", 60), ("channel-64_5320mhz", 64), ("channel-100_5500mhz", 100), ("channel-104_5520mhz", 104), ("channel-108_5540mhz", 108), ("channel-112_5560mhz", 112), ("channel-116_5580mhz", 116), ("channel-120_5600mhz", 120), ("channel-124_5620mhz", 124), ("channel-128_5640mhz", 128), ("channel-132_5660mhz", 132), ("channel-136_5680mhz", 136), ("channel-140_5700mhz", 140), ("channel-149_5745mhz", 149), ("channel-153_5765mhz", 153), ("channel-157_5785mhz", 157), ("channel-161_5805mhz", 161), ("channel-165_5825mhz", 165)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwCurrentChannel.setStatus('current')
if mibBuilder.loadTexts: pwCurrentChannel.setDescription('Current Operating channel.')
pwStationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwStationCount.setStatus('current')
if mibBuilder.loadTexts: pwStationCount.setDescription('The total number of ssocited stations')
pwWlanSupportedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 5, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwWlanSupportedMode.setStatus('current')
if mibBuilder.loadTexts: pwWlanSupportedMode.setDescription('The all mode supported by wlan')
pwWlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1), )
if mibBuilder.loadTexts: pwWlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: pwWlanStatisticsTable.setDescription('This table lists WLAN statistics information. Use chipIndex as the index of each entry')
pwWlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: pwWlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: pwWlanStatisticsEntry.setDescription('An entry describing WLAN statistics information.')
pwDot11FailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11FailedCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11FailedCount.setDescription('This counter shall increment when an MSDU is not transmitted successfully due to the number of transmit attempts exceeding either the dot11ShortRetryLimit or dot11LongRetryLimit. ')
pwDot11RetryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11RetryCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11RetryCount.setDescription('This counter shall increment when an MSDU is successfully transmitted after one or more retransmissions.')
pwDot11ACKFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11ACKFailureCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11ACKFailureCount.setDescription('This counter shall increment when an ACK is not received when expected.')
pwDot11ReceivedFragmentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11ReceivedFragmentCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11ReceivedFragmentCount.setDescription('This counter shall be incremented for each successfully received MPDU of type Data or Management.')
pwDot11TransmittedFrameCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11TransmittedFrameCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11TransmittedFrameCount.setDescription('This counter shall increment for each successfully transmitted MSDU.')
pwDot11ReceivedPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11ReceivedPktCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11ReceivedPktCount.setDescription('This counter shall increment for each successfully received packets every five minutes.')
pwDot11TransmittedPktCount = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11TransmittedPktCount.setStatus('current')
if mibBuilder.loadTexts: pwDot11TransmittedPktCount.setDescription('This counter shall increment for each successfully transmitted packets every five minutes.')
pwDot11ReceptionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11ReceptionRate.setStatus('current')
if mibBuilder.loadTexts: pwDot11ReceptionRate.setDescription('Reception Rate in Byte per second.')
pwDot11TransmissionRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 9, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pwDot11TransmissionRate.setStatus('current')
if mibBuilder.loadTexts: pwDot11TransmissionRate.setDescription('Transmission Rate in Byte per second.')
pwTrapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1))
pwTrapVariables = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2))
pwTrapTypes = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3))
pwWirelessTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 1))
pwSecurityTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 2))
pwTFTPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 3))
pwTrapWirelessStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTrapWirelessStatus.setStatus('current')
if mibBuilder.loadTexts: pwTrapWirelessStatus.setDescription('Controls wireless group traps enable or disable.')
pwTrapSecurityStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTrapSecurityStatus.setStatus('current')
if mibBuilder.loadTexts: pwTrapSecurityStatus.setDescription('Controls security group traps enable or disable.')
pwTrapTFTPStatus = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pwTrapTFTPStatus.setStatus('current')
if mibBuilder.loadTexts: pwTrapTFTPStatus.setDescription('Controls TFTP group traps enable or disable.')
pwTrapGenericMessage = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pwTrapGenericMessage.setStatus('current')
if mibBuilder.loadTexts: pwTrapGenericMessage.setDescription('Provide generic information on traps.')
pwTrapMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pwTrapMACAddress.setStatus('current')
if mibBuilder.loadTexts: pwTrapMACAddress.setDescription('Represents MAC address of the device or the host which triggers the trap.')
pwTrapWlanSSID = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: pwTrapWlanSSID.setStatus('current')
if mibBuilder.loadTexts: pwTrapWlanSSID.setDescription('The SSID name which the wireless client associates.')
pwWlanStaAssociation = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 1, 1))
if mibBuilder.loadTexts: pwWlanStaAssociation.setStatus('current')
if mibBuilder.loadTexts: pwWlanStaAssociation.setDescription('Wireless client assocication notification.')
pwWlanStaDisassociation = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 1, 2))
if mibBuilder.loadTexts: pwWlanStaDisassociation.setStatus('current')
if mibBuilder.loadTexts: pwWlanStaDisassociation.setDescription('Wireless client disassocication notification.')
pwWlanStaAuthFail = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 2, 1))
if mibBuilder.loadTexts: pwWlanStaAuthFail.setStatus('current')
if mibBuilder.loadTexts: pwWlanStaAuthFail.setDescription('Wireless client authentication failed.')
pwTFTPStatus = NotificationType((1, 3, 6, 1, 4, 1, 890, 1, 9, 2, 3, 3, 1)).setObjects(("ZYXEL-NWA-SERIES_v1-4-2", "pwTrapGenericMessage"), ("ZYXEL-NWA-SERIES_v1-4-2", "pwTftpOpStatus"), ("ZYXEL-NWA-SERIES_v1-4-2", "pwTftpServer"), ("ZYXEL-NWA-SERIES_v1-4-2", "pwTftpFileName"), ("ZYXEL-NWA-SERIES_v1-4-2", "pwTftpFileType"), ("ZYXEL-NWA-SERIES_v1-4-2", "pwTftpOpCommand"))
if mibBuilder.loadTexts: pwTFTPStatus.setStatus('current')
if mibBuilder.loadTexts: pwTFTPStatus.setDescription('Send when TFTP operation completed, or stopped due to some reason. For example, timeout or wrong configuration.')
mibBuilder.exportSymbols("ZYXEL-NWA-SERIES_v1-4-2", pwAutoChannelSelection=pwAutoChannelSelection, pwTrapSecurityStatus=pwTrapSecurityStatus, nwa3163=nwa3163, nwaSeries=nwaSeries, pwFriendlyAPIndex=pwFriendlyAPIndex, pwTftpOpCommand=pwTftpOpCommand, pwRogueAPExpirationTime=pwRogueAPExpirationTime, pwTrapMACAddress=pwTrapMACAddress, pwWlanTxPower=pwWlanTxPower, pwDot11TransmittedFrameCount=pwDot11TransmittedFrameCount, pwSystemCountry=pwSystemCountry, pwTftpFileType=pwTftpFileType, pwStationMacAddress=pwStationMacAddress, DisplayString=DisplayString, pwTraps=pwTraps, pwTrapVariables=pwTrapVariables, pwTrapWlanSSID=pwTrapWlanSSID, pwRogueAPPeriodDetection=pwRogueAPPeriodDetection, pwPassword=pwPassword, pwCfgVersion=pwCfgVersion, pwTftpFileName=pwTftpFileName, pwWlanStaAuthFail=pwWlanStaAuthFail, nwa3166=nwa3166, pwSecurityTraps=pwSecurityTraps, pwFriendlyAPEntry=pwFriendlyAPEntry, proWireless=proWireless, pwWlanSupportedChannel=pwWlanSupportedChannel, pwRogueAPChannel=pwRogueAPChannel, pwStationCount=pwStationCount, pwStationStatus=pwStationStatus, pwFriendlyAPChannel=pwFriendlyAPChannel, pwRogueAPDetectEntry=pwRogueAPDetectEntry, pwRogueAPDetectTable=pwRogueAPDetectTable, pwDot11TransmissionRate=pwDot11TransmissionRate, pwFriendlyAPMacAddress=pwFriendlyAPMacAddress, pwWlanControlTable=pwWlanControlTable, pwFriendlyAPSecurity=pwFriendlyAPSecurity, pwWlanControl=pwWlanControl, pwMemoryUsage=pwMemoryUsage, pwDot11ReceptionRate=pwDot11ReceptionRate, pwDot11TransmittedPktCount=pwDot11TransmittedPktCount, pwStationEntry=pwStationEntry, pwWlanStaAssociation=pwWlanStaAssociation, pwWlanSupportedMode=pwWlanSupportedMode, pwTrapTypes=pwTrapTypes, pwSystemReboot=pwSystemReboot, nwa3165=nwa3165, pwRogueAPSSID=pwRogueAPSSID, pwFriendlyAPTable=pwFriendlyAPTable, pwWlanChannel=pwWlanChannel, pwRogueAPPeriod=pwRogueAPPeriod, pwTrapWirelessStatus=pwTrapWirelessStatus, nwa3160=nwa3160, pwCPUUsage=pwCPUUsage, pwTFTPStatus=pwTFTPStatus, pwDot11ReceivedFragmentCount=pwDot11ReceivedFragmentCount, pwTrapControl=pwTrapControl, pwFriendlyAPDescription=pwFriendlyAPDescription, pwCurrentChannel=pwCurrentChannel, pwSwVersion=pwSwVersion, pwRogueAPDetect=pwRogueAPDetect, nwa1100=nwa1100, pwStationSSID=pwStationSSID, pwRogueAPIndex=pwRogueAPIndex, pwWlanStatistics=pwWlanStatistics, pwDot11ACKFailureCount=pwDot11ACKFailureCount, pwFriendlyAPSignal=pwFriendlyAPSignal, pwWlanStaDisassociation=pwWlanStaDisassociation, products=products, pwWlanStatisticsEntry=pwWlanStatisticsEntry, pwWlanMode=pwWlanMode, pwWlanControlEntry=pwWlanControlEntry, pwDot11RetryCount=pwDot11RetryCount, pwTFTPTraps=pwTFTPTraps, zyxel=zyxel, pwWlanStatisticsTable=pwWlanStatisticsTable, pwStationTable=pwStationTable, pwStationIndex=pwStationIndex, pwDot11FailedCount=pwDot11FailedCount, nwa3550=nwa3550, pwRogueAPPeriodTable=pwRogueAPPeriodTable, nwa3100=nwa3100, pwCommon=pwCommon, pwTrapGenericMessage=pwTrapGenericMessage, nwa3500=nwa3500, pwRogueAPPeriodEntry=pwRogueAPPeriodEntry, pwRogueAPSecurity=pwRogueAPSecurity, pwFriendlyAPSSID=pwFriendlyAPSSID, pwTftpServer=pwTftpServer, pwAutoCfgMessage=pwAutoCfgMessage, pwStations=pwStations, pwWirelessTraps=pwWirelessTraps, pwRogueAPMacAddress=pwRogueAPMacAddress, pwStationAssociateTime=pwStationAssociateTime, pwTftpOpStatus=pwTftpOpStatus, pwDot11ReceivedPktCount=pwDot11ReceivedPktCount, pwTrapTFTPStatus=pwTrapTFTPStatus, pwRogueAPSignal=pwRogueAPSignal)
