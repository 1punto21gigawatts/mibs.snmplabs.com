#
# PySNMP MIB module ZHONE-COM-IP-DHCP-SERVER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-COM-IP-DHCP-SERVER-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
sysObjectID, = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
TimeTicks, Unsigned32, ModuleIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, Counter32, iso, Gauge32, ObjectIdentity, IpAddress, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "ModuleIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "Counter32", "iso", "Gauge32", "ObjectIdentity", "IpAddress", "Bits", "MibIdentifier")
TruthValue, PhysAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "PhysAddress", "DisplayString", "TextualConvention")
cardPostResults, cardMfgSerialNumber = mibBuilder.importSymbols("ZHONE-CARD-RESOURCES-MIB", "cardPostResults", "cardMfgSerialNumber")
rdEntry, ZhoneRDIndex = mibBuilder.importSymbols("ZHONE-COM-IP-RD-MIB", "rdEntry", "ZhoneRDIndex")
ipIfVpi, ipIfVci, ipIfAddr, ipIfLgId = mibBuilder.importSymbols("ZHONE-COM-IP-REC-MIB", "ipIfVpi", "ipIfVci", "ipIfAddr", "ipIfLgId")
pportNumber, subPortNumber, zhoneShelfNumber, zhoneSlotNumber = mibBuilder.importSymbols("ZHONE-INTERFACE-TRANSLATION-MIB", "pportNumber", "subPortNumber", "zhoneShelfNumber", "zhoneSlotNumber")
zhoneSysCardSwSpecificVers, = mibBuilder.importSymbols("ZHONE-SYSTEM-MIB", "zhoneSysCardSwSpecificVers")
zhoneModules, zhoneIp = mibBuilder.importSymbols("Zhone", "zhoneModules", "zhoneIp")
ZhoneShelfValue, ZhoneRowStatus, ZhoneAdminString, ZhoneFileName, ZhoneSlotValue = mibBuilder.importSymbols("Zhone-TC", "ZhoneShelfValue", "ZhoneRowStatus", "ZhoneAdminString", "ZhoneFileName", "ZhoneSlotValue")
comIpDhcpServer = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 6, 61))
comIpDhcpServer.setRevisions(('2003-09-10 10:47', '2003-04-18 10:10', '2000-12-03 14:00', '2000-11-28 15:00', '2000-12-05 12:11', '2000-10-02 12:05', '2000-09-15 16:50', '2000-09-11 15:41',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: comIpDhcpServer.setRevisionsDescriptions(('V01.06.00 - add Ip Trap.', 'V01.05.00 - Added subnetgroup and stickyaddr in order to support the point-to-multipoint feature.', 'V01.04.00 - Add dhcpTrapZhoneCpeSysObjectID and change cardSwCurrentVersion to zhoneSysCardSwSpecificVers in cpe detect trap.', 'V01.03.00 - Deprecate dhcpServerConfigurationVersion and add replacement dhcpServerRestart. Remove DEFVALs for all read-write fields.', 'V01.02.01 - Add ZHONE markup', 'V01.02.00 - Modified dhcpTrapZhoneCpeDetected', 'V01.01.00 - Added dhcpTrapZhoneCpeDetected trap Added enumeration to dhcpLeaseFlags', 'V01.00.00 - Initial Release',))
if mibBuilder.loadTexts: comIpDhcpServer.setLastUpdated('200309101500Z')
if mibBuilder.loadTexts: comIpDhcpServer.setOrganization('Zhone Technologies, Inc.')
if mibBuilder.loadTexts: comIpDhcpServer.setContactInfo(' Postal: Zhone Technologies, Inc. @ Zhone Way 7001 Oakport Street Oakland, CA 94621 USA Toll-Free: +1 877-ZHONE20 (+1 877-946-6320) Tel: +1-510-777-7000 Fax: +1-510-777-7001 E-mail: support@zhone.com')
if mibBuilder.loadTexts: comIpDhcpServer.setDescription('DHCP Server MIB using SNMPv2 SMI.')
dhcpServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11))
if mibBuilder.loadTexts: dhcpServer.setStatus('current')
if mibBuilder.loadTexts: dhcpServer.setDescription('Zhone DHCP Server Configuration and Monitoring MIB')
dhcpServerTraps = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 0))
if mibBuilder.loadTexts: dhcpServerTraps.setStatus('current')
if mibBuilder.loadTexts: dhcpServerTraps.setDescription('Traps which apply to the DHCP Server.')
dhcpTrapZhoneCpeDetected = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 0, 1)).setObjects(("ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneShelfNumber"), ("ZHONE-INTERFACE-TRANSLATION-MIB", "zhoneSlotNumber"), ("ZHONE-INTERFACE-TRANSLATION-MIB", "pportNumber"), ("ZHONE-INTERFACE-TRANSLATION-MIB", "subPortNumber"), ("ZHONE-COM-IP-REC-MIB", "ipIfVpi"), ("ZHONE-COM-IP-REC-MIB", "ipIfVci"), ("ZHONE-COM-IP-REC-MIB", "ipIfLgId"), ("ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpTrapZhoneCpeSysObjectID"), ("ZHONE-CARD-RESOURCES-MIB", "cardMfgSerialNumber"), ("ZHONE-CARD-RESOURCES-MIB", "cardPostResults"), ("ZHONE-SYSTEM-MIB", "zhoneSysCardSwSpecificVers"), ("ZHONE-COM-IP-REC-MIB", "ipIfAddr"))
if mibBuilder.loadTexts: dhcpTrapZhoneCpeDetected.setStatus('current')
if mibBuilder.loadTexts: dhcpTrapZhoneCpeDetected.setDescription('Trap sent whenever an IP address is being offerred to a Zhone CPE device.')
dhcpTrapZhoneCpeSysObjectID = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 0, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dhcpTrapZhoneCpeSysObjectID.setStatus('current')
if mibBuilder.loadTexts: dhcpTrapZhoneCpeSysObjectID.setDescription('System Object ID of attached Zhone CPE device')
dhcpTrapZhoneIpAddressUpdate = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 0, 3)).setObjects(("ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpTrapZhoneIpInterfaceIndex"), ("ZHONE-COM-IP-REC-MIB", "ipIfAddr"))
if mibBuilder.loadTexts: dhcpTrapZhoneIpAddressUpdate.setStatus('current')
if mibBuilder.loadTexts: dhcpTrapZhoneIpAddressUpdate.setDescription('Trap sent whenever the dhcp ip addresses are assigned or modified.')
dhcpTrapZhoneIpInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 0, 4), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dhcpTrapZhoneIpInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpTrapZhoneIpInterfaceIndex.setDescription('Interface Index of the ip-interface-record which contains the updated ip address. This is sent within the dhcpTrapZhoneIpAddressUpdate trap.')
dhcpServerDefaultLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDefaultLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDefaultLeaseTime.setDescription('The global default time in seconds that will be assigned to a lease if the client requesting the lease does not ask for a specific expiration time. Default value is 43200 seconds.')
dhcpServerDefaultMinLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDefaultMinLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDefaultMinLeaseTime.setDescription('The global minimum expiration time in seconds that will be assigned to a lease regardless of the value specified by a client. Default value is 0')
dhcpServerDefaultMaxLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDefaultMaxLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDefaultMaxLeaseTime.setDescription('The global maximum time in seconds that will be assigned to a lease regardless of the value specified by a client. Default value is 86400 seconds.')
dhcpServerDefaultReserveStart = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDefaultReserveStart.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDefaultReserveStart.setDescription("The default number of IP addresses at the start of a subnet's IP address space that are reserved by the DHCP server. To override this default a specific subnet rule must be created for each subnet that needs to be handled differently. Default value is 5")
dhcpServerDefaultReserveEnd = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDefaultReserveEnd.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDefaultReserveEnd.setDescription("The default number of IP addresses at the end of a subnet's IP address space that are reserved by the DHCP server. To override this default a specific subnet rule must be created for each subnet that needs to be handled differently. Default value is 5")
dhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6), )
if mibBuilder.loadTexts: dhcpServerLeaseTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseTable.setDescription('Provides access to the DHCP Server Client Lease Database')
dhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1), ).setIndexNames((0, "ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpLeaseDomain"), (0, "ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpLeaseIpAddress"))
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setDescription('Required server lease fields: dhcpLeaseDomain, dhcpLeaseIpAddres, dhcpLeaseStarts, dhcpLeaseEnds Plus at lease one of: dhcpLeaseHardwareAddress, dhcpLeaseClientId ')
dhcpLeaseDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 1), ZhoneRDIndex())
if mibBuilder.loadTexts: dhcpLeaseDomain.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseDomain.setDescription('Routing domain of the client the lease was created for.')
dhcpLeaseIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 2), IpAddress())
if mibBuilder.loadTexts: dhcpLeaseIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseIpAddress.setDescription('IP Address of this lease.')
dhcpLeaseStarts = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseStarts.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseStarts.setDescription('Time in GMT that the lease was assigned.')
dhcpLeaseEnds = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseEnds.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseEnds.setDescription('Time in GMT that the lease will expire.')
dhcpLeaseHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 5), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseHardwareAddress.setDescription('The MAC address of the network interface that was used to acquire the lease.')
dhcpLeaseFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 6), Bits().clone(namedValues=NamedValues(("static", 0), ("bootp", 1), ("unused2", 2), ("unused3", 3), ("abandoned", 4), ("zhoneCPE", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseFlags.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseFlags.setDescription('Lease flags currently defined as follows. #define STATIC_LEASE 1 #define BOOTP_LEASE 2 #define ABANDONED_LEASE 16 #define ZHONE_CPE 32 The default value for this object is 0 (no bits up). ')
dhcpLeaseClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseClientId.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseClientId.setDescription('Client identifier (if any) the client used to acquire its address. The default value for this object is an empty octet string. ')
dhcpLeaseClientHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseClientHostname.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseClientHostname.setDescription('Client hostname (if any) the client used to acquire its address. The default value for this object is an empty string. ')
dhcpLeaseHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseHostname.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseHostname.setDescription('Client hostname (if any) the client used to acquire its address. The default value for this object is an empty string. ')
dhcpLeaseDDNSFwdName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseDDNSFwdName.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseDDNSFwdName.setDescription('Dynamic DNS forward host name. Not currently used. The default value for this object is an empty string.')
dhcpLeaseDDNSRevName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseDDNSRevName.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseDDNSRevName.setDescription('Dynamic DNS reverse host name. Not currently used. The default value for this object is an empty string.')
dhcpLeaseRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 6, 1, 12), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpLeaseRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseRowStatus.setDescription('Used to create and/or remove rows from this table.')
dhcpServerNextGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerNextGroupIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerNextGroupIndex.setDescription('This object will return the next valid value for dhcpGroupIndex. This is used to manage the indices for the dhcpServerGroupTable. Upon creating a row in the dhcpServerGroupTable, the user must first obtain the next index by performing a get on this object.')
dhcpServerGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8), )
if mibBuilder.loadTexts: dhcpServerGroupTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGroupTable.setDescription('Provides access to the DHCP Server Group object configurations.')
dhcpServerGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1), ).setIndexNames((0, "ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpGroupIndex"))
if mibBuilder.loadTexts: dhcpServerGroupEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGroupEntry.setDescription('Required group object fields: dhcpGroupIndex, dhcpGroupName, dhcpGroupDomain, Plus one of: dhcpGroupVendorMatchString, dhcpGroupClientMatchString The value for dhcpGroupIndex must be obtained by performing a GET on dhcpServerNextGroupIndex.')
dhcpGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dhcpGroupIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupIndex.setDescription('Table Index.')
dhcpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 2), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupName.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupName.setDescription('Group object name. The default value for this object is the empty string.')
dhcpGroupDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 3), ZhoneRDIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupDomain.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupDomain.setDescription('Routing domain that this group object applies to.')
dhcpGroupVendorMatchString = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupVendorMatchString.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupVendorMatchString.setDescription('Vendor class identifier match string that is used to determine which clients should be placed in this group. The default value for this object is an empty octet string. ')
dhcpGroupVendorMatchOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupVendorMatchOffset.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupVendorMatchOffset.setDescription('Offset into the client passed vendor class identifier string where the string match should start.')
dhcpGroupVendorMatchLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupVendorMatchLength.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupVendorMatchLength.setDescription('Length of the vendor class identifier substring to match. A value of -1 indicates that the entire string starting at the match offset value should be matched.')
dhcpGroupClientMatchString = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupClientMatchString.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupClientMatchString.setDescription('Client identifier match string that is used to determine which clients should be placed in this group. The default value for this object is an empty octet string.')
dhcpGroupClientMatchOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupClientMatchOffset.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupClientMatchOffset.setDescription('Offset into the client passed client identifier string where the string match should start.')
dhcpGroupClientMatchLength = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 255)).clone(-1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupClientMatchLength.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupClientMatchLength.setDescription('Length of the client identifier substring to match. A value of -1 indicates that the entire string starting at the match offset value should be matched.')
dhcpGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 8, 1, 10), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupRowStatus.setDescription('Used to create and/or remove rows from this table.')
dhcpServerGroupOptionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9), )
if mibBuilder.loadTexts: dhcpServerGroupOptionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGroupOptionTable.setDescription('DHCP Server Group Object Options')
dhcpServerGroupOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1), )
dhcpServerGroupEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpServerGroupOptionEntry"))
dhcpServerGroupOptionEntry.setIndexNames(*dhcpServerGroupEntry.getIndexNames())
if mibBuilder.loadTexts: dhcpServerGroupOptionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGroupOptionEntry.setDescription('All fields in this table are optional.')
dhcpGroupOptionDefaultLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionDefaultLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionDefaultLeaseTime.setDescription('The default time in seconds that will be assigned to a lease if the client requesting the lease does not ask for a specific expiration time. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpGroupOptionMinLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionMinLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionMinLeaseTime.setDescription('The minimum expiration time in seconds that will be assigned to a lease regardless of the value specified by a client. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpGroupOptionMaxLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionMaxLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionMaxLeaseTime.setDescription('The maximum time in seconds that will be assigned to a lease regardless of the value specified by a client. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpGroupOptionBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 4), ZhoneFileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionBootFile.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionBootFile.setDescription('Name of the initial boot file which is to be loaded by the client. The filename should be a filename recognizable to whatever file transfer protocol the client can be expected to use to load the file. The default value for this object is an empty string.')
dhcpGroupOptionBootServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionBootServer.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionBootServer.setDescription('IP Address of the server from which the initial boot file (specified in the BootFile option) is to be loaded. If this IP address is specified as 0.0.0.0 then primary interface address of the DHCP Server is used. Default value is 0.0.0.0')
dhcpGroupOptionDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionDefaultRouter.setDescription("IP Address of the client's default gateway. Default value is 0.0.0.0")
dhcpGroupOptionPrimaryNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionPrimaryNameServer.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionPrimaryNameServer.setDescription('IP Address of the primary domain name server that the client should use for DNS resolution. Default value is 0.0.0.0')
dhcpGroupOptionSecondaryNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionSecondaryNameServer.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionSecondaryNameServer.setDescription('IP Address of the secondary domain name server that the client should use for DNS resolution. Default value is 0.0.0.0')
dhcpGroupOptionDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 9, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpGroupOptionDomainName.setStatus('current')
if mibBuilder.loadTexts: dhcpGroupOptionDomainName.setDescription('The default domain name that the client should use when resolving hostnames via DNS. The default value for this object is an empty string.')
dhcpServerNextSubnetIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerNextSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerNextSubnetIndex.setDescription('This object will return the next valid value for dhcpSubnetIndex. This is used to manage the indices for the dhcpServerSubnetTable. Upon creating a row in the dhcpServerSubnetTable, the user must first obtain the next index by performing a get on this object.')
dhcpServerSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11), )
if mibBuilder.loadTexts: dhcpServerSubnetTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerSubnetTable.setDescription('Provides access to the DHCP Server Subnet object configurations.')
dhcpServerSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1), ).setIndexNames((0, "ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpSubnetIndex"))
if mibBuilder.loadTexts: dhcpServerSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerSubnetEntry.setDescription('Required subnet object fields: dhcpSubnetIndex, dhcpSubnetNetwork, dhcpSubnetNetmask, dhcpSubnetDomain, dhcpSubnetRange1Start, dhcpSubnetRange1End. The value for dhcpSubnetIndex must be obtained by performing a GET on dhcpServerNextSubnetIndex.')
dhcpSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dhcpSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetIndex.setDescription('Table Index.')
dhcpSubnetNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetNetwork.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetNetwork.setDescription('Network address of this subnet object.')
dhcpSubnetNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetNetmask.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetNetmask.setDescription('Network mask of this subnet object.')
dhcpSubnetDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 4), ZhoneRDIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetDomain.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetDomain.setDescription('Routing domain that this subnet object applies to.')
dhcpSubnetRange1Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange1Start.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange1Start.setDescription('Starting IP address of the first address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange1End = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange1End.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange1End.setDescription('Last IP address of the first address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange2Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange2Start.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange2Start.setDescription('Starting IP address of the second address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange2End = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange2End.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange2End.setDescription('Last IP address of the second address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange3Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange3Start.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange3Start.setDescription('Starting IP address of the third address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange3End = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 10), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange3End.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange3End.setDescription('Last IP address of the third address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange4Start = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 11), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange4Start.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange4Start.setDescription('Starting IP address of the fourth address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRange4End = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 12), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRange4End.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRange4End.setDescription('Last IP address of the fourth address pool in this subnet. If either the start or end range has a value of 0 then the entire address pool is ignored.')
dhcpSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 13), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetRowStatus.setDescription('Used to create and/or remove rows from this table.')
dhcpSubnetGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 14), Integer32().clone(0)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetGroup2.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetGroup2.setDescription('A number which indicates which DHCP subnet group this pool is a member of. A value of 0 ( default) indicates not a member of any group.')
dhcpStickyAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 15), TruthValue().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpStickyAddr.setStatus('current')
if mibBuilder.loadTexts: dhcpStickyAddr.setDescription('If true we will attempt to hand out the same IP address to the same host, when possible based on HW address. Default value is TRUE for backwards compatability.')
dhcpSubnetExternalServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 16), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetExternalServer.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetExternalServer.setDescription('Non-null IP address value indicates use of external DHCP server instead of internal for this subnet.')
dhcpSubnetExternalServerAlt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 11, 1, 17), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpSubnetExternalServerAlt.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetExternalServerAlt.setDescription('Non-null IP address value indicates use of alternate external DHCP server.')
dhcpServerSubnetOptionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12), )
if mibBuilder.loadTexts: dhcpServerSubnetOptionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerSubnetOptionTable.setDescription('DHCP Server Subnet Object Options')
dhcpServerSubnetOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1), )
dhcpServerSubnetEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpServerSubnetOptionEntry"))
dhcpServerSubnetOptionEntry.setIndexNames(*dhcpServerSubnetEntry.getIndexNames())
if mibBuilder.loadTexts: dhcpServerSubnetOptionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerSubnetOptionEntry.setDescription('All fields in this table are optional.')
dhcpSubnetOptionDefaultLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionDefaultLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionDefaultLeaseTime.setDescription('The default time in seconds that will be assigned to a lease if the client requesting the lease does not ask for a specific expiration time. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpSubnetOptionMinLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionMinLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionMinLeaseTime.setDescription('The minimum expiration time in seconds that will be assigned to a lease regardless of the value specified by a client. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpSubnetOptionMaxLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionMaxLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionMaxLeaseTime.setDescription('The maximum time in seconds that will be assigned to a lease regardless of the value specified by a client. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpSubnetOptionBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 4), ZhoneFileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionBootFile.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionBootFile.setDescription('Name of the initial boot file which is to be loaded by the client. The filename should be a filename recognizable to whatever file transfer protocol the client can be expected to use to load the file. The default value for this object is an empty string.')
dhcpSubnetOptionBootServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionBootServer.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionBootServer.setDescription("IP Address of the server from which the initial boot file (specified in the BootFile option) is to be loaded. If this IP address is specified as 0.0.0.0 then the DHCP Server's address is used. Default value is 0.0.0.0")
dhcpSubnetOptionDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionDefaultRouter.setDescription("IP Address of the client's default gateway. Default value is 0.0.0.0")
dhcpSubnetOptionPrimaryNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionPrimaryNameServer.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionPrimaryNameServer.setDescription('IP Address of the primary domain name server that the client should use for DNS resolution. Default value is 0.0.0.0')
dhcpSubnetOptionSecondaryNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionSecondaryNameServer.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionSecondaryNameServer.setDescription('IP Address of the secondary domain name server that the client should use for DNS resolution. Default value is 0.0.0.0')
dhcpSubnetOptionDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 12, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSubnetOptionDomainName.setStatus('current')
if mibBuilder.loadTexts: dhcpSubnetOptionDomainName.setDescription('The default domain name that the client should use when resolving hostnames via DNS. The default value for this object is an empty string.')
dhcpServerNextHostIndex = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpServerNextHostIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpServerNextHostIndex.setDescription('This object will return the next valid value for dhcpHostIndex. This is used to manage the indices for the dhcpServerHostTable. Upon creating a row in the dhcpServerHostTable, the user must first obtain the next index by performing a get on this object.')
dhcpServerHostTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14), )
if mibBuilder.loadTexts: dhcpServerHostTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerHostTable.setDescription('Provides access to the DHCP Server Host object configurations.')
dhcpServerHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1), ).setIndexNames((0, "ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpHostIndex"))
if mibBuilder.loadTexts: dhcpServerHostEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerHostEntry.setDescription('Required host object fields: dhcpHostIndex, dhcpHostDomain, Plus one of: dhcpHostHardwareAddress, dhcpHostClientId The value for dhcpHostIndex must be obtained by performing a GET on dhcpServerNextHostIndex.')
dhcpHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: dhcpHostIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpHostIndex.setDescription('Table Index.')
dhcpHostHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 2), ZhoneAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostHostname.setStatus('current')
if mibBuilder.loadTexts: dhcpHostHostname.setDescription('Hostname for this client. This may or may not be fully qualified with the local domain name but it is preferable to use the dhcpHostOptionDomainName option to specify the domain name. The default value for this field is an empty string. ')
dhcpHostDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 3), ZhoneRDIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostDomain.setStatus('current')
if mibBuilder.loadTexts: dhcpHostDomain.setDescription('Routing domain that this host object applies to.')
dhcpHostHardwareAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 4), PhysAddress().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="0000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostHardwareAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpHostHardwareAddress.setDescription('Hardware address of the client that matches this host object. If the dhcpHostClientId field is specified then this field is ignored. However, at least one of these fields must be configured per host object. ')
dhcpHostClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostClientId.setStatus('current')
if mibBuilder.loadTexts: dhcpHostClientId.setDescription('DHCP client identifier of the client that matches this host object. If this field is specified then the dhcpHostHardwareAddress value is not used. However, at least one of these fields must be configured per host object. The default value for this object is an empty octet string.')
dhcpHostIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 6), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostIpAddress1.setStatus('current')
if mibBuilder.loadTexts: dhcpHostIpAddress1.setDescription('Fixed IP address that should be assigned to this client.')
dhcpHostIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostIpAddress2.setStatus('current')
if mibBuilder.loadTexts: dhcpHostIpAddress2.setDescription('Fixed IP address that should be assigned to this client.')
dhcpHostIpAddress3 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 8), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostIpAddress3.setStatus('current')
if mibBuilder.loadTexts: dhcpHostIpAddress3.setDescription('Fixed IP address that should be assigned to this client.')
dhcpHostIpAddress4 = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 9), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostIpAddress4.setStatus('current')
if mibBuilder.loadTexts: dhcpHostIpAddress4.setDescription('Fixed IP address that should be assigned to this client.')
dhcpHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 14, 1, 10), ZhoneRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpHostRowStatus.setDescription('Used to create and/or remove rows from this table.')
dhcpServerHostOptionTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15), )
if mibBuilder.loadTexts: dhcpServerHostOptionTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerHostOptionTable.setDescription('DHCP Server Host Object Options')
dhcpServerHostOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1), )
dhcpServerHostEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpServerHostOptionEntry"))
dhcpServerHostOptionEntry.setIndexNames(*dhcpServerHostEntry.getIndexNames())
if mibBuilder.loadTexts: dhcpServerHostOptionEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerHostOptionEntry.setDescription('All fields in this table are optional.')
dhcpHostOptionDefaultLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionDefaultLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionDefaultLeaseTime.setDescription('The default time in seconds that will be assigned to a lease if the client requesting the lease does not ask for a specific expiration time. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpHostOptionMinLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionMinLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionMinLeaseTime.setDescription('The minimum expiration time in seconds that will be assigned to a lease regardless of the value specified by a client. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpHostOptionMaxLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionMaxLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionMaxLeaseTime.setDescription('The maximum time in seconds that will be assigned to a lease regardless of the value specified by a client. A value of -1 indicates that this field should be ignored. Default value is -1 seconds.')
dhcpHostOptionBootFile = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 4), ZhoneFileName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionBootFile.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionBootFile.setDescription('Name of the initial boot file which is to be loaded by the client. The filename should be a filename recognizable to whatever file transfer protocol the client can be expected to use to load the file. The default value for this object is an empty string.')
dhcpHostOptionBootServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionBootServer.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionBootServer.setDescription("IP Address of the server from which the initial boot file (specified in the BootFile option) is to be loaded. If this IP address is specified as 0.0.0.0 then the DHCP Server's address is used. Default value is 0.0.0.0")
dhcpHostOptionDefaultRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionDefaultRouter.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionDefaultRouter.setDescription("IP Address of the client's default gateway. Default value is 0.0.0.0")
dhcpHostOptionPrimaryNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionPrimaryNameServer.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionPrimaryNameServer.setDescription('IP Address of the primary domain name server that the client should use for DNS resolution. Default value is 0.0.0.0')
dhcpHostOptionSecondaryNameServer = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionSecondaryNameServer.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionSecondaryNameServer.setDescription('IP Address of the secondary domain name server that the client should use for DNS resolution. Default value is 0.0.0.0')
dhcpHostOptionDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 15, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpHostOptionDomainName.setStatus('current')
if mibBuilder.loadTexts: dhcpHostOptionDomainName.setDescription('The default domain name that the client should use when resolving hostnames via DNS. The default value for this object is an empty string.')
dhcpServerStatistics = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16))
if mibBuilder.loadTexts: dhcpServerStatistics.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStatistics.setDescription('DHCP Server MIB statistic objects are all defined in this branch.')
if mibBuilder.loadTexts: dhcpServerStatistics.setReference('Based on IETF draft DHCP Server MIB. See: http://www.ietf.org/internet-drafts/draft-ietf-dhc-server-mib-04.txt')
serverSystem = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1))
if mibBuilder.loadTexts: serverSystem.setStatus('current')
if mibBuilder.loadTexts: serverSystem.setDescription('Group of objects that are related to the overall system.')
serverSystemDescr = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 1), ZhoneAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSystemDescr.setStatus('current')
if mibBuilder.loadTexts: serverSystemDescr.setDescription('A textual description of the server. This value should include the full name and version identification of the server. This string MUST contain only printable NVT ASCII characters.')
serverSystemObjectID = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverSystemObjectID.setStatus('current')
if mibBuilder.loadTexts: serverSystemObjectID.setDescription("The vendor's authoritative identification of the network management subsystem contained in this entity. This value is allocated within the SMI enterprise subtree (1.3.6.1.4.1) and provides an easy and unambiguous means for determining 'what kind of server' is being managed. For example, if vendor 'VeryBigServers, Inc.' is assigned the subtree 1.3.6.1.4.1.4242, it may assign the identifier 1.3.6.1.4.1.4242.1.1 to its `Hercules DHCP Server'.")
serverUptime = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverUptime.setStatus('current')
if mibBuilder.loadTexts: serverUptime.setDescription('The value of sysUpTime when the server started handling requests.')
serverActiveShelf = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 4), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverActiveShelf.setStatus('current')
if mibBuilder.loadTexts: serverActiveShelf.setDescription('The shelf ID of the active DHCP server.')
serverActiveSlot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 5), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverActiveSlot.setStatus('current')
if mibBuilder.loadTexts: serverActiveSlot.setDescription('The slot ID of the active DHCP server.')
serverStandbyShelf = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 6), ZhoneShelfValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStandbyShelf.setStatus('current')
if mibBuilder.loadTexts: serverStandbyShelf.setDescription('The shelf ID of the standby DHCP server.')
serverStandbySlot = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 1, 7), ZhoneSlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serverStandbySlot.setStatus('current')
if mibBuilder.loadTexts: serverStandbySlot.setDescription('The slot ID of the standby DHCP server.')
bootpCountersTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2), )
if mibBuilder.loadTexts: bootpCountersTable.setReference('Based on IETF draft DHCP Server MIB. See: http://www.ietf.org/internet-drafts/draft-ietf-dhc-server-mib-04.txt')
if mibBuilder.loadTexts: bootpCountersTable.setStatus('current')
if mibBuilder.loadTexts: bootpCountersTable.setDescription('Table indexed on routing domain of objects that count various BOOTP events.')
bootpCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2, 1), )
rdEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-SERVER-MIB", "bootpCountersEntry"))
bootpCountersEntry.setIndexNames(*rdEntry.getIndexNames())
if mibBuilder.loadTexts: bootpCountersEntry.setStatus('current')
if mibBuilder.loadTexts: bootpCountersEntry.setDescription('Group of objects that count various BOOTP events on a per routing domain basis.')
bootpCountRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpCountRequests.setStatus('current')
if mibBuilder.loadTexts: bootpCountRequests.setDescription('The number of packets received that contain a Message Type of 1 (BOOTREQUEST) in the first octet and do not contain option number 53 (DHCP Message Type) in the options.')
bootpCountInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpCountInvalids.setStatus('current')
if mibBuilder.loadTexts: bootpCountInvalids.setDescription('The number of packets received that do not contain a Message Type of 1 (BOOTREQUEST) in the first octet or are not valid BOOTP packets (e.g., too short, invalid field in packet header).')
bootpCountReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpCountReplies.setStatus('current')
if mibBuilder.loadTexts: bootpCountReplies.setDescription('The number of packets sent that contain a Message Type of 1 (BOOTREQUEST) in the first octet and do not contain option number 53 (DHCP Message Type) in the options.')
bootpCountDroppedUnknownClients = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpCountDroppedUnknownClients.setStatus('current')
if mibBuilder.loadTexts: bootpCountDroppedUnknownClients.setDescription('The number of BOOTP packets dropped due to the server not recognizing or not providing service to the hardware address received in the incoming packet.')
bootpCountDroppedNotServingSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootpCountDroppedNotServingSubnet.setStatus('current')
if mibBuilder.loadTexts: bootpCountDroppedNotServingSubnet.setDescription('The number of BOOTP packets dropped due to the server not being configured or not otherwise able to serve addresses on the subnet from which this message was received.')
dhcpCountersTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3), )
if mibBuilder.loadTexts: dhcpCountersTable.setReference('Based on IETF draft DHCP Server MIB. See: http://www.ietf.org/internet-drafts/draft-ietf-dhc-server-mib-04.txt')
if mibBuilder.loadTexts: dhcpCountersTable.setStatus('current')
if mibBuilder.loadTexts: dhcpCountersTable.setDescription('Table indexed on routing domain of objects that count various DHCP events.')
dhcpCountersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1), )
rdEntry.registerAugmentions(("ZHONE-COM-IP-DHCP-SERVER-MIB", "dhcpCountersEntry"))
dhcpCountersEntry.setIndexNames(*rdEntry.getIndexNames())
if mibBuilder.loadTexts: dhcpCountersEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpCountersEntry.setDescription('Group of objects that count various DHCP events on a per routing domain basis.')
dhcpCountDiscovers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountDiscovers.setStatus('current')
if mibBuilder.loadTexts: dhcpCountDiscovers.setDescription('The number of DHCPDISCOVER (option 53 with value 1) packets received.')
dhcpCountRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountRequests.setStatus('current')
if mibBuilder.loadTexts: dhcpCountRequests.setDescription('The number of DHCPREQUEST (option 53 with value 3) packets received.')
dhcpCountReleases = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountReleases.setStatus('current')
if mibBuilder.loadTexts: dhcpCountReleases.setDescription('The number of DHCPRELEASE (option 53 with value 7) packets received.')
dhcpCountDeclines = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountDeclines.setStatus('current')
if mibBuilder.loadTexts: dhcpCountDeclines.setDescription('The number of DHCPDECLINE (option 53 with value 4) packets received.')
dhcpCountInforms = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountInforms.setStatus('current')
if mibBuilder.loadTexts: dhcpCountInforms.setDescription('The number of DHCPINFORM (option 53 with value 8) packets received.')
dhcpCountInvalids = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountInvalids.setStatus('current')
if mibBuilder.loadTexts: dhcpCountInvalids.setDescription('The number of DHCP packets received whose DHCP message type (i.e., option number 53) is not understood or handled by the server.')
dhcpCountOffers = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountOffers.setStatus('current')
if mibBuilder.loadTexts: dhcpCountOffers.setDescription('The number of DHCPOFFER (option 53 with value 2) packets sent.')
dhcpCountAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountAcks.setStatus('current')
if mibBuilder.loadTexts: dhcpCountAcks.setDescription('The number of DHCPACK (option 53 with value 5) packets sent.')
dhcpCountNacks = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountNacks.setStatus('current')
if mibBuilder.loadTexts: dhcpCountNacks.setDescription('The number of DHCPNACK (option 53 with value 6) packets sent.')
dhcpCountDroppedUnknownClient = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountDroppedUnknownClient.setStatus('current')
if mibBuilder.loadTexts: dhcpCountDroppedUnknownClient.setDescription('The number of DHCP packets dropped due to the server not recognizing or not providing service to the client-id and/or hardware address received in the incoming packet.')
dhcpCountDroppedNotServingSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 16, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpCountDroppedNotServingSubnet.setStatus('current')
if mibBuilder.loadTexts: dhcpCountDroppedNotServingSubnet.setDescription('The number of DHCP packets dropped due to the server not being configured or not otherwise able to serve addresses on the subnet from which this message was received.')
dhcpServerConfigurationVersion = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerConfigurationVersion.setStatus('deprecated')
if mibBuilder.loadTexts: dhcpServerConfigurationVersion.setDescription('Version number of the current DHCP server configuration. If this value is changed the server will reload all configuration rules and reinitialize itself. Any configuration rules modified before this field is changed will not have any affect on the currently running DHCP server configuration.')
dhcpServerRestart = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 11, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerRestart.setStatus('current')
if mibBuilder.loadTexts: dhcpServerRestart.setDescription("If set to value 'true(1)' indicates that the server should restart by doing a complete reload of it's configuration. The value of this field will be reset to 'false(2)' once the restart command has been acknowledged by the server. A restart would typically only be done after making manual changes to the DHCP server lease table. All other configuration changes done via SNMP are automatically loaded by the server. Default value is 'false(2)'")
mibBuilder.exportSymbols("ZHONE-COM-IP-DHCP-SERVER-MIB", dhcpServerGroupEntry=dhcpServerGroupEntry, dhcpSubnetIndex=dhcpSubnetIndex, serverActiveSlot=serverActiveSlot, dhcpGroupClientMatchLength=dhcpGroupClientMatchLength, bootpCountReplies=bootpCountReplies, serverSystem=serverSystem, dhcpCountAcks=dhcpCountAcks, dhcpSubnetNetwork=dhcpSubnetNetwork, dhcpSubnetRange1Start=dhcpSubnetRange1Start, dhcpHostRowStatus=dhcpHostRowStatus, dhcpLeaseRowStatus=dhcpLeaseRowStatus, dhcpServerNextHostIndex=dhcpServerNextHostIndex, dhcpHostOptionMinLeaseTime=dhcpHostOptionMinLeaseTime, bootpCountDroppedUnknownClients=bootpCountDroppedUnknownClients, serverSystemObjectID=serverSystemObjectID, dhcpHostOptionMaxLeaseTime=dhcpHostOptionMaxLeaseTime, dhcpHostIpAddress4=dhcpHostIpAddress4, dhcpGroupOptionBootFile=dhcpGroupOptionBootFile, dhcpSubnetRange3Start=dhcpSubnetRange3Start, comIpDhcpServer=comIpDhcpServer, dhcpSubnetOptionPrimaryNameServer=dhcpSubnetOptionPrimaryNameServer, dhcpServerSubnetEntry=dhcpServerSubnetEntry, dhcpServerHostOptionTable=dhcpServerHostOptionTable, dhcpHostOptionPrimaryNameServer=dhcpHostOptionPrimaryNameServer, dhcpHostHostname=dhcpHostHostname, dhcpServerSubnetOptionEntry=dhcpServerSubnetOptionEntry, dhcpServerDefaultLeaseTime=dhcpServerDefaultLeaseTime, dhcpServerDefaultMinLeaseTime=dhcpServerDefaultMinLeaseTime, dhcpGroupIndex=dhcpGroupIndex, dhcpCountDeclines=dhcpCountDeclines, dhcpGroupDomain=dhcpGroupDomain, dhcpHostOptionSecondaryNameServer=dhcpHostOptionSecondaryNameServer, bootpCountersEntry=bootpCountersEntry, bootpCountDroppedNotServingSubnet=bootpCountDroppedNotServingSubnet, dhcpServerHostEntry=dhcpServerHostEntry, dhcpHostOptionDefaultLeaseTime=dhcpHostOptionDefaultLeaseTime, dhcpSubnetOptionMaxLeaseTime=dhcpSubnetOptionMaxLeaseTime, dhcpHostIndex=dhcpHostIndex, dhcpCountersEntry=dhcpCountersEntry, dhcpServerConfigurationVersion=dhcpServerConfigurationVersion, dhcpGroupOptionPrimaryNameServer=dhcpGroupOptionPrimaryNameServer, dhcpGroupClientMatchString=dhcpGroupClientMatchString, dhcpCountInforms=dhcpCountInforms, dhcpGroupClientMatchOffset=dhcpGroupClientMatchOffset, dhcpCountReleases=dhcpCountReleases, dhcpGroupVendorMatchString=dhcpGroupVendorMatchString, bootpCountInvalids=bootpCountInvalids, dhcpTrapZhoneCpeSysObjectID=dhcpTrapZhoneCpeSysObjectID, dhcpLeaseIpAddress=dhcpLeaseIpAddress, dhcpGroupOptionDomainName=dhcpGroupOptionDomainName, dhcpLeaseDDNSRevName=dhcpLeaseDDNSRevName, dhcpGroupOptionMaxLeaseTime=dhcpGroupOptionMaxLeaseTime, dhcpHostHardwareAddress=dhcpHostHardwareAddress, dhcpTrapZhoneIpAddressUpdate=dhcpTrapZhoneIpAddressUpdate, dhcpServerTraps=dhcpServerTraps, bootpCountersTable=bootpCountersTable, dhcpSubnetOptionDefaultRouter=dhcpSubnetOptionDefaultRouter, dhcpCountDroppedNotServingSubnet=dhcpCountDroppedNotServingSubnet, dhcpSubnetRange4Start=dhcpSubnetRange4Start, dhcpCountDiscovers=dhcpCountDiscovers, dhcpHostOptionBootFile=dhcpHostOptionBootFile, dhcpLeaseStarts=dhcpLeaseStarts, dhcpHostIpAddress3=dhcpHostIpAddress3, dhcpSubnetDomain=dhcpSubnetDomain, dhcpServerGroupTable=dhcpServerGroupTable, dhcpLeaseFlags=dhcpLeaseFlags, dhcpGroupOptionSecondaryNameServer=dhcpGroupOptionSecondaryNameServer, dhcpTrapZhoneIpInterfaceIndex=dhcpTrapZhoneIpInterfaceIndex, dhcpServerHostTable=dhcpServerHostTable, dhcpGroupOptionDefaultRouter=dhcpGroupOptionDefaultRouter, dhcpSubnetGroup2=dhcpSubnetGroup2, dhcpGroupName=dhcpGroupName, dhcpServerHostOptionEntry=dhcpServerHostOptionEntry, dhcpLeaseDomain=dhcpLeaseDomain, dhcpHostIpAddress1=dhcpHostIpAddress1, dhcpSubnetOptionDefaultLeaseTime=dhcpSubnetOptionDefaultLeaseTime, dhcpServerSubnetOptionTable=dhcpServerSubnetOptionTable, dhcpSubnetOptionMinLeaseTime=dhcpSubnetOptionMinLeaseTime, dhcpSubnetOptionSecondaryNameServer=dhcpSubnetOptionSecondaryNameServer, dhcpServerGroupOptionTable=dhcpServerGroupOptionTable, dhcpHostOptionDomainName=dhcpHostOptionDomainName, dhcpServerSubnetTable=dhcpServerSubnetTable, dhcpSubnetRange1End=dhcpSubnetRange1End, dhcpServerGroupOptionEntry=dhcpServerGroupOptionEntry, dhcpCountRequests=dhcpCountRequests, dhcpSubnetRange3End=dhcpSubnetRange3End, dhcpServerLeaseEntry=dhcpServerLeaseEntry, dhcpCountersTable=dhcpCountersTable, dhcpSubnetOptionDomainName=dhcpSubnetOptionDomainName, dhcpSubnetExternalServer=dhcpSubnetExternalServer, dhcpHostOptionBootServer=dhcpHostOptionBootServer, dhcpServer=dhcpServer, dhcpServerRestart=dhcpServerRestart, dhcpSubnetNetmask=dhcpSubnetNetmask, dhcpServerNextGroupIndex=dhcpServerNextGroupIndex, dhcpSubnetRange2Start=dhcpSubnetRange2Start, serverStandbyShelf=serverStandbyShelf, dhcpServerNextSubnetIndex=dhcpServerNextSubnetIndex, dhcpGroupOptionDefaultLeaseTime=dhcpGroupOptionDefaultLeaseTime, dhcpSubnetRange2End=dhcpSubnetRange2End, dhcpGroupRowStatus=dhcpGroupRowStatus, dhcpSubnetExternalServerAlt=dhcpSubnetExternalServerAlt, dhcpGroupVendorMatchLength=dhcpGroupVendorMatchLength, dhcpLeaseClientHostname=dhcpLeaseClientHostname, dhcpHostClientId=dhcpHostClientId, bootpCountRequests=bootpCountRequests, serverSystemDescr=serverSystemDescr, dhcpLeaseHardwareAddress=dhcpLeaseHardwareAddress, serverActiveShelf=serverActiveShelf, dhcpLeaseDDNSFwdName=dhcpLeaseDDNSFwdName, dhcpCountNacks=dhcpCountNacks, dhcpServerDefaultMaxLeaseTime=dhcpServerDefaultMaxLeaseTime, dhcpSubnetOptionBootServer=dhcpSubnetOptionBootServer, dhcpCountDroppedUnknownClient=dhcpCountDroppedUnknownClient, dhcpLeaseEnds=dhcpLeaseEnds, dhcpTrapZhoneCpeDetected=dhcpTrapZhoneCpeDetected, dhcpStickyAddr=dhcpStickyAddr, dhcpGroupOptionBootServer=dhcpGroupOptionBootServer, dhcpLeaseClientId=dhcpLeaseClientId, dhcpLeaseHostname=dhcpLeaseHostname, dhcpSubnetRowStatus=dhcpSubnetRowStatus, dhcpServerLeaseTable=dhcpServerLeaseTable, dhcpHostDomain=dhcpHostDomain, dhcpSubnetRange4End=dhcpSubnetRange4End, serverUptime=serverUptime, dhcpGroupOptionMinLeaseTime=dhcpGroupOptionMinLeaseTime, dhcpCountOffers=dhcpCountOffers, dhcpHostOptionDefaultRouter=dhcpHostOptionDefaultRouter, dhcpServerDefaultReserveEnd=dhcpServerDefaultReserveEnd, dhcpServerStatistics=dhcpServerStatistics, dhcpServerDefaultReserveStart=dhcpServerDefaultReserveStart, dhcpGroupVendorMatchOffset=dhcpGroupVendorMatchOffset, dhcpHostIpAddress2=dhcpHostIpAddress2, PYSNMP_MODULE_ID=comIpDhcpServer, dhcpSubnetOptionBootFile=dhcpSubnetOptionBootFile, dhcpCountInvalids=dhcpCountInvalids, serverStandbySlot=serverStandbySlot)
