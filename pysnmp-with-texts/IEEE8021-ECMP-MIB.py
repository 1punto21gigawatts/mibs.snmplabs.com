#
# PySNMP MIB module IEEE8021-ECMP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IEEE8021-ECMP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:52:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ieee8021BridgeBasePortComponentId, ieee8021BridgeBasePort = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId", "ieee8021BridgeBasePort")
ieee8021QBridgeTpFdbEntry, ieee8021QBridgePortVlanStatisticsEntry = mibBuilder.importSymbols("IEEE8021-Q-BRIDGE-MIB", "ieee8021QBridgeTpFdbEntry", "ieee8021QBridgePortVlanStatisticsEntry")
ieee8021SpbTopIx, ieee8021SpbmTopSrvTableEntry, IEEE8021SpbBridgePriority = mibBuilder.importSymbols("IEEE8021-SPB-MIB", "ieee8021SpbTopIx", "ieee8021SpbmTopSrvTableEntry", "IEEE8021SpbBridgePriority")
ieee802dot1mibs, = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs")
PortList, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList", "VlanId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter64, Unsigned32, IpAddress, Gauge32, Integer32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier, Counter32, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter64", "Unsigned32", "IpAddress", "Gauge32", "Integer32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier", "Counter32", "NotificationType", "TimeTicks")
RowStatus, DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TruthValue", "TextualConvention")
ieee8021EcmpMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 28))
ieee8021EcmpMib.setRevisions(('2014-12-15 00:00', '2013-05-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021EcmpMib.setRevisionsDescriptions(('Incorporated into 802.1Q 2014 Revision. Cross-references and front matter updated.', '802.1 Equal Cost Multiple Paths MIB Initial Version',))
if mibBuilder.loadTexts: ieee8021EcmpMib.setLastUpdated('201412150000Z')
if mibBuilder.loadTexts: ieee8021EcmpMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021EcmpMib.setContactInfo('WG-URL: http://grouper.ieee.org/groups/802/1/index.html WG-EMail: stds-802-1@ieee.org Contact: IEEE 802.1 Working Group Chair Postal: C/O IEEE 802.1 Working Group IEEE Standards Association 445 Hoes Lane P.O. Box 1331 Piscataway NJ 08855-1331 USA E-mail: STDS-802-1-L@LISTSERV.IEEE.ORG')
if mibBuilder.loadTexts: ieee8021EcmpMib.setDescription('802.1 ECMP MIB')
ieee8021EcmpNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 28, 0))
ieee8021EcmpObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 28, 1))
ieee8021EcmpConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 28, 2))
ieee8021QBridgeEcmpFdbTable = MibTable((1, 3, 111, 2, 802, 1, 1, 28, 1, 1), )
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbTable.setReference('12.7.7.3, 8.8.3:c')
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbTable.setDescription('A table that contains information about unicast entries for which the device has forwarding and/or filtering information. This information is used by the ECMP next hop selection function in determining how to propagate a received frame.')
ieee8021QBridgeEcmpFdbEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 28, 1, 1, 1), )
ieee8021QBridgeTpFdbEntry.registerAugmentions(("IEEE8021-ECMP-MIB", "ieee8021QBridgeEcmpFdbEntry"))
ieee8021QBridgeEcmpFdbEntry.setIndexNames(*ieee8021QBridgeTpFdbEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbEntry.setDescription('Information about a specific unicast MAC address for which the device has some forwarding and/or filtering information.')
ieee8021QBridgeEcmpFdbPortList = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 1, 1, 1), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbPortList.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbPortList.setDescription('The complete set of ports, in this FID, to which frames destined for this individual MAC address may be forwarded.')
ieee8021EcmpFlowFilterCtlTable = MibTable((1, 3, 111, 2, 802, 1, 1, 28, 1, 2), )
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlTable.setReference('12.16.5.4, 12.16.5.5')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlTable.setDescription('A table flow filtering control informmation for ports in a Bridge supporting F-Tag processing.')
ieee8021EcmpFlowFilterCtlEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 28, 1, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-ECMP-MIB", "ieee8021EcmpFlowFilterCtlVid"))
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlEntry.setDescription('An entry in the Flow Filtering Control Table for a port (CPB or PNP).')
ieee8021EcmpFlowFilterCtlVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlVid.setDescription('A B-vID registered on the port.')
ieee8021EcmpFlowFilterCtlEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlEnabled.setDescription('Indicates whether or not flow filtering behavior is enabled on the port for the VID (true(1) is enabled, false(2) is disabled).')
ieee8021EcmpFlowFilterCtlHashGen = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlHashGen.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlHashGen.setDescription('indicates whether or not flow hash generation is enabled on the port for the VID (true(1) is enabled, false(2) is disabled).')
ieee8021EcmpFlowFilterCtlTtl = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlTtl.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlTtl.setDescription('the initial TTL value for frames entering the flow filtering SPT Domain. Valid values are 1..63, zero indicates the value has not been set. This object is persistent.')
ieee8021EcmpEctStaticTable = MibTable((1, 3, 111, 2, 802, 1, 1, 28, 1, 3), )
if mibBuilder.loadTexts: ieee8021EcmpEctStaticTable.setReference('12.25.14')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticTable.setDescription('Table containing alternate Bridge priorities for tie-breaker masks used in selecting shared tree root bridges. The table is indexed by - ieee8021SpbTopIx from ieee8021SpbMtidStaticTable indicating the ISIS-SPB topology instance into which the bridge priority will be advertised, and - ieee8021EcmpEctStaticEntryTieBreakMask the associated tie-break mask value.')
ieee8021EcmpEctStaticEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 28, 1, 3, 1), ).setIndexNames((0, "IEEE8021-SPB-MIB", "ieee8021SpbTopIx"), (0, "IEEE8021-ECMP-MIB", "ieee8021EcmpEctStaticEntryTieBreakMask"))
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntry.setReference('12.25.8')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntry.setDescription('This entry contains information about backbone services configured on this system to be advertised by ISIS-SPB.')
ieee8021EcmpEctStaticEntryTieBreakMask = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntryTieBreakMask.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntryTieBreakMask.setDescription('The value used to create the Tie-Break Mask for selecting a shared tree root bridge.')
ieee8021EcmpEctStaticEntryBridgePriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 3, 1, 2), IEEE8021SpbBridgePriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntryBridgePriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntryBridgePriority.setDescription('A Bridge Priority value to be used for selecting a shared tree root bridge, i.e. the most significant 4 bits of the Bridge Identifier. This object is persistent.')
ieee8021EcmpEctStaticEntryRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntryRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticEntryRowStatus.setDescription('This column holds the status for this row. When the status is active, no columns of this table may be modified. All columns must have a valid value before the row can be activated. This object is persistent.')
ieee8021EcmpTopSrvTable = MibTable((1, 3, 111, 2, 802, 1, 1, 28, 1, 4), )
if mibBuilder.loadTexts: ieee8021EcmpTopSrvTable.setReference('12.25.8')
if mibBuilder.loadTexts: ieee8021EcmpTopSrvTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpTopSrvTable.setDescription('Added info for SPBM PBB encapsulated services in this network.')
ieee8021EcmpTopSrvEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 28, 1, 4, 1), )
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntry.setReference('12.25.8')
ieee8021SpbmTopSrvTableEntry.registerAugmentions(("IEEE8021-ECMP-MIB", "ieee8021EcmpTopSrvEntry"))
ieee8021EcmpTopSrvEntry.setIndexNames(*ieee8021SpbmTopSrvTableEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntry.setDescription('This table contains additional information about backbone services configured on this system to be advertised by ISIS-SPB.')
ieee8021EcmpTopSrvEntryTsBit = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntryTsBit.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntryTsBit.setDescription('If true(1), indicates the BSI transmits multicast frames on a shared tree from this CBP.')
ieee8021EcmpTopSrvEntryTieBreakMask = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntryTieBreakMask.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpTopSrvEntryTieBreakMask.setDescription('The value used to create the Tie-Break Mask for calculating multicast trees.')
ieee8021QBridgePortVlanTtlStatisticsTable = MibTable((1, 3, 111, 2, 802, 1, 1, 28, 1, 5), )
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTtlStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTtlStatisticsTable.setDescription('A table containing per-port, per-VID TTL discard statistics.')
ieee8021QBridgePortVlanTtlStatisticsEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 28, 1, 5, 1), )
ieee8021QBridgePortVlanStatisticsEntry.registerAugmentions(("IEEE8021-ECMP-MIB", "ieee8021QBridgePortVlanTtlStatisticsEntry"))
ieee8021QBridgePortVlanTtlStatisticsEntry.setIndexNames(*ieee8021QBridgePortVlanStatisticsEntry.getIndexNames())
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTtlStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTtlStatisticsEntry.setDescription('TTL discard statistics for a VID on an interface.')
ieee8021QBridgeTpVlanPortTtlDiscards = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 28, 1, 5, 1, 1), Counter64()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortTtlDiscards.setReference('12.6.1.1.3')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortTtlDiscards.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeTpVlanPortTtlDiscards.setDescription('The number of valid frames received by this port from its segment that were classified as belonging to this VLAN and that were discarded due to TTL expiry. Discontinuities in the value of the counter can occur at re-initialization of the management system, and at other times as indicated by the value of ifCounterDiscontinuityTime object of the associated interface (if any).')
ieee8021EcmpGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 28, 2, 1))
ieee8021EcmpCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 28, 2, 2))
ieee8021QBridgeEcmpFdbGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 28, 2, 1, 1)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021QBridgeEcmpFdbPortList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgeEcmpFdbGroup = ieee8021QBridgeEcmpFdbGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgeEcmpFdbGroup.setDescription('FDB Port Map for ECMP Individual address')
ieee8021EcmpFlowFilterCtlGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 28, 2, 1, 2)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021EcmpFlowFilterCtlEnabled"), ("IEEE8021-ECMP-MIB", "ieee8021EcmpFlowFilterCtlHashGen"), ("IEEE8021-ECMP-MIB", "ieee8021EcmpFlowFilterCtlTtl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021EcmpFlowFilterCtlGroup = ieee8021EcmpFlowFilterCtlGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilterCtlGroup.setDescription('Flow filtering control parameters on a CBP or PNP')
ieee8021EcmpEctStaticGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 28, 2, 1, 3)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021EcmpEctStaticEntryBridgePriority"), ("IEEE8021-ECMP-MIB", "ieee8021EcmpEctStaticEntryRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021EcmpEctStaticGroup = ieee8021EcmpEctStaticGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpEctStaticGroup.setDescription('Optional Bridge Priority for selecting shared tree root')
ieee8021EcmpTopSrvGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 28, 2, 1, 4)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021EcmpTopSrvEntryTsBit"), ("IEEE8021-ECMP-MIB", "ieee8021EcmpTopSrvEntryTieBreakMask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021EcmpTopSrvGroup = ieee8021EcmpTopSrvGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpTopSrvGroup.setDescription('Advertised I-SID parameters controlling multicast routing')
ieee8021QBridgePortVlanTtlStatisticsGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 28, 2, 1, 5)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021QBridgeTpVlanPortTtlDiscards"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021QBridgePortVlanTtlStatisticsGroup = ieee8021QBridgePortVlanTtlStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021QBridgePortVlanTtlStatisticsGroup.setDescription('TTL discard statistics')
ieee8021EcmpCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 28, 2, 2, 1)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021QBridgeEcmpFdbGroup"), ("IEEE8021-ECMP-MIB", "ieee8021EcmpEctStaticGroup"), ("IEEE8021-ECMP-MIB", "ieee8021EcmpTopSrvGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021EcmpCompliance = ieee8021EcmpCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpCompliance.setDescription('Compliance to IEEE 802.1 SPBM ECMP')
ieee8021EcmpFlowFilteringCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 28, 2, 2, 2)).setObjects(("IEEE8021-ECMP-MIB", "ieee8021EcmpFlowFilterCtlGroup"), ("IEEE8021-ECMP-MIB", "ieee8021QBridgePortVlanTtlStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021EcmpFlowFilteringCompliance = ieee8021EcmpFlowFilteringCompliance.setStatus('current')
if mibBuilder.loadTexts: ieee8021EcmpFlowFilteringCompliance.setDescription('Compliance to IEEE 802.1 SPBM ECMP with flow filtering')
mibBuilder.exportSymbols("IEEE8021-ECMP-MIB", ieee8021EcmpMib=ieee8021EcmpMib, ieee8021EcmpObjects=ieee8021EcmpObjects, ieee8021EcmpFlowFilterCtlHashGen=ieee8021EcmpFlowFilterCtlHashGen, ieee8021EcmpFlowFilterCtlEntry=ieee8021EcmpFlowFilterCtlEntry, ieee8021EcmpGroups=ieee8021EcmpGroups, ieee8021QBridgePortVlanTtlStatisticsEntry=ieee8021QBridgePortVlanTtlStatisticsEntry, ieee8021EcmpNotifications=ieee8021EcmpNotifications, ieee8021EcmpCompliances=ieee8021EcmpCompliances, ieee8021QBridgeEcmpFdbEntry=ieee8021QBridgeEcmpFdbEntry, ieee8021EcmpEctStaticEntryBridgePriority=ieee8021EcmpEctStaticEntryBridgePriority, ieee8021QBridgeEcmpFdbGroup=ieee8021QBridgeEcmpFdbGroup, ieee8021EcmpEctStaticGroup=ieee8021EcmpEctStaticGroup, ieee8021EcmpEctStaticEntry=ieee8021EcmpEctStaticEntry, ieee8021EcmpTopSrvGroup=ieee8021EcmpTopSrvGroup, PYSNMP_MODULE_ID=ieee8021EcmpMib, ieee8021QBridgeEcmpFdbPortList=ieee8021QBridgeEcmpFdbPortList, ieee8021EcmpFlowFilteringCompliance=ieee8021EcmpFlowFilteringCompliance, ieee8021EcmpEctStaticTable=ieee8021EcmpEctStaticTable, ieee8021EcmpTopSrvEntry=ieee8021EcmpTopSrvEntry, ieee8021EcmpConformance=ieee8021EcmpConformance, ieee8021EcmpFlowFilterCtlTtl=ieee8021EcmpFlowFilterCtlTtl, ieee8021QBridgePortVlanTtlStatisticsGroup=ieee8021QBridgePortVlanTtlStatisticsGroup, ieee8021EcmpFlowFilterCtlEnabled=ieee8021EcmpFlowFilterCtlEnabled, ieee8021EcmpEctStaticEntryRowStatus=ieee8021EcmpEctStaticEntryRowStatus, ieee8021QBridgePortVlanTtlStatisticsTable=ieee8021QBridgePortVlanTtlStatisticsTable, ieee8021EcmpCompliance=ieee8021EcmpCompliance, ieee8021EcmpEctStaticEntryTieBreakMask=ieee8021EcmpEctStaticEntryTieBreakMask, ieee8021QBridgeTpVlanPortTtlDiscards=ieee8021QBridgeTpVlanPortTtlDiscards, ieee8021EcmpFlowFilterCtlGroup=ieee8021EcmpFlowFilterCtlGroup, ieee8021EcmpFlowFilterCtlVid=ieee8021EcmpFlowFilterCtlVid, ieee8021EcmpTopSrvTable=ieee8021EcmpTopSrvTable, ieee8021EcmpFlowFilterCtlTable=ieee8021EcmpFlowFilterCtlTable, ieee8021EcmpTopSrvEntryTieBreakMask=ieee8021EcmpTopSrvEntryTieBreakMask, ieee8021EcmpTopSrvEntryTsBit=ieee8021EcmpTopSrvEntryTsBit, ieee8021QBridgeEcmpFdbTable=ieee8021QBridgeEcmpFdbTable)
