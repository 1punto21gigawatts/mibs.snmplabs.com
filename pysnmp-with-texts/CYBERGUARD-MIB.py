#
# PySNMP MIB module CYBERGUARD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYBERGUARD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, MibIdentifier, Integer32, Gauge32, enterprises, Unsigned32, iso, NotificationType, ModuleIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Counter32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "MibIdentifier", "Integer32", "Gauge32", "enterprises", "Unsigned32", "iso", "NotificationType", "ModuleIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Counter32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DisplayString(OctetString):
    pass

novell = MibIdentifier((1, 3, 6, 1, 4, 1, 23))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1))
unixWare = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13))
cyberGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13, 25))
cgfwMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1))
cgfwEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2))
cgAccessDeny = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgAccessDeny.setStatus('mandatory')
if mibBuilder.loadTexts: cgAccessDeny.setDescription('A string containing the last snmp trap sent for access_deny via fw')
cgAccessGrant = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgAccessGrant.setStatus('mandatory')
if mibBuilder.loadTexts: cgAccessGrant.setDescription('A string containing the last snmp trap sent for access_grant via fw')
cgDiskSpace = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgDiskSpace.setStatus('mandatory')
if mibBuilder.loadTexts: cgDiskSpace.setDescription('A string containing the last snmp trap sent for disk_space via fw')
cgFailedLogin = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgFailedLogin.setStatus('mandatory')
if mibBuilder.loadTexts: cgFailedLogin.setDescription('A string containing the last snmp trap sent for failed_login via fw')
cgHostLimit = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgHostLimit.setStatus('mandatory')
if mibBuilder.loadTexts: cgHostLimit.setDescription('A string containing the last snmp trap sent for host_limit via fw')
cgForwardAttack = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgForwardAttack.setStatus('mandatory')
if mibBuilder.loadTexts: cgForwardAttack.setDescription('A string containing the last snmp trap sent for forward_attack via fw')
cgLandAttack = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgLandAttack.setStatus('mandatory')
if mibBuilder.loadTexts: cgLandAttack.setDescription('A string containing the last snmp trap sent for land_attack via fw')
cgPingOfDeath = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgPingOfDeath.setStatus('mandatory')
if mibBuilder.loadTexts: cgPingOfDeath.setDescription('A string containing the last snmp trap sent for pingOdDeath via fw')
cgTcpSynFlood = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgTcpSynFlood.setStatus('mandatory')
if mibBuilder.loadTexts: cgTcpSynFlood.setDescription('A string containing the last snmp trap sent for tcp_syn_flood via fw')
cgIntfSpoof = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgIntfSpoof.setStatus('mandatory')
if mibBuilder.loadTexts: cgIntfSpoof.setDescription('A string containing the last snmp trap sent for interface_spoof via fw')
cgMacViolation = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgMacViolation.setStatus('mandatory')
if mibBuilder.loadTexts: cgMacViolation.setDescription('A string containing the last snmp trap sent for mac_violation via fw')
cgPortScan = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgPortScan.setStatus('mandatory')
if mibBuilder.loadTexts: cgPortScan.setDescription('A string containing the last snmp trap sent for port_scan via fw')
cgBlockedFile = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgBlockedFile.setStatus('mandatory')
if mibBuilder.loadTexts: cgBlockedFile.setDescription('A string containing the last snmp trap sent for blocked_file via fw')
cgHaTransition = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgHaTransition.setStatus('mandatory')
if mibBuilder.loadTexts: cgHaTransition.setDescription('A string containing the last snmp trap sent for ha_transition via fw')
cgHaNoHB = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgHaNoHB.setStatus('mandatory')
if mibBuilder.loadTexts: cgHaNoHB.setDescription('A string containing the last snmp trap sent for ha_nohb via fw')
cgSwUpdate = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgSwUpdate.setStatus('mandatory')
if mibBuilder.loadTexts: cgSwUpdate.setDescription('A string containing the last snmp trap sent for sw_update via fw')
cgPlatformSensor = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgPlatformSensor.setStatus('mandatory')
if mibBuilder.loadTexts: cgPlatformSensor.setDescription('A string containing the last snmp trap sent for platform_sensor via fw')
cgAuditArchive = MibScalar((1, 3, 6, 1, 4, 1, 23, 1, 13, 25, 1, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cgAuditArchive.setStatus('mandatory')
if mibBuilder.loadTexts: cgAuditArchive.setDescription('A string containing the last snmp trap sent for audit_archive via fw')
mibBuilder.exportSymbols("CYBERGUARD-MIB", novell=novell, cgDiskSpace=cgDiskSpace, cgSwUpdate=cgSwUpdate, cgMacViolation=cgMacViolation, cgLandAttack=cgLandAttack, cgFailedLogin=cgFailedLogin, cgHostLimit=cgHostLimit, cgAuditArchive=cgAuditArchive, cgTcpSynFlood=cgTcpSynFlood, cyberGuard=cyberGuard, cgBlockedFile=cgBlockedFile, cgPingOfDeath=cgPingOfDeath, cgfwMIB=cgfwMIB, DisplayString=DisplayString, cgAccessGrant=cgAccessGrant, cgIntfSpoof=cgIntfSpoof, cgfwEvent=cgfwEvent, cgAccessDeny=cgAccessDeny, cgPlatformSensor=cgPlatformSensor, products=products, cgForwardAttack=cgForwardAttack, cgHaTransition=cgHaTransition, cgHaNoHB=cgHaNoHB, unixWare=unixWare, cgPortScan=cgPortScan)
