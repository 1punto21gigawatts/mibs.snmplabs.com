#
# PySNMP MIB module SUN-SNMP-NETRA-CT-RSC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SUN-SNMP-NETRA-CT-RSC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:12:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, ModuleIdentity, NotificationType, enterprises, iso, TimeTicks, MibIdentifier, Gauge32, IpAddress, Bits, Integer32, ObjectIdentity, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ModuleIdentity", "NotificationType", "enterprises", "iso", "TimeTicks", "MibIdentifier", "Gauge32", "IpAddress", "Bits", "Integer32", "ObjectIdentity", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
netraCtRscMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 42, 2, 65, 2))
netraCtRscMIB.setRevisions(('1900-04-18 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netraCtRscMIB.setRevisionsDescriptions(('First version of MIB module SUN-SNMP-NETRA-CT-RSC-MIB.',))
if mibBuilder.loadTexts: netraCtRscMIB.setLastUpdated('0004181200Z')
if mibBuilder.loadTexts: netraCtRscMIB.setOrganization('')
if mibBuilder.loadTexts: netraCtRscMIB.setContactInfo('')
if mibBuilder.loadTexts: netraCtRscMIB.setDescription('The MIB module for the Netra ct 400/800 Remote System Control Products')
netraCtRscObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1))
netraCtRscEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 2))
netraCtRscExpmnt = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 3))
netraCtRscAdminObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 1))
netraCtRscConfigObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2))
netraCtRscSerial2Objs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3))
netraCtRscModemObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 4))
netraCtRscEnetObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5))
netraCtRscEnvObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6))
netraCtRscLogObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7))
netraCtRscRccConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 3, 1))
netraCtRscTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 2, 0))
class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(11, 11)
    fixedLength = 11

netraCtRscAdminRscReset = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("set", 1), ("clear", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscAdminRscReset.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAdminRscReset.setDescription('Setting this will soft Reset only the RSC (Remote System Controller) card. The clear(2) setting is read-only for this variable. This variable will always read as clear(2).')
netraCtRscAdminHostReset = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("set", 1), ("clear", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscAdminHostReset.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAdminHostReset.setDescription('Setting netraCtRscAdminHostReset will cause either send a break to the host, or will toggle a hard reset line. A break will be sent if netraCtRscPanicDump conatins the value of on(1).Otherwise, a hard reset will occur. The clear(2) setting is read-only for this variable. This variable will always reads as clear(2).')
netraCtRscAdminXir = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("set", 1), ("clear", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscAdminXir.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAdminXir.setDescription('Sends a hardware xir pulse to the host when set to true. This variable resets itself to clear(2) after the negation of the pulse.')
netraCtRscAdminNmi = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("set", 1), ("clear", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscAdminNmi.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAdminNmi.setDescription('Sends a hardware nmi pulse to the host when set to true. This variable resets itself to clear(2) after the negation of the pulse.')
netraCtRscAdminBreak = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("set", 1), ("clear", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscAdminBreak.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAdminBreak.setDescription('Sends a break to the Host when this is set. The clear(2) setting is read-only for this variable. This variable will always read as clear(2).')
netraCtRscGlobalPageFlag = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscGlobalPageFlag.setStatus('current')
if mibBuilder.loadTexts: netraCtRscGlobalPageFlag.setDescription('An on(1) to this variable will enable paging for RSC alerts. An off(2) will disable paging.')
netraCtRscGlobalEmailFlag = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscGlobalEmailFlag.setStatus('current')
if mibBuilder.loadTexts: netraCtRscGlobalEmailFlag.setDescription('An on(1) to this variable will enable email for RSC alerts. An off(2) will disable email.')
netraCtRscGlobalIPModeFlag = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("disabled", 1), ("config", 2), ("dhcp", 3), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscGlobalIPModeFlag.setStatus('current')
if mibBuilder.loadTexts: netraCtRscGlobalIPModeFlag.setDescription('IP mode global flag')
netraCtRscGlobalPPPFlag = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscGlobalPPPFlag.setStatus('current')
if mibBuilder.loadTexts: netraCtRscGlobalPPPFlag.setDescription('serial configuration flag indicating whether PPP should be the default.')
netraCtRscHostname = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscHostname.setStatus('current')
if mibBuilder.loadTexts: netraCtRscHostname.setDescription('name of Host connected to RSC')
netraCtRscCustomerInfo = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscCustomerInfo.setStatus('current')
if mibBuilder.loadTexts: netraCtRscCustomerInfo.setDescription('Customer information used in the message generated for a pager or email alert')
netraCtRscVersionBootMajor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionBootMajor.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionBootMajor.setDescription('RSC Firmware BootMonitor Revision Major Number')
netraCtRscVersionBootMinor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionBootMinor.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionBootMinor.setDescription('RSC Firmware BootMonitor Revision Minor Number')
netraCtRscVersionBootMicro = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionBootMicro.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionBootMicro.setDescription('RSC Firmware BootMonitor Revision Micro Number')
netraCtRscVersionMainMajor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionMainMajor.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionMainMajor.setDescription('RSC Core RSC Revision Major Number')
netraCtRscVersionMainMinor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionMainMinor.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionMainMinor.setDescription('RSC Core RSC Revision Minor Number')
netraCtRscVersionMainMicro = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionMainMicro.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionMainMicro.setDescription('RSC Core RSC Revision Micro Number')
netraCtRscVersionFirmwareMajor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionFirmwareMajor.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionFirmwareMajor.setDescription('RSC Core Firmware Revision Major Number')
netraCtRscVersionFirmwareMinor = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionFirmwareMinor.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionFirmwareMinor.setDescription('RSC Core Firmware Revision Minor Number')
netraCtRscVersionFirmwareMicro = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscVersionFirmwareMicro.setStatus('current')
if mibBuilder.loadTexts: netraCtRscVersionFirmwareMicro.setDescription('RSC Core Firmware Revision Micro Number')
netraCtRscTOD = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 16), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscTOD.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTOD.setDescription('RSC time of day')
netraCtRscEscape = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscEscape.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEscape.setDescription('set the first character of the 2-character escape sequence')
netraCtRscHostWatchDogReboot = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscHostWatchDogReboot.setStatus('current')
if mibBuilder.loadTexts: netraCtRscHostWatchDogReboot.setDescription('RSC monitors a heartbeat from the Solaris host. If this heartbeat is late, then a message will be logged, and an alarm will be set. If netraCtRscHostWatchDogReboot is on, then the solaris host will also be rebooted.')
netraCtRscHostWatchDogTimeout = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscHostWatchDogTimeout.setStatus('current')
if mibBuilder.loadTexts: netraCtRscHostWatchDogTimeout.setDescription('RSC monitors a heartbeat from the Solaris host. This variable indicates the maximum tolerable number of seconds between heartbeats, before RSC will set alarm0. A setting of 0 indicates that the heartbeat should not be monitored.')
netraCtRscPanicDump = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscPanicDump.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPanicDump.setDescription('If set to true when netraCtRscAdminHostReset is set, then a break will be sent to the host, causing a core dump to be saved on the host. Otherwise, the setting of netraCtRscAdminHostReset will cause a hardware reset.')
netraCtRscSerial2Mode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 2147483647))).clone(namedValues=NamedValues(("rcc", 1), ("modem", 2), ("tty", 3), ("disabled", 4), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2Mode.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2Mode.setDescription('serial port 2 configuration mode.')
netraCtRscSerial2Parity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2Parity.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2Parity.setDescription('serial port 2 parity mode.')
netraCtRscSerial2Stop = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2Stop.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2Stop.setDescription('serial port 2 stop bits.')
netraCtRscSerial2Data = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("seven", 1), ("eight", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2Data.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2Data.setDescription('serial port 2 data bits.')
netraCtRscSerial2Baud = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2147483647))).clone(namedValues=NamedValues(("b300", 1), ("b1200", 2), ("b1800", 3), ("b2400", 4), ("b4800", 5), ("b9600", 6), ("b19200", 7), ("b38400", 8), ("b57600", 9), ("b115200", 10), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2Baud.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2Baud.setDescription('serial port 2 baud rate.')
netraCtRscSerial2HwFlowcontrol = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2HwFlowcontrol.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2HwFlowcontrol.setDescription('serial port 2 Hardware Flowcontrol.')
netraCtRscSerial2Inactivity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2Inactivity.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2Inactivity.setDescription('serial port 2 inactivity.')
netraCtRscSerial2PagerOneConfig = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneConfig.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneConfig.setDescription('primary pager number for RSC.')
netraCtRscSerial2PagerTwoConfig = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoConfig.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoConfig.setDescription('secondary pager number for RSC')
netraCtRscSerial2PagerOneBaud = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 2147483647))).clone(namedValues=NamedValues(("b300", 1), ("b1200", 2), ("b2400", 3), ("b4800", 4), ("b9600", 5), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneBaud.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneBaud.setDescription('primary pager baud rate.')
netraCtRscSerial2PagerTwoBaud = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 2147483647))).clone(namedValues=NamedValues(("b300", 1), ("b1200", 2), ("b2400", 3), ("b4800", 4), ("b9600", 5), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoBaud.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoBaud.setDescription('secondary pager baud rate.')
netraCtRscSerial2PagerOneParity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneParity.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneParity.setDescription('primary pager parity mode.')
netraCtRscSerial2PagerTwoParity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoParity.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoParity.setDescription('secondary pager parity mode.')
netraCtRscSerial2PagerOneStop = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneStop.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneStop.setDescription('primary pager stop bits.')
netraCtRscSerial2PagerTwoStop = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoStop.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoStop.setDescription('secondary pager stop bits.')
netraCtRscSerial2PagerOneData = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("seven", 1), ("eight", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneData.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneData.setDescription('primary pager data bits.')
netraCtRscSerial2PagerTwoData = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("seven", 1), ("eight", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoData.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoData.setDescription('secondary pager data bits.')
netraCtRscSerial2PagerOneInit = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneInit.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOneInit.setDescription('primary pager modem init string.')
netraCtRscSerial2PagerTwoInit = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoInit.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoInit.setDescription('secondary pager modem init string.')
netraCtRscSerial2PagerOnePassword = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerOnePassword.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerOnePassword.setDescription('primary pager TAP password.')
netraCtRscSerial2PagerTwoPassword = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 3, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoPassword.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSerial2PagerTwoPassword.setDescription('secondary pager TAP password.')
netraCtRscModemParity = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscModemParity.setStatus('current')
if mibBuilder.loadTexts: netraCtRscModemParity.setDescription('modem parity mode.')
netraCtRscModemStop = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("one", 1), ("two", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscModemStop.setStatus('current')
if mibBuilder.loadTexts: netraCtRscModemStop.setDescription('modem stop bits.')
netraCtRscModemData = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("seven", 1), ("eight", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscModemData.setStatus('current')
if mibBuilder.loadTexts: netraCtRscModemData.setDescription('modem data bits.')
netraCtRscCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscCountryCode.setStatus('current')
if mibBuilder.loadTexts: netraCtRscCountryCode.setDescription('country specified using CCITT internaional dial-plan number.')
netraCtRscModemModel = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscModemModel.setStatus('current')
if mibBuilder.loadTexts: netraCtRscModemModel.setDescription('the modem type used on the netraCtRsc card.')
netraCtRscMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscMacAddress.setStatus('current')
if mibBuilder.loadTexts: netraCtRscMacAddress.setDescription('Ethernet address for RSC.')
netraCtRscEnetTpeLinkTest = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscEnetTpeLinkTest.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEnetTpeLinkTest.setDescription("Determines whether tpe-link-test should be set of clear. This should be off when interfacing with older-style hubs that don't support heartbeat.")
netraCtRscIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscIPAddress.setStatus('current')
if mibBuilder.loadTexts: netraCtRscIPAddress.setDescription('configured IP address for RSC.')
netraCtRscIpMask = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscIpMask.setStatus('current')
if mibBuilder.loadTexts: netraCtRscIpMask.setDescription('configured IP netmask for RSC.')
netraCtRscIpGateway = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscIpGateway.setStatus('current')
if mibBuilder.loadTexts: netraCtRscIpGateway.setDescription('configured IP gateway for RSC.')
netraCtRscSNMPHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscSNMPHostAddress.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSNMPHostAddress.setDescription('configured SNMP server for RSC alerts.')
netraCtRscMailHostAddress = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscMailHostAddress.setStatus('current')
if mibBuilder.loadTexts: netraCtRscMailHostAddress.setDescription('Address of Mail Server.')
netraCtRscMailUser = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscMailUser.setStatus('current')
if mibBuilder.loadTexts: netraCtRscMailUser.setDescription('email address for RSC alerts.')
netraCtRscPPPLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscPPPLocalIP.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPPPLocalIP.setDescription('PPP local IP address.')
netraCtRscPPPRemoteIP = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscPPPRemoteIP.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPPPRemoteIP.setDescription('PPP remote IP address.')
netraCtRscMailHostAddressBackup = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 5, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscMailHostAddressBackup.setStatus('current')
if mibBuilder.loadTexts: netraCtRscMailHostAddressBackup.setDescription(' Backup Address of Mail Server. when no IP address is configured for mail server, back up IP address becomes first IP address of mailhost ')
netraCtRscSystemType = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscSystemType.setStatus('current')
if mibBuilder.loadTexts: netraCtRscSystemType.setDescription('System Type. This will currently return one of the following 2 strings: NetraCt400 , or NetraCt800.')
netraCtRscPowerSupplyCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscPowerSupplyCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyCount.setDescription('The total number of Power Supply FRUs in the platform.')
netraCtRscPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 3), )
if mibBuilder.loadTexts: netraCtRscPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyTable.setDescription('A table listing the characteristics of the Power-Supply FRU.')
netraCtRscPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 3, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscPowerSupplyIndex"))
if mibBuilder.loadTexts: netraCtRscPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyEntry.setDescription('an entry (conceptual row) in the netraCtRscPowerSupplyTable')
netraCtRscPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyIndex.setDescription('Entry number for this Power-Supply FRU row.')
netraCtRscPowerSupplyPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("unknown", 3), ("notimpl", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscPowerSupplyPresent.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyPresent.setDescription('Power-Supply FRU is present.')
netraCtRscPowerSupplyOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 2147483647))).clone(namedValues=NamedValues(("okay", 1), ("failed", 2), ("unknown", 3), ("offline", 4), ("notimpl", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscPowerSupplyOperState.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyOperState.setDescription('The current status of the Power-Supply FRU.')
netraCtRscPowerSupplyAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscPowerSupplyAdminState.setStatus('current')
if mibBuilder.loadTexts: netraCtRscPowerSupplyAdminState.setDescription('Setting this value to on(1) requests that the power supply be turned on. Setting this value to off(2) requests that the power supply be turned off.')
netraCtRscAlarmCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscAlarmCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmCount.setDescription('Number of Alarm Ports in this Platform')
netraCtRscAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5), )
if mibBuilder.loadTexts: netraCtRscAlarmTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmTable.setDescription('a table listing the available Alarm Ports.')
netraCtRscAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscAlarmIndex"))
if mibBuilder.loadTexts: netraCtRscAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmEntry.setDescription('an entry (conceptual row) in the netraCtRscAlarmTable.')
netraCtRscAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: netraCtRscAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmIndex.setDescription('row index into Alarm Port table')
netraCtRscAlarmID = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscAlarmID.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmID.setDescription('Alarm identifier. The current Netra ct 400/800 Alarm Cards currently supports Alarm IDs of 0,1,2, and 3.')
netraCtRscAlarmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscAlarmOperState.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmOperState.setDescription('This returns the current value of the Alarm, which may have been set by either software due to environmental conditions, such as Fan failure, or manually, by the setting of netraCtRscAlarmAdminState.')
netraCtRscAlarmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscAlarmAdminState.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmAdminState.setDescription('This reflects the requested state of an alarm port by the SNMP manager.')
netraCtRscAlarmPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscAlarmPrefix.setStatus('current')
if mibBuilder.loadTexts: netraCtRscAlarmPrefix.setDescription('The Alarm Prefix that will associate an FRU type to an alarm. Currently supported definitions are: cpuunit(1), software(2), powersupply(3), temperature(4), fan(5). 6 through 9 are reserved for future expansion. 10 through 255 are undefined, and can be configured for user-defined messages and alarming.')
netraCtRscFanCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscFanCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscFanCount.setDescription('Maximum number of Fan Tray FRUs in Platform')
netraCtRscFanTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 7), )
if mibBuilder.loadTexts: netraCtRscFanTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscFanTable.setDescription('a table listing the characteristics of the Fan Tray FRU.')
netraCtRscFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 7, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscFanIndex"))
if mibBuilder.loadTexts: netraCtRscFanEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscFanEntry.setDescription('an entry (conceptual row) in the netraCtRscFanTable.')
netraCtRscFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscFanIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscFanIndex.setDescription('row index into Fan FRU table')
netraCtRscFanPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("unknown", 3), ("notimpl", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscFanPresent.setStatus('current')
if mibBuilder.loadTexts: netraCtRscFanPresent.setDescription('Fan FRU is present')
netraCtRscFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 2147483647))).clone(namedValues=NamedValues(("okay", 1), ("failed", 2), ("unknown", 3), ("notimpl", 2147483647)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscFanStatus.setStatus('current')
if mibBuilder.loadTexts: netraCtRscFanStatus.setDescription('The current status of the Fan FRU. unknown will be returned if the status is unknown.')
netraCtRscTemperatureCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureCount.setDescription('Maximum number of temperature sensors on Platform')
netraCtRscTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9), )
if mibBuilder.loadTexts: netraCtRscTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureTable.setDescription('a table listing the contents of the event log as an array of strings.')
netraCtRscTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscTemperatureIndex"))
if mibBuilder.loadTexts: netraCtRscTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureEntry.setDescription('an entry (conceptual row) in the netraCtRscTemperatureTable.')
netraCtRscTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureIndex.setDescription('current row of the Temperature sensor')
netraCtRscTemperatureValid = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureValid.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureValid.setDescription('The current temperature at this sensor is known. If the temperature cannot be obtained, then false will be returned, and netraCtRscTemperatureValue should not be considered to be valid.')
netraCtRscTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureValue.setDescription('current temperature at this sensor')
netraCtRscTemperatureLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureLowWarn.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureLowWarn.setDescription('low warning threshold for this temperature sensor')
netraCtRscTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureHighWarn.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureHighWarn.setDescription('high warning threshold for this temperature sensor')
netraCtRscTemperatureDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 6, 9, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscTemperatureDesc.setStatus('current')
if mibBuilder.loadTexts: netraCtRscTemperatureDesc.setDescription('textual description of the Temperature sensor')
netraCtRscEventLogCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscEventLogCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEventLogCount.setDescription('current number of lines in the event log')
netraCtRscEventLogTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 2), )
if mibBuilder.loadTexts: netraCtRscEventLogTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEventLogTable.setDescription('a table listing the contents of the event log as an array of strings.')
netraCtRscEventLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 2, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscEventLogIndex"))
if mibBuilder.loadTexts: netraCtRscEventLogEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEventLogEntry.setDescription('an entry (conceptual row) in the netraCtRscEventLogTable.')
netraCtRscEventLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscEventLogIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEventLogIndex.setDescription('The index of the entry. The oldest entry will start at index 0. The most recent entry will be found at the index equal to netraCtRscEventLogCount - 1.')
netraCtRscEventLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscEventLogTimeStamp.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEventLogTimeStamp.setDescription('event timestamp')
netraCtRscEventLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscEventLogMessage.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEventLogMessage.setDescription('textual description of an event.')
netraCtRscOrigConsoleLogCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogCount.setDescription('current number of lines in the original console log.')
netraCtRscOrigConsoleLogTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 4), )
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogTable.setDescription('a table listing the contents of the original console log as an array of strings.')
netraCtRscOrigConsoleLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 4, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscOrigConsoleLogIndex"))
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogEntry.setDescription('an entry (conceptual row) in the netraCtRscOrigConsoleLogTable.')
netraCtRscOrigConsoleLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogIndex.setDescription('The index of the entry. The oldest entry will start at index 0. The most recent entry will be found at the index equal to netraCtRscOrigConsoleLogCount - 1.')
netraCtRscOrigConsoleLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogTimeStamp.setStatus('current')
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogTimeStamp.setDescription('Original Console Log timestamp')
netraCtRscOrigConsoleLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogMessage.setStatus('current')
if mibBuilder.loadTexts: netraCtRscOrigConsoleLogMessage.setDescription('textual description of an event.')
netraCtRscConsoleLogCount = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscConsoleLogCount.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleLogCount.setDescription('current number of lines in the console log.')
netraCtRscConsoleLogTable = MibTable((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 6), )
if mibBuilder.loadTexts: netraCtRscConsoleLogTable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleLogTable.setDescription('a table listing the contents of the console log as an array of strings.')
netraCtRscConsoleLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 6, 1), ).setIndexNames((0, "SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscConsoleLogIndex"))
if mibBuilder.loadTexts: netraCtRscConsoleLogEntry.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleLogEntry.setDescription('an entry (conceptual row) in the netraCtRscConsoleLogTable.')
netraCtRscConsoleLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscConsoleLogIndex.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleLogIndex.setDescription('The index of the entry. The oldest entry will start at index 0. The most recent entry will be found at the index equal to netraCtRscConsoleLogCount - 1.')
netraCtRscConsoleLogTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscConsoleLogTimeStamp.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleLogTimeStamp.setDescription('Console Log timestamp')
netraCtRscConsoleLogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netraCtRscConsoleLogMessage.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleLogMessage.setDescription('textual description of an event.')
netraCtRscConsoleReset = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 1, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("set", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscConsoleReset.setStatus('current')
if mibBuilder.loadTexts: netraCtRscConsoleReset.setDescription('When set, the console log is reset so that the current log is copied over to the original console log, and the the console log will be cleared. All new console messages will then go to the console log.clear(2) setting is read-only.')
netraCtRscRCCPowerOnEnable = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscRCCPowerOnEnable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscRCCPowerOnEnable.setDescription('If set to false, masks the RCC PowerOn command.')
netraCtRscRCCPowerOffEnable = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscRCCPowerOffEnable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscRCCPowerOffEnable.setDescription('If set to false, masks the RCC PowerOff command.')
netraCtRscRCCResetEnable = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 2147483647))).clone(namedValues=NamedValues(("on", 1), ("off", 2), ("notimpl", 2147483647)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscRCCResetEnable.setStatus('current')
if mibBuilder.loadTexts: netraCtRscRCCResetEnable.setDescription('If set to false, masks the RCC Reset command.')
netraCtRscRCCLinkNum = MibScalar((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netraCtRscRCCLinkNum.setStatus('current')
if mibBuilder.loadTexts: netraCtRscRCCLinkNum.setDescription('2-byte string that defines the RCC Linknum address.')
netraCtRscEvent = NotificationType((1, 3, 6, 1, 4, 1, 42, 2, 65, 2, 2, 0, 1)).setObjects(("SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscAlarmID"), ("SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscAlarmOperState"), ("SUN-SNMP-NETRA-CT-RSC-MIB", "netraCtRscAlarmPrefix"))
if mibBuilder.loadTexts: netraCtRscEvent.setStatus('current')
if mibBuilder.loadTexts: netraCtRscEvent.setDescription('Event used to notify the snmp manager of a new RSC event. An event is generated when one of the values: netraCtRscAlarmOperState, in the Table:netraCtRscAlarmTable changes state.')
mibBuilder.exportSymbols("SUN-SNMP-NETRA-CT-RSC-MIB", netraCtRscExpmnt=netraCtRscExpmnt, netraCtRscMailUser=netraCtRscMailUser, netraCtRscSerial2PagerOneConfig=netraCtRscSerial2PagerOneConfig, netraCtRscOrigConsoleLogTimeStamp=netraCtRscOrigConsoleLogTimeStamp, netraCtRscVersionFirmwareMicro=netraCtRscVersionFirmwareMicro, netraCtRscEventLogTimeStamp=netraCtRscEventLogTimeStamp, netraCtRscPanicDump=netraCtRscPanicDump, netraCtRscMailHostAddressBackup=netraCtRscMailHostAddressBackup, netraCtRscOrigConsoleLogIndex=netraCtRscOrigConsoleLogIndex, netraCtRscCountryCode=netraCtRscCountryCode, netraCtRscRccConfig=netraCtRscRccConfig, netraCtRscSerial2PagerTwoBaud=netraCtRscSerial2PagerTwoBaud, netraCtRscPowerSupplyAdminState=netraCtRscPowerSupplyAdminState, netraCtRscIPAddress=netraCtRscIPAddress, netraCtRscEventLogTable=netraCtRscEventLogTable, netraCtRscSNMPHostAddress=netraCtRscSNMPHostAddress, netraCtRscPowerSupplyOperState=netraCtRscPowerSupplyOperState, netraCtRscEventLogEntry=netraCtRscEventLogEntry, netraCtRscCustomerInfo=netraCtRscCustomerInfo, netraCtRscFanTable=netraCtRscFanTable, netraCtRscEvent=netraCtRscEvent, netraCtRscGlobalPPPFlag=netraCtRscGlobalPPPFlag, netraCtRscConfigObjs=netraCtRscConfigObjs, netraCtRscTemperatureIndex=netraCtRscTemperatureIndex, netraCtRscObjs=netraCtRscObjs, netraCtRscAlarmID=netraCtRscAlarmID, netraCtRscEnetTpeLinkTest=netraCtRscEnetTpeLinkTest, DateAndTime=DateAndTime, netraCtRscVersionFirmwareMinor=netraCtRscVersionFirmwareMinor, netraCtRscSystemType=netraCtRscSystemType, netraCtRscAlarmOperState=netraCtRscAlarmOperState, netraCtRscAdminXir=netraCtRscAdminXir, netraCtRscConsoleLogCount=netraCtRscConsoleLogCount, netraCtRscPowerSupplyEntry=netraCtRscPowerSupplyEntry, netraCtRscSerial2Data=netraCtRscSerial2Data, netraCtRscOrigConsoleLogEntry=netraCtRscOrigConsoleLogEntry, netraCtRscHostname=netraCtRscHostname, netraCtRscEnvObjs=netraCtRscEnvObjs, netraCtRscSerial2PagerOneStop=netraCtRscSerial2PagerOneStop, netraCtRscVersionMainMinor=netraCtRscVersionMainMinor, netraCtRscSerial2Parity=netraCtRscSerial2Parity, netraCtRscSerial2PagerTwoPassword=netraCtRscSerial2PagerTwoPassword, netraCtRscSerial2Objs=netraCtRscSerial2Objs, netraCtRscVersionMainMicro=netraCtRscVersionMainMicro, netraCtRscConsoleLogTable=netraCtRscConsoleLogTable, netraCtRscSerial2PagerOneInit=netraCtRscSerial2PagerOneInit, netraCtRscVersionFirmwareMajor=netraCtRscVersionFirmwareMajor, netraCtRscEnetObjs=netraCtRscEnetObjs, netraCtRscSerial2PagerTwoInit=netraCtRscSerial2PagerTwoInit, netraCtRscAlarmTable=netraCtRscAlarmTable, netraCtRscOrigConsoleLogTable=netraCtRscOrigConsoleLogTable, netraCtRscVersionBootMinor=netraCtRscVersionBootMinor, netraCtRscVersionBootMajor=netraCtRscVersionBootMajor, netraCtRscSerial2PagerOneParity=netraCtRscSerial2PagerOneParity, netraCtRscAdminBreak=netraCtRscAdminBreak, netraCtRscSerial2Stop=netraCtRscSerial2Stop, netraCtRscFanPresent=netraCtRscFanPresent, netraCtRscIpGateway=netraCtRscIpGateway, netraCtRscTrapPrefix=netraCtRscTrapPrefix, netraCtRscVersionBootMicro=netraCtRscVersionBootMicro, netraCtRscTemperatureEntry=netraCtRscTemperatureEntry, netraCtRscSerial2Mode=netraCtRscSerial2Mode, netraCtRscMacAddress=netraCtRscMacAddress, netraCtRscFanIndex=netraCtRscFanIndex, netraCtRscEscape=netraCtRscEscape, netraCtRscFanEntry=netraCtRscFanEntry, netraCtRscAlarmIndex=netraCtRscAlarmIndex, netraCtRscAlarmAdminState=netraCtRscAlarmAdminState, netraCtRscPPPRemoteIP=netraCtRscPPPRemoteIP, netraCtRscPowerSupplyCount=netraCtRscPowerSupplyCount, netraCtRscTemperatureValue=netraCtRscTemperatureValue, netraCtRscAdminObjs=netraCtRscAdminObjs, netraCtRscGlobalEmailFlag=netraCtRscGlobalEmailFlag, netraCtRscPowerSupplyTable=netraCtRscPowerSupplyTable, netraCtRscConsoleLogMessage=netraCtRscConsoleLogMessage, netraCtRscConsoleReset=netraCtRscConsoleReset, netraCtRscTemperatureDesc=netraCtRscTemperatureDesc, netraCtRscSerial2Baud=netraCtRscSerial2Baud, netraCtRscTemperatureValid=netraCtRscTemperatureValid, netraCtRscSerial2HwFlowcontrol=netraCtRscSerial2HwFlowcontrol, netraCtRscModemStop=netraCtRscModemStop, PYSNMP_MODULE_ID=netraCtRscMIB, netraCtRscRCCResetEnable=netraCtRscRCCResetEnable, netraCtRscTemperatureTable=netraCtRscTemperatureTable, netraCtRscConsoleLogIndex=netraCtRscConsoleLogIndex, netraCtRscLogObjs=netraCtRscLogObjs, netraCtRscRCCLinkNum=netraCtRscRCCLinkNum, netraCtRscPowerSupplyPresent=netraCtRscPowerSupplyPresent, netraCtRscOrigConsoleLogMessage=netraCtRscOrigConsoleLogMessage, netraCtRscSerial2Inactivity=netraCtRscSerial2Inactivity, netraCtRscOrigConsoleLogCount=netraCtRscOrigConsoleLogCount, netraCtRscSerial2PagerOneData=netraCtRscSerial2PagerOneData, netraCtRscPPPLocalIP=netraCtRscPPPLocalIP, netraCtRscTOD=netraCtRscTOD, netraCtRscConsoleLogEntry=netraCtRscConsoleLogEntry, netraCtRscTemperatureHighWarn=netraCtRscTemperatureHighWarn, netraCtRscModemModel=netraCtRscModemModel, netraCtRscConsoleLogTimeStamp=netraCtRscConsoleLogTimeStamp, netraCtRscEventLogCount=netraCtRscEventLogCount, netraCtRscSerial2PagerOneBaud=netraCtRscSerial2PagerOneBaud, netraCtRscAlarmPrefix=netraCtRscAlarmPrefix, netraCtRscSerial2PagerTwoConfig=netraCtRscSerial2PagerTwoConfig, netraCtRscMailHostAddress=netraCtRscMailHostAddress, netraCtRscHostWatchDogTimeout=netraCtRscHostWatchDogTimeout, netraCtRscTemperatureCount=netraCtRscTemperatureCount, netraCtRscModemData=netraCtRscModemData, netraCtRscSerial2PagerTwoData=netraCtRscSerial2PagerTwoData, netraCtRscAdminNmi=netraCtRscAdminNmi, netraCtRscAlarmEntry=netraCtRscAlarmEntry, netraCtRscSerial2PagerTwoParity=netraCtRscSerial2PagerTwoParity, netraCtRscEvents=netraCtRscEvents, netraCtRscAdminRscReset=netraCtRscAdminRscReset, netraCtRscFanCount=netraCtRscFanCount, netraCtRscPowerSupplyIndex=netraCtRscPowerSupplyIndex, netraCtRscFanStatus=netraCtRscFanStatus, netraCtRscTemperatureLowWarn=netraCtRscTemperatureLowWarn, netraCtRscAlarmCount=netraCtRscAlarmCount, netraCtRscIpMask=netraCtRscIpMask, netraCtRscGlobalPageFlag=netraCtRscGlobalPageFlag, netraCtRscRCCPowerOnEnable=netraCtRscRCCPowerOnEnable, netraCtRscMIB=netraCtRscMIB, netraCtRscHostWatchDogReboot=netraCtRscHostWatchDogReboot, netraCtRscGlobalIPModeFlag=netraCtRscGlobalIPModeFlag, netraCtRscModemParity=netraCtRscModemParity, netraCtRscRCCPowerOffEnable=netraCtRscRCCPowerOffEnable, netraCtRscModemObjs=netraCtRscModemObjs, netraCtRscEventLogMessage=netraCtRscEventLogMessage, netraCtRscVersionMainMajor=netraCtRscVersionMainMajor, netraCtRscSerial2PagerOnePassword=netraCtRscSerial2PagerOnePassword, netraCtRscAdminHostReset=netraCtRscAdminHostReset, netraCtRscSerial2PagerTwoStop=netraCtRscSerial2PagerTwoStop, netraCtRscEventLogIndex=netraCtRscEventLogIndex)
