#
# PySNMP MIB module Wellfleet-NML-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-NML-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, mgmt, Gauge32, IpAddress, iso, Opaque, Counter32, mib_2, Counter64, ModuleIdentity, Integer32, enterprises, Unsigned32, ObjectIdentity, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "mgmt", "Gauge32", "IpAddress", "iso", "Opaque", "Counter32", "mib-2", "Counter64", "ModuleIdentity", "Integer32", "enterprises", "Unsigned32", "ObjectIdentity", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
wfBridgeGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfBridgeGroup")
wfBrNativeModeLan = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5))
wfNmlBaseTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2), )
if mibBuilder.loadTexts: wfNmlBaseTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlBaseTable.setDescription('NML Base record - Contains NML Configuration parameters')
wfNmlBaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1), ).setIndexNames((0, "Wellfleet-NML-MIB", "wfNmlCircuit"))
if mibBuilder.loadTexts: wfNmlBaseEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlBaseEntry.setDescription('An entry in the NML Base table')
wfNmlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlDelete.setDescription('Create/Delete parameter')
wfNmlDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlDisable.setDescription('Enable/Disable parameter')
wfNmlCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlCircuit.setDescription('Circuit being used')
wfNmlAddSecurityHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("add", 1), ("check", 2), ("drop", 3))).clone('add')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlAddSecurityHeader.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlAddSecurityHeader.setDescription('Indicates if Security header should be added and verified or just verified on egress of this circuit')
wfNmlSAIDType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("individual", 1), ("group", 2))).clone('individual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlSAIDType.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlSAIDType.setDescription('Type of SAID to be used. Group or individual')
wfNmlSAIDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlSAIDValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlSAIDValue.setDescription('Indicates value for Group or Individual SAID')
wfNmlCUGValue = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlCUGValue.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlCUGValue.setDescription('Indicates Closed User Group id to be placed in MDF field of frame')
wfNmlCUGDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("drop", 1), ("forward", 2))).clone('drop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlCUGDrop.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlCUGDrop.setDescription('Indicates action to perfrom if security search of table fails')
wfNmlCUGPacketsDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlCUGPacketsDropped.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlCUGPacketsDropped.setDescription('Indicates packets dropped for security check')
wfNmlTrafficFilterTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3), )
if mibBuilder.loadTexts: wfNmlTrafficFilterTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterTable.setDescription('Native mode Lan Traffic Filters')
wfNmlTrafficFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1), ).setIndexNames((0, "Wellfleet-NML-MIB", "wfNmlTrafficFilterCircuit"), (0, "Wellfleet-NML-MIB", "wfNmlTrafficFilterRuleNumber"), (0, "Wellfleet-NML-MIB", "wfNmlTrafficFilterFragment"))
if mibBuilder.loadTexts: wfNmlTrafficFilterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterEntry.setDescription('An entry in wfNmlTrafficFilterTable.')
wfNmlTrafficFilterCreate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterCreate.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterCreate.setDescription('Defines the existence of the traffic filter rule: created - traffic filter exists delete - traffic filter does not exist and can be deleted.')
wfNmlTrafficFilterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterEnable.setDescription('Defines whether or not the traffic filter rule should be used: enabled - activate the rule. disabled - inactivate the rule.')
wfNmlTrafficFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("error", 2), ("inactive", 3))).clone('inactive')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterStatus.setDescription('Defines the current status of the traffic filter: inactive - the rule is not in use. active - the rule is being used. error - the application detected an error in the rule.')
wfNmlTrafficFilterCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterCounter.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterCounter.setDescription('The number of received packets that have matched this rule.')
wfNmlTrafficFilterDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 5), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterDefinition.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterDefinition.setDescription('The filter rule definition.')
wfNmlTrafficFilterReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterReserved.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterReserved.setDescription('Reserved field.')
wfNmlTrafficFilterCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterCircuit.setDescription('The ID of the Bridge Circuit to which the filter is applied.')
wfNmlTrafficFilterRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterRuleNumber.setDescription('ID for the rule.')
wfNmlTrafficFilterFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfNmlTrafficFilterFragment.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterFragment.setDescription('Fragment number - for large rules.')
wfNmlTrafficFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 1, 1, 5, 3, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfNmlTrafficFilterName.setStatus('mandatory')
if mibBuilder.loadTexts: wfNmlTrafficFilterName.setDescription('name of the rule number')
mibBuilder.exportSymbols("Wellfleet-NML-MIB", wfNmlTrafficFilterReserved=wfNmlTrafficFilterReserved, wfNmlSAIDValue=wfNmlSAIDValue, wfNmlCircuit=wfNmlCircuit, wfNmlTrafficFilterTable=wfNmlTrafficFilterTable, wfNmlTrafficFilterCounter=wfNmlTrafficFilterCounter, wfNmlCUGDrop=wfNmlCUGDrop, wfNmlTrafficFilterEntry=wfNmlTrafficFilterEntry, wfNmlDelete=wfNmlDelete, wfNmlTrafficFilterRuleNumber=wfNmlTrafficFilterRuleNumber, wfNmlTrafficFilterStatus=wfNmlTrafficFilterStatus, wfNmlCUGPacketsDropped=wfNmlCUGPacketsDropped, wfNmlSAIDType=wfNmlSAIDType, wfNmlTrafficFilterEnable=wfNmlTrafficFilterEnable, wfNmlDisable=wfNmlDisable, wfNmlTrafficFilterDefinition=wfNmlTrafficFilterDefinition, wfBrNativeModeLan=wfBrNativeModeLan, wfNmlBaseTable=wfNmlBaseTable, wfNmlAddSecurityHeader=wfNmlAddSecurityHeader, wfNmlTrafficFilterCircuit=wfNmlTrafficFilterCircuit, wfNmlTrafficFilterName=wfNmlTrafficFilterName, wfNmlTrafficFilterFragment=wfNmlTrafficFilterFragment, wfNmlBaseEntry=wfNmlBaseEntry, wfNmlTrafficFilterCreate=wfNmlTrafficFilterCreate, wfNmlCUGValue=wfNmlCUGValue)
