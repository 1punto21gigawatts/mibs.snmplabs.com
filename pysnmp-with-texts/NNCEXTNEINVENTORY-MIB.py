#
# PySNMP MIB module NNCEXTNEINVENTORY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NNCEXTNEINVENTORY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:22:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
entPhysicalIndex, entPhysicalEntry = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalIndex", "entPhysicalEntry")
nncExtensions, = mibBuilder.importSymbols("NNCGNI0001-SMI", "nncExtensions")
NncSwBank, NncSwStatus = mibBuilder.importSymbols("NNCGNI0006-MIB", "NncSwBank", "NncSwStatus")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, NotificationType, Counter32, Bits, iso, Gauge32, IpAddress, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Counter64, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "NotificationType", "Counter32", "Bits", "iso", "Gauge32", "IpAddress", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Counter64", "ModuleIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nncExtNEInventory = ModuleIdentity((1, 3, 6, 1, 4, 1, 123, 3, 69))
if mibBuilder.loadTexts: nncExtNEInventory.setLastUpdated('9904151645Z')
if mibBuilder.loadTexts: nncExtNEInventory.setOrganization('Newbridge Networks Corporation')
if mibBuilder.loadTexts: nncExtNEInventory.setContactInfo('Newbridge Networks Corporation Postal: 600 March Road Kanata, Ontario Canada K2K 2E6 Phone: +1 613 591 3600 Fax: +1 613 591 3680')
if mibBuilder.loadTexts: nncExtNEInventory.setDescription('This module contains definition for monitoring the inventory of network elements in a network. The module can be used to query the information of different network elements for information such as identity, associated identity numbers, software banks, software in the banks and their status.')
nncExtNEInventoryObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 69, 1))
nncExtNEInventoryGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 69, 2))
nncExtNEInventoryCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 123, 3, 69, 3))
nncNEInventoryTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1), )
if mibBuilder.loadTexts: nncNEInventoryTable.setStatus('current')
if mibBuilder.loadTexts: nncNEInventoryTable.setDescription('The nncNEInventoryTable contains objects of interest to the network inventory manager.')
nncNEInventoryTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1), )
entPhysicalEntry.registerAugmentions(("NNCEXTNEINVENTORY-MIB", "nncNEInventoryTableEntry"))
nncNEInventoryTableEntry.setIndexNames(*entPhysicalEntry.getIndexNames())
if mibBuilder.loadTexts: nncNEInventoryTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncNEInventoryTableEntry.setDescription('This is an entry in the nncNEInventoryTable.')
nncNEInvAssemblyName = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyName.setStatus('current')
if mibBuilder.loadTexts: nncNEInvAssemblyName.setDescription('Describes textually the generally used name of the assembly as used on local craft interface. This is a string available from the system software.')
nncNEInvSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 2), DisplayString().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvSerialNumber.setStatus('current')
if mibBuilder.loadTexts: nncNEInvSerialNumber.setDescription('The serial number of the assembly. It is variable length string. It is unique across the customer orderable entities and may be shared by multiple assemblies. If an entity does not have this number, default value is returned.')
nncNEInvAssemblyIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyIdentity.setStatus('current')
if mibBuilder.loadTexts: nncNEInvAssemblyIdentity.setDescription('Describes the identity of the assembly. The format is HHHHLLLLRRVV where HHHHLLLL is the card identity. HHHH refers to Card Identifier (High Word), LLLL refers to Card Identifier(Low Word). RR is the major revision and VV is the minor revision. If an entity does not have this number, default value is returned.')
nncNEInvMktgPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvMktgPartNo.setStatus('current')
if mibBuilder.loadTexts: nncNEInvMktgPartNo.setDescription('The marketing part number(90 level). Some customer non-orderable assemblies do not have this number and are expected to return the default value. The marketing number is of format 90-SSSS-VV-CC-MMM where SSSS is sequence number, VV is the variant, CC is customer code and MMM is manufacturing code.')
nncNEInvEnggPartNo = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18)).clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvEnggPartNo.setStatus('current')
if mibBuilder.loadTexts: nncNEInvEnggPartNo.setDescription('Describes the engineering part number(87 level). Every assembly is expected to have this number. The format is 87-SSSS-VV-PR where SSSS is assembly number, VV is variant, P is copper platform and R is revision. Default value is returned whenever there is a failure to get this information. For example, if a card is configured but not installed, then a default value is returned.')
nncNEInvRestartCause = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 6), DisplayString().clone(hexValue="")).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvRestartCause.setStatus('current')
if mibBuilder.loadTexts: nncNEInvRestartCause.setDescription('Indicates the cause of the most recent restart for an assembly. Assemblies that do not have this information are expected to return a default value.')
nncNEInvAssemblyNoOfSwBanks = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyNoOfSwBanks.setStatus('current')
if mibBuilder.loadTexts: nncNEInvAssemblyNoOfSwBanks.setDescription('Describes the total number of software banks on this assembly including the boot bank. For example: assemblies that have processors have three banks. The enumeration starts with zero to indicate absence of any software bank on the assembly.')
nncNEInvAssemblyActiveSwBank = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 8), NncSwBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyActiveSwBank.setStatus('current')
if mibBuilder.loadTexts: nncNEInvAssemblyActiveSwBank.setDescription('Indicates the software bank which is current and active. The default value of NotApplicable(0) indicates the entity without software banks. On the other hand, if there is a failure to obtain this information, Unknown(257) is returned. For example, if a card is configured but not installed, Unknown(257) is returned.')
nncNEInvAssemblyNextActiveSwBank = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 1, 1, 9), NncSwBank()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncNEInvAssemblyNextActiveSwBank.setStatus('current')
if mibBuilder.loadTexts: nncNEInvAssemblyNextActiveSwBank.setDescription('Indicates the software bank which will be active when the card resets. The default value of NotApplicable(0) indicates the entity without software banks. On the other hand, if there is a failure to obtain this information, Unknown(257) is returned. For example, if a card is configured but not installed, Unknown(257) is returned.')
nncAssemblySwBanksTable = MibTable((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2), )
if mibBuilder.loadTexts: nncAssemblySwBanksTable.setStatus('current')
if mibBuilder.loadTexts: nncAssemblySwBanksTable.setDescription("The nncAssemblySwBanksTable contains objects of interest in the software banks to the network inventory manager. An assembly may have software banks and these banks are numbered from 1 till the total software banks on the assembly. An assembly with no software bank has nncNEInvAssemblyNoOfSwBanks equal to zero. The banks on the assembly may store a software generic. The bank which holds the currently running software is indicated by nncNEInvAssemblyActiveSwBank. The same software bank or any other software bank may be the 'Next' bank which becomes 'Active' upon reset. The next bank for the given assembly can be retrieved by doing a get against instance of the nncNEInvAssemblyNextActiveSwBank. Each of these banks can be identified distinctly with the entPhysicalIndex of the assembly and the software bank number on the assembly.")
nncAssemblySwBanksTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankNumber"))
if mibBuilder.loadTexts: nncAssemblySwBanksTableEntry.setStatus('current')
if mibBuilder.loadTexts: nncAssemblySwBanksTableEntry.setDescription('This is an entry in the nncAssemblySwBanksTable.')
nncAssemblySwBankNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAssemblySwBankNumber.setStatus('current')
if mibBuilder.loadTexts: nncAssemblySwBankNumber.setDescription('Refers to the software bank number of interest. The bank numbers should start with 1 and should extend to the total number of banks on the assembly. For assemblies with no software banks there are no entries in this table.')
nncAssemblySwBankGeneric = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAssemblySwBankGeneric.setStatus('current')
if mibBuilder.loadTexts: nncAssemblySwBankGeneric.setDescription("The software generic in the software bank. The format of the generic software number is ZAABCD-EF-GH where ZAAB comprises of the product identifier, C is the target type and is 1 for target load and S for simulator. The D is the product release number, E is the build type and is R for R&D internal load, F for field trials, H for hardened product loads and D for demo loads. F is the dot release number and GH is the maintenance build and minor build number. This is available from system software. If the software bank is empty, the default string 'CheckBankSts' is returned. If software generic is not available because the card does not have software banks or because the card is not installed, NoSuchName is returned.")
nncAssemblySwBankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 123, 3, 69, 1, 2, 1, 3), NncSwStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nncAssemblySwBankStatus.setStatus('current')
if mibBuilder.loadTexts: nncAssemblySwBankStatus.setDescription('The status of the software in the software bank. NoSuchName is expected to be returned for status of a software bank that does not exist or if the information is not available. ')
nncNEPhysInventoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 69, 2, 1)).setObjects(("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyName"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvSerialNumber"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyIdentity"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvMktgPartNo"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvEnggPartNo"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvRestartCause"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyNoOfSwBanks"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyActiveSwBank"), ("NNCEXTNEINVENTORY-MIB", "nncNEInvAssemblyNextActiveSwBank"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncNEPhysInventoryGroup = nncNEPhysInventoryGroup.setStatus('current')
if mibBuilder.loadTexts: nncNEPhysInventoryGroup.setDescription('Collection of objects providing the physical network element inventory information.')
nncNEPhysAssemblySwBankGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 123, 3, 69, 2, 2)).setObjects(("NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankNumber"), ("NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankGeneric"), ("NNCEXTNEINVENTORY-MIB", "nncAssemblySwBankStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncNEPhysAssemblySwBankGroup = nncNEPhysAssemblySwBankGroup.setStatus('current')
if mibBuilder.loadTexts: nncNEPhysAssemblySwBankGroup.setDescription('Collection of objects providing the assembly bank information.')
nncNEInvCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 123, 3, 69, 3, 1)).setObjects(("NNCEXTNEINVENTORY-MIB", "nncNEPhysInventoryGroup"), ("NNCEXTNEINVENTORY-MIB", "nncNEPhysAssemblySwBankGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    nncNEInvCompliance = nncNEInvCompliance.setStatus('current')
if mibBuilder.loadTexts: nncNEInvCompliance.setDescription('The compliance statement for Newbridge SNMP entities which are network elements containing associated inventory information.')
mibBuilder.exportSymbols("NNCEXTNEINVENTORY-MIB", nncAssemblySwBankNumber=nncAssemblySwBankNumber, PYSNMP_MODULE_ID=nncExtNEInventory, nncNEInvRestartCause=nncNEInvRestartCause, nncExtNEInventory=nncExtNEInventory, nncNEInvAssemblyIdentity=nncNEInvAssemblyIdentity, nncNEInventoryTableEntry=nncNEInventoryTableEntry, nncExtNEInventoryGroups=nncExtNEInventoryGroups, nncAssemblySwBankStatus=nncAssemblySwBankStatus, nncAssemblySwBanksTableEntry=nncAssemblySwBanksTableEntry, nncNEInvAssemblyName=nncNEInvAssemblyName, nncNEInvAssemblyNextActiveSwBank=nncNEInvAssemblyNextActiveSwBank, nncNEInvMktgPartNo=nncNEInvMktgPartNo, nncNEInvSerialNumber=nncNEInvSerialNumber, nncExtNEInventoryObjects=nncExtNEInventoryObjects, nncNEInvAssemblyActiveSwBank=nncNEInvAssemblyActiveSwBank, nncNEInvCompliance=nncNEInvCompliance, nncAssemblySwBanksTable=nncAssemblySwBanksTable, nncExtNEInventoryCompliances=nncExtNEInventoryCompliances, nncAssemblySwBankGeneric=nncAssemblySwBankGeneric, nncNEInvAssemblyNoOfSwBanks=nncNEInvAssemblyNoOfSwBanks, nncNEPhysInventoryGroup=nncNEPhysInventoryGroup, nncNEPhysAssemblySwBankGroup=nncNEPhysAssemblySwBankGroup, nncNEInvEnggPartNo=nncNEInvEnggPartNo, nncNEInventoryTable=nncNEInventoryTable)
