#
# PySNMP MIB module FORTINET-FORTIMAIL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FORTINET-FORTIMAIL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:14:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
FnSessionProto, FnBoolState, fortinet, FnIndex = mibBuilder.importSymbols("FORTINET-CORE-MIB", "FnSessionProto", "FnBoolState", "fortinet", "FnIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, NotificationType, Counter64, Unsigned32, TimeTicks, MibIdentifier, Integer32, ObjectIdentity, Gauge32, ModuleIdentity, Counter32, Bits, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Counter64", "Unsigned32", "TimeTicks", "MibIdentifier", "Integer32", "ObjectIdentity", "Gauge32", "ModuleIdentity", "Counter32", "Bits", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
fnFortiMailMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 12356, 105))
fnFortiMailMib.setRevisions(('2010-03-23 00:00', '2009-10-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: fnFortiMailMib.setRevisionsDescriptions(('Inherit FORTINET-CORE-MIB, combine FortiMail traps', 'MIB module for FortiMail devices.',))
if mibBuilder.loadTexts: fnFortiMailMib.setLastUpdated('201003230000Z')
if mibBuilder.loadTexts: fnFortiMailMib.setOrganization('Fortinet Technologies, Inc.')
if mibBuilder.loadTexts: fnFortiMailMib.setContactInfo('Technical Support email: support@fortinet.com http://www.fortinet.com ')
if mibBuilder.loadTexts: fnFortiMailMib.setDescription('MIB module for Fortinet FortiMail devices')
class FmlOpMode(TextualConvention, Integer32):
    description = 'fortimail operation mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("gateway", 1), ("transparent", 2), ("server", 3))

class FmlSysEventCodeVal(TextualConvention, Integer32):
    description = 'enumerated type for System component events.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("systemHalt", 1), ("systemReboot", 2), ("systemReload", 3), ("systemUpgrade", 4), ("guiUpgrade", 5), ("logdiskFormat", 6), ("maildiskFormat", 7), ("avDBUpdate", 8))

class FmlRAIDCodeVal(TextualConvention, Integer32):
    description = 'enumerated type for RAID system events.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("degradedArray", 1), ("sparesMissing", 2), ("rebuildStarted", 3), ("rebuildFinished", 4), ("fail", 5), ("failSpare", 6), ("spareActive", 7))

class FmlHAEventIdVal(TextualConvention, Integer32):
    description = 'enumerated type for HA events.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("masterUnitSwitch", 1), ("slaveUnitSwitch", 2), ("unitShutdown", 3))

class FmlHAModeVal(TextualConvention, Integer32):
    description = 'enumerated type for HA mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("off", 0), ("master", 1), ("slave", 2), ("configMaster", 3), ("configSlave", 4))

fmlTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 0))
fmlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1))
fmlSysOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101))
fmlIp = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102))
fmlMailOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 103))
fmlHwSensors = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110))
fmlSysHA = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 1, 200))
fmlMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 12356, 105, 600))
fmlSysModel = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysModel.setStatus('current')
if mibBuilder.loadTexts: fmlSysModel.setDescription('System model string')
fmlSysSerial = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysSerial.setStatus('current')
if mibBuilder.loadTexts: fmlSysSerial.setDescription('Device serial number')
fmlSysVersion = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysVersion.setStatus('current')
if mibBuilder.loadTexts: fmlSysVersion.setDescription('Device firmware version')
fmlSysVersionAv = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysVersionAv.setStatus('current')
if mibBuilder.loadTexts: fmlSysVersionAv.setDescription('Antivirus DB version')
fmlSysOpMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 5), FmlOpMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOpMode.setStatus('current')
if mibBuilder.loadTexts: fmlSysOpMode.setDescription('Operational mode (Gateway, Transparent or Server)')
fmlSysCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysCpuUsage.setStatus('current')
if mibBuilder.loadTexts: fmlSysCpuUsage.setDescription('Instantaneous CPU usage')
fmlSysMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysMemUsage.setStatus('current')
if mibBuilder.loadTexts: fmlSysMemUsage.setDescription('Instantaneous memory utilization')
fmlSysLogDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysLogDiskUsage.setStatus('current')
if mibBuilder.loadTexts: fmlSysLogDiskUsage.setDescription('Instantaneous log disk usage')
fmlSysMailDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysMailDiskUsage.setStatus('current')
if mibBuilder.loadTexts: fmlSysMailDiskUsage.setDescription('Instantaneous mail disk usage')
fmlSysSesCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysSesCount.setStatus('current')
if mibBuilder.loadTexts: fmlSysSesCount.setDescription('Instantaneous session count')
fmlSysEventCode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 11), FmlSysEventCodeVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlSysEventCode.setStatus('current')
if mibBuilder.loadTexts: fmlSysEventCode.setDescription('System component events')
fmlRAIDCode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 12), FmlRAIDCodeVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlRAIDCode.setStatus('current')
if mibBuilder.loadTexts: fmlRAIDCode.setDescription('RAID system events')
fmlRAIDDevName = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlRAIDDevName.setStatus('current')
if mibBuilder.loadTexts: fmlRAIDDevName.setDescription('RAID Device name')
fmlHAEventId = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 14), FmlHAEventIdVal()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlHAEventId.setStatus('current')
if mibBuilder.loadTexts: fmlHAEventId.setDescription('HA event type ID')
fmlHAUnitIp = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 15), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlHAUnitIp.setStatus('current')
if mibBuilder.loadTexts: fmlHAUnitIp.setDescription('Unit IP address where event occurs ')
fmlHAEventReason = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fmlHAEventReason.setStatus('current')
if mibBuilder.loadTexts: fmlHAEventReason.setDescription('The reason for the HA event')
fmlSysLoad = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysLoad.setStatus('current')
if mibBuilder.loadTexts: fmlSysLoad.setDescription('Instantaneous system load')
fmlSysOptIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOptIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: fmlSysOptIdleTimeout.setDescription('Idle period after which the administrator is automatically logged out off the system')
fmlSysOptAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOptAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: fmlSysOptAuthTimeout.setDescription('Authentication idle timeout value')
fmlSysOptsLcdProt = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 101, 4), FnBoolState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlSysOptsLcdProt.setStatus('current')
if mibBuilder.loadTexts: fmlSysOptsLcdProt.setDescription('Enable or disable LCD control buttons protection')
fmlIpSessTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2), )
if mibBuilder.loadTexts: fmlIpSessTable.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessTable.setDescription('IP Sessions Info')
fmlIpSessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1), ).setIndexNames((0, "FORTINET-FORTIMAIL-MIB", "fmlIpSessIndex"))
if mibBuilder.loadTexts: fmlIpSessEntry.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessEntry.setDescription('Particular IP Session info')
fmlIpSessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fmlIpSessIndex.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessIndex.setDescription('An index value that uniquely identifies an IP session')
fmlIpSessProto = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 2), FnSessionProto()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessProto.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessProto.setDescription('The protocol of the connection')
fmlIpSessFromAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessFromAddr.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessFromAddr.setDescription('Source IP address')
fmlIpSessFromPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessFromPort.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessFromPort.setDescription('Source Port number')
fmlIpSessToAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessToAddr.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessToAddr.setDescription('Destination IP address')
fmlIpSessToPort = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessToPort.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessToPort.setDescription('Destination Port number')
fmlIpSessExp = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 102, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlIpSessExp.setStatus('current')
if mibBuilder.loadTexts: fmlIpSessExp.setDescription('Time (in seconds) before connection expires')
fmlMailOptionsDeferQueue = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 103, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlMailOptionsDeferQueue.setStatus('current')
if mibBuilder.loadTexts: fmlMailOptionsDeferQueue.setDescription('Instantaneous deferred emails number')
fmlHwSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorCount.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorCount.setDescription('The number of hardware sensors in the system')
fmlHwSensorTable = MibTable((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2), )
if mibBuilder.loadTexts: fmlHwSensorTable.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorTable.setDescription('A list of hardware sensors in the sytem user accounts')
fmlHwSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1), ).setIndexNames((0, "FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntIndex"))
if mibBuilder.loadTexts: fmlHwSensorEntry.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorEntry.setDescription('An entry containing information of hardware sensors')
fmlHwSensorEntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 1), FnIndex())
if mibBuilder.loadTexts: fmlHwSensorEntIndex.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorEntIndex.setDescription('Index of the hardware sensors')
fmlHwSensorEntName = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorEntName.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorEntName.setDescription('Sensor Name')
fmlHwSensorEntValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorEntValue.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorEntValue.setDescription('Reading value of the sensor')
fmlHwSensorEntAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12356, 105, 1, 110, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHwSensorEntAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorEntAlarmStatus.setDescription('Alarm status of the sensor')
fmlHAMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 200, 1), FmlHAModeVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHAMode.setStatus('current')
if mibBuilder.loadTexts: fmlHAMode.setDescription('Configured HA mode')
fmlHAEffectiveMode = MibScalar((1, 3, 6, 1, 4, 1, 12356, 105, 1, 200, 2), FmlHAModeVal()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fmlHAEffectiveMode.setStatus('current')
if mibBuilder.loadTexts: fmlHAEffectiveMode.setDescription('Effective HA mode')
fmlTrapCpuHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 101)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapCpuHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: fmlTrapCpuHighThreshold.setDescription('Trap being sent if CPU usage becomes too high, which is defined in FORTINET-CORE-MIB')
fmlTrapMemLowThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 102)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapMemLowThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: fmlTrapMemLowThreshold.setDescription('Trap being sent if memory usage becomes too high, which is defined in FORTINET-CORE-MIB')
fmlTrapLogDiskHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 103)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapLogDiskHighThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: fmlTrapLogDiskHighThreshold.setDescription('Trap being sent if Log disk usage becomes too high, which is defined in FORTINET-CORE-MIB')
fmlTrapMailDiskHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 104)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapMailDiskHighThreshold.setStatus('current')
if mibBuilder.loadTexts: fmlTrapMailDiskHighThreshold.setDescription('Trap being sent if Mailbox disk usage becomes too high')
fmlTrapMailDeferredQueueHighThreshold = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 105)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapMailDeferredQueueHighThreshold.setStatus('current')
if mibBuilder.loadTexts: fmlTrapMailDeferredQueueHighThreshold.setDescription('Trap being sent if Mail server deferred emails becomes too high')
fmlTrapAvThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 106)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapAvThresholdEvent.setStatus('current')
if mibBuilder.loadTexts: fmlTrapAvThresholdEvent.setDescription('Trap being sent when detected virus number reaches the threshold')
fmlTrapSpamThresholdEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 107)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"))
if mibBuilder.loadTexts: fmlTrapSpamThresholdEvent.setStatus('current')
if mibBuilder.loadTexts: fmlTrapSpamThresholdEvent.setDescription('Trap being sent when detected spam email number reaches the threshold')
fmlTrapPSUFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 108)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntName"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntValue"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntAlarmStatus"))
if mibBuilder.loadTexts: fmlTrapPSUFailureEvent.setStatus('obsolete')
if mibBuilder.loadTexts: fmlTrapPSUFailureEvent.setDescription('Trap being sent when detected a power suply unit failure, which is defined in FORTINET-CORE-MIB')
fmlTrapSystemEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 201)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlSysEventCode"))
if mibBuilder.loadTexts: fmlTrapSystemEvent.setStatus('current')
if mibBuilder.loadTexts: fmlTrapSystemEvent.setDescription('Trap being sent when system component halt, reboot, upgrade etc.,')
fmlTrapRAIDEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 202)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDCode"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDDevName"))
if mibBuilder.loadTexts: fmlTrapRAIDEvent.setStatus('current')
if mibBuilder.loadTexts: fmlTrapRAIDEvent.setDescription('Trap being sent for RAID operation')
fmlTrapHAEvent = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 203)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventId"), ("FORTINET-FORTIMAIL-MIB", "fmlHAUnitIp"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventReason"))
if mibBuilder.loadTexts: fmlTrapHAEvent.setStatus('current')
if mibBuilder.loadTexts: fmlTrapHAEvent.setDescription('Trap being sent when HA event occurs')
fmlTrapIpChange = NotificationType((1, 3, 6, 1, 4, 1, 12356, 105, 0, 301)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: fmlTrapIpChange.setStatus('obsolete')
if mibBuilder.loadTexts: fmlTrapIpChange.setDescription('Trap being sent when IP address of the specified interface has been changed, which is defined in FORTINET-CORE-MIB')
fmlSystemConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 1)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysModel"), ("FORTINET-FORTIMAIL-MIB", "fmlSysSerial"), ("FORTINET-FORTIMAIL-MIB", "fmlSysVersion"), ("FORTINET-FORTIMAIL-MIB", "fmlSysVersionAv"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOpMode"), ("FORTINET-FORTIMAIL-MIB", "fmlSysCpuUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysMemUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysLogDiskUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysMailDiskUsage"), ("FORTINET-FORTIMAIL-MIB", "fmlSysSesCount"), ("FORTINET-FORTIMAIL-MIB", "fmlSysEventCode"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDCode"), ("FORTINET-FORTIMAIL-MIB", "fmlRAIDDevName"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventId"), ("FORTINET-FORTIMAIL-MIB", "fmlHAUnitIp"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEventReason"), ("FORTINET-FORTIMAIL-MIB", "fmlSysLoad"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlSystemConformanceGroup = fmlSystemConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlSystemConformanceGroup.setDescription('object related to fortimail system.')
fmlSysOptionsConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 2)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSysOptIdleTimeout"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOptAuthTimeout"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOptsLcdProt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlSysOptionsConformanceGroup = fmlSysOptionsConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlSysOptionsConformanceGroup.setDescription('object related to fortimail system option.')
fmlIpConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 3)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlIpSessProto"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessFromAddr"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessFromPort"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessToAddr"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessToPort"), ("FORTINET-FORTIMAIL-MIB", "fmlIpSessExp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlIpConformanceGroup = fmlIpConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlIpConformanceGroup.setDescription('object related to fortimail ip.')
fmlMailOptionsConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 4)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlMailOptionsDeferQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlMailOptionsConformanceGroup = fmlMailOptionsConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlMailOptionsConformanceGroup.setDescription('object reated to fortimail mail options.')
fmlHwSensorsConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 5)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlHwSensorCount"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntName"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntValue"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorEntAlarmStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlHwSensorsConformanceGroup = fmlHwSensorsConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlHwSensorsConformanceGroup.setDescription('object related to fortimail hw sensors.')
fmlHAModeConformanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 6)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlHAMode"), ("FORTINET-FORTIMAIL-MIB", "fmlHAEffectiveMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlHAModeConformanceGroup = fmlHAModeConformanceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlHAModeConformanceGroup.setDescription('object related to fortimail HA mode.')
fmlTrapsComplianceGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 7)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlTrapMailDiskHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapMailDeferredQueueHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapAvThresholdEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapSpamThresholdEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapSystemEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapRAIDEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapHAEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlTrapsComplianceGroup = fmlTrapsComplianceGroup.setStatus('current')
if mibBuilder.loadTexts: fmlTrapsComplianceGroup.setDescription('Event notifications')
fmlObsoleteTrapsComplianceGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12356, 105, 600, 8)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlTrapCpuHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapMemLowThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapLogDiskHighThreshold"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapPSUFailureEvent"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapIpChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlObsoleteTrapsComplianceGroup = fmlObsoleteTrapsComplianceGroup.setStatus('obsolete')
if mibBuilder.loadTexts: fmlObsoleteTrapsComplianceGroup.setDescription('Event notifications, items in this group are defined in FORTINET-CORE-MIB')
fmlMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 105, 600, 100)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlSystemConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlSysOptionsConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlIpConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlMailOptionsConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlHwSensorsConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlHAModeConformanceGroup"), ("FORTINET-FORTIMAIL-MIB", "fmlTrapsComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlMIBCompliance = fmlMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: fmlMIBCompliance.setDescription('the compliance statement for the application MIB.')
fmlObsoleteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 12356, 105, 600, 101)).setObjects(("FORTINET-FORTIMAIL-MIB", "fmlObsoleteTrapsComplianceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fmlObsoleteMIBCompliance = fmlObsoleteMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: fmlObsoleteMIBCompliance.setDescription('the obsolete compliance statement for the application MIB.')
mibBuilder.exportSymbols("FORTINET-FORTIMAIL-MIB", fmlHwSensorEntValue=fmlHwSensorEntValue, fmlTrapMailDiskHighThreshold=fmlTrapMailDiskHighThreshold, fmlSysOptionsConformanceGroup=fmlSysOptionsConformanceGroup, fmlMailOptionsDeferQueue=fmlMailOptionsDeferQueue, fnFortiMailMib=fnFortiMailMib, fmlHwSensorsConformanceGroup=fmlHwSensorsConformanceGroup, FmlOpMode=FmlOpMode, fmlIpSessTable=fmlIpSessTable, fmlHAModeConformanceGroup=fmlHAModeConformanceGroup, fmlSystemConformanceGroup=fmlSystemConformanceGroup, fmlSysOptIdleTimeout=fmlSysOptIdleTimeout, fmlHwSensorCount=fmlHwSensorCount, fmlSysHA=fmlSysHA, fmlMailOptions=fmlMailOptions, fmlTrapIpChange=fmlTrapIpChange, fmlHwSensors=fmlHwSensors, fmlIp=fmlIp, fmlSystem=fmlSystem, fmlTrapsComplianceGroup=fmlTrapsComplianceGroup, fmlMIBCompliance=fmlMIBCompliance, fmlHAEventReason=fmlHAEventReason, fmlRAIDCode=fmlRAIDCode, fmlSysLoad=fmlSysLoad, fmlHwSensorTable=fmlHwSensorTable, PYSNMP_MODULE_ID=fnFortiMailMib, fmlIpSessEntry=fmlIpSessEntry, fmlIpSessExp=fmlIpSessExp, FmlRAIDCodeVal=FmlRAIDCodeVal, fmlHAEffectiveMode=fmlHAEffectiveMode, fmlSysLogDiskUsage=fmlSysLogDiskUsage, fmlSysOptsLcdProt=fmlSysOptsLcdProt, fmlSysModel=fmlSysModel, fmlSysSerial=fmlSysSerial, FmlHAModeVal=FmlHAModeVal, FmlSysEventCodeVal=FmlSysEventCodeVal, fmlRAIDDevName=fmlRAIDDevName, fmlHwSensorEntName=fmlHwSensorEntName, fmlTrapLogDiskHighThreshold=fmlTrapLogDiskHighThreshold, fmlTrapPSUFailureEvent=fmlTrapPSUFailureEvent, fmlTrapAvThresholdEvent=fmlTrapAvThresholdEvent, fmlHAEventId=fmlHAEventId, fmlSysVersionAv=fmlSysVersionAv, fmlHAMode=fmlHAMode, fmlObsoleteMIBCompliance=fmlObsoleteMIBCompliance, fmlSysMemUsage=fmlSysMemUsage, fmlSysCpuUsage=fmlSysCpuUsage, fmlIpSessProto=fmlIpSessProto, fmlIpConformanceGroup=fmlIpConformanceGroup, fmlTrapSystemEvent=fmlTrapSystemEvent, fmlSysOpMode=fmlSysOpMode, fmlIpSessToAddr=fmlIpSessToAddr, fmlSysSesCount=fmlSysSesCount, fmlTrapMemLowThreshold=fmlTrapMemLowThreshold, fmlTrapCpuHighThreshold=fmlTrapCpuHighThreshold, fmlTrapHAEvent=fmlTrapHAEvent, fmlHwSensorEntry=fmlHwSensorEntry, fmlTrapMailDeferredQueueHighThreshold=fmlTrapMailDeferredQueueHighThreshold, fmlMailOptionsConformanceGroup=fmlMailOptionsConformanceGroup, fmlHwSensorEntIndex=fmlHwSensorEntIndex, fmlSysOptions=fmlSysOptions, fmlIpSessIndex=fmlIpSessIndex, fmlTraps=fmlTraps, fmlTrapSpamThresholdEvent=fmlTrapSpamThresholdEvent, fmlTrapRAIDEvent=fmlTrapRAIDEvent, fmlSysOptAuthTimeout=fmlSysOptAuthTimeout, fmlMIBConformance=fmlMIBConformance, fmlSysVersion=fmlSysVersion, fmlSysMailDiskUsage=fmlSysMailDiskUsage, fmlSysEventCode=fmlSysEventCode, fmlIpSessToPort=fmlIpSessToPort, FmlHAEventIdVal=FmlHAEventIdVal, fmlHwSensorEntAlarmStatus=fmlHwSensorEntAlarmStatus, fmlObsoleteTrapsComplianceGroup=fmlObsoleteTrapsComplianceGroup, fmlIpSessFromPort=fmlIpSessFromPort, fmlIpSessFromAddr=fmlIpSessFromAddr, fmlHAUnitIp=fmlHAUnitIp)
