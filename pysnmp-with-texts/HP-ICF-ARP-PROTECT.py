#
# PySNMP MIB module HP-ICF-ARP-PROTECT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-ARP-PROTECT
# Produced by pysmi-0.3.4 at Wed May  1 13:33:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, TimeTicks, Bits, Counter64, Gauge32, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, iso, MibIdentifier, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "Bits", "Counter64", "Gauge32", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "iso", "MibIdentifier", "ObjectIdentity", "IpAddress")
TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
hpicfArpProtect = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37))
hpicfArpProtect.setRevisions(('2007-08-29 00:00', '2006-05-03 00:27',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfArpProtect.setRevisionsDescriptions(('Added hpicfArpProtectNotification and associated objects.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfArpProtect.setLastUpdated('200708290000Z')
if mibBuilder.loadTexts: hpicfArpProtect.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfArpProtect.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfArpProtect.setDescription('This MIB module contains HP proprietary objects for managing Dynamic ARP Protection.')
hpicfArpProtectNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 0))
hpicfArpProtectErrantReply = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 0, 1)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantCnt"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIp"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIp"))
if mibBuilder.loadTexts: hpicfArpProtectErrantReply.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantReply.setDescription('An hpicfArpProtectErrantReply notification signifies that the ARP protection entity is enabled and has detected an errant ARP reply packet. The source and destination addresses from the packet header are included in the notification.')
hpicfArpProtectObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1))
hpicfArpProtectConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1))
hpicfArpProtectGlobalCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1))
hpicfArpProtectEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectEnable.setDescription('The administrative status of the ARP Protection feature.')
hpicfArpProtectVlanEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectVlanEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanEnable.setDescription("The administrative status for Dynamic ARP Protection on each VLAN. There will be one bit in this string for each possible VLAN ID. Each octet within this value specifies a set of eight VLANs, with the first octet specifying VLAN IDs 1 through 8, the second octet specifying VLAN IDs 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered VLAN ID, and the least significant bit represents the highest numbered VLAN ID. Thus, each possible VLAN ID of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1', then Dynamic ARP Protection is enabled on that VLAN; Dynamic ARP Protection is not enabled on the VLAN its bit has a value of '0'.")
hpicfArpProtectValidation = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 3), Bits().clone(namedValues=NamedValues(("srcMac", 0), ("dstMac", 1), ("ip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectValidation.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectValidation.setDescription('Additional validation checks to perform on ARP packets during Dynamic ARP Protection. srcMac - Drop any ARP request or response packet where the source MAC address in the Ethernet header does not match the sender MAC address in the body of the ARP packet. dstMac - Drop any unicast ARP response packet where the destination MAC address in the Ethernet header does not match the target MAC address in the body of the ARP packet. ip - Drop any ARP packet where the sender IP address is invalid. Drop any ARP response packet where the target IP address is invalid. Invalid addresses include 0.0.0.0, 255.255.255.255, all IP multicast addresses, and all class E IP addresses. These checks are only performed for ARP packets received on untrusted ports in VLANs that are enabled for Dynamic ARP Protection. ARP packets received on trusted ports, and ARP packets in VLANs for which Dynamic ARP Protection is disabled, are forwarded without validation.')
hpicfArpProtectErrantNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectErrantNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantNotifyEnable.setDescription('Provides operational control of hpicfArpProtectErrantReply.')
hpicfArpProtectPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 2), )
if mibBuilder.loadTexts: hpicfArpProtectPortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectPortTable.setDescription('Per-interface configuration for Dynamic ARP Protection.')
hpicfArpProtectPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfArpProtectPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectPortEntry.setDescription('Dynamic ARP Protection configuration information for a single port.')
hpicfArpProtectPortTrust = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 1, 2, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfArpProtectPortTrust.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectPortTrust.setDescription('This object indicates whether this port is trusted for Dynamic ARP Protection.')
hpicfArpProtectStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2))
hpicfArpProtectVlanStatTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1), )
if mibBuilder.loadTexts: hpicfArpProtectVlanStatTable.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatTable.setDescription('Per-VLAN statistics for Dynamic ARP Protection.')
hpicfArpProtectVlanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1), ).setIndexNames((0, "HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatIndex"))
if mibBuilder.loadTexts: hpicfArpProtectVlanStatEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatEntry.setDescription('Dynamic ARP Protection statistics for a single VLAN.')
hpicfArpProtectVlanStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: hpicfArpProtectVlanStatIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatIndex.setDescription('This variable uniquely identifies the VLAN that the counters in this entry apply to. The VLAN identified by this object is the same VLAN as identified by the identical value in the dot1qVlanIndex object.')
hpicfArpProtectVlanStatForwards = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatForwards.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatForwards.setDescription('The number of ARP packets received on untrusted ports in this VLAN that were successfully validated and forwarded. This count does not increment for VLANs for which Dynamic ARP Protection is not enabled.')
hpicfArpProtectVlanStatBadPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadPkts.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadPkts.setDescription('The number of ARP packets received on untrusted ports that were dropped because they were malformed in some way. This may include an unrecognized opcode, an unrecognized protocol type, an unrecognized hardware type, an invalid protocol address length, or an invalid hardware address length. This count does not increment for VLANs for which Dynamic ARP Protection is not enabled.')
hpicfArpProtectVlanStatBadBindings = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadBindings.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadBindings.setDescription('The number of ARP packets received on untrusted ports that were dropped because they advertized a source IP-to-MAC binding that did not match a known, valid binding. This count does not increment for VLANs for which Dynamic ARP Protection is not enabled.')
hpicfArpProtectVlanStatBadSrcMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadSrcMacs.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadSrcMacs.setDescription('The number of ARP packets received on untrusted ports that were dropped because the source MAC address in the Ethernet header did not match the sender MAC address in the body of the ARP packet. This count does not increment when source MAC validation is not enabled. This count does not increment for VLANs for which Dynamic ARP Protection is not enabled.')
hpicfArpProtectVlanStatBadDstMacs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadDstMacs.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadDstMacs.setDescription('The number of unicast ARP response packets received on untrusted ports that were dropped because the destination MAC address in the Ethernet header did not match the target MAC address in the body of the ARP packet. This count does not increment when destination address validation is not enabled. This count does not increment for VLANs for which Dynamic ARP Protection is not enabled.')
hpicfArpProtectVlanStatBadIpAddrs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadIpAddrs.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectVlanStatBadIpAddrs.setDescription('The number of ARP packets received on untrusted ports that were dropped because they contained an invalid sender IP address, or they contained an invalid target IP address in an ARP response. This count does not increment when IP address validation is not enabled. This count does not increment for VLANs for which Dynamic ARP Protection is not enabled.')
hpicfArpProtectErrantCnt = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantCnt.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantCnt.setDescription('A count of hpicfArpProtectErrantReply sent from the ARP Protection entity to the SNMP entity. This count may differ from the count of notifications transmitted due to rate limiting or configuration.')
hpicfArpProtectErrantSrcMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcMac.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcMac.setDescription('Errant source MAC address included in a hpicfArpProtectNotification.')
hpicfArpProtectErrantSrcIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 5), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcIpType.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcIpType.setDescription('IP Address type reported in hpicfArpProtectErrantSrcIp.')
hpicfArpProtectErrantSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 6), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcIp.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantSrcIp.setDescription('Errant source IP address included in a hpicfArpProtectNotification.')
hpicfArpProtectErrantDestMac = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 7), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantDestMac.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantDestMac.setDescription('Errant destination MAC address included in a hpicfArpProtectNotification.')
hpicfArpProtectErrantDestIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 8), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantDestIpType.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantDestIpType.setDescription('IP Address type reported in hpicfArpProtectErrantDestIp.')
hpicfArpProtectErrantDestIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 1, 9), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfArpProtectErrantDestIp.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectErrantDestIp.setDescription('Errant destination IP address included in a hpicfArpProtectNotification.')
hpicfArpProtectConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2))
hpicfArpProtectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 1))
hpicfArpProtectBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 1, 1)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectEnable"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanEnable"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectValidation"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectPortTrust"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatForwards"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadPkts"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadBindings"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadSrcMacs"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadDstMacs"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectVlanStatBadIpAddrs"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIp"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestMac"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantSrcIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIpType"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantDestIp"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantCnt"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpProtectBaseGroup = hpicfArpProtectBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectBaseGroup.setDescription('A collection of objects for configuring and monitoring the base Dynamic ARP Protection functionality.')
hpicfArpProtectionNotifications = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 1, 2)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectErrantReply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpProtectionNotifications = hpicfArpProtectionNotifications.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectionNotifications.setDescription('A group of Notifications whose implementation is mandatory when HP-ICF-ARP-PROTECTION is implemented.')
hpicfArpProtectCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 2))
hpicfArpProtectCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 37, 2, 2, 1)).setObjects(("HP-ICF-ARP-PROTECT", "hpicfArpProtectBaseGroup"), ("HP-ICF-ARP-PROTECT", "hpicfArpProtectionNotifications"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfArpProtectCompliance = hpicfArpProtectCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfArpProtectCompliance.setDescription('The compliance statement for HP switches that support Dynamic ARP Protection.')
mibBuilder.exportSymbols("HP-ICF-ARP-PROTECT", hpicfArpProtectObjects=hpicfArpProtectObjects, hpicfArpProtectErrantDestMac=hpicfArpProtectErrantDestMac, hpicfArpProtectVlanStatForwards=hpicfArpProtectVlanStatForwards, hpicfArpProtectNotifications=hpicfArpProtectNotifications, hpicfArpProtectVlanStatBadDstMacs=hpicfArpProtectVlanStatBadDstMacs, hpicfArpProtectVlanEnable=hpicfArpProtectVlanEnable, hpicfArpProtectPortTrust=hpicfArpProtectPortTrust, hpicfArpProtectStatus=hpicfArpProtectStatus, hpicfArpProtectVlanStatBadSrcMacs=hpicfArpProtectVlanStatBadSrcMacs, hpicfArpProtectGlobalCfg=hpicfArpProtectGlobalCfg, hpicfArpProtectionNotifications=hpicfArpProtectionNotifications, hpicfArpProtectVlanStatBadIpAddrs=hpicfArpProtectVlanStatBadIpAddrs, hpicfArpProtectGroups=hpicfArpProtectGroups, hpicfArpProtectErrantSrcIp=hpicfArpProtectErrantSrcIp, hpicfArpProtectErrantSrcMac=hpicfArpProtectErrantSrcMac, hpicfArpProtectVlanStatIndex=hpicfArpProtectVlanStatIndex, hpicfArpProtectValidation=hpicfArpProtectValidation, hpicfArpProtectErrantReply=hpicfArpProtectErrantReply, hpicfArpProtectErrantNotifyEnable=hpicfArpProtectErrantNotifyEnable, hpicfArpProtectBaseGroup=hpicfArpProtectBaseGroup, hpicfArpProtectCompliance=hpicfArpProtectCompliance, hpicfArpProtectConfig=hpicfArpProtectConfig, hpicfArpProtectEnable=hpicfArpProtectEnable, hpicfArpProtect=hpicfArpProtect, hpicfArpProtectErrantCnt=hpicfArpProtectErrantCnt, hpicfArpProtectPortEntry=hpicfArpProtectPortEntry, hpicfArpProtectVlanStatTable=hpicfArpProtectVlanStatTable, hpicfArpProtectErrantDestIpType=hpicfArpProtectErrantDestIpType, hpicfArpProtectPortTable=hpicfArpProtectPortTable, hpicfArpProtectCompliances=hpicfArpProtectCompliances, hpicfArpProtectVlanStatBadBindings=hpicfArpProtectVlanStatBadBindings, PYSNMP_MODULE_ID=hpicfArpProtect, hpicfArpProtectVlanStatBadPkts=hpicfArpProtectVlanStatBadPkts, hpicfArpProtectVlanStatEntry=hpicfArpProtectVlanStatEntry, hpicfArpProtectErrantSrcIpType=hpicfArpProtectErrantSrcIpType, hpicfArpProtectConformance=hpicfArpProtectConformance, hpicfArpProtectErrantDestIp=hpicfArpProtectErrantDestIp)
