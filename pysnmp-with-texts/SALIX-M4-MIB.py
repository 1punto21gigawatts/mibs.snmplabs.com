#
# PySNMP MIB module SALIX-M4-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SALIX-M4-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
atmfM4PlugInUnitEntry, atmfM4EquipHolderEntry, atmfM4TcAdaptorEntry, atmfM4TrapAlarmSeverity, atmfM4CellProtoHistIndex = mibBuilder.importSymbols("ATM-FORUM-M4-MIB", "atmfM4PlugInUnitEntry", "atmfM4EquipHolderEntry", "atmfM4TcAdaptorEntry", "atmfM4TrapAlarmSeverity", "atmfM4CellProtoHistIndex")
PhysicalIndex, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex", "entPhysicalIndex")
hrSWInstalledIndex, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrSWInstalledIndex")
salixGeneric, = mibBuilder.importSymbols("SALIX-MIB", "salixGeneric")
SalixPlugInUnitType, = mibBuilder.importSymbols("SALIX-PRODUCT-PLUGIN-MIB", "SalixPlugInUnitType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, Gauge32, ObjectIdentity, TimeTicks, NotificationType, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Unsigned32, IpAddress, Bits, Counter64, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "ObjectIdentity", "TimeTicks", "NotificationType", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Unsigned32", "IpAddress", "Bits", "Counter64", "iso")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
salixM4MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2158, 2, 5))
if mibBuilder.loadTexts: salixM4MIB.setLastUpdated('9810130000Z')
if mibBuilder.loadTexts: salixM4MIB.setOrganization('SALIX Technologies')
if mibBuilder.loadTexts: salixM4MIB.setContactInfo('904 Wind River Lane Suite 101 Gaithersburg, MD 20878 (301)-417-0017')
if mibBuilder.loadTexts: salixM4MIB.setDescription('The MIB describing SALIX specific extensions to the M4-MIB')
salixM4MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1))
salixM4MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 5, 2))
salixM4MIBCompliance = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 5, 3))
salixM4MIBTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 5, 0))
salixAtmfM4EquipHolderTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 2), )
if mibBuilder.loadTexts: salixAtmfM4EquipHolderTable.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4EquipHolderTable.setDescription('The HNE equipment holder table. This table augments the atmfM4EquipHolderTable defined in the ATM-FORUM-M4-MIB.')
salixAtmfM4EquipHolderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 2, 1), )
atmfM4EquipHolderEntry.registerAugmentions(("SALIX-M4-MIB", "salixAtmfM4EquipHolderEntry"))
salixAtmfM4EquipHolderEntry.setIndexNames(*atmfM4EquipHolderEntry.getIndexNames())
if mibBuilder.loadTexts: salixAtmfM4EquipHolderEntry.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4EquipHolderEntry.setDescription('An entry in the HNE equipment holder table. An entry contains HNE specific equipment holder information not found in the ATM-FORUM-M4-MIB.')
salixAtmfM4EquipHolderDownloadState = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("success", 3), ("aborted", 4), ("failed", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4EquipHolderDownloadState.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4EquipHolderDownloadState.setDescription('The software download state of the plug-in unit contained in the equipment holder. This status is only valid if the equipment holder is a slot. If the equipment holder is not a slot then the status will be none(1). none(1) - download not started or not supported inProgress(2) - download in progress success(3) - download to plug-in unit successful aborted(4) - download aborted failed(5) - download failed')
salixAtmfM4EquipHolderDownloadStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4EquipHolderDownloadStatusMessage.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4EquipHolderDownloadStatusMessage.setDescription("Status message that describes the current state of the download as indicated by the 'salixAtmfM4EquipHolderDownloadState' attribute.")
salixAtmfM4PlugInUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3), )
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitTable.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitTable.setDescription('The HNE plug-in unit table. This table augments the atmfM4PlugInUnitTable defined in the ATM-FORUM-M4-MIB.')
salixAtmfM4PlugInUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1), )
atmfM4PlugInUnitEntry.registerAugmentions(("SALIX-M4-MIB", "salixAtmfM4PlugInUnitEntry"))
salixAtmfM4PlugInUnitEntry.setIndexNames(*atmfM4PlugInUnitEntry.getIndexNames())
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitEntry.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitEntry.setDescription('An entry in the HNE plug-in unit table. An entry contains HNE specific plug-in information not found in the ATM-FORUM-M4-MIB.')
salixAtmfM4PlugInUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitSerialNumber.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitSerialNumber.setDescription('The serial number of the plug-in unit.')
salixAtmfM4PlugInUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 2), SalixPlugInUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitType.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitType.setDescription('The type of plug-in unit loaded in the slot.')
salixAtmfM4PlugInUnitReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("cold", 1), ("warm", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitReset.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitReset.setDescription("The type of reset to issue to the plug-in unit. The following types of plug-in units can be reset, 'mpu', 'dpu', 'smu', 'liu' and 'hsf'. Writing a cold(1) or warm(2) value to this object will initiate a reset of the plug-in unit. The reset value will remain until the reset completes. When completed the reset value will be changed to none(0). The following are valid reset values: cold(1) - cold reset initiated warm(2) - warm reset initiated")
salixAtmfM4PlugInUnitHwRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitHwRevision.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitHwRevision.setDescription('The hardware revision of the plug-in unit.')
salixAtmfM4PlugInUnitLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitLedStatus.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitLedStatus.setDescription('The status of the LEDs on the plug-in unit. The various bit positions are: 1 OK LED is on 2 OK LED is flashing 4 Active LED is on 8 Active LED is flashing 16 Failed LED is on 32 Failed LED is flashing')
salixAtmfM4PlugInUnitRedundancyConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("working", 1), ("protect", 2), ("none", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyConfig.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyConfig.setDescription("When retrieved, this attribute represents the current redundancy configuration of the specified Plug-In Unit. A value of 'none' indicates that the specified Plug-In Unit has no redundant module. A status of either 'working' or 'protect' indicates that the specified Plug-In Unit is either the working or protect Plug-In Unit in a redundancy relationship. When used with the 'salixAtmfM4PlugInUnitRedundancyPartnerModule' attribute of the 'salixAtfM4PlugInUnitTable', it can be determined which Plug-In Units are in redudancy relationship and also the plug-in units role in that relationship (if they are in a relationship at all). In addition to using these attributes to get information on redundant modules, these attributes can also be used to create redundancy relationships. By setting the 'salixAtmfM4PlugInUnitRedundancyPartnerModule' to a valid PhysicalIndex and also setting the 'salixAtmfM4PlugInUnitRedundancyConfig' on either of the plug-in units to 'working' or 'protect' (as the desired configuration for that plug-in unit), a redundancy pair is created. Redundancy relationships can be destroyed by setting the 'salixAtmfM4PlugInUnitRedundancyConfig' of either of the modules to 'none'. If a new value of either 'working' or 'protect' is written to the 'salixAtmfM4PlugInUnitRedundancyConfig' attribute, a switchover occurs in the system (i.e. the 'working' becomes the 'protect' while the 'protect' becomes the 'working). NOTE: It is only necessary to set the information on one of the plug-in unit entries. The information will be automatically set in the other entry by the system.")
salixAtmfM4PlugInUnitRedundancyPartnerModule = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 7), PhysicalIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPartnerModule.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPartnerModule.setDescription("When retrieved, this attributes represents the current partner module of a pair of plugins that are in redundancy relationship. This attribute is only valid when the 'salixAtmfM4PlugInUnitRedundancyConfig' attribute is set to either 'working' or 'protect'. Writing to this object can either create a redundancy pair (if one doesn't already exist) or can cause a manual changeover of the working module (if there is a new value written). NOTE: It is only necessary to set the information on one of plug-in units entries. The information will be automatically set in the other entry by the system.")
salixAtmfM4PlugInUnitRedundancyPairStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("created", 2), ("configured", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairStatus.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairStatus.setDescription("This attribute reflects the status of the redundant plug-in unit pair: none(1) - indicates that a 1:1 redundant pair does not exist with this plug-in unit. created(2) - indicates that a 1:1 redundant pair was created between this plug-in unit and the plug-in unit identified by the 'salixAtmfM4PlugInUnitRedundancyPartnerModule'. configured(3) indicates that the working module identified by this 1:1 redundant pair is operational. active(4) - indicates that 1:1 redundancy is active. This state is entered if both redundant plug-in units are physically installed with administrative and operational status as 'up'.")
salixAtmfM4PlugInUnitRedundancyStatusMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 3, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(256, 256)).setFixedLength(256)).setMaxAccess("readonly")
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyStatusMessage.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyStatusMessage.setDescription('Status message that describes the current state of the redundant plug-in unit pair.')
class SalixAtmfM4SwitchoverReasons(TextualConvention, Integer32):
    description = 'Definitions that identify reasons for a switchover to occur between two plug-in units in a redundancy pair.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("administrative", 1), ("pluginRemoved", 2), ("failure", 3))

salixAtmfM4TrapSwitchoverReason = MibScalar((1, 3, 6, 1, 4, 1, 2158, 2, 5, 1, 4), SalixAtmfM4SwitchoverReasons()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: salixAtmfM4TrapSwitchoverReason.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4TrapSwitchoverReason.setDescription('This object identifies the reason for the switchover that occurred between two plug-in units in a redundant pair.')
salixAtmfM4HwSwDownloadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 5, 0, 1)).setObjects(("ENTITY-MIB", "entPhysicalIndex"), ("HOST-RESOURCES-MIB", "hrSWInstalledIndex"), ("ATM-FORUM-M4-MIB", "atmfM4TrapAlarmSeverity"))
if mibBuilder.loadTexts: salixAtmfM4HwSwDownloadSuccess.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4HwSwDownloadSuccess.setDescription("Indicates that software was successfully downloaded to the physical entity identified by the entPhysicalIndex. For a successful download to a 'salixSysSwDownloadEntry' the physical entity will identify an instance of a 'salixAtmfM4PlugInUnitEntry' that represents the physical device that received the download. The 'hrSWInstalledIndex' represents the instance of the 'salixSysSwDownloadEntry' or download destination on the physical entity. For a successful download to a 'salixAtmfM4EquipHolderEntry' the physical entity will identify an instance of a 'salixAtmfM4EquipHolderEntry' that represents the physical device that received the download. The 'hrSWInstalledIndex' represents the instance of the 'salixSysHrSWInstalledEntry' or source of the download.")
salixAtmfM4PlugInUnitRedundancyPairCreated = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 5, 0, 2)).setObjects(("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"), ("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"))
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairCreated.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairCreated.setDescription("Indicates that a 1:1 redundancy pair was created between two plug-in units. The salixAtmfM4PlugInUnitRedundancyConfig' objects identify the 'working' and 'protect' plug-in units configured as the redundant pair.")
salixAtmfM4PlugInUnitRedundancyPairDestroyed = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 5, 0, 3)).setObjects(("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"), ("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"))
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairDestroyed.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairDestroyed.setDescription('Indicates that the 1:1 redundancy pair between the two plug-in units identified by the salixAtmfM4PlugInUnitRedundancyConfig objects was destroyed.')
salixAtmfM4PlugInUnitRedundancyPairSwitchover = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 5, 0, 4)).setObjects(("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"), ("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"), ("SALIX-M4-MIB", "salixAtmfM4TrapSwitchoverReason"))
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairSwitchover.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairSwitchover.setDescription("Indicates a switch from the working plug-in unit of the redundant pair to the protect partner plug-in unit. The 'salixAtmfM4PlugInUnitRedundancyConfig' objects reflect the redundancy configuration of the plug-in units after the switchover. The reason for the switchover is identified by the 'salixAtmfM4TrapSwitchoverReason' object.")
salixAtmfM4PlugInUnitRedundancyPairStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2158, 2, 5, 0, 5)).setObjects(("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"), ("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyConfig"), ("SALIX-M4-MIB", "salixAtmfM4PlugInUnitRedundancyPairStatus"))
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairStatusChange.setStatus('current')
if mibBuilder.loadTexts: salixAtmfM4PlugInUnitRedundancyPairStatusChange.setDescription("Indicates a change in status of the redundant plug-in unit pair. The 'salixAtmfM4PlugInUnitRedundancyConfig' objects reflect the current redundancy configuration of the plug-in units. The 'salixAtmfM4PlugInUnitRedundancyPairStatus' object identifies the current status of the redundant plug-in unit pair.")
salixM4Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 5, 3, 1))
salixM4Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2158, 2, 5, 3, 2))
salixM4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2158, 2, 5, 3, 1, 1)).setObjects(("SALIX-M4-MIB", "salixAtmfM4EquipHolderDownloadState"), ("SALIX-M4-MIB", "salixAtmfM4EquipHolderDownloadStatusMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    salixM4Group = salixM4Group.setStatus('current')
if mibBuilder.loadTexts: salixM4Group.setDescription('Salix M4 Objects Group')
salixM4Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2158, 2, 5, 3, 2, 1)).setObjects(("SALIX-M4-MIB", "salixM4Group"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    salixM4Compliance = salixM4Compliance.setStatus('current')
if mibBuilder.loadTexts: salixM4Compliance.setDescription('The basic implementation requirements for the SALIX-M4-MIB.')
mibBuilder.exportSymbols("SALIX-M4-MIB", salixM4MIBTraps=salixM4MIBTraps, salixAtmfM4PlugInUnitRedundancyStatusMessage=salixAtmfM4PlugInUnitRedundancyStatusMessage, salixM4MIBObjects=salixM4MIBObjects, salixAtmfM4PlugInUnitEntry=salixAtmfM4PlugInUnitEntry, salixAtmfM4PlugInUnitSerialNumber=salixAtmfM4PlugInUnitSerialNumber, salixAtmfM4EquipHolderDownloadState=salixAtmfM4EquipHolderDownloadState, salixAtmfM4PlugInUnitHwRevision=salixAtmfM4PlugInUnitHwRevision, salixAtmfM4PlugInUnitRedundancyPairStatusChange=salixAtmfM4PlugInUnitRedundancyPairStatusChange, salixAtmfM4PlugInUnitTable=salixAtmfM4PlugInUnitTable, salixM4MIBTrapPrefix=salixM4MIBTrapPrefix, salixM4MIB=salixM4MIB, salixAtmfM4PlugInUnitRedundancyPairStatus=salixAtmfM4PlugInUnitRedundancyPairStatus, SalixAtmfM4SwitchoverReasons=SalixAtmfM4SwitchoverReasons, salixM4Compliance=salixM4Compliance, salixAtmfM4PlugInUnitRedundancyPartnerModule=salixAtmfM4PlugInUnitRedundancyPartnerModule, salixAtmfM4EquipHolderDownloadStatusMessage=salixAtmfM4EquipHolderDownloadStatusMessage, salixAtmfM4EquipHolderTable=salixAtmfM4EquipHolderTable, salixM4MIBCompliance=salixM4MIBCompliance, salixM4Group=salixM4Group, salixM4Groups=salixM4Groups, salixAtmfM4PlugInUnitRedundancyConfig=salixAtmfM4PlugInUnitRedundancyConfig, salixAtmfM4HwSwDownloadSuccess=salixAtmfM4HwSwDownloadSuccess, salixM4Compliances=salixM4Compliances, salixAtmfM4EquipHolderEntry=salixAtmfM4EquipHolderEntry, salixAtmfM4PlugInUnitRedundancyPairCreated=salixAtmfM4PlugInUnitRedundancyPairCreated, salixAtmfM4PlugInUnitRedundancyPairSwitchover=salixAtmfM4PlugInUnitRedundancyPairSwitchover, salixAtmfM4PlugInUnitLedStatus=salixAtmfM4PlugInUnitLedStatus, salixAtmfM4PlugInUnitRedundancyPairDestroyed=salixAtmfM4PlugInUnitRedundancyPairDestroyed, PYSNMP_MODULE_ID=salixM4MIB, salixAtmfM4TrapSwitchoverReason=salixAtmfM4TrapSwitchoverReason, salixAtmfM4PlugInUnitType=salixAtmfM4PlugInUnitType, salixAtmfM4PlugInUnitReset=salixAtmfM4PlugInUnitReset)
