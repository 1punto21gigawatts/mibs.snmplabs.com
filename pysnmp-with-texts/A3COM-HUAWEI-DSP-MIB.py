#
# PySNMP MIB module A3COM-HUAWEI-DSP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/A3COM-HUAWEI-DSP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:04:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
h3cCommon, = mibBuilder.importSymbols("A3COM-HUAWEI-OID-MIB", "h3cCommon")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Gauge32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, iso, TimeTicks, Counter32, Counter64, ObjectIdentity, Unsigned32, IpAddress, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "iso", "TimeTicks", "Counter32", "Counter64", "ObjectIdentity", "Unsigned32", "IpAddress", "NotificationType", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
h3cDSP = ModuleIdentity((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89))
h3cDSP.setRevisions(('2008-01-16 13:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: h3cDSP.setRevisionsDescriptions(('The initial revision of this MIB module.',))
if mibBuilder.loadTexts: h3cDSP.setLastUpdated('200801161300Z')
if mibBuilder.loadTexts: h3cDSP.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: h3cDSP.setContactInfo('PLAT Team Hangzhou H3C Technologies Co.,Ltd. Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: h3cDSP.setDescription('This MIB is to provide the definition of the DSP(Digital Signal Processing) status.')
h3cVPMStatusTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1), )
if mibBuilder.loadTexts: h3cVPMStatusTable.setStatus('current')
if mibBuilder.loadTexts: h3cVPMStatusTable.setDescription('The table contains status parameters of VPM(Voice Process Module) card.')
h3cVPMStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1), ).setIndexNames((0, "A3COM-HUAWEI-DSP-MIB", "h3cVPMIndex"))
if mibBuilder.loadTexts: h3cVPMStatusEntry.setStatus('current')
if mibBuilder.loadTexts: h3cVPMStatusEntry.setDescription('The entry of VPM status table.')
h3cVPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cVPMIndex.setStatus('current')
if mibBuilder.loadTexts: h3cVPMIndex.setDescription('The index for this entry. The sequence of VPM card in the chassis is from the top to bottom.')
h3cVPMEnPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVPMEnPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: h3cVPMEnPhysicalIndex.setDescription('The object corresponds to PhysicalIndex in the chassis.')
h3cVPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("fatal", 3), ("offLine", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVPMState.setStatus('current')
if mibBuilder.loadTexts: h3cVPMState.setDescription('The object indicates the current state of VPM card being monitored. normal(1) - VPM card in normal condition. warning(2) - VPM card has some problem and need attention. fatal(3) - VPM card is not functional. offLine(4) - VPM card is in off-line maintenance state.')
h3cVPMResourceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVPMResourceUtilization.setStatus('current')
if mibBuilder.loadTexts: h3cVPMResourceUtilization.setDescription('The object indicates the percentage of current DSP resource utilization of the VPM card. The utilization is a ratio of number of busy DSP resources (for handling calls, transcoding, voice compression,...) to the total available DSP resources.')
h3cVPMHiWaterUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVPMHiWaterUtilization.setStatus('current')
if mibBuilder.loadTexts: h3cVPMHiWaterUtilization.setDescription('The object indicates the highest percentage of DSP resource utilization of the VPM card that have been occured.')
h3cVPMMaxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cVPMMaxChannel.setStatus('current')
if mibBuilder.loadTexts: h3cVPMMaxChannel.setDescription('The maximum number of channels can be supported in each VPM card.')
h3cDSPStatusTable = MibTable((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2), )
if mibBuilder.loadTexts: h3cDSPStatusTable.setStatus('current')
if mibBuilder.loadTexts: h3cDSPStatusTable.setDescription('The table contains status parameters of DSP(Digital Signal Processing) card.')
h3cDSPStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1), ).setIndexNames((0, "A3COM-HUAWEI-DSP-MIB", "h3cDSPIndex"))
if mibBuilder.loadTexts: h3cDSPStatusEntry.setStatus('current')
if mibBuilder.loadTexts: h3cDSPStatusEntry.setDescription('The entry of DSP status table.')
h3cDSPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: h3cDSPIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDSPIndex.setDescription('The index for this entry. DSP is fixed on VPM card or chassis card. The sequence of DSP in the VPM card or chassis card is from right to left.')
h3cDSPVPMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDSPVPMIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDSPVPMIndex.setDescription('The object corresponds to VPMIndex in the chassis. If value of this object is non-zero, it is the index of VPM card.(DSP is in this VPM card.) If value of this object is 0, then the DSP is fixed in the chassis card.')
h3cDSPEnPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDSPEnPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: h3cDSPEnPhysicalIndex.setDescription('The object corresponds to PhysicalIndex in the chassis.')
h3cDSPResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDSPResetTime.setStatus('current')
if mibBuilder.loadTexts: h3cDSPResetTime.setDescription('The value of sysUpTime from the last DSP reset occurred.')
h3cDSPMaxChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDSPMaxChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDSPMaxChannel.setDescription('The maximum number of channels can be supported in each DSP. The value is chosen in an implementation-dependent manner by the DSP functionality.')
h3cDSPState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("fatal", 3), ("offLine", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDSPState.setStatus('current')
if mibBuilder.loadTexts: h3cDSPState.setDescription('The object indicates the current state of DSP being monitored. normal(1) - DSP in normal condition. fatal(3) - DSP is not functional. offLine(4) - DSP is in off-line maintenance state.')
h3cDSPInUseChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h3cDSPInUseChannel.setStatus('current')
if mibBuilder.loadTexts: h3cDSPInUseChannel.setDescription('The number of channels that are reserved for serving calls. The value is incremented when the DSP channel is reserved for call setup and is decremented after the DSP channel is free due to call disconnection.')
h3cDSPTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 3))
h3cDSPTrapPrex = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 3, 0))
h3cVPMStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 3, 0, 1)).setObjects(("A3COM-HUAWEI-DSP-MIB", "h3cVPMIndex"), ("A3COM-HUAWEI-DSP-MIB", "h3cVPMEnPhysicalIndex"), ("A3COM-HUAWEI-DSP-MIB", "h3cVPMState"))
if mibBuilder.loadTexts: h3cVPMStateChange.setStatus('current')
if mibBuilder.loadTexts: h3cVPMStateChange.setDescription('This trap is sent when VPM state changes.')
h3cDSPStateChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 45, 1, 10, 2, 89, 3, 0, 2)).setObjects(("A3COM-HUAWEI-DSP-MIB", "h3cDSPIndex"), ("A3COM-HUAWEI-DSP-MIB", "h3cDSPVPMIndex"), ("A3COM-HUAWEI-DSP-MIB", "h3cDSPEnPhysicalIndex"), ("A3COM-HUAWEI-DSP-MIB", "h3cDSPState"))
if mibBuilder.loadTexts: h3cDSPStateChange.setStatus('current')
if mibBuilder.loadTexts: h3cDSPStateChange.setDescription('This trap is sent when DSP state changes.')
mibBuilder.exportSymbols("A3COM-HUAWEI-DSP-MIB", h3cVPMIndex=h3cVPMIndex, h3cDSPVPMIndex=h3cDSPVPMIndex, h3cVPMStatusTable=h3cVPMStatusTable, h3cDSPStatusEntry=h3cDSPStatusEntry, h3cVPMResourceUtilization=h3cVPMResourceUtilization, h3cDSPStatusTable=h3cDSPStatusTable, h3cDSPTrapPrex=h3cDSPTrapPrex, h3cVPMStateChange=h3cVPMStateChange, h3cVPMStatusEntry=h3cVPMStatusEntry, h3cDSPStateChange=h3cDSPStateChange, h3cDSPMaxChannel=h3cDSPMaxChannel, h3cDSPResetTime=h3cDSPResetTime, PYSNMP_MODULE_ID=h3cDSP, h3cVPMState=h3cVPMState, h3cDSPTrap=h3cDSPTrap, h3cVPMMaxChannel=h3cVPMMaxChannel, h3cDSPEnPhysicalIndex=h3cDSPEnPhysicalIndex, h3cDSPState=h3cDSPState, h3cVPMEnPhysicalIndex=h3cVPMEnPhysicalIndex, h3cDSP=h3cDSP, h3cVPMHiWaterUtilization=h3cVPMHiWaterUtilization, h3cDSPInUseChannel=h3cDSPInUseChannel, h3cDSPIndex=h3cDSPIndex)
