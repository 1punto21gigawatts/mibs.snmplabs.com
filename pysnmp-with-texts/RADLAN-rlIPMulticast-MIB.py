#
# PySNMP MIB module RADLAN-rlIPMulticast-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RADLAN-rlIPMulticast-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:50:55 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
rnd, rndErrorSeverity, rndErrorDesc, rndNotifications = mibBuilder.importSymbols("RADLAN-MIB", "rnd", "rndErrorSeverity", "rndErrorDesc", "rndNotifications")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, TimeTicks, MibIdentifier, Counter64, Gauge32, Unsigned32, Integer32, Bits, ObjectIdentity, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "TimeTicks", "MibIdentifier", "Counter64", "Gauge32", "Unsigned32", "Integer32", "Bits", "ObjectIdentity", "Counter32", "iso")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
rlIPmulticast = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 46))
rlIPmulticast.setRevisions(('2004-04-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlIPmulticast.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlIPmulticast.setLastUpdated('200404190000Z')
if mibBuilder.loadTexts: rlIPmulticast.setOrganization('')
if mibBuilder.loadTexts: rlIPmulticast.setContactInfo('')
if mibBuilder.loadTexts: rlIPmulticast.setDescription('The private MIB module definition for IP Multicast support.')
rlIpmRouterEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIpmRouterEnable.setStatus('current')
if mibBuilder.loadTexts: rlIpmRouterEnable.setDescription('The enabled status of IP Multicast routing on this router.')
rlIgmp = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 46, 2))
rlIgmpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlIgmpMibVersion.setDescription("MIB's version, the current version is 1.")
rlPim = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 46, 3))
rlPimMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPimMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlPimMibVersion.setDescription("MIB's version, the current version is 1.")
rlPimEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimEnable.setStatus('current')
if mibBuilder.loadTexts: rlPimEnable.setDescription('The enabled status of PIM protocol on this router.')
rlDvmrp = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 46, 4))
rlIgmpProxy = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 46, 5))
rlIgmpProxyEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpProxyEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpProxyEnable.setDescription('The enabled status of IGMP Proxy on this router.')
rlIgmpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 46, 6))
rlIgmpFilterEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpFilterEnable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterEnable.setDescription('The enabled status of Igmp filter on this router.')
rlIgmpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 89, 46, 6, 2), )
if mibBuilder.loadTexts: rlIgmpFilterTable.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterTable.setDescription('The (conceptual) table listing the IP multicast groups which are permited or denied from the particular interface.')
rlIgmpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1), ).setIndexNames((0, "RADLAN-rlIPMulticast-MIB", "rlIgmpFilterIfIndex"), (0, "RADLAN-rlIPMulticast-MIB", "rlIgmpFilterAddressFrom"), (0, "RADLAN-rlIPMulticast-MIB", "rlIgmpFilterAddressTo"))
if mibBuilder.loadTexts: rlIgmpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterEntry.setDescription('An entry (conceptual row) in the igmpFilterTable.')
rlIgmpFilterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlIgmpFilterIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterIfIndex.setDescription('The interface for which this entry contains information for an IP multicast group address.')
rlIgmpFilterAddressFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: rlIgmpFilterAddressFrom.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterAddressFrom.setDescription('The first IP multicast group address for which this entry contains information.')
rlIgmpFilterAddressTo = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1, 3), IpAddress())
if mibBuilder.loadTexts: rlIgmpFilterAddressTo.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterAddressTo.setDescription('The last IP multicast group address for which this entry contains information.')
rlIgmpFilterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlIgmpFilterUpTime.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterUpTime.setDescription('The time elapsed since this entry was created.')
rlIgmpFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpFilterStatus.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterStatus.setDescription('The status of this entry.')
rlIgmpFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 46, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deny", 1), ("permit", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlIgmpFilterAction.setStatus('current')
if mibBuilder.loadTexts: rlIgmpFilterAction.setDescription(' Filter action - permit/deny for the group received from the interface.')
rlPimSM = MibIdentifier((1, 3, 6, 1, 4, 1, 89, 46, 7))
rlPimSMEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimSMEnable.setStatus('current')
if mibBuilder.loadTexts: rlPimSMEnable.setDescription('The enabled status of PIM SM on this router.')
rlPimSMMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPimSMMibVersion.setStatus('current')
if mibBuilder.loadTexts: rlPimSMMibVersion.setDescription('The Mib version , current version 2.')
rlPimSMDREnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimSMDREnable.setStatus('current')
if mibBuilder.loadTexts: rlPimSMDREnable.setDescription('The enabled status of PIM SM Designated Router on this router.')
rlPimSMDirectedConnectedSourceEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimSMDirectedConnectedSourceEnable.setStatus('current')
if mibBuilder.loadTexts: rlPimSMDirectedConnectedSourceEnable.setDescription('The enabled status of Directed Connected Source on this router. If disable, the router not work with direct connected sources.')
rlPimSMRPEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimSMRPEnable.setStatus('current')
if mibBuilder.loadTexts: rlPimSMRPEnable.setDescription('The enabled status of PIM SM Randevouz Point on this router.')
rlPimSMSPTSwitchEnable = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimSMSPTSwitchEnable.setStatus('current')
if mibBuilder.loadTexts: rlPimSMSPTSwitchEnable.setDescription('The enabled status of PIM SM SPT Switch on this router. If disable ,the router will work only through the RPT')
rlPimSmRPSetConfigurationType = MibScalar((1, 3, 6, 1, 4, 1, 89, 46, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("bootstrap", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPimSmRPSetConfigurationType.setStatus('current')
if mibBuilder.loadTexts: rlPimSmRPSetConfigurationType.setDescription('Type of RP set configuration:manualy or through boot stap message .')
rlIgmpTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 143)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIgmpTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlIgmpTableOverflow.setDescription('An IGMP Table overflow.')
rlPimTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 144)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlPimTableOverflow.setDescription('An IGMP Table overflow.')
rlPimSmInterfaceTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 163)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmInterfaceTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlPimSmInterfaceTableOverflow.setDescription('The PIM interface table Table overflows.')
rlPimSmNextHopTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 164)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmNextHopTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlPimSmNextHopTableOverflow.setDescription('The PIM SM Next Hop Table overflows.')
rlPimSmMulticastRouteTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 165)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmMulticastRouteTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlPimSmMulticastRouteTableOverflow.setDescription('The PIM SM Multicast Route Table overflows.')
rlPimSmTableOverflow = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 166)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmTableOverflow.setStatus('current')
if mibBuilder.loadTexts: rlPimSmTableOverflow.setDescription('The PIM SM Table(Not include the Interface, Next Hop, Multicast Route Tables) overflows.')
rlPimSmSrcUnreacable = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 167)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmSrcUnreacable.setStatus('current')
if mibBuilder.loadTexts: rlPimSmSrcUnreacable.setDescription('An RPF source unreacable.')
rlPimSmParallelPathToLAN = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 168)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmParallelPathToLAN.setStatus('current')
if mibBuilder.loadTexts: rlPimSmParallelPathToLAN.setDescription('Two Pim ifIndexes connect to the same LAN')
rlPimSmNotSMUpstreamNeighbor = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 169)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlPimSmNotSMUpstreamNeighbor.setStatus('current')
if mibBuilder.loadTexts: rlPimSmNotSMUpstreamNeighbor.setDescription('An RPF Upstream Neighbor is not support the PIM SM.')
rlIpmAddOutgoingInterfaceFailed = NotificationType((1, 3, 6, 1, 4, 1, 89, 0, 182)).setObjects(("RADLAN-MIB", "rndErrorDesc"), ("RADLAN-MIB", "rndErrorSeverity"))
if mibBuilder.loadTexts: rlIpmAddOutgoingInterfaceFailed.setStatus('current')
if mibBuilder.loadTexts: rlIpmAddOutgoingInterfaceFailed.setDescription('Adding an Ipm outgoing interface has failed.')
mibBuilder.exportSymbols("RADLAN-rlIPMulticast-MIB", rlIgmp=rlIgmp, rlPimSMEnable=rlPimSMEnable, rlPimSmNextHopTableOverflow=rlPimSmNextHopTableOverflow, rlPimEnable=rlPimEnable, rlPimSMDREnable=rlPimSMDREnable, rlPim=rlPim, rlPimSMMibVersion=rlPimSMMibVersion, rlPimSmInterfaceTableOverflow=rlPimSmInterfaceTableOverflow, rlIgmpFilterAddressFrom=rlIgmpFilterAddressFrom, rlPimSmRPSetConfigurationType=rlPimSmRPSetConfigurationType, PYSNMP_MODULE_ID=rlIPmulticast, rlPimMibVersion=rlPimMibVersion, rlIgmpFilterUpTime=rlIgmpFilterUpTime, rlPimSmSrcUnreacable=rlPimSmSrcUnreacable, rlIgmpProxy=rlIgmpProxy, rlPimSMSPTSwitchEnable=rlPimSMSPTSwitchEnable, rlIgmpFilter=rlIgmpFilter, rlIgmpMibVersion=rlIgmpMibVersion, rlPimSmMulticastRouteTableOverflow=rlPimSmMulticastRouteTableOverflow, rlIgmpFilterEntry=rlIgmpFilterEntry, rlIgmpFilterAddressTo=rlIgmpFilterAddressTo, rlIgmpFilterIfIndex=rlIgmpFilterIfIndex, rlIgmpTableOverflow=rlIgmpTableOverflow, rlPimSmNotSMUpstreamNeighbor=rlPimSmNotSMUpstreamNeighbor, rlPimSMRPEnable=rlPimSMRPEnable, rlIgmpFilterAction=rlIgmpFilterAction, rlDvmrp=rlDvmrp, rlPimTableOverflow=rlPimTableOverflow, rlPimSmParallelPathToLAN=rlPimSmParallelPathToLAN, rlIgmpFilterEnable=rlIgmpFilterEnable, rlIpmAddOutgoingInterfaceFailed=rlIpmAddOutgoingInterfaceFailed, rlIgmpFilterStatus=rlIgmpFilterStatus, rlIPmulticast=rlIPmulticast, rlIgmpProxyEnable=rlIgmpProxyEnable, rlPimSMDirectedConnectedSourceEnable=rlPimSMDirectedConnectedSourceEnable, rlPimSmTableOverflow=rlPimSmTableOverflow, rlIgmpFilterTable=rlIgmpFilterTable, rlIpmRouterEnable=rlIpmRouterEnable, rlPimSM=rlPimSM)
