#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:30:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
RowPointer, RowStatus, DisplayString, Integer32, Unsigned32, StorageType = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "RowPointer", "RowStatus", "DisplayString", "Integer32", "Unsigned32", "StorageType")
NonReplicated, AsciiStringIndex, AsciiString = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "AsciiStringIndex", "AsciiString")
mscPassportMIBs, mscComponents = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs", "mscComponents")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, MibIdentifier, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, Bits, iso, Integer32, Counter32, ObjectIdentity, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "MibIdentifier", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "Bits", "iso", "Integer32", "Counter32", "ObjectIdentity", "Unsigned32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mgmtInterfacesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15))
mscNmis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17))
mscNmisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 1), )
if mibBuilder.loadTexts: mscNmisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmis components.')
mscNmisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"))
if mibBuilder.loadTexts: mscNmisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisRowStatusEntry.setDescription('A single entry in the table represents a single mscNmis component.')
mscNmisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmis components. These components cannot be added nor deleted.')
mscNmisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisStorageType.setDescription('This variable represents the storage type value for the mscNmis tables.')
mscNmisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNmisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisIndex.setDescription('This variable represents the index for the mscNmis tables.')
mscNmisLocal = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2))
mscNmisLocalRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 1), )
if mibBuilder.loadTexts: mscNmisLocalRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisLocal components.')
mscNmisLocalRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalIndex"))
if mibBuilder.loadTexts: mscNmisLocalRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisLocal component.')
mscNmisLocalRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisLocal components. These components cannot be added nor deleted.')
mscNmisLocalComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisLocalStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalStorageType.setDescription('This variable represents the storage type value for the mscNmisLocal tables.')
mscNmisLocalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNmisLocalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalIndex.setDescription('This variable represents the index for the mscNmisLocal tables.')
mscNmisLocalStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 10), )
if mibBuilder.loadTexts: mscNmisLocalStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscNmisLocalStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalIndex"))
if mibBuilder.loadTexts: mscNmisLocalStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalStateEntry.setDescription('An entry in the mscNmisLocalStateTable.')
mscNmisLocalAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscNmisLocalOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscNmisLocalUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscNmisLocalOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 11), )
if mibBuilder.loadTexts: mscNmisLocalOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
mscNmisLocalOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalIndex"))
if mibBuilder.loadTexts: mscNmisLocalOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalOperEntry.setDescription('An entry in the mscNmisLocalOperTable.')
mscNmisLocalMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
mscNmisLocalActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
mscNmisLocalSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2))
mscNmisLocalSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 1), )
if mibBuilder.loadTexts: mscNmisLocalSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisLocalSession components.')
mscNmisLocalSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalSessionIndex"))
if mibBuilder.loadTexts: mscNmisLocalSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisLocalSession component.')
mscNmisLocalSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisLocalSession components. These components cannot be added nor deleted.')
mscNmisLocalSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisLocalSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionStorageType.setDescription('This variable represents the storage type value for the mscNmisLocalSession tables.')
mscNmisLocalSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: mscNmisLocalSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionIndex.setDescription('This variable represents the index for the mscNmisLocalSession tables.')
mscNmisLocalSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 10), )
if mibBuilder.loadTexts: mscNmisLocalSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionOperTable.setDescription('This group contains the operational attributes for a Local session.')
mscNmisLocalSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisLocalSessionIndex"))
if mibBuilder.loadTexts: mscNmisLocalSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionOperEntry.setDescription('An entry in the mscNmisLocalSessionOperTable.')
mscNmisLocalSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionUserid.setDescription('This attribute indicates the Userid logged in to the Session.')
mscNmisLocalSessionDataStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNmisLocalSessionDataStreams.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionDataStreams.setDescription('This attribute indicates which data streams will be transmitted back to the operator through this session. Only a userid with a command impact of system administration may register for logs. Description of bits: notused0(0) alarm(1) log(2) debug(3) scn(4)')
mscNmisLocalSessionHostCard = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 10, 1, 3), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisLocalSessionHostCard.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionHostCard.setDescription('This attribute holds the component name of the host control processor Card servicing the local operator session.')
mscNmisLocalSessionScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 2, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 2000)).clone(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNmisLocalSessionScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisLocalSessionScreenWidth.setDescription('This attribute indicates the maximum width (in characters) of operator command responses. Beyond this maximum, responses are either truncated or wrapped onto the next line, as appropriate. Asynchronous responses, such as alarms, are always displayed using a 79 character width.')
mscNmisTelnet = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3))
mscNmisTelnetRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 1), )
if mibBuilder.loadTexts: mscNmisTelnetRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisTelnet components.')
mscNmisTelnetRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"))
if mibBuilder.loadTexts: mscNmisTelnetRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisTelnet component.')
mscNmisTelnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisTelnet components. These components cannot be added nor deleted.')
mscNmisTelnetComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisTelnetStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetStorageType.setDescription('This variable represents the storage type value for the mscNmisTelnet tables.')
mscNmisTelnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNmisTelnetIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetIndex.setDescription('This variable represents the index for the mscNmisTelnet tables.')
mscNmisTelnetStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 10), )
if mibBuilder.loadTexts: mscNmisTelnetStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscNmisTelnetStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"))
if mibBuilder.loadTexts: mscNmisTelnetStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetStateEntry.setDescription('An entry in the mscNmisTelnetStateTable.')
mscNmisTelnetAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscNmisTelnetOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscNmisTelnetUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscNmisTelnetOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 11), )
if mibBuilder.loadTexts: mscNmisTelnetOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
mscNmisTelnetOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"))
if mibBuilder.loadTexts: mscNmisTelnetOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetOperEntry.setDescription('An entry in the mscNmisTelnetOperTable.')
mscNmisTelnetMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
mscNmisTelnetActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
mscNmisTelnetSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2))
mscNmisTelnetSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 1), )
if mibBuilder.loadTexts: mscNmisTelnetSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisTelnetSession components.')
mscNmisTelnetSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetSessionIndex"))
if mibBuilder.loadTexts: mscNmisTelnetSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisTelnetSession component.')
mscNmisTelnetSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisTelnetSession components. These components cannot be added nor deleted.')
mscNmisTelnetSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisTelnetSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionStorageType.setDescription('This variable represents the storage type value for the mscNmisTelnetSession tables.')
mscNmisTelnetSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: mscNmisTelnetSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionIndex.setDescription('This variable represents the index for the mscNmisTelnetSession tables.')
mscNmisTelnetSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10), )
if mibBuilder.loadTexts: mscNmisTelnetSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionOperTable.setDescription('This group contains the operational attributes for a Telnet session.')
mscNmisTelnetSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetSessionIndex"))
if mibBuilder.loadTexts: mscNmisTelnetSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionOperEntry.setDescription('An entry in the mscNmisTelnetSessionOperTable.')
mscNmisTelnetSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionUserid.setDescription('This attribute indicates the userid logged in to the session.')
mscNmisTelnetSessionDataStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNmisTelnetSessionDataStreams.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionDataStreams.setDescription('This attribute indicates which data streams (alarm, debug, log, scn) will be transmitted back to the operator through this session. Only a userid with a command impact of system administration may register for logs. When a client connection is up through this interface, all of the values are turned off. This means that this data is discarded when the session has a Telnet client connection set up. When the client connection terminates, the data which was being received prior to the client being set up is requested again. Description of bits: notused0(0) alarm(1) log(2) debug(3) scn(4)')
mscNmisTelnetSessionRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote device connected to the session.')
mscNmisTelnetSessionRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the Telnet client being used on the remote device connected to the session.')
mscNmisTelnetSessionScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 2000)).clone(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNmisTelnetSessionScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionScreenWidth.setDescription('This attribute indicates the maximum width (in characters) of operator command responses. Beyond this maximum, responses are either truncated or wrapped onto the next line, as appropriate. Asynchronous responses, such as alarms, are always displayed using a 79 character width.')
mscNmisTelnetSessionClient = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2))
mscNmisTelnetSessionClientRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 1), )
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisTelnetSessionClient components.')
mscNmisTelnetSessionClientRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetSessionClientIndex"))
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisTelnetSessionClient component.')
mscNmisTelnetSessionClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisTelnetSessionClient components. These components cannot be added nor deleted.')
mscNmisTelnetSessionClientComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionClientComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisTelnetSessionClientStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionClientStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientStorageType.setDescription('This variable represents the storage type value for the mscNmisTelnetSessionClient tables.')
mscNmisTelnetSessionClientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNmisTelnetSessionClientIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientIndex.setDescription('This variable represents the index for the mscNmisTelnetSessionClient tables.')
mscNmisTelnetSessionClientOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 10), )
if mibBuilder.loadTexts: mscNmisTelnetSessionClientOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientOperTable.setDescription('This group contains the operational attributes for a Telnet client.')
mscNmisTelnetSessionClientOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetSessionIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisTelnetSessionClientIndex"))
if mibBuilder.loadTexts: mscNmisTelnetSessionClientOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientOperEntry.setDescription('An entry in the mscNmisTelnetSessionClientOperTable.')
mscNmisTelnetSessionClientVirtualRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 10, 1, 1), RowPointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionClientVirtualRouter.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientVirtualRouter.setDescription('This attribute indicates the VR instance that determines which address space the remoteIpAddr belongs to.')
mscNmisTelnetSessionClientRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote side of the client connection.')
mscNmisTelnetSessionClientRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 3, 2, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisTelnetSessionClientRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the remote side of the client connection.')
mscNmisFmip = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4))
mscNmisFmipRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 1), )
if mibBuilder.loadTexts: mscNmisFmipRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisFmip components.')
mscNmisFmipRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipIndex"))
if mibBuilder.loadTexts: mscNmisFmipRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisFmip component.')
mscNmisFmipRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisFmip components. These components cannot be added nor deleted.')
mscNmisFmipComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisFmipStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipStorageType.setDescription('This variable represents the storage type value for the mscNmisFmip tables.')
mscNmisFmipIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNmisFmipIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipIndex.setDescription('This variable represents the index for the mscNmisFmip tables.')
mscNmisFmipStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 10), )
if mibBuilder.loadTexts: mscNmisFmipStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscNmisFmipStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipIndex"))
if mibBuilder.loadTexts: mscNmisFmipStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipStateEntry.setDescription('An entry in the mscNmisFmipStateTable.')
mscNmisFmipAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscNmisFmipOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscNmisFmipUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscNmisFmipOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 11), )
if mibBuilder.loadTexts: mscNmisFmipOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
mscNmisFmipOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipIndex"))
if mibBuilder.loadTexts: mscNmisFmipOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipOperEntry.setDescription('An entry in the mscNmisFmipOperTable.')
mscNmisFmipMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
mscNmisFmipActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
mscNmisFmipSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2))
mscNmisFmipSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 1), )
if mibBuilder.loadTexts: mscNmisFmipSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisFmipSession components.')
mscNmisFmipSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipSessionIndex"))
if mibBuilder.loadTexts: mscNmisFmipSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisFmipSession component.')
mscNmisFmipSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisFmipSession components. These components cannot be added nor deleted.')
mscNmisFmipSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisFmipSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionStorageType.setDescription('This variable represents the storage type value for the mscNmisFmipSession tables.')
mscNmisFmipSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 35)))
if mibBuilder.loadTexts: mscNmisFmipSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionIndex.setDescription('This variable represents the index for the mscNmisFmipSession tables.')
mscNmisFmipSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10), )
if mibBuilder.loadTexts: mscNmisFmipSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionOperTable.setDescription('This group contains the operational attributes for an FMIP session.')
mscNmisFmipSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFmipSessionIndex"))
if mibBuilder.loadTexts: mscNmisFmipSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionOperEntry.setDescription('An entry in the mscNmisFmipSessionOperTable.')
mscNmisFmipSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionUserid.setDescription('This attribute indicates the userid logged in to the session.')
mscNmisFmipSessionDataStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNmisFmipSessionDataStreams.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionDataStreams.setDescription('This attribute indicates which data streams will be transmitted back to the operator through this session. Only a userid with a command impact of system administration may register for logs. Description of bits: notused0(0) alarm(1) log(2) debug(3) scn(4)')
mscNmisFmipSessionRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipSessionRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote device connected to the session.')
mscNmisFmipSessionRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFmipSessionRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the FMIP client being used on the remote device connected to the session.')
mscNmisFmipSessionScreenWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 4, 2, 10, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(79, 2000)).clone(79)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscNmisFmipSessionScreenWidth.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFmipSessionScreenWidth.setDescription('This attribute indicates the maximum width (in characters) of operator command responses. Beyond this maximum, responses are either truncated or wrapped onto the next line, as appropriate. Asynchronous responses, such as alarms, are always displayed using a 79 character width.')
mscNmisFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5))
mscNmisFtpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 1), )
if mibBuilder.loadTexts: mscNmisFtpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisFtp components.')
mscNmisFtpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpIndex"))
if mibBuilder.loadTexts: mscNmisFtpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisFtp component.')
mscNmisFtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisFtp components. These components cannot be added nor deleted.')
mscNmisFtpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisFtpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpStorageType.setDescription('This variable represents the storage type value for the mscNmisFtp tables.')
mscNmisFtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscNmisFtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpIndex.setDescription('This variable represents the index for the mscNmisFtp tables.')
mscNmisFtpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 10), )
if mibBuilder.loadTexts: mscNmisFtpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscNmisFtpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpIndex"))
if mibBuilder.loadTexts: mscNmisFtpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpStateEntry.setDescription('An entry in the mscNmisFtpStateTable.')
mscNmisFtpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscNmisFtpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscNmisFtpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscNmisFtpOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 11), )
if mibBuilder.loadTexts: mscNmisFtpOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpOperTable.setDescription('This group contains the operational attributes for an NMIS manager. This group is common to all NMIS managers.')
mscNmisFtpOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpIndex"))
if mibBuilder.loadTexts: mscNmisFtpOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpOperEntry.setDescription('An entry in the mscNmisFtpOperTable.')
mscNmisFtpMaxAllowedSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpMaxAllowedSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpMaxAllowedSessions.setDescription('This attribute indicates the maximum number of simultaneous sessions the manager will allow.')
mscNmisFtpActiveSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpActiveSessions.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpActiveSessions.setDescription('This attribute indicates the number of simultaneous sessions currently active under the manager. Note that there may be fewer Session components than what is shown here, since an active session could be in the midst of logging in and may not yet be fully up.')
mscNmisFtpSession = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2))
mscNmisFtpSessionRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 1), )
if mibBuilder.loadTexts: mscNmisFtpSessionRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionRowStatusTable.setDescription('This entry controls the addition and deletion of mscNmisFtpSession components.')
mscNmisFtpSessionRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpSessionIndex"))
if mibBuilder.loadTexts: mscNmisFtpSessionRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionRowStatusEntry.setDescription('A single entry in the table represents a single mscNmisFtpSession component.')
mscNmisFtpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpSessionRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscNmisFtpSession components. These components cannot be added nor deleted.')
mscNmisFtpSessionComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpSessionComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscNmisFtpSessionStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpSessionStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionStorageType.setDescription('This variable represents the storage type value for the mscNmisFtpSession tables.')
mscNmisFtpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: mscNmisFtpSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionIndex.setDescription('This variable represents the index for the mscNmisFtpSession tables.')
mscNmisFtpSessionOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 10), )
if mibBuilder.loadTexts: mscNmisFtpSessionOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionOperTable.setDescription('This group contains the operational attributes for an FTP session.')
mscNmisFtpSessionOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscNmisFtpSessionIndex"))
if mibBuilder.loadTexts: mscNmisFtpSessionOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionOperEntry.setDescription('An entry in the mscNmisFtpSessionOperTable.')
mscNmisFtpSessionUserid = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpSessionUserid.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionUserid.setDescription('This attribute indicates the userid logged in to the session.')
mscNmisFtpSessionRemoteIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpSessionRemoteIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionRemoteIpAddr.setDescription('This attribute indicates the IP address of the remote device connected to the session.')
mscNmisFtpSessionRemoteTcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 17, 5, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscNmisFtpSessionRemoteTcpPort.setStatus('mandatory')
if mibBuilder.loadTexts: mscNmisFtpSessionRemoteTcpPort.setDescription('This attribute indicates the TCP port number of the FTP control connection being used on the remote device connected to the session.')
mscAc = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18))
mscAcRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 1), )
if mibBuilder.loadTexts: mscAcRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcRowStatusTable.setDescription('This entry controls the addition and deletion of mscAc components.')
mscAcRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIndex"))
if mibBuilder.loadTexts: mscAcRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcRowStatusEntry.setDescription('A single entry in the table represents a single mscAc component.')
mscAcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAc components. These components can be added.')
mscAcComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAcComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAcStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAcStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcStorageType.setDescription('This variable represents the storage type value for the mscAc tables.')
mscAcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscAcIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIndex.setDescription('This variable represents the index for the mscAc tables.')
mscAcProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 10), )
if mibBuilder.loadTexts: mscAcProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcProvTable.setDescription('This group contains the provisionable attributes which apply to the overall access of the the node.')
mscAcProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIndex"))
if mibBuilder.loadTexts: mscAcProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcProvEntry.setDescription('An entry in the mscAcProvTable.')
mscAcPublicKeyAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcPublicKeyAuth.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcPublicKeyAuth.setDescription('This attribute indicates whether Telnet sessions require a public key exchange in order to log in to the node. FMIP sessions always require a public key exchange for login authentication. Description of bits: telnet(0)')
mscAcUserid = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2))
mscAcUseridRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 1), )
if mibBuilder.loadTexts: mscAcUseridRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridRowStatusTable.setDescription('This entry controls the addition and deletion of mscAcUserid components.')
mscAcUseridRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcUseridIndex"))
if mibBuilder.loadTexts: mscAcUseridRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridRowStatusEntry.setDescription('A single entry in the table represents a single mscAcUserid component.')
mscAcUseridRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAcUserid components. These components can be added and deleted.')
mscAcUseridComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAcUseridComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAcUseridStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAcUseridStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridStorageType.setDescription('This variable represents the storage type value for the mscAcUserid tables.')
mscAcUseridIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 1, 1, 10), AsciiStringIndex().subtype(subtypeSpec=ValueSizeConstraint(1, 8)))
if mibBuilder.loadTexts: mscAcUseridIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridIndex.setDescription('This variable represents the index for the mscAcUserid tables.')
mscAcUseridProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10), )
if mibBuilder.loadTexts: mscAcUseridProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridProvTable.setDescription('This group contains the provisionable attributes for a userid.')
mscAcUseridProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcUseridIndex"))
if mibBuilder.loadTexts: mscAcUseridProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridProvEntry.setDescription('An entry in the mscAcUseridProvTable.')
mscAcUseridPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 1), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(5, 8))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: mscAcUseridPassword.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridPassword.setDescription('This attribute holds the password for the userid. This is a write-only attribute to provide additional security for passwords. The password string consists of 5-8 characters, which may be any printable ASCII characters. If the password string includes any non-alphanumeric character, such as $ or *, the entire string must be enclosed in double quotes. Letters in the password string are case-sensitive.')
mscAcUseridCustomerIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 8191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridCustomerIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridCustomerIdentifier.setDescription('This attribute indicates the Customer Identifier (CID) assigned to the userid. The CID is used in Customer Network Management (CNM). A CNM operator may only send commands to components provisioned with the same CID as the operator. A CNM operator will only receive event data, such as alarms, which is generated by components provisioned with the same CID as the operator. The special CID of 0 is reserved for the network owner, known as the Netman. The Passport CID attribute is compatible with DPN-100 Netman and Basic CIDs.')
mscAcUseridCommandScope = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("network", 1), ("device", 2), ("application", 3))).clone('application')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridCommandScope.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridCommandScope.setDescription('This attribute indicates the command scope assigned to the userid. The scope determines the importance of the components on which the userid will be allowed to execute commands. Scope has three levels: 1) Network scope implies the userid can manage components that affect the operation of the entire network, such as trunks. 2) Device scope implies the userid can manage components that affect the operation of the entire Passport module, such as processors or the file system. 3) Application scope implies the userid can manage components that affect the operation of a single application. Note that scope is hierarchical: A userid provisioned with network scope can also manage components with a scope of device or application.')
mscAcUseridCommandImpact = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("debug", 3), ("systemAdministration", 4), ("configuration", 5), ("service", 6), ("passive", 7))).clone('passive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridCommandImpact.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridCommandImpact.setDescription('This attribute indicates the command impact assigned to the userid. The impact determines the importance of the commands which the userid will be allowed to execute. Impact has five levels: 1) Debug impact implies the userid can issue all debugging commands. Debug is the highest impact level. 2) System Administration impact implies the userid can issue provisioning commands on security components. This means the userid can Add, Delete, Display, or Set the Userid and IpAccess subcomponents of AccessControl. 3) Configuration impact implies the userid can issue provisioning commands to alter the provisioned configuration of the Passport module, such as Start Prov, Add, Delete, and Set. 4) Service impact implies the userid can issue operational commands which may affect the service of running components, such as Lock and Unlock. 5) Passive impact implies the userid can only issue query commands which display unrestricted information but otherwise do not affect the operation or configuration of the Passport module. Commands such as List and Display. Passive is the lowest impact level. Note that impact is hierarchical: A userid provisioned with debug impact can also issue all other commands at lower impact levels.')
mscAcUseridAllowedAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1).clone(hexValue="80")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridAllowedAccess.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridAllowedAccess.setDescription('This attribute indicates the set of network management interfaces through which the userid will be allowed incoming access to the Passport. The allowedAccess attribute can be used to restrict a userid to a desired subset of the network management interfaces provided. Description of bits: local(0) telnet(1) fmip(2) ftp(3)')
mscAcUseridLoginDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 6), AsciiString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone(hexValue="2f")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridLoginDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridLoginDirectory.setDescription("This attribute is the login directory for file system commands or FTP commands. The userid will initially be placed in this directory upon logging in to Telnet, FMIP, Local or FTP. The default value of '/' is the root of the /sfs/ shadowed file system.")
mscAcUseridAllowedOutAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 2, 10, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcUseridAllowedOutAccess.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcUseridAllowedOutAccess.setDescription('This attribute indicates whether or not the userid will be allowed outgoing Telnet access from the Passport. Description of bits: telnet(0)')
mscAcIpAccess = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3))
mscAcIpAccessRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 1), )
if mibBuilder.loadTexts: mscAcIpAccessRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessRowStatusTable.setDescription('This entry controls the addition and deletion of mscAcIpAccess components.')
mscAcIpAccessRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIpAccessIndex"))
if mibBuilder.loadTexts: mscAcIpAccessRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessRowStatusEntry.setDescription('A single entry in the table represents a single mscAcIpAccess component.')
mscAcIpAccessRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcIpAccessRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscAcIpAccess components. These components can be added and deleted.')
mscAcIpAccessComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAcIpAccessComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscAcIpAccessStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscAcIpAccessStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessStorageType.setDescription('This variable represents the storage type value for the mscAcIpAccess tables.')
mscAcIpAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 1, 1, 10), IpAddress())
if mibBuilder.loadTexts: mscAcIpAccessIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessIndex.setDescription('This variable represents the index for the mscAcIpAccess tables.')
mscAcIpAccessProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 10), )
if mibBuilder.loadTexts: mscAcIpAccessProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessProvTable.setDescription('This group contains the provisionable attributes for an IpAccess component.')
mscAcIpAccessProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIndex"), (0, "Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", "mscAcIpAccessIndex"))
if mibBuilder.loadTexts: mscAcIpAccessProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessProvEntry.setDescription('An entry in the mscAcIpAccessProvTable.')
mscAcIpAccessIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 18, 3, 10, 1, 1), IpAddress().clone(hexValue="ffffffff")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscAcIpAccessIpAddressMask.setStatus('mandatory')
if mibBuilder.loadTexts: mscAcIpAccessIpAddressMask.setDescription("This attribute indicates the bit mask indicating the significant bits which are used in the comparison of an incoming IP address against the 'friendly' IP address in the instance value of the IpAccess component. This bit mask is ANDed to the incoming IP address, and ANDed to the instance value, before the comparison. An IP subnetwork address, in combination with this bit mask attribute, may be provisioned to include an entire IP subnetwork into the friendly IP address list with a single IpAccess component.")
mgmtInterfacesGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 1))
mgmtInterfacesGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 1, 1))
mgmtInterfacesGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 1, 1, 3))
mgmtInterfacesGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 1, 1, 3, 2))
mgmtInterfacesCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 3))
mgmtInterfacesCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 3, 1))
mgmtInterfacesCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 3, 1, 3))
mgmtInterfacesCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 15, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-MgmtInterfacesMIB", mscNmisLocalSessionHostCard=mscNmisLocalSessionHostCard, mscNmisFmipSessionScreenWidth=mscNmisFmipSessionScreenWidth, mscNmisLocalSessionRowStatusTable=mscNmisLocalSessionRowStatusTable, mscNmisTelnetSessionClientRowStatusEntry=mscNmisTelnetSessionClientRowStatusEntry, mscAcStorageType=mscAcStorageType, mscNmisLocalSessionComponentName=mscNmisLocalSessionComponentName, mscNmisLocalSessionScreenWidth=mscNmisLocalSessionScreenWidth, mscNmisTelnetSessionIndex=mscNmisTelnetSessionIndex, mscNmisFmipRowStatus=mscNmisFmipRowStatus, mscNmisTelnetSessionClientRemoteTcpPort=mscNmisTelnetSessionClientRemoteTcpPort, mscNmisTelnetSessionClientRowStatus=mscNmisTelnetSessionClientRowStatus, mscNmisLocalUsageState=mscNmisLocalUsageState, mscNmisRowStatusEntry=mscNmisRowStatusEntry, mscNmisFtpSession=mscNmisFtpSession, mscAcUserid=mscAcUserid, mscAcUseridProvTable=mscAcUseridProvTable, mscAcIpAccessIpAddressMask=mscAcIpAccessIpAddressMask, mscNmisTelnet=mscNmisTelnet, mscAcIpAccessProvEntry=mscAcIpAccessProvEntry, mscNmisFtpActiveSessions=mscNmisFtpActiveSessions, mscNmisLocalSessionOperEntry=mscNmisLocalSessionOperEntry, mscNmisTelnetSessionClientOperEntry=mscNmisTelnetSessionClientOperEntry, mscNmisLocalStorageType=mscNmisLocalStorageType, mscNmisFtpStateEntry=mscNmisFtpStateEntry, mscNmisTelnetSessionScreenWidth=mscNmisTelnetSessionScreenWidth, mscNmisFmipAdminState=mscNmisFmipAdminState, mscAcUseridRowStatusTable=mscAcUseridRowStatusTable, mscAcUseridPassword=mscAcUseridPassword, mscAcIpAccess=mscAcIpAccess, mscNmisLocalSessionRowStatusEntry=mscNmisLocalSessionRowStatusEntry, mscAcIpAccessRowStatusEntry=mscAcIpAccessRowStatusEntry, mscNmisFtpOperTable=mscNmisFtpOperTable, mscAcUseridRowStatus=mscAcUseridRowStatus, mscNmisTelnetSessionClientOperTable=mscNmisTelnetSessionClientOperTable, mscNmisLocalRowStatus=mscNmisLocalRowStatus, mscNmisLocalSession=mscNmisLocalSession, mscNmisTelnetSessionRowStatus=mscNmisTelnetSessionRowStatus, mscNmisFmipRowStatusTable=mscNmisFmipRowStatusTable, mscNmisFtpSessionUserid=mscNmisFtpSessionUserid, mscAcPublicKeyAuth=mscAcPublicKeyAuth, mscNmisTelnetSession=mscNmisTelnetSession, mscNmisFmipActiveSessions=mscNmisFmipActiveSessions, mscNmisFmipSessionOperEntry=mscNmisFmipSessionOperEntry, mscNmisTelnetSessionOperEntry=mscNmisTelnetSessionOperEntry, mscNmisTelnetStorageType=mscNmisTelnetStorageType, mscNmisFtpStorageType=mscNmisFtpStorageType, mscNmisTelnetSessionClientVirtualRouter=mscNmisTelnetSessionClientVirtualRouter, mscNmisFmipComponentName=mscNmisFmipComponentName, mscNmisFmipIndex=mscNmisFmipIndex, mscNmisTelnetSessionClientIndex=mscNmisTelnetSessionClientIndex, mscNmisFtpMaxAllowedSessions=mscNmisFtpMaxAllowedSessions, mgmtInterfacesCapabilities=mgmtInterfacesCapabilities, mscNmisTelnetSessionClientComponentName=mscNmisTelnetSessionClientComponentName, mgmtInterfacesMIB=mgmtInterfacesMIB, mscNmisFmipSessionOperTable=mscNmisFmipSessionOperTable, mscNmisFmipSessionRowStatus=mscNmisFmipSessionRowStatus, mscNmisTelnetSessionRemoteIpAddr=mscNmisTelnetSessionRemoteIpAddr, mscNmisLocalStateTable=mscNmisLocalStateTable, mscNmisFtpSessionComponentName=mscNmisFtpSessionComponentName, mscNmisFtpSessionRemoteTcpPort=mscNmisFtpSessionRemoteTcpPort, mscNmisTelnetSessionRowStatusEntry=mscNmisTelnetSessionRowStatusEntry, mscNmisTelnetOperationalState=mscNmisTelnetOperationalState, mscAcUseridCommandImpact=mscAcUseridCommandImpact, mscNmisFtpUsageState=mscNmisFtpUsageState, mscNmisFmipOperTable=mscNmisFmipOperTable, mscNmisRowStatus=mscNmisRowStatus, mscNmisFtpSessionStorageType=mscNmisFtpSessionStorageType, mscNmisLocalSessionOperTable=mscNmisLocalSessionOperTable, mscNmisFmipRowStatusEntry=mscNmisFmipRowStatusEntry, mscNmisFtpSessionRowStatus=mscNmisFtpSessionRowStatus, mscNmisTelnetStateEntry=mscNmisTelnetStateEntry, mscNmisFtpIndex=mscNmisFtpIndex, mscNmisTelnetRowStatusEntry=mscNmisTelnetRowStatusEntry, mscNmisTelnetSessionClientRowStatusTable=mscNmisTelnetSessionClientRowStatusTable, mscNmisTelnetRowStatusTable=mscNmisTelnetRowStatusTable, mscNmisFmipSessionUserid=mscNmisFmipSessionUserid, mscNmisRowStatusTable=mscNmisRowStatusTable, mscNmisFtpSessionRemoteIpAddr=mscNmisFtpSessionRemoteIpAddr, mscAcProvTable=mscAcProvTable, mscAcUseridStorageType=mscAcUseridStorageType, mscAcIpAccessStorageType=mscAcIpAccessStorageType, mgmtInterfacesGroupCA=mgmtInterfacesGroupCA, mscNmisFmip=mscNmisFmip, mscNmisTelnetMaxAllowedSessions=mscNmisTelnetMaxAllowedSessions, mscNmisFmipOperationalState=mscNmisFmipOperationalState, mscNmisTelnetSessionStorageType=mscNmisTelnetSessionStorageType, mscNmisFmipSessionRowStatusTable=mscNmisFmipSessionRowStatusTable, mscNmisFtpStateTable=mscNmisFtpStateTable, mscNmisTelnetSessionComponentName=mscNmisTelnetSessionComponentName, mscNmisFmipStorageType=mscNmisFmipStorageType, mscNmisFtpSessionOperEntry=mscNmisFtpSessionOperEntry, mscNmisFmipStateTable=mscNmisFmipStateTable, mgmtInterfacesCapabilitiesCA02A=mgmtInterfacesCapabilitiesCA02A, mscNmisLocalIndex=mscNmisLocalIndex, mscAcIpAccessRowStatusTable=mscAcIpAccessRowStatusTable, mscNmisIndex=mscNmisIndex, mscNmisLocalRowStatusEntry=mscNmisLocalRowStatusEntry, mscNmisFmipMaxAllowedSessions=mscNmisFmipMaxAllowedSessions, mscNmisFmipSessionDataStreams=mscNmisFmipSessionDataStreams, mscAcRowStatusEntry=mscAcRowStatusEntry, mscNmisTelnetActiveSessions=mscNmisTelnetActiveSessions, mscAcIpAccessRowStatus=mscAcIpAccessRowStatus, mscNmisFmipSessionRowStatusEntry=mscNmisFmipSessionRowStatusEntry, mscNmisFmipUsageState=mscNmisFmipUsageState, mscNmisLocal=mscNmisLocal, mscNmisFmipSession=mscNmisFmipSession, mgmtInterfacesGroup=mgmtInterfacesGroup, mscNmisTelnetSessionClient=mscNmisTelnetSessionClient, mgmtInterfacesCapabilitiesCA=mgmtInterfacesCapabilitiesCA, mscAcRowStatusTable=mscAcRowStatusTable, mscNmisTelnetOperEntry=mscNmisTelnetOperEntry, mscNmisTelnetSessionRemoteTcpPort=mscNmisTelnetSessionRemoteTcpPort, mgmtInterfacesGroupCA02A=mgmtInterfacesGroupCA02A, mscNmisFtpSessionRowStatusEntry=mscNmisFtpSessionRowStatusEntry, mscNmisLocalOperTable=mscNmisLocalOperTable, mscNmisLocalSessionUserid=mscNmisLocalSessionUserid, mscAcUseridLoginDirectory=mscAcUseridLoginDirectory, mscAcIpAccessIndex=mscAcIpAccessIndex, mscNmisLocalActiveSessions=mscNmisLocalActiveSessions, mscNmisStorageType=mscNmisStorageType, mscNmisLocalComponentName=mscNmisLocalComponentName, mscNmisTelnetComponentName=mscNmisTelnetComponentName, mscAcUseridCustomerIdentifier=mscAcUseridCustomerIdentifier, mscNmisFtpSessionRowStatusTable=mscNmisFtpSessionRowStatusTable, mscAcUseridComponentName=mscAcUseridComponentName, mscAcProvEntry=mscAcProvEntry, mscNmisFtpRowStatusEntry=mscNmisFtpRowStatusEntry, mscNmisFtpRowStatus=mscNmisFtpRowStatus, mscNmisTelnetStateTable=mscNmisTelnetStateTable, mscAcComponentName=mscAcComponentName, mgmtInterfacesCapabilitiesCA02=mgmtInterfacesCapabilitiesCA02, mscNmisFtpOperEntry=mscNmisFtpOperEntry, mscNmisFtpComponentName=mscNmisFtpComponentName, mscNmisTelnetSessionOperTable=mscNmisTelnetSessionOperTable, mscNmisLocalAdminState=mscNmisLocalAdminState, mscNmisFmipOperEntry=mscNmisFmipOperEntry, mscNmisLocalMaxAllowedSessions=mscNmisLocalMaxAllowedSessions, mscNmisTelnetSessionRowStatusTable=mscNmisTelnetSessionRowStatusTable, mscAcUseridCommandScope=mscAcUseridCommandScope, mscNmisLocalOperEntry=mscNmisLocalOperEntry, mscNmisTelnetAdminState=mscNmisTelnetAdminState, mscNmisLocalStateEntry=mscNmisLocalStateEntry, mscNmisFmipSessionComponentName=mscNmisFmipSessionComponentName, mscNmisFmipSessionIndex=mscNmisFmipSessionIndex, mgmtInterfacesGroupCA02=mgmtInterfacesGroupCA02, mscAcUseridRowStatusEntry=mscAcUseridRowStatusEntry, mscNmisFmipSessionStorageType=mscNmisFmipSessionStorageType, mscNmisTelnetRowStatus=mscNmisTelnetRowStatus, mscNmisLocalRowStatusTable=mscNmisLocalRowStatusTable, mscNmisLocalSessionDataStreams=mscNmisLocalSessionDataStreams, mscNmisFmipSessionRemoteTcpPort=mscNmisFmipSessionRemoteTcpPort, mscAcIpAccessProvTable=mscAcIpAccessProvTable, mscAcUseridAllowedAccess=mscAcUseridAllowedAccess, mscNmisTelnetSessionUserid=mscNmisTelnetSessionUserid, mscNmisComponentName=mscNmisComponentName, mscAcUseridAllowedOutAccess=mscAcUseridAllowedOutAccess, mscNmisTelnetSessionDataStreams=mscNmisTelnetSessionDataStreams, mscNmisFmipSessionRemoteIpAddr=mscNmisFmipSessionRemoteIpAddr, mscAcUseridIndex=mscAcUseridIndex, mscAcIpAccessComponentName=mscAcIpAccessComponentName, mscNmisFmipStateEntry=mscNmisFmipStateEntry, mscAcIndex=mscAcIndex, mscAcUseridProvEntry=mscAcUseridProvEntry, mscNmisTelnetOperTable=mscNmisTelnetOperTable, mscNmisTelnetSessionClientRemoteIpAddr=mscNmisTelnetSessionClientRemoteIpAddr, mscNmisTelnetUsageState=mscNmisTelnetUsageState, mscNmisLocalSessionRowStatus=mscNmisLocalSessionRowStatus, mscNmisFtp=mscNmisFtp, mscNmis=mscNmis, mscNmisTelnetIndex=mscNmisTelnetIndex, mscNmisFtpOperationalState=mscNmisFtpOperationalState, mscNmisLocalSessionIndex=mscNmisLocalSessionIndex, mscNmisFtpAdminState=mscNmisFtpAdminState, mscNmisLocalOperationalState=mscNmisLocalOperationalState, mscNmisFtpSessionOperTable=mscNmisFtpSessionOperTable, mscAc=mscAc, mscNmisFtpSessionIndex=mscNmisFtpSessionIndex, mscAcRowStatus=mscAcRowStatus, mscNmisFtpRowStatusTable=mscNmisFtpRowStatusTable, mscNmisLocalSessionStorageType=mscNmisLocalSessionStorageType, mscNmisTelnetSessionClientStorageType=mscNmisTelnetSessionClientStorageType)
