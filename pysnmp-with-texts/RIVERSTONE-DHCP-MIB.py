#
# PySNMP MIB module RIVERSTONE-DHCP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RIVERSTONE-DHCP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:57:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
riverstoneMibs, = mibBuilder.importSymbols("RIVERSTONE-SMI-MIB", "riverstoneMibs")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
iso, ObjectIdentity, Counter32, Bits, Counter64, NotificationType, TimeTicks, ModuleIdentity, IpAddress, Integer32, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "Counter32", "Bits", "Counter64", "NotificationType", "TimeTicks", "ModuleIdentity", "IpAddress", "Integer32", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
rsDhcpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 50))
rsDhcpMIB.setRevisions(('2002-09-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsDhcpMIB.setRevisionsDescriptions(('Added number of clients statistcs objects',))
if mibBuilder.loadTexts: rsDhcpMIB.setLastUpdated('200209100000Z')
if mibBuilder.loadTexts: rsDhcpMIB.setOrganization('Riverstone Networks Inc.')
if mibBuilder.loadTexts: rsDhcpMIB.setContactInfo('Riverstone Networks, Inc 5200 Great America Parkway Santa Clara, CA 95054 (408) 878-6500 nms-eng@riverstonenet.com http://www.riverstonenet.com')
if mibBuilder.loadTexts: rsDhcpMIB.setDescription('This mib module defines an SNMP API to manage Riverstone switch DHCP feature')
class RsErrorCode(TextualConvention, Integer32):
    description = 'A unique value, greater than zero defining the operation completion status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("noStatus", 1), ("timeout", 2), ("networkError", 3), ("noSpace", 4), ("invalidConfig", 5), ("commandCompleted", 6), ("internalError", 7), ("tftpServerError", 8))

rsDhcpNotifications = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 50, 0))
if mibBuilder.loadTexts: rsDhcpNotifications.setStatus('current')
if mibBuilder.loadTexts: rsDhcpNotifications.setDescription('Group for dhcp related Notifications')
rsDhcpLeaseFileGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5))
if mibBuilder.loadTexts: rsDhcpLeaseFileGroup.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileGroup.setDescription('Group for dhcp lease file upload')
rsDhcpConfigGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 50, 10))
if mibBuilder.loadTexts: rsDhcpConfigGroup.setStatus('current')
if mibBuilder.loadTexts: rsDhcpConfigGroup.setDescription('Dhcp config group')
rsDhcpStatisticsGroup = ObjectIdentity((1, 3, 6, 1, 4, 1, 5567, 2, 50, 15))
if mibBuilder.loadTexts: rsDhcpStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: rsDhcpStatisticsGroup.setDescription('Dhcp statistics group')
rsDhcpLeaseFileTransferOp = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noop", 1), ("sendLeaseFileToAgent", 2), ("receiveLeaseFileFromAgent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDhcpLeaseFileTransferOp.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileTransferOp.setDescription('Transfer operation to be performed. DHCP lease files are ASCII NVT text files. Send operations use tftp to transfer a file from the manager to agent. Receive operations use tftp to transfer the file from the agent to the manager. Default value is no operation or noop.')
rsDhcpLeaseFileManagerAddressType = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 2), InetAddressType().clone('ipv4')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDhcpLeaseFileManagerAddressType.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileManagerAddressType.setDescription('Specifies the type of IP address of the Manager to be used by the agent for rsDhcpLeaseFileTransferOp operations.')
rsDhcpLeaseFileManagerAddress = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDhcpLeaseFileManagerAddress.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileManagerAddress.setDescription('The IP address of the Manager to be used by the agent for rsDhcpLeaseFileTransferOp operations. Address must be a unicast address that is reachable from the agent and no firewalls/acls preventing tftp datagrams from being transferred. The address type is determined by the object value of rsDhcpLeaseFileManagerAddressType. A value for this object MUST be set prior to setting rsDhcpLeaseFileActivateTransfer to TRUE.')
rsDhcpLeaseFileFileName = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDhcpLeaseFileFileName.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileFileName.setDescription('The file name to be retrieved from the tftp server at host dhcpLeaseFileManagerAddress or to be written to. Default value is blank. Length of filename string must not exceed 255 alpha-numeric characters, no spaces in filenames.')
rsDhcpLeaseFileActivateTransfer = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rsDhcpLeaseFileActivateTransfer.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileActivateTransfer.setDescription('Activate the file transfer operation with a value of True(1) or stop it with False(2). Poll rsDhcpLeaseFileTransferStatus for current status. Default value is False. rsDhcpLeaseFileFileName, rsDhcpLeaseFileManagerAddress and rsDhcpLeaseFileTransferOp must be valid prior to setting this object to True. ')
rsDhcpLeaseFileTransferStatus = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("sending", 2), ("receiving", 3), ("transferComplete", 4), ("error", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDhcpLeaseFileTransferStatus.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileTransferStatus.setDescription('The current status of the transfer task. Default state is idle. sending indicates a file transfer (agent->mgr) in progress. receiving indicates sending a file from Manager to agent. transferComplete indicates a successful transfer. error indicates a failed transfer. See rsDhcpLeaseFileLastError to diagnose why the transfer failed.')
rsDhcpLeaseFileLastError = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 7), RsErrorCode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDhcpLeaseFileLastError.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileLastError.setDescription('A reason code for the last transfer operation. Poll this value when doing sets against dhcpLeaseFileActivateFile obtain status.')
rsDhcpLeaseFileLastErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 5, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDhcpLeaseFileLastErrorReason.setStatus('current')
if mibBuilder.loadTexts: rsDhcpLeaseFileLastErrorReason.setDescription('A string representation of dhcpLeaseFileLastError which may contain additional details.')
rsDhcpMaxClientsAllowed = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDhcpMaxClientsAllowed.setStatus('current')
if mibBuilder.loadTexts: rsDhcpMaxClientsAllowed.setDescription('Maximum number of DHCP clients allowed per system')
rsDhcpNumberOfClients = MibScalar((1, 3, 6, 1, 4, 1, 5567, 2, 50, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsDhcpNumberOfClients.setStatus('current')
if mibBuilder.loadTexts: rsDhcpNumberOfClients.setDescription('Current number of DHCP clients connected')
rsDhcpConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 50, 3))
rsDhcpCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 50, 3, 1))
rsDhcpGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5567, 2, 50, 3, 2))
rsDhcpCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5567, 2, 50, 3, 1, 1)).setObjects(("RIVERSTONE-DHCP-MIB", "rsDhcpGroup1"), ("RIVERSTONE-DHCP-MIB", "rsDhcpGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsDhcpCompliance = rsDhcpCompliance.setStatus('current')
if mibBuilder.loadTexts: rsDhcpCompliance.setDescription('The compliance statement for SNMP entities which implement the dhcp management and config objects for RS ')
rsDhcpGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 50, 3, 2, 1)).setObjects(("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileTransferOp"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileManagerAddressType"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileManagerAddress"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileFileName"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileActivateTransfer"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileTransferStatus"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileLastError"), ("RIVERSTONE-DHCP-MIB", "rsDhcpLeaseFileLastErrorReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsDhcpGroup1 = rsDhcpGroup1.setStatus('current')
if mibBuilder.loadTexts: rsDhcpGroup1.setDescription('The collection of objects which are used to represent version 1.0 of DHCP MIB')
rsDhcpGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 5567, 2, 50, 3, 2, 2)).setObjects(("RIVERSTONE-DHCP-MIB", "rsDhcpMaxClientsAllowed"), ("RIVERSTONE-DHCP-MIB", "rsDhcpNumberOfClients"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsDhcpGroup2 = rsDhcpGroup2.setStatus('current')
if mibBuilder.loadTexts: rsDhcpGroup2.setDescription('The collection of objects which are used to represent version 1.1 of DHCP MIB')
mibBuilder.exportSymbols("RIVERSTONE-DHCP-MIB", rsDhcpNumberOfClients=rsDhcpNumberOfClients, rsDhcpLeaseFileManagerAddress=rsDhcpLeaseFileManagerAddress, rsDhcpNotifications=rsDhcpNotifications, rsDhcpStatisticsGroup=rsDhcpStatisticsGroup, rsDhcpLeaseFileLastErrorReason=rsDhcpLeaseFileLastErrorReason, rsDhcpLeaseFileTransferStatus=rsDhcpLeaseFileTransferStatus, rsDhcpGroup1=rsDhcpGroup1, RsErrorCode=RsErrorCode, rsDhcpLeaseFileLastError=rsDhcpLeaseFileLastError, rsDhcpConformance=rsDhcpConformance, rsDhcpLeaseFileFileName=rsDhcpLeaseFileFileName, rsDhcpCompliance=rsDhcpCompliance, rsDhcpConfigGroup=rsDhcpConfigGroup, rsDhcpGroup2=rsDhcpGroup2, rsDhcpCompliances=rsDhcpCompliances, rsDhcpLeaseFileActivateTransfer=rsDhcpLeaseFileActivateTransfer, rsDhcpLeaseFileTransferOp=rsDhcpLeaseFileTransferOp, rsDhcpLeaseFileGroup=rsDhcpLeaseFileGroup, PYSNMP_MODULE_ID=rsDhcpMIB, rsDhcpMIB=rsDhcpMIB, rsDhcpGroups=rsDhcpGroups, rsDhcpMaxClientsAllowed=rsDhcpMaxClientsAllowed, rsDhcpLeaseFileManagerAddressType=rsDhcpLeaseFileManagerAddressType)
