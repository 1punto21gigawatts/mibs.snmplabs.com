#
# PySNMP MIB module ALCATEL-IND1-DOT1X-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-DOT1X-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:17:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Dot1X, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Dot1X")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
dot1xPaePortNumber, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xPaePortNumber")
InterfaceIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Bits, TimeTicks, ModuleIdentity, Counter64, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Unsigned32, IpAddress, Gauge32, iso, enterprises, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Bits", "TimeTicks", "ModuleIdentity", "Counter64", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Unsigned32", "IpAddress", "Gauge32", "iso", "enterprises", "NotificationType")
MacAddress, TimeStamp, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TimeStamp", "TextualConvention", "DisplayString", "TruthValue")
alcatelIND1Dot1XMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1))
alcatelIND1Dot1XMIB.setRevisions(('2010-02-10 00:00', '2007-04-03 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: alcatelIND1Dot1XMIB.setRevisionsDescriptions(('Addressing maximum number character supported in URL and DNS mibs.', 'Addressing discrepancies with Alcatel Standard.',))
if mibBuilder.loadTexts: alcatelIND1Dot1XMIB.setLastUpdated('201002100000Z')
if mibBuilder.loadTexts: alcatelIND1Dot1XMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1Dot1XMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1Dot1XMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): The Port Access Entity module for managing 802.1X for the Birds Of Prey Product Line The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alaIND1Dot1XMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1))
if mibBuilder.loadTexts: alaIND1Dot1XMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alaIND1Dot1XMIBObjects.setDescription('Branch For 802.1X Subsystem Managed Objects.')
alaIND1Dot1XMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2))
if mibBuilder.loadTexts: alaIND1Dot1XMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alaIND1Dot1XMIBConformance.setDescription('Branch For 802.1X Subsystem Conformance Information.')
alaIND1Dot1XMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1))
if mibBuilder.loadTexts: alaIND1Dot1XMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alaIND1Dot1XMIBGroups.setDescription('Branch For 802.1X Subsystem Units Of Conformance.')
class ALADot1xClassificationPolicyType(TextualConvention, Integer32):
    description = 'This policy type is the classification policy used to classify a device onto the system. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))
    namedValues = NamedValues(("dotXAuthentication", 0), ("macAuthentication", 1), ("groupMobilityRules", 2), ("vlanId", 3), ("defaultVlan", 4), ("block", 5), ("internalUseOnlyA", 6), ("internalUseOnlyB", 7), ("internalUseOnlyC", 8), ("captivePortalAuthentication", 9), ("captivePortalGroupMobility", 10), ("captivePortalDefaultVlan", 11), ("captivePortalVlanId", 12), ("captivePortalBlock", 13), ("captivePortalUnknown", 14), ("captivePortalUnpAuthSrv", 15), ("captivePortalUnpUsrCfg", 16), ("captivePortalUnpAAArule", 17), ("authServerUNP", 18), ("userConfigUNP", 19), ("aaaRuleUNP", 20), ("aaaAuthSvrDownUNP", 21), ("aaaAuthSvrDownBlock", 22))

class ALADot1xAuthenticationType(TextualConvention, Integer32):
    description = 'The type of authentication used'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("noAuthentication", 0), ("dotXAuthentication", 1), ("macAuthentication", 2), ("captivePortal", 3))

class ALADot1xAuthenticationResult(TextualConvention, Integer32):
    description = 'The result of the authentication. If the ALADot1xAuthenticationType of this device is noAuthentication then this object will return notApplicable. If the authentication has not completed then this object will return inProgress.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("inProgress", 1), ("success", 2), ("fail", 3))

class ALADot1xMacLearntState(TextualConvention, Integer32):
    description = 'The state of MAC address in the system'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("bridging", 0), ("filtering", 1), ("hicInProgress", 2), ("qmrInProgress", 3))

class ALADot1xMacQueryType(TextualConvention, Integer32):
    description = 'The query type of MAC address in the system. This query MAC address type is used to specify which type of MAC address to query from the alaDot1xDeviceStatusTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("all", 0), ("supplicant", 1), ("nonSupplicant", 2), ("captivePortal", 3))

class ALADot1xDeviceType(TextualConvention, Integer32):
    description = 'The type of device. Either supplicant or non-supplicant.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("supplicant", 1), ("nonSupplicant", 2))

alaDot1xPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1), )
if mibBuilder.loadTexts: alaDot1xPortTable.setReference('9.6.1')
if mibBuilder.loadTexts: alaDot1xPortTable.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortTable.setDescription('A table of system level information for each port supported by the Port Access Entity. An entry appears in this table for each port of this system.')
alaDot1xPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1), ).setIndexNames((0, "IEEE8021-PAE-MIB", "dot1xPaePortNumber"))
if mibBuilder.loadTexts: alaDot1xPortEntry.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortEntry.setDescription('TP DO: Add description here ')
alaDot1xPortSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortSlotNumber.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortSlotNumber.setDescription('The slot that the logical port represented by the dot1xPaePortNumber resides.')
alaDot1xPortPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortPortNumber.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortPortNumber.setDescription('The user port that the logical port represented by the dot1xPaePortNumber resides.')
alaDot1xPortMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortMACAddress.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortMACAddress.setDescription('The MAC address of the supplicant that along with the slot and port uniquely form the logical port represented by the dot1xPaePortNumber.')
alaDot1xPortVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortVlan.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortVlan.setDescription('The vlan that the supplicant is authorized to access.')
alaDot1xPortProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortProtocol.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortProtocol.setDescription('The protocol that is authorized for the supplicant. This is used in conjunction with the alaDot1xPortVlan object. Supplicant can be authorized to different vlans for different protocol.')
alaDot1xPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortUserName.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortUserName.setDescription('The user name of the supplicant used for authentication.')
alaDot1xPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuthenticated", 8), ("forceUnauthenticated", 9), ("authenticatedLocally", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortState.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xPortState.setDescription('The State of the port.')
alaDot1xSupplicantPolicyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 1, 1, 8), ALADot1xClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xSupplicantPolicyUsed.setStatus('deprecated')
if mibBuilder.loadTexts: alaDot1xSupplicantPolicyUsed.setDescription('Classification Policy under which the 802.1x supplicant is learned.')
alaDot1xMacTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4), )
if mibBuilder.loadTexts: alaDot1xMacTable.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacTable.setDescription('Provide the list of users currently authenticated into the switch for bridging purpose.')
alaDot1xMacEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1), ).setIndexNames((0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xMACAddress"))
if mibBuilder.loadTexts: alaDot1xMacEntry.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacEntry.setDescription('An entry in the AaaAuthenticatedUserTable.')
alaDot1xMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: alaDot1xMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMACAddress.setDescription('The MAC address of the supplicant that along with the slot and port uniquely form the logical port represented by the dot1xPaePortNumber.')
alaDot1xMacIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacIfIndex.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacIfIndex.setDescription('Interface index in which alaDot1xMACAddress was learned.')
alaDot1xMacSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacSlotNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacSlotNumber.setDescription('The slot in which alaDot1xMACAddress was learned.')
alaDot1xMacPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacPortNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacPortNumber.setDescription('The user port in which alaDot1xMACAddress was learned.')
alaDot1xMacVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacVlan.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacVlan.setDescription('The vlan that the supplicant is authorized to access.')
alaDot1xMacProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacProtocol.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacProtocol.setDescription('The protocol that is authorized for the supplicant. This is used in conjunction with the alaDot1xMacVlan object. Supplicant can be authorized to different vlans for different protocol.')
alaDot1xMacUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacUserName.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacUserName.setDescription('The user name of the supplicant used for authentication.')
alaDot1xMacState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("initialize", 1), ("disconnected", 2), ("connecting", 3), ("authenticating", 4), ("authenticated", 5), ("aborting", 6), ("held", 7), ("forceAuthenticated", 8), ("forceUnauthenticated", 9), ("authenticatedLocally", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacState.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacState.setDescription('The State of the port in which the current mac-address was learned.')
alaDot1xMacSupplicantPolicyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 4, 1, 9), ALADot1xClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xMacSupplicantPolicyUsed.setStatus('current')
if mibBuilder.loadTexts: alaDot1xMacSupplicantPolicyUsed.setDescription('Classification Policy under which the 802.1x supplicant is learned.')
alaDot1xPortLookupTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 2), )
if mibBuilder.loadTexts: alaDot1xPortLookupTable.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupTable.setDescription('A table of which allows to find the logical port number given the physical slot/port/MAC. An entry appears in this table for each logical port of this system.')
alaDot1xPortLookupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupSlotNumber"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupPortNumber"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupMACAddress"))
if mibBuilder.loadTexts: alaDot1xPortLookupEntry.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupEntry.setDescription('The translation table to look up the dot1xPaePortNumber.')
alaDot1xPortLookupSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortLookupSlotNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupSlotNumber.setDescription('The slot that the logical port represented by the dot1xPaePortNumber resides.')
alaDot1xPortLookupPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortLookupPortNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupPortNumber.setDescription('The physical port that the logical port represented by the dot1xPaePortNumber resides.')
alaDot1xPortLookupMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 2, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortLookupMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupMACAddress.setDescription('The MAC address of the supplicant that along with the slot and port uniquely form the logical port represented by the dot1xPaePortNumber.')
alaDot1xPortLookupInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 2, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xPortLookupInterfaceNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupInterfaceNumber.setDescription('The ifIndex that represnets the slot and port where the dot1xPaePortNumber resides.')
alaDot1xNonSupplicantTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5), )
if mibBuilder.loadTexts: alaDot1xNonSupplicantTable.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSupplicantTable.setDescription('A table of non 802.1x supplicants learned on 802.1x authenticated ports.')
alaDot1xNonSupplicantEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5, 1), ).setIndexNames((0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xNonSupplicantIntfNum"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xNonSupplicantMACAddress"))
if mibBuilder.loadTexts: alaDot1xNonSupplicantEntry.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSupplicantEntry.setDescription('Non 802.1x supplicant information.')
alaDot1xNonSupplicantIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xNonSupplicantIntfNum.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSupplicantIntfNum.setDescription('The ifIndex represneting the slot and port where the non 802.1x supplicant is learned.')
alaDot1xNonSupplicantMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xNonSupplicantMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSupplicantMACAddress.setDescription('The MAC address of the non 802.1x supplicant.')
alaDot1xNonSupplicantVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xNonSupplicantVlanID.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSupplicantVlanID.setDescription('The Id of the VLAN on which the non 802.1x supplicant is learned.')
alaDot1xNonSupplicantPolicyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5, 1, 4), ALADot1xClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xNonSupplicantPolicyUsed.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSupplicantPolicyUsed.setDescription('Classification policy under which the non 802.1x supplicant is learned.')
alaDot1xAuthenticationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("authenticated", 3), ("failed", 4), ("failedTimeout", 5), ("failedNoServer", 6), ("failedNoResources", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xAuthenticationStatus.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthenticationStatus.setDescription('Authentication status of the non 802.1x supplicant.')
alaDot1xAuthPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6), )
if mibBuilder.loadTexts: alaDot1xAuthPolicyTable.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthPolicyTable.setDescription('A table of supplicant and non supplicant device classification policies as they are configured on 802.1x authenticated ports.')
alaDot1xAuthPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1), ).setIndexNames((0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xAuthPolicyIntfNumber"))
if mibBuilder.loadTexts: alaDot1xAuthPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthPolicyEntry.setDescription('Device classification policies information.')
alaDot1xAuthPolicyIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: alaDot1xAuthPolicyIntfNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthPolicyIntfNumber.setDescription('The ifIndex that represnets the slot and port where the device classification policies are configured.')
alaDot1xNonSuppPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xNonSuppPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDot1xNonSuppPolicy.setDescription('MAC based authentication -> M Group Mobility -> G VLAN ID -> <vlan id> Default VLAN -> D Block -> B Fail -> , Captive Portal -> C Examples: MGD,GB. The default value is B (block). If the string size is zero (0), the default value is used.')
alaDot1xSuppPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xSuppPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDot1xSuppPolicy.setDescription('802.1x authentication -> X Group Mobility -> G VLAN ID -> <vlan id> Default VLAN -> D Block -> B Fail -> , Captive Portal -> C Default value: XGD,B. If the string size is zero (0), the default value is used.')
alaDot1xPollingCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xPollingCnt.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPollingCnt.setDescription('Number of retries to poll the end station for EAPoL frame before classifying the end station with group mobility or guest vlan ID configured. If the value is set to zero (0), it indicates a special case where the port will ignore any EAP frame from the client and this will force all devices to the non-supplicant policy for classification.')
alaDot1xCaptivePortalPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCaptivePortalPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCaptivePortalPolicy.setDescription('Web authentication -> W Group Mobility -> G VLAN ID -> <vlan id> Default VLAN -> D Block -> B Fail -> , Default value: XGD,B, if string size is zero, the default value is used.')
alaDot1xCPortalSessionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalSessionLimit.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalSessionLimit.setDescription('Captive Portal Session limit is the interval that a Captive Portal user can login. User is to be logged off after the session limit. If the session limit is set to zero (0), it means the session is unlimited, user will not be automatically logged off.')
alaDot1xCPortalRetryCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalRetryCnt.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalRetryCnt.setDescription('Number of retries for the Captive Portal user to provide the user credential before the software will classify the user to the failed policy according the the alaDot1xCaptivePortalPolicy.')
alaDot1xCportalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7))
alaDot1xCPortalIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalIpAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalIpAddress.setDescription('The factory default Captive Portal IP address is 10.123.0.1. If the 10.123.0.0 subnet is already in use, user can change the Captive Portal IP address to another 10.x.0.0 subnet. Only the second octet of the Captive Portal IP address can be changed.')
alaDot1xCPortalProxyURL = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalProxyURL.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalProxyURL.setDescription("The factory default for Captive Portal working with proxy server url has the key word proxy. If the user's proxy server url does not have the key work proxy, user can use this object to specify the proxy server url. If none is specified this object will return the default value - proxy.")
alaDot1xCPortalPostAuthSuccessRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalPostAuthSuccessRedirectURL.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalPostAuthSuccessRedirectURL.setDescription("Captive Portal's Redirect URL upon successful authentication.")
alaDot1xCPortalPostAuthFailRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalPostAuthFailRedirectURL.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalPostAuthFailRedirectURL.setDescription("Captive Portal's Redirect URL upon failed authentication.")
alaDot1xCPortalDNSKeyword1 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword1.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword1.setDescription("Captive Portal's DNS keyword string.")
alaDot1xCPortalDNSKeyword2 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword2.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword2.setDescription("Captive Portal's DNS keyword string.")
alaDot1xCPortalDNSKeyword3 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword3.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword3.setDescription("Captive Portal's DNS keyword string.")
alaDot1xCPortalDNSKeyword4 = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 7, 8), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword4.setStatus('current')
if mibBuilder.loadTexts: alaDot1xCPortalDNSKeyword4.setDescription("Captive Portal's DNS keyword string.")
alaDot1xDeviceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8), )
if mibBuilder.loadTexts: alaDot1xDeviceStatusTable.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusTable.setDescription('A table of system level information for each port supported by the Port Access Entity. An entry appears in this table for each port of this system.')
alaDot1xDeviceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1), ).setIndexNames((0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusMacQueryType"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusSlotNumber"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusPortNumber"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusMACAddress"), (0, "ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusDeviceType"))
if mibBuilder.loadTexts: alaDot1xDeviceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusEntry.setDescription('One entry of the Device Status Table. ')
alaDot1xDeviceStatusMacQueryType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 1), ALADot1xMacQueryType())
if mibBuilder.loadTexts: alaDot1xDeviceStatusMacQueryType.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusMacQueryType.setDescription('The type of MAC address to query.')
alaDot1xDeviceStatusSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: alaDot1xDeviceStatusSlotNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusSlotNumber.setDescription('The slot that the device reporting the status resides.')
alaDot1xDeviceStatusPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)))
if mibBuilder.loadTexts: alaDot1xDeviceStatusPortNumber.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusPortNumber.setDescription('The user port that the device reporting the status resides.')
alaDot1xDeviceStatusMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 4), MacAddress())
if mibBuilder.loadTexts: alaDot1xDeviceStatusMACAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusMACAddress.setDescription('The MAC address of the device reporting the status.')
alaDot1xDeviceStatusDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 5), ALADot1xDeviceType())
if mibBuilder.loadTexts: alaDot1xDeviceStatusDeviceType.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusDeviceType.setDescription('The type of device. Either supplicant or non-supplicant.')
alaDot1xDeviceStatusVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusVlan.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusVlan.setDescription('The vlan that the device reporting the status is authorized to access.')
alaDot1xDeviceStatusIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusIPAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusIPAddress.setDescription('The IP address of the device reporting the status.')
alaDot1xDeviceStatusUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 8), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusUserName.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusUserName.setDescription('The user name of the device reporting the status.')
alaDot1xDeviceStatusProfileUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 9), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusProfileUsed.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusProfileUsed.setDescription('The name of the User Network Profile entry used when the device reporting the status is classified.')
alaDot1xDeviceStatusAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 10), ALADot1xAuthenticationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusAuthType.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusAuthType.setDescription('The type of authentication used by the device reporting the status to obtain network access.')
alaDot1xDeviceStatusPolicyUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 11), ALADot1xClassificationPolicyType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusPolicyUsed.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusPolicyUsed.setDescription('Classification Policy under which the device is learned.')
alaDot1xDeviceStatusAuthResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 12), ALADot1xAuthenticationResult()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusAuthResult.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusAuthResult.setDescription('The State of the port.')
alaDot1xDeviceStatusMacLearntState = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 13), ALADot1xMacLearntState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusMacLearntState.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusMacLearntState.setDescription('The State of the MAC classified in the switch.')
alaDot1xDeviceStatusTimeLearned = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 14), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusTimeLearned.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusTimeLearned.setDescription('The time that the MAC address is learned in the system.')
alaDot1xDeviceStatusCaptivePortalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 8, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alaDot1xDeviceStatusCaptivePortalUsed.setStatus('current')
if mibBuilder.loadTexts: alaDot1xDeviceStatusCaptivePortalUsed.setDescription('The object indicates if the device is classified in the system using Captive Portal. A value of True means that the device has used Captive Portal to authenticate its credential and a value of False means that the device has not used Captive Portal to authenticate its credential.')
alaDot1xAdminLogoutParams = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 9))
alaDot1xAdminLogoutType = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noOperation", 0), ("macAddress", 1), ("username", 2), ("networkProfileName", 3), ("interfaceId", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAdminLogoutType.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAdminLogoutType.setDescription('When this variable is set, the switch is to logout the user based on the logout type. The associated MIB object should be correctly set based on the logout type. If the corresponding MIB object that contain the criteria is not set correctly the switch will not be able to perform the logout operation. After the logout operation is done, the switch will set the corresponding criteria to back to its default value. Also when the logout operation is done, the switch is to set this variable back to zero (0).')
alaDot1xAdminLogoutMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 9, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAdminLogoutMacAddress.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAdminLogoutMacAddress.setDescription('This value is used only if alaDot1xAdminLogoutType is set to MAC address. The default value is set to ff:ff:ff:ff:ff:ff. This well know broadcast MAC address will not be learned by the switch. The switch will reset this to the default value after the logout operation is performed')
alaDot1xAdminLogoutUserName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 9, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAdminLogoutUserName.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAdminLogoutUserName.setDescription('This value is used only if alaDot1xAdminLogoutType is set to username. The default is a NULL string. The switch will reset this to the default value after the logout operation is performed. User is not allowed to set the value to NULL.')
alaDot1xAdminLogoutNetworkProfileName = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 9, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAdminLogoutNetworkProfileName.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAdminLogoutNetworkProfileName.setDescription('This value is used only if alaDot1xAdminLogoutType is set to networkprofilename. The default is a NULL string. The switch will reset this to the default value after the logout operation is performed. User is not allowed to set the value to NULL.')
alaDot1xAdminLogoutInterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 9, 5), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAdminLogoutInterfaceId.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAdminLogoutInterfaceId.setDescription('This value is used only if alaDot1xAdminLogoutType is set to interfaceId. The default value is zero (0). The switch will reset this to the default value after the logout operation is performed.')
alaDot1xAuthServerTimeout = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 10))
alaDot1xAuthSvrTimeoutPolicy = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutPolicy.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutPolicy.setDescription("Block -> B User Network Profile -> 'user network profile name' Default value is B.")
alaDot1xAuthSvrTimeoutReAuthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutReAuthPeriod.setDescription('This is the time interval in second that the supplicant is to be classified according to the Auth Server Down Policy (alaDot1xAuthServerTimeoutPolicy). When this time is expired, the supplicant will be prompted to re-authenticate and see if the Auth Server is back up. The default value is 30 seconds.')
alaDot1xAuthSvrTimeoutStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutStatus.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutStatus.setDescription('This is object is to enable or disable the use of alaDot1xAuthSvrTimeoutPolicy and alaDot1xAuthSvrTimeoutReAuthPeriod. Default is disabled.')
class AlaPassThroughStatus(TextualConvention, Integer32):
    description = ' Admin status'
    status = 'obsolete'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

alaPassthroughConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 11))
alaDot1xPassthroughStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 11, 1), AlaPassThroughStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaDot1xPassthroughStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaDot1xPassthroughStatus.setDescription('Passthrough of 802.1x packets. Force the 802.1x packet to flood in the VLAN.')
alaAvlanPassthroughStatus = MibScalar((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 1, 11, 2), AlaPassThroughStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alaAvlanPassthroughStatus.setStatus('obsolete')
if mibBuilder.loadTexts: alaAvlanPassthroughStatus.setDescription('Passthrough of AVLAN packets. Force the AVLAN packet to flood in the VLAN.')
alaIND1Dot1XMIBCompliances = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 2)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaINDDot1XPortGroup"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupGroup"), ("ALCATEL-IND1-DOT1X-MIB", "alaINDDot1XPolicyGroup"), ("ALCATEL-IND1-DOT1X-MIB", "alaINDDot1XDeviceStatusGroup"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xAuthSvrTimeoutGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaIND1Dot1XMIBCompliances = alaIND1Dot1XMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alaIND1Dot1XMIBCompliances.setDescription('Compliance statement for Alcatel 802.1x.')
alaINDDot1XPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortSlotNumber"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortPortNumber"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortMACAddress"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortVlan"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortProtocol"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortUserName"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaINDDot1XPortGroup = alaINDDot1XPortGroup.setStatus('current')
if mibBuilder.loadTexts: alaINDDot1XPortGroup.setDescription('Collection of 802.1x objects for port status.')
alaDot1xPortLookupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupSlotNumber"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupPortNumber"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupMACAddress"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPortLookupInterfaceNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDot1xPortLookupGroup = alaDot1xPortLookupGroup.setStatus('current')
if mibBuilder.loadTexts: alaDot1xPortLookupGroup.setDescription('Collection of 802.1x objects for port lookup.')
alaINDDot1XPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaDot1xNonSuppPolicy"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xSuppPolicy"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPollingCnt"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xCaptivePortalPolicy"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xCPortalSessionLimit"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xCPortalRetryCnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaINDDot1XPolicyGroup = alaINDDot1XPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: alaINDDot1XPolicyGroup.setDescription('Collection of 802.1x objects for supplicant and non-supplicant policies.')
alaINDDot1XDeviceStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1, 4)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusVlan"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusIPAddress"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusUserName"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusProfileUsed"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusAuthType"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusPolicyUsed"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusAuthResult"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusMacLearntState"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusTimeLearned"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xDeviceStatusCaptivePortalUsed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaINDDot1XDeviceStatusGroup = alaINDDot1XDeviceStatusGroup.setStatus('current')
if mibBuilder.loadTexts: alaINDDot1XDeviceStatusGroup.setDescription('Collection of 802.1x objects for the status of the devices on an 802.1X enable port.')
alaDot1xAuthSvrTimeoutGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1, 5)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaDot1xAuthSvrTimeoutPolicy"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xAuthSvrTimeoutReAuthPeriod"), ("ALCATEL-IND1-DOT1X-MIB", "alaDot1xAuthSvrTimeoutStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaDot1xAuthSvrTimeoutGroup = alaDot1xAuthSvrTimeoutGroup.setStatus('current')
if mibBuilder.loadTexts: alaDot1xAuthSvrTimeoutGroup.setDescription('Collection of 802.1x objects for the Authentication Server Timeout.')
alaPassthroughConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 30, 1, 2, 1, 6)).setObjects(("ALCATEL-IND1-DOT1X-MIB", "alaDot1xPassthroughStatus"), ("ALCATEL-IND1-DOT1X-MIB", "alaAvlanPassthroughStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alaPassthroughConfigGroup = alaPassthroughConfigGroup.setStatus('obsolete')
if mibBuilder.loadTexts: alaPassthroughConfigGroup.setDescription(' Status of passthrough for 802.1x and avlan configuration in devices.')
mibBuilder.exportSymbols("ALCATEL-IND1-DOT1X-MIB", alaDot1xCaptivePortalPolicy=alaDot1xCaptivePortalPolicy, ALADot1xAuthenticationResult=ALADot1xAuthenticationResult, alaDot1xDeviceStatusEntry=alaDot1xDeviceStatusEntry, alaDot1xPortLookupSlotNumber=alaDot1xPortLookupSlotNumber, alaDot1xAuthPolicyEntry=alaDot1xAuthPolicyEntry, alaDot1xDeviceStatusSlotNumber=alaDot1xDeviceStatusSlotNumber, alaDot1xMacState=alaDot1xMacState, alaDot1xCPortalDNSKeyword1=alaDot1xCPortalDNSKeyword1, alaDot1xPassthroughStatus=alaDot1xPassthroughStatus, alaDot1xDeviceStatusProfileUsed=alaDot1xDeviceStatusProfileUsed, alaINDDot1XPolicyGroup=alaINDDot1XPolicyGroup, alaDot1xDeviceStatusMACAddress=alaDot1xDeviceStatusMACAddress, alaDot1xMacSlotNumber=alaDot1xMacSlotNumber, alaINDDot1XPortGroup=alaINDDot1XPortGroup, alaDot1xDeviceStatusUserName=alaDot1xDeviceStatusUserName, alaDot1xNonSuppPolicy=alaDot1xNonSuppPolicy, alcatelIND1Dot1XMIB=alcatelIND1Dot1XMIB, alaDot1xAuthSvrTimeoutReAuthPeriod=alaDot1xAuthSvrTimeoutReAuthPeriod, AlaPassThroughStatus=AlaPassThroughStatus, alaDot1xPortPortNumber=alaDot1xPortPortNumber, alaDot1xMacPortNumber=alaDot1xMacPortNumber, alaDot1xCPortalDNSKeyword3=alaDot1xCPortalDNSKeyword3, alaDot1xAuthenticationStatus=alaDot1xAuthenticationStatus, alaDot1xCportalConfig=alaDot1xCportalConfig, alaDot1xNonSupplicantPolicyUsed=alaDot1xNonSupplicantPolicyUsed, PYSNMP_MODULE_ID=alcatelIND1Dot1XMIB, alaDot1xCPortalSessionLimit=alaDot1xCPortalSessionLimit, alaDot1xAdminLogoutNetworkProfileName=alaDot1xAdminLogoutNetworkProfileName, alaDot1xDeviceStatusCaptivePortalUsed=alaDot1xDeviceStatusCaptivePortalUsed, alaDot1xAuthSvrTimeoutGroup=alaDot1xAuthSvrTimeoutGroup, alaDot1xPortLookupGroup=alaDot1xPortLookupGroup, alaDot1xPortState=alaDot1xPortState, alaDot1xMacUserName=alaDot1xMacUserName, alaDot1xAdminLogoutInterfaceId=alaDot1xAdminLogoutInterfaceId, alaDot1xNonSupplicantVlanID=alaDot1xNonSupplicantVlanID, alaDot1xPortLookupInterfaceNumber=alaDot1xPortLookupInterfaceNumber, alaDot1xPollingCnt=alaDot1xPollingCnt, ALADot1xDeviceType=ALADot1xDeviceType, alaDot1xAuthSvrTimeoutStatus=alaDot1xAuthSvrTimeoutStatus, alaDot1xPortProtocol=alaDot1xPortProtocol, alaDot1xDeviceStatusMacLearntState=alaDot1xDeviceStatusMacLearntState, alaDot1xNonSupplicantTable=alaDot1xNonSupplicantTable, alaDot1xDeviceStatusTimeLearned=alaDot1xDeviceStatusTimeLearned, alaPassthroughConfig=alaPassthroughConfig, alaDot1xCPortalProxyURL=alaDot1xCPortalProxyURL, alaDot1xCPortalIpAddress=alaDot1xCPortalIpAddress, alaDot1xMacProtocol=alaDot1xMacProtocol, alaDot1xAdminLogoutType=alaDot1xAdminLogoutType, alaIND1Dot1XMIBGroups=alaIND1Dot1XMIBGroups, alaIND1Dot1XMIBObjects=alaIND1Dot1XMIBObjects, alaDot1xAuthServerTimeout=alaDot1xAuthServerTimeout, alaDot1xPortLookupMACAddress=alaDot1xPortLookupMACAddress, alaDot1xMacVlan=alaDot1xMacVlan, alaDot1xCPortalPostAuthFailRedirectURL=alaDot1xCPortalPostAuthFailRedirectURL, alaDot1xAuthPolicyTable=alaDot1xAuthPolicyTable, alaDot1xDeviceStatusMacQueryType=alaDot1xDeviceStatusMacQueryType, alaDot1xPortMACAddress=alaDot1xPortMACAddress, alaDot1xDeviceStatusAuthResult=alaDot1xDeviceStatusAuthResult, ALADot1xClassificationPolicyType=ALADot1xClassificationPolicyType, alaDot1xPortUserName=alaDot1xPortUserName, alaDot1xPortLookupTable=alaDot1xPortLookupTable, alaDot1xPortLookupEntry=alaDot1xPortLookupEntry, alaDot1xAdminLogoutParams=alaDot1xAdminLogoutParams, alaDot1xDeviceStatusPolicyUsed=alaDot1xDeviceStatusPolicyUsed, alaDot1xPortSlotNumber=alaDot1xPortSlotNumber, alaAvlanPassthroughStatus=alaAvlanPassthroughStatus, alaDot1xPortTable=alaDot1xPortTable, alaDot1xCPortalDNSKeyword4=alaDot1xCPortalDNSKeyword4, alaDot1xDeviceStatusPortNumber=alaDot1xDeviceStatusPortNumber, alaDot1xPortVlan=alaDot1xPortVlan, ALADot1xMacQueryType=ALADot1xMacQueryType, alaDot1xNonSupplicantIntfNum=alaDot1xNonSupplicantIntfNum, alaDot1xNonSupplicantMACAddress=alaDot1xNonSupplicantMACAddress, alaDot1xSuppPolicy=alaDot1xSuppPolicy, alaIND1Dot1XMIBConformance=alaIND1Dot1XMIBConformance, alaDot1xDeviceStatusDeviceType=alaDot1xDeviceStatusDeviceType, ALADot1xAuthenticationType=ALADot1xAuthenticationType, alaDot1xNonSupplicantEntry=alaDot1xNonSupplicantEntry, alaDot1xSupplicantPolicyUsed=alaDot1xSupplicantPolicyUsed, alaDot1xAuthSvrTimeoutPolicy=alaDot1xAuthSvrTimeoutPolicy, alaDot1xAuthPolicyIntfNumber=alaDot1xAuthPolicyIntfNumber, alaDot1xDeviceStatusAuthType=alaDot1xDeviceStatusAuthType, alaDot1xAdminLogoutUserName=alaDot1xAdminLogoutUserName, alaDot1xMACAddress=alaDot1xMACAddress, alaDot1xAdminLogoutMacAddress=alaDot1xAdminLogoutMacAddress, alaPassthroughConfigGroup=alaPassthroughConfigGroup, alaDot1xCPortalPostAuthSuccessRedirectURL=alaDot1xCPortalPostAuthSuccessRedirectURL, alaDot1xMacSupplicantPolicyUsed=alaDot1xMacSupplicantPolicyUsed, alaDot1xCPortalDNSKeyword2=alaDot1xCPortalDNSKeyword2, alaDot1xDeviceStatusVlan=alaDot1xDeviceStatusVlan, alaDot1xMacIfIndex=alaDot1xMacIfIndex, alaDot1xMacTable=alaDot1xMacTable, alaDot1xPortEntry=alaDot1xPortEntry, alaINDDot1XDeviceStatusGroup=alaINDDot1XDeviceStatusGroup, alaDot1xCPortalRetryCnt=alaDot1xCPortalRetryCnt, alaDot1xDeviceStatusIPAddress=alaDot1xDeviceStatusIPAddress, alaDot1xDeviceStatusTable=alaDot1xDeviceStatusTable, alaDot1xMacEntry=alaDot1xMacEntry, ALADot1xMacLearntState=ALADot1xMacLearntState, alaIND1Dot1XMIBCompliances=alaIND1Dot1XMIBCompliances, alaDot1xPortLookupPortNumber=alaDot1xPortLookupPortNumber)
