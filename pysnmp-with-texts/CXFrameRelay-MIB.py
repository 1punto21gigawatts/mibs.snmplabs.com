#
# PySNMP MIB module CXFrameRelay-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CXFrameRelay-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:32:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
cxModuleHwPhysSlot, = mibBuilder.importSymbols("CXModuleHardware-MIB", "cxModuleHwPhysSlot")
cxFrameRelay, Alias, SapIndex = mibBuilder.importSymbols("CXProduct-SMI", "cxFrameRelay", "Alias", "SapIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibIdentifier, Unsigned32, Bits, TimeTicks, Counter32, ModuleIdentity, ObjectIdentity, Counter64, Gauge32, NotificationType, IpAddress, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "Unsigned32", "Bits", "TimeTicks", "Counter32", "ModuleIdentity", "ObjectIdentity", "Counter64", "Gauge32", "NotificationType", "IpAddress", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DLCI(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 1022)

frpSapTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1), )
if mibBuilder.loadTexts: frpSapTable.setReference('Draft American National Standard T1.617-1991, Annex D')
if mibBuilder.loadTexts: frpSapTable.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapTable.setDescription('A table containing configuration information about each frame relay module service access point.')
frpSapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpSapNumber"))
if mibBuilder.loadTexts: frpSapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapEntry.setDescription('The parameters for a particular frame relay module service access point.')
frpSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapNumber.setDescription("Indicates the row containing objects for configuring (or monitoring) a SAP that is associated with another SAP either in the Bit-Oriented Protocol (BOP) Driver, B-Channel Manager (BCM) (CX900 only), SMDS/ATM Data Exchange Interface (SDXI/ADXI) (CX1000 only), Frame Relay Interface Module (FRIM), Gateway Mux/Frame Relay Module (GMF), or Gateway Frame Relay/Frame Relay (GFF) (CX1000 only) software layer. Options: 1 - 7: (CX900's BOP- or BCM-related lower SAPs) 1 - 16: (CX1000's BOP- or DXI-related lower SAPs) 17 - 32: (CX1000's GFF-related lower SAPs) 40: (GMF-related upper SAP) 41: (FRIM-related upper SAP) Default Value: none")
frpSapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapRowStatus.setDescription('Determines the status of the objects in a table row. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: none Configuration Changed: administrative ')
frpSapAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 3), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapAlias.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapAlias.setDescription('Determines the textual name identifying this SAP. Range of Values: CX1000: 0 - 35 alphanumeric characters beginning with a non-numeric character CX900: 0 - 16 alphanumeric characters beginning with a non-numeric character Default Value: frsap1 (for frpSapNumber 1) frsap2 (for frpSapNumber 2) frsap3 (for frpSapNumber 3) frsap4 (for frpSapNumber 4) frsap5 (for frpSapNumber 5) frsap6 (for frpSapNumber 6) frsap7 (for frpSapNumber 7) frsap8 (for frpSapNumber 8) frsap9 (for frpSapNumber 9) frsap10 (for frpSapNumber 10) frsap11 (for frpSapNumber 11) frsap12 (for frpSapNumber 12) frsap13 (for frpSapNumber 13) frsap14 (for frpSapNumber 14) frsap15 (for frpSapNumber 15) frsap16 (for frpSapNumber 16) frsap17 (for frpSapNumber 17) frsap18 (for frpSapNumber 18) frsap19 (for frpSapNumber 19) frsap20 (for frpSapNumber 20) frsap21 (for frpSapNumber 21) frsap22 (for frpSapNumber 22) frsap23 (for frpSapNumber 23) frsap24 (for frpSapNumber 24) frsap25 (for frpSapNumber 25) frsap26 (for frpSapNumber 26) frsap27 (for frpSapNumber 27) frsap28 (for frpSapNumber 28) frsap29 (for frpSapNumber 29) frsap30 (for frpSapNumber 30) frsap31 (for frpSapNumber 31) frsap32 (for frpSapNumber 32) frsap40 (for frpSapNumber 40) frsap41 (for frpSapNumber 41) Configuration Changed: administrative ')
frpSapCompanionAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 4), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapCompanionAlias.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapCompanionAlias.setDescription("Determines the textual name identifying this SAP's companion SAP in either the Frame Relay Interface Module, the Bit-Oriented Protocol (BOP) Driver, the SMDS/ATM Data Exchange Interface (SDXI/ADXI) (CX1000), the Gateway MUX/ Frame Relay (GMF), or the Gateway Frame Relay/Frame Relay (GFF) (CX1000) software layer. Range of Values: CX1000: 0 - 35 alphanumeric characters beginning with a non-numeric character CX900: 0-16 alphanumeric characters beginning with a non-numeric character Default Value: FrPort.11-FrPort.71 (locked for CX900's frpSapNumber 1-7) bopsap1-16 (for CX1000's frpSapNumber 1-16) gffsap17-32 (for CX1000's frpSapNumber 17-32) undefined (for frpSapNumber 40-41) Configuration Changed: administrative ")
frpSapType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("lower", 1), ("upper", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapType.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapType.setDescription("Determines this SAP's type. Options: lower (1): SAP is a lower type (leads to a physical port, or to an intervening SAP in the SMDS/ATM Data Exchange Interface software layer (CX1000 only), or to a SAP in the Gateway Frame Relay/Frame Relay software layer) (CX1000 only). upper (2): SAP is a upper type (leads to a logical port in Frame Relay Interface Module or Gateway MUX/Frame Relay software layer. Default Value: none Configuration Changed: administrative ")
frpSapAddressLength = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("two-octets", 2), ("three-octets", 3), ("four-octets", 4))).clone('two-octets')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapAddressLength.setReference('Draft American National Standard T1.618-1991, Section 3.2')
if mibBuilder.loadTexts: frpSapAddressLength.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapAddressLength.setDescription("Determines the address length in octets that will be used for DLCIs. This length includes control data for Q.922 format. This object is meaningful only if 'frpSapType' for this SAP is set to 'lower'. Options: two-octets (2): two octets three-octets (3): three octets (for future use) four-octets (4): four octets (for future use) Default Value: two-octets (2) Configuration Changed: administrative ")
frpSapMaxSupportedVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapMaxSupportedVCs.setStatus('deprecated')
if mibBuilder.loadTexts: frpSapMaxSupportedVCs.setDescription('Determines the maximum number of virtual circuits allowed for this SAP. Changing this maximum number no longer takes effect; the system now manages it dynamically. This object remains in the Frame Relay MIB to support older software that interacts with this MIB object. Range of Values: 1 - 1,022 (locked at 1,022) Default Value: 1,022')
frpSapVCBase = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapVCBase.setStatus('deprecated')
if mibBuilder.loadTexts: frpSapVCBase.setDescription('Determines the base value used for virtual circuit numbering at this SAP. Changing this base value no longer takes effect; the system now manages it dynamically. This object remains in the Frame Relay MIB to support older software (revision 2.0 and earlier) that interacts with this MIB object. Range of Values: 1 - 1,022 (locked at 1) Default Value: 1')
frpSapOutCongestionManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapOutCongestionManagement.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapOutCongestionManagement.setDescription('Determines whether outbound congestion management has been enabled for this SAP. If enabled, congestion management techniques control the data flow out the SAP. Options: disabled (1): congestion management is disabled enabled (2): congestion management is enabled Default Value: disabled (1) Configuration Changed: operative ')
frpSapResourceAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapResourceAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapResourceAllocation.setDescription('Determines the virtual resources available to this SAP at any time as a percentage of total system resources. Range of Values: 1 - 99 Default Value: 80 Configuration Changed: operative ')
frpSapLinkManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("frameRelayForum", 2), ("ansiAnnexD", 3), ("ccittAnnexA", 4), ("dama1", 5), ("dama2", 6), ("auto", 7))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapLinkManagement.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapLinkManagement.setDescription("Determines the link management standard for the Frame Relay interface. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Options: none (1): no link management frameRelayForum (2): Frame Relay Forum ansiAnnexD (3): ANSI T1.617 Annex D ccittAnnexA (4): CCITT Q.933 Annex A dama1 (5): DAMA management on DLCI 990, same port dama2 (6): DAMA management on DLCI 990, port 3 auto (7): auto discover which link management standard being used by UNI network. It can be set only if the object frpSapInterfaceType is uniUser. Default Value: none Configuration Changed: administrative ")
frpSapInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("uniUser", 1), ("uniNetwork", 2), ("nni", 3))).clone('uniUser')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapInterfaceType.setDescription("Determines the signalling behavior of the SAP. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Options: uniUser (1): UNI User uniNetwork (2): UNI Network nni (3): NNI Default Value: uniUser (1) Configuration Changed: administrative ")
frpSapPollingInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPollingInterval.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer T391')
if mibBuilder.loadTexts: frpSapPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapPollingInterval.setDescription("Determines the interval in seconds between successive 'Status Enquiry' messages initiated on the user side of a UNI (user to network interface). This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 5 - 30 Default Value: 10 Configuration Changed: administrative ")
frpSapPollingVerification = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 30)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPollingVerification.setReference('Draft American National Standard T1.617-1991, Section D.7 Timer T392')
if mibBuilder.loadTexts: frpSapPollingVerification.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapPollingVerification.setDescription("Determines the permitted interval in seconds between transmission of a 'Status' and reception of a 'Status Enquiry' on the network side of the UNI (user to network interface). This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 5 - 30 Default Value: 15 Configuration Changed: administrative ")
frpSapFullEnquiryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapFullEnquiryInterval.setReference('Draft American National Standard T1.617-1991, Section D.7 Counter N391')
if mibBuilder.loadTexts: frpSapFullEnquiryInterval.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapFullEnquiryInterval.setDescription("Determines the number of 'Status Enquiry' intervals that must pass before a 'Full Status Enquiry' message can be issued at the user side of the UNI (user to network interface). This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 1 - 255 Default Value: 6 Configuration Changed: administrative ")
frpSapErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapErrorThreshold.setReference('Draft American National Standard T1.617-1991, Section D.5.1 & D.7 Counter N392')
if mibBuilder.loadTexts: frpSapErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapErrorThreshold.setDescription("Determines the number of unanswered 'Status Enquiry' messages that can occur within the interval defined in object frpSapMonitoredEvents before the user side of the UNI (user to network interface) declares the interface to be down. The value of frpSapErrorThreshold must not be greater than the value of frpSapMonitoredEvents. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. OR Determines the number of timeouts that can occur within the interval defined in frpSapMonitoredEvents as result of not receiving a 'Status Enquiry' from a user before the network side of the UNI (user to network interface) declares the interface to be down. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 1-10 Default Value: 3 Configuration Changed: administrative ")
frpSapMonitoredEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapMonitoredEvents.setReference('Draft American National Standard T1.617-1991, Section D.5.2 & D.7 Counter N393')
if mibBuilder.loadTexts: frpSapMonitoredEvents.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapMonitoredEvents.setDescription("Determines the number of polling intervals that will be monitored at any one time for unanswered messages, unreceived messages, or messages received in error. This period must pass without frpSapErrorThreshold being exceeded before an interface can be brought up after being brought down because unanswered messages, unreceived messages, or messages received in error exceeded frpSapErrorThreshold. The value of frpSapMonitoredEvents must be greater than the value of frpSapErrorThreshold. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 1 - 10 Default Value: 4 Configuration Changed: administrative ")
frpSapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("frameRelay", 1), ("transparent", 2), ("frameRelayAtmNIwf", 3))).clone('frameRelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapMode.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapMode.setDescription('Determines whether data passing through this SAP will be encapsulated. OR Determines this SAP will network interwork with ATM. Options: frameRelay (1): mode is Frame Relay (data received/transmitted encapsulated) transparent (2): mode is transparent (data received/transmitted unencapsulated) frameRelayAtmNIwf(3): mode is FrameRelay/ATM Network Interworking. When a SAP is created or changed to this mode, a row in frpAtmNISapTable will be automatically created with this SAP number as index. When a SAP is deleted or changed from this mode, the correspondant row in frpAtmNISapTable will also be deleted. Default Value: frameRelay (1) Configuration Changed: administrative ')
frpSapPrioQueue1HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue1HitRatio.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapPrioQueue1HitRatio.setDescription("Determines how frequently the queue for outbound traffic with very high priority is checked compared to queues having outbound traffic with high, medium or low priorities. Note: Unless set to zero, this value forms part of a frequency ratio that includes values assigned to these other queue priorities. Associated queues are checked in proportion to assigned values (frequency ratio method). If set to zero, this queue priority's associated queue is checked only if queue priorities of all other queues have been set to zero and only if queues with higher priorities are empty (absolute priority method). Range of Values: 0 - 255 Default Value: 0 Configuration Changed: administrative ")
frpSapPrioQueue2HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue2HitRatio.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapPrioQueue2HitRatio.setDescription("Determines how frequently the queue for outbound traffic with high priority is checked compared to queues having outbound traffic with very high, medium or low priorities. Note: Unless set to zero, this value forms part of a frequency ratio that includes values assigned to these other queue priorities. Associated queues are checked in proportion to assigned values (frequency ratio method). If set to zero, this queue priority's associated queue is checked only if queue priorities of all other queues have been set to zero and only if queues with higher priorities are empty (absolute priority method). Range of Values: 0 - 255 Default Value: 0 Configuration Changed: administrative ")
frpSapPrioQueue3HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue3HitRatio.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapPrioQueue3HitRatio.setDescription("Determines how frequently the queue for outbound traffic with medium priority is checked compared to queues having outbound traffic with very high, high or low priorities. Note: Unless set to zero, this value forms part of a frequency ratio that includes values assigned to these other queue priorities. Associated queues are checked in proportion to assigned values (frequency ratio method). If set to zero, this queue priority's associated queue is checked only if queue priorities of all other queues have been set to zero and only if queues with higher priorities are empty (absolute priority method). Range of Values: 0 - 255 Default Value: 0 Configuration Changed: administrative ")
frpSapPrioQueue4HitRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapPrioQueue4HitRatio.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapPrioQueue4HitRatio.setDescription("Determines how frequently the queue for outbound traffic with low priority is checked compared to queues having outbound traffic with very high, high or medium priorities. Note: Unless set to zero, this value forms part of a frequency ratio that includes values assigned to these other queue priorities. Associated queues are checked in proportion to assigned values (frequency ratio method). If set to zero, this queue priority's associated queue is checked only if queue priorities of all other queues have been set to zero and only if queues with higher priorities are empty (absolute priority method). Range of Values: 0 - 255 Default Value: 0 Configuration Changed: administrative ")
frpSapDialEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapDialEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapDialEntry.setDescription('Determines the entry of the Dial table containing information that this SAP will use to perform its dialup function. Range of Values: 0 - 255 Default Value: 0 (dialup function not supported) Configuration Changed: administrative ')
frpSapFilterBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapFilterBitMap.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapFilterBitMap.setDescription('A bit map of 2 bytes that determines the type of frame. Range of Values: 0 - 65535 Default Value: 0 (do not filter any type of frame) Configuration Changed: administrative ')
frpSapLmiFlavor = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("strict", 2), ("tolerant", 3))).clone('tolerant')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapLmiFlavor.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapLmiFlavor.setDescription("Determines optional behavior for the Link Management. This object is required due to the variety of requirement from Frame Relay certification agency. The Sprint certification for example requires this object to be set to 'strict'. Configuring other (1) is equivalent in our implementation as a value of strict (2). Options: other (1): depending on implementation. strict (2): duplication of fields, DLCI IE out of sequence, ... are considered errors. tolerant (3): the software is more permissive in its error handling. Default Value: tolerant (3) Configuration Changed: operative ")
frpSapGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("retrigger", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGenerator.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapGenerator.setDescription("Determines whether this SAP generates for diagnostic purposes the number of frames set by object frpSapGeneratorNumberOfFrames of a size set in 'frpSapGeneratorFrameSize' to be inserted in frpSapGeneratorDlciNumber. Options: disabled (1): frame generator is disabled for the circuit specified at this SAP enabled (2): frame generator is enabled after a system reset to generate a sequence of frames for the circuit specified at this SAP. retrigger (3): frame generator is enabled immediately to generate a sequence of frames for the circuit specified at this SAP. Default Value: disabled Configuration Changed: operative ")
frpSapGeneratorDlciNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 34), DLCI().clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorDlciNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapGeneratorDlciNumber.setDescription('Determines the DLCI (Data Link Connection Identifier) to be used for each frame generated for this SAP. Range of Values: 1 - 1,022 Default Value: 16 Configuration Changed: operative ')
frpSapGeneratorFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorFrameSize.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapGeneratorFrameSize.setDescription('Determines the size of each frame generated for this SAP. Range of Values: 32 - 4096 Default Value: 32 Configuration Changed: operative ')
frpSapGeneratorNumberOfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorNumberOfFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapGeneratorNumberOfFrames.setDescription('Determines the number of frames to be generated for this SAP. Range of Values: 1 - 200 (200=continuous) Default Value: 1 Configuration Changed: operative ')
frpSapGeneratorInterFrameDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 60000)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapGeneratorInterFrameDelay.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapGeneratorInterFrameDelay.setDescription('Determines the time in milliseconds that must pass between frames generated for this SAP. Range of Values: 50 - 60,000 Default Value: 50 Configuration Changed: operative ')
frpSapBillingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 525600)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapBillingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapBillingTimer.setDescription('Determines the time in minutes that must pass before generating an frpPvcBillingStats trap for each circuit whose frpCircuittrapTrap2 object has been enabled. Unless retriggered with frpSapControl, this timer must expire before a change in its value can take effect. Range of Values: 1 - 525,600 Default Value: 1440 Configuration Changed: operative ')
frpSapSdLmMessageInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapSdLmMessageInterval.setStatus('obsolete')
if mibBuilder.loadTexts: frpSapSdLmMessageInterval.setDescription('Determines the time in milliseconds that must pass between successive connection management messages that report the same event. This object is meaningful only if frpSapLinkManagement for this SAP is set to DAMA1 or DAMA2. Range of Values: 10 - 65,535 Default Value: 50 Configuration Changed: operative ')
frpSapSdLmActiveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSapSdLmActiveTimer.setStatus('obsolete')
if mibBuilder.loadTexts: frpSapSdLmActiveTimer.setDescription('Determines the number of milliseconds that an inactive virtual circuit can continue to be seen in an active state before being changed to an idle state. This object is meaningful only if frpSapLinkManagement for this SAP is set to DAMA1 or DAMA2. Range of Values: 10 - 65,535 Default Value: 1,000 Configuration Changed: operative ')
frpSaptrapTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpSaptrapTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: frpSaptrapTrap1.setDescription('Determines whether this SAP produces the frpSapInterfaceStatusChange trap whose accumulated value can be retrieved by an SNMP-compliant network management device. Options: disabled (1): SAP does not produce an interface status change enabled (2): SAP produces an interface status change trap Default Value: disabled (1) Configuration Changed: operative ')
frpSapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("retriggerBillingTimer", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frpSapControl.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapControl.setDescription("Cancels and resets a SAP's frpSapBillingTime'. Options: retriggerBillingTimer (1): retriggers billing timer at this SAP Default Value: none Configuration Changed: operative ")
frpSapControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clearSapStats", 1), ("clearAllCircuitStats", 2)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frpSapControlStats.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapControlStats.setDescription('Controls the handling of statistics for this SAP. Options: clearSapStats (1): clears all statistics at this SAP clearAllCircuitStats (2): clears statistics of all circuits associated with this SAP Default Value: none Configuration Changed: operative ')
frpSapstatLinkManagementState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkDown", 1), ("linkUp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLinkManagementState.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLinkManagementState.setDescription('Indicates the state of link management at this SAP. Options: linkDown (1): link management is down linkUp (2): link management (and link itself) is up Default Value: none')
frpSapstatCurrentLinkManagementType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("frameRelayForum", 2), ("ansiAnnexD", 3), ("ccittAnnexA", 4), ("dama1", 5), ("dama2", 6), ("discovering", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatCurrentLinkManagementType.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatCurrentLinkManagementType.setDescription('Indicate the link management standard being used. none (1): no link management frameRelayForum (2): Frame Relay Forum ansiAnnexD (3): ANSI T1.617 Annex D ccittAnnexA (4): CCITT Q.933 Annex A dama1 (5): DAMA management on DLCI 999, same port dama2 (6): DAMA management on DLCI 999, port 3 discovering (7): on the process to detect which Link Management Standard being used The value is meaningful only if frpSapLinkManagement is configured to auto(7), Default Value: none')
frpSapstatTxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatTxDataFrames.setDescription('Indicates the number of data frames sent from this SAP across all virtual circuits since the last power up. Range of Values: 0 - 4,294,967,295 Default Value: none')
frpSapstatRxDataFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxDataFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxDataFrames.setDescription('Indicates the number of data frames received at this SAP across all virtual circuits since the last power up. Range of Values: 0 - 4,294,967,295 Default Value: none')
frpSapstatTxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatTxDataOctets.setDescription('Indicates the number of data octets sent from this SAP across all virtual circuits since the last power up. Range of Values: 0 - 4,294,967,295 Default Value: none')
frpSapstatRxDataOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxDataOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxDataOctets.setDescription('Indicates the number of data octets received at this SAP across all virtual circuits since the last power up. Range of Values: 0-4,294,967,295 Default Value: none')
frpSapstatTxLmiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxLmiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatTxLmiFrames.setDescription("Indicates the number of link management interface frames sent from this SAP. This object is meaningful only if frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 4,294,967,295 Default Value: none")
frpSapstatRxLmiFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxLmiFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxLmiFrames.setDescription("Indicates the number of link management interface frames received at this SAP. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 4,294,967,295 Default Value: none")
frpSapstatTxQueuedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatTxQueuedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatTxQueuedDiscards.setDescription('Indicates the number of outbound data frames discarded at this SAP due to interface congestion, circuit unavailability (status down), or unspecified routing (circuit deleted or never added). Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxCIRExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 79), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxCIRExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxCIRExceededDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits because the combined value of frpCircuitCommittedBurst and frpCircuitExcessBurst has been exceeded. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 80), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxSysCongestionDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxSysCongestionDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits due to system congestion. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxUnavailInboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 81), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxUnavailInboundDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxUnavailInboundDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits due to unavailability of an inbound virtual circuit. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxUnavailOutboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 82), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxUnavailOutboundDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxUnavailOutboundDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits due to unavailability of an outbound virtual circuit or to no routing specified. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxInvalidVCDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 83), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxInvalidVCDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxInvalidVCDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits due to an invalid DLCI. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxBadStatusDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 84), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxBadStatusDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxBadStatusDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits due to invalid status specification within frames passed from the Bit-Oriented Protocol (BOP) Driver, the SMDS/ATM Data Exchange Interface (SDXI/ADXI) (CX1000 only), the Gateway Frame Relay/Frame Relay (CX1000 only), or B-Channel Manager (CX900 only) software layer. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxMiscellaneousDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 85), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxMiscellaneousDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxMiscellaneousDiscards.setDescription('Indicates the number of data frames received and then discarded at this SAP across all virtual circuits due to any invalid condition not specified by other discard type objects. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatRxCIRExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 86), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxCIRExceeds.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxCIRExceeds.setDescription("Indicates the number of times the combined value of frpCircuitCommittedBurst and frpCircuitExcessBurst has been exceeded in a 'Tc' window at the inbound side of all virtual circuits of this SAP. Note: A 'Tc' window is a time slice determined by dividing frpCircuitCommittedBurst by frpCircuitCommittedInformationRate. Range of Values: 0 - 65,535 Default Value: none")
frpSapstatRxShortFrameDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 87), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatRxShortFrameDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatRxShortFrameDiscards.setDescription('Indicates the total number of short frames discarded at this SAP since power-up. Note: A frame is short if it has less than two bytes for the header and one byte for user data when in Frame Relay mode, or if it has less than one byte when in Transparent mode. Range of Values: 0 - 65,535 Default Value: none')
frpSapstatLmiInvalidFieldDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 97), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidFieldDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLmiInvalidFieldDiscards.setDescription("Indicates the number of link management frames received at this SAP that contained an invalid field and were consequently discarded. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 65,535 Default Value: none")
frpSapstatLmiInvalidSequenceDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 98), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidSequenceDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLmiInvalidSequenceDiscards.setDescription("Indicates the number of link management frames received at this SAP that contained an unexpected Receive Sequence Number and were consequently discarded. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 65,535 Default Value: none")
frpSapstatLmiTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 99), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLmiTimeouts.setDescription("Indicates the number of times a link management frame was not received at this SAP within the expected time. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 65,535 Default Value: none")
frpSapstatLmiInvalidStatusDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 100), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidStatusDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLmiInvalidStatusDiscards.setDescription("Indicates the number of invalid 'Status' management frames received at this SAP and subsequently discarded. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 65,535 Default Value: none")
frpSapstatLmiInvalidStatusEnqDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 101), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidStatusEnqDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLmiInvalidStatusEnqDiscards.setDescription("Indicates the number of invalid 'Status Enquiry' management frames received at this SAP and subsequently discarded. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 65,535 Default Value: none")
frpSapstatLmiInvalidUpdStatusDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 1, 1, 102), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpSapstatLmiInvalidUpdStatusDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpSapstatLmiInvalidUpdStatusDiscards.setDescription("Indicates the number of invalid 'Update Status' management frames received at this SAP and subsequently discarded. This object is meaningful only if object frpSapType for this SAP is set to 'lower'. Range of Values: 0 - 65,535 Default Value: none")
frpCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2), )
if mibBuilder.loadTexts: frpCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitTable.setDescription('A table containing configuration information about virtual circuits at frame relay module service access points.')
frpCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpCircuitSapNumber"), (0, "CXFrameRelay-MIB", "frpCircuitDlci"))
if mibBuilder.loadTexts: frpCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitEntry.setDescription('The parameters for a particular virtual circuit at a specified frame relay module service access point.')
frpCircuitSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitSapNumber.setDescription("Indicates the row containing objects for configuring (or monitoring) one of 1,022 possible circuits of a SAP that is associated with another SAP either in the Bit-Oriented Protocol (BOP) Driver, B-Channel Manager (BCM) (CX900 only), SMDS/ATM Data Exchange Interface (SDXI/ADXI) (CX1000 only), Frame Relay Interface Module (FRIM), Gateway Mux/Frame Relay Module (GMF), or Gateway Frame Relay/Frame Relay (GFF) (CX1000 only) software layer. Options: 1-7: (CX900's BOP- or BCM-related lower SAPs) 1-16: (CX1000's BOP- or DXI-related lower SAPs) 17-32: (CX1000's GFF-related lower SAPs) 40: (GMF-related upper SAP) 41: (FRIM-related upper SAP) Default Value: none")
frpCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitDlci.setDescription("Indicates the virtual circuit's DLCI (Data Link Connection Identifier) for a particular SAP. Note: A given SAP can have up to 1,022 virtual circuits associated with it, subject to system memory; each DLCI associated with a given SAP must be unique; DLCIs associated with a PX 600 in the same CX1000 chassis must be numbered 600 or greater. Range of Values: 1 - 1,022 Default Value: none")
frpCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitRowStatus.setDescription('Determines whether this SAP/DLCI association, and any circuit linked with it, is to be deleted in the Frame Relay software layer. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: valid (2) Configuration Changed: operative ')
frpCircuitPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("veryHigh", 1), ("high", 2), ("medium", 3), ("low", 4))).clone('medium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitPriorityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitPriorityLevel.setDescription('Determines the priority level assigned to this virtual circuit. Note: Very high priority is reserved for for delay-sensitive traffic such as voice or fax. Higher priority traffic takes precedence over lower priority traffic. Options: veryHigh (1): circuit has very high priority high (2): circuit has high priority medium (3): circuit has medium priority low (4): circuit has low priority Default Value: medium (3) Configuration Changed: operative ')
frpCircuitCommittedBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCommittedBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frpCircuitCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitCommittedBurst.setDescription('Determines the maximum number of inbound data bits that the Frame Relay module commits to transfer under normal conditions within an established measurement interval. Range of Values: 0 - 2,048,000 Default Value: 0 Configuration Changed: operative ')
frpCircuitExcessBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitExcessBurst.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frpCircuitExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitExcessBurst.setDescription('Determines the maximum number of uncommitted inbound data bits that the Frame Relay module will attempt to transfer within an established measurement interval. Range of Values: 0 - 512,000 Default Value: 0 Configuration Changed: operative ')
frpCircuitCommittedInformationRate = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCommittedInformationRate.setReference('Draft American National Standard T1.617-1991, Section 6.5.19')
if mibBuilder.loadTexts: frpCircuitCommittedInformationRate.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitCommittedInformationRate.setDescription("Determines the average inbound 'Frame Relay Information Field' bits transferred per second in one direction across the user side of a Frame Relay module during an established measurement interval. Range of Values: 0 - 2,048,000 Default Value: none Note: This value must be equal to or less than object frpCircuitCommittedBurst. Configuration Changed: operative ")
frpCircuitCIRManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled-inbound", 2), ("monitor-inbound", 3), ("enabled-outbound", 4))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCIRManagement.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitCIRManagement.setDescription('Determines whether CIR management is enabled for this virtual circuit. Note: If CIR management is enabled, frpCircuitCommittedBurst, frpCircuitExcessBurst and frpCircuitCommittedInformationRate are used to control the information flow rate at inbound/outbound of the virtual circuit. If CIR management is enabled only for monitoring, these objects are used to gather statistics regarding information flow rate. Options: disabled (1): congestion management is disabled enabled-inbound (2): CIR management is enabled at inbound monitor-inbound (3): CIR management is enabled at inbound for monitoring only enabled-outbound (4): CIR management is enabled at outbound Default Value: disabled (1) Configuration Changed: operative ')
frpCircuitMultiProtEncaps = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitMultiProtEncaps.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitMultiProtEncaps.setDescription("Determines whether traffic on this virtual circuit receives a multiprotocol encapsulation header when outbound, and is stripped of this header when inbound, as specified in Frame Relay Forum's FRF.3 (Final) ('Multiprotocol Encapsulation Implementation Agreement') and the Network Working Group's RFC 1490 ('Multiprotocol Interconnect over Frame Relay'). Note: If this traffic does not pass through the Frame Relay module's FRIM software, it will move across this circuit transparently (i.e. without gaining or losing an encapsulation header). Options: disabled (1): multiprotocol encapsulation is disabled enabled (2): multiprotocol encapsulation is enabled Default Value: disabled (1) Configuration Changed: administrative ")
frpCircuitHighPriorityBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitHighPriorityBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitHighPriorityBurst.setDescription('Determines the maximum number of uncommitted inbound data bits exceeding frpCircuitExcessBurst and having very high priority that the Frame Relay module will attempt to transfer within an established measurement interval. NOTE: The higher this value, the greater the chance for system congestion. Range of Values: 0 - 512,000 Default Value: 0 Configuration Changed: operative ')
frpCircuitLowPriorityBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitLowPriorityBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitLowPriorityBurst.setDescription('Determines the maximum number of inbound data bits having very high, high, or medium priority that the Frame Relay module commits to transfer within an established measurement interval. NOTE: The higher this value, the greater the chance that low priority traffic will be discarded. This value cannot be greater than the value set in frpCircuitCommittedBurst. Range of Values: 0 - 512,000 Default Value: 0 Configuration Changed: operative ')
frpCircuitFragmentationSize = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitFragmentationSize.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitFragmentationSize.setDescription("Determines whether fragmentation is enabled (>0), and if so, the maximum size permitted per fragment. Fragmentation occurs when the frame size (including DLCI header) exceeds the value specified for this parameter. The frame is then fragmentation into smaller fragments, each with a maximum size specified by this parameter. Note: This object only applies to circuits which are configured for Multi-Protocol Encapsulation (MPE) support (frpCircuitMultiProtEncaps = 'enabled'), and which are associated with a sap of type 'lower' (frpSapType = 'lower'). Range of Values: 0, 64 - 1024 Default Value: 0 Configuration Changed: operative ")
frpCircuitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 19), Alias()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitAlias.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitAlias.setDescription("Determines the textual name uniquely identifying this virtual circuit's destination across the Frame Relay network. Note: This alias is required for managing card sets in remote CX1000s; otherwise, it is optional. Specifying an alias consumes memory that might otherwise support a larger number of virtual circuits. Range of Values: 0-35 alphanumeric characters beginning with a non-numeric character (CX1000) 0-16 alphanumeric characters beginning with a non-numeric character (CX900) Default Value: none Configuration Changed: operative ")
frpCircuitCompanionSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCompanionSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitCompanionSapNumber.setDescription("Indicates the companion SAP in the Frame Relay software layer involved, together with 'frpCircuitCompanionDlci', in establishing one of 1,022 possible virtual circuits for this SAP. Options: 1-7: (CX900's BOP- or BCM-related lower SAPs) 1-16: (CX1000's BOP- or DXI-related lower SAPs) 17-32: (CX1000's GFF-related lower SAPs) 40: (GMF-related upper SAP) 41: (FRIM-related upper SAP) Default Value: none Configuration Changed: operative ")
frpCircuitCompanionDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCompanionDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitCompanionDlci.setDescription("Indicates the virtual circuit's DLCI (Data Link Connection Identifier) for the companion SAP. Range of Values: 1 - 1,022 Default Value: none Configuration Changed: operative ")
frpCircuitAlternateSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitAlternateSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitAlternateSapNumber.setDescription("Indicates an alternative companion SAP in the Frame Relay software layer involved, together with 'frpCircuitAlternativeDlci', in establishing one of 1,022 possible secondary virtual circuits for this SAP. Options: 1-7: (CX900's BOP- or BCM-related lower SAPs) 1-16: (CX1000's BOP- or DXI-related lower SAPs) 17-32: (CX1000's GFF-related lower SAPs) 40: (GMF-related upper SAP) 41: (FRIM-related upper SAP) Default Value: none Configuration Changed: operative ")
frpCircuitAlternateDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitAlternateDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitAlternateDlci.setDescription("Indicates the virtual circuit's DLCI (Data Link Connection Identifier) for the alternative companion SAP. Range of Values: 1-1,022 Default Value: none Configuration Changed: operative ")
frpCircuitMulticastGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitMulticastGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitMulticastGroupId.setDescription('Indicates the identifier of a multicast group to which the virtual circuit belongs. Range of Values: 0 - 255 (0=not in group) Default Value: 0')
frpCircuitMulticastType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noMulticastAssociation", 1), ("rootOneWay", 2), ("leafOneWay", 3), ("rootTwoWay", 4), ("leafTwoWay", 5), ("rootNWay", 6), ("rootTwoWaySinglePass", 7), ("leafTwoWaySinglePass", 8))).clone('noMulticastAssociation')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitMulticastType.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitMulticastType.setDescription("Determines member and service types of this virtual circuit when part of a multicast group. Options: noMulticastAssociation (1): PVC is not part of multicast group rootOneWay (2): PVC is a root member whose multicast server sends frames received from this root member only to route partners of the multicast group's active leaf members (one-way multicast service) leafOneWay (3): PVC is a leaf member that cannot receive a root member's frames from a multicast server (one-way multicast service) rootTwoWay (4): PVC is a root member whose multicast server sends frames received from this root member to this multicast group's active leaf members; the multicast server also sends frames received from any active leaf member to the root member (two-way multicast service) leafTwoWay (5): PVC is a leaf member whose multicast server sends frames received from this leaf member to this multicast group's root member (two-way multicast service) rootNWay (6): PVC is a root member whose multicast server sends frames received from this root member to this multicast group's other active root members; the multicast server also sends frames received from any other active root member to all other active root members (N-way multicast service) rootTwoWaySinglePass (7): PVC is a root member whose multicast server sends frames received from this root member to this multicast group's first active leaf members found only; the multicast server also sends frames received from any active leaf member to the root member (two-way multicast service) leafTwoWaySinglePass (8): PVC is a leaf member whose multicast server sends frames received from this leaf member to this multicast group's root member (two-way multicast service) Default Value: noMulticastAssociation (1)")
frpCircuitCompressionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitCompressionPort.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitCompressionPort.setDescription('Determines whether compression is used on this DLCI. A value of 0 indicates that compression is disabled. When compression is enabled (i.e., this object has a non-zero value), the value given is an index that links this DLCI with a compression port. This index is the value of the compressPortNumber object in the compressEntry. The number of the compression port is memory-dependant. Range of Values: 0 (no compression) to 64 Default Value: 0 Configuration Changed: administrative')
frpCircuitExpressService = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuitExpressService.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitExpressService.setDescription('Determines whether this Frame Relay circuit provide express services. Options: disabled (1): circuit does not provide express service enabled (2): circuit provides express service Default Value: enabled (2) Configuration Changed: administrative')
frpCircuittrapTrap1 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuittrapTrap1.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuittrapTrap1.setDescription('Determines whether this SAP produces the frpPvcReportedStatusChange trap whose accumulated value can be retrieved by an SNMP-compliant network management device. Options: disabled (1): SAP does not produce a PVC status change trap enabled (2): SAP produces a PVC status change trap Default Value: disabled (1) Configuration Changed: operative ')
frpCircuittrapTrap2 = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpCircuittrapTrap2.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuittrapTrap2.setDescription('Determines whether this SAP produces the frpPvcBillingStats trap whose accumulated value can be retrieved by an SNMP-compliant network management device. Options: disabled (1): SAP does not produce a billing statistics trap enabled (2): SAP produces a billing statistics trap Default Value: disabled (1) Configuration Changed: operative ')
frpCircuitControlStats = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clearCircuitStats", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: frpCircuitControlStats.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitControlStats.setDescription('Clears accumulated statistics for this circuit. Options: clearCircuitStats (1): clears circuit statistics Default Value: none Configuration Changed: operative ')
frpCircuitstatReportedState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notReported", 1), ("reportedActive", 2), ("reportedInactive", 3))).clone('notReported')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatReportedState.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatReportedState.setDescription("Indicates the virtual circuit's current state as reported to this SAP by link management. If the virtual circuit is associated with a SAP whose frpSapType is set to 'upper', or a SAP whose'frpSapType is set to 'lower' SAP) and whose frpSapInterfaceType is set to 'uniNetwork', then this object will always read 'reportedActive'. Options: notReported (1): circuit's state has not been reported reportedActive (2): circuit's state has been reported as active reportedInactive (3): circuit's state has been reported as inactive Default Value: notReported (1)")
frpCircuitstatRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noRoute", 1), ("routeNotOperational", 2), ("routeOperational", 3))).clone('noRoute')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRouteState.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRouteState.setDescription("Indicates the current state of the virtual circuit's primary route or pathway. Options: noRoute (1): virtual circuit has no associated pathway routeNotOperational (2): pathway of virtual circuit is not operational routeOperational (3): pathway of virtual circuit is operational Default Value: noRoute (1)")
frpCircuitstatAlternateRouteState = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noRoute", 1), ("routeNotOperational", 2), ("routeOperational", 3), ("alternateCircuit", 4))).clone('noRoute')).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatAlternateRouteState.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatAlternateRouteState.setDescription("Indicates the current state of the virtual circuit's alternate route or pathway. Options: noRoute (1): Virtual circuit has no associated alternate pathway routeNotOperational (2): Alternate pathway of virtual circuit is not operational routeOperational (3): Alternate pathway of virtual circuit is operational alternateCircuit (4): This virtual circuit is an alternate circuit Default Value: noRoute (1)")
frpCircuitstatLocalCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 47), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatLocalCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatLocalCreationTime.setDescription("Indicates the system clock's time at which this circuit was created in the Frame Relay software layer. Range of Values: system-generated Default Value: none")
frpCircuitstatRemoteCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 48), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRemoteCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRemoteCreationTime.setDescription("Indicates the system clock's time at which this circuit, created as a result of its configuration in the Frame Relay software layer, was reported to the user by the network as 'new'. Range of Values: system-generated Default Value: none")
frpCircuitstatTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatTxFrames.setDescription('Indicates the number of frames sent on this virtual circuit since its creation. Range of Values: 0-4,294,967,295 Default Value: none')
frpCircuitstatRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxFrames.setDescription('Indicates the number of frames received on this virtual circuit since its creation. Range of Values: 0 - 4,294,967,295 Default Value: none')
frpCircuitstatTxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatTxOctets.setDescription('Indicates the number of octets sent on this virtual circuit since its creation. Range of Values: 0 - 4,294,967,295 Default Value: none')
frpCircuitstatRxOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxOctets.setDescription('Indicates the number of octets received on this virtual circuit since its creation. Range of Values: 0 - 4,294,967,295 Default Value: none')
frpCircuitstatTxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxFECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: frpCircuitstatTxFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatTxFECNs.setDescription('Indicates the number of frames sent on this virtual circuit since its creation whose FECN bit revealed forward congestion. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxFECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxFECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: frpCircuitstatRxFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxFECNs.setDescription('Indicates the number of frames received on this virtual circuit since its creation whose FECN bit revealed forward congestion. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatTxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxBECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frpCircuitstatTxBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatTxBECNs.setDescription('Indicates the number of frames sent on this virtual circuit since its creation whose BECN bit revealed backward congestion. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxBECNs = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxBECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frpCircuitstatRxBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxBECNs.setDescription('Indicates the number of frames received on this virtual circuit since its creation whose BECN bit revealed backward congestion. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatTxQueuedDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatTxQueuedDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatTxQueuedDiscards.setDescription('Indicates the number of outbound data frames discarded on this virtual circuit due to interface congestion, circuit unavailability (status down), or unspecified routing (circuit deleted or never added). Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxCIRExceededDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxCIRExceededDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxCIRExceededDiscards.setDescription('Indicates the number of data frames received and then discarded on this virtual circuit because the combined value of frpCircuitCommittedBurst and frpCircuitExcessBurst has been exceeded. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxSysCongestionDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxSysCongestionDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxSysCongestionDiscards.setDescription('Indicates the number of data frames received and then discarded on this virtual circuit due to system congestion. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxUnavailInboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxUnavailInboundDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxUnavailInboundDiscards.setDescription('Indicates the number of data frames received and then discarded on this virtual circuit because it was unavailable. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxUnavailOutboundDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxUnavailOutboundDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxUnavailOutboundDiscards.setDescription('Indicates the number of data frames received and then discarded at this virtual circuit because the outbound virtual circuit was unavailable. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatRxCIRExceeds = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatRxCIRExceeds.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatRxCIRExceeds.setDescription("Indicates the number of times the combined value of frpCircuitCommittedBurst and frpCircuitExcessBurst has been exceeded in a 'Tc' window at the inbound side of this virtual circuit. NOTE: A 'Tc' window is a timeslice determined by dividing frpCircuitCommittedBurst by frpCircuitCommittedInformationRate. Range of Values: 0 - 65,535 Default Value: none")
frpCircuitstatFragmentationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatFragmentationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatFragmentationFailures.setDescription('Indicates the number of times frame fragmentation failed. Range of Values: 0 - 65,535 Default Value: none')
frpCircuitstatDeFragmentationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpCircuitstatDeFragmentationFailures.setStatus('mandatory')
if mibBuilder.loadTexts: frpCircuitstatDeFragmentationFailures.setDescription('Indicates the number of times frame reassembly failed. Range of Values: 0 - 65,535 Default Value: none')
frpReportedPvcTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3), )
if mibBuilder.loadTexts: frpReportedPvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: frpReportedPvcTable.setDescription('')
frpReportedPvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpReportedPvcSapNumber"))
if mibBuilder.loadTexts: frpReportedPvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frpReportedPvcEntry.setDescription('')
frpReportedPvcSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 1), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpReportedPvcSapNumber.setDescription("Indicates the row containing objects for monitoring a particular lower SAP. Options: 1-7 (CX900's BOP- or BCM-related lower SAPs) 1-16 (CX1000's BOP- or DXI-related lower SAPs) 17-32 (CX1000's GFF-related lower SAPs) Default Value: none")
frpReportedPvcDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frpReportedPvcDlci.setDescription("Indicates the virtual circuit's DLCI (Data Link Connection Identifier) for a particular SAP. Range of Values: 1 - 1,022 Default Value: none")
frpReportedPvcLocallyConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcLocallyConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: frpReportedPvcLocallyConfigured.setDescription('Indicates whether the virtual circuit is actually configured in the Frame Relay software layer. Options: no (1): virtual circuit is not configured yes (2): virtual circuit is configured Default Value: none')
frpReportedPvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpReportedPvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frpReportedPvcStatus.setDescription('Indicates the status of the virtual circuit as reported by the network. Options: inactive (1): virtual circuit is not active active (2): virtual circuit is active Default Value: none')
frpMulticastTable = MibTable((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4), )
if mibBuilder.loadTexts: frpMulticastTable.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastTable.setDescription('A table containing the members of multicast service groups.')
frpMulticastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1), ).setIndexNames((0, "CXFrameRelay-MIB", "frpMulticastGroupId"), (0, "CXFrameRelay-MIB", "frpMulticastSapNumber"), (0, "CXFrameRelay-MIB", "frpMulticastDlci"))
if mibBuilder.loadTexts: frpMulticastEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastEntry.setDescription('A member of a multicast service group')
frpMulticastGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastGroupId.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastGroupId.setDescription('Indicates the identifier of a multicast group to which this virtual circuit belongs. Range of Values: 1-255 Default Value: none')
frpMulticastSapNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 2), SapIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastSapNumber.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastSapNumber.setDescription("Indicates the SAP of a multicast group's virtual circuit whose objects are to be configured (or monitored). Options: 1-7: (CX900's BOP- or BCM-related lower SAPs) 1-16: (CX1000's BOP- or DXI-related lower SAPs) 41: (FRIM-related upper SAP) Default Value: none")
frpMulticastDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 3), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastDlci.setDescription("Indicates the DLCI (Data Link Connection Identifier) associated with the SAP of a multicast group's virtual circuit. Range of Values: 1 - 1,022 Default Value: none")
frpMulticastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("invalid", 1), ("valid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpMulticastRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastRowStatus.setDescription('Determines whether this virtual circuit is to be deleted from this multicast group. Options: invalid (1): Row is deleted from the table immediately, however values are still in effect until the next reset. valid (2): Use this value to add a new row to the table, or modify an existing row. Default Value: none Configuration Changed: operative ')
frpMulticastMemberType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("root", 1), ("leaf", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpMulticastMemberType.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastMemberType.setDescription('Determines whether this virtual circuit is a root member that multicasts traffic or a leaf member that cannot multicast traffic. Options: root (1): PVC is root member (MDLCI) leaf (2): PVC is leaf member Default Value: none NOTE: If a member type has been specified, it cannot be modified but must instead be deleted and specified again. Configuration Changed: operative ')
frpMulticastServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneWay", 1), ("twoWay", 2), ("nWay", 3), ("twoWaySinglePass", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frpMulticastServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastServiceType.setDescription("Determines whether the multicast server of a virtual circuit provides one-way, two-way, N-way, or special two-way single pass multicast service. Options: oneWay (1): multicast server sends frames received from a multicast group's root member to route partners of its active leaf members (one-way multicast service). twoWay (2): multicast server sends frames received from a multicast group's root member to its active leaf members; multicast server also sends frames received from any active leaf member to the root member (two-way multicast service). nWay (3): multicast server sends frames received from a multicast group's root member to other active root members in that group; multicast server also sends frames received from any other active root member to all other active root members (N-way multicast service). twoWaySinglePass (4): multicast server sends frames received from the multicast group's root member to only first active leaf member found within all leaf members in that group; multicast server also sends frames received from any active leaf member to the root member (two-way multicast service). Default Value: none NOTE: If a service has been specified, it cannot be modified but must instead be deleted and specified again. Configuration Changed: operative ")
frpMulticastMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMulticastMemberStatus.setStatus('mandatory')
if mibBuilder.loadTexts: frpMulticastMemberStatus.setDescription('Indicates whether this virtual circuit is active or inactive in the multicast group. Options: inactive (1): PVC is not active in multicast group active (2): PVC is active in multicast group Default Value: none')
frpMibLevel = MibScalar((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frpMibLevel.setStatus('mandatory')
if mibBuilder.loadTexts: frpMibLevel.setDescription('Used to determine current MIB module release supported by the agent. Object is in decimal.')
frpSapInterfaceStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3) + (0,1)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXFrameRelay-MIB", "frpSapNumber"), ("CXFrameRelay-MIB", "frpSapstatLinkManagementState"))
if mibBuilder.loadTexts: frpSapInterfaceStatusChange.setDescription('Indicates that the link management currently in use at the service access point has changed state. It has toggled between any of the states defined in object frpSapstatLinkManagementState.')
frpPvcReportedStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3) + (0,2)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXFrameRelay-MIB", "frpCircuitSapNumber"), ("CXFrameRelay-MIB", "frpCircuitDlci"), ("CXFrameRelay-MIB", "frpCircuitstatReportedState"))
if mibBuilder.loadTexts: frpPvcReportedStatusChange.setDescription('')
frpPvcBillingStats = NotificationType((1, 3, 6, 1, 4, 1, 495, 2, 1, 6, 3) + (0,3)).setObjects(("CXModuleHardware-MIB", "cxModuleHwPhysSlot"), ("CXFrameRelay-MIB", "frpCircuitSapNumber"), ("CXFrameRelay-MIB", "frpCircuitDlci"), ("CXFrameRelay-MIB", "frpCircuitstatTxFrames"), ("CXFrameRelay-MIB", "frpCircuitstatRxFrames"), ("CXFrameRelay-MIB", "frpCircuitstatTxOctets"), ("CXFrameRelay-MIB", "frpCircuitstatRxOctets"))
if mibBuilder.loadTexts: frpPvcBillingStats.setDescription('')
mibBuilder.exportSymbols("CXFrameRelay-MIB", frpSapMode=frpSapMode, frpSapstatLmiInvalidSequenceDiscards=frpSapstatLmiInvalidSequenceDiscards, frpSapVCBase=frpSapVCBase, frpSapSdLmActiveTimer=frpSapSdLmActiveTimer, frpSapGeneratorFrameSize=frpSapGeneratorFrameSize, DLCI=DLCI, frpSapPrioQueue1HitRatio=frpSapPrioQueue1HitRatio, frpCircuittrapTrap2=frpCircuittrapTrap2, frpPvcBillingStats=frpPvcBillingStats, frpReportedPvcSapNumber=frpReportedPvcSapNumber, frpSapstatRxCIRExceededDiscards=frpSapstatRxCIRExceededDiscards, frpCircuitstatRxUnavailOutboundDiscards=frpCircuitstatRxUnavailOutboundDiscards, frpReportedPvcDlci=frpReportedPvcDlci, frpSapstatTxDataOctets=frpSapstatTxDataOctets, frpSapResourceAllocation=frpSapResourceAllocation, frpSapstatRxBadStatusDiscards=frpSapstatRxBadStatusDiscards, frpCircuitCompressionPort=frpCircuitCompressionPort, frpSapInterfaceStatusChange=frpSapInterfaceStatusChange, frpCircuitCommittedInformationRate=frpCircuitCommittedInformationRate, frpCircuitstatTxFrames=frpCircuitstatTxFrames, frpSapstatRxShortFrameDiscards=frpSapstatRxShortFrameDiscards, frpSapstatRxDataOctets=frpSapstatRxDataOctets, frpSapPrioQueue4HitRatio=frpSapPrioQueue4HitRatio, frpSapDialEntry=frpSapDialEntry, frpReportedPvcStatus=frpReportedPvcStatus, frpCircuitstatTxBECNs=frpCircuitstatTxBECNs, frpSapControlStats=frpSapControlStats, frpCircuitCommittedBurst=frpCircuitCommittedBurst, frpSapstatRxDataFrames=frpSapstatRxDataFrames, frpSapOutCongestionManagement=frpSapOutCongestionManagement, frpSapAddressLength=frpSapAddressLength, frpCircuitstatRxFECNs=frpCircuitstatRxFECNs, frpSapEntry=frpSapEntry, frpSapLinkManagement=frpSapLinkManagement, frpCircuitstatRxUnavailInboundDiscards=frpCircuitstatRxUnavailInboundDiscards, frpCircuitstatTxQueuedDiscards=frpCircuitstatTxQueuedDiscards, frpCircuitMultiProtEncaps=frpCircuitMultiProtEncaps, frpCircuitstatRxOctets=frpCircuitstatRxOctets, frpCircuitstatRxBECNs=frpCircuitstatRxBECNs, frpSapstatTxDataFrames=frpSapstatTxDataFrames, frpSapGeneratorInterFrameDelay=frpSapGeneratorInterFrameDelay, frpSaptrapTrap1=frpSaptrapTrap1, frpCircuitstatRemoteCreationTime=frpCircuitstatRemoteCreationTime, frpCircuitMulticastType=frpCircuitMulticastType, frpSapPollingInterval=frpSapPollingInterval, frpCircuitstatDeFragmentationFailures=frpCircuitstatDeFragmentationFailures, frpSapPrioQueue2HitRatio=frpSapPrioQueue2HitRatio, frpCircuitHighPriorityBurst=frpCircuitHighPriorityBurst, frpMibLevel=frpMibLevel, frpSapstatRxSysCongestionDiscards=frpSapstatRxSysCongestionDiscards, frpSapstatLmiInvalidFieldDiscards=frpSapstatLmiInvalidFieldDiscards, frpMulticastMemberStatus=frpMulticastMemberStatus, frpSapNumber=frpSapNumber, frpSapControl=frpSapControl, frpSapstatRxUnavailInboundDiscards=frpSapstatRxUnavailInboundDiscards, frpMulticastMemberType=frpMulticastMemberType, frpCircuitstatTxFECNs=frpCircuitstatTxFECNs, frpMulticastDlci=frpMulticastDlci, frpSapGeneratorNumberOfFrames=frpSapGeneratorNumberOfFrames, frpCircuitCompanionSapNumber=frpCircuitCompanionSapNumber, frpSapRowStatus=frpSapRowStatus, frpCircuitCompanionDlci=frpCircuitCompanionDlci, frpCircuitstatLocalCreationTime=frpCircuitstatLocalCreationTime, frpCircuitstatRxCIRExceededDiscards=frpCircuitstatRxCIRExceededDiscards, frpPvcReportedStatusChange=frpPvcReportedStatusChange, frpSapTable=frpSapTable, frpSapPrioQueue3HitRatio=frpSapPrioQueue3HitRatio, frpSapstatCurrentLinkManagementType=frpSapstatCurrentLinkManagementType, frpSapGenerator=frpSapGenerator, frpSapSdLmMessageInterval=frpSapSdLmMessageInterval, frpSapFullEnquiryInterval=frpSapFullEnquiryInterval, frpSapLmiFlavor=frpSapLmiFlavor, frpSapstatLinkManagementState=frpSapstatLinkManagementState, frpSapstatLmiInvalidStatusDiscards=frpSapstatLmiInvalidStatusDiscards, frpSapCompanionAlias=frpSapCompanionAlias, frpCircuitExcessBurst=frpCircuitExcessBurst, frpCircuitstatRxFrames=frpCircuitstatRxFrames, frpCircuitAlias=frpCircuitAlias, frpCircuitPriorityLevel=frpCircuitPriorityLevel, frpMulticastGroupId=frpMulticastGroupId, frpCircuitDlci=frpCircuitDlci, frpMulticastEntry=frpMulticastEntry, frpSapstatLmiTimeouts=frpSapstatLmiTimeouts, frpSapstatTxQueuedDiscards=frpSapstatTxQueuedDiscards, frpSapAlias=frpSapAlias, frpSapstatRxCIRExceeds=frpSapstatRxCIRExceeds, frpCircuitCIRManagement=frpCircuitCIRManagement, frpCircuitLowPriorityBurst=frpCircuitLowPriorityBurst, frpSapstatRxLmiFrames=frpSapstatRxLmiFrames, frpCircuitstatReportedState=frpCircuitstatReportedState, frpCircuitstatFragmentationFailures=frpCircuitstatFragmentationFailures, frpCircuitstatRxCIRExceeds=frpCircuitstatRxCIRExceeds, frpCircuitstatTxOctets=frpCircuitstatTxOctets, frpSapMonitoredEvents=frpSapMonitoredEvents, frpSapstatTxLmiFrames=frpSapstatTxLmiFrames, frpReportedPvcEntry=frpReportedPvcEntry, frpCircuitExpressService=frpCircuitExpressService, frpCircuitTable=frpCircuitTable, frpMulticastTable=frpMulticastTable, frpCircuitEntry=frpCircuitEntry, frpCircuitstatAlternateRouteState=frpCircuitstatAlternateRouteState, frpReportedPvcTable=frpReportedPvcTable, frpSapstatRxMiscellaneousDiscards=frpSapstatRxMiscellaneousDiscards, frpSapErrorThreshold=frpSapErrorThreshold, frpCircuittrapTrap1=frpCircuittrapTrap1, frpCircuitMulticastGroupId=frpCircuitMulticastGroupId, frpSapInterfaceType=frpSapInterfaceType, frpSapstatRxInvalidVCDiscards=frpSapstatRxInvalidVCDiscards, frpCircuitRowStatus=frpCircuitRowStatus, frpSapstatLmiInvalidStatusEnqDiscards=frpSapstatLmiInvalidStatusEnqDiscards, frpReportedPvcLocallyConfigured=frpReportedPvcLocallyConfigured, frpCircuitstatRxSysCongestionDiscards=frpCircuitstatRxSysCongestionDiscards, frpSapMaxSupportedVCs=frpSapMaxSupportedVCs, frpCircuitControlStats=frpCircuitControlStats, frpMulticastServiceType=frpMulticastServiceType, frpMulticastSapNumber=frpMulticastSapNumber, frpCircuitAlternateDlci=frpCircuitAlternateDlci, frpMulticastRowStatus=frpMulticastRowStatus, frpCircuitstatRouteState=frpCircuitstatRouteState, frpSapGeneratorDlciNumber=frpSapGeneratorDlciNumber, frpSapFilterBitMap=frpSapFilterBitMap, frpSapstatRxUnavailOutboundDiscards=frpSapstatRxUnavailOutboundDiscards, frpSapBillingTimer=frpSapBillingTimer, frpCircuitAlternateSapNumber=frpCircuitAlternateSapNumber, frpCircuitSapNumber=frpCircuitSapNumber, frpSapstatLmiInvalidUpdStatusDiscards=frpSapstatLmiInvalidUpdStatusDiscards, frpSapPollingVerification=frpSapPollingVerification, frpSapType=frpSapType, frpCircuitFragmentationSize=frpCircuitFragmentationSize)
