#
# PySNMP MIB module Nortel-MsCarrier-MscPassport-DisdnNISMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-MsCarrier-MscPassport-DisdnNISMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:29:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
mscDataSigChan, mscDataSigChanIndex = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChan", "mscDataSigChanIndex")
StorageType, RowStatus, DisplayString, Unsigned32 = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-StandardTextualConventionsMIB", "StorageType", "RowStatus", "DisplayString", "Unsigned32")
NonReplicated, Link = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-TextualConventionsMIB", "NonReplicated", "Link")
mscPassportMIBs, = mibBuilder.importSymbols("Nortel-MsCarrier-MscPassport-UsefulDefinitionsMIB", "mscPassportMIBs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, Gauge32, MibIdentifier, Bits, NotificationType, ModuleIdentity, ObjectIdentity, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Gauge32", "MibIdentifier", "Bits", "NotificationType", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
disdnNISMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127))
mscDataSigChanNis = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13))
mscDataSigChanNisRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 1), )
if mibBuilder.loadTexts: mscDataSigChanNisRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisRowStatusTable.setDescription('This entry controls the addition and deletion of mscDataSigChanNis components.')
mscDataSigChanNisRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisRowStatusEntry.setDescription('A single entry in the table represents a single mscDataSigChanNis component.')
mscDataSigChanNisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDataSigChanNis components. These components can be added and deleted.')
mscDataSigChanNisComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDataSigChanNisStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisStorageType.setDescription('This variable represents the storage type value for the mscDataSigChanNis tables.')
mscDataSigChanNisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDataSigChanNisIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisIndex.setDescription('This variable represents the index for the mscDataSigChanNis tables.')
mscDataSigChanNisL2Table = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11), )
if mibBuilder.loadTexts: mscDataSigChanNisL2Table.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisL2Table.setDescription('This group represents the provisionable Layer 2 attributes of the Q931 CCITT protocol.')
mscDataSigChanNisL2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisL2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisL2Entry.setDescription('An entry in the mscDataSigChanNisL2Table.')
mscDataSigChanNisT23 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisT23.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisT23.setDescription('This attribute specifies the layer2 enable request timer.')
mscDataSigChanNisT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisT200.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisT200.setDescription('This attribute specifies the maximum time between a layer 2 frame and its acknowledgement')
mscDataSigChanNisN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisN200.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisN200.setDescription('This attribute specifies the maximum number of re-transmissions of a layer2 frame.')
mscDataSigChanNisT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 40)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisT203.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisT203.setDescription('This attribute specifies the maximum time that a no layer 2 traffic situation can last. Expiry triggers a check on whether the far end is a live.')
mscDataSigChanNisN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 260)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisN201.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisN201.setDescription('This attribute specifies the maximum number of octets in an information field.')
mscDataSigChanNisCircuitSwitchedK = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 11, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 632)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisCircuitSwitchedK.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisCircuitSwitchedK.setDescription('This attribute specifies the maximum number of frames for B channel use.')
mscDataSigChanNisProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 13), )
if mibBuilder.loadTexts: mscDataSigChanNisProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisProvTable.setDescription('This group defines the general options of the d-channel signalling link.')
mscDataSigChanNisProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisProvEntry.setDescription('An entry in the mscDataSigChanNisProvTable.')
mscDataSigChanNisSide = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('user')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisSide.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisSide.setDescription('This attribute specifies whether the layer 2 HDLC interface is the network or user side of the connection.')
mscDataSigChanNisOperTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 15), )
if mibBuilder.loadTexts: mscDataSigChanNisOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisOperTable.setDescription('This group provides the operational attributes for the signalling protocol.')
mscDataSigChanNisOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 15, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisOperEntry.setDescription('An entry in the mscDataSigChanNisOperTable.')
mscDataSigChanNisActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisActiveChannels.setDescription('This attribute indicates the number of currently active channels. This includes data and voice channels.')
mscDataSigChanNisPeakActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 15, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisPeakActiveChannels.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisPeakActiveChannels.setDescription('This attribute indicates the maximum number of channels that have been active on this signalling channel during the last polling period.')
mscDataSigChanNisDChanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("outOfService", 0), ("establishing", 1), ("established", 2), ("enabling", 3), ("inService", 4), ("restarting", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisDChanStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisDChanStatus.setDescription('This attribute indicates the state of the D-channel. outOfService means that there is no layer 2 or layer 3 connectivity to the PBX. establishing means that the signalling channel is attempting to stage the layer 2. established means that the layer 2 is enabled. If the signalling channel stays in the established state, then it is waiting for a restart from the PBX. enabling means that the resources for processing calls are being initialized. If the signalling channel stays in the enabling state then it is waiting for a restart acknowledgement from the PBX. inService means that the resources for processing calls are available. restarting means that the resources for call processing are being rei- initialized.')
mscDataSigChanNisToolsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 16), )
if mibBuilder.loadTexts: mscDataSigChanNisToolsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisToolsTable.setDescription('This group contains a series of operational attributes which turn on and off several kinds of tracing.')
mscDataSigChanNisToolsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 16, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisToolsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisToolsEntry.setDescription('An entry in the mscDataSigChanNisToolsTable.')
mscDataSigChanNisTracing = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 16, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisTracing.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisTracing.setDescription('This attribute defines which types of tracing are active for this signalling channel. The tracing messages are sent to the debug stream. To see the messages the agentQueue attribute in Col/debug must be greater than 0 and a Telnet NMIS session must list the debug stream in in its data streams (ex. set nmis telnet session/1 dataStreams debug). Different types of tracing can be enabled simultaneously. Note that tracing consumes additional CPU resources and will slow down call processing on a heavily loaded card. If there is message block exhaustion tracing will be suspended for a period and then automatically reenabled. An alarm is generated on tracing suspension and resumption. This mechanism protects the function processor against excessive numbers of tracing messages. Types of tracing include: protocolErrors - get details of any protocol errors which are occuring. Protocol errors are also reported in summary form as alarms. q931Summary - Summary of the Q.931 messages on the signalling link, including certain call details (calling number, called number, release codes). q931Hex - Q.931 messages displayed in hex format. Useful to determine protocol compliance in case of errors reported on local or remote ends. q931Symbolic - Q.931 messages parsed to give maximum detail. Useful for understanding content of messages flowing on the link. portHex - Messages in hex format being sent and received on the link. Description of bits: protocolErrors(0) q931Summary(1) q931Hex(2) q931Symbolic(3) portHex(4)')
mscDataSigChanNisFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2))
mscDataSigChanNisFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 1), )
if mibBuilder.loadTexts: mscDataSigChanNisFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerRowStatusTable.setDescription('This entry controls the addition and deletion of mscDataSigChanNisFramer components.')
mscDataSigChanNisFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 1, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisFramerIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerRowStatusEntry.setDescription('A single entry in the table represents a single mscDataSigChanNisFramer component.')
mscDataSigChanNisFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of mscDataSigChanNisFramer components. These components cannot be added nor deleted.')
mscDataSigChanNisFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
mscDataSigChanNisFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerStorageType.setDescription('This variable represents the storage type value for the mscDataSigChanNisFramer tables.')
mscDataSigChanNisFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: mscDataSigChanNisFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerIndex.setDescription('This variable represents the index for the mscDataSigChanNisFramer tables.')
mscDataSigChanNisFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 10), )
if mibBuilder.loadTexts: mscDataSigChanNisFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
mscDataSigChanNisFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 10, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisFramerIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerProvEntry.setDescription('An entry in the mscDataSigChanNisFramerProvTable.')
mscDataSigChanNisFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mscDataSigChanNisFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
mscDataSigChanNisFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 12), )
if mibBuilder.loadTexts: mscDataSigChanNisFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
mscDataSigChanNisFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 12, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisFramerIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerStateEntry.setDescription('An entry in the mscDataSigChanNisFramerStateTable.')
mscDataSigChanNisFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
mscDataSigChanNisFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
mscDataSigChanNisFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
mscDataSigChanNisFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13), )
if mibBuilder.loadTexts: mscDataSigChanNisFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerStatsTable.setDescription('This group contains the operational statistics data for a Framer component.')
mscDataSigChanNisFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1), ).setIndexNames((0, "Nortel-MsCarrier-MscPassport-DataIsdnMIB", "mscDataSigChanIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisIndex"), (0, "Nortel-MsCarrier-MscPassport-DisdnNISMIB", "mscDataSigChanNisFramerIndex"))
if mibBuilder.loadTexts: mscDataSigChanNisFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerStatsEntry.setDescription('An entry in the mscDataSigChanNisFramerStatsTable.')
mscDataSigChanNisFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerFrmToIf.setDescription('This attribute counts the number of frames transmitted to the link interface by Framer. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerFrmFromIf.setDescription('This attribute counts the number of frames received from the link interface by Framer. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerOctetFromIf.setDescription('The number of bytes received from the link interface by Framer.')
mscDataSigChanNisFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerAborts.setDescription('This attribute counts the total number of aborts received. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerCrcErrors.setDescription('This attribute counts the total number of frames with CRC errors. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerLrcErrors.setDescription('This attribute counts the total number of frames with LRC errors. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerNonOctetErrors.setDescription('This attribute counts the total number of frames that were non octet aligned. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerOverruns.setDescription('This attribute counts the total number of frames received from the link for which overruns occurred. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerUnderruns.setDescription('This attribute counts the total number of frames transmitted to the link for which underruns occurred. This count wraps to zero after reaching its maximum value.')
mscDataSigChanNisFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 36, 2, 1, 120, 13, 2, 13, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mscDataSigChanNisFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: mscDataSigChanNisFramerLargeFrmErrors.setDescription('This attribute counts the total number of frames received which were too large. The frame was longer than 500 bytes. This count wraps to zero after reaching its maximum value.')
disdnNISGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 1))
disdnNISGroupCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 1, 1))
disdnNISGroupCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 1, 1, 3))
disdnNISGroupCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 1, 1, 3, 2))
disdnNISCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 3))
disdnNISCapabilitiesCA = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 3, 1))
disdnNISCapabilitiesCA02 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 3, 1, 3))
disdnNISCapabilitiesCA02A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 36, 2, 2, 127, 3, 1, 3, 2))
mibBuilder.exportSymbols("Nortel-MsCarrier-MscPassport-DisdnNISMIB", mscDataSigChanNisOperTable=mscDataSigChanNisOperTable, mscDataSigChanNisFramerInterfaceName=mscDataSigChanNisFramerInterfaceName, mscDataSigChanNisDChanStatus=mscDataSigChanNisDChanStatus, mscDataSigChanNis=mscDataSigChanNis, mscDataSigChanNisFramerStatsTable=mscDataSigChanNisFramerStatsTable, mscDataSigChanNisFramer=mscDataSigChanNisFramer, mscDataSigChanNisProvTable=mscDataSigChanNisProvTable, mscDataSigChanNisFramerLargeFrmErrors=mscDataSigChanNisFramerLargeFrmErrors, disdnNISGroup=disdnNISGroup, disdnNISCapabilitiesCA02A=disdnNISCapabilitiesCA02A, mscDataSigChanNisRowStatus=mscDataSigChanNisRowStatus, mscDataSigChanNisFramerIndex=mscDataSigChanNisFramerIndex, mscDataSigChanNisL2Table=mscDataSigChanNisL2Table, mscDataSigChanNisT203=mscDataSigChanNisT203, mscDataSigChanNisFramerComponentName=mscDataSigChanNisFramerComponentName, mscDataSigChanNisFramerAdminState=mscDataSigChanNisFramerAdminState, mscDataSigChanNisFramerOperationalState=mscDataSigChanNisFramerOperationalState, mscDataSigChanNisFramerOctetFromIf=mscDataSigChanNisFramerOctetFromIf, mscDataSigChanNisFramerNonOctetErrors=mscDataSigChanNisFramerNonOctetErrors, mscDataSigChanNisTracing=mscDataSigChanNisTracing, mscDataSigChanNisActiveChannels=mscDataSigChanNisActiveChannels, mscDataSigChanNisCircuitSwitchedK=mscDataSigChanNisCircuitSwitchedK, mscDataSigChanNisFramerStateEntry=mscDataSigChanNisFramerStateEntry, mscDataSigChanNisFramerFrmFromIf=mscDataSigChanNisFramerFrmFromIf, disdnNISGroupCA=disdnNISGroupCA, mscDataSigChanNisFramerProvEntry=mscDataSigChanNisFramerProvEntry, mscDataSigChanNisFramerProvTable=mscDataSigChanNisFramerProvTable, mscDataSigChanNisT200=mscDataSigChanNisT200, disdnNISGroupCA02=disdnNISGroupCA02, mscDataSigChanNisFramerOverruns=mscDataSigChanNisFramerOverruns, mscDataSigChanNisProvEntry=mscDataSigChanNisProvEntry, mscDataSigChanNisFramerCrcErrors=mscDataSigChanNisFramerCrcErrors, mscDataSigChanNisRowStatusTable=mscDataSigChanNisRowStatusTable, mscDataSigChanNisFramerUsageState=mscDataSigChanNisFramerUsageState, mscDataSigChanNisStorageType=mscDataSigChanNisStorageType, mscDataSigChanNisN201=mscDataSigChanNisN201, mscDataSigChanNisFramerFrmToIf=mscDataSigChanNisFramerFrmToIf, mscDataSigChanNisFramerRowStatusEntry=mscDataSigChanNisFramerRowStatusEntry, mscDataSigChanNisFramerUnderruns=mscDataSigChanNisFramerUnderruns, mscDataSigChanNisOperEntry=mscDataSigChanNisOperEntry, mscDataSigChanNisFramerStorageType=mscDataSigChanNisFramerStorageType, mscDataSigChanNisRowStatusEntry=mscDataSigChanNisRowStatusEntry, mscDataSigChanNisL2Entry=mscDataSigChanNisL2Entry, disdnNISCapabilities=disdnNISCapabilities, mscDataSigChanNisN200=mscDataSigChanNisN200, mscDataSigChanNisT23=mscDataSigChanNisT23, mscDataSigChanNisIndex=mscDataSigChanNisIndex, mscDataSigChanNisToolsEntry=mscDataSigChanNisToolsEntry, mscDataSigChanNisFramerAborts=mscDataSigChanNisFramerAborts, disdnNISCapabilitiesCA02=disdnNISCapabilitiesCA02, disdnNISCapabilitiesCA=disdnNISCapabilitiesCA, mscDataSigChanNisFramerStateTable=mscDataSigChanNisFramerStateTable, disdnNISGroupCA02A=disdnNISGroupCA02A, mscDataSigChanNisFramerStatsEntry=mscDataSigChanNisFramerStatsEntry, mscDataSigChanNisFramerLrcErrors=mscDataSigChanNisFramerLrcErrors, mscDataSigChanNisFramerRowStatusTable=mscDataSigChanNisFramerRowStatusTable, mscDataSigChanNisFramerRowStatus=mscDataSigChanNisFramerRowStatus, mscDataSigChanNisSide=mscDataSigChanNisSide, mscDataSigChanNisComponentName=mscDataSigChanNisComponentName, disdnNISMIB=disdnNISMIB, mscDataSigChanNisPeakActiveChannels=mscDataSigChanNisPeakActiveChannels, mscDataSigChanNisToolsTable=mscDataSigChanNisToolsTable)
