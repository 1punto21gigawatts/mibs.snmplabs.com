#
# PySNMP MIB module MARVELL-FIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MARVELL-FIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:09:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
MacAddress, = mibBuilder.importSymbols("BRIDGE-MIB", "MacAddress")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
rnd, = mibBuilder.importSymbols("RADLAN-MIB", "rnd")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Counter32, IpAddress, Counter64, ObjectIdentity, Bits, iso, Unsigned32, MibIdentifier, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Counter32", "IpAddress", "Counter64", "ObjectIdentity", "Bits", "iso", "Unsigned32", "MibIdentifier", "Integer32", "NotificationType")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
rlFip = ModuleIdentity((1, 3, 6, 1, 4, 1, 89, 205))
rlFip.setRevisions(('2007-11-07 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rlFip.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: rlFip.setLastUpdated('200711070000Z')
if mibBuilder.loadTexts: rlFip.setOrganization('Marvell Semiconductor, Inc.')
if mibBuilder.loadTexts: rlFip.setContactInfo('www.marvell.com')
if mibBuilder.loadTexts: rlFip.setDescription('The private MIB module definition for FIP MIB.')
class RlFipIfType(TextualConvention, Integer32):
    description = 'Each port may be in one of the following states: Non-Snooping - The port forwards the FCoE and FIP traffic. Snooping is disabled. Non-FCoE - Discards all FCoE and FIP traffic received on the port. FCoE - A port that is connected to FC Forwarders and/or Enodes. ENODE - A port that is connected to FC Enode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("non-snooping", 1), ("non-fcoe", 2), ("fcoe", 3), ("enode", 4))

rlFipIfTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 1), )
if mibBuilder.loadTexts: rlFipIfTable.setStatus('current')
if mibBuilder.loadTexts: rlFipIfTable.setDescription('This table used to configure Global FCF MAC addresses.')
rlFipIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 1, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipIfIndex"))
if mibBuilder.loadTexts: rlFipIfEntry.setStatus('current')
if mibBuilder.loadTexts: rlFipIfEntry.setDescription('FIP Interface Table.')
rlFipIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlFipIfIndex.setStatus('current')
if mibBuilder.loadTexts: rlFipIfIndex.setDescription('Interface index.')
rlFipIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 1, 1, 2), RlFipIfType().clone('enode')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipIfType.setStatus('current')
if mibBuilder.loadTexts: rlFipIfType.setDescription('Interface type.')
rlFipIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: rlFipIfRowStatus.setDescription("The status of the entry. It's used to add/delete the entries")
rlFipGlobalFcfListTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 2), )
if mibBuilder.loadTexts: rlFipGlobalFcfListTable.setStatus('current')
if mibBuilder.loadTexts: rlFipGlobalFcfListTable.setDescription('This table used to configure Global FCF MAC addresses.')
rlFipGlobalFcfListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 2, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipGlobalFcfListMac"))
if mibBuilder.loadTexts: rlFipGlobalFcfListEntry.setStatus('current')
if mibBuilder.loadTexts: rlFipGlobalFcfListEntry.setDescription('Global FCF MAC address.')
rlFipGlobalFcfListMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: rlFipGlobalFcfListMac.setStatus('current')
if mibBuilder.loadTexts: rlFipGlobalFcfListMac.setDescription('Global FCF MAC address.')
rlFipGlobalFcfListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipGlobalFcfListStatus.setStatus('current')
if mibBuilder.loadTexts: rlFipGlobalFcfListStatus.setDescription("The status of the entry. It's used to add/delete the entries")
rlFipStaticFcoeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 3), )
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelTable.setStatus('current')
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelTable.setDescription('This table used to configure Fip Static FCOE Tunnels.')
rlFipStaticFcoeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 3, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipStaticFcoeTunnelPort"), (0, "MARVELL-FIP-MIB", "rlFipStaticFcoeTunnelSrcMac"), (0, "MARVELL-FIP-MIB", "rlFipStaticFcoeTunnelDstMac"))
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelEntry.setDescription('FIP Static FCOE Tunnel.')
rlFipStaticFcoeTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelPort.setStatus('current')
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelPort.setDescription('FCOE tunnel port.')
rlFipStaticFcoeTunnelSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelSrcMac.setStatus('current')
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelSrcMac.setDescription('FCOE tunnel Source MAC address.')
rlFipStaticFcoeTunnelDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 3), MacAddress())
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelDstMac.setStatus('current')
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelDstMac.setDescription('FCOE tunnel Destination MAC address.')
rlFipStaticFcoeTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: rlFipStaticFcoeTunnelStatus.setDescription("The status of the entry. It's used to add/delete the entries")
rlFipActiveFcoeTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 89, 205, 4), )
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelTable.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelTable.setDescription('This table used to show Fip Active FCOE Tunnels.')
rlFipActiveFcoeTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 89, 205, 4, 1), ).setIndexNames((0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelPort"), (0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelSrcMac"), (0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelDstMac"), (0, "MARVELL-FIP-MIB", "rlFipActiveFcoeTunnelSid"))
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelEntry.setDescription('FIP Active FCOE Tunnel.')
rlFipActiveFcoeTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelPort.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelPort.setDescription('FCOE tunnel port.')
rlFipActiveFcoeTunnelSrcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 2), MacAddress())
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelSrcMac.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelSrcMac.setDescription('FCOE tunnel Source MAC address.')
rlFipActiveFcoeTunnelDstMac = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 3), MacAddress())
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelDstMac.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelDstMac.setDescription('FCOE tunnel Destination MAC address.')
rlFipActiveFcoeTunnelSid = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 3)))
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelSid.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelSid.setDescription('FCOE Source ID.')
rlFipActiveFcoeTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 89, 205, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelStatus.setStatus('current')
if mibBuilder.loadTexts: rlFipActiveFcoeTunnelStatus.setDescription("The status of the entry. It's used to add/delete the entries")
rlFipEnableScalar = MibScalar((1, 3, 6, 1, 4, 1, 89, 205, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipEnableScalar.setStatus('current')
if mibBuilder.loadTexts: rlFipEnableScalar.setDescription('FIP Enable/Disable.')
rlFipClearDynamicEntiesScalar = MibScalar((1, 3, 6, 1, 4, 1, 89, 205, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipClearDynamicEntiesScalar.setStatus('current')
if mibBuilder.loadTexts: rlFipClearDynamicEntiesScalar.setDescription('Clear dynamic tunnels.')
rlFipGlobalFcfFilteringEnableScalar = MibScalar((1, 3, 6, 1, 4, 1, 89, 205, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlFipGlobalFcfFilteringEnableScalar.setStatus('current')
if mibBuilder.loadTexts: rlFipGlobalFcfFilteringEnableScalar.setDescription('Enable/Disable filtering of packets based on configured list of MAC addresses of FCFs.')
mibBuilder.exportSymbols("MARVELL-FIP-MIB", rlFipIfIndex=rlFipIfIndex, rlFipActiveFcoeTunnelDstMac=rlFipActiveFcoeTunnelDstMac, rlFipActiveFcoeTunnelSrcMac=rlFipActiveFcoeTunnelSrcMac, rlFipActiveFcoeTunnelPort=rlFipActiveFcoeTunnelPort, rlFipGlobalFcfListMac=rlFipGlobalFcfListMac, RlFipIfType=RlFipIfType, rlFipIfTable=rlFipIfTable, rlFipGlobalFcfListTable=rlFipGlobalFcfListTable, rlFipIfEntry=rlFipIfEntry, rlFipIfRowStatus=rlFipIfRowStatus, rlFipActiveFcoeTunnelSid=rlFipActiveFcoeTunnelSid, rlFipStaticFcoeTunnelTable=rlFipStaticFcoeTunnelTable, rlFipStaticFcoeTunnelStatus=rlFipStaticFcoeTunnelStatus, rlFipIfType=rlFipIfType, rlFipActiveFcoeTunnelStatus=rlFipActiveFcoeTunnelStatus, rlFipEnableScalar=rlFipEnableScalar, rlFipActiveFcoeTunnelTable=rlFipActiveFcoeTunnelTable, rlFipStaticFcoeTunnelDstMac=rlFipStaticFcoeTunnelDstMac, rlFip=rlFip, PYSNMP_MODULE_ID=rlFip, rlFipClearDynamicEntiesScalar=rlFipClearDynamicEntiesScalar, rlFipGlobalFcfFilteringEnableScalar=rlFipGlobalFcfFilteringEnableScalar, rlFipActiveFcoeTunnelEntry=rlFipActiveFcoeTunnelEntry, rlFipStaticFcoeTunnelEntry=rlFipStaticFcoeTunnelEntry, rlFipGlobalFcfListStatus=rlFipGlobalFcfListStatus, rlFipStaticFcoeTunnelPort=rlFipStaticFcoeTunnelPort, rlFipGlobalFcfListEntry=rlFipGlobalFcfListEntry, rlFipStaticFcoeTunnelSrcMac=rlFipStaticFcoeTunnelSrcMac)
