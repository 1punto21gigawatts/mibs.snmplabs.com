#
# PySNMP MIB module HH3C-AAL5-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-AAL5-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:25:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
hh3cAAL5, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cAAL5")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibIdentifier, Integer32, IpAddress, ObjectIdentity, Bits, Gauge32, Unsigned32, NotificationType, Counter32, TimeTicks, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "IpAddress", "ObjectIdentity", "Bits", "Gauge32", "Unsigned32", "NotificationType", "Counter32", "TimeTicks", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hh3cAAL5MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1))
hh3cAAL5MIB.setRevisions(('2004-11-04 13:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cAAL5MIB.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cAAL5MIB.setLastUpdated('200411041350Z')
if mibBuilder.loadTexts: hh3cAAL5MIB.setOrganization('Hangzhou H3C Technologies Co., Ltd.')
if mibBuilder.loadTexts: hh3cAAL5MIB.setContactInfo('PLAT Team Hangzhou H3C Technologies Co.,Ltd. Shang-Di Information Industry Base, Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085')
if mibBuilder.loadTexts: hh3cAAL5MIB.setDescription('This MIB file provides AAL5 specific information that are excluded by RFC 1695 ')
hh3cAal5MIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1))
hh3cAal5MIBTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 0))
hh3cAal5VccTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cAal5VccTable.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccTable.setDescription('This table extends AAL5 VCC performance parameters which definded in aal5VccEntry of RFC1695.')
hh3cAal5VccEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-AAL5-MIB", "hh3cAal5VccVpi"), (0, "HH3C-AAL5-MIB", "hh3cAal5VccVci"))
if mibBuilder.loadTexts: hh3cAal5VccEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccEntry.setDescription('This list contains the additional AAL5 VCC performance parameters which are not definded in aal5VccEntry of RFC1695.')
hh3cAal5VccVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: hh3cAal5VccVpi.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccVpi.setDescription('The VPI value of the AAL5 VCC.')
hh3cAal5VccVci = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: hh3cAal5VccVci.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccVci.setDescription('The VCI value of the AAL5 VCC.')
hh3cAal5VccInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAal5VccInPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccInPkts.setDescription('The number of AAL5 CPCS PDUs received.')
hh3cAal5VccOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAal5VccOutPkts.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccOutPkts.setDescription('The number of AAL5 CPCS PDUs transmitted.')
hh3cAal5VccInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAal5VccInOctets.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccInOctets.setDescription('The number of AAL5 CPCS PDU octets received.')
hh3cAal5VccOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAal5VccOutOctets.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccOutOctets.setDescription('The number of AAL5 CPCS PDU octets transmitted.')
hh3cAal5VccState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("active", 2), ("inactive", 3))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAal5VccState.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccState.setDescription("Indicates whether the particular virtual circuit is operational. 'Active' indicates the particular virtual circuit is operational. 'Inactive' indicates the circuit is temporarily disabled. 'Invalid' indicates the circuit is deleted")
hh3cAal5VccStateChange = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 0, 1)).setObjects(("HH3C-AAL5-MIB", "hh3cAal5VccState"))
if mibBuilder.loadTexts: hh3cAal5VccStateChange.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5VccStateChange.setDescription('The status of AAL5 VCC.')
hh3cAal5MIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 3))
hh3cAal5MIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 3, 1))
hh3cAal5MIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 3, 2))
hh3cAal5MIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 3, 1, 1)).setObjects(("HH3C-AAL5-MIB", "hh3cAal5MIBGroup"), ("HH3C-AAL5-MIB", "hh3cAal5NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cAal5MIBCompliance = hh3cAal5MIBCompliance.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5MIBCompliance.setDescription('The compliance statement.')
hh3cAal5MIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 3, 2, 1)).setObjects(("HH3C-AAL5-MIB", "hh3cAal5VccInPkts"), ("HH3C-AAL5-MIB", "hh3cAal5VccOutPkts"), ("HH3C-AAL5-MIB", "hh3cAal5VccInOctets"), ("HH3C-AAL5-MIB", "hh3cAal5VccOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cAal5MIBGroup = hh3cAal5MIBGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5MIBGroup.setDescription('A collection of objects.')
hh3cAal5NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 2, 21, 1, 3, 2, 2)).setObjects(("HH3C-AAL5-MIB", "hh3cAal5VccStateChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cAal5NotificationGroup = hh3cAal5NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cAal5NotificationGroup.setDescription('Traps which may be used to enhance event driven management of the interface.')
mibBuilder.exportSymbols("HH3C-AAL5-MIB", PYSNMP_MODULE_ID=hh3cAAL5MIB, hh3cAal5MIBCompliances=hh3cAal5MIBCompliances, hh3cAal5MIBGroups=hh3cAal5MIBGroups, hh3cAal5VccVpi=hh3cAal5VccVpi, hh3cAal5MIBCompliance=hh3cAal5MIBCompliance, hh3cAal5NotificationGroup=hh3cAal5NotificationGroup, hh3cAAL5MIB=hh3cAAL5MIB, hh3cAal5VccStateChange=hh3cAal5VccStateChange, hh3cAal5VccOutPkts=hh3cAal5VccOutPkts, hh3cAal5MIBGroup=hh3cAal5MIBGroup, hh3cAal5VccTable=hh3cAal5VccTable, hh3cAal5VccEntry=hh3cAal5VccEntry, hh3cAal5MIBTraps=hh3cAal5MIBTraps, hh3cAal5VccOutOctets=hh3cAal5VccOutOctets, hh3cAal5VccInPkts=hh3cAal5VccInPkts, hh3cAal5MIBObjects=hh3cAal5MIBObjects, hh3cAal5MIBConformance=hh3cAal5MIBConformance, hh3cAal5VccVci=hh3cAal5VccVci, hh3cAal5VccState=hh3cAal5VccState, hh3cAal5VccInOctets=hh3cAal5VccInOctets)
